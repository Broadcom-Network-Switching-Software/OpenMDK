#ifndef __CDK_XGSM_CMIC_H__
#define __CDK_XGSM_CMIC_H__
/*******************************************************************************
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated from the registers file.
 * Edits to this file will be lost when it is regenerated.
 *
 * This software is governed by the Broadcom Switch APIs license.
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenMDK/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 *
 * Definition file for the ALL.
 * This file provides all basic definitions required to program the ALL.
 */

#include <cdk/cdk_string.h>
#include <cdk/cdk_field.h>
#include <cdk/arch/xgsm_reg.h>
#include <cdk/arch/xgsm_mem.h>

/*******************************************************************************
 *
 *                    CHIP DEFINITIONS BEGIN HERE
 */



/*******************************************************************************
 * REGISTER:  CMIC_CMC_COS_CTRL_RX_0
 * BLOCKS:   CMIC
 * DESC:     When COS_RX_EN of CMIC_CONFIG is set, this register
indicates which cos are admitted by channel. This register
gives only the LS byte.

 * SIZE:     32
 */
#define CMIC_CMC_COS_CTRL_RX_0r 0x00031168

#define CMIC_CMC_COS_CTRL_RX_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_COS_CTRL_RX_0.
 */
typedef union CMIC_CMC_COS_CTRL_RX_0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_cos_ctrl_rx_0[1];
	uint32_t _cmic_cmc_cos_ctrl_rx_0;
} CMIC_CMC_COS_CTRL_RX_0r_t;

#define CMIC_CMC_COS_CTRL_RX_0r_CLR(r) (r).cmic_cmc_cos_ctrl_rx_0[0] = 0
#define CMIC_CMC_COS_CTRL_RX_0r_SET(r,d) (r).cmic_cmc_cos_ctrl_rx_0[0] = d
#define CMIC_CMC_COS_CTRL_RX_0r_GET(r) (r).cmic_cmc_cos_ctrl_rx_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_COS_CTRL_RX_0r_COS_BMPf_GET(r) ((r).cmic_cmc_cos_ctrl_rx_0[0])
#define CMIC_CMC_COS_CTRL_RX_0r_COS_BMPf_SET(r,f) (r).cmic_cmc_cos_ctrl_rx_0[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_COS_CTRL_RX_0.
 */
#define READ_CMIC_CMC_COS_CTRL_RX_0r(u,i,r) CDK_XGSM_CMC_READ(u,CMIC_CMC_COS_CTRL_RX_0r+(4*(i)*2),r._cmic_cmc_cos_ctrl_rx_0)
#define WRITE_CMIC_CMC_COS_CTRL_RX_0r(u,i,r) CDK_XGSM_CMC_WRITE(u,CMIC_CMC_COS_CTRL_RX_0r+(4*(i)*2),r._cmic_cmc_cos_ctrl_rx_0)

/*******************************************************************************
 * End of 'CMIC_CMC_COS_CTRL_RX_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_COS_CTRL_RX_1
 * BLOCKS:   CMIC
 * DESC:     When COS_RX_EN of CMIC_CONFIG is set, this register
indicates which cos are admitted by channel. This register
gives only the LS byte.

 * SIZE:     32
 */
#define CMIC_CMC_COS_CTRL_RX_1r 0x0003116c

#define CMIC_CMC_COS_CTRL_RX_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_COS_CTRL_RX_1.
 */
typedef union CMIC_CMC_COS_CTRL_RX_1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_cos_ctrl_rx_1[1];
	uint32_t _cmic_cmc_cos_ctrl_rx_1;
} CMIC_CMC_COS_CTRL_RX_1r_t;

#define CMIC_CMC_COS_CTRL_RX_1r_CLR(r) (r).cmic_cmc_cos_ctrl_rx_1[0] = 0
#define CMIC_CMC_COS_CTRL_RX_1r_SET(r,d) (r).cmic_cmc_cos_ctrl_rx_1[0] = d
#define CMIC_CMC_COS_CTRL_RX_1r_GET(r) (r).cmic_cmc_cos_ctrl_rx_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_COS_CTRL_RX_1r_COS_BMPf_GET(r) ((r).cmic_cmc_cos_ctrl_rx_1[0])
#define CMIC_CMC_COS_CTRL_RX_1r_COS_BMPf_SET(r,f) (r).cmic_cmc_cos_ctrl_rx_1[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_COS_CTRL_RX_1.
 */
#define READ_CMIC_CMC_COS_CTRL_RX_1r(u,i,r) CDK_XGSM_CMC_READ(u,CMIC_CMC_COS_CTRL_RX_1r+(4*(i)*2),r._cmic_cmc_cos_ctrl_rx_1)
#define WRITE_CMIC_CMC_COS_CTRL_RX_1r(u,i,r) CDK_XGSM_CMC_WRITE(u,CMIC_CMC_COS_CTRL_RX_1r+(4*(i)*2),r._cmic_cmc_cos_ctrl_rx_1)

/*******************************************************************************
 * End of 'CMIC_CMC_COS_CTRL_RX_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_DMA_CTRL
 * BLOCKS:   CMIC
 * DESC:     DMA Control Register
 * SIZE:     32
 */
#define CMIC_CMC_DMA_CTRLr 0x00031140

#define CMIC_CMC_DMA_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_DMA_CTRL.
 */
typedef union CMIC_CMC_DMA_CTRLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_dma_ctrl[1];
	uint32_t _cmic_cmc_dma_ctrl;
} CMIC_CMC_DMA_CTRLr_t;

#define CMIC_CMC_DMA_CTRLr_CLR(r) (r).cmic_cmc_dma_ctrl[0] = 0
#define CMIC_CMC_DMA_CTRLr_SET(r,d) (r).cmic_cmc_dma_ctrl[0] = d
#define CMIC_CMC_DMA_CTRLr_GET(r) (r).cmic_cmc_dma_ctrl[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_DMA_CTRLr_DIRECTIONf_GET(r) (((r).cmic_cmc_dma_ctrl[0]) & 0x1)
#define CMIC_CMC_DMA_CTRLr_DIRECTIONf_SET(r,f) (r).cmic_cmc_dma_ctrl[0]=(((r).cmic_cmc_dma_ctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_DMA_CTRLr_DMA_ENf_GET(r) ((((r).cmic_cmc_dma_ctrl[0]) >> 1) & 0x1)
#define CMIC_CMC_DMA_CTRLr_DMA_ENf_SET(r,f) (r).cmic_cmc_dma_ctrl[0]=(((r).cmic_cmc_dma_ctrl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_DMA_CTRLr_ABORT_DMAf_GET(r) ((((r).cmic_cmc_dma_ctrl[0]) >> 2) & 0x1)
#define CMIC_CMC_DMA_CTRLr_ABORT_DMAf_SET(r,f) (r).cmic_cmc_dma_ctrl[0]=(((r).cmic_cmc_dma_ctrl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC_DMA_CTRLr_SEL_INTR_ON_DESC_OR_PKTf_GET(r) ((((r).cmic_cmc_dma_ctrl[0]) >> 3) & 0x1)
#define CMIC_CMC_DMA_CTRLr_SEL_INTR_ON_DESC_OR_PKTf_SET(r,f) (r).cmic_cmc_dma_ctrl[0]=(((r).cmic_cmc_dma_ctrl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC_DMA_CTRLr_PKTDMA_ENDIANESSf_GET(r) ((((r).cmic_cmc_dma_ctrl[0]) >> 4) & 0x1)
#define CMIC_CMC_DMA_CTRLr_PKTDMA_ENDIANESSf_SET(r,f) (r).cmic_cmc_dma_ctrl[0]=(((r).cmic_cmc_dma_ctrl[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC_DMA_CTRLr_DESC_ENDIANESSf_GET(r) ((((r).cmic_cmc_dma_ctrl[0]) >> 5) & 0x1)
#define CMIC_CMC_DMA_CTRLr_DESC_ENDIANESSf_SET(r,f) (r).cmic_cmc_dma_ctrl[0]=(((r).cmic_cmc_dma_ctrl[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC_DMA_CTRLr_DROP_RX_PKT_ON_CHAIN_ENDf_GET(r) ((((r).cmic_cmc_dma_ctrl[0]) >> 6) & 0x1)
#define CMIC_CMC_DMA_CTRLr_DROP_RX_PKT_ON_CHAIN_ENDf_SET(r,f) (r).cmic_cmc_dma_ctrl[0]=(((r).cmic_cmc_dma_ctrl[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC_DMA_CTRLr_RLD_STS_UPD_DISf_GET(r) ((((r).cmic_cmc_dma_ctrl[0]) >> 7) & 0x1)
#define CMIC_CMC_DMA_CTRLr_RLD_STS_UPD_DISf_SET(r,f) (r).cmic_cmc_dma_ctrl[0]=(((r).cmic_cmc_dma_ctrl[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))

/*
 * These macros can be used to access CMIC_CMC_DMA_CTRL.
 */
#define READ_CMIC_CMC_DMA_CTRLr(u,i,r) CDK_XGSM_CMC_READ(u,CMIC_CMC_DMA_CTRLr+(4*(i)),r._cmic_cmc_dma_ctrl)
#define WRITE_CMIC_CMC_DMA_CTRLr(u,i,r) CDK_XGSM_CMC_WRITE(u,CMIC_CMC_DMA_CTRLr+(4*(i)),r._cmic_cmc_dma_ctrl)

/*******************************************************************************
 * End of 'CMIC_CMC_DMA_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_DMA_DESC
 * BLOCKS:   CMIC
 * DESC:     DMA Channel 0 Descriptor Address
 * SIZE:     32
 */
#define CMIC_CMC_DMA_DESCr 0x00031158

#define CMIC_CMC_DMA_DESCr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_DMA_DESC.
 */
typedef union CMIC_CMC_DMA_DESCr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_dma_desc[1];
	uint32_t _cmic_cmc_dma_desc;
} CMIC_CMC_DMA_DESCr_t;

#define CMIC_CMC_DMA_DESCr_CLR(r) (r).cmic_cmc_dma_desc[0] = 0
#define CMIC_CMC_DMA_DESCr_SET(r,d) (r).cmic_cmc_dma_desc[0] = d
#define CMIC_CMC_DMA_DESCr_GET(r) (r).cmic_cmc_dma_desc[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_DMA_DESCr_ADDRf_GET(r) ((r).cmic_cmc_dma_desc[0])
#define CMIC_CMC_DMA_DESCr_ADDRf_SET(r,f) (r).cmic_cmc_dma_desc[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_DMA_DESC.
 */
#define READ_CMIC_CMC_DMA_DESCr(u,i,r) CDK_XGSM_CMC_READ(u,CMIC_CMC_DMA_DESCr+(4*(i)),r._cmic_cmc_dma_desc)
#define WRITE_CMIC_CMC_DMA_DESCr(u,i,r) CDK_XGSM_CMC_WRITE(u,CMIC_CMC_DMA_DESCr+(4*(i)),r._cmic_cmc_dma_desc)

/*******************************************************************************
 * End of 'CMIC_CMC_DMA_DESCr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_DMA_STAT
 * BLOCKS:   CMIC
 * DESC:     DMA Status and Control Register
 * SIZE:     32
 */
#define CMIC_CMC_DMA_STATr 0x00031150

#define CMIC_CMC_DMA_STATr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_DMA_STAT.
 */
typedef union CMIC_CMC_DMA_STATr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_dma_stat[1];
	uint32_t _cmic_cmc_dma_stat;
} CMIC_CMC_DMA_STATr_t;

#define CMIC_CMC_DMA_STATr_CLR(r) (r).cmic_cmc_dma_stat[0] = 0
#define CMIC_CMC_DMA_STATr_SET(r,d) (r).cmic_cmc_dma_stat[0] = d
#define CMIC_CMC_DMA_STATr_GET(r) (r).cmic_cmc_dma_stat[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_DMA_STATr_CHAIN_DONEf_GET(r) (((r).cmic_cmc_dma_stat[0]) & 0xf)
#define CMIC_CMC_DMA_STATr_CHAIN_DONEf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define CMIC_CMC_DMA_STATr_CH0_CHAIN_DONEf_GET(r) (((r).cmic_cmc_dma_stat[0]) & 0x1)
#define CMIC_CMC_DMA_STATr_CH0_CHAIN_DONEf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_DMA_STATr_CH1_CHAIN_DONEf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 1) & 0x1)
#define CMIC_CMC_DMA_STATr_CH1_CHAIN_DONEf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_DMA_STATr_CH2_CHAIN_DONEf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 2) & 0x1)
#define CMIC_CMC_DMA_STATr_CH2_CHAIN_DONEf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC_DMA_STATr_CH3_CHAIN_DONEf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 3) & 0x1)
#define CMIC_CMC_DMA_STATr_CH3_CHAIN_DONEf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC_DMA_STATr_DESC_DONEf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 4) & 0xf)
#define CMIC_CMC_DMA_STATr_DESC_DONEf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define CMIC_CMC_DMA_STATr_CH0_DESC_DONEf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 4) & 0x1)
#define CMIC_CMC_DMA_STATr_CH0_DESC_DONEf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC_DMA_STATr_CH1_DESC_DONEf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 5) & 0x1)
#define CMIC_CMC_DMA_STATr_CH1_DESC_DONEf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC_DMA_STATr_CH2_DESC_DONEf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 6) & 0x1)
#define CMIC_CMC_DMA_STATr_CH2_DESC_DONEf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC_DMA_STATr_CH3_DESC_DONEf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 7) & 0x1)
#define CMIC_CMC_DMA_STATr_CH3_DESC_DONEf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC_DMA_STATr_DMA_ACTIVEf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 8) & 0xf)
#define CMIC_CMC_DMA_STATr_DMA_ACTIVEf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8))
#define CMIC_CMC_DMA_STATr_CH0_DMA_ACTIVEf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 8) & 0x1)
#define CMIC_CMC_DMA_STATr_CH0_DMA_ACTIVEf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC_DMA_STATr_CH1_DMA_ACTIVEf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 9) & 0x1)
#define CMIC_CMC_DMA_STATr_CH1_DMA_ACTIVEf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC_DMA_STATr_CH2_DMA_ACTIVEf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 10) & 0x1)
#define CMIC_CMC_DMA_STATr_CH2_DMA_ACTIVEf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC_DMA_STATr_CH3_DMA_ACTIVEf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 11) & 0x1)
#define CMIC_CMC_DMA_STATr_CH3_DMA_ACTIVEf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC_DMA_STATr_STWT_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 12) & 0xf)
#define CMIC_CMC_DMA_STATr_STWT_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define CMIC_CMC_DMA_STATr_CH0_STWT_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 12) & 0x1)
#define CMIC_CMC_DMA_STATr_CH0_STWT_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC_DMA_STATr_CH1_STWT_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 13) & 0x1)
#define CMIC_CMC_DMA_STATr_CH1_STWT_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define CMIC_CMC_DMA_STATr_CH2_STWT_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 14) & 0x1)
#define CMIC_CMC_DMA_STATr_CH2_STWT_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define CMIC_CMC_DMA_STATr_CH3_STWT_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 15) & 0x1)
#define CMIC_CMC_DMA_STATr_CH3_STWT_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define CMIC_CMC_DMA_STATr_PKTWRRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 16) & 0xf)
#define CMIC_CMC_DMA_STATr_PKTWRRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0xf << 16)) | ((((uint32_t)f) & 0xf) << 16))
#define CMIC_CMC_DMA_STATr_CH0_PKTWRRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 16) & 0x1)
#define CMIC_CMC_DMA_STATr_CH0_PKTWRRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 16)) | ((((uint32_t)f) & 0x1) << 16))
#define CMIC_CMC_DMA_STATr_CH1_PKTWRRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 17) & 0x1)
#define CMIC_CMC_DMA_STATr_CH1_PKTWRRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 17)) | ((((uint32_t)f) & 0x1) << 17))
#define CMIC_CMC_DMA_STATr_CH2_PKTWRRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 18) & 0x1)
#define CMIC_CMC_DMA_STATr_CH2_PKTWRRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 18)) | ((((uint32_t)f) & 0x1) << 18))
#define CMIC_CMC_DMA_STATr_CH3_PKTWRRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 19) & 0x1)
#define CMIC_CMC_DMA_STATr_CH3_PKTWRRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define CMIC_CMC_DMA_STATr_DESCRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 20) & 0xf)
#define CMIC_CMC_DMA_STATr_DESCRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0xf << 20)) | ((((uint32_t)f) & 0xf) << 20))
#define CMIC_CMC_DMA_STATr_CH0_DESCRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 20) & 0x1)
#define CMIC_CMC_DMA_STATr_CH0_DESCRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC_DMA_STATr_CH1_DESCRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 21) & 0x1)
#define CMIC_CMC_DMA_STATr_CH1_DESCRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC_DMA_STATr_CH2_DESCRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 22) & 0x1)
#define CMIC_CMC_DMA_STATr_CH2_DESCRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 22)) | ((((uint32_t)f) & 0x1) << 22))
#define CMIC_CMC_DMA_STATr_CH3_DESCRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 23) & 0x1)
#define CMIC_CMC_DMA_STATr_CH3_DESCRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 23)) | ((((uint32_t)f) & 0x1) << 23))
#define CMIC_CMC_DMA_STATr_STWR_ECC_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 24) & 0xf)
#define CMIC_CMC_DMA_STATr_STWR_ECC_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0xf << 24)) | ((((uint32_t)f) & 0xf) << 24))
#define CMIC_CMC_DMA_STATr_CH0_STWR_ECC_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 24) & 0x1)
#define CMIC_CMC_DMA_STATr_CH0_STWR_ECC_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC_DMA_STATr_CH1_STWR_ECC_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 25) & 0x1)
#define CMIC_CMC_DMA_STATr_CH1_STWR_ECC_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))
#define CMIC_CMC_DMA_STATr_CH2_STWR_ECC_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 26) & 0x1)
#define CMIC_CMC_DMA_STATr_CH2_STWR_ECC_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))
#define CMIC_CMC_DMA_STATr_CH3_STWR_ECC_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 27) & 0x1)
#define CMIC_CMC_DMA_STATr_CH3_STWR_ECC_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_CMC_DMA_STATr_PKTWR_ECC_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 28) & 0xf)
#define CMIC_CMC_DMA_STATr_PKTWR_ECC_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0xf << 28)) | ((((uint32_t)f) & 0xf) << 28))
#define CMIC_CMC_DMA_STATr_CH0_PKTWR_ECC_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 28) & 0x1)
#define CMIC_CMC_DMA_STATr_CH0_PKTWR_ECC_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_CMC_DMA_STATr_CH1_PKTWR_ECC_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 29) & 0x1)
#define CMIC_CMC_DMA_STATr_CH1_PKTWR_ECC_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))
#define CMIC_CMC_DMA_STATr_CH2_PKTWR_ECC_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 30) & 0x1)
#define CMIC_CMC_DMA_STATr_CH2_PKTWR_ECC_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 30)) | ((((uint32_t)f) & 0x1) << 30))
#define CMIC_CMC_DMA_STATr_CH3_PKTWR_ECC_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 31) & 0x1)
#define CMIC_CMC_DMA_STATr_CH3_PKTWR_ECC_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*
 * These macros can be used to access CMIC_CMC_DMA_STAT.
 */
#define READ_CMIC_CMC_DMA_STATr(u,r) CDK_XGSM_CMC_READ(u,CMIC_CMC_DMA_STATr,r._cmic_cmc_dma_stat)
#define WRITE_CMIC_CMC_DMA_STATr(u,r) CDK_XGSM_CMC_WRITE(u,CMIC_CMC_DMA_STATr,r._cmic_cmc_dma_stat)

/*******************************************************************************
 * End of 'CMIC_CMC_DMA_STATr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_DMA_STAT_CLR
 * BLOCKS:   CMIC
 * DESC:     Desc read complete information in CMIC_CMC_DMA_STAT can be cleared using this register.


 * SIZE:     32
 */
#define CMIC_CMC_DMA_STAT_CLRr 0x000311a4

#define CMIC_CMC_DMA_STAT_CLRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_DMA_STAT_CLR.
 */
typedef union CMIC_CMC_DMA_STAT_CLRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_dma_stat_clr[1];
	uint32_t _cmic_cmc_dma_stat_clr;
} CMIC_CMC_DMA_STAT_CLRr_t;

#define CMIC_CMC_DMA_STAT_CLRr_CLR(r) (r).cmic_cmc_dma_stat_clr[0] = 0
#define CMIC_CMC_DMA_STAT_CLRr_SET(r,d) (r).cmic_cmc_dma_stat_clr[0] = d
#define CMIC_CMC_DMA_STAT_CLRr_GET(r) (r).cmic_cmc_dma_stat_clr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_DMA_STAT_CLRr_DESCRD_CMPLT_CLRf_GET(r) (((r).cmic_cmc_dma_stat_clr[0]) & 0xf)
#define CMIC_CMC_DMA_STAT_CLRr_DESCRD_CMPLT_CLRf_SET(r,f) (r).cmic_cmc_dma_stat_clr[0]=(((r).cmic_cmc_dma_stat_clr[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define CMIC_CMC_DMA_STAT_CLRr_CH0_DESCRD_CMPLT_CLRf_GET(r) (((r).cmic_cmc_dma_stat_clr[0]) & 0x1)
#define CMIC_CMC_DMA_STAT_CLRr_CH0_DESCRD_CMPLT_CLRf_SET(r,f) (r).cmic_cmc_dma_stat_clr[0]=(((r).cmic_cmc_dma_stat_clr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_DMA_STAT_CLRr_CH1_DESCRD_CMPLT_CLRf_GET(r) ((((r).cmic_cmc_dma_stat_clr[0]) >> 1) & 0x1)
#define CMIC_CMC_DMA_STAT_CLRr_CH1_DESCRD_CMPLT_CLRf_SET(r,f) (r).cmic_cmc_dma_stat_clr[0]=(((r).cmic_cmc_dma_stat_clr[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_DMA_STAT_CLRr_CH2_DESCRD_CMPLT_CLRf_GET(r) ((((r).cmic_cmc_dma_stat_clr[0]) >> 2) & 0x1)
#define CMIC_CMC_DMA_STAT_CLRr_CH2_DESCRD_CMPLT_CLRf_SET(r,f) (r).cmic_cmc_dma_stat_clr[0]=(((r).cmic_cmc_dma_stat_clr[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC_DMA_STAT_CLRr_CH3_DESCRD_CMPLT_CLRf_GET(r) ((((r).cmic_cmc_dma_stat_clr[0]) >> 3) & 0x1)
#define CMIC_CMC_DMA_STAT_CLRr_CH3_DESCRD_CMPLT_CLRf_SET(r,f) (r).cmic_cmc_dma_stat_clr[0]=(((r).cmic_cmc_dma_stat_clr[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC_DMA_STAT_CLRr_INTR_COALESCING_CLRf_GET(r) ((((r).cmic_cmc_dma_stat_clr[0]) >> 4) & 0xf)
#define CMIC_CMC_DMA_STAT_CLRr_INTR_COALESCING_CLRf_SET(r,f) (r).cmic_cmc_dma_stat_clr[0]=(((r).cmic_cmc_dma_stat_clr[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define CMIC_CMC_DMA_STAT_CLRr_CH0_INTR_COALESCING_CLRf_GET(r) ((((r).cmic_cmc_dma_stat_clr[0]) >> 4) & 0x1)
#define CMIC_CMC_DMA_STAT_CLRr_CH0_INTR_COALESCING_CLRf_SET(r,f) (r).cmic_cmc_dma_stat_clr[0]=(((r).cmic_cmc_dma_stat_clr[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC_DMA_STAT_CLRr_CH1_INTR_COALESCING_CLRf_GET(r) ((((r).cmic_cmc_dma_stat_clr[0]) >> 5) & 0x1)
#define CMIC_CMC_DMA_STAT_CLRr_CH1_INTR_COALESCING_CLRf_SET(r,f) (r).cmic_cmc_dma_stat_clr[0]=(((r).cmic_cmc_dma_stat_clr[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC_DMA_STAT_CLRr_CH2_INTR_COALESCING_CLRf_GET(r) ((((r).cmic_cmc_dma_stat_clr[0]) >> 6) & 0x1)
#define CMIC_CMC_DMA_STAT_CLRr_CH2_INTR_COALESCING_CLRf_SET(r,f) (r).cmic_cmc_dma_stat_clr[0]=(((r).cmic_cmc_dma_stat_clr[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC_DMA_STAT_CLRr_CH3_INTR_COALESCING_CLRf_GET(r) ((((r).cmic_cmc_dma_stat_clr[0]) >> 7) & 0x1)
#define CMIC_CMC_DMA_STAT_CLRr_CH3_INTR_COALESCING_CLRf_SET(r,f) (r).cmic_cmc_dma_stat_clr[0]=(((r).cmic_cmc_dma_stat_clr[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))

/*
 * These macros can be used to access CMIC_CMC_DMA_STAT_CLR.
 */
#define READ_CMIC_CMC_DMA_STAT_CLRr(u,r) CDK_XGSM_CMC_READ(u,CMIC_CMC_DMA_STAT_CLRr,r._cmic_cmc_dma_stat_clr)
#define WRITE_CMIC_CMC_DMA_STAT_CLRr(u,r) CDK_XGSM_CMC_WRITE(u,CMIC_CMC_DMA_STAT_CLRr,r._cmic_cmc_dma_stat_clr)

/*******************************************************************************
 * End of 'CMIC_CMC_DMA_STAT_CLRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_IRQ_STAT0
 * BLOCKS:   CMIC
 * DESC:     Capturs CMC specific funtions status.
 * SIZE:     32
 */
#define CMIC_CMC_IRQ_STAT0r 0x00031400

#define CMIC_CMC_IRQ_STAT0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_IRQ_STAT0.
 */
typedef union CMIC_CMC_IRQ_STAT0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_irq_stat0[1];
	uint32_t _cmic_cmc_irq_stat0;
} CMIC_CMC_IRQ_STAT0r_t;

#define CMIC_CMC_IRQ_STAT0r_CLR(r) (r).cmic_cmc_irq_stat0[0] = 0
#define CMIC_CMC_IRQ_STAT0r_SET(r,d) (r).cmic_cmc_irq_stat0[0] = d
#define CMIC_CMC_IRQ_STAT0r_GET(r) (r).cmic_cmc_irq_stat0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_IRQ_STAT0r_SBUSDMA_CH1_DONEf_GET(r) (((r).cmic_cmc_irq_stat0[0]) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_SBUSDMA_CH1_DONEf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_IRQ_STAT0r_SBUSDMA_CH0_DONEf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 1) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_SBUSDMA_CH0_DONEf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_IRQ_STAT0r_FIFO_CH3_DMA_INTRf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 2) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_FIFO_CH3_DMA_INTRf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC_IRQ_STAT0r_FIFO_CH2_DMA_INTRf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 3) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_FIFO_CH2_DMA_INTRf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC_IRQ_STAT0r_FIFO_CH1_DMA_INTRf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 4) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_FIFO_CH1_DMA_INTRf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC_IRQ_STAT0r_FIFO_CH0_DMA_INTRf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 5) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_FIFO_CH0_DMA_INTRf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC_IRQ_STAT0r_SBUSDMA_CH2_DONEf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 6) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_SBUSDMA_CH2_DONEf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC_IRQ_STAT0r_MIIM_OP_DONEf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 7) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_MIIM_OP_DONEf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC_IRQ_STAT0r_CH3_DESC_DONEf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 8) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_CH3_DESC_DONEf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC_IRQ_STAT0r_CH3_CHAIN_DONEf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 9) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_CH3_CHAIN_DONEf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC_IRQ_STAT0r_CH2_DESC_DONEf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 10) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_CH2_DESC_DONEf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC_IRQ_STAT0r_CH2_CHAIN_DONEf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 11) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_CH2_CHAIN_DONEf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC_IRQ_STAT0r_CH1_DESC_DONEf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 12) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_CH1_DESC_DONEf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC_IRQ_STAT0r_CH1_CHAIN_DONEf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 13) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_CH1_CHAIN_DONEf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define CMIC_CMC_IRQ_STAT0r_CH0_DESC_DONEf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 14) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_CH0_DESC_DONEf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define CMIC_CMC_IRQ_STAT0r_CH0_CHAIN_DONEf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 15) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_CH0_CHAIN_DONEf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define CMIC_CMC_IRQ_STAT0r_CH3_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 16) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_CH3_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 16)) | ((((uint32_t)f) & 0x1) << 16))
#define CMIC_CMC_IRQ_STAT0r_CH2_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 17) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_CH2_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 17)) | ((((uint32_t)f) & 0x1) << 17))
#define CMIC_CMC_IRQ_STAT0r_CH1_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 18) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_CH1_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 18)) | ((((uint32_t)f) & 0x1) << 18))
#define CMIC_CMC_IRQ_STAT0r_CH0_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 19) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_CH0_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define CMIC_CMC_IRQ_STAT0r_SCHAN_OP_DONEf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 20) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_SCHAN_OP_DONEf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC_IRQ_STAT0r_CROSS_COUPLED_MEMORYDMA_DONEf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 21) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_CROSS_COUPLED_MEMORYDMA_DONEf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC_IRQ_STAT0r_SW_INTRf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 22) & 0xf)
#define CMIC_CMC_IRQ_STAT0r_SW_INTRf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0xf << 22)) | ((((uint32_t)f) & 0xf) << 22))
#define CMIC_CMC_IRQ_STAT0r_SBUSDMA_ECCERRf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 26) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_SBUSDMA_ECCERRf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))

/*
 * These macros can be used to access CMIC_CMC_IRQ_STAT0.
 */
#define READ_CMIC_CMC_IRQ_STAT0r(u,r) CDK_XGSM_CMC_READ(u,CMIC_CMC_IRQ_STAT0r,r._cmic_cmc_irq_stat0)
#define WRITE_CMIC_CMC_IRQ_STAT0r(u,r) CDK_XGSM_CMC_WRITE(u,CMIC_CMC_IRQ_STAT0r,r._cmic_cmc_irq_stat0)

/*******************************************************************************
 * End of 'CMIC_CMC_IRQ_STAT0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_IRQ_STAT1
 * BLOCKS:   CMIC
 * DESC:     captures interrupt events from CMICM_COMMON, Switch specific interrupts and uc_0/uc_1 PMUIRQ
 * SIZE:     32
 */
#define CMIC_CMC_IRQ_STAT1r 0x00031404

#define CMIC_CMC_IRQ_STAT1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_IRQ_STAT1.
 */
typedef union CMIC_CMC_IRQ_STAT1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_irq_stat1[1];
	uint32_t _cmic_cmc_irq_stat1;
} CMIC_CMC_IRQ_STAT1r_t;

#define CMIC_CMC_IRQ_STAT1r_CLR(r) (r).cmic_cmc_irq_stat1[0] = 0
#define CMIC_CMC_IRQ_STAT1r_SET(r,d) (r).cmic_cmc_irq_stat1[0] = d
#define CMIC_CMC_IRQ_STAT1r_GET(r) (r).cmic_cmc_irq_stat1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_IRQ_STAT1r_I2C_INTRf_GET(r) (((r).cmic_cmc_irq_stat1[0]) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_I2C_INTRf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_IRQ_STAT1r_PCIE_ECRC_ERR_INTRf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 1) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_PCIE_ECRC_ERR_INTRf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_IRQ_STAT1r_TIMESYNC_INTRf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 2) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_TIMESYNC_INTRf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC_IRQ_STAT1r_PHY_LINKSCAN_LINKSTATUS_CHDf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 3) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_PHY_LINKSCAN_LINKSTATUS_CHDf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC_IRQ_STAT1r_PHY_PAUSESCAN_PAUSESTATUS_CHDf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 4) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_PHY_PAUSESCAN_PAUSESTATUS_CHDf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC_IRQ_STAT1r_SPI_INTERRUPTf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 5) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_SPI_INTERRUPTf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC_IRQ_STAT1r_UART0_INTERRUPTf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 6) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_UART0_INTERRUPTf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC_IRQ_STAT1r_UART1_INTERRUPTf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 7) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_UART1_INTERRUPTf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC_IRQ_STAT1r_COMMON_SCHAN_DONEf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 8) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_COMMON_SCHAN_DONEf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC_IRQ_STAT1r_MIIM_OP_DONEf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 9) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_MIIM_OP_DONEf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC_IRQ_STAT1r_GPIO_INTRf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 10) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_GPIO_INTRf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC_IRQ_STAT1r_CHIP_FUNC_INTRf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 11) & 0xff)
#define CMIC_CMC_IRQ_STAT1r_CHIP_FUNC_INTRf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0xff << 11)) | ((((uint32_t)f) & 0xff) << 11))
#define CMIC_CMC_IRQ_STAT1r_UC_0_PMUIRQf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 19) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_UC_0_PMUIRQf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define CMIC_CMC_IRQ_STAT1r_UC_1_PMUIRQf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 20) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_UC_1_PMUIRQf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC_IRQ_STAT1r_WDT_0_INTRf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 21) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_WDT_0_INTRf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC_IRQ_STAT1r_WDT_1_INTRf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 22) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_WDT_1_INTRf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 22)) | ((((uint32_t)f) & 0x1) << 22))
#define CMIC_CMC_IRQ_STAT1r_TIM0_INTR1f_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 23) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_TIM0_INTR1f_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 23)) | ((((uint32_t)f) & 0x1) << 23))
#define CMIC_CMC_IRQ_STAT1r_TIM0_INTR2f_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 24) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_TIM0_INTR2f_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC_IRQ_STAT1r_TIM1_INTR1f_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 25) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_TIM1_INTR1f_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))
#define CMIC_CMC_IRQ_STAT1r_TIM1_INTR2f_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 26) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_TIM1_INTR2f_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))
#define CMIC_CMC_IRQ_STAT1r_PCIEINTF_NEEDS_CLEANUPf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 27) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_PCIEINTF_NEEDS_CLEANUPf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_CMC_IRQ_STAT1r_SRAM_ECC_INTRf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 28) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_SRAM_ECC_INTRf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_CMC_IRQ_STAT1r_SER_INTRf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 29) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_SER_INTRf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))

/*
 * These macros can be used to access CMIC_CMC_IRQ_STAT1.
 */
#define READ_CMIC_CMC_IRQ_STAT1r(u,r) CDK_XGSM_CMC_READ(u,CMIC_CMC_IRQ_STAT1r,r._cmic_cmc_irq_stat1)
#define WRITE_CMIC_CMC_IRQ_STAT1r(u,r) CDK_XGSM_CMC_WRITE(u,CMIC_CMC_IRQ_STAT1r,r._cmic_cmc_irq_stat1)

/*******************************************************************************
 * End of 'CMIC_CMC_IRQ_STAT1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_MIIM_ADDRESS
 * BLOCKS:   CMIC
 * DESC:     Supplies the register address of MIIM reads and writes.
For clause 22 devices, bits [4:0] supply the REGAD.
For clause 45 devices, bits [20:16] supply the DTYPE,
                   and bits [15: 0] supply the reg address

 * SIZE:     32
 */
#define CMIC_CMC_MIIM_ADDRESSr 0x00031088

#define CMIC_CMC_MIIM_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_MIIM_ADDRESS.
 */
typedef union CMIC_CMC_MIIM_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_miim_address[1];
	uint32_t _cmic_cmc_miim_address;
} CMIC_CMC_MIIM_ADDRESSr_t;

#define CMIC_CMC_MIIM_ADDRESSr_CLR(r) (r).cmic_cmc_miim_address[0] = 0
#define CMIC_CMC_MIIM_ADDRESSr_SET(r,d) (r).cmic_cmc_miim_address[0] = d
#define CMIC_CMC_MIIM_ADDRESSr_GET(r) (r).cmic_cmc_miim_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_MIIM_ADDRESSr_CLAUSE_45_REGADRf_GET(r) (((r).cmic_cmc_miim_address[0]) & 0xffff)
#define CMIC_CMC_MIIM_ADDRESSr_CLAUSE_45_REGADRf_SET(r,f) (r).cmic_cmc_miim_address[0]=(((r).cmic_cmc_miim_address[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define CMIC_CMC_MIIM_ADDRESSr_CLAUSE_22_REGADRf_GET(r) (((r).cmic_cmc_miim_address[0]) & 0x1f)
#define CMIC_CMC_MIIM_ADDRESSr_CLAUSE_22_REGADRf_SET(r,f) (r).cmic_cmc_miim_address[0]=(((r).cmic_cmc_miim_address[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_CMC_MIIM_ADDRESSr_CLAUSE_45_DTYPEf_GET(r) ((((r).cmic_cmc_miim_address[0]) >> 16) & 0x1f)
#define CMIC_CMC_MIIM_ADDRESSr_CLAUSE_45_DTYPEf_SET(r,f) (r).cmic_cmc_miim_address[0]=(((r).cmic_cmc_miim_address[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))

/*
 * These macros can be used to access CMIC_CMC_MIIM_ADDRESS.
 */
#define READ_CMIC_CMC_MIIM_ADDRESSr(u,r) CDK_XGSM_CMC_READ(u,CMIC_CMC_MIIM_ADDRESSr,r._cmic_cmc_miim_address)
#define WRITE_CMIC_CMC_MIIM_ADDRESSr(u,r) CDK_XGSM_CMC_WRITE(u,CMIC_CMC_MIIM_ADDRESSr,r._cmic_cmc_miim_address)

/*******************************************************************************
 * End of 'CMIC_CMC_MIIM_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_MIIM_CTRL
 * BLOCKS:   CMIC
 * DESC:     register to enable MIIM read and Writes.

 * SIZE:     32
 */
#define CMIC_CMC_MIIM_CTRLr 0x0003108c

#define CMIC_CMC_MIIM_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_MIIM_CTRL.
 */
typedef union CMIC_CMC_MIIM_CTRLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_miim_ctrl[1];
	uint32_t _cmic_cmc_miim_ctrl;
} CMIC_CMC_MIIM_CTRLr_t;

#define CMIC_CMC_MIIM_CTRLr_CLR(r) (r).cmic_cmc_miim_ctrl[0] = 0
#define CMIC_CMC_MIIM_CTRLr_SET(r,d) (r).cmic_cmc_miim_ctrl[0] = d
#define CMIC_CMC_MIIM_CTRLr_GET(r) (r).cmic_cmc_miim_ctrl[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_MIIM_CTRLr_MIIM_WR_STARTf_GET(r) (((r).cmic_cmc_miim_ctrl[0]) & 0x1)
#define CMIC_CMC_MIIM_CTRLr_MIIM_WR_STARTf_SET(r,f) (r).cmic_cmc_miim_ctrl[0]=(((r).cmic_cmc_miim_ctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_MIIM_CTRLr_MIIM_RD_STARTf_GET(r) ((((r).cmic_cmc_miim_ctrl[0]) >> 1) & 0x1)
#define CMIC_CMC_MIIM_CTRLr_MIIM_RD_STARTf_SET(r,f) (r).cmic_cmc_miim_ctrl[0]=(((r).cmic_cmc_miim_ctrl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*
 * These macros can be used to access CMIC_CMC_MIIM_CTRL.
 */
#define READ_CMIC_CMC_MIIM_CTRLr(u,r) CDK_XGSM_CMC_READ(u,CMIC_CMC_MIIM_CTRLr,r._cmic_cmc_miim_ctrl)
#define WRITE_CMIC_CMC_MIIM_CTRLr(u,r) CDK_XGSM_CMC_WRITE(u,CMIC_CMC_MIIM_CTRLr,r._cmic_cmc_miim_ctrl)

/*******************************************************************************
 * End of 'CMIC_CMC_MIIM_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_MIIM_PARAM
 * BLOCKS:   CMIC
 * DESC:     MIIM Parameter Register
 * SIZE:     32
 */
#define CMIC_CMC_MIIM_PARAMr 0x00031080

#define CMIC_CMC_MIIM_PARAMr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_MIIM_PARAM.
 */
typedef union CMIC_CMC_MIIM_PARAMr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_miim_param[1];
	uint32_t _cmic_cmc_miim_param;
} CMIC_CMC_MIIM_PARAMr_t;

#define CMIC_CMC_MIIM_PARAMr_CLR(r) (r).cmic_cmc_miim_param[0] = 0
#define CMIC_CMC_MIIM_PARAMr_SET(r,d) (r).cmic_cmc_miim_param[0] = d
#define CMIC_CMC_MIIM_PARAMr_GET(r) (r).cmic_cmc_miim_param[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_MIIM_PARAMr_PHY_DATAf_GET(r) (((r).cmic_cmc_miim_param[0]) & 0xffff)
#define CMIC_CMC_MIIM_PARAMr_PHY_DATAf_SET(r,f) (r).cmic_cmc_miim_param[0]=(((r).cmic_cmc_miim_param[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define CMIC_CMC_MIIM_PARAMr_PHY_IDf_GET(r) ((((r).cmic_cmc_miim_param[0]) >> 16) & 0x1f)
#define CMIC_CMC_MIIM_PARAMr_PHY_IDf_SET(r,f) (r).cmic_cmc_miim_param[0]=(((r).cmic_cmc_miim_param[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_CMC_MIIM_PARAMr_C45_SELf_GET(r) ((((r).cmic_cmc_miim_param[0]) >> 21) & 0x1)
#define CMIC_CMC_MIIM_PARAMr_C45_SELf_SET(r,f) (r).cmic_cmc_miim_param[0]=(((r).cmic_cmc_miim_param[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC_MIIM_PARAMr_BUS_IDf_GET(r) ((((r).cmic_cmc_miim_param[0]) >> 22) & 0x7)
#define CMIC_CMC_MIIM_PARAMr_BUS_IDf_SET(r,f) (r).cmic_cmc_miim_param[0]=(((r).cmic_cmc_miim_param[0] & ~((uint32_t)0x7 << 22)) | ((((uint32_t)f) & 0x7) << 22))
#define CMIC_CMC_MIIM_PARAMr_INTERNAL_SELf_GET(r) ((((r).cmic_cmc_miim_param[0]) >> 25) & 0x1)
#define CMIC_CMC_MIIM_PARAMr_INTERNAL_SELf_SET(r,f) (r).cmic_cmc_miim_param[0]=(((r).cmic_cmc_miim_param[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))
#define CMIC_CMC_MIIM_PARAMr_MIIM_CYCLEf_GET(r) ((((r).cmic_cmc_miim_param[0]) >> 29) & 0x7)
#define CMIC_CMC_MIIM_PARAMr_MIIM_CYCLEf_SET(r,f) (r).cmic_cmc_miim_param[0]=(((r).cmic_cmc_miim_param[0] & ~((uint32_t)0x7 << 29)) | ((((uint32_t)f) & 0x7) << 29))

/*
 * These macros can be used to access CMIC_CMC_MIIM_PARAM.
 */
#define READ_CMIC_CMC_MIIM_PARAMr(u,r) CDK_XGSM_CMC_READ(u,CMIC_CMC_MIIM_PARAMr,r._cmic_cmc_miim_param)
#define WRITE_CMIC_CMC_MIIM_PARAMr(u,r) CDK_XGSM_CMC_WRITE(u,CMIC_CMC_MIIM_PARAMr,r._cmic_cmc_miim_param)

/*******************************************************************************
 * End of 'CMIC_CMC_MIIM_PARAMr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_MIIM_READ_DATA
 * BLOCKS:   CMIC
 * DESC:     MIIM Read Data Register
 * SIZE:     32
 */
#define CMIC_CMC_MIIM_READ_DATAr 0x00031084

#define CMIC_CMC_MIIM_READ_DATAr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_MIIM_READ_DATA.
 */
typedef union CMIC_CMC_MIIM_READ_DATAr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_miim_read_data[1];
	uint32_t _cmic_cmc_miim_read_data;
} CMIC_CMC_MIIM_READ_DATAr_t;

#define CMIC_CMC_MIIM_READ_DATAr_CLR(r) (r).cmic_cmc_miim_read_data[0] = 0
#define CMIC_CMC_MIIM_READ_DATAr_SET(r,d) (r).cmic_cmc_miim_read_data[0] = d
#define CMIC_CMC_MIIM_READ_DATAr_GET(r) (r).cmic_cmc_miim_read_data[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_MIIM_READ_DATAr_DATAf_GET(r) (((r).cmic_cmc_miim_read_data[0]) & 0xffff)
#define CMIC_CMC_MIIM_READ_DATAr_DATAf_SET(r,f) (r).cmic_cmc_miim_read_data[0]=(((r).cmic_cmc_miim_read_data[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access CMIC_CMC_MIIM_READ_DATA.
 */
#define READ_CMIC_CMC_MIIM_READ_DATAr(u,r) CDK_XGSM_CMC_READ(u,CMIC_CMC_MIIM_READ_DATAr,r._cmic_cmc_miim_read_data)
#define WRITE_CMIC_CMC_MIIM_READ_DATAr(u,r) CDK_XGSM_CMC_WRITE(u,CMIC_CMC_MIIM_READ_DATAr,r._cmic_cmc_miim_read_data)

/*******************************************************************************
 * End of 'CMIC_CMC_MIIM_READ_DATAr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_MIIM_STAT
 * BLOCKS:   CMIC
 * DESC:     register to enable MIIM read and Writes.

 * SIZE:     32
 */
#define CMIC_CMC_MIIM_STATr 0x00031090

#define CMIC_CMC_MIIM_STATr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_MIIM_STAT.
 */
typedef union CMIC_CMC_MIIM_STATr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_miim_stat[1];
	uint32_t _cmic_cmc_miim_stat;
} CMIC_CMC_MIIM_STATr_t;

#define CMIC_CMC_MIIM_STATr_CLR(r) (r).cmic_cmc_miim_stat[0] = 0
#define CMIC_CMC_MIIM_STATr_SET(r,d) (r).cmic_cmc_miim_stat[0] = d
#define CMIC_CMC_MIIM_STATr_GET(r) (r).cmic_cmc_miim_stat[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_MIIM_STATr_MIIM_OPN_DONEf_GET(r) (((r).cmic_cmc_miim_stat[0]) & 0x1)
#define CMIC_CMC_MIIM_STATr_MIIM_OPN_DONEf_SET(r,f) (r).cmic_cmc_miim_stat[0]=(((r).cmic_cmc_miim_stat[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access CMIC_CMC_MIIM_STAT.
 */
#define READ_CMIC_CMC_MIIM_STATr(u,r) CDK_XGSM_CMC_READ(u,CMIC_CMC_MIIM_STATr,r._cmic_cmc_miim_stat)
#define WRITE_CMIC_CMC_MIIM_STATr(u,r) CDK_XGSM_CMC_WRITE(u,CMIC_CMC_MIIM_STATr,r._cmic_cmc_miim_stat)

/*******************************************************************************
 * End of 'CMIC_CMC_MIIM_STATr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_PCIE_IRQ_MASK0
 * BLOCKS:   CMIC
 * DESC:     PCIe IRQ MASK register coresponding to CMIC_CMC0_IRQ_STAT0.
 * SIZE:     32
 */
#define CMIC_CMC_PCIE_IRQ_MASK0r 0x00031414

#define CMIC_CMC_PCIE_IRQ_MASK0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_PCIE_IRQ_MASK0.
 */
typedef union CMIC_CMC_PCIE_IRQ_MASK0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_pcie_irq_mask0[1];
	uint32_t _cmic_cmc_pcie_irq_mask0;
} CMIC_CMC_PCIE_IRQ_MASK0r_t;

#define CMIC_CMC_PCIE_IRQ_MASK0r_CLR(r) (r).cmic_cmc_pcie_irq_mask0[0] = 0
#define CMIC_CMC_PCIE_IRQ_MASK0r_SET(r,d) (r).cmic_cmc_pcie_irq_mask0[0] = d
#define CMIC_CMC_PCIE_IRQ_MASK0r_GET(r) (r).cmic_cmc_pcie_irq_mask0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_PCIE_IRQ_MASK0r_SBUSDMA_CH1_DONEf_GET(r) (((r).cmic_cmc_pcie_irq_mask0[0]) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_SBUSDMA_CH1_DONEf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_PCIE_IRQ_MASK0r_SBUSDMA_CH0_DONEf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 1) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_SBUSDMA_CH0_DONEf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_PCIE_IRQ_MASK0r_FIFO_CH3_DMA_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 2) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_FIFO_CH3_DMA_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC_PCIE_IRQ_MASK0r_FIFO_CH2_DMA_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 3) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_FIFO_CH2_DMA_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC_PCIE_IRQ_MASK0r_FIFO_CH1_DMA_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 4) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_FIFO_CH1_DMA_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC_PCIE_IRQ_MASK0r_FIFO_CH0_DMA_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 5) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_FIFO_CH0_DMA_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC_PCIE_IRQ_MASK0r_SBUSDMA_CH2_DONEf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 6) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_SBUSDMA_CH2_DONEf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC_PCIE_IRQ_MASK0r_MIIM_OP_DONEf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 7) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_MIIM_OP_DONEf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH3_DESC_DONEf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 8) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH3_DESC_DONEf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH3_CHAIN_DONEf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 9) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH3_CHAIN_DONEf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH2_DESC_DONEf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 10) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH2_DESC_DONEf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH2_CHAIN_DONEf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 11) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH2_CHAIN_DONEf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH1_DESC_DONEf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 12) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH1_DESC_DONEf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH1_CHAIN_DONEf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 13) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH1_CHAIN_DONEf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH0_DESC_DONEf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 14) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH0_DESC_DONEf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH0_CHAIN_DONEf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 15) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH0_CHAIN_DONEf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH3_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 16) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH3_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 16)) | ((((uint32_t)f) & 0x1) << 16))
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH2_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 17) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH2_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 17)) | ((((uint32_t)f) & 0x1) << 17))
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH1_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 18) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH1_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 18)) | ((((uint32_t)f) & 0x1) << 18))
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH0_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 19) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH0_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define CMIC_CMC_PCIE_IRQ_MASK0r_SCHAN_OP_DONEf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 20) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_SCHAN_OP_DONEf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC_PCIE_IRQ_MASK0r_CROSS_COUPLED_MEMORYDMA_DONEf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 21) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_CROSS_COUPLED_MEMORYDMA_DONEf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC_PCIE_IRQ_MASK0r_SW_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 22) & 0xf)
#define CMIC_CMC_PCIE_IRQ_MASK0r_SW_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0xf << 22)) | ((((uint32_t)f) & 0xf) << 22))
#define CMIC_CMC_PCIE_IRQ_MASK0r_SBUSDMA_ECCERRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 26) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_SBUSDMA_ECCERRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))

/*
 * These macros can be used to access CMIC_CMC_PCIE_IRQ_MASK0.
 */
#define READ_CMIC_CMC_PCIE_IRQ_MASK0r(u,r) CDK_XGSM_CMC_READ(u,CMIC_CMC_PCIE_IRQ_MASK0r,r._cmic_cmc_pcie_irq_mask0)
#define WRITE_CMIC_CMC_PCIE_IRQ_MASK0r(u,r) CDK_XGSM_CMC_WRITE(u,CMIC_CMC_PCIE_IRQ_MASK0r,r._cmic_cmc_pcie_irq_mask0)

/*******************************************************************************
 * End of 'CMIC_CMC_PCIE_IRQ_MASK0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_PCIE_IRQ_MASK1
 * BLOCKS:   CMIC
 * DESC:     PCIe IRQ MASK register coresponding to CMIC_CMC0_IRQ_STAT1
 * SIZE:     32
 */
#define CMIC_CMC_PCIE_IRQ_MASK1r 0x00031418

#define CMIC_CMC_PCIE_IRQ_MASK1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_PCIE_IRQ_MASK1.
 */
typedef union CMIC_CMC_PCIE_IRQ_MASK1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_pcie_irq_mask1[1];
	uint32_t _cmic_cmc_pcie_irq_mask1;
} CMIC_CMC_PCIE_IRQ_MASK1r_t;

#define CMIC_CMC_PCIE_IRQ_MASK1r_CLR(r) (r).cmic_cmc_pcie_irq_mask1[0] = 0
#define CMIC_CMC_PCIE_IRQ_MASK1r_SET(r,d) (r).cmic_cmc_pcie_irq_mask1[0] = d
#define CMIC_CMC_PCIE_IRQ_MASK1r_GET(r) (r).cmic_cmc_pcie_irq_mask1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_PCIE_IRQ_MASK1r_I2C_INTRf_GET(r) (((r).cmic_cmc_pcie_irq_mask1[0]) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_I2C_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_PCIE_IRQ_MASK1r_PCIE_ECRC_ERR_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 1) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_PCIE_ECRC_ERR_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_PCIE_IRQ_MASK1r_TIMESYNC_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 2) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_TIMESYNC_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC_PCIE_IRQ_MASK1r_PHY_LINKSCAN_LINKSTATUS_CHDf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 3) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_PHY_LINKSCAN_LINKSTATUS_CHDf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC_PCIE_IRQ_MASK1r_PHY_PAUSESCAN_PAUSESTATUS_CHDf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 4) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_PHY_PAUSESCAN_PAUSESTATUS_CHDf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC_PCIE_IRQ_MASK1r_SPI_INTERRUPTf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 5) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_SPI_INTERRUPTf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC_PCIE_IRQ_MASK1r_UART0_INTERRUPTf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 6) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_UART0_INTERRUPTf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC_PCIE_IRQ_MASK1r_UART1_INTERRUPTf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 7) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_UART1_INTERRUPTf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC_PCIE_IRQ_MASK1r_COMMON_SCHAN_DONEf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 8) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_COMMON_SCHAN_DONEf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC_PCIE_IRQ_MASK1r_MIIM_OP_DONEf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 9) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_MIIM_OP_DONEf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC_PCIE_IRQ_MASK1r_GPIO_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 10) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_GPIO_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC_PCIE_IRQ_MASK1r_CHIP_FUNC_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 11) & 0xff)
#define CMIC_CMC_PCIE_IRQ_MASK1r_CHIP_FUNC_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0xff << 11)) | ((((uint32_t)f) & 0xff) << 11))
#define CMIC_CMC_PCIE_IRQ_MASK1r_UC_0_PMUIRQf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 19) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_UC_0_PMUIRQf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define CMIC_CMC_PCIE_IRQ_MASK1r_UC_1_PMUIRQf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 20) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_UC_1_PMUIRQf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC_PCIE_IRQ_MASK1r_WDT_0_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 21) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_WDT_0_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC_PCIE_IRQ_MASK1r_WDT_1_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 22) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_WDT_1_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 22)) | ((((uint32_t)f) & 0x1) << 22))
#define CMIC_CMC_PCIE_IRQ_MASK1r_TIM0_INTR1f_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 23) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_TIM0_INTR1f_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 23)) | ((((uint32_t)f) & 0x1) << 23))
#define CMIC_CMC_PCIE_IRQ_MASK1r_TIM0_INTR2f_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 24) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_TIM0_INTR2f_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC_PCIE_IRQ_MASK1r_TIM1_INTR1f_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 25) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_TIM1_INTR1f_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))
#define CMIC_CMC_PCIE_IRQ_MASK1r_TIM1_INTR2f_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 26) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_TIM1_INTR2f_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))
#define CMIC_CMC_PCIE_IRQ_MASK1r_PCIEINTF_NEEDS_CLEANUPf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 27) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_PCIEINTF_NEEDS_CLEANUPf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_CMC_PCIE_IRQ_MASK1r_SRAM_ECC_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 28) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_SRAM_ECC_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_CMC_PCIE_IRQ_MASK1r_SER_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 29) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_SER_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))

/*
 * These macros can be used to access CMIC_CMC_PCIE_IRQ_MASK1.
 */
#define READ_CMIC_CMC_PCIE_IRQ_MASK1r(u,r) CDK_XGSM_CMC_READ(u,CMIC_CMC_PCIE_IRQ_MASK1r,r._cmic_cmc_pcie_irq_mask1)
#define WRITE_CMIC_CMC_PCIE_IRQ_MASK1r(u,r) CDK_XGSM_CMC_WRITE(u,CMIC_CMC_PCIE_IRQ_MASK1r,r._cmic_cmc_pcie_irq_mask1)

/*******************************************************************************
 * End of 'CMIC_CMC_PCIE_IRQ_MASK1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SCHAN_CTRL
 * BLOCKS:   CMIC
 * DESC:     Status and Control Register
 * SIZE:     32
 */
#define CMIC_CMC_SCHAN_CTRLr 0x00031000

#define CMIC_CMC_SCHAN_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SCHAN_CTRL.
 */
typedef union CMIC_CMC_SCHAN_CTRLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_schan_ctrl[1];
	uint32_t _cmic_cmc_schan_ctrl;
} CMIC_CMC_SCHAN_CTRLr_t;

#define CMIC_CMC_SCHAN_CTRLr_CLR(r) (r).cmic_cmc_schan_ctrl[0] = 0
#define CMIC_CMC_SCHAN_CTRLr_SET(r,d) (r).cmic_cmc_schan_ctrl[0] = d
#define CMIC_CMC_SCHAN_CTRLr_GET(r) (r).cmic_cmc_schan_ctrl[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SCHAN_CTRLr_MSG_STARTf_GET(r) (((r).cmic_cmc_schan_ctrl[0]) & 0x1)
#define CMIC_CMC_SCHAN_CTRLr_MSG_STARTf_SET(r,f) (r).cmic_cmc_schan_ctrl[0]=(((r).cmic_cmc_schan_ctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_SCHAN_CTRLr_MSG_DONEf_GET(r) ((((r).cmic_cmc_schan_ctrl[0]) >> 1) & 0x1)
#define CMIC_CMC_SCHAN_CTRLr_MSG_DONEf_SET(r,f) (r).cmic_cmc_schan_ctrl[0]=(((r).cmic_cmc_schan_ctrl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_SCHAN_CTRLr_ABORTf_GET(r) ((((r).cmic_cmc_schan_ctrl[0]) >> 2) & 0x1)
#define CMIC_CMC_SCHAN_CTRLr_ABORTf_SET(r,f) (r).cmic_cmc_schan_ctrl[0]=(((r).cmic_cmc_schan_ctrl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC_SCHAN_CTRLr_SER_CHECK_FAILf_GET(r) ((((r).cmic_cmc_schan_ctrl[0]) >> 20) & 0x1)
#define CMIC_CMC_SCHAN_CTRLr_SER_CHECK_FAILf_SET(r,f) (r).cmic_cmc_schan_ctrl[0]=(((r).cmic_cmc_schan_ctrl[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC_SCHAN_CTRLr_NACKf_GET(r) ((((r).cmic_cmc_schan_ctrl[0]) >> 21) & 0x1)
#define CMIC_CMC_SCHAN_CTRLr_NACKf_SET(r,f) (r).cmic_cmc_schan_ctrl[0]=(((r).cmic_cmc_schan_ctrl[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC_SCHAN_CTRLr_TIMEOUTf_GET(r) ((((r).cmic_cmc_schan_ctrl[0]) >> 22) & 0x1)
#define CMIC_CMC_SCHAN_CTRLr_TIMEOUTf_SET(r,f) (r).cmic_cmc_schan_ctrl[0]=(((r).cmic_cmc_schan_ctrl[0] & ~((uint32_t)0x1 << 22)) | ((((uint32_t)f) & 0x1) << 22))

/*
 * These macros can be used to access CMIC_CMC_SCHAN_CTRL.
 */
#define READ_CMIC_CMC_SCHAN_CTRLr(u,r) CDK_XGSM_CMC_READ(u,CMIC_CMC_SCHAN_CTRLr,r._cmic_cmc_schan_ctrl)
#define WRITE_CMIC_CMC_SCHAN_CTRLr(u,r) CDK_XGSM_CMC_WRITE(u,CMIC_CMC_SCHAN_CTRLr,r._cmic_cmc_schan_ctrl)

/*******************************************************************************
 * End of 'CMIC_CMC_SCHAN_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SCHAN_ERR
 * BLOCKS:   CMIC
 * DESC:     Error Status Register
 * SIZE:     32
 */
#define CMIC_CMC_SCHAN_ERRr 0x00031008

#define CMIC_CMC_SCHAN_ERRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SCHAN_ERR.
 */
typedef union CMIC_CMC_SCHAN_ERRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_schan_err[1];
	uint32_t _cmic_cmc_schan_err;
} CMIC_CMC_SCHAN_ERRr_t;

#define CMIC_CMC_SCHAN_ERRr_CLR(r) (r).cmic_cmc_schan_err[0] = 0
#define CMIC_CMC_SCHAN_ERRr_SET(r,d) (r).cmic_cmc_schan_err[0] = d
#define CMIC_CMC_SCHAN_ERRr_GET(r) (r).cmic_cmc_schan_err[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SCHAN_ERRr_NACKf_GET(r) (((r).cmic_cmc_schan_err[0]) & 0x1)
#define CMIC_CMC_SCHAN_ERRr_NACKf_SET(r,f) (r).cmic_cmc_schan_err[0]=(((r).cmic_cmc_schan_err[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_SCHAN_ERRr_ERR_CODEf_GET(r) ((((r).cmic_cmc_schan_err[0]) >> 4) & 0x3)
#define CMIC_CMC_SCHAN_ERRr_ERR_CODEf_SET(r,f) (r).cmic_cmc_schan_err[0]=(((r).cmic_cmc_schan_err[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4))
#define CMIC_CMC_SCHAN_ERRr_ERRBITf_GET(r) ((((r).cmic_cmc_schan_err[0]) >> 6) & 0x1)
#define CMIC_CMC_SCHAN_ERRr_ERRBITf_SET(r,f) (r).cmic_cmc_schan_err[0]=(((r).cmic_cmc_schan_err[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC_SCHAN_ERRr_DATA_LENf_GET(r) ((((r).cmic_cmc_schan_err[0]) >> 7) & 0x7f)
#define CMIC_CMC_SCHAN_ERRr_DATA_LENf_SET(r,f) (r).cmic_cmc_schan_err[0]=(((r).cmic_cmc_schan_err[0] & ~((uint32_t)0x7f << 7)) | ((((uint32_t)f) & 0x7f) << 7))
#define CMIC_CMC_SCHAN_ERRr_SRC_PORTf_GET(r) ((((r).cmic_cmc_schan_err[0]) >> 14) & 0x3f)
#define CMIC_CMC_SCHAN_ERRr_SRC_PORTf_SET(r,f) (r).cmic_cmc_schan_err[0]=(((r).cmic_cmc_schan_err[0] & ~((uint32_t)0x3f << 14)) | ((((uint32_t)f) & 0x3f) << 14))
#define CMIC_CMC_SCHAN_ERRr_DST_PORTf_GET(r) ((((r).cmic_cmc_schan_err[0]) >> 20) & 0x3f)
#define CMIC_CMC_SCHAN_ERRr_DST_PORTf_SET(r,f) (r).cmic_cmc_schan_err[0]=(((r).cmic_cmc_schan_err[0] & ~((uint32_t)0x3f << 20)) | ((((uint32_t)f) & 0x3f) << 20))
#define CMIC_CMC_SCHAN_ERRr_OP_CODEf_GET(r) ((((r).cmic_cmc_schan_err[0]) >> 26) & 0x3f)
#define CMIC_CMC_SCHAN_ERRr_OP_CODEf_SET(r,f) (r).cmic_cmc_schan_err[0]=(((r).cmic_cmc_schan_err[0] & ~((uint32_t)0x3f << 26)) | ((((uint32_t)f) & 0x3f) << 26))

/*
 * These macros can be used to access CMIC_CMC_SCHAN_ERR.
 */
#define READ_CMIC_CMC_SCHAN_ERRr(u,r) CDK_XGSM_CMC_READ(u,CMIC_CMC_SCHAN_ERRr,r._cmic_cmc_schan_err)
#define WRITE_CMIC_CMC_SCHAN_ERRr(u,r) CDK_XGSM_CMC_WRITE(u,CMIC_CMC_SCHAN_ERRr,r._cmic_cmc_schan_err)

/*******************************************************************************
 * End of 'CMIC_CMC_SCHAN_ERRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SCHAN_MESSAGE
 * BLOCKS:   CMIC
 * DESC:     S-bus PIO Message Register Set
 * SIZE:     32
 */
#define CMIC_CMC_SCHAN_MESSAGEr 0x0003100c

#define CMIC_CMC_SCHAN_MESSAGEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SCHAN_MESSAGE.
 */
typedef union CMIC_CMC_SCHAN_MESSAGEr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_schan_message[1];
	uint32_t _cmic_cmc_schan_message;
} CMIC_CMC_SCHAN_MESSAGEr_t;

#define CMIC_CMC_SCHAN_MESSAGEr_CLR(r) (r).cmic_cmc_schan_message[0] = 0
#define CMIC_CMC_SCHAN_MESSAGEr_SET(r,d) (r).cmic_cmc_schan_message[0] = d
#define CMIC_CMC_SCHAN_MESSAGEr_GET(r) (r).cmic_cmc_schan_message[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SCHAN_MESSAGEr_DATAf_GET(r) ((r).cmic_cmc_schan_message[0])
#define CMIC_CMC_SCHAN_MESSAGEr_DATAf_SET(r,f) (r).cmic_cmc_schan_message[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_SCHAN_MESSAGE.
 */
#define READ_CMIC_CMC_SCHAN_MESSAGEr(u,i,r) CDK_XGSM_CMC_READ(u,CMIC_CMC_SCHAN_MESSAGEr+(4*(i)),r._cmic_cmc_schan_message)
#define WRITE_CMIC_CMC_SCHAN_MESSAGEr(u,i,r) CDK_XGSM_CMC_WRITE(u,CMIC_CMC_SCHAN_MESSAGEr+(4*(i)),r._cmic_cmc_schan_message)

/*******************************************************************************
 * End of 'CMIC_CMC_SCHAN_MESSAGEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_COMMON_PCIE_PIO_ENDIANESS
 * BLOCKS:   CMIC
 * DESC:     PCIE PIO Endianess.
 * SIZE:     32
 */
#define CMIC_COMMON_PCIE_PIO_ENDIANESSr 0x000101ec

#define CMIC_COMMON_PCIE_PIO_ENDIANESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_COMMON_PCIE_PIO_ENDIANESS.
 */
typedef union CMIC_COMMON_PCIE_PIO_ENDIANESSr_s {
	uint32_t v[1];
	uint32_t cmic_common_pcie_pio_endianess[1];
	uint32_t _cmic_common_pcie_pio_endianess;
} CMIC_COMMON_PCIE_PIO_ENDIANESSr_t;

#define CMIC_COMMON_PCIE_PIO_ENDIANESSr_CLR(r) (r).cmic_common_pcie_pio_endianess[0] = 0
#define CMIC_COMMON_PCIE_PIO_ENDIANESSr_SET(r,d) (r).cmic_common_pcie_pio_endianess[0] = d
#define CMIC_COMMON_PCIE_PIO_ENDIANESSr_GET(r) (r).cmic_common_pcie_pio_endianess[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_COMMON_PCIE_PIO_ENDIANESSr_ENDIANESSf_GET(r) (((r).cmic_common_pcie_pio_endianess[0]) & 0x1)
#define CMIC_COMMON_PCIE_PIO_ENDIANESSr_ENDIANESSf_SET(r,f) (r).cmic_common_pcie_pio_endianess[0]=(((r).cmic_common_pcie_pio_endianess[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access CMIC_COMMON_PCIE_PIO_ENDIANESS.
 */
#define READ_CMIC_COMMON_PCIE_PIO_ENDIANESSr(u,r) CDK_DEV_READ32(u,CMIC_COMMON_PCIE_PIO_ENDIANESSr,r._cmic_common_pcie_pio_endianess)
#define WRITE_CMIC_COMMON_PCIE_PIO_ENDIANESSr(u,r) CDK_DEV_WRITE32(u,CMIC_COMMON_PCIE_PIO_ENDIANESSr,r._cmic_common_pcie_pio_endianess)

/*******************************************************************************
 * End of 'CMIC_COMMON_PCIE_PIO_ENDIANESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_COMMON_UC0_PIO_ENDIANESS
 * BLOCKS:   CMIC
 * DESC:     UC0 PIO Endianess.
 * SIZE:     32
 */
#define CMIC_COMMON_UC0_PIO_ENDIANESSr 0x000101f0

#define CMIC_COMMON_UC0_PIO_ENDIANESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_COMMON_UC0_PIO_ENDIANESS.
 */
typedef union CMIC_COMMON_UC0_PIO_ENDIANESSr_s {
	uint32_t v[1];
	uint32_t cmic_common_uc0_pio_endianess[1];
	uint32_t _cmic_common_uc0_pio_endianess;
} CMIC_COMMON_UC0_PIO_ENDIANESSr_t;

#define CMIC_COMMON_UC0_PIO_ENDIANESSr_CLR(r) (r).cmic_common_uc0_pio_endianess[0] = 0
#define CMIC_COMMON_UC0_PIO_ENDIANESSr_SET(r,d) (r).cmic_common_uc0_pio_endianess[0] = d
#define CMIC_COMMON_UC0_PIO_ENDIANESSr_GET(r) (r).cmic_common_uc0_pio_endianess[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_COMMON_UC0_PIO_ENDIANESSr_ENDIANESSf_GET(r) (((r).cmic_common_uc0_pio_endianess[0]) & 0x1)
#define CMIC_COMMON_UC0_PIO_ENDIANESSr_ENDIANESSf_SET(r,f) (r).cmic_common_uc0_pio_endianess[0]=(((r).cmic_common_uc0_pio_endianess[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access CMIC_COMMON_UC0_PIO_ENDIANESS.
 */
#define READ_CMIC_COMMON_UC0_PIO_ENDIANESSr(u,r) CDK_DEV_READ32(u,CMIC_COMMON_UC0_PIO_ENDIANESSr,r._cmic_common_uc0_pio_endianess)
#define WRITE_CMIC_COMMON_UC0_PIO_ENDIANESSr(u,r) CDK_DEV_WRITE32(u,CMIC_COMMON_UC0_PIO_ENDIANESSr,r._cmic_common_uc0_pio_endianess)

/*******************************************************************************
 * End of 'CMIC_COMMON_UC0_PIO_ENDIANESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PCIE_CONFIG
 * BLOCKS:   CMIC
 * DESC:     PCIe Interrupt polarity.
 * SIZE:     32
 */
#define CMIC_PCIE_CONFIGr 0x00010208

#define CMIC_PCIE_CONFIGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PCIE_CONFIG.
 */
typedef union CMIC_PCIE_CONFIGr_s {
	uint32_t v[1];
	uint32_t cmic_pcie_config[1];
	uint32_t _cmic_pcie_config;
} CMIC_PCIE_CONFIGr_t;

#define CMIC_PCIE_CONFIGr_CLR(r) (r).cmic_pcie_config[0] = 0
#define CMIC_PCIE_CONFIGr_SET(r,d) (r).cmic_pcie_config[0] = d
#define CMIC_PCIE_CONFIGr_GET(r) (r).cmic_pcie_config[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PCIE_CONFIGr_ACT_LOW_INTRf_GET(r) (((r).cmic_pcie_config[0]) & 0x1)
#define CMIC_PCIE_CONFIGr_ACT_LOW_INTRf_SET(r,f) (r).cmic_pcie_config[0]=(((r).cmic_pcie_config[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_PCIE_CONFIGr_WRITEREQ_PLD_SIZEf_GET(r) ((((r).cmic_pcie_config[0]) >> 1) & 0x3)
#define CMIC_PCIE_CONFIGr_WRITEREQ_PLD_SIZEf_SET(r,f) (r).cmic_pcie_config[0]=(((r).cmic_pcie_config[0] & ~((uint32_t)0x3 << 1)) | ((((uint32_t)f) & 0x3) << 1))
#define CMIC_PCIE_CONFIGr_READREQ_PLD_SIZEf_GET(r) ((((r).cmic_pcie_config[0]) >> 3) & 0x3)
#define CMIC_PCIE_CONFIGr_READREQ_PLD_SIZEf_SET(r,f) (r).cmic_pcie_config[0]=(((r).cmic_pcie_config[0] & ~((uint32_t)0x3 << 3)) | ((((uint32_t)f) & 0x3) << 3))

/*
 * These macros can be used to access CMIC_PCIE_CONFIG.
 */
#define READ_CMIC_PCIE_CONFIGr(u,r) CDK_DEV_READ32(u,CMIC_PCIE_CONFIGr,r._cmic_pcie_config)
#define WRITE_CMIC_PCIE_CONFIGr(u,r) CDK_DEV_WRITE32(u,CMIC_PCIE_CONFIGr,r._cmic_pcie_config)

/*******************************************************************************
 * End of 'CMIC_PCIE_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_RXBUF_EP_RLS_CRED
 * BLOCKS:   CMIC
 * DESC:     This register has the config bit which when written to 1 will release the max number of credits to the EP block so EP block can send data worth number of credits times 8B. This has to be done only once after both CMIC and EP blocks are out of reset. If EP block is not out of reset, it will not be able to sample the number of credits released to it resulting in hang scenario. Once ininitial credits are released, CMIC block will continue to release the credits as it reads the interface buffer.

 * SIZE:     32
 */
#define CMIC_RXBUF_EP_RLS_CREDr 0x0001a000

#define CMIC_RXBUF_EP_RLS_CREDr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_RXBUF_EP_RLS_CRED.
 */
typedef union CMIC_RXBUF_EP_RLS_CREDr_s {
	uint32_t v[1];
	uint32_t cmic_rxbuf_ep_rls_cred[1];
	uint32_t _cmic_rxbuf_ep_rls_cred;
} CMIC_RXBUF_EP_RLS_CREDr_t;

#define CMIC_RXBUF_EP_RLS_CREDr_CLR(r) (r).cmic_rxbuf_ep_rls_cred[0] = 0
#define CMIC_RXBUF_EP_RLS_CREDr_SET(r,d) (r).cmic_rxbuf_ep_rls_cred[0] = d
#define CMIC_RXBUF_EP_RLS_CREDr_GET(r) (r).cmic_rxbuf_ep_rls_cred[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_RXBUF_EP_RLS_CREDr_RELEASE_ALL_CREDITSf_GET(r) (((r).cmic_rxbuf_ep_rls_cred[0]) & 0x1)
#define CMIC_RXBUF_EP_RLS_CREDr_RELEASE_ALL_CREDITSf_SET(r,f) (r).cmic_rxbuf_ep_rls_cred[0]=(((r).cmic_rxbuf_ep_rls_cred[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access CMIC_RXBUF_EP_RLS_CRED.
 */
#define READ_CMIC_RXBUF_EP_RLS_CREDr(u,r) CDK_DEV_READ32(u,CMIC_RXBUF_EP_RLS_CREDr,r._cmic_rxbuf_ep_rls_cred)
#define WRITE_CMIC_RXBUF_EP_RLS_CREDr(u,r) CDK_DEV_WRITE32(u,CMIC_RXBUF_EP_RLS_CREDr,r._cmic_rxbuf_ep_rls_cred)

/*******************************************************************************
 * End of 'CMIC_RXBUF_EP_RLS_CREDr'
 */




#endif /* __CDK_XGSM_CMIC_H__ */
