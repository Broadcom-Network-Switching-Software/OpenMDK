/*
 * 
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 * 
 * This software is governed by the Broadcom Switch APIs license.
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenMDK/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */

#ifndef __BMD_H__
#define __BMD_H__

#include <bmd_config.h>
#include <cdk/cdk_types.h>
#include <cdk/cdk_error.h>
#include <bmd/bmd_device.h>
#include <bmdi/bmd_devlist.h>
#include <bmdi/bmd_remap.h>

/* MAC address type. */
typedef struct bmd_mac_addr_s {
    uint8_t b[6]; 
} bmd_mac_addr_t;

/* Attach BMD device to a CDK device. */
extern int bmd_attach(
    int unit);

/* Detaches BMD device from a CDK device. */
extern int bmd_detach(
    int unit);

/* Reset switch chip. */
extern int bmd_reset(
    int unit);

/* Initialize switch chip. */
extern int bmd_init(
    int unit);

/* Port Mode Enumeration. */
typedef enum bmd_port_mode_e {
    bmdPortModeDisabled, 
    bmdPortModeAuto, 
    bmdPortMode10hd, 
    bmdPortMode10fd, 
    bmdPortMode100hd, 
    bmdPortMode100fd, 
    bmdPortMode100FX, 
    bmdPortMode1000fd, 
    bmdPortMode1000hd, 
    bmdPortMode1000X, 
    bmdPortMode1000TBI, 
    bmdPortMode1000KX,
    bmdPortMode2000fd, 
    bmdPortMode2500fd, 
    bmdPortMode5000fd,
    bmdPortMode10000fd, 
    bmdPortMode10000SFI, 
    bmdPortMode10000XFI,
    bmdPortMode10000CR,
    bmdPortMode10000KR,
    bmdPortMode10000KX, 
    bmdPortMode11000fd,
    bmdPortMode12000fd, 
    bmdPortMode13000fd, 
    bmdPortMode15000fd, 
    bmdPortMode16000fd, 
    bmdPortMode20000fd,
    bmdPortMode20000KR,
    bmdPortMode21000fd, 
    bmdPortMode25000fd,
    bmdPortMode25000XFI,
    bmdPortMode30000fd, 
    bmdPortMode40000fd, 
    bmdPortMode40000CR, 
    bmdPortMode40000KR,
    bmdPortMode40000SR,
    bmdPortMode42000fd,
    bmdPortMode42000KR,
    bmdPortMode50000fd,
    bmdPortMode50000KR,
    bmdPortMode53000fd,
    bmdPortMode53000KR,
    bmdPortMode100000fd,
    bmdPortMode100000CR,
    bmdPortMode100000KR,
    bmdPortMode100000SR,
    bmdPortMode127000fd, 
    bmdPortModeCount 
} bmd_port_mode_t;

#define BMD_PORT_MODE_STRINGS \
    "Disabled", \
    "Auto", \
    "10hd", \
    "10fd", \
    "100hd", \
    "100fd", \
    "100FX", \
    "1000fd", \
    "1000hd", \
    "1000X", \
    "1000TBI", \
    "1000KX", \
    "2000fd", \
    "2500fd", \
    "5000fd", \
    "10000fd", \
    "10000SFI", \
    "10000XFI", \
    "10000CR", \
    "10000KR", \
    "10000KX", \
    "11000fd", \
    "12000fd", \
    "13000fd", \
    "15000fd", \
    "16000fd", \
    "20000fd", \
    "20000KR", \
    "21000fd", \
    "25000fd", \
    "25000XFI", \
    "30000fd", \
    "40000fd", \
    "40000CR", \
    "40000KR", \
    "40000SR", \
    "42000fd", \
    "42000KR", \
    "50000fd", \
    "50000KR", \
    "53000fd", \
    "53000KR", \
    "100000fd", \
    "100000CR", \
    "100000KR", \
    "100000SR", \
    "127000fd" 

#define BMD_PORT_MODE_F_MAC_LOOPBACK    0x00000001 
#define BMD_PORT_MODE_F_PHY_LOOPBACK    0x00000002 
#define BMD_PORT_MODE_F_REMOTE_LOOPBACK 0x00000004 
#define BMD_PORT_MODE_F_HIGIG           0x00000008 
#define BMD_PORT_MODE_F_HIGIG2          0x00000010 
#define BMD_PORT_MODE_F_HGLITE          0x00000020 
#define BMD_PORT_MODE_F_SCH             0x00000040 
#define BMD_PORT_MODE_F_ASSP            0x00000080 
#define BMD_PORT_MODE_F_INTERNAL        0x00000100 
#define BMD_PORT_MODE_F_LINK_UP         0x00000200 
#define BMD_PORT_MODE_F_AUTONEG         0x00000400 
#define BMD_PORT_MODE_F_EEE             0x00000800 
#define BMD_PORT_MODE_F_AUTOGREEEN      0x00001000 

/* Set port mode. */
extern int bmd_port_mode_set(
    int unit, 
    int port, 
    bmd_port_mode_t mode, 
    uint32_t flags);

/* Get current port mode. */
extern int bmd_port_mode_get(
    int unit, 
    int port, 
    bmd_port_mode_t *mode, 
    uint32_t *flags);

/* Update port mode based on link status. */
extern int bmd_port_mode_update(
    int unit, 
    int port);

/* Create a VLAN. */
extern int bmd_vlan_create(
    int unit, 
    int vlan);

#define BMD_VLAN_PORT_F_UNTAGGED    0x00000001 

/* Add port to a VLAN. */
extern int bmd_vlan_port_add(
    int unit, 
    int vlan, 
    int port, 
    uint32_t flags);

/* Remove port from a VLAN. */
extern int bmd_vlan_port_remove(
    int unit, 
    int vlan, 
    int port);

/* Get list of ports belonging to VLAN. */
extern int bmd_vlan_port_get(
    int unit, 
    int vlan, 
    int *plist, 
    int *utlist);

/* Destroy VLAN. */
extern int bmd_vlan_destroy(
    int unit, 
    int vlan);

/* Set default VLAN for a port. */
extern int bmd_port_vlan_set(
    int unit, 
    int port, 
    int vlan);

/* Get default VLAN for a port. */
extern int bmd_port_vlan_get(
    int unit, 
    int port, 
    int *vlan);

typedef enum bmd_stp_state_e {
    bmdSpanningTreeDisabled, 
    bmdSpanningTreeBlocking, 
    bmdSpanningTreeListening, 
    bmdSpanningTreeLearning, 
    bmdSpanningTreeForwarding, 
    bmdSpanningTreeCount 
} bmd_stp_state_t;

/* Set spanning tree protocol state. */
extern int bmd_port_stp_set(
    int unit, 
    int port, 
    bmd_stp_state_t state);

/* Get spanning tree protocol state. */
extern int bmd_port_stp_get(
    int unit, 
    int port, 
    bmd_stp_state_t *state);

/* Initialize chip for L2 switching. */
extern int bmd_switching_init(
    int unit);

/* Configure port MAC address. */
extern int bmd_port_mac_addr_add(
    int unit, 
    int port, 
    int vlan, 
    const bmd_mac_addr_t *mac_addr);

/* Delete port MAC address. */
extern int bmd_port_mac_addr_remove(
    int unit, 
    int port, 
    int vlan, 
    const bmd_mac_addr_t *mac_addr);

/* Configure CPU MAC address. */
extern int bmd_cpu_mac_addr_add(
    int unit, 
    int vlan, 
    const bmd_mac_addr_t *mac_addr);

/* Delete CPU MAC address. */
extern int bmd_cpu_mac_addr_remove(
    int unit, 
    int vlan, 
    const bmd_mac_addr_t *mac_addr);

#define BMD_PKT_F_UNTAGGED      0x00000001 
#define BMD_PKT_F_CRC_REGEN     0x00000002 

/* Packet Type Enumeration. */
typedef enum bmd_pkt_type_e {
    bmdPktTypeCtrl, 
    bmdPktTypeUC, 
    bmdPktTypeBCDLF, 
    bmdPktTypeL2MC, 
    bmdPktTypeIPMC, 
    bmdPktTypeCount 
} bmd_pkt_type_t;

typedef struct bmd_pkt_s {
    int port;                   /* Egress/ingress port number. */
    uint8_t *data;              /* Packet data buffer. */
    int size;                   /* Size of packet data. */
    dma_addr_t baddr;           /* Hardware bus address of packet data buffer. */
    uint32_t flags;             /* BMD_PKT_F_xxx flags. */
    void *cookie;               /* Optional application data. */
    bmd_pkt_type_t mh_pkt_type; /* Module header packet type. */
    uint8_t mh_src_mod;         /* Module header source module. */
    uint8_t mh_src_port;        /* Module header source port. */
    uint8_t mh_dst_mod;         /* Module header destination module. */
    uint8_t mh_dst_port;        /* Module header destination port. */
} bmd_pkt_t;

/* Transmit a packet. */
extern int bmd_tx(
    int unit, 
    const bmd_pkt_t *pkt);

/* Submit Rx packet to DMA queue. */
extern int bmd_rx_start(
    int unit, 
    bmd_pkt_t *pkt);

/* Poll for Rx packet complete. */
extern int bmd_rx_poll(
    int unit, 
    bmd_pkt_t **ppkt);

/* Abort Rx DMA. */
extern int bmd_rx_stop(
    int unit);

/* Statistics counter type. */
typedef struct bmd_counter_s {
    uint32_t v[2];  /* v[0] is least significant word. */
} bmd_counter_t;

/* Port statistics types. */
typedef enum bmd_stat_e {
    bmdStatTxPackets, 
    bmdStatTxBytes, 
    bmdStatTxErrors, 
    bmdStatRxPackets, 
    bmdStatRxBytes, 
    bmdStatRxErrors, 
    bmdStatRxDrops, 
    bmdStatCount 
} bmd_stat_t;

/* Get statistics counter. */
extern int bmd_stat_get(
    int unit, 
    int port, 
    bmd_stat_t stat, 
    bmd_counter_t *counter);

/* Clear statistics counter. */
extern int bmd_stat_clear(
    int unit, 
    int port, 
    bmd_stat_t stat);

/* Assert test interrupt. */
extern int bmd_test_interrupt_assert(
    int unit);

/* Clear test interrupt. */
extern int bmd_test_interrupt_clear(
    int unit);

/* Downloadable code types. */
typedef enum bmd_download_e {
    bmdDownloadPortLedController, 
    bmdDownloadSerdesMicroController, 
    bmdDownloadCount 
} bmd_download_t;

/* Download code to subdevice. */
extern int bmd_download(
    int unit, 
    bmd_download_t type, 
    uint8_t *data, 
    int size);

#endif /* __BMD_H__ */
