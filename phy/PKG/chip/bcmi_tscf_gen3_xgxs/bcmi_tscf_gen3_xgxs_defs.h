#ifndef __BCMI_TSCF_GEN3_XGXS_DEFS_H__
#define __BCMI_TSCF_GEN3_XGXS_DEFS_H__
/*******************************************************************************
 *
 * This software is governed by the Broadcom Switch APIs license.
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenMDK/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated from the registers file.
 * Edits to this file will be lost when it is regenerated.
 *
 * Definition file for the BCMI_TSCF_GEN3_XGXS.
 * This file provides all basic definitions required to program the BCMI_TSCF_GEN3_XGXS.
 *
 * This file is autogenerated. Please do not edit.
 */

#include <phymod/acc/phymod_tsc_iblk.h>

/*******************************************************************************
 *
 *                    CHIP DEFINITIONS BEGIN HERE
 */



/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PHYID2
 * BLOCKS:   CL22_B0
 * REGADDR:  0x0002
 * DESC:     IEEE phyID2 Register
 * RESETVAL: 0x600d (24589)
 * ACCESS:   R/O
 * FIELDS:
 *     REGID1           PHYID2 register
 */
#define BCMI_TSCF_GEN3_XGXS_PHYID2r (0x00000002 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PHYID2r_SIZE 4

/*
 * This structure should be used to declare and program PHYID2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PHYID2r_s {
	uint32_t v[1];
	uint32_t phyid2[1];
	uint32_t _phyid2;
} BCMI_TSCF_GEN3_XGXS_PHYID2r_t;

#define BCMI_TSCF_GEN3_XGXS_PHYID2r_CLR(r) (r).phyid2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PHYID2r_SET(r,d) (r).phyid2[0] = d
#define BCMI_TSCF_GEN3_XGXS_PHYID2r_GET(r) (r).phyid2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PHYID2r_REGID1f_GET(r) (((r).phyid2[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_PHYID2r_REGID1f_SET(r,f) (r).phyid2[0]=(((r).phyid2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PHYID2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PHYID2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PHYID2r,(_r._phyid2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PHYID2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PHYID2r,(_r._phyid2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PHYID2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PHYID2r,(_r._phyid2))
#define BCMI_TSCF_GEN3_XGXS_READLN_PHYID2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PHYID2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._phyid2))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_PHYID2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PHYID2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._phyid2))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_PHYID2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PHYID2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._phyid2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYID2r BCMI_TSCF_GEN3_XGXS_PHYID2r
#define PHYID2r_SIZE BCMI_TSCF_GEN3_XGXS_PHYID2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PHYID2r_t PHYID2r_t;
#define PHYID2r_CLR BCMI_TSCF_GEN3_XGXS_PHYID2r_CLR
#define PHYID2r_SET BCMI_TSCF_GEN3_XGXS_PHYID2r_SET
#define PHYID2r_GET BCMI_TSCF_GEN3_XGXS_PHYID2r_GET
#define PHYID2r_REGID1f_GET BCMI_TSCF_GEN3_XGXS_PHYID2r_REGID1f_GET
#define PHYID2r_REGID1f_SET BCMI_TSCF_GEN3_XGXS_PHYID2r_REGID1f_SET
#define READ_PHYID2r BCMI_TSCF_GEN3_XGXS_READ_PHYID2r
#define WRITE_PHYID2r BCMI_TSCF_GEN3_XGXS_WRITE_PHYID2r
#define MODIFY_PHYID2r BCMI_TSCF_GEN3_XGXS_MODIFY_PHYID2r
#define READLN_PHYID2r BCMI_TSCF_GEN3_XGXS_READLN_PHYID2r
#define WRITELN_PHYID2r BCMI_TSCF_GEN3_XGXS_WRITELN_PHYID2r
#define WRITEALL_PHYID2r BCMI_TSCF_GEN3_XGXS_WRITEALL_PHYID2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PHYID2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PHYID3
 * BLOCKS:   CL22_B0
 * REGADDR:  0x0003
 * DESC:     IEEE phyID3 Register
 * RESETVAL: 0x8770 (34672)
 * ACCESS:   R/O
 * FIELDS:
 *     REGID2           PHYID3 register
 */
#define BCMI_TSCF_GEN3_XGXS_PHYID3r (0x00000003 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PHYID3r_SIZE 4

/*
 * This structure should be used to declare and program PHYID3.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PHYID3r_s {
	uint32_t v[1];
	uint32_t phyid3[1];
	uint32_t _phyid3;
} BCMI_TSCF_GEN3_XGXS_PHYID3r_t;

#define BCMI_TSCF_GEN3_XGXS_PHYID3r_CLR(r) (r).phyid3[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PHYID3r_SET(r,d) (r).phyid3[0] = d
#define BCMI_TSCF_GEN3_XGXS_PHYID3r_GET(r) (r).phyid3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PHYID3r_REGID2f_GET(r) (((r).phyid3[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_PHYID3r_REGID2f_SET(r,f) (r).phyid3[0]=(((r).phyid3[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PHYID3.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PHYID3r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PHYID3r,(_r._phyid3))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PHYID3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PHYID3r,(_r._phyid3)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PHYID3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PHYID3r,(_r._phyid3))
#define BCMI_TSCF_GEN3_XGXS_READLN_PHYID3r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PHYID3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._phyid3))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_PHYID3r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PHYID3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._phyid3))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_PHYID3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PHYID3r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._phyid3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYID3r BCMI_TSCF_GEN3_XGXS_PHYID3r
#define PHYID3r_SIZE BCMI_TSCF_GEN3_XGXS_PHYID3r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PHYID3r_t PHYID3r_t;
#define PHYID3r_CLR BCMI_TSCF_GEN3_XGXS_PHYID3r_CLR
#define PHYID3r_SET BCMI_TSCF_GEN3_XGXS_PHYID3r_SET
#define PHYID3r_GET BCMI_TSCF_GEN3_XGXS_PHYID3r_GET
#define PHYID3r_REGID2f_GET BCMI_TSCF_GEN3_XGXS_PHYID3r_REGID2f_GET
#define PHYID3r_REGID2f_SET BCMI_TSCF_GEN3_XGXS_PHYID3r_REGID2f_SET
#define READ_PHYID3r BCMI_TSCF_GEN3_XGXS_READ_PHYID3r
#define WRITE_PHYID3r BCMI_TSCF_GEN3_XGXS_WRITE_PHYID3r
#define MODIFY_PHYID3r BCMI_TSCF_GEN3_XGXS_MODIFY_PHYID3r
#define READLN_PHYID3r BCMI_TSCF_GEN3_XGXS_READLN_PHYID3r
#define WRITELN_PHYID3r BCMI_TSCF_GEN3_XGXS_WRITELN_PHYID3r
#define WRITEALL_PHYID3r BCMI_TSCF_GEN3_XGXS_WRITEALL_PHYID3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PHYID3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  MAIN0_SETUP
 * BLOCKS:   MAIN0
 * REGADDR:  0x9000
 * DESC:     main control register
 * RESETVAL: 0x180 (384)
 * ACCESS:   R/W
 * FIELDS:
 *     TSC_CLK_CTRL     1'b0 - tsc_clk frequency : PLL/401'b1 - tsc_clk frequency : PLL/48
 *     CL73_VCO         1'b0 - VCO frequency : 20.625G1'b1 - VCO frequency : 25.78125
 *     STAND_ALONE_MODE This mode is used for testing without a MAC.The credits from the TSC and loopbed back into the TSC as DVs.The same is true for the PORT and TDM fields
 *     SINGLE_PORT_MODE Indicates TSC is in single port mode.  Used by AN logic to determine whether to reset the PLL after AN completes.If set, when AN completes, the PLL will be reset to operate consistent with the resolved AN speed.If not set, the PLL will not change once AN completes.
 *     PORT_MODE_SEL    port configuration selectsTRI_1_PORT - lanes 2,3 aggregated and 0,1 as 3 portsTRI_2_PORT - lanes 1,0 aggregated and 3,2 as 3 ports
 *     REFCLK_SEL       Specifies refclk frequency
 *     CL72_EN          Per LOGICAL LANE control to enable cl72
 *     MASTER_PORT_NUM  Port that will control PMD core logic and PLL reset0 : port 0 is master1 : port 1 is master2 : port 2 is master3 : port 3 is master
 */
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SETUPr (0x00109000 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_MAIN0_SETUPr_SIZE 4

/*
 * This structure should be used to declare and program MAIN0_SETUP.
 */
typedef union BCMI_TSCF_GEN3_XGXS_MAIN0_SETUPr_s {
	uint32_t v[1];
	uint32_t main0_setup[1];
	uint32_t _main0_setup;
} BCMI_TSCF_GEN3_XGXS_MAIN0_SETUPr_t;

#define BCMI_TSCF_GEN3_XGXS_MAIN0_SETUPr_CLR(r) (r).main0_setup[0] = 0
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SETUPr_SET(r,d) (r).main0_setup[0] = d
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SETUPr_GET(r) (r).main0_setup[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SETUPr_MASTER_PORT_NUMf_GET(r) ((((r).main0_setup[0]) >> 14) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SETUPr_MASTER_PORT_NUMf_SET(r,f) (r).main0_setup[0]=(((r).main0_setup[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SETUPr_CL72_ENf_GET(r) ((((r).main0_setup[0]) >> 10) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SETUPr_CL72_ENf_SET(r,f) (r).main0_setup[0]=(((r).main0_setup[0] & ~((uint32_t)0xf << 10)) | ((((uint32_t)f) & 0xf) << 10)) | (15 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SETUPr_REFCLK_SELf_GET(r) ((((r).main0_setup[0]) >> 7) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SETUPr_REFCLK_SELf_SET(r,f) (r).main0_setup[0]=(((r).main0_setup[0] & ~((uint32_t)0x7 << 7)) | ((((uint32_t)f) & 0x7) << 7)) | (7 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SETUPr_PORT_MODE_SELf_GET(r) ((((r).main0_setup[0]) >> 4) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SETUPr_PORT_MODE_SELf_SET(r,f) (r).main0_setup[0]=(((r).main0_setup[0] & ~((uint32_t)0x7 << 4)) | ((((uint32_t)f) & 0x7) << 4)) | (7 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SETUPr_SINGLE_PORT_MODEf_GET(r) ((((r).main0_setup[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SETUPr_SINGLE_PORT_MODEf_SET(r,f) (r).main0_setup[0]=(((r).main0_setup[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SETUPr_STAND_ALONE_MODEf_GET(r) ((((r).main0_setup[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SETUPr_STAND_ALONE_MODEf_SET(r,f) (r).main0_setup[0]=(((r).main0_setup[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SETUPr_CL73_VCOf_GET(r) ((((r).main0_setup[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SETUPr_CL73_VCOf_SET(r,f) (r).main0_setup[0]=(((r).main0_setup[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SETUPr_TSC_CLK_CTRLf_GET(r) (((r).main0_setup[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SETUPr_TSC_CLK_CTRLf_SET(r,f) (r).main0_setup[0]=(((r).main0_setup[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access MAIN0_SETUP.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_MAIN0_SETUPr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_MAIN0_SETUPr,(_r._main0_setup))
#define BCMI_TSCF_GEN3_XGXS_WRITE_MAIN0_SETUPr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_MAIN0_SETUPr,(_r._main0_setup)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_MAIN0_SETUPr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_MAIN0_SETUPr,(_r._main0_setup))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MAIN0_SETUPr BCMI_TSCF_GEN3_XGXS_MAIN0_SETUPr
#define MAIN0_SETUPr_SIZE BCMI_TSCF_GEN3_XGXS_MAIN0_SETUPr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_MAIN0_SETUPr_t MAIN0_SETUPr_t;
#define MAIN0_SETUPr_CLR BCMI_TSCF_GEN3_XGXS_MAIN0_SETUPr_CLR
#define MAIN0_SETUPr_SET BCMI_TSCF_GEN3_XGXS_MAIN0_SETUPr_SET
#define MAIN0_SETUPr_GET BCMI_TSCF_GEN3_XGXS_MAIN0_SETUPr_GET
#define MAIN0_SETUPr_MASTER_PORT_NUMf_GET BCMI_TSCF_GEN3_XGXS_MAIN0_SETUPr_MASTER_PORT_NUMf_GET
#define MAIN0_SETUPr_MASTER_PORT_NUMf_SET BCMI_TSCF_GEN3_XGXS_MAIN0_SETUPr_MASTER_PORT_NUMf_SET
#define MAIN0_SETUPr_CL72_ENf_GET BCMI_TSCF_GEN3_XGXS_MAIN0_SETUPr_CL72_ENf_GET
#define MAIN0_SETUPr_CL72_ENf_SET BCMI_TSCF_GEN3_XGXS_MAIN0_SETUPr_CL72_ENf_SET
#define MAIN0_SETUPr_REFCLK_SELf_GET BCMI_TSCF_GEN3_XGXS_MAIN0_SETUPr_REFCLK_SELf_GET
#define MAIN0_SETUPr_REFCLK_SELf_SET BCMI_TSCF_GEN3_XGXS_MAIN0_SETUPr_REFCLK_SELf_SET
#define MAIN0_SETUPr_PORT_MODE_SELf_GET BCMI_TSCF_GEN3_XGXS_MAIN0_SETUPr_PORT_MODE_SELf_GET
#define MAIN0_SETUPr_PORT_MODE_SELf_SET BCMI_TSCF_GEN3_XGXS_MAIN0_SETUPr_PORT_MODE_SELf_SET
#define MAIN0_SETUPr_SINGLE_PORT_MODEf_GET BCMI_TSCF_GEN3_XGXS_MAIN0_SETUPr_SINGLE_PORT_MODEf_GET
#define MAIN0_SETUPr_SINGLE_PORT_MODEf_SET BCMI_TSCF_GEN3_XGXS_MAIN0_SETUPr_SINGLE_PORT_MODEf_SET
#define MAIN0_SETUPr_STAND_ALONE_MODEf_GET BCMI_TSCF_GEN3_XGXS_MAIN0_SETUPr_STAND_ALONE_MODEf_GET
#define MAIN0_SETUPr_STAND_ALONE_MODEf_SET BCMI_TSCF_GEN3_XGXS_MAIN0_SETUPr_STAND_ALONE_MODEf_SET
#define MAIN0_SETUPr_CL73_VCOf_GET BCMI_TSCF_GEN3_XGXS_MAIN0_SETUPr_CL73_VCOf_GET
#define MAIN0_SETUPr_CL73_VCOf_SET BCMI_TSCF_GEN3_XGXS_MAIN0_SETUPr_CL73_VCOf_SET
#define MAIN0_SETUPr_TSC_CLK_CTRLf_GET BCMI_TSCF_GEN3_XGXS_MAIN0_SETUPr_TSC_CLK_CTRLf_GET
#define MAIN0_SETUPr_TSC_CLK_CTRLf_SET BCMI_TSCF_GEN3_XGXS_MAIN0_SETUPr_TSC_CLK_CTRLf_SET
#define READ_MAIN0_SETUPr BCMI_TSCF_GEN3_XGXS_READ_MAIN0_SETUPr
#define WRITE_MAIN0_SETUPr BCMI_TSCF_GEN3_XGXS_WRITE_MAIN0_SETUPr
#define MODIFY_MAIN0_SETUPr BCMI_TSCF_GEN3_XGXS_MODIFY_MAIN0_SETUPr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_MAIN0_SETUPr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  MAIN0_SYNCE_CTL
 * BLOCKS:   MAIN0
 * REGADDR:  0x9001
 * DESC:     SyncE mode register
 * RESETVAL: 0xaa (170)
 * ACCESS:   R/W
 * FIELDS:
 *     SYNCE_MODE_PHY_LANE0 this is for syncE stage1 mode control
 *     SYNCE_MODE_PHY_LANE1 this is for syncE stage1 mode control
 *     SYNCE_MODE_PHY_LANE2 this is for syncE stage1 mode control
 *     SYNCE_MODE_PHY_LANE3 this is for syncE stage1 mode control
 */
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTLr (0x00109001 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTLr_SIZE 4

/*
 * This structure should be used to declare and program MAIN0_SYNCE_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTLr_s {
	uint32_t v[1];
	uint32_t main0_synce_ctl[1];
	uint32_t _main0_synce_ctl;
} BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTLr_CLR(r) (r).main0_synce_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTLr_SET(r,d) (r).main0_synce_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTLr_GET(r) (r).main0_synce_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTLr_SYNCE_MODE_PHY_LANE3f_GET(r) ((((r).main0_synce_ctl[0]) >> 6) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTLr_SYNCE_MODE_PHY_LANE3f_SET(r,f) (r).main0_synce_ctl[0]=(((r).main0_synce_ctl[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6)) | (3 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTLr_SYNCE_MODE_PHY_LANE2f_GET(r) ((((r).main0_synce_ctl[0]) >> 4) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTLr_SYNCE_MODE_PHY_LANE2f_SET(r,f) (r).main0_synce_ctl[0]=(((r).main0_synce_ctl[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTLr_SYNCE_MODE_PHY_LANE1f_GET(r) ((((r).main0_synce_ctl[0]) >> 2) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTLr_SYNCE_MODE_PHY_LANE1f_SET(r,f) (r).main0_synce_ctl[0]=(((r).main0_synce_ctl[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2)) | (3 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTLr_SYNCE_MODE_PHY_LANE0f_GET(r) (((r).main0_synce_ctl[0]) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTLr_SYNCE_MODE_PHY_LANE0f_SET(r,f) (r).main0_synce_ctl[0]=(((r).main0_synce_ctl[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access MAIN0_SYNCE_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_MAIN0_SYNCE_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTLr,(_r._main0_synce_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_MAIN0_SYNCE_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTLr,(_r._main0_synce_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_MAIN0_SYNCE_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTLr,(_r._main0_synce_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MAIN0_SYNCE_CTLr BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTLr
#define MAIN0_SYNCE_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTLr_t MAIN0_SYNCE_CTLr_t;
#define MAIN0_SYNCE_CTLr_CLR BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTLr_CLR
#define MAIN0_SYNCE_CTLr_SET BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTLr_SET
#define MAIN0_SYNCE_CTLr_GET BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTLr_GET
#define MAIN0_SYNCE_CTLr_SYNCE_MODE_PHY_LANE3f_GET BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTLr_SYNCE_MODE_PHY_LANE3f_GET
#define MAIN0_SYNCE_CTLr_SYNCE_MODE_PHY_LANE3f_SET BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTLr_SYNCE_MODE_PHY_LANE3f_SET
#define MAIN0_SYNCE_CTLr_SYNCE_MODE_PHY_LANE2f_GET BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTLr_SYNCE_MODE_PHY_LANE2f_GET
#define MAIN0_SYNCE_CTLr_SYNCE_MODE_PHY_LANE2f_SET BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTLr_SYNCE_MODE_PHY_LANE2f_SET
#define MAIN0_SYNCE_CTLr_SYNCE_MODE_PHY_LANE1f_GET BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTLr_SYNCE_MODE_PHY_LANE1f_GET
#define MAIN0_SYNCE_CTLr_SYNCE_MODE_PHY_LANE1f_SET BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTLr_SYNCE_MODE_PHY_LANE1f_SET
#define MAIN0_SYNCE_CTLr_SYNCE_MODE_PHY_LANE0f_GET BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTLr_SYNCE_MODE_PHY_LANE0f_GET
#define MAIN0_SYNCE_CTLr_SYNCE_MODE_PHY_LANE0f_SET BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTLr_SYNCE_MODE_PHY_LANE0f_SET
#define READ_MAIN0_SYNCE_CTLr BCMI_TSCF_GEN3_XGXS_READ_MAIN0_SYNCE_CTLr
#define WRITE_MAIN0_SYNCE_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_MAIN0_SYNCE_CTLr
#define MODIFY_MAIN0_SYNCE_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_MAIN0_SYNCE_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  MAIN0_SYNCE_CTL_STAGE0
 * BLOCKS:   MAIN0
 * REGADDR:  0x9002
 * DESC:     SyncE mode register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     SYNCE_STAGE0_MODE_PHY_LANE0 this is for syncE stage0 mode control
 *     SYNCE_STAGE0_MODE_PHY_LANE1 this is for syncE stage0 mode control
 *     SYNCE_STAGE0_MODE_PHY_LANE2 this is for syncE stage0 mode control
 *     SYNCE_STAGE0_MODE_PHY_LANE3 this is for syncE stage0 mode control
 */
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTL_STAGE0r (0x00109002 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTL_STAGE0r_SIZE 4

/*
 * This structure should be used to declare and program MAIN0_SYNCE_CTL_STAGE0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTL_STAGE0r_s {
	uint32_t v[1];
	uint32_t main0_synce_ctl_stage0[1];
	uint32_t _main0_synce_ctl_stage0;
} BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTL_STAGE0r_t;

#define BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTL_STAGE0r_CLR(r) (r).main0_synce_ctl_stage0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTL_STAGE0r_SET(r,d) (r).main0_synce_ctl_stage0[0] = d
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTL_STAGE0r_GET(r) (r).main0_synce_ctl_stage0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTL_STAGE0r_SYNCE_STAGE0_MODE_PHY_LANE3f_GET(r) ((((r).main0_synce_ctl_stage0[0]) >> 6) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTL_STAGE0r_SYNCE_STAGE0_MODE_PHY_LANE3f_SET(r,f) (r).main0_synce_ctl_stage0[0]=(((r).main0_synce_ctl_stage0[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6)) | (3 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTL_STAGE0r_SYNCE_STAGE0_MODE_PHY_LANE2f_GET(r) ((((r).main0_synce_ctl_stage0[0]) >> 4) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTL_STAGE0r_SYNCE_STAGE0_MODE_PHY_LANE2f_SET(r,f) (r).main0_synce_ctl_stage0[0]=(((r).main0_synce_ctl_stage0[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTL_STAGE0r_SYNCE_STAGE0_MODE_PHY_LANE1f_GET(r) ((((r).main0_synce_ctl_stage0[0]) >> 2) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTL_STAGE0r_SYNCE_STAGE0_MODE_PHY_LANE1f_SET(r,f) (r).main0_synce_ctl_stage0[0]=(((r).main0_synce_ctl_stage0[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2)) | (3 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTL_STAGE0r_SYNCE_STAGE0_MODE_PHY_LANE0f_GET(r) (((r).main0_synce_ctl_stage0[0]) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTL_STAGE0r_SYNCE_STAGE0_MODE_PHY_LANE0f_SET(r,f) (r).main0_synce_ctl_stage0[0]=(((r).main0_synce_ctl_stage0[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access MAIN0_SYNCE_CTL_STAGE0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_MAIN0_SYNCE_CTL_STAGE0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTL_STAGE0r,(_r._main0_synce_ctl_stage0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_MAIN0_SYNCE_CTL_STAGE0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTL_STAGE0r,(_r._main0_synce_ctl_stage0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_MAIN0_SYNCE_CTL_STAGE0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTL_STAGE0r,(_r._main0_synce_ctl_stage0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MAIN0_SYNCE_CTL_STAGE0r BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTL_STAGE0r
#define MAIN0_SYNCE_CTL_STAGE0r_SIZE BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTL_STAGE0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTL_STAGE0r_t MAIN0_SYNCE_CTL_STAGE0r_t;
#define MAIN0_SYNCE_CTL_STAGE0r_CLR BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTL_STAGE0r_CLR
#define MAIN0_SYNCE_CTL_STAGE0r_SET BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTL_STAGE0r_SET
#define MAIN0_SYNCE_CTL_STAGE0r_GET BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTL_STAGE0r_GET
#define MAIN0_SYNCE_CTL_STAGE0r_SYNCE_STAGE0_MODE_PHY_LANE3f_GET BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTL_STAGE0r_SYNCE_STAGE0_MODE_PHY_LANE3f_GET
#define MAIN0_SYNCE_CTL_STAGE0r_SYNCE_STAGE0_MODE_PHY_LANE3f_SET BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTL_STAGE0r_SYNCE_STAGE0_MODE_PHY_LANE3f_SET
#define MAIN0_SYNCE_CTL_STAGE0r_SYNCE_STAGE0_MODE_PHY_LANE2f_GET BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTL_STAGE0r_SYNCE_STAGE0_MODE_PHY_LANE2f_GET
#define MAIN0_SYNCE_CTL_STAGE0r_SYNCE_STAGE0_MODE_PHY_LANE2f_SET BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTL_STAGE0r_SYNCE_STAGE0_MODE_PHY_LANE2f_SET
#define MAIN0_SYNCE_CTL_STAGE0r_SYNCE_STAGE0_MODE_PHY_LANE1f_GET BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTL_STAGE0r_SYNCE_STAGE0_MODE_PHY_LANE1f_GET
#define MAIN0_SYNCE_CTL_STAGE0r_SYNCE_STAGE0_MODE_PHY_LANE1f_SET BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTL_STAGE0r_SYNCE_STAGE0_MODE_PHY_LANE1f_SET
#define MAIN0_SYNCE_CTL_STAGE0r_SYNCE_STAGE0_MODE_PHY_LANE0f_GET BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTL_STAGE0r_SYNCE_STAGE0_MODE_PHY_LANE0f_GET
#define MAIN0_SYNCE_CTL_STAGE0r_SYNCE_STAGE0_MODE_PHY_LANE0f_SET BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTL_STAGE0r_SYNCE_STAGE0_MODE_PHY_LANE0f_SET
#define READ_MAIN0_SYNCE_CTL_STAGE0r BCMI_TSCF_GEN3_XGXS_READ_MAIN0_SYNCE_CTL_STAGE0r
#define WRITE_MAIN0_SYNCE_CTL_STAGE0r BCMI_TSCF_GEN3_XGXS_WRITE_MAIN0_SYNCE_CTL_STAGE0r
#define MODIFY_MAIN0_SYNCE_CTL_STAGE0r BCMI_TSCF_GEN3_XGXS_MODIFY_MAIN0_SYNCE_CTL_STAGE0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_MAIN0_SYNCE_CTL_STAGE0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  MAIN0_SPD_CTL
 * BLOCKS:   MAIN0
 * REGADDR:  0x9003
 * DESC:     Speed Control Register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     PLL_RESET_EN     Enable reseting PMD core logic and PLL by Speed control. The port that will reset the pll is selected by master_port_number
 *     TSC_CREDIT_SEL   1-Enables generation of credit based on tsc_clk.0-Enables generation of credit based on PMD transmit clock.
 */
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SPD_CTLr (0x00109003 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_MAIN0_SPD_CTLr_SIZE 4

/*
 * This structure should be used to declare and program MAIN0_SPD_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_MAIN0_SPD_CTLr_s {
	uint32_t v[1];
	uint32_t main0_spd_ctl[1];
	uint32_t _main0_spd_ctl;
} BCMI_TSCF_GEN3_XGXS_MAIN0_SPD_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_MAIN0_SPD_CTLr_CLR(r) (r).main0_spd_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SPD_CTLr_SET(r,d) (r).main0_spd_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SPD_CTLr_GET(r) (r).main0_spd_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SPD_CTLr_TSC_CREDIT_SELf_GET(r) ((((r).main0_spd_ctl[0]) >> 11) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SPD_CTLr_TSC_CREDIT_SELf_SET(r,f) (r).main0_spd_ctl[0]=(((r).main0_spd_ctl[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SPD_CTLr_PLL_RESET_ENf_GET(r) ((((r).main0_spd_ctl[0]) >> 8) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SPD_CTLr_PLL_RESET_ENf_SET(r,f) (r).main0_spd_ctl[0]=(((r).main0_spd_ctl[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))

/*
 * These macros can be used to access MAIN0_SPD_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_MAIN0_SPD_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_MAIN0_SPD_CTLr,(_r._main0_spd_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_MAIN0_SPD_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_MAIN0_SPD_CTLr,(_r._main0_spd_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_MAIN0_SPD_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_MAIN0_SPD_CTLr,(_r._main0_spd_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MAIN0_SPD_CTLr BCMI_TSCF_GEN3_XGXS_MAIN0_SPD_CTLr
#define MAIN0_SPD_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_MAIN0_SPD_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_MAIN0_SPD_CTLr_t MAIN0_SPD_CTLr_t;
#define MAIN0_SPD_CTLr_CLR BCMI_TSCF_GEN3_XGXS_MAIN0_SPD_CTLr_CLR
#define MAIN0_SPD_CTLr_SET BCMI_TSCF_GEN3_XGXS_MAIN0_SPD_CTLr_SET
#define MAIN0_SPD_CTLr_GET BCMI_TSCF_GEN3_XGXS_MAIN0_SPD_CTLr_GET
#define MAIN0_SPD_CTLr_TSC_CREDIT_SELf_GET BCMI_TSCF_GEN3_XGXS_MAIN0_SPD_CTLr_TSC_CREDIT_SELf_GET
#define MAIN0_SPD_CTLr_TSC_CREDIT_SELf_SET BCMI_TSCF_GEN3_XGXS_MAIN0_SPD_CTLr_TSC_CREDIT_SELf_SET
#define MAIN0_SPD_CTLr_PLL_RESET_ENf_GET BCMI_TSCF_GEN3_XGXS_MAIN0_SPD_CTLr_PLL_RESET_ENf_GET
#define MAIN0_SPD_CTLr_PLL_RESET_ENf_SET BCMI_TSCF_GEN3_XGXS_MAIN0_SPD_CTLr_PLL_RESET_ENf_SET
#define READ_MAIN0_SPD_CTLr BCMI_TSCF_GEN3_XGXS_READ_MAIN0_SPD_CTLr
#define WRITE_MAIN0_SPD_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_MAIN0_SPD_CTLr
#define MODIFY_MAIN0_SPD_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_MAIN0_SPD_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_MAIN0_SPD_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  MAIN0_DEVINPKG5
 * BLOCKS:   MAIN0
 * REGADDR:  0x9004
 * DESC:     Devices in Package5
 * RESETVAL: 0x83 (131)
 * ACCESS:   R/O
 * FIELDS:
 *     CLAUSE22         1 = Clause 22 registers present in package0 = Clause 22 registers not present in package
 *     PMA_PMD          1 = PMA/PMD present in package0 = PMA/PMD not present in package
 *     WIS              1 = WIS present in package0 = WIS not present in package
 *     PCS_XS           1 = PCS present in package0 = PCS not present in package
 *     PHY_XS           1 = PHY XS present in package0 = PHY XS not present in package
 *     DTE_XS           1 = DTE XS present in package0 = DTE XS not present in package
 *     TC               1 = TC present in package0 = TC not present in package
 *     AN               1 = Auto-Negotiation present in package0 = Auto-Negotiation not present in package
 */
#define BCMI_TSCF_GEN3_XGXS_MAIN0_DEVINPKG5r (0x00109004 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_MAIN0_DEVINPKG5r_SIZE 4

/*
 * This structure should be used to declare and program MAIN0_DEVINPKG5.
 */
typedef union BCMI_TSCF_GEN3_XGXS_MAIN0_DEVINPKG5r_s {
	uint32_t v[1];
	uint32_t main0_devinpkg5[1];
	uint32_t _main0_devinpkg5;
} BCMI_TSCF_GEN3_XGXS_MAIN0_DEVINPKG5r_t;

#define BCMI_TSCF_GEN3_XGXS_MAIN0_DEVINPKG5r_CLR(r) (r).main0_devinpkg5[0] = 0
#define BCMI_TSCF_GEN3_XGXS_MAIN0_DEVINPKG5r_SET(r,d) (r).main0_devinpkg5[0] = d
#define BCMI_TSCF_GEN3_XGXS_MAIN0_DEVINPKG5r_GET(r) (r).main0_devinpkg5[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_MAIN0_DEVINPKG5r_ANf_GET(r) ((((r).main0_devinpkg5[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_MAIN0_DEVINPKG5r_ANf_SET(r,f) (r).main0_devinpkg5[0]=(((r).main0_devinpkg5[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_MAIN0_DEVINPKG5r_TCf_GET(r) ((((r).main0_devinpkg5[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_MAIN0_DEVINPKG5r_TCf_SET(r,f) (r).main0_devinpkg5[0]=(((r).main0_devinpkg5[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_MAIN0_DEVINPKG5r_DTE_XSf_GET(r) ((((r).main0_devinpkg5[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_MAIN0_DEVINPKG5r_DTE_XSf_SET(r,f) (r).main0_devinpkg5[0]=(((r).main0_devinpkg5[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_MAIN0_DEVINPKG5r_PHY_XSf_GET(r) ((((r).main0_devinpkg5[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_MAIN0_DEVINPKG5r_PHY_XSf_SET(r,f) (r).main0_devinpkg5[0]=(((r).main0_devinpkg5[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_MAIN0_DEVINPKG5r_PCS_XSf_GET(r) ((((r).main0_devinpkg5[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_MAIN0_DEVINPKG5r_PCS_XSf_SET(r,f) (r).main0_devinpkg5[0]=(((r).main0_devinpkg5[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_MAIN0_DEVINPKG5r_WISf_GET(r) ((((r).main0_devinpkg5[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_MAIN0_DEVINPKG5r_WISf_SET(r,f) (r).main0_devinpkg5[0]=(((r).main0_devinpkg5[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_MAIN0_DEVINPKG5r_PMA_PMDf_GET(r) ((((r).main0_devinpkg5[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_MAIN0_DEVINPKG5r_PMA_PMDf_SET(r,f) (r).main0_devinpkg5[0]=(((r).main0_devinpkg5[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_MAIN0_DEVINPKG5r_CLAUSE22f_GET(r) (((r).main0_devinpkg5[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_MAIN0_DEVINPKG5r_CLAUSE22f_SET(r,f) (r).main0_devinpkg5[0]=(((r).main0_devinpkg5[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access MAIN0_DEVINPKG5.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_MAIN0_DEVINPKG5r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_MAIN0_DEVINPKG5r,(_r._main0_devinpkg5))
#define BCMI_TSCF_GEN3_XGXS_WRITE_MAIN0_DEVINPKG5r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_MAIN0_DEVINPKG5r,(_r._main0_devinpkg5)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_MAIN0_DEVINPKG5r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_MAIN0_DEVINPKG5r,(_r._main0_devinpkg5))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MAIN0_DEVINPKG5r BCMI_TSCF_GEN3_XGXS_MAIN0_DEVINPKG5r
#define MAIN0_DEVINPKG5r_SIZE BCMI_TSCF_GEN3_XGXS_MAIN0_DEVINPKG5r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_MAIN0_DEVINPKG5r_t MAIN0_DEVINPKG5r_t;
#define MAIN0_DEVINPKG5r_CLR BCMI_TSCF_GEN3_XGXS_MAIN0_DEVINPKG5r_CLR
#define MAIN0_DEVINPKG5r_SET BCMI_TSCF_GEN3_XGXS_MAIN0_DEVINPKG5r_SET
#define MAIN0_DEVINPKG5r_GET BCMI_TSCF_GEN3_XGXS_MAIN0_DEVINPKG5r_GET
#define MAIN0_DEVINPKG5r_ANf_GET BCMI_TSCF_GEN3_XGXS_MAIN0_DEVINPKG5r_ANf_GET
#define MAIN0_DEVINPKG5r_ANf_SET BCMI_TSCF_GEN3_XGXS_MAIN0_DEVINPKG5r_ANf_SET
#define MAIN0_DEVINPKG5r_TCf_GET BCMI_TSCF_GEN3_XGXS_MAIN0_DEVINPKG5r_TCf_GET
#define MAIN0_DEVINPKG5r_TCf_SET BCMI_TSCF_GEN3_XGXS_MAIN0_DEVINPKG5r_TCf_SET
#define MAIN0_DEVINPKG5r_DTE_XSf_GET BCMI_TSCF_GEN3_XGXS_MAIN0_DEVINPKG5r_DTE_XSf_GET
#define MAIN0_DEVINPKG5r_DTE_XSf_SET BCMI_TSCF_GEN3_XGXS_MAIN0_DEVINPKG5r_DTE_XSf_SET
#define MAIN0_DEVINPKG5r_PHY_XSf_GET BCMI_TSCF_GEN3_XGXS_MAIN0_DEVINPKG5r_PHY_XSf_GET
#define MAIN0_DEVINPKG5r_PHY_XSf_SET BCMI_TSCF_GEN3_XGXS_MAIN0_DEVINPKG5r_PHY_XSf_SET
#define MAIN0_DEVINPKG5r_PCS_XSf_GET BCMI_TSCF_GEN3_XGXS_MAIN0_DEVINPKG5r_PCS_XSf_GET
#define MAIN0_DEVINPKG5r_PCS_XSf_SET BCMI_TSCF_GEN3_XGXS_MAIN0_DEVINPKG5r_PCS_XSf_SET
#define MAIN0_DEVINPKG5r_WISf_GET BCMI_TSCF_GEN3_XGXS_MAIN0_DEVINPKG5r_WISf_GET
#define MAIN0_DEVINPKG5r_WISf_SET BCMI_TSCF_GEN3_XGXS_MAIN0_DEVINPKG5r_WISf_SET
#define MAIN0_DEVINPKG5r_PMA_PMDf_GET BCMI_TSCF_GEN3_XGXS_MAIN0_DEVINPKG5r_PMA_PMDf_GET
#define MAIN0_DEVINPKG5r_PMA_PMDf_SET BCMI_TSCF_GEN3_XGXS_MAIN0_DEVINPKG5r_PMA_PMDf_SET
#define MAIN0_DEVINPKG5r_CLAUSE22f_GET BCMI_TSCF_GEN3_XGXS_MAIN0_DEVINPKG5r_CLAUSE22f_GET
#define MAIN0_DEVINPKG5r_CLAUSE22f_SET BCMI_TSCF_GEN3_XGXS_MAIN0_DEVINPKG5r_CLAUSE22f_SET
#define READ_MAIN0_DEVINPKG5r BCMI_TSCF_GEN3_XGXS_READ_MAIN0_DEVINPKG5r
#define WRITE_MAIN0_DEVINPKG5r BCMI_TSCF_GEN3_XGXS_WRITE_MAIN0_DEVINPKG5r
#define MODIFY_MAIN0_DEVINPKG5r BCMI_TSCF_GEN3_XGXS_MODIFY_MAIN0_DEVINPKG5r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_MAIN0_DEVINPKG5r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  MAIN0_TS_TMR_OFFS
 * BLOCKS:   MAIN0
 * REGADDR:  0x9005
 * DESC:     1588 timestamp offset register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     U_TS_OFFSET      Unsigned offset(represented as nanoseconds) to 52-bit timestamp, at PCS level, to account for staging registerson ts_timer and GLAS input stage.This offset will be added to the timestamp from GLAS, both by TX and RX pipelines.
 */
#define BCMI_TSCF_GEN3_XGXS_MAIN0_TS_TMR_OFFSr (0x00109005 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_MAIN0_TS_TMR_OFFSr_SIZE 4

/*
 * This structure should be used to declare and program MAIN0_TS_TMR_OFFS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_MAIN0_TS_TMR_OFFSr_s {
	uint32_t v[1];
	uint32_t main0_ts_tmr_offs[1];
	uint32_t _main0_ts_tmr_offs;
} BCMI_TSCF_GEN3_XGXS_MAIN0_TS_TMR_OFFSr_t;

#define BCMI_TSCF_GEN3_XGXS_MAIN0_TS_TMR_OFFSr_CLR(r) (r).main0_ts_tmr_offs[0] = 0
#define BCMI_TSCF_GEN3_XGXS_MAIN0_TS_TMR_OFFSr_SET(r,d) (r).main0_ts_tmr_offs[0] = d
#define BCMI_TSCF_GEN3_XGXS_MAIN0_TS_TMR_OFFSr_GET(r) (r).main0_ts_tmr_offs[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_MAIN0_TS_TMR_OFFSr_U_TS_OFFSETf_GET(r) (((r).main0_ts_tmr_offs[0]) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_MAIN0_TS_TMR_OFFSr_U_TS_OFFSETf_SET(r,f) (r).main0_ts_tmr_offs[0]=(((r).main0_ts_tmr_offs[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access MAIN0_TS_TMR_OFFS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_MAIN0_TS_TMR_OFFSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_MAIN0_TS_TMR_OFFSr,(_r._main0_ts_tmr_offs))
#define BCMI_TSCF_GEN3_XGXS_WRITE_MAIN0_TS_TMR_OFFSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_MAIN0_TS_TMR_OFFSr,(_r._main0_ts_tmr_offs)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_MAIN0_TS_TMR_OFFSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_MAIN0_TS_TMR_OFFSr,(_r._main0_ts_tmr_offs))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MAIN0_TS_TMR_OFFSr BCMI_TSCF_GEN3_XGXS_MAIN0_TS_TMR_OFFSr
#define MAIN0_TS_TMR_OFFSr_SIZE BCMI_TSCF_GEN3_XGXS_MAIN0_TS_TMR_OFFSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_MAIN0_TS_TMR_OFFSr_t MAIN0_TS_TMR_OFFSr_t;
#define MAIN0_TS_TMR_OFFSr_CLR BCMI_TSCF_GEN3_XGXS_MAIN0_TS_TMR_OFFSr_CLR
#define MAIN0_TS_TMR_OFFSr_SET BCMI_TSCF_GEN3_XGXS_MAIN0_TS_TMR_OFFSr_SET
#define MAIN0_TS_TMR_OFFSr_GET BCMI_TSCF_GEN3_XGXS_MAIN0_TS_TMR_OFFSr_GET
#define MAIN0_TS_TMR_OFFSr_U_TS_OFFSETf_GET BCMI_TSCF_GEN3_XGXS_MAIN0_TS_TMR_OFFSr_U_TS_OFFSETf_GET
#define MAIN0_TS_TMR_OFFSr_U_TS_OFFSETf_SET BCMI_TSCF_GEN3_XGXS_MAIN0_TS_TMR_OFFSr_U_TS_OFFSETf_SET
#define READ_MAIN0_TS_TMR_OFFSr BCMI_TSCF_GEN3_XGXS_READ_MAIN0_TS_TMR_OFFSr
#define WRITE_MAIN0_TS_TMR_OFFSr BCMI_TSCF_GEN3_XGXS_WRITE_MAIN0_TS_TMR_OFFSr
#define MODIFY_MAIN0_TS_TMR_OFFSr BCMI_TSCF_GEN3_XGXS_MODIFY_MAIN0_TS_TMR_OFFSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_MAIN0_TS_TMR_OFFSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  MAIN0_TICK_CTL1
 * BLOCKS:   MAIN0
 * REGADDR:  0x9007
 * DESC:     TICK GENERATION CONTROL REGISTER 1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TICK_NUMERATOR_UPPER Bits [18:4] of the tick numerator.  Used when tick_override is true
 *     TICK_OVERRIDE    Enables override of tick counts instead of using refclk_sel
 */
#define BCMI_TSCF_GEN3_XGXS_MAIN0_TICK_CTL1r (0x00109007 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_MAIN0_TICK_CTL1r_SIZE 4

/*
 * This structure should be used to declare and program MAIN0_TICK_CTL1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_MAIN0_TICK_CTL1r_s {
	uint32_t v[1];
	uint32_t main0_tick_ctl1[1];
	uint32_t _main0_tick_ctl1;
} BCMI_TSCF_GEN3_XGXS_MAIN0_TICK_CTL1r_t;

#define BCMI_TSCF_GEN3_XGXS_MAIN0_TICK_CTL1r_CLR(r) (r).main0_tick_ctl1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_MAIN0_TICK_CTL1r_SET(r,d) (r).main0_tick_ctl1[0] = d
#define BCMI_TSCF_GEN3_XGXS_MAIN0_TICK_CTL1r_GET(r) (r).main0_tick_ctl1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_MAIN0_TICK_CTL1r_TICK_OVERRIDEf_GET(r) ((((r).main0_tick_ctl1[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_MAIN0_TICK_CTL1r_TICK_OVERRIDEf_SET(r,f) (r).main0_tick_ctl1[0]=(((r).main0_tick_ctl1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_MAIN0_TICK_CTL1r_TICK_NUMERATOR_UPPERf_GET(r) (((r).main0_tick_ctl1[0]) & 0x7fff)
#define BCMI_TSCF_GEN3_XGXS_MAIN0_TICK_CTL1r_TICK_NUMERATOR_UPPERf_SET(r,f) (r).main0_tick_ctl1[0]=(((r).main0_tick_ctl1[0] & ~((uint32_t)0x7fff)) | (((uint32_t)f) & 0x7fff)) | (0x7fff << 16)

/*
 * These macros can be used to access MAIN0_TICK_CTL1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_MAIN0_TICK_CTL1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_MAIN0_TICK_CTL1r,(_r._main0_tick_ctl1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_MAIN0_TICK_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_MAIN0_TICK_CTL1r,(_r._main0_tick_ctl1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_MAIN0_TICK_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_MAIN0_TICK_CTL1r,(_r._main0_tick_ctl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MAIN0_TICK_CTL1r BCMI_TSCF_GEN3_XGXS_MAIN0_TICK_CTL1r
#define MAIN0_TICK_CTL1r_SIZE BCMI_TSCF_GEN3_XGXS_MAIN0_TICK_CTL1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_MAIN0_TICK_CTL1r_t MAIN0_TICK_CTL1r_t;
#define MAIN0_TICK_CTL1r_CLR BCMI_TSCF_GEN3_XGXS_MAIN0_TICK_CTL1r_CLR
#define MAIN0_TICK_CTL1r_SET BCMI_TSCF_GEN3_XGXS_MAIN0_TICK_CTL1r_SET
#define MAIN0_TICK_CTL1r_GET BCMI_TSCF_GEN3_XGXS_MAIN0_TICK_CTL1r_GET
#define MAIN0_TICK_CTL1r_TICK_OVERRIDEf_GET BCMI_TSCF_GEN3_XGXS_MAIN0_TICK_CTL1r_TICK_OVERRIDEf_GET
#define MAIN0_TICK_CTL1r_TICK_OVERRIDEf_SET BCMI_TSCF_GEN3_XGXS_MAIN0_TICK_CTL1r_TICK_OVERRIDEf_SET
#define MAIN0_TICK_CTL1r_TICK_NUMERATOR_UPPERf_GET BCMI_TSCF_GEN3_XGXS_MAIN0_TICK_CTL1r_TICK_NUMERATOR_UPPERf_GET
#define MAIN0_TICK_CTL1r_TICK_NUMERATOR_UPPERf_SET BCMI_TSCF_GEN3_XGXS_MAIN0_TICK_CTL1r_TICK_NUMERATOR_UPPERf_SET
#define READ_MAIN0_TICK_CTL1r BCMI_TSCF_GEN3_XGXS_READ_MAIN0_TICK_CTL1r
#define WRITE_MAIN0_TICK_CTL1r BCMI_TSCF_GEN3_XGXS_WRITE_MAIN0_TICK_CTL1r
#define MODIFY_MAIN0_TICK_CTL1r BCMI_TSCF_GEN3_XGXS_MODIFY_MAIN0_TICK_CTL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_MAIN0_TICK_CTL1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  MAIN0_TICK_CTL0
 * BLOCKS:   MAIN0
 * REGADDR:  0x9008
 * DESC:     TICK GENERATION CONTROL REGISTER 1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TICK_DENOMINATOR Tick denominator.  Used when tick_override is true
 *     TICK_NUMERATOR_LOWER Bits [3:0] of the tick numerator.  Used when tick_override is true
 */
#define BCMI_TSCF_GEN3_XGXS_MAIN0_TICK_CTL0r (0x00109008 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_MAIN0_TICK_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program MAIN0_TICK_CTL0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_MAIN0_TICK_CTL0r_s {
	uint32_t v[1];
	uint32_t main0_tick_ctl0[1];
	uint32_t _main0_tick_ctl0;
} BCMI_TSCF_GEN3_XGXS_MAIN0_TICK_CTL0r_t;

#define BCMI_TSCF_GEN3_XGXS_MAIN0_TICK_CTL0r_CLR(r) (r).main0_tick_ctl0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_MAIN0_TICK_CTL0r_SET(r,d) (r).main0_tick_ctl0[0] = d
#define BCMI_TSCF_GEN3_XGXS_MAIN0_TICK_CTL0r_GET(r) (r).main0_tick_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_MAIN0_TICK_CTL0r_TICK_NUMERATOR_LOWERf_GET(r) ((((r).main0_tick_ctl0[0]) >> 12) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_MAIN0_TICK_CTL0r_TICK_NUMERATOR_LOWERf_SET(r,f) (r).main0_tick_ctl0[0]=(((r).main0_tick_ctl0[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_MAIN0_TICK_CTL0r_TICK_DENOMINATORf_GET(r) ((((r).main0_tick_ctl0[0]) >> 2) & 0x3ff)
#define BCMI_TSCF_GEN3_XGXS_MAIN0_TICK_CTL0r_TICK_DENOMINATORf_SET(r,f) (r).main0_tick_ctl0[0]=(((r).main0_tick_ctl0[0] & ~((uint32_t)0x3ff << 2)) | ((((uint32_t)f) & 0x3ff) << 2)) | (1023 << (16 + 2))

/*
 * These macros can be used to access MAIN0_TICK_CTL0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_MAIN0_TICK_CTL0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_MAIN0_TICK_CTL0r,(_r._main0_tick_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_MAIN0_TICK_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_MAIN0_TICK_CTL0r,(_r._main0_tick_ctl0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_MAIN0_TICK_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_MAIN0_TICK_CTL0r,(_r._main0_tick_ctl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MAIN0_TICK_CTL0r BCMI_TSCF_GEN3_XGXS_MAIN0_TICK_CTL0r
#define MAIN0_TICK_CTL0r_SIZE BCMI_TSCF_GEN3_XGXS_MAIN0_TICK_CTL0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_MAIN0_TICK_CTL0r_t MAIN0_TICK_CTL0r_t;
#define MAIN0_TICK_CTL0r_CLR BCMI_TSCF_GEN3_XGXS_MAIN0_TICK_CTL0r_CLR
#define MAIN0_TICK_CTL0r_SET BCMI_TSCF_GEN3_XGXS_MAIN0_TICK_CTL0r_SET
#define MAIN0_TICK_CTL0r_GET BCMI_TSCF_GEN3_XGXS_MAIN0_TICK_CTL0r_GET
#define MAIN0_TICK_CTL0r_TICK_NUMERATOR_LOWERf_GET BCMI_TSCF_GEN3_XGXS_MAIN0_TICK_CTL0r_TICK_NUMERATOR_LOWERf_GET
#define MAIN0_TICK_CTL0r_TICK_NUMERATOR_LOWERf_SET BCMI_TSCF_GEN3_XGXS_MAIN0_TICK_CTL0r_TICK_NUMERATOR_LOWERf_SET
#define MAIN0_TICK_CTL0r_TICK_DENOMINATORf_GET BCMI_TSCF_GEN3_XGXS_MAIN0_TICK_CTL0r_TICK_DENOMINATORf_GET
#define MAIN0_TICK_CTL0r_TICK_DENOMINATORf_SET BCMI_TSCF_GEN3_XGXS_MAIN0_TICK_CTL0r_TICK_DENOMINATORf_SET
#define READ_MAIN0_TICK_CTL0r BCMI_TSCF_GEN3_XGXS_READ_MAIN0_TICK_CTL0r
#define WRITE_MAIN0_TICK_CTL0r BCMI_TSCF_GEN3_XGXS_WRITE_MAIN0_TICK_CTL0r
#define MODIFY_MAIN0_TICK_CTL0r BCMI_TSCF_GEN3_XGXS_MODIFY_MAIN0_TICK_CTL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_MAIN0_TICK_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  MAIN0_LPBK_CTL
 * BLOCKS:   MAIN0
 * REGADDR:  0x9009
 * DESC:     LOOPBACK CONTROL REGISTER
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LOCAL_PCS_LOOPBACK_ENABLE Per LOGICAL LANE control to enable PCS based local (TX to RX) loopback
 *     REMOTE_PCS_LOOPBACK_ENABLE Per LOGICAL LANE control to enable PCS based remote (RX to TX) loopback
 */
#define BCMI_TSCF_GEN3_XGXS_MAIN0_LPBK_CTLr (0x00109009 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_MAIN0_LPBK_CTLr_SIZE 4

/*
 * This structure should be used to declare and program MAIN0_LPBK_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_MAIN0_LPBK_CTLr_s {
	uint32_t v[1];
	uint32_t main0_lpbk_ctl[1];
	uint32_t _main0_lpbk_ctl;
} BCMI_TSCF_GEN3_XGXS_MAIN0_LPBK_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_MAIN0_LPBK_CTLr_CLR(r) (r).main0_lpbk_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_MAIN0_LPBK_CTLr_SET(r,d) (r).main0_lpbk_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_MAIN0_LPBK_CTLr_GET(r) (r).main0_lpbk_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_MAIN0_LPBK_CTLr_REMOTE_PCS_LOOPBACK_ENABLEf_GET(r) ((((r).main0_lpbk_ctl[0]) >> 4) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_MAIN0_LPBK_CTLr_REMOTE_PCS_LOOPBACK_ENABLEf_SET(r,f) (r).main0_lpbk_ctl[0]=(((r).main0_lpbk_ctl[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4)) | (15 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_MAIN0_LPBK_CTLr_LOCAL_PCS_LOOPBACK_ENABLEf_GET(r) (((r).main0_lpbk_ctl[0]) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_MAIN0_LPBK_CTLr_LOCAL_PCS_LOOPBACK_ENABLEf_SET(r,f) (r).main0_lpbk_ctl[0]=(((r).main0_lpbk_ctl[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access MAIN0_LPBK_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_MAIN0_LPBK_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_MAIN0_LPBK_CTLr,(_r._main0_lpbk_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_MAIN0_LPBK_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_MAIN0_LPBK_CTLr,(_r._main0_lpbk_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_MAIN0_LPBK_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_MAIN0_LPBK_CTLr,(_r._main0_lpbk_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MAIN0_LPBK_CTLr BCMI_TSCF_GEN3_XGXS_MAIN0_LPBK_CTLr
#define MAIN0_LPBK_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_MAIN0_LPBK_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_MAIN0_LPBK_CTLr_t MAIN0_LPBK_CTLr_t;
#define MAIN0_LPBK_CTLr_CLR BCMI_TSCF_GEN3_XGXS_MAIN0_LPBK_CTLr_CLR
#define MAIN0_LPBK_CTLr_SET BCMI_TSCF_GEN3_XGXS_MAIN0_LPBK_CTLr_SET
#define MAIN0_LPBK_CTLr_GET BCMI_TSCF_GEN3_XGXS_MAIN0_LPBK_CTLr_GET
#define MAIN0_LPBK_CTLr_REMOTE_PCS_LOOPBACK_ENABLEf_GET BCMI_TSCF_GEN3_XGXS_MAIN0_LPBK_CTLr_REMOTE_PCS_LOOPBACK_ENABLEf_GET
#define MAIN0_LPBK_CTLr_REMOTE_PCS_LOOPBACK_ENABLEf_SET BCMI_TSCF_GEN3_XGXS_MAIN0_LPBK_CTLr_REMOTE_PCS_LOOPBACK_ENABLEf_SET
#define MAIN0_LPBK_CTLr_LOCAL_PCS_LOOPBACK_ENABLEf_GET BCMI_TSCF_GEN3_XGXS_MAIN0_LPBK_CTLr_LOCAL_PCS_LOOPBACK_ENABLEf_GET
#define MAIN0_LPBK_CTLr_LOCAL_PCS_LOOPBACK_ENABLEf_SET BCMI_TSCF_GEN3_XGXS_MAIN0_LPBK_CTLr_LOCAL_PCS_LOOPBACK_ENABLEf_SET
#define READ_MAIN0_LPBK_CTLr BCMI_TSCF_GEN3_XGXS_READ_MAIN0_LPBK_CTLr
#define WRITE_MAIN0_LPBK_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_MAIN0_LPBK_CTLr
#define MODIFY_MAIN0_LPBK_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_MAIN0_LPBK_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_MAIN0_LPBK_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  MAIN0_MDIO_BCST
 * BLOCKS:   MAIN0
 * REGADDR:  0x900a
 * DESC:     PRTAD Broadcast Values
 * RESETVAL: 0xf800 (63488)
 * ACCESS:   R/W
 * FIELDS:
 *     MULTIPRTS_EN     per port Broadcast enable
 *     PRTAD_BCST       PORT VALUE FOR BROADCASTING TO MULTIPLE PORTS
 */
#define BCMI_TSCF_GEN3_XGXS_MAIN0_MDIO_BCSTr (0x0010900a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_MAIN0_MDIO_BCSTr_SIZE 4

/*
 * This structure should be used to declare and program MAIN0_MDIO_BCST.
 */
typedef union BCMI_TSCF_GEN3_XGXS_MAIN0_MDIO_BCSTr_s {
	uint32_t v[1];
	uint32_t main0_mdio_bcst[1];
	uint32_t _main0_mdio_bcst;
} BCMI_TSCF_GEN3_XGXS_MAIN0_MDIO_BCSTr_t;

#define BCMI_TSCF_GEN3_XGXS_MAIN0_MDIO_BCSTr_CLR(r) (r).main0_mdio_bcst[0] = 0
#define BCMI_TSCF_GEN3_XGXS_MAIN0_MDIO_BCSTr_SET(r,d) (r).main0_mdio_bcst[0] = d
#define BCMI_TSCF_GEN3_XGXS_MAIN0_MDIO_BCSTr_GET(r) (r).main0_mdio_bcst[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_MAIN0_MDIO_BCSTr_PRTAD_BCSTf_GET(r) ((((r).main0_mdio_bcst[0]) >> 11) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_MAIN0_MDIO_BCSTr_PRTAD_BCSTf_SET(r,f) (r).main0_mdio_bcst[0]=(((r).main0_mdio_bcst[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11)) | (31 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_MAIN0_MDIO_BCSTr_MULTIPRTS_ENf_GET(r) ((((r).main0_mdio_bcst[0]) >> 7) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_MAIN0_MDIO_BCSTr_MULTIPRTS_ENf_SET(r,f) (r).main0_mdio_bcst[0]=(((r).main0_mdio_bcst[0] & ~((uint32_t)0xf << 7)) | ((((uint32_t)f) & 0xf) << 7)) | (15 << (16 + 7))

/*
 * These macros can be used to access MAIN0_MDIO_BCST.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_MAIN0_MDIO_BCSTr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_MAIN0_MDIO_BCSTr,(_r._main0_mdio_bcst))
#define BCMI_TSCF_GEN3_XGXS_WRITE_MAIN0_MDIO_BCSTr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_MAIN0_MDIO_BCSTr,(_r._main0_mdio_bcst)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_MAIN0_MDIO_BCSTr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_MAIN0_MDIO_BCSTr,(_r._main0_mdio_bcst))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MAIN0_MDIO_BCSTr BCMI_TSCF_GEN3_XGXS_MAIN0_MDIO_BCSTr
#define MAIN0_MDIO_BCSTr_SIZE BCMI_TSCF_GEN3_XGXS_MAIN0_MDIO_BCSTr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_MAIN0_MDIO_BCSTr_t MAIN0_MDIO_BCSTr_t;
#define MAIN0_MDIO_BCSTr_CLR BCMI_TSCF_GEN3_XGXS_MAIN0_MDIO_BCSTr_CLR
#define MAIN0_MDIO_BCSTr_SET BCMI_TSCF_GEN3_XGXS_MAIN0_MDIO_BCSTr_SET
#define MAIN0_MDIO_BCSTr_GET BCMI_TSCF_GEN3_XGXS_MAIN0_MDIO_BCSTr_GET
#define MAIN0_MDIO_BCSTr_PRTAD_BCSTf_GET BCMI_TSCF_GEN3_XGXS_MAIN0_MDIO_BCSTr_PRTAD_BCSTf_GET
#define MAIN0_MDIO_BCSTr_PRTAD_BCSTf_SET BCMI_TSCF_GEN3_XGXS_MAIN0_MDIO_BCSTr_PRTAD_BCSTf_SET
#define MAIN0_MDIO_BCSTr_MULTIPRTS_ENf_GET BCMI_TSCF_GEN3_XGXS_MAIN0_MDIO_BCSTr_MULTIPRTS_ENf_GET
#define MAIN0_MDIO_BCSTr_MULTIPRTS_ENf_SET BCMI_TSCF_GEN3_XGXS_MAIN0_MDIO_BCSTr_MULTIPRTS_ENf_SET
#define READ_MAIN0_MDIO_BCSTr BCMI_TSCF_GEN3_XGXS_READ_MAIN0_MDIO_BCSTr
#define WRITE_MAIN0_MDIO_BCSTr BCMI_TSCF_GEN3_XGXS_WRITE_MAIN0_MDIO_BCSTr
#define MODIFY_MAIN0_MDIO_BCSTr BCMI_TSCF_GEN3_XGXS_MODIFY_MAIN0_MDIO_BCSTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_MAIN0_MDIO_BCSTr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  MAIN0ACC_TMOUT
 * BLOCKS:   MAIN0
 * REGADDR:  0x900b
 * DESC:     External Access timeout register
 * RESETVAL: 0x50 (80)
 * ACCESS:   R/W
 * FIELDS:
 *     TIMEOUT_COUNT    Timeout count for external access statemachine.
 */
#define BCMI_TSCF_GEN3_XGXS_MAIN0ACC_TMOUTr (0x0010900b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_MAIN0ACC_TMOUTr_SIZE 4

/*
 * This structure should be used to declare and program MAIN0ACC_TMOUT.
 */
typedef union BCMI_TSCF_GEN3_XGXS_MAIN0ACC_TMOUTr_s {
	uint32_t v[1];
	uint32_t main0acc_tmout[1];
	uint32_t _main0acc_tmout;
} BCMI_TSCF_GEN3_XGXS_MAIN0ACC_TMOUTr_t;

#define BCMI_TSCF_GEN3_XGXS_MAIN0ACC_TMOUTr_CLR(r) (r).main0acc_tmout[0] = 0
#define BCMI_TSCF_GEN3_XGXS_MAIN0ACC_TMOUTr_SET(r,d) (r).main0acc_tmout[0] = d
#define BCMI_TSCF_GEN3_XGXS_MAIN0ACC_TMOUTr_GET(r) (r).main0acc_tmout[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_MAIN0ACC_TMOUTr_TIMEOUT_COUNTf_GET(r) (((r).main0acc_tmout[0]) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_MAIN0ACC_TMOUTr_TIMEOUT_COUNTf_SET(r,f) (r).main0acc_tmout[0]=(((r).main0acc_tmout[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access MAIN0ACC_TMOUT.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_MAIN0ACC_TMOUTr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_MAIN0ACC_TMOUTr,(_r._main0acc_tmout))
#define BCMI_TSCF_GEN3_XGXS_WRITE_MAIN0ACC_TMOUTr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_MAIN0ACC_TMOUTr,(_r._main0acc_tmout)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_MAIN0ACC_TMOUTr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_MAIN0ACC_TMOUTr,(_r._main0acc_tmout))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MAIN0ACC_TMOUTr BCMI_TSCF_GEN3_XGXS_MAIN0ACC_TMOUTr
#define MAIN0ACC_TMOUTr_SIZE BCMI_TSCF_GEN3_XGXS_MAIN0ACC_TMOUTr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_MAIN0ACC_TMOUTr_t MAIN0ACC_TMOUTr_t;
#define MAIN0ACC_TMOUTr_CLR BCMI_TSCF_GEN3_XGXS_MAIN0ACC_TMOUTr_CLR
#define MAIN0ACC_TMOUTr_SET BCMI_TSCF_GEN3_XGXS_MAIN0ACC_TMOUTr_SET
#define MAIN0ACC_TMOUTr_GET BCMI_TSCF_GEN3_XGXS_MAIN0ACC_TMOUTr_GET
#define MAIN0ACC_TMOUTr_TIMEOUT_COUNTf_GET BCMI_TSCF_GEN3_XGXS_MAIN0ACC_TMOUTr_TIMEOUT_COUNTf_GET
#define MAIN0ACC_TMOUTr_TIMEOUT_COUNTf_SET BCMI_TSCF_GEN3_XGXS_MAIN0ACC_TMOUTr_TIMEOUT_COUNTf_SET
#define READ_MAIN0ACC_TMOUTr BCMI_TSCF_GEN3_XGXS_READ_MAIN0ACC_TMOUTr
#define WRITE_MAIN0ACC_TMOUTr BCMI_TSCF_GEN3_XGXS_WRITE_MAIN0ACC_TMOUTr
#define MODIFY_MAIN0ACC_TMOUTr BCMI_TSCF_GEN3_XGXS_MODIFY_MAIN0ACC_TMOUTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_MAIN0ACC_TMOUTr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  MAIN0ACC_TMOUT_STS
 * BLOCKS:   MAIN0
 * REGADDR:  0x900c
 * DESC:     External Access timeout status register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TIMEOUT_ERROR    Status indicating the external access state machine did not receive an ack within the timeout_count duration.
 */
#define BCMI_TSCF_GEN3_XGXS_MAIN0ACC_TMOUT_STSr (0x0010900c | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_MAIN0ACC_TMOUT_STSr_SIZE 4

/*
 * This structure should be used to declare and program MAIN0ACC_TMOUT_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_MAIN0ACC_TMOUT_STSr_s {
	uint32_t v[1];
	uint32_t main0acc_tmout_sts[1];
	uint32_t _main0acc_tmout_sts;
} BCMI_TSCF_GEN3_XGXS_MAIN0ACC_TMOUT_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_MAIN0ACC_TMOUT_STSr_CLR(r) (r).main0acc_tmout_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_MAIN0ACC_TMOUT_STSr_SET(r,d) (r).main0acc_tmout_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_MAIN0ACC_TMOUT_STSr_GET(r) (r).main0acc_tmout_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_MAIN0ACC_TMOUT_STSr_TIMEOUT_ERRORf_GET(r) (((r).main0acc_tmout_sts[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_MAIN0ACC_TMOUT_STSr_TIMEOUT_ERRORf_SET(r,f) (r).main0acc_tmout_sts[0]=(((r).main0acc_tmout_sts[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access MAIN0ACC_TMOUT_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_MAIN0ACC_TMOUT_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_MAIN0ACC_TMOUT_STSr,(_r._main0acc_tmout_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_MAIN0ACC_TMOUT_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_MAIN0ACC_TMOUT_STSr,(_r._main0acc_tmout_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_MAIN0ACC_TMOUT_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_MAIN0ACC_TMOUT_STSr,(_r._main0acc_tmout_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MAIN0ACC_TMOUT_STSr BCMI_TSCF_GEN3_XGXS_MAIN0ACC_TMOUT_STSr
#define MAIN0ACC_TMOUT_STSr_SIZE BCMI_TSCF_GEN3_XGXS_MAIN0ACC_TMOUT_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_MAIN0ACC_TMOUT_STSr_t MAIN0ACC_TMOUT_STSr_t;
#define MAIN0ACC_TMOUT_STSr_CLR BCMI_TSCF_GEN3_XGXS_MAIN0ACC_TMOUT_STSr_CLR
#define MAIN0ACC_TMOUT_STSr_SET BCMI_TSCF_GEN3_XGXS_MAIN0ACC_TMOUT_STSr_SET
#define MAIN0ACC_TMOUT_STSr_GET BCMI_TSCF_GEN3_XGXS_MAIN0ACC_TMOUT_STSr_GET
#define MAIN0ACC_TMOUT_STSr_TIMEOUT_ERRORf_GET BCMI_TSCF_GEN3_XGXS_MAIN0ACC_TMOUT_STSr_TIMEOUT_ERRORf_GET
#define MAIN0ACC_TMOUT_STSr_TIMEOUT_ERRORf_SET BCMI_TSCF_GEN3_XGXS_MAIN0ACC_TMOUT_STSr_TIMEOUT_ERRORf_SET
#define READ_MAIN0ACC_TMOUT_STSr BCMI_TSCF_GEN3_XGXS_READ_MAIN0ACC_TMOUT_STSr
#define WRITE_MAIN0ACC_TMOUT_STSr BCMI_TSCF_GEN3_XGXS_WRITE_MAIN0ACC_TMOUT_STSr
#define MODIFY_MAIN0ACC_TMOUT_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_MAIN0ACC_TMOUT_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_MAIN0ACC_TMOUT_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  MAIN0_TS_1588_CTL
 * BLOCKS:   MAIN0
 * REGADDR:  0x900d
 * DESC:     1588 timestamp Control Register
 * RESETVAL: 0x1 (1)
 * ACCESS:   R/W
 * FIELDS:
 *     RXTX_1588_TS_EN  Enable 1588 timestamping of packets within the TXP and RXP pipelines.
 *     TX_1588_TS_DBG_EN Reserved. This configuration bit has no effect on the design.
 *     RX_TS_RECOVERY_FREQ This bit may be changed to 1, ONLY for VCO 10.3125G or higher, AND 125Mhz timer ts_clk only.Setting this bit to 1 allows RXP timestamp upper bits recovery to be faster.Default Value 0 means frequency of timestamp upper bits recovery is once every 3 ts_clk periods.Value 1 means frequency of timestamp upper bits recovery is once every 2 ts_clk periods.
 */
#define BCMI_TSCF_GEN3_XGXS_MAIN0_TS_1588_CTLr (0x0010900d | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_MAIN0_TS_1588_CTLr_SIZE 4

/*
 * This structure should be used to declare and program MAIN0_TS_1588_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_MAIN0_TS_1588_CTLr_s {
	uint32_t v[1];
	uint32_t main0_ts_1588_ctl[1];
	uint32_t _main0_ts_1588_ctl;
} BCMI_TSCF_GEN3_XGXS_MAIN0_TS_1588_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_MAIN0_TS_1588_CTLr_CLR(r) (r).main0_ts_1588_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_MAIN0_TS_1588_CTLr_SET(r,d) (r).main0_ts_1588_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_MAIN0_TS_1588_CTLr_GET(r) (r).main0_ts_1588_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_MAIN0_TS_1588_CTLr_RX_TS_RECOVERY_FREQf_GET(r) ((((r).main0_ts_1588_ctl[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_MAIN0_TS_1588_CTLr_RX_TS_RECOVERY_FREQf_SET(r,f) (r).main0_ts_1588_ctl[0]=(((r).main0_ts_1588_ctl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_MAIN0_TS_1588_CTLr_TX_1588_TS_DBG_ENf_GET(r) ((((r).main0_ts_1588_ctl[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_MAIN0_TS_1588_CTLr_TX_1588_TS_DBG_ENf_SET(r,f) (r).main0_ts_1588_ctl[0]=(((r).main0_ts_1588_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_MAIN0_TS_1588_CTLr_RXTX_1588_TS_ENf_GET(r) (((r).main0_ts_1588_ctl[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_MAIN0_TS_1588_CTLr_RXTX_1588_TS_ENf_SET(r,f) (r).main0_ts_1588_ctl[0]=(((r).main0_ts_1588_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access MAIN0_TS_1588_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_MAIN0_TS_1588_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_MAIN0_TS_1588_CTLr,(_r._main0_ts_1588_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_MAIN0_TS_1588_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_MAIN0_TS_1588_CTLr,(_r._main0_ts_1588_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_MAIN0_TS_1588_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_MAIN0_TS_1588_CTLr,(_r._main0_ts_1588_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MAIN0_TS_1588_CTLr BCMI_TSCF_GEN3_XGXS_MAIN0_TS_1588_CTLr
#define MAIN0_TS_1588_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_MAIN0_TS_1588_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_MAIN0_TS_1588_CTLr_t MAIN0_TS_1588_CTLr_t;
#define MAIN0_TS_1588_CTLr_CLR BCMI_TSCF_GEN3_XGXS_MAIN0_TS_1588_CTLr_CLR
#define MAIN0_TS_1588_CTLr_SET BCMI_TSCF_GEN3_XGXS_MAIN0_TS_1588_CTLr_SET
#define MAIN0_TS_1588_CTLr_GET BCMI_TSCF_GEN3_XGXS_MAIN0_TS_1588_CTLr_GET
#define MAIN0_TS_1588_CTLr_RX_TS_RECOVERY_FREQf_GET BCMI_TSCF_GEN3_XGXS_MAIN0_TS_1588_CTLr_RX_TS_RECOVERY_FREQf_GET
#define MAIN0_TS_1588_CTLr_RX_TS_RECOVERY_FREQf_SET BCMI_TSCF_GEN3_XGXS_MAIN0_TS_1588_CTLr_RX_TS_RECOVERY_FREQf_SET
#define MAIN0_TS_1588_CTLr_TX_1588_TS_DBG_ENf_GET BCMI_TSCF_GEN3_XGXS_MAIN0_TS_1588_CTLr_TX_1588_TS_DBG_ENf_GET
#define MAIN0_TS_1588_CTLr_TX_1588_TS_DBG_ENf_SET BCMI_TSCF_GEN3_XGXS_MAIN0_TS_1588_CTLr_TX_1588_TS_DBG_ENf_SET
#define MAIN0_TS_1588_CTLr_RXTX_1588_TS_ENf_GET BCMI_TSCF_GEN3_XGXS_MAIN0_TS_1588_CTLr_RXTX_1588_TS_ENf_GET
#define MAIN0_TS_1588_CTLr_RXTX_1588_TS_ENf_SET BCMI_TSCF_GEN3_XGXS_MAIN0_TS_1588_CTLr_RXTX_1588_TS_ENf_SET
#define READ_MAIN0_TS_1588_CTLr BCMI_TSCF_GEN3_XGXS_READ_MAIN0_TS_1588_CTLr
#define WRITE_MAIN0_TS_1588_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_MAIN0_TS_1588_CTLr
#define MODIFY_MAIN0_TS_1588_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_MAIN0_TS_1588_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_MAIN0_TS_1588_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  MAIN0_SERDESID
 * BLOCKS:   MAIN0
 * REGADDR:  0x900e
 * DESC:     Serdes ID Register
 * RESETVAL: 0x2e4 (740)
 * ACCESS:   R/O
 * FIELDS:
 *     MODEL_NUMBER     Same as phyID model number
 *     TECH_PROC        
 *     BONDING          
 *     REV_NUMBER       
 *     REV_LETTER       
 */
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SERDESIDr (0x0010900e | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_MAIN0_SERDESIDr_SIZE 4

/*
 * This structure should be used to declare and program MAIN0_SERDESID.
 */
typedef union BCMI_TSCF_GEN3_XGXS_MAIN0_SERDESIDr_s {
	uint32_t v[1];
	uint32_t main0_serdesid[1];
	uint32_t _main0_serdesid;
} BCMI_TSCF_GEN3_XGXS_MAIN0_SERDESIDr_t;

#define BCMI_TSCF_GEN3_XGXS_MAIN0_SERDESIDr_CLR(r) (r).main0_serdesid[0] = 0
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SERDESIDr_SET(r,d) (r).main0_serdesid[0] = d
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SERDESIDr_GET(r) (r).main0_serdesid[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SERDESIDr_REV_LETTERf_GET(r) ((((r).main0_serdesid[0]) >> 14) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SERDESIDr_REV_LETTERf_SET(r,f) (r).main0_serdesid[0]=(((r).main0_serdesid[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SERDESIDr_REV_NUMBERf_GET(r) ((((r).main0_serdesid[0]) >> 11) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SERDESIDr_REV_NUMBERf_SET(r,f) (r).main0_serdesid[0]=(((r).main0_serdesid[0] & ~((uint32_t)0x7 << 11)) | ((((uint32_t)f) & 0x7) << 11)) | (7 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SERDESIDr_BONDINGf_GET(r) ((((r).main0_serdesid[0]) >> 9) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SERDESIDr_BONDINGf_SET(r,f) (r).main0_serdesid[0]=(((r).main0_serdesid[0] & ~((uint32_t)0x3 << 9)) | ((((uint32_t)f) & 0x3) << 9)) | (3 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SERDESIDr_TECH_PROCf_GET(r) ((((r).main0_serdesid[0]) >> 6) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SERDESIDr_TECH_PROCf_SET(r,f) (r).main0_serdesid[0]=(((r).main0_serdesid[0] & ~((uint32_t)0x7 << 6)) | ((((uint32_t)f) & 0x7) << 6)) | (7 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SERDESIDr_MODEL_NUMBERf_GET(r) (((r).main0_serdesid[0]) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_MAIN0_SERDESIDr_MODEL_NUMBERf_SET(r,f) (r).main0_serdesid[0]=(((r).main0_serdesid[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access MAIN0_SERDESID.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_MAIN0_SERDESIDr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_MAIN0_SERDESIDr,(_r._main0_serdesid))
#define BCMI_TSCF_GEN3_XGXS_WRITE_MAIN0_SERDESIDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_MAIN0_SERDESIDr,(_r._main0_serdesid)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_MAIN0_SERDESIDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_MAIN0_SERDESIDr,(_r._main0_serdesid))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MAIN0_SERDESIDr BCMI_TSCF_GEN3_XGXS_MAIN0_SERDESIDr
#define MAIN0_SERDESIDr_SIZE BCMI_TSCF_GEN3_XGXS_MAIN0_SERDESIDr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_MAIN0_SERDESIDr_t MAIN0_SERDESIDr_t;
#define MAIN0_SERDESIDr_CLR BCMI_TSCF_GEN3_XGXS_MAIN0_SERDESIDr_CLR
#define MAIN0_SERDESIDr_SET BCMI_TSCF_GEN3_XGXS_MAIN0_SERDESIDr_SET
#define MAIN0_SERDESIDr_GET BCMI_TSCF_GEN3_XGXS_MAIN0_SERDESIDr_GET
#define MAIN0_SERDESIDr_REV_LETTERf_GET BCMI_TSCF_GEN3_XGXS_MAIN0_SERDESIDr_REV_LETTERf_GET
#define MAIN0_SERDESIDr_REV_LETTERf_SET BCMI_TSCF_GEN3_XGXS_MAIN0_SERDESIDr_REV_LETTERf_SET
#define MAIN0_SERDESIDr_REV_NUMBERf_GET BCMI_TSCF_GEN3_XGXS_MAIN0_SERDESIDr_REV_NUMBERf_GET
#define MAIN0_SERDESIDr_REV_NUMBERf_SET BCMI_TSCF_GEN3_XGXS_MAIN0_SERDESIDr_REV_NUMBERf_SET
#define MAIN0_SERDESIDr_BONDINGf_GET BCMI_TSCF_GEN3_XGXS_MAIN0_SERDESIDr_BONDINGf_GET
#define MAIN0_SERDESIDr_BONDINGf_SET BCMI_TSCF_GEN3_XGXS_MAIN0_SERDESIDr_BONDINGf_SET
#define MAIN0_SERDESIDr_TECH_PROCf_GET BCMI_TSCF_GEN3_XGXS_MAIN0_SERDESIDr_TECH_PROCf_GET
#define MAIN0_SERDESIDr_TECH_PROCf_SET BCMI_TSCF_GEN3_XGXS_MAIN0_SERDESIDr_TECH_PROCf_SET
#define MAIN0_SERDESIDr_MODEL_NUMBERf_GET BCMI_TSCF_GEN3_XGXS_MAIN0_SERDESIDr_MODEL_NUMBERf_GET
#define MAIN0_SERDESIDr_MODEL_NUMBERf_SET BCMI_TSCF_GEN3_XGXS_MAIN0_SERDESIDr_MODEL_NUMBERf_SET
#define READ_MAIN0_SERDESIDr BCMI_TSCF_GEN3_XGXS_READ_MAIN0_SERDESIDr
#define WRITE_MAIN0_SERDESIDr BCMI_TSCF_GEN3_XGXS_WRITE_MAIN0_SERDESIDr
#define MODIFY_MAIN0_SERDESIDr BCMI_TSCF_GEN3_XGXS_MODIFY_MAIN0_SERDESIDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_MAIN0_SERDESIDr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PMD_X1_CTL
 * BLOCKS:   PMD_X1
 * REGADDR:  0x9010
 * DESC:     Global PMD reset controls
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CORE_DP_H_RSTB   PMD Core data path reset override valueOnly used for Speed Control bypass operationby default is zero to keep PMD in reset till enabled
 *     POR_H_RSTB       PMD Core power on resetby default is zero too keep PMD in reset till enabled
 */
#define BCMI_TSCF_GEN3_XGXS_PMD_X1_CTLr (0x00109010 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PMD_X1_CTLr_SIZE 4

/*
 * This structure should be used to declare and program PMD_X1_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PMD_X1_CTLr_s {
	uint32_t v[1];
	uint32_t pmd_x1_ctl[1];
	uint32_t _pmd_x1_ctl;
} BCMI_TSCF_GEN3_XGXS_PMD_X1_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_PMD_X1_CTLr_CLR(r) (r).pmd_x1_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PMD_X1_CTLr_SET(r,d) (r).pmd_x1_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_PMD_X1_CTLr_GET(r) (r).pmd_x1_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PMD_X1_CTLr_POR_H_RSTBf_GET(r) ((((r).pmd_x1_ctl[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PMD_X1_CTLr_POR_H_RSTBf_SET(r,f) (r).pmd_x1_ctl[0]=(((r).pmd_x1_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_PMD_X1_CTLr_CORE_DP_H_RSTBf_GET(r) (((r).pmd_x1_ctl[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PMD_X1_CTLr_CORE_DP_H_RSTBf_SET(r,f) (r).pmd_x1_ctl[0]=(((r).pmd_x1_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access PMD_X1_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PMD_X1_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X1_CTLr,(_r._pmd_x1_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PMD_X1_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X1_CTLr,(_r._pmd_x1_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PMD_X1_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X1_CTLr,(_r._pmd_x1_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_X1_CTLr BCMI_TSCF_GEN3_XGXS_PMD_X1_CTLr
#define PMD_X1_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_PMD_X1_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PMD_X1_CTLr_t PMD_X1_CTLr_t;
#define PMD_X1_CTLr_CLR BCMI_TSCF_GEN3_XGXS_PMD_X1_CTLr_CLR
#define PMD_X1_CTLr_SET BCMI_TSCF_GEN3_XGXS_PMD_X1_CTLr_SET
#define PMD_X1_CTLr_GET BCMI_TSCF_GEN3_XGXS_PMD_X1_CTLr_GET
#define PMD_X1_CTLr_POR_H_RSTBf_GET BCMI_TSCF_GEN3_XGXS_PMD_X1_CTLr_POR_H_RSTBf_GET
#define PMD_X1_CTLr_POR_H_RSTBf_SET BCMI_TSCF_GEN3_XGXS_PMD_X1_CTLr_POR_H_RSTBf_SET
#define PMD_X1_CTLr_CORE_DP_H_RSTBf_GET BCMI_TSCF_GEN3_XGXS_PMD_X1_CTLr_CORE_DP_H_RSTBf_GET
#define PMD_X1_CTLr_CORE_DP_H_RSTBf_SET BCMI_TSCF_GEN3_XGXS_PMD_X1_CTLr_CORE_DP_H_RSTBf_SET
#define READ_PMD_X1_CTLr BCMI_TSCF_GEN3_XGXS_READ_PMD_X1_CTLr
#define WRITE_PMD_X1_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_PMD_X1_CTLr
#define MODIFY_PMD_X1_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_PMD_X1_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PMD_X1_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PMD_X1_MODE
 * BLOCKS:   PMD_X1
 * REGADDR:  0x9011
 * DESC:     Global PMD mode configuration
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CORE_MODE        PMD code mode. Only used when Speed Control logic is bypassedBits 15:12 - Reserved.Bit  11:8  - otp_options.Bits  7:0  - speed_id.
 */
#define BCMI_TSCF_GEN3_XGXS_PMD_X1_MODEr (0x00109011 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PMD_X1_MODEr_SIZE 4

/*
 * This structure should be used to declare and program PMD_X1_MODE.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PMD_X1_MODEr_s {
	uint32_t v[1];
	uint32_t pmd_x1_mode[1];
	uint32_t _pmd_x1_mode;
} BCMI_TSCF_GEN3_XGXS_PMD_X1_MODEr_t;

#define BCMI_TSCF_GEN3_XGXS_PMD_X1_MODEr_CLR(r) (r).pmd_x1_mode[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PMD_X1_MODEr_SET(r,d) (r).pmd_x1_mode[0] = d
#define BCMI_TSCF_GEN3_XGXS_PMD_X1_MODEr_GET(r) (r).pmd_x1_mode[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PMD_X1_MODEr_CORE_MODEf_GET(r) (((r).pmd_x1_mode[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_PMD_X1_MODEr_CORE_MODEf_SET(r,f) (r).pmd_x1_mode[0]=(((r).pmd_x1_mode[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PMD_X1_MODE.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PMD_X1_MODEr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X1_MODEr,(_r._pmd_x1_mode))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PMD_X1_MODEr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X1_MODEr,(_r._pmd_x1_mode)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PMD_X1_MODEr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X1_MODEr,(_r._pmd_x1_mode))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_X1_MODEr BCMI_TSCF_GEN3_XGXS_PMD_X1_MODEr
#define PMD_X1_MODEr_SIZE BCMI_TSCF_GEN3_XGXS_PMD_X1_MODEr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PMD_X1_MODEr_t PMD_X1_MODEr_t;
#define PMD_X1_MODEr_CLR BCMI_TSCF_GEN3_XGXS_PMD_X1_MODEr_CLR
#define PMD_X1_MODEr_SET BCMI_TSCF_GEN3_XGXS_PMD_X1_MODEr_SET
#define PMD_X1_MODEr_GET BCMI_TSCF_GEN3_XGXS_PMD_X1_MODEr_GET
#define PMD_X1_MODEr_CORE_MODEf_GET BCMI_TSCF_GEN3_XGXS_PMD_X1_MODEr_CORE_MODEf_GET
#define PMD_X1_MODEr_CORE_MODEf_SET BCMI_TSCF_GEN3_XGXS_PMD_X1_MODEr_CORE_MODEf_SET
#define READ_PMD_X1_MODEr BCMI_TSCF_GEN3_XGXS_READ_PMD_X1_MODEr
#define WRITE_PMD_X1_MODEr BCMI_TSCF_GEN3_XGXS_WRITE_PMD_X1_MODEr
#define MODIFY_PMD_X1_MODEr BCMI_TSCF_GEN3_XGXS_MODIFY_PMD_X1_MODEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PMD_X1_MODEr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PMD_X1_STS
 * BLOCKS:   PMD_X1
 * REGADDR:  0x9012
 * DESC:     Global PMD status
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     PLL0_LOCK_STS    PMD PLL lock indication
 *     PLL1_LOCK_STS    
 */
#define BCMI_TSCF_GEN3_XGXS_PMD_X1_STSr (0x00109012 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PMD_X1_STSr_SIZE 4

/*
 * This structure should be used to declare and program PMD_X1_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PMD_X1_STSr_s {
	uint32_t v[1];
	uint32_t pmd_x1_sts[1];
	uint32_t _pmd_x1_sts;
} BCMI_TSCF_GEN3_XGXS_PMD_X1_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_PMD_X1_STSr_CLR(r) (r).pmd_x1_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PMD_X1_STSr_SET(r,d) (r).pmd_x1_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_PMD_X1_STSr_GET(r) (r).pmd_x1_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PMD_X1_STSr_PLL1_LOCK_STSf_GET(r) ((((r).pmd_x1_sts[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PMD_X1_STSr_PLL1_LOCK_STSf_SET(r,f) (r).pmd_x1_sts[0]=(((r).pmd_x1_sts[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_PMD_X1_STSr_PLL0_LOCK_STSf_GET(r) (((r).pmd_x1_sts[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PMD_X1_STSr_PLL0_LOCK_STSf_SET(r,f) (r).pmd_x1_sts[0]=(((r).pmd_x1_sts[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access PMD_X1_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PMD_X1_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X1_STSr,(_r._pmd_x1_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PMD_X1_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X1_STSr,(_r._pmd_x1_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PMD_X1_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X1_STSr,(_r._pmd_x1_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_X1_STSr BCMI_TSCF_GEN3_XGXS_PMD_X1_STSr
#define PMD_X1_STSr_SIZE BCMI_TSCF_GEN3_XGXS_PMD_X1_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PMD_X1_STSr_t PMD_X1_STSr_t;
#define PMD_X1_STSr_CLR BCMI_TSCF_GEN3_XGXS_PMD_X1_STSr_CLR
#define PMD_X1_STSr_SET BCMI_TSCF_GEN3_XGXS_PMD_X1_STSr_SET
#define PMD_X1_STSr_GET BCMI_TSCF_GEN3_XGXS_PMD_X1_STSr_GET
#define PMD_X1_STSr_PLL1_LOCK_STSf_GET BCMI_TSCF_GEN3_XGXS_PMD_X1_STSr_PLL1_LOCK_STSf_GET
#define PMD_X1_STSr_PLL1_LOCK_STSf_SET BCMI_TSCF_GEN3_XGXS_PMD_X1_STSr_PLL1_LOCK_STSf_SET
#define PMD_X1_STSr_PLL0_LOCK_STSf_GET BCMI_TSCF_GEN3_XGXS_PMD_X1_STSr_PLL0_LOCK_STSf_GET
#define PMD_X1_STSr_PLL0_LOCK_STSf_SET BCMI_TSCF_GEN3_XGXS_PMD_X1_STSr_PLL0_LOCK_STSf_SET
#define READ_PMD_X1_STSr BCMI_TSCF_GEN3_XGXS_READ_PMD_X1_STSr
#define WRITE_PMD_X1_STSr BCMI_TSCF_GEN3_XGXS_WRITE_PMD_X1_STSr
#define MODIFY_PMD_X1_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_PMD_X1_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PMD_X1_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PMD_X1_OVRR
 * BLOCKS:   PMD_X1
 * REGADDR:  0x9013
 * DESC:     Global PMD override
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     PLL0_LOCK_OVRD   PMD PLL0 Lock OverrideOnly used for Speed Control bypass operation
 *     PLL1_LOCK_OVRD   PMD PLL1 Lock OverrideOnly used for Speed Control bypass operation
 *     CORE_MODE_OEN    Override enable for core modeOnly used for Speed Control bypass operation
 *     CORE_DP_H_RSTB_OEN Override enable for PMD Core data path resetOnly used for Speed Control bypass operation
 *     PLL0_VCOCLK4PCS_VLD_OVRD Override for pll0_vcoclk4pcs_vld indication.
 *     PLL1_VCOCLK4PCS_VLD_OVRD Override for pll1_vcoclk4pcs_vld indication.
 */
#define BCMI_TSCF_GEN3_XGXS_PMD_X1_OVRRr (0x00109013 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PMD_X1_OVRRr_SIZE 4

/*
 * This structure should be used to declare and program PMD_X1_OVRR.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PMD_X1_OVRRr_s {
	uint32_t v[1];
	uint32_t pmd_x1_ovrr[1];
	uint32_t _pmd_x1_ovrr;
} BCMI_TSCF_GEN3_XGXS_PMD_X1_OVRRr_t;

#define BCMI_TSCF_GEN3_XGXS_PMD_X1_OVRRr_CLR(r) (r).pmd_x1_ovrr[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PMD_X1_OVRRr_SET(r,d) (r).pmd_x1_ovrr[0] = d
#define BCMI_TSCF_GEN3_XGXS_PMD_X1_OVRRr_GET(r) (r).pmd_x1_ovrr[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PMD_X1_OVRRr_PLL1_VCOCLK4PCS_VLD_OVRDf_GET(r) ((((r).pmd_x1_ovrr[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PMD_X1_OVRRr_PLL1_VCOCLK4PCS_VLD_OVRDf_SET(r,f) (r).pmd_x1_ovrr[0]=(((r).pmd_x1_ovrr[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_PMD_X1_OVRRr_PLL0_VCOCLK4PCS_VLD_OVRDf_GET(r) ((((r).pmd_x1_ovrr[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PMD_X1_OVRRr_PLL0_VCOCLK4PCS_VLD_OVRDf_SET(r,f) (r).pmd_x1_ovrr[0]=(((r).pmd_x1_ovrr[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_PMD_X1_OVRRr_CORE_DP_H_RSTB_OENf_GET(r) ((((r).pmd_x1_ovrr[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PMD_X1_OVRRr_CORE_DP_H_RSTB_OENf_SET(r,f) (r).pmd_x1_ovrr[0]=(((r).pmd_x1_ovrr[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_PMD_X1_OVRRr_CORE_MODE_OENf_GET(r) ((((r).pmd_x1_ovrr[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PMD_X1_OVRRr_CORE_MODE_OENf_SET(r,f) (r).pmd_x1_ovrr[0]=(((r).pmd_x1_ovrr[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_PMD_X1_OVRRr_PLL1_LOCK_OVRDf_GET(r) ((((r).pmd_x1_ovrr[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PMD_X1_OVRRr_PLL1_LOCK_OVRDf_SET(r,f) (r).pmd_x1_ovrr[0]=(((r).pmd_x1_ovrr[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_PMD_X1_OVRRr_PLL0_LOCK_OVRDf_GET(r) (((r).pmd_x1_ovrr[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PMD_X1_OVRRr_PLL0_LOCK_OVRDf_SET(r,f) (r).pmd_x1_ovrr[0]=(((r).pmd_x1_ovrr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access PMD_X1_OVRR.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PMD_X1_OVRRr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X1_OVRRr,(_r._pmd_x1_ovrr))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PMD_X1_OVRRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X1_OVRRr,(_r._pmd_x1_ovrr)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PMD_X1_OVRRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X1_OVRRr,(_r._pmd_x1_ovrr))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_X1_OVRRr BCMI_TSCF_GEN3_XGXS_PMD_X1_OVRRr
#define PMD_X1_OVRRr_SIZE BCMI_TSCF_GEN3_XGXS_PMD_X1_OVRRr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PMD_X1_OVRRr_t PMD_X1_OVRRr_t;
#define PMD_X1_OVRRr_CLR BCMI_TSCF_GEN3_XGXS_PMD_X1_OVRRr_CLR
#define PMD_X1_OVRRr_SET BCMI_TSCF_GEN3_XGXS_PMD_X1_OVRRr_SET
#define PMD_X1_OVRRr_GET BCMI_TSCF_GEN3_XGXS_PMD_X1_OVRRr_GET
#define PMD_X1_OVRRr_PLL1_VCOCLK4PCS_VLD_OVRDf_GET BCMI_TSCF_GEN3_XGXS_PMD_X1_OVRRr_PLL1_VCOCLK4PCS_VLD_OVRDf_GET
#define PMD_X1_OVRRr_PLL1_VCOCLK4PCS_VLD_OVRDf_SET BCMI_TSCF_GEN3_XGXS_PMD_X1_OVRRr_PLL1_VCOCLK4PCS_VLD_OVRDf_SET
#define PMD_X1_OVRRr_PLL0_VCOCLK4PCS_VLD_OVRDf_GET BCMI_TSCF_GEN3_XGXS_PMD_X1_OVRRr_PLL0_VCOCLK4PCS_VLD_OVRDf_GET
#define PMD_X1_OVRRr_PLL0_VCOCLK4PCS_VLD_OVRDf_SET BCMI_TSCF_GEN3_XGXS_PMD_X1_OVRRr_PLL0_VCOCLK4PCS_VLD_OVRDf_SET
#define PMD_X1_OVRRr_CORE_DP_H_RSTB_OENf_GET BCMI_TSCF_GEN3_XGXS_PMD_X1_OVRRr_CORE_DP_H_RSTB_OENf_GET
#define PMD_X1_OVRRr_CORE_DP_H_RSTB_OENf_SET BCMI_TSCF_GEN3_XGXS_PMD_X1_OVRRr_CORE_DP_H_RSTB_OENf_SET
#define PMD_X1_OVRRr_CORE_MODE_OENf_GET BCMI_TSCF_GEN3_XGXS_PMD_X1_OVRRr_CORE_MODE_OENf_GET
#define PMD_X1_OVRRr_CORE_MODE_OENf_SET BCMI_TSCF_GEN3_XGXS_PMD_X1_OVRRr_CORE_MODE_OENf_SET
#define PMD_X1_OVRRr_PLL1_LOCK_OVRDf_GET BCMI_TSCF_GEN3_XGXS_PMD_X1_OVRRr_PLL1_LOCK_OVRDf_GET
#define PMD_X1_OVRRr_PLL1_LOCK_OVRDf_SET BCMI_TSCF_GEN3_XGXS_PMD_X1_OVRRr_PLL1_LOCK_OVRDf_SET
#define PMD_X1_OVRRr_PLL0_LOCK_OVRDf_GET BCMI_TSCF_GEN3_XGXS_PMD_X1_OVRRr_PLL0_LOCK_OVRDf_GET
#define PMD_X1_OVRRr_PLL0_LOCK_OVRDf_SET BCMI_TSCF_GEN3_XGXS_PMD_X1_OVRRr_PLL0_LOCK_OVRDf_SET
#define READ_PMD_X1_OVRRr BCMI_TSCF_GEN3_XGXS_READ_PMD_X1_OVRRr
#define WRITE_PMD_X1_OVRRr BCMI_TSCF_GEN3_XGXS_WRITE_PMD_X1_OVRRr
#define MODIFY_PMD_X1_OVRRr BCMI_TSCF_GEN3_XGXS_MODIFY_PMD_X1_OVRRr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PMD_X1_OVRRr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PMD_X1_FCLK_PERIOD
 * BLOCKS:   PMD_X1
 * REGADDR:  0x9014
 * DESC:     GLAS Fast_clk_period
 * RESETVAL: 0x634c (25420)
 * ACCESS:   R/W
 * FIELDS:
 *     FRAC_NS          Fractional nanoseconds equal to 1 FCLK periodFCLK is VCO-div-8 for 20.625G, 21.875G,25.78125G and27.34375G VCO rates
 */
#define BCMI_TSCF_GEN3_XGXS_PMD_X1_FCLK_PERIODr (0x00109014 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PMD_X1_FCLK_PERIODr_SIZE 4

/*
 * This structure should be used to declare and program PMD_X1_FCLK_PERIOD.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PMD_X1_FCLK_PERIODr_s {
	uint32_t v[1];
	uint32_t pmd_x1_fclk_period[1];
	uint32_t _pmd_x1_fclk_period;
} BCMI_TSCF_GEN3_XGXS_PMD_X1_FCLK_PERIODr_t;

#define BCMI_TSCF_GEN3_XGXS_PMD_X1_FCLK_PERIODr_CLR(r) (r).pmd_x1_fclk_period[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PMD_X1_FCLK_PERIODr_SET(r,d) (r).pmd_x1_fclk_period[0] = d
#define BCMI_TSCF_GEN3_XGXS_PMD_X1_FCLK_PERIODr_GET(r) (r).pmd_x1_fclk_period[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PMD_X1_FCLK_PERIODr_FRAC_NSf_GET(r) (((r).pmd_x1_fclk_period[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_PMD_X1_FCLK_PERIODr_FRAC_NSf_SET(r,f) (r).pmd_x1_fclk_period[0]=(((r).pmd_x1_fclk_period[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PMD_X1_FCLK_PERIOD.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PMD_X1_FCLK_PERIODr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X1_FCLK_PERIODr,(_r._pmd_x1_fclk_period))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PMD_X1_FCLK_PERIODr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X1_FCLK_PERIODr,(_r._pmd_x1_fclk_period)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PMD_X1_FCLK_PERIODr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X1_FCLK_PERIODr,(_r._pmd_x1_fclk_period))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_X1_FCLK_PERIODr BCMI_TSCF_GEN3_XGXS_PMD_X1_FCLK_PERIODr
#define PMD_X1_FCLK_PERIODr_SIZE BCMI_TSCF_GEN3_XGXS_PMD_X1_FCLK_PERIODr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PMD_X1_FCLK_PERIODr_t PMD_X1_FCLK_PERIODr_t;
#define PMD_X1_FCLK_PERIODr_CLR BCMI_TSCF_GEN3_XGXS_PMD_X1_FCLK_PERIODr_CLR
#define PMD_X1_FCLK_PERIODr_SET BCMI_TSCF_GEN3_XGXS_PMD_X1_FCLK_PERIODr_SET
#define PMD_X1_FCLK_PERIODr_GET BCMI_TSCF_GEN3_XGXS_PMD_X1_FCLK_PERIODr_GET
#define PMD_X1_FCLK_PERIODr_FRAC_NSf_GET BCMI_TSCF_GEN3_XGXS_PMD_X1_FCLK_PERIODr_FRAC_NSf_GET
#define PMD_X1_FCLK_PERIODr_FRAC_NSf_SET BCMI_TSCF_GEN3_XGXS_PMD_X1_FCLK_PERIODr_FRAC_NSf_SET
#define READ_PMD_X1_FCLK_PERIODr BCMI_TSCF_GEN3_XGXS_READ_PMD_X1_FCLK_PERIODr
#define WRITE_PMD_X1_FCLK_PERIODr BCMI_TSCF_GEN3_XGXS_WRITE_PMD_X1_FCLK_PERIODr
#define MODIFY_PMD_X1_FCLK_PERIODr BCMI_TSCF_GEN3_XGXS_MODIFY_PMD_X1_FCLK_PERIODr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PMD_X1_FCLK_PERIODr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PKTGEN_CTL1
 * BLOCKS:   PKTGEN0
 * REGADDR:  0x9030
 * DESC:     Packet Gen Control 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     PRTP_DATA_PATTERN_SEL 0: Local Fault Pattern, 1: Zeros Data PatternPer lane control
 */
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_CTL1r (0x00109030 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PKTGEN_CTL1r_SIZE 4

/*
 * This structure should be used to declare and program PKTGEN_CTL1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PKTGEN_CTL1r_s {
	uint32_t v[1];
	uint32_t pktgen_ctl1[1];
	uint32_t _pktgen_ctl1;
} BCMI_TSCF_GEN3_XGXS_PKTGEN_CTL1r_t;

#define BCMI_TSCF_GEN3_XGXS_PKTGEN_CTL1r_CLR(r) (r).pktgen_ctl1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_CTL1r_SET(r,d) (r).pktgen_ctl1[0] = d
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_CTL1r_GET(r) (r).pktgen_ctl1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_CTL1r_PRTP_DATA_PATTERN_SELf_GET(r) ((((r).pktgen_ctl1[0]) >> 3) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_CTL1r_PRTP_DATA_PATTERN_SELf_SET(r,f) (r).pktgen_ctl1[0]=(((r).pktgen_ctl1[0] & ~((uint32_t)0xf << 3)) | ((((uint32_t)f) & 0xf) << 3)) | (15 << (16 + 3))

/*
 * These macros can be used to access PKTGEN_CTL1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PKTGEN_CTL1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_CTL1r,(_r._pktgen_ctl1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PKTGEN_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_CTL1r,(_r._pktgen_ctl1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PKTGEN_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_CTL1r,(_r._pktgen_ctl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PKTGEN_CTL1r BCMI_TSCF_GEN3_XGXS_PKTGEN_CTL1r
#define PKTGEN_CTL1r_SIZE BCMI_TSCF_GEN3_XGXS_PKTGEN_CTL1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PKTGEN_CTL1r_t PKTGEN_CTL1r_t;
#define PKTGEN_CTL1r_CLR BCMI_TSCF_GEN3_XGXS_PKTGEN_CTL1r_CLR
#define PKTGEN_CTL1r_SET BCMI_TSCF_GEN3_XGXS_PKTGEN_CTL1r_SET
#define PKTGEN_CTL1r_GET BCMI_TSCF_GEN3_XGXS_PKTGEN_CTL1r_GET
#define PKTGEN_CTL1r_PRTP_DATA_PATTERN_SELf_GET BCMI_TSCF_GEN3_XGXS_PKTGEN_CTL1r_PRTP_DATA_PATTERN_SELf_GET
#define PKTGEN_CTL1r_PRTP_DATA_PATTERN_SELf_SET BCMI_TSCF_GEN3_XGXS_PKTGEN_CTL1r_PRTP_DATA_PATTERN_SELf_SET
#define READ_PKTGEN_CTL1r BCMI_TSCF_GEN3_XGXS_READ_PKTGEN_CTL1r
#define WRITE_PKTGEN_CTL1r BCMI_TSCF_GEN3_XGXS_WRITE_PKTGEN_CTL1r
#define MODIFY_PKTGEN_CTL1r BCMI_TSCF_GEN3_XGXS_MODIFY_PKTGEN_CTL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PKTGEN_CTL1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PKTGEN_PRTPCTL
 * BLOCKS:   PKTGEN0
 * REGADDR:  0x9033
 * DESC:     PRTP CONTROLS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RX_PRTP_EN       Enable Pseudo Random Test Pattern(PRTP) checker
 *     TX_PRTP_EN       Enable Pseudo Random Test Pattern(PRTP) Generator
 */
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PRTPCTLr (0x00109033 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PRTPCTLr_SIZE 4

/*
 * This structure should be used to declare and program PKTGEN_PRTPCTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PKTGEN_PRTPCTLr_s {
	uint32_t v[1];
	uint32_t pktgen_prtpctl[1];
	uint32_t _pktgen_prtpctl;
} BCMI_TSCF_GEN3_XGXS_PKTGEN_PRTPCTLr_t;

#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PRTPCTLr_CLR(r) (r).pktgen_prtpctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PRTPCTLr_SET(r,d) (r).pktgen_prtpctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PRTPCTLr_GET(r) (r).pktgen_prtpctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PRTPCTLr_TX_PRTP_ENf_GET(r) ((((r).pktgen_prtpctl[0]) >> 12) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PRTPCTLr_TX_PRTP_ENf_SET(r,f) (r).pktgen_prtpctl[0]=(((r).pktgen_prtpctl[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PRTPCTLr_RX_PRTP_ENf_GET(r) ((((r).pktgen_prtpctl[0]) >> 8) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PRTPCTLr_RX_PRTP_ENf_SET(r,f) (r).pktgen_prtpctl[0]=(((r).pktgen_prtpctl[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))

/*
 * These macros can be used to access PKTGEN_PRTPCTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PKTGEN_PRTPCTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_PRTPCTLr,(_r._pktgen_prtpctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PKTGEN_PRTPCTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_PRTPCTLr,(_r._pktgen_prtpctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PKTGEN_PRTPCTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_PRTPCTLr,(_r._pktgen_prtpctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PKTGEN_PRTPCTLr BCMI_TSCF_GEN3_XGXS_PKTGEN_PRTPCTLr
#define PKTGEN_PRTPCTLr_SIZE BCMI_TSCF_GEN3_XGXS_PKTGEN_PRTPCTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PKTGEN_PRTPCTLr_t PKTGEN_PRTPCTLr_t;
#define PKTGEN_PRTPCTLr_CLR BCMI_TSCF_GEN3_XGXS_PKTGEN_PRTPCTLr_CLR
#define PKTGEN_PRTPCTLr_SET BCMI_TSCF_GEN3_XGXS_PKTGEN_PRTPCTLr_SET
#define PKTGEN_PRTPCTLr_GET BCMI_TSCF_GEN3_XGXS_PKTGEN_PRTPCTLr_GET
#define PKTGEN_PRTPCTLr_TX_PRTP_ENf_GET BCMI_TSCF_GEN3_XGXS_PKTGEN_PRTPCTLr_TX_PRTP_ENf_GET
#define PKTGEN_PRTPCTLr_TX_PRTP_ENf_SET BCMI_TSCF_GEN3_XGXS_PKTGEN_PRTPCTLr_TX_PRTP_ENf_SET
#define PKTGEN_PRTPCTLr_RX_PRTP_ENf_GET BCMI_TSCF_GEN3_XGXS_PKTGEN_PRTPCTLr_RX_PRTP_ENf_GET
#define PKTGEN_PRTPCTLr_RX_PRTP_ENf_SET BCMI_TSCF_GEN3_XGXS_PKTGEN_PRTPCTLr_RX_PRTP_ENf_SET
#define READ_PKTGEN_PRTPCTLr BCMI_TSCF_GEN3_XGXS_READ_PKTGEN_PRTPCTLr
#define WRITE_PKTGEN_PRTPCTLr BCMI_TSCF_GEN3_XGXS_WRITE_PKTGEN_PRTPCTLr
#define MODIFY_PKTGEN_PRTPCTLr BCMI_TSCF_GEN3_XGXS_MODIFY_PKTGEN_PRTPCTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PKTGEN_PRTPCTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PKTGEN_CRCERRCNT
 * BLOCKS:   PKTGEN0
 * REGADDR:  0x9034
 * DESC:     CRC Error Count Register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CRCERRCNT        Count of received packet with bad crc. Always returns 0.
 */
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_CRCERRCNTr (0x00109034 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PKTGEN_CRCERRCNTr_SIZE 4

/*
 * This structure should be used to declare and program PKTGEN_CRCERRCNT.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PKTGEN_CRCERRCNTr_s {
	uint32_t v[1];
	uint32_t pktgen_crcerrcnt[1];
	uint32_t _pktgen_crcerrcnt;
} BCMI_TSCF_GEN3_XGXS_PKTGEN_CRCERRCNTr_t;

#define BCMI_TSCF_GEN3_XGXS_PKTGEN_CRCERRCNTr_CLR(r) (r).pktgen_crcerrcnt[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_CRCERRCNTr_SET(r,d) (r).pktgen_crcerrcnt[0] = d
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_CRCERRCNTr_GET(r) (r).pktgen_crcerrcnt[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_CRCERRCNTr_CRCERRCNTf_GET(r) (((r).pktgen_crcerrcnt[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_CRCERRCNTr_CRCERRCNTf_SET(r,f) (r).pktgen_crcerrcnt[0]=(((r).pktgen_crcerrcnt[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PKTGEN_CRCERRCNT.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PKTGEN_CRCERRCNTr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_CRCERRCNTr,(_r._pktgen_crcerrcnt))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PKTGEN_CRCERRCNTr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_CRCERRCNTr,(_r._pktgen_crcerrcnt)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PKTGEN_CRCERRCNTr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_CRCERRCNTr,(_r._pktgen_crcerrcnt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PKTGEN_CRCERRCNTr BCMI_TSCF_GEN3_XGXS_PKTGEN_CRCERRCNTr
#define PKTGEN_CRCERRCNTr_SIZE BCMI_TSCF_GEN3_XGXS_PKTGEN_CRCERRCNTr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PKTGEN_CRCERRCNTr_t PKTGEN_CRCERRCNTr_t;
#define PKTGEN_CRCERRCNTr_CLR BCMI_TSCF_GEN3_XGXS_PKTGEN_CRCERRCNTr_CLR
#define PKTGEN_CRCERRCNTr_SET BCMI_TSCF_GEN3_XGXS_PKTGEN_CRCERRCNTr_SET
#define PKTGEN_CRCERRCNTr_GET BCMI_TSCF_GEN3_XGXS_PKTGEN_CRCERRCNTr_GET
#define PKTGEN_CRCERRCNTr_CRCERRCNTf_GET BCMI_TSCF_GEN3_XGXS_PKTGEN_CRCERRCNTr_CRCERRCNTf_GET
#define PKTGEN_CRCERRCNTr_CRCERRCNTf_SET BCMI_TSCF_GEN3_XGXS_PKTGEN_CRCERRCNTr_CRCERRCNTf_SET
#define READ_PKTGEN_CRCERRCNTr BCMI_TSCF_GEN3_XGXS_READ_PKTGEN_CRCERRCNTr
#define WRITE_PKTGEN_CRCERRCNTr BCMI_TSCF_GEN3_XGXS_WRITE_PKTGEN_CRCERRCNTr
#define MODIFY_PKTGEN_CRCERRCNTr BCMI_TSCF_GEN3_XGXS_MODIFY_PKTGEN_CRCERRCNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PKTGEN_CRCERRCNTr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PKTGEN_PCS_SEEDA0
 * BLOCKS:   PKTGEN0
 * REGADDR:  0x9037
 * DESC:     10GBASE-R PCS 0022 test pattern seed A word bits 15:00
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     SEEDA0           10GBASE-R PCS test pattern seed A bits 0-15, seedA0[15:0]
 */
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA0r (0x00109037 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA0r_SIZE 4

/*
 * This structure should be used to declare and program PKTGEN_PCS_SEEDA0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA0r_s {
	uint32_t v[1];
	uint32_t pktgen_pcs_seeda0[1];
	uint32_t _pktgen_pcs_seeda0;
} BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA0r_t;

#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA0r_CLR(r) (r).pktgen_pcs_seeda0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA0r_SET(r,d) (r).pktgen_pcs_seeda0[0] = d
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA0r_GET(r) (r).pktgen_pcs_seeda0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA0r_SEEDA0f_GET(r) (((r).pktgen_pcs_seeda0[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA0r_SEEDA0f_SET(r,f) (r).pktgen_pcs_seeda0[0]=(((r).pktgen_pcs_seeda0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PKTGEN_PCS_SEEDA0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PKTGEN_PCS_SEEDA0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA0r,(_r._pktgen_pcs_seeda0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PKTGEN_PCS_SEEDA0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA0r,(_r._pktgen_pcs_seeda0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PKTGEN_PCS_SEEDA0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA0r,(_r._pktgen_pcs_seeda0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PKTGEN_PCS_SEEDA0r BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA0r
#define PKTGEN_PCS_SEEDA0r_SIZE BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA0r_t PKTGEN_PCS_SEEDA0r_t;
#define PKTGEN_PCS_SEEDA0r_CLR BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA0r_CLR
#define PKTGEN_PCS_SEEDA0r_SET BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA0r_SET
#define PKTGEN_PCS_SEEDA0r_GET BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA0r_GET
#define PKTGEN_PCS_SEEDA0r_SEEDA0f_GET BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA0r_SEEDA0f_GET
#define PKTGEN_PCS_SEEDA0r_SEEDA0f_SET BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA0r_SEEDA0f_SET
#define READ_PKTGEN_PCS_SEEDA0r BCMI_TSCF_GEN3_XGXS_READ_PKTGEN_PCS_SEEDA0r
#define WRITE_PKTGEN_PCS_SEEDA0r BCMI_TSCF_GEN3_XGXS_WRITE_PKTGEN_PCS_SEEDA0r
#define MODIFY_PKTGEN_PCS_SEEDA0r BCMI_TSCF_GEN3_XGXS_MODIFY_PKTGEN_PCS_SEEDA0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PKTGEN_PCS_SEEDA1
 * BLOCKS:   PKTGEN0
 * REGADDR:  0x9038
 * DESC:     10GBASE-R PCS 0023 test pattern seed A word bits 31:16
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     SEEDA1           10GBASE-R PCS test pattern seed A bits 16-31, seedA1[15:0]
 */
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA1r (0x00109038 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA1r_SIZE 4

/*
 * This structure should be used to declare and program PKTGEN_PCS_SEEDA1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA1r_s {
	uint32_t v[1];
	uint32_t pktgen_pcs_seeda1[1];
	uint32_t _pktgen_pcs_seeda1;
} BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA1r_t;

#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA1r_CLR(r) (r).pktgen_pcs_seeda1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA1r_SET(r,d) (r).pktgen_pcs_seeda1[0] = d
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA1r_GET(r) (r).pktgen_pcs_seeda1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA1r_SEEDA1f_GET(r) (((r).pktgen_pcs_seeda1[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA1r_SEEDA1f_SET(r,f) (r).pktgen_pcs_seeda1[0]=(((r).pktgen_pcs_seeda1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PKTGEN_PCS_SEEDA1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PKTGEN_PCS_SEEDA1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA1r,(_r._pktgen_pcs_seeda1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PKTGEN_PCS_SEEDA1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA1r,(_r._pktgen_pcs_seeda1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PKTGEN_PCS_SEEDA1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA1r,(_r._pktgen_pcs_seeda1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PKTGEN_PCS_SEEDA1r BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA1r
#define PKTGEN_PCS_SEEDA1r_SIZE BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA1r_t PKTGEN_PCS_SEEDA1r_t;
#define PKTGEN_PCS_SEEDA1r_CLR BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA1r_CLR
#define PKTGEN_PCS_SEEDA1r_SET BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA1r_SET
#define PKTGEN_PCS_SEEDA1r_GET BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA1r_GET
#define PKTGEN_PCS_SEEDA1r_SEEDA1f_GET BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA1r_SEEDA1f_GET
#define PKTGEN_PCS_SEEDA1r_SEEDA1f_SET BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA1r_SEEDA1f_SET
#define READ_PKTGEN_PCS_SEEDA1r BCMI_TSCF_GEN3_XGXS_READ_PKTGEN_PCS_SEEDA1r
#define WRITE_PKTGEN_PCS_SEEDA1r BCMI_TSCF_GEN3_XGXS_WRITE_PKTGEN_PCS_SEEDA1r
#define MODIFY_PKTGEN_PCS_SEEDA1r BCMI_TSCF_GEN3_XGXS_MODIFY_PKTGEN_PCS_SEEDA1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PKTGEN_PCS_SEEDA2
 * BLOCKS:   PKTGEN0
 * REGADDR:  0x9039
 * DESC:     10GBASE-R PCS 0024 test pattern seed A word bits 47:32
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     SEEDA2           10GBASE-R PCS test pattern seed A bits 32-47, seedA2[15:0]
 */
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA2r (0x00109039 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA2r_SIZE 4

/*
 * This structure should be used to declare and program PKTGEN_PCS_SEEDA2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA2r_s {
	uint32_t v[1];
	uint32_t pktgen_pcs_seeda2[1];
	uint32_t _pktgen_pcs_seeda2;
} BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA2r_t;

#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA2r_CLR(r) (r).pktgen_pcs_seeda2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA2r_SET(r,d) (r).pktgen_pcs_seeda2[0] = d
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA2r_GET(r) (r).pktgen_pcs_seeda2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA2r_SEEDA2f_GET(r) (((r).pktgen_pcs_seeda2[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA2r_SEEDA2f_SET(r,f) (r).pktgen_pcs_seeda2[0]=(((r).pktgen_pcs_seeda2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PKTGEN_PCS_SEEDA2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PKTGEN_PCS_SEEDA2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA2r,(_r._pktgen_pcs_seeda2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PKTGEN_PCS_SEEDA2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA2r,(_r._pktgen_pcs_seeda2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PKTGEN_PCS_SEEDA2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA2r,(_r._pktgen_pcs_seeda2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PKTGEN_PCS_SEEDA2r BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA2r
#define PKTGEN_PCS_SEEDA2r_SIZE BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA2r_t PKTGEN_PCS_SEEDA2r_t;
#define PKTGEN_PCS_SEEDA2r_CLR BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA2r_CLR
#define PKTGEN_PCS_SEEDA2r_SET BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA2r_SET
#define PKTGEN_PCS_SEEDA2r_GET BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA2r_GET
#define PKTGEN_PCS_SEEDA2r_SEEDA2f_GET BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA2r_SEEDA2f_GET
#define PKTGEN_PCS_SEEDA2r_SEEDA2f_SET BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA2r_SEEDA2f_SET
#define READ_PKTGEN_PCS_SEEDA2r BCMI_TSCF_GEN3_XGXS_READ_PKTGEN_PCS_SEEDA2r
#define WRITE_PKTGEN_PCS_SEEDA2r BCMI_TSCF_GEN3_XGXS_WRITE_PKTGEN_PCS_SEEDA2r
#define MODIFY_PKTGEN_PCS_SEEDA2r BCMI_TSCF_GEN3_XGXS_MODIFY_PKTGEN_PCS_SEEDA2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PKTGEN_PCS_SEEDA3
 * BLOCKS:   PKTGEN0
 * REGADDR:  0x903a
 * DESC:     10GBASE-R PCS 0025 test pattern seed A word bits 57:48
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     SEEDA3           10GBASE-R PCS test pattern seed A bits 48-57, seedA3[9:0]
 */
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA3r (0x0010903a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA3r_SIZE 4

/*
 * This structure should be used to declare and program PKTGEN_PCS_SEEDA3.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA3r_s {
	uint32_t v[1];
	uint32_t pktgen_pcs_seeda3[1];
	uint32_t _pktgen_pcs_seeda3;
} BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA3r_t;

#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA3r_CLR(r) (r).pktgen_pcs_seeda3[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA3r_SET(r,d) (r).pktgen_pcs_seeda3[0] = d
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA3r_GET(r) (r).pktgen_pcs_seeda3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA3r_SEEDA3f_GET(r) (((r).pktgen_pcs_seeda3[0]) & 0x3ff)
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA3r_SEEDA3f_SET(r,f) (r).pktgen_pcs_seeda3[0]=(((r).pktgen_pcs_seeda3[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff)) | (0x3ff << 16)

/*
 * These macros can be used to access PKTGEN_PCS_SEEDA3.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PKTGEN_PCS_SEEDA3r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA3r,(_r._pktgen_pcs_seeda3))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PKTGEN_PCS_SEEDA3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA3r,(_r._pktgen_pcs_seeda3)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PKTGEN_PCS_SEEDA3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA3r,(_r._pktgen_pcs_seeda3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PKTGEN_PCS_SEEDA3r BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA3r
#define PKTGEN_PCS_SEEDA3r_SIZE BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA3r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA3r_t PKTGEN_PCS_SEEDA3r_t;
#define PKTGEN_PCS_SEEDA3r_CLR BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA3r_CLR
#define PKTGEN_PCS_SEEDA3r_SET BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA3r_SET
#define PKTGEN_PCS_SEEDA3r_GET BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA3r_GET
#define PKTGEN_PCS_SEEDA3r_SEEDA3f_GET BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA3r_SEEDA3f_GET
#define PKTGEN_PCS_SEEDA3r_SEEDA3f_SET BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA3r_SEEDA3f_SET
#define READ_PKTGEN_PCS_SEEDA3r BCMI_TSCF_GEN3_XGXS_READ_PKTGEN_PCS_SEEDA3r
#define WRITE_PKTGEN_PCS_SEEDA3r BCMI_TSCF_GEN3_XGXS_WRITE_PKTGEN_PCS_SEEDA3r
#define MODIFY_PKTGEN_PCS_SEEDA3r BCMI_TSCF_GEN3_XGXS_MODIFY_PKTGEN_PCS_SEEDA3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDA3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PKTGEN_PCS_SEEDB0
 * BLOCKS:   PKTGEN0
 * REGADDR:  0x903b
 * DESC:     10GBASE-R PCS 0026 test pattern seed B word bits 15:00
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     SEEDB0           10GBASE-R PCS test pattern seed B bits 0-15, seedB0[15:0]
 */
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB0r (0x0010903b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB0r_SIZE 4

/*
 * This structure should be used to declare and program PKTGEN_PCS_SEEDB0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB0r_s {
	uint32_t v[1];
	uint32_t pktgen_pcs_seedb0[1];
	uint32_t _pktgen_pcs_seedb0;
} BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB0r_t;

#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB0r_CLR(r) (r).pktgen_pcs_seedb0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB0r_SET(r,d) (r).pktgen_pcs_seedb0[0] = d
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB0r_GET(r) (r).pktgen_pcs_seedb0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB0r_SEEDB0f_GET(r) (((r).pktgen_pcs_seedb0[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB0r_SEEDB0f_SET(r,f) (r).pktgen_pcs_seedb0[0]=(((r).pktgen_pcs_seedb0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PKTGEN_PCS_SEEDB0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PKTGEN_PCS_SEEDB0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB0r,(_r._pktgen_pcs_seedb0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PKTGEN_PCS_SEEDB0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB0r,(_r._pktgen_pcs_seedb0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PKTGEN_PCS_SEEDB0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB0r,(_r._pktgen_pcs_seedb0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PKTGEN_PCS_SEEDB0r BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB0r
#define PKTGEN_PCS_SEEDB0r_SIZE BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB0r_t PKTGEN_PCS_SEEDB0r_t;
#define PKTGEN_PCS_SEEDB0r_CLR BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB0r_CLR
#define PKTGEN_PCS_SEEDB0r_SET BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB0r_SET
#define PKTGEN_PCS_SEEDB0r_GET BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB0r_GET
#define PKTGEN_PCS_SEEDB0r_SEEDB0f_GET BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB0r_SEEDB0f_GET
#define PKTGEN_PCS_SEEDB0r_SEEDB0f_SET BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB0r_SEEDB0f_SET
#define READ_PKTGEN_PCS_SEEDB0r BCMI_TSCF_GEN3_XGXS_READ_PKTGEN_PCS_SEEDB0r
#define WRITE_PKTGEN_PCS_SEEDB0r BCMI_TSCF_GEN3_XGXS_WRITE_PKTGEN_PCS_SEEDB0r
#define MODIFY_PKTGEN_PCS_SEEDB0r BCMI_TSCF_GEN3_XGXS_MODIFY_PKTGEN_PCS_SEEDB0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PKTGEN_PCS_SEEDB1
 * BLOCKS:   PKTGEN0
 * REGADDR:  0x903c
 * DESC:     10GBASE-R PCS 0027 test pattern seed B word bits 31:16
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     SEEDB1           10GBASE-R PCS test pattern seed B bits 16-31, seedB1[15:0]
 */
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB1r (0x0010903c | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB1r_SIZE 4

/*
 * This structure should be used to declare and program PKTGEN_PCS_SEEDB1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB1r_s {
	uint32_t v[1];
	uint32_t pktgen_pcs_seedb1[1];
	uint32_t _pktgen_pcs_seedb1;
} BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB1r_t;

#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB1r_CLR(r) (r).pktgen_pcs_seedb1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB1r_SET(r,d) (r).pktgen_pcs_seedb1[0] = d
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB1r_GET(r) (r).pktgen_pcs_seedb1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB1r_SEEDB1f_GET(r) (((r).pktgen_pcs_seedb1[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB1r_SEEDB1f_SET(r,f) (r).pktgen_pcs_seedb1[0]=(((r).pktgen_pcs_seedb1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PKTGEN_PCS_SEEDB1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PKTGEN_PCS_SEEDB1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB1r,(_r._pktgen_pcs_seedb1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PKTGEN_PCS_SEEDB1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB1r,(_r._pktgen_pcs_seedb1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PKTGEN_PCS_SEEDB1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB1r,(_r._pktgen_pcs_seedb1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PKTGEN_PCS_SEEDB1r BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB1r
#define PKTGEN_PCS_SEEDB1r_SIZE BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB1r_t PKTGEN_PCS_SEEDB1r_t;
#define PKTGEN_PCS_SEEDB1r_CLR BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB1r_CLR
#define PKTGEN_PCS_SEEDB1r_SET BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB1r_SET
#define PKTGEN_PCS_SEEDB1r_GET BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB1r_GET
#define PKTGEN_PCS_SEEDB1r_SEEDB1f_GET BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB1r_SEEDB1f_GET
#define PKTGEN_PCS_SEEDB1r_SEEDB1f_SET BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB1r_SEEDB1f_SET
#define READ_PKTGEN_PCS_SEEDB1r BCMI_TSCF_GEN3_XGXS_READ_PKTGEN_PCS_SEEDB1r
#define WRITE_PKTGEN_PCS_SEEDB1r BCMI_TSCF_GEN3_XGXS_WRITE_PKTGEN_PCS_SEEDB1r
#define MODIFY_PKTGEN_PCS_SEEDB1r BCMI_TSCF_GEN3_XGXS_MODIFY_PKTGEN_PCS_SEEDB1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PKTGEN_PCS_SEEDB2
 * BLOCKS:   PKTGEN0
 * REGADDR:  0x903d
 * DESC:     10GBASE-R PCS 0028 test pattern seed B word bits 47:32
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     SEEDB2           10GBASE-R PCS test pattern seed B bits 32-47, seedB2[15:0]
 */
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB2r (0x0010903d | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB2r_SIZE 4

/*
 * This structure should be used to declare and program PKTGEN_PCS_SEEDB2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB2r_s {
	uint32_t v[1];
	uint32_t pktgen_pcs_seedb2[1];
	uint32_t _pktgen_pcs_seedb2;
} BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB2r_t;

#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB2r_CLR(r) (r).pktgen_pcs_seedb2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB2r_SET(r,d) (r).pktgen_pcs_seedb2[0] = d
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB2r_GET(r) (r).pktgen_pcs_seedb2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB2r_SEEDB2f_GET(r) (((r).pktgen_pcs_seedb2[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB2r_SEEDB2f_SET(r,f) (r).pktgen_pcs_seedb2[0]=(((r).pktgen_pcs_seedb2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PKTGEN_PCS_SEEDB2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PKTGEN_PCS_SEEDB2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB2r,(_r._pktgen_pcs_seedb2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PKTGEN_PCS_SEEDB2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB2r,(_r._pktgen_pcs_seedb2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PKTGEN_PCS_SEEDB2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB2r,(_r._pktgen_pcs_seedb2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PKTGEN_PCS_SEEDB2r BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB2r
#define PKTGEN_PCS_SEEDB2r_SIZE BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB2r_t PKTGEN_PCS_SEEDB2r_t;
#define PKTGEN_PCS_SEEDB2r_CLR BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB2r_CLR
#define PKTGEN_PCS_SEEDB2r_SET BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB2r_SET
#define PKTGEN_PCS_SEEDB2r_GET BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB2r_GET
#define PKTGEN_PCS_SEEDB2r_SEEDB2f_GET BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB2r_SEEDB2f_GET
#define PKTGEN_PCS_SEEDB2r_SEEDB2f_SET BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB2r_SEEDB2f_SET
#define READ_PKTGEN_PCS_SEEDB2r BCMI_TSCF_GEN3_XGXS_READ_PKTGEN_PCS_SEEDB2r
#define WRITE_PKTGEN_PCS_SEEDB2r BCMI_TSCF_GEN3_XGXS_WRITE_PKTGEN_PCS_SEEDB2r
#define MODIFY_PKTGEN_PCS_SEEDB2r BCMI_TSCF_GEN3_XGXS_MODIFY_PKTGEN_PCS_SEEDB2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PKTGEN_PCS_SEEDB3
 * BLOCKS:   PKTGEN0
 * REGADDR:  0x903e
 * DESC:     10GBASE-R PCS 0029 test pattern seed B word bits 57:48
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     SEEDB3           10GBASE-R PCS test pattern seed B bits 48-57, seedB3[9:0]
 */
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB3r (0x0010903e | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB3r_SIZE 4

/*
 * This structure should be used to declare and program PKTGEN_PCS_SEEDB3.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB3r_s {
	uint32_t v[1];
	uint32_t pktgen_pcs_seedb3[1];
	uint32_t _pktgen_pcs_seedb3;
} BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB3r_t;

#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB3r_CLR(r) (r).pktgen_pcs_seedb3[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB3r_SET(r,d) (r).pktgen_pcs_seedb3[0] = d
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB3r_GET(r) (r).pktgen_pcs_seedb3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB3r_SEEDB3f_GET(r) (((r).pktgen_pcs_seedb3[0]) & 0x3ff)
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB3r_SEEDB3f_SET(r,f) (r).pktgen_pcs_seedb3[0]=(((r).pktgen_pcs_seedb3[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff)) | (0x3ff << 16)

/*
 * These macros can be used to access PKTGEN_PCS_SEEDB3.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PKTGEN_PCS_SEEDB3r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB3r,(_r._pktgen_pcs_seedb3))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PKTGEN_PCS_SEEDB3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB3r,(_r._pktgen_pcs_seedb3)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PKTGEN_PCS_SEEDB3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB3r,(_r._pktgen_pcs_seedb3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PKTGEN_PCS_SEEDB3r BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB3r
#define PKTGEN_PCS_SEEDB3r_SIZE BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB3r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB3r_t PKTGEN_PCS_SEEDB3r_t;
#define PKTGEN_PCS_SEEDB3r_CLR BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB3r_CLR
#define PKTGEN_PCS_SEEDB3r_SET BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB3r_SET
#define PKTGEN_PCS_SEEDB3r_GET BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB3r_GET
#define PKTGEN_PCS_SEEDB3r_SEEDB3f_GET BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB3r_SEEDB3f_GET
#define PKTGEN_PCS_SEEDB3r_SEEDB3f_SET BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB3r_SEEDB3f_SET
#define READ_PKTGEN_PCS_SEEDB3r BCMI_TSCF_GEN3_XGXS_READ_PKTGEN_PCS_SEEDB3r
#define WRITE_PKTGEN_PCS_SEEDB3r BCMI_TSCF_GEN3_XGXS_WRITE_PKTGEN_PCS_SEEDB3r
#define MODIFY_PKTGEN_PCS_SEEDB3r BCMI_TSCF_GEN3_XGXS_MODIFY_PKTGEN_PCS_SEEDB3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PKTGEN_PCS_SEEDB3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PKTGEN_ERRMASK4
 * BLOCKS:   PKTGEN1
 * REGADDR:  0x9041
 * DESC:     Error mask bits 79:64
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     ERROR_MASK_65_64 Error Mask used to generate errors
 */
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK4r (0x00109041 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK4r_SIZE 4

/*
 * This structure should be used to declare and program PKTGEN_ERRMASK4.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK4r_s {
	uint32_t v[1];
	uint32_t pktgen_errmask4[1];
	uint32_t _pktgen_errmask4;
} BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK4r_t;

#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK4r_CLR(r) (r).pktgen_errmask4[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK4r_SET(r,d) (r).pktgen_errmask4[0] = d
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK4r_GET(r) (r).pktgen_errmask4[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK4r_ERROR_MASK_65_64f_GET(r) (((r).pktgen_errmask4[0]) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK4r_ERROR_MASK_65_64f_SET(r,f) (r).pktgen_errmask4[0]=(((r).pktgen_errmask4[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access PKTGEN_ERRMASK4.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PKTGEN_ERRMASK4r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK4r,(_r._pktgen_errmask4))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PKTGEN_ERRMASK4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK4r,(_r._pktgen_errmask4)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PKTGEN_ERRMASK4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK4r,(_r._pktgen_errmask4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PKTGEN_ERRMASK4r BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK4r
#define PKTGEN_ERRMASK4r_SIZE BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK4r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK4r_t PKTGEN_ERRMASK4r_t;
#define PKTGEN_ERRMASK4r_CLR BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK4r_CLR
#define PKTGEN_ERRMASK4r_SET BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK4r_SET
#define PKTGEN_ERRMASK4r_GET BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK4r_GET
#define PKTGEN_ERRMASK4r_ERROR_MASK_65_64f_GET BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK4r_ERROR_MASK_65_64f_GET
#define PKTGEN_ERRMASK4r_ERROR_MASK_65_64f_SET BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK4r_ERROR_MASK_65_64f_SET
#define READ_PKTGEN_ERRMASK4r BCMI_TSCF_GEN3_XGXS_READ_PKTGEN_ERRMASK4r
#define WRITE_PKTGEN_ERRMASK4r BCMI_TSCF_GEN3_XGXS_WRITE_PKTGEN_ERRMASK4r
#define MODIFY_PKTGEN_ERRMASK4r BCMI_TSCF_GEN3_XGXS_MODIFY_PKTGEN_ERRMASK4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK4r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PKTGEN_ERRMASK3
 * BLOCKS:   PKTGEN1
 * REGADDR:  0x9042
 * DESC:     Error mask bits 63:48
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     ERROR_MASK_63_48 Error Mask used to generate errors
 */
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK3r (0x00109042 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK3r_SIZE 4

/*
 * This structure should be used to declare and program PKTGEN_ERRMASK3.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK3r_s {
	uint32_t v[1];
	uint32_t pktgen_errmask3[1];
	uint32_t _pktgen_errmask3;
} BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK3r_t;

#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK3r_CLR(r) (r).pktgen_errmask3[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK3r_SET(r,d) (r).pktgen_errmask3[0] = d
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK3r_GET(r) (r).pktgen_errmask3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK3r_ERROR_MASK_63_48f_GET(r) (((r).pktgen_errmask3[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK3r_ERROR_MASK_63_48f_SET(r,f) (r).pktgen_errmask3[0]=(((r).pktgen_errmask3[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PKTGEN_ERRMASK3.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PKTGEN_ERRMASK3r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK3r,(_r._pktgen_errmask3))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PKTGEN_ERRMASK3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK3r,(_r._pktgen_errmask3)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PKTGEN_ERRMASK3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK3r,(_r._pktgen_errmask3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PKTGEN_ERRMASK3r BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK3r
#define PKTGEN_ERRMASK3r_SIZE BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK3r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK3r_t PKTGEN_ERRMASK3r_t;
#define PKTGEN_ERRMASK3r_CLR BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK3r_CLR
#define PKTGEN_ERRMASK3r_SET BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK3r_SET
#define PKTGEN_ERRMASK3r_GET BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK3r_GET
#define PKTGEN_ERRMASK3r_ERROR_MASK_63_48f_GET BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK3r_ERROR_MASK_63_48f_GET
#define PKTGEN_ERRMASK3r_ERROR_MASK_63_48f_SET BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK3r_ERROR_MASK_63_48f_SET
#define READ_PKTGEN_ERRMASK3r BCMI_TSCF_GEN3_XGXS_READ_PKTGEN_ERRMASK3r
#define WRITE_PKTGEN_ERRMASK3r BCMI_TSCF_GEN3_XGXS_WRITE_PKTGEN_ERRMASK3r
#define MODIFY_PKTGEN_ERRMASK3r BCMI_TSCF_GEN3_XGXS_MODIFY_PKTGEN_ERRMASK3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PKTGEN_ERRMASK2
 * BLOCKS:   PKTGEN1
 * REGADDR:  0x9043
 * DESC:     Error mask bits 47:32
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     ERROR_MASK_47_32 Error Mask used to generate errors
 */
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK2r (0x00109043 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK2r_SIZE 4

/*
 * This structure should be used to declare and program PKTGEN_ERRMASK2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK2r_s {
	uint32_t v[1];
	uint32_t pktgen_errmask2[1];
	uint32_t _pktgen_errmask2;
} BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK2r_t;

#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK2r_CLR(r) (r).pktgen_errmask2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK2r_SET(r,d) (r).pktgen_errmask2[0] = d
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK2r_GET(r) (r).pktgen_errmask2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK2r_ERROR_MASK_47_32f_GET(r) (((r).pktgen_errmask2[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK2r_ERROR_MASK_47_32f_SET(r,f) (r).pktgen_errmask2[0]=(((r).pktgen_errmask2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PKTGEN_ERRMASK2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PKTGEN_ERRMASK2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK2r,(_r._pktgen_errmask2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PKTGEN_ERRMASK2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK2r,(_r._pktgen_errmask2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PKTGEN_ERRMASK2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK2r,(_r._pktgen_errmask2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PKTGEN_ERRMASK2r BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK2r
#define PKTGEN_ERRMASK2r_SIZE BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK2r_t PKTGEN_ERRMASK2r_t;
#define PKTGEN_ERRMASK2r_CLR BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK2r_CLR
#define PKTGEN_ERRMASK2r_SET BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK2r_SET
#define PKTGEN_ERRMASK2r_GET BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK2r_GET
#define PKTGEN_ERRMASK2r_ERROR_MASK_47_32f_GET BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK2r_ERROR_MASK_47_32f_GET
#define PKTGEN_ERRMASK2r_ERROR_MASK_47_32f_SET BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK2r_ERROR_MASK_47_32f_SET
#define READ_PKTGEN_ERRMASK2r BCMI_TSCF_GEN3_XGXS_READ_PKTGEN_ERRMASK2r
#define WRITE_PKTGEN_ERRMASK2r BCMI_TSCF_GEN3_XGXS_WRITE_PKTGEN_ERRMASK2r
#define MODIFY_PKTGEN_ERRMASK2r BCMI_TSCF_GEN3_XGXS_MODIFY_PKTGEN_ERRMASK2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PKTGEN_ERRMASK1
 * BLOCKS:   PKTGEN1
 * REGADDR:  0x9044
 * DESC:     Error mask bits 31:16
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     ERROR_MASK_31_16 Error Mask used to generate errors
 */
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK1r (0x00109044 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK1r_SIZE 4

/*
 * This structure should be used to declare and program PKTGEN_ERRMASK1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK1r_s {
	uint32_t v[1];
	uint32_t pktgen_errmask1[1];
	uint32_t _pktgen_errmask1;
} BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK1r_t;

#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK1r_CLR(r) (r).pktgen_errmask1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK1r_SET(r,d) (r).pktgen_errmask1[0] = d
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK1r_GET(r) (r).pktgen_errmask1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK1r_ERROR_MASK_31_16f_GET(r) (((r).pktgen_errmask1[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK1r_ERROR_MASK_31_16f_SET(r,f) (r).pktgen_errmask1[0]=(((r).pktgen_errmask1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PKTGEN_ERRMASK1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PKTGEN_ERRMASK1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK1r,(_r._pktgen_errmask1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PKTGEN_ERRMASK1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK1r,(_r._pktgen_errmask1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PKTGEN_ERRMASK1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK1r,(_r._pktgen_errmask1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PKTGEN_ERRMASK1r BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK1r
#define PKTGEN_ERRMASK1r_SIZE BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK1r_t PKTGEN_ERRMASK1r_t;
#define PKTGEN_ERRMASK1r_CLR BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK1r_CLR
#define PKTGEN_ERRMASK1r_SET BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK1r_SET
#define PKTGEN_ERRMASK1r_GET BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK1r_GET
#define PKTGEN_ERRMASK1r_ERROR_MASK_31_16f_GET BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK1r_ERROR_MASK_31_16f_GET
#define PKTGEN_ERRMASK1r_ERROR_MASK_31_16f_SET BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK1r_ERROR_MASK_31_16f_SET
#define READ_PKTGEN_ERRMASK1r BCMI_TSCF_GEN3_XGXS_READ_PKTGEN_ERRMASK1r
#define WRITE_PKTGEN_ERRMASK1r BCMI_TSCF_GEN3_XGXS_WRITE_PKTGEN_ERRMASK1r
#define MODIFY_PKTGEN_ERRMASK1r BCMI_TSCF_GEN3_XGXS_MODIFY_PKTGEN_ERRMASK1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PKTGEN_ERRMASK0
 * BLOCKS:   PKTGEN1
 * REGADDR:  0x9045
 * DESC:     Error mask bits 15:0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     ERROR_MASK_15_0  Error Mask used to generate errors
 */
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK0r (0x00109045 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK0r_SIZE 4

/*
 * This structure should be used to declare and program PKTGEN_ERRMASK0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK0r_s {
	uint32_t v[1];
	uint32_t pktgen_errmask0[1];
	uint32_t _pktgen_errmask0;
} BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK0r_t;

#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK0r_CLR(r) (r).pktgen_errmask0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK0r_SET(r,d) (r).pktgen_errmask0[0] = d
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK0r_GET(r) (r).pktgen_errmask0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK0r_ERROR_MASK_15_0f_GET(r) (((r).pktgen_errmask0[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK0r_ERROR_MASK_15_0f_SET(r,f) (r).pktgen_errmask0[0]=(((r).pktgen_errmask0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PKTGEN_ERRMASK0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PKTGEN_ERRMASK0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK0r,(_r._pktgen_errmask0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PKTGEN_ERRMASK0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK0r,(_r._pktgen_errmask0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PKTGEN_ERRMASK0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK0r,(_r._pktgen_errmask0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PKTGEN_ERRMASK0r BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK0r
#define PKTGEN_ERRMASK0r_SIZE BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK0r_t PKTGEN_ERRMASK0r_t;
#define PKTGEN_ERRMASK0r_CLR BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK0r_CLR
#define PKTGEN_ERRMASK0r_SET BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK0r_SET
#define PKTGEN_ERRMASK0r_GET BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK0r_GET
#define PKTGEN_ERRMASK0r_ERROR_MASK_15_0f_GET BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK0r_ERROR_MASK_15_0f_GET
#define PKTGEN_ERRMASK0r_ERROR_MASK_15_0f_SET BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK0r_ERROR_MASK_15_0f_SET
#define READ_PKTGEN_ERRMASK0r BCMI_TSCF_GEN3_XGXS_READ_PKTGEN_ERRMASK0r
#define WRITE_PKTGEN_ERRMASK0r BCMI_TSCF_GEN3_XGXS_WRITE_PKTGEN_ERRMASK0r
#define MODIFY_PKTGEN_ERRMASK0r BCMI_TSCF_GEN3_XGXS_MODIFY_PKTGEN_ERRMASK0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PKTGEN_ERRMASK0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PKTGEN_ERR_INJ_EN0
 * BLOCKS:   PKTGEN1
 * REGADDR:  0x9046
 * DESC:     Error injection enable control
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     ERRGEN_EN_PH0    PER stream control to enable 66-bit error gen maskNote: Setting this bit results in a one time application of the error mask
 *     ERRGEN_EN_PH1    PER stream control to enable 66-bit error gen maskNote: Setting this bit results in a one time application of the error mask
 *     ERRGEN_EN_PH2    PER stream control to enable 66-bit error gen maskNote: Setting this bit results in a one time application of the error mask
 */
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN0r (0x00109046 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN0r_SIZE 4

/*
 * This structure should be used to declare and program PKTGEN_ERR_INJ_EN0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN0r_s {
	uint32_t v[1];
	uint32_t pktgen_err_inj_en0[1];
	uint32_t _pktgen_err_inj_en0;
} BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN0r_t;

#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN0r_CLR(r) (r).pktgen_err_inj_en0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN0r_SET(r,d) (r).pktgen_err_inj_en0[0] = d
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN0r_GET(r) (r).pktgen_err_inj_en0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN0r_ERRGEN_EN_PH2f_GET(r) ((((r).pktgen_err_inj_en0[0]) >> 10) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN0r_ERRGEN_EN_PH2f_SET(r,f) (r).pktgen_err_inj_en0[0]=(((r).pktgen_err_inj_en0[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10)) | (31 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN0r_ERRGEN_EN_PH1f_GET(r) ((((r).pktgen_err_inj_en0[0]) >> 5) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN0r_ERRGEN_EN_PH1f_SET(r,f) (r).pktgen_err_inj_en0[0]=(((r).pktgen_err_inj_en0[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5)) | (31 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN0r_ERRGEN_EN_PH0f_GET(r) (((r).pktgen_err_inj_en0[0]) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN0r_ERRGEN_EN_PH0f_SET(r,f) (r).pktgen_err_inj_en0[0]=(((r).pktgen_err_inj_en0[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access PKTGEN_ERR_INJ_EN0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PKTGEN_ERR_INJ_EN0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN0r,(_r._pktgen_err_inj_en0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PKTGEN_ERR_INJ_EN0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN0r,(_r._pktgen_err_inj_en0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PKTGEN_ERR_INJ_EN0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN0r,(_r._pktgen_err_inj_en0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PKTGEN_ERR_INJ_EN0r BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN0r
#define PKTGEN_ERR_INJ_EN0r_SIZE BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN0r_t PKTGEN_ERR_INJ_EN0r_t;
#define PKTGEN_ERR_INJ_EN0r_CLR BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN0r_CLR
#define PKTGEN_ERR_INJ_EN0r_SET BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN0r_SET
#define PKTGEN_ERR_INJ_EN0r_GET BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN0r_GET
#define PKTGEN_ERR_INJ_EN0r_ERRGEN_EN_PH2f_GET BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN0r_ERRGEN_EN_PH2f_GET
#define PKTGEN_ERR_INJ_EN0r_ERRGEN_EN_PH2f_SET BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN0r_ERRGEN_EN_PH2f_SET
#define PKTGEN_ERR_INJ_EN0r_ERRGEN_EN_PH1f_GET BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN0r_ERRGEN_EN_PH1f_GET
#define PKTGEN_ERR_INJ_EN0r_ERRGEN_EN_PH1f_SET BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN0r_ERRGEN_EN_PH1f_SET
#define PKTGEN_ERR_INJ_EN0r_ERRGEN_EN_PH0f_GET BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN0r_ERRGEN_EN_PH0f_GET
#define PKTGEN_ERR_INJ_EN0r_ERRGEN_EN_PH0f_SET BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN0r_ERRGEN_EN_PH0f_SET
#define READ_PKTGEN_ERR_INJ_EN0r BCMI_TSCF_GEN3_XGXS_READ_PKTGEN_ERR_INJ_EN0r
#define WRITE_PKTGEN_ERR_INJ_EN0r BCMI_TSCF_GEN3_XGXS_WRITE_PKTGEN_ERR_INJ_EN0r
#define MODIFY_PKTGEN_ERR_INJ_EN0r BCMI_TSCF_GEN3_XGXS_MODIFY_PKTGEN_ERR_INJ_EN0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PKTGEN_ERR_INJ_EN1
 * BLOCKS:   PKTGEN1
 * REGADDR:  0x9047
 * DESC:     Error injection enable control
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     ERRGEN_EN_PH3    PER stream control to enable 66-bit error gen maskNote: Setting this bit results in a one time application of the error mask
 *     CL91_40B_ERRGEN_EN_P0 PER lane control to enable 40-bit error gen maskNote: Setting this bit results in a one time application of the error mask
 *     CL91_40B_ERRGEN_EN_P1 PER lane control to enable 40-bit error gen maskNote: Setting this bit results in a one time application of the error mask
 *     CL91_40B_ERRGEN_EN_P2 PER lane control to enable 40-bit error gen maskNote: Setting this bit results in a one time application of the error mask
 *     CL91_40B_ERRGEN_EN_P3 PER lane control to enable 40-bit error gen maskNote: Setting this bit results in a one time application of the error mask
 *     CL91_80B_ERRGEN_EN_P0 PER lane control to enable 80-bit error gen maskNote: Setting this bit results in a one time application of the error mask
 *     CL91_80B_ERRGEN_EN_P1 PER lane control to enable 80-bit error gen maskNote: Setting this bit results in a one time application of the error mask
 *     CL91_80B_ERRGEN_EN_P2 PER lane control to enable 80-bit error gen maskNote: Setting this bit results in a one time application of the error mask
 *     CL91_80B_ERRGEN_EN_P3 PER lane control to enable 80-bit error gen maskNote: Setting this bit results in a one time application of the error mask
 */
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN1r (0x00109047 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN1r_SIZE 4

/*
 * This structure should be used to declare and program PKTGEN_ERR_INJ_EN1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN1r_s {
	uint32_t v[1];
	uint32_t pktgen_err_inj_en1[1];
	uint32_t _pktgen_err_inj_en1;
} BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN1r_t;

#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN1r_CLR(r) (r).pktgen_err_inj_en1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN1r_SET(r,d) (r).pktgen_err_inj_en1[0] = d
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN1r_GET(r) (r).pktgen_err_inj_en1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN1r_CL91_80B_ERRGEN_EN_P3f_GET(r) ((((r).pktgen_err_inj_en1[0]) >> 12) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN1r_CL91_80B_ERRGEN_EN_P3f_SET(r,f) (r).pktgen_err_inj_en1[0]=(((r).pktgen_err_inj_en1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN1r_CL91_80B_ERRGEN_EN_P2f_GET(r) ((((r).pktgen_err_inj_en1[0]) >> 11) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN1r_CL91_80B_ERRGEN_EN_P2f_SET(r,f) (r).pktgen_err_inj_en1[0]=(((r).pktgen_err_inj_en1[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN1r_CL91_80B_ERRGEN_EN_P1f_GET(r) ((((r).pktgen_err_inj_en1[0]) >> 10) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN1r_CL91_80B_ERRGEN_EN_P1f_SET(r,f) (r).pktgen_err_inj_en1[0]=(((r).pktgen_err_inj_en1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN1r_CL91_80B_ERRGEN_EN_P0f_GET(r) ((((r).pktgen_err_inj_en1[0]) >> 9) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN1r_CL91_80B_ERRGEN_EN_P0f_SET(r,f) (r).pktgen_err_inj_en1[0]=(((r).pktgen_err_inj_en1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN1r_CL91_40B_ERRGEN_EN_P3f_GET(r) ((((r).pktgen_err_inj_en1[0]) >> 8) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN1r_CL91_40B_ERRGEN_EN_P3f_SET(r,f) (r).pktgen_err_inj_en1[0]=(((r).pktgen_err_inj_en1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN1r_CL91_40B_ERRGEN_EN_P2f_GET(r) ((((r).pktgen_err_inj_en1[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN1r_CL91_40B_ERRGEN_EN_P2f_SET(r,f) (r).pktgen_err_inj_en1[0]=(((r).pktgen_err_inj_en1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN1r_CL91_40B_ERRGEN_EN_P1f_GET(r) ((((r).pktgen_err_inj_en1[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN1r_CL91_40B_ERRGEN_EN_P1f_SET(r,f) (r).pktgen_err_inj_en1[0]=(((r).pktgen_err_inj_en1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN1r_CL91_40B_ERRGEN_EN_P0f_GET(r) ((((r).pktgen_err_inj_en1[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN1r_CL91_40B_ERRGEN_EN_P0f_SET(r,f) (r).pktgen_err_inj_en1[0]=(((r).pktgen_err_inj_en1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN1r_ERRGEN_EN_PH3f_GET(r) (((r).pktgen_err_inj_en1[0]) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN1r_ERRGEN_EN_PH3f_SET(r,f) (r).pktgen_err_inj_en1[0]=(((r).pktgen_err_inj_en1[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access PKTGEN_ERR_INJ_EN1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PKTGEN_ERR_INJ_EN1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN1r,(_r._pktgen_err_inj_en1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PKTGEN_ERR_INJ_EN1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN1r,(_r._pktgen_err_inj_en1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PKTGEN_ERR_INJ_EN1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN1r,(_r._pktgen_err_inj_en1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PKTGEN_ERR_INJ_EN1r BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN1r
#define PKTGEN_ERR_INJ_EN1r_SIZE BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN1r_t PKTGEN_ERR_INJ_EN1r_t;
#define PKTGEN_ERR_INJ_EN1r_CLR BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN1r_CLR
#define PKTGEN_ERR_INJ_EN1r_SET BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN1r_SET
#define PKTGEN_ERR_INJ_EN1r_GET BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN1r_GET
#define PKTGEN_ERR_INJ_EN1r_CL91_80B_ERRGEN_EN_P3f_GET BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN1r_CL91_80B_ERRGEN_EN_P3f_GET
#define PKTGEN_ERR_INJ_EN1r_CL91_80B_ERRGEN_EN_P3f_SET BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN1r_CL91_80B_ERRGEN_EN_P3f_SET
#define PKTGEN_ERR_INJ_EN1r_CL91_80B_ERRGEN_EN_P2f_GET BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN1r_CL91_80B_ERRGEN_EN_P2f_GET
#define PKTGEN_ERR_INJ_EN1r_CL91_80B_ERRGEN_EN_P2f_SET BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN1r_CL91_80B_ERRGEN_EN_P2f_SET
#define PKTGEN_ERR_INJ_EN1r_CL91_80B_ERRGEN_EN_P1f_GET BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN1r_CL91_80B_ERRGEN_EN_P1f_GET
#define PKTGEN_ERR_INJ_EN1r_CL91_80B_ERRGEN_EN_P1f_SET BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN1r_CL91_80B_ERRGEN_EN_P1f_SET
#define PKTGEN_ERR_INJ_EN1r_CL91_80B_ERRGEN_EN_P0f_GET BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN1r_CL91_80B_ERRGEN_EN_P0f_GET
#define PKTGEN_ERR_INJ_EN1r_CL91_80B_ERRGEN_EN_P0f_SET BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN1r_CL91_80B_ERRGEN_EN_P0f_SET
#define PKTGEN_ERR_INJ_EN1r_CL91_40B_ERRGEN_EN_P3f_GET BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN1r_CL91_40B_ERRGEN_EN_P3f_GET
#define PKTGEN_ERR_INJ_EN1r_CL91_40B_ERRGEN_EN_P3f_SET BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN1r_CL91_40B_ERRGEN_EN_P3f_SET
#define PKTGEN_ERR_INJ_EN1r_CL91_40B_ERRGEN_EN_P2f_GET BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN1r_CL91_40B_ERRGEN_EN_P2f_GET
#define PKTGEN_ERR_INJ_EN1r_CL91_40B_ERRGEN_EN_P2f_SET BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN1r_CL91_40B_ERRGEN_EN_P2f_SET
#define PKTGEN_ERR_INJ_EN1r_CL91_40B_ERRGEN_EN_P1f_GET BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN1r_CL91_40B_ERRGEN_EN_P1f_GET
#define PKTGEN_ERR_INJ_EN1r_CL91_40B_ERRGEN_EN_P1f_SET BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN1r_CL91_40B_ERRGEN_EN_P1f_SET
#define PKTGEN_ERR_INJ_EN1r_CL91_40B_ERRGEN_EN_P0f_GET BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN1r_CL91_40B_ERRGEN_EN_P0f_GET
#define PKTGEN_ERR_INJ_EN1r_CL91_40B_ERRGEN_EN_P0f_SET BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN1r_CL91_40B_ERRGEN_EN_P0f_SET
#define PKTGEN_ERR_INJ_EN1r_ERRGEN_EN_PH3f_GET BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN1r_ERRGEN_EN_PH3f_GET
#define PKTGEN_ERR_INJ_EN1r_ERRGEN_EN_PH3f_SET BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN1r_ERRGEN_EN_PH3f_SET
#define READ_PKTGEN_ERR_INJ_EN1r BCMI_TSCF_GEN3_XGXS_READ_PKTGEN_ERR_INJ_EN1r
#define WRITE_PKTGEN_ERR_INJ_EN1r BCMI_TSCF_GEN3_XGXS_WRITE_PKTGEN_ERR_INJ_EN1r
#define MODIFY_PKTGEN_ERR_INJ_EN1r BCMI_TSCF_GEN3_XGXS_MODIFY_PKTGEN_ERR_INJ_EN1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PKTGEN_ERR_INJ_EN1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  CL82_AM_TMR
 * BLOCKS:   CL82_SHARED
 * REGADDR:  0x9123
 * DESC:     cl82 AM timer register
 * RESETVAL: 0x4000 (16384)
 * ACCESS:   R/W
 * FIELDS:
 *     AM_TIMER_INIT_VAL Alignment marker initial timer valueUsed by both the TX and RX pipelines
 */
#define BCMI_TSCF_GEN3_XGXS_CL82_AM_TMRr (0x00109123 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_CL82_AM_TMRr_SIZE 4

/*
 * This structure should be used to declare and program CL82_AM_TMR.
 */
typedef union BCMI_TSCF_GEN3_XGXS_CL82_AM_TMRr_s {
	uint32_t v[1];
	uint32_t cl82_am_tmr[1];
	uint32_t _cl82_am_tmr;
} BCMI_TSCF_GEN3_XGXS_CL82_AM_TMRr_t;

#define BCMI_TSCF_GEN3_XGXS_CL82_AM_TMRr_CLR(r) (r).cl82_am_tmr[0] = 0
#define BCMI_TSCF_GEN3_XGXS_CL82_AM_TMRr_SET(r,d) (r).cl82_am_tmr[0] = d
#define BCMI_TSCF_GEN3_XGXS_CL82_AM_TMRr_GET(r) (r).cl82_am_tmr[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_CL82_AM_TMRr_AM_TIMER_INIT_VALf_GET(r) (((r).cl82_am_tmr[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_CL82_AM_TMRr_AM_TIMER_INIT_VALf_SET(r,f) (r).cl82_am_tmr[0]=(((r).cl82_am_tmr[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access CL82_AM_TMR.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_CL82_AM_TMRr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL82_AM_TMRr,(_r._cl82_am_tmr))
#define BCMI_TSCF_GEN3_XGXS_WRITE_CL82_AM_TMRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL82_AM_TMRr,(_r._cl82_am_tmr)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_CL82_AM_TMRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL82_AM_TMRr,(_r._cl82_am_tmr))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL82_AM_TMRr BCMI_TSCF_GEN3_XGXS_CL82_AM_TMRr
#define CL82_AM_TMRr_SIZE BCMI_TSCF_GEN3_XGXS_CL82_AM_TMRr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_CL82_AM_TMRr_t CL82_AM_TMRr_t;
#define CL82_AM_TMRr_CLR BCMI_TSCF_GEN3_XGXS_CL82_AM_TMRr_CLR
#define CL82_AM_TMRr_SET BCMI_TSCF_GEN3_XGXS_CL82_AM_TMRr_SET
#define CL82_AM_TMRr_GET BCMI_TSCF_GEN3_XGXS_CL82_AM_TMRr_GET
#define CL82_AM_TMRr_AM_TIMER_INIT_VALf_GET BCMI_TSCF_GEN3_XGXS_CL82_AM_TMRr_AM_TIMER_INIT_VALf_GET
#define CL82_AM_TMRr_AM_TIMER_INIT_VALf_SET BCMI_TSCF_GEN3_XGXS_CL82_AM_TMRr_AM_TIMER_INIT_VALf_SET
#define READ_CL82_AM_TMRr BCMI_TSCF_GEN3_XGXS_READ_CL82_AM_TMRr
#define WRITE_CL82_AM_TMRr BCMI_TSCF_GEN3_XGXS_WRITE_CL82_AM_TMRr
#define MODIFY_CL82_AM_TMRr BCMI_TSCF_GEN3_XGXS_MODIFY_CL82_AM_TMRr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_CL82_AM_TMRr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  CL82_LN_0_AM_BYTE10
 * BLOCKS:   CL82_AM_REGS
 * REGADDR:  0x9130
 * DESC:     cl82 LANE 0 AM BYTES 1 AND 0 register
 * RESETVAL: 0x7690 (30352)
 * ACCESS:   R/W
 * FIELDS:
 *     LANE_0_AM_1_0    MLD Alignment Market Bytes 1 and 0 for LANE 0.  Used in MLD20G and MLD120G modes only
 */
#define BCMI_TSCF_GEN3_XGXS_CL82_LN_0_AM_BYTE10r (0x00109130 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_CL82_LN_0_AM_BYTE10r_SIZE 4

/*
 * This structure should be used to declare and program CL82_LN_0_AM_BYTE10.
 */
typedef union BCMI_TSCF_GEN3_XGXS_CL82_LN_0_AM_BYTE10r_s {
	uint32_t v[1];
	uint32_t cl82_ln_0_am_byte10[1];
	uint32_t _cl82_ln_0_am_byte10;
} BCMI_TSCF_GEN3_XGXS_CL82_LN_0_AM_BYTE10r_t;

#define BCMI_TSCF_GEN3_XGXS_CL82_LN_0_AM_BYTE10r_CLR(r) (r).cl82_ln_0_am_byte10[0] = 0
#define BCMI_TSCF_GEN3_XGXS_CL82_LN_0_AM_BYTE10r_SET(r,d) (r).cl82_ln_0_am_byte10[0] = d
#define BCMI_TSCF_GEN3_XGXS_CL82_LN_0_AM_BYTE10r_GET(r) (r).cl82_ln_0_am_byte10[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_CL82_LN_0_AM_BYTE10r_LANE_0_AM_1_0f_GET(r) (((r).cl82_ln_0_am_byte10[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_CL82_LN_0_AM_BYTE10r_LANE_0_AM_1_0f_SET(r,f) (r).cl82_ln_0_am_byte10[0]=(((r).cl82_ln_0_am_byte10[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access CL82_LN_0_AM_BYTE10.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_CL82_LN_0_AM_BYTE10r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL82_LN_0_AM_BYTE10r,(_r._cl82_ln_0_am_byte10))
#define BCMI_TSCF_GEN3_XGXS_WRITE_CL82_LN_0_AM_BYTE10r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL82_LN_0_AM_BYTE10r,(_r._cl82_ln_0_am_byte10)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_CL82_LN_0_AM_BYTE10r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL82_LN_0_AM_BYTE10r,(_r._cl82_ln_0_am_byte10))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL82_LN_0_AM_BYTE10r BCMI_TSCF_GEN3_XGXS_CL82_LN_0_AM_BYTE10r
#define CL82_LN_0_AM_BYTE10r_SIZE BCMI_TSCF_GEN3_XGXS_CL82_LN_0_AM_BYTE10r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_CL82_LN_0_AM_BYTE10r_t CL82_LN_0_AM_BYTE10r_t;
#define CL82_LN_0_AM_BYTE10r_CLR BCMI_TSCF_GEN3_XGXS_CL82_LN_0_AM_BYTE10r_CLR
#define CL82_LN_0_AM_BYTE10r_SET BCMI_TSCF_GEN3_XGXS_CL82_LN_0_AM_BYTE10r_SET
#define CL82_LN_0_AM_BYTE10r_GET BCMI_TSCF_GEN3_XGXS_CL82_LN_0_AM_BYTE10r_GET
#define CL82_LN_0_AM_BYTE10r_LANE_0_AM_1_0f_GET BCMI_TSCF_GEN3_XGXS_CL82_LN_0_AM_BYTE10r_LANE_0_AM_1_0f_GET
#define CL82_LN_0_AM_BYTE10r_LANE_0_AM_1_0f_SET BCMI_TSCF_GEN3_XGXS_CL82_LN_0_AM_BYTE10r_LANE_0_AM_1_0f_SET
#define READ_CL82_LN_0_AM_BYTE10r BCMI_TSCF_GEN3_XGXS_READ_CL82_LN_0_AM_BYTE10r
#define WRITE_CL82_LN_0_AM_BYTE10r BCMI_TSCF_GEN3_XGXS_WRITE_CL82_LN_0_AM_BYTE10r
#define MODIFY_CL82_LN_0_AM_BYTE10r BCMI_TSCF_GEN3_XGXS_MODIFY_CL82_LN_0_AM_BYTE10r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_CL82_LN_0_AM_BYTE10r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  CL82_LN_1_AM_BYTE10
 * BLOCKS:   CL82_AM_REGS
 * REGADDR:  0x9131
 * DESC:     cl82 LANE 1 AM BYTES 1 AND 0 register
 * RESETVAL: 0xc4f0 (50416)
 * ACCESS:   R/W
 * FIELDS:
 *     LANE_1_AM_1_0    MLD Alignment Market Bytes 1 and 0 for LANE 1.  Used in MLD20G and MLD120G modes only
 */
#define BCMI_TSCF_GEN3_XGXS_CL82_LN_1_AM_BYTE10r (0x00109131 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_CL82_LN_1_AM_BYTE10r_SIZE 4

/*
 * This structure should be used to declare and program CL82_LN_1_AM_BYTE10.
 */
typedef union BCMI_TSCF_GEN3_XGXS_CL82_LN_1_AM_BYTE10r_s {
	uint32_t v[1];
	uint32_t cl82_ln_1_am_byte10[1];
	uint32_t _cl82_ln_1_am_byte10;
} BCMI_TSCF_GEN3_XGXS_CL82_LN_1_AM_BYTE10r_t;

#define BCMI_TSCF_GEN3_XGXS_CL82_LN_1_AM_BYTE10r_CLR(r) (r).cl82_ln_1_am_byte10[0] = 0
#define BCMI_TSCF_GEN3_XGXS_CL82_LN_1_AM_BYTE10r_SET(r,d) (r).cl82_ln_1_am_byte10[0] = d
#define BCMI_TSCF_GEN3_XGXS_CL82_LN_1_AM_BYTE10r_GET(r) (r).cl82_ln_1_am_byte10[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_CL82_LN_1_AM_BYTE10r_LANE_1_AM_1_0f_GET(r) (((r).cl82_ln_1_am_byte10[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_CL82_LN_1_AM_BYTE10r_LANE_1_AM_1_0f_SET(r,f) (r).cl82_ln_1_am_byte10[0]=(((r).cl82_ln_1_am_byte10[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access CL82_LN_1_AM_BYTE10.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_CL82_LN_1_AM_BYTE10r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL82_LN_1_AM_BYTE10r,(_r._cl82_ln_1_am_byte10))
#define BCMI_TSCF_GEN3_XGXS_WRITE_CL82_LN_1_AM_BYTE10r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL82_LN_1_AM_BYTE10r,(_r._cl82_ln_1_am_byte10)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_CL82_LN_1_AM_BYTE10r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL82_LN_1_AM_BYTE10r,(_r._cl82_ln_1_am_byte10))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL82_LN_1_AM_BYTE10r BCMI_TSCF_GEN3_XGXS_CL82_LN_1_AM_BYTE10r
#define CL82_LN_1_AM_BYTE10r_SIZE BCMI_TSCF_GEN3_XGXS_CL82_LN_1_AM_BYTE10r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_CL82_LN_1_AM_BYTE10r_t CL82_LN_1_AM_BYTE10r_t;
#define CL82_LN_1_AM_BYTE10r_CLR BCMI_TSCF_GEN3_XGXS_CL82_LN_1_AM_BYTE10r_CLR
#define CL82_LN_1_AM_BYTE10r_SET BCMI_TSCF_GEN3_XGXS_CL82_LN_1_AM_BYTE10r_SET
#define CL82_LN_1_AM_BYTE10r_GET BCMI_TSCF_GEN3_XGXS_CL82_LN_1_AM_BYTE10r_GET
#define CL82_LN_1_AM_BYTE10r_LANE_1_AM_1_0f_GET BCMI_TSCF_GEN3_XGXS_CL82_LN_1_AM_BYTE10r_LANE_1_AM_1_0f_GET
#define CL82_LN_1_AM_BYTE10r_LANE_1_AM_1_0f_SET BCMI_TSCF_GEN3_XGXS_CL82_LN_1_AM_BYTE10r_LANE_1_AM_1_0f_SET
#define READ_CL82_LN_1_AM_BYTE10r BCMI_TSCF_GEN3_XGXS_READ_CL82_LN_1_AM_BYTE10r
#define WRITE_CL82_LN_1_AM_BYTE10r BCMI_TSCF_GEN3_XGXS_WRITE_CL82_LN_1_AM_BYTE10r
#define MODIFY_CL82_LN_1_AM_BYTE10r BCMI_TSCF_GEN3_XGXS_MODIFY_CL82_LN_1_AM_BYTE10r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_CL82_LN_1_AM_BYTE10r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  CL82_LANES_1_0_AM_BYTE2
 * BLOCKS:   CL82_AM_REGS
 * REGADDR:  0x9132
 * DESC:     cl82 LANES 1 and 0 AM BYTE 2 register
 * RESETVAL: 0xe647 (58951)
 * ACCESS:   R/W
 * FIELDS:
 *     LANE_0_AM_2      MLD Alignment Market Byte 2 for LANE 0.  Used in MLD20G and MLD120G modes only
 *     LANE_1_AM_2      MLD Alignment Market Byte 2 for LANE 1.  Used in MLD20G and MLD120G modes only
 */
#define BCMI_TSCF_GEN3_XGXS_CL82_LANES_1_0_AM_BYTE2r (0x00109132 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_CL82_LANES_1_0_AM_BYTE2r_SIZE 4

/*
 * This structure should be used to declare and program CL82_LANES_1_0_AM_BYTE2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_CL82_LANES_1_0_AM_BYTE2r_s {
	uint32_t v[1];
	uint32_t cl82_lanes_1_0_am_byte2[1];
	uint32_t _cl82_lanes_1_0_am_byte2;
} BCMI_TSCF_GEN3_XGXS_CL82_LANES_1_0_AM_BYTE2r_t;

#define BCMI_TSCF_GEN3_XGXS_CL82_LANES_1_0_AM_BYTE2r_CLR(r) (r).cl82_lanes_1_0_am_byte2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_CL82_LANES_1_0_AM_BYTE2r_SET(r,d) (r).cl82_lanes_1_0_am_byte2[0] = d
#define BCMI_TSCF_GEN3_XGXS_CL82_LANES_1_0_AM_BYTE2r_GET(r) (r).cl82_lanes_1_0_am_byte2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_CL82_LANES_1_0_AM_BYTE2r_LANE_1_AM_2f_GET(r) ((((r).cl82_lanes_1_0_am_byte2[0]) >> 8) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_CL82_LANES_1_0_AM_BYTE2r_LANE_1_AM_2f_SET(r,f) (r).cl82_lanes_1_0_am_byte2[0]=(((r).cl82_lanes_1_0_am_byte2[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_CL82_LANES_1_0_AM_BYTE2r_LANE_0_AM_2f_GET(r) (((r).cl82_lanes_1_0_am_byte2[0]) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_CL82_LANES_1_0_AM_BYTE2r_LANE_0_AM_2f_SET(r,f) (r).cl82_lanes_1_0_am_byte2[0]=(((r).cl82_lanes_1_0_am_byte2[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access CL82_LANES_1_0_AM_BYTE2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_CL82_LANES_1_0_AM_BYTE2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL82_LANES_1_0_AM_BYTE2r,(_r._cl82_lanes_1_0_am_byte2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_CL82_LANES_1_0_AM_BYTE2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL82_LANES_1_0_AM_BYTE2r,(_r._cl82_lanes_1_0_am_byte2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_CL82_LANES_1_0_AM_BYTE2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL82_LANES_1_0_AM_BYTE2r,(_r._cl82_lanes_1_0_am_byte2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL82_LANES_1_0_AM_BYTE2r BCMI_TSCF_GEN3_XGXS_CL82_LANES_1_0_AM_BYTE2r
#define CL82_LANES_1_0_AM_BYTE2r_SIZE BCMI_TSCF_GEN3_XGXS_CL82_LANES_1_0_AM_BYTE2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_CL82_LANES_1_0_AM_BYTE2r_t CL82_LANES_1_0_AM_BYTE2r_t;
#define CL82_LANES_1_0_AM_BYTE2r_CLR BCMI_TSCF_GEN3_XGXS_CL82_LANES_1_0_AM_BYTE2r_CLR
#define CL82_LANES_1_0_AM_BYTE2r_SET BCMI_TSCF_GEN3_XGXS_CL82_LANES_1_0_AM_BYTE2r_SET
#define CL82_LANES_1_0_AM_BYTE2r_GET BCMI_TSCF_GEN3_XGXS_CL82_LANES_1_0_AM_BYTE2r_GET
#define CL82_LANES_1_0_AM_BYTE2r_LANE_1_AM_2f_GET BCMI_TSCF_GEN3_XGXS_CL82_LANES_1_0_AM_BYTE2r_LANE_1_AM_2f_GET
#define CL82_LANES_1_0_AM_BYTE2r_LANE_1_AM_2f_SET BCMI_TSCF_GEN3_XGXS_CL82_LANES_1_0_AM_BYTE2r_LANE_1_AM_2f_SET
#define CL82_LANES_1_0_AM_BYTE2r_LANE_0_AM_2f_GET BCMI_TSCF_GEN3_XGXS_CL82_LANES_1_0_AM_BYTE2r_LANE_0_AM_2f_GET
#define CL82_LANES_1_0_AM_BYTE2r_LANE_0_AM_2f_SET BCMI_TSCF_GEN3_XGXS_CL82_LANES_1_0_AM_BYTE2r_LANE_0_AM_2f_SET
#define READ_CL82_LANES_1_0_AM_BYTE2r BCMI_TSCF_GEN3_XGXS_READ_CL82_LANES_1_0_AM_BYTE2r
#define WRITE_CL82_LANES_1_0_AM_BYTE2r BCMI_TSCF_GEN3_XGXS_WRITE_CL82_LANES_1_0_AM_BYTE2r
#define MODIFY_CL82_LANES_1_0_AM_BYTE2r BCMI_TSCF_GEN3_XGXS_MODIFY_CL82_LANES_1_0_AM_BYTE2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_CL82_LANES_1_0_AM_BYTE2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TX_X1_TX_LN_SWP
 * BLOCKS:   TX_X1_CONTROL0
 * REGADDR:  0x9200
 * DESC:     TX lane swap register
 * RESETVAL: 0xe4 (228)
 * ACCESS:   R/W
 * FIELDS:
 *     LOGICAL0_TO_PHY_SEL This is a LOGICAL to PHYSICAL mapping control.logical0_to_phy_sel indicates for LOGICAL lane 0 which lane to PHYSICAL send the data to
 *     LOGICAL1_TO_PHY_SEL This is a LOGICAL to PHYSICAL mapping control.logical1_to_phy_sel indicates for LOGICAL lane 1 which lane to PHYSICAL send the data to
 *     LOGICAL2_TO_PHY_SEL This is a LOGICAL to PHYSICAL mapping control.logical2_to_phy_sel indicates for LOGICAL lane 2 which lane to PHYSICAL send the data to
 *     LOGICAL3_TO_PHY_SEL This is a LOGICAL to PHYSICAL mapping control.logical3_to_phy_sel indicates for LOGICAL lane 3 which lane to PHYSICAL send the data to
 */
#define BCMI_TSCF_GEN3_XGXS_TX_X1_TX_LN_SWPr (0x00109200 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TX_X1_TX_LN_SWPr_SIZE 4

/*
 * This structure should be used to declare and program TX_X1_TX_LN_SWP.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TX_X1_TX_LN_SWPr_s {
	uint32_t v[1];
	uint32_t tx_x1_tx_ln_swp[1];
	uint32_t _tx_x1_tx_ln_swp;
} BCMI_TSCF_GEN3_XGXS_TX_X1_TX_LN_SWPr_t;

#define BCMI_TSCF_GEN3_XGXS_TX_X1_TX_LN_SWPr_CLR(r) (r).tx_x1_tx_ln_swp[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TX_X1_TX_LN_SWPr_SET(r,d) (r).tx_x1_tx_ln_swp[0] = d
#define BCMI_TSCF_GEN3_XGXS_TX_X1_TX_LN_SWPr_GET(r) (r).tx_x1_tx_ln_swp[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_X1_TX_LN_SWPr_LOGICAL3_TO_PHY_SELf_GET(r) ((((r).tx_x1_tx_ln_swp[0]) >> 6) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_TX_X1_TX_LN_SWPr_LOGICAL3_TO_PHY_SELf_SET(r,f) (r).tx_x1_tx_ln_swp[0]=(((r).tx_x1_tx_ln_swp[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6)) | (3 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_TX_X1_TX_LN_SWPr_LOGICAL2_TO_PHY_SELf_GET(r) ((((r).tx_x1_tx_ln_swp[0]) >> 4) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_TX_X1_TX_LN_SWPr_LOGICAL2_TO_PHY_SELf_SET(r,f) (r).tx_x1_tx_ln_swp[0]=(((r).tx_x1_tx_ln_swp[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_TX_X1_TX_LN_SWPr_LOGICAL1_TO_PHY_SELf_GET(r) ((((r).tx_x1_tx_ln_swp[0]) >> 2) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_TX_X1_TX_LN_SWPr_LOGICAL1_TO_PHY_SELf_SET(r,f) (r).tx_x1_tx_ln_swp[0]=(((r).tx_x1_tx_ln_swp[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2)) | (3 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_TX_X1_TX_LN_SWPr_LOGICAL0_TO_PHY_SELf_GET(r) (((r).tx_x1_tx_ln_swp[0]) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_TX_X1_TX_LN_SWPr_LOGICAL0_TO_PHY_SELf_SET(r,f) (r).tx_x1_tx_ln_swp[0]=(((r).tx_x1_tx_ln_swp[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access TX_X1_TX_LN_SWP.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TX_X1_TX_LN_SWPr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_X1_TX_LN_SWPr,(_r._tx_x1_tx_ln_swp))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TX_X1_TX_LN_SWPr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X1_TX_LN_SWPr,(_r._tx_x1_tx_ln_swp)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TX_X1_TX_LN_SWPr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X1_TX_LN_SWPr,(_r._tx_x1_tx_ln_swp))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_X1_TX_LN_SWPr BCMI_TSCF_GEN3_XGXS_TX_X1_TX_LN_SWPr
#define TX_X1_TX_LN_SWPr_SIZE BCMI_TSCF_GEN3_XGXS_TX_X1_TX_LN_SWPr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TX_X1_TX_LN_SWPr_t TX_X1_TX_LN_SWPr_t;
#define TX_X1_TX_LN_SWPr_CLR BCMI_TSCF_GEN3_XGXS_TX_X1_TX_LN_SWPr_CLR
#define TX_X1_TX_LN_SWPr_SET BCMI_TSCF_GEN3_XGXS_TX_X1_TX_LN_SWPr_SET
#define TX_X1_TX_LN_SWPr_GET BCMI_TSCF_GEN3_XGXS_TX_X1_TX_LN_SWPr_GET
#define TX_X1_TX_LN_SWPr_LOGICAL3_TO_PHY_SELf_GET BCMI_TSCF_GEN3_XGXS_TX_X1_TX_LN_SWPr_LOGICAL3_TO_PHY_SELf_GET
#define TX_X1_TX_LN_SWPr_LOGICAL3_TO_PHY_SELf_SET BCMI_TSCF_GEN3_XGXS_TX_X1_TX_LN_SWPr_LOGICAL3_TO_PHY_SELf_SET
#define TX_X1_TX_LN_SWPr_LOGICAL2_TO_PHY_SELf_GET BCMI_TSCF_GEN3_XGXS_TX_X1_TX_LN_SWPr_LOGICAL2_TO_PHY_SELf_GET
#define TX_X1_TX_LN_SWPr_LOGICAL2_TO_PHY_SELf_SET BCMI_TSCF_GEN3_XGXS_TX_X1_TX_LN_SWPr_LOGICAL2_TO_PHY_SELf_SET
#define TX_X1_TX_LN_SWPr_LOGICAL1_TO_PHY_SELf_GET BCMI_TSCF_GEN3_XGXS_TX_X1_TX_LN_SWPr_LOGICAL1_TO_PHY_SELf_GET
#define TX_X1_TX_LN_SWPr_LOGICAL1_TO_PHY_SELf_SET BCMI_TSCF_GEN3_XGXS_TX_X1_TX_LN_SWPr_LOGICAL1_TO_PHY_SELf_SET
#define TX_X1_TX_LN_SWPr_LOGICAL0_TO_PHY_SELf_GET BCMI_TSCF_GEN3_XGXS_TX_X1_TX_LN_SWPr_LOGICAL0_TO_PHY_SELf_GET
#define TX_X1_TX_LN_SWPr_LOGICAL0_TO_PHY_SELf_SET BCMI_TSCF_GEN3_XGXS_TX_X1_TX_LN_SWPr_LOGICAL0_TO_PHY_SELf_SET
#define READ_TX_X1_TX_LN_SWPr BCMI_TSCF_GEN3_XGXS_READ_TX_X1_TX_LN_SWPr
#define WRITE_TX_X1_TX_LN_SWPr BCMI_TSCF_GEN3_XGXS_WRITE_TX_X1_TX_LN_SWPr
#define MODIFY_TX_X1_TX_LN_SWPr BCMI_TSCF_GEN3_XGXS_MODIFY_TX_X1_TX_LN_SWPr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TX_X1_TX_LN_SWPr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TX_X1_TS_DBG_WORD2_VALUE
 * BLOCKS:   TX_X1_CONTROL0
 * REGADDR:  0x9201
 * DESC:     TS Debug High register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TS_DBG_VAL_WORD2 Bits 47:32 of the timestamp value used for UDP checksum and Correction Field updates in One-step timestamping packets.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD2_VALUEr (0x00109201 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD2_VALUEr_SIZE 4

/*
 * This structure should be used to declare and program TX_X1_TS_DBG_WORD2_VALUE.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD2_VALUEr_s {
	uint32_t v[1];
	uint32_t tx_x1_ts_dbg_word2_value[1];
	uint32_t _tx_x1_ts_dbg_word2_value;
} BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD2_VALUEr_t;

#define BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD2_VALUEr_CLR(r) (r).tx_x1_ts_dbg_word2_value[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD2_VALUEr_SET(r,d) (r).tx_x1_ts_dbg_word2_value[0] = d
#define BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD2_VALUEr_GET(r) (r).tx_x1_ts_dbg_word2_value[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD2_VALUEr_TS_DBG_VAL_WORD2f_GET(r) (((r).tx_x1_ts_dbg_word2_value[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD2_VALUEr_TS_DBG_VAL_WORD2f_SET(r,f) (r).tx_x1_ts_dbg_word2_value[0]=(((r).tx_x1_ts_dbg_word2_value[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access TX_X1_TS_DBG_WORD2_VALUE.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TX_X1_TS_DBG_WORD2_VALUEr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD2_VALUEr,(_r._tx_x1_ts_dbg_word2_value))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TX_X1_TS_DBG_WORD2_VALUEr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD2_VALUEr,(_r._tx_x1_ts_dbg_word2_value)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TX_X1_TS_DBG_WORD2_VALUEr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD2_VALUEr,(_r._tx_x1_ts_dbg_word2_value))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_X1_TS_DBG_WORD2_VALUEr BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD2_VALUEr
#define TX_X1_TS_DBG_WORD2_VALUEr_SIZE BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD2_VALUEr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD2_VALUEr_t TX_X1_TS_DBG_WORD2_VALUEr_t;
#define TX_X1_TS_DBG_WORD2_VALUEr_CLR BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD2_VALUEr_CLR
#define TX_X1_TS_DBG_WORD2_VALUEr_SET BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD2_VALUEr_SET
#define TX_X1_TS_DBG_WORD2_VALUEr_GET BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD2_VALUEr_GET
#define TX_X1_TS_DBG_WORD2_VALUEr_TS_DBG_VAL_WORD2f_GET BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD2_VALUEr_TS_DBG_VAL_WORD2f_GET
#define TX_X1_TS_DBG_WORD2_VALUEr_TS_DBG_VAL_WORD2f_SET BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD2_VALUEr_TS_DBG_VAL_WORD2f_SET
#define READ_TX_X1_TS_DBG_WORD2_VALUEr BCMI_TSCF_GEN3_XGXS_READ_TX_X1_TS_DBG_WORD2_VALUEr
#define WRITE_TX_X1_TS_DBG_WORD2_VALUEr BCMI_TSCF_GEN3_XGXS_WRITE_TX_X1_TS_DBG_WORD2_VALUEr
#define MODIFY_TX_X1_TS_DBG_WORD2_VALUEr BCMI_TSCF_GEN3_XGXS_MODIFY_TX_X1_TS_DBG_WORD2_VALUEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD2_VALUEr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TX_X1_TS_DBG_WORD1_VALUE
 * BLOCKS:   TX_X1_CONTROL0
 * REGADDR:  0x9202
 * DESC:     TS Debug Int register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TS_DBG_VAL_WORD1 Bits 31:16 of the timestamp value used for UDP checksum and Correction Field updates in One-step timestamping packets.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD1_VALUEr (0x00109202 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD1_VALUEr_SIZE 4

/*
 * This structure should be used to declare and program TX_X1_TS_DBG_WORD1_VALUE.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD1_VALUEr_s {
	uint32_t v[1];
	uint32_t tx_x1_ts_dbg_word1_value[1];
	uint32_t _tx_x1_ts_dbg_word1_value;
} BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD1_VALUEr_t;

#define BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD1_VALUEr_CLR(r) (r).tx_x1_ts_dbg_word1_value[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD1_VALUEr_SET(r,d) (r).tx_x1_ts_dbg_word1_value[0] = d
#define BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD1_VALUEr_GET(r) (r).tx_x1_ts_dbg_word1_value[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD1_VALUEr_TS_DBG_VAL_WORD1f_GET(r) (((r).tx_x1_ts_dbg_word1_value[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD1_VALUEr_TS_DBG_VAL_WORD1f_SET(r,f) (r).tx_x1_ts_dbg_word1_value[0]=(((r).tx_x1_ts_dbg_word1_value[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access TX_X1_TS_DBG_WORD1_VALUE.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TX_X1_TS_DBG_WORD1_VALUEr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD1_VALUEr,(_r._tx_x1_ts_dbg_word1_value))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TX_X1_TS_DBG_WORD1_VALUEr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD1_VALUEr,(_r._tx_x1_ts_dbg_word1_value)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TX_X1_TS_DBG_WORD1_VALUEr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD1_VALUEr,(_r._tx_x1_ts_dbg_word1_value))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_X1_TS_DBG_WORD1_VALUEr BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD1_VALUEr
#define TX_X1_TS_DBG_WORD1_VALUEr_SIZE BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD1_VALUEr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD1_VALUEr_t TX_X1_TS_DBG_WORD1_VALUEr_t;
#define TX_X1_TS_DBG_WORD1_VALUEr_CLR BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD1_VALUEr_CLR
#define TX_X1_TS_DBG_WORD1_VALUEr_SET BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD1_VALUEr_SET
#define TX_X1_TS_DBG_WORD1_VALUEr_GET BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD1_VALUEr_GET
#define TX_X1_TS_DBG_WORD1_VALUEr_TS_DBG_VAL_WORD1f_GET BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD1_VALUEr_TS_DBG_VAL_WORD1f_GET
#define TX_X1_TS_DBG_WORD1_VALUEr_TS_DBG_VAL_WORD1f_SET BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD1_VALUEr_TS_DBG_VAL_WORD1f_SET
#define READ_TX_X1_TS_DBG_WORD1_VALUEr BCMI_TSCF_GEN3_XGXS_READ_TX_X1_TS_DBG_WORD1_VALUEr
#define WRITE_TX_X1_TS_DBG_WORD1_VALUEr BCMI_TSCF_GEN3_XGXS_WRITE_TX_X1_TS_DBG_WORD1_VALUEr
#define MODIFY_TX_X1_TS_DBG_WORD1_VALUEr BCMI_TSCF_GEN3_XGXS_MODIFY_TX_X1_TS_DBG_WORD1_VALUEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD1_VALUEr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TX_X1_TS_DBG_WORD0_VALUE
 * BLOCKS:   TX_X1_CONTROL0
 * REGADDR:  0x9203
 * DESC:     TS Debug Low register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TS_DBG_VAL_WORD0 Bits 15:0 of the timestamp value used for UDP checksum and Correction Field updates in One-step timestamping packets.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD0_VALUEr (0x00109203 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD0_VALUEr_SIZE 4

/*
 * This structure should be used to declare and program TX_X1_TS_DBG_WORD0_VALUE.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD0_VALUEr_s {
	uint32_t v[1];
	uint32_t tx_x1_ts_dbg_word0_value[1];
	uint32_t _tx_x1_ts_dbg_word0_value;
} BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD0_VALUEr_t;

#define BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD0_VALUEr_CLR(r) (r).tx_x1_ts_dbg_word0_value[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD0_VALUEr_SET(r,d) (r).tx_x1_ts_dbg_word0_value[0] = d
#define BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD0_VALUEr_GET(r) (r).tx_x1_ts_dbg_word0_value[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD0_VALUEr_TS_DBG_VAL_WORD0f_GET(r) (((r).tx_x1_ts_dbg_word0_value[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD0_VALUEr_TS_DBG_VAL_WORD0f_SET(r,f) (r).tx_x1_ts_dbg_word0_value[0]=(((r).tx_x1_ts_dbg_word0_value[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access TX_X1_TS_DBG_WORD0_VALUE.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TX_X1_TS_DBG_WORD0_VALUEr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD0_VALUEr,(_r._tx_x1_ts_dbg_word0_value))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TX_X1_TS_DBG_WORD0_VALUEr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD0_VALUEr,(_r._tx_x1_ts_dbg_word0_value)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TX_X1_TS_DBG_WORD0_VALUEr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD0_VALUEr,(_r._tx_x1_ts_dbg_word0_value))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_X1_TS_DBG_WORD0_VALUEr BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD0_VALUEr
#define TX_X1_TS_DBG_WORD0_VALUEr_SIZE BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD0_VALUEr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD0_VALUEr_t TX_X1_TS_DBG_WORD0_VALUEr_t;
#define TX_X1_TS_DBG_WORD0_VALUEr_CLR BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD0_VALUEr_CLR
#define TX_X1_TS_DBG_WORD0_VALUEr_SET BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD0_VALUEr_SET
#define TX_X1_TS_DBG_WORD0_VALUEr_GET BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD0_VALUEr_GET
#define TX_X1_TS_DBG_WORD0_VALUEr_TS_DBG_VAL_WORD0f_GET BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD0_VALUEr_TS_DBG_VAL_WORD0f_GET
#define TX_X1_TS_DBG_WORD0_VALUEr_TS_DBG_VAL_WORD0f_SET BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD0_VALUEr_TS_DBG_VAL_WORD0f_SET
#define READ_TX_X1_TS_DBG_WORD0_VALUEr BCMI_TSCF_GEN3_XGXS_READ_TX_X1_TS_DBG_WORD0_VALUEr
#define WRITE_TX_X1_TS_DBG_WORD0_VALUEr BCMI_TSCF_GEN3_XGXS_WRITE_TX_X1_TS_DBG_WORD0_VALUEr
#define MODIFY_TX_X1_TS_DBG_WORD0_VALUEr BCMI_TSCF_GEN3_XGXS_MODIFY_TX_X1_TS_DBG_WORD0_VALUEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TX_X1_TS_DBG_WORD0_VALUEr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X1_DEC_CTL1
 * BLOCKS:   RX_X1_CONTROL0
 * REGADDR:  0x9221
 * DESC:     decode_control_1 register
 * RESETVAL: 0x6140 (24896)
 * ACCESS:   R/W
 * FIELDS:
 *     CL49_BER_LIMIT   Number of Error Blocks before HI_BER is determined for CL49
 *     CL82_BER_LIMIT   Number of Error Blocks before HI_BER is determined for CL82
 *     SET_BER_WINDOW_512 Sets the BER measurement window to 512 blocks instead of the IEEE definition.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X1_DEC_CTL1r (0x00109221 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X1_DEC_CTL1r_SIZE 4

/*
 * This structure should be used to declare and program RX_X1_DEC_CTL1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X1_DEC_CTL1r_s {
	uint32_t v[1];
	uint32_t rx_x1_dec_ctl1[1];
	uint32_t _rx_x1_dec_ctl1;
} BCMI_TSCF_GEN3_XGXS_RX_X1_DEC_CTL1r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X1_DEC_CTL1r_CLR(r) (r).rx_x1_dec_ctl1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X1_DEC_CTL1r_SET(r,d) (r).rx_x1_dec_ctl1[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X1_DEC_CTL1r_GET(r) (r).rx_x1_dec_ctl1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X1_DEC_CTL1r_SET_BER_WINDOW_512f_GET(r) ((((r).rx_x1_dec_ctl1[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_DEC_CTL1r_SET_BER_WINDOW_512f_SET(r,f) (r).rx_x1_dec_ctl1[0]=(((r).rx_x1_dec_ctl1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_DEC_CTL1r_CL82_BER_LIMITf_GET(r) ((((r).rx_x1_dec_ctl1[0]) >> 8) & 0x7f)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_DEC_CTL1r_CL82_BER_LIMITf_SET(r,f) (r).rx_x1_dec_ctl1[0]=(((r).rx_x1_dec_ctl1[0] & ~((uint32_t)0x7f << 8)) | ((((uint32_t)f) & 0x7f) << 8)) | (127 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_DEC_CTL1r_CL49_BER_LIMITf_GET(r) ((((r).rx_x1_dec_ctl1[0]) >> 2) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_DEC_CTL1r_CL49_BER_LIMITf_SET(r,f) (r).rx_x1_dec_ctl1[0]=(((r).rx_x1_dec_ctl1[0] & ~((uint32_t)0x3f << 2)) | ((((uint32_t)f) & 0x3f) << 2)) | (63 << (16 + 2))

/*
 * These macros can be used to access RX_X1_DEC_CTL1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X1_DEC_CTL1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_DEC_CTL1r,(_r._rx_x1_dec_ctl1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X1_DEC_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_DEC_CTL1r,(_r._rx_x1_dec_ctl1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X1_DEC_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_DEC_CTL1r,(_r._rx_x1_dec_ctl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X1_DEC_CTL1r BCMI_TSCF_GEN3_XGXS_RX_X1_DEC_CTL1r
#define RX_X1_DEC_CTL1r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X1_DEC_CTL1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X1_DEC_CTL1r_t RX_X1_DEC_CTL1r_t;
#define RX_X1_DEC_CTL1r_CLR BCMI_TSCF_GEN3_XGXS_RX_X1_DEC_CTL1r_CLR
#define RX_X1_DEC_CTL1r_SET BCMI_TSCF_GEN3_XGXS_RX_X1_DEC_CTL1r_SET
#define RX_X1_DEC_CTL1r_GET BCMI_TSCF_GEN3_XGXS_RX_X1_DEC_CTL1r_GET
#define RX_X1_DEC_CTL1r_SET_BER_WINDOW_512f_GET BCMI_TSCF_GEN3_XGXS_RX_X1_DEC_CTL1r_SET_BER_WINDOW_512f_GET
#define RX_X1_DEC_CTL1r_SET_BER_WINDOW_512f_SET BCMI_TSCF_GEN3_XGXS_RX_X1_DEC_CTL1r_SET_BER_WINDOW_512f_SET
#define RX_X1_DEC_CTL1r_CL82_BER_LIMITf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_DEC_CTL1r_CL82_BER_LIMITf_GET
#define RX_X1_DEC_CTL1r_CL82_BER_LIMITf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_DEC_CTL1r_CL82_BER_LIMITf_SET
#define RX_X1_DEC_CTL1r_CL49_BER_LIMITf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_DEC_CTL1r_CL49_BER_LIMITf_GET
#define RX_X1_DEC_CTL1r_CL49_BER_LIMITf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_DEC_CTL1r_CL49_BER_LIMITf_SET
#define READ_RX_X1_DEC_CTL1r BCMI_TSCF_GEN3_XGXS_READ_RX_X1_DEC_CTL1r
#define WRITE_RX_X1_DEC_CTL1r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X1_DEC_CTL1r
#define MODIFY_RX_X1_DEC_CTL1r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X1_DEC_CTL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X1_DEC_CTL1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X1_DESKEW_WINS0
 * BLOCKS:   RX_X1_CONTROL0
 * REGADDR:  0x9222
 * DESC:     deskew_windows_0 register
 * RESETVAL: 0x4a6 (1190)
 * ACCESS:   R/W
 * FIELDS:
 *     CL82_DSWIN       CL82 Block based deskew window size for 20g and 40g configurationsdeskew_window = (cl82_dswin+1)blocks
 *     CL82_DSWIN_100G  CL82 Block based deskew window size for 100g and higher configurationsdeskew_window = (cl82_dswin_100g+1)blocks
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X1_DESKEW_WINS0r (0x00109222 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X1_DESKEW_WINS0r_SIZE 4

/*
 * This structure should be used to declare and program RX_X1_DESKEW_WINS0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X1_DESKEW_WINS0r_s {
	uint32_t v[1];
	uint32_t rx_x1_deskew_wins0[1];
	uint32_t _rx_x1_deskew_wins0;
} BCMI_TSCF_GEN3_XGXS_RX_X1_DESKEW_WINS0r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X1_DESKEW_WINS0r_CLR(r) (r).rx_x1_deskew_wins0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X1_DESKEW_WINS0r_SET(r,d) (r).rx_x1_deskew_wins0[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X1_DESKEW_WINS0r_GET(r) (r).rx_x1_deskew_wins0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X1_DESKEW_WINS0r_CL82_DSWIN_100Gf_GET(r) ((((r).rx_x1_deskew_wins0[0]) >> 6) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_DESKEW_WINS0r_CL82_DSWIN_100Gf_SET(r,f) (r).rx_x1_deskew_wins0[0]=(((r).rx_x1_deskew_wins0[0] & ~((uint32_t)0x1f << 6)) | ((((uint32_t)f) & 0x1f) << 6)) | (31 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_DESKEW_WINS0r_CL82_DSWINf_GET(r) (((r).rx_x1_deskew_wins0[0]) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_DESKEW_WINS0r_CL82_DSWINf_SET(r,f) (r).rx_x1_deskew_wins0[0]=(((r).rx_x1_deskew_wins0[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access RX_X1_DESKEW_WINS0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X1_DESKEW_WINS0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_DESKEW_WINS0r,(_r._rx_x1_deskew_wins0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X1_DESKEW_WINS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_DESKEW_WINS0r,(_r._rx_x1_deskew_wins0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X1_DESKEW_WINS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_DESKEW_WINS0r,(_r._rx_x1_deskew_wins0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X1_DESKEW_WINS0r BCMI_TSCF_GEN3_XGXS_RX_X1_DESKEW_WINS0r
#define RX_X1_DESKEW_WINS0r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X1_DESKEW_WINS0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X1_DESKEW_WINS0r_t RX_X1_DESKEW_WINS0r_t;
#define RX_X1_DESKEW_WINS0r_CLR BCMI_TSCF_GEN3_XGXS_RX_X1_DESKEW_WINS0r_CLR
#define RX_X1_DESKEW_WINS0r_SET BCMI_TSCF_GEN3_XGXS_RX_X1_DESKEW_WINS0r_SET
#define RX_X1_DESKEW_WINS0r_GET BCMI_TSCF_GEN3_XGXS_RX_X1_DESKEW_WINS0r_GET
#define RX_X1_DESKEW_WINS0r_CL82_DSWIN_100Gf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_DESKEW_WINS0r_CL82_DSWIN_100Gf_GET
#define RX_X1_DESKEW_WINS0r_CL82_DSWIN_100Gf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_DESKEW_WINS0r_CL82_DSWIN_100Gf_SET
#define RX_X1_DESKEW_WINS0r_CL82_DSWINf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_DESKEW_WINS0r_CL82_DSWINf_GET
#define RX_X1_DESKEW_WINS0r_CL82_DSWINf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_DESKEW_WINS0r_CL82_DSWINf_SET
#define READ_RX_X1_DESKEW_WINS0r BCMI_TSCF_GEN3_XGXS_READ_RX_X1_DESKEW_WINS0r
#define WRITE_RX_X1_DESKEW_WINS0r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X1_DESKEW_WINS0r
#define MODIFY_RX_X1_DESKEW_WINS0r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X1_DESKEW_WINS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X1_DESKEW_WINS0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X1_CL91_CFG
 * BLOCKS:   RX_X1_CONTROL0
 * REGADDR:  0x9223
 * DESC:     cl91 configuration register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     SET_SYMB_ERR_WINDOW_128 1'b0 - Check for symbol errors over 8192 codeword window.1'b1 - Check for symbol errors over 128 codeword window.
 *     FEC_BYP_CORR_EN  It decides the latency of all the frames. The actual mode of operation depends on the per port fec_byp_corr_en config.
 *     FEC_BYP_IND_EN   It decides the latency of all the frames. The actual mode of operation depends on the per port fec_byp_ind_en config.
 *     FEC_DBG_BYP_CORR 1'b0 - Normal operation.1'b1 - Disable data correction independent of the datapath (which is determined by fec_byp_corr_en and fec_byp_ind_en.
 *     CL91_AM_SPACING_1024 1'b0 - AM spacing per virtual lane = 163841'b1 - AM spacing per virtual lane = 1024
 *     CL91_FC_LOCK_CORR_CW 1'b0 - lock on a codeword boundary only if the first CW contains syndrome equal to 0.1'b1 - lock on a codeword boundary even if the first CW contains syndrome not equal to 0, but the codeword is correctable.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X1_CL91_CFGr (0x00109223 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X1_CL91_CFGr_SIZE 4

/*
 * This structure should be used to declare and program RX_X1_CL91_CFG.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X1_CL91_CFGr_s {
	uint32_t v[1];
	uint32_t rx_x1_cl91_cfg[1];
	uint32_t _rx_x1_cl91_cfg;
} BCMI_TSCF_GEN3_XGXS_RX_X1_CL91_CFGr_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X1_CL91_CFGr_CLR(r) (r).rx_x1_cl91_cfg[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X1_CL91_CFGr_SET(r,d) (r).rx_x1_cl91_cfg[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X1_CL91_CFGr_GET(r) (r).rx_x1_cl91_cfg[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X1_CL91_CFGr_CL91_FC_LOCK_CORR_CWf_GET(r) ((((r).rx_x1_cl91_cfg[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_CL91_CFGr_CL91_FC_LOCK_CORR_CWf_SET(r,f) (r).rx_x1_cl91_cfg[0]=(((r).rx_x1_cl91_cfg[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_CL91_CFGr_CL91_AM_SPACING_1024f_GET(r) ((((r).rx_x1_cl91_cfg[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_CL91_CFGr_CL91_AM_SPACING_1024f_SET(r,f) (r).rx_x1_cl91_cfg[0]=(((r).rx_x1_cl91_cfg[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_CL91_CFGr_FEC_DBG_BYP_CORRf_GET(r) ((((r).rx_x1_cl91_cfg[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_CL91_CFGr_FEC_DBG_BYP_CORRf_SET(r,f) (r).rx_x1_cl91_cfg[0]=(((r).rx_x1_cl91_cfg[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_CL91_CFGr_FEC_BYP_IND_ENf_GET(r) ((((r).rx_x1_cl91_cfg[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_CL91_CFGr_FEC_BYP_IND_ENf_SET(r,f) (r).rx_x1_cl91_cfg[0]=(((r).rx_x1_cl91_cfg[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_CL91_CFGr_FEC_BYP_CORR_ENf_GET(r) ((((r).rx_x1_cl91_cfg[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_CL91_CFGr_FEC_BYP_CORR_ENf_SET(r,f) (r).rx_x1_cl91_cfg[0]=(((r).rx_x1_cl91_cfg[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_CL91_CFGr_SET_SYMB_ERR_WINDOW_128f_GET(r) ((((r).rx_x1_cl91_cfg[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_CL91_CFGr_SET_SYMB_ERR_WINDOW_128f_SET(r,f) (r).rx_x1_cl91_cfg[0]=(((r).rx_x1_cl91_cfg[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))

/*
 * These macros can be used to access RX_X1_CL91_CFG.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X1_CL91_CFGr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_CL91_CFGr,(_r._rx_x1_cl91_cfg))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X1_CL91_CFGr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_CL91_CFGr,(_r._rx_x1_cl91_cfg)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X1_CL91_CFGr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_CL91_CFGr,(_r._rx_x1_cl91_cfg))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X1_CL91_CFGr BCMI_TSCF_GEN3_XGXS_RX_X1_CL91_CFGr
#define RX_X1_CL91_CFGr_SIZE BCMI_TSCF_GEN3_XGXS_RX_X1_CL91_CFGr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X1_CL91_CFGr_t RX_X1_CL91_CFGr_t;
#define RX_X1_CL91_CFGr_CLR BCMI_TSCF_GEN3_XGXS_RX_X1_CL91_CFGr_CLR
#define RX_X1_CL91_CFGr_SET BCMI_TSCF_GEN3_XGXS_RX_X1_CL91_CFGr_SET
#define RX_X1_CL91_CFGr_GET BCMI_TSCF_GEN3_XGXS_RX_X1_CL91_CFGr_GET
#define RX_X1_CL91_CFGr_CL91_FC_LOCK_CORR_CWf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_CL91_CFGr_CL91_FC_LOCK_CORR_CWf_GET
#define RX_X1_CL91_CFGr_CL91_FC_LOCK_CORR_CWf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_CL91_CFGr_CL91_FC_LOCK_CORR_CWf_SET
#define RX_X1_CL91_CFGr_CL91_AM_SPACING_1024f_GET BCMI_TSCF_GEN3_XGXS_RX_X1_CL91_CFGr_CL91_AM_SPACING_1024f_GET
#define RX_X1_CL91_CFGr_CL91_AM_SPACING_1024f_SET BCMI_TSCF_GEN3_XGXS_RX_X1_CL91_CFGr_CL91_AM_SPACING_1024f_SET
#define RX_X1_CL91_CFGr_FEC_DBG_BYP_CORRf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_CL91_CFGr_FEC_DBG_BYP_CORRf_GET
#define RX_X1_CL91_CFGr_FEC_DBG_BYP_CORRf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_CL91_CFGr_FEC_DBG_BYP_CORRf_SET
#define RX_X1_CL91_CFGr_FEC_BYP_IND_ENf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_CL91_CFGr_FEC_BYP_IND_ENf_GET
#define RX_X1_CL91_CFGr_FEC_BYP_IND_ENf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_CL91_CFGr_FEC_BYP_IND_ENf_SET
#define RX_X1_CL91_CFGr_FEC_BYP_CORR_ENf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_CL91_CFGr_FEC_BYP_CORR_ENf_GET
#define RX_X1_CL91_CFGr_FEC_BYP_CORR_ENf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_CL91_CFGr_FEC_BYP_CORR_ENf_SET
#define RX_X1_CL91_CFGr_SET_SYMB_ERR_WINDOW_128f_GET BCMI_TSCF_GEN3_XGXS_RX_X1_CL91_CFGr_SET_SYMB_ERR_WINDOW_128f_GET
#define RX_X1_CL91_CFGr_SET_SYMB_ERR_WINDOW_128f_SET BCMI_TSCF_GEN3_XGXS_RX_X1_CL91_CFGr_SET_SYMB_ERR_WINDOW_128f_SET
#define READ_RX_X1_CL91_CFGr BCMI_TSCF_GEN3_XGXS_READ_RX_X1_CL91_CFGr
#define WRITE_RX_X1_CL91_CFGr BCMI_TSCF_GEN3_XGXS_WRITE_RX_X1_CL91_CFGr
#define MODIFY_RX_X1_CL91_CFGr BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X1_CL91_CFGr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X1_CL91_CFGr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X1_DESKEW_WINS1
 * BLOCKS:   RX_X1_CONTROL0
 * REGADDR:  0x9224
 * DESC:     deskew_windows_1 register
 * RESETVAL: 0x54 (84)
 * ACCESS:   R/W
 * FIELDS:
 *     CL82_DSWIN_CL91  CL82 Block based deskew window size for CL91 modedeskew_window = (cl82_dswin_cl91+1)blocksSupports skew of upto 96 blocks
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X1_DESKEW_WINS1r (0x00109224 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X1_DESKEW_WINS1r_SIZE 4

/*
 * This structure should be used to declare and program RX_X1_DESKEW_WINS1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X1_DESKEW_WINS1r_s {
	uint32_t v[1];
	uint32_t rx_x1_deskew_wins1[1];
	uint32_t _rx_x1_deskew_wins1;
} BCMI_TSCF_GEN3_XGXS_RX_X1_DESKEW_WINS1r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X1_DESKEW_WINS1r_CLR(r) (r).rx_x1_deskew_wins1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X1_DESKEW_WINS1r_SET(r,d) (r).rx_x1_deskew_wins1[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X1_DESKEW_WINS1r_GET(r) (r).rx_x1_deskew_wins1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X1_DESKEW_WINS1r_CL82_DSWIN_CL91f_GET(r) (((r).rx_x1_deskew_wins1[0]) & 0x7f)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_DESKEW_WINS1r_CL82_DSWIN_CL91f_SET(r,f) (r).rx_x1_deskew_wins1[0]=(((r).rx_x1_deskew_wins1[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f)) | (0x7f << 16)

/*
 * These macros can be used to access RX_X1_DESKEW_WINS1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X1_DESKEW_WINS1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_DESKEW_WINS1r,(_r._rx_x1_deskew_wins1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X1_DESKEW_WINS1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_DESKEW_WINS1r,(_r._rx_x1_deskew_wins1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X1_DESKEW_WINS1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_DESKEW_WINS1r,(_r._rx_x1_deskew_wins1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X1_DESKEW_WINS1r BCMI_TSCF_GEN3_XGXS_RX_X1_DESKEW_WINS1r
#define RX_X1_DESKEW_WINS1r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X1_DESKEW_WINS1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X1_DESKEW_WINS1r_t RX_X1_DESKEW_WINS1r_t;
#define RX_X1_DESKEW_WINS1r_CLR BCMI_TSCF_GEN3_XGXS_RX_X1_DESKEW_WINS1r_CLR
#define RX_X1_DESKEW_WINS1r_SET BCMI_TSCF_GEN3_XGXS_RX_X1_DESKEW_WINS1r_SET
#define RX_X1_DESKEW_WINS1r_GET BCMI_TSCF_GEN3_XGXS_RX_X1_DESKEW_WINS1r_GET
#define RX_X1_DESKEW_WINS1r_CL82_DSWIN_CL91f_GET BCMI_TSCF_GEN3_XGXS_RX_X1_DESKEW_WINS1r_CL82_DSWIN_CL91f_GET
#define RX_X1_DESKEW_WINS1r_CL82_DSWIN_CL91f_SET BCMI_TSCF_GEN3_XGXS_RX_X1_DESKEW_WINS1r_CL82_DSWIN_CL91f_SET
#define READ_RX_X1_DESKEW_WINS1r BCMI_TSCF_GEN3_XGXS_READ_RX_X1_DESKEW_WINS1r
#define WRITE_RX_X1_DESKEW_WINS1r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X1_DESKEW_WINS1r
#define MODIFY_RX_X1_DESKEW_WINS1r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X1_DESKEW_WINS1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X1_DESKEW_WINS1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X1_RX_LN_SWP
 * BLOCKS:   RX_X1_CONTROL0
 * REGADDR:  0x9225
 * DESC:     RX lane swap register
 * RESETVAL: 0xe4 (228)
 * ACCESS:   R/W
 * FIELDS:
 *     LOGICAL0_TO_PHY_SEL This is a LOGICAL to PHYSICAL mapping control.logical0_to_phy_sel indicates for LOGICAL lane 0 which lane to PHYSICAL send the data to
 *     LOGICAL1_TO_PHY_SEL This is a LOGICAL to PHYSICAL mapping control.logical1_to_phy_sel indicates for LOGICAL lane 1 which lane to PHYSICAL send the data to
 *     LOGICAL2_TO_PHY_SEL This is a LOGICAL to PHYSICAL mapping control.logical2_to_phy_sel indicates for LOGICAL lane 2 which lane to PHYSICAL send the data to
 *     LOGICAL3_TO_PHY_SEL This is a LOGICAL to PHYSICAL mapping control.logical3_to_phy_sel indicates for LOGICAL lane 3 which lane to PHYSICAL send the data to
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X1_RX_LN_SWPr (0x00109225 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X1_RX_LN_SWPr_SIZE 4

/*
 * This structure should be used to declare and program RX_X1_RX_LN_SWP.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X1_RX_LN_SWPr_s {
	uint32_t v[1];
	uint32_t rx_x1_rx_ln_swp[1];
	uint32_t _rx_x1_rx_ln_swp;
} BCMI_TSCF_GEN3_XGXS_RX_X1_RX_LN_SWPr_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X1_RX_LN_SWPr_CLR(r) (r).rx_x1_rx_ln_swp[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X1_RX_LN_SWPr_SET(r,d) (r).rx_x1_rx_ln_swp[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X1_RX_LN_SWPr_GET(r) (r).rx_x1_rx_ln_swp[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X1_RX_LN_SWPr_LOGICAL3_TO_PHY_SELf_GET(r) ((((r).rx_x1_rx_ln_swp[0]) >> 6) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_RX_LN_SWPr_LOGICAL3_TO_PHY_SELf_SET(r,f) (r).rx_x1_rx_ln_swp[0]=(((r).rx_x1_rx_ln_swp[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6)) | (3 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_RX_LN_SWPr_LOGICAL2_TO_PHY_SELf_GET(r) ((((r).rx_x1_rx_ln_swp[0]) >> 4) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_RX_LN_SWPr_LOGICAL2_TO_PHY_SELf_SET(r,f) (r).rx_x1_rx_ln_swp[0]=(((r).rx_x1_rx_ln_swp[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_RX_LN_SWPr_LOGICAL1_TO_PHY_SELf_GET(r) ((((r).rx_x1_rx_ln_swp[0]) >> 2) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_RX_LN_SWPr_LOGICAL1_TO_PHY_SELf_SET(r,f) (r).rx_x1_rx_ln_swp[0]=(((r).rx_x1_rx_ln_swp[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2)) | (3 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_RX_LN_SWPr_LOGICAL0_TO_PHY_SELf_GET(r) (((r).rx_x1_rx_ln_swp[0]) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_RX_LN_SWPr_LOGICAL0_TO_PHY_SELf_SET(r,f) (r).rx_x1_rx_ln_swp[0]=(((r).rx_x1_rx_ln_swp[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access RX_X1_RX_LN_SWP.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X1_RX_LN_SWPr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_RX_LN_SWPr,(_r._rx_x1_rx_ln_swp))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X1_RX_LN_SWPr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_RX_LN_SWPr,(_r._rx_x1_rx_ln_swp)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X1_RX_LN_SWPr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_RX_LN_SWPr,(_r._rx_x1_rx_ln_swp))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X1_RX_LN_SWPr BCMI_TSCF_GEN3_XGXS_RX_X1_RX_LN_SWPr
#define RX_X1_RX_LN_SWPr_SIZE BCMI_TSCF_GEN3_XGXS_RX_X1_RX_LN_SWPr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X1_RX_LN_SWPr_t RX_X1_RX_LN_SWPr_t;
#define RX_X1_RX_LN_SWPr_CLR BCMI_TSCF_GEN3_XGXS_RX_X1_RX_LN_SWPr_CLR
#define RX_X1_RX_LN_SWPr_SET BCMI_TSCF_GEN3_XGXS_RX_X1_RX_LN_SWPr_SET
#define RX_X1_RX_LN_SWPr_GET BCMI_TSCF_GEN3_XGXS_RX_X1_RX_LN_SWPr_GET
#define RX_X1_RX_LN_SWPr_LOGICAL3_TO_PHY_SELf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_RX_LN_SWPr_LOGICAL3_TO_PHY_SELf_GET
#define RX_X1_RX_LN_SWPr_LOGICAL3_TO_PHY_SELf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_RX_LN_SWPr_LOGICAL3_TO_PHY_SELf_SET
#define RX_X1_RX_LN_SWPr_LOGICAL2_TO_PHY_SELf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_RX_LN_SWPr_LOGICAL2_TO_PHY_SELf_GET
#define RX_X1_RX_LN_SWPr_LOGICAL2_TO_PHY_SELf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_RX_LN_SWPr_LOGICAL2_TO_PHY_SELf_SET
#define RX_X1_RX_LN_SWPr_LOGICAL1_TO_PHY_SELf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_RX_LN_SWPr_LOGICAL1_TO_PHY_SELf_GET
#define RX_X1_RX_LN_SWPr_LOGICAL1_TO_PHY_SELf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_RX_LN_SWPr_LOGICAL1_TO_PHY_SELf_SET
#define RX_X1_RX_LN_SWPr_LOGICAL0_TO_PHY_SELf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_RX_LN_SWPr_LOGICAL0_TO_PHY_SELf_GET
#define RX_X1_RX_LN_SWPr_LOGICAL0_TO_PHY_SELf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_RX_LN_SWPr_LOGICAL0_TO_PHY_SELf_SET
#define READ_RX_X1_RX_LN_SWPr BCMI_TSCF_GEN3_XGXS_READ_RX_X1_RX_LN_SWPr
#define WRITE_RX_X1_RX_LN_SWPr BCMI_TSCF_GEN3_XGXS_WRITE_RX_X1_RX_LN_SWPr
#define MODIFY_RX_X1_RX_LN_SWPr BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X1_RX_LN_SWPr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X1_RX_LN_SWPr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X1_SRF_MEM_CTL
 * BLOCKS:   RX_X1_CONTROL0
 * REGADDR:  0x9226
 * DESC:     SRF memory DFT controls
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     SRF_MEM_TM       TM control for all the SRF memories in the TSCF
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X1_SRF_MEM_CTLr (0x00109226 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X1_SRF_MEM_CTLr_SIZE 4

/*
 * This structure should be used to declare and program RX_X1_SRF_MEM_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X1_SRF_MEM_CTLr_s {
	uint32_t v[1];
	uint32_t rx_x1_srf_mem_ctl[1];
	uint32_t _rx_x1_srf_mem_ctl;
} BCMI_TSCF_GEN3_XGXS_RX_X1_SRF_MEM_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X1_SRF_MEM_CTLr_CLR(r) (r).rx_x1_srf_mem_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X1_SRF_MEM_CTLr_SET(r,d) (r).rx_x1_srf_mem_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X1_SRF_MEM_CTLr_GET(r) (r).rx_x1_srf_mem_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X1_SRF_MEM_CTLr_SRF_MEM_TMf_GET(r) (((r).rx_x1_srf_mem_ctl[0]) & 0xfff)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_SRF_MEM_CTLr_SRF_MEM_TMf_SET(r,f) (r).rx_x1_srf_mem_ctl[0]=(((r).rx_x1_srf_mem_ctl[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff)) | (0xfff << 16)

/*
 * These macros can be used to access RX_X1_SRF_MEM_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X1_SRF_MEM_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_SRF_MEM_CTLr,(_r._rx_x1_srf_mem_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X1_SRF_MEM_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_SRF_MEM_CTLr,(_r._rx_x1_srf_mem_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X1_SRF_MEM_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_SRF_MEM_CTLr,(_r._rx_x1_srf_mem_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X1_SRF_MEM_CTLr BCMI_TSCF_GEN3_XGXS_RX_X1_SRF_MEM_CTLr
#define RX_X1_SRF_MEM_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_RX_X1_SRF_MEM_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X1_SRF_MEM_CTLr_t RX_X1_SRF_MEM_CTLr_t;
#define RX_X1_SRF_MEM_CTLr_CLR BCMI_TSCF_GEN3_XGXS_RX_X1_SRF_MEM_CTLr_CLR
#define RX_X1_SRF_MEM_CTLr_SET BCMI_TSCF_GEN3_XGXS_RX_X1_SRF_MEM_CTLr_SET
#define RX_X1_SRF_MEM_CTLr_GET BCMI_TSCF_GEN3_XGXS_RX_X1_SRF_MEM_CTLr_GET
#define RX_X1_SRF_MEM_CTLr_SRF_MEM_TMf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_SRF_MEM_CTLr_SRF_MEM_TMf_GET
#define RX_X1_SRF_MEM_CTLr_SRF_MEM_TMf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_SRF_MEM_CTLr_SRF_MEM_TMf_SET
#define READ_RX_X1_SRF_MEM_CTLr BCMI_TSCF_GEN3_XGXS_READ_RX_X1_SRF_MEM_CTLr
#define WRITE_RX_X1_SRF_MEM_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_RX_X1_SRF_MEM_CTLr
#define MODIFY_RX_X1_SRF_MEM_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X1_SRF_MEM_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X1_SRF_MEM_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X1_RF_MEM_CTL
 * BLOCKS:   RX_X1_CONTROL0
 * REGADDR:  0x9227
 * DESC:     RF memory DFT controls
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RF_MEM_TM        TM control for all the RF memories in the TSCF
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X1_RF_MEM_CTLr (0x00109227 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X1_RF_MEM_CTLr_SIZE 4

/*
 * This structure should be used to declare and program RX_X1_RF_MEM_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X1_RF_MEM_CTLr_s {
	uint32_t v[1];
	uint32_t rx_x1_rf_mem_ctl[1];
	uint32_t _rx_x1_rf_mem_ctl;
} BCMI_TSCF_GEN3_XGXS_RX_X1_RF_MEM_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X1_RF_MEM_CTLr_CLR(r) (r).rx_x1_rf_mem_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X1_RF_MEM_CTLr_SET(r,d) (r).rx_x1_rf_mem_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X1_RF_MEM_CTLr_GET(r) (r).rx_x1_rf_mem_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X1_RF_MEM_CTLr_RF_MEM_TMf_GET(r) (((r).rx_x1_rf_mem_ctl[0]) & 0x3ff)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_RF_MEM_CTLr_RF_MEM_TMf_SET(r,f) (r).rx_x1_rf_mem_ctl[0]=(((r).rx_x1_rf_mem_ctl[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff)) | (0x3ff << 16)

/*
 * These macros can be used to access RX_X1_RF_MEM_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X1_RF_MEM_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_RF_MEM_CTLr,(_r._rx_x1_rf_mem_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X1_RF_MEM_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_RF_MEM_CTLr,(_r._rx_x1_rf_mem_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X1_RF_MEM_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_RF_MEM_CTLr,(_r._rx_x1_rf_mem_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X1_RF_MEM_CTLr BCMI_TSCF_GEN3_XGXS_RX_X1_RF_MEM_CTLr
#define RX_X1_RF_MEM_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_RX_X1_RF_MEM_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X1_RF_MEM_CTLr_t RX_X1_RF_MEM_CTLr_t;
#define RX_X1_RF_MEM_CTLr_CLR BCMI_TSCF_GEN3_XGXS_RX_X1_RF_MEM_CTLr_CLR
#define RX_X1_RF_MEM_CTLr_SET BCMI_TSCF_GEN3_XGXS_RX_X1_RF_MEM_CTLr_SET
#define RX_X1_RF_MEM_CTLr_GET BCMI_TSCF_GEN3_XGXS_RX_X1_RF_MEM_CTLr_GET
#define RX_X1_RF_MEM_CTLr_RF_MEM_TMf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_RF_MEM_CTLr_RF_MEM_TMf_GET
#define RX_X1_RF_MEM_CTLr_RF_MEM_TMf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_RF_MEM_CTLr_RF_MEM_TMf_SET
#define READ_RX_X1_RF_MEM_CTLr BCMI_TSCF_GEN3_XGXS_READ_RX_X1_RF_MEM_CTLr
#define WRITE_RX_X1_RF_MEM_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_RX_X1_RF_MEM_CTLr
#define MODIFY_RX_X1_RF_MEM_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X1_RF_MEM_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X1_RF_MEM_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X1_ECC_STS_FEC_MEM0
 * BLOCKS:   RX_X1_ECC
 * REGADDR:  0x9230
 * DESC:     ECC status register for FEC physical lane 0 memory
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     ERR_EVENT_ADDRESS_FEC_0 ECC error location, valid only if 1-bit or 2-bit error bit is set
 *     ONE_BIT_ERR_EVENT_FEC_0 1-bit ECC error detected
 *     TWO_BIT_ERR_EVENT_FEC_0 2-bit ECC error detected
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM0r (0x00109230 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM0r_SIZE 4

/*
 * This structure should be used to declare and program RX_X1_ECC_STS_FEC_MEM0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM0r_s {
	uint32_t v[1];
	uint32_t rx_x1_ecc_sts_fec_mem0[1];
	uint32_t _rx_x1_ecc_sts_fec_mem0;
} BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM0r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM0r_CLR(r) (r).rx_x1_ecc_sts_fec_mem0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM0r_SET(r,d) (r).rx_x1_ecc_sts_fec_mem0[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM0r_GET(r) (r).rx_x1_ecc_sts_fec_mem0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM0r_TWO_BIT_ERR_EVENT_FEC_0f_GET(r) ((((r).rx_x1_ecc_sts_fec_mem0[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM0r_TWO_BIT_ERR_EVENT_FEC_0f_SET(r,f) (r).rx_x1_ecc_sts_fec_mem0[0]=(((r).rx_x1_ecc_sts_fec_mem0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM0r_ONE_BIT_ERR_EVENT_FEC_0f_GET(r) ((((r).rx_x1_ecc_sts_fec_mem0[0]) >> 14) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM0r_ONE_BIT_ERR_EVENT_FEC_0f_SET(r,f) (r).rx_x1_ecc_sts_fec_mem0[0]=(((r).rx_x1_ecc_sts_fec_mem0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM0r_ERR_EVENT_ADDRESS_FEC_0f_GET(r) (((r).rx_x1_ecc_sts_fec_mem0[0]) & 0x3fff)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM0r_ERR_EVENT_ADDRESS_FEC_0f_SET(r,f) (r).rx_x1_ecc_sts_fec_mem0[0]=(((r).rx_x1_ecc_sts_fec_mem0[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff)) | (0x3fff << 16)

/*
 * These macros can be used to access RX_X1_ECC_STS_FEC_MEM0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X1_ECC_STS_FEC_MEM0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM0r,(_r._rx_x1_ecc_sts_fec_mem0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X1_ECC_STS_FEC_MEM0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM0r,(_r._rx_x1_ecc_sts_fec_mem0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X1_ECC_STS_FEC_MEM0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM0r,(_r._rx_x1_ecc_sts_fec_mem0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X1_ECC_STS_FEC_MEM0r BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM0r
#define RX_X1_ECC_STS_FEC_MEM0r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM0r_t RX_X1_ECC_STS_FEC_MEM0r_t;
#define RX_X1_ECC_STS_FEC_MEM0r_CLR BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM0r_CLR
#define RX_X1_ECC_STS_FEC_MEM0r_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM0r_SET
#define RX_X1_ECC_STS_FEC_MEM0r_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM0r_GET
#define RX_X1_ECC_STS_FEC_MEM0r_TWO_BIT_ERR_EVENT_FEC_0f_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM0r_TWO_BIT_ERR_EVENT_FEC_0f_GET
#define RX_X1_ECC_STS_FEC_MEM0r_TWO_BIT_ERR_EVENT_FEC_0f_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM0r_TWO_BIT_ERR_EVENT_FEC_0f_SET
#define RX_X1_ECC_STS_FEC_MEM0r_ONE_BIT_ERR_EVENT_FEC_0f_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM0r_ONE_BIT_ERR_EVENT_FEC_0f_GET
#define RX_X1_ECC_STS_FEC_MEM0r_ONE_BIT_ERR_EVENT_FEC_0f_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM0r_ONE_BIT_ERR_EVENT_FEC_0f_SET
#define RX_X1_ECC_STS_FEC_MEM0r_ERR_EVENT_ADDRESS_FEC_0f_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM0r_ERR_EVENT_ADDRESS_FEC_0f_GET
#define RX_X1_ECC_STS_FEC_MEM0r_ERR_EVENT_ADDRESS_FEC_0f_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM0r_ERR_EVENT_ADDRESS_FEC_0f_SET
#define READ_RX_X1_ECC_STS_FEC_MEM0r BCMI_TSCF_GEN3_XGXS_READ_RX_X1_ECC_STS_FEC_MEM0r
#define WRITE_RX_X1_ECC_STS_FEC_MEM0r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X1_ECC_STS_FEC_MEM0r
#define MODIFY_RX_X1_ECC_STS_FEC_MEM0r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X1_ECC_STS_FEC_MEM0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X1_ECC_STS_FEC_MEM1
 * BLOCKS:   RX_X1_ECC
 * REGADDR:  0x9231
 * DESC:     ECC status register for FEC physical lane 1 memory
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     ERR_EVENT_ADDRESS_FEC_1 ECC error location, valid only if 1-bit or 2-bit error bit is set
 *     ONE_BIT_ERR_EVENT_FEC_1 1-bit ECC error detected
 *     TWO_BIT_ERR_EVENT_FEC_1 2-bit ECC error detected
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM1r (0x00109231 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM1r_SIZE 4

/*
 * This structure should be used to declare and program RX_X1_ECC_STS_FEC_MEM1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM1r_s {
	uint32_t v[1];
	uint32_t rx_x1_ecc_sts_fec_mem1[1];
	uint32_t _rx_x1_ecc_sts_fec_mem1;
} BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM1r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM1r_CLR(r) (r).rx_x1_ecc_sts_fec_mem1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM1r_SET(r,d) (r).rx_x1_ecc_sts_fec_mem1[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM1r_GET(r) (r).rx_x1_ecc_sts_fec_mem1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM1r_TWO_BIT_ERR_EVENT_FEC_1f_GET(r) ((((r).rx_x1_ecc_sts_fec_mem1[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM1r_TWO_BIT_ERR_EVENT_FEC_1f_SET(r,f) (r).rx_x1_ecc_sts_fec_mem1[0]=(((r).rx_x1_ecc_sts_fec_mem1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM1r_ONE_BIT_ERR_EVENT_FEC_1f_GET(r) ((((r).rx_x1_ecc_sts_fec_mem1[0]) >> 14) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM1r_ONE_BIT_ERR_EVENT_FEC_1f_SET(r,f) (r).rx_x1_ecc_sts_fec_mem1[0]=(((r).rx_x1_ecc_sts_fec_mem1[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM1r_ERR_EVENT_ADDRESS_FEC_1f_GET(r) (((r).rx_x1_ecc_sts_fec_mem1[0]) & 0x3fff)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM1r_ERR_EVENT_ADDRESS_FEC_1f_SET(r,f) (r).rx_x1_ecc_sts_fec_mem1[0]=(((r).rx_x1_ecc_sts_fec_mem1[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff)) | (0x3fff << 16)

/*
 * These macros can be used to access RX_X1_ECC_STS_FEC_MEM1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X1_ECC_STS_FEC_MEM1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM1r,(_r._rx_x1_ecc_sts_fec_mem1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X1_ECC_STS_FEC_MEM1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM1r,(_r._rx_x1_ecc_sts_fec_mem1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X1_ECC_STS_FEC_MEM1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM1r,(_r._rx_x1_ecc_sts_fec_mem1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X1_ECC_STS_FEC_MEM1r BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM1r
#define RX_X1_ECC_STS_FEC_MEM1r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM1r_t RX_X1_ECC_STS_FEC_MEM1r_t;
#define RX_X1_ECC_STS_FEC_MEM1r_CLR BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM1r_CLR
#define RX_X1_ECC_STS_FEC_MEM1r_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM1r_SET
#define RX_X1_ECC_STS_FEC_MEM1r_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM1r_GET
#define RX_X1_ECC_STS_FEC_MEM1r_TWO_BIT_ERR_EVENT_FEC_1f_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM1r_TWO_BIT_ERR_EVENT_FEC_1f_GET
#define RX_X1_ECC_STS_FEC_MEM1r_TWO_BIT_ERR_EVENT_FEC_1f_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM1r_TWO_BIT_ERR_EVENT_FEC_1f_SET
#define RX_X1_ECC_STS_FEC_MEM1r_ONE_BIT_ERR_EVENT_FEC_1f_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM1r_ONE_BIT_ERR_EVENT_FEC_1f_GET
#define RX_X1_ECC_STS_FEC_MEM1r_ONE_BIT_ERR_EVENT_FEC_1f_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM1r_ONE_BIT_ERR_EVENT_FEC_1f_SET
#define RX_X1_ECC_STS_FEC_MEM1r_ERR_EVENT_ADDRESS_FEC_1f_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM1r_ERR_EVENT_ADDRESS_FEC_1f_GET
#define RX_X1_ECC_STS_FEC_MEM1r_ERR_EVENT_ADDRESS_FEC_1f_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM1r_ERR_EVENT_ADDRESS_FEC_1f_SET
#define READ_RX_X1_ECC_STS_FEC_MEM1r BCMI_TSCF_GEN3_XGXS_READ_RX_X1_ECC_STS_FEC_MEM1r
#define WRITE_RX_X1_ECC_STS_FEC_MEM1r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X1_ECC_STS_FEC_MEM1r
#define MODIFY_RX_X1_ECC_STS_FEC_MEM1r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X1_ECC_STS_FEC_MEM1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X1_ECC_STS_FEC_MEM2
 * BLOCKS:   RX_X1_ECC
 * REGADDR:  0x9232
 * DESC:     ECC status register for FEC physical lane 2 memory
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     ERR_EVENT_ADDRESS_FEC_2 ECC error location, valid only if 1-bit or 2-bit error bit is set
 *     ONE_BIT_ERR_EVENT_FEC_2 1-bit ECC error detected
 *     TWO_BIT_ERR_EVENT_FEC_2 2-bit ECC error detected
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM2r (0x00109232 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X1_ECC_STS_FEC_MEM2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM2r_s {
	uint32_t v[1];
	uint32_t rx_x1_ecc_sts_fec_mem2[1];
	uint32_t _rx_x1_ecc_sts_fec_mem2;
} BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM2r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM2r_CLR(r) (r).rx_x1_ecc_sts_fec_mem2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM2r_SET(r,d) (r).rx_x1_ecc_sts_fec_mem2[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM2r_GET(r) (r).rx_x1_ecc_sts_fec_mem2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM2r_TWO_BIT_ERR_EVENT_FEC_2f_GET(r) ((((r).rx_x1_ecc_sts_fec_mem2[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM2r_TWO_BIT_ERR_EVENT_FEC_2f_SET(r,f) (r).rx_x1_ecc_sts_fec_mem2[0]=(((r).rx_x1_ecc_sts_fec_mem2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM2r_ONE_BIT_ERR_EVENT_FEC_2f_GET(r) ((((r).rx_x1_ecc_sts_fec_mem2[0]) >> 14) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM2r_ONE_BIT_ERR_EVENT_FEC_2f_SET(r,f) (r).rx_x1_ecc_sts_fec_mem2[0]=(((r).rx_x1_ecc_sts_fec_mem2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM2r_ERR_EVENT_ADDRESS_FEC_2f_GET(r) (((r).rx_x1_ecc_sts_fec_mem2[0]) & 0x3fff)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM2r_ERR_EVENT_ADDRESS_FEC_2f_SET(r,f) (r).rx_x1_ecc_sts_fec_mem2[0]=(((r).rx_x1_ecc_sts_fec_mem2[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff)) | (0x3fff << 16)

/*
 * These macros can be used to access RX_X1_ECC_STS_FEC_MEM2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X1_ECC_STS_FEC_MEM2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM2r,(_r._rx_x1_ecc_sts_fec_mem2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X1_ECC_STS_FEC_MEM2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM2r,(_r._rx_x1_ecc_sts_fec_mem2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X1_ECC_STS_FEC_MEM2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM2r,(_r._rx_x1_ecc_sts_fec_mem2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X1_ECC_STS_FEC_MEM2r BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM2r
#define RX_X1_ECC_STS_FEC_MEM2r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM2r_t RX_X1_ECC_STS_FEC_MEM2r_t;
#define RX_X1_ECC_STS_FEC_MEM2r_CLR BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM2r_CLR
#define RX_X1_ECC_STS_FEC_MEM2r_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM2r_SET
#define RX_X1_ECC_STS_FEC_MEM2r_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM2r_GET
#define RX_X1_ECC_STS_FEC_MEM2r_TWO_BIT_ERR_EVENT_FEC_2f_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM2r_TWO_BIT_ERR_EVENT_FEC_2f_GET
#define RX_X1_ECC_STS_FEC_MEM2r_TWO_BIT_ERR_EVENT_FEC_2f_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM2r_TWO_BIT_ERR_EVENT_FEC_2f_SET
#define RX_X1_ECC_STS_FEC_MEM2r_ONE_BIT_ERR_EVENT_FEC_2f_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM2r_ONE_BIT_ERR_EVENT_FEC_2f_GET
#define RX_X1_ECC_STS_FEC_MEM2r_ONE_BIT_ERR_EVENT_FEC_2f_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM2r_ONE_BIT_ERR_EVENT_FEC_2f_SET
#define RX_X1_ECC_STS_FEC_MEM2r_ERR_EVENT_ADDRESS_FEC_2f_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM2r_ERR_EVENT_ADDRESS_FEC_2f_GET
#define RX_X1_ECC_STS_FEC_MEM2r_ERR_EVENT_ADDRESS_FEC_2f_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM2r_ERR_EVENT_ADDRESS_FEC_2f_SET
#define READ_RX_X1_ECC_STS_FEC_MEM2r BCMI_TSCF_GEN3_XGXS_READ_RX_X1_ECC_STS_FEC_MEM2r
#define WRITE_RX_X1_ECC_STS_FEC_MEM2r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X1_ECC_STS_FEC_MEM2r
#define MODIFY_RX_X1_ECC_STS_FEC_MEM2r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X1_ECC_STS_FEC_MEM2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X1_ECC_STS_FEC_MEM3
 * BLOCKS:   RX_X1_ECC
 * REGADDR:  0x9233
 * DESC:     ECC status register for FEC physical lane 3 memory
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     ERR_EVENT_ADDRESS_FEC_3 ECC error location, valid only if 1-bit or 2-bit error bit is set
 *     ONE_BIT_ERR_EVENT_FEC_3 1-bit ECC error detected
 *     TWO_BIT_ERR_EVENT_FEC_3 2-bit ECC error detected
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM3r (0x00109233 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM3r_SIZE 4

/*
 * This structure should be used to declare and program RX_X1_ECC_STS_FEC_MEM3.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM3r_s {
	uint32_t v[1];
	uint32_t rx_x1_ecc_sts_fec_mem3[1];
	uint32_t _rx_x1_ecc_sts_fec_mem3;
} BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM3r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM3r_CLR(r) (r).rx_x1_ecc_sts_fec_mem3[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM3r_SET(r,d) (r).rx_x1_ecc_sts_fec_mem3[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM3r_GET(r) (r).rx_x1_ecc_sts_fec_mem3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM3r_TWO_BIT_ERR_EVENT_FEC_3f_GET(r) ((((r).rx_x1_ecc_sts_fec_mem3[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM3r_TWO_BIT_ERR_EVENT_FEC_3f_SET(r,f) (r).rx_x1_ecc_sts_fec_mem3[0]=(((r).rx_x1_ecc_sts_fec_mem3[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM3r_ONE_BIT_ERR_EVENT_FEC_3f_GET(r) ((((r).rx_x1_ecc_sts_fec_mem3[0]) >> 14) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM3r_ONE_BIT_ERR_EVENT_FEC_3f_SET(r,f) (r).rx_x1_ecc_sts_fec_mem3[0]=(((r).rx_x1_ecc_sts_fec_mem3[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM3r_ERR_EVENT_ADDRESS_FEC_3f_GET(r) (((r).rx_x1_ecc_sts_fec_mem3[0]) & 0x3fff)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM3r_ERR_EVENT_ADDRESS_FEC_3f_SET(r,f) (r).rx_x1_ecc_sts_fec_mem3[0]=(((r).rx_x1_ecc_sts_fec_mem3[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff)) | (0x3fff << 16)

/*
 * These macros can be used to access RX_X1_ECC_STS_FEC_MEM3.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X1_ECC_STS_FEC_MEM3r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM3r,(_r._rx_x1_ecc_sts_fec_mem3))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X1_ECC_STS_FEC_MEM3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM3r,(_r._rx_x1_ecc_sts_fec_mem3)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X1_ECC_STS_FEC_MEM3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM3r,(_r._rx_x1_ecc_sts_fec_mem3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X1_ECC_STS_FEC_MEM3r BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM3r
#define RX_X1_ECC_STS_FEC_MEM3r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM3r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM3r_t RX_X1_ECC_STS_FEC_MEM3r_t;
#define RX_X1_ECC_STS_FEC_MEM3r_CLR BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM3r_CLR
#define RX_X1_ECC_STS_FEC_MEM3r_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM3r_SET
#define RX_X1_ECC_STS_FEC_MEM3r_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM3r_GET
#define RX_X1_ECC_STS_FEC_MEM3r_TWO_BIT_ERR_EVENT_FEC_3f_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM3r_TWO_BIT_ERR_EVENT_FEC_3f_GET
#define RX_X1_ECC_STS_FEC_MEM3r_TWO_BIT_ERR_EVENT_FEC_3f_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM3r_TWO_BIT_ERR_EVENT_FEC_3f_SET
#define RX_X1_ECC_STS_FEC_MEM3r_ONE_BIT_ERR_EVENT_FEC_3f_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM3r_ONE_BIT_ERR_EVENT_FEC_3f_GET
#define RX_X1_ECC_STS_FEC_MEM3r_ONE_BIT_ERR_EVENT_FEC_3f_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM3r_ONE_BIT_ERR_EVENT_FEC_3f_SET
#define RX_X1_ECC_STS_FEC_MEM3r_ERR_EVENT_ADDRESS_FEC_3f_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM3r_ERR_EVENT_ADDRESS_FEC_3f_GET
#define RX_X1_ECC_STS_FEC_MEM3r_ERR_EVENT_ADDRESS_FEC_3f_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM3r_ERR_EVENT_ADDRESS_FEC_3f_SET
#define READ_RX_X1_ECC_STS_FEC_MEM3r BCMI_TSCF_GEN3_XGXS_READ_RX_X1_ECC_STS_FEC_MEM3r
#define WRITE_RX_X1_ECC_STS_FEC_MEM3r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X1_ECC_STS_FEC_MEM3r
#define MODIFY_RX_X1_ECC_STS_FEC_MEM3r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X1_ECC_STS_FEC_MEM3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_STS_FEC_MEM3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X1_ECC_INTR_STS_1BIT
 * BLOCKS:   RX_X1_ECC
 * REGADDR:  0x9238
 * DESC:     ECC 1-bit interrupt status register (Physical lane based)
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     FEC_MEM_0_1BIT_INT_STATUS Single bit, correctable error detected
 *     FEC_MEM_1_1BIT_INT_STATUS Single bit, correctable error detected
 *     FEC_MEM_2_1BIT_INT_STATUS Single bit, correctable error detected
 *     FEC_MEM_3_1BIT_INT_STATUS Single bit, correctable error detected
 *     CL91_FEC_RAM1_LO_1BIT_INT_STATUS Single bit, correctable error detected
 *     CL91_FEC_RAM1_HI_1BIT_INT_STATUS Single bit, correctable error detected
 *     CL91_FEC_RAM2_LO_1BIT_INT_STATUS Single bit, correctable error detected
 *     CL91_FEC_RAM2_HI_1BIT_INT_STATUS Single bit, correctable error detected
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_1BITr (0x00109238 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_1BITr_SIZE 4

/*
 * This structure should be used to declare and program RX_X1_ECC_INTR_STS_1BIT.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_1BITr_s {
	uint32_t v[1];
	uint32_t rx_x1_ecc_intr_sts_1bit[1];
	uint32_t _rx_x1_ecc_intr_sts_1bit;
} BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_1BITr_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_1BITr_CLR(r) (r).rx_x1_ecc_intr_sts_1bit[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_1BITr_SET(r,d) (r).rx_x1_ecc_intr_sts_1bit[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_1BITr_GET(r) (r).rx_x1_ecc_intr_sts_1bit[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_1BITr_CL91_FEC_RAM2_HI_1BIT_INT_STATUSf_GET(r) ((((r).rx_x1_ecc_intr_sts_1bit[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_1BITr_CL91_FEC_RAM2_HI_1BIT_INT_STATUSf_SET(r,f) (r).rx_x1_ecc_intr_sts_1bit[0]=(((r).rx_x1_ecc_intr_sts_1bit[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_1BITr_CL91_FEC_RAM2_LO_1BIT_INT_STATUSf_GET(r) ((((r).rx_x1_ecc_intr_sts_1bit[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_1BITr_CL91_FEC_RAM2_LO_1BIT_INT_STATUSf_SET(r,f) (r).rx_x1_ecc_intr_sts_1bit[0]=(((r).rx_x1_ecc_intr_sts_1bit[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_1BITr_CL91_FEC_RAM1_HI_1BIT_INT_STATUSf_GET(r) ((((r).rx_x1_ecc_intr_sts_1bit[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_1BITr_CL91_FEC_RAM1_HI_1BIT_INT_STATUSf_SET(r,f) (r).rx_x1_ecc_intr_sts_1bit[0]=(((r).rx_x1_ecc_intr_sts_1bit[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_1BITr_CL91_FEC_RAM1_LO_1BIT_INT_STATUSf_GET(r) ((((r).rx_x1_ecc_intr_sts_1bit[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_1BITr_CL91_FEC_RAM1_LO_1BIT_INT_STATUSf_SET(r,f) (r).rx_x1_ecc_intr_sts_1bit[0]=(((r).rx_x1_ecc_intr_sts_1bit[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_1BITr_FEC_MEM_3_1BIT_INT_STATUSf_GET(r) ((((r).rx_x1_ecc_intr_sts_1bit[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_1BITr_FEC_MEM_3_1BIT_INT_STATUSf_SET(r,f) (r).rx_x1_ecc_intr_sts_1bit[0]=(((r).rx_x1_ecc_intr_sts_1bit[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_1BITr_FEC_MEM_2_1BIT_INT_STATUSf_GET(r) ((((r).rx_x1_ecc_intr_sts_1bit[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_1BITr_FEC_MEM_2_1BIT_INT_STATUSf_SET(r,f) (r).rx_x1_ecc_intr_sts_1bit[0]=(((r).rx_x1_ecc_intr_sts_1bit[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_1BITr_FEC_MEM_1_1BIT_INT_STATUSf_GET(r) ((((r).rx_x1_ecc_intr_sts_1bit[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_1BITr_FEC_MEM_1_1BIT_INT_STATUSf_SET(r,f) (r).rx_x1_ecc_intr_sts_1bit[0]=(((r).rx_x1_ecc_intr_sts_1bit[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_1BITr_FEC_MEM_0_1BIT_INT_STATUSf_GET(r) (((r).rx_x1_ecc_intr_sts_1bit[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_1BITr_FEC_MEM_0_1BIT_INT_STATUSf_SET(r,f) (r).rx_x1_ecc_intr_sts_1bit[0]=(((r).rx_x1_ecc_intr_sts_1bit[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_X1_ECC_INTR_STS_1BIT.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X1_ECC_INTR_STS_1BITr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_1BITr,(_r._rx_x1_ecc_intr_sts_1bit))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X1_ECC_INTR_STS_1BITr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_1BITr,(_r._rx_x1_ecc_intr_sts_1bit)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X1_ECC_INTR_STS_1BITr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_1BITr,(_r._rx_x1_ecc_intr_sts_1bit))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X1_ECC_INTR_STS_1BITr BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_1BITr
#define RX_X1_ECC_INTR_STS_1BITr_SIZE BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_1BITr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_1BITr_t RX_X1_ECC_INTR_STS_1BITr_t;
#define RX_X1_ECC_INTR_STS_1BITr_CLR BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_1BITr_CLR
#define RX_X1_ECC_INTR_STS_1BITr_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_1BITr_SET
#define RX_X1_ECC_INTR_STS_1BITr_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_1BITr_GET
#define RX_X1_ECC_INTR_STS_1BITr_CL91_FEC_RAM2_HI_1BIT_INT_STATUSf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_1BITr_CL91_FEC_RAM2_HI_1BIT_INT_STATUSf_GET
#define RX_X1_ECC_INTR_STS_1BITr_CL91_FEC_RAM2_HI_1BIT_INT_STATUSf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_1BITr_CL91_FEC_RAM2_HI_1BIT_INT_STATUSf_SET
#define RX_X1_ECC_INTR_STS_1BITr_CL91_FEC_RAM2_LO_1BIT_INT_STATUSf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_1BITr_CL91_FEC_RAM2_LO_1BIT_INT_STATUSf_GET
#define RX_X1_ECC_INTR_STS_1BITr_CL91_FEC_RAM2_LO_1BIT_INT_STATUSf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_1BITr_CL91_FEC_RAM2_LO_1BIT_INT_STATUSf_SET
#define RX_X1_ECC_INTR_STS_1BITr_CL91_FEC_RAM1_HI_1BIT_INT_STATUSf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_1BITr_CL91_FEC_RAM1_HI_1BIT_INT_STATUSf_GET
#define RX_X1_ECC_INTR_STS_1BITr_CL91_FEC_RAM1_HI_1BIT_INT_STATUSf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_1BITr_CL91_FEC_RAM1_HI_1BIT_INT_STATUSf_SET
#define RX_X1_ECC_INTR_STS_1BITr_CL91_FEC_RAM1_LO_1BIT_INT_STATUSf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_1BITr_CL91_FEC_RAM1_LO_1BIT_INT_STATUSf_GET
#define RX_X1_ECC_INTR_STS_1BITr_CL91_FEC_RAM1_LO_1BIT_INT_STATUSf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_1BITr_CL91_FEC_RAM1_LO_1BIT_INT_STATUSf_SET
#define RX_X1_ECC_INTR_STS_1BITr_FEC_MEM_3_1BIT_INT_STATUSf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_1BITr_FEC_MEM_3_1BIT_INT_STATUSf_GET
#define RX_X1_ECC_INTR_STS_1BITr_FEC_MEM_3_1BIT_INT_STATUSf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_1BITr_FEC_MEM_3_1BIT_INT_STATUSf_SET
#define RX_X1_ECC_INTR_STS_1BITr_FEC_MEM_2_1BIT_INT_STATUSf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_1BITr_FEC_MEM_2_1BIT_INT_STATUSf_GET
#define RX_X1_ECC_INTR_STS_1BITr_FEC_MEM_2_1BIT_INT_STATUSf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_1BITr_FEC_MEM_2_1BIT_INT_STATUSf_SET
#define RX_X1_ECC_INTR_STS_1BITr_FEC_MEM_1_1BIT_INT_STATUSf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_1BITr_FEC_MEM_1_1BIT_INT_STATUSf_GET
#define RX_X1_ECC_INTR_STS_1BITr_FEC_MEM_1_1BIT_INT_STATUSf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_1BITr_FEC_MEM_1_1BIT_INT_STATUSf_SET
#define RX_X1_ECC_INTR_STS_1BITr_FEC_MEM_0_1BIT_INT_STATUSf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_1BITr_FEC_MEM_0_1BIT_INT_STATUSf_GET
#define RX_X1_ECC_INTR_STS_1BITr_FEC_MEM_0_1BIT_INT_STATUSf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_1BITr_FEC_MEM_0_1BIT_INT_STATUSf_SET
#define READ_RX_X1_ECC_INTR_STS_1BITr BCMI_TSCF_GEN3_XGXS_READ_RX_X1_ECC_INTR_STS_1BITr
#define WRITE_RX_X1_ECC_INTR_STS_1BITr BCMI_TSCF_GEN3_XGXS_WRITE_RX_X1_ECC_INTR_STS_1BITr
#define MODIFY_RX_X1_ECC_INTR_STS_1BITr BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X1_ECC_INTR_STS_1BITr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_1BITr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X1_ECC_INTR_STS_2BIT
 * BLOCKS:   RX_X1_ECC
 * REGADDR:  0x9239
 * DESC:     ECC 2-bit interrupt status register (Physical lane based)
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     FEC_MEM_0_2BIT_INT_STATUS Two bit, uncorrectable error detected
 *     FEC_MEM_1_2BIT_INT_STATUS Two bit, uncorrectable error detected
 *     FEC_MEM_2_2BIT_INT_STATUS Two bit, uncorrectable error detected
 *     FEC_MEM_3_2BIT_INT_STATUS Two bit, uncorrectable error detected
 *     CL91_FEC_RAM1_LO_2BIT_INT_STATUS Two bit, uncorrectable error detected
 *     CL91_FEC_RAM1_HI_2BIT_INT_STATUS Two bit, uncorrectable error detected
 *     CL91_FEC_RAM2_LO_2BIT_INT_STATUS Two bit, uncorrectable error detected
 *     CL91_FEC_RAM2_HI_2BIT_INT_STATUS Two bit, uncorrectable error detected
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_2BITr (0x00109239 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_2BITr_SIZE 4

/*
 * This structure should be used to declare and program RX_X1_ECC_INTR_STS_2BIT.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_2BITr_s {
	uint32_t v[1];
	uint32_t rx_x1_ecc_intr_sts_2bit[1];
	uint32_t _rx_x1_ecc_intr_sts_2bit;
} BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_2BITr_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_2BITr_CLR(r) (r).rx_x1_ecc_intr_sts_2bit[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_2BITr_SET(r,d) (r).rx_x1_ecc_intr_sts_2bit[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_2BITr_GET(r) (r).rx_x1_ecc_intr_sts_2bit[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_2BITr_CL91_FEC_RAM2_HI_2BIT_INT_STATUSf_GET(r) ((((r).rx_x1_ecc_intr_sts_2bit[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_2BITr_CL91_FEC_RAM2_HI_2BIT_INT_STATUSf_SET(r,f) (r).rx_x1_ecc_intr_sts_2bit[0]=(((r).rx_x1_ecc_intr_sts_2bit[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_2BITr_CL91_FEC_RAM2_LO_2BIT_INT_STATUSf_GET(r) ((((r).rx_x1_ecc_intr_sts_2bit[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_2BITr_CL91_FEC_RAM2_LO_2BIT_INT_STATUSf_SET(r,f) (r).rx_x1_ecc_intr_sts_2bit[0]=(((r).rx_x1_ecc_intr_sts_2bit[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_2BITr_CL91_FEC_RAM1_HI_2BIT_INT_STATUSf_GET(r) ((((r).rx_x1_ecc_intr_sts_2bit[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_2BITr_CL91_FEC_RAM1_HI_2BIT_INT_STATUSf_SET(r,f) (r).rx_x1_ecc_intr_sts_2bit[0]=(((r).rx_x1_ecc_intr_sts_2bit[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_2BITr_CL91_FEC_RAM1_LO_2BIT_INT_STATUSf_GET(r) ((((r).rx_x1_ecc_intr_sts_2bit[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_2BITr_CL91_FEC_RAM1_LO_2BIT_INT_STATUSf_SET(r,f) (r).rx_x1_ecc_intr_sts_2bit[0]=(((r).rx_x1_ecc_intr_sts_2bit[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_2BITr_FEC_MEM_3_2BIT_INT_STATUSf_GET(r) ((((r).rx_x1_ecc_intr_sts_2bit[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_2BITr_FEC_MEM_3_2BIT_INT_STATUSf_SET(r,f) (r).rx_x1_ecc_intr_sts_2bit[0]=(((r).rx_x1_ecc_intr_sts_2bit[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_2BITr_FEC_MEM_2_2BIT_INT_STATUSf_GET(r) ((((r).rx_x1_ecc_intr_sts_2bit[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_2BITr_FEC_MEM_2_2BIT_INT_STATUSf_SET(r,f) (r).rx_x1_ecc_intr_sts_2bit[0]=(((r).rx_x1_ecc_intr_sts_2bit[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_2BITr_FEC_MEM_1_2BIT_INT_STATUSf_GET(r) ((((r).rx_x1_ecc_intr_sts_2bit[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_2BITr_FEC_MEM_1_2BIT_INT_STATUSf_SET(r,f) (r).rx_x1_ecc_intr_sts_2bit[0]=(((r).rx_x1_ecc_intr_sts_2bit[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_2BITr_FEC_MEM_0_2BIT_INT_STATUSf_GET(r) (((r).rx_x1_ecc_intr_sts_2bit[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_2BITr_FEC_MEM_0_2BIT_INT_STATUSf_SET(r,f) (r).rx_x1_ecc_intr_sts_2bit[0]=(((r).rx_x1_ecc_intr_sts_2bit[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_X1_ECC_INTR_STS_2BIT.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X1_ECC_INTR_STS_2BITr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_2BITr,(_r._rx_x1_ecc_intr_sts_2bit))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X1_ECC_INTR_STS_2BITr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_2BITr,(_r._rx_x1_ecc_intr_sts_2bit)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X1_ECC_INTR_STS_2BITr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_2BITr,(_r._rx_x1_ecc_intr_sts_2bit))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X1_ECC_INTR_STS_2BITr BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_2BITr
#define RX_X1_ECC_INTR_STS_2BITr_SIZE BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_2BITr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_2BITr_t RX_X1_ECC_INTR_STS_2BITr_t;
#define RX_X1_ECC_INTR_STS_2BITr_CLR BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_2BITr_CLR
#define RX_X1_ECC_INTR_STS_2BITr_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_2BITr_SET
#define RX_X1_ECC_INTR_STS_2BITr_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_2BITr_GET
#define RX_X1_ECC_INTR_STS_2BITr_CL91_FEC_RAM2_HI_2BIT_INT_STATUSf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_2BITr_CL91_FEC_RAM2_HI_2BIT_INT_STATUSf_GET
#define RX_X1_ECC_INTR_STS_2BITr_CL91_FEC_RAM2_HI_2BIT_INT_STATUSf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_2BITr_CL91_FEC_RAM2_HI_2BIT_INT_STATUSf_SET
#define RX_X1_ECC_INTR_STS_2BITr_CL91_FEC_RAM2_LO_2BIT_INT_STATUSf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_2BITr_CL91_FEC_RAM2_LO_2BIT_INT_STATUSf_GET
#define RX_X1_ECC_INTR_STS_2BITr_CL91_FEC_RAM2_LO_2BIT_INT_STATUSf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_2BITr_CL91_FEC_RAM2_LO_2BIT_INT_STATUSf_SET
#define RX_X1_ECC_INTR_STS_2BITr_CL91_FEC_RAM1_HI_2BIT_INT_STATUSf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_2BITr_CL91_FEC_RAM1_HI_2BIT_INT_STATUSf_GET
#define RX_X1_ECC_INTR_STS_2BITr_CL91_FEC_RAM1_HI_2BIT_INT_STATUSf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_2BITr_CL91_FEC_RAM1_HI_2BIT_INT_STATUSf_SET
#define RX_X1_ECC_INTR_STS_2BITr_CL91_FEC_RAM1_LO_2BIT_INT_STATUSf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_2BITr_CL91_FEC_RAM1_LO_2BIT_INT_STATUSf_GET
#define RX_X1_ECC_INTR_STS_2BITr_CL91_FEC_RAM1_LO_2BIT_INT_STATUSf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_2BITr_CL91_FEC_RAM1_LO_2BIT_INT_STATUSf_SET
#define RX_X1_ECC_INTR_STS_2BITr_FEC_MEM_3_2BIT_INT_STATUSf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_2BITr_FEC_MEM_3_2BIT_INT_STATUSf_GET
#define RX_X1_ECC_INTR_STS_2BITr_FEC_MEM_3_2BIT_INT_STATUSf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_2BITr_FEC_MEM_3_2BIT_INT_STATUSf_SET
#define RX_X1_ECC_INTR_STS_2BITr_FEC_MEM_2_2BIT_INT_STATUSf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_2BITr_FEC_MEM_2_2BIT_INT_STATUSf_GET
#define RX_X1_ECC_INTR_STS_2BITr_FEC_MEM_2_2BIT_INT_STATUSf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_2BITr_FEC_MEM_2_2BIT_INT_STATUSf_SET
#define RX_X1_ECC_INTR_STS_2BITr_FEC_MEM_1_2BIT_INT_STATUSf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_2BITr_FEC_MEM_1_2BIT_INT_STATUSf_GET
#define RX_X1_ECC_INTR_STS_2BITr_FEC_MEM_1_2BIT_INT_STATUSf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_2BITr_FEC_MEM_1_2BIT_INT_STATUSf_SET
#define RX_X1_ECC_INTR_STS_2BITr_FEC_MEM_0_2BIT_INT_STATUSf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_2BITr_FEC_MEM_0_2BIT_INT_STATUSf_GET
#define RX_X1_ECC_INTR_STS_2BITr_FEC_MEM_0_2BIT_INT_STATUSf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_2BITr_FEC_MEM_0_2BIT_INT_STATUSf_SET
#define READ_RX_X1_ECC_INTR_STS_2BITr BCMI_TSCF_GEN3_XGXS_READ_RX_X1_ECC_INTR_STS_2BITr
#define WRITE_RX_X1_ECC_INTR_STS_2BITr BCMI_TSCF_GEN3_XGXS_WRITE_RX_X1_ECC_INTR_STS_2BITr
#define MODIFY_RX_X1_ECC_INTR_STS_2BITr BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X1_ECC_INTR_STS_2BITr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_STS_2BITr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X1_ECC_INTR_EN_1BIT
 * BLOCKS:   RX_X1_ECC
 * REGADDR:  0x923a
 * DESC:     ECC 1-bit interrupt enable register (Physical lane based)
 * RESETVAL: 0xff (255)
 * ACCESS:   R/W
 * FIELDS:
 *     FEC_MEM_0_1BIT_INT_EN Enable for correctable error interrupt
 *     FEC_MEM_1_1BIT_INT_EN Enable for correctable error interrupt
 *     FEC_MEM_2_1BIT_INT_EN Enable for correctable error interrupt
 *     FEC_MEM_3_1BIT_INT_EN Enable for correctable error interrupt
 *     CL91_FEC_RAM1_LO_1BIT_INT_EN Enable for correctable error interrupt
 *     CL91_FEC_RAM1_HI_1BIT_INT_EN Enable for correctable error interrupt
 *     CL91_FEC_RAM2_LO_1BIT_INT_EN Enable for correctable error interrupt
 *     CL91_FEC_RAM2_HI_1BIT_INT_EN Enable for correctable error interrupt
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_1BITr (0x0010923a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_1BITr_SIZE 4

/*
 * This structure should be used to declare and program RX_X1_ECC_INTR_EN_1BIT.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_1BITr_s {
	uint32_t v[1];
	uint32_t rx_x1_ecc_intr_en_1bit[1];
	uint32_t _rx_x1_ecc_intr_en_1bit;
} BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_1BITr_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_1BITr_CLR(r) (r).rx_x1_ecc_intr_en_1bit[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_1BITr_SET(r,d) (r).rx_x1_ecc_intr_en_1bit[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_1BITr_GET(r) (r).rx_x1_ecc_intr_en_1bit[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_1BITr_CL91_FEC_RAM2_HI_1BIT_INT_ENf_GET(r) ((((r).rx_x1_ecc_intr_en_1bit[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_1BITr_CL91_FEC_RAM2_HI_1BIT_INT_ENf_SET(r,f) (r).rx_x1_ecc_intr_en_1bit[0]=(((r).rx_x1_ecc_intr_en_1bit[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_1BITr_CL91_FEC_RAM2_LO_1BIT_INT_ENf_GET(r) ((((r).rx_x1_ecc_intr_en_1bit[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_1BITr_CL91_FEC_RAM2_LO_1BIT_INT_ENf_SET(r,f) (r).rx_x1_ecc_intr_en_1bit[0]=(((r).rx_x1_ecc_intr_en_1bit[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_1BITr_CL91_FEC_RAM1_HI_1BIT_INT_ENf_GET(r) ((((r).rx_x1_ecc_intr_en_1bit[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_1BITr_CL91_FEC_RAM1_HI_1BIT_INT_ENf_SET(r,f) (r).rx_x1_ecc_intr_en_1bit[0]=(((r).rx_x1_ecc_intr_en_1bit[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_1BITr_CL91_FEC_RAM1_LO_1BIT_INT_ENf_GET(r) ((((r).rx_x1_ecc_intr_en_1bit[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_1BITr_CL91_FEC_RAM1_LO_1BIT_INT_ENf_SET(r,f) (r).rx_x1_ecc_intr_en_1bit[0]=(((r).rx_x1_ecc_intr_en_1bit[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_1BITr_FEC_MEM_3_1BIT_INT_ENf_GET(r) ((((r).rx_x1_ecc_intr_en_1bit[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_1BITr_FEC_MEM_3_1BIT_INT_ENf_SET(r,f) (r).rx_x1_ecc_intr_en_1bit[0]=(((r).rx_x1_ecc_intr_en_1bit[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_1BITr_FEC_MEM_2_1BIT_INT_ENf_GET(r) ((((r).rx_x1_ecc_intr_en_1bit[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_1BITr_FEC_MEM_2_1BIT_INT_ENf_SET(r,f) (r).rx_x1_ecc_intr_en_1bit[0]=(((r).rx_x1_ecc_intr_en_1bit[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_1BITr_FEC_MEM_1_1BIT_INT_ENf_GET(r) ((((r).rx_x1_ecc_intr_en_1bit[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_1BITr_FEC_MEM_1_1BIT_INT_ENf_SET(r,f) (r).rx_x1_ecc_intr_en_1bit[0]=(((r).rx_x1_ecc_intr_en_1bit[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_1BITr_FEC_MEM_0_1BIT_INT_ENf_GET(r) (((r).rx_x1_ecc_intr_en_1bit[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_1BITr_FEC_MEM_0_1BIT_INT_ENf_SET(r,f) (r).rx_x1_ecc_intr_en_1bit[0]=(((r).rx_x1_ecc_intr_en_1bit[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_X1_ECC_INTR_EN_1BIT.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X1_ECC_INTR_EN_1BITr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_1BITr,(_r._rx_x1_ecc_intr_en_1bit))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X1_ECC_INTR_EN_1BITr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_1BITr,(_r._rx_x1_ecc_intr_en_1bit)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X1_ECC_INTR_EN_1BITr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_1BITr,(_r._rx_x1_ecc_intr_en_1bit))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X1_ECC_INTR_EN_1BITr BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_1BITr
#define RX_X1_ECC_INTR_EN_1BITr_SIZE BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_1BITr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_1BITr_t RX_X1_ECC_INTR_EN_1BITr_t;
#define RX_X1_ECC_INTR_EN_1BITr_CLR BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_1BITr_CLR
#define RX_X1_ECC_INTR_EN_1BITr_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_1BITr_SET
#define RX_X1_ECC_INTR_EN_1BITr_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_1BITr_GET
#define RX_X1_ECC_INTR_EN_1BITr_CL91_FEC_RAM2_HI_1BIT_INT_ENf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_1BITr_CL91_FEC_RAM2_HI_1BIT_INT_ENf_GET
#define RX_X1_ECC_INTR_EN_1BITr_CL91_FEC_RAM2_HI_1BIT_INT_ENf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_1BITr_CL91_FEC_RAM2_HI_1BIT_INT_ENf_SET
#define RX_X1_ECC_INTR_EN_1BITr_CL91_FEC_RAM2_LO_1BIT_INT_ENf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_1BITr_CL91_FEC_RAM2_LO_1BIT_INT_ENf_GET
#define RX_X1_ECC_INTR_EN_1BITr_CL91_FEC_RAM2_LO_1BIT_INT_ENf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_1BITr_CL91_FEC_RAM2_LO_1BIT_INT_ENf_SET
#define RX_X1_ECC_INTR_EN_1BITr_CL91_FEC_RAM1_HI_1BIT_INT_ENf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_1BITr_CL91_FEC_RAM1_HI_1BIT_INT_ENf_GET
#define RX_X1_ECC_INTR_EN_1BITr_CL91_FEC_RAM1_HI_1BIT_INT_ENf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_1BITr_CL91_FEC_RAM1_HI_1BIT_INT_ENf_SET
#define RX_X1_ECC_INTR_EN_1BITr_CL91_FEC_RAM1_LO_1BIT_INT_ENf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_1BITr_CL91_FEC_RAM1_LO_1BIT_INT_ENf_GET
#define RX_X1_ECC_INTR_EN_1BITr_CL91_FEC_RAM1_LO_1BIT_INT_ENf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_1BITr_CL91_FEC_RAM1_LO_1BIT_INT_ENf_SET
#define RX_X1_ECC_INTR_EN_1BITr_FEC_MEM_3_1BIT_INT_ENf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_1BITr_FEC_MEM_3_1BIT_INT_ENf_GET
#define RX_X1_ECC_INTR_EN_1BITr_FEC_MEM_3_1BIT_INT_ENf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_1BITr_FEC_MEM_3_1BIT_INT_ENf_SET
#define RX_X1_ECC_INTR_EN_1BITr_FEC_MEM_2_1BIT_INT_ENf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_1BITr_FEC_MEM_2_1BIT_INT_ENf_GET
#define RX_X1_ECC_INTR_EN_1BITr_FEC_MEM_2_1BIT_INT_ENf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_1BITr_FEC_MEM_2_1BIT_INT_ENf_SET
#define RX_X1_ECC_INTR_EN_1BITr_FEC_MEM_1_1BIT_INT_ENf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_1BITr_FEC_MEM_1_1BIT_INT_ENf_GET
#define RX_X1_ECC_INTR_EN_1BITr_FEC_MEM_1_1BIT_INT_ENf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_1BITr_FEC_MEM_1_1BIT_INT_ENf_SET
#define RX_X1_ECC_INTR_EN_1BITr_FEC_MEM_0_1BIT_INT_ENf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_1BITr_FEC_MEM_0_1BIT_INT_ENf_GET
#define RX_X1_ECC_INTR_EN_1BITr_FEC_MEM_0_1BIT_INT_ENf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_1BITr_FEC_MEM_0_1BIT_INT_ENf_SET
#define READ_RX_X1_ECC_INTR_EN_1BITr BCMI_TSCF_GEN3_XGXS_READ_RX_X1_ECC_INTR_EN_1BITr
#define WRITE_RX_X1_ECC_INTR_EN_1BITr BCMI_TSCF_GEN3_XGXS_WRITE_RX_X1_ECC_INTR_EN_1BITr
#define MODIFY_RX_X1_ECC_INTR_EN_1BITr BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X1_ECC_INTR_EN_1BITr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_1BITr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X1_ECC_INTR_EN_2BIT
 * BLOCKS:   RX_X1_ECC
 * REGADDR:  0x923b
 * DESC:     ECC 2-bit interrupt enable register (Physical lane based)
 * RESETVAL: 0xff (255)
 * ACCESS:   R/W
 * FIELDS:
 *     FEC_MEM_0_2BIT_INT_EN Enable for uncorrectable error interrupt
 *     FEC_MEM_1_2BIT_INT_EN Enable for uncorrectable error interrupt
 *     FEC_MEM_2_2BIT_INT_EN Enable for uncorrectable error interrupt
 *     FEC_MEM_3_2BIT_INT_EN Enable for uncorrectable error interrupt
 *     CL91_FEC_RAM1_LO_2BIT_INT_EN Enable for uncorrectable error interrupt
 *     CL91_FEC_RAM1_HI_2BIT_INT_EN Enable for uncorrectable error interrupt
 *     CL91_FEC_RAM2_LO_2BIT_INT_EN Enable for uncorrectable error interrupt
 *     CL91_FEC_RAM2_HI_2BIT_INT_EN Enable for uncorrectable error interrupt
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_2BITr (0x0010923b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_2BITr_SIZE 4

/*
 * This structure should be used to declare and program RX_X1_ECC_INTR_EN_2BIT.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_2BITr_s {
	uint32_t v[1];
	uint32_t rx_x1_ecc_intr_en_2bit[1];
	uint32_t _rx_x1_ecc_intr_en_2bit;
} BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_2BITr_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_2BITr_CLR(r) (r).rx_x1_ecc_intr_en_2bit[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_2BITr_SET(r,d) (r).rx_x1_ecc_intr_en_2bit[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_2BITr_GET(r) (r).rx_x1_ecc_intr_en_2bit[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_2BITr_CL91_FEC_RAM2_HI_2BIT_INT_ENf_GET(r) ((((r).rx_x1_ecc_intr_en_2bit[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_2BITr_CL91_FEC_RAM2_HI_2BIT_INT_ENf_SET(r,f) (r).rx_x1_ecc_intr_en_2bit[0]=(((r).rx_x1_ecc_intr_en_2bit[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_2BITr_CL91_FEC_RAM2_LO_2BIT_INT_ENf_GET(r) ((((r).rx_x1_ecc_intr_en_2bit[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_2BITr_CL91_FEC_RAM2_LO_2BIT_INT_ENf_SET(r,f) (r).rx_x1_ecc_intr_en_2bit[0]=(((r).rx_x1_ecc_intr_en_2bit[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_2BITr_CL91_FEC_RAM1_HI_2BIT_INT_ENf_GET(r) ((((r).rx_x1_ecc_intr_en_2bit[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_2BITr_CL91_FEC_RAM1_HI_2BIT_INT_ENf_SET(r,f) (r).rx_x1_ecc_intr_en_2bit[0]=(((r).rx_x1_ecc_intr_en_2bit[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_2BITr_CL91_FEC_RAM1_LO_2BIT_INT_ENf_GET(r) ((((r).rx_x1_ecc_intr_en_2bit[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_2BITr_CL91_FEC_RAM1_LO_2BIT_INT_ENf_SET(r,f) (r).rx_x1_ecc_intr_en_2bit[0]=(((r).rx_x1_ecc_intr_en_2bit[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_2BITr_FEC_MEM_3_2BIT_INT_ENf_GET(r) ((((r).rx_x1_ecc_intr_en_2bit[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_2BITr_FEC_MEM_3_2BIT_INT_ENf_SET(r,f) (r).rx_x1_ecc_intr_en_2bit[0]=(((r).rx_x1_ecc_intr_en_2bit[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_2BITr_FEC_MEM_2_2BIT_INT_ENf_GET(r) ((((r).rx_x1_ecc_intr_en_2bit[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_2BITr_FEC_MEM_2_2BIT_INT_ENf_SET(r,f) (r).rx_x1_ecc_intr_en_2bit[0]=(((r).rx_x1_ecc_intr_en_2bit[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_2BITr_FEC_MEM_1_2BIT_INT_ENf_GET(r) ((((r).rx_x1_ecc_intr_en_2bit[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_2BITr_FEC_MEM_1_2BIT_INT_ENf_SET(r,f) (r).rx_x1_ecc_intr_en_2bit[0]=(((r).rx_x1_ecc_intr_en_2bit[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_2BITr_FEC_MEM_0_2BIT_INT_ENf_GET(r) (((r).rx_x1_ecc_intr_en_2bit[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_2BITr_FEC_MEM_0_2BIT_INT_ENf_SET(r,f) (r).rx_x1_ecc_intr_en_2bit[0]=(((r).rx_x1_ecc_intr_en_2bit[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_X1_ECC_INTR_EN_2BIT.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X1_ECC_INTR_EN_2BITr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_2BITr,(_r._rx_x1_ecc_intr_en_2bit))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X1_ECC_INTR_EN_2BITr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_2BITr,(_r._rx_x1_ecc_intr_en_2bit)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X1_ECC_INTR_EN_2BITr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_2BITr,(_r._rx_x1_ecc_intr_en_2bit))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X1_ECC_INTR_EN_2BITr BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_2BITr
#define RX_X1_ECC_INTR_EN_2BITr_SIZE BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_2BITr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_2BITr_t RX_X1_ECC_INTR_EN_2BITr_t;
#define RX_X1_ECC_INTR_EN_2BITr_CLR BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_2BITr_CLR
#define RX_X1_ECC_INTR_EN_2BITr_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_2BITr_SET
#define RX_X1_ECC_INTR_EN_2BITr_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_2BITr_GET
#define RX_X1_ECC_INTR_EN_2BITr_CL91_FEC_RAM2_HI_2BIT_INT_ENf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_2BITr_CL91_FEC_RAM2_HI_2BIT_INT_ENf_GET
#define RX_X1_ECC_INTR_EN_2BITr_CL91_FEC_RAM2_HI_2BIT_INT_ENf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_2BITr_CL91_FEC_RAM2_HI_2BIT_INT_ENf_SET
#define RX_X1_ECC_INTR_EN_2BITr_CL91_FEC_RAM2_LO_2BIT_INT_ENf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_2BITr_CL91_FEC_RAM2_LO_2BIT_INT_ENf_GET
#define RX_X1_ECC_INTR_EN_2BITr_CL91_FEC_RAM2_LO_2BIT_INT_ENf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_2BITr_CL91_FEC_RAM2_LO_2BIT_INT_ENf_SET
#define RX_X1_ECC_INTR_EN_2BITr_CL91_FEC_RAM1_HI_2BIT_INT_ENf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_2BITr_CL91_FEC_RAM1_HI_2BIT_INT_ENf_GET
#define RX_X1_ECC_INTR_EN_2BITr_CL91_FEC_RAM1_HI_2BIT_INT_ENf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_2BITr_CL91_FEC_RAM1_HI_2BIT_INT_ENf_SET
#define RX_X1_ECC_INTR_EN_2BITr_CL91_FEC_RAM1_LO_2BIT_INT_ENf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_2BITr_CL91_FEC_RAM1_LO_2BIT_INT_ENf_GET
#define RX_X1_ECC_INTR_EN_2BITr_CL91_FEC_RAM1_LO_2BIT_INT_ENf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_2BITr_CL91_FEC_RAM1_LO_2BIT_INT_ENf_SET
#define RX_X1_ECC_INTR_EN_2BITr_FEC_MEM_3_2BIT_INT_ENf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_2BITr_FEC_MEM_3_2BIT_INT_ENf_GET
#define RX_X1_ECC_INTR_EN_2BITr_FEC_MEM_3_2BIT_INT_ENf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_2BITr_FEC_MEM_3_2BIT_INT_ENf_SET
#define RX_X1_ECC_INTR_EN_2BITr_FEC_MEM_2_2BIT_INT_ENf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_2BITr_FEC_MEM_2_2BIT_INT_ENf_GET
#define RX_X1_ECC_INTR_EN_2BITr_FEC_MEM_2_2BIT_INT_ENf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_2BITr_FEC_MEM_2_2BIT_INT_ENf_SET
#define RX_X1_ECC_INTR_EN_2BITr_FEC_MEM_1_2BIT_INT_ENf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_2BITr_FEC_MEM_1_2BIT_INT_ENf_GET
#define RX_X1_ECC_INTR_EN_2BITr_FEC_MEM_1_2BIT_INT_ENf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_2BITr_FEC_MEM_1_2BIT_INT_ENf_SET
#define RX_X1_ECC_INTR_EN_2BITr_FEC_MEM_0_2BIT_INT_ENf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_2BITr_FEC_MEM_0_2BIT_INT_ENf_GET
#define RX_X1_ECC_INTR_EN_2BITr_FEC_MEM_0_2BIT_INT_ENf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_2BITr_FEC_MEM_0_2BIT_INT_ENf_SET
#define READ_RX_X1_ECC_INTR_EN_2BITr BCMI_TSCF_GEN3_XGXS_READ_RX_X1_ECC_INTR_EN_2BITr
#define WRITE_RX_X1_ECC_INTR_EN_2BITr BCMI_TSCF_GEN3_XGXS_WRITE_RX_X1_ECC_INTR_EN_2BITr
#define MODIFY_RX_X1_ECC_INTR_EN_2BITr BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X1_ECC_INTR_EN_2BITr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_INTR_EN_2BITr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X1_ECC_DIS_ECC_MEM
 * BLOCKS:   RX_X1_ECC
 * REGADDR:  0x923c
 * DESC:     Disable ECC register (Physical lane based)
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     DISABLE_ECC_FEC_MEM_0 disable ECC check/generationThis bit should not be changed from 1 to 0 in the middle of the test
 *     DISABLE_ECC_FEC_MEM_1 disable ECC check/generationThis bit should not be changed from 1 to 0 in the middle of the test
 *     DISABLE_ECC_FEC_MEM_2 disable ECC check/generationThis bit should not be changed from 1 to 0 in the middle of the test
 *     DISABLE_ECC_FEC_MEM_3 disable ECC check/generationThis bit should not be changed from 1 to 0 in the middle of the test
 *     DISABLE_ECC_CL91_FEC_RAM1_LO disable ECC check/generationThis bit should not be changed from 1 to 0 in the middle of the test
 *     DISABLE_ECC_CL91_FEC_RAM1_HI disable ECC check/generationThis bit should not be changed from 1 to 0 in the middle of the test
 *     DISABLE_ECC_CL91_FEC_RAM2_LO disable ECC check/generationThis bit should not be changed from 1 to 0 in the middle of the test
 *     DISABLE_ECC_CL91_FEC_RAM2_HI disable ECC check/generationThis bit should not be changed from 1 to 0 in the middle of the test
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_DIS_ECC_MEMr (0x0010923c | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_DIS_ECC_MEMr_SIZE 4

/*
 * This structure should be used to declare and program RX_X1_ECC_DIS_ECC_MEM.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_DIS_ECC_MEMr_s {
	uint32_t v[1];
	uint32_t rx_x1_ecc_dis_ecc_mem[1];
	uint32_t _rx_x1_ecc_dis_ecc_mem;
} BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_DIS_ECC_MEMr_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_DIS_ECC_MEMr_CLR(r) (r).rx_x1_ecc_dis_ecc_mem[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_DIS_ECC_MEMr_SET(r,d) (r).rx_x1_ecc_dis_ecc_mem[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_DIS_ECC_MEMr_GET(r) (r).rx_x1_ecc_dis_ecc_mem[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_DIS_ECC_MEMr_DISABLE_ECC_CL91_FEC_RAM2_HIf_GET(r) ((((r).rx_x1_ecc_dis_ecc_mem[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_DIS_ECC_MEMr_DISABLE_ECC_CL91_FEC_RAM2_HIf_SET(r,f) (r).rx_x1_ecc_dis_ecc_mem[0]=(((r).rx_x1_ecc_dis_ecc_mem[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_DIS_ECC_MEMr_DISABLE_ECC_CL91_FEC_RAM2_LOf_GET(r) ((((r).rx_x1_ecc_dis_ecc_mem[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_DIS_ECC_MEMr_DISABLE_ECC_CL91_FEC_RAM2_LOf_SET(r,f) (r).rx_x1_ecc_dis_ecc_mem[0]=(((r).rx_x1_ecc_dis_ecc_mem[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_DIS_ECC_MEMr_DISABLE_ECC_CL91_FEC_RAM1_HIf_GET(r) ((((r).rx_x1_ecc_dis_ecc_mem[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_DIS_ECC_MEMr_DISABLE_ECC_CL91_FEC_RAM1_HIf_SET(r,f) (r).rx_x1_ecc_dis_ecc_mem[0]=(((r).rx_x1_ecc_dis_ecc_mem[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_DIS_ECC_MEMr_DISABLE_ECC_CL91_FEC_RAM1_LOf_GET(r) ((((r).rx_x1_ecc_dis_ecc_mem[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_DIS_ECC_MEMr_DISABLE_ECC_CL91_FEC_RAM1_LOf_SET(r,f) (r).rx_x1_ecc_dis_ecc_mem[0]=(((r).rx_x1_ecc_dis_ecc_mem[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_DIS_ECC_MEMr_DISABLE_ECC_FEC_MEM_3f_GET(r) ((((r).rx_x1_ecc_dis_ecc_mem[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_DIS_ECC_MEMr_DISABLE_ECC_FEC_MEM_3f_SET(r,f) (r).rx_x1_ecc_dis_ecc_mem[0]=(((r).rx_x1_ecc_dis_ecc_mem[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_DIS_ECC_MEMr_DISABLE_ECC_FEC_MEM_2f_GET(r) ((((r).rx_x1_ecc_dis_ecc_mem[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_DIS_ECC_MEMr_DISABLE_ECC_FEC_MEM_2f_SET(r,f) (r).rx_x1_ecc_dis_ecc_mem[0]=(((r).rx_x1_ecc_dis_ecc_mem[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_DIS_ECC_MEMr_DISABLE_ECC_FEC_MEM_1f_GET(r) ((((r).rx_x1_ecc_dis_ecc_mem[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_DIS_ECC_MEMr_DISABLE_ECC_FEC_MEM_1f_SET(r,f) (r).rx_x1_ecc_dis_ecc_mem[0]=(((r).rx_x1_ecc_dis_ecc_mem[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_DIS_ECC_MEMr_DISABLE_ECC_FEC_MEM_0f_GET(r) (((r).rx_x1_ecc_dis_ecc_mem[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_DIS_ECC_MEMr_DISABLE_ECC_FEC_MEM_0f_SET(r,f) (r).rx_x1_ecc_dis_ecc_mem[0]=(((r).rx_x1_ecc_dis_ecc_mem[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_X1_ECC_DIS_ECC_MEM.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X1_ECC_DIS_ECC_MEMr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_DIS_ECC_MEMr,(_r._rx_x1_ecc_dis_ecc_mem))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X1_ECC_DIS_ECC_MEMr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_DIS_ECC_MEMr,(_r._rx_x1_ecc_dis_ecc_mem)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X1_ECC_DIS_ECC_MEMr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_DIS_ECC_MEMr,(_r._rx_x1_ecc_dis_ecc_mem))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X1_ECC_DIS_ECC_MEMr BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_DIS_ECC_MEMr
#define RX_X1_ECC_DIS_ECC_MEMr_SIZE BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_DIS_ECC_MEMr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_DIS_ECC_MEMr_t RX_X1_ECC_DIS_ECC_MEMr_t;
#define RX_X1_ECC_DIS_ECC_MEMr_CLR BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_DIS_ECC_MEMr_CLR
#define RX_X1_ECC_DIS_ECC_MEMr_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_DIS_ECC_MEMr_SET
#define RX_X1_ECC_DIS_ECC_MEMr_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_DIS_ECC_MEMr_GET
#define RX_X1_ECC_DIS_ECC_MEMr_DISABLE_ECC_CL91_FEC_RAM2_HIf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_DIS_ECC_MEMr_DISABLE_ECC_CL91_FEC_RAM2_HIf_GET
#define RX_X1_ECC_DIS_ECC_MEMr_DISABLE_ECC_CL91_FEC_RAM2_HIf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_DIS_ECC_MEMr_DISABLE_ECC_CL91_FEC_RAM2_HIf_SET
#define RX_X1_ECC_DIS_ECC_MEMr_DISABLE_ECC_CL91_FEC_RAM2_LOf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_DIS_ECC_MEMr_DISABLE_ECC_CL91_FEC_RAM2_LOf_GET
#define RX_X1_ECC_DIS_ECC_MEMr_DISABLE_ECC_CL91_FEC_RAM2_LOf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_DIS_ECC_MEMr_DISABLE_ECC_CL91_FEC_RAM2_LOf_SET
#define RX_X1_ECC_DIS_ECC_MEMr_DISABLE_ECC_CL91_FEC_RAM1_HIf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_DIS_ECC_MEMr_DISABLE_ECC_CL91_FEC_RAM1_HIf_GET
#define RX_X1_ECC_DIS_ECC_MEMr_DISABLE_ECC_CL91_FEC_RAM1_HIf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_DIS_ECC_MEMr_DISABLE_ECC_CL91_FEC_RAM1_HIf_SET
#define RX_X1_ECC_DIS_ECC_MEMr_DISABLE_ECC_CL91_FEC_RAM1_LOf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_DIS_ECC_MEMr_DISABLE_ECC_CL91_FEC_RAM1_LOf_GET
#define RX_X1_ECC_DIS_ECC_MEMr_DISABLE_ECC_CL91_FEC_RAM1_LOf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_DIS_ECC_MEMr_DISABLE_ECC_CL91_FEC_RAM1_LOf_SET
#define RX_X1_ECC_DIS_ECC_MEMr_DISABLE_ECC_FEC_MEM_3f_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_DIS_ECC_MEMr_DISABLE_ECC_FEC_MEM_3f_GET
#define RX_X1_ECC_DIS_ECC_MEMr_DISABLE_ECC_FEC_MEM_3f_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_DIS_ECC_MEMr_DISABLE_ECC_FEC_MEM_3f_SET
#define RX_X1_ECC_DIS_ECC_MEMr_DISABLE_ECC_FEC_MEM_2f_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_DIS_ECC_MEMr_DISABLE_ECC_FEC_MEM_2f_GET
#define RX_X1_ECC_DIS_ECC_MEMr_DISABLE_ECC_FEC_MEM_2f_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_DIS_ECC_MEMr_DISABLE_ECC_FEC_MEM_2f_SET
#define RX_X1_ECC_DIS_ECC_MEMr_DISABLE_ECC_FEC_MEM_1f_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_DIS_ECC_MEMr_DISABLE_ECC_FEC_MEM_1f_GET
#define RX_X1_ECC_DIS_ECC_MEMr_DISABLE_ECC_FEC_MEM_1f_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_DIS_ECC_MEMr_DISABLE_ECC_FEC_MEM_1f_SET
#define RX_X1_ECC_DIS_ECC_MEMr_DISABLE_ECC_FEC_MEM_0f_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_DIS_ECC_MEMr_DISABLE_ECC_FEC_MEM_0f_GET
#define RX_X1_ECC_DIS_ECC_MEMr_DISABLE_ECC_FEC_MEM_0f_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_DIS_ECC_MEMr_DISABLE_ECC_FEC_MEM_0f_SET
#define READ_RX_X1_ECC_DIS_ECC_MEMr BCMI_TSCF_GEN3_XGXS_READ_RX_X1_ECC_DIS_ECC_MEMr
#define WRITE_RX_X1_ECC_DIS_ECC_MEMr BCMI_TSCF_GEN3_XGXS_WRITE_RX_X1_ECC_DIS_ECC_MEMr
#define MODIFY_RX_X1_ECC_DIS_ECC_MEMr BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X1_ECC_DIS_ECC_MEMr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_DIS_ECC_MEMr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X1_ECC_CORRUPT0
 * BLOCKS:   RX_X1_ECC
 * REGADDR:  0x923d
 * DESC:     Corrupt ECC register (Physical lane based)
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CORRUPT_ECC_FEC_MEM_0 ECC error injection2'b01 - Inject 2-bit error on write data2'b10 - Inject 1-bit error on read data2'b11 - Inject 2-bit error on read data
 *     CORRUPT_ECC_FEC_MEM_1 ECC error injection2'b01 - Inject 2-bit error on write data2'b10 - Inject 1-bit error on read data2'b11 - Inject 2-bit error on read data
 *     CORRUPT_ECC_FEC_MEM_2 ECC error injection2'b01 - Inject 2-bit error on write data2'b10 - Inject 1-bit error on read data2'b11 - Inject 2-bit error on read data
 *     CORRUPT_ECC_FEC_MEM_3 ECC error injection2'b01 - Inject 2-bit error on write data2'b10 - Inject 1-bit error on read data2'b11 - Inject 2-bit error on read data
 *     CORRUPT_ECC_CL91_FEC_RAM1_LO ECC error injection2'b01 - Inject 2-bit error on write data2'b10 - Inject 1-bit error on read data2'b11 - Inject 2-bit error on read data
 *     CORRUPT_ECC_CL91_FEC_RAM1_HI ECC error injection2'b01 - Inject 2-bit error on write data2'b10 - Inject 1-bit error on read data2'b11 - Inject 2-bit error on read data
 *     CORRUPT_ECC_CL91_FEC_RAM2_LO ECC error injection2'b01 - Inject 2-bit error on write data2'b10 - Inject 1-bit error on read data2'b11 - Inject 2-bit error on read data
 *     CORRUPT_ECC_CL91_FEC_RAM2_HI ECC error injection2'b01 - Inject 2-bit error on write data2'b10 - Inject 1-bit error on read data2'b11 - Inject 2-bit error on read data
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_CORRUPT0r (0x0010923d | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_CORRUPT0r_SIZE 4

/*
 * This structure should be used to declare and program RX_X1_ECC_CORRUPT0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_CORRUPT0r_s {
	uint32_t v[1];
	uint32_t rx_x1_ecc_corrupt0[1];
	uint32_t _rx_x1_ecc_corrupt0;
} BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_CORRUPT0r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_CORRUPT0r_CLR(r) (r).rx_x1_ecc_corrupt0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_CORRUPT0r_SET(r,d) (r).rx_x1_ecc_corrupt0[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_CORRUPT0r_GET(r) (r).rx_x1_ecc_corrupt0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_CORRUPT0r_CORRUPT_ECC_CL91_FEC_RAM2_HIf_GET(r) ((((r).rx_x1_ecc_corrupt0[0]) >> 14) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_CORRUPT0r_CORRUPT_ECC_CL91_FEC_RAM2_HIf_SET(r,f) (r).rx_x1_ecc_corrupt0[0]=(((r).rx_x1_ecc_corrupt0[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_CORRUPT0r_CORRUPT_ECC_CL91_FEC_RAM2_LOf_GET(r) ((((r).rx_x1_ecc_corrupt0[0]) >> 12) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_CORRUPT0r_CORRUPT_ECC_CL91_FEC_RAM2_LOf_SET(r,f) (r).rx_x1_ecc_corrupt0[0]=(((r).rx_x1_ecc_corrupt0[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12)) | (3 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_CORRUPT0r_CORRUPT_ECC_CL91_FEC_RAM1_HIf_GET(r) ((((r).rx_x1_ecc_corrupt0[0]) >> 10) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_CORRUPT0r_CORRUPT_ECC_CL91_FEC_RAM1_HIf_SET(r,f) (r).rx_x1_ecc_corrupt0[0]=(((r).rx_x1_ecc_corrupt0[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10)) | (3 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_CORRUPT0r_CORRUPT_ECC_CL91_FEC_RAM1_LOf_GET(r) ((((r).rx_x1_ecc_corrupt0[0]) >> 8) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_CORRUPT0r_CORRUPT_ECC_CL91_FEC_RAM1_LOf_SET(r,f) (r).rx_x1_ecc_corrupt0[0]=(((r).rx_x1_ecc_corrupt0[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_CORRUPT0r_CORRUPT_ECC_FEC_MEM_3f_GET(r) ((((r).rx_x1_ecc_corrupt0[0]) >> 6) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_CORRUPT0r_CORRUPT_ECC_FEC_MEM_3f_SET(r,f) (r).rx_x1_ecc_corrupt0[0]=(((r).rx_x1_ecc_corrupt0[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6)) | (3 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_CORRUPT0r_CORRUPT_ECC_FEC_MEM_2f_GET(r) ((((r).rx_x1_ecc_corrupt0[0]) >> 4) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_CORRUPT0r_CORRUPT_ECC_FEC_MEM_2f_SET(r,f) (r).rx_x1_ecc_corrupt0[0]=(((r).rx_x1_ecc_corrupt0[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_CORRUPT0r_CORRUPT_ECC_FEC_MEM_1f_GET(r) ((((r).rx_x1_ecc_corrupt0[0]) >> 2) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_CORRUPT0r_CORRUPT_ECC_FEC_MEM_1f_SET(r,f) (r).rx_x1_ecc_corrupt0[0]=(((r).rx_x1_ecc_corrupt0[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2)) | (3 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_CORRUPT0r_CORRUPT_ECC_FEC_MEM_0f_GET(r) (((r).rx_x1_ecc_corrupt0[0]) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_CORRUPT0r_CORRUPT_ECC_FEC_MEM_0f_SET(r,f) (r).rx_x1_ecc_corrupt0[0]=(((r).rx_x1_ecc_corrupt0[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access RX_X1_ECC_CORRUPT0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X1_ECC_CORRUPT0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_CORRUPT0r,(_r._rx_x1_ecc_corrupt0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X1_ECC_CORRUPT0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_CORRUPT0r,(_r._rx_x1_ecc_corrupt0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X1_ECC_CORRUPT0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_CORRUPT0r,(_r._rx_x1_ecc_corrupt0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X1_ECC_CORRUPT0r BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_CORRUPT0r
#define RX_X1_ECC_CORRUPT0r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_CORRUPT0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_CORRUPT0r_t RX_X1_ECC_CORRUPT0r_t;
#define RX_X1_ECC_CORRUPT0r_CLR BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_CORRUPT0r_CLR
#define RX_X1_ECC_CORRUPT0r_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_CORRUPT0r_SET
#define RX_X1_ECC_CORRUPT0r_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_CORRUPT0r_GET
#define RX_X1_ECC_CORRUPT0r_CORRUPT_ECC_CL91_FEC_RAM2_HIf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_CORRUPT0r_CORRUPT_ECC_CL91_FEC_RAM2_HIf_GET
#define RX_X1_ECC_CORRUPT0r_CORRUPT_ECC_CL91_FEC_RAM2_HIf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_CORRUPT0r_CORRUPT_ECC_CL91_FEC_RAM2_HIf_SET
#define RX_X1_ECC_CORRUPT0r_CORRUPT_ECC_CL91_FEC_RAM2_LOf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_CORRUPT0r_CORRUPT_ECC_CL91_FEC_RAM2_LOf_GET
#define RX_X1_ECC_CORRUPT0r_CORRUPT_ECC_CL91_FEC_RAM2_LOf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_CORRUPT0r_CORRUPT_ECC_CL91_FEC_RAM2_LOf_SET
#define RX_X1_ECC_CORRUPT0r_CORRUPT_ECC_CL91_FEC_RAM1_HIf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_CORRUPT0r_CORRUPT_ECC_CL91_FEC_RAM1_HIf_GET
#define RX_X1_ECC_CORRUPT0r_CORRUPT_ECC_CL91_FEC_RAM1_HIf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_CORRUPT0r_CORRUPT_ECC_CL91_FEC_RAM1_HIf_SET
#define RX_X1_ECC_CORRUPT0r_CORRUPT_ECC_CL91_FEC_RAM1_LOf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_CORRUPT0r_CORRUPT_ECC_CL91_FEC_RAM1_LOf_GET
#define RX_X1_ECC_CORRUPT0r_CORRUPT_ECC_CL91_FEC_RAM1_LOf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_CORRUPT0r_CORRUPT_ECC_CL91_FEC_RAM1_LOf_SET
#define RX_X1_ECC_CORRUPT0r_CORRUPT_ECC_FEC_MEM_3f_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_CORRUPT0r_CORRUPT_ECC_FEC_MEM_3f_GET
#define RX_X1_ECC_CORRUPT0r_CORRUPT_ECC_FEC_MEM_3f_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_CORRUPT0r_CORRUPT_ECC_FEC_MEM_3f_SET
#define RX_X1_ECC_CORRUPT0r_CORRUPT_ECC_FEC_MEM_2f_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_CORRUPT0r_CORRUPT_ECC_FEC_MEM_2f_GET
#define RX_X1_ECC_CORRUPT0r_CORRUPT_ECC_FEC_MEM_2f_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_CORRUPT0r_CORRUPT_ECC_FEC_MEM_2f_SET
#define RX_X1_ECC_CORRUPT0r_CORRUPT_ECC_FEC_MEM_1f_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_CORRUPT0r_CORRUPT_ECC_FEC_MEM_1f_GET
#define RX_X1_ECC_CORRUPT0r_CORRUPT_ECC_FEC_MEM_1f_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_CORRUPT0r_CORRUPT_ECC_FEC_MEM_1f_SET
#define RX_X1_ECC_CORRUPT0r_CORRUPT_ECC_FEC_MEM_0f_GET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_CORRUPT0r_CORRUPT_ECC_FEC_MEM_0f_GET
#define RX_X1_ECC_CORRUPT0r_CORRUPT_ECC_FEC_MEM_0f_SET BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_CORRUPT0r_CORRUPT_ECC_FEC_MEM_0f_SET
#define READ_RX_X1_ECC_CORRUPT0r BCMI_TSCF_GEN3_XGXS_READ_RX_X1_ECC_CORRUPT0r
#define WRITE_RX_X1_ECC_CORRUPT0r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X1_ECC_CORRUPT0r
#define MODIFY_RX_X1_ECC_CORRUPT0r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X1_ECC_CORRUPT0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X1_ECC_CORRUPT0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X1_OUI_UPR
 * BLOCKS:   AN_X1_CONTROL
 * REGADDR:  0x9240
 * DESC:     OUI UPPER BITS REGISTER
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     OUI_UPPER_DATA   UPPER 8 BITS OF OUI FIELD
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X1_OUI_UPRr (0x00109240 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X1_OUI_UPRr_SIZE 4

/*
 * This structure should be used to declare and program AN_X1_OUI_UPR.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X1_OUI_UPRr_s {
	uint32_t v[1];
	uint32_t an_x1_oui_upr[1];
	uint32_t _an_x1_oui_upr;
} BCMI_TSCF_GEN3_XGXS_AN_X1_OUI_UPRr_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X1_OUI_UPRr_CLR(r) (r).an_x1_oui_upr[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X1_OUI_UPRr_SET(r,d) (r).an_x1_oui_upr[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X1_OUI_UPRr_GET(r) (r).an_x1_oui_upr[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X1_OUI_UPRr_OUI_UPPER_DATAf_GET(r) (((r).an_x1_oui_upr[0]) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_OUI_UPRr_OUI_UPPER_DATAf_SET(r,f) (r).an_x1_oui_upr[0]=(((r).an_x1_oui_upr[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access AN_X1_OUI_UPR.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X1_OUI_UPRr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_OUI_UPRr,(_r._an_x1_oui_upr))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X1_OUI_UPRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_OUI_UPRr,(_r._an_x1_oui_upr)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X1_OUI_UPRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_OUI_UPRr,(_r._an_x1_oui_upr))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X1_OUI_UPRr BCMI_TSCF_GEN3_XGXS_AN_X1_OUI_UPRr
#define AN_X1_OUI_UPRr_SIZE BCMI_TSCF_GEN3_XGXS_AN_X1_OUI_UPRr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X1_OUI_UPRr_t AN_X1_OUI_UPRr_t;
#define AN_X1_OUI_UPRr_CLR BCMI_TSCF_GEN3_XGXS_AN_X1_OUI_UPRr_CLR
#define AN_X1_OUI_UPRr_SET BCMI_TSCF_GEN3_XGXS_AN_X1_OUI_UPRr_SET
#define AN_X1_OUI_UPRr_GET BCMI_TSCF_GEN3_XGXS_AN_X1_OUI_UPRr_GET
#define AN_X1_OUI_UPRr_OUI_UPPER_DATAf_GET BCMI_TSCF_GEN3_XGXS_AN_X1_OUI_UPRr_OUI_UPPER_DATAf_GET
#define AN_X1_OUI_UPRr_OUI_UPPER_DATAf_SET BCMI_TSCF_GEN3_XGXS_AN_X1_OUI_UPRr_OUI_UPPER_DATAf_SET
#define READ_AN_X1_OUI_UPRr BCMI_TSCF_GEN3_XGXS_READ_AN_X1_OUI_UPRr
#define WRITE_AN_X1_OUI_UPRr BCMI_TSCF_GEN3_XGXS_WRITE_AN_X1_OUI_UPRr
#define MODIFY_AN_X1_OUI_UPRr BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X1_OUI_UPRr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X1_OUI_UPRr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X1_OUI_LWR
 * BLOCKS:   AN_X1_CONTROL
 * REGADDR:  0x9241
 * DESC:     OUI LOWEr BITS REGISTER
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     OUI_LOWER_DATA   LOWER 16 BITS OF OUI FIELD
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X1_OUI_LWRr (0x00109241 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X1_OUI_LWRr_SIZE 4

/*
 * This structure should be used to declare and program AN_X1_OUI_LWR.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X1_OUI_LWRr_s {
	uint32_t v[1];
	uint32_t an_x1_oui_lwr[1];
	uint32_t _an_x1_oui_lwr;
} BCMI_TSCF_GEN3_XGXS_AN_X1_OUI_LWRr_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X1_OUI_LWRr_CLR(r) (r).an_x1_oui_lwr[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X1_OUI_LWRr_SET(r,d) (r).an_x1_oui_lwr[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X1_OUI_LWRr_GET(r) (r).an_x1_oui_lwr[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X1_OUI_LWRr_OUI_LOWER_DATAf_GET(r) (((r).an_x1_oui_lwr[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_OUI_LWRr_OUI_LOWER_DATAf_SET(r,f) (r).an_x1_oui_lwr[0]=(((r).an_x1_oui_lwr[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AN_X1_OUI_LWR.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X1_OUI_LWRr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_OUI_LWRr,(_r._an_x1_oui_lwr))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X1_OUI_LWRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_OUI_LWRr,(_r._an_x1_oui_lwr)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X1_OUI_LWRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_OUI_LWRr,(_r._an_x1_oui_lwr))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X1_OUI_LWRr BCMI_TSCF_GEN3_XGXS_AN_X1_OUI_LWRr
#define AN_X1_OUI_LWRr_SIZE BCMI_TSCF_GEN3_XGXS_AN_X1_OUI_LWRr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X1_OUI_LWRr_t AN_X1_OUI_LWRr_t;
#define AN_X1_OUI_LWRr_CLR BCMI_TSCF_GEN3_XGXS_AN_X1_OUI_LWRr_CLR
#define AN_X1_OUI_LWRr_SET BCMI_TSCF_GEN3_XGXS_AN_X1_OUI_LWRr_SET
#define AN_X1_OUI_LWRr_GET BCMI_TSCF_GEN3_XGXS_AN_X1_OUI_LWRr_GET
#define AN_X1_OUI_LWRr_OUI_LOWER_DATAf_GET BCMI_TSCF_GEN3_XGXS_AN_X1_OUI_LWRr_OUI_LOWER_DATAf_GET
#define AN_X1_OUI_LWRr_OUI_LOWER_DATAf_SET BCMI_TSCF_GEN3_XGXS_AN_X1_OUI_LWRr_OUI_LOWER_DATAf_SET
#define READ_AN_X1_OUI_LWRr BCMI_TSCF_GEN3_XGXS_READ_AN_X1_OUI_LWRr
#define WRITE_AN_X1_OUI_LWRr BCMI_TSCF_GEN3_XGXS_WRITE_AN_X1_OUI_LWRr
#define MODIFY_AN_X1_OUI_LWRr BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X1_OUI_LWRr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X1_OUI_LWRr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X1_BAM_SPD_PRI0
 * BLOCKS:   AN_X1_CONTROL
 * REGADDR:  0x9242
 * DESC:     REMAP PRIORITY REGISTER
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AN_PRIORITY_100G_CR4 HCD PRIORITY OVERRIDE FOR PRIORITY 100G_CR4 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_100G_HG2_CR4 HCD PRIORITY OVERRIDE FOR PRIORITY 100G_HG2_CR4 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_100G_KR4 HCD PRIORITY OVERRIDE FOR PRIORITY 100G_KR4 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_100G_HG2_KR4 HCD PRIORITY OVERRIDE FOR PRIORITY 100G_HG2_KR4 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_40G_CR4 HCD PRIORITY OVERRIDE FOR PRIORITY 40G_CR4 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_40G_HG2_CR4 HCD PRIORITY OVERRIDE FOR PRIORITY 40G_HG2_CR4 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_40G_KR4 HCD PRIORITY OVERRIDE FOR PRIORITY 40G_KR4 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_40G_HG2_KR4 HCD PRIORITY OVERRIDE FOR PRIORITY 40G_HG2_KR4 SPEED.  ZERO MEANS USE HW PRIORITY
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI0r (0x00109242 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI0r_SIZE 4

/*
 * This structure should be used to declare and program AN_X1_BAM_SPD_PRI0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI0r_s {
	uint32_t v[1];
	uint32_t an_x1_bam_spd_pri0[1];
	uint32_t _an_x1_bam_spd_pri0;
} BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI0r_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI0r_CLR(r) (r).an_x1_bam_spd_pri0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI0r_SET(r,d) (r).an_x1_bam_spd_pri0[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI0r_GET(r) (r).an_x1_bam_spd_pri0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI0r_AN_PRIORITY_40G_HG2_KR4f_GET(r) ((((r).an_x1_bam_spd_pri0[0]) >> 14) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI0r_AN_PRIORITY_40G_HG2_KR4f_SET(r,f) (r).an_x1_bam_spd_pri0[0]=(((r).an_x1_bam_spd_pri0[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI0r_AN_PRIORITY_40G_KR4f_GET(r) ((((r).an_x1_bam_spd_pri0[0]) >> 12) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI0r_AN_PRIORITY_40G_KR4f_SET(r,f) (r).an_x1_bam_spd_pri0[0]=(((r).an_x1_bam_spd_pri0[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12)) | (3 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI0r_AN_PRIORITY_40G_HG2_CR4f_GET(r) ((((r).an_x1_bam_spd_pri0[0]) >> 10) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI0r_AN_PRIORITY_40G_HG2_CR4f_SET(r,f) (r).an_x1_bam_spd_pri0[0]=(((r).an_x1_bam_spd_pri0[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10)) | (3 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI0r_AN_PRIORITY_40G_CR4f_GET(r) ((((r).an_x1_bam_spd_pri0[0]) >> 8) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI0r_AN_PRIORITY_40G_CR4f_SET(r,f) (r).an_x1_bam_spd_pri0[0]=(((r).an_x1_bam_spd_pri0[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI0r_AN_PRIORITY_100G_HG2_KR4f_GET(r) ((((r).an_x1_bam_spd_pri0[0]) >> 6) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI0r_AN_PRIORITY_100G_HG2_KR4f_SET(r,f) (r).an_x1_bam_spd_pri0[0]=(((r).an_x1_bam_spd_pri0[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6)) | (3 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI0r_AN_PRIORITY_100G_KR4f_GET(r) ((((r).an_x1_bam_spd_pri0[0]) >> 4) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI0r_AN_PRIORITY_100G_KR4f_SET(r,f) (r).an_x1_bam_spd_pri0[0]=(((r).an_x1_bam_spd_pri0[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI0r_AN_PRIORITY_100G_HG2_CR4f_GET(r) ((((r).an_x1_bam_spd_pri0[0]) >> 2) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI0r_AN_PRIORITY_100G_HG2_CR4f_SET(r,f) (r).an_x1_bam_spd_pri0[0]=(((r).an_x1_bam_spd_pri0[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2)) | (3 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI0r_AN_PRIORITY_100G_CR4f_GET(r) (((r).an_x1_bam_spd_pri0[0]) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI0r_AN_PRIORITY_100G_CR4f_SET(r,f) (r).an_x1_bam_spd_pri0[0]=(((r).an_x1_bam_spd_pri0[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access AN_X1_BAM_SPD_PRI0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X1_BAM_SPD_PRI0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI0r,(_r._an_x1_bam_spd_pri0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X1_BAM_SPD_PRI0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI0r,(_r._an_x1_bam_spd_pri0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X1_BAM_SPD_PRI0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI0r,(_r._an_x1_bam_spd_pri0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X1_BAM_SPD_PRI0r BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI0r
#define AN_X1_BAM_SPD_PRI0r_SIZE BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI0r_t AN_X1_BAM_SPD_PRI0r_t;
#define AN_X1_BAM_SPD_PRI0r_CLR BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI0r_CLR
#define AN_X1_BAM_SPD_PRI0r_SET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI0r_SET
#define AN_X1_BAM_SPD_PRI0r_GET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI0r_GET
#define AN_X1_BAM_SPD_PRI0r_AN_PRIORITY_40G_HG2_KR4f_GET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI0r_AN_PRIORITY_40G_HG2_KR4f_GET
#define AN_X1_BAM_SPD_PRI0r_AN_PRIORITY_40G_HG2_KR4f_SET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI0r_AN_PRIORITY_40G_HG2_KR4f_SET
#define AN_X1_BAM_SPD_PRI0r_AN_PRIORITY_40G_KR4f_GET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI0r_AN_PRIORITY_40G_KR4f_GET
#define AN_X1_BAM_SPD_PRI0r_AN_PRIORITY_40G_KR4f_SET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI0r_AN_PRIORITY_40G_KR4f_SET
#define AN_X1_BAM_SPD_PRI0r_AN_PRIORITY_40G_HG2_CR4f_GET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI0r_AN_PRIORITY_40G_HG2_CR4f_GET
#define AN_X1_BAM_SPD_PRI0r_AN_PRIORITY_40G_HG2_CR4f_SET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI0r_AN_PRIORITY_40G_HG2_CR4f_SET
#define AN_X1_BAM_SPD_PRI0r_AN_PRIORITY_40G_CR4f_GET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI0r_AN_PRIORITY_40G_CR4f_GET
#define AN_X1_BAM_SPD_PRI0r_AN_PRIORITY_40G_CR4f_SET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI0r_AN_PRIORITY_40G_CR4f_SET
#define AN_X1_BAM_SPD_PRI0r_AN_PRIORITY_100G_HG2_KR4f_GET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI0r_AN_PRIORITY_100G_HG2_KR4f_GET
#define AN_X1_BAM_SPD_PRI0r_AN_PRIORITY_100G_HG2_KR4f_SET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI0r_AN_PRIORITY_100G_HG2_KR4f_SET
#define AN_X1_BAM_SPD_PRI0r_AN_PRIORITY_100G_KR4f_GET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI0r_AN_PRIORITY_100G_KR4f_GET
#define AN_X1_BAM_SPD_PRI0r_AN_PRIORITY_100G_KR4f_SET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI0r_AN_PRIORITY_100G_KR4f_SET
#define AN_X1_BAM_SPD_PRI0r_AN_PRIORITY_100G_HG2_CR4f_GET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI0r_AN_PRIORITY_100G_HG2_CR4f_GET
#define AN_X1_BAM_SPD_PRI0r_AN_PRIORITY_100G_HG2_CR4f_SET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI0r_AN_PRIORITY_100G_HG2_CR4f_SET
#define AN_X1_BAM_SPD_PRI0r_AN_PRIORITY_100G_CR4f_GET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI0r_AN_PRIORITY_100G_CR4f_GET
#define AN_X1_BAM_SPD_PRI0r_AN_PRIORITY_100G_CR4f_SET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI0r_AN_PRIORITY_100G_CR4f_SET
#define READ_AN_X1_BAM_SPD_PRI0r BCMI_TSCF_GEN3_XGXS_READ_AN_X1_BAM_SPD_PRI0r
#define WRITE_AN_X1_BAM_SPD_PRI0r BCMI_TSCF_GEN3_XGXS_WRITE_AN_X1_BAM_SPD_PRI0r
#define MODIFY_AN_X1_BAM_SPD_PRI0r BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X1_BAM_SPD_PRI0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X1_BAM_SPD_PRI1
 * BLOCKS:   AN_X1_CONTROL
 * REGADDR:  0x9243
 * DESC:     REMAP PRIORITY REGISTER
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AN_PRIORITY_50G_CR4 HCD PRIORITY OVERRIDE FOR PRIORITY 50G_CR4 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_50G_HG2_CR4 HCD PRIORITY OVERRIDE FOR PRIORITY 50G_HG2_CR4 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_50G_KR4 HCD PRIORITY OVERRIDE FOR PRIORITY 50G_KR4 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_50G_HG2_KR4 HCD PRIORITY OVERRIDE FOR PRIORITY 50G_HG2_KR4 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_50G_CR2 HCD PRIORITY OVERRIDE FOR PRIORITY 50G_CR2 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_50G_HG2_CR2 HCD PRIORITY OVERRIDE FOR PRIORITY 50G_HG2_CR2 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_50G_KR2 HCD PRIORITY OVERRIDE FOR PRIORITY 50G_KR2 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_50G_HG2_KR2 HCD PRIORITY OVERRIDE FOR PRIORITY 50G_HG2_KR2 SPEED.  ZERO MEANS USE HW PRIORITY
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI1r (0x00109243 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI1r_SIZE 4

/*
 * This structure should be used to declare and program AN_X1_BAM_SPD_PRI1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI1r_s {
	uint32_t v[1];
	uint32_t an_x1_bam_spd_pri1[1];
	uint32_t _an_x1_bam_spd_pri1;
} BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI1r_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI1r_CLR(r) (r).an_x1_bam_spd_pri1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI1r_SET(r,d) (r).an_x1_bam_spd_pri1[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI1r_GET(r) (r).an_x1_bam_spd_pri1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI1r_AN_PRIORITY_50G_HG2_KR2f_GET(r) ((((r).an_x1_bam_spd_pri1[0]) >> 14) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI1r_AN_PRIORITY_50G_HG2_KR2f_SET(r,f) (r).an_x1_bam_spd_pri1[0]=(((r).an_x1_bam_spd_pri1[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI1r_AN_PRIORITY_50G_KR2f_GET(r) ((((r).an_x1_bam_spd_pri1[0]) >> 12) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI1r_AN_PRIORITY_50G_KR2f_SET(r,f) (r).an_x1_bam_spd_pri1[0]=(((r).an_x1_bam_spd_pri1[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12)) | (3 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI1r_AN_PRIORITY_50G_HG2_CR2f_GET(r) ((((r).an_x1_bam_spd_pri1[0]) >> 10) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI1r_AN_PRIORITY_50G_HG2_CR2f_SET(r,f) (r).an_x1_bam_spd_pri1[0]=(((r).an_x1_bam_spd_pri1[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10)) | (3 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI1r_AN_PRIORITY_50G_CR2f_GET(r) ((((r).an_x1_bam_spd_pri1[0]) >> 8) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI1r_AN_PRIORITY_50G_CR2f_SET(r,f) (r).an_x1_bam_spd_pri1[0]=(((r).an_x1_bam_spd_pri1[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI1r_AN_PRIORITY_50G_HG2_KR4f_GET(r) ((((r).an_x1_bam_spd_pri1[0]) >> 6) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI1r_AN_PRIORITY_50G_HG2_KR4f_SET(r,f) (r).an_x1_bam_spd_pri1[0]=(((r).an_x1_bam_spd_pri1[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6)) | (3 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI1r_AN_PRIORITY_50G_KR4f_GET(r) ((((r).an_x1_bam_spd_pri1[0]) >> 4) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI1r_AN_PRIORITY_50G_KR4f_SET(r,f) (r).an_x1_bam_spd_pri1[0]=(((r).an_x1_bam_spd_pri1[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI1r_AN_PRIORITY_50G_HG2_CR4f_GET(r) ((((r).an_x1_bam_spd_pri1[0]) >> 2) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI1r_AN_PRIORITY_50G_HG2_CR4f_SET(r,f) (r).an_x1_bam_spd_pri1[0]=(((r).an_x1_bam_spd_pri1[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2)) | (3 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI1r_AN_PRIORITY_50G_CR4f_GET(r) (((r).an_x1_bam_spd_pri1[0]) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI1r_AN_PRIORITY_50G_CR4f_SET(r,f) (r).an_x1_bam_spd_pri1[0]=(((r).an_x1_bam_spd_pri1[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access AN_X1_BAM_SPD_PRI1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X1_BAM_SPD_PRI1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI1r,(_r._an_x1_bam_spd_pri1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X1_BAM_SPD_PRI1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI1r,(_r._an_x1_bam_spd_pri1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X1_BAM_SPD_PRI1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI1r,(_r._an_x1_bam_spd_pri1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X1_BAM_SPD_PRI1r BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI1r
#define AN_X1_BAM_SPD_PRI1r_SIZE BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI1r_t AN_X1_BAM_SPD_PRI1r_t;
#define AN_X1_BAM_SPD_PRI1r_CLR BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI1r_CLR
#define AN_X1_BAM_SPD_PRI1r_SET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI1r_SET
#define AN_X1_BAM_SPD_PRI1r_GET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI1r_GET
#define AN_X1_BAM_SPD_PRI1r_AN_PRIORITY_50G_HG2_KR2f_GET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI1r_AN_PRIORITY_50G_HG2_KR2f_GET
#define AN_X1_BAM_SPD_PRI1r_AN_PRIORITY_50G_HG2_KR2f_SET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI1r_AN_PRIORITY_50G_HG2_KR2f_SET
#define AN_X1_BAM_SPD_PRI1r_AN_PRIORITY_50G_KR2f_GET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI1r_AN_PRIORITY_50G_KR2f_GET
#define AN_X1_BAM_SPD_PRI1r_AN_PRIORITY_50G_KR2f_SET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI1r_AN_PRIORITY_50G_KR2f_SET
#define AN_X1_BAM_SPD_PRI1r_AN_PRIORITY_50G_HG2_CR2f_GET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI1r_AN_PRIORITY_50G_HG2_CR2f_GET
#define AN_X1_BAM_SPD_PRI1r_AN_PRIORITY_50G_HG2_CR2f_SET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI1r_AN_PRIORITY_50G_HG2_CR2f_SET
#define AN_X1_BAM_SPD_PRI1r_AN_PRIORITY_50G_CR2f_GET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI1r_AN_PRIORITY_50G_CR2f_GET
#define AN_X1_BAM_SPD_PRI1r_AN_PRIORITY_50G_CR2f_SET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI1r_AN_PRIORITY_50G_CR2f_SET
#define AN_X1_BAM_SPD_PRI1r_AN_PRIORITY_50G_HG2_KR4f_GET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI1r_AN_PRIORITY_50G_HG2_KR4f_GET
#define AN_X1_BAM_SPD_PRI1r_AN_PRIORITY_50G_HG2_KR4f_SET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI1r_AN_PRIORITY_50G_HG2_KR4f_SET
#define AN_X1_BAM_SPD_PRI1r_AN_PRIORITY_50G_KR4f_GET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI1r_AN_PRIORITY_50G_KR4f_GET
#define AN_X1_BAM_SPD_PRI1r_AN_PRIORITY_50G_KR4f_SET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI1r_AN_PRIORITY_50G_KR4f_SET
#define AN_X1_BAM_SPD_PRI1r_AN_PRIORITY_50G_HG2_CR4f_GET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI1r_AN_PRIORITY_50G_HG2_CR4f_GET
#define AN_X1_BAM_SPD_PRI1r_AN_PRIORITY_50G_HG2_CR4f_SET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI1r_AN_PRIORITY_50G_HG2_CR4f_SET
#define AN_X1_BAM_SPD_PRI1r_AN_PRIORITY_50G_CR4f_GET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI1r_AN_PRIORITY_50G_CR4f_GET
#define AN_X1_BAM_SPD_PRI1r_AN_PRIORITY_50G_CR4f_SET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI1r_AN_PRIORITY_50G_CR4f_SET
#define READ_AN_X1_BAM_SPD_PRI1r BCMI_TSCF_GEN3_XGXS_READ_AN_X1_BAM_SPD_PRI1r
#define WRITE_AN_X1_BAM_SPD_PRI1r BCMI_TSCF_GEN3_XGXS_WRITE_AN_X1_BAM_SPD_PRI1r
#define MODIFY_AN_X1_BAM_SPD_PRI1r BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X1_BAM_SPD_PRI1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X1_BAM_SPD_PRI2
 * BLOCKS:   AN_X1_CONTROL
 * REGADDR:  0x9244
 * DESC:     REMAP PRIORITY REGISTER
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AN_PRIORITY_40G_CR2 HCD PRIORITY OVERRIDE FOR PRIORITY 40G_CR2 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_40G_HG2_CR2 HCD PRIORITY OVERRIDE FOR PRIORITY 40G_HG2_CR2 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_40G_KR2 HCD PRIORITY OVERRIDE FOR PRIORITY 40G_KR2 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_40G_HG2_KR2 HCD PRIORITY OVERRIDE FOR PRIORITY 40G_HG2_KR2 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_25G_CR1 HCD PRIORITY OVERRIDE FOR PRIORITY 25G_CR1 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_25G_HG2_CR1 HCD PRIORITY OVERRIDE FOR PRIORITY 25G_HG2_CR1 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_25G_KR1 HCD PRIORITY OVERRIDE FOR PRIORITY 25G_KR1 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_25G_HG2_KR1 HCD PRIORITY OVERRIDE FOR PRIORITY 25G_HG2_KR1 SPEED.  ZERO MEANS USE HW PRIORITY
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI2r (0x00109244 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X1_BAM_SPD_PRI2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI2r_s {
	uint32_t v[1];
	uint32_t an_x1_bam_spd_pri2[1];
	uint32_t _an_x1_bam_spd_pri2;
} BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI2r_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI2r_CLR(r) (r).an_x1_bam_spd_pri2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI2r_SET(r,d) (r).an_x1_bam_spd_pri2[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI2r_GET(r) (r).an_x1_bam_spd_pri2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI2r_AN_PRIORITY_25G_HG2_KR1f_GET(r) ((((r).an_x1_bam_spd_pri2[0]) >> 14) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI2r_AN_PRIORITY_25G_HG2_KR1f_SET(r,f) (r).an_x1_bam_spd_pri2[0]=(((r).an_x1_bam_spd_pri2[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI2r_AN_PRIORITY_25G_KR1f_GET(r) ((((r).an_x1_bam_spd_pri2[0]) >> 12) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI2r_AN_PRIORITY_25G_KR1f_SET(r,f) (r).an_x1_bam_spd_pri2[0]=(((r).an_x1_bam_spd_pri2[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12)) | (3 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI2r_AN_PRIORITY_25G_HG2_CR1f_GET(r) ((((r).an_x1_bam_spd_pri2[0]) >> 10) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI2r_AN_PRIORITY_25G_HG2_CR1f_SET(r,f) (r).an_x1_bam_spd_pri2[0]=(((r).an_x1_bam_spd_pri2[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10)) | (3 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI2r_AN_PRIORITY_25G_CR1f_GET(r) ((((r).an_x1_bam_spd_pri2[0]) >> 8) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI2r_AN_PRIORITY_25G_CR1f_SET(r,f) (r).an_x1_bam_spd_pri2[0]=(((r).an_x1_bam_spd_pri2[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI2r_AN_PRIORITY_40G_HG2_KR2f_GET(r) ((((r).an_x1_bam_spd_pri2[0]) >> 6) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI2r_AN_PRIORITY_40G_HG2_KR2f_SET(r,f) (r).an_x1_bam_spd_pri2[0]=(((r).an_x1_bam_spd_pri2[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6)) | (3 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI2r_AN_PRIORITY_40G_KR2f_GET(r) ((((r).an_x1_bam_spd_pri2[0]) >> 4) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI2r_AN_PRIORITY_40G_KR2f_SET(r,f) (r).an_x1_bam_spd_pri2[0]=(((r).an_x1_bam_spd_pri2[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI2r_AN_PRIORITY_40G_HG2_CR2f_GET(r) ((((r).an_x1_bam_spd_pri2[0]) >> 2) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI2r_AN_PRIORITY_40G_HG2_CR2f_SET(r,f) (r).an_x1_bam_spd_pri2[0]=(((r).an_x1_bam_spd_pri2[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2)) | (3 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI2r_AN_PRIORITY_40G_CR2f_GET(r) (((r).an_x1_bam_spd_pri2[0]) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI2r_AN_PRIORITY_40G_CR2f_SET(r,f) (r).an_x1_bam_spd_pri2[0]=(((r).an_x1_bam_spd_pri2[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access AN_X1_BAM_SPD_PRI2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X1_BAM_SPD_PRI2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI2r,(_r._an_x1_bam_spd_pri2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X1_BAM_SPD_PRI2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI2r,(_r._an_x1_bam_spd_pri2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X1_BAM_SPD_PRI2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI2r,(_r._an_x1_bam_spd_pri2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X1_BAM_SPD_PRI2r BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI2r
#define AN_X1_BAM_SPD_PRI2r_SIZE BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI2r_t AN_X1_BAM_SPD_PRI2r_t;
#define AN_X1_BAM_SPD_PRI2r_CLR BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI2r_CLR
#define AN_X1_BAM_SPD_PRI2r_SET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI2r_SET
#define AN_X1_BAM_SPD_PRI2r_GET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI2r_GET
#define AN_X1_BAM_SPD_PRI2r_AN_PRIORITY_25G_HG2_KR1f_GET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI2r_AN_PRIORITY_25G_HG2_KR1f_GET
#define AN_X1_BAM_SPD_PRI2r_AN_PRIORITY_25G_HG2_KR1f_SET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI2r_AN_PRIORITY_25G_HG2_KR1f_SET
#define AN_X1_BAM_SPD_PRI2r_AN_PRIORITY_25G_KR1f_GET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI2r_AN_PRIORITY_25G_KR1f_GET
#define AN_X1_BAM_SPD_PRI2r_AN_PRIORITY_25G_KR1f_SET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI2r_AN_PRIORITY_25G_KR1f_SET
#define AN_X1_BAM_SPD_PRI2r_AN_PRIORITY_25G_HG2_CR1f_GET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI2r_AN_PRIORITY_25G_HG2_CR1f_GET
#define AN_X1_BAM_SPD_PRI2r_AN_PRIORITY_25G_HG2_CR1f_SET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI2r_AN_PRIORITY_25G_HG2_CR1f_SET
#define AN_X1_BAM_SPD_PRI2r_AN_PRIORITY_25G_CR1f_GET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI2r_AN_PRIORITY_25G_CR1f_GET
#define AN_X1_BAM_SPD_PRI2r_AN_PRIORITY_25G_CR1f_SET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI2r_AN_PRIORITY_25G_CR1f_SET
#define AN_X1_BAM_SPD_PRI2r_AN_PRIORITY_40G_HG2_KR2f_GET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI2r_AN_PRIORITY_40G_HG2_KR2f_GET
#define AN_X1_BAM_SPD_PRI2r_AN_PRIORITY_40G_HG2_KR2f_SET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI2r_AN_PRIORITY_40G_HG2_KR2f_SET
#define AN_X1_BAM_SPD_PRI2r_AN_PRIORITY_40G_KR2f_GET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI2r_AN_PRIORITY_40G_KR2f_GET
#define AN_X1_BAM_SPD_PRI2r_AN_PRIORITY_40G_KR2f_SET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI2r_AN_PRIORITY_40G_KR2f_SET
#define AN_X1_BAM_SPD_PRI2r_AN_PRIORITY_40G_HG2_CR2f_GET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI2r_AN_PRIORITY_40G_HG2_CR2f_GET
#define AN_X1_BAM_SPD_PRI2r_AN_PRIORITY_40G_HG2_CR2f_SET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI2r_AN_PRIORITY_40G_HG2_CR2f_SET
#define AN_X1_BAM_SPD_PRI2r_AN_PRIORITY_40G_CR2f_GET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI2r_AN_PRIORITY_40G_CR2f_GET
#define AN_X1_BAM_SPD_PRI2r_AN_PRIORITY_40G_CR2f_SET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI2r_AN_PRIORITY_40G_CR2f_SET
#define READ_AN_X1_BAM_SPD_PRI2r BCMI_TSCF_GEN3_XGXS_READ_AN_X1_BAM_SPD_PRI2r
#define WRITE_AN_X1_BAM_SPD_PRI2r BCMI_TSCF_GEN3_XGXS_WRITE_AN_X1_BAM_SPD_PRI2r
#define MODIFY_AN_X1_BAM_SPD_PRI2r BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X1_BAM_SPD_PRI2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X1_BAM_SPD_PRI3
 * BLOCKS:   AN_X1_CONTROL
 * REGADDR:  0x9245
 * DESC:     REMAP PRIORITY REGISTER
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AN_PRIORITY_20G_CR1 HCD PRIORITY OVERRIDE FOR PRIORITY 20G_CR1 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_20G_HG2_CR1 HCD PRIORITY OVERRIDE FOR PRIORITY 20G_HG2_CR1 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_20G_KR1 HCD PRIORITY OVERRIDE FOR PRIORITY 20G_KR1 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_20G_HG2_KR1 HCD PRIORITY OVERRIDE FOR PRIORITY 20G_HG2_KR1 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_20G_CR2 HCD PRIORITY OVERRIDE FOR PRIORITY 20G_CR2 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_20G_HG2_CR2 HCD PRIORITY OVERRIDE FOR PRIORITY 20G_HG2_CR2 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_20G_KR2 HCD PRIORITY OVERRIDE FOR PRIORITY 20G_KR2 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_20G_HG2_KR2 HCD PRIORITY OVERRIDE FOR PRIORITY 20G_HG2_KR2 SPEED.  ZERO MEANS USE HW PRIORITY
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI3r (0x00109245 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI3r_SIZE 4

/*
 * This structure should be used to declare and program AN_X1_BAM_SPD_PRI3.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI3r_s {
	uint32_t v[1];
	uint32_t an_x1_bam_spd_pri3[1];
	uint32_t _an_x1_bam_spd_pri3;
} BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI3r_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI3r_CLR(r) (r).an_x1_bam_spd_pri3[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI3r_SET(r,d) (r).an_x1_bam_spd_pri3[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI3r_GET(r) (r).an_x1_bam_spd_pri3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI3r_AN_PRIORITY_20G_HG2_KR2f_GET(r) ((((r).an_x1_bam_spd_pri3[0]) >> 14) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI3r_AN_PRIORITY_20G_HG2_KR2f_SET(r,f) (r).an_x1_bam_spd_pri3[0]=(((r).an_x1_bam_spd_pri3[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI3r_AN_PRIORITY_20G_KR2f_GET(r) ((((r).an_x1_bam_spd_pri3[0]) >> 12) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI3r_AN_PRIORITY_20G_KR2f_SET(r,f) (r).an_x1_bam_spd_pri3[0]=(((r).an_x1_bam_spd_pri3[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12)) | (3 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI3r_AN_PRIORITY_20G_HG2_CR2f_GET(r) ((((r).an_x1_bam_spd_pri3[0]) >> 10) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI3r_AN_PRIORITY_20G_HG2_CR2f_SET(r,f) (r).an_x1_bam_spd_pri3[0]=(((r).an_x1_bam_spd_pri3[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10)) | (3 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI3r_AN_PRIORITY_20G_CR2f_GET(r) ((((r).an_x1_bam_spd_pri3[0]) >> 8) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI3r_AN_PRIORITY_20G_CR2f_SET(r,f) (r).an_x1_bam_spd_pri3[0]=(((r).an_x1_bam_spd_pri3[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI3r_AN_PRIORITY_20G_HG2_KR1f_GET(r) ((((r).an_x1_bam_spd_pri3[0]) >> 6) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI3r_AN_PRIORITY_20G_HG2_KR1f_SET(r,f) (r).an_x1_bam_spd_pri3[0]=(((r).an_x1_bam_spd_pri3[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6)) | (3 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI3r_AN_PRIORITY_20G_KR1f_GET(r) ((((r).an_x1_bam_spd_pri3[0]) >> 4) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI3r_AN_PRIORITY_20G_KR1f_SET(r,f) (r).an_x1_bam_spd_pri3[0]=(((r).an_x1_bam_spd_pri3[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI3r_AN_PRIORITY_20G_HG2_CR1f_GET(r) ((((r).an_x1_bam_spd_pri3[0]) >> 2) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI3r_AN_PRIORITY_20G_HG2_CR1f_SET(r,f) (r).an_x1_bam_spd_pri3[0]=(((r).an_x1_bam_spd_pri3[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2)) | (3 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI3r_AN_PRIORITY_20G_CR1f_GET(r) (((r).an_x1_bam_spd_pri3[0]) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI3r_AN_PRIORITY_20G_CR1f_SET(r,f) (r).an_x1_bam_spd_pri3[0]=(((r).an_x1_bam_spd_pri3[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access AN_X1_BAM_SPD_PRI3.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X1_BAM_SPD_PRI3r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI3r,(_r._an_x1_bam_spd_pri3))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X1_BAM_SPD_PRI3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI3r,(_r._an_x1_bam_spd_pri3)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X1_BAM_SPD_PRI3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI3r,(_r._an_x1_bam_spd_pri3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X1_BAM_SPD_PRI3r BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI3r
#define AN_X1_BAM_SPD_PRI3r_SIZE BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI3r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI3r_t AN_X1_BAM_SPD_PRI3r_t;
#define AN_X1_BAM_SPD_PRI3r_CLR BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI3r_CLR
#define AN_X1_BAM_SPD_PRI3r_SET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI3r_SET
#define AN_X1_BAM_SPD_PRI3r_GET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI3r_GET
#define AN_X1_BAM_SPD_PRI3r_AN_PRIORITY_20G_HG2_KR2f_GET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI3r_AN_PRIORITY_20G_HG2_KR2f_GET
#define AN_X1_BAM_SPD_PRI3r_AN_PRIORITY_20G_HG2_KR2f_SET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI3r_AN_PRIORITY_20G_HG2_KR2f_SET
#define AN_X1_BAM_SPD_PRI3r_AN_PRIORITY_20G_KR2f_GET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI3r_AN_PRIORITY_20G_KR2f_GET
#define AN_X1_BAM_SPD_PRI3r_AN_PRIORITY_20G_KR2f_SET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI3r_AN_PRIORITY_20G_KR2f_SET
#define AN_X1_BAM_SPD_PRI3r_AN_PRIORITY_20G_HG2_CR2f_GET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI3r_AN_PRIORITY_20G_HG2_CR2f_GET
#define AN_X1_BAM_SPD_PRI3r_AN_PRIORITY_20G_HG2_CR2f_SET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI3r_AN_PRIORITY_20G_HG2_CR2f_SET
#define AN_X1_BAM_SPD_PRI3r_AN_PRIORITY_20G_CR2f_GET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI3r_AN_PRIORITY_20G_CR2f_GET
#define AN_X1_BAM_SPD_PRI3r_AN_PRIORITY_20G_CR2f_SET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI3r_AN_PRIORITY_20G_CR2f_SET
#define AN_X1_BAM_SPD_PRI3r_AN_PRIORITY_20G_HG2_KR1f_GET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI3r_AN_PRIORITY_20G_HG2_KR1f_GET
#define AN_X1_BAM_SPD_PRI3r_AN_PRIORITY_20G_HG2_KR1f_SET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI3r_AN_PRIORITY_20G_HG2_KR1f_SET
#define AN_X1_BAM_SPD_PRI3r_AN_PRIORITY_20G_KR1f_GET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI3r_AN_PRIORITY_20G_KR1f_GET
#define AN_X1_BAM_SPD_PRI3r_AN_PRIORITY_20G_KR1f_SET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI3r_AN_PRIORITY_20G_KR1f_SET
#define AN_X1_BAM_SPD_PRI3r_AN_PRIORITY_20G_HG2_CR1f_GET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI3r_AN_PRIORITY_20G_HG2_CR1f_GET
#define AN_X1_BAM_SPD_PRI3r_AN_PRIORITY_20G_HG2_CR1f_SET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI3r_AN_PRIORITY_20G_HG2_CR1f_SET
#define AN_X1_BAM_SPD_PRI3r_AN_PRIORITY_20G_CR1f_GET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI3r_AN_PRIORITY_20G_CR1f_GET
#define AN_X1_BAM_SPD_PRI3r_AN_PRIORITY_20G_CR1f_SET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI3r_AN_PRIORITY_20G_CR1f_SET
#define READ_AN_X1_BAM_SPD_PRI3r BCMI_TSCF_GEN3_XGXS_READ_AN_X1_BAM_SPD_PRI3r
#define WRITE_AN_X1_BAM_SPD_PRI3r BCMI_TSCF_GEN3_XGXS_WRITE_AN_X1_BAM_SPD_PRI3r
#define MODIFY_AN_X1_BAM_SPD_PRI3r BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X1_BAM_SPD_PRI3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X1_BAM_SPD_PRI4
 * BLOCKS:   AN_X1_CONTROL
 * REGADDR:  0x9246
 * DESC:     REMAP PRIORITY REGISTER
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AN_PRIORITY_10G_KR1 HCD PRIORITY OVERRIDE FOR PRIORITY 10G_KR1 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_10G_HG2_KR1 HCD PRIORITY OVERRIDE FOR PRIORITY 10G_HG2_KR1 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_1G_KX1 HCD PRIORITY OVERRIDE FOR PRIORITY 1G_KX1 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_2P5G_KX1 HCD PRIORITY OVERRIDE FOR PRIORITY 2P5G_X1 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_5G_KR1 HCD PRIORITY OVERRIDE FOR PRIORITY 2P5G_X1 SPEED.  ZERO MEANS USE HW PRIORITY
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI4r (0x00109246 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI4r_SIZE 4

/*
 * This structure should be used to declare and program AN_X1_BAM_SPD_PRI4.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI4r_s {
	uint32_t v[1];
	uint32_t an_x1_bam_spd_pri4[1];
	uint32_t _an_x1_bam_spd_pri4;
} BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI4r_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI4r_CLR(r) (r).an_x1_bam_spd_pri4[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI4r_SET(r,d) (r).an_x1_bam_spd_pri4[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI4r_GET(r) (r).an_x1_bam_spd_pri4[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI4r_AN_PRIORITY_5G_KR1f_GET(r) ((((r).an_x1_bam_spd_pri4[0]) >> 8) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI4r_AN_PRIORITY_5G_KR1f_SET(r,f) (r).an_x1_bam_spd_pri4[0]=(((r).an_x1_bam_spd_pri4[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI4r_AN_PRIORITY_2P5G_KX1f_GET(r) ((((r).an_x1_bam_spd_pri4[0]) >> 6) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI4r_AN_PRIORITY_2P5G_KX1f_SET(r,f) (r).an_x1_bam_spd_pri4[0]=(((r).an_x1_bam_spd_pri4[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6)) | (3 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI4r_AN_PRIORITY_1G_KX1f_GET(r) ((((r).an_x1_bam_spd_pri4[0]) >> 4) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI4r_AN_PRIORITY_1G_KX1f_SET(r,f) (r).an_x1_bam_spd_pri4[0]=(((r).an_x1_bam_spd_pri4[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI4r_AN_PRIORITY_10G_HG2_KR1f_GET(r) ((((r).an_x1_bam_spd_pri4[0]) >> 2) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI4r_AN_PRIORITY_10G_HG2_KR1f_SET(r,f) (r).an_x1_bam_spd_pri4[0]=(((r).an_x1_bam_spd_pri4[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2)) | (3 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI4r_AN_PRIORITY_10G_KR1f_GET(r) (((r).an_x1_bam_spd_pri4[0]) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI4r_AN_PRIORITY_10G_KR1f_SET(r,f) (r).an_x1_bam_spd_pri4[0]=(((r).an_x1_bam_spd_pri4[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access AN_X1_BAM_SPD_PRI4.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X1_BAM_SPD_PRI4r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI4r,(_r._an_x1_bam_spd_pri4))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X1_BAM_SPD_PRI4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI4r,(_r._an_x1_bam_spd_pri4)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X1_BAM_SPD_PRI4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI4r,(_r._an_x1_bam_spd_pri4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X1_BAM_SPD_PRI4r BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI4r
#define AN_X1_BAM_SPD_PRI4r_SIZE BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI4r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI4r_t AN_X1_BAM_SPD_PRI4r_t;
#define AN_X1_BAM_SPD_PRI4r_CLR BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI4r_CLR
#define AN_X1_BAM_SPD_PRI4r_SET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI4r_SET
#define AN_X1_BAM_SPD_PRI4r_GET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI4r_GET
#define AN_X1_BAM_SPD_PRI4r_AN_PRIORITY_5G_KR1f_GET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI4r_AN_PRIORITY_5G_KR1f_GET
#define AN_X1_BAM_SPD_PRI4r_AN_PRIORITY_5G_KR1f_SET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI4r_AN_PRIORITY_5G_KR1f_SET
#define AN_X1_BAM_SPD_PRI4r_AN_PRIORITY_2P5G_KX1f_GET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI4r_AN_PRIORITY_2P5G_KX1f_GET
#define AN_X1_BAM_SPD_PRI4r_AN_PRIORITY_2P5G_KX1f_SET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI4r_AN_PRIORITY_2P5G_KX1f_SET
#define AN_X1_BAM_SPD_PRI4r_AN_PRIORITY_1G_KX1f_GET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI4r_AN_PRIORITY_1G_KX1f_GET
#define AN_X1_BAM_SPD_PRI4r_AN_PRIORITY_1G_KX1f_SET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI4r_AN_PRIORITY_1G_KX1f_SET
#define AN_X1_BAM_SPD_PRI4r_AN_PRIORITY_10G_HG2_KR1f_GET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI4r_AN_PRIORITY_10G_HG2_KR1f_GET
#define AN_X1_BAM_SPD_PRI4r_AN_PRIORITY_10G_HG2_KR1f_SET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI4r_AN_PRIORITY_10G_HG2_KR1f_SET
#define AN_X1_BAM_SPD_PRI4r_AN_PRIORITY_10G_KR1f_GET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI4r_AN_PRIORITY_10G_KR1f_GET
#define AN_X1_BAM_SPD_PRI4r_AN_PRIORITY_10G_KR1f_SET BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI4r_AN_PRIORITY_10G_KR1f_SET
#define READ_AN_X1_BAM_SPD_PRI4r BCMI_TSCF_GEN3_XGXS_READ_AN_X1_BAM_SPD_PRI4r
#define WRITE_AN_X1_BAM_SPD_PRI4r BCMI_TSCF_GEN3_XGXS_WRITE_AN_X1_BAM_SPD_PRI4r
#define MODIFY_AN_X1_BAM_SPD_PRI4r BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X1_BAM_SPD_PRI4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X1_BAM_SPD_PRI4r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X1_IEEE_SPD_PRI1
 * BLOCKS:   AN_X1_CONTROL
 * REGADDR:  0x9247
 * DESC:     IEEE Speed PRIORITY REGISTER
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AN_PRIORITY_25G_CR1_IEEE HCD PRIORITY OVERRIDE FOR PRIORITY 25G_CR1_IEEE SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_25G_CRS1_IEEE HCD PRIORITY OVERRIDE FOR PRIORITY 25G_CRS1_IEEE SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_25G_KR1_IEEE HCD PRIORITY OVERRIDE FOR PRIORITY 25G_KR1_IEEE SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_25G_KRS1_IEEE HCD PRIORITY OVERRIDE FOR PRIORITY 25G_KRS1_IEEE SPEED.  ZERO MEANS USE HW PRIORITY
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X1_IEEE_SPD_PRI1r (0x00109247 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X1_IEEE_SPD_PRI1r_SIZE 4

/*
 * This structure should be used to declare and program AN_X1_IEEE_SPD_PRI1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X1_IEEE_SPD_PRI1r_s {
	uint32_t v[1];
	uint32_t an_x1_ieee_spd_pri1[1];
	uint32_t _an_x1_ieee_spd_pri1;
} BCMI_TSCF_GEN3_XGXS_AN_X1_IEEE_SPD_PRI1r_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X1_IEEE_SPD_PRI1r_CLR(r) (r).an_x1_ieee_spd_pri1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X1_IEEE_SPD_PRI1r_SET(r,d) (r).an_x1_ieee_spd_pri1[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X1_IEEE_SPD_PRI1r_GET(r) (r).an_x1_ieee_spd_pri1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X1_IEEE_SPD_PRI1r_AN_PRIORITY_25G_KRS1_IEEEf_GET(r) ((((r).an_x1_ieee_spd_pri1[0]) >> 6) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_IEEE_SPD_PRI1r_AN_PRIORITY_25G_KRS1_IEEEf_SET(r,f) (r).an_x1_ieee_spd_pri1[0]=(((r).an_x1_ieee_spd_pri1[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6)) | (3 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_AN_X1_IEEE_SPD_PRI1r_AN_PRIORITY_25G_KR1_IEEEf_GET(r) ((((r).an_x1_ieee_spd_pri1[0]) >> 4) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_IEEE_SPD_PRI1r_AN_PRIORITY_25G_KR1_IEEEf_SET(r,f) (r).an_x1_ieee_spd_pri1[0]=(((r).an_x1_ieee_spd_pri1[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_AN_X1_IEEE_SPD_PRI1r_AN_PRIORITY_25G_CRS1_IEEEf_GET(r) ((((r).an_x1_ieee_spd_pri1[0]) >> 2) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_IEEE_SPD_PRI1r_AN_PRIORITY_25G_CRS1_IEEEf_SET(r,f) (r).an_x1_ieee_spd_pri1[0]=(((r).an_x1_ieee_spd_pri1[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2)) | (3 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_AN_X1_IEEE_SPD_PRI1r_AN_PRIORITY_25G_CR1_IEEEf_GET(r) (((r).an_x1_ieee_spd_pri1[0]) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_IEEE_SPD_PRI1r_AN_PRIORITY_25G_CR1_IEEEf_SET(r,f) (r).an_x1_ieee_spd_pri1[0]=(((r).an_x1_ieee_spd_pri1[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access AN_X1_IEEE_SPD_PRI1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X1_IEEE_SPD_PRI1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_IEEE_SPD_PRI1r,(_r._an_x1_ieee_spd_pri1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X1_IEEE_SPD_PRI1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_IEEE_SPD_PRI1r,(_r._an_x1_ieee_spd_pri1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X1_IEEE_SPD_PRI1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_IEEE_SPD_PRI1r,(_r._an_x1_ieee_spd_pri1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X1_IEEE_SPD_PRI1r BCMI_TSCF_GEN3_XGXS_AN_X1_IEEE_SPD_PRI1r
#define AN_X1_IEEE_SPD_PRI1r_SIZE BCMI_TSCF_GEN3_XGXS_AN_X1_IEEE_SPD_PRI1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X1_IEEE_SPD_PRI1r_t AN_X1_IEEE_SPD_PRI1r_t;
#define AN_X1_IEEE_SPD_PRI1r_CLR BCMI_TSCF_GEN3_XGXS_AN_X1_IEEE_SPD_PRI1r_CLR
#define AN_X1_IEEE_SPD_PRI1r_SET BCMI_TSCF_GEN3_XGXS_AN_X1_IEEE_SPD_PRI1r_SET
#define AN_X1_IEEE_SPD_PRI1r_GET BCMI_TSCF_GEN3_XGXS_AN_X1_IEEE_SPD_PRI1r_GET
#define AN_X1_IEEE_SPD_PRI1r_AN_PRIORITY_25G_KRS1_IEEEf_GET BCMI_TSCF_GEN3_XGXS_AN_X1_IEEE_SPD_PRI1r_AN_PRIORITY_25G_KRS1_IEEEf_GET
#define AN_X1_IEEE_SPD_PRI1r_AN_PRIORITY_25G_KRS1_IEEEf_SET BCMI_TSCF_GEN3_XGXS_AN_X1_IEEE_SPD_PRI1r_AN_PRIORITY_25G_KRS1_IEEEf_SET
#define AN_X1_IEEE_SPD_PRI1r_AN_PRIORITY_25G_KR1_IEEEf_GET BCMI_TSCF_GEN3_XGXS_AN_X1_IEEE_SPD_PRI1r_AN_PRIORITY_25G_KR1_IEEEf_GET
#define AN_X1_IEEE_SPD_PRI1r_AN_PRIORITY_25G_KR1_IEEEf_SET BCMI_TSCF_GEN3_XGXS_AN_X1_IEEE_SPD_PRI1r_AN_PRIORITY_25G_KR1_IEEEf_SET
#define AN_X1_IEEE_SPD_PRI1r_AN_PRIORITY_25G_CRS1_IEEEf_GET BCMI_TSCF_GEN3_XGXS_AN_X1_IEEE_SPD_PRI1r_AN_PRIORITY_25G_CRS1_IEEEf_GET
#define AN_X1_IEEE_SPD_PRI1r_AN_PRIORITY_25G_CRS1_IEEEf_SET BCMI_TSCF_GEN3_XGXS_AN_X1_IEEE_SPD_PRI1r_AN_PRIORITY_25G_CRS1_IEEEf_SET
#define AN_X1_IEEE_SPD_PRI1r_AN_PRIORITY_25G_CR1_IEEEf_GET BCMI_TSCF_GEN3_XGXS_AN_X1_IEEE_SPD_PRI1r_AN_PRIORITY_25G_CR1_IEEEf_GET
#define AN_X1_IEEE_SPD_PRI1r_AN_PRIORITY_25G_CR1_IEEEf_SET BCMI_TSCF_GEN3_XGXS_AN_X1_IEEE_SPD_PRI1r_AN_PRIORITY_25G_CR1_IEEEf_SET
#define READ_AN_X1_IEEE_SPD_PRI1r BCMI_TSCF_GEN3_XGXS_READ_AN_X1_IEEE_SPD_PRI1r
#define WRITE_AN_X1_IEEE_SPD_PRI1r BCMI_TSCF_GEN3_XGXS_WRITE_AN_X1_IEEE_SPD_PRI1r
#define MODIFY_AN_X1_IEEE_SPD_PRI1r BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X1_IEEE_SPD_PRI1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X1_IEEE_SPD_PRI1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X1_CL73_BRK_LNK
 * BLOCKS:   AN_X1_TIMERS
 * REGADDR:  0x9250
 * DESC:     CL73 AUTO-NEG BREAK-LINK TIMER
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL73_BREAK_TIMER_PERIOD Period/range is 60 tosingle copyCL73 auto-neg break-link timer.  Timer for the amount of time to disable transmission in order to assure that the link parner enters a Link Fail state.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_BRK_LNKr (0x00109250 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_BRK_LNKr_SIZE 4

/*
 * This structure should be used to declare and program AN_X1_CL73_BRK_LNK.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_BRK_LNKr_s {
	uint32_t v[1];
	uint32_t an_x1_cl73_brk_lnk[1];
	uint32_t _an_x1_cl73_brk_lnk;
} BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_BRK_LNKr_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_BRK_LNKr_CLR(r) (r).an_x1_cl73_brk_lnk[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_BRK_LNKr_SET(r,d) (r).an_x1_cl73_brk_lnk[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_BRK_LNKr_GET(r) (r).an_x1_cl73_brk_lnk[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_BRK_LNKr_CL73_BREAK_TIMER_PERIODf_GET(r) (((r).an_x1_cl73_brk_lnk[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_BRK_LNKr_CL73_BREAK_TIMER_PERIODf_SET(r,f) (r).an_x1_cl73_brk_lnk[0]=(((r).an_x1_cl73_brk_lnk[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AN_X1_CL73_BRK_LNK.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X1_CL73_BRK_LNKr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_BRK_LNKr,(_r._an_x1_cl73_brk_lnk))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X1_CL73_BRK_LNKr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_BRK_LNKr,(_r._an_x1_cl73_brk_lnk)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X1_CL73_BRK_LNKr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_BRK_LNKr,(_r._an_x1_cl73_brk_lnk))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X1_CL73_BRK_LNKr BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_BRK_LNKr
#define AN_X1_CL73_BRK_LNKr_SIZE BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_BRK_LNKr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_BRK_LNKr_t AN_X1_CL73_BRK_LNKr_t;
#define AN_X1_CL73_BRK_LNKr_CLR BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_BRK_LNKr_CLR
#define AN_X1_CL73_BRK_LNKr_SET BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_BRK_LNKr_SET
#define AN_X1_CL73_BRK_LNKr_GET BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_BRK_LNKr_GET
#define AN_X1_CL73_BRK_LNKr_CL73_BREAK_TIMER_PERIODf_GET BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_BRK_LNKr_CL73_BREAK_TIMER_PERIODf_GET
#define AN_X1_CL73_BRK_LNKr_CL73_BREAK_TIMER_PERIODf_SET BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_BRK_LNKr_CL73_BREAK_TIMER_PERIODf_SET
#define READ_AN_X1_CL73_BRK_LNKr BCMI_TSCF_GEN3_XGXS_READ_AN_X1_CL73_BRK_LNKr
#define WRITE_AN_X1_CL73_BRK_LNKr BCMI_TSCF_GEN3_XGXS_WRITE_AN_X1_CL73_BRK_LNKr
#define MODIFY_AN_X1_CL73_BRK_LNKr BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X1_CL73_BRK_LNKr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_BRK_LNKr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X1_CL73_ERR
 * BLOCKS:   AN_X1_TIMERS
 * REGADDR:  0x9251
 * DESC:     CL73 AUTO-NEG TIMEOUT-ERROR TIMER
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL73_ERROR_TIMER_PERIOD Period/range is 20.6 mssingle copyCL73 auto-neg timeout-error timer Timer for the amout ot time to wait to receive a page from the link partner.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_ERRr (0x00109251 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_ERRr_SIZE 4

/*
 * This structure should be used to declare and program AN_X1_CL73_ERR.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_ERRr_s {
	uint32_t v[1];
	uint32_t an_x1_cl73_err[1];
	uint32_t _an_x1_cl73_err;
} BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_ERRr_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_ERRr_CLR(r) (r).an_x1_cl73_err[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_ERRr_SET(r,d) (r).an_x1_cl73_err[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_ERRr_GET(r) (r).an_x1_cl73_err[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_ERRr_CL73_ERROR_TIMER_PERIODf_GET(r) (((r).an_x1_cl73_err[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_ERRr_CL73_ERROR_TIMER_PERIODf_SET(r,f) (r).an_x1_cl73_err[0]=(((r).an_x1_cl73_err[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AN_X1_CL73_ERR.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X1_CL73_ERRr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_ERRr,(_r._an_x1_cl73_err))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X1_CL73_ERRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_ERRr,(_r._an_x1_cl73_err)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X1_CL73_ERRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_ERRr,(_r._an_x1_cl73_err))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X1_CL73_ERRr BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_ERRr
#define AN_X1_CL73_ERRr_SIZE BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_ERRr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_ERRr_t AN_X1_CL73_ERRr_t;
#define AN_X1_CL73_ERRr_CLR BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_ERRr_CLR
#define AN_X1_CL73_ERRr_SET BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_ERRr_SET
#define AN_X1_CL73_ERRr_GET BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_ERRr_GET
#define AN_X1_CL73_ERRr_CL73_ERROR_TIMER_PERIODf_GET BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_ERRr_CL73_ERROR_TIMER_PERIODf_GET
#define AN_X1_CL73_ERRr_CL73_ERROR_TIMER_PERIODf_SET BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_ERRr_CL73_ERROR_TIMER_PERIODf_SET
#define READ_AN_X1_CL73_ERRr BCMI_TSCF_GEN3_XGXS_READ_AN_X1_CL73_ERRr
#define WRITE_AN_X1_CL73_ERRr BCMI_TSCF_GEN3_XGXS_WRITE_AN_X1_CL73_ERRr
#define MODIFY_AN_X1_CL73_ERRr BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X1_CL73_ERRr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_ERRr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X1_CL73_DME_LOCK
 * BLOCKS:   AN_X1_TIMERS
 * REGADDR:  0x9252
 * DESC:     CL73 PARALLEL-DETECT DME-CLOCK TIMER
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     PD_DME_LOCK_TIMER_PERIOD Period/range is 25 tosingle copyCL73 parallel-detect DME-clock timer Timer for the amount of time to wait before evaluating the DME_locked signal.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_DME_LOCKr (0x00109252 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_DME_LOCKr_SIZE 4

/*
 * This structure should be used to declare and program AN_X1_CL73_DME_LOCK.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_DME_LOCKr_s {
	uint32_t v[1];
	uint32_t an_x1_cl73_dme_lock[1];
	uint32_t _an_x1_cl73_dme_lock;
} BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_DME_LOCKr_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_DME_LOCKr_CLR(r) (r).an_x1_cl73_dme_lock[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_DME_LOCKr_SET(r,d) (r).an_x1_cl73_dme_lock[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_DME_LOCKr_GET(r) (r).an_x1_cl73_dme_lock[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_DME_LOCKr_PD_DME_LOCK_TIMER_PERIODf_GET(r) (((r).an_x1_cl73_dme_lock[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_DME_LOCKr_PD_DME_LOCK_TIMER_PERIODf_SET(r,f) (r).an_x1_cl73_dme_lock[0]=(((r).an_x1_cl73_dme_lock[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AN_X1_CL73_DME_LOCK.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X1_CL73_DME_LOCKr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_DME_LOCKr,(_r._an_x1_cl73_dme_lock))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X1_CL73_DME_LOCKr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_DME_LOCKr,(_r._an_x1_cl73_dme_lock)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X1_CL73_DME_LOCKr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_DME_LOCKr,(_r._an_x1_cl73_dme_lock))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X1_CL73_DME_LOCKr BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_DME_LOCKr
#define AN_X1_CL73_DME_LOCKr_SIZE BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_DME_LOCKr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_DME_LOCKr_t AN_X1_CL73_DME_LOCKr_t;
#define AN_X1_CL73_DME_LOCKr_CLR BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_DME_LOCKr_CLR
#define AN_X1_CL73_DME_LOCKr_SET BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_DME_LOCKr_SET
#define AN_X1_CL73_DME_LOCKr_GET BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_DME_LOCKr_GET
#define AN_X1_CL73_DME_LOCKr_PD_DME_LOCK_TIMER_PERIODf_GET BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_DME_LOCKr_PD_DME_LOCK_TIMER_PERIODf_GET
#define AN_X1_CL73_DME_LOCKr_PD_DME_LOCK_TIMER_PERIODf_SET BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_DME_LOCKr_PD_DME_LOCK_TIMER_PERIODf_SET
#define READ_AN_X1_CL73_DME_LOCKr BCMI_TSCF_GEN3_XGXS_READ_AN_X1_CL73_DME_LOCKr
#define WRITE_AN_X1_CL73_DME_LOCKr BCMI_TSCF_GEN3_XGXS_WRITE_AN_X1_CL73_DME_LOCKr
#define MODIFY_AN_X1_CL73_DME_LOCKr BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X1_CL73_DME_LOCKr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X1_CL73_DME_LOCKr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X1_PD_SD_TMR
 * BLOCKS:   AN_X1_TIMERS
 * REGADDR:  0x9253
 * DESC:     PARALLEL-DETECT SIGNAL DETECT TIMER
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     PD_SD_TIMER_PERIOD single copyParallel-Detect Signal Detect timer.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X1_PD_SD_TMRr (0x00109253 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X1_PD_SD_TMRr_SIZE 4

/*
 * This structure should be used to declare and program AN_X1_PD_SD_TMR.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X1_PD_SD_TMRr_s {
	uint32_t v[1];
	uint32_t an_x1_pd_sd_tmr[1];
	uint32_t _an_x1_pd_sd_tmr;
} BCMI_TSCF_GEN3_XGXS_AN_X1_PD_SD_TMRr_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X1_PD_SD_TMRr_CLR(r) (r).an_x1_pd_sd_tmr[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X1_PD_SD_TMRr_SET(r,d) (r).an_x1_pd_sd_tmr[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X1_PD_SD_TMRr_GET(r) (r).an_x1_pd_sd_tmr[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X1_PD_SD_TMRr_PD_SD_TIMER_PERIODf_GET(r) (((r).an_x1_pd_sd_tmr[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_PD_SD_TMRr_PD_SD_TIMER_PERIODf_SET(r,f) (r).an_x1_pd_sd_tmr[0]=(((r).an_x1_pd_sd_tmr[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AN_X1_PD_SD_TMR.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X1_PD_SD_TMRr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_PD_SD_TMRr,(_r._an_x1_pd_sd_tmr))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X1_PD_SD_TMRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_PD_SD_TMRr,(_r._an_x1_pd_sd_tmr)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X1_PD_SD_TMRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_PD_SD_TMRr,(_r._an_x1_pd_sd_tmr))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X1_PD_SD_TMRr BCMI_TSCF_GEN3_XGXS_AN_X1_PD_SD_TMRr
#define AN_X1_PD_SD_TMRr_SIZE BCMI_TSCF_GEN3_XGXS_AN_X1_PD_SD_TMRr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X1_PD_SD_TMRr_t AN_X1_PD_SD_TMRr_t;
#define AN_X1_PD_SD_TMRr_CLR BCMI_TSCF_GEN3_XGXS_AN_X1_PD_SD_TMRr_CLR
#define AN_X1_PD_SD_TMRr_SET BCMI_TSCF_GEN3_XGXS_AN_X1_PD_SD_TMRr_SET
#define AN_X1_PD_SD_TMRr_GET BCMI_TSCF_GEN3_XGXS_AN_X1_PD_SD_TMRr_GET
#define AN_X1_PD_SD_TMRr_PD_SD_TIMER_PERIODf_GET BCMI_TSCF_GEN3_XGXS_AN_X1_PD_SD_TMRr_PD_SD_TIMER_PERIODf_GET
#define AN_X1_PD_SD_TMRr_PD_SD_TIMER_PERIODf_SET BCMI_TSCF_GEN3_XGXS_AN_X1_PD_SD_TMRr_PD_SD_TIMER_PERIODf_SET
#define READ_AN_X1_PD_SD_TMRr BCMI_TSCF_GEN3_XGXS_READ_AN_X1_PD_SD_TMRr
#define WRITE_AN_X1_PD_SD_TMRr BCMI_TSCF_GEN3_XGXS_WRITE_AN_X1_PD_SD_TMRr
#define MODIFY_AN_X1_PD_SD_TMRr BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X1_PD_SD_TMRr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X1_PD_SD_TMRr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X1_IGNORE_LNK_TMR
 * BLOCKS:   AN_X1_TIMERS
 * REGADDR:  0x9254
 * DESC:     PERIOD TO IGNORE THE LINK
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     IGNORE_LINK_TIMER_PERIOD Period is in tickssingle copyPeriod to ignore the link while CL73 and possibly CL72 are running
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X1_IGNORE_LNK_TMRr (0x00109254 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X1_IGNORE_LNK_TMRr_SIZE 4

/*
 * This structure should be used to declare and program AN_X1_IGNORE_LNK_TMR.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X1_IGNORE_LNK_TMRr_s {
	uint32_t v[1];
	uint32_t an_x1_ignore_lnk_tmr[1];
	uint32_t _an_x1_ignore_lnk_tmr;
} BCMI_TSCF_GEN3_XGXS_AN_X1_IGNORE_LNK_TMRr_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X1_IGNORE_LNK_TMRr_CLR(r) (r).an_x1_ignore_lnk_tmr[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X1_IGNORE_LNK_TMRr_SET(r,d) (r).an_x1_ignore_lnk_tmr[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X1_IGNORE_LNK_TMRr_GET(r) (r).an_x1_ignore_lnk_tmr[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X1_IGNORE_LNK_TMRr_IGNORE_LINK_TIMER_PERIODf_GET(r) (((r).an_x1_ignore_lnk_tmr[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_IGNORE_LNK_TMRr_IGNORE_LINK_TIMER_PERIODf_SET(r,f) (r).an_x1_ignore_lnk_tmr[0]=(((r).an_x1_ignore_lnk_tmr[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AN_X1_IGNORE_LNK_TMR.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X1_IGNORE_LNK_TMRr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_IGNORE_LNK_TMRr,(_r._an_x1_ignore_lnk_tmr))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X1_IGNORE_LNK_TMRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_IGNORE_LNK_TMRr,(_r._an_x1_ignore_lnk_tmr)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X1_IGNORE_LNK_TMRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_IGNORE_LNK_TMRr,(_r._an_x1_ignore_lnk_tmr))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X1_IGNORE_LNK_TMRr BCMI_TSCF_GEN3_XGXS_AN_X1_IGNORE_LNK_TMRr
#define AN_X1_IGNORE_LNK_TMRr_SIZE BCMI_TSCF_GEN3_XGXS_AN_X1_IGNORE_LNK_TMRr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X1_IGNORE_LNK_TMRr_t AN_X1_IGNORE_LNK_TMRr_t;
#define AN_X1_IGNORE_LNK_TMRr_CLR BCMI_TSCF_GEN3_XGXS_AN_X1_IGNORE_LNK_TMRr_CLR
#define AN_X1_IGNORE_LNK_TMRr_SET BCMI_TSCF_GEN3_XGXS_AN_X1_IGNORE_LNK_TMRr_SET
#define AN_X1_IGNORE_LNK_TMRr_GET BCMI_TSCF_GEN3_XGXS_AN_X1_IGNORE_LNK_TMRr_GET
#define AN_X1_IGNORE_LNK_TMRr_IGNORE_LINK_TIMER_PERIODf_GET BCMI_TSCF_GEN3_XGXS_AN_X1_IGNORE_LNK_TMRr_IGNORE_LINK_TIMER_PERIODf_GET
#define AN_X1_IGNORE_LNK_TMRr_IGNORE_LINK_TIMER_PERIODf_SET BCMI_TSCF_GEN3_XGXS_AN_X1_IGNORE_LNK_TMRr_IGNORE_LINK_TIMER_PERIODf_SET
#define READ_AN_X1_IGNORE_LNK_TMRr BCMI_TSCF_GEN3_XGXS_READ_AN_X1_IGNORE_LNK_TMRr
#define WRITE_AN_X1_IGNORE_LNK_TMRr BCMI_TSCF_GEN3_XGXS_WRITE_AN_X1_IGNORE_LNK_TMRr
#define MODIFY_AN_X1_IGNORE_LNK_TMRr BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X1_IGNORE_LNK_TMRr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X1_IGNORE_LNK_TMRr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X1_LNK_FAIL_INHBT_TMR_CL72
 * BLOCKS:   AN_X1_TIMERS
 * REGADDR:  0x9255
 * DESC:     TIMER FOR QUALIFYING A LINK_STATUS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LINK_FAIL_INHIBIT_TIMER_CL72_PERIOD Period/range is typically 500mssingle copyTimer for qualifying a link_status==FAIL indication or a link_status==OK indication when a link is first being established and cl72 training is being run.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_CL72r (0x00109255 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_CL72r_SIZE 4

/*
 * This structure should be used to declare and program AN_X1_LNK_FAIL_INHBT_TMR_CL72.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_CL72r_s {
	uint32_t v[1];
	uint32_t an_x1_lnk_fail_inhbt_tmr_cl72[1];
	uint32_t _an_x1_lnk_fail_inhbt_tmr_cl72;
} BCMI_TSCF_GEN3_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_CL72r_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_CL72r_CLR(r) (r).an_x1_lnk_fail_inhbt_tmr_cl72[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_CL72r_SET(r,d) (r).an_x1_lnk_fail_inhbt_tmr_cl72[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_CL72r_GET(r) (r).an_x1_lnk_fail_inhbt_tmr_cl72[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_CL72r_LINK_FAIL_INHIBIT_TIMER_CL72_PERIODf_GET(r) (((r).an_x1_lnk_fail_inhbt_tmr_cl72[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_CL72r_LINK_FAIL_INHIBIT_TIMER_CL72_PERIODf_SET(r,f) (r).an_x1_lnk_fail_inhbt_tmr_cl72[0]=(((r).an_x1_lnk_fail_inhbt_tmr_cl72[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AN_X1_LNK_FAIL_INHBT_TMR_CL72.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X1_LNK_FAIL_INHBT_TMR_CL72r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_CL72r,(_r._an_x1_lnk_fail_inhbt_tmr_cl72))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X1_LNK_FAIL_INHBT_TMR_CL72r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_CL72r,(_r._an_x1_lnk_fail_inhbt_tmr_cl72)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X1_LNK_FAIL_INHBT_TMR_CL72r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_CL72r,(_r._an_x1_lnk_fail_inhbt_tmr_cl72))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X1_LNK_FAIL_INHBT_TMR_CL72r BCMI_TSCF_GEN3_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_CL72r
#define AN_X1_LNK_FAIL_INHBT_TMR_CL72r_SIZE BCMI_TSCF_GEN3_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_CL72r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_CL72r_t AN_X1_LNK_FAIL_INHBT_TMR_CL72r_t;
#define AN_X1_LNK_FAIL_INHBT_TMR_CL72r_CLR BCMI_TSCF_GEN3_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_CL72r_CLR
#define AN_X1_LNK_FAIL_INHBT_TMR_CL72r_SET BCMI_TSCF_GEN3_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_CL72r_SET
#define AN_X1_LNK_FAIL_INHBT_TMR_CL72r_GET BCMI_TSCF_GEN3_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_CL72r_GET
#define AN_X1_LNK_FAIL_INHBT_TMR_CL72r_LINK_FAIL_INHIBIT_TIMER_CL72_PERIODf_GET BCMI_TSCF_GEN3_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_CL72r_LINK_FAIL_INHIBIT_TIMER_CL72_PERIODf_GET
#define AN_X1_LNK_FAIL_INHBT_TMR_CL72r_LINK_FAIL_INHIBIT_TIMER_CL72_PERIODf_SET BCMI_TSCF_GEN3_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_CL72r_LINK_FAIL_INHIBIT_TIMER_CL72_PERIODf_SET
#define READ_AN_X1_LNK_FAIL_INHBT_TMR_CL72r BCMI_TSCF_GEN3_XGXS_READ_AN_X1_LNK_FAIL_INHBT_TMR_CL72r
#define WRITE_AN_X1_LNK_FAIL_INHBT_TMR_CL72r BCMI_TSCF_GEN3_XGXS_WRITE_AN_X1_LNK_FAIL_INHBT_TMR_CL72r
#define MODIFY_AN_X1_LNK_FAIL_INHBT_TMR_CL72r BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X1_LNK_FAIL_INHBT_TMR_CL72r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_CL72r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72
 * BLOCKS:   AN_X1_TIMERS
 * REGADDR:  0x9256
 * DESC:     Timer FOR QUALIFYING A LINK_STATUS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LINK_FAIL_INHIBIT_TIMER_NCL72_PERIOD Period/range is typically 40mssingle copyTimer for qualifying a link_status==FAIL indication or a link_status==OK indication when a link is first being established and cl72 training is not being run.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72r (0x00109256 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72r_SIZE 4

/*
 * This structure should be used to declare and program AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72r_s {
	uint32_t v[1];
	uint32_t an_x1_lnk_fail_inhbt_tmr_not_cl72[1];
	uint32_t _an_x1_lnk_fail_inhbt_tmr_not_cl72;
} BCMI_TSCF_GEN3_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72r_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72r_CLR(r) (r).an_x1_lnk_fail_inhbt_tmr_not_cl72[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72r_SET(r,d) (r).an_x1_lnk_fail_inhbt_tmr_not_cl72[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72r_GET(r) (r).an_x1_lnk_fail_inhbt_tmr_not_cl72[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72r_LINK_FAIL_INHIBIT_TIMER_NCL72_PERIODf_GET(r) (((r).an_x1_lnk_fail_inhbt_tmr_not_cl72[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72r_LINK_FAIL_INHIBIT_TIMER_NCL72_PERIODf_SET(r,f) (r).an_x1_lnk_fail_inhbt_tmr_not_cl72[0]=(((r).an_x1_lnk_fail_inhbt_tmr_not_cl72[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72r,(_r._an_x1_lnk_fail_inhbt_tmr_not_cl72))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72r,(_r._an_x1_lnk_fail_inhbt_tmr_not_cl72)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72r,(_r._an_x1_lnk_fail_inhbt_tmr_not_cl72))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72r BCMI_TSCF_GEN3_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72r
#define AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72r_SIZE BCMI_TSCF_GEN3_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72r_t AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72r_t;
#define AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72r_CLR BCMI_TSCF_GEN3_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72r_CLR
#define AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72r_SET BCMI_TSCF_GEN3_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72r_SET
#define AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72r_GET BCMI_TSCF_GEN3_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72r_GET
#define AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72r_LINK_FAIL_INHIBIT_TIMER_NCL72_PERIODf_GET BCMI_TSCF_GEN3_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72r_LINK_FAIL_INHIBIT_TIMER_NCL72_PERIODf_GET
#define AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72r_LINK_FAIL_INHIBIT_TIMER_NCL72_PERIODf_SET BCMI_TSCF_GEN3_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72r_LINK_FAIL_INHIBIT_TIMER_NCL72_PERIODf_SET
#define READ_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72r BCMI_TSCF_GEN3_XGXS_READ_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72r
#define WRITE_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72r BCMI_TSCF_GEN3_XGXS_WRITE_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72r
#define MODIFY_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72r BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X1_DME_PAGE_TMR_TYPE
 * BLOCKS:   AN_X1_TIMERS
 * REGADDR:  0x9257
 * DESC:     DME PAGE TIMERS
 * RESETVAL: 0x3b5f (15199)
 * ACCESS:   R/W
 * FIELDS:
 *     CL73_PAGE_TEST_MIN_TIMER Specifies the minimum length of a CL73 DME page.  Units are 8 samples.  Each sample represents 0.4 ns
 *     CL73_PAGE_TEST_MAX_TIMER Specifies the maximum length of a CL73 DME page.  Units are 8 samples.  Each sample represents 0.4 ns
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X1_DME_PAGE_TMR_TYPEr (0x00109257 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X1_DME_PAGE_TMR_TYPEr_SIZE 4

/*
 * This structure should be used to declare and program AN_X1_DME_PAGE_TMR_TYPE.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X1_DME_PAGE_TMR_TYPEr_s {
	uint32_t v[1];
	uint32_t an_x1_dme_page_tmr_type[1];
	uint32_t _an_x1_dme_page_tmr_type;
} BCMI_TSCF_GEN3_XGXS_AN_X1_DME_PAGE_TMR_TYPEr_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X1_DME_PAGE_TMR_TYPEr_CLR(r) (r).an_x1_dme_page_tmr_type[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X1_DME_PAGE_TMR_TYPEr_SET(r,d) (r).an_x1_dme_page_tmr_type[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X1_DME_PAGE_TMR_TYPEr_GET(r) (r).an_x1_dme_page_tmr_type[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X1_DME_PAGE_TMR_TYPEr_CL73_PAGE_TEST_MAX_TIMERf_GET(r) ((((r).an_x1_dme_page_tmr_type[0]) >> 7) & 0x7f)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_DME_PAGE_TMR_TYPEr_CL73_PAGE_TEST_MAX_TIMERf_SET(r,f) (r).an_x1_dme_page_tmr_type[0]=(((r).an_x1_dme_page_tmr_type[0] & ~((uint32_t)0x7f << 7)) | ((((uint32_t)f) & 0x7f) << 7)) | (127 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_AN_X1_DME_PAGE_TMR_TYPEr_CL73_PAGE_TEST_MIN_TIMERf_GET(r) (((r).an_x1_dme_page_tmr_type[0]) & 0x7f)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_DME_PAGE_TMR_TYPEr_CL73_PAGE_TEST_MIN_TIMERf_SET(r,f) (r).an_x1_dme_page_tmr_type[0]=(((r).an_x1_dme_page_tmr_type[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f)) | (0x7f << 16)

/*
 * These macros can be used to access AN_X1_DME_PAGE_TMR_TYPE.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X1_DME_PAGE_TMR_TYPEr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_DME_PAGE_TMR_TYPEr,(_r._an_x1_dme_page_tmr_type))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X1_DME_PAGE_TMR_TYPEr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_DME_PAGE_TMR_TYPEr,(_r._an_x1_dme_page_tmr_type)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X1_DME_PAGE_TMR_TYPEr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_DME_PAGE_TMR_TYPEr,(_r._an_x1_dme_page_tmr_type))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X1_DME_PAGE_TMR_TYPEr BCMI_TSCF_GEN3_XGXS_AN_X1_DME_PAGE_TMR_TYPEr
#define AN_X1_DME_PAGE_TMR_TYPEr_SIZE BCMI_TSCF_GEN3_XGXS_AN_X1_DME_PAGE_TMR_TYPEr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X1_DME_PAGE_TMR_TYPEr_t AN_X1_DME_PAGE_TMR_TYPEr_t;
#define AN_X1_DME_PAGE_TMR_TYPEr_CLR BCMI_TSCF_GEN3_XGXS_AN_X1_DME_PAGE_TMR_TYPEr_CLR
#define AN_X1_DME_PAGE_TMR_TYPEr_SET BCMI_TSCF_GEN3_XGXS_AN_X1_DME_PAGE_TMR_TYPEr_SET
#define AN_X1_DME_PAGE_TMR_TYPEr_GET BCMI_TSCF_GEN3_XGXS_AN_X1_DME_PAGE_TMR_TYPEr_GET
#define AN_X1_DME_PAGE_TMR_TYPEr_CL73_PAGE_TEST_MAX_TIMERf_GET BCMI_TSCF_GEN3_XGXS_AN_X1_DME_PAGE_TMR_TYPEr_CL73_PAGE_TEST_MAX_TIMERf_GET
#define AN_X1_DME_PAGE_TMR_TYPEr_CL73_PAGE_TEST_MAX_TIMERf_SET BCMI_TSCF_GEN3_XGXS_AN_X1_DME_PAGE_TMR_TYPEr_CL73_PAGE_TEST_MAX_TIMERf_SET
#define AN_X1_DME_PAGE_TMR_TYPEr_CL73_PAGE_TEST_MIN_TIMERf_GET BCMI_TSCF_GEN3_XGXS_AN_X1_DME_PAGE_TMR_TYPEr_CL73_PAGE_TEST_MIN_TIMERf_GET
#define AN_X1_DME_PAGE_TMR_TYPEr_CL73_PAGE_TEST_MIN_TIMERf_SET BCMI_TSCF_GEN3_XGXS_AN_X1_DME_PAGE_TMR_TYPEr_CL73_PAGE_TEST_MIN_TIMERf_SET
#define READ_AN_X1_DME_PAGE_TMR_TYPEr BCMI_TSCF_GEN3_XGXS_READ_AN_X1_DME_PAGE_TMR_TYPEr
#define WRITE_AN_X1_DME_PAGE_TMR_TYPEr BCMI_TSCF_GEN3_XGXS_WRITE_AN_X1_DME_PAGE_TMR_TYPEr
#define MODIFY_AN_X1_DME_PAGE_TMR_TYPEr BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X1_DME_PAGE_TMR_TYPEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X1_DME_PAGE_TMR_TYPEr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X1_PLL_LOCK_TMR
 * BLOCKS:   SC_X1_CONTROL
 * REGADDR:  0x9260
 * DESC:     PLL lock timeout period
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     PLL_LOCK_TIMER_PERIOD Period/range is XXX msTimer for the maximin amount of time required for PLL to lockIf PLL is not locked during this period of time,the Speed Control logic will report an error and go to Initial state.The Speed Control logic can be restarted after that by SW or AN.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_PLL_LOCK_TMRr (0x00109260 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X1_PLL_LOCK_TMRr_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_PLL_LOCK_TMR.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X1_PLL_LOCK_TMRr_s {
	uint32_t v[1];
	uint32_t sc_x1_pll_lock_tmr[1];
	uint32_t _sc_x1_pll_lock_tmr;
} BCMI_TSCF_GEN3_XGXS_SC_X1_PLL_LOCK_TMRr_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X1_PLL_LOCK_TMRr_CLR(r) (r).sc_x1_pll_lock_tmr[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X1_PLL_LOCK_TMRr_SET(r,d) (r).sc_x1_pll_lock_tmr[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X1_PLL_LOCK_TMRr_GET(r) (r).sc_x1_pll_lock_tmr[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_PLL_LOCK_TMRr_PLL_LOCK_TIMER_PERIODf_GET(r) (((r).sc_x1_pll_lock_tmr[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_PLL_LOCK_TMRr_PLL_LOCK_TIMER_PERIODf_SET(r,f) (r).sc_x1_pll_lock_tmr[0]=(((r).sc_x1_pll_lock_tmr[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access SC_X1_PLL_LOCK_TMR.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X1_PLL_LOCK_TMRr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_PLL_LOCK_TMRr,(_r._sc_x1_pll_lock_tmr))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_PLL_LOCK_TMRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_PLL_LOCK_TMRr,(_r._sc_x1_pll_lock_tmr)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_PLL_LOCK_TMRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_PLL_LOCK_TMRr,(_r._sc_x1_pll_lock_tmr))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_PLL_LOCK_TMRr BCMI_TSCF_GEN3_XGXS_SC_X1_PLL_LOCK_TMRr
#define SC_X1_PLL_LOCK_TMRr_SIZE BCMI_TSCF_GEN3_XGXS_SC_X1_PLL_LOCK_TMRr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X1_PLL_LOCK_TMRr_t SC_X1_PLL_LOCK_TMRr_t;
#define SC_X1_PLL_LOCK_TMRr_CLR BCMI_TSCF_GEN3_XGXS_SC_X1_PLL_LOCK_TMRr_CLR
#define SC_X1_PLL_LOCK_TMRr_SET BCMI_TSCF_GEN3_XGXS_SC_X1_PLL_LOCK_TMRr_SET
#define SC_X1_PLL_LOCK_TMRr_GET BCMI_TSCF_GEN3_XGXS_SC_X1_PLL_LOCK_TMRr_GET
#define SC_X1_PLL_LOCK_TMRr_PLL_LOCK_TIMER_PERIODf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_PLL_LOCK_TMRr_PLL_LOCK_TIMER_PERIODf_GET
#define SC_X1_PLL_LOCK_TMRr_PLL_LOCK_TIMER_PERIODf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_PLL_LOCK_TMRr_PLL_LOCK_TIMER_PERIODf_SET
#define READ_SC_X1_PLL_LOCK_TMRr BCMI_TSCF_GEN3_XGXS_READ_SC_X1_PLL_LOCK_TMRr
#define WRITE_SC_X1_PLL_LOCK_TMRr BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_PLL_LOCK_TMRr
#define MODIFY_SC_X1_PLL_LOCK_TMRr BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_PLL_LOCK_TMRr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X1_PLL_LOCK_TMRr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X1_PMD_LOCK_TMR
 * BLOCKS:   SC_X1_CONTROL
 * REGADDR:  0x9261
 * DESC:     PMD lock timeout period
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     PMD_LOCK_TIMER_PERIOD Period/range is XXX msTimer for the maximin amount of time required for PMD RX to lockIf PMD RX is not locked during this period of time,the Speed Control logic will report an error and go to Initial state.The Speed Control logic can be restarted after that by SW or AN.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_PMD_LOCK_TMRr (0x00109261 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X1_PMD_LOCK_TMRr_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_PMD_LOCK_TMR.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X1_PMD_LOCK_TMRr_s {
	uint32_t v[1];
	uint32_t sc_x1_pmd_lock_tmr[1];
	uint32_t _sc_x1_pmd_lock_tmr;
} BCMI_TSCF_GEN3_XGXS_SC_X1_PMD_LOCK_TMRr_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X1_PMD_LOCK_TMRr_CLR(r) (r).sc_x1_pmd_lock_tmr[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X1_PMD_LOCK_TMRr_SET(r,d) (r).sc_x1_pmd_lock_tmr[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X1_PMD_LOCK_TMRr_GET(r) (r).sc_x1_pmd_lock_tmr[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_PMD_LOCK_TMRr_PMD_LOCK_TIMER_PERIODf_GET(r) (((r).sc_x1_pmd_lock_tmr[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_PMD_LOCK_TMRr_PMD_LOCK_TIMER_PERIODf_SET(r,f) (r).sc_x1_pmd_lock_tmr[0]=(((r).sc_x1_pmd_lock_tmr[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access SC_X1_PMD_LOCK_TMR.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X1_PMD_LOCK_TMRr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_PMD_LOCK_TMRr,(_r._sc_x1_pmd_lock_tmr))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_PMD_LOCK_TMRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_PMD_LOCK_TMRr,(_r._sc_x1_pmd_lock_tmr)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_PMD_LOCK_TMRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_PMD_LOCK_TMRr,(_r._sc_x1_pmd_lock_tmr))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_PMD_LOCK_TMRr BCMI_TSCF_GEN3_XGXS_SC_X1_PMD_LOCK_TMRr
#define SC_X1_PMD_LOCK_TMRr_SIZE BCMI_TSCF_GEN3_XGXS_SC_X1_PMD_LOCK_TMRr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X1_PMD_LOCK_TMRr_t SC_X1_PMD_LOCK_TMRr_t;
#define SC_X1_PMD_LOCK_TMRr_CLR BCMI_TSCF_GEN3_XGXS_SC_X1_PMD_LOCK_TMRr_CLR
#define SC_X1_PMD_LOCK_TMRr_SET BCMI_TSCF_GEN3_XGXS_SC_X1_PMD_LOCK_TMRr_SET
#define SC_X1_PMD_LOCK_TMRr_GET BCMI_TSCF_GEN3_XGXS_SC_X1_PMD_LOCK_TMRr_GET
#define SC_X1_PMD_LOCK_TMRr_PMD_LOCK_TIMER_PERIODf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_PMD_LOCK_TMRr_PMD_LOCK_TIMER_PERIODf_GET
#define SC_X1_PMD_LOCK_TMRr_PMD_LOCK_TIMER_PERIODf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_PMD_LOCK_TMRr_PMD_LOCK_TIMER_PERIODf_SET
#define READ_SC_X1_PMD_LOCK_TMRr BCMI_TSCF_GEN3_XGXS_READ_SC_X1_PMD_LOCK_TMRr
#define WRITE_SC_X1_PMD_LOCK_TMRr BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_PMD_LOCK_TMRr
#define MODIFY_SC_X1_PMD_LOCK_TMRr BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_PMD_LOCK_TMRr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X1_PMD_LOCK_TMRr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X1_PIPE_RST_CNT
 * BLOCKS:   SC_X1_CONTROL
 * REGADDR:  0x9262
 * DESC:     Pipeline reset count
 * RESETVAL: 0xff (255)
 * ACCESS:   R/W
 * FIELDS:
 *     PIPELINE_RESET_COUNT period in clock cyclesCounter for amount of time to keep pipeline in resetduring speed change process
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_PIPE_RST_CNTr (0x00109262 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X1_PIPE_RST_CNTr_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_PIPE_RST_CNT.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X1_PIPE_RST_CNTr_s {
	uint32_t v[1];
	uint32_t sc_x1_pipe_rst_cnt[1];
	uint32_t _sc_x1_pipe_rst_cnt;
} BCMI_TSCF_GEN3_XGXS_SC_X1_PIPE_RST_CNTr_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X1_PIPE_RST_CNTr_CLR(r) (r).sc_x1_pipe_rst_cnt[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X1_PIPE_RST_CNTr_SET(r,d) (r).sc_x1_pipe_rst_cnt[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X1_PIPE_RST_CNTr_GET(r) (r).sc_x1_pipe_rst_cnt[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_PIPE_RST_CNTr_PIPELINE_RESET_COUNTf_GET(r) (((r).sc_x1_pipe_rst_cnt[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_PIPE_RST_CNTr_PIPELINE_RESET_COUNTf_SET(r,f) (r).sc_x1_pipe_rst_cnt[0]=(((r).sc_x1_pipe_rst_cnt[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access SC_X1_PIPE_RST_CNT.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X1_PIPE_RST_CNTr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_PIPE_RST_CNTr,(_r._sc_x1_pipe_rst_cnt))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_PIPE_RST_CNTr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_PIPE_RST_CNTr,(_r._sc_x1_pipe_rst_cnt)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_PIPE_RST_CNTr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_PIPE_RST_CNTr,(_r._sc_x1_pipe_rst_cnt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_PIPE_RST_CNTr BCMI_TSCF_GEN3_XGXS_SC_X1_PIPE_RST_CNTr
#define SC_X1_PIPE_RST_CNTr_SIZE BCMI_TSCF_GEN3_XGXS_SC_X1_PIPE_RST_CNTr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X1_PIPE_RST_CNTr_t SC_X1_PIPE_RST_CNTr_t;
#define SC_X1_PIPE_RST_CNTr_CLR BCMI_TSCF_GEN3_XGXS_SC_X1_PIPE_RST_CNTr_CLR
#define SC_X1_PIPE_RST_CNTr_SET BCMI_TSCF_GEN3_XGXS_SC_X1_PIPE_RST_CNTr_SET
#define SC_X1_PIPE_RST_CNTr_GET BCMI_TSCF_GEN3_XGXS_SC_X1_PIPE_RST_CNTr_GET
#define SC_X1_PIPE_RST_CNTr_PIPELINE_RESET_COUNTf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_PIPE_RST_CNTr_PIPELINE_RESET_COUNTf_GET
#define SC_X1_PIPE_RST_CNTr_PIPELINE_RESET_COUNTf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_PIPE_RST_CNTr_PIPELINE_RESET_COUNTf_SET
#define READ_SC_X1_PIPE_RST_CNTr BCMI_TSCF_GEN3_XGXS_READ_SC_X1_PIPE_RST_CNTr
#define WRITE_SC_X1_PIPE_RST_CNTr BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_PIPE_RST_CNTr
#define MODIFY_SC_X1_PIPE_RST_CNTr BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_PIPE_RST_CNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X1_PIPE_RST_CNTr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X1_TX_RST_CNT
 * BLOCKS:   SC_X1_CONTROL
 * REGADDR:  0x9263
 * DESC:     TX pipeline reset count
 * RESETVAL: 0x2 (2)
 * ACCESS:   R/W
 * FIELDS:
 *     TX_RESET_COUNT   period in clock cyclesCounter for amount of time to keep txp in reset after pll is lockedduring speed change process
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_TX_RST_CNTr (0x00109263 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X1_TX_RST_CNTr_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_TX_RST_CNT.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X1_TX_RST_CNTr_s {
	uint32_t v[1];
	uint32_t sc_x1_tx_rst_cnt[1];
	uint32_t _sc_x1_tx_rst_cnt;
} BCMI_TSCF_GEN3_XGXS_SC_X1_TX_RST_CNTr_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X1_TX_RST_CNTr_CLR(r) (r).sc_x1_tx_rst_cnt[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X1_TX_RST_CNTr_SET(r,d) (r).sc_x1_tx_rst_cnt[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X1_TX_RST_CNTr_GET(r) (r).sc_x1_tx_rst_cnt[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_TX_RST_CNTr_TX_RESET_COUNTf_GET(r) (((r).sc_x1_tx_rst_cnt[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_TX_RST_CNTr_TX_RESET_COUNTf_SET(r,f) (r).sc_x1_tx_rst_cnt[0]=(((r).sc_x1_tx_rst_cnt[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access SC_X1_TX_RST_CNT.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X1_TX_RST_CNTr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_TX_RST_CNTr,(_r._sc_x1_tx_rst_cnt))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_TX_RST_CNTr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_TX_RST_CNTr,(_r._sc_x1_tx_rst_cnt)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_TX_RST_CNTr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_TX_RST_CNTr,(_r._sc_x1_tx_rst_cnt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_TX_RST_CNTr BCMI_TSCF_GEN3_XGXS_SC_X1_TX_RST_CNTr
#define SC_X1_TX_RST_CNTr_SIZE BCMI_TSCF_GEN3_XGXS_SC_X1_TX_RST_CNTr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X1_TX_RST_CNTr_t SC_X1_TX_RST_CNTr_t;
#define SC_X1_TX_RST_CNTr_CLR BCMI_TSCF_GEN3_XGXS_SC_X1_TX_RST_CNTr_CLR
#define SC_X1_TX_RST_CNTr_SET BCMI_TSCF_GEN3_XGXS_SC_X1_TX_RST_CNTr_SET
#define SC_X1_TX_RST_CNTr_GET BCMI_TSCF_GEN3_XGXS_SC_X1_TX_RST_CNTr_GET
#define SC_X1_TX_RST_CNTr_TX_RESET_COUNTf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_TX_RST_CNTr_TX_RESET_COUNTf_GET
#define SC_X1_TX_RST_CNTr_TX_RESET_COUNTf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_TX_RST_CNTr_TX_RESET_COUNTf_SET
#define READ_SC_X1_TX_RST_CNTr BCMI_TSCF_GEN3_XGXS_READ_SC_X1_TX_RST_CNTr
#define WRITE_SC_X1_TX_RST_CNTr BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_TX_RST_CNTr
#define MODIFY_SC_X1_TX_RST_CNTr BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_TX_RST_CNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X1_TX_RST_CNTr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X1_STS
 * BLOCKS:   SC_X1_CONTROL
 * REGADDR:  0x9264
 * DESC:     Status register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     RESOLVED_PORT_MODE resolved port mode
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_STSr (0x00109264 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X1_STSr_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X1_STSr_s {
	uint32_t v[1];
	uint32_t sc_x1_sts[1];
	uint32_t _sc_x1_sts;
} BCMI_TSCF_GEN3_XGXS_SC_X1_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X1_STSr_CLR(r) (r).sc_x1_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X1_STSr_SET(r,d) (r).sc_x1_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X1_STSr_GET(r) (r).sc_x1_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_STSr_RESOLVED_PORT_MODEf_GET(r) (((r).sc_x1_sts[0]) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_STSr_RESOLVED_PORT_MODEf_SET(r,f) (r).sc_x1_sts[0]=(((r).sc_x1_sts[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access SC_X1_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X1_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_STSr,(_r._sc_x1_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_STSr,(_r._sc_x1_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_STSr,(_r._sc_x1_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_STSr BCMI_TSCF_GEN3_XGXS_SC_X1_STSr
#define SC_X1_STSr_SIZE BCMI_TSCF_GEN3_XGXS_SC_X1_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X1_STSr_t SC_X1_STSr_t;
#define SC_X1_STSr_CLR BCMI_TSCF_GEN3_XGXS_SC_X1_STSr_CLR
#define SC_X1_STSr_SET BCMI_TSCF_GEN3_XGXS_SC_X1_STSr_SET
#define SC_X1_STSr_GET BCMI_TSCF_GEN3_XGXS_SC_X1_STSr_GET
#define SC_X1_STSr_RESOLVED_PORT_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_STSr_RESOLVED_PORT_MODEf_GET
#define SC_X1_STSr_RESOLVED_PORT_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_STSr_RESOLVED_PORT_MODEf_SET
#define READ_SC_X1_STSr BCMI_TSCF_GEN3_XGXS_READ_SC_X1_STSr
#define WRITE_SC_X1_STSr BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_STSr
#define MODIFY_SC_X1_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X1_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X1_SPD_OVRR0_SPD
 * BLOCKS:   SC_X1_SPEED_OVERRIDE0
 * REGADDR:  0x9270
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/W
 * FIELDS:
 *     NUM_LANES        Number of lanes for override configuration0   : NUM_LANES_01 - use 1 lane1   : NUM_LANES_02 - use 2 lanes2   : NUM_LANES_04 - use 4 lanes
 *     T_PMA_40B_MODE   1'b0 - 66-bit data write in t_pma.1'b1 - 40-bit data write in t_pma.
 *     CL36TX_EN        Per logical lane: cl36 TX pipeline: 1=enabled , 0=disabled
 *     CL36RX_EN        Per logical lane: cl36 RX pipeline: 1=enabled , 0=disabled
 *     CL36RX_10BIT_PMD_DATA_EN Per logical lane: Enables CL36 Rx Pipeline to use all 10-bits of PMD Rx data.This bit should be enabled in OS8.25 mode or 2.5G speed.
 *     SPEED            Actual speed set by SW
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_SPDr (0x00109270 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_SPDr_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR0_SPD.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_SPDr_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr0_spd[1];
	uint32_t _sc_x1_spd_ovrr0_spd;
} BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_SPDr_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_SPDr_CLR(r) (r).sc_x1_spd_ovrr0_spd[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_SPDr_SET(r,d) (r).sc_x1_spd_ovrr0_spd[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_SPDr_GET(r) (r).sc_x1_spd_ovrr0_spd[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_SPDr_SPEEDf_GET(r) ((((r).sc_x1_spd_ovrr0_spd[0]) >> 8) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_SPDr_SPEEDf_SET(r,f) (r).sc_x1_spd_ovrr0_spd[0]=(((r).sc_x1_spd_ovrr0_spd[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_SPDr_CL36RX_10BIT_PMD_DATA_ENf_GET(r) ((((r).sc_x1_spd_ovrr0_spd[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_SPDr_CL36RX_10BIT_PMD_DATA_ENf_SET(r,f) (r).sc_x1_spd_ovrr0_spd[0]=(((r).sc_x1_spd_ovrr0_spd[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_SPDr_CL36RX_ENf_GET(r) ((((r).sc_x1_spd_ovrr0_spd[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_SPDr_CL36RX_ENf_SET(r,f) (r).sc_x1_spd_ovrr0_spd[0]=(((r).sc_x1_spd_ovrr0_spd[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_SPDr_CL36TX_ENf_GET(r) ((((r).sc_x1_spd_ovrr0_spd[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_SPDr_CL36TX_ENf_SET(r,f) (r).sc_x1_spd_ovrr0_spd[0]=(((r).sc_x1_spd_ovrr0_spd[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_SPDr_T_PMA_40B_MODEf_GET(r) ((((r).sc_x1_spd_ovrr0_spd[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_SPDr_T_PMA_40B_MODEf_SET(r,f) (r).sc_x1_spd_ovrr0_spd[0]=(((r).sc_x1_spd_ovrr0_spd[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_SPDr_NUM_LANESf_GET(r) (((r).sc_x1_spd_ovrr0_spd[0]) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_SPDr_NUM_LANESf_SET(r,f) (r).sc_x1_spd_ovrr0_spd[0]=(((r).sc_x1_spd_ovrr0_spd[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR0_SPD.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR0_SPDr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_SPDr,(_r._sc_x1_spd_ovrr0_spd))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR0_SPDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_SPDr,(_r._sc_x1_spd_ovrr0_spd)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR0_SPDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_SPDr,(_r._sc_x1_spd_ovrr0_spd))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR0_SPDr BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_SPDr
#define SC_X1_SPD_OVRR0_SPDr_SIZE BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_SPDr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_SPDr_t SC_X1_SPD_OVRR0_SPDr_t;
#define SC_X1_SPD_OVRR0_SPDr_CLR BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_SPDr_CLR
#define SC_X1_SPD_OVRR0_SPDr_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_SPDr_SET
#define SC_X1_SPD_OVRR0_SPDr_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_SPDr_GET
#define SC_X1_SPD_OVRR0_SPDr_SPEEDf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_SPDr_SPEEDf_GET
#define SC_X1_SPD_OVRR0_SPDr_SPEEDf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_SPDr_SPEEDf_SET
#define SC_X1_SPD_OVRR0_SPDr_CL36RX_10BIT_PMD_DATA_ENf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_SPDr_CL36RX_10BIT_PMD_DATA_ENf_GET
#define SC_X1_SPD_OVRR0_SPDr_CL36RX_10BIT_PMD_DATA_ENf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_SPDr_CL36RX_10BIT_PMD_DATA_ENf_SET
#define SC_X1_SPD_OVRR0_SPDr_CL36RX_ENf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_SPDr_CL36RX_ENf_GET
#define SC_X1_SPD_OVRR0_SPDr_CL36RX_ENf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_SPDr_CL36RX_ENf_SET
#define SC_X1_SPD_OVRR0_SPDr_CL36TX_ENf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_SPDr_CL36TX_ENf_GET
#define SC_X1_SPD_OVRR0_SPDr_CL36TX_ENf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_SPDr_CL36TX_ENf_SET
#define SC_X1_SPD_OVRR0_SPDr_T_PMA_40B_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_SPDr_T_PMA_40B_MODEf_GET
#define SC_X1_SPD_OVRR0_SPDr_T_PMA_40B_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_SPDr_T_PMA_40B_MODEf_SET
#define SC_X1_SPD_OVRR0_SPDr_NUM_LANESf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_SPDr_NUM_LANESf_GET
#define SC_X1_SPD_OVRR0_SPDr_NUM_LANESf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_SPDr_NUM_LANESf_SET
#define READ_SC_X1_SPD_OVRR0_SPDr BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR0_SPDr
#define WRITE_SC_X1_SPD_OVRR0_SPDr BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR0_SPDr
#define MODIFY_SC_X1_SPD_OVRR0_SPDr BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR0_SPDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_SPDr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X1_SPD_OVRR0_0
 * BLOCKS:   SC_X1_SPEED_OVERRIDE0
 * REGADDR:  0x9272
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     SCR_MODE         
 *     T_PMA_BTMX_MODE  Number of PCS lanes bitmuxed
 *     T_HG2_ENABLE     Enables HG2 support for PCS
 *     T_ENC_MODE       
 *     T_FIFO_MODE      T_FIFO stage control field
 *     OS_MODE          
 *     CL72_EN          Enables cl72
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_0r (0x00109272 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_0r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR0_0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_0r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr0_0[1];
	uint32_t _sc_x1_spd_ovrr0_0;
} BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_0r_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_0r_CLR(r) (r).sc_x1_spd_ovrr0_0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_0r_SET(r,d) (r).sc_x1_spd_ovrr0_0[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_0r_GET(r) (r).sc_x1_spd_ovrr0_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_0r_CL72_ENf_GET(r) ((((r).sc_x1_spd_ovrr0_0[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_0r_CL72_ENf_SET(r,f) (r).sc_x1_spd_ovrr0_0[0]=(((r).sc_x1_spd_ovrr0_0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_0r_OS_MODEf_GET(r) ((((r).sc_x1_spd_ovrr0_0[0]) >> 11) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_0r_OS_MODEf_SET(r,f) (r).sc_x1_spd_ovrr0_0[0]=(((r).sc_x1_spd_ovrr0_0[0] & ~((uint32_t)0xf << 11)) | ((((uint32_t)f) & 0xf) << 11)) | (15 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_0r_T_FIFO_MODEf_GET(r) ((((r).sc_x1_spd_ovrr0_0[0]) >> 9) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_0r_T_FIFO_MODEf_SET(r,f) (r).sc_x1_spd_ovrr0_0[0]=(((r).sc_x1_spd_ovrr0_0[0] & ~((uint32_t)0x3 << 9)) | ((((uint32_t)f) & 0x3) << 9)) | (3 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_0r_T_ENC_MODEf_GET(r) ((((r).sc_x1_spd_ovrr0_0[0]) >> 7) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_0r_T_ENC_MODEf_SET(r,f) (r).sc_x1_spd_ovrr0_0[0]=(((r).sc_x1_spd_ovrr0_0[0] & ~((uint32_t)0x3 << 7)) | ((((uint32_t)f) & 0x3) << 7)) | (3 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_0r_T_HG2_ENABLEf_GET(r) ((((r).sc_x1_spd_ovrr0_0[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_0r_T_HG2_ENABLEf_SET(r,f) (r).sc_x1_spd_ovrr0_0[0]=(((r).sc_x1_spd_ovrr0_0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_0r_T_PMA_BTMX_MODEf_GET(r) ((((r).sc_x1_spd_ovrr0_0[0]) >> 4) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_0r_T_PMA_BTMX_MODEf_SET(r,f) (r).sc_x1_spd_ovrr0_0[0]=(((r).sc_x1_spd_ovrr0_0[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_0r_SCR_MODEf_GET(r) ((((r).sc_x1_spd_ovrr0_0[0]) >> 1) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_0r_SCR_MODEf_SET(r,f) (r).sc_x1_spd_ovrr0_0[0]=(((r).sc_x1_spd_ovrr0_0[0] & ~((uint32_t)0x7 << 1)) | ((((uint32_t)f) & 0x7) << 1)) | (7 << (16 + 1))

/*
 * These macros can be used to access SC_X1_SPD_OVRR0_0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR0_0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_0r,(_r._sc_x1_spd_ovrr0_0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR0_0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_0r,(_r._sc_x1_spd_ovrr0_0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR0_0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_0r,(_r._sc_x1_spd_ovrr0_0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR0_0r BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_0r
#define SC_X1_SPD_OVRR0_0r_SIZE BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_0r_t SC_X1_SPD_OVRR0_0r_t;
#define SC_X1_SPD_OVRR0_0r_CLR BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_0r_CLR
#define SC_X1_SPD_OVRR0_0r_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_0r_SET
#define SC_X1_SPD_OVRR0_0r_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_0r_GET
#define SC_X1_SPD_OVRR0_0r_CL72_ENf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_0r_CL72_ENf_GET
#define SC_X1_SPD_OVRR0_0r_CL72_ENf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_0r_CL72_ENf_SET
#define SC_X1_SPD_OVRR0_0r_OS_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_0r_OS_MODEf_GET
#define SC_X1_SPD_OVRR0_0r_OS_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_0r_OS_MODEf_SET
#define SC_X1_SPD_OVRR0_0r_T_FIFO_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_0r_T_FIFO_MODEf_GET
#define SC_X1_SPD_OVRR0_0r_T_FIFO_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_0r_T_FIFO_MODEf_SET
#define SC_X1_SPD_OVRR0_0r_T_ENC_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_0r_T_ENC_MODEf_GET
#define SC_X1_SPD_OVRR0_0r_T_ENC_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_0r_T_ENC_MODEf_SET
#define SC_X1_SPD_OVRR0_0r_T_HG2_ENABLEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_0r_T_HG2_ENABLEf_GET
#define SC_X1_SPD_OVRR0_0r_T_HG2_ENABLEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_0r_T_HG2_ENABLEf_SET
#define SC_X1_SPD_OVRR0_0r_T_PMA_BTMX_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_0r_T_PMA_BTMX_MODEf_GET
#define SC_X1_SPD_OVRR0_0r_T_PMA_BTMX_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_0r_T_PMA_BTMX_MODEf_SET
#define SC_X1_SPD_OVRR0_0r_SCR_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_0r_SCR_MODEf_GET
#define SC_X1_SPD_OVRR0_0r_SCR_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_0r_SCR_MODEf_SET
#define READ_SC_X1_SPD_OVRR0_0r BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR0_0r
#define WRITE_SC_X1_SPD_OVRR0_0r BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR0_0r
#define MODIFY_SC_X1_SPD_OVRR0_0r BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR0_0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X1_SPD_OVRR0_1
 * BLOCKS:   SC_X1_SPEED_OVERRIDE0
 * REGADDR:  0x9273
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BS_BTMX_MODE     Bit-mux mode: Indicates the format of incoming data on a physical lane.
 *     BS_DIST_MODE     Block to lane distribution mode.BS_DIST_MODE_5_LANE_TDM - 5 lane TDM. Each block distributed in turn over output pseudo-logical lanes 0-4BS_DIST_MODE_2_LANE_TDM_2_VLANE - 2 lane TDM for 2 virtual lanes.Virtual Lane 0 output is ping-ponged over pseudo-logical lanes 0,2.Virtual Lane 1 output is ping-ponged over pseudo-logical lanes 1,3.BS_DIST_MODE_2_LANE_TDM_1_VLANE - 2 lane TDM for 1 virtual lane.Virtual Lane 0 output is ping-ponged over pseudo-logical lanes 0,2.BS_DIST_MODE_NO_TDM - No TDM. Virtual Lane output is sent directly to corresponding pseudo-logical lane.
 *     BS_SYNC_EN       Enable block synchronization: If enabled, block sync sm will attempt to slip data until sync is achieved.
 *     BS_SM_SYNC_MODE  Block Sync Mode: When bs_sync_en==1, this bit indicates if cl49 or cl82 state machine operation is used.1'b0 - Clause 821'b1 - Clause 49
 *     DEC_FSM_MODE     
 *     DESKEW_MODE      
 *     DEC_TL_MODE      
 *     DESCR_MODE       
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_1r (0x00109273 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_1r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR0_1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_1r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr0_1[1];
	uint32_t _sc_x1_spd_ovrr0_1;
} BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_1r_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_1r_CLR(r) (r).sc_x1_spd_ovrr0_1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_1r_SET(r,d) (r).sc_x1_spd_ovrr0_1[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_1r_GET(r) (r).sc_x1_spd_ovrr0_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_1r_DESCR_MODEf_GET(r) ((((r).sc_x1_spd_ovrr0_1[0]) >> 14) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_1r_DESCR_MODEf_SET(r,f) (r).sc_x1_spd_ovrr0_1[0]=(((r).sc_x1_spd_ovrr0_1[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_1r_DEC_TL_MODEf_GET(r) ((((r).sc_x1_spd_ovrr0_1[0]) >> 12) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_1r_DEC_TL_MODEf_SET(r,f) (r).sc_x1_spd_ovrr0_1[0]=(((r).sc_x1_spd_ovrr0_1[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12)) | (3 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_1r_DESKEW_MODEf_GET(r) ((((r).sc_x1_spd_ovrr0_1[0]) >> 8) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_1r_DESKEW_MODEf_SET(r,f) (r).sc_x1_spd_ovrr0_1[0]=(((r).sc_x1_spd_ovrr0_1[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_1r_DEC_FSM_MODEf_GET(r) ((((r).sc_x1_spd_ovrr0_1[0]) >> 6) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_1r_DEC_FSM_MODEf_SET(r,f) (r).sc_x1_spd_ovrr0_1[0]=(((r).sc_x1_spd_ovrr0_1[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6)) | (3 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_1r_BS_SM_SYNC_MODEf_GET(r) ((((r).sc_x1_spd_ovrr0_1[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_1r_BS_SM_SYNC_MODEf_SET(r,f) (r).sc_x1_spd_ovrr0_1[0]=(((r).sc_x1_spd_ovrr0_1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_1r_BS_SYNC_ENf_GET(r) ((((r).sc_x1_spd_ovrr0_1[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_1r_BS_SYNC_ENf_SET(r,f) (r).sc_x1_spd_ovrr0_1[0]=(((r).sc_x1_spd_ovrr0_1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_1r_BS_DIST_MODEf_GET(r) ((((r).sc_x1_spd_ovrr0_1[0]) >> 2) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_1r_BS_DIST_MODEf_SET(r,f) (r).sc_x1_spd_ovrr0_1[0]=(((r).sc_x1_spd_ovrr0_1[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2)) | (3 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_1r_BS_BTMX_MODEf_GET(r) (((r).sc_x1_spd_ovrr0_1[0]) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_1r_BS_BTMX_MODEf_SET(r,f) (r).sc_x1_spd_ovrr0_1[0]=(((r).sc_x1_spd_ovrr0_1[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR0_1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR0_1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_1r,(_r._sc_x1_spd_ovrr0_1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR0_1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_1r,(_r._sc_x1_spd_ovrr0_1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR0_1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_1r,(_r._sc_x1_spd_ovrr0_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR0_1r BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_1r
#define SC_X1_SPD_OVRR0_1r_SIZE BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_1r_t SC_X1_SPD_OVRR0_1r_t;
#define SC_X1_SPD_OVRR0_1r_CLR BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_1r_CLR
#define SC_X1_SPD_OVRR0_1r_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_1r_SET
#define SC_X1_SPD_OVRR0_1r_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_1r_GET
#define SC_X1_SPD_OVRR0_1r_DESCR_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_1r_DESCR_MODEf_GET
#define SC_X1_SPD_OVRR0_1r_DESCR_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_1r_DESCR_MODEf_SET
#define SC_X1_SPD_OVRR0_1r_DEC_TL_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_1r_DEC_TL_MODEf_GET
#define SC_X1_SPD_OVRR0_1r_DEC_TL_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_1r_DEC_TL_MODEf_SET
#define SC_X1_SPD_OVRR0_1r_DESKEW_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_1r_DESKEW_MODEf_GET
#define SC_X1_SPD_OVRR0_1r_DESKEW_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_1r_DESKEW_MODEf_SET
#define SC_X1_SPD_OVRR0_1r_DEC_FSM_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_1r_DEC_FSM_MODEf_GET
#define SC_X1_SPD_OVRR0_1r_DEC_FSM_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_1r_DEC_FSM_MODEf_SET
#define SC_X1_SPD_OVRR0_1r_BS_SM_SYNC_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_1r_BS_SM_SYNC_MODEf_GET
#define SC_X1_SPD_OVRR0_1r_BS_SM_SYNC_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_1r_BS_SM_SYNC_MODEf_SET
#define SC_X1_SPD_OVRR0_1r_BS_SYNC_ENf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_1r_BS_SYNC_ENf_GET
#define SC_X1_SPD_OVRR0_1r_BS_SYNC_ENf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_1r_BS_SYNC_ENf_SET
#define SC_X1_SPD_OVRR0_1r_BS_DIST_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_1r_BS_DIST_MODEf_GET
#define SC_X1_SPD_OVRR0_1r_BS_DIST_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_1r_BS_DIST_MODEf_SET
#define SC_X1_SPD_OVRR0_1r_BS_BTMX_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_1r_BS_BTMX_MODEf_GET
#define SC_X1_SPD_OVRR0_1r_BS_BTMX_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_1r_BS_BTMX_MODEf_SET
#define READ_SC_X1_SPD_OVRR0_1r BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR0_1r
#define WRITE_SC_X1_SPD_OVRR0_1r BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR0_1r
#define MODIFY_SC_X1_SPD_OVRR0_1r BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR0_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X1_SPD_OVRR0_2
 * BLOCKS:   SC_X1_SPEED_OVERRIDE0
 * REGADDR:  0x9274
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CLOCKCNT0        clock count 0 for credit programming, range 5 to 4125
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_2r (0x00109274 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR0_2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_2r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr0_2[1];
	uint32_t _sc_x1_spd_ovrr0_2;
} BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_2r_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_2r_CLR(r) (r).sc_x1_spd_ovrr0_2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_2r_SET(r,d) (r).sc_x1_spd_ovrr0_2[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_2r_GET(r) (r).sc_x1_spd_ovrr0_2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_2r_CLOCKCNT0f_GET(r) (((r).sc_x1_spd_ovrr0_2[0]) & 0x3fff)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_2r_CLOCKCNT0f_SET(r,f) (r).sc_x1_spd_ovrr0_2[0]=(((r).sc_x1_spd_ovrr0_2[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff)) | (0x3fff << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR0_2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR0_2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_2r,(_r._sc_x1_spd_ovrr0_2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR0_2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_2r,(_r._sc_x1_spd_ovrr0_2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR0_2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_2r,(_r._sc_x1_spd_ovrr0_2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR0_2r BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_2r
#define SC_X1_SPD_OVRR0_2r_SIZE BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_2r_t SC_X1_SPD_OVRR0_2r_t;
#define SC_X1_SPD_OVRR0_2r_CLR BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_2r_CLR
#define SC_X1_SPD_OVRR0_2r_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_2r_SET
#define SC_X1_SPD_OVRR0_2r_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_2r_GET
#define SC_X1_SPD_OVRR0_2r_CLOCKCNT0f_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_2r_CLOCKCNT0f_GET
#define SC_X1_SPD_OVRR0_2r_CLOCKCNT0f_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_2r_CLOCKCNT0f_SET
#define READ_SC_X1_SPD_OVRR0_2r BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR0_2r
#define WRITE_SC_X1_SPD_OVRR0_2r BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR0_2r
#define MODIFY_SC_X1_SPD_OVRR0_2r BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR0_2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X1_SPD_OVRR0_3
 * BLOCKS:   SC_X1_SPEED_OVERRIDE0
 * REGADDR:  0x9275
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CLOCKCNT1        clock count 1 for credit programming, range 4 to 12
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_3r (0x00109275 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_3r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR0_3.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_3r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr0_3[1];
	uint32_t _sc_x1_spd_ovrr0_3;
} BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_3r_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_3r_CLR(r) (r).sc_x1_spd_ovrr0_3[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_3r_SET(r,d) (r).sc_x1_spd_ovrr0_3[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_3r_GET(r) (r).sc_x1_spd_ovrr0_3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_3r_CLOCKCNT1f_GET(r) (((r).sc_x1_spd_ovrr0_3[0]) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_3r_CLOCKCNT1f_SET(r,f) (r).sc_x1_spd_ovrr0_3[0]=(((r).sc_x1_spd_ovrr0_3[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR0_3.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR0_3r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_3r,(_r._sc_x1_spd_ovrr0_3))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR0_3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_3r,(_r._sc_x1_spd_ovrr0_3)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR0_3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_3r,(_r._sc_x1_spd_ovrr0_3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR0_3r BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_3r
#define SC_X1_SPD_OVRR0_3r_SIZE BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_3r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_3r_t SC_X1_SPD_OVRR0_3r_t;
#define SC_X1_SPD_OVRR0_3r_CLR BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_3r_CLR
#define SC_X1_SPD_OVRR0_3r_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_3r_SET
#define SC_X1_SPD_OVRR0_3r_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_3r_GET
#define SC_X1_SPD_OVRR0_3r_CLOCKCNT1f_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_3r_CLOCKCNT1f_GET
#define SC_X1_SPD_OVRR0_3r_CLOCKCNT1f_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_3r_CLOCKCNT1f_SET
#define READ_SC_X1_SPD_OVRR0_3r BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR0_3r
#define WRITE_SC_X1_SPD_OVRR0_3r BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR0_3r
#define MODIFY_SC_X1_SPD_OVRR0_3r BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR0_3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X1_SPD_OVRR0_4
 * BLOCKS:   SC_X1_SPEED_OVERRIDE0
 * REGADDR:  0x9276
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LOOPCNT1         loop count 1 for credit programming, range 2 to 18
 *     LOOPCNT0         loop count 0 for credit programming, range 1 to 1
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_4r (0x00109276 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_4r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR0_4.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_4r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr0_4[1];
	uint32_t _sc_x1_spd_ovrr0_4;
} BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_4r_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_4r_CLR(r) (r).sc_x1_spd_ovrr0_4[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_4r_SET(r,d) (r).sc_x1_spd_ovrr0_4[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_4r_GET(r) (r).sc_x1_spd_ovrr0_4[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_4r_LOOPCNT0f_GET(r) ((((r).sc_x1_spd_ovrr0_4[0]) >> 6) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_4r_LOOPCNT0f_SET(r,f) (r).sc_x1_spd_ovrr0_4[0]=(((r).sc_x1_spd_ovrr0_4[0] & ~((uint32_t)0xff << 6)) | ((((uint32_t)f) & 0xff) << 6)) | (255 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_4r_LOOPCNT1f_GET(r) (((r).sc_x1_spd_ovrr0_4[0]) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_4r_LOOPCNT1f_SET(r,f) (r).sc_x1_spd_ovrr0_4[0]=(((r).sc_x1_spd_ovrr0_4[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR0_4.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR0_4r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_4r,(_r._sc_x1_spd_ovrr0_4))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR0_4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_4r,(_r._sc_x1_spd_ovrr0_4)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR0_4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_4r,(_r._sc_x1_spd_ovrr0_4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR0_4r BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_4r
#define SC_X1_SPD_OVRR0_4r_SIZE BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_4r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_4r_t SC_X1_SPD_OVRR0_4r_t;
#define SC_X1_SPD_OVRR0_4r_CLR BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_4r_CLR
#define SC_X1_SPD_OVRR0_4r_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_4r_SET
#define SC_X1_SPD_OVRR0_4r_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_4r_GET
#define SC_X1_SPD_OVRR0_4r_LOOPCNT0f_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_4r_LOOPCNT0f_GET
#define SC_X1_SPD_OVRR0_4r_LOOPCNT0f_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_4r_LOOPCNT0f_SET
#define SC_X1_SPD_OVRR0_4r_LOOPCNT1f_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_4r_LOOPCNT1f_GET
#define SC_X1_SPD_OVRR0_4r_LOOPCNT1f_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_4r_LOOPCNT1f_SET
#define READ_SC_X1_SPD_OVRR0_4r BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR0_4r
#define WRITE_SC_X1_SPD_OVRR0_4r BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR0_4r
#define MODIFY_SC_X1_SPD_OVRR0_4r BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR0_4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_4r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X1_SPD_OVRR0_5
 * BLOCKS:   SC_X1_SPEED_OVERRIDE0
 * REGADDR:  0x9277
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MAC_CREDITGENCNT CGC for mac credit generation, range 1 to 2063
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_5r (0x00109277 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_5r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR0_5.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_5r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr0_5[1];
	uint32_t _sc_x1_spd_ovrr0_5;
} BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_5r_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_5r_CLR(r) (r).sc_x1_spd_ovrr0_5[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_5r_SET(r,d) (r).sc_x1_spd_ovrr0_5[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_5r_GET(r) (r).sc_x1_spd_ovrr0_5[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_5r_MAC_CREDITGENCNTf_GET(r) (((r).sc_x1_spd_ovrr0_5[0]) & 0x1fff)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_5r_MAC_CREDITGENCNTf_SET(r,f) (r).sc_x1_spd_ovrr0_5[0]=(((r).sc_x1_spd_ovrr0_5[0] & ~((uint32_t)0x1fff)) | (((uint32_t)f) & 0x1fff)) | (0x1fff << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR0_5.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR0_5r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_5r,(_r._sc_x1_spd_ovrr0_5))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR0_5r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_5r,(_r._sc_x1_spd_ovrr0_5)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR0_5r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_5r,(_r._sc_x1_spd_ovrr0_5))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR0_5r BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_5r
#define SC_X1_SPD_OVRR0_5r_SIZE BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_5r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_5r_t SC_X1_SPD_OVRR0_5r_t;
#define SC_X1_SPD_OVRR0_5r_CLR BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_5r_CLR
#define SC_X1_SPD_OVRR0_5r_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_5r_SET
#define SC_X1_SPD_OVRR0_5r_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_5r_GET
#define SC_X1_SPD_OVRR0_5r_MAC_CREDITGENCNTf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_5r_MAC_CREDITGENCNTf_GET
#define SC_X1_SPD_OVRR0_5r_MAC_CREDITGENCNTf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_5r_MAC_CREDITGENCNTf_SET
#define READ_SC_X1_SPD_OVRR0_5r BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR0_5r
#define WRITE_SC_X1_SPD_OVRR0_5r BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR0_5r
#define MODIFY_SC_X1_SPD_OVRR0_5r BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR0_5r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_5r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X1_SPD_OVRR0_6
 * BLOCKS:   SC_X1_SPEED_OVERRIDE0
 * REGADDR:  0x9278
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     T_CL91_CW_SCRAMBLE Indicates whether the CL91 codeword should be scrambled or not. It should be set to 1 in FC mode.
 *     T_FIVE_BIT_XOR_EN 1'b1 - XOR 4:0 with 12:8, 1'b0 - No XOR of the 5 bits
 *     T_PMA_CL91_MUX_SEL T_PMA MUX CL91 select.
 *     T_PMA_WATERMARK  T_PMA FIFO watermark. In units of 66-bit blocks.
 *     T_PMA_BITMUX_DELAY T_PMA FIFO delay after watermark is reached (in units of cycles)
 *     AM_SPACING_MUL   
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_6r (0x00109278 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_6r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR0_6.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_6r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr0_6[1];
	uint32_t _sc_x1_spd_ovrr0_6;
} BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_6r_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_6r_CLR(r) (r).sc_x1_spd_ovrr0_6[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_6r_SET(r,d) (r).sc_x1_spd_ovrr0_6[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_6r_GET(r) (r).sc_x1_spd_ovrr0_6[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_6r_AM_SPACING_MULf_GET(r) ((((r).sc_x1_spd_ovrr0_6[0]) >> 9) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_6r_AM_SPACING_MULf_SET(r,f) (r).sc_x1_spd_ovrr0_6[0]=(((r).sc_x1_spd_ovrr0_6[0] & ~((uint32_t)0x3 << 9)) | ((((uint32_t)f) & 0x3) << 9)) | (3 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_6r_T_PMA_BITMUX_DELAYf_GET(r) ((((r).sc_x1_spd_ovrr0_6[0]) >> 7) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_6r_T_PMA_BITMUX_DELAYf_SET(r,f) (r).sc_x1_spd_ovrr0_6[0]=(((r).sc_x1_spd_ovrr0_6[0] & ~((uint32_t)0x3 << 7)) | ((((uint32_t)f) & 0x3) << 7)) | (3 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_6r_T_PMA_WATERMARKf_GET(r) ((((r).sc_x1_spd_ovrr0_6[0]) >> 3) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_6r_T_PMA_WATERMARKf_SET(r,f) (r).sc_x1_spd_ovrr0_6[0]=(((r).sc_x1_spd_ovrr0_6[0] & ~((uint32_t)0xf << 3)) | ((((uint32_t)f) & 0xf) << 3)) | (15 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_6r_T_PMA_CL91_MUX_SELf_GET(r) ((((r).sc_x1_spd_ovrr0_6[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_6r_T_PMA_CL91_MUX_SELf_SET(r,f) (r).sc_x1_spd_ovrr0_6[0]=(((r).sc_x1_spd_ovrr0_6[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_6r_T_FIVE_BIT_XOR_ENf_GET(r) ((((r).sc_x1_spd_ovrr0_6[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_6r_T_FIVE_BIT_XOR_ENf_SET(r,f) (r).sc_x1_spd_ovrr0_6[0]=(((r).sc_x1_spd_ovrr0_6[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_6r_T_CL91_CW_SCRAMBLEf_GET(r) (((r).sc_x1_spd_ovrr0_6[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_6r_T_CL91_CW_SCRAMBLEf_SET(r,f) (r).sc_x1_spd_ovrr0_6[0]=(((r).sc_x1_spd_ovrr0_6[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR0_6.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR0_6r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_6r,(_r._sc_x1_spd_ovrr0_6))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR0_6r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_6r,(_r._sc_x1_spd_ovrr0_6)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR0_6r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_6r,(_r._sc_x1_spd_ovrr0_6))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR0_6r BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_6r
#define SC_X1_SPD_OVRR0_6r_SIZE BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_6r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_6r_t SC_X1_SPD_OVRR0_6r_t;
#define SC_X1_SPD_OVRR0_6r_CLR BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_6r_CLR
#define SC_X1_SPD_OVRR0_6r_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_6r_SET
#define SC_X1_SPD_OVRR0_6r_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_6r_GET
#define SC_X1_SPD_OVRR0_6r_AM_SPACING_MULf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_6r_AM_SPACING_MULf_GET
#define SC_X1_SPD_OVRR0_6r_AM_SPACING_MULf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_6r_AM_SPACING_MULf_SET
#define SC_X1_SPD_OVRR0_6r_T_PMA_BITMUX_DELAYf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_6r_T_PMA_BITMUX_DELAYf_GET
#define SC_X1_SPD_OVRR0_6r_T_PMA_BITMUX_DELAYf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_6r_T_PMA_BITMUX_DELAYf_SET
#define SC_X1_SPD_OVRR0_6r_T_PMA_WATERMARKf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_6r_T_PMA_WATERMARKf_GET
#define SC_X1_SPD_OVRR0_6r_T_PMA_WATERMARKf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_6r_T_PMA_WATERMARKf_SET
#define SC_X1_SPD_OVRR0_6r_T_PMA_CL91_MUX_SELf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_6r_T_PMA_CL91_MUX_SELf_GET
#define SC_X1_SPD_OVRR0_6r_T_PMA_CL91_MUX_SELf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_6r_T_PMA_CL91_MUX_SELf_SET
#define SC_X1_SPD_OVRR0_6r_T_FIVE_BIT_XOR_ENf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_6r_T_FIVE_BIT_XOR_ENf_GET
#define SC_X1_SPD_OVRR0_6r_T_FIVE_BIT_XOR_ENf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_6r_T_FIVE_BIT_XOR_ENf_SET
#define SC_X1_SPD_OVRR0_6r_T_CL91_CW_SCRAMBLEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_6r_T_CL91_CW_SCRAMBLEf_GET
#define SC_X1_SPD_OVRR0_6r_T_CL91_CW_SCRAMBLEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_6r_T_CL91_CW_SCRAMBLEf_SET
#define READ_SC_X1_SPD_OVRR0_6r BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR0_6r
#define WRITE_SC_X1_SPD_OVRR0_6r BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR0_6r
#define MODIFY_SC_X1_SPD_OVRR0_6r BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR0_6r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_6r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X1_SPD_OVRR0_7
 * BLOCKS:   SC_X1_SPEED_OVERRIDE0
 * REGADDR:  0x9279
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL91_BLKSYNC_MODE 
 *     R_MERGE_MODE     
 *     R_CL91_CW_SCRAMBLE Indicates whether the CL91 codeword needs to be descrambled. Should be enabled for FC mode.
 *     R_TC_IN_MODE     Indicates whether CL91 is turned ON for the port or not.
 *     R_TC_MODE        
 *     R_FIVE_BIT_XOR_EN 1'b1 - XOR 4:0 with 12:8, 1'b0 - No XOR of the 5 bits
 *     R_TC_OUT_MODE    
 *     R_HG2_ENABLE     Enables HG2 support for PCS
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_7r (0x00109279 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_7r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR0_7.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_7r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr0_7[1];
	uint32_t _sc_x1_spd_ovrr0_7;
} BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_7r_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_7r_CLR(r) (r).sc_x1_spd_ovrr0_7[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_7r_SET(r,d) (r).sc_x1_spd_ovrr0_7[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_7r_GET(r) (r).sc_x1_spd_ovrr0_7[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_7r_R_HG2_ENABLEf_GET(r) ((((r).sc_x1_spd_ovrr0_7[0]) >> 13) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_7r_R_HG2_ENABLEf_SET(r,f) (r).sc_x1_spd_ovrr0_7[0]=(((r).sc_x1_spd_ovrr0_7[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_7r_R_TC_OUT_MODEf_GET(r) ((((r).sc_x1_spd_ovrr0_7[0]) >> 11) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_7r_R_TC_OUT_MODEf_SET(r,f) (r).sc_x1_spd_ovrr0_7[0]=(((r).sc_x1_spd_ovrr0_7[0] & ~((uint32_t)0x3 << 11)) | ((((uint32_t)f) & 0x3) << 11)) | (3 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_7r_R_FIVE_BIT_XOR_ENf_GET(r) ((((r).sc_x1_spd_ovrr0_7[0]) >> 10) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_7r_R_FIVE_BIT_XOR_ENf_SET(r,f) (r).sc_x1_spd_ovrr0_7[0]=(((r).sc_x1_spd_ovrr0_7[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_7r_R_TC_MODEf_GET(r) ((((r).sc_x1_spd_ovrr0_7[0]) >> 8) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_7r_R_TC_MODEf_SET(r,f) (r).sc_x1_spd_ovrr0_7[0]=(((r).sc_x1_spd_ovrr0_7[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_7r_R_TC_IN_MODEf_GET(r) ((((r).sc_x1_spd_ovrr0_7[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_7r_R_TC_IN_MODEf_SET(r,f) (r).sc_x1_spd_ovrr0_7[0]=(((r).sc_x1_spd_ovrr0_7[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_7r_R_CL91_CW_SCRAMBLEf_GET(r) ((((r).sc_x1_spd_ovrr0_7[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_7r_R_CL91_CW_SCRAMBLEf_SET(r,f) (r).sc_x1_spd_ovrr0_7[0]=(((r).sc_x1_spd_ovrr0_7[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_7r_R_MERGE_MODEf_GET(r) ((((r).sc_x1_spd_ovrr0_7[0]) >> 3) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_7r_R_MERGE_MODEf_SET(r,f) (r).sc_x1_spd_ovrr0_7[0]=(((r).sc_x1_spd_ovrr0_7[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3)) | (7 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_7r_CL91_BLKSYNC_MODEf_GET(r) (((r).sc_x1_spd_ovrr0_7[0]) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_7r_CL91_BLKSYNC_MODEf_SET(r,f) (r).sc_x1_spd_ovrr0_7[0]=(((r).sc_x1_spd_ovrr0_7[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR0_7.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR0_7r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_7r,(_r._sc_x1_spd_ovrr0_7))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR0_7r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_7r,(_r._sc_x1_spd_ovrr0_7)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR0_7r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_7r,(_r._sc_x1_spd_ovrr0_7))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR0_7r BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_7r
#define SC_X1_SPD_OVRR0_7r_SIZE BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_7r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_7r_t SC_X1_SPD_OVRR0_7r_t;
#define SC_X1_SPD_OVRR0_7r_CLR BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_7r_CLR
#define SC_X1_SPD_OVRR0_7r_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_7r_SET
#define SC_X1_SPD_OVRR0_7r_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_7r_GET
#define SC_X1_SPD_OVRR0_7r_R_HG2_ENABLEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_7r_R_HG2_ENABLEf_GET
#define SC_X1_SPD_OVRR0_7r_R_HG2_ENABLEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_7r_R_HG2_ENABLEf_SET
#define SC_X1_SPD_OVRR0_7r_R_TC_OUT_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_7r_R_TC_OUT_MODEf_GET
#define SC_X1_SPD_OVRR0_7r_R_TC_OUT_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_7r_R_TC_OUT_MODEf_SET
#define SC_X1_SPD_OVRR0_7r_R_FIVE_BIT_XOR_ENf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_7r_R_FIVE_BIT_XOR_ENf_GET
#define SC_X1_SPD_OVRR0_7r_R_FIVE_BIT_XOR_ENf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_7r_R_FIVE_BIT_XOR_ENf_SET
#define SC_X1_SPD_OVRR0_7r_R_TC_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_7r_R_TC_MODEf_GET
#define SC_X1_SPD_OVRR0_7r_R_TC_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_7r_R_TC_MODEf_SET
#define SC_X1_SPD_OVRR0_7r_R_TC_IN_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_7r_R_TC_IN_MODEf_GET
#define SC_X1_SPD_OVRR0_7r_R_TC_IN_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_7r_R_TC_IN_MODEf_SET
#define SC_X1_SPD_OVRR0_7r_R_CL91_CW_SCRAMBLEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_7r_R_CL91_CW_SCRAMBLEf_GET
#define SC_X1_SPD_OVRR0_7r_R_CL91_CW_SCRAMBLEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_7r_R_CL91_CW_SCRAMBLEf_SET
#define SC_X1_SPD_OVRR0_7r_R_MERGE_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_7r_R_MERGE_MODEf_GET
#define SC_X1_SPD_OVRR0_7r_R_MERGE_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_7r_R_MERGE_MODEf_SET
#define SC_X1_SPD_OVRR0_7r_CL91_BLKSYNC_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_7r_CL91_BLKSYNC_MODEf_GET
#define SC_X1_SPD_OVRR0_7r_CL91_BLKSYNC_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_7r_CL91_BLKSYNC_MODEf_SET
#define READ_SC_X1_SPD_OVRR0_7r BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR0_7r
#define WRITE_SC_X1_SPD_OVRR0_7r BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR0_7r
#define MODIFY_SC_X1_SPD_OVRR0_7r BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR0_7r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_7r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X1_SPD_OVRR0_8
 * BLOCKS:   SC_X1_SPEED_OVERRIDE0
 * REGADDR:  0x927a
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CORRUPT_2ND_GROUP Corrupt 2nd group of codeward
 *     CORRUPT_6TH_GROUP Corrupt 6th group of codeward
 *     CL74_SHCORRUPT   Sync Header Corruption for CL74 FEC Error (uncorrectable).0: Only 5 SH, 1: All SH corrupted.
 *     BER_COUNT_SEL    0: select count based on cl49 else based on cl82
 *     BER_WINDOW_SEL   0: select window based on cl49 else based on cl82
 *     USE_100G_AM0     AM0 will be taken from 100G AM
 *     USE_100G_AM123   AM 1, 2, 3 will be taken from 100G AMs
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_8r (0x0010927a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_8r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR0_8.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_8r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr0_8[1];
	uint32_t _sc_x1_spd_ovrr0_8;
} BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_8r_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_8r_CLR(r) (r).sc_x1_spd_ovrr0_8[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_8r_SET(r,d) (r).sc_x1_spd_ovrr0_8[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_8r_GET(r) (r).sc_x1_spd_ovrr0_8[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_8r_USE_100G_AM123f_GET(r) ((((r).sc_x1_spd_ovrr0_8[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_8r_USE_100G_AM123f_SET(r,f) (r).sc_x1_spd_ovrr0_8[0]=(((r).sc_x1_spd_ovrr0_8[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_8r_USE_100G_AM0f_GET(r) ((((r).sc_x1_spd_ovrr0_8[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_8r_USE_100G_AM0f_SET(r,f) (r).sc_x1_spd_ovrr0_8[0]=(((r).sc_x1_spd_ovrr0_8[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_8r_BER_WINDOW_SELf_GET(r) ((((r).sc_x1_spd_ovrr0_8[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_8r_BER_WINDOW_SELf_SET(r,f) (r).sc_x1_spd_ovrr0_8[0]=(((r).sc_x1_spd_ovrr0_8[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_8r_BER_COUNT_SELf_GET(r) ((((r).sc_x1_spd_ovrr0_8[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_8r_BER_COUNT_SELf_SET(r,f) (r).sc_x1_spd_ovrr0_8[0]=(((r).sc_x1_spd_ovrr0_8[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_8r_CL74_SHCORRUPTf_GET(r) ((((r).sc_x1_spd_ovrr0_8[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_8r_CL74_SHCORRUPTf_SET(r,f) (r).sc_x1_spd_ovrr0_8[0]=(((r).sc_x1_spd_ovrr0_8[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_8r_CORRUPT_6TH_GROUPf_GET(r) ((((r).sc_x1_spd_ovrr0_8[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_8r_CORRUPT_6TH_GROUPf_SET(r,f) (r).sc_x1_spd_ovrr0_8[0]=(((r).sc_x1_spd_ovrr0_8[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_8r_CORRUPT_2ND_GROUPf_GET(r) (((r).sc_x1_spd_ovrr0_8[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_8r_CORRUPT_2ND_GROUPf_SET(r,f) (r).sc_x1_spd_ovrr0_8[0]=(((r).sc_x1_spd_ovrr0_8[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR0_8.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR0_8r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_8r,(_r._sc_x1_spd_ovrr0_8))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR0_8r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_8r,(_r._sc_x1_spd_ovrr0_8)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR0_8r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_8r,(_r._sc_x1_spd_ovrr0_8))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR0_8r BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_8r
#define SC_X1_SPD_OVRR0_8r_SIZE BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_8r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_8r_t SC_X1_SPD_OVRR0_8r_t;
#define SC_X1_SPD_OVRR0_8r_CLR BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_8r_CLR
#define SC_X1_SPD_OVRR0_8r_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_8r_SET
#define SC_X1_SPD_OVRR0_8r_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_8r_GET
#define SC_X1_SPD_OVRR0_8r_USE_100G_AM123f_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_8r_USE_100G_AM123f_GET
#define SC_X1_SPD_OVRR0_8r_USE_100G_AM123f_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_8r_USE_100G_AM123f_SET
#define SC_X1_SPD_OVRR0_8r_USE_100G_AM0f_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_8r_USE_100G_AM0f_GET
#define SC_X1_SPD_OVRR0_8r_USE_100G_AM0f_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_8r_USE_100G_AM0f_SET
#define SC_X1_SPD_OVRR0_8r_BER_WINDOW_SELf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_8r_BER_WINDOW_SELf_GET
#define SC_X1_SPD_OVRR0_8r_BER_WINDOW_SELf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_8r_BER_WINDOW_SELf_SET
#define SC_X1_SPD_OVRR0_8r_BER_COUNT_SELf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_8r_BER_COUNT_SELf_GET
#define SC_X1_SPD_OVRR0_8r_BER_COUNT_SELf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_8r_BER_COUNT_SELf_SET
#define SC_X1_SPD_OVRR0_8r_CL74_SHCORRUPTf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_8r_CL74_SHCORRUPTf_GET
#define SC_X1_SPD_OVRR0_8r_CL74_SHCORRUPTf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_8r_CL74_SHCORRUPTf_SET
#define SC_X1_SPD_OVRR0_8r_CORRUPT_6TH_GROUPf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_8r_CORRUPT_6TH_GROUPf_GET
#define SC_X1_SPD_OVRR0_8r_CORRUPT_6TH_GROUPf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_8r_CORRUPT_6TH_GROUPf_SET
#define SC_X1_SPD_OVRR0_8r_CORRUPT_2ND_GROUPf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_8r_CORRUPT_2ND_GROUPf_GET
#define SC_X1_SPD_OVRR0_8r_CORRUPT_2ND_GROUPf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_8r_CORRUPT_2ND_GROUPf_SET
#define READ_SC_X1_SPD_OVRR0_8r BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR0_8r
#define WRITE_SC_X1_SPD_OVRR0_8r BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR0_8r
#define MODIFY_SC_X1_SPD_OVRR0_8r BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR0_8r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR0_8r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X1_SPD_OVRR1_SPD
 * BLOCKS:   SC_X1_SPEED_OVERRIDE1
 * REGADDR:  0x9280
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/W
 * FIELDS:
 *     NUM_LANES        Number of lanes for override configuration0   : NUM_LANES_01 - use 1 lane1   : NUM_LANES_02 - use 2 lanes2   : NUM_LANES_04 - use 4 lanes
 *     T_PMA_40B_MODE   1'b0 - 66-bit data write in t_pma.1'b1 - 40-bit data write in t_pma.
 *     CL36TX_EN        Per logical lane: cl36 TX pipeline: 1=enabled , 0=disabled
 *     CL36RX_EN        Per logical lane: cl36 RX pipeline: 1=enabled , 0=disabled
 *     CL36RX_10BIT_PMD_DATA_EN Per logical lane: Enables CL36 Rx Pipeline to use all 10-bits of PMD Rx data.This bit should be enabled in OS8.25 mode or 2.5G speed.
 *     SPEED            Actual speed set by SW
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_SPDr (0x00109280 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_SPDr_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR1_SPD.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_SPDr_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr1_spd[1];
	uint32_t _sc_x1_spd_ovrr1_spd;
} BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_SPDr_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_SPDr_CLR(r) (r).sc_x1_spd_ovrr1_spd[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_SPDr_SET(r,d) (r).sc_x1_spd_ovrr1_spd[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_SPDr_GET(r) (r).sc_x1_spd_ovrr1_spd[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_SPDr_SPEEDf_GET(r) ((((r).sc_x1_spd_ovrr1_spd[0]) >> 8) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_SPDr_SPEEDf_SET(r,f) (r).sc_x1_spd_ovrr1_spd[0]=(((r).sc_x1_spd_ovrr1_spd[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_SPDr_CL36RX_10BIT_PMD_DATA_ENf_GET(r) ((((r).sc_x1_spd_ovrr1_spd[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_SPDr_CL36RX_10BIT_PMD_DATA_ENf_SET(r,f) (r).sc_x1_spd_ovrr1_spd[0]=(((r).sc_x1_spd_ovrr1_spd[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_SPDr_CL36RX_ENf_GET(r) ((((r).sc_x1_spd_ovrr1_spd[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_SPDr_CL36RX_ENf_SET(r,f) (r).sc_x1_spd_ovrr1_spd[0]=(((r).sc_x1_spd_ovrr1_spd[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_SPDr_CL36TX_ENf_GET(r) ((((r).sc_x1_spd_ovrr1_spd[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_SPDr_CL36TX_ENf_SET(r,f) (r).sc_x1_spd_ovrr1_spd[0]=(((r).sc_x1_spd_ovrr1_spd[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_SPDr_T_PMA_40B_MODEf_GET(r) ((((r).sc_x1_spd_ovrr1_spd[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_SPDr_T_PMA_40B_MODEf_SET(r,f) (r).sc_x1_spd_ovrr1_spd[0]=(((r).sc_x1_spd_ovrr1_spd[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_SPDr_NUM_LANESf_GET(r) (((r).sc_x1_spd_ovrr1_spd[0]) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_SPDr_NUM_LANESf_SET(r,f) (r).sc_x1_spd_ovrr1_spd[0]=(((r).sc_x1_spd_ovrr1_spd[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR1_SPD.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR1_SPDr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_SPDr,(_r._sc_x1_spd_ovrr1_spd))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR1_SPDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_SPDr,(_r._sc_x1_spd_ovrr1_spd)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR1_SPDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_SPDr,(_r._sc_x1_spd_ovrr1_spd))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR1_SPDr BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_SPDr
#define SC_X1_SPD_OVRR1_SPDr_SIZE BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_SPDr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_SPDr_t SC_X1_SPD_OVRR1_SPDr_t;
#define SC_X1_SPD_OVRR1_SPDr_CLR BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_SPDr_CLR
#define SC_X1_SPD_OVRR1_SPDr_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_SPDr_SET
#define SC_X1_SPD_OVRR1_SPDr_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_SPDr_GET
#define SC_X1_SPD_OVRR1_SPDr_SPEEDf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_SPDr_SPEEDf_GET
#define SC_X1_SPD_OVRR1_SPDr_SPEEDf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_SPDr_SPEEDf_SET
#define SC_X1_SPD_OVRR1_SPDr_CL36RX_10BIT_PMD_DATA_ENf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_SPDr_CL36RX_10BIT_PMD_DATA_ENf_GET
#define SC_X1_SPD_OVRR1_SPDr_CL36RX_10BIT_PMD_DATA_ENf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_SPDr_CL36RX_10BIT_PMD_DATA_ENf_SET
#define SC_X1_SPD_OVRR1_SPDr_CL36RX_ENf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_SPDr_CL36RX_ENf_GET
#define SC_X1_SPD_OVRR1_SPDr_CL36RX_ENf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_SPDr_CL36RX_ENf_SET
#define SC_X1_SPD_OVRR1_SPDr_CL36TX_ENf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_SPDr_CL36TX_ENf_GET
#define SC_X1_SPD_OVRR1_SPDr_CL36TX_ENf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_SPDr_CL36TX_ENf_SET
#define SC_X1_SPD_OVRR1_SPDr_T_PMA_40B_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_SPDr_T_PMA_40B_MODEf_GET
#define SC_X1_SPD_OVRR1_SPDr_T_PMA_40B_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_SPDr_T_PMA_40B_MODEf_SET
#define SC_X1_SPD_OVRR1_SPDr_NUM_LANESf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_SPDr_NUM_LANESf_GET
#define SC_X1_SPD_OVRR1_SPDr_NUM_LANESf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_SPDr_NUM_LANESf_SET
#define READ_SC_X1_SPD_OVRR1_SPDr BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR1_SPDr
#define WRITE_SC_X1_SPD_OVRR1_SPDr BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR1_SPDr
#define MODIFY_SC_X1_SPD_OVRR1_SPDr BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR1_SPDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_SPDr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X1_SPD_OVRR1_0
 * BLOCKS:   SC_X1_SPEED_OVERRIDE1
 * REGADDR:  0x9282
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     SCR_MODE         
 *     T_PMA_BTMX_MODE  Number of PCS lanes bitmuxed
 *     T_HG2_ENABLE     Enables HG2 support for PCS
 *     T_ENC_MODE       
 *     T_FIFO_MODE      T_FIFO stage control field
 *     OS_MODE          
 *     CL72_EN          Enables cl72
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_0r (0x00109282 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_0r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR1_0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_0r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr1_0[1];
	uint32_t _sc_x1_spd_ovrr1_0;
} BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_0r_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_0r_CLR(r) (r).sc_x1_spd_ovrr1_0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_0r_SET(r,d) (r).sc_x1_spd_ovrr1_0[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_0r_GET(r) (r).sc_x1_spd_ovrr1_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_0r_CL72_ENf_GET(r) ((((r).sc_x1_spd_ovrr1_0[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_0r_CL72_ENf_SET(r,f) (r).sc_x1_spd_ovrr1_0[0]=(((r).sc_x1_spd_ovrr1_0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_0r_OS_MODEf_GET(r) ((((r).sc_x1_spd_ovrr1_0[0]) >> 11) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_0r_OS_MODEf_SET(r,f) (r).sc_x1_spd_ovrr1_0[0]=(((r).sc_x1_spd_ovrr1_0[0] & ~((uint32_t)0xf << 11)) | ((((uint32_t)f) & 0xf) << 11)) | (15 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_0r_T_FIFO_MODEf_GET(r) ((((r).sc_x1_spd_ovrr1_0[0]) >> 9) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_0r_T_FIFO_MODEf_SET(r,f) (r).sc_x1_spd_ovrr1_0[0]=(((r).sc_x1_spd_ovrr1_0[0] & ~((uint32_t)0x3 << 9)) | ((((uint32_t)f) & 0x3) << 9)) | (3 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_0r_T_ENC_MODEf_GET(r) ((((r).sc_x1_spd_ovrr1_0[0]) >> 7) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_0r_T_ENC_MODEf_SET(r,f) (r).sc_x1_spd_ovrr1_0[0]=(((r).sc_x1_spd_ovrr1_0[0] & ~((uint32_t)0x3 << 7)) | ((((uint32_t)f) & 0x3) << 7)) | (3 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_0r_T_HG2_ENABLEf_GET(r) ((((r).sc_x1_spd_ovrr1_0[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_0r_T_HG2_ENABLEf_SET(r,f) (r).sc_x1_spd_ovrr1_0[0]=(((r).sc_x1_spd_ovrr1_0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_0r_T_PMA_BTMX_MODEf_GET(r) ((((r).sc_x1_spd_ovrr1_0[0]) >> 4) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_0r_T_PMA_BTMX_MODEf_SET(r,f) (r).sc_x1_spd_ovrr1_0[0]=(((r).sc_x1_spd_ovrr1_0[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_0r_SCR_MODEf_GET(r) ((((r).sc_x1_spd_ovrr1_0[0]) >> 1) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_0r_SCR_MODEf_SET(r,f) (r).sc_x1_spd_ovrr1_0[0]=(((r).sc_x1_spd_ovrr1_0[0] & ~((uint32_t)0x7 << 1)) | ((((uint32_t)f) & 0x7) << 1)) | (7 << (16 + 1))

/*
 * These macros can be used to access SC_X1_SPD_OVRR1_0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR1_0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_0r,(_r._sc_x1_spd_ovrr1_0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR1_0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_0r,(_r._sc_x1_spd_ovrr1_0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR1_0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_0r,(_r._sc_x1_spd_ovrr1_0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR1_0r BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_0r
#define SC_X1_SPD_OVRR1_0r_SIZE BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_0r_t SC_X1_SPD_OVRR1_0r_t;
#define SC_X1_SPD_OVRR1_0r_CLR BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_0r_CLR
#define SC_X1_SPD_OVRR1_0r_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_0r_SET
#define SC_X1_SPD_OVRR1_0r_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_0r_GET
#define SC_X1_SPD_OVRR1_0r_CL72_ENf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_0r_CL72_ENf_GET
#define SC_X1_SPD_OVRR1_0r_CL72_ENf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_0r_CL72_ENf_SET
#define SC_X1_SPD_OVRR1_0r_OS_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_0r_OS_MODEf_GET
#define SC_X1_SPD_OVRR1_0r_OS_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_0r_OS_MODEf_SET
#define SC_X1_SPD_OVRR1_0r_T_FIFO_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_0r_T_FIFO_MODEf_GET
#define SC_X1_SPD_OVRR1_0r_T_FIFO_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_0r_T_FIFO_MODEf_SET
#define SC_X1_SPD_OVRR1_0r_T_ENC_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_0r_T_ENC_MODEf_GET
#define SC_X1_SPD_OVRR1_0r_T_ENC_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_0r_T_ENC_MODEf_SET
#define SC_X1_SPD_OVRR1_0r_T_HG2_ENABLEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_0r_T_HG2_ENABLEf_GET
#define SC_X1_SPD_OVRR1_0r_T_HG2_ENABLEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_0r_T_HG2_ENABLEf_SET
#define SC_X1_SPD_OVRR1_0r_T_PMA_BTMX_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_0r_T_PMA_BTMX_MODEf_GET
#define SC_X1_SPD_OVRR1_0r_T_PMA_BTMX_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_0r_T_PMA_BTMX_MODEf_SET
#define SC_X1_SPD_OVRR1_0r_SCR_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_0r_SCR_MODEf_GET
#define SC_X1_SPD_OVRR1_0r_SCR_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_0r_SCR_MODEf_SET
#define READ_SC_X1_SPD_OVRR1_0r BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR1_0r
#define WRITE_SC_X1_SPD_OVRR1_0r BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR1_0r
#define MODIFY_SC_X1_SPD_OVRR1_0r BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR1_0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X1_SPD_OVRR1_1
 * BLOCKS:   SC_X1_SPEED_OVERRIDE1
 * REGADDR:  0x9283
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BS_BTMX_MODE     Bit-mux mode: Indicates the format of incoming data on a physical lane.
 *     BS_DIST_MODE     Block to lane distribution mode.BS_DIST_MODE_5_LANE_TDM - 5 lane TDM. Each block distributed in turn over output pseudo-logical lanes 0-4BS_DIST_MODE_2_LANE_TDM_2_VLANE - 2 lane TDM for 2 virtual lanes.Virtual Lane 0 output is ping-ponged over pseudo-logical lanes 0,2.Virtual Lane 1 output is ping-ponged over pseudo-logical lanes 1,3.BS_DIST_MODE_2_LANE_TDM_1_VLANE - 2 lane TDM for 1 virtual lane.Virtual Lane 0 output is ping-ponged over pseudo-logical lanes 0,2.BS_DIST_MODE_NO_TDM - No TDM. Virtual Lane output is sent directly to corresponding pseudo-logical lane.
 *     BS_SYNC_EN       Enable block synchronization: If enabled, block sync sm will attempt to slip data until sync is achieved.
 *     BS_SM_SYNC_MODE  Block Sync Mode: When bs_sync_en==1, this bit indicates if cl49 or cl82 state machine operation is used.1'b0 - Clause 821'b1 - Clause 49
 *     DEC_FSM_MODE     
 *     DESKEW_MODE      
 *     DEC_TL_MODE      
 *     DESCR_MODE       
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_1r (0x00109283 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_1r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR1_1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_1r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr1_1[1];
	uint32_t _sc_x1_spd_ovrr1_1;
} BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_1r_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_1r_CLR(r) (r).sc_x1_spd_ovrr1_1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_1r_SET(r,d) (r).sc_x1_spd_ovrr1_1[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_1r_GET(r) (r).sc_x1_spd_ovrr1_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_1r_DESCR_MODEf_GET(r) ((((r).sc_x1_spd_ovrr1_1[0]) >> 14) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_1r_DESCR_MODEf_SET(r,f) (r).sc_x1_spd_ovrr1_1[0]=(((r).sc_x1_spd_ovrr1_1[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_1r_DEC_TL_MODEf_GET(r) ((((r).sc_x1_spd_ovrr1_1[0]) >> 12) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_1r_DEC_TL_MODEf_SET(r,f) (r).sc_x1_spd_ovrr1_1[0]=(((r).sc_x1_spd_ovrr1_1[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12)) | (3 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_1r_DESKEW_MODEf_GET(r) ((((r).sc_x1_spd_ovrr1_1[0]) >> 8) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_1r_DESKEW_MODEf_SET(r,f) (r).sc_x1_spd_ovrr1_1[0]=(((r).sc_x1_spd_ovrr1_1[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_1r_DEC_FSM_MODEf_GET(r) ((((r).sc_x1_spd_ovrr1_1[0]) >> 6) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_1r_DEC_FSM_MODEf_SET(r,f) (r).sc_x1_spd_ovrr1_1[0]=(((r).sc_x1_spd_ovrr1_1[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6)) | (3 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_1r_BS_SM_SYNC_MODEf_GET(r) ((((r).sc_x1_spd_ovrr1_1[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_1r_BS_SM_SYNC_MODEf_SET(r,f) (r).sc_x1_spd_ovrr1_1[0]=(((r).sc_x1_spd_ovrr1_1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_1r_BS_SYNC_ENf_GET(r) ((((r).sc_x1_spd_ovrr1_1[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_1r_BS_SYNC_ENf_SET(r,f) (r).sc_x1_spd_ovrr1_1[0]=(((r).sc_x1_spd_ovrr1_1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_1r_BS_DIST_MODEf_GET(r) ((((r).sc_x1_spd_ovrr1_1[0]) >> 2) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_1r_BS_DIST_MODEf_SET(r,f) (r).sc_x1_spd_ovrr1_1[0]=(((r).sc_x1_spd_ovrr1_1[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2)) | (3 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_1r_BS_BTMX_MODEf_GET(r) (((r).sc_x1_spd_ovrr1_1[0]) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_1r_BS_BTMX_MODEf_SET(r,f) (r).sc_x1_spd_ovrr1_1[0]=(((r).sc_x1_spd_ovrr1_1[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR1_1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR1_1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_1r,(_r._sc_x1_spd_ovrr1_1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR1_1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_1r,(_r._sc_x1_spd_ovrr1_1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR1_1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_1r,(_r._sc_x1_spd_ovrr1_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR1_1r BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_1r
#define SC_X1_SPD_OVRR1_1r_SIZE BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_1r_t SC_X1_SPD_OVRR1_1r_t;
#define SC_X1_SPD_OVRR1_1r_CLR BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_1r_CLR
#define SC_X1_SPD_OVRR1_1r_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_1r_SET
#define SC_X1_SPD_OVRR1_1r_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_1r_GET
#define SC_X1_SPD_OVRR1_1r_DESCR_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_1r_DESCR_MODEf_GET
#define SC_X1_SPD_OVRR1_1r_DESCR_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_1r_DESCR_MODEf_SET
#define SC_X1_SPD_OVRR1_1r_DEC_TL_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_1r_DEC_TL_MODEf_GET
#define SC_X1_SPD_OVRR1_1r_DEC_TL_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_1r_DEC_TL_MODEf_SET
#define SC_X1_SPD_OVRR1_1r_DESKEW_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_1r_DESKEW_MODEf_GET
#define SC_X1_SPD_OVRR1_1r_DESKEW_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_1r_DESKEW_MODEf_SET
#define SC_X1_SPD_OVRR1_1r_DEC_FSM_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_1r_DEC_FSM_MODEf_GET
#define SC_X1_SPD_OVRR1_1r_DEC_FSM_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_1r_DEC_FSM_MODEf_SET
#define SC_X1_SPD_OVRR1_1r_BS_SM_SYNC_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_1r_BS_SM_SYNC_MODEf_GET
#define SC_X1_SPD_OVRR1_1r_BS_SM_SYNC_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_1r_BS_SM_SYNC_MODEf_SET
#define SC_X1_SPD_OVRR1_1r_BS_SYNC_ENf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_1r_BS_SYNC_ENf_GET
#define SC_X1_SPD_OVRR1_1r_BS_SYNC_ENf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_1r_BS_SYNC_ENf_SET
#define SC_X1_SPD_OVRR1_1r_BS_DIST_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_1r_BS_DIST_MODEf_GET
#define SC_X1_SPD_OVRR1_1r_BS_DIST_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_1r_BS_DIST_MODEf_SET
#define SC_X1_SPD_OVRR1_1r_BS_BTMX_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_1r_BS_BTMX_MODEf_GET
#define SC_X1_SPD_OVRR1_1r_BS_BTMX_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_1r_BS_BTMX_MODEf_SET
#define READ_SC_X1_SPD_OVRR1_1r BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR1_1r
#define WRITE_SC_X1_SPD_OVRR1_1r BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR1_1r
#define MODIFY_SC_X1_SPD_OVRR1_1r BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR1_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X1_SPD_OVRR1_2
 * BLOCKS:   SC_X1_SPEED_OVERRIDE1
 * REGADDR:  0x9284
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CLOCKCNT0        clock count 0 for credit programming, range 5 to 4125
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_2r (0x00109284 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR1_2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_2r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr1_2[1];
	uint32_t _sc_x1_spd_ovrr1_2;
} BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_2r_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_2r_CLR(r) (r).sc_x1_spd_ovrr1_2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_2r_SET(r,d) (r).sc_x1_spd_ovrr1_2[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_2r_GET(r) (r).sc_x1_spd_ovrr1_2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_2r_CLOCKCNT0f_GET(r) (((r).sc_x1_spd_ovrr1_2[0]) & 0x3fff)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_2r_CLOCKCNT0f_SET(r,f) (r).sc_x1_spd_ovrr1_2[0]=(((r).sc_x1_spd_ovrr1_2[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff)) | (0x3fff << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR1_2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR1_2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_2r,(_r._sc_x1_spd_ovrr1_2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR1_2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_2r,(_r._sc_x1_spd_ovrr1_2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR1_2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_2r,(_r._sc_x1_spd_ovrr1_2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR1_2r BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_2r
#define SC_X1_SPD_OVRR1_2r_SIZE BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_2r_t SC_X1_SPD_OVRR1_2r_t;
#define SC_X1_SPD_OVRR1_2r_CLR BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_2r_CLR
#define SC_X1_SPD_OVRR1_2r_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_2r_SET
#define SC_X1_SPD_OVRR1_2r_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_2r_GET
#define SC_X1_SPD_OVRR1_2r_CLOCKCNT0f_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_2r_CLOCKCNT0f_GET
#define SC_X1_SPD_OVRR1_2r_CLOCKCNT0f_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_2r_CLOCKCNT0f_SET
#define READ_SC_X1_SPD_OVRR1_2r BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR1_2r
#define WRITE_SC_X1_SPD_OVRR1_2r BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR1_2r
#define MODIFY_SC_X1_SPD_OVRR1_2r BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR1_2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X1_SPD_OVRR1_3
 * BLOCKS:   SC_X1_SPEED_OVERRIDE1
 * REGADDR:  0x9285
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CLOCKCNT1        clock count 1 for credit programming, range 4 to 12
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_3r (0x00109285 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_3r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR1_3.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_3r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr1_3[1];
	uint32_t _sc_x1_spd_ovrr1_3;
} BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_3r_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_3r_CLR(r) (r).sc_x1_spd_ovrr1_3[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_3r_SET(r,d) (r).sc_x1_spd_ovrr1_3[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_3r_GET(r) (r).sc_x1_spd_ovrr1_3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_3r_CLOCKCNT1f_GET(r) (((r).sc_x1_spd_ovrr1_3[0]) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_3r_CLOCKCNT1f_SET(r,f) (r).sc_x1_spd_ovrr1_3[0]=(((r).sc_x1_spd_ovrr1_3[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR1_3.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR1_3r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_3r,(_r._sc_x1_spd_ovrr1_3))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR1_3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_3r,(_r._sc_x1_spd_ovrr1_3)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR1_3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_3r,(_r._sc_x1_spd_ovrr1_3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR1_3r BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_3r
#define SC_X1_SPD_OVRR1_3r_SIZE BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_3r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_3r_t SC_X1_SPD_OVRR1_3r_t;
#define SC_X1_SPD_OVRR1_3r_CLR BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_3r_CLR
#define SC_X1_SPD_OVRR1_3r_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_3r_SET
#define SC_X1_SPD_OVRR1_3r_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_3r_GET
#define SC_X1_SPD_OVRR1_3r_CLOCKCNT1f_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_3r_CLOCKCNT1f_GET
#define SC_X1_SPD_OVRR1_3r_CLOCKCNT1f_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_3r_CLOCKCNT1f_SET
#define READ_SC_X1_SPD_OVRR1_3r BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR1_3r
#define WRITE_SC_X1_SPD_OVRR1_3r BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR1_3r
#define MODIFY_SC_X1_SPD_OVRR1_3r BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR1_3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X1_SPD_OVRR1_4
 * BLOCKS:   SC_X1_SPEED_OVERRIDE1
 * REGADDR:  0x9286
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LOOPCNT1         loop count 1 for credit programming, range 2 to 18
 *     LOOPCNT0         loop count 0 for credit programming, range 1 to 1
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_4r (0x00109286 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_4r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR1_4.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_4r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr1_4[1];
	uint32_t _sc_x1_spd_ovrr1_4;
} BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_4r_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_4r_CLR(r) (r).sc_x1_spd_ovrr1_4[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_4r_SET(r,d) (r).sc_x1_spd_ovrr1_4[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_4r_GET(r) (r).sc_x1_spd_ovrr1_4[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_4r_LOOPCNT0f_GET(r) ((((r).sc_x1_spd_ovrr1_4[0]) >> 6) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_4r_LOOPCNT0f_SET(r,f) (r).sc_x1_spd_ovrr1_4[0]=(((r).sc_x1_spd_ovrr1_4[0] & ~((uint32_t)0xff << 6)) | ((((uint32_t)f) & 0xff) << 6)) | (255 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_4r_LOOPCNT1f_GET(r) (((r).sc_x1_spd_ovrr1_4[0]) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_4r_LOOPCNT1f_SET(r,f) (r).sc_x1_spd_ovrr1_4[0]=(((r).sc_x1_spd_ovrr1_4[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR1_4.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR1_4r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_4r,(_r._sc_x1_spd_ovrr1_4))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR1_4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_4r,(_r._sc_x1_spd_ovrr1_4)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR1_4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_4r,(_r._sc_x1_spd_ovrr1_4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR1_4r BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_4r
#define SC_X1_SPD_OVRR1_4r_SIZE BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_4r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_4r_t SC_X1_SPD_OVRR1_4r_t;
#define SC_X1_SPD_OVRR1_4r_CLR BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_4r_CLR
#define SC_X1_SPD_OVRR1_4r_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_4r_SET
#define SC_X1_SPD_OVRR1_4r_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_4r_GET
#define SC_X1_SPD_OVRR1_4r_LOOPCNT0f_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_4r_LOOPCNT0f_GET
#define SC_X1_SPD_OVRR1_4r_LOOPCNT0f_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_4r_LOOPCNT0f_SET
#define SC_X1_SPD_OVRR1_4r_LOOPCNT1f_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_4r_LOOPCNT1f_GET
#define SC_X1_SPD_OVRR1_4r_LOOPCNT1f_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_4r_LOOPCNT1f_SET
#define READ_SC_X1_SPD_OVRR1_4r BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR1_4r
#define WRITE_SC_X1_SPD_OVRR1_4r BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR1_4r
#define MODIFY_SC_X1_SPD_OVRR1_4r BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR1_4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_4r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X1_SPD_OVRR1_5
 * BLOCKS:   SC_X1_SPEED_OVERRIDE1
 * REGADDR:  0x9287
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MAC_CREDITGENCNT CGC for mac credit generation, range 1 to 2063
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_5r (0x00109287 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_5r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR1_5.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_5r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr1_5[1];
	uint32_t _sc_x1_spd_ovrr1_5;
} BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_5r_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_5r_CLR(r) (r).sc_x1_spd_ovrr1_5[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_5r_SET(r,d) (r).sc_x1_spd_ovrr1_5[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_5r_GET(r) (r).sc_x1_spd_ovrr1_5[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_5r_MAC_CREDITGENCNTf_GET(r) (((r).sc_x1_spd_ovrr1_5[0]) & 0x1fff)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_5r_MAC_CREDITGENCNTf_SET(r,f) (r).sc_x1_spd_ovrr1_5[0]=(((r).sc_x1_spd_ovrr1_5[0] & ~((uint32_t)0x1fff)) | (((uint32_t)f) & 0x1fff)) | (0x1fff << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR1_5.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR1_5r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_5r,(_r._sc_x1_spd_ovrr1_5))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR1_5r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_5r,(_r._sc_x1_spd_ovrr1_5)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR1_5r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_5r,(_r._sc_x1_spd_ovrr1_5))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR1_5r BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_5r
#define SC_X1_SPD_OVRR1_5r_SIZE BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_5r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_5r_t SC_X1_SPD_OVRR1_5r_t;
#define SC_X1_SPD_OVRR1_5r_CLR BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_5r_CLR
#define SC_X1_SPD_OVRR1_5r_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_5r_SET
#define SC_X1_SPD_OVRR1_5r_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_5r_GET
#define SC_X1_SPD_OVRR1_5r_MAC_CREDITGENCNTf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_5r_MAC_CREDITGENCNTf_GET
#define SC_X1_SPD_OVRR1_5r_MAC_CREDITGENCNTf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_5r_MAC_CREDITGENCNTf_SET
#define READ_SC_X1_SPD_OVRR1_5r BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR1_5r
#define WRITE_SC_X1_SPD_OVRR1_5r BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR1_5r
#define MODIFY_SC_X1_SPD_OVRR1_5r BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR1_5r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_5r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X1_SPD_OVRR1_6
 * BLOCKS:   SC_X1_SPEED_OVERRIDE1
 * REGADDR:  0x9288
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     T_CL91_CW_SCRAMBLE Indicates whether the CL91 codeword should be scrambled or not. It should be set to 1 in FC mode.
 *     T_FIVE_BIT_XOR_EN 1'b1 - XOR 4:0 with 12:8, 1'b0 - No XOR of the 5 bits
 *     T_PMA_CL91_MUX_SEL T_PMA MUX CL91 select.
 *     T_PMA_WATERMARK  T_PMA FIFO watermark. In units of 66-bit blocks.
 *     T_PMA_BITMUX_DELAY T_PMA FIFO delay after watermark is reached (in units of cycles)
 *     AM_SPACING_MUL   
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_6r (0x00109288 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_6r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR1_6.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_6r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr1_6[1];
	uint32_t _sc_x1_spd_ovrr1_6;
} BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_6r_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_6r_CLR(r) (r).sc_x1_spd_ovrr1_6[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_6r_SET(r,d) (r).sc_x1_spd_ovrr1_6[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_6r_GET(r) (r).sc_x1_spd_ovrr1_6[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_6r_AM_SPACING_MULf_GET(r) ((((r).sc_x1_spd_ovrr1_6[0]) >> 9) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_6r_AM_SPACING_MULf_SET(r,f) (r).sc_x1_spd_ovrr1_6[0]=(((r).sc_x1_spd_ovrr1_6[0] & ~((uint32_t)0x3 << 9)) | ((((uint32_t)f) & 0x3) << 9)) | (3 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_6r_T_PMA_BITMUX_DELAYf_GET(r) ((((r).sc_x1_spd_ovrr1_6[0]) >> 7) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_6r_T_PMA_BITMUX_DELAYf_SET(r,f) (r).sc_x1_spd_ovrr1_6[0]=(((r).sc_x1_spd_ovrr1_6[0] & ~((uint32_t)0x3 << 7)) | ((((uint32_t)f) & 0x3) << 7)) | (3 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_6r_T_PMA_WATERMARKf_GET(r) ((((r).sc_x1_spd_ovrr1_6[0]) >> 3) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_6r_T_PMA_WATERMARKf_SET(r,f) (r).sc_x1_spd_ovrr1_6[0]=(((r).sc_x1_spd_ovrr1_6[0] & ~((uint32_t)0xf << 3)) | ((((uint32_t)f) & 0xf) << 3)) | (15 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_6r_T_PMA_CL91_MUX_SELf_GET(r) ((((r).sc_x1_spd_ovrr1_6[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_6r_T_PMA_CL91_MUX_SELf_SET(r,f) (r).sc_x1_spd_ovrr1_6[0]=(((r).sc_x1_spd_ovrr1_6[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_6r_T_FIVE_BIT_XOR_ENf_GET(r) ((((r).sc_x1_spd_ovrr1_6[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_6r_T_FIVE_BIT_XOR_ENf_SET(r,f) (r).sc_x1_spd_ovrr1_6[0]=(((r).sc_x1_spd_ovrr1_6[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_6r_T_CL91_CW_SCRAMBLEf_GET(r) (((r).sc_x1_spd_ovrr1_6[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_6r_T_CL91_CW_SCRAMBLEf_SET(r,f) (r).sc_x1_spd_ovrr1_6[0]=(((r).sc_x1_spd_ovrr1_6[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR1_6.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR1_6r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_6r,(_r._sc_x1_spd_ovrr1_6))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR1_6r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_6r,(_r._sc_x1_spd_ovrr1_6)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR1_6r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_6r,(_r._sc_x1_spd_ovrr1_6))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR1_6r BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_6r
#define SC_X1_SPD_OVRR1_6r_SIZE BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_6r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_6r_t SC_X1_SPD_OVRR1_6r_t;
#define SC_X1_SPD_OVRR1_6r_CLR BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_6r_CLR
#define SC_X1_SPD_OVRR1_6r_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_6r_SET
#define SC_X1_SPD_OVRR1_6r_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_6r_GET
#define SC_X1_SPD_OVRR1_6r_AM_SPACING_MULf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_6r_AM_SPACING_MULf_GET
#define SC_X1_SPD_OVRR1_6r_AM_SPACING_MULf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_6r_AM_SPACING_MULf_SET
#define SC_X1_SPD_OVRR1_6r_T_PMA_BITMUX_DELAYf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_6r_T_PMA_BITMUX_DELAYf_GET
#define SC_X1_SPD_OVRR1_6r_T_PMA_BITMUX_DELAYf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_6r_T_PMA_BITMUX_DELAYf_SET
#define SC_X1_SPD_OVRR1_6r_T_PMA_WATERMARKf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_6r_T_PMA_WATERMARKf_GET
#define SC_X1_SPD_OVRR1_6r_T_PMA_WATERMARKf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_6r_T_PMA_WATERMARKf_SET
#define SC_X1_SPD_OVRR1_6r_T_PMA_CL91_MUX_SELf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_6r_T_PMA_CL91_MUX_SELf_GET
#define SC_X1_SPD_OVRR1_6r_T_PMA_CL91_MUX_SELf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_6r_T_PMA_CL91_MUX_SELf_SET
#define SC_X1_SPD_OVRR1_6r_T_FIVE_BIT_XOR_ENf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_6r_T_FIVE_BIT_XOR_ENf_GET
#define SC_X1_SPD_OVRR1_6r_T_FIVE_BIT_XOR_ENf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_6r_T_FIVE_BIT_XOR_ENf_SET
#define SC_X1_SPD_OVRR1_6r_T_CL91_CW_SCRAMBLEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_6r_T_CL91_CW_SCRAMBLEf_GET
#define SC_X1_SPD_OVRR1_6r_T_CL91_CW_SCRAMBLEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_6r_T_CL91_CW_SCRAMBLEf_SET
#define READ_SC_X1_SPD_OVRR1_6r BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR1_6r
#define WRITE_SC_X1_SPD_OVRR1_6r BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR1_6r
#define MODIFY_SC_X1_SPD_OVRR1_6r BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR1_6r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_6r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X1_SPD_OVRR1_7
 * BLOCKS:   SC_X1_SPEED_OVERRIDE1
 * REGADDR:  0x9289
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL91_BLKSYNC_MODE 
 *     R_MERGE_MODE     
 *     R_CL91_CW_SCRAMBLE Indicates whether the CL91 codeword needs to be descrambled. Should be enabled for FC mode.
 *     R_TC_IN_MODE     Indicates whether CL91 is turned ON for the port or not.
 *     R_TC_MODE        
 *     R_FIVE_BIT_XOR_EN 1'b1 - XOR 4:0 with 12:8, 1'b0 - No XOR of the 5 bits
 *     R_TC_OUT_MODE    
 *     R_HG2_ENABLE     Enables HG2 support for PCS
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_7r (0x00109289 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_7r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR1_7.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_7r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr1_7[1];
	uint32_t _sc_x1_spd_ovrr1_7;
} BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_7r_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_7r_CLR(r) (r).sc_x1_spd_ovrr1_7[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_7r_SET(r,d) (r).sc_x1_spd_ovrr1_7[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_7r_GET(r) (r).sc_x1_spd_ovrr1_7[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_7r_R_HG2_ENABLEf_GET(r) ((((r).sc_x1_spd_ovrr1_7[0]) >> 13) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_7r_R_HG2_ENABLEf_SET(r,f) (r).sc_x1_spd_ovrr1_7[0]=(((r).sc_x1_spd_ovrr1_7[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_7r_R_TC_OUT_MODEf_GET(r) ((((r).sc_x1_spd_ovrr1_7[0]) >> 11) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_7r_R_TC_OUT_MODEf_SET(r,f) (r).sc_x1_spd_ovrr1_7[0]=(((r).sc_x1_spd_ovrr1_7[0] & ~((uint32_t)0x3 << 11)) | ((((uint32_t)f) & 0x3) << 11)) | (3 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_7r_R_FIVE_BIT_XOR_ENf_GET(r) ((((r).sc_x1_spd_ovrr1_7[0]) >> 10) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_7r_R_FIVE_BIT_XOR_ENf_SET(r,f) (r).sc_x1_spd_ovrr1_7[0]=(((r).sc_x1_spd_ovrr1_7[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_7r_R_TC_MODEf_GET(r) ((((r).sc_x1_spd_ovrr1_7[0]) >> 8) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_7r_R_TC_MODEf_SET(r,f) (r).sc_x1_spd_ovrr1_7[0]=(((r).sc_x1_spd_ovrr1_7[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_7r_R_TC_IN_MODEf_GET(r) ((((r).sc_x1_spd_ovrr1_7[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_7r_R_TC_IN_MODEf_SET(r,f) (r).sc_x1_spd_ovrr1_7[0]=(((r).sc_x1_spd_ovrr1_7[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_7r_R_CL91_CW_SCRAMBLEf_GET(r) ((((r).sc_x1_spd_ovrr1_7[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_7r_R_CL91_CW_SCRAMBLEf_SET(r,f) (r).sc_x1_spd_ovrr1_7[0]=(((r).sc_x1_spd_ovrr1_7[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_7r_R_MERGE_MODEf_GET(r) ((((r).sc_x1_spd_ovrr1_7[0]) >> 3) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_7r_R_MERGE_MODEf_SET(r,f) (r).sc_x1_spd_ovrr1_7[0]=(((r).sc_x1_spd_ovrr1_7[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3)) | (7 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_7r_CL91_BLKSYNC_MODEf_GET(r) (((r).sc_x1_spd_ovrr1_7[0]) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_7r_CL91_BLKSYNC_MODEf_SET(r,f) (r).sc_x1_spd_ovrr1_7[0]=(((r).sc_x1_spd_ovrr1_7[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR1_7.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR1_7r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_7r,(_r._sc_x1_spd_ovrr1_7))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR1_7r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_7r,(_r._sc_x1_spd_ovrr1_7)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR1_7r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_7r,(_r._sc_x1_spd_ovrr1_7))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR1_7r BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_7r
#define SC_X1_SPD_OVRR1_7r_SIZE BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_7r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_7r_t SC_X1_SPD_OVRR1_7r_t;
#define SC_X1_SPD_OVRR1_7r_CLR BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_7r_CLR
#define SC_X1_SPD_OVRR1_7r_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_7r_SET
#define SC_X1_SPD_OVRR1_7r_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_7r_GET
#define SC_X1_SPD_OVRR1_7r_R_HG2_ENABLEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_7r_R_HG2_ENABLEf_GET
#define SC_X1_SPD_OVRR1_7r_R_HG2_ENABLEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_7r_R_HG2_ENABLEf_SET
#define SC_X1_SPD_OVRR1_7r_R_TC_OUT_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_7r_R_TC_OUT_MODEf_GET
#define SC_X1_SPD_OVRR1_7r_R_TC_OUT_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_7r_R_TC_OUT_MODEf_SET
#define SC_X1_SPD_OVRR1_7r_R_FIVE_BIT_XOR_ENf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_7r_R_FIVE_BIT_XOR_ENf_GET
#define SC_X1_SPD_OVRR1_7r_R_FIVE_BIT_XOR_ENf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_7r_R_FIVE_BIT_XOR_ENf_SET
#define SC_X1_SPD_OVRR1_7r_R_TC_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_7r_R_TC_MODEf_GET
#define SC_X1_SPD_OVRR1_7r_R_TC_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_7r_R_TC_MODEf_SET
#define SC_X1_SPD_OVRR1_7r_R_TC_IN_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_7r_R_TC_IN_MODEf_GET
#define SC_X1_SPD_OVRR1_7r_R_TC_IN_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_7r_R_TC_IN_MODEf_SET
#define SC_X1_SPD_OVRR1_7r_R_CL91_CW_SCRAMBLEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_7r_R_CL91_CW_SCRAMBLEf_GET
#define SC_X1_SPD_OVRR1_7r_R_CL91_CW_SCRAMBLEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_7r_R_CL91_CW_SCRAMBLEf_SET
#define SC_X1_SPD_OVRR1_7r_R_MERGE_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_7r_R_MERGE_MODEf_GET
#define SC_X1_SPD_OVRR1_7r_R_MERGE_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_7r_R_MERGE_MODEf_SET
#define SC_X1_SPD_OVRR1_7r_CL91_BLKSYNC_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_7r_CL91_BLKSYNC_MODEf_GET
#define SC_X1_SPD_OVRR1_7r_CL91_BLKSYNC_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_7r_CL91_BLKSYNC_MODEf_SET
#define READ_SC_X1_SPD_OVRR1_7r BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR1_7r
#define WRITE_SC_X1_SPD_OVRR1_7r BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR1_7r
#define MODIFY_SC_X1_SPD_OVRR1_7r BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR1_7r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_7r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X1_SPD_OVRR1_8
 * BLOCKS:   SC_X1_SPEED_OVERRIDE1
 * REGADDR:  0x928a
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CORRUPT_2ND_GROUP Corrupt 2nd group of codeward
 *     CORRUPT_6TH_GROUP Corrupt 6th group of codeward
 *     CL74_SHCORRUPT   Sync Header Corruption for CL74 FEC Error (uncorrectable).0: Only 5 SH, 1: All SH corrupted.
 *     BER_COUNT_SEL    0: select count based on cl49 else based on cl82
 *     BER_WINDOW_SEL   0: select window based on cl49 else based on cl82
 *     USE_100G_AM0     AM0 will be taken from 100G AM
 *     USE_100G_AM123   AM 1, 2, 3 will be taken from 100G AMs
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_8r (0x0010928a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_8r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR1_8.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_8r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr1_8[1];
	uint32_t _sc_x1_spd_ovrr1_8;
} BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_8r_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_8r_CLR(r) (r).sc_x1_spd_ovrr1_8[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_8r_SET(r,d) (r).sc_x1_spd_ovrr1_8[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_8r_GET(r) (r).sc_x1_spd_ovrr1_8[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_8r_USE_100G_AM123f_GET(r) ((((r).sc_x1_spd_ovrr1_8[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_8r_USE_100G_AM123f_SET(r,f) (r).sc_x1_spd_ovrr1_8[0]=(((r).sc_x1_spd_ovrr1_8[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_8r_USE_100G_AM0f_GET(r) ((((r).sc_x1_spd_ovrr1_8[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_8r_USE_100G_AM0f_SET(r,f) (r).sc_x1_spd_ovrr1_8[0]=(((r).sc_x1_spd_ovrr1_8[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_8r_BER_WINDOW_SELf_GET(r) ((((r).sc_x1_spd_ovrr1_8[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_8r_BER_WINDOW_SELf_SET(r,f) (r).sc_x1_spd_ovrr1_8[0]=(((r).sc_x1_spd_ovrr1_8[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_8r_BER_COUNT_SELf_GET(r) ((((r).sc_x1_spd_ovrr1_8[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_8r_BER_COUNT_SELf_SET(r,f) (r).sc_x1_spd_ovrr1_8[0]=(((r).sc_x1_spd_ovrr1_8[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_8r_CL74_SHCORRUPTf_GET(r) ((((r).sc_x1_spd_ovrr1_8[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_8r_CL74_SHCORRUPTf_SET(r,f) (r).sc_x1_spd_ovrr1_8[0]=(((r).sc_x1_spd_ovrr1_8[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_8r_CORRUPT_6TH_GROUPf_GET(r) ((((r).sc_x1_spd_ovrr1_8[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_8r_CORRUPT_6TH_GROUPf_SET(r,f) (r).sc_x1_spd_ovrr1_8[0]=(((r).sc_x1_spd_ovrr1_8[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_8r_CORRUPT_2ND_GROUPf_GET(r) (((r).sc_x1_spd_ovrr1_8[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_8r_CORRUPT_2ND_GROUPf_SET(r,f) (r).sc_x1_spd_ovrr1_8[0]=(((r).sc_x1_spd_ovrr1_8[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR1_8.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR1_8r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_8r,(_r._sc_x1_spd_ovrr1_8))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR1_8r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_8r,(_r._sc_x1_spd_ovrr1_8)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR1_8r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_8r,(_r._sc_x1_spd_ovrr1_8))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR1_8r BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_8r
#define SC_X1_SPD_OVRR1_8r_SIZE BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_8r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_8r_t SC_X1_SPD_OVRR1_8r_t;
#define SC_X1_SPD_OVRR1_8r_CLR BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_8r_CLR
#define SC_X1_SPD_OVRR1_8r_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_8r_SET
#define SC_X1_SPD_OVRR1_8r_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_8r_GET
#define SC_X1_SPD_OVRR1_8r_USE_100G_AM123f_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_8r_USE_100G_AM123f_GET
#define SC_X1_SPD_OVRR1_8r_USE_100G_AM123f_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_8r_USE_100G_AM123f_SET
#define SC_X1_SPD_OVRR1_8r_USE_100G_AM0f_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_8r_USE_100G_AM0f_GET
#define SC_X1_SPD_OVRR1_8r_USE_100G_AM0f_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_8r_USE_100G_AM0f_SET
#define SC_X1_SPD_OVRR1_8r_BER_WINDOW_SELf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_8r_BER_WINDOW_SELf_GET
#define SC_X1_SPD_OVRR1_8r_BER_WINDOW_SELf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_8r_BER_WINDOW_SELf_SET
#define SC_X1_SPD_OVRR1_8r_BER_COUNT_SELf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_8r_BER_COUNT_SELf_GET
#define SC_X1_SPD_OVRR1_8r_BER_COUNT_SELf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_8r_BER_COUNT_SELf_SET
#define SC_X1_SPD_OVRR1_8r_CL74_SHCORRUPTf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_8r_CL74_SHCORRUPTf_GET
#define SC_X1_SPD_OVRR1_8r_CL74_SHCORRUPTf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_8r_CL74_SHCORRUPTf_SET
#define SC_X1_SPD_OVRR1_8r_CORRUPT_6TH_GROUPf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_8r_CORRUPT_6TH_GROUPf_GET
#define SC_X1_SPD_OVRR1_8r_CORRUPT_6TH_GROUPf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_8r_CORRUPT_6TH_GROUPf_SET
#define SC_X1_SPD_OVRR1_8r_CORRUPT_2ND_GROUPf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_8r_CORRUPT_2ND_GROUPf_GET
#define SC_X1_SPD_OVRR1_8r_CORRUPT_2ND_GROUPf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_8r_CORRUPT_2ND_GROUPf_SET
#define READ_SC_X1_SPD_OVRR1_8r BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR1_8r
#define WRITE_SC_X1_SPD_OVRR1_8r BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR1_8r
#define MODIFY_SC_X1_SPD_OVRR1_8r BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR1_8r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR1_8r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X1_SPD_OVRR2_SPD
 * BLOCKS:   SC_X1_SPEED_OVERRIDE2
 * REGADDR:  0x9290
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/W
 * FIELDS:
 *     NUM_LANES        Number of lanes for override configuration0   : NUM_LANES_01 - use 1 lane1   : NUM_LANES_02 - use 2 lanes2   : NUM_LANES_04 - use 4 lanes
 *     T_PMA_40B_MODE   1'b0 - 66-bit data write in t_pma.1'b1 - 40-bit data write in t_pma.
 *     CL36TX_EN        Per logical lane: cl36 TX pipeline: 1=enabled , 0=disabled
 *     CL36RX_EN        Per logical lane: cl36 RX pipeline: 1=enabled , 0=disabled
 *     CL36RX_10BIT_PMD_DATA_EN Per logical lane: Enables CL36 Rx Pipeline to use all 10-bits of PMD Rx data.This bit should be enabled in OS8.25 mode or 2.5G speed.
 *     SPEED            Actual speed set by SW
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_SPDr (0x00109290 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_SPDr_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR2_SPD.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_SPDr_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr2_spd[1];
	uint32_t _sc_x1_spd_ovrr2_spd;
} BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_SPDr_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_SPDr_CLR(r) (r).sc_x1_spd_ovrr2_spd[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_SPDr_SET(r,d) (r).sc_x1_spd_ovrr2_spd[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_SPDr_GET(r) (r).sc_x1_spd_ovrr2_spd[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_SPDr_SPEEDf_GET(r) ((((r).sc_x1_spd_ovrr2_spd[0]) >> 8) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_SPDr_SPEEDf_SET(r,f) (r).sc_x1_spd_ovrr2_spd[0]=(((r).sc_x1_spd_ovrr2_spd[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_SPDr_CL36RX_10BIT_PMD_DATA_ENf_GET(r) ((((r).sc_x1_spd_ovrr2_spd[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_SPDr_CL36RX_10BIT_PMD_DATA_ENf_SET(r,f) (r).sc_x1_spd_ovrr2_spd[0]=(((r).sc_x1_spd_ovrr2_spd[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_SPDr_CL36RX_ENf_GET(r) ((((r).sc_x1_spd_ovrr2_spd[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_SPDr_CL36RX_ENf_SET(r,f) (r).sc_x1_spd_ovrr2_spd[0]=(((r).sc_x1_spd_ovrr2_spd[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_SPDr_CL36TX_ENf_GET(r) ((((r).sc_x1_spd_ovrr2_spd[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_SPDr_CL36TX_ENf_SET(r,f) (r).sc_x1_spd_ovrr2_spd[0]=(((r).sc_x1_spd_ovrr2_spd[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_SPDr_T_PMA_40B_MODEf_GET(r) ((((r).sc_x1_spd_ovrr2_spd[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_SPDr_T_PMA_40B_MODEf_SET(r,f) (r).sc_x1_spd_ovrr2_spd[0]=(((r).sc_x1_spd_ovrr2_spd[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_SPDr_NUM_LANESf_GET(r) (((r).sc_x1_spd_ovrr2_spd[0]) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_SPDr_NUM_LANESf_SET(r,f) (r).sc_x1_spd_ovrr2_spd[0]=(((r).sc_x1_spd_ovrr2_spd[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR2_SPD.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR2_SPDr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_SPDr,(_r._sc_x1_spd_ovrr2_spd))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR2_SPDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_SPDr,(_r._sc_x1_spd_ovrr2_spd)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR2_SPDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_SPDr,(_r._sc_x1_spd_ovrr2_spd))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR2_SPDr BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_SPDr
#define SC_X1_SPD_OVRR2_SPDr_SIZE BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_SPDr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_SPDr_t SC_X1_SPD_OVRR2_SPDr_t;
#define SC_X1_SPD_OVRR2_SPDr_CLR BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_SPDr_CLR
#define SC_X1_SPD_OVRR2_SPDr_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_SPDr_SET
#define SC_X1_SPD_OVRR2_SPDr_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_SPDr_GET
#define SC_X1_SPD_OVRR2_SPDr_SPEEDf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_SPDr_SPEEDf_GET
#define SC_X1_SPD_OVRR2_SPDr_SPEEDf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_SPDr_SPEEDf_SET
#define SC_X1_SPD_OVRR2_SPDr_CL36RX_10BIT_PMD_DATA_ENf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_SPDr_CL36RX_10BIT_PMD_DATA_ENf_GET
#define SC_X1_SPD_OVRR2_SPDr_CL36RX_10BIT_PMD_DATA_ENf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_SPDr_CL36RX_10BIT_PMD_DATA_ENf_SET
#define SC_X1_SPD_OVRR2_SPDr_CL36RX_ENf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_SPDr_CL36RX_ENf_GET
#define SC_X1_SPD_OVRR2_SPDr_CL36RX_ENf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_SPDr_CL36RX_ENf_SET
#define SC_X1_SPD_OVRR2_SPDr_CL36TX_ENf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_SPDr_CL36TX_ENf_GET
#define SC_X1_SPD_OVRR2_SPDr_CL36TX_ENf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_SPDr_CL36TX_ENf_SET
#define SC_X1_SPD_OVRR2_SPDr_T_PMA_40B_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_SPDr_T_PMA_40B_MODEf_GET
#define SC_X1_SPD_OVRR2_SPDr_T_PMA_40B_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_SPDr_T_PMA_40B_MODEf_SET
#define SC_X1_SPD_OVRR2_SPDr_NUM_LANESf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_SPDr_NUM_LANESf_GET
#define SC_X1_SPD_OVRR2_SPDr_NUM_LANESf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_SPDr_NUM_LANESf_SET
#define READ_SC_X1_SPD_OVRR2_SPDr BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR2_SPDr
#define WRITE_SC_X1_SPD_OVRR2_SPDr BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR2_SPDr
#define MODIFY_SC_X1_SPD_OVRR2_SPDr BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR2_SPDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_SPDr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X1_SPD_OVRR2_0
 * BLOCKS:   SC_X1_SPEED_OVERRIDE2
 * REGADDR:  0x9292
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     SCR_MODE         
 *     T_PMA_BTMX_MODE  Number of PCS lanes bitmuxed
 *     T_HG2_ENABLE     Enables HG2 support for PCS
 *     T_ENC_MODE       
 *     T_FIFO_MODE      T_FIFO stage control field
 *     OS_MODE          
 *     CL72_EN          Enables cl72
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_0r (0x00109292 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_0r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR2_0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_0r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr2_0[1];
	uint32_t _sc_x1_spd_ovrr2_0;
} BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_0r_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_0r_CLR(r) (r).sc_x1_spd_ovrr2_0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_0r_SET(r,d) (r).sc_x1_spd_ovrr2_0[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_0r_GET(r) (r).sc_x1_spd_ovrr2_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_0r_CL72_ENf_GET(r) ((((r).sc_x1_spd_ovrr2_0[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_0r_CL72_ENf_SET(r,f) (r).sc_x1_spd_ovrr2_0[0]=(((r).sc_x1_spd_ovrr2_0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_0r_OS_MODEf_GET(r) ((((r).sc_x1_spd_ovrr2_0[0]) >> 11) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_0r_OS_MODEf_SET(r,f) (r).sc_x1_spd_ovrr2_0[0]=(((r).sc_x1_spd_ovrr2_0[0] & ~((uint32_t)0xf << 11)) | ((((uint32_t)f) & 0xf) << 11)) | (15 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_0r_T_FIFO_MODEf_GET(r) ((((r).sc_x1_spd_ovrr2_0[0]) >> 9) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_0r_T_FIFO_MODEf_SET(r,f) (r).sc_x1_spd_ovrr2_0[0]=(((r).sc_x1_spd_ovrr2_0[0] & ~((uint32_t)0x3 << 9)) | ((((uint32_t)f) & 0x3) << 9)) | (3 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_0r_T_ENC_MODEf_GET(r) ((((r).sc_x1_spd_ovrr2_0[0]) >> 7) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_0r_T_ENC_MODEf_SET(r,f) (r).sc_x1_spd_ovrr2_0[0]=(((r).sc_x1_spd_ovrr2_0[0] & ~((uint32_t)0x3 << 7)) | ((((uint32_t)f) & 0x3) << 7)) | (3 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_0r_T_HG2_ENABLEf_GET(r) ((((r).sc_x1_spd_ovrr2_0[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_0r_T_HG2_ENABLEf_SET(r,f) (r).sc_x1_spd_ovrr2_0[0]=(((r).sc_x1_spd_ovrr2_0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_0r_T_PMA_BTMX_MODEf_GET(r) ((((r).sc_x1_spd_ovrr2_0[0]) >> 4) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_0r_T_PMA_BTMX_MODEf_SET(r,f) (r).sc_x1_spd_ovrr2_0[0]=(((r).sc_x1_spd_ovrr2_0[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_0r_SCR_MODEf_GET(r) ((((r).sc_x1_spd_ovrr2_0[0]) >> 1) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_0r_SCR_MODEf_SET(r,f) (r).sc_x1_spd_ovrr2_0[0]=(((r).sc_x1_spd_ovrr2_0[0] & ~((uint32_t)0x7 << 1)) | ((((uint32_t)f) & 0x7) << 1)) | (7 << (16 + 1))

/*
 * These macros can be used to access SC_X1_SPD_OVRR2_0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR2_0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_0r,(_r._sc_x1_spd_ovrr2_0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR2_0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_0r,(_r._sc_x1_spd_ovrr2_0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR2_0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_0r,(_r._sc_x1_spd_ovrr2_0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR2_0r BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_0r
#define SC_X1_SPD_OVRR2_0r_SIZE BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_0r_t SC_X1_SPD_OVRR2_0r_t;
#define SC_X1_SPD_OVRR2_0r_CLR BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_0r_CLR
#define SC_X1_SPD_OVRR2_0r_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_0r_SET
#define SC_X1_SPD_OVRR2_0r_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_0r_GET
#define SC_X1_SPD_OVRR2_0r_CL72_ENf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_0r_CL72_ENf_GET
#define SC_X1_SPD_OVRR2_0r_CL72_ENf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_0r_CL72_ENf_SET
#define SC_X1_SPD_OVRR2_0r_OS_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_0r_OS_MODEf_GET
#define SC_X1_SPD_OVRR2_0r_OS_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_0r_OS_MODEf_SET
#define SC_X1_SPD_OVRR2_0r_T_FIFO_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_0r_T_FIFO_MODEf_GET
#define SC_X1_SPD_OVRR2_0r_T_FIFO_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_0r_T_FIFO_MODEf_SET
#define SC_X1_SPD_OVRR2_0r_T_ENC_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_0r_T_ENC_MODEf_GET
#define SC_X1_SPD_OVRR2_0r_T_ENC_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_0r_T_ENC_MODEf_SET
#define SC_X1_SPD_OVRR2_0r_T_HG2_ENABLEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_0r_T_HG2_ENABLEf_GET
#define SC_X1_SPD_OVRR2_0r_T_HG2_ENABLEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_0r_T_HG2_ENABLEf_SET
#define SC_X1_SPD_OVRR2_0r_T_PMA_BTMX_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_0r_T_PMA_BTMX_MODEf_GET
#define SC_X1_SPD_OVRR2_0r_T_PMA_BTMX_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_0r_T_PMA_BTMX_MODEf_SET
#define SC_X1_SPD_OVRR2_0r_SCR_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_0r_SCR_MODEf_GET
#define SC_X1_SPD_OVRR2_0r_SCR_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_0r_SCR_MODEf_SET
#define READ_SC_X1_SPD_OVRR2_0r BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR2_0r
#define WRITE_SC_X1_SPD_OVRR2_0r BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR2_0r
#define MODIFY_SC_X1_SPD_OVRR2_0r BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR2_0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X1_SPD_OVRR2_1
 * BLOCKS:   SC_X1_SPEED_OVERRIDE2
 * REGADDR:  0x9293
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BS_BTMX_MODE     Bit-mux mode: Indicates the format of incoming data on a physical lane.
 *     BS_DIST_MODE     Block to lane distribution mode.BS_DIST_MODE_5_LANE_TDM - 5 lane TDM. Each block distributed in turn over output pseudo-logical lanes 0-4BS_DIST_MODE_2_LANE_TDM_2_VLANE - 2 lane TDM for 2 virtual lanes.Virtual Lane 0 output is ping-ponged over pseudo-logical lanes 0,2.Virtual Lane 1 output is ping-ponged over pseudo-logical lanes 1,3.BS_DIST_MODE_2_LANE_TDM_1_VLANE - 2 lane TDM for 1 virtual lane.Virtual Lane 0 output is ping-ponged over pseudo-logical lanes 0,2.BS_DIST_MODE_NO_TDM - No TDM. Virtual Lane output is sent directly to corresponding pseudo-logical lane.
 *     BS_SYNC_EN       Enable block synchronization: If enabled, block sync sm will attempt to slip data until sync is achieved.
 *     BS_SM_SYNC_MODE  Block Sync Mode: When bs_sync_en==1, this bit indicates if cl49 or cl82 state machine operation is used.1'b0 - Clause 821'b1 - Clause 49
 *     DEC_FSM_MODE     
 *     DESKEW_MODE      
 *     DEC_TL_MODE      
 *     DESCR_MODE       
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_1r (0x00109293 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_1r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR2_1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_1r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr2_1[1];
	uint32_t _sc_x1_spd_ovrr2_1;
} BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_1r_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_1r_CLR(r) (r).sc_x1_spd_ovrr2_1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_1r_SET(r,d) (r).sc_x1_spd_ovrr2_1[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_1r_GET(r) (r).sc_x1_spd_ovrr2_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_1r_DESCR_MODEf_GET(r) ((((r).sc_x1_spd_ovrr2_1[0]) >> 14) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_1r_DESCR_MODEf_SET(r,f) (r).sc_x1_spd_ovrr2_1[0]=(((r).sc_x1_spd_ovrr2_1[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_1r_DEC_TL_MODEf_GET(r) ((((r).sc_x1_spd_ovrr2_1[0]) >> 12) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_1r_DEC_TL_MODEf_SET(r,f) (r).sc_x1_spd_ovrr2_1[0]=(((r).sc_x1_spd_ovrr2_1[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12)) | (3 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_1r_DESKEW_MODEf_GET(r) ((((r).sc_x1_spd_ovrr2_1[0]) >> 8) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_1r_DESKEW_MODEf_SET(r,f) (r).sc_x1_spd_ovrr2_1[0]=(((r).sc_x1_spd_ovrr2_1[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_1r_DEC_FSM_MODEf_GET(r) ((((r).sc_x1_spd_ovrr2_1[0]) >> 6) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_1r_DEC_FSM_MODEf_SET(r,f) (r).sc_x1_spd_ovrr2_1[0]=(((r).sc_x1_spd_ovrr2_1[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6)) | (3 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_1r_BS_SM_SYNC_MODEf_GET(r) ((((r).sc_x1_spd_ovrr2_1[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_1r_BS_SM_SYNC_MODEf_SET(r,f) (r).sc_x1_spd_ovrr2_1[0]=(((r).sc_x1_spd_ovrr2_1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_1r_BS_SYNC_ENf_GET(r) ((((r).sc_x1_spd_ovrr2_1[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_1r_BS_SYNC_ENf_SET(r,f) (r).sc_x1_spd_ovrr2_1[0]=(((r).sc_x1_spd_ovrr2_1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_1r_BS_DIST_MODEf_GET(r) ((((r).sc_x1_spd_ovrr2_1[0]) >> 2) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_1r_BS_DIST_MODEf_SET(r,f) (r).sc_x1_spd_ovrr2_1[0]=(((r).sc_x1_spd_ovrr2_1[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2)) | (3 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_1r_BS_BTMX_MODEf_GET(r) (((r).sc_x1_spd_ovrr2_1[0]) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_1r_BS_BTMX_MODEf_SET(r,f) (r).sc_x1_spd_ovrr2_1[0]=(((r).sc_x1_spd_ovrr2_1[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR2_1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR2_1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_1r,(_r._sc_x1_spd_ovrr2_1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR2_1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_1r,(_r._sc_x1_spd_ovrr2_1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR2_1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_1r,(_r._sc_x1_spd_ovrr2_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR2_1r BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_1r
#define SC_X1_SPD_OVRR2_1r_SIZE BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_1r_t SC_X1_SPD_OVRR2_1r_t;
#define SC_X1_SPD_OVRR2_1r_CLR BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_1r_CLR
#define SC_X1_SPD_OVRR2_1r_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_1r_SET
#define SC_X1_SPD_OVRR2_1r_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_1r_GET
#define SC_X1_SPD_OVRR2_1r_DESCR_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_1r_DESCR_MODEf_GET
#define SC_X1_SPD_OVRR2_1r_DESCR_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_1r_DESCR_MODEf_SET
#define SC_X1_SPD_OVRR2_1r_DEC_TL_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_1r_DEC_TL_MODEf_GET
#define SC_X1_SPD_OVRR2_1r_DEC_TL_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_1r_DEC_TL_MODEf_SET
#define SC_X1_SPD_OVRR2_1r_DESKEW_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_1r_DESKEW_MODEf_GET
#define SC_X1_SPD_OVRR2_1r_DESKEW_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_1r_DESKEW_MODEf_SET
#define SC_X1_SPD_OVRR2_1r_DEC_FSM_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_1r_DEC_FSM_MODEf_GET
#define SC_X1_SPD_OVRR2_1r_DEC_FSM_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_1r_DEC_FSM_MODEf_SET
#define SC_X1_SPD_OVRR2_1r_BS_SM_SYNC_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_1r_BS_SM_SYNC_MODEf_GET
#define SC_X1_SPD_OVRR2_1r_BS_SM_SYNC_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_1r_BS_SM_SYNC_MODEf_SET
#define SC_X1_SPD_OVRR2_1r_BS_SYNC_ENf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_1r_BS_SYNC_ENf_GET
#define SC_X1_SPD_OVRR2_1r_BS_SYNC_ENf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_1r_BS_SYNC_ENf_SET
#define SC_X1_SPD_OVRR2_1r_BS_DIST_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_1r_BS_DIST_MODEf_GET
#define SC_X1_SPD_OVRR2_1r_BS_DIST_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_1r_BS_DIST_MODEf_SET
#define SC_X1_SPD_OVRR2_1r_BS_BTMX_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_1r_BS_BTMX_MODEf_GET
#define SC_X1_SPD_OVRR2_1r_BS_BTMX_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_1r_BS_BTMX_MODEf_SET
#define READ_SC_X1_SPD_OVRR2_1r BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR2_1r
#define WRITE_SC_X1_SPD_OVRR2_1r BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR2_1r
#define MODIFY_SC_X1_SPD_OVRR2_1r BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR2_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X1_SPD_OVRR2_2
 * BLOCKS:   SC_X1_SPEED_OVERRIDE2
 * REGADDR:  0x9294
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CLOCKCNT0        clock count 0 for credit programming, range 5 to 4125
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_2r (0x00109294 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR2_2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_2r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr2_2[1];
	uint32_t _sc_x1_spd_ovrr2_2;
} BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_2r_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_2r_CLR(r) (r).sc_x1_spd_ovrr2_2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_2r_SET(r,d) (r).sc_x1_spd_ovrr2_2[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_2r_GET(r) (r).sc_x1_spd_ovrr2_2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_2r_CLOCKCNT0f_GET(r) (((r).sc_x1_spd_ovrr2_2[0]) & 0x3fff)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_2r_CLOCKCNT0f_SET(r,f) (r).sc_x1_spd_ovrr2_2[0]=(((r).sc_x1_spd_ovrr2_2[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff)) | (0x3fff << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR2_2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR2_2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_2r,(_r._sc_x1_spd_ovrr2_2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR2_2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_2r,(_r._sc_x1_spd_ovrr2_2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR2_2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_2r,(_r._sc_x1_spd_ovrr2_2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR2_2r BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_2r
#define SC_X1_SPD_OVRR2_2r_SIZE BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_2r_t SC_X1_SPD_OVRR2_2r_t;
#define SC_X1_SPD_OVRR2_2r_CLR BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_2r_CLR
#define SC_X1_SPD_OVRR2_2r_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_2r_SET
#define SC_X1_SPD_OVRR2_2r_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_2r_GET
#define SC_X1_SPD_OVRR2_2r_CLOCKCNT0f_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_2r_CLOCKCNT0f_GET
#define SC_X1_SPD_OVRR2_2r_CLOCKCNT0f_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_2r_CLOCKCNT0f_SET
#define READ_SC_X1_SPD_OVRR2_2r BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR2_2r
#define WRITE_SC_X1_SPD_OVRR2_2r BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR2_2r
#define MODIFY_SC_X1_SPD_OVRR2_2r BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR2_2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X1_SPD_OVRR2_3
 * BLOCKS:   SC_X1_SPEED_OVERRIDE2
 * REGADDR:  0x9295
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CLOCKCNT1        clock count 1 for credit programming, range 4 to 12
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_3r (0x00109295 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_3r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR2_3.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_3r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr2_3[1];
	uint32_t _sc_x1_spd_ovrr2_3;
} BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_3r_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_3r_CLR(r) (r).sc_x1_spd_ovrr2_3[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_3r_SET(r,d) (r).sc_x1_spd_ovrr2_3[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_3r_GET(r) (r).sc_x1_spd_ovrr2_3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_3r_CLOCKCNT1f_GET(r) (((r).sc_x1_spd_ovrr2_3[0]) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_3r_CLOCKCNT1f_SET(r,f) (r).sc_x1_spd_ovrr2_3[0]=(((r).sc_x1_spd_ovrr2_3[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR2_3.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR2_3r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_3r,(_r._sc_x1_spd_ovrr2_3))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR2_3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_3r,(_r._sc_x1_spd_ovrr2_3)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR2_3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_3r,(_r._sc_x1_spd_ovrr2_3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR2_3r BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_3r
#define SC_X1_SPD_OVRR2_3r_SIZE BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_3r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_3r_t SC_X1_SPD_OVRR2_3r_t;
#define SC_X1_SPD_OVRR2_3r_CLR BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_3r_CLR
#define SC_X1_SPD_OVRR2_3r_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_3r_SET
#define SC_X1_SPD_OVRR2_3r_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_3r_GET
#define SC_X1_SPD_OVRR2_3r_CLOCKCNT1f_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_3r_CLOCKCNT1f_GET
#define SC_X1_SPD_OVRR2_3r_CLOCKCNT1f_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_3r_CLOCKCNT1f_SET
#define READ_SC_X1_SPD_OVRR2_3r BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR2_3r
#define WRITE_SC_X1_SPD_OVRR2_3r BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR2_3r
#define MODIFY_SC_X1_SPD_OVRR2_3r BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR2_3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X1_SPD_OVRR2_4
 * BLOCKS:   SC_X1_SPEED_OVERRIDE2
 * REGADDR:  0x9296
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LOOPCNT1         loop count 1 for credit programming, range 2 to 18
 *     LOOPCNT0         loop count 0 for credit programming, range 1 to 1
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_4r (0x00109296 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_4r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR2_4.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_4r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr2_4[1];
	uint32_t _sc_x1_spd_ovrr2_4;
} BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_4r_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_4r_CLR(r) (r).sc_x1_spd_ovrr2_4[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_4r_SET(r,d) (r).sc_x1_spd_ovrr2_4[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_4r_GET(r) (r).sc_x1_spd_ovrr2_4[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_4r_LOOPCNT0f_GET(r) ((((r).sc_x1_spd_ovrr2_4[0]) >> 6) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_4r_LOOPCNT0f_SET(r,f) (r).sc_x1_spd_ovrr2_4[0]=(((r).sc_x1_spd_ovrr2_4[0] & ~((uint32_t)0xff << 6)) | ((((uint32_t)f) & 0xff) << 6)) | (255 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_4r_LOOPCNT1f_GET(r) (((r).sc_x1_spd_ovrr2_4[0]) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_4r_LOOPCNT1f_SET(r,f) (r).sc_x1_spd_ovrr2_4[0]=(((r).sc_x1_spd_ovrr2_4[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR2_4.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR2_4r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_4r,(_r._sc_x1_spd_ovrr2_4))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR2_4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_4r,(_r._sc_x1_spd_ovrr2_4)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR2_4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_4r,(_r._sc_x1_spd_ovrr2_4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR2_4r BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_4r
#define SC_X1_SPD_OVRR2_4r_SIZE BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_4r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_4r_t SC_X1_SPD_OVRR2_4r_t;
#define SC_X1_SPD_OVRR2_4r_CLR BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_4r_CLR
#define SC_X1_SPD_OVRR2_4r_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_4r_SET
#define SC_X1_SPD_OVRR2_4r_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_4r_GET
#define SC_X1_SPD_OVRR2_4r_LOOPCNT0f_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_4r_LOOPCNT0f_GET
#define SC_X1_SPD_OVRR2_4r_LOOPCNT0f_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_4r_LOOPCNT0f_SET
#define SC_X1_SPD_OVRR2_4r_LOOPCNT1f_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_4r_LOOPCNT1f_GET
#define SC_X1_SPD_OVRR2_4r_LOOPCNT1f_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_4r_LOOPCNT1f_SET
#define READ_SC_X1_SPD_OVRR2_4r BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR2_4r
#define WRITE_SC_X1_SPD_OVRR2_4r BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR2_4r
#define MODIFY_SC_X1_SPD_OVRR2_4r BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR2_4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_4r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X1_SPD_OVRR2_5
 * BLOCKS:   SC_X1_SPEED_OVERRIDE2
 * REGADDR:  0x9297
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MAC_CREDITGENCNT CGC for mac credit generation, range 1 to 2063
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_5r (0x00109297 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_5r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR2_5.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_5r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr2_5[1];
	uint32_t _sc_x1_spd_ovrr2_5;
} BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_5r_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_5r_CLR(r) (r).sc_x1_spd_ovrr2_5[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_5r_SET(r,d) (r).sc_x1_spd_ovrr2_5[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_5r_GET(r) (r).sc_x1_spd_ovrr2_5[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_5r_MAC_CREDITGENCNTf_GET(r) (((r).sc_x1_spd_ovrr2_5[0]) & 0x1fff)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_5r_MAC_CREDITGENCNTf_SET(r,f) (r).sc_x1_spd_ovrr2_5[0]=(((r).sc_x1_spd_ovrr2_5[0] & ~((uint32_t)0x1fff)) | (((uint32_t)f) & 0x1fff)) | (0x1fff << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR2_5.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR2_5r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_5r,(_r._sc_x1_spd_ovrr2_5))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR2_5r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_5r,(_r._sc_x1_spd_ovrr2_5)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR2_5r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_5r,(_r._sc_x1_spd_ovrr2_5))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR2_5r BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_5r
#define SC_X1_SPD_OVRR2_5r_SIZE BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_5r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_5r_t SC_X1_SPD_OVRR2_5r_t;
#define SC_X1_SPD_OVRR2_5r_CLR BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_5r_CLR
#define SC_X1_SPD_OVRR2_5r_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_5r_SET
#define SC_X1_SPD_OVRR2_5r_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_5r_GET
#define SC_X1_SPD_OVRR2_5r_MAC_CREDITGENCNTf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_5r_MAC_CREDITGENCNTf_GET
#define SC_X1_SPD_OVRR2_5r_MAC_CREDITGENCNTf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_5r_MAC_CREDITGENCNTf_SET
#define READ_SC_X1_SPD_OVRR2_5r BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR2_5r
#define WRITE_SC_X1_SPD_OVRR2_5r BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR2_5r
#define MODIFY_SC_X1_SPD_OVRR2_5r BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR2_5r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_5r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X1_SPD_OVRR2_6
 * BLOCKS:   SC_X1_SPEED_OVERRIDE2
 * REGADDR:  0x9298
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     T_CL91_CW_SCRAMBLE Indicates whether the CL91 codeword should be scrambled or not. It should be set to 1 in FC mode.
 *     T_FIVE_BIT_XOR_EN 1'b1 - XOR 4:0 with 12:8, 1'b0 - No XOR of the 5 bits
 *     T_PMA_CL91_MUX_SEL T_PMA MUX CL91 select.
 *     T_PMA_WATERMARK  T_PMA FIFO watermark. In units of 66-bit blocks.
 *     T_PMA_BITMUX_DELAY T_PMA FIFO delay after watermark is reached (in units of cycles)
 *     AM_SPACING_MUL   
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_6r (0x00109298 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_6r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR2_6.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_6r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr2_6[1];
	uint32_t _sc_x1_spd_ovrr2_6;
} BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_6r_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_6r_CLR(r) (r).sc_x1_spd_ovrr2_6[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_6r_SET(r,d) (r).sc_x1_spd_ovrr2_6[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_6r_GET(r) (r).sc_x1_spd_ovrr2_6[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_6r_AM_SPACING_MULf_GET(r) ((((r).sc_x1_spd_ovrr2_6[0]) >> 9) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_6r_AM_SPACING_MULf_SET(r,f) (r).sc_x1_spd_ovrr2_6[0]=(((r).sc_x1_spd_ovrr2_6[0] & ~((uint32_t)0x3 << 9)) | ((((uint32_t)f) & 0x3) << 9)) | (3 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_6r_T_PMA_BITMUX_DELAYf_GET(r) ((((r).sc_x1_spd_ovrr2_6[0]) >> 7) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_6r_T_PMA_BITMUX_DELAYf_SET(r,f) (r).sc_x1_spd_ovrr2_6[0]=(((r).sc_x1_spd_ovrr2_6[0] & ~((uint32_t)0x3 << 7)) | ((((uint32_t)f) & 0x3) << 7)) | (3 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_6r_T_PMA_WATERMARKf_GET(r) ((((r).sc_x1_spd_ovrr2_6[0]) >> 3) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_6r_T_PMA_WATERMARKf_SET(r,f) (r).sc_x1_spd_ovrr2_6[0]=(((r).sc_x1_spd_ovrr2_6[0] & ~((uint32_t)0xf << 3)) | ((((uint32_t)f) & 0xf) << 3)) | (15 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_6r_T_PMA_CL91_MUX_SELf_GET(r) ((((r).sc_x1_spd_ovrr2_6[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_6r_T_PMA_CL91_MUX_SELf_SET(r,f) (r).sc_x1_spd_ovrr2_6[0]=(((r).sc_x1_spd_ovrr2_6[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_6r_T_FIVE_BIT_XOR_ENf_GET(r) ((((r).sc_x1_spd_ovrr2_6[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_6r_T_FIVE_BIT_XOR_ENf_SET(r,f) (r).sc_x1_spd_ovrr2_6[0]=(((r).sc_x1_spd_ovrr2_6[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_6r_T_CL91_CW_SCRAMBLEf_GET(r) (((r).sc_x1_spd_ovrr2_6[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_6r_T_CL91_CW_SCRAMBLEf_SET(r,f) (r).sc_x1_spd_ovrr2_6[0]=(((r).sc_x1_spd_ovrr2_6[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR2_6.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR2_6r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_6r,(_r._sc_x1_spd_ovrr2_6))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR2_6r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_6r,(_r._sc_x1_spd_ovrr2_6)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR2_6r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_6r,(_r._sc_x1_spd_ovrr2_6))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR2_6r BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_6r
#define SC_X1_SPD_OVRR2_6r_SIZE BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_6r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_6r_t SC_X1_SPD_OVRR2_6r_t;
#define SC_X1_SPD_OVRR2_6r_CLR BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_6r_CLR
#define SC_X1_SPD_OVRR2_6r_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_6r_SET
#define SC_X1_SPD_OVRR2_6r_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_6r_GET
#define SC_X1_SPD_OVRR2_6r_AM_SPACING_MULf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_6r_AM_SPACING_MULf_GET
#define SC_X1_SPD_OVRR2_6r_AM_SPACING_MULf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_6r_AM_SPACING_MULf_SET
#define SC_X1_SPD_OVRR2_6r_T_PMA_BITMUX_DELAYf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_6r_T_PMA_BITMUX_DELAYf_GET
#define SC_X1_SPD_OVRR2_6r_T_PMA_BITMUX_DELAYf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_6r_T_PMA_BITMUX_DELAYf_SET
#define SC_X1_SPD_OVRR2_6r_T_PMA_WATERMARKf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_6r_T_PMA_WATERMARKf_GET
#define SC_X1_SPD_OVRR2_6r_T_PMA_WATERMARKf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_6r_T_PMA_WATERMARKf_SET
#define SC_X1_SPD_OVRR2_6r_T_PMA_CL91_MUX_SELf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_6r_T_PMA_CL91_MUX_SELf_GET
#define SC_X1_SPD_OVRR2_6r_T_PMA_CL91_MUX_SELf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_6r_T_PMA_CL91_MUX_SELf_SET
#define SC_X1_SPD_OVRR2_6r_T_FIVE_BIT_XOR_ENf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_6r_T_FIVE_BIT_XOR_ENf_GET
#define SC_X1_SPD_OVRR2_6r_T_FIVE_BIT_XOR_ENf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_6r_T_FIVE_BIT_XOR_ENf_SET
#define SC_X1_SPD_OVRR2_6r_T_CL91_CW_SCRAMBLEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_6r_T_CL91_CW_SCRAMBLEf_GET
#define SC_X1_SPD_OVRR2_6r_T_CL91_CW_SCRAMBLEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_6r_T_CL91_CW_SCRAMBLEf_SET
#define READ_SC_X1_SPD_OVRR2_6r BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR2_6r
#define WRITE_SC_X1_SPD_OVRR2_6r BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR2_6r
#define MODIFY_SC_X1_SPD_OVRR2_6r BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR2_6r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_6r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X1_SPD_OVRR2_7
 * BLOCKS:   SC_X1_SPEED_OVERRIDE2
 * REGADDR:  0x9299
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL91_BLKSYNC_MODE 
 *     R_MERGE_MODE     
 *     R_CL91_CW_SCRAMBLE Indicates whether the CL91 codeword needs to be descrambled. Should be enabled for FC mode.
 *     R_TC_IN_MODE     Indicates whether CL91 is turned ON for the port or not.
 *     R_TC_MODE        
 *     R_FIVE_BIT_XOR_EN 1'b1 - XOR 4:0 with 12:8, 1'b0 - No XOR of the 5 bits
 *     R_TC_OUT_MODE    
 *     R_HG2_ENABLE     Enables HG2 support for PCS
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_7r (0x00109299 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_7r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR2_7.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_7r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr2_7[1];
	uint32_t _sc_x1_spd_ovrr2_7;
} BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_7r_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_7r_CLR(r) (r).sc_x1_spd_ovrr2_7[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_7r_SET(r,d) (r).sc_x1_spd_ovrr2_7[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_7r_GET(r) (r).sc_x1_spd_ovrr2_7[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_7r_R_HG2_ENABLEf_GET(r) ((((r).sc_x1_spd_ovrr2_7[0]) >> 13) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_7r_R_HG2_ENABLEf_SET(r,f) (r).sc_x1_spd_ovrr2_7[0]=(((r).sc_x1_spd_ovrr2_7[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_7r_R_TC_OUT_MODEf_GET(r) ((((r).sc_x1_spd_ovrr2_7[0]) >> 11) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_7r_R_TC_OUT_MODEf_SET(r,f) (r).sc_x1_spd_ovrr2_7[0]=(((r).sc_x1_spd_ovrr2_7[0] & ~((uint32_t)0x3 << 11)) | ((((uint32_t)f) & 0x3) << 11)) | (3 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_7r_R_FIVE_BIT_XOR_ENf_GET(r) ((((r).sc_x1_spd_ovrr2_7[0]) >> 10) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_7r_R_FIVE_BIT_XOR_ENf_SET(r,f) (r).sc_x1_spd_ovrr2_7[0]=(((r).sc_x1_spd_ovrr2_7[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_7r_R_TC_MODEf_GET(r) ((((r).sc_x1_spd_ovrr2_7[0]) >> 8) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_7r_R_TC_MODEf_SET(r,f) (r).sc_x1_spd_ovrr2_7[0]=(((r).sc_x1_spd_ovrr2_7[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_7r_R_TC_IN_MODEf_GET(r) ((((r).sc_x1_spd_ovrr2_7[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_7r_R_TC_IN_MODEf_SET(r,f) (r).sc_x1_spd_ovrr2_7[0]=(((r).sc_x1_spd_ovrr2_7[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_7r_R_CL91_CW_SCRAMBLEf_GET(r) ((((r).sc_x1_spd_ovrr2_7[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_7r_R_CL91_CW_SCRAMBLEf_SET(r,f) (r).sc_x1_spd_ovrr2_7[0]=(((r).sc_x1_spd_ovrr2_7[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_7r_R_MERGE_MODEf_GET(r) ((((r).sc_x1_spd_ovrr2_7[0]) >> 3) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_7r_R_MERGE_MODEf_SET(r,f) (r).sc_x1_spd_ovrr2_7[0]=(((r).sc_x1_spd_ovrr2_7[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3)) | (7 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_7r_CL91_BLKSYNC_MODEf_GET(r) (((r).sc_x1_spd_ovrr2_7[0]) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_7r_CL91_BLKSYNC_MODEf_SET(r,f) (r).sc_x1_spd_ovrr2_7[0]=(((r).sc_x1_spd_ovrr2_7[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR2_7.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR2_7r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_7r,(_r._sc_x1_spd_ovrr2_7))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR2_7r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_7r,(_r._sc_x1_spd_ovrr2_7)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR2_7r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_7r,(_r._sc_x1_spd_ovrr2_7))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR2_7r BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_7r
#define SC_X1_SPD_OVRR2_7r_SIZE BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_7r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_7r_t SC_X1_SPD_OVRR2_7r_t;
#define SC_X1_SPD_OVRR2_7r_CLR BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_7r_CLR
#define SC_X1_SPD_OVRR2_7r_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_7r_SET
#define SC_X1_SPD_OVRR2_7r_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_7r_GET
#define SC_X1_SPD_OVRR2_7r_R_HG2_ENABLEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_7r_R_HG2_ENABLEf_GET
#define SC_X1_SPD_OVRR2_7r_R_HG2_ENABLEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_7r_R_HG2_ENABLEf_SET
#define SC_X1_SPD_OVRR2_7r_R_TC_OUT_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_7r_R_TC_OUT_MODEf_GET
#define SC_X1_SPD_OVRR2_7r_R_TC_OUT_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_7r_R_TC_OUT_MODEf_SET
#define SC_X1_SPD_OVRR2_7r_R_FIVE_BIT_XOR_ENf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_7r_R_FIVE_BIT_XOR_ENf_GET
#define SC_X1_SPD_OVRR2_7r_R_FIVE_BIT_XOR_ENf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_7r_R_FIVE_BIT_XOR_ENf_SET
#define SC_X1_SPD_OVRR2_7r_R_TC_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_7r_R_TC_MODEf_GET
#define SC_X1_SPD_OVRR2_7r_R_TC_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_7r_R_TC_MODEf_SET
#define SC_X1_SPD_OVRR2_7r_R_TC_IN_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_7r_R_TC_IN_MODEf_GET
#define SC_X1_SPD_OVRR2_7r_R_TC_IN_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_7r_R_TC_IN_MODEf_SET
#define SC_X1_SPD_OVRR2_7r_R_CL91_CW_SCRAMBLEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_7r_R_CL91_CW_SCRAMBLEf_GET
#define SC_X1_SPD_OVRR2_7r_R_CL91_CW_SCRAMBLEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_7r_R_CL91_CW_SCRAMBLEf_SET
#define SC_X1_SPD_OVRR2_7r_R_MERGE_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_7r_R_MERGE_MODEf_GET
#define SC_X1_SPD_OVRR2_7r_R_MERGE_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_7r_R_MERGE_MODEf_SET
#define SC_X1_SPD_OVRR2_7r_CL91_BLKSYNC_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_7r_CL91_BLKSYNC_MODEf_GET
#define SC_X1_SPD_OVRR2_7r_CL91_BLKSYNC_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_7r_CL91_BLKSYNC_MODEf_SET
#define READ_SC_X1_SPD_OVRR2_7r BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR2_7r
#define WRITE_SC_X1_SPD_OVRR2_7r BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR2_7r
#define MODIFY_SC_X1_SPD_OVRR2_7r BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR2_7r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_7r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X1_SPD_OVRR2_8
 * BLOCKS:   SC_X1_SPEED_OVERRIDE2
 * REGADDR:  0x929a
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CORRUPT_2ND_GROUP Corrupt 2nd group of codeward
 *     CORRUPT_6TH_GROUP Corrupt 6th group of codeward
 *     CL74_SHCORRUPT   Sync Header Corruption for CL74 FEC Error (uncorrectable).0: Only 5 SH, 1: All SH corrupted.
 *     BER_COUNT_SEL    0: select count based on cl49 else based on cl82
 *     BER_WINDOW_SEL   0: select window based on cl49 else based on cl82
 *     USE_100G_AM0     AM0 will be taken from 100G AM
 *     USE_100G_AM123   AM 1, 2, 3 will be taken from 100G AMs
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_8r (0x0010929a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_8r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR2_8.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_8r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr2_8[1];
	uint32_t _sc_x1_spd_ovrr2_8;
} BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_8r_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_8r_CLR(r) (r).sc_x1_spd_ovrr2_8[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_8r_SET(r,d) (r).sc_x1_spd_ovrr2_8[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_8r_GET(r) (r).sc_x1_spd_ovrr2_8[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_8r_USE_100G_AM123f_GET(r) ((((r).sc_x1_spd_ovrr2_8[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_8r_USE_100G_AM123f_SET(r,f) (r).sc_x1_spd_ovrr2_8[0]=(((r).sc_x1_spd_ovrr2_8[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_8r_USE_100G_AM0f_GET(r) ((((r).sc_x1_spd_ovrr2_8[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_8r_USE_100G_AM0f_SET(r,f) (r).sc_x1_spd_ovrr2_8[0]=(((r).sc_x1_spd_ovrr2_8[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_8r_BER_WINDOW_SELf_GET(r) ((((r).sc_x1_spd_ovrr2_8[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_8r_BER_WINDOW_SELf_SET(r,f) (r).sc_x1_spd_ovrr2_8[0]=(((r).sc_x1_spd_ovrr2_8[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_8r_BER_COUNT_SELf_GET(r) ((((r).sc_x1_spd_ovrr2_8[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_8r_BER_COUNT_SELf_SET(r,f) (r).sc_x1_spd_ovrr2_8[0]=(((r).sc_x1_spd_ovrr2_8[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_8r_CL74_SHCORRUPTf_GET(r) ((((r).sc_x1_spd_ovrr2_8[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_8r_CL74_SHCORRUPTf_SET(r,f) (r).sc_x1_spd_ovrr2_8[0]=(((r).sc_x1_spd_ovrr2_8[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_8r_CORRUPT_6TH_GROUPf_GET(r) ((((r).sc_x1_spd_ovrr2_8[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_8r_CORRUPT_6TH_GROUPf_SET(r,f) (r).sc_x1_spd_ovrr2_8[0]=(((r).sc_x1_spd_ovrr2_8[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_8r_CORRUPT_2ND_GROUPf_GET(r) (((r).sc_x1_spd_ovrr2_8[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_8r_CORRUPT_2ND_GROUPf_SET(r,f) (r).sc_x1_spd_ovrr2_8[0]=(((r).sc_x1_spd_ovrr2_8[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR2_8.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR2_8r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_8r,(_r._sc_x1_spd_ovrr2_8))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR2_8r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_8r,(_r._sc_x1_spd_ovrr2_8)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR2_8r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_8r,(_r._sc_x1_spd_ovrr2_8))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR2_8r BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_8r
#define SC_X1_SPD_OVRR2_8r_SIZE BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_8r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_8r_t SC_X1_SPD_OVRR2_8r_t;
#define SC_X1_SPD_OVRR2_8r_CLR BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_8r_CLR
#define SC_X1_SPD_OVRR2_8r_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_8r_SET
#define SC_X1_SPD_OVRR2_8r_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_8r_GET
#define SC_X1_SPD_OVRR2_8r_USE_100G_AM123f_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_8r_USE_100G_AM123f_GET
#define SC_X1_SPD_OVRR2_8r_USE_100G_AM123f_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_8r_USE_100G_AM123f_SET
#define SC_X1_SPD_OVRR2_8r_USE_100G_AM0f_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_8r_USE_100G_AM0f_GET
#define SC_X1_SPD_OVRR2_8r_USE_100G_AM0f_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_8r_USE_100G_AM0f_SET
#define SC_X1_SPD_OVRR2_8r_BER_WINDOW_SELf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_8r_BER_WINDOW_SELf_GET
#define SC_X1_SPD_OVRR2_8r_BER_WINDOW_SELf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_8r_BER_WINDOW_SELf_SET
#define SC_X1_SPD_OVRR2_8r_BER_COUNT_SELf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_8r_BER_COUNT_SELf_GET
#define SC_X1_SPD_OVRR2_8r_BER_COUNT_SELf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_8r_BER_COUNT_SELf_SET
#define SC_X1_SPD_OVRR2_8r_CL74_SHCORRUPTf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_8r_CL74_SHCORRUPTf_GET
#define SC_X1_SPD_OVRR2_8r_CL74_SHCORRUPTf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_8r_CL74_SHCORRUPTf_SET
#define SC_X1_SPD_OVRR2_8r_CORRUPT_6TH_GROUPf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_8r_CORRUPT_6TH_GROUPf_GET
#define SC_X1_SPD_OVRR2_8r_CORRUPT_6TH_GROUPf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_8r_CORRUPT_6TH_GROUPf_SET
#define SC_X1_SPD_OVRR2_8r_CORRUPT_2ND_GROUPf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_8r_CORRUPT_2ND_GROUPf_GET
#define SC_X1_SPD_OVRR2_8r_CORRUPT_2ND_GROUPf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_8r_CORRUPT_2ND_GROUPf_SET
#define READ_SC_X1_SPD_OVRR2_8r BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR2_8r
#define WRITE_SC_X1_SPD_OVRR2_8r BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR2_8r
#define MODIFY_SC_X1_SPD_OVRR2_8r BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR2_8r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR2_8r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X1_SPD_OVRR3_SPD
 * BLOCKS:   SC_X1_SPEED_OVERRIDE3
 * REGADDR:  0x92a0
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/W
 * FIELDS:
 *     NUM_LANES        Number of lanes for override configuration0   : NUM_LANES_01 - use 1 lane1   : NUM_LANES_02 - use 2 lanes2   : NUM_LANES_04 - use 4 lanes
 *     T_PMA_40B_MODE   1'b0 - 66-bit data write in t_pma.1'b1 - 40-bit data write in t_pma.
 *     CL36TX_EN        Per logical lane: cl36 TX pipeline: 1=enabled , 0=disabled
 *     CL36RX_EN        Per logical lane: cl36 RX pipeline: 1=enabled , 0=disabled
 *     CL36RX_10BIT_PMD_DATA_EN Per logical lane: Enables CL36 Rx Pipeline to use all 10-bits of PMD Rx data.This bit should be enabled in OS8.25 mode or 2.5G speed.
 *     SPEED            Actual speed set by SW
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_SPDr (0x001092a0 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_SPDr_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR3_SPD.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_SPDr_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr3_spd[1];
	uint32_t _sc_x1_spd_ovrr3_spd;
} BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_SPDr_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_SPDr_CLR(r) (r).sc_x1_spd_ovrr3_spd[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_SPDr_SET(r,d) (r).sc_x1_spd_ovrr3_spd[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_SPDr_GET(r) (r).sc_x1_spd_ovrr3_spd[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_SPDr_SPEEDf_GET(r) ((((r).sc_x1_spd_ovrr3_spd[0]) >> 8) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_SPDr_SPEEDf_SET(r,f) (r).sc_x1_spd_ovrr3_spd[0]=(((r).sc_x1_spd_ovrr3_spd[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_SPDr_CL36RX_10BIT_PMD_DATA_ENf_GET(r) ((((r).sc_x1_spd_ovrr3_spd[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_SPDr_CL36RX_10BIT_PMD_DATA_ENf_SET(r,f) (r).sc_x1_spd_ovrr3_spd[0]=(((r).sc_x1_spd_ovrr3_spd[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_SPDr_CL36RX_ENf_GET(r) ((((r).sc_x1_spd_ovrr3_spd[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_SPDr_CL36RX_ENf_SET(r,f) (r).sc_x1_spd_ovrr3_spd[0]=(((r).sc_x1_spd_ovrr3_spd[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_SPDr_CL36TX_ENf_GET(r) ((((r).sc_x1_spd_ovrr3_spd[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_SPDr_CL36TX_ENf_SET(r,f) (r).sc_x1_spd_ovrr3_spd[0]=(((r).sc_x1_spd_ovrr3_spd[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_SPDr_T_PMA_40B_MODEf_GET(r) ((((r).sc_x1_spd_ovrr3_spd[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_SPDr_T_PMA_40B_MODEf_SET(r,f) (r).sc_x1_spd_ovrr3_spd[0]=(((r).sc_x1_spd_ovrr3_spd[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_SPDr_NUM_LANESf_GET(r) (((r).sc_x1_spd_ovrr3_spd[0]) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_SPDr_NUM_LANESf_SET(r,f) (r).sc_x1_spd_ovrr3_spd[0]=(((r).sc_x1_spd_ovrr3_spd[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR3_SPD.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR3_SPDr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_SPDr,(_r._sc_x1_spd_ovrr3_spd))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR3_SPDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_SPDr,(_r._sc_x1_spd_ovrr3_spd)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR3_SPDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_SPDr,(_r._sc_x1_spd_ovrr3_spd))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR3_SPDr BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_SPDr
#define SC_X1_SPD_OVRR3_SPDr_SIZE BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_SPDr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_SPDr_t SC_X1_SPD_OVRR3_SPDr_t;
#define SC_X1_SPD_OVRR3_SPDr_CLR BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_SPDr_CLR
#define SC_X1_SPD_OVRR3_SPDr_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_SPDr_SET
#define SC_X1_SPD_OVRR3_SPDr_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_SPDr_GET
#define SC_X1_SPD_OVRR3_SPDr_SPEEDf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_SPDr_SPEEDf_GET
#define SC_X1_SPD_OVRR3_SPDr_SPEEDf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_SPDr_SPEEDf_SET
#define SC_X1_SPD_OVRR3_SPDr_CL36RX_10BIT_PMD_DATA_ENf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_SPDr_CL36RX_10BIT_PMD_DATA_ENf_GET
#define SC_X1_SPD_OVRR3_SPDr_CL36RX_10BIT_PMD_DATA_ENf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_SPDr_CL36RX_10BIT_PMD_DATA_ENf_SET
#define SC_X1_SPD_OVRR3_SPDr_CL36RX_ENf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_SPDr_CL36RX_ENf_GET
#define SC_X1_SPD_OVRR3_SPDr_CL36RX_ENf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_SPDr_CL36RX_ENf_SET
#define SC_X1_SPD_OVRR3_SPDr_CL36TX_ENf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_SPDr_CL36TX_ENf_GET
#define SC_X1_SPD_OVRR3_SPDr_CL36TX_ENf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_SPDr_CL36TX_ENf_SET
#define SC_X1_SPD_OVRR3_SPDr_T_PMA_40B_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_SPDr_T_PMA_40B_MODEf_GET
#define SC_X1_SPD_OVRR3_SPDr_T_PMA_40B_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_SPDr_T_PMA_40B_MODEf_SET
#define SC_X1_SPD_OVRR3_SPDr_NUM_LANESf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_SPDr_NUM_LANESf_GET
#define SC_X1_SPD_OVRR3_SPDr_NUM_LANESf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_SPDr_NUM_LANESf_SET
#define READ_SC_X1_SPD_OVRR3_SPDr BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR3_SPDr
#define WRITE_SC_X1_SPD_OVRR3_SPDr BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR3_SPDr
#define MODIFY_SC_X1_SPD_OVRR3_SPDr BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR3_SPDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_SPDr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X1_SPD_OVRR3_0
 * BLOCKS:   SC_X1_SPEED_OVERRIDE3
 * REGADDR:  0x92a2
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     SCR_MODE         
 *     T_PMA_BTMX_MODE  Number of PCS lanes bitmuxed
 *     T_HG2_ENABLE     Enables HG2 support for PCS
 *     T_ENC_MODE       
 *     T_FIFO_MODE      T_FIFO stage control field
 *     OS_MODE          
 *     CL72_EN          Enables cl72
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_0r (0x001092a2 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_0r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR3_0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_0r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr3_0[1];
	uint32_t _sc_x1_spd_ovrr3_0;
} BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_0r_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_0r_CLR(r) (r).sc_x1_spd_ovrr3_0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_0r_SET(r,d) (r).sc_x1_spd_ovrr3_0[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_0r_GET(r) (r).sc_x1_spd_ovrr3_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_0r_CL72_ENf_GET(r) ((((r).sc_x1_spd_ovrr3_0[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_0r_CL72_ENf_SET(r,f) (r).sc_x1_spd_ovrr3_0[0]=(((r).sc_x1_spd_ovrr3_0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_0r_OS_MODEf_GET(r) ((((r).sc_x1_spd_ovrr3_0[0]) >> 11) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_0r_OS_MODEf_SET(r,f) (r).sc_x1_spd_ovrr3_0[0]=(((r).sc_x1_spd_ovrr3_0[0] & ~((uint32_t)0xf << 11)) | ((((uint32_t)f) & 0xf) << 11)) | (15 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_0r_T_FIFO_MODEf_GET(r) ((((r).sc_x1_spd_ovrr3_0[0]) >> 9) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_0r_T_FIFO_MODEf_SET(r,f) (r).sc_x1_spd_ovrr3_0[0]=(((r).sc_x1_spd_ovrr3_0[0] & ~((uint32_t)0x3 << 9)) | ((((uint32_t)f) & 0x3) << 9)) | (3 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_0r_T_ENC_MODEf_GET(r) ((((r).sc_x1_spd_ovrr3_0[0]) >> 7) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_0r_T_ENC_MODEf_SET(r,f) (r).sc_x1_spd_ovrr3_0[0]=(((r).sc_x1_spd_ovrr3_0[0] & ~((uint32_t)0x3 << 7)) | ((((uint32_t)f) & 0x3) << 7)) | (3 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_0r_T_HG2_ENABLEf_GET(r) ((((r).sc_x1_spd_ovrr3_0[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_0r_T_HG2_ENABLEf_SET(r,f) (r).sc_x1_spd_ovrr3_0[0]=(((r).sc_x1_spd_ovrr3_0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_0r_T_PMA_BTMX_MODEf_GET(r) ((((r).sc_x1_spd_ovrr3_0[0]) >> 4) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_0r_T_PMA_BTMX_MODEf_SET(r,f) (r).sc_x1_spd_ovrr3_0[0]=(((r).sc_x1_spd_ovrr3_0[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_0r_SCR_MODEf_GET(r) ((((r).sc_x1_spd_ovrr3_0[0]) >> 1) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_0r_SCR_MODEf_SET(r,f) (r).sc_x1_spd_ovrr3_0[0]=(((r).sc_x1_spd_ovrr3_0[0] & ~((uint32_t)0x7 << 1)) | ((((uint32_t)f) & 0x7) << 1)) | (7 << (16 + 1))

/*
 * These macros can be used to access SC_X1_SPD_OVRR3_0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR3_0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_0r,(_r._sc_x1_spd_ovrr3_0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR3_0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_0r,(_r._sc_x1_spd_ovrr3_0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR3_0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_0r,(_r._sc_x1_spd_ovrr3_0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR3_0r BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_0r
#define SC_X1_SPD_OVRR3_0r_SIZE BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_0r_t SC_X1_SPD_OVRR3_0r_t;
#define SC_X1_SPD_OVRR3_0r_CLR BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_0r_CLR
#define SC_X1_SPD_OVRR3_0r_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_0r_SET
#define SC_X1_SPD_OVRR3_0r_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_0r_GET
#define SC_X1_SPD_OVRR3_0r_CL72_ENf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_0r_CL72_ENf_GET
#define SC_X1_SPD_OVRR3_0r_CL72_ENf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_0r_CL72_ENf_SET
#define SC_X1_SPD_OVRR3_0r_OS_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_0r_OS_MODEf_GET
#define SC_X1_SPD_OVRR3_0r_OS_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_0r_OS_MODEf_SET
#define SC_X1_SPD_OVRR3_0r_T_FIFO_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_0r_T_FIFO_MODEf_GET
#define SC_X1_SPD_OVRR3_0r_T_FIFO_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_0r_T_FIFO_MODEf_SET
#define SC_X1_SPD_OVRR3_0r_T_ENC_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_0r_T_ENC_MODEf_GET
#define SC_X1_SPD_OVRR3_0r_T_ENC_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_0r_T_ENC_MODEf_SET
#define SC_X1_SPD_OVRR3_0r_T_HG2_ENABLEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_0r_T_HG2_ENABLEf_GET
#define SC_X1_SPD_OVRR3_0r_T_HG2_ENABLEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_0r_T_HG2_ENABLEf_SET
#define SC_X1_SPD_OVRR3_0r_T_PMA_BTMX_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_0r_T_PMA_BTMX_MODEf_GET
#define SC_X1_SPD_OVRR3_0r_T_PMA_BTMX_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_0r_T_PMA_BTMX_MODEf_SET
#define SC_X1_SPD_OVRR3_0r_SCR_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_0r_SCR_MODEf_GET
#define SC_X1_SPD_OVRR3_0r_SCR_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_0r_SCR_MODEf_SET
#define READ_SC_X1_SPD_OVRR3_0r BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR3_0r
#define WRITE_SC_X1_SPD_OVRR3_0r BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR3_0r
#define MODIFY_SC_X1_SPD_OVRR3_0r BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR3_0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X1_SPD_OVRR3_1
 * BLOCKS:   SC_X1_SPEED_OVERRIDE3
 * REGADDR:  0x92a3
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BS_BTMX_MODE     Bit-mux mode: Indicates the format of incoming data on a physical lane.
 *     BS_DIST_MODE     Block to lane distribution mode.BS_DIST_MODE_5_LANE_TDM - 5 lane TDM. Each block distributed in turn over output pseudo-logical lanes 0-4BS_DIST_MODE_2_LANE_TDM_2_VLANE - 2 lane TDM for 2 virtual lanes.Virtual Lane 0 output is ping-ponged over pseudo-logical lanes 0,2.Virtual Lane 1 output is ping-ponged over pseudo-logical lanes 1,3.BS_DIST_MODE_2_LANE_TDM_1_VLANE - 2 lane TDM for 1 virtual lane.Virtual Lane 0 output is ping-ponged over pseudo-logical lanes 0,2.BS_DIST_MODE_NO_TDM - No TDM. Virtual Lane output is sent directly to corresponding pseudo-logical lane.
 *     BS_SYNC_EN       Enable block synchronization: If enabled, block sync sm will attempt to slip data until sync is achieved.
 *     BS_SM_SYNC_MODE  Block Sync Mode: When bs_sync_en==1, this bit indicates if cl49 or cl82 state machine operation is used.1'b0 - Clause 821'b1 - Clause 49
 *     DEC_FSM_MODE     
 *     DESKEW_MODE      
 *     DEC_TL_MODE      
 *     DESCR_MODE       
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_1r (0x001092a3 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_1r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR3_1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_1r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr3_1[1];
	uint32_t _sc_x1_spd_ovrr3_1;
} BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_1r_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_1r_CLR(r) (r).sc_x1_spd_ovrr3_1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_1r_SET(r,d) (r).sc_x1_spd_ovrr3_1[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_1r_GET(r) (r).sc_x1_spd_ovrr3_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_1r_DESCR_MODEf_GET(r) ((((r).sc_x1_spd_ovrr3_1[0]) >> 14) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_1r_DESCR_MODEf_SET(r,f) (r).sc_x1_spd_ovrr3_1[0]=(((r).sc_x1_spd_ovrr3_1[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_1r_DEC_TL_MODEf_GET(r) ((((r).sc_x1_spd_ovrr3_1[0]) >> 12) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_1r_DEC_TL_MODEf_SET(r,f) (r).sc_x1_spd_ovrr3_1[0]=(((r).sc_x1_spd_ovrr3_1[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12)) | (3 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_1r_DESKEW_MODEf_GET(r) ((((r).sc_x1_spd_ovrr3_1[0]) >> 8) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_1r_DESKEW_MODEf_SET(r,f) (r).sc_x1_spd_ovrr3_1[0]=(((r).sc_x1_spd_ovrr3_1[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_1r_DEC_FSM_MODEf_GET(r) ((((r).sc_x1_spd_ovrr3_1[0]) >> 6) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_1r_DEC_FSM_MODEf_SET(r,f) (r).sc_x1_spd_ovrr3_1[0]=(((r).sc_x1_spd_ovrr3_1[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6)) | (3 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_1r_BS_SM_SYNC_MODEf_GET(r) ((((r).sc_x1_spd_ovrr3_1[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_1r_BS_SM_SYNC_MODEf_SET(r,f) (r).sc_x1_spd_ovrr3_1[0]=(((r).sc_x1_spd_ovrr3_1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_1r_BS_SYNC_ENf_GET(r) ((((r).sc_x1_spd_ovrr3_1[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_1r_BS_SYNC_ENf_SET(r,f) (r).sc_x1_spd_ovrr3_1[0]=(((r).sc_x1_spd_ovrr3_1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_1r_BS_DIST_MODEf_GET(r) ((((r).sc_x1_spd_ovrr3_1[0]) >> 2) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_1r_BS_DIST_MODEf_SET(r,f) (r).sc_x1_spd_ovrr3_1[0]=(((r).sc_x1_spd_ovrr3_1[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2)) | (3 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_1r_BS_BTMX_MODEf_GET(r) (((r).sc_x1_spd_ovrr3_1[0]) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_1r_BS_BTMX_MODEf_SET(r,f) (r).sc_x1_spd_ovrr3_1[0]=(((r).sc_x1_spd_ovrr3_1[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR3_1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR3_1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_1r,(_r._sc_x1_spd_ovrr3_1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR3_1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_1r,(_r._sc_x1_spd_ovrr3_1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR3_1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_1r,(_r._sc_x1_spd_ovrr3_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR3_1r BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_1r
#define SC_X1_SPD_OVRR3_1r_SIZE BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_1r_t SC_X1_SPD_OVRR3_1r_t;
#define SC_X1_SPD_OVRR3_1r_CLR BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_1r_CLR
#define SC_X1_SPD_OVRR3_1r_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_1r_SET
#define SC_X1_SPD_OVRR3_1r_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_1r_GET
#define SC_X1_SPD_OVRR3_1r_DESCR_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_1r_DESCR_MODEf_GET
#define SC_X1_SPD_OVRR3_1r_DESCR_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_1r_DESCR_MODEf_SET
#define SC_X1_SPD_OVRR3_1r_DEC_TL_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_1r_DEC_TL_MODEf_GET
#define SC_X1_SPD_OVRR3_1r_DEC_TL_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_1r_DEC_TL_MODEf_SET
#define SC_X1_SPD_OVRR3_1r_DESKEW_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_1r_DESKEW_MODEf_GET
#define SC_X1_SPD_OVRR3_1r_DESKEW_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_1r_DESKEW_MODEf_SET
#define SC_X1_SPD_OVRR3_1r_DEC_FSM_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_1r_DEC_FSM_MODEf_GET
#define SC_X1_SPD_OVRR3_1r_DEC_FSM_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_1r_DEC_FSM_MODEf_SET
#define SC_X1_SPD_OVRR3_1r_BS_SM_SYNC_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_1r_BS_SM_SYNC_MODEf_GET
#define SC_X1_SPD_OVRR3_1r_BS_SM_SYNC_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_1r_BS_SM_SYNC_MODEf_SET
#define SC_X1_SPD_OVRR3_1r_BS_SYNC_ENf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_1r_BS_SYNC_ENf_GET
#define SC_X1_SPD_OVRR3_1r_BS_SYNC_ENf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_1r_BS_SYNC_ENf_SET
#define SC_X1_SPD_OVRR3_1r_BS_DIST_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_1r_BS_DIST_MODEf_GET
#define SC_X1_SPD_OVRR3_1r_BS_DIST_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_1r_BS_DIST_MODEf_SET
#define SC_X1_SPD_OVRR3_1r_BS_BTMX_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_1r_BS_BTMX_MODEf_GET
#define SC_X1_SPD_OVRR3_1r_BS_BTMX_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_1r_BS_BTMX_MODEf_SET
#define READ_SC_X1_SPD_OVRR3_1r BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR3_1r
#define WRITE_SC_X1_SPD_OVRR3_1r BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR3_1r
#define MODIFY_SC_X1_SPD_OVRR3_1r BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR3_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X1_SPD_OVRR3_2
 * BLOCKS:   SC_X1_SPEED_OVERRIDE3
 * REGADDR:  0x92a4
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CLOCKCNT0        clock count 0 for credit programming, range 5 to 4125
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_2r (0x001092a4 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR3_2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_2r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr3_2[1];
	uint32_t _sc_x1_spd_ovrr3_2;
} BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_2r_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_2r_CLR(r) (r).sc_x1_spd_ovrr3_2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_2r_SET(r,d) (r).sc_x1_spd_ovrr3_2[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_2r_GET(r) (r).sc_x1_spd_ovrr3_2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_2r_CLOCKCNT0f_GET(r) (((r).sc_x1_spd_ovrr3_2[0]) & 0x3fff)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_2r_CLOCKCNT0f_SET(r,f) (r).sc_x1_spd_ovrr3_2[0]=(((r).sc_x1_spd_ovrr3_2[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff)) | (0x3fff << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR3_2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR3_2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_2r,(_r._sc_x1_spd_ovrr3_2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR3_2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_2r,(_r._sc_x1_spd_ovrr3_2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR3_2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_2r,(_r._sc_x1_spd_ovrr3_2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR3_2r BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_2r
#define SC_X1_SPD_OVRR3_2r_SIZE BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_2r_t SC_X1_SPD_OVRR3_2r_t;
#define SC_X1_SPD_OVRR3_2r_CLR BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_2r_CLR
#define SC_X1_SPD_OVRR3_2r_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_2r_SET
#define SC_X1_SPD_OVRR3_2r_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_2r_GET
#define SC_X1_SPD_OVRR3_2r_CLOCKCNT0f_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_2r_CLOCKCNT0f_GET
#define SC_X1_SPD_OVRR3_2r_CLOCKCNT0f_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_2r_CLOCKCNT0f_SET
#define READ_SC_X1_SPD_OVRR3_2r BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR3_2r
#define WRITE_SC_X1_SPD_OVRR3_2r BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR3_2r
#define MODIFY_SC_X1_SPD_OVRR3_2r BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR3_2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X1_SPD_OVRR3_3
 * BLOCKS:   SC_X1_SPEED_OVERRIDE3
 * REGADDR:  0x92a5
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CLOCKCNT1        clock count 1 for credit programming, range 4 to 12
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_3r (0x001092a5 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_3r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR3_3.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_3r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr3_3[1];
	uint32_t _sc_x1_spd_ovrr3_3;
} BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_3r_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_3r_CLR(r) (r).sc_x1_spd_ovrr3_3[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_3r_SET(r,d) (r).sc_x1_spd_ovrr3_3[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_3r_GET(r) (r).sc_x1_spd_ovrr3_3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_3r_CLOCKCNT1f_GET(r) (((r).sc_x1_spd_ovrr3_3[0]) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_3r_CLOCKCNT1f_SET(r,f) (r).sc_x1_spd_ovrr3_3[0]=(((r).sc_x1_spd_ovrr3_3[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR3_3.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR3_3r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_3r,(_r._sc_x1_spd_ovrr3_3))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR3_3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_3r,(_r._sc_x1_spd_ovrr3_3)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR3_3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_3r,(_r._sc_x1_spd_ovrr3_3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR3_3r BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_3r
#define SC_X1_SPD_OVRR3_3r_SIZE BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_3r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_3r_t SC_X1_SPD_OVRR3_3r_t;
#define SC_X1_SPD_OVRR3_3r_CLR BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_3r_CLR
#define SC_X1_SPD_OVRR3_3r_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_3r_SET
#define SC_X1_SPD_OVRR3_3r_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_3r_GET
#define SC_X1_SPD_OVRR3_3r_CLOCKCNT1f_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_3r_CLOCKCNT1f_GET
#define SC_X1_SPD_OVRR3_3r_CLOCKCNT1f_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_3r_CLOCKCNT1f_SET
#define READ_SC_X1_SPD_OVRR3_3r BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR3_3r
#define WRITE_SC_X1_SPD_OVRR3_3r BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR3_3r
#define MODIFY_SC_X1_SPD_OVRR3_3r BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR3_3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X1_SPD_OVRR3_4
 * BLOCKS:   SC_X1_SPEED_OVERRIDE3
 * REGADDR:  0x92a6
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LOOPCNT1         loop count 1 for credit programming, range 2 to 18
 *     LOOPCNT0         loop count 0 for credit programming, range 1 to 1
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_4r (0x001092a6 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_4r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR3_4.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_4r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr3_4[1];
	uint32_t _sc_x1_spd_ovrr3_4;
} BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_4r_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_4r_CLR(r) (r).sc_x1_spd_ovrr3_4[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_4r_SET(r,d) (r).sc_x1_spd_ovrr3_4[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_4r_GET(r) (r).sc_x1_spd_ovrr3_4[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_4r_LOOPCNT0f_GET(r) ((((r).sc_x1_spd_ovrr3_4[0]) >> 6) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_4r_LOOPCNT0f_SET(r,f) (r).sc_x1_spd_ovrr3_4[0]=(((r).sc_x1_spd_ovrr3_4[0] & ~((uint32_t)0xff << 6)) | ((((uint32_t)f) & 0xff) << 6)) | (255 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_4r_LOOPCNT1f_GET(r) (((r).sc_x1_spd_ovrr3_4[0]) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_4r_LOOPCNT1f_SET(r,f) (r).sc_x1_spd_ovrr3_4[0]=(((r).sc_x1_spd_ovrr3_4[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR3_4.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR3_4r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_4r,(_r._sc_x1_spd_ovrr3_4))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR3_4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_4r,(_r._sc_x1_spd_ovrr3_4)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR3_4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_4r,(_r._sc_x1_spd_ovrr3_4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR3_4r BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_4r
#define SC_X1_SPD_OVRR3_4r_SIZE BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_4r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_4r_t SC_X1_SPD_OVRR3_4r_t;
#define SC_X1_SPD_OVRR3_4r_CLR BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_4r_CLR
#define SC_X1_SPD_OVRR3_4r_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_4r_SET
#define SC_X1_SPD_OVRR3_4r_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_4r_GET
#define SC_X1_SPD_OVRR3_4r_LOOPCNT0f_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_4r_LOOPCNT0f_GET
#define SC_X1_SPD_OVRR3_4r_LOOPCNT0f_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_4r_LOOPCNT0f_SET
#define SC_X1_SPD_OVRR3_4r_LOOPCNT1f_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_4r_LOOPCNT1f_GET
#define SC_X1_SPD_OVRR3_4r_LOOPCNT1f_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_4r_LOOPCNT1f_SET
#define READ_SC_X1_SPD_OVRR3_4r BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR3_4r
#define WRITE_SC_X1_SPD_OVRR3_4r BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR3_4r
#define MODIFY_SC_X1_SPD_OVRR3_4r BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR3_4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_4r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X1_SPD_OVRR3_5
 * BLOCKS:   SC_X1_SPEED_OVERRIDE3
 * REGADDR:  0x92a7
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MAC_CREDITGENCNT CGC for mac credit generation, range 1 to 2063
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_5r (0x001092a7 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_5r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR3_5.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_5r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr3_5[1];
	uint32_t _sc_x1_spd_ovrr3_5;
} BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_5r_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_5r_CLR(r) (r).sc_x1_spd_ovrr3_5[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_5r_SET(r,d) (r).sc_x1_spd_ovrr3_5[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_5r_GET(r) (r).sc_x1_spd_ovrr3_5[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_5r_MAC_CREDITGENCNTf_GET(r) (((r).sc_x1_spd_ovrr3_5[0]) & 0x1fff)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_5r_MAC_CREDITGENCNTf_SET(r,f) (r).sc_x1_spd_ovrr3_5[0]=(((r).sc_x1_spd_ovrr3_5[0] & ~((uint32_t)0x1fff)) | (((uint32_t)f) & 0x1fff)) | (0x1fff << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR3_5.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR3_5r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_5r,(_r._sc_x1_spd_ovrr3_5))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR3_5r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_5r,(_r._sc_x1_spd_ovrr3_5)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR3_5r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_5r,(_r._sc_x1_spd_ovrr3_5))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR3_5r BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_5r
#define SC_X1_SPD_OVRR3_5r_SIZE BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_5r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_5r_t SC_X1_SPD_OVRR3_5r_t;
#define SC_X1_SPD_OVRR3_5r_CLR BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_5r_CLR
#define SC_X1_SPD_OVRR3_5r_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_5r_SET
#define SC_X1_SPD_OVRR3_5r_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_5r_GET
#define SC_X1_SPD_OVRR3_5r_MAC_CREDITGENCNTf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_5r_MAC_CREDITGENCNTf_GET
#define SC_X1_SPD_OVRR3_5r_MAC_CREDITGENCNTf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_5r_MAC_CREDITGENCNTf_SET
#define READ_SC_X1_SPD_OVRR3_5r BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR3_5r
#define WRITE_SC_X1_SPD_OVRR3_5r BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR3_5r
#define MODIFY_SC_X1_SPD_OVRR3_5r BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR3_5r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_5r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X1_SPD_OVRR3_6
 * BLOCKS:   SC_X1_SPEED_OVERRIDE3
 * REGADDR:  0x92a8
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     T_CL91_CW_SCRAMBLE Indicates whether the CL91 codeword should be scrambled or not. It should be set to 1 in FC mode.
 *     T_FIVE_BIT_XOR_EN 1'b1 - XOR 4:0 with 12:8, 1'b0 - No XOR of the 5 bits
 *     T_PMA_CL91_MUX_SEL T_PMA MUX CL91 select.
 *     T_PMA_WATERMARK  T_PMA FIFO watermark. In units of 66-bit blocks.
 *     T_PMA_BITMUX_DELAY T_PMA FIFO delay after watermark is reached (in units of cycles)
 *     AM_SPACING_MUL   
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_6r (0x001092a8 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_6r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR3_6.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_6r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr3_6[1];
	uint32_t _sc_x1_spd_ovrr3_6;
} BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_6r_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_6r_CLR(r) (r).sc_x1_spd_ovrr3_6[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_6r_SET(r,d) (r).sc_x1_spd_ovrr3_6[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_6r_GET(r) (r).sc_x1_spd_ovrr3_6[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_6r_AM_SPACING_MULf_GET(r) ((((r).sc_x1_spd_ovrr3_6[0]) >> 9) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_6r_AM_SPACING_MULf_SET(r,f) (r).sc_x1_spd_ovrr3_6[0]=(((r).sc_x1_spd_ovrr3_6[0] & ~((uint32_t)0x3 << 9)) | ((((uint32_t)f) & 0x3) << 9)) | (3 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_6r_T_PMA_BITMUX_DELAYf_GET(r) ((((r).sc_x1_spd_ovrr3_6[0]) >> 7) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_6r_T_PMA_BITMUX_DELAYf_SET(r,f) (r).sc_x1_spd_ovrr3_6[0]=(((r).sc_x1_spd_ovrr3_6[0] & ~((uint32_t)0x3 << 7)) | ((((uint32_t)f) & 0x3) << 7)) | (3 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_6r_T_PMA_WATERMARKf_GET(r) ((((r).sc_x1_spd_ovrr3_6[0]) >> 3) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_6r_T_PMA_WATERMARKf_SET(r,f) (r).sc_x1_spd_ovrr3_6[0]=(((r).sc_x1_spd_ovrr3_6[0] & ~((uint32_t)0xf << 3)) | ((((uint32_t)f) & 0xf) << 3)) | (15 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_6r_T_PMA_CL91_MUX_SELf_GET(r) ((((r).sc_x1_spd_ovrr3_6[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_6r_T_PMA_CL91_MUX_SELf_SET(r,f) (r).sc_x1_spd_ovrr3_6[0]=(((r).sc_x1_spd_ovrr3_6[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_6r_T_FIVE_BIT_XOR_ENf_GET(r) ((((r).sc_x1_spd_ovrr3_6[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_6r_T_FIVE_BIT_XOR_ENf_SET(r,f) (r).sc_x1_spd_ovrr3_6[0]=(((r).sc_x1_spd_ovrr3_6[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_6r_T_CL91_CW_SCRAMBLEf_GET(r) (((r).sc_x1_spd_ovrr3_6[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_6r_T_CL91_CW_SCRAMBLEf_SET(r,f) (r).sc_x1_spd_ovrr3_6[0]=(((r).sc_x1_spd_ovrr3_6[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR3_6.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR3_6r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_6r,(_r._sc_x1_spd_ovrr3_6))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR3_6r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_6r,(_r._sc_x1_spd_ovrr3_6)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR3_6r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_6r,(_r._sc_x1_spd_ovrr3_6))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR3_6r BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_6r
#define SC_X1_SPD_OVRR3_6r_SIZE BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_6r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_6r_t SC_X1_SPD_OVRR3_6r_t;
#define SC_X1_SPD_OVRR3_6r_CLR BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_6r_CLR
#define SC_X1_SPD_OVRR3_6r_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_6r_SET
#define SC_X1_SPD_OVRR3_6r_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_6r_GET
#define SC_X1_SPD_OVRR3_6r_AM_SPACING_MULf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_6r_AM_SPACING_MULf_GET
#define SC_X1_SPD_OVRR3_6r_AM_SPACING_MULf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_6r_AM_SPACING_MULf_SET
#define SC_X1_SPD_OVRR3_6r_T_PMA_BITMUX_DELAYf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_6r_T_PMA_BITMUX_DELAYf_GET
#define SC_X1_SPD_OVRR3_6r_T_PMA_BITMUX_DELAYf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_6r_T_PMA_BITMUX_DELAYf_SET
#define SC_X1_SPD_OVRR3_6r_T_PMA_WATERMARKf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_6r_T_PMA_WATERMARKf_GET
#define SC_X1_SPD_OVRR3_6r_T_PMA_WATERMARKf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_6r_T_PMA_WATERMARKf_SET
#define SC_X1_SPD_OVRR3_6r_T_PMA_CL91_MUX_SELf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_6r_T_PMA_CL91_MUX_SELf_GET
#define SC_X1_SPD_OVRR3_6r_T_PMA_CL91_MUX_SELf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_6r_T_PMA_CL91_MUX_SELf_SET
#define SC_X1_SPD_OVRR3_6r_T_FIVE_BIT_XOR_ENf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_6r_T_FIVE_BIT_XOR_ENf_GET
#define SC_X1_SPD_OVRR3_6r_T_FIVE_BIT_XOR_ENf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_6r_T_FIVE_BIT_XOR_ENf_SET
#define SC_X1_SPD_OVRR3_6r_T_CL91_CW_SCRAMBLEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_6r_T_CL91_CW_SCRAMBLEf_GET
#define SC_X1_SPD_OVRR3_6r_T_CL91_CW_SCRAMBLEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_6r_T_CL91_CW_SCRAMBLEf_SET
#define READ_SC_X1_SPD_OVRR3_6r BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR3_6r
#define WRITE_SC_X1_SPD_OVRR3_6r BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR3_6r
#define MODIFY_SC_X1_SPD_OVRR3_6r BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR3_6r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_6r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X1_SPD_OVRR3_7
 * BLOCKS:   SC_X1_SPEED_OVERRIDE3
 * REGADDR:  0x92a9
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL91_BLKSYNC_MODE 
 *     R_MERGE_MODE     
 *     R_CL91_CW_SCRAMBLE Indicates whether the CL91 codeword needs to be descrambled. Should be enabled for FC mode.
 *     R_TC_IN_MODE     Indicates whether CL91 is turned ON for the port or not.
 *     R_TC_MODE        
 *     R_FIVE_BIT_XOR_EN 1'b1 - XOR 4:0 with 12:8, 1'b0 - No XOR of the 5 bits
 *     R_TC_OUT_MODE    
 *     R_HG2_ENABLE     Enables HG2 support for PCS
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_7r (0x001092a9 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_7r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR3_7.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_7r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr3_7[1];
	uint32_t _sc_x1_spd_ovrr3_7;
} BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_7r_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_7r_CLR(r) (r).sc_x1_spd_ovrr3_7[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_7r_SET(r,d) (r).sc_x1_spd_ovrr3_7[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_7r_GET(r) (r).sc_x1_spd_ovrr3_7[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_7r_R_HG2_ENABLEf_GET(r) ((((r).sc_x1_spd_ovrr3_7[0]) >> 13) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_7r_R_HG2_ENABLEf_SET(r,f) (r).sc_x1_spd_ovrr3_7[0]=(((r).sc_x1_spd_ovrr3_7[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_7r_R_TC_OUT_MODEf_GET(r) ((((r).sc_x1_spd_ovrr3_7[0]) >> 11) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_7r_R_TC_OUT_MODEf_SET(r,f) (r).sc_x1_spd_ovrr3_7[0]=(((r).sc_x1_spd_ovrr3_7[0] & ~((uint32_t)0x3 << 11)) | ((((uint32_t)f) & 0x3) << 11)) | (3 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_7r_R_FIVE_BIT_XOR_ENf_GET(r) ((((r).sc_x1_spd_ovrr3_7[0]) >> 10) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_7r_R_FIVE_BIT_XOR_ENf_SET(r,f) (r).sc_x1_spd_ovrr3_7[0]=(((r).sc_x1_spd_ovrr3_7[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_7r_R_TC_MODEf_GET(r) ((((r).sc_x1_spd_ovrr3_7[0]) >> 8) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_7r_R_TC_MODEf_SET(r,f) (r).sc_x1_spd_ovrr3_7[0]=(((r).sc_x1_spd_ovrr3_7[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_7r_R_TC_IN_MODEf_GET(r) ((((r).sc_x1_spd_ovrr3_7[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_7r_R_TC_IN_MODEf_SET(r,f) (r).sc_x1_spd_ovrr3_7[0]=(((r).sc_x1_spd_ovrr3_7[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_7r_R_CL91_CW_SCRAMBLEf_GET(r) ((((r).sc_x1_spd_ovrr3_7[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_7r_R_CL91_CW_SCRAMBLEf_SET(r,f) (r).sc_x1_spd_ovrr3_7[0]=(((r).sc_x1_spd_ovrr3_7[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_7r_R_MERGE_MODEf_GET(r) ((((r).sc_x1_spd_ovrr3_7[0]) >> 3) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_7r_R_MERGE_MODEf_SET(r,f) (r).sc_x1_spd_ovrr3_7[0]=(((r).sc_x1_spd_ovrr3_7[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3)) | (7 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_7r_CL91_BLKSYNC_MODEf_GET(r) (((r).sc_x1_spd_ovrr3_7[0]) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_7r_CL91_BLKSYNC_MODEf_SET(r,f) (r).sc_x1_spd_ovrr3_7[0]=(((r).sc_x1_spd_ovrr3_7[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR3_7.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR3_7r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_7r,(_r._sc_x1_spd_ovrr3_7))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR3_7r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_7r,(_r._sc_x1_spd_ovrr3_7)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR3_7r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_7r,(_r._sc_x1_spd_ovrr3_7))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR3_7r BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_7r
#define SC_X1_SPD_OVRR3_7r_SIZE BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_7r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_7r_t SC_X1_SPD_OVRR3_7r_t;
#define SC_X1_SPD_OVRR3_7r_CLR BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_7r_CLR
#define SC_X1_SPD_OVRR3_7r_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_7r_SET
#define SC_X1_SPD_OVRR3_7r_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_7r_GET
#define SC_X1_SPD_OVRR3_7r_R_HG2_ENABLEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_7r_R_HG2_ENABLEf_GET
#define SC_X1_SPD_OVRR3_7r_R_HG2_ENABLEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_7r_R_HG2_ENABLEf_SET
#define SC_X1_SPD_OVRR3_7r_R_TC_OUT_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_7r_R_TC_OUT_MODEf_GET
#define SC_X1_SPD_OVRR3_7r_R_TC_OUT_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_7r_R_TC_OUT_MODEf_SET
#define SC_X1_SPD_OVRR3_7r_R_FIVE_BIT_XOR_ENf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_7r_R_FIVE_BIT_XOR_ENf_GET
#define SC_X1_SPD_OVRR3_7r_R_FIVE_BIT_XOR_ENf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_7r_R_FIVE_BIT_XOR_ENf_SET
#define SC_X1_SPD_OVRR3_7r_R_TC_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_7r_R_TC_MODEf_GET
#define SC_X1_SPD_OVRR3_7r_R_TC_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_7r_R_TC_MODEf_SET
#define SC_X1_SPD_OVRR3_7r_R_TC_IN_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_7r_R_TC_IN_MODEf_GET
#define SC_X1_SPD_OVRR3_7r_R_TC_IN_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_7r_R_TC_IN_MODEf_SET
#define SC_X1_SPD_OVRR3_7r_R_CL91_CW_SCRAMBLEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_7r_R_CL91_CW_SCRAMBLEf_GET
#define SC_X1_SPD_OVRR3_7r_R_CL91_CW_SCRAMBLEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_7r_R_CL91_CW_SCRAMBLEf_SET
#define SC_X1_SPD_OVRR3_7r_R_MERGE_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_7r_R_MERGE_MODEf_GET
#define SC_X1_SPD_OVRR3_7r_R_MERGE_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_7r_R_MERGE_MODEf_SET
#define SC_X1_SPD_OVRR3_7r_CL91_BLKSYNC_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_7r_CL91_BLKSYNC_MODEf_GET
#define SC_X1_SPD_OVRR3_7r_CL91_BLKSYNC_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_7r_CL91_BLKSYNC_MODEf_SET
#define READ_SC_X1_SPD_OVRR3_7r BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR3_7r
#define WRITE_SC_X1_SPD_OVRR3_7r BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR3_7r
#define MODIFY_SC_X1_SPD_OVRR3_7r BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR3_7r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_7r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X1_SPD_OVRR3_8
 * BLOCKS:   SC_X1_SPEED_OVERRIDE3
 * REGADDR:  0x92aa
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CORRUPT_2ND_GROUP Corrupt 2nd group of codeward
 *     CORRUPT_6TH_GROUP Corrupt 6th group of codeward
 *     CL74_SHCORRUPT   Sync Header Corruption for CL74 FEC Error (uncorrectable).0: Only 5 SH, 1: All SH corrupted.
 *     BER_COUNT_SEL    0: select count based on cl49 else based on cl82
 *     BER_WINDOW_SEL   0: select window based on cl49 else based on cl82
 *     USE_100G_AM0     AM0 will be taken from 100G AM
 *     USE_100G_AM123   AM 1, 2, 3 will be taken from 100G AMs
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_8r (0x001092aa | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_8r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR3_8.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_8r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr3_8[1];
	uint32_t _sc_x1_spd_ovrr3_8;
} BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_8r_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_8r_CLR(r) (r).sc_x1_spd_ovrr3_8[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_8r_SET(r,d) (r).sc_x1_spd_ovrr3_8[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_8r_GET(r) (r).sc_x1_spd_ovrr3_8[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_8r_USE_100G_AM123f_GET(r) ((((r).sc_x1_spd_ovrr3_8[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_8r_USE_100G_AM123f_SET(r,f) (r).sc_x1_spd_ovrr3_8[0]=(((r).sc_x1_spd_ovrr3_8[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_8r_USE_100G_AM0f_GET(r) ((((r).sc_x1_spd_ovrr3_8[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_8r_USE_100G_AM0f_SET(r,f) (r).sc_x1_spd_ovrr3_8[0]=(((r).sc_x1_spd_ovrr3_8[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_8r_BER_WINDOW_SELf_GET(r) ((((r).sc_x1_spd_ovrr3_8[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_8r_BER_WINDOW_SELf_SET(r,f) (r).sc_x1_spd_ovrr3_8[0]=(((r).sc_x1_spd_ovrr3_8[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_8r_BER_COUNT_SELf_GET(r) ((((r).sc_x1_spd_ovrr3_8[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_8r_BER_COUNT_SELf_SET(r,f) (r).sc_x1_spd_ovrr3_8[0]=(((r).sc_x1_spd_ovrr3_8[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_8r_CL74_SHCORRUPTf_GET(r) ((((r).sc_x1_spd_ovrr3_8[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_8r_CL74_SHCORRUPTf_SET(r,f) (r).sc_x1_spd_ovrr3_8[0]=(((r).sc_x1_spd_ovrr3_8[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_8r_CORRUPT_6TH_GROUPf_GET(r) ((((r).sc_x1_spd_ovrr3_8[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_8r_CORRUPT_6TH_GROUPf_SET(r,f) (r).sc_x1_spd_ovrr3_8[0]=(((r).sc_x1_spd_ovrr3_8[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_8r_CORRUPT_2ND_GROUPf_GET(r) (((r).sc_x1_spd_ovrr3_8[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_8r_CORRUPT_2ND_GROUPf_SET(r,f) (r).sc_x1_spd_ovrr3_8[0]=(((r).sc_x1_spd_ovrr3_8[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR3_8.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR3_8r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_8r,(_r._sc_x1_spd_ovrr3_8))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR3_8r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_8r,(_r._sc_x1_spd_ovrr3_8)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR3_8r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_8r,(_r._sc_x1_spd_ovrr3_8))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR3_8r BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_8r
#define SC_X1_SPD_OVRR3_8r_SIZE BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_8r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_8r_t SC_X1_SPD_OVRR3_8r_t;
#define SC_X1_SPD_OVRR3_8r_CLR BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_8r_CLR
#define SC_X1_SPD_OVRR3_8r_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_8r_SET
#define SC_X1_SPD_OVRR3_8r_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_8r_GET
#define SC_X1_SPD_OVRR3_8r_USE_100G_AM123f_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_8r_USE_100G_AM123f_GET
#define SC_X1_SPD_OVRR3_8r_USE_100G_AM123f_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_8r_USE_100G_AM123f_SET
#define SC_X1_SPD_OVRR3_8r_USE_100G_AM0f_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_8r_USE_100G_AM0f_GET
#define SC_X1_SPD_OVRR3_8r_USE_100G_AM0f_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_8r_USE_100G_AM0f_SET
#define SC_X1_SPD_OVRR3_8r_BER_WINDOW_SELf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_8r_BER_WINDOW_SELf_GET
#define SC_X1_SPD_OVRR3_8r_BER_WINDOW_SELf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_8r_BER_WINDOW_SELf_SET
#define SC_X1_SPD_OVRR3_8r_BER_COUNT_SELf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_8r_BER_COUNT_SELf_GET
#define SC_X1_SPD_OVRR3_8r_BER_COUNT_SELf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_8r_BER_COUNT_SELf_SET
#define SC_X1_SPD_OVRR3_8r_CL74_SHCORRUPTf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_8r_CL74_SHCORRUPTf_GET
#define SC_X1_SPD_OVRR3_8r_CL74_SHCORRUPTf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_8r_CL74_SHCORRUPTf_SET
#define SC_X1_SPD_OVRR3_8r_CORRUPT_6TH_GROUPf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_8r_CORRUPT_6TH_GROUPf_GET
#define SC_X1_SPD_OVRR3_8r_CORRUPT_6TH_GROUPf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_8r_CORRUPT_6TH_GROUPf_SET
#define SC_X1_SPD_OVRR3_8r_CORRUPT_2ND_GROUPf_GET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_8r_CORRUPT_2ND_GROUPf_GET
#define SC_X1_SPD_OVRR3_8r_CORRUPT_2ND_GROUPf_SET BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_8r_CORRUPT_2ND_GROUPf_SET
#define READ_SC_X1_SPD_OVRR3_8r BCMI_TSCF_GEN3_XGXS_READ_SC_X1_SPD_OVRR3_8r
#define WRITE_SC_X1_SPD_OVRR3_8r BCMI_TSCF_GEN3_XGXS_WRITE_SC_X1_SPD_OVRR3_8r
#define MODIFY_SC_X1_SPD_OVRR3_8r BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X1_SPD_OVRR3_8r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X1_SPD_OVRR3_8r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X1_STS_CL91_FEC_RAM1_LO
 * BLOCKS:   RX_X1_STATUS0
 * REGADDR:  0x92b0
 * DESC:     ECC status register for CL91 FEC RAM1 containing lower 90 bits
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     ERR_EVENT_ADDRESS_CL91_FEC_RAM1_LO ECC error location, valid only if 1-bit or 2-bit error bit is set
 *     ONE_BIT_ERR_EVENT_CL91_FEC_RAM1_LO 1-bit ECC error detected
 *     TWO_BIT_ERR_EVENT_CL91_FEC_RAM1_LO 2-bit ECC error detected
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_LOr (0x001092b0 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_LOr_SIZE 4

/*
 * This structure should be used to declare and program RX_X1_STS_CL91_FEC_RAM1_LO.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_LOr_s {
	uint32_t v[1];
	uint32_t rx_x1_sts_cl91_fec_ram1_lo[1];
	uint32_t _rx_x1_sts_cl91_fec_ram1_lo;
} BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_LOr_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_LOr_CLR(r) (r).rx_x1_sts_cl91_fec_ram1_lo[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_LOr_SET(r,d) (r).rx_x1_sts_cl91_fec_ram1_lo[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_LOr_GET(r) (r).rx_x1_sts_cl91_fec_ram1_lo[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_LOr_TWO_BIT_ERR_EVENT_CL91_FEC_RAM1_LOf_GET(r) ((((r).rx_x1_sts_cl91_fec_ram1_lo[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_LOr_TWO_BIT_ERR_EVENT_CL91_FEC_RAM1_LOf_SET(r,f) (r).rx_x1_sts_cl91_fec_ram1_lo[0]=(((r).rx_x1_sts_cl91_fec_ram1_lo[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_LOr_ONE_BIT_ERR_EVENT_CL91_FEC_RAM1_LOf_GET(r) ((((r).rx_x1_sts_cl91_fec_ram1_lo[0]) >> 14) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_LOr_ONE_BIT_ERR_EVENT_CL91_FEC_RAM1_LOf_SET(r,f) (r).rx_x1_sts_cl91_fec_ram1_lo[0]=(((r).rx_x1_sts_cl91_fec_ram1_lo[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_LOr_ERR_EVENT_ADDRESS_CL91_FEC_RAM1_LOf_GET(r) (((r).rx_x1_sts_cl91_fec_ram1_lo[0]) & 0x3fff)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_LOr_ERR_EVENT_ADDRESS_CL91_FEC_RAM1_LOf_SET(r,f) (r).rx_x1_sts_cl91_fec_ram1_lo[0]=(((r).rx_x1_sts_cl91_fec_ram1_lo[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff)) | (0x3fff << 16)

/*
 * These macros can be used to access RX_X1_STS_CL91_FEC_RAM1_LO.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X1_STS_CL91_FEC_RAM1_LOr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_LOr,(_r._rx_x1_sts_cl91_fec_ram1_lo))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X1_STS_CL91_FEC_RAM1_LOr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_LOr,(_r._rx_x1_sts_cl91_fec_ram1_lo)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X1_STS_CL91_FEC_RAM1_LOr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_LOr,(_r._rx_x1_sts_cl91_fec_ram1_lo))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X1_STS_CL91_FEC_RAM1_LOr BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_LOr
#define RX_X1_STS_CL91_FEC_RAM1_LOr_SIZE BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_LOr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_LOr_t RX_X1_STS_CL91_FEC_RAM1_LOr_t;
#define RX_X1_STS_CL91_FEC_RAM1_LOr_CLR BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_LOr_CLR
#define RX_X1_STS_CL91_FEC_RAM1_LOr_SET BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_LOr_SET
#define RX_X1_STS_CL91_FEC_RAM1_LOr_GET BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_LOr_GET
#define RX_X1_STS_CL91_FEC_RAM1_LOr_TWO_BIT_ERR_EVENT_CL91_FEC_RAM1_LOf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_LOr_TWO_BIT_ERR_EVENT_CL91_FEC_RAM1_LOf_GET
#define RX_X1_STS_CL91_FEC_RAM1_LOr_TWO_BIT_ERR_EVENT_CL91_FEC_RAM1_LOf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_LOr_TWO_BIT_ERR_EVENT_CL91_FEC_RAM1_LOf_SET
#define RX_X1_STS_CL91_FEC_RAM1_LOr_ONE_BIT_ERR_EVENT_CL91_FEC_RAM1_LOf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_LOr_ONE_BIT_ERR_EVENT_CL91_FEC_RAM1_LOf_GET
#define RX_X1_STS_CL91_FEC_RAM1_LOr_ONE_BIT_ERR_EVENT_CL91_FEC_RAM1_LOf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_LOr_ONE_BIT_ERR_EVENT_CL91_FEC_RAM1_LOf_SET
#define RX_X1_STS_CL91_FEC_RAM1_LOr_ERR_EVENT_ADDRESS_CL91_FEC_RAM1_LOf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_LOr_ERR_EVENT_ADDRESS_CL91_FEC_RAM1_LOf_GET
#define RX_X1_STS_CL91_FEC_RAM1_LOr_ERR_EVENT_ADDRESS_CL91_FEC_RAM1_LOf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_LOr_ERR_EVENT_ADDRESS_CL91_FEC_RAM1_LOf_SET
#define READ_RX_X1_STS_CL91_FEC_RAM1_LOr BCMI_TSCF_GEN3_XGXS_READ_RX_X1_STS_CL91_FEC_RAM1_LOr
#define WRITE_RX_X1_STS_CL91_FEC_RAM1_LOr BCMI_TSCF_GEN3_XGXS_WRITE_RX_X1_STS_CL91_FEC_RAM1_LOr
#define MODIFY_RX_X1_STS_CL91_FEC_RAM1_LOr BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X1_STS_CL91_FEC_RAM1_LOr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_LOr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X1_STS_CL91_FEC_RAM1_HI
 * BLOCKS:   RX_X1_STATUS0
 * REGADDR:  0x92b1
 * DESC:     ECC status register for CL91 FEC RAM1 containing upper 90 bits
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     ERR_EVENT_ADDRESS_CL91_FEC_RAM1_HI ECC error location, valid only if 1-bit or 2-bit error bit is set
 *     ONE_BIT_ERR_EVENT_CL91_FEC_RAM1_HI 1-bit ECC error detected
 *     TWO_BIT_ERR_EVENT_CL91_FEC_RAM1_HI 2-bit ECC error detected
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_HIr (0x001092b1 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_HIr_SIZE 4

/*
 * This structure should be used to declare and program RX_X1_STS_CL91_FEC_RAM1_HI.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_HIr_s {
	uint32_t v[1];
	uint32_t rx_x1_sts_cl91_fec_ram1_hi[1];
	uint32_t _rx_x1_sts_cl91_fec_ram1_hi;
} BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_HIr_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_HIr_CLR(r) (r).rx_x1_sts_cl91_fec_ram1_hi[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_HIr_SET(r,d) (r).rx_x1_sts_cl91_fec_ram1_hi[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_HIr_GET(r) (r).rx_x1_sts_cl91_fec_ram1_hi[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_HIr_TWO_BIT_ERR_EVENT_CL91_FEC_RAM1_HIf_GET(r) ((((r).rx_x1_sts_cl91_fec_ram1_hi[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_HIr_TWO_BIT_ERR_EVENT_CL91_FEC_RAM1_HIf_SET(r,f) (r).rx_x1_sts_cl91_fec_ram1_hi[0]=(((r).rx_x1_sts_cl91_fec_ram1_hi[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_HIr_ONE_BIT_ERR_EVENT_CL91_FEC_RAM1_HIf_GET(r) ((((r).rx_x1_sts_cl91_fec_ram1_hi[0]) >> 14) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_HIr_ONE_BIT_ERR_EVENT_CL91_FEC_RAM1_HIf_SET(r,f) (r).rx_x1_sts_cl91_fec_ram1_hi[0]=(((r).rx_x1_sts_cl91_fec_ram1_hi[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_HIr_ERR_EVENT_ADDRESS_CL91_FEC_RAM1_HIf_GET(r) (((r).rx_x1_sts_cl91_fec_ram1_hi[0]) & 0x3fff)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_HIr_ERR_EVENT_ADDRESS_CL91_FEC_RAM1_HIf_SET(r,f) (r).rx_x1_sts_cl91_fec_ram1_hi[0]=(((r).rx_x1_sts_cl91_fec_ram1_hi[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff)) | (0x3fff << 16)

/*
 * These macros can be used to access RX_X1_STS_CL91_FEC_RAM1_HI.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X1_STS_CL91_FEC_RAM1_HIr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_HIr,(_r._rx_x1_sts_cl91_fec_ram1_hi))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X1_STS_CL91_FEC_RAM1_HIr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_HIr,(_r._rx_x1_sts_cl91_fec_ram1_hi)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X1_STS_CL91_FEC_RAM1_HIr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_HIr,(_r._rx_x1_sts_cl91_fec_ram1_hi))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X1_STS_CL91_FEC_RAM1_HIr BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_HIr
#define RX_X1_STS_CL91_FEC_RAM1_HIr_SIZE BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_HIr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_HIr_t RX_X1_STS_CL91_FEC_RAM1_HIr_t;
#define RX_X1_STS_CL91_FEC_RAM1_HIr_CLR BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_HIr_CLR
#define RX_X1_STS_CL91_FEC_RAM1_HIr_SET BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_HIr_SET
#define RX_X1_STS_CL91_FEC_RAM1_HIr_GET BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_HIr_GET
#define RX_X1_STS_CL91_FEC_RAM1_HIr_TWO_BIT_ERR_EVENT_CL91_FEC_RAM1_HIf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_HIr_TWO_BIT_ERR_EVENT_CL91_FEC_RAM1_HIf_GET
#define RX_X1_STS_CL91_FEC_RAM1_HIr_TWO_BIT_ERR_EVENT_CL91_FEC_RAM1_HIf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_HIr_TWO_BIT_ERR_EVENT_CL91_FEC_RAM1_HIf_SET
#define RX_X1_STS_CL91_FEC_RAM1_HIr_ONE_BIT_ERR_EVENT_CL91_FEC_RAM1_HIf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_HIr_ONE_BIT_ERR_EVENT_CL91_FEC_RAM1_HIf_GET
#define RX_X1_STS_CL91_FEC_RAM1_HIr_ONE_BIT_ERR_EVENT_CL91_FEC_RAM1_HIf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_HIr_ONE_BIT_ERR_EVENT_CL91_FEC_RAM1_HIf_SET
#define RX_X1_STS_CL91_FEC_RAM1_HIr_ERR_EVENT_ADDRESS_CL91_FEC_RAM1_HIf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_HIr_ERR_EVENT_ADDRESS_CL91_FEC_RAM1_HIf_GET
#define RX_X1_STS_CL91_FEC_RAM1_HIr_ERR_EVENT_ADDRESS_CL91_FEC_RAM1_HIf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_HIr_ERR_EVENT_ADDRESS_CL91_FEC_RAM1_HIf_SET
#define READ_RX_X1_STS_CL91_FEC_RAM1_HIr BCMI_TSCF_GEN3_XGXS_READ_RX_X1_STS_CL91_FEC_RAM1_HIr
#define WRITE_RX_X1_STS_CL91_FEC_RAM1_HIr BCMI_TSCF_GEN3_XGXS_WRITE_RX_X1_STS_CL91_FEC_RAM1_HIr
#define MODIFY_RX_X1_STS_CL91_FEC_RAM1_HIr BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X1_STS_CL91_FEC_RAM1_HIr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM1_HIr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X1_STS_CL91_FEC_RAM2_LO
 * BLOCKS:   RX_X1_STATUS0
 * REGADDR:  0x92b2
 * DESC:     ECC status register for CL91 FEC RAM2 containing lower 90 bits
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     ERR_EVENT_ADDRESS_CL91_FEC_RAM2_LO ECC error location, valid only if 1-bit or 2-bit error bit is set
 *     ONE_BIT_ERR_EVENT_CL91_FEC_RAM2_LO 1-bit ECC error detected
 *     TWO_BIT_ERR_EVENT_CL91_FEC_RAM2_LO 2-bit ECC error detected
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_LOr (0x001092b2 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_LOr_SIZE 4

/*
 * This structure should be used to declare and program RX_X1_STS_CL91_FEC_RAM2_LO.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_LOr_s {
	uint32_t v[1];
	uint32_t rx_x1_sts_cl91_fec_ram2_lo[1];
	uint32_t _rx_x1_sts_cl91_fec_ram2_lo;
} BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_LOr_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_LOr_CLR(r) (r).rx_x1_sts_cl91_fec_ram2_lo[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_LOr_SET(r,d) (r).rx_x1_sts_cl91_fec_ram2_lo[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_LOr_GET(r) (r).rx_x1_sts_cl91_fec_ram2_lo[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_LOr_TWO_BIT_ERR_EVENT_CL91_FEC_RAM2_LOf_GET(r) ((((r).rx_x1_sts_cl91_fec_ram2_lo[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_LOr_TWO_BIT_ERR_EVENT_CL91_FEC_RAM2_LOf_SET(r,f) (r).rx_x1_sts_cl91_fec_ram2_lo[0]=(((r).rx_x1_sts_cl91_fec_ram2_lo[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_LOr_ONE_BIT_ERR_EVENT_CL91_FEC_RAM2_LOf_GET(r) ((((r).rx_x1_sts_cl91_fec_ram2_lo[0]) >> 14) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_LOr_ONE_BIT_ERR_EVENT_CL91_FEC_RAM2_LOf_SET(r,f) (r).rx_x1_sts_cl91_fec_ram2_lo[0]=(((r).rx_x1_sts_cl91_fec_ram2_lo[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_LOr_ERR_EVENT_ADDRESS_CL91_FEC_RAM2_LOf_GET(r) (((r).rx_x1_sts_cl91_fec_ram2_lo[0]) & 0x3fff)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_LOr_ERR_EVENT_ADDRESS_CL91_FEC_RAM2_LOf_SET(r,f) (r).rx_x1_sts_cl91_fec_ram2_lo[0]=(((r).rx_x1_sts_cl91_fec_ram2_lo[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff)) | (0x3fff << 16)

/*
 * These macros can be used to access RX_X1_STS_CL91_FEC_RAM2_LO.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X1_STS_CL91_FEC_RAM2_LOr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_LOr,(_r._rx_x1_sts_cl91_fec_ram2_lo))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X1_STS_CL91_FEC_RAM2_LOr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_LOr,(_r._rx_x1_sts_cl91_fec_ram2_lo)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X1_STS_CL91_FEC_RAM2_LOr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_LOr,(_r._rx_x1_sts_cl91_fec_ram2_lo))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X1_STS_CL91_FEC_RAM2_LOr BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_LOr
#define RX_X1_STS_CL91_FEC_RAM2_LOr_SIZE BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_LOr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_LOr_t RX_X1_STS_CL91_FEC_RAM2_LOr_t;
#define RX_X1_STS_CL91_FEC_RAM2_LOr_CLR BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_LOr_CLR
#define RX_X1_STS_CL91_FEC_RAM2_LOr_SET BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_LOr_SET
#define RX_X1_STS_CL91_FEC_RAM2_LOr_GET BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_LOr_GET
#define RX_X1_STS_CL91_FEC_RAM2_LOr_TWO_BIT_ERR_EVENT_CL91_FEC_RAM2_LOf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_LOr_TWO_BIT_ERR_EVENT_CL91_FEC_RAM2_LOf_GET
#define RX_X1_STS_CL91_FEC_RAM2_LOr_TWO_BIT_ERR_EVENT_CL91_FEC_RAM2_LOf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_LOr_TWO_BIT_ERR_EVENT_CL91_FEC_RAM2_LOf_SET
#define RX_X1_STS_CL91_FEC_RAM2_LOr_ONE_BIT_ERR_EVENT_CL91_FEC_RAM2_LOf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_LOr_ONE_BIT_ERR_EVENT_CL91_FEC_RAM2_LOf_GET
#define RX_X1_STS_CL91_FEC_RAM2_LOr_ONE_BIT_ERR_EVENT_CL91_FEC_RAM2_LOf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_LOr_ONE_BIT_ERR_EVENT_CL91_FEC_RAM2_LOf_SET
#define RX_X1_STS_CL91_FEC_RAM2_LOr_ERR_EVENT_ADDRESS_CL91_FEC_RAM2_LOf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_LOr_ERR_EVENT_ADDRESS_CL91_FEC_RAM2_LOf_GET
#define RX_X1_STS_CL91_FEC_RAM2_LOr_ERR_EVENT_ADDRESS_CL91_FEC_RAM2_LOf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_LOr_ERR_EVENT_ADDRESS_CL91_FEC_RAM2_LOf_SET
#define READ_RX_X1_STS_CL91_FEC_RAM2_LOr BCMI_TSCF_GEN3_XGXS_READ_RX_X1_STS_CL91_FEC_RAM2_LOr
#define WRITE_RX_X1_STS_CL91_FEC_RAM2_LOr BCMI_TSCF_GEN3_XGXS_WRITE_RX_X1_STS_CL91_FEC_RAM2_LOr
#define MODIFY_RX_X1_STS_CL91_FEC_RAM2_LOr BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X1_STS_CL91_FEC_RAM2_LOr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_LOr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X1_STS_CL91_FEC_RAM2_HI
 * BLOCKS:   RX_X1_STATUS0
 * REGADDR:  0x92b3
 * DESC:     ECC status register for CL91 FEC RAM2 containing upper 90 bits
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     ERR_EVENT_ADDRESS_CL91_FEC_RAM2_HI ECC error location, valid only if 1-bit or 2-bit error bit is set
 *     ONE_BIT_ERR_EVENT_CL91_FEC_RAM2_HI 1-bit ECC error detected
 *     TWO_BIT_ERR_EVENT_CL91_FEC_RAM2_HI 2-bit ECC error detected
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_HIr (0x001092b3 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_HIr_SIZE 4

/*
 * This structure should be used to declare and program RX_X1_STS_CL91_FEC_RAM2_HI.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_HIr_s {
	uint32_t v[1];
	uint32_t rx_x1_sts_cl91_fec_ram2_hi[1];
	uint32_t _rx_x1_sts_cl91_fec_ram2_hi;
} BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_HIr_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_HIr_CLR(r) (r).rx_x1_sts_cl91_fec_ram2_hi[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_HIr_SET(r,d) (r).rx_x1_sts_cl91_fec_ram2_hi[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_HIr_GET(r) (r).rx_x1_sts_cl91_fec_ram2_hi[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_HIr_TWO_BIT_ERR_EVENT_CL91_FEC_RAM2_HIf_GET(r) ((((r).rx_x1_sts_cl91_fec_ram2_hi[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_HIr_TWO_BIT_ERR_EVENT_CL91_FEC_RAM2_HIf_SET(r,f) (r).rx_x1_sts_cl91_fec_ram2_hi[0]=(((r).rx_x1_sts_cl91_fec_ram2_hi[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_HIr_ONE_BIT_ERR_EVENT_CL91_FEC_RAM2_HIf_GET(r) ((((r).rx_x1_sts_cl91_fec_ram2_hi[0]) >> 14) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_HIr_ONE_BIT_ERR_EVENT_CL91_FEC_RAM2_HIf_SET(r,f) (r).rx_x1_sts_cl91_fec_ram2_hi[0]=(((r).rx_x1_sts_cl91_fec_ram2_hi[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_HIr_ERR_EVENT_ADDRESS_CL91_FEC_RAM2_HIf_GET(r) (((r).rx_x1_sts_cl91_fec_ram2_hi[0]) & 0x3fff)
#define BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_HIr_ERR_EVENT_ADDRESS_CL91_FEC_RAM2_HIf_SET(r,f) (r).rx_x1_sts_cl91_fec_ram2_hi[0]=(((r).rx_x1_sts_cl91_fec_ram2_hi[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff)) | (0x3fff << 16)

/*
 * These macros can be used to access RX_X1_STS_CL91_FEC_RAM2_HI.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X1_STS_CL91_FEC_RAM2_HIr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_HIr,(_r._rx_x1_sts_cl91_fec_ram2_hi))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X1_STS_CL91_FEC_RAM2_HIr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_HIr,(_r._rx_x1_sts_cl91_fec_ram2_hi)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X1_STS_CL91_FEC_RAM2_HIr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_HIr,(_r._rx_x1_sts_cl91_fec_ram2_hi))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X1_STS_CL91_FEC_RAM2_HIr BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_HIr
#define RX_X1_STS_CL91_FEC_RAM2_HIr_SIZE BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_HIr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_HIr_t RX_X1_STS_CL91_FEC_RAM2_HIr_t;
#define RX_X1_STS_CL91_FEC_RAM2_HIr_CLR BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_HIr_CLR
#define RX_X1_STS_CL91_FEC_RAM2_HIr_SET BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_HIr_SET
#define RX_X1_STS_CL91_FEC_RAM2_HIr_GET BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_HIr_GET
#define RX_X1_STS_CL91_FEC_RAM2_HIr_TWO_BIT_ERR_EVENT_CL91_FEC_RAM2_HIf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_HIr_TWO_BIT_ERR_EVENT_CL91_FEC_RAM2_HIf_GET
#define RX_X1_STS_CL91_FEC_RAM2_HIr_TWO_BIT_ERR_EVENT_CL91_FEC_RAM2_HIf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_HIr_TWO_BIT_ERR_EVENT_CL91_FEC_RAM2_HIf_SET
#define RX_X1_STS_CL91_FEC_RAM2_HIr_ONE_BIT_ERR_EVENT_CL91_FEC_RAM2_HIf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_HIr_ONE_BIT_ERR_EVENT_CL91_FEC_RAM2_HIf_GET
#define RX_X1_STS_CL91_FEC_RAM2_HIr_ONE_BIT_ERR_EVENT_CL91_FEC_RAM2_HIf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_HIr_ONE_BIT_ERR_EVENT_CL91_FEC_RAM2_HIf_SET
#define RX_X1_STS_CL91_FEC_RAM2_HIr_ERR_EVENT_ADDRESS_CL91_FEC_RAM2_HIf_GET BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_HIr_ERR_EVENT_ADDRESS_CL91_FEC_RAM2_HIf_GET
#define RX_X1_STS_CL91_FEC_RAM2_HIr_ERR_EVENT_ADDRESS_CL91_FEC_RAM2_HIf_SET BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_HIr_ERR_EVENT_ADDRESS_CL91_FEC_RAM2_HIf_SET
#define READ_RX_X1_STS_CL91_FEC_RAM2_HIr BCMI_TSCF_GEN3_XGXS_READ_RX_X1_STS_CL91_FEC_RAM2_HIr
#define WRITE_RX_X1_STS_CL91_FEC_RAM2_HIr BCMI_TSCF_GEN3_XGXS_WRITE_RX_X1_STS_CL91_FEC_RAM2_HIr
#define MODIFY_RX_X1_STS_CL91_FEC_RAM2_HIr BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X1_STS_CL91_FEC_RAM2_HIr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X1_STS_CL91_FEC_RAM2_HIr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X1_GLB_INT
 * BLOCKS:   AN_X1_SW_MGMT
 * REGADDR:  0x92c0
 * DESC:     SW AN Global Interrupt
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     INT_PORT0        Interrupt indication from port 0 - OR of the all 3 events from port 0 S/W AN
 *     INT_PORT1        Interrupt indication from port 1 - OR of the all 3 events from port 1 S/W AN
 *     INT_PORT2        Interrupt indication from port 2 - OR of the all 3 events from port 2 S/W AN
 *     INT_PORT3        Interrupt indication from port 3 - OR of the all 3 events from port 3 S/W AN
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_INTr (0x001092c0 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_INTr_SIZE 4

/*
 * This structure should be used to declare and program AN_X1_GLB_INT.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_INTr_s {
	uint32_t v[1];
	uint32_t an_x1_glb_int[1];
	uint32_t _an_x1_glb_int;
} BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_INTr_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_INTr_CLR(r) (r).an_x1_glb_int[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_INTr_SET(r,d) (r).an_x1_glb_int[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_INTr_GET(r) (r).an_x1_glb_int[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_INTr_INT_PORT3f_GET(r) ((((r).an_x1_glb_int[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_INTr_INT_PORT3f_SET(r,f) (r).an_x1_glb_int[0]=(((r).an_x1_glb_int[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_INTr_INT_PORT2f_GET(r) ((((r).an_x1_glb_int[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_INTr_INT_PORT2f_SET(r,f) (r).an_x1_glb_int[0]=(((r).an_x1_glb_int[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_INTr_INT_PORT1f_GET(r) ((((r).an_x1_glb_int[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_INTr_INT_PORT1f_SET(r,f) (r).an_x1_glb_int[0]=(((r).an_x1_glb_int[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_INTr_INT_PORT0f_GET(r) (((r).an_x1_glb_int[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_INTr_INT_PORT0f_SET(r,f) (r).an_x1_glb_int[0]=(((r).an_x1_glb_int[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AN_X1_GLB_INT.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X1_GLB_INTr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_INTr,(_r._an_x1_glb_int))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X1_GLB_INTr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_INTr,(_r._an_x1_glb_int)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X1_GLB_INTr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_INTr,(_r._an_x1_glb_int))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X1_GLB_INTr BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_INTr
#define AN_X1_GLB_INTr_SIZE BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_INTr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_INTr_t AN_X1_GLB_INTr_t;
#define AN_X1_GLB_INTr_CLR BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_INTr_CLR
#define AN_X1_GLB_INTr_SET BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_INTr_SET
#define AN_X1_GLB_INTr_GET BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_INTr_GET
#define AN_X1_GLB_INTr_INT_PORT3f_GET BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_INTr_INT_PORT3f_GET
#define AN_X1_GLB_INTr_INT_PORT3f_SET BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_INTr_INT_PORT3f_SET
#define AN_X1_GLB_INTr_INT_PORT2f_GET BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_INTr_INT_PORT2f_GET
#define AN_X1_GLB_INTr_INT_PORT2f_SET BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_INTr_INT_PORT2f_SET
#define AN_X1_GLB_INTr_INT_PORT1f_GET BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_INTr_INT_PORT1f_GET
#define AN_X1_GLB_INTr_INT_PORT1f_SET BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_INTr_INT_PORT1f_SET
#define AN_X1_GLB_INTr_INT_PORT0f_GET BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_INTr_INT_PORT0f_GET
#define AN_X1_GLB_INTr_INT_PORT0f_SET BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_INTr_INT_PORT0f_SET
#define READ_AN_X1_GLB_INTr BCMI_TSCF_GEN3_XGXS_READ_AN_X1_GLB_INTr
#define WRITE_AN_X1_GLB_INTr BCMI_TSCF_GEN3_XGXS_WRITE_AN_X1_GLB_INTr
#define MODIFY_AN_X1_GLB_INTr BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X1_GLB_INTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_INTr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X1_GLB_MASK
 * BLOCKS:   AN_X1_SW_MGMT
 * REGADDR:  0x92c1
 * DESC:     SW AN Per Port Global Interrupt Enable Mask
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     INT_PORT0_MASK   Write 1 to enable interrupt indication from port 0
 *     INT_PORT1_MASK   Write 1 to enable interrupt indication from port 1
 *     INT_PORT2_MASK   Write 1 to enable interrupt indication from port 2
 *     INT_PORT3_MASK   Write 1 to enable interrupt indication from port 3
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_MASKr (0x001092c1 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_MASKr_SIZE 4

/*
 * This structure should be used to declare and program AN_X1_GLB_MASK.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_MASKr_s {
	uint32_t v[1];
	uint32_t an_x1_glb_mask[1];
	uint32_t _an_x1_glb_mask;
} BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_MASKr_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_MASKr_CLR(r) (r).an_x1_glb_mask[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_MASKr_SET(r,d) (r).an_x1_glb_mask[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_MASKr_GET(r) (r).an_x1_glb_mask[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_MASKr_INT_PORT3_MASKf_GET(r) ((((r).an_x1_glb_mask[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_MASKr_INT_PORT3_MASKf_SET(r,f) (r).an_x1_glb_mask[0]=(((r).an_x1_glb_mask[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_MASKr_INT_PORT2_MASKf_GET(r) ((((r).an_x1_glb_mask[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_MASKr_INT_PORT2_MASKf_SET(r,f) (r).an_x1_glb_mask[0]=(((r).an_x1_glb_mask[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_MASKr_INT_PORT1_MASKf_GET(r) ((((r).an_x1_glb_mask[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_MASKr_INT_PORT1_MASKf_SET(r,f) (r).an_x1_glb_mask[0]=(((r).an_x1_glb_mask[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_MASKr_INT_PORT0_MASKf_GET(r) (((r).an_x1_glb_mask[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_MASKr_INT_PORT0_MASKf_SET(r,f) (r).an_x1_glb_mask[0]=(((r).an_x1_glb_mask[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AN_X1_GLB_MASK.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X1_GLB_MASKr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_MASKr,(_r._an_x1_glb_mask))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X1_GLB_MASKr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_MASKr,(_r._an_x1_glb_mask)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X1_GLB_MASKr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_MASKr,(_r._an_x1_glb_mask))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X1_GLB_MASKr BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_MASKr
#define AN_X1_GLB_MASKr_SIZE BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_MASKr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_MASKr_t AN_X1_GLB_MASKr_t;
#define AN_X1_GLB_MASKr_CLR BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_MASKr_CLR
#define AN_X1_GLB_MASKr_SET BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_MASKr_SET
#define AN_X1_GLB_MASKr_GET BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_MASKr_GET
#define AN_X1_GLB_MASKr_INT_PORT3_MASKf_GET BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_MASKr_INT_PORT3_MASKf_GET
#define AN_X1_GLB_MASKr_INT_PORT3_MASKf_SET BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_MASKr_INT_PORT3_MASKf_SET
#define AN_X1_GLB_MASKr_INT_PORT2_MASKf_GET BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_MASKr_INT_PORT2_MASKf_GET
#define AN_X1_GLB_MASKr_INT_PORT2_MASKf_SET BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_MASKr_INT_PORT2_MASKf_SET
#define AN_X1_GLB_MASKr_INT_PORT1_MASKf_GET BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_MASKr_INT_PORT1_MASKf_GET
#define AN_X1_GLB_MASKr_INT_PORT1_MASKf_SET BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_MASKr_INT_PORT1_MASKf_SET
#define AN_X1_GLB_MASKr_INT_PORT0_MASKf_GET BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_MASKr_INT_PORT0_MASKf_GET
#define AN_X1_GLB_MASKr_INT_PORT0_MASKf_SET BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_MASKr_INT_PORT0_MASKf_SET
#define READ_AN_X1_GLB_MASKr BCMI_TSCF_GEN3_XGXS_READ_AN_X1_GLB_MASKr
#define WRITE_AN_X1_GLB_MASKr BCMI_TSCF_GEN3_XGXS_WRITE_AN_X1_GLB_MASKr
#define MODIFY_AN_X1_GLB_MASKr BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X1_GLB_MASKr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X1_GLB_MASKr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TX_X2_CL82_0
 * BLOCKS:   TX_X2_CONTROL0
 * REGADDR:  0xa002
 * DESC:     CL82 register
 * RESETVAL: 0x70 (112)
 * ACCESS:   R/W
 * FIELDS:
 *     CL82_TX_RF_ENABLE If this bit is a one, RFs are passed from the RS LAYER to the PCS.If this bit is a zero, RFs are replaced by IDLEs which are then passedto the PCS.For CL82 only.
 *     CL82_TX_LF_ENABLE If this bit is a one, LFs are passed from the RS LAYER to the PCS.If this bit is a zero, LFs are replaced by IDLEs which are then passedto the PCS.For CL82 only.
 *     CL82_TX_LI_ENABLE If this bit is a one, LIs (Link Interrupt) are passed thru to the RS LAYER.If this bit is a zero, LIs (Link Interrupt) are replaced by IDLEs which are then passedto the RS LAYER.For CL82 only.
 *     CL82_BYPASS_TXSM Bypass cl82 transmit state machine1 = Bypass cl82 txsm :- force TX_INIT state- pass the data from the table look-up decoder to the output0 = normal mode
 */
#define BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_0r (0x0020a002 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_0r_SIZE 4

/*
 * This structure should be used to declare and program TX_X2_CL82_0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_0r_s {
	uint32_t v[1];
	uint32_t tx_x2_cl82_0[1];
	uint32_t _tx_x2_cl82_0;
} BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_0r_t;

#define BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_0r_CLR(r) (r).tx_x2_cl82_0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_0r_SET(r,d) (r).tx_x2_cl82_0[0] = d
#define BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_0r_GET(r) (r).tx_x2_cl82_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_0r_CL82_BYPASS_TXSMf_GET(r) ((((r).tx_x2_cl82_0[0]) >> 10) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_0r_CL82_BYPASS_TXSMf_SET(r,f) (r).tx_x2_cl82_0[0]=(((r).tx_x2_cl82_0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_0r_CL82_TX_LI_ENABLEf_GET(r) ((((r).tx_x2_cl82_0[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_0r_CL82_TX_LI_ENABLEf_SET(r,f) (r).tx_x2_cl82_0[0]=(((r).tx_x2_cl82_0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_0r_CL82_TX_LF_ENABLEf_GET(r) ((((r).tx_x2_cl82_0[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_0r_CL82_TX_LF_ENABLEf_SET(r,f) (r).tx_x2_cl82_0[0]=(((r).tx_x2_cl82_0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_0r_CL82_TX_RF_ENABLEf_GET(r) ((((r).tx_x2_cl82_0[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_0r_CL82_TX_RF_ENABLEf_SET(r,f) (r).tx_x2_cl82_0[0]=(((r).tx_x2_cl82_0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))

/*
 * These macros can be used to access TX_X2_CL82_0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TX_X2_CL82_0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_0r,(_r._tx_x2_cl82_0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TX_X2_CL82_0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_0r,(_r._tx_x2_cl82_0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TX_X2_CL82_0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_0r,(_r._tx_x2_cl82_0))
#define BCMI_TSCF_GEN3_XGXS_READLN_TX_X2_CL82_0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x2_cl82_0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TX_X2_CL82_0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x2_cl82_0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_X2_CL82_0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_x2_cl82_0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_X2_CL82_0r BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_0r
#define TX_X2_CL82_0r_SIZE BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_0r_t TX_X2_CL82_0r_t;
#define TX_X2_CL82_0r_CLR BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_0r_CLR
#define TX_X2_CL82_0r_SET BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_0r_SET
#define TX_X2_CL82_0r_GET BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_0r_GET
#define TX_X2_CL82_0r_CL82_BYPASS_TXSMf_GET BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_0r_CL82_BYPASS_TXSMf_GET
#define TX_X2_CL82_0r_CL82_BYPASS_TXSMf_SET BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_0r_CL82_BYPASS_TXSMf_SET
#define TX_X2_CL82_0r_CL82_TX_LI_ENABLEf_GET BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_0r_CL82_TX_LI_ENABLEf_GET
#define TX_X2_CL82_0r_CL82_TX_LI_ENABLEf_SET BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_0r_CL82_TX_LI_ENABLEf_SET
#define TX_X2_CL82_0r_CL82_TX_LF_ENABLEf_GET BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_0r_CL82_TX_LF_ENABLEf_GET
#define TX_X2_CL82_0r_CL82_TX_LF_ENABLEf_SET BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_0r_CL82_TX_LF_ENABLEf_SET
#define TX_X2_CL82_0r_CL82_TX_RF_ENABLEf_GET BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_0r_CL82_TX_RF_ENABLEf_GET
#define TX_X2_CL82_0r_CL82_TX_RF_ENABLEf_SET BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_0r_CL82_TX_RF_ENABLEf_SET
#define READ_TX_X2_CL82_0r BCMI_TSCF_GEN3_XGXS_READ_TX_X2_CL82_0r
#define WRITE_TX_X2_CL82_0r BCMI_TSCF_GEN3_XGXS_WRITE_TX_X2_CL82_0r
#define MODIFY_TX_X2_CL82_0r BCMI_TSCF_GEN3_XGXS_MODIFY_TX_X2_CL82_0r
#define READLN_TX_X2_CL82_0r BCMI_TSCF_GEN3_XGXS_READLN_TX_X2_CL82_0r
#define WRITELN_TX_X2_CL82_0r BCMI_TSCF_GEN3_XGXS_WRITELN_TX_X2_CL82_0r
#define WRITEALL_TX_X2_CL82_0r BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_X2_CL82_0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TX_X2_CL82_TX_STS0
 * BLOCKS:   TX_X2_STATUS0
 * REGADDR:  0xa011
 * DESC:     CL82 Status 0 register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TXSM_STATE       CL82 Transmit SM - current state
 *     T_TYPE_CODED     CL82 Transmit SM - current t_type
 */
#define BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_TX_STS0r (0x0020a011 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_TX_STS0r_SIZE 4

/*
 * This structure should be used to declare and program TX_X2_CL82_TX_STS0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_TX_STS0r_s {
	uint32_t v[1];
	uint32_t tx_x2_cl82_tx_sts0[1];
	uint32_t _tx_x2_cl82_tx_sts0;
} BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_TX_STS0r_t;

#define BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_TX_STS0r_CLR(r) (r).tx_x2_cl82_tx_sts0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_TX_STS0r_SET(r,d) (r).tx_x2_cl82_tx_sts0[0] = d
#define BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_TX_STS0r_GET(r) (r).tx_x2_cl82_tx_sts0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_TX_STS0r_T_TYPE_CODEDf_GET(r) ((((r).tx_x2_cl82_tx_sts0[0]) >> 3) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_TX_STS0r_T_TYPE_CODEDf_SET(r,f) (r).tx_x2_cl82_tx_sts0[0]=(((r).tx_x2_cl82_tx_sts0[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3)) | (7 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_TX_STS0r_TXSM_STATEf_GET(r) (((r).tx_x2_cl82_tx_sts0[0]) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_TX_STS0r_TXSM_STATEf_SET(r,f) (r).tx_x2_cl82_tx_sts0[0]=(((r).tx_x2_cl82_tx_sts0[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access TX_X2_CL82_TX_STS0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TX_X2_CL82_TX_STS0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_TX_STS0r,(_r._tx_x2_cl82_tx_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TX_X2_CL82_TX_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_TX_STS0r,(_r._tx_x2_cl82_tx_sts0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TX_X2_CL82_TX_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_TX_STS0r,(_r._tx_x2_cl82_tx_sts0))
#define BCMI_TSCF_GEN3_XGXS_READLN_TX_X2_CL82_TX_STS0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_TX_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x2_cl82_tx_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TX_X2_CL82_TX_STS0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_TX_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x2_cl82_tx_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_X2_CL82_TX_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_TX_STS0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_x2_cl82_tx_sts0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_X2_CL82_TX_STS0r BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_TX_STS0r
#define TX_X2_CL82_TX_STS0r_SIZE BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_TX_STS0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_TX_STS0r_t TX_X2_CL82_TX_STS0r_t;
#define TX_X2_CL82_TX_STS0r_CLR BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_TX_STS0r_CLR
#define TX_X2_CL82_TX_STS0r_SET BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_TX_STS0r_SET
#define TX_X2_CL82_TX_STS0r_GET BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_TX_STS0r_GET
#define TX_X2_CL82_TX_STS0r_T_TYPE_CODEDf_GET BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_TX_STS0r_T_TYPE_CODEDf_GET
#define TX_X2_CL82_TX_STS0r_T_TYPE_CODEDf_SET BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_TX_STS0r_T_TYPE_CODEDf_SET
#define TX_X2_CL82_TX_STS0r_TXSM_STATEf_GET BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_TX_STS0r_TXSM_STATEf_GET
#define TX_X2_CL82_TX_STS0r_TXSM_STATEf_SET BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_TX_STS0r_TXSM_STATEf_SET
#define READ_TX_X2_CL82_TX_STS0r BCMI_TSCF_GEN3_XGXS_READ_TX_X2_CL82_TX_STS0r
#define WRITE_TX_X2_CL82_TX_STS0r BCMI_TSCF_GEN3_XGXS_WRITE_TX_X2_CL82_TX_STS0r
#define MODIFY_TX_X2_CL82_TX_STS0r BCMI_TSCF_GEN3_XGXS_MODIFY_TX_X2_CL82_TX_STS0r
#define READLN_TX_X2_CL82_TX_STS0r BCMI_TSCF_GEN3_XGXS_READLN_TX_X2_CL82_TX_STS0r
#define WRITELN_TX_X2_CL82_TX_STS0r BCMI_TSCF_GEN3_XGXS_WRITELN_TX_X2_CL82_TX_STS0r
#define WRITEALL_TX_X2_CL82_TX_STS0r BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_X2_CL82_TX_STS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_TX_STS0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TX_X2_CL82_TX_STS1
 * BLOCKS:   TX_X2_STATUS0
 * REGADDR:  0xa012
 * DESC:     CL82 Status 1 register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LTXSM_STATE      CL82 Transmit SM - latched states - latched on entry
 */
#define BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_TX_STS1r (0x0020a012 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_TX_STS1r_SIZE 4

/*
 * This structure should be used to declare and program TX_X2_CL82_TX_STS1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_TX_STS1r_s {
	uint32_t v[1];
	uint32_t tx_x2_cl82_tx_sts1[1];
	uint32_t _tx_x2_cl82_tx_sts1;
} BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_TX_STS1r_t;

#define BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_TX_STS1r_CLR(r) (r).tx_x2_cl82_tx_sts1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_TX_STS1r_SET(r,d) (r).tx_x2_cl82_tx_sts1[0] = d
#define BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_TX_STS1r_GET(r) (r).tx_x2_cl82_tx_sts1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_TX_STS1r_LTXSM_STATEf_GET(r) (((r).tx_x2_cl82_tx_sts1[0]) & 0x7f)
#define BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_TX_STS1r_LTXSM_STATEf_SET(r,f) (r).tx_x2_cl82_tx_sts1[0]=(((r).tx_x2_cl82_tx_sts1[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f)) | (0x7f << 16)

/*
 * These macros can be used to access TX_X2_CL82_TX_STS1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TX_X2_CL82_TX_STS1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_TX_STS1r,(_r._tx_x2_cl82_tx_sts1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TX_X2_CL82_TX_STS1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_TX_STS1r,(_r._tx_x2_cl82_tx_sts1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TX_X2_CL82_TX_STS1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_TX_STS1r,(_r._tx_x2_cl82_tx_sts1))
#define BCMI_TSCF_GEN3_XGXS_READLN_TX_X2_CL82_TX_STS1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_TX_STS1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x2_cl82_tx_sts1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TX_X2_CL82_TX_STS1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_TX_STS1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x2_cl82_tx_sts1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_X2_CL82_TX_STS1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_TX_STS1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_x2_cl82_tx_sts1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_X2_CL82_TX_STS1r BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_TX_STS1r
#define TX_X2_CL82_TX_STS1r_SIZE BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_TX_STS1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_TX_STS1r_t TX_X2_CL82_TX_STS1r_t;
#define TX_X2_CL82_TX_STS1r_CLR BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_TX_STS1r_CLR
#define TX_X2_CL82_TX_STS1r_SET BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_TX_STS1r_SET
#define TX_X2_CL82_TX_STS1r_GET BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_TX_STS1r_GET
#define TX_X2_CL82_TX_STS1r_LTXSM_STATEf_GET BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_TX_STS1r_LTXSM_STATEf_GET
#define TX_X2_CL82_TX_STS1r_LTXSM_STATEf_SET BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_TX_STS1r_LTXSM_STATEf_SET
#define READ_TX_X2_CL82_TX_STS1r BCMI_TSCF_GEN3_XGXS_READ_TX_X2_CL82_TX_STS1r
#define WRITE_TX_X2_CL82_TX_STS1r BCMI_TSCF_GEN3_XGXS_WRITE_TX_X2_CL82_TX_STS1r
#define MODIFY_TX_X2_CL82_TX_STS1r BCMI_TSCF_GEN3_XGXS_MODIFY_TX_X2_CL82_TX_STS1r
#define READLN_TX_X2_CL82_TX_STS1r BCMI_TSCF_GEN3_XGXS_READLN_TX_X2_CL82_TX_STS1r
#define WRITELN_TX_X2_CL82_TX_STS1r BCMI_TSCF_GEN3_XGXS_WRITELN_TX_X2_CL82_TX_STS1r
#define WRITEALL_TX_X2_CL82_TX_STS1r BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_X2_CL82_TX_STS1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TX_X2_CL82_TX_STS1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X2_MISC0
 * BLOCKS:   RX_X2_CONTROL0
 * REGADDR:  0xa023
 * DESC:     misc 0 register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BYPASS_CL82RXSM  Bypass cl82 receive state machine1 = Bypass cl82 rxsm :- force RX_INIT state- pass the data from the table look-up decoder to the output0 = normal mode
 *     DIS_CL82_BERMON  Disable cl82 BER monitor state machine1 = Disable bermon fsm, force BER_MT_INIT state0 = Enable (default)
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X2_MISC0r (0x0020a023 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X2_MISC0r_SIZE 4

/*
 * This structure should be used to declare and program RX_X2_MISC0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X2_MISC0r_s {
	uint32_t v[1];
	uint32_t rx_x2_misc0[1];
	uint32_t _rx_x2_misc0;
} BCMI_TSCF_GEN3_XGXS_RX_X2_MISC0r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X2_MISC0r_CLR(r) (r).rx_x2_misc0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X2_MISC0r_SET(r,d) (r).rx_x2_misc0[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X2_MISC0r_GET(r) (r).rx_x2_misc0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X2_MISC0r_DIS_CL82_BERMONf_GET(r) ((((r).rx_x2_misc0[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X2_MISC0r_DIS_CL82_BERMONf_SET(r,f) (r).rx_x2_misc0[0]=(((r).rx_x2_misc0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_RX_X2_MISC0r_BYPASS_CL82RXSMf_GET(r) (((r).rx_x2_misc0[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X2_MISC0r_BYPASS_CL82RXSMf_SET(r,f) (r).rx_x2_misc0[0]=(((r).rx_x2_misc0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_X2_MISC0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X2_MISC0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X2_MISC0r,(_r._rx_x2_misc0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X2_MISC0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X2_MISC0r,(_r._rx_x2_misc0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X2_MISC0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X2_MISC0r,(_r._rx_x2_misc0))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X2_MISC0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X2_MISC0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x2_misc0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X2_MISC0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X2_MISC0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x2_misc0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X2_MISC0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X2_MISC0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x2_misc0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X2_MISC0r BCMI_TSCF_GEN3_XGXS_RX_X2_MISC0r
#define RX_X2_MISC0r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X2_MISC0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X2_MISC0r_t RX_X2_MISC0r_t;
#define RX_X2_MISC0r_CLR BCMI_TSCF_GEN3_XGXS_RX_X2_MISC0r_CLR
#define RX_X2_MISC0r_SET BCMI_TSCF_GEN3_XGXS_RX_X2_MISC0r_SET
#define RX_X2_MISC0r_GET BCMI_TSCF_GEN3_XGXS_RX_X2_MISC0r_GET
#define RX_X2_MISC0r_DIS_CL82_BERMONf_GET BCMI_TSCF_GEN3_XGXS_RX_X2_MISC0r_DIS_CL82_BERMONf_GET
#define RX_X2_MISC0r_DIS_CL82_BERMONf_SET BCMI_TSCF_GEN3_XGXS_RX_X2_MISC0r_DIS_CL82_BERMONf_SET
#define RX_X2_MISC0r_BYPASS_CL82RXSMf_GET BCMI_TSCF_GEN3_XGXS_RX_X2_MISC0r_BYPASS_CL82RXSMf_GET
#define RX_X2_MISC0r_BYPASS_CL82RXSMf_SET BCMI_TSCF_GEN3_XGXS_RX_X2_MISC0r_BYPASS_CL82RXSMf_SET
#define READ_RX_X2_MISC0r BCMI_TSCF_GEN3_XGXS_READ_RX_X2_MISC0r
#define WRITE_RX_X2_MISC0r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X2_MISC0r
#define MODIFY_RX_X2_MISC0r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X2_MISC0r
#define READLN_RX_X2_MISC0r BCMI_TSCF_GEN3_XGXS_READLN_RX_X2_MISC0r
#define WRITELN_RX_X2_MISC0r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X2_MISC0r
#define WRITEALL_RX_X2_MISC0r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X2_MISC0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X2_MISC0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X2_MISC1
 * BLOCKS:   RX_X2_CONTROL0
 * REGADDR:  0xa024
 * DESC:     misc 1 register
 * RESETVAL: 0x203 (515)
 * ACCESS:   R/W
 * FIELDS:
 *     CL82_RX_RF_ENABLE If this bit is a one, RFs are passed to the RS layer from the PCS.If this bit is a zero, RFs are replaced by IDLEs which are then passedto the RS layer.For CL82 only.
 *     CL82_RX_LF_ENABLE If this bit is a one, LFs are passed to the RS layer from the PCS.If this bit is a zero, LFs are replaced by IDLEs which are then passedto the RS layer.For CL82 only.
 *     CL82_RX_LI_ENABLE If this bit is a one, LI (Link Interrupt) codes are passed thru to the PCS.If this bit is a zero, LI are replaced by IDLEs which are then passedto the PCS.For CL82 only.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X2_MISC1r (0x0020a024 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X2_MISC1r_SIZE 4

/*
 * This structure should be used to declare and program RX_X2_MISC1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X2_MISC1r_s {
	uint32_t v[1];
	uint32_t rx_x2_misc1[1];
	uint32_t _rx_x2_misc1;
} BCMI_TSCF_GEN3_XGXS_RX_X2_MISC1r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X2_MISC1r_CLR(r) (r).rx_x2_misc1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X2_MISC1r_SET(r,d) (r).rx_x2_misc1[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X2_MISC1r_GET(r) (r).rx_x2_misc1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X2_MISC1r_CL82_RX_LI_ENABLEf_GET(r) ((((r).rx_x2_misc1[0]) >> 9) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X2_MISC1r_CL82_RX_LI_ENABLEf_SET(r,f) (r).rx_x2_misc1[0]=(((r).rx_x2_misc1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_RX_X2_MISC1r_CL82_RX_LF_ENABLEf_GET(r) ((((r).rx_x2_misc1[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X2_MISC1r_CL82_RX_LF_ENABLEf_SET(r,f) (r).rx_x2_misc1[0]=(((r).rx_x2_misc1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_RX_X2_MISC1r_CL82_RX_RF_ENABLEf_GET(r) (((r).rx_x2_misc1[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X2_MISC1r_CL82_RX_RF_ENABLEf_SET(r,f) (r).rx_x2_misc1[0]=(((r).rx_x2_misc1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_X2_MISC1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X2_MISC1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X2_MISC1r,(_r._rx_x2_misc1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X2_MISC1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X2_MISC1r,(_r._rx_x2_misc1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X2_MISC1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X2_MISC1r,(_r._rx_x2_misc1))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X2_MISC1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X2_MISC1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x2_misc1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X2_MISC1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X2_MISC1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x2_misc1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X2_MISC1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X2_MISC1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x2_misc1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X2_MISC1r BCMI_TSCF_GEN3_XGXS_RX_X2_MISC1r
#define RX_X2_MISC1r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X2_MISC1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X2_MISC1r_t RX_X2_MISC1r_t;
#define RX_X2_MISC1r_CLR BCMI_TSCF_GEN3_XGXS_RX_X2_MISC1r_CLR
#define RX_X2_MISC1r_SET BCMI_TSCF_GEN3_XGXS_RX_X2_MISC1r_SET
#define RX_X2_MISC1r_GET BCMI_TSCF_GEN3_XGXS_RX_X2_MISC1r_GET
#define RX_X2_MISC1r_CL82_RX_LI_ENABLEf_GET BCMI_TSCF_GEN3_XGXS_RX_X2_MISC1r_CL82_RX_LI_ENABLEf_GET
#define RX_X2_MISC1r_CL82_RX_LI_ENABLEf_SET BCMI_TSCF_GEN3_XGXS_RX_X2_MISC1r_CL82_RX_LI_ENABLEf_SET
#define RX_X2_MISC1r_CL82_RX_LF_ENABLEf_GET BCMI_TSCF_GEN3_XGXS_RX_X2_MISC1r_CL82_RX_LF_ENABLEf_GET
#define RX_X2_MISC1r_CL82_RX_LF_ENABLEf_SET BCMI_TSCF_GEN3_XGXS_RX_X2_MISC1r_CL82_RX_LF_ENABLEf_SET
#define RX_X2_MISC1r_CL82_RX_RF_ENABLEf_GET BCMI_TSCF_GEN3_XGXS_RX_X2_MISC1r_CL82_RX_RF_ENABLEf_GET
#define RX_X2_MISC1r_CL82_RX_RF_ENABLEf_SET BCMI_TSCF_GEN3_XGXS_RX_X2_MISC1r_CL82_RX_RF_ENABLEf_SET
#define READ_RX_X2_MISC1r BCMI_TSCF_GEN3_XGXS_READ_RX_X2_MISC1r
#define WRITE_RX_X2_MISC1r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X2_MISC1r
#define MODIFY_RX_X2_MISC1r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X2_MISC1r
#define READLN_RX_X2_MISC1r BCMI_TSCF_GEN3_XGXS_READLN_RX_X2_MISC1r
#define WRITELN_RX_X2_MISC1r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X2_MISC1r
#define WRITEALL_RX_X2_MISC1r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X2_MISC1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X2_MISC1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X2_CL82_SCRIDLE_TEST_ERR
 * BLOCKS:   RX_X2_STATUS0
 * REGADDR:  0xa030
 * DESC:     CL82 Scrambled IDLE test Error register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL82_SCRIDLE_TEST_ERR CL82 Scrambled IDLE Test Error counter
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X2_CL82_SCRIDLE_TEST_ERRr (0x0020a030 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X2_CL82_SCRIDLE_TEST_ERRr_SIZE 4

/*
 * This structure should be used to declare and program RX_X2_CL82_SCRIDLE_TEST_ERR.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X2_CL82_SCRIDLE_TEST_ERRr_s {
	uint32_t v[1];
	uint32_t rx_x2_cl82_scridle_test_err[1];
	uint32_t _rx_x2_cl82_scridle_test_err;
} BCMI_TSCF_GEN3_XGXS_RX_X2_CL82_SCRIDLE_TEST_ERRr_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X2_CL82_SCRIDLE_TEST_ERRr_CLR(r) (r).rx_x2_cl82_scridle_test_err[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X2_CL82_SCRIDLE_TEST_ERRr_SET(r,d) (r).rx_x2_cl82_scridle_test_err[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X2_CL82_SCRIDLE_TEST_ERRr_GET(r) (r).rx_x2_cl82_scridle_test_err[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X2_CL82_SCRIDLE_TEST_ERRr_CL82_SCRIDLE_TEST_ERRf_GET(r) (((r).rx_x2_cl82_scridle_test_err[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X2_CL82_SCRIDLE_TEST_ERRr_CL82_SCRIDLE_TEST_ERRf_SET(r,f) (r).rx_x2_cl82_scridle_test_err[0]=(((r).rx_x2_cl82_scridle_test_err[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X2_CL82_SCRIDLE_TEST_ERR.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X2_CL82_SCRIDLE_TEST_ERRr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X2_CL82_SCRIDLE_TEST_ERRr,(_r._rx_x2_cl82_scridle_test_err))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X2_CL82_SCRIDLE_TEST_ERRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X2_CL82_SCRIDLE_TEST_ERRr,(_r._rx_x2_cl82_scridle_test_err)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X2_CL82_SCRIDLE_TEST_ERRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X2_CL82_SCRIDLE_TEST_ERRr,(_r._rx_x2_cl82_scridle_test_err))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X2_CL82_SCRIDLE_TEST_ERRr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X2_CL82_SCRIDLE_TEST_ERRr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x2_cl82_scridle_test_err))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X2_CL82_SCRIDLE_TEST_ERRr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X2_CL82_SCRIDLE_TEST_ERRr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x2_cl82_scridle_test_err))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X2_CL82_SCRIDLE_TEST_ERRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X2_CL82_SCRIDLE_TEST_ERRr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x2_cl82_scridle_test_err))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X2_CL82_SCRIDLE_TEST_ERRr BCMI_TSCF_GEN3_XGXS_RX_X2_CL82_SCRIDLE_TEST_ERRr
#define RX_X2_CL82_SCRIDLE_TEST_ERRr_SIZE BCMI_TSCF_GEN3_XGXS_RX_X2_CL82_SCRIDLE_TEST_ERRr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X2_CL82_SCRIDLE_TEST_ERRr_t RX_X2_CL82_SCRIDLE_TEST_ERRr_t;
#define RX_X2_CL82_SCRIDLE_TEST_ERRr_CLR BCMI_TSCF_GEN3_XGXS_RX_X2_CL82_SCRIDLE_TEST_ERRr_CLR
#define RX_X2_CL82_SCRIDLE_TEST_ERRr_SET BCMI_TSCF_GEN3_XGXS_RX_X2_CL82_SCRIDLE_TEST_ERRr_SET
#define RX_X2_CL82_SCRIDLE_TEST_ERRr_GET BCMI_TSCF_GEN3_XGXS_RX_X2_CL82_SCRIDLE_TEST_ERRr_GET
#define RX_X2_CL82_SCRIDLE_TEST_ERRr_CL82_SCRIDLE_TEST_ERRf_GET BCMI_TSCF_GEN3_XGXS_RX_X2_CL82_SCRIDLE_TEST_ERRr_CL82_SCRIDLE_TEST_ERRf_GET
#define RX_X2_CL82_SCRIDLE_TEST_ERRr_CL82_SCRIDLE_TEST_ERRf_SET BCMI_TSCF_GEN3_XGXS_RX_X2_CL82_SCRIDLE_TEST_ERRr_CL82_SCRIDLE_TEST_ERRf_SET
#define READ_RX_X2_CL82_SCRIDLE_TEST_ERRr BCMI_TSCF_GEN3_XGXS_READ_RX_X2_CL82_SCRIDLE_TEST_ERRr
#define WRITE_RX_X2_CL82_SCRIDLE_TEST_ERRr BCMI_TSCF_GEN3_XGXS_WRITE_RX_X2_CL82_SCRIDLE_TEST_ERRr
#define MODIFY_RX_X2_CL82_SCRIDLE_TEST_ERRr BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X2_CL82_SCRIDLE_TEST_ERRr
#define READLN_RX_X2_CL82_SCRIDLE_TEST_ERRr BCMI_TSCF_GEN3_XGXS_READLN_RX_X2_CL82_SCRIDLE_TEST_ERRr
#define WRITELN_RX_X2_CL82_SCRIDLE_TEST_ERRr BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X2_CL82_SCRIDLE_TEST_ERRr
#define WRITEALL_RX_X2_CL82_SCRIDLE_TEST_ERRr BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X2_CL82_SCRIDLE_TEST_ERRr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X2_CL82_SCRIDLE_TEST_ERRr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  CL82_RX_LIVE_STS
 * BLOCKS:   CL82
 * REGADDR:  0xa080
 * DESC:     cl82 rx live deskew and decoder status register
 * RESETVAL: 0x2000 (8192)
 * ACCESS:   R/O
 * FIELDS:
 *     CURRENT_RXSM_STATE CL82 Recieve fsm - current state
 *     R_TYPE_CODED     CL82 Receive SM - current r_type
 *     DESKEW_STATE     Deskew current statesbit 1  - ALIGN_ACQUIREDbit 0  - LOSS_OF_ALIGNMENT
 */
#define BCMI_TSCF_GEN3_XGXS_CL82_RX_LIVE_STSr (0x0020a080 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_CL82_RX_LIVE_STSr_SIZE 4

/*
 * This structure should be used to declare and program CL82_RX_LIVE_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_CL82_RX_LIVE_STSr_s {
	uint32_t v[1];
	uint32_t cl82_rx_live_sts[1];
	uint32_t _cl82_rx_live_sts;
} BCMI_TSCF_GEN3_XGXS_CL82_RX_LIVE_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_CL82_RX_LIVE_STSr_CLR(r) (r).cl82_rx_live_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_CL82_RX_LIVE_STSr_SET(r,d) (r).cl82_rx_live_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_CL82_RX_LIVE_STSr_GET(r) (r).cl82_rx_live_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_CL82_RX_LIVE_STSr_DESKEW_STATEf_GET(r) ((((r).cl82_rx_live_sts[0]) >> 13) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_CL82_RX_LIVE_STSr_DESKEW_STATEf_SET(r,f) (r).cl82_rx_live_sts[0]=(((r).cl82_rx_live_sts[0] & ~((uint32_t)0x3 << 13)) | ((((uint32_t)f) & 0x3) << 13)) | (3 << (16 + 13))
#define BCMI_TSCF_GEN3_XGXS_CL82_RX_LIVE_STSr_R_TYPE_CODEDf_GET(r) ((((r).cl82_rx_live_sts[0]) >> 7) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_CL82_RX_LIVE_STSr_R_TYPE_CODEDf_SET(r,f) (r).cl82_rx_live_sts[0]=(((r).cl82_rx_live_sts[0] & ~((uint32_t)0x3f << 7)) | ((((uint32_t)f) & 0x3f) << 7)) | (63 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_CL82_RX_LIVE_STSr_CURRENT_RXSM_STATEf_GET(r) (((r).cl82_rx_live_sts[0]) & 0x7f)
#define BCMI_TSCF_GEN3_XGXS_CL82_RX_LIVE_STSr_CURRENT_RXSM_STATEf_SET(r,f) (r).cl82_rx_live_sts[0]=(((r).cl82_rx_live_sts[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f)) | (0x7f << 16)

/*
 * These macros can be used to access CL82_RX_LIVE_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_CL82_RX_LIVE_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL82_RX_LIVE_STSr,(_r._cl82_rx_live_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_CL82_RX_LIVE_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL82_RX_LIVE_STSr,(_r._cl82_rx_live_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_CL82_RX_LIVE_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL82_RX_LIVE_STSr,(_r._cl82_rx_live_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_CL82_RX_LIVE_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL82_RX_LIVE_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl82_rx_live_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_CL82_RX_LIVE_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL82_RX_LIVE_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl82_rx_live_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_CL82_RX_LIVE_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL82_RX_LIVE_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl82_rx_live_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL82_RX_LIVE_STSr BCMI_TSCF_GEN3_XGXS_CL82_RX_LIVE_STSr
#define CL82_RX_LIVE_STSr_SIZE BCMI_TSCF_GEN3_XGXS_CL82_RX_LIVE_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_CL82_RX_LIVE_STSr_t CL82_RX_LIVE_STSr_t;
#define CL82_RX_LIVE_STSr_CLR BCMI_TSCF_GEN3_XGXS_CL82_RX_LIVE_STSr_CLR
#define CL82_RX_LIVE_STSr_SET BCMI_TSCF_GEN3_XGXS_CL82_RX_LIVE_STSr_SET
#define CL82_RX_LIVE_STSr_GET BCMI_TSCF_GEN3_XGXS_CL82_RX_LIVE_STSr_GET
#define CL82_RX_LIVE_STSr_DESKEW_STATEf_GET BCMI_TSCF_GEN3_XGXS_CL82_RX_LIVE_STSr_DESKEW_STATEf_GET
#define CL82_RX_LIVE_STSr_DESKEW_STATEf_SET BCMI_TSCF_GEN3_XGXS_CL82_RX_LIVE_STSr_DESKEW_STATEf_SET
#define CL82_RX_LIVE_STSr_R_TYPE_CODEDf_GET BCMI_TSCF_GEN3_XGXS_CL82_RX_LIVE_STSr_R_TYPE_CODEDf_GET
#define CL82_RX_LIVE_STSr_R_TYPE_CODEDf_SET BCMI_TSCF_GEN3_XGXS_CL82_RX_LIVE_STSr_R_TYPE_CODEDf_SET
#define CL82_RX_LIVE_STSr_CURRENT_RXSM_STATEf_GET BCMI_TSCF_GEN3_XGXS_CL82_RX_LIVE_STSr_CURRENT_RXSM_STATEf_GET
#define CL82_RX_LIVE_STSr_CURRENT_RXSM_STATEf_SET BCMI_TSCF_GEN3_XGXS_CL82_RX_LIVE_STSr_CURRENT_RXSM_STATEf_SET
#define READ_CL82_RX_LIVE_STSr BCMI_TSCF_GEN3_XGXS_READ_CL82_RX_LIVE_STSr
#define WRITE_CL82_RX_LIVE_STSr BCMI_TSCF_GEN3_XGXS_WRITE_CL82_RX_LIVE_STSr
#define MODIFY_CL82_RX_LIVE_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_CL82_RX_LIVE_STSr
#define READLN_CL82_RX_LIVE_STSr BCMI_TSCF_GEN3_XGXS_READLN_CL82_RX_LIVE_STSr
#define WRITELN_CL82_RX_LIVE_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_CL82_RX_LIVE_STSr
#define WRITEALL_CL82_RX_LIVE_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_CL82_RX_LIVE_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_CL82_RX_LIVE_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  CL82_RX_LATCH_STS
 * BLOCKS:   CL82
 * REGADDR:  0xa081
 * DESC:     cl82 rx latched deskew and decoder status register
 * RESETVAL: 0x1 (1)
 * ACCESS:   R/O
 * FIELDS:
 *     DESKEW_HIS_STATE Deskew history statesclear on read
 *     HISTORY_RXSM_STATE Recieve fsm - latched history state
 */
#define BCMI_TSCF_GEN3_XGXS_CL82_RX_LATCH_STSr (0x0020a081 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_CL82_RX_LATCH_STSr_SIZE 4

/*
 * This structure should be used to declare and program CL82_RX_LATCH_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_CL82_RX_LATCH_STSr_s {
	uint32_t v[1];
	uint32_t cl82_rx_latch_sts[1];
	uint32_t _cl82_rx_latch_sts;
} BCMI_TSCF_GEN3_XGXS_CL82_RX_LATCH_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_CL82_RX_LATCH_STSr_CLR(r) (r).cl82_rx_latch_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_CL82_RX_LATCH_STSr_SET(r,d) (r).cl82_rx_latch_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_CL82_RX_LATCH_STSr_GET(r) (r).cl82_rx_latch_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_CL82_RX_LATCH_STSr_HISTORY_RXSM_STATEf_GET(r) ((((r).cl82_rx_latch_sts[0]) >> 2) & 0x7f)
#define BCMI_TSCF_GEN3_XGXS_CL82_RX_LATCH_STSr_HISTORY_RXSM_STATEf_SET(r,f) (r).cl82_rx_latch_sts[0]=(((r).cl82_rx_latch_sts[0] & ~((uint32_t)0x7f << 2)) | ((((uint32_t)f) & 0x7f) << 2)) | (127 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_CL82_RX_LATCH_STSr_DESKEW_HIS_STATEf_GET(r) (((r).cl82_rx_latch_sts[0]) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_CL82_RX_LATCH_STSr_DESKEW_HIS_STATEf_SET(r,f) (r).cl82_rx_latch_sts[0]=(((r).cl82_rx_latch_sts[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access CL82_RX_LATCH_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_CL82_RX_LATCH_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL82_RX_LATCH_STSr,(_r._cl82_rx_latch_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_CL82_RX_LATCH_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL82_RX_LATCH_STSr,(_r._cl82_rx_latch_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_CL82_RX_LATCH_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL82_RX_LATCH_STSr,(_r._cl82_rx_latch_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_CL82_RX_LATCH_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL82_RX_LATCH_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl82_rx_latch_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_CL82_RX_LATCH_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL82_RX_LATCH_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl82_rx_latch_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_CL82_RX_LATCH_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL82_RX_LATCH_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl82_rx_latch_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL82_RX_LATCH_STSr BCMI_TSCF_GEN3_XGXS_CL82_RX_LATCH_STSr
#define CL82_RX_LATCH_STSr_SIZE BCMI_TSCF_GEN3_XGXS_CL82_RX_LATCH_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_CL82_RX_LATCH_STSr_t CL82_RX_LATCH_STSr_t;
#define CL82_RX_LATCH_STSr_CLR BCMI_TSCF_GEN3_XGXS_CL82_RX_LATCH_STSr_CLR
#define CL82_RX_LATCH_STSr_SET BCMI_TSCF_GEN3_XGXS_CL82_RX_LATCH_STSr_SET
#define CL82_RX_LATCH_STSr_GET BCMI_TSCF_GEN3_XGXS_CL82_RX_LATCH_STSr_GET
#define CL82_RX_LATCH_STSr_HISTORY_RXSM_STATEf_GET BCMI_TSCF_GEN3_XGXS_CL82_RX_LATCH_STSr_HISTORY_RXSM_STATEf_GET
#define CL82_RX_LATCH_STSr_HISTORY_RXSM_STATEf_SET BCMI_TSCF_GEN3_XGXS_CL82_RX_LATCH_STSr_HISTORY_RXSM_STATEf_SET
#define CL82_RX_LATCH_STSr_DESKEW_HIS_STATEf_GET BCMI_TSCF_GEN3_XGXS_CL82_RX_LATCH_STSr_DESKEW_HIS_STATEf_GET
#define CL82_RX_LATCH_STSr_DESKEW_HIS_STATEf_SET BCMI_TSCF_GEN3_XGXS_CL82_RX_LATCH_STSr_DESKEW_HIS_STATEf_SET
#define READ_CL82_RX_LATCH_STSr BCMI_TSCF_GEN3_XGXS_READ_CL82_RX_LATCH_STSr
#define WRITE_CL82_RX_LATCH_STSr BCMI_TSCF_GEN3_XGXS_WRITE_CL82_RX_LATCH_STSr
#define MODIFY_CL82_RX_LATCH_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_CL82_RX_LATCH_STSr
#define READLN_CL82_RX_LATCH_STSr BCMI_TSCF_GEN3_XGXS_READLN_CL82_RX_LATCH_STSr
#define WRITELN_CL82_RX_LATCH_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_CL82_RX_LATCH_STSr
#define WRITEALL_CL82_RX_LATCH_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_CL82_RX_LATCH_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_CL82_RX_LATCH_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  CL82_BER_LO
 * BLOCKS:   CL82
 * REGADDR:  0xa082
 * DESC:     CL82 BER LOWER ORDER bits register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     BER_LO           Lower 8 bits of CL82 BER count.It counts the number of times BER_BAD_SH state is entered.
 */
#define BCMI_TSCF_GEN3_XGXS_CL82_BER_LOr (0x0020a082 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_CL82_BER_LOr_SIZE 4

/*
 * This structure should be used to declare and program CL82_BER_LO.
 */
typedef union BCMI_TSCF_GEN3_XGXS_CL82_BER_LOr_s {
	uint32_t v[1];
	uint32_t cl82_ber_lo[1];
	uint32_t _cl82_ber_lo;
} BCMI_TSCF_GEN3_XGXS_CL82_BER_LOr_t;

#define BCMI_TSCF_GEN3_XGXS_CL82_BER_LOr_CLR(r) (r).cl82_ber_lo[0] = 0
#define BCMI_TSCF_GEN3_XGXS_CL82_BER_LOr_SET(r,d) (r).cl82_ber_lo[0] = d
#define BCMI_TSCF_GEN3_XGXS_CL82_BER_LOr_GET(r) (r).cl82_ber_lo[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_CL82_BER_LOr_BER_LOf_GET(r) (((r).cl82_ber_lo[0]) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_CL82_BER_LOr_BER_LOf_SET(r,f) (r).cl82_ber_lo[0]=(((r).cl82_ber_lo[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access CL82_BER_LO.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_CL82_BER_LOr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL82_BER_LOr,(_r._cl82_ber_lo))
#define BCMI_TSCF_GEN3_XGXS_WRITE_CL82_BER_LOr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL82_BER_LOr,(_r._cl82_ber_lo)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_CL82_BER_LOr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL82_BER_LOr,(_r._cl82_ber_lo))
#define BCMI_TSCF_GEN3_XGXS_READLN_CL82_BER_LOr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL82_BER_LOr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl82_ber_lo))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_CL82_BER_LOr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL82_BER_LOr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl82_ber_lo))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_CL82_BER_LOr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL82_BER_LOr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl82_ber_lo))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL82_BER_LOr BCMI_TSCF_GEN3_XGXS_CL82_BER_LOr
#define CL82_BER_LOr_SIZE BCMI_TSCF_GEN3_XGXS_CL82_BER_LOr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_CL82_BER_LOr_t CL82_BER_LOr_t;
#define CL82_BER_LOr_CLR BCMI_TSCF_GEN3_XGXS_CL82_BER_LOr_CLR
#define CL82_BER_LOr_SET BCMI_TSCF_GEN3_XGXS_CL82_BER_LOr_SET
#define CL82_BER_LOr_GET BCMI_TSCF_GEN3_XGXS_CL82_BER_LOr_GET
#define CL82_BER_LOr_BER_LOf_GET BCMI_TSCF_GEN3_XGXS_CL82_BER_LOr_BER_LOf_GET
#define CL82_BER_LOr_BER_LOf_SET BCMI_TSCF_GEN3_XGXS_CL82_BER_LOr_BER_LOf_SET
#define READ_CL82_BER_LOr BCMI_TSCF_GEN3_XGXS_READ_CL82_BER_LOr
#define WRITE_CL82_BER_LOr BCMI_TSCF_GEN3_XGXS_WRITE_CL82_BER_LOr
#define MODIFY_CL82_BER_LOr BCMI_TSCF_GEN3_XGXS_MODIFY_CL82_BER_LOr
#define READLN_CL82_BER_LOr BCMI_TSCF_GEN3_XGXS_READLN_CL82_BER_LOr
#define WRITELN_CL82_BER_LOr BCMI_TSCF_GEN3_XGXS_WRITELN_CL82_BER_LOr
#define WRITEALL_CL82_BER_LOr BCMI_TSCF_GEN3_XGXS_WRITEALL_CL82_BER_LOr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_CL82_BER_LOr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  CL82_BER_HO
 * BLOCKS:   CL82
 * REGADDR:  0xa083
 * DESC:     CL82 BER HIGH ORDER bits register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     BER_HO           Upper 14 bits of CL82 BER count.It counts the number of times BER_BAD_SH state is entered.
 */
#define BCMI_TSCF_GEN3_XGXS_CL82_BER_HOr (0x0020a083 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_CL82_BER_HOr_SIZE 4

/*
 * This structure should be used to declare and program CL82_BER_HO.
 */
typedef union BCMI_TSCF_GEN3_XGXS_CL82_BER_HOr_s {
	uint32_t v[1];
	uint32_t cl82_ber_ho[1];
	uint32_t _cl82_ber_ho;
} BCMI_TSCF_GEN3_XGXS_CL82_BER_HOr_t;

#define BCMI_TSCF_GEN3_XGXS_CL82_BER_HOr_CLR(r) (r).cl82_ber_ho[0] = 0
#define BCMI_TSCF_GEN3_XGXS_CL82_BER_HOr_SET(r,d) (r).cl82_ber_ho[0] = d
#define BCMI_TSCF_GEN3_XGXS_CL82_BER_HOr_GET(r) (r).cl82_ber_ho[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_CL82_BER_HOr_BER_HOf_GET(r) (((r).cl82_ber_ho[0]) & 0x3fff)
#define BCMI_TSCF_GEN3_XGXS_CL82_BER_HOr_BER_HOf_SET(r,f) (r).cl82_ber_ho[0]=(((r).cl82_ber_ho[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff)) | (0x3fff << 16)

/*
 * These macros can be used to access CL82_BER_HO.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_CL82_BER_HOr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL82_BER_HOr,(_r._cl82_ber_ho))
#define BCMI_TSCF_GEN3_XGXS_WRITE_CL82_BER_HOr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL82_BER_HOr,(_r._cl82_ber_ho)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_CL82_BER_HOr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL82_BER_HOr,(_r._cl82_ber_ho))
#define BCMI_TSCF_GEN3_XGXS_READLN_CL82_BER_HOr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL82_BER_HOr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl82_ber_ho))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_CL82_BER_HOr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL82_BER_HOr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl82_ber_ho))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_CL82_BER_HOr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL82_BER_HOr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl82_ber_ho))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL82_BER_HOr BCMI_TSCF_GEN3_XGXS_CL82_BER_HOr
#define CL82_BER_HOr_SIZE BCMI_TSCF_GEN3_XGXS_CL82_BER_HOr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_CL82_BER_HOr_t CL82_BER_HOr_t;
#define CL82_BER_HOr_CLR BCMI_TSCF_GEN3_XGXS_CL82_BER_HOr_CLR
#define CL82_BER_HOr_SET BCMI_TSCF_GEN3_XGXS_CL82_BER_HOr_SET
#define CL82_BER_HOr_GET BCMI_TSCF_GEN3_XGXS_CL82_BER_HOr_GET
#define CL82_BER_HOr_BER_HOf_GET BCMI_TSCF_GEN3_XGXS_CL82_BER_HOr_BER_HOf_GET
#define CL82_BER_HOr_BER_HOf_SET BCMI_TSCF_GEN3_XGXS_CL82_BER_HOr_BER_HOf_SET
#define READ_CL82_BER_HOr BCMI_TSCF_GEN3_XGXS_READ_CL82_BER_HOr
#define WRITE_CL82_BER_HOr BCMI_TSCF_GEN3_XGXS_WRITE_CL82_BER_HOr
#define MODIFY_CL82_BER_HOr BCMI_TSCF_GEN3_XGXS_MODIFY_CL82_BER_HOr
#define READLN_CL82_BER_HOr BCMI_TSCF_GEN3_XGXS_READLN_CL82_BER_HOr
#define WRITELN_CL82_BER_HOr BCMI_TSCF_GEN3_XGXS_WRITELN_CL82_BER_HOr
#define WRITEALL_CL82_BER_HOr BCMI_TSCF_GEN3_XGXS_WRITEALL_CL82_BER_HOr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_CL82_BER_HOr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  CL82_ERRED_BLKS_HO
 * BLOCKS:   CL82
 * REGADDR:  0xa084
 * DESC:     40G/100GBASE-R Errored blocks high order counter
 * RESETVAL: 0x8000 (32768)
 * ACCESS:   R/O
 * FIELDS:
 *     ERRORED_BLOCKS_HO Error blocks counter high order bits for cl82 - CR/NRBits 21:8 of the Error blocks  counter
 *     ERRORED_BLOCKS_HO_PRESENT Error blocks counter high order bits present - ROAlways reads as 1 if this registers is implemented
 */
#define BCMI_TSCF_GEN3_XGXS_CL82_ERRED_BLKS_HOr (0x0020a084 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_CL82_ERRED_BLKS_HOr_SIZE 4

/*
 * This structure should be used to declare and program CL82_ERRED_BLKS_HO.
 */
typedef union BCMI_TSCF_GEN3_XGXS_CL82_ERRED_BLKS_HOr_s {
	uint32_t v[1];
	uint32_t cl82_erred_blks_ho[1];
	uint32_t _cl82_erred_blks_ho;
} BCMI_TSCF_GEN3_XGXS_CL82_ERRED_BLKS_HOr_t;

#define BCMI_TSCF_GEN3_XGXS_CL82_ERRED_BLKS_HOr_CLR(r) (r).cl82_erred_blks_ho[0] = 0
#define BCMI_TSCF_GEN3_XGXS_CL82_ERRED_BLKS_HOr_SET(r,d) (r).cl82_erred_blks_ho[0] = d
#define BCMI_TSCF_GEN3_XGXS_CL82_ERRED_BLKS_HOr_GET(r) (r).cl82_erred_blks_ho[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_CL82_ERRED_BLKS_HOr_ERRORED_BLOCKS_HO_PRESENTf_GET(r) ((((r).cl82_erred_blks_ho[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CL82_ERRED_BLKS_HOr_ERRORED_BLOCKS_HO_PRESENTf_SET(r,f) (r).cl82_erred_blks_ho[0]=(((r).cl82_erred_blks_ho[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_CL82_ERRED_BLKS_HOr_ERRORED_BLOCKS_HOf_GET(r) (((r).cl82_erred_blks_ho[0]) & 0x3fff)
#define BCMI_TSCF_GEN3_XGXS_CL82_ERRED_BLKS_HOr_ERRORED_BLOCKS_HOf_SET(r,f) (r).cl82_erred_blks_ho[0]=(((r).cl82_erred_blks_ho[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff)) | (0x3fff << 16)

/*
 * These macros can be used to access CL82_ERRED_BLKS_HO.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_CL82_ERRED_BLKS_HOr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL82_ERRED_BLKS_HOr,(_r._cl82_erred_blks_ho))
#define BCMI_TSCF_GEN3_XGXS_WRITE_CL82_ERRED_BLKS_HOr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL82_ERRED_BLKS_HOr,(_r._cl82_erred_blks_ho)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_CL82_ERRED_BLKS_HOr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL82_ERRED_BLKS_HOr,(_r._cl82_erred_blks_ho))
#define BCMI_TSCF_GEN3_XGXS_READLN_CL82_ERRED_BLKS_HOr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL82_ERRED_BLKS_HOr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl82_erred_blks_ho))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_CL82_ERRED_BLKS_HOr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL82_ERRED_BLKS_HOr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl82_erred_blks_ho))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_CL82_ERRED_BLKS_HOr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL82_ERRED_BLKS_HOr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl82_erred_blks_ho))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL82_ERRED_BLKS_HOr BCMI_TSCF_GEN3_XGXS_CL82_ERRED_BLKS_HOr
#define CL82_ERRED_BLKS_HOr_SIZE BCMI_TSCF_GEN3_XGXS_CL82_ERRED_BLKS_HOr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_CL82_ERRED_BLKS_HOr_t CL82_ERRED_BLKS_HOr_t;
#define CL82_ERRED_BLKS_HOr_CLR BCMI_TSCF_GEN3_XGXS_CL82_ERRED_BLKS_HOr_CLR
#define CL82_ERRED_BLKS_HOr_SET BCMI_TSCF_GEN3_XGXS_CL82_ERRED_BLKS_HOr_SET
#define CL82_ERRED_BLKS_HOr_GET BCMI_TSCF_GEN3_XGXS_CL82_ERRED_BLKS_HOr_GET
#define CL82_ERRED_BLKS_HOr_ERRORED_BLOCKS_HO_PRESENTf_GET BCMI_TSCF_GEN3_XGXS_CL82_ERRED_BLKS_HOr_ERRORED_BLOCKS_HO_PRESENTf_GET
#define CL82_ERRED_BLKS_HOr_ERRORED_BLOCKS_HO_PRESENTf_SET BCMI_TSCF_GEN3_XGXS_CL82_ERRED_BLKS_HOr_ERRORED_BLOCKS_HO_PRESENTf_SET
#define CL82_ERRED_BLKS_HOr_ERRORED_BLOCKS_HOf_GET BCMI_TSCF_GEN3_XGXS_CL82_ERRED_BLKS_HOr_ERRORED_BLOCKS_HOf_GET
#define CL82_ERRED_BLKS_HOr_ERRORED_BLOCKS_HOf_SET BCMI_TSCF_GEN3_XGXS_CL82_ERRED_BLKS_HOr_ERRORED_BLOCKS_HOf_SET
#define READ_CL82_ERRED_BLKS_HOr BCMI_TSCF_GEN3_XGXS_READ_CL82_ERRED_BLKS_HOr
#define WRITE_CL82_ERRED_BLKS_HOr BCMI_TSCF_GEN3_XGXS_WRITE_CL82_ERRED_BLKS_HOr
#define MODIFY_CL82_ERRED_BLKS_HOr BCMI_TSCF_GEN3_XGXS_MODIFY_CL82_ERRED_BLKS_HOr
#define READLN_CL82_ERRED_BLKS_HOr BCMI_TSCF_GEN3_XGXS_READLN_CL82_ERRED_BLKS_HOr
#define WRITELN_CL82_ERRED_BLKS_HOr BCMI_TSCF_GEN3_XGXS_WRITELN_CL82_ERRED_BLKS_HOr
#define WRITEALL_CL82_ERRED_BLKS_HOr BCMI_TSCF_GEN3_XGXS_WRITEALL_CL82_ERRED_BLKS_HOr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_CL82_ERRED_BLKS_HOr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PMD_X4_CTL
 * BLOCKS:   PMD_X4
 * REGADDR:  0xc010
 * DESC:     PMD lane reset controls
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LN_DP_H_RSTB     PMD lane datapath reset override valueOnly used for Speed Control bypass operation
 *     LN_H_RSTB        Reset all lane logic: data path and registers
 *     LN_TX_H_PWRDN    Lane power down, TX direction
 *     LN_RX_H_PWRDN    Lane power down, RX direction
 *     TX_DISABLE       Set to squelch the transmit signal for laneOnly used for Speed Control bypass operation and local loopback
 *     OSR_MODE         OSR mode. In current implementation only OSR mode 1 is usedOnly used for Speed Control bypass operation
 */
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_CTLr (0x0000c010 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PMD_X4_CTLr_SIZE 4

/*
 * This structure should be used to declare and program PMD_X4_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PMD_X4_CTLr_s {
	uint32_t v[1];
	uint32_t pmd_x4_ctl[1];
	uint32_t _pmd_x4_ctl;
} BCMI_TSCF_GEN3_XGXS_PMD_X4_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_PMD_X4_CTLr_CLR(r) (r).pmd_x4_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_CTLr_SET(r,d) (r).pmd_x4_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_CTLr_GET(r) (r).pmd_x4_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_CTLr_OSR_MODEf_GET(r) ((((r).pmd_x4_ctl[0]) >> 9) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_CTLr_OSR_MODEf_SET(r,f) (r).pmd_x4_ctl[0]=(((r).pmd_x4_ctl[0] & ~((uint32_t)0xf << 9)) | ((((uint32_t)f) & 0xf) << 9)) | (15 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_CTLr_TX_DISABLEf_GET(r) ((((r).pmd_x4_ctl[0]) >> 8) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_CTLr_TX_DISABLEf_SET(r,f) (r).pmd_x4_ctl[0]=(((r).pmd_x4_ctl[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_CTLr_LN_RX_H_PWRDNf_GET(r) ((((r).pmd_x4_ctl[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_CTLr_LN_RX_H_PWRDNf_SET(r,f) (r).pmd_x4_ctl[0]=(((r).pmd_x4_ctl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_CTLr_LN_TX_H_PWRDNf_GET(r) ((((r).pmd_x4_ctl[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_CTLr_LN_TX_H_PWRDNf_SET(r,f) (r).pmd_x4_ctl[0]=(((r).pmd_x4_ctl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_CTLr_LN_H_RSTBf_GET(r) ((((r).pmd_x4_ctl[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_CTLr_LN_H_RSTBf_SET(r,f) (r).pmd_x4_ctl[0]=(((r).pmd_x4_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_CTLr_LN_DP_H_RSTBf_GET(r) (((r).pmd_x4_ctl[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_CTLr_LN_DP_H_RSTBf_SET(r,f) (r).pmd_x4_ctl[0]=(((r).pmd_x4_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access PMD_X4_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PMD_X4_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_CTLr,(_r._pmd_x4_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PMD_X4_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_CTLr,(_r._pmd_x4_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PMD_X4_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_CTLr,(_r._pmd_x4_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_PMD_X4_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pmd_x4_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_PMD_X4_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pmd_x4_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_PMD_X4_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._pmd_x4_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_X4_CTLr BCMI_TSCF_GEN3_XGXS_PMD_X4_CTLr
#define PMD_X4_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_PMD_X4_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PMD_X4_CTLr_t PMD_X4_CTLr_t;
#define PMD_X4_CTLr_CLR BCMI_TSCF_GEN3_XGXS_PMD_X4_CTLr_CLR
#define PMD_X4_CTLr_SET BCMI_TSCF_GEN3_XGXS_PMD_X4_CTLr_SET
#define PMD_X4_CTLr_GET BCMI_TSCF_GEN3_XGXS_PMD_X4_CTLr_GET
#define PMD_X4_CTLr_OSR_MODEf_GET BCMI_TSCF_GEN3_XGXS_PMD_X4_CTLr_OSR_MODEf_GET
#define PMD_X4_CTLr_OSR_MODEf_SET BCMI_TSCF_GEN3_XGXS_PMD_X4_CTLr_OSR_MODEf_SET
#define PMD_X4_CTLr_TX_DISABLEf_GET BCMI_TSCF_GEN3_XGXS_PMD_X4_CTLr_TX_DISABLEf_GET
#define PMD_X4_CTLr_TX_DISABLEf_SET BCMI_TSCF_GEN3_XGXS_PMD_X4_CTLr_TX_DISABLEf_SET
#define PMD_X4_CTLr_LN_RX_H_PWRDNf_GET BCMI_TSCF_GEN3_XGXS_PMD_X4_CTLr_LN_RX_H_PWRDNf_GET
#define PMD_X4_CTLr_LN_RX_H_PWRDNf_SET BCMI_TSCF_GEN3_XGXS_PMD_X4_CTLr_LN_RX_H_PWRDNf_SET
#define PMD_X4_CTLr_LN_TX_H_PWRDNf_GET BCMI_TSCF_GEN3_XGXS_PMD_X4_CTLr_LN_TX_H_PWRDNf_GET
#define PMD_X4_CTLr_LN_TX_H_PWRDNf_SET BCMI_TSCF_GEN3_XGXS_PMD_X4_CTLr_LN_TX_H_PWRDNf_SET
#define PMD_X4_CTLr_LN_H_RSTBf_GET BCMI_TSCF_GEN3_XGXS_PMD_X4_CTLr_LN_H_RSTBf_GET
#define PMD_X4_CTLr_LN_H_RSTBf_SET BCMI_TSCF_GEN3_XGXS_PMD_X4_CTLr_LN_H_RSTBf_SET
#define PMD_X4_CTLr_LN_DP_H_RSTBf_GET BCMI_TSCF_GEN3_XGXS_PMD_X4_CTLr_LN_DP_H_RSTBf_GET
#define PMD_X4_CTLr_LN_DP_H_RSTBf_SET BCMI_TSCF_GEN3_XGXS_PMD_X4_CTLr_LN_DP_H_RSTBf_SET
#define READ_PMD_X4_CTLr BCMI_TSCF_GEN3_XGXS_READ_PMD_X4_CTLr
#define WRITE_PMD_X4_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_PMD_X4_CTLr
#define MODIFY_PMD_X4_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_PMD_X4_CTLr
#define READLN_PMD_X4_CTLr BCMI_TSCF_GEN3_XGXS_READLN_PMD_X4_CTLr
#define WRITELN_PMD_X4_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_PMD_X4_CTLr
#define WRITEALL_PMD_X4_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_PMD_X4_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PMD_X4_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PMD_X4_MODE
 * BLOCKS:   PMD_X4
 * REGADDR:  0xc011
 * DESC:     PMD lane mode configuration
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LANE_MODE        Lane modeOnly used for Speed Control bypass operationBits 15:11 - Reserved.Bit  10    - cl72_en.Bit   9    - scrambler_disabled.Bit   8    - eee_mode_en.Bits  7:0  - speed_id.
 */
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_MODEr (0x0000c011 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PMD_X4_MODEr_SIZE 4

/*
 * This structure should be used to declare and program PMD_X4_MODE.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PMD_X4_MODEr_s {
	uint32_t v[1];
	uint32_t pmd_x4_mode[1];
	uint32_t _pmd_x4_mode;
} BCMI_TSCF_GEN3_XGXS_PMD_X4_MODEr_t;

#define BCMI_TSCF_GEN3_XGXS_PMD_X4_MODEr_CLR(r) (r).pmd_x4_mode[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_MODEr_SET(r,d) (r).pmd_x4_mode[0] = d
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_MODEr_GET(r) (r).pmd_x4_mode[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_MODEr_LANE_MODEf_GET(r) (((r).pmd_x4_mode[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_MODEr_LANE_MODEf_SET(r,f) (r).pmd_x4_mode[0]=(((r).pmd_x4_mode[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PMD_X4_MODE.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PMD_X4_MODEr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_MODEr,(_r._pmd_x4_mode))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PMD_X4_MODEr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_MODEr,(_r._pmd_x4_mode)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PMD_X4_MODEr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_MODEr,(_r._pmd_x4_mode))
#define BCMI_TSCF_GEN3_XGXS_READLN_PMD_X4_MODEr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_MODEr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pmd_x4_mode))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_PMD_X4_MODEr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_MODEr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pmd_x4_mode))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_PMD_X4_MODEr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_MODEr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._pmd_x4_mode))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_X4_MODEr BCMI_TSCF_GEN3_XGXS_PMD_X4_MODEr
#define PMD_X4_MODEr_SIZE BCMI_TSCF_GEN3_XGXS_PMD_X4_MODEr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PMD_X4_MODEr_t PMD_X4_MODEr_t;
#define PMD_X4_MODEr_CLR BCMI_TSCF_GEN3_XGXS_PMD_X4_MODEr_CLR
#define PMD_X4_MODEr_SET BCMI_TSCF_GEN3_XGXS_PMD_X4_MODEr_SET
#define PMD_X4_MODEr_GET BCMI_TSCF_GEN3_XGXS_PMD_X4_MODEr_GET
#define PMD_X4_MODEr_LANE_MODEf_GET BCMI_TSCF_GEN3_XGXS_PMD_X4_MODEr_LANE_MODEf_GET
#define PMD_X4_MODEr_LANE_MODEf_SET BCMI_TSCF_GEN3_XGXS_PMD_X4_MODEr_LANE_MODEf_SET
#define READ_PMD_X4_MODEr BCMI_TSCF_GEN3_XGXS_READ_PMD_X4_MODEr
#define WRITE_PMD_X4_MODEr BCMI_TSCF_GEN3_XGXS_WRITE_PMD_X4_MODEr
#define MODIFY_PMD_X4_MODEr BCMI_TSCF_GEN3_XGXS_MODIFY_PMD_X4_MODEr
#define READLN_PMD_X4_MODEr BCMI_TSCF_GEN3_XGXS_READLN_PMD_X4_MODEr
#define WRITELN_PMD_X4_MODEr BCMI_TSCF_GEN3_XGXS_WRITELN_PMD_X4_MODEr
#define WRITEALL_PMD_X4_MODEr BCMI_TSCF_GEN3_XGXS_WRITEALL_PMD_X4_MODEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PMD_X4_MODEr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PMD_X4_STS
 * BLOCKS:   PMD_X4
 * REGADDR:  0xc012
 * DESC:     PMD lane status
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     RX_LOCK_STS      DSC RX lock indication from PMD
 *     SIGNAL_DETECT_STS Signal Detect indication from PMD
 *     RX_CLK_VLD_STS   rx_clk_vld indication from PMD
 *     TX_CLK_VLD_STS   tx_clk_vld indication from PMD
 */
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_STSr (0x0000c012 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PMD_X4_STSr_SIZE 4

/*
 * This structure should be used to declare and program PMD_X4_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PMD_X4_STSr_s {
	uint32_t v[1];
	uint32_t pmd_x4_sts[1];
	uint32_t _pmd_x4_sts;
} BCMI_TSCF_GEN3_XGXS_PMD_X4_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_PMD_X4_STSr_CLR(r) (r).pmd_x4_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_STSr_SET(r,d) (r).pmd_x4_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_STSr_GET(r) (r).pmd_x4_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_STSr_TX_CLK_VLD_STSf_GET(r) ((((r).pmd_x4_sts[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_STSr_TX_CLK_VLD_STSf_SET(r,f) (r).pmd_x4_sts[0]=(((r).pmd_x4_sts[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_STSr_RX_CLK_VLD_STSf_GET(r) ((((r).pmd_x4_sts[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_STSr_RX_CLK_VLD_STSf_SET(r,f) (r).pmd_x4_sts[0]=(((r).pmd_x4_sts[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_STSr_SIGNAL_DETECT_STSf_GET(r) ((((r).pmd_x4_sts[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_STSr_SIGNAL_DETECT_STSf_SET(r,f) (r).pmd_x4_sts[0]=(((r).pmd_x4_sts[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_STSr_RX_LOCK_STSf_GET(r) (((r).pmd_x4_sts[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_STSr_RX_LOCK_STSf_SET(r,f) (r).pmd_x4_sts[0]=(((r).pmd_x4_sts[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access PMD_X4_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PMD_X4_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_STSr,(_r._pmd_x4_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PMD_X4_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_STSr,(_r._pmd_x4_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PMD_X4_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_STSr,(_r._pmd_x4_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_PMD_X4_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pmd_x4_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_PMD_X4_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pmd_x4_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_PMD_X4_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._pmd_x4_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_X4_STSr BCMI_TSCF_GEN3_XGXS_PMD_X4_STSr
#define PMD_X4_STSr_SIZE BCMI_TSCF_GEN3_XGXS_PMD_X4_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PMD_X4_STSr_t PMD_X4_STSr_t;
#define PMD_X4_STSr_CLR BCMI_TSCF_GEN3_XGXS_PMD_X4_STSr_CLR
#define PMD_X4_STSr_SET BCMI_TSCF_GEN3_XGXS_PMD_X4_STSr_SET
#define PMD_X4_STSr_GET BCMI_TSCF_GEN3_XGXS_PMD_X4_STSr_GET
#define PMD_X4_STSr_TX_CLK_VLD_STSf_GET BCMI_TSCF_GEN3_XGXS_PMD_X4_STSr_TX_CLK_VLD_STSf_GET
#define PMD_X4_STSr_TX_CLK_VLD_STSf_SET BCMI_TSCF_GEN3_XGXS_PMD_X4_STSr_TX_CLK_VLD_STSf_SET
#define PMD_X4_STSr_RX_CLK_VLD_STSf_GET BCMI_TSCF_GEN3_XGXS_PMD_X4_STSr_RX_CLK_VLD_STSf_GET
#define PMD_X4_STSr_RX_CLK_VLD_STSf_SET BCMI_TSCF_GEN3_XGXS_PMD_X4_STSr_RX_CLK_VLD_STSf_SET
#define PMD_X4_STSr_SIGNAL_DETECT_STSf_GET BCMI_TSCF_GEN3_XGXS_PMD_X4_STSr_SIGNAL_DETECT_STSf_GET
#define PMD_X4_STSr_SIGNAL_DETECT_STSf_SET BCMI_TSCF_GEN3_XGXS_PMD_X4_STSr_SIGNAL_DETECT_STSf_SET
#define PMD_X4_STSr_RX_LOCK_STSf_GET BCMI_TSCF_GEN3_XGXS_PMD_X4_STSr_RX_LOCK_STSf_GET
#define PMD_X4_STSr_RX_LOCK_STSf_SET BCMI_TSCF_GEN3_XGXS_PMD_X4_STSr_RX_LOCK_STSf_SET
#define READ_PMD_X4_STSr BCMI_TSCF_GEN3_XGXS_READ_PMD_X4_STSr
#define WRITE_PMD_X4_STSr BCMI_TSCF_GEN3_XGXS_WRITE_PMD_X4_STSr
#define MODIFY_PMD_X4_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_PMD_X4_STSr
#define READLN_PMD_X4_STSr BCMI_TSCF_GEN3_XGXS_READLN_PMD_X4_STSr
#define WRITELN_PMD_X4_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_PMD_X4_STSr
#define WRITEALL_PMD_X4_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_PMD_X4_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PMD_X4_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PMD_X4_LATCH_STS
 * BLOCKS:   PMD_X4
 * REGADDR:  0xc013
 * DESC:     PMD lane latched status
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RX_LOCK_LL       DSC RX lock indication from PMD negedge detected
 *     RX_LOCK_LH       DSC RX lock indication from PMD posedge detected
 *     SIGNAL_DETECT_LL Signal Detect indication from PMD negedge detected
 *     SIGNAL_DETECT_LH Signal Detect indication from PMD posedge detected
 *     RX_CLK_VLD_LL    rx_clk_vld indication from PMD negedge detected
 *     RX_CLK_VLD_LH    rx_clk_vld indication from PMD posedge detected
 *     RX_LOCK_LIVE     DSC RX lock live indication from PMDSame as the pmd_x4_status register field.
 *     SIGNAL_DETECT_LIVE Signal Detect live indication from PMDSame as the pmd_x4_status register field.
 *     RX_CLK_VLD_LIVE  rx_clk_vld live indication from PMDSame as the pmd_x4_status register field.
 */
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr (0x0000c013 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr_SIZE 4

/*
 * This structure should be used to declare and program PMD_X4_LATCH_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr_s {
	uint32_t v[1];
	uint32_t pmd_x4_latch_sts[1];
	uint32_t _pmd_x4_latch_sts;
} BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr_CLR(r) (r).pmd_x4_latch_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr_SET(r,d) (r).pmd_x4_latch_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr_GET(r) (r).pmd_x4_latch_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr_RX_CLK_VLD_LIVEf_GET(r) ((((r).pmd_x4_latch_sts[0]) >> 10) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr_RX_CLK_VLD_LIVEf_SET(r,f) (r).pmd_x4_latch_sts[0]=(((r).pmd_x4_latch_sts[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr_SIGNAL_DETECT_LIVEf_GET(r) ((((r).pmd_x4_latch_sts[0]) >> 9) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr_SIGNAL_DETECT_LIVEf_SET(r,f) (r).pmd_x4_latch_sts[0]=(((r).pmd_x4_latch_sts[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr_RX_LOCK_LIVEf_GET(r) ((((r).pmd_x4_latch_sts[0]) >> 8) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr_RX_LOCK_LIVEf_SET(r,f) (r).pmd_x4_latch_sts[0]=(((r).pmd_x4_latch_sts[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr_RX_CLK_VLD_LHf_GET(r) ((((r).pmd_x4_latch_sts[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr_RX_CLK_VLD_LHf_SET(r,f) (r).pmd_x4_latch_sts[0]=(((r).pmd_x4_latch_sts[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr_RX_CLK_VLD_LLf_GET(r) ((((r).pmd_x4_latch_sts[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr_RX_CLK_VLD_LLf_SET(r,f) (r).pmd_x4_latch_sts[0]=(((r).pmd_x4_latch_sts[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr_SIGNAL_DETECT_LHf_GET(r) ((((r).pmd_x4_latch_sts[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr_SIGNAL_DETECT_LHf_SET(r,f) (r).pmd_x4_latch_sts[0]=(((r).pmd_x4_latch_sts[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr_SIGNAL_DETECT_LLf_GET(r) ((((r).pmd_x4_latch_sts[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr_SIGNAL_DETECT_LLf_SET(r,f) (r).pmd_x4_latch_sts[0]=(((r).pmd_x4_latch_sts[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr_RX_LOCK_LHf_GET(r) ((((r).pmd_x4_latch_sts[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr_RX_LOCK_LHf_SET(r,f) (r).pmd_x4_latch_sts[0]=(((r).pmd_x4_latch_sts[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr_RX_LOCK_LLf_GET(r) (((r).pmd_x4_latch_sts[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr_RX_LOCK_LLf_SET(r,f) (r).pmd_x4_latch_sts[0]=(((r).pmd_x4_latch_sts[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access PMD_X4_LATCH_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PMD_X4_LATCH_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr,(_r._pmd_x4_latch_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PMD_X4_LATCH_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr,(_r._pmd_x4_latch_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PMD_X4_LATCH_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr,(_r._pmd_x4_latch_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_PMD_X4_LATCH_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pmd_x4_latch_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_PMD_X4_LATCH_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pmd_x4_latch_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_PMD_X4_LATCH_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._pmd_x4_latch_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_X4_LATCH_STSr BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr
#define PMD_X4_LATCH_STSr_SIZE BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr_t PMD_X4_LATCH_STSr_t;
#define PMD_X4_LATCH_STSr_CLR BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr_CLR
#define PMD_X4_LATCH_STSr_SET BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr_SET
#define PMD_X4_LATCH_STSr_GET BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr_GET
#define PMD_X4_LATCH_STSr_RX_CLK_VLD_LIVEf_GET BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr_RX_CLK_VLD_LIVEf_GET
#define PMD_X4_LATCH_STSr_RX_CLK_VLD_LIVEf_SET BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr_RX_CLK_VLD_LIVEf_SET
#define PMD_X4_LATCH_STSr_SIGNAL_DETECT_LIVEf_GET BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr_SIGNAL_DETECT_LIVEf_GET
#define PMD_X4_LATCH_STSr_SIGNAL_DETECT_LIVEf_SET BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr_SIGNAL_DETECT_LIVEf_SET
#define PMD_X4_LATCH_STSr_RX_LOCK_LIVEf_GET BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr_RX_LOCK_LIVEf_GET
#define PMD_X4_LATCH_STSr_RX_LOCK_LIVEf_SET BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr_RX_LOCK_LIVEf_SET
#define PMD_X4_LATCH_STSr_RX_CLK_VLD_LHf_GET BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr_RX_CLK_VLD_LHf_GET
#define PMD_X4_LATCH_STSr_RX_CLK_VLD_LHf_SET BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr_RX_CLK_VLD_LHf_SET
#define PMD_X4_LATCH_STSr_RX_CLK_VLD_LLf_GET BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr_RX_CLK_VLD_LLf_GET
#define PMD_X4_LATCH_STSr_RX_CLK_VLD_LLf_SET BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr_RX_CLK_VLD_LLf_SET
#define PMD_X4_LATCH_STSr_SIGNAL_DETECT_LHf_GET BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr_SIGNAL_DETECT_LHf_GET
#define PMD_X4_LATCH_STSr_SIGNAL_DETECT_LHf_SET BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr_SIGNAL_DETECT_LHf_SET
#define PMD_X4_LATCH_STSr_SIGNAL_DETECT_LLf_GET BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr_SIGNAL_DETECT_LLf_GET
#define PMD_X4_LATCH_STSr_SIGNAL_DETECT_LLf_SET BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr_SIGNAL_DETECT_LLf_SET
#define PMD_X4_LATCH_STSr_RX_LOCK_LHf_GET BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr_RX_LOCK_LHf_GET
#define PMD_X4_LATCH_STSr_RX_LOCK_LHf_SET BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr_RX_LOCK_LHf_SET
#define PMD_X4_LATCH_STSr_RX_LOCK_LLf_GET BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr_RX_LOCK_LLf_GET
#define PMD_X4_LATCH_STSr_RX_LOCK_LLf_SET BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr_RX_LOCK_LLf_SET
#define READ_PMD_X4_LATCH_STSr BCMI_TSCF_GEN3_XGXS_READ_PMD_X4_LATCH_STSr
#define WRITE_PMD_X4_LATCH_STSr BCMI_TSCF_GEN3_XGXS_WRITE_PMD_X4_LATCH_STSr
#define MODIFY_PMD_X4_LATCH_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_PMD_X4_LATCH_STSr
#define READLN_PMD_X4_LATCH_STSr BCMI_TSCF_GEN3_XGXS_READLN_PMD_X4_LATCH_STSr
#define WRITELN_PMD_X4_LATCH_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_PMD_X4_LATCH_STSr
#define WRITEALL_PMD_X4_LATCH_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_PMD_X4_LATCH_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PMD_X4_LATCH_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PMD_X4_OVRR
 * BLOCKS:   PMD_X4
 * REGADDR:  0xc014
 * DESC:     PMD lane override
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RX_LOCK_OVRD     Override for DSC RX lock indication from PMD
 *     SIGNAL_DETECT_OVRD Override for Signal Detect indication from PMD
 *     RX_CLK_VLD_OVRD  Override rx_clk_vld indication from PMD
 *     LANE_MODE_OEN    Lane mode override enable
 *     OSR_MODE_OEN     OSR mode, overrideOnly used for Speed Control bypass operation
 *     TX_DISABLE_OEN   tx_disable override enableOnly used for Speed Control bypass operation and local loopback.
 *     LN_DP_H_RSTB_OEN PMD Lane Datapath reset override enableOnly used for Speed Control bypass operation
 *     TX_CLK_VLD_OVRD  Override tx_clk_vld indication from PMD
 */
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_OVRRr (0x0000c014 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PMD_X4_OVRRr_SIZE 4

/*
 * This structure should be used to declare and program PMD_X4_OVRR.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PMD_X4_OVRRr_s {
	uint32_t v[1];
	uint32_t pmd_x4_ovrr[1];
	uint32_t _pmd_x4_ovrr;
} BCMI_TSCF_GEN3_XGXS_PMD_X4_OVRRr_t;

#define BCMI_TSCF_GEN3_XGXS_PMD_X4_OVRRr_CLR(r) (r).pmd_x4_ovrr[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_OVRRr_SET(r,d) (r).pmd_x4_ovrr[0] = d
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_OVRRr_GET(r) (r).pmd_x4_ovrr[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_OVRRr_TX_CLK_VLD_OVRDf_GET(r) ((((r).pmd_x4_ovrr[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_OVRRr_TX_CLK_VLD_OVRDf_SET(r,f) (r).pmd_x4_ovrr[0]=(((r).pmd_x4_ovrr[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_OVRRr_LN_DP_H_RSTB_OENf_GET(r) ((((r).pmd_x4_ovrr[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_OVRRr_LN_DP_H_RSTB_OENf_SET(r,f) (r).pmd_x4_ovrr[0]=(((r).pmd_x4_ovrr[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_OVRRr_TX_DISABLE_OENf_GET(r) ((((r).pmd_x4_ovrr[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_OVRRr_TX_DISABLE_OENf_SET(r,f) (r).pmd_x4_ovrr[0]=(((r).pmd_x4_ovrr[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_OVRRr_OSR_MODE_OENf_GET(r) ((((r).pmd_x4_ovrr[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_OVRRr_OSR_MODE_OENf_SET(r,f) (r).pmd_x4_ovrr[0]=(((r).pmd_x4_ovrr[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_OVRRr_LANE_MODE_OENf_GET(r) ((((r).pmd_x4_ovrr[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_OVRRr_LANE_MODE_OENf_SET(r,f) (r).pmd_x4_ovrr[0]=(((r).pmd_x4_ovrr[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_OVRRr_RX_CLK_VLD_OVRDf_GET(r) ((((r).pmd_x4_ovrr[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_OVRRr_RX_CLK_VLD_OVRDf_SET(r,f) (r).pmd_x4_ovrr[0]=(((r).pmd_x4_ovrr[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_OVRRr_SIGNAL_DETECT_OVRDf_GET(r) ((((r).pmd_x4_ovrr[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_OVRRr_SIGNAL_DETECT_OVRDf_SET(r,f) (r).pmd_x4_ovrr[0]=(((r).pmd_x4_ovrr[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_OVRRr_RX_LOCK_OVRDf_GET(r) (((r).pmd_x4_ovrr[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_OVRRr_RX_LOCK_OVRDf_SET(r,f) (r).pmd_x4_ovrr[0]=(((r).pmd_x4_ovrr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access PMD_X4_OVRR.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PMD_X4_OVRRr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_OVRRr,(_r._pmd_x4_ovrr))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PMD_X4_OVRRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_OVRRr,(_r._pmd_x4_ovrr)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PMD_X4_OVRRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_OVRRr,(_r._pmd_x4_ovrr))
#define BCMI_TSCF_GEN3_XGXS_READLN_PMD_X4_OVRRr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_OVRRr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pmd_x4_ovrr))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_PMD_X4_OVRRr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_OVRRr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pmd_x4_ovrr))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_PMD_X4_OVRRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_OVRRr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._pmd_x4_ovrr))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_X4_OVRRr BCMI_TSCF_GEN3_XGXS_PMD_X4_OVRRr
#define PMD_X4_OVRRr_SIZE BCMI_TSCF_GEN3_XGXS_PMD_X4_OVRRr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PMD_X4_OVRRr_t PMD_X4_OVRRr_t;
#define PMD_X4_OVRRr_CLR BCMI_TSCF_GEN3_XGXS_PMD_X4_OVRRr_CLR
#define PMD_X4_OVRRr_SET BCMI_TSCF_GEN3_XGXS_PMD_X4_OVRRr_SET
#define PMD_X4_OVRRr_GET BCMI_TSCF_GEN3_XGXS_PMD_X4_OVRRr_GET
#define PMD_X4_OVRRr_TX_CLK_VLD_OVRDf_GET BCMI_TSCF_GEN3_XGXS_PMD_X4_OVRRr_TX_CLK_VLD_OVRDf_GET
#define PMD_X4_OVRRr_TX_CLK_VLD_OVRDf_SET BCMI_TSCF_GEN3_XGXS_PMD_X4_OVRRr_TX_CLK_VLD_OVRDf_SET
#define PMD_X4_OVRRr_LN_DP_H_RSTB_OENf_GET BCMI_TSCF_GEN3_XGXS_PMD_X4_OVRRr_LN_DP_H_RSTB_OENf_GET
#define PMD_X4_OVRRr_LN_DP_H_RSTB_OENf_SET BCMI_TSCF_GEN3_XGXS_PMD_X4_OVRRr_LN_DP_H_RSTB_OENf_SET
#define PMD_X4_OVRRr_TX_DISABLE_OENf_GET BCMI_TSCF_GEN3_XGXS_PMD_X4_OVRRr_TX_DISABLE_OENf_GET
#define PMD_X4_OVRRr_TX_DISABLE_OENf_SET BCMI_TSCF_GEN3_XGXS_PMD_X4_OVRRr_TX_DISABLE_OENf_SET
#define PMD_X4_OVRRr_OSR_MODE_OENf_GET BCMI_TSCF_GEN3_XGXS_PMD_X4_OVRRr_OSR_MODE_OENf_GET
#define PMD_X4_OVRRr_OSR_MODE_OENf_SET BCMI_TSCF_GEN3_XGXS_PMD_X4_OVRRr_OSR_MODE_OENf_SET
#define PMD_X4_OVRRr_LANE_MODE_OENf_GET BCMI_TSCF_GEN3_XGXS_PMD_X4_OVRRr_LANE_MODE_OENf_GET
#define PMD_X4_OVRRr_LANE_MODE_OENf_SET BCMI_TSCF_GEN3_XGXS_PMD_X4_OVRRr_LANE_MODE_OENf_SET
#define PMD_X4_OVRRr_RX_CLK_VLD_OVRDf_GET BCMI_TSCF_GEN3_XGXS_PMD_X4_OVRRr_RX_CLK_VLD_OVRDf_GET
#define PMD_X4_OVRRr_RX_CLK_VLD_OVRDf_SET BCMI_TSCF_GEN3_XGXS_PMD_X4_OVRRr_RX_CLK_VLD_OVRDf_SET
#define PMD_X4_OVRRr_SIGNAL_DETECT_OVRDf_GET BCMI_TSCF_GEN3_XGXS_PMD_X4_OVRRr_SIGNAL_DETECT_OVRDf_GET
#define PMD_X4_OVRRr_SIGNAL_DETECT_OVRDf_SET BCMI_TSCF_GEN3_XGXS_PMD_X4_OVRRr_SIGNAL_DETECT_OVRDf_SET
#define PMD_X4_OVRRr_RX_LOCK_OVRDf_GET BCMI_TSCF_GEN3_XGXS_PMD_X4_OVRRr_RX_LOCK_OVRDf_GET
#define PMD_X4_OVRRr_RX_LOCK_OVRDf_SET BCMI_TSCF_GEN3_XGXS_PMD_X4_OVRRr_RX_LOCK_OVRDf_SET
#define READ_PMD_X4_OVRRr BCMI_TSCF_GEN3_XGXS_READ_PMD_X4_OVRRr
#define WRITE_PMD_X4_OVRRr BCMI_TSCF_GEN3_XGXS_WRITE_PMD_X4_OVRRr
#define MODIFY_PMD_X4_OVRRr BCMI_TSCF_GEN3_XGXS_MODIFY_PMD_X4_OVRRr
#define READLN_PMD_X4_OVRRr BCMI_TSCF_GEN3_XGXS_READLN_PMD_X4_OVRRr
#define WRITELN_PMD_X4_OVRRr BCMI_TSCF_GEN3_XGXS_WRITELN_PMD_X4_OVRRr
#define WRITEALL_PMD_X4_OVRRr BCMI_TSCF_GEN3_XGXS_WRITEALL_PMD_X4_OVRRr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PMD_X4_OVRRr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PMD_X4_EEE_CTL
 * BLOCKS:   PMD_X4
 * REGADDR:  0xc018
 * DESC:     PMD lane eee controls
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TX_MODE          EEE tx low power modeEEE low power operation is not supported by TSC
 *     RX_MODE          EEE rx low power modeEEE low power operation is not supported by TSC
 */
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_EEE_CTLr (0x0000c018 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PMD_X4_EEE_CTLr_SIZE 4

/*
 * This structure should be used to declare and program PMD_X4_EEE_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PMD_X4_EEE_CTLr_s {
	uint32_t v[1];
	uint32_t pmd_x4_eee_ctl[1];
	uint32_t _pmd_x4_eee_ctl;
} BCMI_TSCF_GEN3_XGXS_PMD_X4_EEE_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_PMD_X4_EEE_CTLr_CLR(r) (r).pmd_x4_eee_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_EEE_CTLr_SET(r,d) (r).pmd_x4_eee_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_EEE_CTLr_GET(r) (r).pmd_x4_eee_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_EEE_CTLr_RX_MODEf_GET(r) ((((r).pmd_x4_eee_ctl[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_EEE_CTLr_RX_MODEf_SET(r,f) (r).pmd_x4_eee_ctl[0]=(((r).pmd_x4_eee_ctl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_EEE_CTLr_TX_MODEf_GET(r) (((r).pmd_x4_eee_ctl[0]) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_EEE_CTLr_TX_MODEf_SET(r,f) (r).pmd_x4_eee_ctl[0]=(((r).pmd_x4_eee_ctl[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access PMD_X4_EEE_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PMD_X4_EEE_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_EEE_CTLr,(_r._pmd_x4_eee_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PMD_X4_EEE_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_EEE_CTLr,(_r._pmd_x4_eee_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PMD_X4_EEE_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_EEE_CTLr,(_r._pmd_x4_eee_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_PMD_X4_EEE_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_EEE_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pmd_x4_eee_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_PMD_X4_EEE_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_EEE_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pmd_x4_eee_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_PMD_X4_EEE_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_EEE_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._pmd_x4_eee_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_X4_EEE_CTLr BCMI_TSCF_GEN3_XGXS_PMD_X4_EEE_CTLr
#define PMD_X4_EEE_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_PMD_X4_EEE_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PMD_X4_EEE_CTLr_t PMD_X4_EEE_CTLr_t;
#define PMD_X4_EEE_CTLr_CLR BCMI_TSCF_GEN3_XGXS_PMD_X4_EEE_CTLr_CLR
#define PMD_X4_EEE_CTLr_SET BCMI_TSCF_GEN3_XGXS_PMD_X4_EEE_CTLr_SET
#define PMD_X4_EEE_CTLr_GET BCMI_TSCF_GEN3_XGXS_PMD_X4_EEE_CTLr_GET
#define PMD_X4_EEE_CTLr_RX_MODEf_GET BCMI_TSCF_GEN3_XGXS_PMD_X4_EEE_CTLr_RX_MODEf_GET
#define PMD_X4_EEE_CTLr_RX_MODEf_SET BCMI_TSCF_GEN3_XGXS_PMD_X4_EEE_CTLr_RX_MODEf_SET
#define PMD_X4_EEE_CTLr_TX_MODEf_GET BCMI_TSCF_GEN3_XGXS_PMD_X4_EEE_CTLr_TX_MODEf_GET
#define PMD_X4_EEE_CTLr_TX_MODEf_SET BCMI_TSCF_GEN3_XGXS_PMD_X4_EEE_CTLr_TX_MODEf_SET
#define READ_PMD_X4_EEE_CTLr BCMI_TSCF_GEN3_XGXS_READ_PMD_X4_EEE_CTLr
#define WRITE_PMD_X4_EEE_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_PMD_X4_EEE_CTLr
#define MODIFY_PMD_X4_EEE_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_PMD_X4_EEE_CTLr
#define READLN_PMD_X4_EEE_CTLr BCMI_TSCF_GEN3_XGXS_READLN_PMD_X4_EEE_CTLr
#define WRITELN_PMD_X4_EEE_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_PMD_X4_EEE_CTLr
#define WRITEALL_PMD_X4_EEE_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_PMD_X4_EEE_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PMD_X4_EEE_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PMD_X4_EEE_STS
 * BLOCKS:   PMD_X4
 * REGADDR:  0xc019
 * DESC:     PMD lane eee status
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     ENERGY_DETECT    EEE Energy detection indication from PMDEEE low power operation is not supported by TSC
 */
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_EEE_STSr (0x0000c019 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PMD_X4_EEE_STSr_SIZE 4

/*
 * This structure should be used to declare and program PMD_X4_EEE_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PMD_X4_EEE_STSr_s {
	uint32_t v[1];
	uint32_t pmd_x4_eee_sts[1];
	uint32_t _pmd_x4_eee_sts;
} BCMI_TSCF_GEN3_XGXS_PMD_X4_EEE_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_PMD_X4_EEE_STSr_CLR(r) (r).pmd_x4_eee_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_EEE_STSr_SET(r,d) (r).pmd_x4_eee_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_EEE_STSr_GET(r) (r).pmd_x4_eee_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_EEE_STSr_ENERGY_DETECTf_GET(r) (((r).pmd_x4_eee_sts[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_EEE_STSr_ENERGY_DETECTf_SET(r,f) (r).pmd_x4_eee_sts[0]=(((r).pmd_x4_eee_sts[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access PMD_X4_EEE_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PMD_X4_EEE_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_EEE_STSr,(_r._pmd_x4_eee_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PMD_X4_EEE_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_EEE_STSr,(_r._pmd_x4_eee_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PMD_X4_EEE_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_EEE_STSr,(_r._pmd_x4_eee_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_PMD_X4_EEE_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_EEE_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pmd_x4_eee_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_PMD_X4_EEE_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_EEE_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pmd_x4_eee_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_PMD_X4_EEE_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_EEE_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._pmd_x4_eee_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_X4_EEE_STSr BCMI_TSCF_GEN3_XGXS_PMD_X4_EEE_STSr
#define PMD_X4_EEE_STSr_SIZE BCMI_TSCF_GEN3_XGXS_PMD_X4_EEE_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PMD_X4_EEE_STSr_t PMD_X4_EEE_STSr_t;
#define PMD_X4_EEE_STSr_CLR BCMI_TSCF_GEN3_XGXS_PMD_X4_EEE_STSr_CLR
#define PMD_X4_EEE_STSr_SET BCMI_TSCF_GEN3_XGXS_PMD_X4_EEE_STSr_SET
#define PMD_X4_EEE_STSr_GET BCMI_TSCF_GEN3_XGXS_PMD_X4_EEE_STSr_GET
#define PMD_X4_EEE_STSr_ENERGY_DETECTf_GET BCMI_TSCF_GEN3_XGXS_PMD_X4_EEE_STSr_ENERGY_DETECTf_GET
#define PMD_X4_EEE_STSr_ENERGY_DETECTf_SET BCMI_TSCF_GEN3_XGXS_PMD_X4_EEE_STSr_ENERGY_DETECTf_SET
#define READ_PMD_X4_EEE_STSr BCMI_TSCF_GEN3_XGXS_READ_PMD_X4_EEE_STSr
#define WRITE_PMD_X4_EEE_STSr BCMI_TSCF_GEN3_XGXS_WRITE_PMD_X4_EEE_STSr
#define MODIFY_PMD_X4_EEE_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_PMD_X4_EEE_STSr
#define READLN_PMD_X4_EEE_STSr BCMI_TSCF_GEN3_XGXS_READLN_PMD_X4_EEE_STSr
#define WRITELN_PMD_X4_EEE_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_PMD_X4_EEE_STSr
#define WRITEALL_PMD_X4_EEE_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_PMD_X4_EEE_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PMD_X4_EEE_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PMD_X4_UI_VALUE_HI
 * BLOCKS:   PMD_X4
 * REGADDR:  0xc01a
 * DESC:     PMD lane bit-time in fractional nanoseconds, upper.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     UI_FRAC_M1_TO_M16 PMD lane bit-time in fractional nanoseconds, upper bitsMost significant 16 bits. 2^ minus1 down to 2^ minus16bit 15 is 0.5, bit 14 is 0.25 and so on.
 */
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_UI_VALUE_HIr (0x0000c01a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PMD_X4_UI_VALUE_HIr_SIZE 4

/*
 * This structure should be used to declare and program PMD_X4_UI_VALUE_HI.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PMD_X4_UI_VALUE_HIr_s {
	uint32_t v[1];
	uint32_t pmd_x4_ui_value_hi[1];
	uint32_t _pmd_x4_ui_value_hi;
} BCMI_TSCF_GEN3_XGXS_PMD_X4_UI_VALUE_HIr_t;

#define BCMI_TSCF_GEN3_XGXS_PMD_X4_UI_VALUE_HIr_CLR(r) (r).pmd_x4_ui_value_hi[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_UI_VALUE_HIr_SET(r,d) (r).pmd_x4_ui_value_hi[0] = d
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_UI_VALUE_HIr_GET(r) (r).pmd_x4_ui_value_hi[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_UI_VALUE_HIr_UI_FRAC_M1_TO_M16f_GET(r) (((r).pmd_x4_ui_value_hi[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_UI_VALUE_HIr_UI_FRAC_M1_TO_M16f_SET(r,f) (r).pmd_x4_ui_value_hi[0]=(((r).pmd_x4_ui_value_hi[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PMD_X4_UI_VALUE_HI.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PMD_X4_UI_VALUE_HIr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_UI_VALUE_HIr,(_r._pmd_x4_ui_value_hi))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PMD_X4_UI_VALUE_HIr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_UI_VALUE_HIr,(_r._pmd_x4_ui_value_hi)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PMD_X4_UI_VALUE_HIr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_UI_VALUE_HIr,(_r._pmd_x4_ui_value_hi))
#define BCMI_TSCF_GEN3_XGXS_READLN_PMD_X4_UI_VALUE_HIr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_UI_VALUE_HIr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pmd_x4_ui_value_hi))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_PMD_X4_UI_VALUE_HIr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_UI_VALUE_HIr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pmd_x4_ui_value_hi))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_PMD_X4_UI_VALUE_HIr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_UI_VALUE_HIr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._pmd_x4_ui_value_hi))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_X4_UI_VALUE_HIr BCMI_TSCF_GEN3_XGXS_PMD_X4_UI_VALUE_HIr
#define PMD_X4_UI_VALUE_HIr_SIZE BCMI_TSCF_GEN3_XGXS_PMD_X4_UI_VALUE_HIr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PMD_X4_UI_VALUE_HIr_t PMD_X4_UI_VALUE_HIr_t;
#define PMD_X4_UI_VALUE_HIr_CLR BCMI_TSCF_GEN3_XGXS_PMD_X4_UI_VALUE_HIr_CLR
#define PMD_X4_UI_VALUE_HIr_SET BCMI_TSCF_GEN3_XGXS_PMD_X4_UI_VALUE_HIr_SET
#define PMD_X4_UI_VALUE_HIr_GET BCMI_TSCF_GEN3_XGXS_PMD_X4_UI_VALUE_HIr_GET
#define PMD_X4_UI_VALUE_HIr_UI_FRAC_M1_TO_M16f_GET BCMI_TSCF_GEN3_XGXS_PMD_X4_UI_VALUE_HIr_UI_FRAC_M1_TO_M16f_GET
#define PMD_X4_UI_VALUE_HIr_UI_FRAC_M1_TO_M16f_SET BCMI_TSCF_GEN3_XGXS_PMD_X4_UI_VALUE_HIr_UI_FRAC_M1_TO_M16f_SET
#define READ_PMD_X4_UI_VALUE_HIr BCMI_TSCF_GEN3_XGXS_READ_PMD_X4_UI_VALUE_HIr
#define WRITE_PMD_X4_UI_VALUE_HIr BCMI_TSCF_GEN3_XGXS_WRITE_PMD_X4_UI_VALUE_HIr
#define MODIFY_PMD_X4_UI_VALUE_HIr BCMI_TSCF_GEN3_XGXS_MODIFY_PMD_X4_UI_VALUE_HIr
#define READLN_PMD_X4_UI_VALUE_HIr BCMI_TSCF_GEN3_XGXS_READLN_PMD_X4_UI_VALUE_HIr
#define WRITELN_PMD_X4_UI_VALUE_HIr BCMI_TSCF_GEN3_XGXS_WRITELN_PMD_X4_UI_VALUE_HIr
#define WRITEALL_PMD_X4_UI_VALUE_HIr BCMI_TSCF_GEN3_XGXS_WRITEALL_PMD_X4_UI_VALUE_HIr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PMD_X4_UI_VALUE_HIr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PMD_X4_UI_VALUE_LO
 * BLOCKS:   PMD_X4
 * REGADDR:  0xc01b
 * DESC:     PMD lane bit-time in fractional nanoseconds, lower.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     UI_FRAC_M17_TO_M25 PMD lane bit-time in fractional nanoseconds, lower bitsLeast significant 7 bits.bit 15 is 2^ minus17, bit 7 is 2^ minus25.
 */
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_UI_VALUE_LOr (0x0000c01b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PMD_X4_UI_VALUE_LOr_SIZE 4

/*
 * This structure should be used to declare and program PMD_X4_UI_VALUE_LO.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PMD_X4_UI_VALUE_LOr_s {
	uint32_t v[1];
	uint32_t pmd_x4_ui_value_lo[1];
	uint32_t _pmd_x4_ui_value_lo;
} BCMI_TSCF_GEN3_XGXS_PMD_X4_UI_VALUE_LOr_t;

#define BCMI_TSCF_GEN3_XGXS_PMD_X4_UI_VALUE_LOr_CLR(r) (r).pmd_x4_ui_value_lo[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_UI_VALUE_LOr_SET(r,d) (r).pmd_x4_ui_value_lo[0] = d
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_UI_VALUE_LOr_GET(r) (r).pmd_x4_ui_value_lo[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_UI_VALUE_LOr_UI_FRAC_M17_TO_M25f_GET(r) ((((r).pmd_x4_ui_value_lo[0]) >> 7) & 0x1ff)
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_UI_VALUE_LOr_UI_FRAC_M17_TO_M25f_SET(r,f) (r).pmd_x4_ui_value_lo[0]=(((r).pmd_x4_ui_value_lo[0] & ~((uint32_t)0x1ff << 7)) | ((((uint32_t)f) & 0x1ff) << 7)) | (511 << (16 + 7))

/*
 * These macros can be used to access PMD_X4_UI_VALUE_LO.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PMD_X4_UI_VALUE_LOr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_UI_VALUE_LOr,(_r._pmd_x4_ui_value_lo))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PMD_X4_UI_VALUE_LOr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_UI_VALUE_LOr,(_r._pmd_x4_ui_value_lo)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PMD_X4_UI_VALUE_LOr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_UI_VALUE_LOr,(_r._pmd_x4_ui_value_lo))
#define BCMI_TSCF_GEN3_XGXS_READLN_PMD_X4_UI_VALUE_LOr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_UI_VALUE_LOr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pmd_x4_ui_value_lo))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_PMD_X4_UI_VALUE_LOr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_UI_VALUE_LOr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pmd_x4_ui_value_lo))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_PMD_X4_UI_VALUE_LOr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_UI_VALUE_LOr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._pmd_x4_ui_value_lo))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_X4_UI_VALUE_LOr BCMI_TSCF_GEN3_XGXS_PMD_X4_UI_VALUE_LOr
#define PMD_X4_UI_VALUE_LOr_SIZE BCMI_TSCF_GEN3_XGXS_PMD_X4_UI_VALUE_LOr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PMD_X4_UI_VALUE_LOr_t PMD_X4_UI_VALUE_LOr_t;
#define PMD_X4_UI_VALUE_LOr_CLR BCMI_TSCF_GEN3_XGXS_PMD_X4_UI_VALUE_LOr_CLR
#define PMD_X4_UI_VALUE_LOr_SET BCMI_TSCF_GEN3_XGXS_PMD_X4_UI_VALUE_LOr_SET
#define PMD_X4_UI_VALUE_LOr_GET BCMI_TSCF_GEN3_XGXS_PMD_X4_UI_VALUE_LOr_GET
#define PMD_X4_UI_VALUE_LOr_UI_FRAC_M17_TO_M25f_GET BCMI_TSCF_GEN3_XGXS_PMD_X4_UI_VALUE_LOr_UI_FRAC_M17_TO_M25f_GET
#define PMD_X4_UI_VALUE_LOr_UI_FRAC_M17_TO_M25f_SET BCMI_TSCF_GEN3_XGXS_PMD_X4_UI_VALUE_LOr_UI_FRAC_M17_TO_M25f_SET
#define READ_PMD_X4_UI_VALUE_LOr BCMI_TSCF_GEN3_XGXS_READ_PMD_X4_UI_VALUE_LOr
#define WRITE_PMD_X4_UI_VALUE_LOr BCMI_TSCF_GEN3_XGXS_WRITE_PMD_X4_UI_VALUE_LOr
#define MODIFY_PMD_X4_UI_VALUE_LOr BCMI_TSCF_GEN3_XGXS_MODIFY_PMD_X4_UI_VALUE_LOr
#define READLN_PMD_X4_UI_VALUE_LOr BCMI_TSCF_GEN3_XGXS_READLN_PMD_X4_UI_VALUE_LOr
#define WRITELN_PMD_X4_UI_VALUE_LOr BCMI_TSCF_GEN3_XGXS_WRITELN_PMD_X4_UI_VALUE_LOr
#define WRITEALL_PMD_X4_UI_VALUE_LOr BCMI_TSCF_GEN3_XGXS_WRITEALL_PMD_X4_UI_VALUE_LOr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PMD_X4_UI_VALUE_LOr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PMD_X4_PMD_TX_FIXED_LATENCY
 * BLOCKS:   PMD_X4
 * REGADDR:  0xc01c
 * DESC:     PMD Transmit Fixed Latency value in nanoseconds
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     PMD_TX_LATENCY_FRAC_NS Fractional Part of PMA transmit Fixed latency in nanoseconds(i.e PMD tx latency(frac_ns) + Tx Skew adjustment(frac_ns))..Signed 2s complement value as an extension of pmd_tx_latency_int_ns.bit 9 represents 2^minus1, bit 8 represents 2^minus2 and so on.In CL82 & CL48 speeds, this register can also be used to program the Tx skew adjustment for the lane, after accounting for lane swap.In Functional Tx PMA Snapshot mode, after determining the tx skew adjustment for each lane based on the reference lane,the S/W can program the Sub_Ns part of tx skew adjustmentin this register to align the timestamping point to the earliest or latest transmit lane.
 *     PMD_TX_LATENCY_INT_NS Integral Part of PMA transmit Fixed latency in nanoseconds(i.e PMD tx latency(integer) + Tx Skew adjustment(integer)).Signed 2s complement value needed. HW will sign-extend to 48 bits.The scheme of adjusting the Transmit Timestamp based on the Tx skew is OPTIONAL.In CL82 & CL48 speeds, this register can also be used to program the Tx skew adjustment for the lane, after accounting for lane swap.In Functional Tx PMA Snapshot mode: GlasTest_ActData_0_type provides the PMA bit count and GlasTest_ActAdj[7:0] has the Glas Adjust value.For Lane i, Tx_PMA_Count[i] = {GlasTest_ActData_0_type[i], GlasTest_ActAdj[i]};The absolute value of Tx PMA Count in terms of Nano-seconds and Sub-Ns is determined by the following formula.For Lane i, Tx_PMA_lane_abs_dly[i] = (GlasTest_ActData_0_type[i] * UI) +  (GlasTest_ActAdj[i] * fclk_period) ;Described below is the SW Algorithm for deriving Tx skew adjustment of 1588 TX timestamp.----------------------------------------------------------------------------------------Tx Lane PMA Count{GlasTest_ActData_0_type, GlasTest_ActAdj[7:0]} in terms of Ns and Sub-NsThe lane having the highest PMA Count is the earliest transmit lane and vice-versa----------------------------------------------------------------------------------------REFERENCE lane Selection..The reference_lane could be Earliest or Latest.----------------------------------------------------------------------------------------Tx Skew DELTA calculation.....In CL82 and CL48 modes,..For lane i, tx_skew_delta[i] = Tx_PMA_lane_abs_dly[i] - Tx_PMA_lane_abs_dly[reference_lane].If tx_skew_delta > 2048UI[in terms of (ns, Sub-ns)], then it indiacates Tx_PMA_lane_abs_dly[reference_lane] has rolled over,so add 4096UI(ns, sub-ns) to the Tx_PMA_lane_abs_dly[reference_lane] entry to find the deltaIf tx_skew_delta < -2048UI[in terms of (ns, Sub-ns)], then it indicates Tx_PMA_lane_abs_dly[i] has rolled over,so add 4096UI(ns, sub-ns) to the Tx_PMA_lane_abs_dly[i] entry to find the delta.----------------------------------------------------------------------------------------Tx Skew Adjustment calculation......In CL82 and CL48 modes, the tx skew adjustment is in terms of Ns and Sub_Ns,....for lane i, tx skew adjustment is the tx_skew_value[i] represented in 2's format to be added to PMD tx latency number--------------------------------------------------------------------------------------------The S/W can then program the Ns part of the tx skew adjustmentin this register to align the timestamping point to the earliest or latest transmit lane.
 */
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_TX_FIXED_LATENCYr (0x0000c01c | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_TX_FIXED_LATENCYr_SIZE 4

/*
 * This structure should be used to declare and program PMD_X4_PMD_TX_FIXED_LATENCY.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_TX_FIXED_LATENCYr_s {
	uint32_t v[1];
	uint32_t pmd_x4_pmd_tx_fixed_latency[1];
	uint32_t _pmd_x4_pmd_tx_fixed_latency;
} BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_TX_FIXED_LATENCYr_t;

#define BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_TX_FIXED_LATENCYr_CLR(r) (r).pmd_x4_pmd_tx_fixed_latency[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_TX_FIXED_LATENCYr_SET(r,d) (r).pmd_x4_pmd_tx_fixed_latency[0] = d
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_TX_FIXED_LATENCYr_GET(r) (r).pmd_x4_pmd_tx_fixed_latency[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_TX_FIXED_LATENCYr_PMD_TX_LATENCY_INT_NSf_GET(r) ((((r).pmd_x4_pmd_tx_fixed_latency[0]) >> 10) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_TX_FIXED_LATENCYr_PMD_TX_LATENCY_INT_NSf_SET(r,f) (r).pmd_x4_pmd_tx_fixed_latency[0]=(((r).pmd_x4_pmd_tx_fixed_latency[0] & ~((uint32_t)0x3f << 10)) | ((((uint32_t)f) & 0x3f) << 10)) | (63 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_TX_FIXED_LATENCYr_PMD_TX_LATENCY_FRAC_NSf_GET(r) (((r).pmd_x4_pmd_tx_fixed_latency[0]) & 0x3ff)
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_TX_FIXED_LATENCYr_PMD_TX_LATENCY_FRAC_NSf_SET(r,f) (r).pmd_x4_pmd_tx_fixed_latency[0]=(((r).pmd_x4_pmd_tx_fixed_latency[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff)) | (0x3ff << 16)

/*
 * These macros can be used to access PMD_X4_PMD_TX_FIXED_LATENCY.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PMD_X4_PMD_TX_FIXED_LATENCYr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_TX_FIXED_LATENCYr,(_r._pmd_x4_pmd_tx_fixed_latency))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PMD_X4_PMD_TX_FIXED_LATENCYr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_TX_FIXED_LATENCYr,(_r._pmd_x4_pmd_tx_fixed_latency)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PMD_X4_PMD_TX_FIXED_LATENCYr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_TX_FIXED_LATENCYr,(_r._pmd_x4_pmd_tx_fixed_latency))
#define BCMI_TSCF_GEN3_XGXS_READLN_PMD_X4_PMD_TX_FIXED_LATENCYr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_TX_FIXED_LATENCYr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pmd_x4_pmd_tx_fixed_latency))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_PMD_X4_PMD_TX_FIXED_LATENCYr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_TX_FIXED_LATENCYr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pmd_x4_pmd_tx_fixed_latency))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_PMD_X4_PMD_TX_FIXED_LATENCYr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_TX_FIXED_LATENCYr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._pmd_x4_pmd_tx_fixed_latency))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_X4_PMD_TX_FIXED_LATENCYr BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_TX_FIXED_LATENCYr
#define PMD_X4_PMD_TX_FIXED_LATENCYr_SIZE BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_TX_FIXED_LATENCYr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_TX_FIXED_LATENCYr_t PMD_X4_PMD_TX_FIXED_LATENCYr_t;
#define PMD_X4_PMD_TX_FIXED_LATENCYr_CLR BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_TX_FIXED_LATENCYr_CLR
#define PMD_X4_PMD_TX_FIXED_LATENCYr_SET BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_TX_FIXED_LATENCYr_SET
#define PMD_X4_PMD_TX_FIXED_LATENCYr_GET BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_TX_FIXED_LATENCYr_GET
#define PMD_X4_PMD_TX_FIXED_LATENCYr_PMD_TX_LATENCY_INT_NSf_GET BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_TX_FIXED_LATENCYr_PMD_TX_LATENCY_INT_NSf_GET
#define PMD_X4_PMD_TX_FIXED_LATENCYr_PMD_TX_LATENCY_INT_NSf_SET BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_TX_FIXED_LATENCYr_PMD_TX_LATENCY_INT_NSf_SET
#define PMD_X4_PMD_TX_FIXED_LATENCYr_PMD_TX_LATENCY_FRAC_NSf_GET BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_TX_FIXED_LATENCYr_PMD_TX_LATENCY_FRAC_NSf_GET
#define PMD_X4_PMD_TX_FIXED_LATENCYr_PMD_TX_LATENCY_FRAC_NSf_SET BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_TX_FIXED_LATENCYr_PMD_TX_LATENCY_FRAC_NSf_SET
#define READ_PMD_X4_PMD_TX_FIXED_LATENCYr BCMI_TSCF_GEN3_XGXS_READ_PMD_X4_PMD_TX_FIXED_LATENCYr
#define WRITE_PMD_X4_PMD_TX_FIXED_LATENCYr BCMI_TSCF_GEN3_XGXS_WRITE_PMD_X4_PMD_TX_FIXED_LATENCYr
#define MODIFY_PMD_X4_PMD_TX_FIXED_LATENCYr BCMI_TSCF_GEN3_XGXS_MODIFY_PMD_X4_PMD_TX_FIXED_LATENCYr
#define READLN_PMD_X4_PMD_TX_FIXED_LATENCYr BCMI_TSCF_GEN3_XGXS_READLN_PMD_X4_PMD_TX_FIXED_LATENCYr
#define WRITELN_PMD_X4_PMD_TX_FIXED_LATENCYr BCMI_TSCF_GEN3_XGXS_WRITELN_PMD_X4_PMD_TX_FIXED_LATENCYr
#define WRITEALL_PMD_X4_PMD_TX_FIXED_LATENCYr BCMI_TSCF_GEN3_XGXS_WRITEALL_PMD_X4_PMD_TX_FIXED_LATENCYr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_TX_FIXED_LATENCYr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PMD_X4_PMD_RX_FIXED_LATENCY_INT
 * BLOCKS:   PMD_X4
 * REGADDR:  0xc01d
 * DESC:     PMD Receive Fixed Latency value(Integral Part) in nanoseconds
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TAB_DP_INT_NS    PMD RX fixed latency in nanoseconds. Signed 2s complement value. HW will sign-extend to 48 bits.
 */
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_RX_FIXED_LATENCY_INTr (0x0000c01d | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_RX_FIXED_LATENCY_INTr_SIZE 4

/*
 * This structure should be used to declare and program PMD_X4_PMD_RX_FIXED_LATENCY_INT.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_RX_FIXED_LATENCY_INTr_s {
	uint32_t v[1];
	uint32_t pmd_x4_pmd_rx_fixed_latency_int[1];
	uint32_t _pmd_x4_pmd_rx_fixed_latency_int;
} BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_RX_FIXED_LATENCY_INTr_t;

#define BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_RX_FIXED_LATENCY_INTr_CLR(r) (r).pmd_x4_pmd_rx_fixed_latency_int[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_RX_FIXED_LATENCY_INTr_SET(r,d) (r).pmd_x4_pmd_rx_fixed_latency_int[0] = d
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_RX_FIXED_LATENCY_INTr_GET(r) (r).pmd_x4_pmd_rx_fixed_latency_int[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_RX_FIXED_LATENCY_INTr_TAB_DP_INT_NSf_GET(r) (((r).pmd_x4_pmd_rx_fixed_latency_int[0]) & 0xfff)
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_RX_FIXED_LATENCY_INTr_TAB_DP_INT_NSf_SET(r,f) (r).pmd_x4_pmd_rx_fixed_latency_int[0]=(((r).pmd_x4_pmd_rx_fixed_latency_int[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff)) | (0xfff << 16)

/*
 * These macros can be used to access PMD_X4_PMD_RX_FIXED_LATENCY_INT.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PMD_X4_PMD_RX_FIXED_LATENCY_INTr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_RX_FIXED_LATENCY_INTr,(_r._pmd_x4_pmd_rx_fixed_latency_int))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PMD_X4_PMD_RX_FIXED_LATENCY_INTr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_RX_FIXED_LATENCY_INTr,(_r._pmd_x4_pmd_rx_fixed_latency_int)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PMD_X4_PMD_RX_FIXED_LATENCY_INTr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_RX_FIXED_LATENCY_INTr,(_r._pmd_x4_pmd_rx_fixed_latency_int))
#define BCMI_TSCF_GEN3_XGXS_READLN_PMD_X4_PMD_RX_FIXED_LATENCY_INTr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_RX_FIXED_LATENCY_INTr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pmd_x4_pmd_rx_fixed_latency_int))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_PMD_X4_PMD_RX_FIXED_LATENCY_INTr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_RX_FIXED_LATENCY_INTr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pmd_x4_pmd_rx_fixed_latency_int))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_PMD_X4_PMD_RX_FIXED_LATENCY_INTr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_RX_FIXED_LATENCY_INTr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._pmd_x4_pmd_rx_fixed_latency_int))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_X4_PMD_RX_FIXED_LATENCY_INTr BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_RX_FIXED_LATENCY_INTr
#define PMD_X4_PMD_RX_FIXED_LATENCY_INTr_SIZE BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_RX_FIXED_LATENCY_INTr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_RX_FIXED_LATENCY_INTr_t PMD_X4_PMD_RX_FIXED_LATENCY_INTr_t;
#define PMD_X4_PMD_RX_FIXED_LATENCY_INTr_CLR BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_RX_FIXED_LATENCY_INTr_CLR
#define PMD_X4_PMD_RX_FIXED_LATENCY_INTr_SET BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_RX_FIXED_LATENCY_INTr_SET
#define PMD_X4_PMD_RX_FIXED_LATENCY_INTr_GET BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_RX_FIXED_LATENCY_INTr_GET
#define PMD_X4_PMD_RX_FIXED_LATENCY_INTr_TAB_DP_INT_NSf_GET BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_RX_FIXED_LATENCY_INTr_TAB_DP_INT_NSf_GET
#define PMD_X4_PMD_RX_FIXED_LATENCY_INTr_TAB_DP_INT_NSf_SET BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_RX_FIXED_LATENCY_INTr_TAB_DP_INT_NSf_SET
#define READ_PMD_X4_PMD_RX_FIXED_LATENCY_INTr BCMI_TSCF_GEN3_XGXS_READ_PMD_X4_PMD_RX_FIXED_LATENCY_INTr
#define WRITE_PMD_X4_PMD_RX_FIXED_LATENCY_INTr BCMI_TSCF_GEN3_XGXS_WRITE_PMD_X4_PMD_RX_FIXED_LATENCY_INTr
#define MODIFY_PMD_X4_PMD_RX_FIXED_LATENCY_INTr BCMI_TSCF_GEN3_XGXS_MODIFY_PMD_X4_PMD_RX_FIXED_LATENCY_INTr
#define READLN_PMD_X4_PMD_RX_FIXED_LATENCY_INTr BCMI_TSCF_GEN3_XGXS_READLN_PMD_X4_PMD_RX_FIXED_LATENCY_INTr
#define WRITELN_PMD_X4_PMD_RX_FIXED_LATENCY_INTr BCMI_TSCF_GEN3_XGXS_WRITELN_PMD_X4_PMD_RX_FIXED_LATENCY_INTr
#define WRITEALL_PMD_X4_PMD_RX_FIXED_LATENCY_INTr BCMI_TSCF_GEN3_XGXS_WRITEALL_PMD_X4_PMD_RX_FIXED_LATENCY_INTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_RX_FIXED_LATENCY_INTr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PMD_X4_PMD_RX_FIXED_LATENCY_FRAC
 * BLOCKS:   PMD_X4
 * REGADDR:  0xc01e
 * DESC:     PMD Receive Fixed Latency value(Fractional Part) in nanoseconds
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TAB_DP_FRAC_NS   PMD RX fixed latency in fractional nanoseconds. Signed 2s complement value as an extension of PMD RX latencyspecified through tab_dp_int_ns field.
 */
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_RX_FIXED_LATENCY_FRACr (0x0000c01e | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_RX_FIXED_LATENCY_FRACr_SIZE 4

/*
 * This structure should be used to declare and program PMD_X4_PMD_RX_FIXED_LATENCY_FRAC.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_RX_FIXED_LATENCY_FRACr_s {
	uint32_t v[1];
	uint32_t pmd_x4_pmd_rx_fixed_latency_frac[1];
	uint32_t _pmd_x4_pmd_rx_fixed_latency_frac;
} BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_RX_FIXED_LATENCY_FRACr_t;

#define BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_RX_FIXED_LATENCY_FRACr_CLR(r) (r).pmd_x4_pmd_rx_fixed_latency_frac[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_RX_FIXED_LATENCY_FRACr_SET(r,d) (r).pmd_x4_pmd_rx_fixed_latency_frac[0] = d
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_RX_FIXED_LATENCY_FRACr_GET(r) (r).pmd_x4_pmd_rx_fixed_latency_frac[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_RX_FIXED_LATENCY_FRACr_TAB_DP_FRAC_NSf_GET(r) ((((r).pmd_x4_pmd_rx_fixed_latency_frac[0]) >> 6) & 0x3ff)
#define BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_RX_FIXED_LATENCY_FRACr_TAB_DP_FRAC_NSf_SET(r,f) (r).pmd_x4_pmd_rx_fixed_latency_frac[0]=(((r).pmd_x4_pmd_rx_fixed_latency_frac[0] & ~((uint32_t)0x3ff << 6)) | ((((uint32_t)f) & 0x3ff) << 6)) | (1023 << (16 + 6))

/*
 * These macros can be used to access PMD_X4_PMD_RX_FIXED_LATENCY_FRAC.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PMD_X4_PMD_RX_FIXED_LATENCY_FRACr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_RX_FIXED_LATENCY_FRACr,(_r._pmd_x4_pmd_rx_fixed_latency_frac))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PMD_X4_PMD_RX_FIXED_LATENCY_FRACr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_RX_FIXED_LATENCY_FRACr,(_r._pmd_x4_pmd_rx_fixed_latency_frac)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PMD_X4_PMD_RX_FIXED_LATENCY_FRACr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_RX_FIXED_LATENCY_FRACr,(_r._pmd_x4_pmd_rx_fixed_latency_frac))
#define BCMI_TSCF_GEN3_XGXS_READLN_PMD_X4_PMD_RX_FIXED_LATENCY_FRACr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_RX_FIXED_LATENCY_FRACr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pmd_x4_pmd_rx_fixed_latency_frac))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_PMD_X4_PMD_RX_FIXED_LATENCY_FRACr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_RX_FIXED_LATENCY_FRACr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pmd_x4_pmd_rx_fixed_latency_frac))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_PMD_X4_PMD_RX_FIXED_LATENCY_FRACr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_RX_FIXED_LATENCY_FRACr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._pmd_x4_pmd_rx_fixed_latency_frac))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_X4_PMD_RX_FIXED_LATENCY_FRACr BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_RX_FIXED_LATENCY_FRACr
#define PMD_X4_PMD_RX_FIXED_LATENCY_FRACr_SIZE BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_RX_FIXED_LATENCY_FRACr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_RX_FIXED_LATENCY_FRACr_t PMD_X4_PMD_RX_FIXED_LATENCY_FRACr_t;
#define PMD_X4_PMD_RX_FIXED_LATENCY_FRACr_CLR BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_RX_FIXED_LATENCY_FRACr_CLR
#define PMD_X4_PMD_RX_FIXED_LATENCY_FRACr_SET BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_RX_FIXED_LATENCY_FRACr_SET
#define PMD_X4_PMD_RX_FIXED_LATENCY_FRACr_GET BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_RX_FIXED_LATENCY_FRACr_GET
#define PMD_X4_PMD_RX_FIXED_LATENCY_FRACr_TAB_DP_FRAC_NSf_GET BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_RX_FIXED_LATENCY_FRACr_TAB_DP_FRAC_NSf_GET
#define PMD_X4_PMD_RX_FIXED_LATENCY_FRACr_TAB_DP_FRAC_NSf_SET BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_RX_FIXED_LATENCY_FRACr_TAB_DP_FRAC_NSf_SET
#define READ_PMD_X4_PMD_RX_FIXED_LATENCY_FRACr BCMI_TSCF_GEN3_XGXS_READ_PMD_X4_PMD_RX_FIXED_LATENCY_FRACr
#define WRITE_PMD_X4_PMD_RX_FIXED_LATENCY_FRACr BCMI_TSCF_GEN3_XGXS_WRITE_PMD_X4_PMD_RX_FIXED_LATENCY_FRACr
#define MODIFY_PMD_X4_PMD_RX_FIXED_LATENCY_FRACr BCMI_TSCF_GEN3_XGXS_MODIFY_PMD_X4_PMD_RX_FIXED_LATENCY_FRACr
#define READLN_PMD_X4_PMD_RX_FIXED_LATENCY_FRACr BCMI_TSCF_GEN3_XGXS_READLN_PMD_X4_PMD_RX_FIXED_LATENCY_FRACr
#define WRITELN_PMD_X4_PMD_RX_FIXED_LATENCY_FRACr BCMI_TSCF_GEN3_XGXS_WRITELN_PMD_X4_PMD_RX_FIXED_LATENCY_FRACr
#define WRITEALL_PMD_X4_PMD_RX_FIXED_LATENCY_FRACr BCMI_TSCF_GEN3_XGXS_WRITEALL_PMD_X4_PMD_RX_FIXED_LATENCY_FRACr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PMD_X4_PMD_RX_FIXED_LATENCY_FRACr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X4_CTL
 * BLOCKS:   SC_X4_CONTROL
 * REGADDR:  0xc050
 * DESC:     SW speed change control
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     SPEED            
 *     SW_SPEED_CHANGE  Start SW speed change.HW will detect possedge of this field and start or restart the speed change logic.To restart speed change logic SW must write 0 to this bit and then write 1.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X4_CTLr (0x0000c050 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X4_CTLr_SIZE 4

/*
 * This structure should be used to declare and program SC_X4_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X4_CTLr_s {
	uint32_t v[1];
	uint32_t sc_x4_ctl[1];
	uint32_t _sc_x4_ctl;
} BCMI_TSCF_GEN3_XGXS_SC_X4_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X4_CTLr_CLR(r) (r).sc_x4_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X4_CTLr_SET(r,d) (r).sc_x4_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X4_CTLr_GET(r) (r).sc_x4_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X4_CTLr_SW_SPEED_CHANGEf_GET(r) ((((r).sc_x4_ctl[0]) >> 8) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_CTLr_SW_SPEED_CHANGEf_SET(r,f) (r).sc_x4_ctl[0]=(((r).sc_x4_ctl[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_CTLr_SPEEDf_GET(r) (((r).sc_x4_ctl[0]) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_CTLr_SPEEDf_SET(r,f) (r).sc_x4_ctl[0]=(((r).sc_x4_ctl[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access SC_X4_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X4_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_CTLr,(_r._sc_x4_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X4_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_CTLr,(_r._sc_x4_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X4_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_CTLr,(_r._sc_x4_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_SC_X4_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_SC_X4_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_SC_X4_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sc_x4_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X4_CTLr BCMI_TSCF_GEN3_XGXS_SC_X4_CTLr
#define SC_X4_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_SC_X4_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X4_CTLr_t SC_X4_CTLr_t;
#define SC_X4_CTLr_CLR BCMI_TSCF_GEN3_XGXS_SC_X4_CTLr_CLR
#define SC_X4_CTLr_SET BCMI_TSCF_GEN3_XGXS_SC_X4_CTLr_SET
#define SC_X4_CTLr_GET BCMI_TSCF_GEN3_XGXS_SC_X4_CTLr_GET
#define SC_X4_CTLr_SW_SPEED_CHANGEf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_CTLr_SW_SPEED_CHANGEf_GET
#define SC_X4_CTLr_SW_SPEED_CHANGEf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_CTLr_SW_SPEED_CHANGEf_SET
#define SC_X4_CTLr_SPEEDf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_CTLr_SPEEDf_GET
#define SC_X4_CTLr_SPEEDf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_CTLr_SPEEDf_SET
#define READ_SC_X4_CTLr BCMI_TSCF_GEN3_XGXS_READ_SC_X4_CTLr
#define WRITE_SC_X4_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_SC_X4_CTLr
#define MODIFY_SC_X4_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X4_CTLr
#define READLN_SC_X4_CTLr BCMI_TSCF_GEN3_XGXS_READLN_SC_X4_CTLr
#define WRITELN_SC_X4_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_SC_X4_CTLr
#define WRITEALL_SC_X4_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_SC_X4_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X4_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X4_STS
 * BLOCKS:   SC_X4_CONTROL
 * REGADDR:  0xc051
 * DESC:     SW speed change status
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     SW_SPEED_CHANGE_DONE Read clear bit indicating that SW initiated speed change completed
 *     SW_SPEED_CONFIG_VLD Read clear bit indicating that resolved speed configuration in stutus registers can be read
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X4_STSr (0x0000c051 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X4_STSr_SIZE 4

/*
 * This structure should be used to declare and program SC_X4_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X4_STSr_s {
	uint32_t v[1];
	uint32_t sc_x4_sts[1];
	uint32_t _sc_x4_sts;
} BCMI_TSCF_GEN3_XGXS_SC_X4_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X4_STSr_CLR(r) (r).sc_x4_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X4_STSr_SET(r,d) (r).sc_x4_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X4_STSr_GET(r) (r).sc_x4_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X4_STSr_SW_SPEED_CONFIG_VLDf_GET(r) ((((r).sc_x4_sts[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_STSr_SW_SPEED_CONFIG_VLDf_SET(r,f) (r).sc_x4_sts[0]=(((r).sc_x4_sts[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_STSr_SW_SPEED_CHANGE_DONEf_GET(r) (((r).sc_x4_sts[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_STSr_SW_SPEED_CHANGE_DONEf_SET(r,f) (r).sc_x4_sts[0]=(((r).sc_x4_sts[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access SC_X4_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X4_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_STSr,(_r._sc_x4_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X4_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_STSr,(_r._sc_x4_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X4_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_STSr,(_r._sc_x4_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_SC_X4_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_SC_X4_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_SC_X4_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sc_x4_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X4_STSr BCMI_TSCF_GEN3_XGXS_SC_X4_STSr
#define SC_X4_STSr_SIZE BCMI_TSCF_GEN3_XGXS_SC_X4_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X4_STSr_t SC_X4_STSr_t;
#define SC_X4_STSr_CLR BCMI_TSCF_GEN3_XGXS_SC_X4_STSr_CLR
#define SC_X4_STSr_SET BCMI_TSCF_GEN3_XGXS_SC_X4_STSr_SET
#define SC_X4_STSr_GET BCMI_TSCF_GEN3_XGXS_SC_X4_STSr_GET
#define SC_X4_STSr_SW_SPEED_CONFIG_VLDf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_STSr_SW_SPEED_CONFIG_VLDf_GET
#define SC_X4_STSr_SW_SPEED_CONFIG_VLDf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_STSr_SW_SPEED_CONFIG_VLDf_SET
#define SC_X4_STSr_SW_SPEED_CHANGE_DONEf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_STSr_SW_SPEED_CHANGE_DONEf_GET
#define SC_X4_STSr_SW_SPEED_CHANGE_DONEf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_STSr_SW_SPEED_CHANGE_DONEf_SET
#define READ_SC_X4_STSr BCMI_TSCF_GEN3_XGXS_READ_SC_X4_STSr
#define WRITE_SC_X4_STSr BCMI_TSCF_GEN3_XGXS_WRITE_SC_X4_STSr
#define MODIFY_SC_X4_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X4_STSr
#define READLN_SC_X4_STSr BCMI_TSCF_GEN3_XGXS_READLN_SC_X4_STSr
#define WRITELN_SC_X4_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_SC_X4_STSr
#define WRITEALL_SC_X4_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_SC_X4_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X4_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X4_ERR
 * BLOCKS:   SC_X4_CONTROL
 * REGADDR:  0xc052
 * DESC:     Speed control error indication
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     PLL_LOCK_TIMED_OUT Indication of timeout during PLL lock
 *     PMD_LOCK_TIMED_OUT Indication of timeout during PMD RX lock
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X4_ERRr (0x0000c052 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X4_ERRr_SIZE 4

/*
 * This structure should be used to declare and program SC_X4_ERR.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X4_ERRr_s {
	uint32_t v[1];
	uint32_t sc_x4_err[1];
	uint32_t _sc_x4_err;
} BCMI_TSCF_GEN3_XGXS_SC_X4_ERRr_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X4_ERRr_CLR(r) (r).sc_x4_err[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X4_ERRr_SET(r,d) (r).sc_x4_err[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X4_ERRr_GET(r) (r).sc_x4_err[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X4_ERRr_PMD_LOCK_TIMED_OUTf_GET(r) ((((r).sc_x4_err[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_ERRr_PMD_LOCK_TIMED_OUTf_SET(r,f) (r).sc_x4_err[0]=(((r).sc_x4_err[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_ERRr_PLL_LOCK_TIMED_OUTf_GET(r) (((r).sc_x4_err[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_ERRr_PLL_LOCK_TIMED_OUTf_SET(r,f) (r).sc_x4_err[0]=(((r).sc_x4_err[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access SC_X4_ERR.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X4_ERRr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_ERRr,(_r._sc_x4_err))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X4_ERRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_ERRr,(_r._sc_x4_err)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X4_ERRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_ERRr,(_r._sc_x4_err))
#define BCMI_TSCF_GEN3_XGXS_READLN_SC_X4_ERRr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_ERRr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_err))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_SC_X4_ERRr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_ERRr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_err))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_SC_X4_ERRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_ERRr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sc_x4_err))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X4_ERRr BCMI_TSCF_GEN3_XGXS_SC_X4_ERRr
#define SC_X4_ERRr_SIZE BCMI_TSCF_GEN3_XGXS_SC_X4_ERRr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X4_ERRr_t SC_X4_ERRr_t;
#define SC_X4_ERRr_CLR BCMI_TSCF_GEN3_XGXS_SC_X4_ERRr_CLR
#define SC_X4_ERRr_SET BCMI_TSCF_GEN3_XGXS_SC_X4_ERRr_SET
#define SC_X4_ERRr_GET BCMI_TSCF_GEN3_XGXS_SC_X4_ERRr_GET
#define SC_X4_ERRr_PMD_LOCK_TIMED_OUTf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_ERRr_PMD_LOCK_TIMED_OUTf_GET
#define SC_X4_ERRr_PMD_LOCK_TIMED_OUTf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_ERRr_PMD_LOCK_TIMED_OUTf_SET
#define SC_X4_ERRr_PLL_LOCK_TIMED_OUTf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_ERRr_PLL_LOCK_TIMED_OUTf_GET
#define SC_X4_ERRr_PLL_LOCK_TIMED_OUTf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_ERRr_PLL_LOCK_TIMED_OUTf_SET
#define READ_SC_X4_ERRr BCMI_TSCF_GEN3_XGXS_READ_SC_X4_ERRr
#define WRITE_SC_X4_ERRr BCMI_TSCF_GEN3_XGXS_WRITE_SC_X4_ERRr
#define MODIFY_SC_X4_ERRr BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X4_ERRr
#define READLN_SC_X4_ERRr BCMI_TSCF_GEN3_XGXS_READLN_SC_X4_ERRr
#define WRITELN_SC_X4_ERRr BCMI_TSCF_GEN3_XGXS_WRITELN_SC_X4_ERRr
#define WRITEALL_SC_X4_ERRr BCMI_TSCF_GEN3_XGXS_WRITEALL_SC_X4_ERRr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X4_ERRr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X4_MSA_25G_50G_CTL
 * BLOCKS:   SC_X4_CONTROL
 * REGADDR:  0xc053
 * DESC:     MSA 25 and 50G control register
 * RESETVAL: 0x30c (780)
 * ACCESS:   R/W
 * FIELDS:
 *     CL74_SHCORRUPT_25GMSA This bit will choose whether to corrupt all SH or only 5 SH for 25G MSA Speed0: Only 5 SH1: all SH
 *     CL74_SHCORRUPT_50GMSA This bit will choose whether to corrupt all SH or only 5 SH for 50G MSA Speed0: Only 5 SH1: all SH
 *     MSA_COUNT_SEL    This bit will select between 16 (cl49) and 97 (cl82) count for BER for MSA 25G and 50G Speeds.0: select cl49 register1: select cl82 register
 *     MSA_WINDOW_SEL   This bit will select between cl49 window and cl82 window count for BER for MSA 25G and 50G Speeds.0: select cl49 window1: select cl82 window
 *     MSA_25G_AM123_FORMAT this bit will select TX AM0 format for MSA 25G.0: select 40G AM1231: select 100G AM123
 *     MSA_25G_AM0_FORMAT this bit will select TX AM0 format for MSA 25G.0: select 40G AM01: select 100G AM0
 *     MSA_50G_AM123_FORMAT this bit will select TX AM0 format for MSA 25G.0: select 40G AM1231: select 100G AM123
 *     MSA_50G_AM0_FORMAT this bit will select TX AM0 format for MSA 25G.0: select 40G AM01: select 100G AM0
 *     MSA_25G_AM_EN    Disable AM TX and RX.1: AM is enabled0: AM is disabled
 *     MSA_25G_5BIT_XOR Enable disable 5 bit XOR for MSA 25G0: Disabled1: Enabled
 *     MSA_25G_CWSCR_EN Pre/Post code word scranmbler enable/disable.0: DISABLED1: ENABLED
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr (0x0000c053 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_SIZE 4

/*
 * This structure should be used to declare and program SC_X4_MSA_25G_50G_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_s {
	uint32_t v[1];
	uint32_t sc_x4_msa_25g_50g_ctl[1];
	uint32_t _sc_x4_msa_25g_50g_ctl;
} BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_CLR(r) (r).sc_x4_msa_25g_50g_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_SET(r,d) (r).sc_x4_msa_25g_50g_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_GET(r) (r).sc_x4_msa_25g_50g_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_MSA_25G_CWSCR_ENf_GET(r) ((((r).sc_x4_msa_25g_50g_ctl[0]) >> 10) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_MSA_25G_CWSCR_ENf_SET(r,f) (r).sc_x4_msa_25g_50g_ctl[0]=(((r).sc_x4_msa_25g_50g_ctl[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_MSA_25G_5BIT_XORf_GET(r) ((((r).sc_x4_msa_25g_50g_ctl[0]) >> 9) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_MSA_25G_5BIT_XORf_SET(r,f) (r).sc_x4_msa_25g_50g_ctl[0]=(((r).sc_x4_msa_25g_50g_ctl[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_MSA_25G_AM_ENf_GET(r) ((((r).sc_x4_msa_25g_50g_ctl[0]) >> 8) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_MSA_25G_AM_ENf_SET(r,f) (r).sc_x4_msa_25g_50g_ctl[0]=(((r).sc_x4_msa_25g_50g_ctl[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_MSA_50G_AM0_FORMATf_GET(r) ((((r).sc_x4_msa_25g_50g_ctl[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_MSA_50G_AM0_FORMATf_SET(r,f) (r).sc_x4_msa_25g_50g_ctl[0]=(((r).sc_x4_msa_25g_50g_ctl[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_MSA_50G_AM123_FORMATf_GET(r) ((((r).sc_x4_msa_25g_50g_ctl[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_MSA_50G_AM123_FORMATf_SET(r,f) (r).sc_x4_msa_25g_50g_ctl[0]=(((r).sc_x4_msa_25g_50g_ctl[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_MSA_25G_AM0_FORMATf_GET(r) ((((r).sc_x4_msa_25g_50g_ctl[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_MSA_25G_AM0_FORMATf_SET(r,f) (r).sc_x4_msa_25g_50g_ctl[0]=(((r).sc_x4_msa_25g_50g_ctl[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_MSA_25G_AM123_FORMATf_GET(r) ((((r).sc_x4_msa_25g_50g_ctl[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_MSA_25G_AM123_FORMATf_SET(r,f) (r).sc_x4_msa_25g_50g_ctl[0]=(((r).sc_x4_msa_25g_50g_ctl[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_MSA_WINDOW_SELf_GET(r) ((((r).sc_x4_msa_25g_50g_ctl[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_MSA_WINDOW_SELf_SET(r,f) (r).sc_x4_msa_25g_50g_ctl[0]=(((r).sc_x4_msa_25g_50g_ctl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_MSA_COUNT_SELf_GET(r) ((((r).sc_x4_msa_25g_50g_ctl[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_MSA_COUNT_SELf_SET(r,f) (r).sc_x4_msa_25g_50g_ctl[0]=(((r).sc_x4_msa_25g_50g_ctl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_CL74_SHCORRUPT_50GMSAf_GET(r) ((((r).sc_x4_msa_25g_50g_ctl[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_CL74_SHCORRUPT_50GMSAf_SET(r,f) (r).sc_x4_msa_25g_50g_ctl[0]=(((r).sc_x4_msa_25g_50g_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_CL74_SHCORRUPT_25GMSAf_GET(r) (((r).sc_x4_msa_25g_50g_ctl[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_CL74_SHCORRUPT_25GMSAf_SET(r,f) (r).sc_x4_msa_25g_50g_ctl[0]=(((r).sc_x4_msa_25g_50g_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access SC_X4_MSA_25G_50G_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X4_MSA_25G_50G_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr,(_r._sc_x4_msa_25g_50g_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X4_MSA_25G_50G_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr,(_r._sc_x4_msa_25g_50g_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X4_MSA_25G_50G_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr,(_r._sc_x4_msa_25g_50g_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_SC_X4_MSA_25G_50G_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_msa_25g_50g_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_SC_X4_MSA_25G_50G_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_msa_25g_50g_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_SC_X4_MSA_25G_50G_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sc_x4_msa_25g_50g_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X4_MSA_25G_50G_CTLr BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr
#define SC_X4_MSA_25G_50G_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_t SC_X4_MSA_25G_50G_CTLr_t;
#define SC_X4_MSA_25G_50G_CTLr_CLR BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_CLR
#define SC_X4_MSA_25G_50G_CTLr_SET BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_SET
#define SC_X4_MSA_25G_50G_CTLr_GET BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_GET
#define SC_X4_MSA_25G_50G_CTLr_MSA_25G_CWSCR_ENf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_MSA_25G_CWSCR_ENf_GET
#define SC_X4_MSA_25G_50G_CTLr_MSA_25G_CWSCR_ENf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_MSA_25G_CWSCR_ENf_SET
#define SC_X4_MSA_25G_50G_CTLr_MSA_25G_5BIT_XORf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_MSA_25G_5BIT_XORf_GET
#define SC_X4_MSA_25G_50G_CTLr_MSA_25G_5BIT_XORf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_MSA_25G_5BIT_XORf_SET
#define SC_X4_MSA_25G_50G_CTLr_MSA_25G_AM_ENf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_MSA_25G_AM_ENf_GET
#define SC_X4_MSA_25G_50G_CTLr_MSA_25G_AM_ENf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_MSA_25G_AM_ENf_SET
#define SC_X4_MSA_25G_50G_CTLr_MSA_50G_AM0_FORMATf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_MSA_50G_AM0_FORMATf_GET
#define SC_X4_MSA_25G_50G_CTLr_MSA_50G_AM0_FORMATf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_MSA_50G_AM0_FORMATf_SET
#define SC_X4_MSA_25G_50G_CTLr_MSA_50G_AM123_FORMATf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_MSA_50G_AM123_FORMATf_GET
#define SC_X4_MSA_25G_50G_CTLr_MSA_50G_AM123_FORMATf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_MSA_50G_AM123_FORMATf_SET
#define SC_X4_MSA_25G_50G_CTLr_MSA_25G_AM0_FORMATf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_MSA_25G_AM0_FORMATf_GET
#define SC_X4_MSA_25G_50G_CTLr_MSA_25G_AM0_FORMATf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_MSA_25G_AM0_FORMATf_SET
#define SC_X4_MSA_25G_50G_CTLr_MSA_25G_AM123_FORMATf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_MSA_25G_AM123_FORMATf_GET
#define SC_X4_MSA_25G_50G_CTLr_MSA_25G_AM123_FORMATf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_MSA_25G_AM123_FORMATf_SET
#define SC_X4_MSA_25G_50G_CTLr_MSA_WINDOW_SELf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_MSA_WINDOW_SELf_GET
#define SC_X4_MSA_25G_50G_CTLr_MSA_WINDOW_SELf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_MSA_WINDOW_SELf_SET
#define SC_X4_MSA_25G_50G_CTLr_MSA_COUNT_SELf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_MSA_COUNT_SELf_GET
#define SC_X4_MSA_25G_50G_CTLr_MSA_COUNT_SELf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_MSA_COUNT_SELf_SET
#define SC_X4_MSA_25G_50G_CTLr_CL74_SHCORRUPT_50GMSAf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_CL74_SHCORRUPT_50GMSAf_GET
#define SC_X4_MSA_25G_50G_CTLr_CL74_SHCORRUPT_50GMSAf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_CL74_SHCORRUPT_50GMSAf_SET
#define SC_X4_MSA_25G_50G_CTLr_CL74_SHCORRUPT_25GMSAf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_CL74_SHCORRUPT_25GMSAf_GET
#define SC_X4_MSA_25G_50G_CTLr_CL74_SHCORRUPT_25GMSAf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr_CL74_SHCORRUPT_25GMSAf_SET
#define READ_SC_X4_MSA_25G_50G_CTLr BCMI_TSCF_GEN3_XGXS_READ_SC_X4_MSA_25G_50G_CTLr
#define WRITE_SC_X4_MSA_25G_50G_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_SC_X4_MSA_25G_50G_CTLr
#define MODIFY_SC_X4_MSA_25G_50G_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X4_MSA_25G_50G_CTLr
#define READLN_SC_X4_MSA_25G_50G_CTLr BCMI_TSCF_GEN3_XGXS_READLN_SC_X4_MSA_25G_50G_CTLr
#define WRITELN_SC_X4_MSA_25G_50G_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_SC_X4_MSA_25G_50G_CTLr
#define WRITEALL_SC_X4_MSA_25G_50G_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_SC_X4_MSA_25G_50G_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X4_MSA_25G_50G_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X4_DBG
 * BLOCKS:   SC_X4_CONTROL
 * REGADDR:  0xc054
 * DESC:     Speed control debug information
 * RESETVAL: 0x8000 (32768)
 * ACCESS:   R/W
 * FIELDS:
 *     SC_FSM_STATUS    Speed Control logic FSM debug information16'h8000 - START16'h4000 - RESET_PCS16'h2000 - RESET_PMD_LANE16'h1000 - RESET_PMD_PLL16'h0800 - APPLY_SPEED_CFG16'h0400 - WAIT_CFG_DONE16'h0200 - ACTIVATE_PMD16'h0100 - WAIT_PLL_RESET16'h0080 - PLL_LOCK_FAIL16'h0040 - ACTIVATE_TX16'h0020 - WAIT_PMD_LOCK16'h0010 - ACTIVATE_RX16'h0008 - PMD_LOCK_FAIL16'h0004 - DONE16'h0002 - STOP16'h0001 - BYPASS
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X4_DBGr (0x0000c054 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X4_DBGr_SIZE 4

/*
 * This structure should be used to declare and program SC_X4_DBG.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X4_DBGr_s {
	uint32_t v[1];
	uint32_t sc_x4_dbg[1];
	uint32_t _sc_x4_dbg;
} BCMI_TSCF_GEN3_XGXS_SC_X4_DBGr_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X4_DBGr_CLR(r) (r).sc_x4_dbg[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X4_DBGr_SET(r,d) (r).sc_x4_dbg[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X4_DBGr_GET(r) (r).sc_x4_dbg[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X4_DBGr_SC_FSM_STATUSf_GET(r) (((r).sc_x4_dbg[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_DBGr_SC_FSM_STATUSf_SET(r,f) (r).sc_x4_dbg[0]=(((r).sc_x4_dbg[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access SC_X4_DBG.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X4_DBGr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_DBGr,(_r._sc_x4_dbg))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X4_DBGr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_DBGr,(_r._sc_x4_dbg)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X4_DBGr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_DBGr,(_r._sc_x4_dbg))
#define BCMI_TSCF_GEN3_XGXS_READLN_SC_X4_DBGr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_DBGr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_dbg))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_SC_X4_DBGr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_DBGr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_dbg))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_SC_X4_DBGr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_DBGr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sc_x4_dbg))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X4_DBGr BCMI_TSCF_GEN3_XGXS_SC_X4_DBGr
#define SC_X4_DBGr_SIZE BCMI_TSCF_GEN3_XGXS_SC_X4_DBGr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X4_DBGr_t SC_X4_DBGr_t;
#define SC_X4_DBGr_CLR BCMI_TSCF_GEN3_XGXS_SC_X4_DBGr_CLR
#define SC_X4_DBGr_SET BCMI_TSCF_GEN3_XGXS_SC_X4_DBGr_SET
#define SC_X4_DBGr_GET BCMI_TSCF_GEN3_XGXS_SC_X4_DBGr_GET
#define SC_X4_DBGr_SC_FSM_STATUSf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_DBGr_SC_FSM_STATUSf_GET
#define SC_X4_DBGr_SC_FSM_STATUSf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_DBGr_SC_FSM_STATUSf_SET
#define READ_SC_X4_DBGr BCMI_TSCF_GEN3_XGXS_READ_SC_X4_DBGr
#define WRITE_SC_X4_DBGr BCMI_TSCF_GEN3_XGXS_WRITE_SC_X4_DBGr
#define MODIFY_SC_X4_DBGr BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X4_DBGr
#define READLN_SC_X4_DBGr BCMI_TSCF_GEN3_XGXS_READLN_SC_X4_DBGr
#define WRITELN_SC_X4_DBGr BCMI_TSCF_GEN3_XGXS_WRITELN_SC_X4_DBGr
#define WRITEALL_SC_X4_DBGr BCMI_TSCF_GEN3_XGXS_WRITEALL_SC_X4_DBGr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X4_DBGr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X4_SC_X4_OVRR
 * BLOCKS:   SC_X4_CONTROL
 * REGADDR:  0xc055
 * DESC:     Number of lanes for override configuration
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     NUM_LANES_OVERRIDE_VALUE Number of lanes for override configuration0   : NUM_LANES_01 - use 1 lane1   : NUM_LANES_02 - use 2 lanes2   : NUM_LANES_04 - use 4 lanes
 *     AN_FEC_SEL_OVERRIDE Valid only when AN resolves to 25G, 50G (over 2 lanes), 100G speeds.
 *     CORRUPT_2ND_GROUP Global over-ride value for corrupt_2nd_group
 *     CORRUPT_6TH_GROUP Global over-ride value for corrupt_6th_group
 *     CL74_SHCORRUPT   Global over-ride value for cl74_shcorrupt
 *     BER_COUNT_SEL    Global over-ride value for ber_count_sel
 *     BER_WINDOW_SEL   Global over-ride value for ber_window_sel
 *     USE_100G_AM0     Global over-ride value for use_100G_am0
 *     USE_100G_AM123   Global over-ride value for use_100G_am123
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr (0x0000c055 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr_SIZE 4

/*
 * This structure should be used to declare and program SC_X4_SC_X4_OVRR.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr_s {
	uint32_t v[1];
	uint32_t sc_x4_sc_x4_ovrr[1];
	uint32_t _sc_x4_sc_x4_ovrr;
} BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr_CLR(r) (r).sc_x4_sc_x4_ovrr[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr_SET(r,d) (r).sc_x4_sc_x4_ovrr[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr_GET(r) (r).sc_x4_sc_x4_ovrr[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr_USE_100G_AM123f_GET(r) ((((r).sc_x4_sc_x4_ovrr[0]) >> 11) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr_USE_100G_AM123f_SET(r,f) (r).sc_x4_sc_x4_ovrr[0]=(((r).sc_x4_sc_x4_ovrr[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr_USE_100G_AM0f_GET(r) ((((r).sc_x4_sc_x4_ovrr[0]) >> 10) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr_USE_100G_AM0f_SET(r,f) (r).sc_x4_sc_x4_ovrr[0]=(((r).sc_x4_sc_x4_ovrr[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr_BER_WINDOW_SELf_GET(r) ((((r).sc_x4_sc_x4_ovrr[0]) >> 9) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr_BER_WINDOW_SELf_SET(r,f) (r).sc_x4_sc_x4_ovrr[0]=(((r).sc_x4_sc_x4_ovrr[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr_BER_COUNT_SELf_GET(r) ((((r).sc_x4_sc_x4_ovrr[0]) >> 8) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr_BER_COUNT_SELf_SET(r,f) (r).sc_x4_sc_x4_ovrr[0]=(((r).sc_x4_sc_x4_ovrr[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr_CL74_SHCORRUPTf_GET(r) ((((r).sc_x4_sc_x4_ovrr[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr_CL74_SHCORRUPTf_SET(r,f) (r).sc_x4_sc_x4_ovrr[0]=(((r).sc_x4_sc_x4_ovrr[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr_CORRUPT_6TH_GROUPf_GET(r) ((((r).sc_x4_sc_x4_ovrr[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr_CORRUPT_6TH_GROUPf_SET(r,f) (r).sc_x4_sc_x4_ovrr[0]=(((r).sc_x4_sc_x4_ovrr[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr_CORRUPT_2ND_GROUPf_GET(r) ((((r).sc_x4_sc_x4_ovrr[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr_CORRUPT_2ND_GROUPf_SET(r,f) (r).sc_x4_sc_x4_ovrr[0]=(((r).sc_x4_sc_x4_ovrr[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr_AN_FEC_SEL_OVERRIDEf_GET(r) ((((r).sc_x4_sc_x4_ovrr[0]) >> 3) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr_AN_FEC_SEL_OVERRIDEf_SET(r,f) (r).sc_x4_sc_x4_ovrr[0]=(((r).sc_x4_sc_x4_ovrr[0] & ~((uint32_t)0x3 << 3)) | ((((uint32_t)f) & 0x3) << 3)) | (3 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr_NUM_LANES_OVERRIDE_VALUEf_GET(r) (((r).sc_x4_sc_x4_ovrr[0]) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr_NUM_LANES_OVERRIDE_VALUEf_SET(r,f) (r).sc_x4_sc_x4_ovrr[0]=(((r).sc_x4_sc_x4_ovrr[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access SC_X4_SC_X4_OVRR.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X4_SC_X4_OVRRr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr,(_r._sc_x4_sc_x4_ovrr))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X4_SC_X4_OVRRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr,(_r._sc_x4_sc_x4_ovrr)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X4_SC_X4_OVRRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr,(_r._sc_x4_sc_x4_ovrr))
#define BCMI_TSCF_GEN3_XGXS_READLN_SC_X4_SC_X4_OVRRr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_sc_x4_ovrr))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_SC_X4_SC_X4_OVRRr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_sc_x4_ovrr))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_SC_X4_SC_X4_OVRRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sc_x4_sc_x4_ovrr))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X4_SC_X4_OVRRr BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr
#define SC_X4_SC_X4_OVRRr_SIZE BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr_t SC_X4_SC_X4_OVRRr_t;
#define SC_X4_SC_X4_OVRRr_CLR BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr_CLR
#define SC_X4_SC_X4_OVRRr_SET BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr_SET
#define SC_X4_SC_X4_OVRRr_GET BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr_GET
#define SC_X4_SC_X4_OVRRr_USE_100G_AM123f_GET BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr_USE_100G_AM123f_GET
#define SC_X4_SC_X4_OVRRr_USE_100G_AM123f_SET BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr_USE_100G_AM123f_SET
#define SC_X4_SC_X4_OVRRr_USE_100G_AM0f_GET BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr_USE_100G_AM0f_GET
#define SC_X4_SC_X4_OVRRr_USE_100G_AM0f_SET BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr_USE_100G_AM0f_SET
#define SC_X4_SC_X4_OVRRr_BER_WINDOW_SELf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr_BER_WINDOW_SELf_GET
#define SC_X4_SC_X4_OVRRr_BER_WINDOW_SELf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr_BER_WINDOW_SELf_SET
#define SC_X4_SC_X4_OVRRr_BER_COUNT_SELf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr_BER_COUNT_SELf_GET
#define SC_X4_SC_X4_OVRRr_BER_COUNT_SELf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr_BER_COUNT_SELf_SET
#define SC_X4_SC_X4_OVRRr_CL74_SHCORRUPTf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr_CL74_SHCORRUPTf_GET
#define SC_X4_SC_X4_OVRRr_CL74_SHCORRUPTf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr_CL74_SHCORRUPTf_SET
#define SC_X4_SC_X4_OVRRr_CORRUPT_6TH_GROUPf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr_CORRUPT_6TH_GROUPf_GET
#define SC_X4_SC_X4_OVRRr_CORRUPT_6TH_GROUPf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr_CORRUPT_6TH_GROUPf_SET
#define SC_X4_SC_X4_OVRRr_CORRUPT_2ND_GROUPf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr_CORRUPT_2ND_GROUPf_GET
#define SC_X4_SC_X4_OVRRr_CORRUPT_2ND_GROUPf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr_CORRUPT_2ND_GROUPf_SET
#define SC_X4_SC_X4_OVRRr_AN_FEC_SEL_OVERRIDEf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr_AN_FEC_SEL_OVERRIDEf_GET
#define SC_X4_SC_X4_OVRRr_AN_FEC_SEL_OVERRIDEf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr_AN_FEC_SEL_OVERRIDEf_SET
#define SC_X4_SC_X4_OVRRr_NUM_LANES_OVERRIDE_VALUEf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr_NUM_LANES_OVERRIDE_VALUEf_GET
#define SC_X4_SC_X4_OVRRr_NUM_LANES_OVERRIDE_VALUEf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr_NUM_LANES_OVERRIDE_VALUEf_SET
#define READ_SC_X4_SC_X4_OVRRr BCMI_TSCF_GEN3_XGXS_READ_SC_X4_SC_X4_OVRRr
#define WRITE_SC_X4_SC_X4_OVRRr BCMI_TSCF_GEN3_XGXS_WRITE_SC_X4_SC_X4_OVRRr
#define MODIFY_SC_X4_SC_X4_OVRRr BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X4_SC_X4_OVRRr
#define READLN_SC_X4_SC_X4_OVRRr BCMI_TSCF_GEN3_XGXS_READLN_SC_X4_SC_X4_OVRRr
#define WRITELN_SC_X4_SC_X4_OVRRr BCMI_TSCF_GEN3_XGXS_WRITELN_SC_X4_SC_X4_OVRRr
#define WRITEALL_SC_X4_SC_X4_OVRRr BCMI_TSCF_GEN3_XGXS_WRITEALL_SC_X4_SC_X4_OVRRr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X4_SC_X4_OVRRr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X4_IEEE_25G_CTL
 * BLOCKS:   SC_X4_CONTROL
 * REGADDR:  0xc056
 * DESC:     IEEE 25G control register
 * RESETVAL: 0x66 (102)
 * ACCESS:   R/W
 * FIELDS:
 *     CL74_SHCORRUPT_25IEEE This bit will choose whether to corrupt all SH or only 5 SH for 25G IEEE speed0: Only 5 SH1: all SH
 *     IEEE_COUNT_SEL   This bit will select between 16 (cl49) and 97 (cl82) count for BER for IEEE 25G.0: select 161: select 97
 *     IEEE_WINDOW_SEL  This bit will select between cl49 window and cl82 window count for BER for IEEE 25G.0: select cl49 window1: select cl82 window
 *     IEEE_25G_AM123_FORMAT this bit will select TX AM0 format for IEEE 25G.0: select 40G AM01: select 100G AM0
 *     IEEE_25G_AM0_FORMAT this bit will select RX AM0 format for IEEE 25G.0: select 40G AM01: select 100G AM0
 *     IEEE_25G_AM_EN   Disable AM TX and RX.1: AM is enabled0: AM is disabled
 *     IEEE_25G_5BIT_XOR Enable disable 5 bit XOR for IEEE 25G0: Disabled1: Enabled
 *     IEEE_25G_CWSCR_EN Pre/Post code word scranmbler enable/disable.0: DISABLED1: ENABLED
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X4_IEEE_25G_CTLr (0x0000c056 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X4_IEEE_25G_CTLr_SIZE 4

/*
 * This structure should be used to declare and program SC_X4_IEEE_25G_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X4_IEEE_25G_CTLr_s {
	uint32_t v[1];
	uint32_t sc_x4_ieee_25g_ctl[1];
	uint32_t _sc_x4_ieee_25g_ctl;
} BCMI_TSCF_GEN3_XGXS_SC_X4_IEEE_25G_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X4_IEEE_25G_CTLr_CLR(r) (r).sc_x4_ieee_25g_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X4_IEEE_25G_CTLr_SET(r,d) (r).sc_x4_ieee_25g_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X4_IEEE_25G_CTLr_GET(r) (r).sc_x4_ieee_25g_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X4_IEEE_25G_CTLr_IEEE_25G_CWSCR_ENf_GET(r) ((((r).sc_x4_ieee_25g_ctl[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_IEEE_25G_CTLr_IEEE_25G_CWSCR_ENf_SET(r,f) (r).sc_x4_ieee_25g_ctl[0]=(((r).sc_x4_ieee_25g_ctl[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_IEEE_25G_CTLr_IEEE_25G_5BIT_XORf_GET(r) ((((r).sc_x4_ieee_25g_ctl[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_IEEE_25G_CTLr_IEEE_25G_5BIT_XORf_SET(r,f) (r).sc_x4_ieee_25g_ctl[0]=(((r).sc_x4_ieee_25g_ctl[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_IEEE_25G_CTLr_IEEE_25G_AM_ENf_GET(r) ((((r).sc_x4_ieee_25g_ctl[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_IEEE_25G_CTLr_IEEE_25G_AM_ENf_SET(r,f) (r).sc_x4_ieee_25g_ctl[0]=(((r).sc_x4_ieee_25g_ctl[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_IEEE_25G_CTLr_IEEE_25G_AM0_FORMATf_GET(r) ((((r).sc_x4_ieee_25g_ctl[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_IEEE_25G_CTLr_IEEE_25G_AM0_FORMATf_SET(r,f) (r).sc_x4_ieee_25g_ctl[0]=(((r).sc_x4_ieee_25g_ctl[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_IEEE_25G_CTLr_IEEE_25G_AM123_FORMATf_GET(r) ((((r).sc_x4_ieee_25g_ctl[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_IEEE_25G_CTLr_IEEE_25G_AM123_FORMATf_SET(r,f) (r).sc_x4_ieee_25g_ctl[0]=(((r).sc_x4_ieee_25g_ctl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_IEEE_25G_CTLr_IEEE_WINDOW_SELf_GET(r) ((((r).sc_x4_ieee_25g_ctl[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_IEEE_25G_CTLr_IEEE_WINDOW_SELf_SET(r,f) (r).sc_x4_ieee_25g_ctl[0]=(((r).sc_x4_ieee_25g_ctl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_IEEE_25G_CTLr_IEEE_COUNT_SELf_GET(r) ((((r).sc_x4_ieee_25g_ctl[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_IEEE_25G_CTLr_IEEE_COUNT_SELf_SET(r,f) (r).sc_x4_ieee_25g_ctl[0]=(((r).sc_x4_ieee_25g_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_IEEE_25G_CTLr_CL74_SHCORRUPT_25IEEEf_GET(r) (((r).sc_x4_ieee_25g_ctl[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_IEEE_25G_CTLr_CL74_SHCORRUPT_25IEEEf_SET(r,f) (r).sc_x4_ieee_25g_ctl[0]=(((r).sc_x4_ieee_25g_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access SC_X4_IEEE_25G_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X4_IEEE_25G_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_IEEE_25G_CTLr,(_r._sc_x4_ieee_25g_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X4_IEEE_25G_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_IEEE_25G_CTLr,(_r._sc_x4_ieee_25g_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X4_IEEE_25G_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_IEEE_25G_CTLr,(_r._sc_x4_ieee_25g_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_SC_X4_IEEE_25G_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_IEEE_25G_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_ieee_25g_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_SC_X4_IEEE_25G_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_IEEE_25G_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_ieee_25g_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_SC_X4_IEEE_25G_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_IEEE_25G_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sc_x4_ieee_25g_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X4_IEEE_25G_CTLr BCMI_TSCF_GEN3_XGXS_SC_X4_IEEE_25G_CTLr
#define SC_X4_IEEE_25G_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_SC_X4_IEEE_25G_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X4_IEEE_25G_CTLr_t SC_X4_IEEE_25G_CTLr_t;
#define SC_X4_IEEE_25G_CTLr_CLR BCMI_TSCF_GEN3_XGXS_SC_X4_IEEE_25G_CTLr_CLR
#define SC_X4_IEEE_25G_CTLr_SET BCMI_TSCF_GEN3_XGXS_SC_X4_IEEE_25G_CTLr_SET
#define SC_X4_IEEE_25G_CTLr_GET BCMI_TSCF_GEN3_XGXS_SC_X4_IEEE_25G_CTLr_GET
#define SC_X4_IEEE_25G_CTLr_IEEE_25G_CWSCR_ENf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_IEEE_25G_CTLr_IEEE_25G_CWSCR_ENf_GET
#define SC_X4_IEEE_25G_CTLr_IEEE_25G_CWSCR_ENf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_IEEE_25G_CTLr_IEEE_25G_CWSCR_ENf_SET
#define SC_X4_IEEE_25G_CTLr_IEEE_25G_5BIT_XORf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_IEEE_25G_CTLr_IEEE_25G_5BIT_XORf_GET
#define SC_X4_IEEE_25G_CTLr_IEEE_25G_5BIT_XORf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_IEEE_25G_CTLr_IEEE_25G_5BIT_XORf_SET
#define SC_X4_IEEE_25G_CTLr_IEEE_25G_AM_ENf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_IEEE_25G_CTLr_IEEE_25G_AM_ENf_GET
#define SC_X4_IEEE_25G_CTLr_IEEE_25G_AM_ENf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_IEEE_25G_CTLr_IEEE_25G_AM_ENf_SET
#define SC_X4_IEEE_25G_CTLr_IEEE_25G_AM0_FORMATf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_IEEE_25G_CTLr_IEEE_25G_AM0_FORMATf_GET
#define SC_X4_IEEE_25G_CTLr_IEEE_25G_AM0_FORMATf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_IEEE_25G_CTLr_IEEE_25G_AM0_FORMATf_SET
#define SC_X4_IEEE_25G_CTLr_IEEE_25G_AM123_FORMATf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_IEEE_25G_CTLr_IEEE_25G_AM123_FORMATf_GET
#define SC_X4_IEEE_25G_CTLr_IEEE_25G_AM123_FORMATf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_IEEE_25G_CTLr_IEEE_25G_AM123_FORMATf_SET
#define SC_X4_IEEE_25G_CTLr_IEEE_WINDOW_SELf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_IEEE_25G_CTLr_IEEE_WINDOW_SELf_GET
#define SC_X4_IEEE_25G_CTLr_IEEE_WINDOW_SELf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_IEEE_25G_CTLr_IEEE_WINDOW_SELf_SET
#define SC_X4_IEEE_25G_CTLr_IEEE_COUNT_SELf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_IEEE_25G_CTLr_IEEE_COUNT_SELf_GET
#define SC_X4_IEEE_25G_CTLr_IEEE_COUNT_SELf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_IEEE_25G_CTLr_IEEE_COUNT_SELf_SET
#define SC_X4_IEEE_25G_CTLr_CL74_SHCORRUPT_25IEEEf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_IEEE_25G_CTLr_CL74_SHCORRUPT_25IEEEf_GET
#define SC_X4_IEEE_25G_CTLr_CL74_SHCORRUPT_25IEEEf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_IEEE_25G_CTLr_CL74_SHCORRUPT_25IEEEf_SET
#define READ_SC_X4_IEEE_25G_CTLr BCMI_TSCF_GEN3_XGXS_READ_SC_X4_IEEE_25G_CTLr
#define WRITE_SC_X4_IEEE_25G_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_SC_X4_IEEE_25G_CTLr
#define MODIFY_SC_X4_IEEE_25G_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X4_IEEE_25G_CTLr
#define READLN_SC_X4_IEEE_25G_CTLr BCMI_TSCF_GEN3_XGXS_READLN_SC_X4_IEEE_25G_CTLr
#define WRITELN_SC_X4_IEEE_25G_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_SC_X4_IEEE_25G_CTLr
#define WRITEALL_SC_X4_IEEE_25G_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_SC_X4_IEEE_25G_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X4_IEEE_25G_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X4_BYPASS
 * BLOCKS:   SC_X4_CONTROL
 * REGADDR:  0xc058
 * DESC:     Speed control bypass enable
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     SC_BYPASS        Disable speed control logic
 *     SC_IGNORE_TX_DATA_VLD Do not wait for tx_data_vld indication from PMD before taking TX pipe out of reset
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X4_BYPASSr (0x0000c058 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X4_BYPASSr_SIZE 4

/*
 * This structure should be used to declare and program SC_X4_BYPASS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X4_BYPASSr_s {
	uint32_t v[1];
	uint32_t sc_x4_bypass[1];
	uint32_t _sc_x4_bypass;
} BCMI_TSCF_GEN3_XGXS_SC_X4_BYPASSr_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X4_BYPASSr_CLR(r) (r).sc_x4_bypass[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X4_BYPASSr_SET(r,d) (r).sc_x4_bypass[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X4_BYPASSr_GET(r) (r).sc_x4_bypass[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X4_BYPASSr_SC_IGNORE_TX_DATA_VLDf_GET(r) ((((r).sc_x4_bypass[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_BYPASSr_SC_IGNORE_TX_DATA_VLDf_SET(r,f) (r).sc_x4_bypass[0]=(((r).sc_x4_bypass[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_BYPASSr_SC_BYPASSf_GET(r) (((r).sc_x4_bypass[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_BYPASSr_SC_BYPASSf_SET(r,f) (r).sc_x4_bypass[0]=(((r).sc_x4_bypass[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access SC_X4_BYPASS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X4_BYPASSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_BYPASSr,(_r._sc_x4_bypass))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X4_BYPASSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_BYPASSr,(_r._sc_x4_bypass)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X4_BYPASSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_BYPASSr,(_r._sc_x4_bypass))
#define BCMI_TSCF_GEN3_XGXS_READLN_SC_X4_BYPASSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_BYPASSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_bypass))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_SC_X4_BYPASSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_BYPASSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_bypass))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_SC_X4_BYPASSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_BYPASSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sc_x4_bypass))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X4_BYPASSr BCMI_TSCF_GEN3_XGXS_SC_X4_BYPASSr
#define SC_X4_BYPASSr_SIZE BCMI_TSCF_GEN3_XGXS_SC_X4_BYPASSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X4_BYPASSr_t SC_X4_BYPASSr_t;
#define SC_X4_BYPASSr_CLR BCMI_TSCF_GEN3_XGXS_SC_X4_BYPASSr_CLR
#define SC_X4_BYPASSr_SET BCMI_TSCF_GEN3_XGXS_SC_X4_BYPASSr_SET
#define SC_X4_BYPASSr_GET BCMI_TSCF_GEN3_XGXS_SC_X4_BYPASSr_GET
#define SC_X4_BYPASSr_SC_IGNORE_TX_DATA_VLDf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_BYPASSr_SC_IGNORE_TX_DATA_VLDf_GET
#define SC_X4_BYPASSr_SC_IGNORE_TX_DATA_VLDf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_BYPASSr_SC_IGNORE_TX_DATA_VLDf_SET
#define SC_X4_BYPASSr_SC_BYPASSf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_BYPASSr_SC_BYPASSf_GET
#define SC_X4_BYPASSr_SC_BYPASSf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_BYPASSr_SC_BYPASSf_SET
#define READ_SC_X4_BYPASSr BCMI_TSCF_GEN3_XGXS_READ_SC_X4_BYPASSr
#define WRITE_SC_X4_BYPASSr BCMI_TSCF_GEN3_XGXS_WRITE_SC_X4_BYPASSr
#define MODIFY_SC_X4_BYPASSr BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X4_BYPASSr
#define READLN_SC_X4_BYPASSr BCMI_TSCF_GEN3_XGXS_READLN_SC_X4_BYPASSr
#define WRITELN_SC_X4_BYPASSr BCMI_TSCF_GEN3_XGXS_WRITELN_SC_X4_BYPASSr
#define WRITEALL_SC_X4_BYPASSr BCMI_TSCF_GEN3_XGXS_WRITEALL_SC_X4_BYPASSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X4_BYPASSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X4_SPARE0
 * BLOCKS:   SC_X4_CONTROL
 * REGADDR:  0xc05d
 * DESC:     spare 0 register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     SPARE0           Spare register
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X4_SPARE0r (0x0000c05d | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X4_SPARE0r_SIZE 4

/*
 * This structure should be used to declare and program SC_X4_SPARE0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X4_SPARE0r_s {
	uint32_t v[1];
	uint32_t sc_x4_spare0[1];
	uint32_t _sc_x4_spare0;
} BCMI_TSCF_GEN3_XGXS_SC_X4_SPARE0r_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X4_SPARE0r_CLR(r) (r).sc_x4_spare0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X4_SPARE0r_SET(r,d) (r).sc_x4_spare0[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X4_SPARE0r_GET(r) (r).sc_x4_spare0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X4_SPARE0r_SPARE0f_GET(r) (((r).sc_x4_spare0[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_SPARE0r_SPARE0f_SET(r,f) (r).sc_x4_spare0[0]=(((r).sc_x4_spare0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access SC_X4_SPARE0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X4_SPARE0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_SPARE0r,(_r._sc_x4_spare0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X4_SPARE0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_SPARE0r,(_r._sc_x4_spare0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X4_SPARE0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_SPARE0r,(_r._sc_x4_spare0))
#define BCMI_TSCF_GEN3_XGXS_READLN_SC_X4_SPARE0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_SPARE0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_spare0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_SC_X4_SPARE0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_SPARE0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_spare0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_SC_X4_SPARE0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_SPARE0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sc_x4_spare0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X4_SPARE0r BCMI_TSCF_GEN3_XGXS_SC_X4_SPARE0r
#define SC_X4_SPARE0r_SIZE BCMI_TSCF_GEN3_XGXS_SC_X4_SPARE0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X4_SPARE0r_t SC_X4_SPARE0r_t;
#define SC_X4_SPARE0r_CLR BCMI_TSCF_GEN3_XGXS_SC_X4_SPARE0r_CLR
#define SC_X4_SPARE0r_SET BCMI_TSCF_GEN3_XGXS_SC_X4_SPARE0r_SET
#define SC_X4_SPARE0r_GET BCMI_TSCF_GEN3_XGXS_SC_X4_SPARE0r_GET
#define SC_X4_SPARE0r_SPARE0f_GET BCMI_TSCF_GEN3_XGXS_SC_X4_SPARE0r_SPARE0f_GET
#define SC_X4_SPARE0r_SPARE0f_SET BCMI_TSCF_GEN3_XGXS_SC_X4_SPARE0r_SPARE0f_SET
#define READ_SC_X4_SPARE0r BCMI_TSCF_GEN3_XGXS_READ_SC_X4_SPARE0r
#define WRITE_SC_X4_SPARE0r BCMI_TSCF_GEN3_XGXS_WRITE_SC_X4_SPARE0r
#define MODIFY_SC_X4_SPARE0r BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X4_SPARE0r
#define READLN_SC_X4_SPARE0r BCMI_TSCF_GEN3_XGXS_READLN_SC_X4_SPARE0r
#define WRITELN_SC_X4_SPARE0r BCMI_TSCF_GEN3_XGXS_WRITELN_SC_X4_SPARE0r
#define WRITEALL_SC_X4_SPARE0r BCMI_TSCF_GEN3_XGXS_WRITEALL_SC_X4_SPARE0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X4_SPARE0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X4_SPARE1
 * BLOCKS:   SC_X4_CONTROL
 * REGADDR:  0xc05e
 * DESC:     spare 1 register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     SPARE1           Spare register
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X4_SPARE1r (0x0000c05e | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X4_SPARE1r_SIZE 4

/*
 * This structure should be used to declare and program SC_X4_SPARE1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X4_SPARE1r_s {
	uint32_t v[1];
	uint32_t sc_x4_spare1[1];
	uint32_t _sc_x4_spare1;
} BCMI_TSCF_GEN3_XGXS_SC_X4_SPARE1r_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X4_SPARE1r_CLR(r) (r).sc_x4_spare1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X4_SPARE1r_SET(r,d) (r).sc_x4_spare1[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X4_SPARE1r_GET(r) (r).sc_x4_spare1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X4_SPARE1r_SPARE1f_GET(r) (((r).sc_x4_spare1[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_SPARE1r_SPARE1f_SET(r,f) (r).sc_x4_spare1[0]=(((r).sc_x4_spare1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access SC_X4_SPARE1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X4_SPARE1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_SPARE1r,(_r._sc_x4_spare1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X4_SPARE1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_SPARE1r,(_r._sc_x4_spare1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X4_SPARE1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_SPARE1r,(_r._sc_x4_spare1))
#define BCMI_TSCF_GEN3_XGXS_READLN_SC_X4_SPARE1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_SPARE1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_spare1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_SC_X4_SPARE1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_SPARE1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_spare1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_SC_X4_SPARE1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_SPARE1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sc_x4_spare1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X4_SPARE1r BCMI_TSCF_GEN3_XGXS_SC_X4_SPARE1r
#define SC_X4_SPARE1r_SIZE BCMI_TSCF_GEN3_XGXS_SC_X4_SPARE1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X4_SPARE1r_t SC_X4_SPARE1r_t;
#define SC_X4_SPARE1r_CLR BCMI_TSCF_GEN3_XGXS_SC_X4_SPARE1r_CLR
#define SC_X4_SPARE1r_SET BCMI_TSCF_GEN3_XGXS_SC_X4_SPARE1r_SET
#define SC_X4_SPARE1r_GET BCMI_TSCF_GEN3_XGXS_SC_X4_SPARE1r_GET
#define SC_X4_SPARE1r_SPARE1f_GET BCMI_TSCF_GEN3_XGXS_SC_X4_SPARE1r_SPARE1f_GET
#define SC_X4_SPARE1r_SPARE1f_SET BCMI_TSCF_GEN3_XGXS_SC_X4_SPARE1r_SPARE1f_SET
#define READ_SC_X4_SPARE1r BCMI_TSCF_GEN3_XGXS_READ_SC_X4_SPARE1r
#define WRITE_SC_X4_SPARE1r BCMI_TSCF_GEN3_XGXS_WRITE_SC_X4_SPARE1r
#define MODIFY_SC_X4_SPARE1r BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X4_SPARE1r
#define READLN_SC_X4_SPARE1r BCMI_TSCF_GEN3_XGXS_READLN_SC_X4_SPARE1r
#define WRITELN_SC_X4_SPARE1r BCMI_TSCF_GEN3_XGXS_WRITELN_SC_X4_SPARE1r
#define WRITEALL_SC_X4_SPARE1r BCMI_TSCF_GEN3_XGXS_WRITEALL_SC_X4_SPARE1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X4_SPARE1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X4_FLD_OVRR_EN0_TYPE
 * BLOCKS:   SC_X4_FIELD_OVERRIDE_ENABLE
 * REGADDR:  0xc060
 * DESC:     Enable override of individual fields
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL36RX_EN_OEN    The hardware/software table field named cl36rx_en is overriden with the value from the register rx_x4_control0-cl36rx_en.
 *     CL36TX_EN_OEN    The hardware/software table field named cl36tx_en is overriden with the value from the register tx_x4_control0-cl36tx_en.
 *     T_PMA_40B_MODE_OEN The hardware/software table field named t_pma_40b_mode is overriden with the value from the register tx_x4_control0-t_pma_40b_mode.
 *     DEC_FSM_MODE_OEN The hardware/software table field named dec_fsm_mode is overriden with the value from the register rx_x4_control0-dec_fsm_mode.
 *     DESKEW_MODE_OEN  The hardware/software table field named deskew_mode is overriden with the value from the register rx_x4_control0-deskew_mode.
 *     DEC_TL_MODE_OEN  The hardware/software table field named dec_tl_mode is overriden with the value from the register rx_x4_control0-dec_tl_mode.
 *     DESCR_MODE_OEN   The hardware/software table field named descr_mode is overriden with the value from the register rx_x4_control0-descr_mode.
 *     CL72_EN_OEN      The hardware/software table field named cl72_en is overriden with the value from the register main0-cl72_en.
 *     SCR_MODE_OEN     The hardware/software table field named scr_mode is overriden with the value from the register tx_x4_control0-scr_mode.
 *     T_PMA_BTMX_MODE_OEN The hardware/software table field named t_pma_btmx_mode is overriden with the value from the register tx_x4_control0-t_pma_btmx_mode.
 *     T_HG2_ENABLE_OEN The hardware/software table field named t_HG2_ENABLE is overriden with the value from the register tx_x4_control0-HG2_ENABLE.
 *     T_ENC_MODE_OEN   The hardware/software table field named t_enc_mode is overriden with the value from the register tx_x4_control0-t_enc_mode.
 *     T_FIFO_MODE_OEN  The hardware/software table field named t_fifo_mode is overriden with the value from the register tx_x2_control0-t_fifo_mode.
 *     OS_MODE_OEN      The hardware/software table field named os_mode is overriden with the value from the register tx_x4_control0-os_mode.
 *     NUM_LANES_OEN    The hardware/software table field named num_lanes is overriden with the value from the register sc_x4_control-num_lanes_override_value.
 *     CL36RX_10BIT_PMD_DATA_EN_OEN The hardware/software table field named cl36rx_10bit_pmd_data_en is overriden with the value from the register rx_x4_control0-cl36rx_10bit_pmd_data_en.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr (0x0000c060 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_SIZE 4

/*
 * This structure should be used to declare and program SC_X4_FLD_OVRR_EN0_TYPE.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_s {
	uint32_t v[1];
	uint32_t sc_x4_fld_ovrr_en0_type[1];
	uint32_t _sc_x4_fld_ovrr_en0_type;
} BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_CLR(r) (r).sc_x4_fld_ovrr_en0_type[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_SET(r,d) (r).sc_x4_fld_ovrr_en0_type[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_GET(r) (r).sc_x4_fld_ovrr_en0_type[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_CL36RX_10BIT_PMD_DATA_EN_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en0_type[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_CL36RX_10BIT_PMD_DATA_EN_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en0_type[0]=(((r).sc_x4_fld_ovrr_en0_type[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_NUM_LANES_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en0_type[0]) >> 14) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_NUM_LANES_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en0_type[0]=(((r).sc_x4_fld_ovrr_en0_type[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_OS_MODE_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en0_type[0]) >> 13) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_OS_MODE_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en0_type[0]=(((r).sc_x4_fld_ovrr_en0_type[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_T_FIFO_MODE_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en0_type[0]) >> 12) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_T_FIFO_MODE_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en0_type[0]=(((r).sc_x4_fld_ovrr_en0_type[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_T_ENC_MODE_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en0_type[0]) >> 11) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_T_ENC_MODE_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en0_type[0]=(((r).sc_x4_fld_ovrr_en0_type[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_T_HG2_ENABLE_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en0_type[0]) >> 10) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_T_HG2_ENABLE_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en0_type[0]=(((r).sc_x4_fld_ovrr_en0_type[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_T_PMA_BTMX_MODE_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en0_type[0]) >> 9) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_T_PMA_BTMX_MODE_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en0_type[0]=(((r).sc_x4_fld_ovrr_en0_type[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_SCR_MODE_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en0_type[0]) >> 8) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_SCR_MODE_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en0_type[0]=(((r).sc_x4_fld_ovrr_en0_type[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_CL72_EN_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en0_type[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_CL72_EN_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en0_type[0]=(((r).sc_x4_fld_ovrr_en0_type[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_DESCR_MODE_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en0_type[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_DESCR_MODE_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en0_type[0]=(((r).sc_x4_fld_ovrr_en0_type[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_DEC_TL_MODE_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en0_type[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_DEC_TL_MODE_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en0_type[0]=(((r).sc_x4_fld_ovrr_en0_type[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_DESKEW_MODE_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en0_type[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_DESKEW_MODE_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en0_type[0]=(((r).sc_x4_fld_ovrr_en0_type[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_DEC_FSM_MODE_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en0_type[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_DEC_FSM_MODE_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en0_type[0]=(((r).sc_x4_fld_ovrr_en0_type[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_T_PMA_40B_MODE_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en0_type[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_T_PMA_40B_MODE_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en0_type[0]=(((r).sc_x4_fld_ovrr_en0_type[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_CL36TX_EN_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en0_type[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_CL36TX_EN_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en0_type[0]=(((r).sc_x4_fld_ovrr_en0_type[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_CL36RX_EN_OENf_GET(r) (((r).sc_x4_fld_ovrr_en0_type[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_CL36RX_EN_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en0_type[0]=(((r).sc_x4_fld_ovrr_en0_type[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access SC_X4_FLD_OVRR_EN0_TYPE.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X4_FLD_OVRR_EN0_TYPEr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr,(_r._sc_x4_fld_ovrr_en0_type))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X4_FLD_OVRR_EN0_TYPEr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr,(_r._sc_x4_fld_ovrr_en0_type)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X4_FLD_OVRR_EN0_TYPEr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr,(_r._sc_x4_fld_ovrr_en0_type))
#define BCMI_TSCF_GEN3_XGXS_READLN_SC_X4_FLD_OVRR_EN0_TYPEr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_fld_ovrr_en0_type))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_SC_X4_FLD_OVRR_EN0_TYPEr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_fld_ovrr_en0_type))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_SC_X4_FLD_OVRR_EN0_TYPEr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sc_x4_fld_ovrr_en0_type))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X4_FLD_OVRR_EN0_TYPEr BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr
#define SC_X4_FLD_OVRR_EN0_TYPEr_SIZE BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_t SC_X4_FLD_OVRR_EN0_TYPEr_t;
#define SC_X4_FLD_OVRR_EN0_TYPEr_CLR BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_CLR
#define SC_X4_FLD_OVRR_EN0_TYPEr_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_SET
#define SC_X4_FLD_OVRR_EN0_TYPEr_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_GET
#define SC_X4_FLD_OVRR_EN0_TYPEr_CL36RX_10BIT_PMD_DATA_EN_OENf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_CL36RX_10BIT_PMD_DATA_EN_OENf_GET
#define SC_X4_FLD_OVRR_EN0_TYPEr_CL36RX_10BIT_PMD_DATA_EN_OENf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_CL36RX_10BIT_PMD_DATA_EN_OENf_SET
#define SC_X4_FLD_OVRR_EN0_TYPEr_NUM_LANES_OENf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_NUM_LANES_OENf_GET
#define SC_X4_FLD_OVRR_EN0_TYPEr_NUM_LANES_OENf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_NUM_LANES_OENf_SET
#define SC_X4_FLD_OVRR_EN0_TYPEr_OS_MODE_OENf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_OS_MODE_OENf_GET
#define SC_X4_FLD_OVRR_EN0_TYPEr_OS_MODE_OENf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_OS_MODE_OENf_SET
#define SC_X4_FLD_OVRR_EN0_TYPEr_T_FIFO_MODE_OENf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_T_FIFO_MODE_OENf_GET
#define SC_X4_FLD_OVRR_EN0_TYPEr_T_FIFO_MODE_OENf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_T_FIFO_MODE_OENf_SET
#define SC_X4_FLD_OVRR_EN0_TYPEr_T_ENC_MODE_OENf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_T_ENC_MODE_OENf_GET
#define SC_X4_FLD_OVRR_EN0_TYPEr_T_ENC_MODE_OENf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_T_ENC_MODE_OENf_SET
#define SC_X4_FLD_OVRR_EN0_TYPEr_T_HG2_ENABLE_OENf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_T_HG2_ENABLE_OENf_GET
#define SC_X4_FLD_OVRR_EN0_TYPEr_T_HG2_ENABLE_OENf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_T_HG2_ENABLE_OENf_SET
#define SC_X4_FLD_OVRR_EN0_TYPEr_T_PMA_BTMX_MODE_OENf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_T_PMA_BTMX_MODE_OENf_GET
#define SC_X4_FLD_OVRR_EN0_TYPEr_T_PMA_BTMX_MODE_OENf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_T_PMA_BTMX_MODE_OENf_SET
#define SC_X4_FLD_OVRR_EN0_TYPEr_SCR_MODE_OENf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_SCR_MODE_OENf_GET
#define SC_X4_FLD_OVRR_EN0_TYPEr_SCR_MODE_OENf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_SCR_MODE_OENf_SET
#define SC_X4_FLD_OVRR_EN0_TYPEr_CL72_EN_OENf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_CL72_EN_OENf_GET
#define SC_X4_FLD_OVRR_EN0_TYPEr_CL72_EN_OENf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_CL72_EN_OENf_SET
#define SC_X4_FLD_OVRR_EN0_TYPEr_DESCR_MODE_OENf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_DESCR_MODE_OENf_GET
#define SC_X4_FLD_OVRR_EN0_TYPEr_DESCR_MODE_OENf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_DESCR_MODE_OENf_SET
#define SC_X4_FLD_OVRR_EN0_TYPEr_DEC_TL_MODE_OENf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_DEC_TL_MODE_OENf_GET
#define SC_X4_FLD_OVRR_EN0_TYPEr_DEC_TL_MODE_OENf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_DEC_TL_MODE_OENf_SET
#define SC_X4_FLD_OVRR_EN0_TYPEr_DESKEW_MODE_OENf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_DESKEW_MODE_OENf_GET
#define SC_X4_FLD_OVRR_EN0_TYPEr_DESKEW_MODE_OENf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_DESKEW_MODE_OENf_SET
#define SC_X4_FLD_OVRR_EN0_TYPEr_DEC_FSM_MODE_OENf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_DEC_FSM_MODE_OENf_GET
#define SC_X4_FLD_OVRR_EN0_TYPEr_DEC_FSM_MODE_OENf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_DEC_FSM_MODE_OENf_SET
#define SC_X4_FLD_OVRR_EN0_TYPEr_T_PMA_40B_MODE_OENf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_T_PMA_40B_MODE_OENf_GET
#define SC_X4_FLD_OVRR_EN0_TYPEr_T_PMA_40B_MODE_OENf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_T_PMA_40B_MODE_OENf_SET
#define SC_X4_FLD_OVRR_EN0_TYPEr_CL36TX_EN_OENf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_CL36TX_EN_OENf_GET
#define SC_X4_FLD_OVRR_EN0_TYPEr_CL36TX_EN_OENf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_CL36TX_EN_OENf_SET
#define SC_X4_FLD_OVRR_EN0_TYPEr_CL36RX_EN_OENf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_CL36RX_EN_OENf_GET
#define SC_X4_FLD_OVRR_EN0_TYPEr_CL36RX_EN_OENf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr_CL36RX_EN_OENf_SET
#define READ_SC_X4_FLD_OVRR_EN0_TYPEr BCMI_TSCF_GEN3_XGXS_READ_SC_X4_FLD_OVRR_EN0_TYPEr
#define WRITE_SC_X4_FLD_OVRR_EN0_TYPEr BCMI_TSCF_GEN3_XGXS_WRITE_SC_X4_FLD_OVRR_EN0_TYPEr
#define MODIFY_SC_X4_FLD_OVRR_EN0_TYPEr BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X4_FLD_OVRR_EN0_TYPEr
#define READLN_SC_X4_FLD_OVRR_EN0_TYPEr BCMI_TSCF_GEN3_XGXS_READLN_SC_X4_FLD_OVRR_EN0_TYPEr
#define WRITELN_SC_X4_FLD_OVRR_EN0_TYPEr BCMI_TSCF_GEN3_XGXS_WRITELN_SC_X4_FLD_OVRR_EN0_TYPEr
#define WRITEALL_SC_X4_FLD_OVRR_EN0_TYPEr BCMI_TSCF_GEN3_XGXS_WRITEALL_SC_X4_FLD_OVRR_EN0_TYPEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN0_TYPEr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X4_FLD_OVRR_EN1_TYPE
 * BLOCKS:   SC_X4_FIELD_OVERRIDE_ENABLE
 * REGADDR:  0xc061
 * DESC:     Enable override of individual fields
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     T_CL91_CW_SCRAMBLE_OEN The hardware/software table field named t_cl91_cw_scramble is overriden with the value from the register tx_x4_control0-cl91_cw_scramble.
 *     T_FIVE_BIT_XOR_EN_OEN The hardware/software table field named t_five_bit_xor_en is overriden with the value from the register tx_x4_control0-five_bit_xor_en.
 *     T_PMA_CL91_MUX_SEL_OEN The hardware/software table field named t_pma_cl91_mux_sel is overriden with the value from the register tx_x4_control0-t_pma_cl91_mux_sel.
 *     T_PMA_WATERMARK_OEN The hardware/software table field named t_pma_watermark is overriden with the value from the register tx_x4_control0-t_pma_watermark.
 *     T_PMA_BITMUX_DELAY_OEN The hardware/software table field named t_pma_bitmux_delay is overriden with the value from the register tx_x4_control0-t_pma_bitmux_delay.
 *     MAC_CREDITGENCNT_OEN The hardware/software table field named mac_creditgencnt is overriden with the value from the register tx_x4_credit_gen0-mac_creditgencnt.
 *     LOOPCNT1_OEN     The hardware/software table field named loopcnt1 is overriden with the value from the register tx_x4_credit_gen0-loopcnt1.
 *     LOOPCNT0_OEN     The hardware/software table field named loopcnt0 is overriden with the value from the register tx_x4_credit_gen0-loopcnt0.
 *     CLOCKCNT1_OEN    The hardware/software table field named clockcnt1 is overriden with the value from the register tx_x4_credit_gen0-clockcnt1.
 *     CLOCKCNT0_OEN    The hardware/software table field named clockcnt0 is overriden with the value from the register tx_x4_credit_gen0-clockcnt0.
 *     CREDITENABLE_OEN The hardware/software table field named creditenable is overriden with the value from the register tx_x4_credit_gen0-creditenable.
 *     BS_BTMX_MODE_OEN The hardware/software table field named bs_btmx_mode is overriden with the value from the register rx_x4_control0-bs_btmx_mode.
 *     BS_DIST_MODE_OEN The hardware/software table field named bs_dist_mode is overriden with the value from the register rx_x4_control0-bs_dist_mode.
 *     BS_SYNC_EN_OEN   The hardware/software table field named bs_sync_en is overriden with the value from the register rx_x4_control0-bs_sync_en.
 *     BS_SM_SYNC_MODE_OEN The hardware/software table field named bs_sm_sync_mode is overriden with the value from the register rx_x4_control0-bs_sm_sync_mode.
 *     R_HG2_ENABLE_OEN The hardware/software table field named r_HG2_ENABLE is overriden with the value from the register rx_x4_control0-HG2_ENABLE.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr (0x0000c061 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_SIZE 4

/*
 * This structure should be used to declare and program SC_X4_FLD_OVRR_EN1_TYPE.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_s {
	uint32_t v[1];
	uint32_t sc_x4_fld_ovrr_en1_type[1];
	uint32_t _sc_x4_fld_ovrr_en1_type;
} BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_CLR(r) (r).sc_x4_fld_ovrr_en1_type[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_SET(r,d) (r).sc_x4_fld_ovrr_en1_type[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_GET(r) (r).sc_x4_fld_ovrr_en1_type[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_R_HG2_ENABLE_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en1_type[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_R_HG2_ENABLE_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en1_type[0]=(((r).sc_x4_fld_ovrr_en1_type[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_BS_SM_SYNC_MODE_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en1_type[0]) >> 14) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_BS_SM_SYNC_MODE_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en1_type[0]=(((r).sc_x4_fld_ovrr_en1_type[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_BS_SYNC_EN_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en1_type[0]) >> 13) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_BS_SYNC_EN_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en1_type[0]=(((r).sc_x4_fld_ovrr_en1_type[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_BS_DIST_MODE_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en1_type[0]) >> 12) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_BS_DIST_MODE_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en1_type[0]=(((r).sc_x4_fld_ovrr_en1_type[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_BS_BTMX_MODE_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en1_type[0]) >> 11) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_BS_BTMX_MODE_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en1_type[0]=(((r).sc_x4_fld_ovrr_en1_type[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_CREDITENABLE_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en1_type[0]) >> 10) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_CREDITENABLE_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en1_type[0]=(((r).sc_x4_fld_ovrr_en1_type[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_CLOCKCNT0_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en1_type[0]) >> 9) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_CLOCKCNT0_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en1_type[0]=(((r).sc_x4_fld_ovrr_en1_type[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_CLOCKCNT1_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en1_type[0]) >> 8) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_CLOCKCNT1_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en1_type[0]=(((r).sc_x4_fld_ovrr_en1_type[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_LOOPCNT0_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en1_type[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_LOOPCNT0_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en1_type[0]=(((r).sc_x4_fld_ovrr_en1_type[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_LOOPCNT1_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en1_type[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_LOOPCNT1_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en1_type[0]=(((r).sc_x4_fld_ovrr_en1_type[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_MAC_CREDITGENCNT_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en1_type[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_MAC_CREDITGENCNT_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en1_type[0]=(((r).sc_x4_fld_ovrr_en1_type[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_T_PMA_BITMUX_DELAY_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en1_type[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_T_PMA_BITMUX_DELAY_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en1_type[0]=(((r).sc_x4_fld_ovrr_en1_type[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_T_PMA_WATERMARK_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en1_type[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_T_PMA_WATERMARK_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en1_type[0]=(((r).sc_x4_fld_ovrr_en1_type[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_T_PMA_CL91_MUX_SEL_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en1_type[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_T_PMA_CL91_MUX_SEL_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en1_type[0]=(((r).sc_x4_fld_ovrr_en1_type[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_T_FIVE_BIT_XOR_EN_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en1_type[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_T_FIVE_BIT_XOR_EN_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en1_type[0]=(((r).sc_x4_fld_ovrr_en1_type[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_T_CL91_CW_SCRAMBLE_OENf_GET(r) (((r).sc_x4_fld_ovrr_en1_type[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_T_CL91_CW_SCRAMBLE_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en1_type[0]=(((r).sc_x4_fld_ovrr_en1_type[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access SC_X4_FLD_OVRR_EN1_TYPE.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X4_FLD_OVRR_EN1_TYPEr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr,(_r._sc_x4_fld_ovrr_en1_type))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X4_FLD_OVRR_EN1_TYPEr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr,(_r._sc_x4_fld_ovrr_en1_type)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X4_FLD_OVRR_EN1_TYPEr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr,(_r._sc_x4_fld_ovrr_en1_type))
#define BCMI_TSCF_GEN3_XGXS_READLN_SC_X4_FLD_OVRR_EN1_TYPEr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_fld_ovrr_en1_type))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_SC_X4_FLD_OVRR_EN1_TYPEr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_fld_ovrr_en1_type))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_SC_X4_FLD_OVRR_EN1_TYPEr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sc_x4_fld_ovrr_en1_type))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X4_FLD_OVRR_EN1_TYPEr BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr
#define SC_X4_FLD_OVRR_EN1_TYPEr_SIZE BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_t SC_X4_FLD_OVRR_EN1_TYPEr_t;
#define SC_X4_FLD_OVRR_EN1_TYPEr_CLR BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_CLR
#define SC_X4_FLD_OVRR_EN1_TYPEr_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_SET
#define SC_X4_FLD_OVRR_EN1_TYPEr_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_GET
#define SC_X4_FLD_OVRR_EN1_TYPEr_R_HG2_ENABLE_OENf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_R_HG2_ENABLE_OENf_GET
#define SC_X4_FLD_OVRR_EN1_TYPEr_R_HG2_ENABLE_OENf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_R_HG2_ENABLE_OENf_SET
#define SC_X4_FLD_OVRR_EN1_TYPEr_BS_SM_SYNC_MODE_OENf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_BS_SM_SYNC_MODE_OENf_GET
#define SC_X4_FLD_OVRR_EN1_TYPEr_BS_SM_SYNC_MODE_OENf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_BS_SM_SYNC_MODE_OENf_SET
#define SC_X4_FLD_OVRR_EN1_TYPEr_BS_SYNC_EN_OENf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_BS_SYNC_EN_OENf_GET
#define SC_X4_FLD_OVRR_EN1_TYPEr_BS_SYNC_EN_OENf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_BS_SYNC_EN_OENf_SET
#define SC_X4_FLD_OVRR_EN1_TYPEr_BS_DIST_MODE_OENf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_BS_DIST_MODE_OENf_GET
#define SC_X4_FLD_OVRR_EN1_TYPEr_BS_DIST_MODE_OENf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_BS_DIST_MODE_OENf_SET
#define SC_X4_FLD_OVRR_EN1_TYPEr_BS_BTMX_MODE_OENf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_BS_BTMX_MODE_OENf_GET
#define SC_X4_FLD_OVRR_EN1_TYPEr_BS_BTMX_MODE_OENf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_BS_BTMX_MODE_OENf_SET
#define SC_X4_FLD_OVRR_EN1_TYPEr_CREDITENABLE_OENf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_CREDITENABLE_OENf_GET
#define SC_X4_FLD_OVRR_EN1_TYPEr_CREDITENABLE_OENf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_CREDITENABLE_OENf_SET
#define SC_X4_FLD_OVRR_EN1_TYPEr_CLOCKCNT0_OENf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_CLOCKCNT0_OENf_GET
#define SC_X4_FLD_OVRR_EN1_TYPEr_CLOCKCNT0_OENf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_CLOCKCNT0_OENf_SET
#define SC_X4_FLD_OVRR_EN1_TYPEr_CLOCKCNT1_OENf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_CLOCKCNT1_OENf_GET
#define SC_X4_FLD_OVRR_EN1_TYPEr_CLOCKCNT1_OENf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_CLOCKCNT1_OENf_SET
#define SC_X4_FLD_OVRR_EN1_TYPEr_LOOPCNT0_OENf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_LOOPCNT0_OENf_GET
#define SC_X4_FLD_OVRR_EN1_TYPEr_LOOPCNT0_OENf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_LOOPCNT0_OENf_SET
#define SC_X4_FLD_OVRR_EN1_TYPEr_LOOPCNT1_OENf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_LOOPCNT1_OENf_GET
#define SC_X4_FLD_OVRR_EN1_TYPEr_LOOPCNT1_OENf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_LOOPCNT1_OENf_SET
#define SC_X4_FLD_OVRR_EN1_TYPEr_MAC_CREDITGENCNT_OENf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_MAC_CREDITGENCNT_OENf_GET
#define SC_X4_FLD_OVRR_EN1_TYPEr_MAC_CREDITGENCNT_OENf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_MAC_CREDITGENCNT_OENf_SET
#define SC_X4_FLD_OVRR_EN1_TYPEr_T_PMA_BITMUX_DELAY_OENf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_T_PMA_BITMUX_DELAY_OENf_GET
#define SC_X4_FLD_OVRR_EN1_TYPEr_T_PMA_BITMUX_DELAY_OENf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_T_PMA_BITMUX_DELAY_OENf_SET
#define SC_X4_FLD_OVRR_EN1_TYPEr_T_PMA_WATERMARK_OENf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_T_PMA_WATERMARK_OENf_GET
#define SC_X4_FLD_OVRR_EN1_TYPEr_T_PMA_WATERMARK_OENf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_T_PMA_WATERMARK_OENf_SET
#define SC_X4_FLD_OVRR_EN1_TYPEr_T_PMA_CL91_MUX_SEL_OENf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_T_PMA_CL91_MUX_SEL_OENf_GET
#define SC_X4_FLD_OVRR_EN1_TYPEr_T_PMA_CL91_MUX_SEL_OENf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_T_PMA_CL91_MUX_SEL_OENf_SET
#define SC_X4_FLD_OVRR_EN1_TYPEr_T_FIVE_BIT_XOR_EN_OENf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_T_FIVE_BIT_XOR_EN_OENf_GET
#define SC_X4_FLD_OVRR_EN1_TYPEr_T_FIVE_BIT_XOR_EN_OENf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_T_FIVE_BIT_XOR_EN_OENf_SET
#define SC_X4_FLD_OVRR_EN1_TYPEr_T_CL91_CW_SCRAMBLE_OENf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_T_CL91_CW_SCRAMBLE_OENf_GET
#define SC_X4_FLD_OVRR_EN1_TYPEr_T_CL91_CW_SCRAMBLE_OENf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr_T_CL91_CW_SCRAMBLE_OENf_SET
#define READ_SC_X4_FLD_OVRR_EN1_TYPEr BCMI_TSCF_GEN3_XGXS_READ_SC_X4_FLD_OVRR_EN1_TYPEr
#define WRITE_SC_X4_FLD_OVRR_EN1_TYPEr BCMI_TSCF_GEN3_XGXS_WRITE_SC_X4_FLD_OVRR_EN1_TYPEr
#define MODIFY_SC_X4_FLD_OVRR_EN1_TYPEr BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X4_FLD_OVRR_EN1_TYPEr
#define READLN_SC_X4_FLD_OVRR_EN1_TYPEr BCMI_TSCF_GEN3_XGXS_READLN_SC_X4_FLD_OVRR_EN1_TYPEr
#define WRITELN_SC_X4_FLD_OVRR_EN1_TYPEr BCMI_TSCF_GEN3_XGXS_WRITELN_SC_X4_FLD_OVRR_EN1_TYPEr
#define WRITEALL_SC_X4_FLD_OVRR_EN1_TYPEr BCMI_TSCF_GEN3_XGXS_WRITEALL_SC_X4_FLD_OVRR_EN1_TYPEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN1_TYPEr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X4_FLD_OVRR_EN2_TYPE
 * BLOCKS:   SC_X4_FIELD_OVERRIDE_ENABLE
 * REGADDR:  0xc062
 * DESC:     Enable override of individual fields
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AM_SPACING_MUL_OEN The hardware/software table field named AM_spacing_mul is overriden with the value from the register tx_x4_control0-AM_spacing_mul.
 *     CL91_BLKSYNC_MODE_OEN The hardware/software table field named cl91_blksync_mode is overriden with the value from the register rx_x4_control0-cl91_blksync_mode.
 *     R_MERGE_MODE_OEN The hardware/software table field named r_merge_mode is overriden with the value from the register rx_x4_control0-r_merge_mode.
 *     R_CL91_CW_SCRAMBLE_OEN The hardware/software table field named r_cl91_cw_scramble is overriden with the value from the register rx_x4_control0-cl91_cw_scramble.
 *     R_TC_IN_MODE_OEN The hardware/software table field named r_tc_in_mode is overriden with the value from the register rx_x4_control0-r_tc_in_mode.
 *     R_TC_MODE_OEN    The hardware/software table field named r_tc_mode is overriden with the value from the register rx_x4_control0-r_tc_mode.
 *     R_FIVE_BIT_XOR_EN_OEN The hardware/software table field named r_five_bit_xor_en is overriden with the value from the register rx_x4_control0-five_bit_xor_en.
 *     R_TC_OUT_MODE_OEN The hardware/software table field named r_tc_out_mode is overriden with the value from the register rx_x4_control0-r_tc_out_mode.
 *     CORRUPT_2ND_GROUP The hardware/software table field named corrupt_2nd_group is overriden with the value from the register sc_x4_control-corrupt_2nd_group.
 *     CORRUPT_6TH_GROUP The hardware/software table field named corrupt_6th_group is overriden with the value from the register sc_x4_control-corrupt_6th_group.
 *     CL74_SHCORRUPT   The hardware/software table field named cl74_shcorrupt is overriden with the value from the register sc_x4_control-cl74_shcorrupt.
 *     BER_COUNT_SEL    The hardware/software table field named ber_count_sel is overriden with the value from the register sc_x4_control-ber_count_sel.
 *     BER_WINDOW_SEL   The hardware/software table field ber_window_sel is overriden with the value from the register sc_x4_control-ber_window_sel.
 *     USE_100G_AM0     The hardware/software table field named use_100G_am0 is overriden with the value from the register sc_x4_control-use_100G_am0.
 *     USE_100G_AM123   The hardware/software table field named use_100G_am123 is overriden with the value from the register sc_x4_control-use_100G_am123.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr (0x0000c062 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_SIZE 4

/*
 * This structure should be used to declare and program SC_X4_FLD_OVRR_EN2_TYPE.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_s {
	uint32_t v[1];
	uint32_t sc_x4_fld_ovrr_en2_type[1];
	uint32_t _sc_x4_fld_ovrr_en2_type;
} BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_CLR(r) (r).sc_x4_fld_ovrr_en2_type[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_SET(r,d) (r).sc_x4_fld_ovrr_en2_type[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_GET(r) (r).sc_x4_fld_ovrr_en2_type[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_USE_100G_AM123f_GET(r) ((((r).sc_x4_fld_ovrr_en2_type[0]) >> 14) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_USE_100G_AM123f_SET(r,f) (r).sc_x4_fld_ovrr_en2_type[0]=(((r).sc_x4_fld_ovrr_en2_type[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_USE_100G_AM0f_GET(r) ((((r).sc_x4_fld_ovrr_en2_type[0]) >> 13) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_USE_100G_AM0f_SET(r,f) (r).sc_x4_fld_ovrr_en2_type[0]=(((r).sc_x4_fld_ovrr_en2_type[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_BER_WINDOW_SELf_GET(r) ((((r).sc_x4_fld_ovrr_en2_type[0]) >> 12) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_BER_WINDOW_SELf_SET(r,f) (r).sc_x4_fld_ovrr_en2_type[0]=(((r).sc_x4_fld_ovrr_en2_type[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_BER_COUNT_SELf_GET(r) ((((r).sc_x4_fld_ovrr_en2_type[0]) >> 11) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_BER_COUNT_SELf_SET(r,f) (r).sc_x4_fld_ovrr_en2_type[0]=(((r).sc_x4_fld_ovrr_en2_type[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_CL74_SHCORRUPTf_GET(r) ((((r).sc_x4_fld_ovrr_en2_type[0]) >> 10) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_CL74_SHCORRUPTf_SET(r,f) (r).sc_x4_fld_ovrr_en2_type[0]=(((r).sc_x4_fld_ovrr_en2_type[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_CORRUPT_6TH_GROUPf_GET(r) ((((r).sc_x4_fld_ovrr_en2_type[0]) >> 9) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_CORRUPT_6TH_GROUPf_SET(r,f) (r).sc_x4_fld_ovrr_en2_type[0]=(((r).sc_x4_fld_ovrr_en2_type[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_CORRUPT_2ND_GROUPf_GET(r) ((((r).sc_x4_fld_ovrr_en2_type[0]) >> 8) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_CORRUPT_2ND_GROUPf_SET(r,f) (r).sc_x4_fld_ovrr_en2_type[0]=(((r).sc_x4_fld_ovrr_en2_type[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_R_TC_OUT_MODE_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en2_type[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_R_TC_OUT_MODE_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en2_type[0]=(((r).sc_x4_fld_ovrr_en2_type[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_R_FIVE_BIT_XOR_EN_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en2_type[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_R_FIVE_BIT_XOR_EN_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en2_type[0]=(((r).sc_x4_fld_ovrr_en2_type[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_R_TC_MODE_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en2_type[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_R_TC_MODE_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en2_type[0]=(((r).sc_x4_fld_ovrr_en2_type[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_R_TC_IN_MODE_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en2_type[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_R_TC_IN_MODE_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en2_type[0]=(((r).sc_x4_fld_ovrr_en2_type[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_R_CL91_CW_SCRAMBLE_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en2_type[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_R_CL91_CW_SCRAMBLE_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en2_type[0]=(((r).sc_x4_fld_ovrr_en2_type[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_R_MERGE_MODE_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en2_type[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_R_MERGE_MODE_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en2_type[0]=(((r).sc_x4_fld_ovrr_en2_type[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_CL91_BLKSYNC_MODE_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en2_type[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_CL91_BLKSYNC_MODE_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en2_type[0]=(((r).sc_x4_fld_ovrr_en2_type[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_AM_SPACING_MUL_OENf_GET(r) (((r).sc_x4_fld_ovrr_en2_type[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_AM_SPACING_MUL_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en2_type[0]=(((r).sc_x4_fld_ovrr_en2_type[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access SC_X4_FLD_OVRR_EN2_TYPE.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X4_FLD_OVRR_EN2_TYPEr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr,(_r._sc_x4_fld_ovrr_en2_type))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X4_FLD_OVRR_EN2_TYPEr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr,(_r._sc_x4_fld_ovrr_en2_type)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X4_FLD_OVRR_EN2_TYPEr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr,(_r._sc_x4_fld_ovrr_en2_type))
#define BCMI_TSCF_GEN3_XGXS_READLN_SC_X4_FLD_OVRR_EN2_TYPEr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_fld_ovrr_en2_type))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_SC_X4_FLD_OVRR_EN2_TYPEr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_fld_ovrr_en2_type))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_SC_X4_FLD_OVRR_EN2_TYPEr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sc_x4_fld_ovrr_en2_type))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X4_FLD_OVRR_EN2_TYPEr BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr
#define SC_X4_FLD_OVRR_EN2_TYPEr_SIZE BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_t SC_X4_FLD_OVRR_EN2_TYPEr_t;
#define SC_X4_FLD_OVRR_EN2_TYPEr_CLR BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_CLR
#define SC_X4_FLD_OVRR_EN2_TYPEr_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_SET
#define SC_X4_FLD_OVRR_EN2_TYPEr_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_GET
#define SC_X4_FLD_OVRR_EN2_TYPEr_USE_100G_AM123f_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_USE_100G_AM123f_GET
#define SC_X4_FLD_OVRR_EN2_TYPEr_USE_100G_AM123f_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_USE_100G_AM123f_SET
#define SC_X4_FLD_OVRR_EN2_TYPEr_USE_100G_AM0f_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_USE_100G_AM0f_GET
#define SC_X4_FLD_OVRR_EN2_TYPEr_USE_100G_AM0f_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_USE_100G_AM0f_SET
#define SC_X4_FLD_OVRR_EN2_TYPEr_BER_WINDOW_SELf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_BER_WINDOW_SELf_GET
#define SC_X4_FLD_OVRR_EN2_TYPEr_BER_WINDOW_SELf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_BER_WINDOW_SELf_SET
#define SC_X4_FLD_OVRR_EN2_TYPEr_BER_COUNT_SELf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_BER_COUNT_SELf_GET
#define SC_X4_FLD_OVRR_EN2_TYPEr_BER_COUNT_SELf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_BER_COUNT_SELf_SET
#define SC_X4_FLD_OVRR_EN2_TYPEr_CL74_SHCORRUPTf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_CL74_SHCORRUPTf_GET
#define SC_X4_FLD_OVRR_EN2_TYPEr_CL74_SHCORRUPTf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_CL74_SHCORRUPTf_SET
#define SC_X4_FLD_OVRR_EN2_TYPEr_CORRUPT_6TH_GROUPf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_CORRUPT_6TH_GROUPf_GET
#define SC_X4_FLD_OVRR_EN2_TYPEr_CORRUPT_6TH_GROUPf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_CORRUPT_6TH_GROUPf_SET
#define SC_X4_FLD_OVRR_EN2_TYPEr_CORRUPT_2ND_GROUPf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_CORRUPT_2ND_GROUPf_GET
#define SC_X4_FLD_OVRR_EN2_TYPEr_CORRUPT_2ND_GROUPf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_CORRUPT_2ND_GROUPf_SET
#define SC_X4_FLD_OVRR_EN2_TYPEr_R_TC_OUT_MODE_OENf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_R_TC_OUT_MODE_OENf_GET
#define SC_X4_FLD_OVRR_EN2_TYPEr_R_TC_OUT_MODE_OENf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_R_TC_OUT_MODE_OENf_SET
#define SC_X4_FLD_OVRR_EN2_TYPEr_R_FIVE_BIT_XOR_EN_OENf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_R_FIVE_BIT_XOR_EN_OENf_GET
#define SC_X4_FLD_OVRR_EN2_TYPEr_R_FIVE_BIT_XOR_EN_OENf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_R_FIVE_BIT_XOR_EN_OENf_SET
#define SC_X4_FLD_OVRR_EN2_TYPEr_R_TC_MODE_OENf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_R_TC_MODE_OENf_GET
#define SC_X4_FLD_OVRR_EN2_TYPEr_R_TC_MODE_OENf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_R_TC_MODE_OENf_SET
#define SC_X4_FLD_OVRR_EN2_TYPEr_R_TC_IN_MODE_OENf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_R_TC_IN_MODE_OENf_GET
#define SC_X4_FLD_OVRR_EN2_TYPEr_R_TC_IN_MODE_OENf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_R_TC_IN_MODE_OENf_SET
#define SC_X4_FLD_OVRR_EN2_TYPEr_R_CL91_CW_SCRAMBLE_OENf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_R_CL91_CW_SCRAMBLE_OENf_GET
#define SC_X4_FLD_OVRR_EN2_TYPEr_R_CL91_CW_SCRAMBLE_OENf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_R_CL91_CW_SCRAMBLE_OENf_SET
#define SC_X4_FLD_OVRR_EN2_TYPEr_R_MERGE_MODE_OENf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_R_MERGE_MODE_OENf_GET
#define SC_X4_FLD_OVRR_EN2_TYPEr_R_MERGE_MODE_OENf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_R_MERGE_MODE_OENf_SET
#define SC_X4_FLD_OVRR_EN2_TYPEr_CL91_BLKSYNC_MODE_OENf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_CL91_BLKSYNC_MODE_OENf_GET
#define SC_X4_FLD_OVRR_EN2_TYPEr_CL91_BLKSYNC_MODE_OENf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_CL91_BLKSYNC_MODE_OENf_SET
#define SC_X4_FLD_OVRR_EN2_TYPEr_AM_SPACING_MUL_OENf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_AM_SPACING_MUL_OENf_GET
#define SC_X4_FLD_OVRR_EN2_TYPEr_AM_SPACING_MUL_OENf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr_AM_SPACING_MUL_OENf_SET
#define READ_SC_X4_FLD_OVRR_EN2_TYPEr BCMI_TSCF_GEN3_XGXS_READ_SC_X4_FLD_OVRR_EN2_TYPEr
#define WRITE_SC_X4_FLD_OVRR_EN2_TYPEr BCMI_TSCF_GEN3_XGXS_WRITE_SC_X4_FLD_OVRR_EN2_TYPEr
#define MODIFY_SC_X4_FLD_OVRR_EN2_TYPEr BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X4_FLD_OVRR_EN2_TYPEr
#define READLN_SC_X4_FLD_OVRR_EN2_TYPEr BCMI_TSCF_GEN3_XGXS_READLN_SC_X4_FLD_OVRR_EN2_TYPEr
#define WRITELN_SC_X4_FLD_OVRR_EN2_TYPEr BCMI_TSCF_GEN3_XGXS_WRITELN_SC_X4_FLD_OVRR_EN2_TYPEr
#define WRITEALL_SC_X4_FLD_OVRR_EN2_TYPEr BCMI_TSCF_GEN3_XGXS_WRITEALL_SC_X4_FLD_OVRR_EN2_TYPEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X4_FLD_OVRR_EN2_TYPEr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X4_RSLVD_SPD
 * BLOCKS:   SC_X4_FINAL_CONFIG_STATUS
 * REGADDR:  0xc070
 * DESC:     Final speed configuration for PCS
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/O
 * FIELDS:
 *     NUM_LANES        Number of lanes for override configuration0   : NUM_LANES_01 - use 1 lane1   : NUM_LANES_02 - use 2 lanes2   : NUM_LANES_04 - use 4 lanes
 *     T_PMA_40B_MODE   1'b0 - 66-bit data write in t_pma.1'b1 - 40-bit data write in t_pma.
 *     CL36TX_EN        Per logical lane: cl36 TX pipeline: 1=enabled , 0=disabled
 *     CL36RX_EN        Per logical lane: cl36 RX pipeline: 1=enabled , 0=disabled
 *     CL36RX_10BIT_PMD_DATA_EN Per logical lane: Enables CL36 Rx Pipeline to use all 10-bits of PMD Rx data.This bit should be enabled in OS8.25 mode or 2.5G speed.
 *     SPEED            Actual speed set by SW
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD_SPDr (0x0000c070 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD_SPDr_SIZE 4

/*
 * This structure should be used to declare and program SC_X4_RSLVD_SPD.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD_SPDr_s {
	uint32_t v[1];
	uint32_t sc_x4_rslvd_spd[1];
	uint32_t _sc_x4_rslvd_spd;
} BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD_SPDr_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD_SPDr_CLR(r) (r).sc_x4_rslvd_spd[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD_SPDr_SET(r,d) (r).sc_x4_rslvd_spd[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD_SPDr_GET(r) (r).sc_x4_rslvd_spd[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD_SPDr_SPEEDf_GET(r) ((((r).sc_x4_rslvd_spd[0]) >> 8) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD_SPDr_SPEEDf_SET(r,f) (r).sc_x4_rslvd_spd[0]=(((r).sc_x4_rslvd_spd[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD_SPDr_CL36RX_10BIT_PMD_DATA_ENf_GET(r) ((((r).sc_x4_rslvd_spd[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD_SPDr_CL36RX_10BIT_PMD_DATA_ENf_SET(r,f) (r).sc_x4_rslvd_spd[0]=(((r).sc_x4_rslvd_spd[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD_SPDr_CL36RX_ENf_GET(r) ((((r).sc_x4_rslvd_spd[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD_SPDr_CL36RX_ENf_SET(r,f) (r).sc_x4_rslvd_spd[0]=(((r).sc_x4_rslvd_spd[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD_SPDr_CL36TX_ENf_GET(r) ((((r).sc_x4_rslvd_spd[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD_SPDr_CL36TX_ENf_SET(r,f) (r).sc_x4_rslvd_spd[0]=(((r).sc_x4_rslvd_spd[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD_SPDr_T_PMA_40B_MODEf_GET(r) ((((r).sc_x4_rslvd_spd[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD_SPDr_T_PMA_40B_MODEf_SET(r,f) (r).sc_x4_rslvd_spd[0]=(((r).sc_x4_rslvd_spd[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD_SPDr_NUM_LANESf_GET(r) (((r).sc_x4_rslvd_spd[0]) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD_SPDr_NUM_LANESf_SET(r,f) (r).sc_x4_rslvd_spd[0]=(((r).sc_x4_rslvd_spd[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access SC_X4_RSLVD_SPD.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X4_RSLVD_SPDr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD_SPDr,(_r._sc_x4_rslvd_spd))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X4_RSLVD_SPDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD_SPDr,(_r._sc_x4_rslvd_spd)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X4_RSLVD_SPDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD_SPDr,(_r._sc_x4_rslvd_spd))
#define BCMI_TSCF_GEN3_XGXS_READLN_SC_X4_RSLVD_SPDr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD_SPDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_rslvd_spd))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_SC_X4_RSLVD_SPDr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD_SPDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_rslvd_spd))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_SC_X4_RSLVD_SPDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD_SPDr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sc_x4_rslvd_spd))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X4_RSLVD_SPDr BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD_SPDr
#define SC_X4_RSLVD_SPDr_SIZE BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD_SPDr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD_SPDr_t SC_X4_RSLVD_SPDr_t;
#define SC_X4_RSLVD_SPDr_CLR BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD_SPDr_CLR
#define SC_X4_RSLVD_SPDr_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD_SPDr_SET
#define SC_X4_RSLVD_SPDr_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD_SPDr_GET
#define SC_X4_RSLVD_SPDr_SPEEDf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD_SPDr_SPEEDf_GET
#define SC_X4_RSLVD_SPDr_SPEEDf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD_SPDr_SPEEDf_SET
#define SC_X4_RSLVD_SPDr_CL36RX_10BIT_PMD_DATA_ENf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD_SPDr_CL36RX_10BIT_PMD_DATA_ENf_GET
#define SC_X4_RSLVD_SPDr_CL36RX_10BIT_PMD_DATA_ENf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD_SPDr_CL36RX_10BIT_PMD_DATA_ENf_SET
#define SC_X4_RSLVD_SPDr_CL36RX_ENf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD_SPDr_CL36RX_ENf_GET
#define SC_X4_RSLVD_SPDr_CL36RX_ENf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD_SPDr_CL36RX_ENf_SET
#define SC_X4_RSLVD_SPDr_CL36TX_ENf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD_SPDr_CL36TX_ENf_GET
#define SC_X4_RSLVD_SPDr_CL36TX_ENf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD_SPDr_CL36TX_ENf_SET
#define SC_X4_RSLVD_SPDr_T_PMA_40B_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD_SPDr_T_PMA_40B_MODEf_GET
#define SC_X4_RSLVD_SPDr_T_PMA_40B_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD_SPDr_T_PMA_40B_MODEf_SET
#define SC_X4_RSLVD_SPDr_NUM_LANESf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD_SPDr_NUM_LANESf_GET
#define SC_X4_RSLVD_SPDr_NUM_LANESf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD_SPDr_NUM_LANESf_SET
#define READ_SC_X4_RSLVD_SPDr BCMI_TSCF_GEN3_XGXS_READ_SC_X4_RSLVD_SPDr
#define WRITE_SC_X4_RSLVD_SPDr BCMI_TSCF_GEN3_XGXS_WRITE_SC_X4_RSLVD_SPDr
#define MODIFY_SC_X4_RSLVD_SPDr BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X4_RSLVD_SPDr
#define READLN_SC_X4_RSLVD_SPDr BCMI_TSCF_GEN3_XGXS_READLN_SC_X4_RSLVD_SPDr
#define WRITELN_SC_X4_RSLVD_SPDr BCMI_TSCF_GEN3_XGXS_WRITELN_SC_X4_RSLVD_SPDr
#define WRITEALL_SC_X4_RSLVD_SPDr BCMI_TSCF_GEN3_XGXS_WRITEALL_SC_X4_RSLVD_SPDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD_SPDr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X4_RSLVD0
 * BLOCKS:   SC_X4_FINAL_CONFIG_STATUS
 * REGADDR:  0xc072
 * DESC:     Final speed configuration for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     SCR_MODE         
 *     T_PMA_BTMX_MODE  Number of PCS lanes bitmuxed
 *     T_HG2_ENABLE     Enables HG2 support for PCS
 *     T_ENC_MODE       
 *     T_FIFO_MODE      T_FIFO stage control field
 *     OS_MODE          
 *     CL72_EN          Enables cl72
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD0r (0x0000c072 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD0r_SIZE 4

/*
 * This structure should be used to declare and program SC_X4_RSLVD0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD0r_s {
	uint32_t v[1];
	uint32_t sc_x4_rslvd0[1];
	uint32_t _sc_x4_rslvd0;
} BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD0r_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD0r_CLR(r) (r).sc_x4_rslvd0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD0r_SET(r,d) (r).sc_x4_rslvd0[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD0r_GET(r) (r).sc_x4_rslvd0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD0r_CL72_ENf_GET(r) ((((r).sc_x4_rslvd0[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD0r_CL72_ENf_SET(r,f) (r).sc_x4_rslvd0[0]=(((r).sc_x4_rslvd0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD0r_OS_MODEf_GET(r) ((((r).sc_x4_rslvd0[0]) >> 11) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD0r_OS_MODEf_SET(r,f) (r).sc_x4_rslvd0[0]=(((r).sc_x4_rslvd0[0] & ~((uint32_t)0xf << 11)) | ((((uint32_t)f) & 0xf) << 11)) | (15 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD0r_T_FIFO_MODEf_GET(r) ((((r).sc_x4_rslvd0[0]) >> 9) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD0r_T_FIFO_MODEf_SET(r,f) (r).sc_x4_rslvd0[0]=(((r).sc_x4_rslvd0[0] & ~((uint32_t)0x3 << 9)) | ((((uint32_t)f) & 0x3) << 9)) | (3 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD0r_T_ENC_MODEf_GET(r) ((((r).sc_x4_rslvd0[0]) >> 7) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD0r_T_ENC_MODEf_SET(r,f) (r).sc_x4_rslvd0[0]=(((r).sc_x4_rslvd0[0] & ~((uint32_t)0x3 << 7)) | ((((uint32_t)f) & 0x3) << 7)) | (3 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD0r_T_HG2_ENABLEf_GET(r) ((((r).sc_x4_rslvd0[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD0r_T_HG2_ENABLEf_SET(r,f) (r).sc_x4_rslvd0[0]=(((r).sc_x4_rslvd0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD0r_T_PMA_BTMX_MODEf_GET(r) ((((r).sc_x4_rslvd0[0]) >> 4) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD0r_T_PMA_BTMX_MODEf_SET(r,f) (r).sc_x4_rslvd0[0]=(((r).sc_x4_rslvd0[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD0r_SCR_MODEf_GET(r) ((((r).sc_x4_rslvd0[0]) >> 1) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD0r_SCR_MODEf_SET(r,f) (r).sc_x4_rslvd0[0]=(((r).sc_x4_rslvd0[0] & ~((uint32_t)0x7 << 1)) | ((((uint32_t)f) & 0x7) << 1)) | (7 << (16 + 1))

/*
 * These macros can be used to access SC_X4_RSLVD0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X4_RSLVD0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD0r,(_r._sc_x4_rslvd0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X4_RSLVD0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD0r,(_r._sc_x4_rslvd0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X4_RSLVD0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD0r,(_r._sc_x4_rslvd0))
#define BCMI_TSCF_GEN3_XGXS_READLN_SC_X4_RSLVD0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_rslvd0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_SC_X4_RSLVD0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_rslvd0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_SC_X4_RSLVD0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sc_x4_rslvd0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X4_RSLVD0r BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD0r
#define SC_X4_RSLVD0r_SIZE BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD0r_t SC_X4_RSLVD0r_t;
#define SC_X4_RSLVD0r_CLR BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD0r_CLR
#define SC_X4_RSLVD0r_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD0r_SET
#define SC_X4_RSLVD0r_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD0r_GET
#define SC_X4_RSLVD0r_CL72_ENf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD0r_CL72_ENf_GET
#define SC_X4_RSLVD0r_CL72_ENf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD0r_CL72_ENf_SET
#define SC_X4_RSLVD0r_OS_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD0r_OS_MODEf_GET
#define SC_X4_RSLVD0r_OS_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD0r_OS_MODEf_SET
#define SC_X4_RSLVD0r_T_FIFO_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD0r_T_FIFO_MODEf_GET
#define SC_X4_RSLVD0r_T_FIFO_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD0r_T_FIFO_MODEf_SET
#define SC_X4_RSLVD0r_T_ENC_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD0r_T_ENC_MODEf_GET
#define SC_X4_RSLVD0r_T_ENC_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD0r_T_ENC_MODEf_SET
#define SC_X4_RSLVD0r_T_HG2_ENABLEf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD0r_T_HG2_ENABLEf_GET
#define SC_X4_RSLVD0r_T_HG2_ENABLEf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD0r_T_HG2_ENABLEf_SET
#define SC_X4_RSLVD0r_T_PMA_BTMX_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD0r_T_PMA_BTMX_MODEf_GET
#define SC_X4_RSLVD0r_T_PMA_BTMX_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD0r_T_PMA_BTMX_MODEf_SET
#define SC_X4_RSLVD0r_SCR_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD0r_SCR_MODEf_GET
#define SC_X4_RSLVD0r_SCR_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD0r_SCR_MODEf_SET
#define READ_SC_X4_RSLVD0r BCMI_TSCF_GEN3_XGXS_READ_SC_X4_RSLVD0r
#define WRITE_SC_X4_RSLVD0r BCMI_TSCF_GEN3_XGXS_WRITE_SC_X4_RSLVD0r
#define MODIFY_SC_X4_RSLVD0r BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X4_RSLVD0r
#define READLN_SC_X4_RSLVD0r BCMI_TSCF_GEN3_XGXS_READLN_SC_X4_RSLVD0r
#define WRITELN_SC_X4_RSLVD0r BCMI_TSCF_GEN3_XGXS_WRITELN_SC_X4_RSLVD0r
#define WRITEALL_SC_X4_RSLVD0r BCMI_TSCF_GEN3_XGXS_WRITEALL_SC_X4_RSLVD0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X4_RSLVD1
 * BLOCKS:   SC_X4_FINAL_CONFIG_STATUS
 * REGADDR:  0xc073
 * DESC:     Final speed configuration for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     BS_BTMX_MODE     Bit-mux mode: Indicates the format of incoming data on a physical lane.
 *     BS_DIST_MODE     Block to lane distribution mode.BS_DIST_MODE_5_LANE_TDM - 5 lane TDM. Each block distributed in turn over output pseudo-logical lanes 0-4BS_DIST_MODE_2_LANE_TDM_2_VLANE - 2 lane TDM for 2 virtual lanes.Virtual Lane 0 output is ping-ponged over pseudo-logical lanes 0,2.Virtual Lane 1 output is ping-ponged over pseudo-logical lanes 1,3.BS_DIST_MODE_2_LANE_TDM_1_VLANE - 2 lane TDM for 1 virtual lane.Virtual Lane 0 output is ping-ponged over pseudo-logical lanes 0,2.BS_DIST_MODE_NO_TDM - No TDM. Virtual Lane output is sent directly to corresponding pseudo-logical lane.
 *     BS_SYNC_EN       Enable block synchronization: If enabled, block sync sm will attempt to slip data until sync is achieved.
 *     BS_SM_SYNC_MODE  Block Sync Mode: When bs_sync_en==1, this bit indicates if cl49 or cl82 state machine operation is used.1'b0 - Clause 821'b1 - Clause 49
 *     DEC_FSM_MODE     
 *     DESKEW_MODE      
 *     DEC_TL_MODE      
 *     DESCR_MODE       
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD1r (0x0000c073 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD1r_SIZE 4

/*
 * This structure should be used to declare and program SC_X4_RSLVD1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD1r_s {
	uint32_t v[1];
	uint32_t sc_x4_rslvd1[1];
	uint32_t _sc_x4_rslvd1;
} BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD1r_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD1r_CLR(r) (r).sc_x4_rslvd1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD1r_SET(r,d) (r).sc_x4_rslvd1[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD1r_GET(r) (r).sc_x4_rslvd1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD1r_DESCR_MODEf_GET(r) ((((r).sc_x4_rslvd1[0]) >> 14) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD1r_DESCR_MODEf_SET(r,f) (r).sc_x4_rslvd1[0]=(((r).sc_x4_rslvd1[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD1r_DEC_TL_MODEf_GET(r) ((((r).sc_x4_rslvd1[0]) >> 12) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD1r_DEC_TL_MODEf_SET(r,f) (r).sc_x4_rslvd1[0]=(((r).sc_x4_rslvd1[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12)) | (3 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD1r_DESKEW_MODEf_GET(r) ((((r).sc_x4_rslvd1[0]) >> 8) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD1r_DESKEW_MODEf_SET(r,f) (r).sc_x4_rslvd1[0]=(((r).sc_x4_rslvd1[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD1r_DEC_FSM_MODEf_GET(r) ((((r).sc_x4_rslvd1[0]) >> 6) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD1r_DEC_FSM_MODEf_SET(r,f) (r).sc_x4_rslvd1[0]=(((r).sc_x4_rslvd1[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6)) | (3 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD1r_BS_SM_SYNC_MODEf_GET(r) ((((r).sc_x4_rslvd1[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD1r_BS_SM_SYNC_MODEf_SET(r,f) (r).sc_x4_rslvd1[0]=(((r).sc_x4_rslvd1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD1r_BS_SYNC_ENf_GET(r) ((((r).sc_x4_rslvd1[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD1r_BS_SYNC_ENf_SET(r,f) (r).sc_x4_rslvd1[0]=(((r).sc_x4_rslvd1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD1r_BS_DIST_MODEf_GET(r) ((((r).sc_x4_rslvd1[0]) >> 2) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD1r_BS_DIST_MODEf_SET(r,f) (r).sc_x4_rslvd1[0]=(((r).sc_x4_rslvd1[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2)) | (3 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD1r_BS_BTMX_MODEf_GET(r) (((r).sc_x4_rslvd1[0]) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD1r_BS_BTMX_MODEf_SET(r,f) (r).sc_x4_rslvd1[0]=(((r).sc_x4_rslvd1[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access SC_X4_RSLVD1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X4_RSLVD1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD1r,(_r._sc_x4_rslvd1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X4_RSLVD1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD1r,(_r._sc_x4_rslvd1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X4_RSLVD1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD1r,(_r._sc_x4_rslvd1))
#define BCMI_TSCF_GEN3_XGXS_READLN_SC_X4_RSLVD1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_rslvd1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_SC_X4_RSLVD1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_rslvd1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_SC_X4_RSLVD1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sc_x4_rslvd1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X4_RSLVD1r BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD1r
#define SC_X4_RSLVD1r_SIZE BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD1r_t SC_X4_RSLVD1r_t;
#define SC_X4_RSLVD1r_CLR BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD1r_CLR
#define SC_X4_RSLVD1r_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD1r_SET
#define SC_X4_RSLVD1r_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD1r_GET
#define SC_X4_RSLVD1r_DESCR_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD1r_DESCR_MODEf_GET
#define SC_X4_RSLVD1r_DESCR_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD1r_DESCR_MODEf_SET
#define SC_X4_RSLVD1r_DEC_TL_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD1r_DEC_TL_MODEf_GET
#define SC_X4_RSLVD1r_DEC_TL_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD1r_DEC_TL_MODEf_SET
#define SC_X4_RSLVD1r_DESKEW_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD1r_DESKEW_MODEf_GET
#define SC_X4_RSLVD1r_DESKEW_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD1r_DESKEW_MODEf_SET
#define SC_X4_RSLVD1r_DEC_FSM_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD1r_DEC_FSM_MODEf_GET
#define SC_X4_RSLVD1r_DEC_FSM_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD1r_DEC_FSM_MODEf_SET
#define SC_X4_RSLVD1r_BS_SM_SYNC_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD1r_BS_SM_SYNC_MODEf_GET
#define SC_X4_RSLVD1r_BS_SM_SYNC_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD1r_BS_SM_SYNC_MODEf_SET
#define SC_X4_RSLVD1r_BS_SYNC_ENf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD1r_BS_SYNC_ENf_GET
#define SC_X4_RSLVD1r_BS_SYNC_ENf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD1r_BS_SYNC_ENf_SET
#define SC_X4_RSLVD1r_BS_DIST_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD1r_BS_DIST_MODEf_GET
#define SC_X4_RSLVD1r_BS_DIST_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD1r_BS_DIST_MODEf_SET
#define SC_X4_RSLVD1r_BS_BTMX_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD1r_BS_BTMX_MODEf_GET
#define SC_X4_RSLVD1r_BS_BTMX_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD1r_BS_BTMX_MODEf_SET
#define READ_SC_X4_RSLVD1r BCMI_TSCF_GEN3_XGXS_READ_SC_X4_RSLVD1r
#define WRITE_SC_X4_RSLVD1r BCMI_TSCF_GEN3_XGXS_WRITE_SC_X4_RSLVD1r
#define MODIFY_SC_X4_RSLVD1r BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X4_RSLVD1r
#define READLN_SC_X4_RSLVD1r BCMI_TSCF_GEN3_XGXS_READLN_SC_X4_RSLVD1r
#define WRITELN_SC_X4_RSLVD1r BCMI_TSCF_GEN3_XGXS_WRITELN_SC_X4_RSLVD1r
#define WRITEALL_SC_X4_RSLVD1r BCMI_TSCF_GEN3_XGXS_WRITEALL_SC_X4_RSLVD1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X4_RSLVD2
 * BLOCKS:   SC_X4_FINAL_CONFIG_STATUS
 * REGADDR:  0xc074
 * DESC:     Final speed configuration for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CLOCKCNT0        clock count 0 for credit programming, range 5 to 4125
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD2r (0x0000c074 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X4_RSLVD2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD2r_s {
	uint32_t v[1];
	uint32_t sc_x4_rslvd2[1];
	uint32_t _sc_x4_rslvd2;
} BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD2r_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD2r_CLR(r) (r).sc_x4_rslvd2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD2r_SET(r,d) (r).sc_x4_rslvd2[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD2r_GET(r) (r).sc_x4_rslvd2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD2r_CLOCKCNT0f_GET(r) (((r).sc_x4_rslvd2[0]) & 0x3fff)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD2r_CLOCKCNT0f_SET(r,f) (r).sc_x4_rslvd2[0]=(((r).sc_x4_rslvd2[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff)) | (0x3fff << 16)

/*
 * These macros can be used to access SC_X4_RSLVD2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X4_RSLVD2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD2r,(_r._sc_x4_rslvd2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X4_RSLVD2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD2r,(_r._sc_x4_rslvd2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X4_RSLVD2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD2r,(_r._sc_x4_rslvd2))
#define BCMI_TSCF_GEN3_XGXS_READLN_SC_X4_RSLVD2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_rslvd2))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_SC_X4_RSLVD2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_rslvd2))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_SC_X4_RSLVD2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sc_x4_rslvd2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X4_RSLVD2r BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD2r
#define SC_X4_RSLVD2r_SIZE BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD2r_t SC_X4_RSLVD2r_t;
#define SC_X4_RSLVD2r_CLR BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD2r_CLR
#define SC_X4_RSLVD2r_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD2r_SET
#define SC_X4_RSLVD2r_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD2r_GET
#define SC_X4_RSLVD2r_CLOCKCNT0f_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD2r_CLOCKCNT0f_GET
#define SC_X4_RSLVD2r_CLOCKCNT0f_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD2r_CLOCKCNT0f_SET
#define READ_SC_X4_RSLVD2r BCMI_TSCF_GEN3_XGXS_READ_SC_X4_RSLVD2r
#define WRITE_SC_X4_RSLVD2r BCMI_TSCF_GEN3_XGXS_WRITE_SC_X4_RSLVD2r
#define MODIFY_SC_X4_RSLVD2r BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X4_RSLVD2r
#define READLN_SC_X4_RSLVD2r BCMI_TSCF_GEN3_XGXS_READLN_SC_X4_RSLVD2r
#define WRITELN_SC_X4_RSLVD2r BCMI_TSCF_GEN3_XGXS_WRITELN_SC_X4_RSLVD2r
#define WRITEALL_SC_X4_RSLVD2r BCMI_TSCF_GEN3_XGXS_WRITEALL_SC_X4_RSLVD2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X4_RSLVD3
 * BLOCKS:   SC_X4_FINAL_CONFIG_STATUS
 * REGADDR:  0xc075
 * DESC:     Final speed configuration for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CLOCKCNT1        clock count 1 for credit programming, range 4 to 12
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD3r (0x0000c075 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD3r_SIZE 4

/*
 * This structure should be used to declare and program SC_X4_RSLVD3.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD3r_s {
	uint32_t v[1];
	uint32_t sc_x4_rslvd3[1];
	uint32_t _sc_x4_rslvd3;
} BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD3r_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD3r_CLR(r) (r).sc_x4_rslvd3[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD3r_SET(r,d) (r).sc_x4_rslvd3[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD3r_GET(r) (r).sc_x4_rslvd3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD3r_CLOCKCNT1f_GET(r) (((r).sc_x4_rslvd3[0]) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD3r_CLOCKCNT1f_SET(r,f) (r).sc_x4_rslvd3[0]=(((r).sc_x4_rslvd3[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access SC_X4_RSLVD3.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X4_RSLVD3r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD3r,(_r._sc_x4_rslvd3))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X4_RSLVD3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD3r,(_r._sc_x4_rslvd3)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X4_RSLVD3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD3r,(_r._sc_x4_rslvd3))
#define BCMI_TSCF_GEN3_XGXS_READLN_SC_X4_RSLVD3r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_rslvd3))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_SC_X4_RSLVD3r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_rslvd3))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_SC_X4_RSLVD3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD3r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sc_x4_rslvd3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X4_RSLVD3r BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD3r
#define SC_X4_RSLVD3r_SIZE BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD3r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD3r_t SC_X4_RSLVD3r_t;
#define SC_X4_RSLVD3r_CLR BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD3r_CLR
#define SC_X4_RSLVD3r_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD3r_SET
#define SC_X4_RSLVD3r_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD3r_GET
#define SC_X4_RSLVD3r_CLOCKCNT1f_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD3r_CLOCKCNT1f_GET
#define SC_X4_RSLVD3r_CLOCKCNT1f_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD3r_CLOCKCNT1f_SET
#define READ_SC_X4_RSLVD3r BCMI_TSCF_GEN3_XGXS_READ_SC_X4_RSLVD3r
#define WRITE_SC_X4_RSLVD3r BCMI_TSCF_GEN3_XGXS_WRITE_SC_X4_RSLVD3r
#define MODIFY_SC_X4_RSLVD3r BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X4_RSLVD3r
#define READLN_SC_X4_RSLVD3r BCMI_TSCF_GEN3_XGXS_READLN_SC_X4_RSLVD3r
#define WRITELN_SC_X4_RSLVD3r BCMI_TSCF_GEN3_XGXS_WRITELN_SC_X4_RSLVD3r
#define WRITEALL_SC_X4_RSLVD3r BCMI_TSCF_GEN3_XGXS_WRITEALL_SC_X4_RSLVD3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X4_RSLVD4
 * BLOCKS:   SC_X4_FINAL_CONFIG_STATUS
 * REGADDR:  0xc076
 * DESC:     Final speed configuration for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     LOOPCNT1         loop count 1 for credit programming, range 2 to 18
 *     LOOPCNT0         loop count 0 for credit programming, range 1 to 1
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD4r (0x0000c076 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD4r_SIZE 4

/*
 * This structure should be used to declare and program SC_X4_RSLVD4.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD4r_s {
	uint32_t v[1];
	uint32_t sc_x4_rslvd4[1];
	uint32_t _sc_x4_rslvd4;
} BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD4r_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD4r_CLR(r) (r).sc_x4_rslvd4[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD4r_SET(r,d) (r).sc_x4_rslvd4[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD4r_GET(r) (r).sc_x4_rslvd4[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD4r_LOOPCNT0f_GET(r) ((((r).sc_x4_rslvd4[0]) >> 6) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD4r_LOOPCNT0f_SET(r,f) (r).sc_x4_rslvd4[0]=(((r).sc_x4_rslvd4[0] & ~((uint32_t)0xff << 6)) | ((((uint32_t)f) & 0xff) << 6)) | (255 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD4r_LOOPCNT1f_GET(r) (((r).sc_x4_rslvd4[0]) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD4r_LOOPCNT1f_SET(r,f) (r).sc_x4_rslvd4[0]=(((r).sc_x4_rslvd4[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access SC_X4_RSLVD4.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X4_RSLVD4r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD4r,(_r._sc_x4_rslvd4))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X4_RSLVD4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD4r,(_r._sc_x4_rslvd4)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X4_RSLVD4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD4r,(_r._sc_x4_rslvd4))
#define BCMI_TSCF_GEN3_XGXS_READLN_SC_X4_RSLVD4r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_rslvd4))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_SC_X4_RSLVD4r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_rslvd4))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_SC_X4_RSLVD4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD4r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sc_x4_rslvd4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X4_RSLVD4r BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD4r
#define SC_X4_RSLVD4r_SIZE BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD4r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD4r_t SC_X4_RSLVD4r_t;
#define SC_X4_RSLVD4r_CLR BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD4r_CLR
#define SC_X4_RSLVD4r_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD4r_SET
#define SC_X4_RSLVD4r_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD4r_GET
#define SC_X4_RSLVD4r_LOOPCNT0f_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD4r_LOOPCNT0f_GET
#define SC_X4_RSLVD4r_LOOPCNT0f_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD4r_LOOPCNT0f_SET
#define SC_X4_RSLVD4r_LOOPCNT1f_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD4r_LOOPCNT1f_GET
#define SC_X4_RSLVD4r_LOOPCNT1f_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD4r_LOOPCNT1f_SET
#define READ_SC_X4_RSLVD4r BCMI_TSCF_GEN3_XGXS_READ_SC_X4_RSLVD4r
#define WRITE_SC_X4_RSLVD4r BCMI_TSCF_GEN3_XGXS_WRITE_SC_X4_RSLVD4r
#define MODIFY_SC_X4_RSLVD4r BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X4_RSLVD4r
#define READLN_SC_X4_RSLVD4r BCMI_TSCF_GEN3_XGXS_READLN_SC_X4_RSLVD4r
#define WRITELN_SC_X4_RSLVD4r BCMI_TSCF_GEN3_XGXS_WRITELN_SC_X4_RSLVD4r
#define WRITEALL_SC_X4_RSLVD4r BCMI_TSCF_GEN3_XGXS_WRITEALL_SC_X4_RSLVD4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD4r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X4_RSLVD5
 * BLOCKS:   SC_X4_FINAL_CONFIG_STATUS
 * REGADDR:  0xc077
 * DESC:     Final speed configuration for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MAC_CREDITGENCNT CGC for mac credit generation, range 1 to 2063
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD5r (0x0000c077 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD5r_SIZE 4

/*
 * This structure should be used to declare and program SC_X4_RSLVD5.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD5r_s {
	uint32_t v[1];
	uint32_t sc_x4_rslvd5[1];
	uint32_t _sc_x4_rslvd5;
} BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD5r_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD5r_CLR(r) (r).sc_x4_rslvd5[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD5r_SET(r,d) (r).sc_x4_rslvd5[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD5r_GET(r) (r).sc_x4_rslvd5[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD5r_MAC_CREDITGENCNTf_GET(r) (((r).sc_x4_rslvd5[0]) & 0x1fff)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD5r_MAC_CREDITGENCNTf_SET(r,f) (r).sc_x4_rslvd5[0]=(((r).sc_x4_rslvd5[0] & ~((uint32_t)0x1fff)) | (((uint32_t)f) & 0x1fff)) | (0x1fff << 16)

/*
 * These macros can be used to access SC_X4_RSLVD5.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X4_RSLVD5r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD5r,(_r._sc_x4_rslvd5))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X4_RSLVD5r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD5r,(_r._sc_x4_rslvd5)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X4_RSLVD5r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD5r,(_r._sc_x4_rslvd5))
#define BCMI_TSCF_GEN3_XGXS_READLN_SC_X4_RSLVD5r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD5r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_rslvd5))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_SC_X4_RSLVD5r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD5r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_rslvd5))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_SC_X4_RSLVD5r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD5r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sc_x4_rslvd5))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X4_RSLVD5r BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD5r
#define SC_X4_RSLVD5r_SIZE BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD5r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD5r_t SC_X4_RSLVD5r_t;
#define SC_X4_RSLVD5r_CLR BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD5r_CLR
#define SC_X4_RSLVD5r_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD5r_SET
#define SC_X4_RSLVD5r_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD5r_GET
#define SC_X4_RSLVD5r_MAC_CREDITGENCNTf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD5r_MAC_CREDITGENCNTf_GET
#define SC_X4_RSLVD5r_MAC_CREDITGENCNTf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD5r_MAC_CREDITGENCNTf_SET
#define READ_SC_X4_RSLVD5r BCMI_TSCF_GEN3_XGXS_READ_SC_X4_RSLVD5r
#define WRITE_SC_X4_RSLVD5r BCMI_TSCF_GEN3_XGXS_WRITE_SC_X4_RSLVD5r
#define MODIFY_SC_X4_RSLVD5r BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X4_RSLVD5r
#define READLN_SC_X4_RSLVD5r BCMI_TSCF_GEN3_XGXS_READLN_SC_X4_RSLVD5r
#define WRITELN_SC_X4_RSLVD5r BCMI_TSCF_GEN3_XGXS_WRITELN_SC_X4_RSLVD5r
#define WRITEALL_SC_X4_RSLVD5r BCMI_TSCF_GEN3_XGXS_WRITEALL_SC_X4_RSLVD5r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD5r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X4_FEC_STS
 * BLOCKS:   SC_X4_FINAL_CONFIG_STATUS
 * REGADDR:  0xc078
 * DESC:     Final speed configuration for FEC
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     R_FEC_ENABLE     Receive CL74 FEC enable status
 *     T_FEC_ENABLE     Transmit CL74 FEC enable status
 *     R_CL91_FEC_MODE  
 *     T_CL91_FEC_MODE  
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FEC_STSr (0x0000c078 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X4_FEC_STSr_SIZE 4

/*
 * This structure should be used to declare and program SC_X4_FEC_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X4_FEC_STSr_s {
	uint32_t v[1];
	uint32_t sc_x4_fec_sts[1];
	uint32_t _sc_x4_fec_sts;
} BCMI_TSCF_GEN3_XGXS_SC_X4_FEC_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X4_FEC_STSr_CLR(r) (r).sc_x4_fec_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FEC_STSr_SET(r,d) (r).sc_x4_fec_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FEC_STSr_GET(r) (r).sc_x4_fec_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FEC_STSr_T_CL91_FEC_MODEf_GET(r) ((((r).sc_x4_fec_sts[0]) >> 5) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FEC_STSr_T_CL91_FEC_MODEf_SET(r,f) (r).sc_x4_fec_sts[0]=(((r).sc_x4_fec_sts[0] & ~((uint32_t)0x7 << 5)) | ((((uint32_t)f) & 0x7) << 5)) | (7 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FEC_STSr_R_CL91_FEC_MODEf_GET(r) ((((r).sc_x4_fec_sts[0]) >> 2) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FEC_STSr_R_CL91_FEC_MODEf_SET(r,f) (r).sc_x4_fec_sts[0]=(((r).sc_x4_fec_sts[0] & ~((uint32_t)0x7 << 2)) | ((((uint32_t)f) & 0x7) << 2)) | (7 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FEC_STSr_T_FEC_ENABLEf_GET(r) ((((r).sc_x4_fec_sts[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FEC_STSr_T_FEC_ENABLEf_SET(r,f) (r).sc_x4_fec_sts[0]=(((r).sc_x4_fec_sts[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FEC_STSr_R_FEC_ENABLEf_GET(r) (((r).sc_x4_fec_sts[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_FEC_STSr_R_FEC_ENABLEf_SET(r,f) (r).sc_x4_fec_sts[0]=(((r).sc_x4_fec_sts[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access SC_X4_FEC_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X4_FEC_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_FEC_STSr,(_r._sc_x4_fec_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X4_FEC_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_FEC_STSr,(_r._sc_x4_fec_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X4_FEC_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_FEC_STSr,(_r._sc_x4_fec_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_SC_X4_FEC_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_FEC_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_fec_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_SC_X4_FEC_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_FEC_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_fec_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_SC_X4_FEC_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_FEC_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sc_x4_fec_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X4_FEC_STSr BCMI_TSCF_GEN3_XGXS_SC_X4_FEC_STSr
#define SC_X4_FEC_STSr_SIZE BCMI_TSCF_GEN3_XGXS_SC_X4_FEC_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X4_FEC_STSr_t SC_X4_FEC_STSr_t;
#define SC_X4_FEC_STSr_CLR BCMI_TSCF_GEN3_XGXS_SC_X4_FEC_STSr_CLR
#define SC_X4_FEC_STSr_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FEC_STSr_SET
#define SC_X4_FEC_STSr_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FEC_STSr_GET
#define SC_X4_FEC_STSr_T_CL91_FEC_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FEC_STSr_T_CL91_FEC_MODEf_GET
#define SC_X4_FEC_STSr_T_CL91_FEC_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FEC_STSr_T_CL91_FEC_MODEf_SET
#define SC_X4_FEC_STSr_R_CL91_FEC_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FEC_STSr_R_CL91_FEC_MODEf_GET
#define SC_X4_FEC_STSr_R_CL91_FEC_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FEC_STSr_R_CL91_FEC_MODEf_SET
#define SC_X4_FEC_STSr_T_FEC_ENABLEf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FEC_STSr_T_FEC_ENABLEf_GET
#define SC_X4_FEC_STSr_T_FEC_ENABLEf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FEC_STSr_T_FEC_ENABLEf_SET
#define SC_X4_FEC_STSr_R_FEC_ENABLEf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_FEC_STSr_R_FEC_ENABLEf_GET
#define SC_X4_FEC_STSr_R_FEC_ENABLEf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_FEC_STSr_R_FEC_ENABLEf_SET
#define READ_SC_X4_FEC_STSr BCMI_TSCF_GEN3_XGXS_READ_SC_X4_FEC_STSr
#define WRITE_SC_X4_FEC_STSr BCMI_TSCF_GEN3_XGXS_WRITE_SC_X4_FEC_STSr
#define MODIFY_SC_X4_FEC_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X4_FEC_STSr
#define READLN_SC_X4_FEC_STSr BCMI_TSCF_GEN3_XGXS_READLN_SC_X4_FEC_STSr
#define WRITELN_SC_X4_FEC_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_SC_X4_FEC_STSr
#define WRITEALL_SC_X4_FEC_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_SC_X4_FEC_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X4_FEC_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X4_RSLVD6
 * BLOCKS:   SC_X4_FINAL_CONFIG_STATUS
 * REGADDR:  0xc079
 * DESC:     Final speed configuration for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     T_CL91_CW_SCRAMBLE Indicates whether the CL91 codeword should be scrambled or not. It should be set to 1 in FC mode.
 *     T_FIVE_BIT_XOR_EN 1'b1 - XOR 4:0 with 12:8, 1'b0 - No XOR of the 5 bits
 *     T_PMA_CL91_MUX_SEL T_PMA MUX CL91 select.
 *     T_PMA_WATERMARK  T_PMA FIFO watermark. In units of 66-bit blocks.
 *     T_PMA_BITMUX_DELAY T_PMA FIFO delay after watermark is reached (in units of cycles)
 *     AM_SPACING_MUL   
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD6r (0x0000c079 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD6r_SIZE 4

/*
 * This structure should be used to declare and program SC_X4_RSLVD6.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD6r_s {
	uint32_t v[1];
	uint32_t sc_x4_rslvd6[1];
	uint32_t _sc_x4_rslvd6;
} BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD6r_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD6r_CLR(r) (r).sc_x4_rslvd6[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD6r_SET(r,d) (r).sc_x4_rslvd6[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD6r_GET(r) (r).sc_x4_rslvd6[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD6r_AM_SPACING_MULf_GET(r) ((((r).sc_x4_rslvd6[0]) >> 9) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD6r_AM_SPACING_MULf_SET(r,f) (r).sc_x4_rslvd6[0]=(((r).sc_x4_rslvd6[0] & ~((uint32_t)0x3 << 9)) | ((((uint32_t)f) & 0x3) << 9)) | (3 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD6r_T_PMA_BITMUX_DELAYf_GET(r) ((((r).sc_x4_rslvd6[0]) >> 7) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD6r_T_PMA_BITMUX_DELAYf_SET(r,f) (r).sc_x4_rslvd6[0]=(((r).sc_x4_rslvd6[0] & ~((uint32_t)0x3 << 7)) | ((((uint32_t)f) & 0x3) << 7)) | (3 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD6r_T_PMA_WATERMARKf_GET(r) ((((r).sc_x4_rslvd6[0]) >> 3) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD6r_T_PMA_WATERMARKf_SET(r,f) (r).sc_x4_rslvd6[0]=(((r).sc_x4_rslvd6[0] & ~((uint32_t)0xf << 3)) | ((((uint32_t)f) & 0xf) << 3)) | (15 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD6r_T_PMA_CL91_MUX_SELf_GET(r) ((((r).sc_x4_rslvd6[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD6r_T_PMA_CL91_MUX_SELf_SET(r,f) (r).sc_x4_rslvd6[0]=(((r).sc_x4_rslvd6[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD6r_T_FIVE_BIT_XOR_ENf_GET(r) ((((r).sc_x4_rslvd6[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD6r_T_FIVE_BIT_XOR_ENf_SET(r,f) (r).sc_x4_rslvd6[0]=(((r).sc_x4_rslvd6[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD6r_T_CL91_CW_SCRAMBLEf_GET(r) (((r).sc_x4_rslvd6[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD6r_T_CL91_CW_SCRAMBLEf_SET(r,f) (r).sc_x4_rslvd6[0]=(((r).sc_x4_rslvd6[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access SC_X4_RSLVD6.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X4_RSLVD6r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD6r,(_r._sc_x4_rslvd6))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X4_RSLVD6r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD6r,(_r._sc_x4_rslvd6)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X4_RSLVD6r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD6r,(_r._sc_x4_rslvd6))
#define BCMI_TSCF_GEN3_XGXS_READLN_SC_X4_RSLVD6r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD6r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_rslvd6))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_SC_X4_RSLVD6r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD6r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_rslvd6))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_SC_X4_RSLVD6r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD6r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sc_x4_rslvd6))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X4_RSLVD6r BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD6r
#define SC_X4_RSLVD6r_SIZE BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD6r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD6r_t SC_X4_RSLVD6r_t;
#define SC_X4_RSLVD6r_CLR BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD6r_CLR
#define SC_X4_RSLVD6r_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD6r_SET
#define SC_X4_RSLVD6r_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD6r_GET
#define SC_X4_RSLVD6r_AM_SPACING_MULf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD6r_AM_SPACING_MULf_GET
#define SC_X4_RSLVD6r_AM_SPACING_MULf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD6r_AM_SPACING_MULf_SET
#define SC_X4_RSLVD6r_T_PMA_BITMUX_DELAYf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD6r_T_PMA_BITMUX_DELAYf_GET
#define SC_X4_RSLVD6r_T_PMA_BITMUX_DELAYf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD6r_T_PMA_BITMUX_DELAYf_SET
#define SC_X4_RSLVD6r_T_PMA_WATERMARKf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD6r_T_PMA_WATERMARKf_GET
#define SC_X4_RSLVD6r_T_PMA_WATERMARKf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD6r_T_PMA_WATERMARKf_SET
#define SC_X4_RSLVD6r_T_PMA_CL91_MUX_SELf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD6r_T_PMA_CL91_MUX_SELf_GET
#define SC_X4_RSLVD6r_T_PMA_CL91_MUX_SELf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD6r_T_PMA_CL91_MUX_SELf_SET
#define SC_X4_RSLVD6r_T_FIVE_BIT_XOR_ENf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD6r_T_FIVE_BIT_XOR_ENf_GET
#define SC_X4_RSLVD6r_T_FIVE_BIT_XOR_ENf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD6r_T_FIVE_BIT_XOR_ENf_SET
#define SC_X4_RSLVD6r_T_CL91_CW_SCRAMBLEf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD6r_T_CL91_CW_SCRAMBLEf_GET
#define SC_X4_RSLVD6r_T_CL91_CW_SCRAMBLEf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD6r_T_CL91_CW_SCRAMBLEf_SET
#define READ_SC_X4_RSLVD6r BCMI_TSCF_GEN3_XGXS_READ_SC_X4_RSLVD6r
#define WRITE_SC_X4_RSLVD6r BCMI_TSCF_GEN3_XGXS_WRITE_SC_X4_RSLVD6r
#define MODIFY_SC_X4_RSLVD6r BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X4_RSLVD6r
#define READLN_SC_X4_RSLVD6r BCMI_TSCF_GEN3_XGXS_READLN_SC_X4_RSLVD6r
#define WRITELN_SC_X4_RSLVD6r BCMI_TSCF_GEN3_XGXS_WRITELN_SC_X4_RSLVD6r
#define WRITEALL_SC_X4_RSLVD6r BCMI_TSCF_GEN3_XGXS_WRITEALL_SC_X4_RSLVD6r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD6r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X4_RSLVD7
 * BLOCKS:   SC_X4_FINAL_CONFIG_STATUS
 * REGADDR:  0xc07a
 * DESC:     Final speed configuration for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CL91_BLKSYNC_MODE 
 *     R_MERGE_MODE     
 *     R_CL91_CW_SCRAMBLE Indicates whether the CL91 codeword needs to be descrambled. Should be enabled for FC mode.
 *     R_TC_IN_MODE     Indicates whether CL91 is turned ON for the port or not.
 *     R_TC_MODE        
 *     R_FIVE_BIT_XOR_EN 1'b1 - XOR 4:0 with 12:8, 1'b0 - No XOR of the 5 bits
 *     R_TC_OUT_MODE    
 *     R_HG2_ENABLE     Enables HG2 support for PCS
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD7r (0x0000c07a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD7r_SIZE 4

/*
 * This structure should be used to declare and program SC_X4_RSLVD7.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD7r_s {
	uint32_t v[1];
	uint32_t sc_x4_rslvd7[1];
	uint32_t _sc_x4_rslvd7;
} BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD7r_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD7r_CLR(r) (r).sc_x4_rslvd7[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD7r_SET(r,d) (r).sc_x4_rslvd7[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD7r_GET(r) (r).sc_x4_rslvd7[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD7r_R_HG2_ENABLEf_GET(r) ((((r).sc_x4_rslvd7[0]) >> 13) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD7r_R_HG2_ENABLEf_SET(r,f) (r).sc_x4_rslvd7[0]=(((r).sc_x4_rslvd7[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD7r_R_TC_OUT_MODEf_GET(r) ((((r).sc_x4_rslvd7[0]) >> 11) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD7r_R_TC_OUT_MODEf_SET(r,f) (r).sc_x4_rslvd7[0]=(((r).sc_x4_rslvd7[0] & ~((uint32_t)0x3 << 11)) | ((((uint32_t)f) & 0x3) << 11)) | (3 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD7r_R_FIVE_BIT_XOR_ENf_GET(r) ((((r).sc_x4_rslvd7[0]) >> 10) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD7r_R_FIVE_BIT_XOR_ENf_SET(r,f) (r).sc_x4_rslvd7[0]=(((r).sc_x4_rslvd7[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD7r_R_TC_MODEf_GET(r) ((((r).sc_x4_rslvd7[0]) >> 8) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD7r_R_TC_MODEf_SET(r,f) (r).sc_x4_rslvd7[0]=(((r).sc_x4_rslvd7[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD7r_R_TC_IN_MODEf_GET(r) ((((r).sc_x4_rslvd7[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD7r_R_TC_IN_MODEf_SET(r,f) (r).sc_x4_rslvd7[0]=(((r).sc_x4_rslvd7[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD7r_R_CL91_CW_SCRAMBLEf_GET(r) ((((r).sc_x4_rslvd7[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD7r_R_CL91_CW_SCRAMBLEf_SET(r,f) (r).sc_x4_rslvd7[0]=(((r).sc_x4_rslvd7[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD7r_R_MERGE_MODEf_GET(r) ((((r).sc_x4_rslvd7[0]) >> 3) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD7r_R_MERGE_MODEf_SET(r,f) (r).sc_x4_rslvd7[0]=(((r).sc_x4_rslvd7[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3)) | (7 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD7r_CL91_BLKSYNC_MODEf_GET(r) (((r).sc_x4_rslvd7[0]) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD7r_CL91_BLKSYNC_MODEf_SET(r,f) (r).sc_x4_rslvd7[0]=(((r).sc_x4_rslvd7[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access SC_X4_RSLVD7.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X4_RSLVD7r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD7r,(_r._sc_x4_rslvd7))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X4_RSLVD7r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD7r,(_r._sc_x4_rslvd7)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X4_RSLVD7r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD7r,(_r._sc_x4_rslvd7))
#define BCMI_TSCF_GEN3_XGXS_READLN_SC_X4_RSLVD7r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD7r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_rslvd7))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_SC_X4_RSLVD7r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD7r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_rslvd7))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_SC_X4_RSLVD7r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD7r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sc_x4_rslvd7))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X4_RSLVD7r BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD7r
#define SC_X4_RSLVD7r_SIZE BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD7r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD7r_t SC_X4_RSLVD7r_t;
#define SC_X4_RSLVD7r_CLR BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD7r_CLR
#define SC_X4_RSLVD7r_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD7r_SET
#define SC_X4_RSLVD7r_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD7r_GET
#define SC_X4_RSLVD7r_R_HG2_ENABLEf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD7r_R_HG2_ENABLEf_GET
#define SC_X4_RSLVD7r_R_HG2_ENABLEf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD7r_R_HG2_ENABLEf_SET
#define SC_X4_RSLVD7r_R_TC_OUT_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD7r_R_TC_OUT_MODEf_GET
#define SC_X4_RSLVD7r_R_TC_OUT_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD7r_R_TC_OUT_MODEf_SET
#define SC_X4_RSLVD7r_R_FIVE_BIT_XOR_ENf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD7r_R_FIVE_BIT_XOR_ENf_GET
#define SC_X4_RSLVD7r_R_FIVE_BIT_XOR_ENf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD7r_R_FIVE_BIT_XOR_ENf_SET
#define SC_X4_RSLVD7r_R_TC_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD7r_R_TC_MODEf_GET
#define SC_X4_RSLVD7r_R_TC_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD7r_R_TC_MODEf_SET
#define SC_X4_RSLVD7r_R_TC_IN_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD7r_R_TC_IN_MODEf_GET
#define SC_X4_RSLVD7r_R_TC_IN_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD7r_R_TC_IN_MODEf_SET
#define SC_X4_RSLVD7r_R_CL91_CW_SCRAMBLEf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD7r_R_CL91_CW_SCRAMBLEf_GET
#define SC_X4_RSLVD7r_R_CL91_CW_SCRAMBLEf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD7r_R_CL91_CW_SCRAMBLEf_SET
#define SC_X4_RSLVD7r_R_MERGE_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD7r_R_MERGE_MODEf_GET
#define SC_X4_RSLVD7r_R_MERGE_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD7r_R_MERGE_MODEf_SET
#define SC_X4_RSLVD7r_CL91_BLKSYNC_MODEf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD7r_CL91_BLKSYNC_MODEf_GET
#define SC_X4_RSLVD7r_CL91_BLKSYNC_MODEf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD7r_CL91_BLKSYNC_MODEf_SET
#define READ_SC_X4_RSLVD7r BCMI_TSCF_GEN3_XGXS_READ_SC_X4_RSLVD7r
#define WRITE_SC_X4_RSLVD7r BCMI_TSCF_GEN3_XGXS_WRITE_SC_X4_RSLVD7r
#define MODIFY_SC_X4_RSLVD7r BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X4_RSLVD7r
#define READLN_SC_X4_RSLVD7r BCMI_TSCF_GEN3_XGXS_READLN_SC_X4_RSLVD7r
#define WRITELN_SC_X4_RSLVD7r BCMI_TSCF_GEN3_XGXS_WRITELN_SC_X4_RSLVD7r
#define WRITEALL_SC_X4_RSLVD7r BCMI_TSCF_GEN3_XGXS_WRITEALL_SC_X4_RSLVD7r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD7r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SC_X4_RSLVD8
 * BLOCKS:   SC_X4_FINAL_CONFIG_STATUS
 * REGADDR:  0xc07b
 * DESC:     Final speed configuration for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CORRUPT_2ND_GROUP Corrupt 2nd group of codeward
 *     CORRUPT_6TH_GROUP Corrupt 6th group of codeward
 *     CL74_SHCORRUPT   Sync Header Corruption for CL74 FEC Error (uncorrectable).0: Only 5 SH, 1: All SH corrupted.
 *     BER_COUNT_SEL    0: select count based on cl49 else based on cl82
 *     BER_WINDOW_SEL   0: select window based on cl49 else based on cl82
 *     USE_100G_AM0     AM0 will be taken from 100G AM
 *     USE_100G_AM123   AM 1, 2, 3 will be taken from 100G AMs
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD8r (0x0000c07b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD8r_SIZE 4

/*
 * This structure should be used to declare and program SC_X4_RSLVD8.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD8r_s {
	uint32_t v[1];
	uint32_t sc_x4_rslvd8[1];
	uint32_t _sc_x4_rslvd8;
} BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD8r_t;

#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD8r_CLR(r) (r).sc_x4_rslvd8[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD8r_SET(r,d) (r).sc_x4_rslvd8[0] = d
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD8r_GET(r) (r).sc_x4_rslvd8[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD8r_USE_100G_AM123f_GET(r) ((((r).sc_x4_rslvd8[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD8r_USE_100G_AM123f_SET(r,f) (r).sc_x4_rslvd8[0]=(((r).sc_x4_rslvd8[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD8r_USE_100G_AM0f_GET(r) ((((r).sc_x4_rslvd8[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD8r_USE_100G_AM0f_SET(r,f) (r).sc_x4_rslvd8[0]=(((r).sc_x4_rslvd8[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD8r_BER_WINDOW_SELf_GET(r) ((((r).sc_x4_rslvd8[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD8r_BER_WINDOW_SELf_SET(r,f) (r).sc_x4_rslvd8[0]=(((r).sc_x4_rslvd8[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD8r_BER_COUNT_SELf_GET(r) ((((r).sc_x4_rslvd8[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD8r_BER_COUNT_SELf_SET(r,f) (r).sc_x4_rslvd8[0]=(((r).sc_x4_rslvd8[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD8r_CL74_SHCORRUPTf_GET(r) ((((r).sc_x4_rslvd8[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD8r_CL74_SHCORRUPTf_SET(r,f) (r).sc_x4_rslvd8[0]=(((r).sc_x4_rslvd8[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD8r_CORRUPT_6TH_GROUPf_GET(r) ((((r).sc_x4_rslvd8[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD8r_CORRUPT_6TH_GROUPf_SET(r,f) (r).sc_x4_rslvd8[0]=(((r).sc_x4_rslvd8[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD8r_CORRUPT_2ND_GROUPf_GET(r) (((r).sc_x4_rslvd8[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD8r_CORRUPT_2ND_GROUPf_SET(r,f) (r).sc_x4_rslvd8[0]=(((r).sc_x4_rslvd8[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access SC_X4_RSLVD8.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SC_X4_RSLVD8r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD8r,(_r._sc_x4_rslvd8))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SC_X4_RSLVD8r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD8r,(_r._sc_x4_rslvd8)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X4_RSLVD8r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD8r,(_r._sc_x4_rslvd8))
#define BCMI_TSCF_GEN3_XGXS_READLN_SC_X4_RSLVD8r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD8r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_rslvd8))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_SC_X4_RSLVD8r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD8r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_rslvd8))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_SC_X4_RSLVD8r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD8r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sc_x4_rslvd8))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SC_X4_RSLVD8r BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD8r
#define SC_X4_RSLVD8r_SIZE BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD8r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD8r_t SC_X4_RSLVD8r_t;
#define SC_X4_RSLVD8r_CLR BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD8r_CLR
#define SC_X4_RSLVD8r_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD8r_SET
#define SC_X4_RSLVD8r_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD8r_GET
#define SC_X4_RSLVD8r_USE_100G_AM123f_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD8r_USE_100G_AM123f_GET
#define SC_X4_RSLVD8r_USE_100G_AM123f_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD8r_USE_100G_AM123f_SET
#define SC_X4_RSLVD8r_USE_100G_AM0f_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD8r_USE_100G_AM0f_GET
#define SC_X4_RSLVD8r_USE_100G_AM0f_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD8r_USE_100G_AM0f_SET
#define SC_X4_RSLVD8r_BER_WINDOW_SELf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD8r_BER_WINDOW_SELf_GET
#define SC_X4_RSLVD8r_BER_WINDOW_SELf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD8r_BER_WINDOW_SELf_SET
#define SC_X4_RSLVD8r_BER_COUNT_SELf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD8r_BER_COUNT_SELf_GET
#define SC_X4_RSLVD8r_BER_COUNT_SELf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD8r_BER_COUNT_SELf_SET
#define SC_X4_RSLVD8r_CL74_SHCORRUPTf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD8r_CL74_SHCORRUPTf_GET
#define SC_X4_RSLVD8r_CL74_SHCORRUPTf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD8r_CL74_SHCORRUPTf_SET
#define SC_X4_RSLVD8r_CORRUPT_6TH_GROUPf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD8r_CORRUPT_6TH_GROUPf_GET
#define SC_X4_RSLVD8r_CORRUPT_6TH_GROUPf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD8r_CORRUPT_6TH_GROUPf_SET
#define SC_X4_RSLVD8r_CORRUPT_2ND_GROUPf_GET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD8r_CORRUPT_2ND_GROUPf_GET
#define SC_X4_RSLVD8r_CORRUPT_2ND_GROUPf_SET BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD8r_CORRUPT_2ND_GROUPf_SET
#define READ_SC_X4_RSLVD8r BCMI_TSCF_GEN3_XGXS_READ_SC_X4_RSLVD8r
#define WRITE_SC_X4_RSLVD8r BCMI_TSCF_GEN3_XGXS_WRITE_SC_X4_RSLVD8r
#define MODIFY_SC_X4_RSLVD8r BCMI_TSCF_GEN3_XGXS_MODIFY_SC_X4_RSLVD8r
#define READLN_SC_X4_RSLVD8r BCMI_TSCF_GEN3_XGXS_READLN_SC_X4_RSLVD8r
#define WRITELN_SC_X4_RSLVD8r BCMI_TSCF_GEN3_XGXS_WRITELN_SC_X4_RSLVD8r
#define WRITEALL_SC_X4_RSLVD8r BCMI_TSCF_GEN3_XGXS_WRITEALL_SC_X4_RSLVD8r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SC_X4_RSLVD8r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TX_X4_CRED0
 * BLOCKS:   TX_X4_CREDIT0
 * REGADDR:  0xc100
 * DESC:     clock count 0 register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CLOCKCNT0        clock count 0 for credit programming, range 5 to 4125
 *     CREDITENABLE     Enables credits to be generated for the MAC.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_X4_CRED0r (0x0000c100 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TX_X4_CRED0r_SIZE 4

/*
 * This structure should be used to declare and program TX_X4_CRED0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TX_X4_CRED0r_s {
	uint32_t v[1];
	uint32_t tx_x4_cred0[1];
	uint32_t _tx_x4_cred0;
} BCMI_TSCF_GEN3_XGXS_TX_X4_CRED0r_t;

#define BCMI_TSCF_GEN3_XGXS_TX_X4_CRED0r_CLR(r) (r).tx_x4_cred0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TX_X4_CRED0r_SET(r,d) (r).tx_x4_cred0[0] = d
#define BCMI_TSCF_GEN3_XGXS_TX_X4_CRED0r_GET(r) (r).tx_x4_cred0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_X4_CRED0r_CREDITENABLEf_GET(r) ((((r).tx_x4_cred0[0]) >> 14) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_CRED0r_CREDITENABLEf_SET(r,f) (r).tx_x4_cred0[0]=(((r).tx_x4_cred0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_TX_X4_CRED0r_CLOCKCNT0f_GET(r) (((r).tx_x4_cred0[0]) & 0x3fff)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_CRED0r_CLOCKCNT0f_SET(r,f) (r).tx_x4_cred0[0]=(((r).tx_x4_cred0[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff)) | (0x3fff << 16)

/*
 * These macros can be used to access TX_X4_CRED0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TX_X4_CRED0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_CRED0r,(_r._tx_x4_cred0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TX_X4_CRED0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_CRED0r,(_r._tx_x4_cred0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TX_X4_CRED0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_CRED0r,(_r._tx_x4_cred0))
#define BCMI_TSCF_GEN3_XGXS_READLN_TX_X4_CRED0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_CRED0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_cred0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TX_X4_CRED0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_CRED0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_cred0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_X4_CRED0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_CRED0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_x4_cred0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_X4_CRED0r BCMI_TSCF_GEN3_XGXS_TX_X4_CRED0r
#define TX_X4_CRED0r_SIZE BCMI_TSCF_GEN3_XGXS_TX_X4_CRED0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TX_X4_CRED0r_t TX_X4_CRED0r_t;
#define TX_X4_CRED0r_CLR BCMI_TSCF_GEN3_XGXS_TX_X4_CRED0r_CLR
#define TX_X4_CRED0r_SET BCMI_TSCF_GEN3_XGXS_TX_X4_CRED0r_SET
#define TX_X4_CRED0r_GET BCMI_TSCF_GEN3_XGXS_TX_X4_CRED0r_GET
#define TX_X4_CRED0r_CREDITENABLEf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_CRED0r_CREDITENABLEf_GET
#define TX_X4_CRED0r_CREDITENABLEf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_CRED0r_CREDITENABLEf_SET
#define TX_X4_CRED0r_CLOCKCNT0f_GET BCMI_TSCF_GEN3_XGXS_TX_X4_CRED0r_CLOCKCNT0f_GET
#define TX_X4_CRED0r_CLOCKCNT0f_SET BCMI_TSCF_GEN3_XGXS_TX_X4_CRED0r_CLOCKCNT0f_SET
#define READ_TX_X4_CRED0r BCMI_TSCF_GEN3_XGXS_READ_TX_X4_CRED0r
#define WRITE_TX_X4_CRED0r BCMI_TSCF_GEN3_XGXS_WRITE_TX_X4_CRED0r
#define MODIFY_TX_X4_CRED0r BCMI_TSCF_GEN3_XGXS_MODIFY_TX_X4_CRED0r
#define READLN_TX_X4_CRED0r BCMI_TSCF_GEN3_XGXS_READLN_TX_X4_CRED0r
#define WRITELN_TX_X4_CRED0r BCMI_TSCF_GEN3_XGXS_WRITELN_TX_X4_CRED0r
#define WRITEALL_TX_X4_CRED0r BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_X4_CRED0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TX_X4_CRED0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TX_X4_CRED1
 * BLOCKS:   TX_X4_CREDIT0
 * REGADDR:  0xc101
 * DESC:     clock count 1 register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CLOCKCNT1        clock count 1 for credit programming, range 4 to 12
 */
#define BCMI_TSCF_GEN3_XGXS_TX_X4_CRED1r (0x0000c101 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TX_X4_CRED1r_SIZE 4

/*
 * This structure should be used to declare and program TX_X4_CRED1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TX_X4_CRED1r_s {
	uint32_t v[1];
	uint32_t tx_x4_cred1[1];
	uint32_t _tx_x4_cred1;
} BCMI_TSCF_GEN3_XGXS_TX_X4_CRED1r_t;

#define BCMI_TSCF_GEN3_XGXS_TX_X4_CRED1r_CLR(r) (r).tx_x4_cred1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TX_X4_CRED1r_SET(r,d) (r).tx_x4_cred1[0] = d
#define BCMI_TSCF_GEN3_XGXS_TX_X4_CRED1r_GET(r) (r).tx_x4_cred1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_X4_CRED1r_CLOCKCNT1f_GET(r) (((r).tx_x4_cred1[0]) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_CRED1r_CLOCKCNT1f_SET(r,f) (r).tx_x4_cred1[0]=(((r).tx_x4_cred1[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access TX_X4_CRED1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TX_X4_CRED1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_CRED1r,(_r._tx_x4_cred1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TX_X4_CRED1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_CRED1r,(_r._tx_x4_cred1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TX_X4_CRED1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_CRED1r,(_r._tx_x4_cred1))
#define BCMI_TSCF_GEN3_XGXS_READLN_TX_X4_CRED1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_CRED1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_cred1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TX_X4_CRED1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_CRED1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_cred1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_X4_CRED1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_CRED1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_x4_cred1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_X4_CRED1r BCMI_TSCF_GEN3_XGXS_TX_X4_CRED1r
#define TX_X4_CRED1r_SIZE BCMI_TSCF_GEN3_XGXS_TX_X4_CRED1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TX_X4_CRED1r_t TX_X4_CRED1r_t;
#define TX_X4_CRED1r_CLR BCMI_TSCF_GEN3_XGXS_TX_X4_CRED1r_CLR
#define TX_X4_CRED1r_SET BCMI_TSCF_GEN3_XGXS_TX_X4_CRED1r_SET
#define TX_X4_CRED1r_GET BCMI_TSCF_GEN3_XGXS_TX_X4_CRED1r_GET
#define TX_X4_CRED1r_CLOCKCNT1f_GET BCMI_TSCF_GEN3_XGXS_TX_X4_CRED1r_CLOCKCNT1f_GET
#define TX_X4_CRED1r_CLOCKCNT1f_SET BCMI_TSCF_GEN3_XGXS_TX_X4_CRED1r_CLOCKCNT1f_SET
#define READ_TX_X4_CRED1r BCMI_TSCF_GEN3_XGXS_READ_TX_X4_CRED1r
#define WRITE_TX_X4_CRED1r BCMI_TSCF_GEN3_XGXS_WRITE_TX_X4_CRED1r
#define MODIFY_TX_X4_CRED1r BCMI_TSCF_GEN3_XGXS_MODIFY_TX_X4_CRED1r
#define READLN_TX_X4_CRED1r BCMI_TSCF_GEN3_XGXS_READLN_TX_X4_CRED1r
#define WRITELN_TX_X4_CRED1r BCMI_TSCF_GEN3_XGXS_WRITELN_TX_X4_CRED1r
#define WRITEALL_TX_X4_CRED1r BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_X4_CRED1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TX_X4_CRED1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TX_X4_LOOPCNT
 * BLOCKS:   TX_X4_CREDIT0
 * REGADDR:  0xc102
 * DESC:     loop count 1_0 register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LOOPCNT1         loop count 1 for credit programming, range 2 to 18
 *     LOOPCNT0         loop count 0 for credit programming, range 1 to 1
 */
#define BCMI_TSCF_GEN3_XGXS_TX_X4_LOOPCNTr (0x0000c102 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TX_X4_LOOPCNTr_SIZE 4

/*
 * This structure should be used to declare and program TX_X4_LOOPCNT.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TX_X4_LOOPCNTr_s {
	uint32_t v[1];
	uint32_t tx_x4_loopcnt[1];
	uint32_t _tx_x4_loopcnt;
} BCMI_TSCF_GEN3_XGXS_TX_X4_LOOPCNTr_t;

#define BCMI_TSCF_GEN3_XGXS_TX_X4_LOOPCNTr_CLR(r) (r).tx_x4_loopcnt[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TX_X4_LOOPCNTr_SET(r,d) (r).tx_x4_loopcnt[0] = d
#define BCMI_TSCF_GEN3_XGXS_TX_X4_LOOPCNTr_GET(r) (r).tx_x4_loopcnt[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_X4_LOOPCNTr_LOOPCNT0f_GET(r) ((((r).tx_x4_loopcnt[0]) >> 6) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_LOOPCNTr_LOOPCNT0f_SET(r,f) (r).tx_x4_loopcnt[0]=(((r).tx_x4_loopcnt[0] & ~((uint32_t)0xff << 6)) | ((((uint32_t)f) & 0xff) << 6)) | (255 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_TX_X4_LOOPCNTr_LOOPCNT1f_GET(r) (((r).tx_x4_loopcnt[0]) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_LOOPCNTr_LOOPCNT1f_SET(r,f) (r).tx_x4_loopcnt[0]=(((r).tx_x4_loopcnt[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access TX_X4_LOOPCNT.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TX_X4_LOOPCNTr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_LOOPCNTr,(_r._tx_x4_loopcnt))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TX_X4_LOOPCNTr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_LOOPCNTr,(_r._tx_x4_loopcnt)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TX_X4_LOOPCNTr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_LOOPCNTr,(_r._tx_x4_loopcnt))
#define BCMI_TSCF_GEN3_XGXS_READLN_TX_X4_LOOPCNTr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_LOOPCNTr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_loopcnt))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TX_X4_LOOPCNTr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_LOOPCNTr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_loopcnt))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_X4_LOOPCNTr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_LOOPCNTr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_x4_loopcnt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_X4_LOOPCNTr BCMI_TSCF_GEN3_XGXS_TX_X4_LOOPCNTr
#define TX_X4_LOOPCNTr_SIZE BCMI_TSCF_GEN3_XGXS_TX_X4_LOOPCNTr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TX_X4_LOOPCNTr_t TX_X4_LOOPCNTr_t;
#define TX_X4_LOOPCNTr_CLR BCMI_TSCF_GEN3_XGXS_TX_X4_LOOPCNTr_CLR
#define TX_X4_LOOPCNTr_SET BCMI_TSCF_GEN3_XGXS_TX_X4_LOOPCNTr_SET
#define TX_X4_LOOPCNTr_GET BCMI_TSCF_GEN3_XGXS_TX_X4_LOOPCNTr_GET
#define TX_X4_LOOPCNTr_LOOPCNT0f_GET BCMI_TSCF_GEN3_XGXS_TX_X4_LOOPCNTr_LOOPCNT0f_GET
#define TX_X4_LOOPCNTr_LOOPCNT0f_SET BCMI_TSCF_GEN3_XGXS_TX_X4_LOOPCNTr_LOOPCNT0f_SET
#define TX_X4_LOOPCNTr_LOOPCNT1f_GET BCMI_TSCF_GEN3_XGXS_TX_X4_LOOPCNTr_LOOPCNT1f_GET
#define TX_X4_LOOPCNTr_LOOPCNT1f_SET BCMI_TSCF_GEN3_XGXS_TX_X4_LOOPCNTr_LOOPCNT1f_SET
#define READ_TX_X4_LOOPCNTr BCMI_TSCF_GEN3_XGXS_READ_TX_X4_LOOPCNTr
#define WRITE_TX_X4_LOOPCNTr BCMI_TSCF_GEN3_XGXS_WRITE_TX_X4_LOOPCNTr
#define MODIFY_TX_X4_LOOPCNTr BCMI_TSCF_GEN3_XGXS_MODIFY_TX_X4_LOOPCNTr
#define READLN_TX_X4_LOOPCNTr BCMI_TSCF_GEN3_XGXS_READLN_TX_X4_LOOPCNTr
#define WRITELN_TX_X4_LOOPCNTr BCMI_TSCF_GEN3_XGXS_WRITELN_TX_X4_LOOPCNTr
#define WRITEALL_TX_X4_LOOPCNTr BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_X4_LOOPCNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TX_X4_LOOPCNTr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TX_X4_MAC_CREDGENCNT
 * BLOCKS:   TX_X4_CREDIT0
 * REGADDR:  0xc103
 * DESC:     credit gen count register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MAC_CREDITGENCNT clock count 0 for credit programming, range 1 to 2063
 */
#define BCMI_TSCF_GEN3_XGXS_TX_X4_MAC_CREDGENCNTr (0x0000c103 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TX_X4_MAC_CREDGENCNTr_SIZE 4

/*
 * This structure should be used to declare and program TX_X4_MAC_CREDGENCNT.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TX_X4_MAC_CREDGENCNTr_s {
	uint32_t v[1];
	uint32_t tx_x4_mac_credgencnt[1];
	uint32_t _tx_x4_mac_credgencnt;
} BCMI_TSCF_GEN3_XGXS_TX_X4_MAC_CREDGENCNTr_t;

#define BCMI_TSCF_GEN3_XGXS_TX_X4_MAC_CREDGENCNTr_CLR(r) (r).tx_x4_mac_credgencnt[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TX_X4_MAC_CREDGENCNTr_SET(r,d) (r).tx_x4_mac_credgencnt[0] = d
#define BCMI_TSCF_GEN3_XGXS_TX_X4_MAC_CREDGENCNTr_GET(r) (r).tx_x4_mac_credgencnt[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_X4_MAC_CREDGENCNTr_MAC_CREDITGENCNTf_GET(r) (((r).tx_x4_mac_credgencnt[0]) & 0x1fff)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_MAC_CREDGENCNTr_MAC_CREDITGENCNTf_SET(r,f) (r).tx_x4_mac_credgencnt[0]=(((r).tx_x4_mac_credgencnt[0] & ~((uint32_t)0x1fff)) | (((uint32_t)f) & 0x1fff)) | (0x1fff << 16)

/*
 * These macros can be used to access TX_X4_MAC_CREDGENCNT.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TX_X4_MAC_CREDGENCNTr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_MAC_CREDGENCNTr,(_r._tx_x4_mac_credgencnt))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TX_X4_MAC_CREDGENCNTr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_MAC_CREDGENCNTr,(_r._tx_x4_mac_credgencnt)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TX_X4_MAC_CREDGENCNTr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_MAC_CREDGENCNTr,(_r._tx_x4_mac_credgencnt))
#define BCMI_TSCF_GEN3_XGXS_READLN_TX_X4_MAC_CREDGENCNTr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_MAC_CREDGENCNTr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_mac_credgencnt))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TX_X4_MAC_CREDGENCNTr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_MAC_CREDGENCNTr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_mac_credgencnt))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_X4_MAC_CREDGENCNTr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_MAC_CREDGENCNTr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_x4_mac_credgencnt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_X4_MAC_CREDGENCNTr BCMI_TSCF_GEN3_XGXS_TX_X4_MAC_CREDGENCNTr
#define TX_X4_MAC_CREDGENCNTr_SIZE BCMI_TSCF_GEN3_XGXS_TX_X4_MAC_CREDGENCNTr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TX_X4_MAC_CREDGENCNTr_t TX_X4_MAC_CREDGENCNTr_t;
#define TX_X4_MAC_CREDGENCNTr_CLR BCMI_TSCF_GEN3_XGXS_TX_X4_MAC_CREDGENCNTr_CLR
#define TX_X4_MAC_CREDGENCNTr_SET BCMI_TSCF_GEN3_XGXS_TX_X4_MAC_CREDGENCNTr_SET
#define TX_X4_MAC_CREDGENCNTr_GET BCMI_TSCF_GEN3_XGXS_TX_X4_MAC_CREDGENCNTr_GET
#define TX_X4_MAC_CREDGENCNTr_MAC_CREDITGENCNTf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_MAC_CREDGENCNTr_MAC_CREDITGENCNTf_GET
#define TX_X4_MAC_CREDGENCNTr_MAC_CREDITGENCNTf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_MAC_CREDGENCNTr_MAC_CREDITGENCNTf_SET
#define READ_TX_X4_MAC_CREDGENCNTr BCMI_TSCF_GEN3_XGXS_READ_TX_X4_MAC_CREDGENCNTr
#define WRITE_TX_X4_MAC_CREDGENCNTr BCMI_TSCF_GEN3_XGXS_WRITE_TX_X4_MAC_CREDGENCNTr
#define MODIFY_TX_X4_MAC_CREDGENCNTr BCMI_TSCF_GEN3_XGXS_MODIFY_TX_X4_MAC_CREDGENCNTr
#define READLN_TX_X4_MAC_CREDGENCNTr BCMI_TSCF_GEN3_XGXS_READLN_TX_X4_MAC_CREDGENCNTr
#define WRITELN_TX_X4_MAC_CREDGENCNTr BCMI_TSCF_GEN3_XGXS_WRITELN_TX_X4_MAC_CREDGENCNTr
#define WRITEALL_TX_X4_MAC_CREDGENCNTr BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_X4_MAC_CREDGENCNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TX_X4_MAC_CREDGENCNTr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TX_X4_ENC0
 * BLOCKS:   TX_X4_CONTROL0
 * REGADDR:  0xc111
 * DESC:     Encode 0 register
 * RESETVAL: 0x1800 (6144)
 * ACCESS:   R/W
 * FIELDS:
 *     T_ENC_MODE       
 *     T_FIFO_MODE      T_FIFO stage control field
 *     AM_SPACING_MUL   
 *     CL49_TX_TL_MODE  2'b01 - Force encoder output to local faults.2'b10 - Force encoder output to idles.
 *     CL49_BYPASS_TXSM Bypass cl49 transmit state machine1 = Bypass cl49 txsm :- force TX_INIT state- pass the data from the table look-up decoder to the output0 = normal mode
 *     HG2_ENABLE       Enables HG2 support for PCS
 *     HG2_MESSAGE_INVALID_CODE_ENABLE Enables HG2 invalid message code support.
 *     HG2_CODEC        Enables HG2 extensions support for PCSSet this bit to enable HG2 messaging
 *     BLOCK_NON_FC_BLK_TYPES Convert the following block types to errors - 0x87, 0x99, 0xAA, 0xCC, 0xD2, 0xE1
 *     DIS_SCRAMBLER    Disable the TX scrambler
 *     TX_TEST_MODE_CFG Force cl82 encoder output to idles.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r (0x0000c111 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_SIZE 4

/*
 * This structure should be used to declare and program TX_X4_ENC0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_s {
	uint32_t v[1];
	uint32_t tx_x4_enc0[1];
	uint32_t _tx_x4_enc0;
} BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_t;

#define BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_CLR(r) (r).tx_x4_enc0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_SET(r,d) (r).tx_x4_enc0[0] = d
#define BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_GET(r) (r).tx_x4_enc0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_TX_TEST_MODE_CFGf_GET(r) ((((r).tx_x4_enc0[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_TX_TEST_MODE_CFGf_SET(r,f) (r).tx_x4_enc0[0]=(((r).tx_x4_enc0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_DIS_SCRAMBLERf_GET(r) ((((r).tx_x4_enc0[0]) >> 14) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_DIS_SCRAMBLERf_SET(r,f) (r).tx_x4_enc0[0]=(((r).tx_x4_enc0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_BLOCK_NON_FC_BLK_TYPESf_GET(r) ((((r).tx_x4_enc0[0]) >> 13) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_BLOCK_NON_FC_BLK_TYPESf_SET(r,f) (r).tx_x4_enc0[0]=(((r).tx_x4_enc0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_HG2_CODECf_GET(r) ((((r).tx_x4_enc0[0]) >> 12) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_HG2_CODECf_SET(r,f) (r).tx_x4_enc0[0]=(((r).tx_x4_enc0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_HG2_MESSAGE_INVALID_CODE_ENABLEf_GET(r) ((((r).tx_x4_enc0[0]) >> 11) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_HG2_MESSAGE_INVALID_CODE_ENABLEf_SET(r,f) (r).tx_x4_enc0[0]=(((r).tx_x4_enc0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_HG2_ENABLEf_GET(r) ((((r).tx_x4_enc0[0]) >> 10) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_HG2_ENABLEf_SET(r,f) (r).tx_x4_enc0[0]=(((r).tx_x4_enc0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_CL49_BYPASS_TXSMf_GET(r) ((((r).tx_x4_enc0[0]) >> 9) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_CL49_BYPASS_TXSMf_SET(r,f) (r).tx_x4_enc0[0]=(((r).tx_x4_enc0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_CL49_TX_TL_MODEf_GET(r) ((((r).tx_x4_enc0[0]) >> 7) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_CL49_TX_TL_MODEf_SET(r,f) (r).tx_x4_enc0[0]=(((r).tx_x4_enc0[0] & ~((uint32_t)0x3 << 7)) | ((((uint32_t)f) & 0x3) << 7)) | (3 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_AM_SPACING_MULf_GET(r) ((((r).tx_x4_enc0[0]) >> 4) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_AM_SPACING_MULf_SET(r,f) (r).tx_x4_enc0[0]=(((r).tx_x4_enc0[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_T_FIFO_MODEf_GET(r) ((((r).tx_x4_enc0[0]) >> 2) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_T_FIFO_MODEf_SET(r,f) (r).tx_x4_enc0[0]=(((r).tx_x4_enc0[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2)) | (3 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_T_ENC_MODEf_GET(r) (((r).tx_x4_enc0[0]) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_T_ENC_MODEf_SET(r,f) (r).tx_x4_enc0[0]=(((r).tx_x4_enc0[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access TX_X4_ENC0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TX_X4_ENC0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r,(_r._tx_x4_enc0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TX_X4_ENC0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r,(_r._tx_x4_enc0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TX_X4_ENC0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r,(_r._tx_x4_enc0))
#define BCMI_TSCF_GEN3_XGXS_READLN_TX_X4_ENC0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_enc0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TX_X4_ENC0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_enc0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_X4_ENC0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_x4_enc0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_X4_ENC0r BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r
#define TX_X4_ENC0r_SIZE BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_t TX_X4_ENC0r_t;
#define TX_X4_ENC0r_CLR BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_CLR
#define TX_X4_ENC0r_SET BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_SET
#define TX_X4_ENC0r_GET BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_GET
#define TX_X4_ENC0r_TX_TEST_MODE_CFGf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_TX_TEST_MODE_CFGf_GET
#define TX_X4_ENC0r_TX_TEST_MODE_CFGf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_TX_TEST_MODE_CFGf_SET
#define TX_X4_ENC0r_DIS_SCRAMBLERf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_DIS_SCRAMBLERf_GET
#define TX_X4_ENC0r_DIS_SCRAMBLERf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_DIS_SCRAMBLERf_SET
#define TX_X4_ENC0r_BLOCK_NON_FC_BLK_TYPESf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_BLOCK_NON_FC_BLK_TYPESf_GET
#define TX_X4_ENC0r_BLOCK_NON_FC_BLK_TYPESf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_BLOCK_NON_FC_BLK_TYPESf_SET
#define TX_X4_ENC0r_HG2_CODECf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_HG2_CODECf_GET
#define TX_X4_ENC0r_HG2_CODECf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_HG2_CODECf_SET
#define TX_X4_ENC0r_HG2_MESSAGE_INVALID_CODE_ENABLEf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_HG2_MESSAGE_INVALID_CODE_ENABLEf_GET
#define TX_X4_ENC0r_HG2_MESSAGE_INVALID_CODE_ENABLEf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_HG2_MESSAGE_INVALID_CODE_ENABLEf_SET
#define TX_X4_ENC0r_HG2_ENABLEf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_HG2_ENABLEf_GET
#define TX_X4_ENC0r_HG2_ENABLEf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_HG2_ENABLEf_SET
#define TX_X4_ENC0r_CL49_BYPASS_TXSMf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_CL49_BYPASS_TXSMf_GET
#define TX_X4_ENC0r_CL49_BYPASS_TXSMf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_CL49_BYPASS_TXSMf_SET
#define TX_X4_ENC0r_CL49_TX_TL_MODEf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_CL49_TX_TL_MODEf_GET
#define TX_X4_ENC0r_CL49_TX_TL_MODEf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_CL49_TX_TL_MODEf_SET
#define TX_X4_ENC0r_AM_SPACING_MULf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_AM_SPACING_MULf_GET
#define TX_X4_ENC0r_AM_SPACING_MULf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_AM_SPACING_MULf_SET
#define TX_X4_ENC0r_T_FIFO_MODEf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_T_FIFO_MODEf_GET
#define TX_X4_ENC0r_T_FIFO_MODEf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_T_FIFO_MODEf_SET
#define TX_X4_ENC0r_T_ENC_MODEf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_T_ENC_MODEf_GET
#define TX_X4_ENC0r_T_ENC_MODEf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r_T_ENC_MODEf_SET
#define READ_TX_X4_ENC0r BCMI_TSCF_GEN3_XGXS_READ_TX_X4_ENC0r
#define WRITE_TX_X4_ENC0r BCMI_TSCF_GEN3_XGXS_WRITE_TX_X4_ENC0r
#define MODIFY_TX_X4_ENC0r BCMI_TSCF_GEN3_XGXS_MODIFY_TX_X4_ENC0r
#define READLN_TX_X4_ENC0r BCMI_TSCF_GEN3_XGXS_READLN_TX_X4_ENC0r
#define WRITELN_TX_X4_ENC0r BCMI_TSCF_GEN3_XGXS_WRITELN_TX_X4_ENC0r
#define WRITEALL_TX_X4_ENC0r BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_X4_ENC0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TX_X4_ENC0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TX_X4_MISC
 * BLOCKS:   TX_X4_CONTROL0
 * REGADDR:  0xc113
 * DESC:     Misc register
 * RESETVAL: 0x1c0 (448)
 * ACCESS:   R/W
 * FIELDS:
 *     ENABLE_TX_LANE   Per lane enable to allow DVs from MAC to enter TXP
 *     RSTB_TX_LANE     Low active reset for txp lanes
 *     OS_MODE          
 *     CL49_TX_RF_ENABLE If this bit is a one, RFs are passed from the RS LAYER to the PCS.If this bit is a zero, RFs are replaced by IDLEs which are then passedto the PCS.For CL49 only.
 *     CL49_TX_LF_ENABLE If this bit is a one, LFs are passed from the RS LAYER to the PCS.If this bit is a zero, LFs are replaced by IDLEs which are then passedto the PCS.For CL49 only.
 *     CL49_TX_LI_ENABLE If this bit is a one, LIs (Link Interrupt) are passed thru to the RS LAYER.If this bit is a zero, LIs (Link Interrupt) are replaced by IDLEs which are then passedto the RS LAYER.For CL49 only.
 *     T_PMA_40B_MODE   1'b0 - 66-bit data write in t_pma.1'b1 - 40-bit data write in t_pma.
 *     FEC_ENABLE       Enable Transmit FEC.
 *     T_PMA_BTMX_MODE  Number of PCS lanes bitmuxed
 *     SCR_MODE         
 */
#define BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr (0x0000c113 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr_SIZE 4

/*
 * This structure should be used to declare and program TX_X4_MISC.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr_s {
	uint32_t v[1];
	uint32_t tx_x4_misc[1];
	uint32_t _tx_x4_misc;
} BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr_t;

#define BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr_CLR(r) (r).tx_x4_misc[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr_SET(r,d) (r).tx_x4_misc[0] = d
#define BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr_GET(r) (r).tx_x4_misc[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr_SCR_MODEf_GET(r) ((((r).tx_x4_misc[0]) >> 13) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr_SCR_MODEf_SET(r,f) (r).tx_x4_misc[0]=(((r).tx_x4_misc[0] & ~((uint32_t)0x7 << 13)) | ((((uint32_t)f) & 0x7) << 13)) | (7 << (16 + 13))
#define BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr_T_PMA_BTMX_MODEf_GET(r) ((((r).tx_x4_misc[0]) >> 11) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr_T_PMA_BTMX_MODEf_SET(r,f) (r).tx_x4_misc[0]=(((r).tx_x4_misc[0] & ~((uint32_t)0x3 << 11)) | ((((uint32_t)f) & 0x3) << 11)) | (3 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr_FEC_ENABLEf_GET(r) ((((r).tx_x4_misc[0]) >> 10) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr_FEC_ENABLEf_SET(r,f) (r).tx_x4_misc[0]=(((r).tx_x4_misc[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr_T_PMA_40B_MODEf_GET(r) ((((r).tx_x4_misc[0]) >> 9) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr_T_PMA_40B_MODEf_SET(r,f) (r).tx_x4_misc[0]=(((r).tx_x4_misc[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr_CL49_TX_LI_ENABLEf_GET(r) ((((r).tx_x4_misc[0]) >> 8) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr_CL49_TX_LI_ENABLEf_SET(r,f) (r).tx_x4_misc[0]=(((r).tx_x4_misc[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr_CL49_TX_LF_ENABLEf_GET(r) ((((r).tx_x4_misc[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr_CL49_TX_LF_ENABLEf_SET(r,f) (r).tx_x4_misc[0]=(((r).tx_x4_misc[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr_CL49_TX_RF_ENABLEf_GET(r) ((((r).tx_x4_misc[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr_CL49_TX_RF_ENABLEf_SET(r,f) (r).tx_x4_misc[0]=(((r).tx_x4_misc[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr_OS_MODEf_GET(r) ((((r).tx_x4_misc[0]) >> 2) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr_OS_MODEf_SET(r,f) (r).tx_x4_misc[0]=(((r).tx_x4_misc[0] & ~((uint32_t)0xf << 2)) | ((((uint32_t)f) & 0xf) << 2)) | (15 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr_RSTB_TX_LANEf_GET(r) ((((r).tx_x4_misc[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr_RSTB_TX_LANEf_SET(r,f) (r).tx_x4_misc[0]=(((r).tx_x4_misc[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr_ENABLE_TX_LANEf_GET(r) (((r).tx_x4_misc[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr_ENABLE_TX_LANEf_SET(r,f) (r).tx_x4_misc[0]=(((r).tx_x4_misc[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TX_X4_MISC.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TX_X4_MISCr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr,(_r._tx_x4_misc))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TX_X4_MISCr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr,(_r._tx_x4_misc)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TX_X4_MISCr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr,(_r._tx_x4_misc))
#define BCMI_TSCF_GEN3_XGXS_READLN_TX_X4_MISCr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_misc))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TX_X4_MISCr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_misc))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_X4_MISCr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_x4_misc))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_X4_MISCr BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr
#define TX_X4_MISCr_SIZE BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr_t TX_X4_MISCr_t;
#define TX_X4_MISCr_CLR BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr_CLR
#define TX_X4_MISCr_SET BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr_SET
#define TX_X4_MISCr_GET BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr_GET
#define TX_X4_MISCr_SCR_MODEf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr_SCR_MODEf_GET
#define TX_X4_MISCr_SCR_MODEf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr_SCR_MODEf_SET
#define TX_X4_MISCr_T_PMA_BTMX_MODEf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr_T_PMA_BTMX_MODEf_GET
#define TX_X4_MISCr_T_PMA_BTMX_MODEf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr_T_PMA_BTMX_MODEf_SET
#define TX_X4_MISCr_FEC_ENABLEf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr_FEC_ENABLEf_GET
#define TX_X4_MISCr_FEC_ENABLEf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr_FEC_ENABLEf_SET
#define TX_X4_MISCr_T_PMA_40B_MODEf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr_T_PMA_40B_MODEf_GET
#define TX_X4_MISCr_T_PMA_40B_MODEf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr_T_PMA_40B_MODEf_SET
#define TX_X4_MISCr_CL49_TX_LI_ENABLEf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr_CL49_TX_LI_ENABLEf_GET
#define TX_X4_MISCr_CL49_TX_LI_ENABLEf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr_CL49_TX_LI_ENABLEf_SET
#define TX_X4_MISCr_CL49_TX_LF_ENABLEf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr_CL49_TX_LF_ENABLEf_GET
#define TX_X4_MISCr_CL49_TX_LF_ENABLEf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr_CL49_TX_LF_ENABLEf_SET
#define TX_X4_MISCr_CL49_TX_RF_ENABLEf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr_CL49_TX_RF_ENABLEf_GET
#define TX_X4_MISCr_CL49_TX_RF_ENABLEf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr_CL49_TX_RF_ENABLEf_SET
#define TX_X4_MISCr_OS_MODEf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr_OS_MODEf_GET
#define TX_X4_MISCr_OS_MODEf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr_OS_MODEf_SET
#define TX_X4_MISCr_RSTB_TX_LANEf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr_RSTB_TX_LANEf_GET
#define TX_X4_MISCr_RSTB_TX_LANEf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr_RSTB_TX_LANEf_SET
#define TX_X4_MISCr_ENABLE_TX_LANEf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr_ENABLE_TX_LANEf_GET
#define TX_X4_MISCr_ENABLE_TX_LANEf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr_ENABLE_TX_LANEf_SET
#define READ_TX_X4_MISCr BCMI_TSCF_GEN3_XGXS_READ_TX_X4_MISCr
#define WRITE_TX_X4_MISCr BCMI_TSCF_GEN3_XGXS_WRITE_TX_X4_MISCr
#define MODIFY_TX_X4_MISCr BCMI_TSCF_GEN3_XGXS_MODIFY_TX_X4_MISCr
#define READLN_TX_X4_MISCr BCMI_TSCF_GEN3_XGXS_READLN_TX_X4_MISCr
#define WRITELN_TX_X4_MISCr BCMI_TSCF_GEN3_XGXS_WRITELN_TX_X4_MISCr
#define WRITEALL_TX_X4_MISCr BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_X4_MISCr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TX_X4_MISCr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TX_X4_CL36_CTL
 * BLOCKS:   TX_X4_CONTROL0
 * REGADDR:  0xc114
 * DESC:     CL36 TX control
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL36TX_EN        Per logical lane: cl36 TX pipeline: 1=enabled , 0=disabled
 *     CL36TX_LPI_EN    Support for transmit of /LI/ code: 1=enabled , 0=disabledIf disabled (0), LPIs are converted to IDLEs
 *     CL36TX_CATCH_ALL_8B10B_DIS The following logic implements the catch-all special code-group case indicatedin the IEEE Std 802.3-2005, Table 48-2. Basically, it states that any invalidcode-group NOT defined in either Table 36-2 Valid special code-groups, orTable 48-2 XGMII character to PCS code-group mapping, shall be mapped tospecial code-group K30.7 (i.e. 10'h1FE). An input mux muxes out the actualinput data[7:0] or the 10'h1FE onto the internal bus, data_int, which drivesthe orginal 8b10b logic. A control, named catch_all_8b10b_dis, is used to turn offthe catch-all; default is catch-all is ON.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_X4_CL36_CTLr (0x0000c114 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TX_X4_CL36_CTLr_SIZE 4

/*
 * This structure should be used to declare and program TX_X4_CL36_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TX_X4_CL36_CTLr_s {
	uint32_t v[1];
	uint32_t tx_x4_cl36_ctl[1];
	uint32_t _tx_x4_cl36_ctl;
} BCMI_TSCF_GEN3_XGXS_TX_X4_CL36_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_TX_X4_CL36_CTLr_CLR(r) (r).tx_x4_cl36_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TX_X4_CL36_CTLr_SET(r,d) (r).tx_x4_cl36_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_TX_X4_CL36_CTLr_GET(r) (r).tx_x4_cl36_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_X4_CL36_CTLr_CL36TX_CATCH_ALL_8B10B_DISf_GET(r) ((((r).tx_x4_cl36_ctl[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_CL36_CTLr_CL36TX_CATCH_ALL_8B10B_DISf_SET(r,f) (r).tx_x4_cl36_ctl[0]=(((r).tx_x4_cl36_ctl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_TX_X4_CL36_CTLr_CL36TX_LPI_ENf_GET(r) ((((r).tx_x4_cl36_ctl[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_CL36_CTLr_CL36TX_LPI_ENf_SET(r,f) (r).tx_x4_cl36_ctl[0]=(((r).tx_x4_cl36_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_TX_X4_CL36_CTLr_CL36TX_ENf_GET(r) (((r).tx_x4_cl36_ctl[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_CL36_CTLr_CL36TX_ENf_SET(r,f) (r).tx_x4_cl36_ctl[0]=(((r).tx_x4_cl36_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TX_X4_CL36_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TX_X4_CL36_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_CL36_CTLr,(_r._tx_x4_cl36_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TX_X4_CL36_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_CL36_CTLr,(_r._tx_x4_cl36_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TX_X4_CL36_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_CL36_CTLr,(_r._tx_x4_cl36_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_TX_X4_CL36_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_CL36_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_cl36_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TX_X4_CL36_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_CL36_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_cl36_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_X4_CL36_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_CL36_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_x4_cl36_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_X4_CL36_CTLr BCMI_TSCF_GEN3_XGXS_TX_X4_CL36_CTLr
#define TX_X4_CL36_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_TX_X4_CL36_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TX_X4_CL36_CTLr_t TX_X4_CL36_CTLr_t;
#define TX_X4_CL36_CTLr_CLR BCMI_TSCF_GEN3_XGXS_TX_X4_CL36_CTLr_CLR
#define TX_X4_CL36_CTLr_SET BCMI_TSCF_GEN3_XGXS_TX_X4_CL36_CTLr_SET
#define TX_X4_CL36_CTLr_GET BCMI_TSCF_GEN3_XGXS_TX_X4_CL36_CTLr_GET
#define TX_X4_CL36_CTLr_CL36TX_CATCH_ALL_8B10B_DISf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_CL36_CTLr_CL36TX_CATCH_ALL_8B10B_DISf_GET
#define TX_X4_CL36_CTLr_CL36TX_CATCH_ALL_8B10B_DISf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_CL36_CTLr_CL36TX_CATCH_ALL_8B10B_DISf_SET
#define TX_X4_CL36_CTLr_CL36TX_LPI_ENf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_CL36_CTLr_CL36TX_LPI_ENf_GET
#define TX_X4_CL36_CTLr_CL36TX_LPI_ENf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_CL36_CTLr_CL36TX_LPI_ENf_SET
#define TX_X4_CL36_CTLr_CL36TX_ENf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_CL36_CTLr_CL36TX_ENf_GET
#define TX_X4_CL36_CTLr_CL36TX_ENf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_CL36_CTLr_CL36TX_ENf_SET
#define READ_TX_X4_CL36_CTLr BCMI_TSCF_GEN3_XGXS_READ_TX_X4_CL36_CTLr
#define WRITE_TX_X4_CL36_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_TX_X4_CL36_CTLr
#define MODIFY_TX_X4_CL36_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_TX_X4_CL36_CTLr
#define READLN_TX_X4_CL36_CTLr BCMI_TSCF_GEN3_XGXS_READLN_TX_X4_CL36_CTLr
#define WRITELN_TX_X4_CL36_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_TX_X4_CL36_CTLr
#define WRITEALL_TX_X4_CL36_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_X4_CL36_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TX_X4_CL36_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TX_X4_TX_CTL0
 * BLOCKS:   TX_X4_CONTROL0
 * REGADDR:  0xc115
 * DESC:     TX control 0 register
 * RESETVAL: 0xb8 (184)
 * ACCESS:   R/W
 * FIELDS:
 *     CL91_CW_SCRAMBLE Indicates whether the CL91 codeword should be scrambled or not. It should be set to 1 in FC mode.
 *     FIVE_BIT_XOR_EN  1'b1 - XOR 4:0 with 12:8, 1'b0 - No XOR of the 5 bits
 *     T_PMA_CL91_MUX_SEL T_PMA MUX CL91 select.
 *     T_PMA_WATERMARK  T_PMA FIFO watermark. In units of 66-bit blocks.
 *     T_PMA_BITMUX_DELAY T_PMA FIFO delay after watermark is reached (in units of cycles)
 *     CL91_FEC_MODE    
 */
#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_CTL0r (0x0000c115 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program TX_X4_TX_CTL0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TX_X4_TX_CTL0r_s {
	uint32_t v[1];
	uint32_t tx_x4_tx_ctl0[1];
	uint32_t _tx_x4_tx_ctl0;
} BCMI_TSCF_GEN3_XGXS_TX_X4_TX_CTL0r_t;

#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_CTL0r_CLR(r) (r).tx_x4_tx_ctl0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_CTL0r_SET(r,d) (r).tx_x4_tx_ctl0[0] = d
#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_CTL0r_GET(r) (r).tx_x4_tx_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_CTL0r_CL91_FEC_MODEf_GET(r) ((((r).tx_x4_tx_ctl0[0]) >> 9) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_CTL0r_CL91_FEC_MODEf_SET(r,f) (r).tx_x4_tx_ctl0[0]=(((r).tx_x4_tx_ctl0[0] & ~((uint32_t)0x7 << 9)) | ((((uint32_t)f) & 0x7) << 9)) | (7 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_CTL0r_T_PMA_BITMUX_DELAYf_GET(r) ((((r).tx_x4_tx_ctl0[0]) >> 7) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_CTL0r_T_PMA_BITMUX_DELAYf_SET(r,f) (r).tx_x4_tx_ctl0[0]=(((r).tx_x4_tx_ctl0[0] & ~((uint32_t)0x3 << 7)) | ((((uint32_t)f) & 0x3) << 7)) | (3 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_CTL0r_T_PMA_WATERMARKf_GET(r) ((((r).tx_x4_tx_ctl0[0]) >> 3) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_CTL0r_T_PMA_WATERMARKf_SET(r,f) (r).tx_x4_tx_ctl0[0]=(((r).tx_x4_tx_ctl0[0] & ~((uint32_t)0xf << 3)) | ((((uint32_t)f) & 0xf) << 3)) | (15 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_CTL0r_T_PMA_CL91_MUX_SELf_GET(r) ((((r).tx_x4_tx_ctl0[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_CTL0r_T_PMA_CL91_MUX_SELf_SET(r,f) (r).tx_x4_tx_ctl0[0]=(((r).tx_x4_tx_ctl0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_CTL0r_FIVE_BIT_XOR_ENf_GET(r) ((((r).tx_x4_tx_ctl0[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_CTL0r_FIVE_BIT_XOR_ENf_SET(r,f) (r).tx_x4_tx_ctl0[0]=(((r).tx_x4_tx_ctl0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_CTL0r_CL91_CW_SCRAMBLEf_GET(r) (((r).tx_x4_tx_ctl0[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_CTL0r_CL91_CW_SCRAMBLEf_SET(r,f) (r).tx_x4_tx_ctl0[0]=(((r).tx_x4_tx_ctl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TX_X4_TX_CTL0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TX_X4_TX_CTL0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_TX_CTL0r,(_r._tx_x4_tx_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TX_X4_TX_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_TX_CTL0r,(_r._tx_x4_tx_ctl0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TX_X4_TX_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_TX_CTL0r,(_r._tx_x4_tx_ctl0))
#define BCMI_TSCF_GEN3_XGXS_READLN_TX_X4_TX_CTL0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_TX_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_tx_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TX_X4_TX_CTL0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_TX_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_tx_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_X4_TX_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_TX_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_x4_tx_ctl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_X4_TX_CTL0r BCMI_TSCF_GEN3_XGXS_TX_X4_TX_CTL0r
#define TX_X4_TX_CTL0r_SIZE BCMI_TSCF_GEN3_XGXS_TX_X4_TX_CTL0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TX_X4_TX_CTL0r_t TX_X4_TX_CTL0r_t;
#define TX_X4_TX_CTL0r_CLR BCMI_TSCF_GEN3_XGXS_TX_X4_TX_CTL0r_CLR
#define TX_X4_TX_CTL0r_SET BCMI_TSCF_GEN3_XGXS_TX_X4_TX_CTL0r_SET
#define TX_X4_TX_CTL0r_GET BCMI_TSCF_GEN3_XGXS_TX_X4_TX_CTL0r_GET
#define TX_X4_TX_CTL0r_CL91_FEC_MODEf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_TX_CTL0r_CL91_FEC_MODEf_GET
#define TX_X4_TX_CTL0r_CL91_FEC_MODEf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_TX_CTL0r_CL91_FEC_MODEf_SET
#define TX_X4_TX_CTL0r_T_PMA_BITMUX_DELAYf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_TX_CTL0r_T_PMA_BITMUX_DELAYf_GET
#define TX_X4_TX_CTL0r_T_PMA_BITMUX_DELAYf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_TX_CTL0r_T_PMA_BITMUX_DELAYf_SET
#define TX_X4_TX_CTL0r_T_PMA_WATERMARKf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_TX_CTL0r_T_PMA_WATERMARKf_GET
#define TX_X4_TX_CTL0r_T_PMA_WATERMARKf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_TX_CTL0r_T_PMA_WATERMARKf_SET
#define TX_X4_TX_CTL0r_T_PMA_CL91_MUX_SELf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_TX_CTL0r_T_PMA_CL91_MUX_SELf_GET
#define TX_X4_TX_CTL0r_T_PMA_CL91_MUX_SELf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_TX_CTL0r_T_PMA_CL91_MUX_SELf_SET
#define TX_X4_TX_CTL0r_FIVE_BIT_XOR_ENf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_TX_CTL0r_FIVE_BIT_XOR_ENf_GET
#define TX_X4_TX_CTL0r_FIVE_BIT_XOR_ENf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_TX_CTL0r_FIVE_BIT_XOR_ENf_SET
#define TX_X4_TX_CTL0r_CL91_CW_SCRAMBLEf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_TX_CTL0r_CL91_CW_SCRAMBLEf_GET
#define TX_X4_TX_CTL0r_CL91_CW_SCRAMBLEf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_TX_CTL0r_CL91_CW_SCRAMBLEf_SET
#define READ_TX_X4_TX_CTL0r BCMI_TSCF_GEN3_XGXS_READ_TX_X4_TX_CTL0r
#define WRITE_TX_X4_TX_CTL0r BCMI_TSCF_GEN3_XGXS_WRITE_TX_X4_TX_CTL0r
#define MODIFY_TX_X4_TX_CTL0r BCMI_TSCF_GEN3_XGXS_MODIFY_TX_X4_TX_CTL0r
#define READLN_TX_X4_TX_CTL0r BCMI_TSCF_GEN3_XGXS_READLN_TX_X4_TX_CTL0r
#define WRITELN_TX_X4_TX_CTL0r BCMI_TSCF_GEN3_XGXS_WRITELN_TX_X4_TX_CTL0r
#define WRITEALL_TX_X4_TX_CTL0r BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_X4_TX_CTL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TX_X4_TX_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TX_X4_TX_TS_POINT_CTL
 * BLOCKS:   TX_X4_CONTROL0
 * REGADDR:  0xc116
 * DESC:     Tx Timestamping Point Control Register
 * RESETVAL: 0x8000 (32768)
 * ACCESS:   R/W
 * FIELDS:
 *     TX_SFD_TIMESTAMP_EN Enabling SFD based timestamping of TS transmit packets0: Timestamp TS packets based on SOP byte.1: Timestamp TS packets based on SFD byte.
 *     OSTS_CRC_CALC_MODE CRC calcualtion mode used in one-step timestamping packets0 : Start CRC calculation from the 9th byte of the packet.To be used with IEEE speeds only".1 : Start CRC calculation from the 1st byte of the packet.SOP byte also included for CRC. To be used with Higig2 speeds only and no GMII speeds.tx_sfd_timestamp_en" should be set to 0, when this mode is enabled.2 : Start CRC calculation from the 2nd byte of the packet.SOP byte also excluded for CRC. To be used with Higig2 speeds only and no GMII speeds.tx_sfd_timestamp_en" should be set to 0, when this mode is enabled.3 : Reserved.
 *     TS_INT_EN        Two Step Timestamp Interrupt Enable1'b1 - Interrupt Enabled
 */
#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_POINT_CTLr (0x0000c116 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_POINT_CTLr_SIZE 4

/*
 * This structure should be used to declare and program TX_X4_TX_TS_POINT_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_POINT_CTLr_s {
	uint32_t v[1];
	uint32_t tx_x4_tx_ts_point_ctl[1];
	uint32_t _tx_x4_tx_ts_point_ctl;
} BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_POINT_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_POINT_CTLr_CLR(r) (r).tx_x4_tx_ts_point_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_POINT_CTLr_SET(r,d) (r).tx_x4_tx_ts_point_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_POINT_CTLr_GET(r) (r).tx_x4_tx_ts_point_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_POINT_CTLr_TS_INT_ENf_GET(r) ((((r).tx_x4_tx_ts_point_ctl[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_POINT_CTLr_TS_INT_ENf_SET(r,f) (r).tx_x4_tx_ts_point_ctl[0]=(((r).tx_x4_tx_ts_point_ctl[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_POINT_CTLr_OSTS_CRC_CALC_MODEf_GET(r) ((((r).tx_x4_tx_ts_point_ctl[0]) >> 1) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_POINT_CTLr_OSTS_CRC_CALC_MODEf_SET(r,f) (r).tx_x4_tx_ts_point_ctl[0]=(((r).tx_x4_tx_ts_point_ctl[0] & ~((uint32_t)0x3 << 1)) | ((((uint32_t)f) & 0x3) << 1)) | (3 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_POINT_CTLr_TX_SFD_TIMESTAMP_ENf_GET(r) (((r).tx_x4_tx_ts_point_ctl[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_POINT_CTLr_TX_SFD_TIMESTAMP_ENf_SET(r,f) (r).tx_x4_tx_ts_point_ctl[0]=(((r).tx_x4_tx_ts_point_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TX_X4_TX_TS_POINT_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TX_X4_TX_TS_POINT_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_POINT_CTLr,(_r._tx_x4_tx_ts_point_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TX_X4_TX_TS_POINT_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_POINT_CTLr,(_r._tx_x4_tx_ts_point_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TX_X4_TX_TS_POINT_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_POINT_CTLr,(_r._tx_x4_tx_ts_point_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_TX_X4_TX_TS_POINT_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_POINT_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_tx_ts_point_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TX_X4_TX_TS_POINT_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_POINT_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_tx_ts_point_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_X4_TX_TS_POINT_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_POINT_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_x4_tx_ts_point_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_X4_TX_TS_POINT_CTLr BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_POINT_CTLr
#define TX_X4_TX_TS_POINT_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_POINT_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_POINT_CTLr_t TX_X4_TX_TS_POINT_CTLr_t;
#define TX_X4_TX_TS_POINT_CTLr_CLR BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_POINT_CTLr_CLR
#define TX_X4_TX_TS_POINT_CTLr_SET BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_POINT_CTLr_SET
#define TX_X4_TX_TS_POINT_CTLr_GET BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_POINT_CTLr_GET
#define TX_X4_TX_TS_POINT_CTLr_TS_INT_ENf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_POINT_CTLr_TS_INT_ENf_GET
#define TX_X4_TX_TS_POINT_CTLr_TS_INT_ENf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_POINT_CTLr_TS_INT_ENf_SET
#define TX_X4_TX_TS_POINT_CTLr_OSTS_CRC_CALC_MODEf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_POINT_CTLr_OSTS_CRC_CALC_MODEf_GET
#define TX_X4_TX_TS_POINT_CTLr_OSTS_CRC_CALC_MODEf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_POINT_CTLr_OSTS_CRC_CALC_MODEf_SET
#define TX_X4_TX_TS_POINT_CTLr_TX_SFD_TIMESTAMP_ENf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_POINT_CTLr_TX_SFD_TIMESTAMP_ENf_GET
#define TX_X4_TX_TS_POINT_CTLr_TX_SFD_TIMESTAMP_ENf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_POINT_CTLr_TX_SFD_TIMESTAMP_ENf_SET
#define READ_TX_X4_TX_TS_POINT_CTLr BCMI_TSCF_GEN3_XGXS_READ_TX_X4_TX_TS_POINT_CTLr
#define WRITE_TX_X4_TX_TS_POINT_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_TX_X4_TX_TS_POINT_CTLr
#define MODIFY_TX_X4_TX_TS_POINT_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_TX_X4_TX_TS_POINT_CTLr
#define READLN_TX_X4_TX_TS_POINT_CTLr BCMI_TSCF_GEN3_XGXS_READLN_TX_X4_TX_TS_POINT_CTLr
#define WRITELN_TX_X4_TX_TS_POINT_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_TX_X4_TX_TS_POINT_CTLr
#define WRITEALL_TX_X4_TX_TS_POINT_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_X4_TX_TS_POINT_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_POINT_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TX_X4_ENC_STS0
 * BLOCKS:   TX_X4_STATUS0
 * REGADDR:  0xc120
 * DESC:     Encode Status 0 register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CL49_TXSM_STATE  Transmit SM - current state
 *     CL49_T_TYPE_CODED Transmit SM - current t_type
 *     CL82_IDLE_DELETION_UNDERFLOW Not enough IPG between ||A|| in MLD mode and CL91 single lane mode.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS0r (0x0000c120 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS0r_SIZE 4

/*
 * This structure should be used to declare and program TX_X4_ENC_STS0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS0r_s {
	uint32_t v[1];
	uint32_t tx_x4_enc_sts0[1];
	uint32_t _tx_x4_enc_sts0;
} BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS0r_t;

#define BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS0r_CLR(r) (r).tx_x4_enc_sts0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS0r_SET(r,d) (r).tx_x4_enc_sts0[0] = d
#define BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS0r_GET(r) (r).tx_x4_enc_sts0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS0r_CL82_IDLE_DELETION_UNDERFLOWf_GET(r) ((((r).tx_x4_enc_sts0[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS0r_CL82_IDLE_DELETION_UNDERFLOWf_SET(r,f) (r).tx_x4_enc_sts0[0]=(((r).tx_x4_enc_sts0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS0r_CL49_T_TYPE_CODEDf_GET(r) ((((r).tx_x4_enc_sts0[0]) >> 3) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS0r_CL49_T_TYPE_CODEDf_SET(r,f) (r).tx_x4_enc_sts0[0]=(((r).tx_x4_enc_sts0[0] & ~((uint32_t)0xf << 3)) | ((((uint32_t)f) & 0xf) << 3)) | (15 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS0r_CL49_TXSM_STATEf_GET(r) (((r).tx_x4_enc_sts0[0]) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS0r_CL49_TXSM_STATEf_SET(r,f) (r).tx_x4_enc_sts0[0]=(((r).tx_x4_enc_sts0[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access TX_X4_ENC_STS0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TX_X4_ENC_STS0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS0r,(_r._tx_x4_enc_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TX_X4_ENC_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS0r,(_r._tx_x4_enc_sts0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TX_X4_ENC_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS0r,(_r._tx_x4_enc_sts0))
#define BCMI_TSCF_GEN3_XGXS_READLN_TX_X4_ENC_STS0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_enc_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TX_X4_ENC_STS0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_enc_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_X4_ENC_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_x4_enc_sts0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_X4_ENC_STS0r BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS0r
#define TX_X4_ENC_STS0r_SIZE BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS0r_t TX_X4_ENC_STS0r_t;
#define TX_X4_ENC_STS0r_CLR BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS0r_CLR
#define TX_X4_ENC_STS0r_SET BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS0r_SET
#define TX_X4_ENC_STS0r_GET BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS0r_GET
#define TX_X4_ENC_STS0r_CL82_IDLE_DELETION_UNDERFLOWf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS0r_CL82_IDLE_DELETION_UNDERFLOWf_GET
#define TX_X4_ENC_STS0r_CL82_IDLE_DELETION_UNDERFLOWf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS0r_CL82_IDLE_DELETION_UNDERFLOWf_SET
#define TX_X4_ENC_STS0r_CL49_T_TYPE_CODEDf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS0r_CL49_T_TYPE_CODEDf_GET
#define TX_X4_ENC_STS0r_CL49_T_TYPE_CODEDf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS0r_CL49_T_TYPE_CODEDf_SET
#define TX_X4_ENC_STS0r_CL49_TXSM_STATEf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS0r_CL49_TXSM_STATEf_GET
#define TX_X4_ENC_STS0r_CL49_TXSM_STATEf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS0r_CL49_TXSM_STATEf_SET
#define READ_TX_X4_ENC_STS0r BCMI_TSCF_GEN3_XGXS_READ_TX_X4_ENC_STS0r
#define WRITE_TX_X4_ENC_STS0r BCMI_TSCF_GEN3_XGXS_WRITE_TX_X4_ENC_STS0r
#define MODIFY_TX_X4_ENC_STS0r BCMI_TSCF_GEN3_XGXS_MODIFY_TX_X4_ENC_STS0r
#define READLN_TX_X4_ENC_STS0r BCMI_TSCF_GEN3_XGXS_READLN_TX_X4_ENC_STS0r
#define WRITELN_TX_X4_ENC_STS0r BCMI_TSCF_GEN3_XGXS_WRITELN_TX_X4_ENC_STS0r
#define WRITEALL_TX_X4_ENC_STS0r BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_X4_ENC_STS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TX_X4_ENC_STS1
 * BLOCKS:   TX_X4_STATUS0
 * REGADDR:  0xc121
 * DESC:     Encode Status 1 register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL49_LTXSM_STATE Transmit SM - latched states - latched on entry
 *     CL49_TX_FAULT_DET A latched status bit indicating that the cl49 encoder has a local or remote fault block.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS1r (0x0000c121 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS1r_SIZE 4

/*
 * This structure should be used to declare and program TX_X4_ENC_STS1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS1r_s {
	uint32_t v[1];
	uint32_t tx_x4_enc_sts1[1];
	uint32_t _tx_x4_enc_sts1;
} BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS1r_t;

#define BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS1r_CLR(r) (r).tx_x4_enc_sts1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS1r_SET(r,d) (r).tx_x4_enc_sts1[0] = d
#define BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS1r_GET(r) (r).tx_x4_enc_sts1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS1r_CL49_TX_FAULT_DETf_GET(r) ((((r).tx_x4_enc_sts1[0]) >> 8) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS1r_CL49_TX_FAULT_DETf_SET(r,f) (r).tx_x4_enc_sts1[0]=(((r).tx_x4_enc_sts1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS1r_CL49_LTXSM_STATEf_GET(r) (((r).tx_x4_enc_sts1[0]) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS1r_CL49_LTXSM_STATEf_SET(r,f) (r).tx_x4_enc_sts1[0]=(((r).tx_x4_enc_sts1[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access TX_X4_ENC_STS1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TX_X4_ENC_STS1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS1r,(_r._tx_x4_enc_sts1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TX_X4_ENC_STS1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS1r,(_r._tx_x4_enc_sts1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TX_X4_ENC_STS1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS1r,(_r._tx_x4_enc_sts1))
#define BCMI_TSCF_GEN3_XGXS_READLN_TX_X4_ENC_STS1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_enc_sts1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TX_X4_ENC_STS1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_enc_sts1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_X4_ENC_STS1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_x4_enc_sts1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_X4_ENC_STS1r BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS1r
#define TX_X4_ENC_STS1r_SIZE BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS1r_t TX_X4_ENC_STS1r_t;
#define TX_X4_ENC_STS1r_CLR BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS1r_CLR
#define TX_X4_ENC_STS1r_SET BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS1r_SET
#define TX_X4_ENC_STS1r_GET BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS1r_GET
#define TX_X4_ENC_STS1r_CL49_TX_FAULT_DETf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS1r_CL49_TX_FAULT_DETf_GET
#define TX_X4_ENC_STS1r_CL49_TX_FAULT_DETf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS1r_CL49_TX_FAULT_DETf_SET
#define TX_X4_ENC_STS1r_CL49_LTXSM_STATEf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS1r_CL49_LTXSM_STATEf_GET
#define TX_X4_ENC_STS1r_CL49_LTXSM_STATEf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS1r_CL49_LTXSM_STATEf_SET
#define READ_TX_X4_ENC_STS1r BCMI_TSCF_GEN3_XGXS_READ_TX_X4_ENC_STS1r
#define WRITE_TX_X4_ENC_STS1r BCMI_TSCF_GEN3_XGXS_WRITE_TX_X4_ENC_STS1r
#define MODIFY_TX_X4_ENC_STS1r BCMI_TSCF_GEN3_XGXS_MODIFY_TX_X4_ENC_STS1r
#define READLN_TX_X4_ENC_STS1r BCMI_TSCF_GEN3_XGXS_READLN_TX_X4_ENC_STS1r
#define WRITELN_TX_X4_ENC_STS1r BCMI_TSCF_GEN3_XGXS_WRITELN_TX_X4_ENC_STS1r
#define WRITEALL_TX_X4_ENC_STS1r BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_X4_ENC_STS1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TX_X4_ENC_STS1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TX_X4_PCS_STS_LIVE
 * BLOCKS:   TX_X4_STATUS0
 * REGADDR:  0xc122
 * DESC:     Live Status of PCS Information
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TX_LPI_RECEIVED  PER PORT: Live LPI (LOW POWER IDLE ) indicator
 *     TX_LINK_INTERRUPT PER PORT: Live LI (LINK INTERRUPT) indicator
 *     TX_REMOTE_FAULT  PER PORT: Live RF (REMOTE FAULT ) indicator
 *     TX_LOCAL_FAULT   PER PORT: Live LF (LOCAL FAULT ) indicator
 */
#define BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LIVEr (0x0000c122 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LIVEr_SIZE 4

/*
 * This structure should be used to declare and program TX_X4_PCS_STS_LIVE.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LIVEr_s {
	uint32_t v[1];
	uint32_t tx_x4_pcs_sts_live[1];
	uint32_t _tx_x4_pcs_sts_live;
} BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LIVEr_t;

#define BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LIVEr_CLR(r) (r).tx_x4_pcs_sts_live[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LIVEr_SET(r,d) (r).tx_x4_pcs_sts_live[0] = d
#define BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LIVEr_GET(r) (r).tx_x4_pcs_sts_live[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LIVEr_TX_LOCAL_FAULTf_GET(r) ((((r).tx_x4_pcs_sts_live[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LIVEr_TX_LOCAL_FAULTf_SET(r,f) (r).tx_x4_pcs_sts_live[0]=(((r).tx_x4_pcs_sts_live[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LIVEr_TX_REMOTE_FAULTf_GET(r) ((((r).tx_x4_pcs_sts_live[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LIVEr_TX_REMOTE_FAULTf_SET(r,f) (r).tx_x4_pcs_sts_live[0]=(((r).tx_x4_pcs_sts_live[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LIVEr_TX_LINK_INTERRUPTf_GET(r) ((((r).tx_x4_pcs_sts_live[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LIVEr_TX_LINK_INTERRUPTf_SET(r,f) (r).tx_x4_pcs_sts_live[0]=(((r).tx_x4_pcs_sts_live[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LIVEr_TX_LPI_RECEIVEDf_GET(r) (((r).tx_x4_pcs_sts_live[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LIVEr_TX_LPI_RECEIVEDf_SET(r,f) (r).tx_x4_pcs_sts_live[0]=(((r).tx_x4_pcs_sts_live[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TX_X4_PCS_STS_LIVE.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TX_X4_PCS_STS_LIVEr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LIVEr,(_r._tx_x4_pcs_sts_live))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TX_X4_PCS_STS_LIVEr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LIVEr,(_r._tx_x4_pcs_sts_live)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TX_X4_PCS_STS_LIVEr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LIVEr,(_r._tx_x4_pcs_sts_live))
#define BCMI_TSCF_GEN3_XGXS_READLN_TX_X4_PCS_STS_LIVEr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LIVEr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_pcs_sts_live))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TX_X4_PCS_STS_LIVEr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LIVEr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_pcs_sts_live))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_X4_PCS_STS_LIVEr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LIVEr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_x4_pcs_sts_live))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_X4_PCS_STS_LIVEr BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LIVEr
#define TX_X4_PCS_STS_LIVEr_SIZE BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LIVEr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LIVEr_t TX_X4_PCS_STS_LIVEr_t;
#define TX_X4_PCS_STS_LIVEr_CLR BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LIVEr_CLR
#define TX_X4_PCS_STS_LIVEr_SET BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LIVEr_SET
#define TX_X4_PCS_STS_LIVEr_GET BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LIVEr_GET
#define TX_X4_PCS_STS_LIVEr_TX_LOCAL_FAULTf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LIVEr_TX_LOCAL_FAULTf_GET
#define TX_X4_PCS_STS_LIVEr_TX_LOCAL_FAULTf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LIVEr_TX_LOCAL_FAULTf_SET
#define TX_X4_PCS_STS_LIVEr_TX_REMOTE_FAULTf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LIVEr_TX_REMOTE_FAULTf_GET
#define TX_X4_PCS_STS_LIVEr_TX_REMOTE_FAULTf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LIVEr_TX_REMOTE_FAULTf_SET
#define TX_X4_PCS_STS_LIVEr_TX_LINK_INTERRUPTf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LIVEr_TX_LINK_INTERRUPTf_GET
#define TX_X4_PCS_STS_LIVEr_TX_LINK_INTERRUPTf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LIVEr_TX_LINK_INTERRUPTf_SET
#define TX_X4_PCS_STS_LIVEr_TX_LPI_RECEIVEDf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LIVEr_TX_LPI_RECEIVEDf_GET
#define TX_X4_PCS_STS_LIVEr_TX_LPI_RECEIVEDf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LIVEr_TX_LPI_RECEIVEDf_SET
#define READ_TX_X4_PCS_STS_LIVEr BCMI_TSCF_GEN3_XGXS_READ_TX_X4_PCS_STS_LIVEr
#define WRITE_TX_X4_PCS_STS_LIVEr BCMI_TSCF_GEN3_XGXS_WRITE_TX_X4_PCS_STS_LIVEr
#define MODIFY_TX_X4_PCS_STS_LIVEr BCMI_TSCF_GEN3_XGXS_MODIFY_TX_X4_PCS_STS_LIVEr
#define READLN_TX_X4_PCS_STS_LIVEr BCMI_TSCF_GEN3_XGXS_READLN_TX_X4_PCS_STS_LIVEr
#define WRITELN_TX_X4_PCS_STS_LIVEr BCMI_TSCF_GEN3_XGXS_WRITELN_TX_X4_PCS_STS_LIVEr
#define WRITEALL_TX_X4_PCS_STS_LIVEr BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_X4_PCS_STS_LIVEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LIVEr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TX_X4_PCS_STS_LATCH
 * BLOCKS:   TX_X4_STATUS0
 * REGADDR:  0xc123
 * DESC:     Latched Status of PCS Information
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LPI_RECEIVED_LH  PER PORT: Low Power Indicator (LPI) has transitioned high since last read.Clear on read
 *     REMOTE_FAULT_LH  PER PORT: Remote Fault (RF)  has transitioned high since last read.Clear on read
 *     LOCAL_FAULT_LH   PER PORT: Local Fault (LF) indicator has transitioned high since last read.Clear on read
 *     LINK_INTERRUPT_LH PER PORT: LI (LINK INTERRUPT) indicator has transitioned high since last read.Clear on read
 *     TWO_STEP_TS_FIFO_OVERFLOW_LH PER PORT: Indicates 1588 Two-step Timestamp FIFO Overflow has occured,since last read on this register. Clear on read
 */
#define BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LATCHr (0x0000c123 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LATCHr_SIZE 4

/*
 * This structure should be used to declare and program TX_X4_PCS_STS_LATCH.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LATCHr_s {
	uint32_t v[1];
	uint32_t tx_x4_pcs_sts_latch[1];
	uint32_t _tx_x4_pcs_sts_latch;
} BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LATCHr_t;

#define BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LATCHr_CLR(r) (r).tx_x4_pcs_sts_latch[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LATCHr_SET(r,d) (r).tx_x4_pcs_sts_latch[0] = d
#define BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LATCHr_GET(r) (r).tx_x4_pcs_sts_latch[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LATCHr_TWO_STEP_TS_FIFO_OVERFLOW_LHf_GET(r) ((((r).tx_x4_pcs_sts_latch[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LATCHr_TWO_STEP_TS_FIFO_OVERFLOW_LHf_SET(r,f) (r).tx_x4_pcs_sts_latch[0]=(((r).tx_x4_pcs_sts_latch[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LATCHr_LINK_INTERRUPT_LHf_GET(r) ((((r).tx_x4_pcs_sts_latch[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LATCHr_LINK_INTERRUPT_LHf_SET(r,f) (r).tx_x4_pcs_sts_latch[0]=(((r).tx_x4_pcs_sts_latch[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LATCHr_LOCAL_FAULT_LHf_GET(r) ((((r).tx_x4_pcs_sts_latch[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LATCHr_LOCAL_FAULT_LHf_SET(r,f) (r).tx_x4_pcs_sts_latch[0]=(((r).tx_x4_pcs_sts_latch[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LATCHr_REMOTE_FAULT_LHf_GET(r) ((((r).tx_x4_pcs_sts_latch[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LATCHr_REMOTE_FAULT_LHf_SET(r,f) (r).tx_x4_pcs_sts_latch[0]=(((r).tx_x4_pcs_sts_latch[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LATCHr_LPI_RECEIVED_LHf_GET(r) (((r).tx_x4_pcs_sts_latch[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LATCHr_LPI_RECEIVED_LHf_SET(r,f) (r).tx_x4_pcs_sts_latch[0]=(((r).tx_x4_pcs_sts_latch[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TX_X4_PCS_STS_LATCH.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TX_X4_PCS_STS_LATCHr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LATCHr,(_r._tx_x4_pcs_sts_latch))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TX_X4_PCS_STS_LATCHr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LATCHr,(_r._tx_x4_pcs_sts_latch)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TX_X4_PCS_STS_LATCHr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LATCHr,(_r._tx_x4_pcs_sts_latch))
#define BCMI_TSCF_GEN3_XGXS_READLN_TX_X4_PCS_STS_LATCHr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LATCHr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_pcs_sts_latch))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TX_X4_PCS_STS_LATCHr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LATCHr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_pcs_sts_latch))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_X4_PCS_STS_LATCHr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LATCHr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_x4_pcs_sts_latch))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_X4_PCS_STS_LATCHr BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LATCHr
#define TX_X4_PCS_STS_LATCHr_SIZE BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LATCHr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LATCHr_t TX_X4_PCS_STS_LATCHr_t;
#define TX_X4_PCS_STS_LATCHr_CLR BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LATCHr_CLR
#define TX_X4_PCS_STS_LATCHr_SET BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LATCHr_SET
#define TX_X4_PCS_STS_LATCHr_GET BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LATCHr_GET
#define TX_X4_PCS_STS_LATCHr_TWO_STEP_TS_FIFO_OVERFLOW_LHf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LATCHr_TWO_STEP_TS_FIFO_OVERFLOW_LHf_GET
#define TX_X4_PCS_STS_LATCHr_TWO_STEP_TS_FIFO_OVERFLOW_LHf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LATCHr_TWO_STEP_TS_FIFO_OVERFLOW_LHf_SET
#define TX_X4_PCS_STS_LATCHr_LINK_INTERRUPT_LHf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LATCHr_LINK_INTERRUPT_LHf_GET
#define TX_X4_PCS_STS_LATCHr_LINK_INTERRUPT_LHf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LATCHr_LINK_INTERRUPT_LHf_SET
#define TX_X4_PCS_STS_LATCHr_LOCAL_FAULT_LHf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LATCHr_LOCAL_FAULT_LHf_GET
#define TX_X4_PCS_STS_LATCHr_LOCAL_FAULT_LHf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LATCHr_LOCAL_FAULT_LHf_SET
#define TX_X4_PCS_STS_LATCHr_REMOTE_FAULT_LHf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LATCHr_REMOTE_FAULT_LHf_GET
#define TX_X4_PCS_STS_LATCHr_REMOTE_FAULT_LHf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LATCHr_REMOTE_FAULT_LHf_SET
#define TX_X4_PCS_STS_LATCHr_LPI_RECEIVED_LHf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LATCHr_LPI_RECEIVED_LHf_GET
#define TX_X4_PCS_STS_LATCHr_LPI_RECEIVED_LHf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LATCHr_LPI_RECEIVED_LHf_SET
#define READ_TX_X4_PCS_STS_LATCHr BCMI_TSCF_GEN3_XGXS_READ_TX_X4_PCS_STS_LATCHr
#define WRITE_TX_X4_PCS_STS_LATCHr BCMI_TSCF_GEN3_XGXS_WRITE_TX_X4_PCS_STS_LATCHr
#define MODIFY_TX_X4_PCS_STS_LATCHr BCMI_TSCF_GEN3_XGXS_MODIFY_TX_X4_PCS_STS_LATCHr
#define READLN_TX_X4_PCS_STS_LATCHr BCMI_TSCF_GEN3_XGXS_READLN_TX_X4_PCS_STS_LATCHr
#define WRITELN_TX_X4_PCS_STS_LATCHr BCMI_TSCF_GEN3_XGXS_WRITELN_TX_X4_PCS_STS_LATCHr
#define WRITEALL_TX_X4_PCS_STS_LATCHr BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_X4_PCS_STS_LATCHr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TX_X4_PCS_STS_LATCHr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TX_X4_PMA_STS
 * BLOCKS:   TX_X4_STATUS0
 * REGADDR:  0xc124
 * DESC:     PMA overflow underflow status
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     T_TC_OUT_OVERFLOW Per logical lane t_tc_out fifo overflow status.
 *     T_TC_OUT_UNDERFLOW Per logical lane t_tc_out fifo underflow status.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_X4_PMA_STSr (0x0000c124 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TX_X4_PMA_STSr_SIZE 4

/*
 * This structure should be used to declare and program TX_X4_PMA_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TX_X4_PMA_STSr_s {
	uint32_t v[1];
	uint32_t tx_x4_pma_sts[1];
	uint32_t _tx_x4_pma_sts;
} BCMI_TSCF_GEN3_XGXS_TX_X4_PMA_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_TX_X4_PMA_STSr_CLR(r) (r).tx_x4_pma_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TX_X4_PMA_STSr_SET(r,d) (r).tx_x4_pma_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_TX_X4_PMA_STSr_GET(r) (r).tx_x4_pma_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_X4_PMA_STSr_T_TC_OUT_UNDERFLOWf_GET(r) ((((r).tx_x4_pma_sts[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_PMA_STSr_T_TC_OUT_UNDERFLOWf_SET(r,f) (r).tx_x4_pma_sts[0]=(((r).tx_x4_pma_sts[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_TX_X4_PMA_STSr_T_TC_OUT_OVERFLOWf_GET(r) ((((r).tx_x4_pma_sts[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_PMA_STSr_T_TC_OUT_OVERFLOWf_SET(r,f) (r).tx_x4_pma_sts[0]=(((r).tx_x4_pma_sts[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))

/*
 * These macros can be used to access TX_X4_PMA_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TX_X4_PMA_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_PMA_STSr,(_r._tx_x4_pma_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TX_X4_PMA_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_PMA_STSr,(_r._tx_x4_pma_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TX_X4_PMA_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_PMA_STSr,(_r._tx_x4_pma_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_TX_X4_PMA_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_PMA_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_pma_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TX_X4_PMA_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_PMA_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_pma_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_X4_PMA_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_PMA_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_x4_pma_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_X4_PMA_STSr BCMI_TSCF_GEN3_XGXS_TX_X4_PMA_STSr
#define TX_X4_PMA_STSr_SIZE BCMI_TSCF_GEN3_XGXS_TX_X4_PMA_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TX_X4_PMA_STSr_t TX_X4_PMA_STSr_t;
#define TX_X4_PMA_STSr_CLR BCMI_TSCF_GEN3_XGXS_TX_X4_PMA_STSr_CLR
#define TX_X4_PMA_STSr_SET BCMI_TSCF_GEN3_XGXS_TX_X4_PMA_STSr_SET
#define TX_X4_PMA_STSr_GET BCMI_TSCF_GEN3_XGXS_TX_X4_PMA_STSr_GET
#define TX_X4_PMA_STSr_T_TC_OUT_UNDERFLOWf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_PMA_STSr_T_TC_OUT_UNDERFLOWf_GET
#define TX_X4_PMA_STSr_T_TC_OUT_UNDERFLOWf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_PMA_STSr_T_TC_OUT_UNDERFLOWf_SET
#define TX_X4_PMA_STSr_T_TC_OUT_OVERFLOWf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_PMA_STSr_T_TC_OUT_OVERFLOWf_GET
#define TX_X4_PMA_STSr_T_TC_OUT_OVERFLOWf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_PMA_STSr_T_TC_OUT_OVERFLOWf_SET
#define READ_TX_X4_PMA_STSr BCMI_TSCF_GEN3_XGXS_READ_TX_X4_PMA_STSr
#define WRITE_TX_X4_PMA_STSr BCMI_TSCF_GEN3_XGXS_WRITE_TX_X4_PMA_STSr
#define MODIFY_TX_X4_PMA_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_TX_X4_PMA_STSr
#define READLN_TX_X4_PMA_STSr BCMI_TSCF_GEN3_XGXS_READLN_TX_X4_PMA_STSr
#define WRITELN_TX_X4_PMA_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_TX_X4_PMA_STSr
#define WRITEALL_TX_X4_PMA_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_X4_PMA_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TX_X4_PMA_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TX_X4_TX_1588_TIMESTAMP_STS
 * BLOCKS:   TX_X4_STATUS0
 * REGADDR:  0xc125
 * DESC:     Transmit 1588 Timestamp Status Register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TS_SUB_NANO_FIELD Sub-nano second value of the top most two-step timestamp fifo entry indicated with 62.5ps of accuracyts_entry_valid bit qualifies the timestamp
 *     TS_ENTRY_VALID   valid two-step timestamp entry availablilty indicator
 */
#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_STSr (0x0000c125 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_STSr_SIZE 4

/*
 * This structure should be used to declare and program TX_X4_TX_1588_TIMESTAMP_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_STSr_s {
	uint32_t v[1];
	uint32_t tx_x4_tx_1588_timestamp_sts[1];
	uint32_t _tx_x4_tx_1588_timestamp_sts;
} BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_STSr_CLR(r) (r).tx_x4_tx_1588_timestamp_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_STSr_SET(r,d) (r).tx_x4_tx_1588_timestamp_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_STSr_GET(r) (r).tx_x4_tx_1588_timestamp_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_STSr_TS_ENTRY_VALIDf_GET(r) ((((r).tx_x4_tx_1588_timestamp_sts[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_STSr_TS_ENTRY_VALIDf_SET(r,f) (r).tx_x4_tx_1588_timestamp_sts[0]=(((r).tx_x4_tx_1588_timestamp_sts[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_STSr_TS_SUB_NANO_FIELDf_GET(r) (((r).tx_x4_tx_1588_timestamp_sts[0]) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_STSr_TS_SUB_NANO_FIELDf_SET(r,f) (r).tx_x4_tx_1588_timestamp_sts[0]=(((r).tx_x4_tx_1588_timestamp_sts[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access TX_X4_TX_1588_TIMESTAMP_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TX_X4_TX_1588_TIMESTAMP_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_STSr,(_r._tx_x4_tx_1588_timestamp_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TX_X4_TX_1588_TIMESTAMP_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_STSr,(_r._tx_x4_tx_1588_timestamp_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TX_X4_TX_1588_TIMESTAMP_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_STSr,(_r._tx_x4_tx_1588_timestamp_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_TX_X4_TX_1588_TIMESTAMP_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_tx_1588_timestamp_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TX_X4_TX_1588_TIMESTAMP_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_tx_1588_timestamp_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_X4_TX_1588_TIMESTAMP_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_x4_tx_1588_timestamp_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_X4_TX_1588_TIMESTAMP_STSr BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_STSr
#define TX_X4_TX_1588_TIMESTAMP_STSr_SIZE BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_STSr_t TX_X4_TX_1588_TIMESTAMP_STSr_t;
#define TX_X4_TX_1588_TIMESTAMP_STSr_CLR BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_STSr_CLR
#define TX_X4_TX_1588_TIMESTAMP_STSr_SET BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_STSr_SET
#define TX_X4_TX_1588_TIMESTAMP_STSr_GET BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_STSr_GET
#define TX_X4_TX_1588_TIMESTAMP_STSr_TS_ENTRY_VALIDf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_STSr_TS_ENTRY_VALIDf_GET
#define TX_X4_TX_1588_TIMESTAMP_STSr_TS_ENTRY_VALIDf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_STSr_TS_ENTRY_VALIDf_SET
#define TX_X4_TX_1588_TIMESTAMP_STSr_TS_SUB_NANO_FIELDf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_STSr_TS_SUB_NANO_FIELDf_GET
#define TX_X4_TX_1588_TIMESTAMP_STSr_TS_SUB_NANO_FIELDf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_STSr_TS_SUB_NANO_FIELDf_SET
#define READ_TX_X4_TX_1588_TIMESTAMP_STSr BCMI_TSCF_GEN3_XGXS_READ_TX_X4_TX_1588_TIMESTAMP_STSr
#define WRITE_TX_X4_TX_1588_TIMESTAMP_STSr BCMI_TSCF_GEN3_XGXS_WRITE_TX_X4_TX_1588_TIMESTAMP_STSr
#define MODIFY_TX_X4_TX_1588_TIMESTAMP_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_TX_X4_TX_1588_TIMESTAMP_STSr
#define READLN_TX_X4_TX_1588_TIMESTAMP_STSr BCMI_TSCF_GEN3_XGXS_READLN_TX_X4_TX_1588_TIMESTAMP_STSr
#define WRITELN_TX_X4_TX_1588_TIMESTAMP_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_TX_X4_TX_1588_TIMESTAMP_STSr
#define WRITEALL_TX_X4_TX_1588_TIMESTAMP_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_X4_TX_1588_TIMESTAMP_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TX_X4_TX_1588_TIMESTAMP_HI
 * BLOCKS:   TX_X4_STATUS0
 * REGADDR:  0xc126
 * DESC:     Transmit 1588 timestamp value Register(Upper 16-bits)
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TS_VALUE_HI      Upper 16-bits of the two-step timestamp from the top entry of timestamp fifoIf ts_entry_valid is read 1, this register should be read just once to get accurate timestamp information
 */
#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_HIr (0x0000c126 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_HIr_SIZE 4

/*
 * This structure should be used to declare and program TX_X4_TX_1588_TIMESTAMP_HI.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_HIr_s {
	uint32_t v[1];
	uint32_t tx_x4_tx_1588_timestamp_hi[1];
	uint32_t _tx_x4_tx_1588_timestamp_hi;
} BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_HIr_t;

#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_HIr_CLR(r) (r).tx_x4_tx_1588_timestamp_hi[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_HIr_SET(r,d) (r).tx_x4_tx_1588_timestamp_hi[0] = d
#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_HIr_GET(r) (r).tx_x4_tx_1588_timestamp_hi[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_HIr_TS_VALUE_HIf_GET(r) (((r).tx_x4_tx_1588_timestamp_hi[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_HIr_TS_VALUE_HIf_SET(r,f) (r).tx_x4_tx_1588_timestamp_hi[0]=(((r).tx_x4_tx_1588_timestamp_hi[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access TX_X4_TX_1588_TIMESTAMP_HI.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TX_X4_TX_1588_TIMESTAMP_HIr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_HIr,(_r._tx_x4_tx_1588_timestamp_hi))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TX_X4_TX_1588_TIMESTAMP_HIr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_HIr,(_r._tx_x4_tx_1588_timestamp_hi)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TX_X4_TX_1588_TIMESTAMP_HIr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_HIr,(_r._tx_x4_tx_1588_timestamp_hi))
#define BCMI_TSCF_GEN3_XGXS_READLN_TX_X4_TX_1588_TIMESTAMP_HIr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_HIr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_tx_1588_timestamp_hi))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TX_X4_TX_1588_TIMESTAMP_HIr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_HIr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_tx_1588_timestamp_hi))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_X4_TX_1588_TIMESTAMP_HIr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_HIr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_x4_tx_1588_timestamp_hi))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_X4_TX_1588_TIMESTAMP_HIr BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_HIr
#define TX_X4_TX_1588_TIMESTAMP_HIr_SIZE BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_HIr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_HIr_t TX_X4_TX_1588_TIMESTAMP_HIr_t;
#define TX_X4_TX_1588_TIMESTAMP_HIr_CLR BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_HIr_CLR
#define TX_X4_TX_1588_TIMESTAMP_HIr_SET BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_HIr_SET
#define TX_X4_TX_1588_TIMESTAMP_HIr_GET BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_HIr_GET
#define TX_X4_TX_1588_TIMESTAMP_HIr_TS_VALUE_HIf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_HIr_TS_VALUE_HIf_GET
#define TX_X4_TX_1588_TIMESTAMP_HIr_TS_VALUE_HIf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_HIr_TS_VALUE_HIf_SET
#define READ_TX_X4_TX_1588_TIMESTAMP_HIr BCMI_TSCF_GEN3_XGXS_READ_TX_X4_TX_1588_TIMESTAMP_HIr
#define WRITE_TX_X4_TX_1588_TIMESTAMP_HIr BCMI_TSCF_GEN3_XGXS_WRITE_TX_X4_TX_1588_TIMESTAMP_HIr
#define MODIFY_TX_X4_TX_1588_TIMESTAMP_HIr BCMI_TSCF_GEN3_XGXS_MODIFY_TX_X4_TX_1588_TIMESTAMP_HIr
#define READLN_TX_X4_TX_1588_TIMESTAMP_HIr BCMI_TSCF_GEN3_XGXS_READLN_TX_X4_TX_1588_TIMESTAMP_HIr
#define WRITELN_TX_X4_TX_1588_TIMESTAMP_HIr BCMI_TSCF_GEN3_XGXS_WRITELN_TX_X4_TX_1588_TIMESTAMP_HIr
#define WRITEALL_TX_X4_TX_1588_TIMESTAMP_HIr BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_X4_TX_1588_TIMESTAMP_HIr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_HIr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TX_X4_TX_1588_TIMESTAMP_LO
 * BLOCKS:   TX_X4_STATUS0
 * REGADDR:  0xc127
 * DESC:     Transmit 1588 timestamp value Register(Lower 16-bits)
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TS_VALUE_LO      Lower 16-bits of the two-step timestamp from the top entry of timestamp fifoIf ts_entry_valid is read 1, this register should be read just once to get accurate timestamp information
 */
#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_LOr (0x0000c127 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_LOr_SIZE 4

/*
 * This structure should be used to declare and program TX_X4_TX_1588_TIMESTAMP_LO.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_LOr_s {
	uint32_t v[1];
	uint32_t tx_x4_tx_1588_timestamp_lo[1];
	uint32_t _tx_x4_tx_1588_timestamp_lo;
} BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_LOr_t;

#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_LOr_CLR(r) (r).tx_x4_tx_1588_timestamp_lo[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_LOr_SET(r,d) (r).tx_x4_tx_1588_timestamp_lo[0] = d
#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_LOr_GET(r) (r).tx_x4_tx_1588_timestamp_lo[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_LOr_TS_VALUE_LOf_GET(r) (((r).tx_x4_tx_1588_timestamp_lo[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_LOr_TS_VALUE_LOf_SET(r,f) (r).tx_x4_tx_1588_timestamp_lo[0]=(((r).tx_x4_tx_1588_timestamp_lo[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access TX_X4_TX_1588_TIMESTAMP_LO.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TX_X4_TX_1588_TIMESTAMP_LOr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_LOr,(_r._tx_x4_tx_1588_timestamp_lo))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TX_X4_TX_1588_TIMESTAMP_LOr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_LOr,(_r._tx_x4_tx_1588_timestamp_lo)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TX_X4_TX_1588_TIMESTAMP_LOr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_LOr,(_r._tx_x4_tx_1588_timestamp_lo))
#define BCMI_TSCF_GEN3_XGXS_READLN_TX_X4_TX_1588_TIMESTAMP_LOr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_LOr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_tx_1588_timestamp_lo))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TX_X4_TX_1588_TIMESTAMP_LOr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_LOr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_tx_1588_timestamp_lo))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_X4_TX_1588_TIMESTAMP_LOr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_LOr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_x4_tx_1588_timestamp_lo))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_X4_TX_1588_TIMESTAMP_LOr BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_LOr
#define TX_X4_TX_1588_TIMESTAMP_LOr_SIZE BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_LOr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_LOr_t TX_X4_TX_1588_TIMESTAMP_LOr_t;
#define TX_X4_TX_1588_TIMESTAMP_LOr_CLR BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_LOr_CLR
#define TX_X4_TX_1588_TIMESTAMP_LOr_SET BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_LOr_SET
#define TX_X4_TX_1588_TIMESTAMP_LOr_GET BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_LOr_GET
#define TX_X4_TX_1588_TIMESTAMP_LOr_TS_VALUE_LOf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_LOr_TS_VALUE_LOf_GET
#define TX_X4_TX_1588_TIMESTAMP_LOr_TS_VALUE_LOf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_LOr_TS_VALUE_LOf_SET
#define READ_TX_X4_TX_1588_TIMESTAMP_LOr BCMI_TSCF_GEN3_XGXS_READ_TX_X4_TX_1588_TIMESTAMP_LOr
#define WRITE_TX_X4_TX_1588_TIMESTAMP_LOr BCMI_TSCF_GEN3_XGXS_WRITE_TX_X4_TX_1588_TIMESTAMP_LOr
#define MODIFY_TX_X4_TX_1588_TIMESTAMP_LOr BCMI_TSCF_GEN3_XGXS_MODIFY_TX_X4_TX_1588_TIMESTAMP_LOr
#define READLN_TX_X4_TX_1588_TIMESTAMP_LOr BCMI_TSCF_GEN3_XGXS_READLN_TX_X4_TX_1588_TIMESTAMP_LOr
#define WRITELN_TX_X4_TX_1588_TIMESTAMP_LOr BCMI_TSCF_GEN3_XGXS_WRITELN_TX_X4_TX_1588_TIMESTAMP_LOr
#define WRITEALL_TX_X4_TX_1588_TIMESTAMP_LOr BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_X4_TX_1588_TIMESTAMP_LOr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TX_X4_TX_1588_TIMESTAMP_LOr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TX_X4_TX_TS_SEQ_ID
 * BLOCKS:   TX_X4_STATUS0
 * REGADDR:  0xc128
 * DESC:     1588 Timestamp packet Sequence ID value Register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TS_SEQUENCE_ID   The sequence id corresponding to the top-most entry in the two-step timestamp fifoIf ts_entry_valid is read 1, this register should be read just once to get accurate sequence id information
 */
#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_SEQ_IDr (0x0000c128 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_SEQ_IDr_SIZE 4

/*
 * This structure should be used to declare and program TX_X4_TX_TS_SEQ_ID.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_SEQ_IDr_s {
	uint32_t v[1];
	uint32_t tx_x4_tx_ts_seq_id[1];
	uint32_t _tx_x4_tx_ts_seq_id;
} BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_SEQ_IDr_t;

#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_SEQ_IDr_CLR(r) (r).tx_x4_tx_ts_seq_id[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_SEQ_IDr_SET(r,d) (r).tx_x4_tx_ts_seq_id[0] = d
#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_SEQ_IDr_GET(r) (r).tx_x4_tx_ts_seq_id[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_SEQ_IDr_TS_SEQUENCE_IDf_GET(r) (((r).tx_x4_tx_ts_seq_id[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_SEQ_IDr_TS_SEQUENCE_IDf_SET(r,f) (r).tx_x4_tx_ts_seq_id[0]=(((r).tx_x4_tx_ts_seq_id[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access TX_X4_TX_TS_SEQ_ID.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TX_X4_TX_TS_SEQ_IDr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_SEQ_IDr,(_r._tx_x4_tx_ts_seq_id))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TX_X4_TX_TS_SEQ_IDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_SEQ_IDr,(_r._tx_x4_tx_ts_seq_id)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TX_X4_TX_TS_SEQ_IDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_SEQ_IDr,(_r._tx_x4_tx_ts_seq_id))
#define BCMI_TSCF_GEN3_XGXS_READLN_TX_X4_TX_TS_SEQ_IDr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_SEQ_IDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_tx_ts_seq_id))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TX_X4_TX_TS_SEQ_IDr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_SEQ_IDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_tx_ts_seq_id))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_X4_TX_TS_SEQ_IDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_SEQ_IDr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_x4_tx_ts_seq_id))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_X4_TX_TS_SEQ_IDr BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_SEQ_IDr
#define TX_X4_TX_TS_SEQ_IDr_SIZE BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_SEQ_IDr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_SEQ_IDr_t TX_X4_TX_TS_SEQ_IDr_t;
#define TX_X4_TX_TS_SEQ_IDr_CLR BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_SEQ_IDr_CLR
#define TX_X4_TX_TS_SEQ_IDr_SET BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_SEQ_IDr_SET
#define TX_X4_TX_TS_SEQ_IDr_GET BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_SEQ_IDr_GET
#define TX_X4_TX_TS_SEQ_IDr_TS_SEQUENCE_IDf_GET BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_SEQ_IDr_TS_SEQUENCE_IDf_GET
#define TX_X4_TX_TS_SEQ_IDr_TS_SEQUENCE_IDf_SET BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_SEQ_IDr_TS_SEQUENCE_IDf_SET
#define READ_TX_X4_TX_TS_SEQ_IDr BCMI_TSCF_GEN3_XGXS_READ_TX_X4_TX_TS_SEQ_IDr
#define WRITE_TX_X4_TX_TS_SEQ_IDr BCMI_TSCF_GEN3_XGXS_WRITE_TX_X4_TX_TS_SEQ_IDr
#define MODIFY_TX_X4_TX_TS_SEQ_IDr BCMI_TSCF_GEN3_XGXS_MODIFY_TX_X4_TX_TS_SEQ_IDr
#define READLN_TX_X4_TX_TS_SEQ_IDr BCMI_TSCF_GEN3_XGXS_READLN_TX_X4_TX_TS_SEQ_IDr
#define WRITELN_TX_X4_TX_TS_SEQ_IDr BCMI_TSCF_GEN3_XGXS_WRITELN_TX_X4_TX_TS_SEQ_IDr
#define WRITEALL_TX_X4_TX_TS_SEQ_IDr BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_X4_TX_TS_SEQ_IDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TX_X4_TX_TS_SEQ_IDr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_PCS_CTL0
 * BLOCKS:   RX_X4_CONTROL0
 * REGADDR:  0xc130
 * DESC:     pcs control 0 register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LPI_ENABLE       If off (0), LPIs are converted to IDLEsNOTE: LPI_ENABLE APPLIES TO BOTH TX AND RX pipelines
 *     FEC_ENABLE       Indicates whether cl74 FEC is enabled or not
 *     CL91_FEC_MODE    
 *     BLOCK_NON_FC_BLK_TYPES Convert the following block types to errors - 0x87, 0x99, 0xAA, 0xCC, 0xD2, 0xE1
 *     DEC_FSM_MODE     
 *     DESKEW_MODE      
 *     DEC_TL_MODE      
 *     DESCR_MODE       
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_CTL0r (0x0000c130 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_PCS_CTL0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_CTL0r_s {
	uint32_t v[1];
	uint32_t rx_x4_pcs_ctl0[1];
	uint32_t _rx_x4_pcs_ctl0;
} BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_CTL0r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_CTL0r_CLR(r) (r).rx_x4_pcs_ctl0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_CTL0r_SET(r,d) (r).rx_x4_pcs_ctl0[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_CTL0r_GET(r) (r).rx_x4_pcs_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_CTL0r_DESCR_MODEf_GET(r) ((((r).rx_x4_pcs_ctl0[0]) >> 14) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_CTL0r_DESCR_MODEf_SET(r,f) (r).rx_x4_pcs_ctl0[0]=(((r).rx_x4_pcs_ctl0[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_CTL0r_DEC_TL_MODEf_GET(r) ((((r).rx_x4_pcs_ctl0[0]) >> 12) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_CTL0r_DEC_TL_MODEf_SET(r,f) (r).rx_x4_pcs_ctl0[0]=(((r).rx_x4_pcs_ctl0[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12)) | (3 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_CTL0r_DESKEW_MODEf_GET(r) ((((r).rx_x4_pcs_ctl0[0]) >> 8) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_CTL0r_DESKEW_MODEf_SET(r,f) (r).rx_x4_pcs_ctl0[0]=(((r).rx_x4_pcs_ctl0[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_CTL0r_DEC_FSM_MODEf_GET(r) ((((r).rx_x4_pcs_ctl0[0]) >> 6) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_CTL0r_DEC_FSM_MODEf_SET(r,f) (r).rx_x4_pcs_ctl0[0]=(((r).rx_x4_pcs_ctl0[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6)) | (3 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_CTL0r_BLOCK_NON_FC_BLK_TYPESf_GET(r) ((((r).rx_x4_pcs_ctl0[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_CTL0r_BLOCK_NON_FC_BLK_TYPESf_SET(r,f) (r).rx_x4_pcs_ctl0[0]=(((r).rx_x4_pcs_ctl0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_CTL0r_CL91_FEC_MODEf_GET(r) ((((r).rx_x4_pcs_ctl0[0]) >> 2) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_CTL0r_CL91_FEC_MODEf_SET(r,f) (r).rx_x4_pcs_ctl0[0]=(((r).rx_x4_pcs_ctl0[0] & ~((uint32_t)0x7 << 2)) | ((((uint32_t)f) & 0x7) << 2)) | (7 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_CTL0r_FEC_ENABLEf_GET(r) ((((r).rx_x4_pcs_ctl0[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_CTL0r_FEC_ENABLEf_SET(r,f) (r).rx_x4_pcs_ctl0[0]=(((r).rx_x4_pcs_ctl0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_CTL0r_LPI_ENABLEf_GET(r) (((r).rx_x4_pcs_ctl0[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_CTL0r_LPI_ENABLEf_SET(r,f) (r).rx_x4_pcs_ctl0[0]=(((r).rx_x4_pcs_ctl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_X4_PCS_CTL0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_PCS_CTL0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_CTL0r,(_r._rx_x4_pcs_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_PCS_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_CTL0r,(_r._rx_x4_pcs_ctl0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_PCS_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_CTL0r,(_r._rx_x4_pcs_ctl0))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_PCS_CTL0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_pcs_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_PCS_CTL0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_pcs_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_PCS_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_pcs_ctl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_PCS_CTL0r BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_CTL0r
#define RX_X4_PCS_CTL0r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_CTL0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_CTL0r_t RX_X4_PCS_CTL0r_t;
#define RX_X4_PCS_CTL0r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_CTL0r_CLR
#define RX_X4_PCS_CTL0r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_CTL0r_SET
#define RX_X4_PCS_CTL0r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_CTL0r_GET
#define RX_X4_PCS_CTL0r_DESCR_MODEf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_CTL0r_DESCR_MODEf_GET
#define RX_X4_PCS_CTL0r_DESCR_MODEf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_CTL0r_DESCR_MODEf_SET
#define RX_X4_PCS_CTL0r_DEC_TL_MODEf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_CTL0r_DEC_TL_MODEf_GET
#define RX_X4_PCS_CTL0r_DEC_TL_MODEf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_CTL0r_DEC_TL_MODEf_SET
#define RX_X4_PCS_CTL0r_DESKEW_MODEf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_CTL0r_DESKEW_MODEf_GET
#define RX_X4_PCS_CTL0r_DESKEW_MODEf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_CTL0r_DESKEW_MODEf_SET
#define RX_X4_PCS_CTL0r_DEC_FSM_MODEf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_CTL0r_DEC_FSM_MODEf_GET
#define RX_X4_PCS_CTL0r_DEC_FSM_MODEf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_CTL0r_DEC_FSM_MODEf_SET
#define RX_X4_PCS_CTL0r_BLOCK_NON_FC_BLK_TYPESf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_CTL0r_BLOCK_NON_FC_BLK_TYPESf_GET
#define RX_X4_PCS_CTL0r_BLOCK_NON_FC_BLK_TYPESf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_CTL0r_BLOCK_NON_FC_BLK_TYPESf_SET
#define RX_X4_PCS_CTL0r_CL91_FEC_MODEf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_CTL0r_CL91_FEC_MODEf_GET
#define RX_X4_PCS_CTL0r_CL91_FEC_MODEf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_CTL0r_CL91_FEC_MODEf_SET
#define RX_X4_PCS_CTL0r_FEC_ENABLEf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_CTL0r_FEC_ENABLEf_GET
#define RX_X4_PCS_CTL0r_FEC_ENABLEf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_CTL0r_FEC_ENABLEf_SET
#define RX_X4_PCS_CTL0r_LPI_ENABLEf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_CTL0r_LPI_ENABLEf_GET
#define RX_X4_PCS_CTL0r_LPI_ENABLEf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_CTL0r_LPI_ENABLEf_SET
#define READ_RX_X4_PCS_CTL0r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_PCS_CTL0r
#define WRITE_RX_X4_PCS_CTL0r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_PCS_CTL0r
#define MODIFY_RX_X4_PCS_CTL0r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_PCS_CTL0r
#define READLN_RX_X4_PCS_CTL0r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_PCS_CTL0r
#define WRITELN_RX_X4_PCS_CTL0r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_PCS_CTL0r
#define WRITEALL_RX_X4_PCS_CTL0r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_PCS_CTL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_CL91_THR
 * BLOCKS:   RX_X4_CONTROL0
 * REGADDR:  0xc131
 * DESC:     cl91 symbol error threshold count register
 * RESETVAL: 0x1a1 (417)
 * ACCESS:   R/W
 * FIELDS:
 *     SYMBOL_ERR_CNT_THRESHOLD When the number of symbol errors in a window of 8192 (or 128) code words exceed this value, all sync headers are corruptedIt is referred to as variable K in the IEEE spec.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_THRr (0x0000c131 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_THRr_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL91_THR.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_THRr_s {
	uint32_t v[1];
	uint32_t rx_x4_cl91_thr[1];
	uint32_t _rx_x4_cl91_thr;
} BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_THRr_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_THRr_CLR(r) (r).rx_x4_cl91_thr[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_THRr_SET(r,d) (r).rx_x4_cl91_thr[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_THRr_GET(r) (r).rx_x4_cl91_thr[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_THRr_SYMBOL_ERR_CNT_THRESHOLDf_GET(r) (((r).rx_x4_cl91_thr[0]) & 0x1fff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_THRr_SYMBOL_ERR_CNT_THRESHOLDf_SET(r,f) (r).rx_x4_cl91_thr[0]=(((r).rx_x4_cl91_thr[0] & ~((uint32_t)0x1fff)) | (((uint32_t)f) & 0x1fff)) | (0x1fff << 16)

/*
 * These macros can be used to access RX_X4_CL91_THR.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL91_THRr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_THRr,(_r._rx_x4_cl91_thr))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL91_THRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_THRr,(_r._rx_x4_cl91_thr)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL91_THRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_THRr,(_r._rx_x4_cl91_thr))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL91_THRr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_THRr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_thr))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL91_THRr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_THRr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_thr))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL91_THRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_THRr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl91_thr))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL91_THRr BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_THRr
#define RX_X4_CL91_THRr_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_THRr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_THRr_t RX_X4_CL91_THRr_t;
#define RX_X4_CL91_THRr_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_THRr_CLR
#define RX_X4_CL91_THRr_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_THRr_SET
#define RX_X4_CL91_THRr_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_THRr_GET
#define RX_X4_CL91_THRr_SYMBOL_ERR_CNT_THRESHOLDf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_THRr_SYMBOL_ERR_CNT_THRESHOLDf_GET
#define RX_X4_CL91_THRr_SYMBOL_ERR_CNT_THRESHOLDf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_THRr_SYMBOL_ERR_CNT_THRESHOLDf_SET
#define READ_RX_X4_CL91_THRr BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL91_THRr
#define WRITE_RX_X4_CL91_THRr BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL91_THRr
#define MODIFY_RX_X4_CL91_THRr BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL91_THRr
#define READLN_RX_X4_CL91_THRr BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL91_THRr
#define WRITELN_RX_X4_CL91_THRr BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL91_THRr
#define WRITEALL_RX_X4_CL91_THRr BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL91_THRr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_THRr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_CL91_TMR
 * BLOCKS:   RX_X4_CONTROL0
 * REGADDR:  0xc132
 * DESC:     cl91 symbol error timer period register
 * RESETVAL: 0xfa0 (4000)
 * ACCESS:   R/W
 * FIELDS:
 *     SYMBOL_ERROR_TMR_PERIOD Counter value upto which 15us ticks are counted.It should be programmed between 60-75ms as per IEEE.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_TMRr (0x0000c132 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_TMRr_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL91_TMR.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_TMRr_s {
	uint32_t v[1];
	uint32_t rx_x4_cl91_tmr[1];
	uint32_t _rx_x4_cl91_tmr;
} BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_TMRr_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_TMRr_CLR(r) (r).rx_x4_cl91_tmr[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_TMRr_SET(r,d) (r).rx_x4_cl91_tmr[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_TMRr_GET(r) (r).rx_x4_cl91_tmr[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_TMRr_SYMBOL_ERROR_TMR_PERIODf_GET(r) (((r).rx_x4_cl91_tmr[0]) & 0x1fff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_TMRr_SYMBOL_ERROR_TMR_PERIODf_SET(r,f) (r).rx_x4_cl91_tmr[0]=(((r).rx_x4_cl91_tmr[0] & ~((uint32_t)0x1fff)) | (((uint32_t)f) & 0x1fff)) | (0x1fff << 16)

/*
 * These macros can be used to access RX_X4_CL91_TMR.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL91_TMRr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_TMRr,(_r._rx_x4_cl91_tmr))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL91_TMRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_TMRr,(_r._rx_x4_cl91_tmr)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL91_TMRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_TMRr,(_r._rx_x4_cl91_tmr))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL91_TMRr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_TMRr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_tmr))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL91_TMRr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_TMRr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_tmr))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL91_TMRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_TMRr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl91_tmr))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL91_TMRr BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_TMRr
#define RX_X4_CL91_TMRr_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_TMRr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_TMRr_t RX_X4_CL91_TMRr_t;
#define RX_X4_CL91_TMRr_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_TMRr_CLR
#define RX_X4_CL91_TMRr_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_TMRr_SET
#define RX_X4_CL91_TMRr_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_TMRr_GET
#define RX_X4_CL91_TMRr_SYMBOL_ERROR_TMR_PERIODf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_TMRr_SYMBOL_ERROR_TMR_PERIODf_GET
#define RX_X4_CL91_TMRr_SYMBOL_ERROR_TMR_PERIODf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_TMRr_SYMBOL_ERROR_TMR_PERIODf_SET
#define READ_RX_X4_CL91_TMRr BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL91_TMRr
#define WRITE_RX_X4_CL91_TMRr BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL91_TMRr
#define MODIFY_RX_X4_CL91_TMRr BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL91_TMRr
#define READLN_RX_X4_CL91_TMRr BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL91_TMRr
#define WRITELN_RX_X4_CL91_TMRr BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL91_TMRr
#define WRITEALL_RX_X4_CL91_TMRr BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL91_TMRr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_TMRr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_CL91_RX_CTL0
 * BLOCKS:   RX_X4_CONTROL0
 * REGADDR:  0xc133
 * DESC:     cl91 control register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL91_BLKSYNC_MODE 
 *     R_MERGE_MODE     
 *     CL91_CW_SCRAMBLE Indicates whether the CL91 codeword needs to be descrambled. Should be enabled for FC mode.
 *     R_TC_IN_MODE     Indicates whether CL91 is turned ON for the port or not.
 *     R_TC_MODE        
 *     FIVE_BIT_XOR_EN  1'b1 - XOR 4:0 with 12:8, 1'b0 - No XOR of the 5 bits
 *     R_TC_OUT_MODE    
 *     FEC_BYP_CORR_EN  1'b1 - Reed Solomon decoder performs error detection without error correction.1'b0 - Reed Solomon decoder also performs error correction.
 *     FEC_BYP_IND_EN   1'b1 - Disable error code word marking.1'b0 - Enable error code word marking.This bit shall have no effect if FEC bypass correction enable is set to 1.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r (0x0000c133 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL91_RX_CTL0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r_s {
	uint32_t v[1];
	uint32_t rx_x4_cl91_rx_ctl0[1];
	uint32_t _rx_x4_cl91_rx_ctl0;
} BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r_CLR(r) (r).rx_x4_cl91_rx_ctl0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r_SET(r,d) (r).rx_x4_cl91_rx_ctl0[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r_GET(r) (r).rx_x4_cl91_rx_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r_FEC_BYP_IND_ENf_GET(r) ((((r).rx_x4_cl91_rx_ctl0[0]) >> 14) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r_FEC_BYP_IND_ENf_SET(r,f) (r).rx_x4_cl91_rx_ctl0[0]=(((r).rx_x4_cl91_rx_ctl0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r_FEC_BYP_CORR_ENf_GET(r) ((((r).rx_x4_cl91_rx_ctl0[0]) >> 13) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r_FEC_BYP_CORR_ENf_SET(r,f) (r).rx_x4_cl91_rx_ctl0[0]=(((r).rx_x4_cl91_rx_ctl0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r_R_TC_OUT_MODEf_GET(r) ((((r).rx_x4_cl91_rx_ctl0[0]) >> 11) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r_R_TC_OUT_MODEf_SET(r,f) (r).rx_x4_cl91_rx_ctl0[0]=(((r).rx_x4_cl91_rx_ctl0[0] & ~((uint32_t)0x3 << 11)) | ((((uint32_t)f) & 0x3) << 11)) | (3 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r_FIVE_BIT_XOR_ENf_GET(r) ((((r).rx_x4_cl91_rx_ctl0[0]) >> 10) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r_FIVE_BIT_XOR_ENf_SET(r,f) (r).rx_x4_cl91_rx_ctl0[0]=(((r).rx_x4_cl91_rx_ctl0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r_R_TC_MODEf_GET(r) ((((r).rx_x4_cl91_rx_ctl0[0]) >> 8) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r_R_TC_MODEf_SET(r,f) (r).rx_x4_cl91_rx_ctl0[0]=(((r).rx_x4_cl91_rx_ctl0[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r_R_TC_IN_MODEf_GET(r) ((((r).rx_x4_cl91_rx_ctl0[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r_R_TC_IN_MODEf_SET(r,f) (r).rx_x4_cl91_rx_ctl0[0]=(((r).rx_x4_cl91_rx_ctl0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r_CL91_CW_SCRAMBLEf_GET(r) ((((r).rx_x4_cl91_rx_ctl0[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r_CL91_CW_SCRAMBLEf_SET(r,f) (r).rx_x4_cl91_rx_ctl0[0]=(((r).rx_x4_cl91_rx_ctl0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r_R_MERGE_MODEf_GET(r) ((((r).rx_x4_cl91_rx_ctl0[0]) >> 3) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r_R_MERGE_MODEf_SET(r,f) (r).rx_x4_cl91_rx_ctl0[0]=(((r).rx_x4_cl91_rx_ctl0[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3)) | (7 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r_CL91_BLKSYNC_MODEf_GET(r) (((r).rx_x4_cl91_rx_ctl0[0]) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r_CL91_BLKSYNC_MODEf_SET(r,f) (r).rx_x4_cl91_rx_ctl0[0]=(((r).rx_x4_cl91_rx_ctl0[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access RX_X4_CL91_RX_CTL0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL91_RX_CTL0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r,(_r._rx_x4_cl91_rx_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL91_RX_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r,(_r._rx_x4_cl91_rx_ctl0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL91_RX_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r,(_r._rx_x4_cl91_rx_ctl0))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL91_RX_CTL0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_rx_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL91_RX_CTL0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_rx_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL91_RX_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl91_rx_ctl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL91_RX_CTL0r BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r
#define RX_X4_CL91_RX_CTL0r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r_t RX_X4_CL91_RX_CTL0r_t;
#define RX_X4_CL91_RX_CTL0r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r_CLR
#define RX_X4_CL91_RX_CTL0r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r_SET
#define RX_X4_CL91_RX_CTL0r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r_GET
#define RX_X4_CL91_RX_CTL0r_FEC_BYP_IND_ENf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r_FEC_BYP_IND_ENf_GET
#define RX_X4_CL91_RX_CTL0r_FEC_BYP_IND_ENf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r_FEC_BYP_IND_ENf_SET
#define RX_X4_CL91_RX_CTL0r_FEC_BYP_CORR_ENf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r_FEC_BYP_CORR_ENf_GET
#define RX_X4_CL91_RX_CTL0r_FEC_BYP_CORR_ENf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r_FEC_BYP_CORR_ENf_SET
#define RX_X4_CL91_RX_CTL0r_R_TC_OUT_MODEf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r_R_TC_OUT_MODEf_GET
#define RX_X4_CL91_RX_CTL0r_R_TC_OUT_MODEf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r_R_TC_OUT_MODEf_SET
#define RX_X4_CL91_RX_CTL0r_FIVE_BIT_XOR_ENf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r_FIVE_BIT_XOR_ENf_GET
#define RX_X4_CL91_RX_CTL0r_FIVE_BIT_XOR_ENf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r_FIVE_BIT_XOR_ENf_SET
#define RX_X4_CL91_RX_CTL0r_R_TC_MODEf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r_R_TC_MODEf_GET
#define RX_X4_CL91_RX_CTL0r_R_TC_MODEf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r_R_TC_MODEf_SET
#define RX_X4_CL91_RX_CTL0r_R_TC_IN_MODEf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r_R_TC_IN_MODEf_GET
#define RX_X4_CL91_RX_CTL0r_R_TC_IN_MODEf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r_R_TC_IN_MODEf_SET
#define RX_X4_CL91_RX_CTL0r_CL91_CW_SCRAMBLEf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r_CL91_CW_SCRAMBLEf_GET
#define RX_X4_CL91_RX_CTL0r_CL91_CW_SCRAMBLEf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r_CL91_CW_SCRAMBLEf_SET
#define RX_X4_CL91_RX_CTL0r_R_MERGE_MODEf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r_R_MERGE_MODEf_GET
#define RX_X4_CL91_RX_CTL0r_R_MERGE_MODEf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r_R_MERGE_MODEf_SET
#define RX_X4_CL91_RX_CTL0r_CL91_BLKSYNC_MODEf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r_CL91_BLKSYNC_MODEf_GET
#define RX_X4_CL91_RX_CTL0r_CL91_BLKSYNC_MODEf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r_CL91_BLKSYNC_MODEf_SET
#define READ_RX_X4_CL91_RX_CTL0r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL91_RX_CTL0r
#define WRITE_RX_X4_CL91_RX_CTL0r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL91_RX_CTL0r
#define MODIFY_RX_X4_CL91_RX_CTL0r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL91_RX_CTL0r
#define READLN_RX_X4_CL91_RX_CTL0r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL91_RX_CTL0r
#define WRITELN_RX_X4_CL91_RX_CTL0r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL91_RX_CTL0r
#define WRITEALL_RX_X4_CL91_RX_CTL0r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL91_RX_CTL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RX_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_DEC_CTL0
 * BLOCKS:   RX_X4_CONTROL0
 * REGADDR:  0xc134
 * DESC:     Decoder control 0 register
 * RESETVAL: 0x2270 (8816)
 * ACCESS:   R/W
 * FIELDS:
 *     CL49_RX_RF_ENABLE If this bit is a one, RFs are passed to the RS layer from the PCS.If this bit is a zero, RFs are replaced by IDLEs which are then passedto the RS layer.For CL49 only.
 *     CL49_RX_LF_ENABLE If this bit is a one, LFs are passed to the RS layer from the PCS.If this bit is a zero, LFs are replaced by IDLEs which are then passedto the RS layer.For CL49 only.
 *     CL49_RX_LI_ENABLE If this bit is a one, LIs (Link Interrupt) are passed thru to the PCS.If this bit is a zero, LIs (Link Interrupt) are replaced by IDLEs which are then passedto the PCS.For CL49 only.
 *     DIS_SCRAMBLER    Disable the RX scrambler
 *     DISABLE_CL49_BERMON Disable cl49 BER monitor state machine1 = Disable bermon fsm, force BER_MT_INIT state0 = Enable (default)
 *     HG2_CODEC        Enables HG2 extensions support for PCSSet this bit to enable HG2 messaging
 *     HG2_ENABLE       Enables HG2 support for PCS
 *     HG2_MESSAGE_INVALID_CODE_ENABLE Enables HG2 invalid message code support.
 *     R_TEST_MODE_CFG  Test Mode enable for both CL49 and CL82
 *     BYPASS_CL49RXSM  Bypass cl49 receive state machine1 = Bypass cl49 rxsm :- force RX_INIT state- pass the data from the table look-up decoder to the output0 = normal mode
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r (0x0000c134 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_DEC_CTL0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r_s {
	uint32_t v[1];
	uint32_t rx_x4_dec_ctl0[1];
	uint32_t _rx_x4_dec_ctl0;
} BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r_CLR(r) (r).rx_x4_dec_ctl0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r_SET(r,d) (r).rx_x4_dec_ctl0[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r_GET(r) (r).rx_x4_dec_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r_BYPASS_CL49RXSMf_GET(r) ((((r).rx_x4_dec_ctl0[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r_BYPASS_CL49RXSMf_SET(r,f) (r).rx_x4_dec_ctl0[0]=(((r).rx_x4_dec_ctl0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r_R_TEST_MODE_CFGf_GET(r) ((((r).rx_x4_dec_ctl0[0]) >> 14) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r_R_TEST_MODE_CFGf_SET(r,f) (r).rx_x4_dec_ctl0[0]=(((r).rx_x4_dec_ctl0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r_HG2_MESSAGE_INVALID_CODE_ENABLEf_GET(r) ((((r).rx_x4_dec_ctl0[0]) >> 13) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r_HG2_MESSAGE_INVALID_CODE_ENABLEf_SET(r,f) (r).rx_x4_dec_ctl0[0]=(((r).rx_x4_dec_ctl0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r_HG2_ENABLEf_GET(r) ((((r).rx_x4_dec_ctl0[0]) >> 12) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r_HG2_ENABLEf_SET(r,f) (r).rx_x4_dec_ctl0[0]=(((r).rx_x4_dec_ctl0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r_HG2_CODECf_GET(r) ((((r).rx_x4_dec_ctl0[0]) >> 9) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r_HG2_CODECf_SET(r,f) (r).rx_x4_dec_ctl0[0]=(((r).rx_x4_dec_ctl0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r_DISABLE_CL49_BERMONf_GET(r) ((((r).rx_x4_dec_ctl0[0]) >> 8) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r_DISABLE_CL49_BERMONf_SET(r,f) (r).rx_x4_dec_ctl0[0]=(((r).rx_x4_dec_ctl0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r_DIS_SCRAMBLERf_GET(r) ((((r).rx_x4_dec_ctl0[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r_DIS_SCRAMBLERf_SET(r,f) (r).rx_x4_dec_ctl0[0]=(((r).rx_x4_dec_ctl0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r_CL49_RX_LI_ENABLEf_GET(r) ((((r).rx_x4_dec_ctl0[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r_CL49_RX_LI_ENABLEf_SET(r,f) (r).rx_x4_dec_ctl0[0]=(((r).rx_x4_dec_ctl0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r_CL49_RX_LF_ENABLEf_GET(r) ((((r).rx_x4_dec_ctl0[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r_CL49_RX_LF_ENABLEf_SET(r,f) (r).rx_x4_dec_ctl0[0]=(((r).rx_x4_dec_ctl0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r_CL49_RX_RF_ENABLEf_GET(r) ((((r).rx_x4_dec_ctl0[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r_CL49_RX_RF_ENABLEf_SET(r,f) (r).rx_x4_dec_ctl0[0]=(((r).rx_x4_dec_ctl0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))

/*
 * These macros can be used to access RX_X4_DEC_CTL0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_DEC_CTL0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r,(_r._rx_x4_dec_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_DEC_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r,(_r._rx_x4_dec_ctl0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_DEC_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r,(_r._rx_x4_dec_ctl0))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_DEC_CTL0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_dec_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_DEC_CTL0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_dec_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_DEC_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_dec_ctl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_DEC_CTL0r BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r
#define RX_X4_DEC_CTL0r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r_t RX_X4_DEC_CTL0r_t;
#define RX_X4_DEC_CTL0r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r_CLR
#define RX_X4_DEC_CTL0r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r_SET
#define RX_X4_DEC_CTL0r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r_GET
#define RX_X4_DEC_CTL0r_BYPASS_CL49RXSMf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r_BYPASS_CL49RXSMf_GET
#define RX_X4_DEC_CTL0r_BYPASS_CL49RXSMf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r_BYPASS_CL49RXSMf_SET
#define RX_X4_DEC_CTL0r_R_TEST_MODE_CFGf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r_R_TEST_MODE_CFGf_GET
#define RX_X4_DEC_CTL0r_R_TEST_MODE_CFGf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r_R_TEST_MODE_CFGf_SET
#define RX_X4_DEC_CTL0r_HG2_MESSAGE_INVALID_CODE_ENABLEf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r_HG2_MESSAGE_INVALID_CODE_ENABLEf_GET
#define RX_X4_DEC_CTL0r_HG2_MESSAGE_INVALID_CODE_ENABLEf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r_HG2_MESSAGE_INVALID_CODE_ENABLEf_SET
#define RX_X4_DEC_CTL0r_HG2_ENABLEf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r_HG2_ENABLEf_GET
#define RX_X4_DEC_CTL0r_HG2_ENABLEf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r_HG2_ENABLEf_SET
#define RX_X4_DEC_CTL0r_HG2_CODECf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r_HG2_CODECf_GET
#define RX_X4_DEC_CTL0r_HG2_CODECf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r_HG2_CODECf_SET
#define RX_X4_DEC_CTL0r_DISABLE_CL49_BERMONf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r_DISABLE_CL49_BERMONf_GET
#define RX_X4_DEC_CTL0r_DISABLE_CL49_BERMONf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r_DISABLE_CL49_BERMONf_SET
#define RX_X4_DEC_CTL0r_DIS_SCRAMBLERf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r_DIS_SCRAMBLERf_GET
#define RX_X4_DEC_CTL0r_DIS_SCRAMBLERf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r_DIS_SCRAMBLERf_SET
#define RX_X4_DEC_CTL0r_CL49_RX_LI_ENABLEf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r_CL49_RX_LI_ENABLEf_GET
#define RX_X4_DEC_CTL0r_CL49_RX_LI_ENABLEf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r_CL49_RX_LI_ENABLEf_SET
#define RX_X4_DEC_CTL0r_CL49_RX_LF_ENABLEf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r_CL49_RX_LF_ENABLEf_GET
#define RX_X4_DEC_CTL0r_CL49_RX_LF_ENABLEf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r_CL49_RX_LF_ENABLEf_SET
#define RX_X4_DEC_CTL0r_CL49_RX_RF_ENABLEf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r_CL49_RX_RF_ENABLEf_GET
#define RX_X4_DEC_CTL0r_CL49_RX_RF_ENABLEf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r_CL49_RX_RF_ENABLEf_SET
#define READ_RX_X4_DEC_CTL0r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_DEC_CTL0r
#define WRITE_RX_X4_DEC_CTL0r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_DEC_CTL0r
#define MODIFY_RX_X4_DEC_CTL0r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_DEC_CTL0r
#define READLN_RX_X4_DEC_CTL0r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_DEC_CTL0r
#define WRITELN_RX_X4_DEC_CTL0r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_DEC_CTL0r
#define WRITEALL_RX_X4_DEC_CTL0r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_DEC_CTL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_BLKSYNC_CFG
 * BLOCKS:   RX_X4_CONTROL0
 * REGADDR:  0xc135
 * DESC:     Block Sync Configuration register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BS_BTMX_MODE     Bit-mux mode: Indicates the format of incoming data on a physical lane.
 *     BS_DIST_MODE     Block to lane distribution mode.BS_DIST_MODE_5_LANE_TDM - 5 lane TDM. Each block distributed in turn over output pseudo-logical lanes 0-4BS_DIST_MODE_2_LANE_TDM_2_VLANE - 2 lane TDM for 2 virtual lanes.Virtual Lane 0 output is ping-ponged over pseudo-logical lanes 0,2.Virtual Lane 1 output is ping-ponged over pseudo-logical lanes 1,3.BS_DIST_MODE_2_LANE_TDM_1_VLANE - 2 lane TDM for 1 virtual lane.Virtual Lane 0 output is ping-ponged over pseudo-logical lanes 0,2.BS_DIST_MODE_NO_TDM - No TDM. Virtual Lane output is sent directly to corresponding pseudo-logical lane.
 *     BS_SYNC_EN       Enable block synchronization: If enabled, block sync sm will attempt to slip data until sync is achieved.
 *     BS_SM_SYNC_MODE  Block Sync Mode: When bs_sync_en==1, this bit indicates if cl49 or cl82 state machine operation is used.1'b0 - Clause 821'b1 - Clause 49
 *     BLK_LOCK_ON_CTRL If this bit is set the block lock for 64/66b modes will be achieved only on control sync headers (2'b01).Else, block lock can be achieved on both control or data sync headers.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_CFGr (0x0000c135 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_CFGr_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_BLKSYNC_CFG.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_CFGr_s {
	uint32_t v[1];
	uint32_t rx_x4_blksync_cfg[1];
	uint32_t _rx_x4_blksync_cfg;
} BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_CFGr_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_CFGr_CLR(r) (r).rx_x4_blksync_cfg[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_CFGr_SET(r,d) (r).rx_x4_blksync_cfg[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_CFGr_GET(r) (r).rx_x4_blksync_cfg[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_CFGr_BLK_LOCK_ON_CTRLf_GET(r) ((((r).rx_x4_blksync_cfg[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_CFGr_BLK_LOCK_ON_CTRLf_SET(r,f) (r).rx_x4_blksync_cfg[0]=(((r).rx_x4_blksync_cfg[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_CFGr_BS_SM_SYNC_MODEf_GET(r) ((((r).rx_x4_blksync_cfg[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_CFGr_BS_SM_SYNC_MODEf_SET(r,f) (r).rx_x4_blksync_cfg[0]=(((r).rx_x4_blksync_cfg[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_CFGr_BS_SYNC_ENf_GET(r) ((((r).rx_x4_blksync_cfg[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_CFGr_BS_SYNC_ENf_SET(r,f) (r).rx_x4_blksync_cfg[0]=(((r).rx_x4_blksync_cfg[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_CFGr_BS_DIST_MODEf_GET(r) ((((r).rx_x4_blksync_cfg[0]) >> 2) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_CFGr_BS_DIST_MODEf_SET(r,f) (r).rx_x4_blksync_cfg[0]=(((r).rx_x4_blksync_cfg[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2)) | (3 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_CFGr_BS_BTMX_MODEf_GET(r) (((r).rx_x4_blksync_cfg[0]) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_CFGr_BS_BTMX_MODEf_SET(r,f) (r).rx_x4_blksync_cfg[0]=(((r).rx_x4_blksync_cfg[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access RX_X4_BLKSYNC_CFG.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_BLKSYNC_CFGr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_CFGr,(_r._rx_x4_blksync_cfg))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_BLKSYNC_CFGr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_CFGr,(_r._rx_x4_blksync_cfg)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_BLKSYNC_CFGr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_CFGr,(_r._rx_x4_blksync_cfg))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_BLKSYNC_CFGr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_CFGr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_blksync_cfg))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_BLKSYNC_CFGr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_CFGr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_blksync_cfg))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_BLKSYNC_CFGr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_CFGr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_blksync_cfg))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_BLKSYNC_CFGr BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_CFGr
#define RX_X4_BLKSYNC_CFGr_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_CFGr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_CFGr_t RX_X4_BLKSYNC_CFGr_t;
#define RX_X4_BLKSYNC_CFGr_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_CFGr_CLR
#define RX_X4_BLKSYNC_CFGr_SET BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_CFGr_SET
#define RX_X4_BLKSYNC_CFGr_GET BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_CFGr_GET
#define RX_X4_BLKSYNC_CFGr_BLK_LOCK_ON_CTRLf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_CFGr_BLK_LOCK_ON_CTRLf_GET
#define RX_X4_BLKSYNC_CFGr_BLK_LOCK_ON_CTRLf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_CFGr_BLK_LOCK_ON_CTRLf_SET
#define RX_X4_BLKSYNC_CFGr_BS_SM_SYNC_MODEf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_CFGr_BS_SM_SYNC_MODEf_GET
#define RX_X4_BLKSYNC_CFGr_BS_SM_SYNC_MODEf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_CFGr_BS_SM_SYNC_MODEf_SET
#define RX_X4_BLKSYNC_CFGr_BS_SYNC_ENf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_CFGr_BS_SYNC_ENf_GET
#define RX_X4_BLKSYNC_CFGr_BS_SYNC_ENf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_CFGr_BS_SYNC_ENf_SET
#define RX_X4_BLKSYNC_CFGr_BS_DIST_MODEf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_CFGr_BS_DIST_MODEf_GET
#define RX_X4_BLKSYNC_CFGr_BS_DIST_MODEf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_CFGr_BS_DIST_MODEf_SET
#define RX_X4_BLKSYNC_CFGr_BS_BTMX_MODEf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_CFGr_BS_BTMX_MODEf_GET
#define RX_X4_BLKSYNC_CFGr_BS_BTMX_MODEf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_CFGr_BS_BTMX_MODEf_SET
#define READ_RX_X4_BLKSYNC_CFGr BCMI_TSCF_GEN3_XGXS_READ_RX_X4_BLKSYNC_CFGr
#define WRITE_RX_X4_BLKSYNC_CFGr BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_BLKSYNC_CFGr
#define MODIFY_RX_X4_BLKSYNC_CFGr BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_BLKSYNC_CFGr
#define READLN_RX_X4_BLKSYNC_CFGr BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_BLKSYNC_CFGr
#define WRITELN_RX_X4_BLKSYNC_CFGr BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_BLKSYNC_CFGr
#define WRITEALL_RX_X4_BLKSYNC_CFGr BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_BLKSYNC_CFGr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_CFGr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_PMA_CTL0
 * BLOCKS:   RX_X4_CONTROL0
 * REGADDR:  0xc137
 * DESC:     pma_control_0 register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RSTB_LANE        Low activer per lane reset for RXP
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PMA_CTL0r (0x0000c137 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_PMA_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_PMA_CTL0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_PMA_CTL0r_s {
	uint32_t v[1];
	uint32_t rx_x4_pma_ctl0[1];
	uint32_t _rx_x4_pma_ctl0;
} BCMI_TSCF_GEN3_XGXS_RX_X4_PMA_CTL0r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_PMA_CTL0r_CLR(r) (r).rx_x4_pma_ctl0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PMA_CTL0r_SET(r,d) (r).rx_x4_pma_ctl0[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PMA_CTL0r_GET(r) (r).rx_x4_pma_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PMA_CTL0r_RSTB_LANEf_GET(r) (((r).rx_x4_pma_ctl0[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PMA_CTL0r_RSTB_LANEf_SET(r,f) (r).rx_x4_pma_ctl0[0]=(((r).rx_x4_pma_ctl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_X4_PMA_CTL0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_PMA_CTL0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PMA_CTL0r,(_r._rx_x4_pma_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_PMA_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PMA_CTL0r,(_r._rx_x4_pma_ctl0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_PMA_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PMA_CTL0r,(_r._rx_x4_pma_ctl0))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_PMA_CTL0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PMA_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_pma_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_PMA_CTL0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PMA_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_pma_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_PMA_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PMA_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_pma_ctl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_PMA_CTL0r BCMI_TSCF_GEN3_XGXS_RX_X4_PMA_CTL0r
#define RX_X4_PMA_CTL0r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_PMA_CTL0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_PMA_CTL0r_t RX_X4_PMA_CTL0r_t;
#define RX_X4_PMA_CTL0r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_PMA_CTL0r_CLR
#define RX_X4_PMA_CTL0r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_PMA_CTL0r_SET
#define RX_X4_PMA_CTL0r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_PMA_CTL0r_GET
#define RX_X4_PMA_CTL0r_RSTB_LANEf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_PMA_CTL0r_RSTB_LANEf_GET
#define RX_X4_PMA_CTL0r_RSTB_LANEf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_PMA_CTL0r_RSTB_LANEf_SET
#define READ_RX_X4_PMA_CTL0r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_PMA_CTL0r
#define WRITE_RX_X4_PMA_CTL0r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_PMA_CTL0r
#define MODIFY_RX_X4_PMA_CTL0r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_PMA_CTL0r
#define READLN_RX_X4_PMA_CTL0r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_PMA_CTL0r
#define WRITELN_RX_X4_PMA_CTL0r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_PMA_CTL0r
#define WRITEALL_RX_X4_PMA_CTL0r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_PMA_CTL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_PMA_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_LNK_CTL
 * BLOCKS:   RX_X4_CONTROL0
 * REGADDR:  0xc139
 * DESC:     Link status control
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LATCH_LINKDOWN_ENABLE Per port signal1'b1 - If the link status transitions from UP (1) to DOWN (0), this bit maintains the DOWN (0) value of the link status until the SW clears this bit.1'b0 - The link status information is passed directly from the PCS to the MAC and status registers without modification
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_LNK_CTLr (0x0000c139 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_LNK_CTLr_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_LNK_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_LNK_CTLr_s {
	uint32_t v[1];
	uint32_t rx_x4_lnk_ctl[1];
	uint32_t _rx_x4_lnk_ctl;
} BCMI_TSCF_GEN3_XGXS_RX_X4_LNK_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_LNK_CTLr_CLR(r) (r).rx_x4_lnk_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_LNK_CTLr_SET(r,d) (r).rx_x4_lnk_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_LNK_CTLr_GET(r) (r).rx_x4_lnk_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_LNK_CTLr_LATCH_LINKDOWN_ENABLEf_GET(r) (((r).rx_x4_lnk_ctl[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_LNK_CTLr_LATCH_LINKDOWN_ENABLEf_SET(r,f) (r).rx_x4_lnk_ctl[0]=(((r).rx_x4_lnk_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_X4_LNK_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_LNK_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_LNK_CTLr,(_r._rx_x4_lnk_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_LNK_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_LNK_CTLr,(_r._rx_x4_lnk_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_LNK_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_LNK_CTLr,(_r._rx_x4_lnk_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_LNK_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_LNK_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_lnk_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_LNK_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_LNK_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_lnk_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_LNK_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_LNK_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_lnk_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_LNK_CTLr BCMI_TSCF_GEN3_XGXS_RX_X4_LNK_CTLr
#define RX_X4_LNK_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_LNK_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_LNK_CTLr_t RX_X4_LNK_CTLr_t;
#define RX_X4_LNK_CTLr_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_LNK_CTLr_CLR
#define RX_X4_LNK_CTLr_SET BCMI_TSCF_GEN3_XGXS_RX_X4_LNK_CTLr_SET
#define RX_X4_LNK_CTLr_GET BCMI_TSCF_GEN3_XGXS_RX_X4_LNK_CTLr_GET
#define RX_X4_LNK_CTLr_LATCH_LINKDOWN_ENABLEf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_LNK_CTLr_LATCH_LINKDOWN_ENABLEf_GET
#define RX_X4_LNK_CTLr_LATCH_LINKDOWN_ENABLEf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_LNK_CTLr_LATCH_LINKDOWN_ENABLEf_SET
#define READ_RX_X4_LNK_CTLr BCMI_TSCF_GEN3_XGXS_READ_RX_X4_LNK_CTLr
#define WRITE_RX_X4_LNK_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_LNK_CTLr
#define MODIFY_RX_X4_LNK_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_LNK_CTLr
#define READLN_RX_X4_LNK_CTLr BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_LNK_CTLr
#define WRITELN_RX_X4_LNK_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_LNK_CTLr
#define WRITEALL_RX_X4_LNK_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_LNK_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_LNK_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_CL36_CTL
 * BLOCKS:   RX_X4_CONTROL0
 * REGADDR:  0xc13c
 * DESC:     CL36 RX control
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL36RX_EN        Per logical lane: cl36 RX pipeline: 1=enabled , 0=disabled
 *     CL36RX_LPI_EN    If enabled (1), LPIs are recognized by CL36 RX decoder
 *     CL36RX_DISABLE_CARRIER_EXTEND Disable carrier extensions
 *     CL36RX_FORCE_COMMA_ALIGN_ENABLE Force comma alignment function, and over-ride CL36 Synchronization function
 *     CL36RX_BER_EN    Per logical lane: cl36 RX BER count: 1=enable , 0=disable
 *     CL36RX_10BIT_PMD_DATA_EN Per logical lane: Enables CL36 Rx Pipeline to use all 10-bits of PMD Rx data.This bit should be enabled in OS8.25 mode or 2.5G speed.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_CTLr (0x0000c13c | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_CTLr_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL36_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_CTLr_s {
	uint32_t v[1];
	uint32_t rx_x4_cl36_ctl[1];
	uint32_t _rx_x4_cl36_ctl;
} BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_CTLr_CLR(r) (r).rx_x4_cl36_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_CTLr_SET(r,d) (r).rx_x4_cl36_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_CTLr_GET(r) (r).rx_x4_cl36_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_CTLr_CL36RX_10BIT_PMD_DATA_ENf_GET(r) ((((r).rx_x4_cl36_ctl[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_CTLr_CL36RX_10BIT_PMD_DATA_ENf_SET(r,f) (r).rx_x4_cl36_ctl[0]=(((r).rx_x4_cl36_ctl[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_CTLr_CL36RX_BER_ENf_GET(r) ((((r).rx_x4_cl36_ctl[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_CTLr_CL36RX_BER_ENf_SET(r,f) (r).rx_x4_cl36_ctl[0]=(((r).rx_x4_cl36_ctl[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_CTLr_CL36RX_FORCE_COMMA_ALIGN_ENABLEf_GET(r) ((((r).rx_x4_cl36_ctl[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_CTLr_CL36RX_FORCE_COMMA_ALIGN_ENABLEf_SET(r,f) (r).rx_x4_cl36_ctl[0]=(((r).rx_x4_cl36_ctl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_CTLr_CL36RX_DISABLE_CARRIER_EXTENDf_GET(r) ((((r).rx_x4_cl36_ctl[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_CTLr_CL36RX_DISABLE_CARRIER_EXTENDf_SET(r,f) (r).rx_x4_cl36_ctl[0]=(((r).rx_x4_cl36_ctl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_CTLr_CL36RX_LPI_ENf_GET(r) ((((r).rx_x4_cl36_ctl[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_CTLr_CL36RX_LPI_ENf_SET(r,f) (r).rx_x4_cl36_ctl[0]=(((r).rx_x4_cl36_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_CTLr_CL36RX_ENf_GET(r) (((r).rx_x4_cl36_ctl[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_CTLr_CL36RX_ENf_SET(r,f) (r).rx_x4_cl36_ctl[0]=(((r).rx_x4_cl36_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_X4_CL36_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL36_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_CTLr,(_r._rx_x4_cl36_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL36_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_CTLr,(_r._rx_x4_cl36_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL36_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_CTLr,(_r._rx_x4_cl36_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL36_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl36_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL36_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl36_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL36_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl36_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL36_CTLr BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_CTLr
#define RX_X4_CL36_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_CTLr_t RX_X4_CL36_CTLr_t;
#define RX_X4_CL36_CTLr_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_CTLr_CLR
#define RX_X4_CL36_CTLr_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_CTLr_SET
#define RX_X4_CL36_CTLr_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_CTLr_GET
#define RX_X4_CL36_CTLr_CL36RX_10BIT_PMD_DATA_ENf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_CTLr_CL36RX_10BIT_PMD_DATA_ENf_GET
#define RX_X4_CL36_CTLr_CL36RX_10BIT_PMD_DATA_ENf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_CTLr_CL36RX_10BIT_PMD_DATA_ENf_SET
#define RX_X4_CL36_CTLr_CL36RX_BER_ENf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_CTLr_CL36RX_BER_ENf_GET
#define RX_X4_CL36_CTLr_CL36RX_BER_ENf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_CTLr_CL36RX_BER_ENf_SET
#define RX_X4_CL36_CTLr_CL36RX_FORCE_COMMA_ALIGN_ENABLEf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_CTLr_CL36RX_FORCE_COMMA_ALIGN_ENABLEf_GET
#define RX_X4_CL36_CTLr_CL36RX_FORCE_COMMA_ALIGN_ENABLEf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_CTLr_CL36RX_FORCE_COMMA_ALIGN_ENABLEf_SET
#define RX_X4_CL36_CTLr_CL36RX_DISABLE_CARRIER_EXTENDf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_CTLr_CL36RX_DISABLE_CARRIER_EXTENDf_GET
#define RX_X4_CL36_CTLr_CL36RX_DISABLE_CARRIER_EXTENDf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_CTLr_CL36RX_DISABLE_CARRIER_EXTENDf_SET
#define RX_X4_CL36_CTLr_CL36RX_LPI_ENf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_CTLr_CL36RX_LPI_ENf_GET
#define RX_X4_CL36_CTLr_CL36RX_LPI_ENf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_CTLr_CL36RX_LPI_ENf_SET
#define RX_X4_CL36_CTLr_CL36RX_ENf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_CTLr_CL36RX_ENf_GET
#define RX_X4_CL36_CTLr_CL36RX_ENf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_CTLr_CL36RX_ENf_SET
#define READ_RX_X4_CL36_CTLr BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL36_CTLr
#define WRITE_RX_X4_CL36_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL36_CTLr
#define MODIFY_RX_X4_CL36_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL36_CTLr
#define READLN_RX_X4_CL36_CTLr BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL36_CTLr
#define WRITELN_RX_X4_CL36_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL36_CTLr
#define WRITEALL_RX_X4_CL36_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL36_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_SYNCE_FRACTIONAL_DIV
 * BLOCKS:   RX_X4_CONTROL0
 * REGADDR:  0xc13d
 * DESC:     SyncE fractional divisor configuration
 * RESETVAL: 0x14a0 (5280)
 * ACCESS:   R/W
 * FIELDS:
 *     SYNCE_FRACTIONAL_DIVSOR_CFG Per physical lane:Program this register for different divider as the following table:f_cdr(Hz)      config divisor[15:0]  resulted fractional divider :Eagle         515,625,000     5280                  20.625546,875,000     5600                  21.875Falcon        644,531,250     6600                  25.78125683,593,750     7000                  27.34375515,625,000     5280                  20.625257,812,500     2640                  10.3125156,250,000     1600                  6.25515,625,000     5280                  20.625resulted fractional divider  =       config division[15:0]/256
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_SYNCE_FRACTIONAL_DIVr (0x0000c13d | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_SYNCE_FRACTIONAL_DIVr_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_SYNCE_FRACTIONAL_DIV.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_SYNCE_FRACTIONAL_DIVr_s {
	uint32_t v[1];
	uint32_t rx_x4_synce_fractional_div[1];
	uint32_t _rx_x4_synce_fractional_div;
} BCMI_TSCF_GEN3_XGXS_RX_X4_SYNCE_FRACTIONAL_DIVr_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_SYNCE_FRACTIONAL_DIVr_CLR(r) (r).rx_x4_synce_fractional_div[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_SYNCE_FRACTIONAL_DIVr_SET(r,d) (r).rx_x4_synce_fractional_div[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_SYNCE_FRACTIONAL_DIVr_GET(r) (r).rx_x4_synce_fractional_div[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_SYNCE_FRACTIONAL_DIVr_SYNCE_FRACTIONAL_DIVSOR_CFGf_GET(r) (((r).rx_x4_synce_fractional_div[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_SYNCE_FRACTIONAL_DIVr_SYNCE_FRACTIONAL_DIVSOR_CFGf_SET(r,f) (r).rx_x4_synce_fractional_div[0]=(((r).rx_x4_synce_fractional_div[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_SYNCE_FRACTIONAL_DIV.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_SYNCE_FRACTIONAL_DIVr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_SYNCE_FRACTIONAL_DIVr,(_r._rx_x4_synce_fractional_div))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_SYNCE_FRACTIONAL_DIVr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_SYNCE_FRACTIONAL_DIVr,(_r._rx_x4_synce_fractional_div)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_SYNCE_FRACTIONAL_DIVr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_SYNCE_FRACTIONAL_DIVr,(_r._rx_x4_synce_fractional_div))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_SYNCE_FRACTIONAL_DIVr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_SYNCE_FRACTIONAL_DIVr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_synce_fractional_div))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_SYNCE_FRACTIONAL_DIVr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_SYNCE_FRACTIONAL_DIVr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_synce_fractional_div))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_SYNCE_FRACTIONAL_DIVr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_SYNCE_FRACTIONAL_DIVr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_synce_fractional_div))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_SYNCE_FRACTIONAL_DIVr BCMI_TSCF_GEN3_XGXS_RX_X4_SYNCE_FRACTIONAL_DIVr
#define RX_X4_SYNCE_FRACTIONAL_DIVr_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_SYNCE_FRACTIONAL_DIVr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_SYNCE_FRACTIONAL_DIVr_t RX_X4_SYNCE_FRACTIONAL_DIVr_t;
#define RX_X4_SYNCE_FRACTIONAL_DIVr_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_SYNCE_FRACTIONAL_DIVr_CLR
#define RX_X4_SYNCE_FRACTIONAL_DIVr_SET BCMI_TSCF_GEN3_XGXS_RX_X4_SYNCE_FRACTIONAL_DIVr_SET
#define RX_X4_SYNCE_FRACTIONAL_DIVr_GET BCMI_TSCF_GEN3_XGXS_RX_X4_SYNCE_FRACTIONAL_DIVr_GET
#define RX_X4_SYNCE_FRACTIONAL_DIVr_SYNCE_FRACTIONAL_DIVSOR_CFGf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_SYNCE_FRACTIONAL_DIVr_SYNCE_FRACTIONAL_DIVSOR_CFGf_GET
#define RX_X4_SYNCE_FRACTIONAL_DIVr_SYNCE_FRACTIONAL_DIVSOR_CFGf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_SYNCE_FRACTIONAL_DIVr_SYNCE_FRACTIONAL_DIVSOR_CFGf_SET
#define READ_RX_X4_SYNCE_FRACTIONAL_DIVr BCMI_TSCF_GEN3_XGXS_READ_RX_X4_SYNCE_FRACTIONAL_DIVr
#define WRITE_RX_X4_SYNCE_FRACTIONAL_DIVr BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_SYNCE_FRACTIONAL_DIVr
#define MODIFY_RX_X4_SYNCE_FRACTIONAL_DIVr BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_SYNCE_FRACTIONAL_DIVr
#define READLN_RX_X4_SYNCE_FRACTIONAL_DIVr BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_SYNCE_FRACTIONAL_DIVr
#define WRITELN_RX_X4_SYNCE_FRACTIONAL_DIVr BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_SYNCE_FRACTIONAL_DIVr
#define WRITEALL_RX_X4_SYNCE_FRACTIONAL_DIVr BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_SYNCE_FRACTIONAL_DIVr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_SYNCE_FRACTIONAL_DIVr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_IEEE_25G_PARLLEL_DET_CTR
 * BLOCKS:   RX_X4_CONTROL0
 * REGADDR:  0xc13e
 * DESC:     25G IEEE vs MSA detection control register
 * RESETVAL: 0x1 (1)
 * ACCESS:   R/W
 * FIELDS:
 *     MSA_IEEE_DET_TIMEPERIOD Time which will be spent on MSA and IEEE detection.
 *     MSA_IEEE_DET_EN  MSA and IEEE device detection in FORCED speed mode. This should only be enabled in forced speed mode and never in AN (or SW-AN)
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTRr (0x0000c13e | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTRr_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_IEEE_25G_PARLLEL_DET_CTR.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTRr_s {
	uint32_t v[1];
	uint32_t rx_x4_ieee_25g_parllel_det_ctr[1];
	uint32_t _rx_x4_ieee_25g_parllel_det_ctr;
} BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTRr_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTRr_CLR(r) (r).rx_x4_ieee_25g_parllel_det_ctr[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTRr_SET(r,d) (r).rx_x4_ieee_25g_parllel_det_ctr[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTRr_GET(r) (r).rx_x4_ieee_25g_parllel_det_ctr[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTRr_MSA_IEEE_DET_ENf_GET(r) ((((r).rx_x4_ieee_25g_parllel_det_ctr[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTRr_MSA_IEEE_DET_ENf_SET(r,f) (r).rx_x4_ieee_25g_parllel_det_ctr[0]=(((r).rx_x4_ieee_25g_parllel_det_ctr[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTRr_MSA_IEEE_DET_TIMEPERIODf_GET(r) (((r).rx_x4_ieee_25g_parllel_det_ctr[0]) & 0x1fff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTRr_MSA_IEEE_DET_TIMEPERIODf_SET(r,f) (r).rx_x4_ieee_25g_parllel_det_ctr[0]=(((r).rx_x4_ieee_25g_parllel_det_ctr[0] & ~((uint32_t)0x1fff)) | (((uint32_t)f) & 0x1fff)) | (0x1fff << 16)

/*
 * These macros can be used to access RX_X4_IEEE_25G_PARLLEL_DET_CTR.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_IEEE_25G_PARLLEL_DET_CTRr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTRr,(_r._rx_x4_ieee_25g_parllel_det_ctr))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_IEEE_25G_PARLLEL_DET_CTRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTRr,(_r._rx_x4_ieee_25g_parllel_det_ctr)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_IEEE_25G_PARLLEL_DET_CTRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTRr,(_r._rx_x4_ieee_25g_parllel_det_ctr))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_IEEE_25G_PARLLEL_DET_CTRr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTRr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ieee_25g_parllel_det_ctr))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_IEEE_25G_PARLLEL_DET_CTRr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTRr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ieee_25g_parllel_det_ctr))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_IEEE_25G_PARLLEL_DET_CTRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTRr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_ieee_25g_parllel_det_ctr))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_IEEE_25G_PARLLEL_DET_CTRr BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTRr
#define RX_X4_IEEE_25G_PARLLEL_DET_CTRr_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTRr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTRr_t RX_X4_IEEE_25G_PARLLEL_DET_CTRr_t;
#define RX_X4_IEEE_25G_PARLLEL_DET_CTRr_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTRr_CLR
#define RX_X4_IEEE_25G_PARLLEL_DET_CTRr_SET BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTRr_SET
#define RX_X4_IEEE_25G_PARLLEL_DET_CTRr_GET BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTRr_GET
#define RX_X4_IEEE_25G_PARLLEL_DET_CTRr_MSA_IEEE_DET_ENf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTRr_MSA_IEEE_DET_ENf_GET
#define RX_X4_IEEE_25G_PARLLEL_DET_CTRr_MSA_IEEE_DET_ENf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTRr_MSA_IEEE_DET_ENf_SET
#define RX_X4_IEEE_25G_PARLLEL_DET_CTRr_MSA_IEEE_DET_TIMEPERIODf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTRr_MSA_IEEE_DET_TIMEPERIODf_GET
#define RX_X4_IEEE_25G_PARLLEL_DET_CTRr_MSA_IEEE_DET_TIMEPERIODf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTRr_MSA_IEEE_DET_TIMEPERIODf_SET
#define READ_RX_X4_IEEE_25G_PARLLEL_DET_CTRr BCMI_TSCF_GEN3_XGXS_READ_RX_X4_IEEE_25G_PARLLEL_DET_CTRr
#define WRITE_RX_X4_IEEE_25G_PARLLEL_DET_CTRr BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_IEEE_25G_PARLLEL_DET_CTRr
#define MODIFY_RX_X4_IEEE_25G_PARLLEL_DET_CTRr BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_IEEE_25G_PARLLEL_DET_CTRr
#define READLN_RX_X4_IEEE_25G_PARLLEL_DET_CTRr BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_IEEE_25G_PARLLEL_DET_CTRr
#define WRITELN_RX_X4_IEEE_25G_PARLLEL_DET_CTRr BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_IEEE_25G_PARLLEL_DET_CTRr
#define WRITEALL_RX_X4_IEEE_25G_PARLLEL_DET_CTRr BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_IEEE_25G_PARLLEL_DET_CTRr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTRr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_FEC0
 * BLOCKS:   RX_X4_FEC_CONTROL
 * REGADDR:  0xc140
 * DESC:     User FEC Control 0 register
 * RESETVAL: 0x442c (17452)
 * ACCESS:   R/W
 * FIELDS:
 *     DBG_ERR_MODE     debug readout only for uncorrectable errors
 *     BURST_ERR_STATUS_MODE collect error info only for uncorrectable errors0 - update on correctable and uncorrectable events1 - update on uncorrectable events only
 *     DEC_MAX_PM       maximum correctable burst pattern size
 *     INVALID_PARITY_CNT number of bad locks before unlocking
 *     GOOD_PARITY_CNT  number of good blocks before locking
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC0r (0x0000c140 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC0r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_FEC0r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec0[1];
	uint32_t _rx_x4_fec0;
} BCMI_TSCF_GEN3_XGXS_RX_X4_FEC0r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC0r_CLR(r) (r).rx_x4_fec0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC0r_SET(r,d) (r).rx_x4_fec0[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC0r_GET(r) (r).rx_x4_fec0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC0r_GOOD_PARITY_CNTf_GET(r) ((((r).rx_x4_fec0[0]) >> 12) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC0r_GOOD_PARITY_CNTf_SET(r,f) (r).rx_x4_fec0[0]=(((r).rx_x4_fec0[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12)) | (7 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC0r_INVALID_PARITY_CNTf_GET(r) ((((r).rx_x4_fec0[0]) >> 8) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC0r_INVALID_PARITY_CNTf_SET(r,f) (r).rx_x4_fec0[0]=(((r).rx_x4_fec0[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC0r_DEC_MAX_PMf_GET(r) ((((r).rx_x4_fec0[0]) >> 2) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC0r_DEC_MAX_PMf_SET(r,f) (r).rx_x4_fec0[0]=(((r).rx_x4_fec0[0] & ~((uint32_t)0x3f << 2)) | ((((uint32_t)f) & 0x3f) << 2)) | (63 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC0r_BURST_ERR_STATUS_MODEf_GET(r) ((((r).rx_x4_fec0[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC0r_BURST_ERR_STATUS_MODEf_SET(r,f) (r).rx_x4_fec0[0]=(((r).rx_x4_fec0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC0r_DBG_ERR_MODEf_GET(r) (((r).rx_x4_fec0[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC0r_DBG_ERR_MODEf_SET(r,f) (r).rx_x4_fec0[0]=(((r).rx_x4_fec0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_X4_FEC0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC0r,(_r._rx_x4_fec0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC0r,(_r._rx_x4_fec0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC0r,(_r._rx_x4_fec0))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC0r BCMI_TSCF_GEN3_XGXS_RX_X4_FEC0r
#define RX_X4_FEC0r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_FEC0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_FEC0r_t RX_X4_FEC0r_t;
#define RX_X4_FEC0r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_FEC0r_CLR
#define RX_X4_FEC0r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC0r_SET
#define RX_X4_FEC0r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC0r_GET
#define RX_X4_FEC0r_GOOD_PARITY_CNTf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC0r_GOOD_PARITY_CNTf_GET
#define RX_X4_FEC0r_GOOD_PARITY_CNTf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC0r_GOOD_PARITY_CNTf_SET
#define RX_X4_FEC0r_INVALID_PARITY_CNTf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC0r_INVALID_PARITY_CNTf_GET
#define RX_X4_FEC0r_INVALID_PARITY_CNTf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC0r_INVALID_PARITY_CNTf_SET
#define RX_X4_FEC0r_DEC_MAX_PMf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC0r_DEC_MAX_PMf_GET
#define RX_X4_FEC0r_DEC_MAX_PMf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC0r_DEC_MAX_PMf_SET
#define RX_X4_FEC0r_BURST_ERR_STATUS_MODEf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC0r_BURST_ERR_STATUS_MODEf_GET
#define RX_X4_FEC0r_BURST_ERR_STATUS_MODEf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC0r_BURST_ERR_STATUS_MODEf_SET
#define RX_X4_FEC0r_DBG_ERR_MODEf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC0r_DBG_ERR_MODEf_GET
#define RX_X4_FEC0r_DBG_ERR_MODEf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC0r_DBG_ERR_MODEf_SET
#define READ_RX_X4_FEC0r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC0r
#define WRITE_RX_X4_FEC0r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC0r
#define MODIFY_RX_X4_FEC0r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC0r
#define READLN_RX_X4_FEC0r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC0r
#define WRITELN_RX_X4_FEC0r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC0r
#define WRITEALL_RX_X4_FEC0r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_FEC0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_FEC1
 * BLOCKS:   RX_X4_FEC_CONTROL
 * REGADDR:  0xc141
 * DESC:     User FEC Control 1 register
 * RESETVAL: 0x28 (40)
 * ACCESS:   R/W
 * FIELDS:
 *     DEC_GAP_COUNT_MODE Gap counting mode0 = Counting zero method1 = Counting gap method
 *     DEC_17B_BURST_GAP_COUNT Gaps allowed in 17-bit bursts000 No gaps001 Single gap010-111 Multi gaps
 *     DEC_18B_BURST_GAP_COUNT Gaps allowed in 18-bit bursts000 No gaps001 Single gap010-111 Multi gaps
 *     DEC_19B_BURST_GAP_COUNT Gaps allowed in 19-bit bursts000 No gaps001 Single gap010-111 Multi gaps
 *     DEC_PM_MODE      Pattern Match Mode
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC1r (0x0000c141 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC1r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_FEC1r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec1[1];
	uint32_t _rx_x4_fec1;
} BCMI_TSCF_GEN3_XGXS_RX_X4_FEC1r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC1r_CLR(r) (r).rx_x4_fec1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC1r_SET(r,d) (r).rx_x4_fec1[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC1r_GET(r) (r).rx_x4_fec1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC1r_DEC_PM_MODEf_GET(r) ((((r).rx_x4_fec1[0]) >> 11) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC1r_DEC_PM_MODEf_SET(r,f) (r).rx_x4_fec1[0]=(((r).rx_x4_fec1[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11)) | (31 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC1r_DEC_19B_BURST_GAP_COUNTf_GET(r) ((((r).rx_x4_fec1[0]) >> 8) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC1r_DEC_19B_BURST_GAP_COUNTf_SET(r,f) (r).rx_x4_fec1[0]=(((r).rx_x4_fec1[0] & ~((uint32_t)0x7 << 8)) | ((((uint32_t)f) & 0x7) << 8)) | (7 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC1r_DEC_18B_BURST_GAP_COUNTf_GET(r) ((((r).rx_x4_fec1[0]) >> 5) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC1r_DEC_18B_BURST_GAP_COUNTf_SET(r,f) (r).rx_x4_fec1[0]=(((r).rx_x4_fec1[0] & ~((uint32_t)0x7 << 5)) | ((((uint32_t)f) & 0x7) << 5)) | (7 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC1r_DEC_17B_BURST_GAP_COUNTf_GET(r) ((((r).rx_x4_fec1[0]) >> 2) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC1r_DEC_17B_BURST_GAP_COUNTf_SET(r,f) (r).rx_x4_fec1[0]=(((r).rx_x4_fec1[0] & ~((uint32_t)0x7 << 2)) | ((((uint32_t)f) & 0x7) << 2)) | (7 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC1r_DEC_GAP_COUNT_MODEf_GET(r) ((((r).rx_x4_fec1[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC1r_DEC_GAP_COUNT_MODEf_SET(r,f) (r).rx_x4_fec1[0]=(((r).rx_x4_fec1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))

/*
 * These macros can be used to access RX_X4_FEC1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC1r,(_r._rx_x4_fec1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC1r,(_r._rx_x4_fec1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC1r,(_r._rx_x4_fec1))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC1r BCMI_TSCF_GEN3_XGXS_RX_X4_FEC1r
#define RX_X4_FEC1r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_FEC1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_FEC1r_t RX_X4_FEC1r_t;
#define RX_X4_FEC1r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_FEC1r_CLR
#define RX_X4_FEC1r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC1r_SET
#define RX_X4_FEC1r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC1r_GET
#define RX_X4_FEC1r_DEC_PM_MODEf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC1r_DEC_PM_MODEf_GET
#define RX_X4_FEC1r_DEC_PM_MODEf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC1r_DEC_PM_MODEf_SET
#define RX_X4_FEC1r_DEC_19B_BURST_GAP_COUNTf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC1r_DEC_19B_BURST_GAP_COUNTf_GET
#define RX_X4_FEC1r_DEC_19B_BURST_GAP_COUNTf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC1r_DEC_19B_BURST_GAP_COUNTf_SET
#define RX_X4_FEC1r_DEC_18B_BURST_GAP_COUNTf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC1r_DEC_18B_BURST_GAP_COUNTf_GET
#define RX_X4_FEC1r_DEC_18B_BURST_GAP_COUNTf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC1r_DEC_18B_BURST_GAP_COUNTf_SET
#define RX_X4_FEC1r_DEC_17B_BURST_GAP_COUNTf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC1r_DEC_17B_BURST_GAP_COUNTf_GET
#define RX_X4_FEC1r_DEC_17B_BURST_GAP_COUNTf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC1r_DEC_17B_BURST_GAP_COUNTf_SET
#define RX_X4_FEC1r_DEC_GAP_COUNT_MODEf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC1r_DEC_GAP_COUNT_MODEf_GET
#define RX_X4_FEC1r_DEC_GAP_COUNT_MODEf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC1r_DEC_GAP_COUNT_MODEf_SET
#define READ_RX_X4_FEC1r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC1r
#define WRITE_RX_X4_FEC1r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC1r
#define MODIFY_RX_X4_FEC1r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC1r
#define READLN_RX_X4_FEC1r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC1r
#define WRITELN_RX_X4_FEC1r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC1r
#define WRITEALL_RX_X4_FEC1r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_FEC1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_FEC2
 * BLOCKS:   RX_X4_FEC_CONTROL
 * REGADDR:  0xc142
 * DESC:     User FEC Control 2 register
 * RESETVAL: 0x7c00 (31744)
 * ACCESS:   R/W
 * FIELDS:
 *     FEC_ERROR_CODE_ALL_PER_STREAM report errors thru all sync headersNow this functionality is controlled by Speed table so it is advisable NOT to TOUCH this register.
 *     DBG_ENABLE_PER_STREAM FEC debug enable
 *     FEC_ERR_ENABLE_PER_STREAM FEC error enable
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC2r (0x0000c142 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_FEC2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec2[1];
	uint32_t _rx_x4_fec2;
} BCMI_TSCF_GEN3_XGXS_RX_X4_FEC2r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC2r_CLR(r) (r).rx_x4_fec2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC2r_SET(r,d) (r).rx_x4_fec2[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC2r_GET(r) (r).rx_x4_fec2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC2r_FEC_ERR_ENABLE_PER_STREAMf_GET(r) ((((r).rx_x4_fec2[0]) >> 10) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC2r_FEC_ERR_ENABLE_PER_STREAMf_SET(r,f) (r).rx_x4_fec2[0]=(((r).rx_x4_fec2[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10)) | (31 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC2r_DBG_ENABLE_PER_STREAMf_GET(r) ((((r).rx_x4_fec2[0]) >> 5) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC2r_DBG_ENABLE_PER_STREAMf_SET(r,f) (r).rx_x4_fec2[0]=(((r).rx_x4_fec2[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5)) | (31 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC2r_FEC_ERROR_CODE_ALL_PER_STREAMf_GET(r) (((r).rx_x4_fec2[0]) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC2r_FEC_ERROR_CODE_ALL_PER_STREAMf_SET(r,f) (r).rx_x4_fec2[0]=(((r).rx_x4_fec2[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access RX_X4_FEC2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC2r,(_r._rx_x4_fec2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC2r,(_r._rx_x4_fec2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC2r,(_r._rx_x4_fec2))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec2))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec2))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC2r BCMI_TSCF_GEN3_XGXS_RX_X4_FEC2r
#define RX_X4_FEC2r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_FEC2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_FEC2r_t RX_X4_FEC2r_t;
#define RX_X4_FEC2r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_FEC2r_CLR
#define RX_X4_FEC2r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC2r_SET
#define RX_X4_FEC2r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC2r_GET
#define RX_X4_FEC2r_FEC_ERR_ENABLE_PER_STREAMf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC2r_FEC_ERR_ENABLE_PER_STREAMf_GET
#define RX_X4_FEC2r_FEC_ERR_ENABLE_PER_STREAMf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC2r_FEC_ERR_ENABLE_PER_STREAMf_SET
#define RX_X4_FEC2r_DBG_ENABLE_PER_STREAMf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC2r_DBG_ENABLE_PER_STREAMf_GET
#define RX_X4_FEC2r_DBG_ENABLE_PER_STREAMf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC2r_DBG_ENABLE_PER_STREAMf_SET
#define RX_X4_FEC2r_FEC_ERROR_CODE_ALL_PER_STREAMf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC2r_FEC_ERROR_CODE_ALL_PER_STREAMf_GET
#define RX_X4_FEC2r_FEC_ERROR_CODE_ALL_PER_STREAMf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC2r_FEC_ERROR_CODE_ALL_PER_STREAMf_SET
#define READ_RX_X4_FEC2r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC2r
#define WRITE_RX_X4_FEC2r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC2r
#define MODIFY_RX_X4_FEC2r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC2r
#define READLN_RX_X4_FEC2r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC2r
#define WRITELN_RX_X4_FEC2r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC2r
#define WRITEALL_RX_X4_FEC2r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_FEC2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_FEC3
 * BLOCKS:   RX_X4_FEC_CONTROL
 * REGADDR:  0xc143
 * DESC:     User FEC Control 3 register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     ERROR_EN_OVR_PER_STREAM FEC error enable override control
 *     ERROR_EN_OVR_VAL_PER_STREAM FEC error enable override control value
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC3r (0x0000c143 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC3r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC3.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_FEC3r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec3[1];
	uint32_t _rx_x4_fec3;
} BCMI_TSCF_GEN3_XGXS_RX_X4_FEC3r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC3r_CLR(r) (r).rx_x4_fec3[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC3r_SET(r,d) (r).rx_x4_fec3[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC3r_GET(r) (r).rx_x4_fec3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC3r_ERROR_EN_OVR_VAL_PER_STREAMf_GET(r) ((((r).rx_x4_fec3[0]) >> 5) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC3r_ERROR_EN_OVR_VAL_PER_STREAMf_SET(r,f) (r).rx_x4_fec3[0]=(((r).rx_x4_fec3[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5)) | (31 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC3r_ERROR_EN_OVR_PER_STREAMf_GET(r) (((r).rx_x4_fec3[0]) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC3r_ERROR_EN_OVR_PER_STREAMf_SET(r,f) (r).rx_x4_fec3[0]=(((r).rx_x4_fec3[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access RX_X4_FEC3.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC3r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC3r,(_r._rx_x4_fec3))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC3r,(_r._rx_x4_fec3)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC3r,(_r._rx_x4_fec3))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC3r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec3))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC3r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec3))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC3r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC3r BCMI_TSCF_GEN3_XGXS_RX_X4_FEC3r
#define RX_X4_FEC3r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_FEC3r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_FEC3r_t RX_X4_FEC3r_t;
#define RX_X4_FEC3r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_FEC3r_CLR
#define RX_X4_FEC3r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC3r_SET
#define RX_X4_FEC3r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC3r_GET
#define RX_X4_FEC3r_ERROR_EN_OVR_VAL_PER_STREAMf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC3r_ERROR_EN_OVR_VAL_PER_STREAMf_GET
#define RX_X4_FEC3r_ERROR_EN_OVR_VAL_PER_STREAMf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC3r_ERROR_EN_OVR_VAL_PER_STREAMf_SET
#define RX_X4_FEC3r_ERROR_EN_OVR_PER_STREAMf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC3r_ERROR_EN_OVR_PER_STREAMf_GET
#define RX_X4_FEC3r_ERROR_EN_OVR_PER_STREAMf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC3r_ERROR_EN_OVR_PER_STREAMf_SET
#define READ_RX_X4_FEC3r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC3r
#define WRITE_RX_X4_FEC3r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC3r
#define MODIFY_RX_X4_FEC3r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC3r
#define READLN_RX_X4_FEC3r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC3r
#define WRITELN_RX_X4_FEC3r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC3r
#define WRITEALL_RX_X4_FEC3r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_FEC3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_BLKSYNC_STS
 * BLOCKS:   RX_X4_STATUS0
 * REGADDR:  0xc150
 * DESC:     block sync status
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     BS_STATUS        Block Lock: indicates that the lane has achieved block lock status.One bit per pseudo-logical (Bitmux output) lane.
 *     BS_PMD_LOCK      Indicates the pmd_lock value seen at the input to this lane.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_STSr (0x0000c150 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_STSr_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_BLKSYNC_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_STSr_s {
	uint32_t v[1];
	uint32_t rx_x4_blksync_sts[1];
	uint32_t _rx_x4_blksync_sts;
} BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_STSr_CLR(r) (r).rx_x4_blksync_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_STSr_SET(r,d) (r).rx_x4_blksync_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_STSr_GET(r) (r).rx_x4_blksync_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_STSr_BS_PMD_LOCKf_GET(r) ((((r).rx_x4_blksync_sts[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_STSr_BS_PMD_LOCKf_SET(r,f) (r).rx_x4_blksync_sts[0]=(((r).rx_x4_blksync_sts[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_STSr_BS_STATUSf_GET(r) (((r).rx_x4_blksync_sts[0]) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_STSr_BS_STATUSf_SET(r,f) (r).rx_x4_blksync_sts[0]=(((r).rx_x4_blksync_sts[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access RX_X4_BLKSYNC_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_BLKSYNC_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_STSr,(_r._rx_x4_blksync_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_BLKSYNC_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_STSr,(_r._rx_x4_blksync_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_BLKSYNC_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_STSr,(_r._rx_x4_blksync_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_BLKSYNC_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_blksync_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_BLKSYNC_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_blksync_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_BLKSYNC_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_blksync_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_BLKSYNC_STSr BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_STSr
#define RX_X4_BLKSYNC_STSr_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_STSr_t RX_X4_BLKSYNC_STSr_t;
#define RX_X4_BLKSYNC_STSr_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_STSr_CLR
#define RX_X4_BLKSYNC_STSr_SET BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_STSr_SET
#define RX_X4_BLKSYNC_STSr_GET BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_STSr_GET
#define RX_X4_BLKSYNC_STSr_BS_PMD_LOCKf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_STSr_BS_PMD_LOCKf_GET
#define RX_X4_BLKSYNC_STSr_BS_PMD_LOCKf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_STSr_BS_PMD_LOCKf_SET
#define RX_X4_BLKSYNC_STSr_BS_STATUSf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_STSr_BS_STATUSf_GET
#define RX_X4_BLKSYNC_STSr_BS_STATUSf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_STSr_BS_STATUSf_SET
#define READ_RX_X4_BLKSYNC_STSr BCMI_TSCF_GEN3_XGXS_READ_RX_X4_BLKSYNC_STSr
#define WRITE_RX_X4_BLKSYNC_STSr BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_BLKSYNC_STSr
#define MODIFY_RX_X4_BLKSYNC_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_BLKSYNC_STSr
#define READLN_RX_X4_BLKSYNC_STSr BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_BLKSYNC_STSr
#define WRITELN_RX_X4_BLKSYNC_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_BLKSYNC_STSr
#define WRITEALL_RX_X4_BLKSYNC_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_BLKSYNC_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_BLKSYNC_DBG0
 * BLOCKS:   RX_X4_STATUS0
 * REGADDR:  0xc151
 * DESC:     block sync state machine debug info
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     LANE0_DEBUG_INFO Debug info for pseudo-logical lane 0 blocksync SM.See Table 7: Debug Info Bit Defs.
 *     LANE1_DEBUG_INFO Debug info for pseudo-logical lane 1 blocksync SM.See Table 7: Debug Info Bit Defs.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG0r (0x0000c151 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG0r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_BLKSYNC_DBG0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG0r_s {
	uint32_t v[1];
	uint32_t rx_x4_blksync_dbg0[1];
	uint32_t _rx_x4_blksync_dbg0;
} BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG0r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG0r_CLR(r) (r).rx_x4_blksync_dbg0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG0r_SET(r,d) (r).rx_x4_blksync_dbg0[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG0r_GET(r) (r).rx_x4_blksync_dbg0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG0r_LANE1_DEBUG_INFOf_GET(r) ((((r).rx_x4_blksync_dbg0[0]) >> 8) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG0r_LANE1_DEBUG_INFOf_SET(r,f) (r).rx_x4_blksync_dbg0[0]=(((r).rx_x4_blksync_dbg0[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG0r_LANE0_DEBUG_INFOf_GET(r) (((r).rx_x4_blksync_dbg0[0]) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG0r_LANE0_DEBUG_INFOf_SET(r,f) (r).rx_x4_blksync_dbg0[0]=(((r).rx_x4_blksync_dbg0[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access RX_X4_BLKSYNC_DBG0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_BLKSYNC_DBG0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG0r,(_r._rx_x4_blksync_dbg0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_BLKSYNC_DBG0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG0r,(_r._rx_x4_blksync_dbg0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_BLKSYNC_DBG0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG0r,(_r._rx_x4_blksync_dbg0))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_BLKSYNC_DBG0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_blksync_dbg0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_BLKSYNC_DBG0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_blksync_dbg0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_BLKSYNC_DBG0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_blksync_dbg0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_BLKSYNC_DBG0r BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG0r
#define RX_X4_BLKSYNC_DBG0r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG0r_t RX_X4_BLKSYNC_DBG0r_t;
#define RX_X4_BLKSYNC_DBG0r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG0r_CLR
#define RX_X4_BLKSYNC_DBG0r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG0r_SET
#define RX_X4_BLKSYNC_DBG0r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG0r_GET
#define RX_X4_BLKSYNC_DBG0r_LANE1_DEBUG_INFOf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG0r_LANE1_DEBUG_INFOf_GET
#define RX_X4_BLKSYNC_DBG0r_LANE1_DEBUG_INFOf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG0r_LANE1_DEBUG_INFOf_SET
#define RX_X4_BLKSYNC_DBG0r_LANE0_DEBUG_INFOf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG0r_LANE0_DEBUG_INFOf_GET
#define RX_X4_BLKSYNC_DBG0r_LANE0_DEBUG_INFOf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG0r_LANE0_DEBUG_INFOf_SET
#define READ_RX_X4_BLKSYNC_DBG0r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_BLKSYNC_DBG0r
#define WRITE_RX_X4_BLKSYNC_DBG0r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_BLKSYNC_DBG0r
#define MODIFY_RX_X4_BLKSYNC_DBG0r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_BLKSYNC_DBG0r
#define READLN_RX_X4_BLKSYNC_DBG0r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_BLKSYNC_DBG0r
#define WRITELN_RX_X4_BLKSYNC_DBG0r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_BLKSYNC_DBG0r
#define WRITEALL_RX_X4_BLKSYNC_DBG0r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_BLKSYNC_DBG0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_BLKSYNC_DBG1
 * BLOCKS:   RX_X4_STATUS0
 * REGADDR:  0xc152
 * DESC:     block sync state machine debug info
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     LANE2_DEBUG_INFO Debug info for pseudo-logical lane 2 blocksync SM.See Table 7: Debug Info Bit Defs.
 *     LANE3_DEBUG_INFO Debug info for pseudo-logical lane 3 blocksync SM.See Table 7: Debug Info Bit Defs.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG1r (0x0000c152 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG1r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_BLKSYNC_DBG1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG1r_s {
	uint32_t v[1];
	uint32_t rx_x4_blksync_dbg1[1];
	uint32_t _rx_x4_blksync_dbg1;
} BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG1r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG1r_CLR(r) (r).rx_x4_blksync_dbg1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG1r_SET(r,d) (r).rx_x4_blksync_dbg1[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG1r_GET(r) (r).rx_x4_blksync_dbg1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG1r_LANE3_DEBUG_INFOf_GET(r) ((((r).rx_x4_blksync_dbg1[0]) >> 8) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG1r_LANE3_DEBUG_INFOf_SET(r,f) (r).rx_x4_blksync_dbg1[0]=(((r).rx_x4_blksync_dbg1[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG1r_LANE2_DEBUG_INFOf_GET(r) (((r).rx_x4_blksync_dbg1[0]) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG1r_LANE2_DEBUG_INFOf_SET(r,f) (r).rx_x4_blksync_dbg1[0]=(((r).rx_x4_blksync_dbg1[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access RX_X4_BLKSYNC_DBG1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_BLKSYNC_DBG1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG1r,(_r._rx_x4_blksync_dbg1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_BLKSYNC_DBG1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG1r,(_r._rx_x4_blksync_dbg1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_BLKSYNC_DBG1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG1r,(_r._rx_x4_blksync_dbg1))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_BLKSYNC_DBG1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_blksync_dbg1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_BLKSYNC_DBG1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_blksync_dbg1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_BLKSYNC_DBG1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_blksync_dbg1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_BLKSYNC_DBG1r BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG1r
#define RX_X4_BLKSYNC_DBG1r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG1r_t RX_X4_BLKSYNC_DBG1r_t;
#define RX_X4_BLKSYNC_DBG1r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG1r_CLR
#define RX_X4_BLKSYNC_DBG1r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG1r_SET
#define RX_X4_BLKSYNC_DBG1r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG1r_GET
#define RX_X4_BLKSYNC_DBG1r_LANE3_DEBUG_INFOf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG1r_LANE3_DEBUG_INFOf_GET
#define RX_X4_BLKSYNC_DBG1r_LANE3_DEBUG_INFOf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG1r_LANE3_DEBUG_INFOf_SET
#define RX_X4_BLKSYNC_DBG1r_LANE2_DEBUG_INFOf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG1r_LANE2_DEBUG_INFOf_GET
#define RX_X4_BLKSYNC_DBG1r_LANE2_DEBUG_INFOf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG1r_LANE2_DEBUG_INFOf_SET
#define READ_RX_X4_BLKSYNC_DBG1r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_BLKSYNC_DBG1r
#define WRITE_RX_X4_BLKSYNC_DBG1r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_BLKSYNC_DBG1r
#define MODIFY_RX_X4_BLKSYNC_DBG1r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_BLKSYNC_DBG1r
#define READLN_RX_X4_BLKSYNC_DBG1r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_BLKSYNC_DBG1r
#define WRITELN_RX_X4_BLKSYNC_DBG1r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_BLKSYNC_DBG1r
#define WRITEALL_RX_X4_BLKSYNC_DBG1r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_BLKSYNC_DBG1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_BLKSYNC_DBG2
 * BLOCKS:   RX_X4_STATUS0
 * REGADDR:  0xc153
 * DESC:     block sync state machine debug info
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     LANE4_DEBUG_INFO Debug info for pseudo-logical lane 4 blocksync SM.See Table 7: Debug Info Bit Defs.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG2r (0x0000c153 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_BLKSYNC_DBG2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG2r_s {
	uint32_t v[1];
	uint32_t rx_x4_blksync_dbg2[1];
	uint32_t _rx_x4_blksync_dbg2;
} BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG2r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG2r_CLR(r) (r).rx_x4_blksync_dbg2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG2r_SET(r,d) (r).rx_x4_blksync_dbg2[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG2r_GET(r) (r).rx_x4_blksync_dbg2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG2r_LANE4_DEBUG_INFOf_GET(r) (((r).rx_x4_blksync_dbg2[0]) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG2r_LANE4_DEBUG_INFOf_SET(r,f) (r).rx_x4_blksync_dbg2[0]=(((r).rx_x4_blksync_dbg2[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access RX_X4_BLKSYNC_DBG2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_BLKSYNC_DBG2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG2r,(_r._rx_x4_blksync_dbg2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_BLKSYNC_DBG2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG2r,(_r._rx_x4_blksync_dbg2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_BLKSYNC_DBG2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG2r,(_r._rx_x4_blksync_dbg2))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_BLKSYNC_DBG2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_blksync_dbg2))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_BLKSYNC_DBG2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_blksync_dbg2))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_BLKSYNC_DBG2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_blksync_dbg2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_BLKSYNC_DBG2r BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG2r
#define RX_X4_BLKSYNC_DBG2r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG2r_t RX_X4_BLKSYNC_DBG2r_t;
#define RX_X4_BLKSYNC_DBG2r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG2r_CLR
#define RX_X4_BLKSYNC_DBG2r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG2r_SET
#define RX_X4_BLKSYNC_DBG2r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG2r_GET
#define RX_X4_BLKSYNC_DBG2r_LANE4_DEBUG_INFOf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG2r_LANE4_DEBUG_INFOf_GET
#define RX_X4_BLKSYNC_DBG2r_LANE4_DEBUG_INFOf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG2r_LANE4_DEBUG_INFOf_SET
#define READ_RX_X4_BLKSYNC_DBG2r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_BLKSYNC_DBG2r
#define WRITE_RX_X4_BLKSYNC_DBG2r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_BLKSYNC_DBG2r
#define MODIFY_RX_X4_BLKSYNC_DBG2r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_BLKSYNC_DBG2r
#define READLN_RX_X4_BLKSYNC_DBG2r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_BLKSYNC_DBG2r
#define WRITELN_RX_X4_BLKSYNC_DBG2r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_BLKSYNC_DBG2r
#define WRITEALL_RX_X4_BLKSYNC_DBG2r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_BLKSYNC_DBG2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_BLKSYNC_DBG2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_BLK_LOCK_LATCH_STS
 * BLOCKS:   RX_X4_STATUS0
 * REGADDR:  0xc154
 * DESC:     Latched status of PCS information
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BLOCK_LOCK_LL_0  BLOCK Lock has transitioned low since last read (for Pseudo-logical lane 0).Clear on read
 *     BLOCK_LOCK_LH_0  BLOCK Lock has transitioned high since last read (for Pseudo-logical lane 0).Clear on read
 *     BLOCK_LOCK_LL_1  BLOCK Lock has transitioned low since last read (for Pseudo-logical lane 1).Clear on read
 *     BLOCK_LOCK_LH_1  BLOCK Lock has transitioned high since last read (for Pseudo-logical lane 1).Clear on read
 *     BLOCK_LOCK_LL_2  BLOCK Lock has transitioned low since last read (for Pseudo-logical lane 2).Clear on read
 *     BLOCK_LOCK_LH_2  BLOCK Lock has transitioned high since last read (for Pseudo-logical lane 2).Clear on read
 *     BLOCK_LOCK_LL_3  BLOCK Lock has transitioned low since last read (for Pseudo-logical lane 3).Clear on read
 *     BLOCK_LOCK_LH_3  BLOCK Lock has transitioned high since last read (for Pseudo-logical lane 3).Clear on read
 *     BLOCK_LOCK_LL_4  BLOCK Lock has transitioned low since last read (for Pseudo-logical lane 4).Clear on read
 *     BLOCK_LOCK_LH_4  BLOCK Lock has transitioned high since last read (for Pseudo-logical lane 4).Clear on read
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr (0x0000c154 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_BLK_LOCK_LATCH_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr_s {
	uint32_t v[1];
	uint32_t rx_x4_blk_lock_latch_sts[1];
	uint32_t _rx_x4_blk_lock_latch_sts;
} BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr_CLR(r) (r).rx_x4_blk_lock_latch_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr_SET(r,d) (r).rx_x4_blk_lock_latch_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr_GET(r) (r).rx_x4_blk_lock_latch_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LH_4f_GET(r) ((((r).rx_x4_blk_lock_latch_sts[0]) >> 9) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LH_4f_SET(r,f) (r).rx_x4_blk_lock_latch_sts[0]=(((r).rx_x4_blk_lock_latch_sts[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LL_4f_GET(r) ((((r).rx_x4_blk_lock_latch_sts[0]) >> 8) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LL_4f_SET(r,f) (r).rx_x4_blk_lock_latch_sts[0]=(((r).rx_x4_blk_lock_latch_sts[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LH_3f_GET(r) ((((r).rx_x4_blk_lock_latch_sts[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LH_3f_SET(r,f) (r).rx_x4_blk_lock_latch_sts[0]=(((r).rx_x4_blk_lock_latch_sts[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LL_3f_GET(r) ((((r).rx_x4_blk_lock_latch_sts[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LL_3f_SET(r,f) (r).rx_x4_blk_lock_latch_sts[0]=(((r).rx_x4_blk_lock_latch_sts[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LH_2f_GET(r) ((((r).rx_x4_blk_lock_latch_sts[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LH_2f_SET(r,f) (r).rx_x4_blk_lock_latch_sts[0]=(((r).rx_x4_blk_lock_latch_sts[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LL_2f_GET(r) ((((r).rx_x4_blk_lock_latch_sts[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LL_2f_SET(r,f) (r).rx_x4_blk_lock_latch_sts[0]=(((r).rx_x4_blk_lock_latch_sts[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LH_1f_GET(r) ((((r).rx_x4_blk_lock_latch_sts[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LH_1f_SET(r,f) (r).rx_x4_blk_lock_latch_sts[0]=(((r).rx_x4_blk_lock_latch_sts[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LL_1f_GET(r) ((((r).rx_x4_blk_lock_latch_sts[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LL_1f_SET(r,f) (r).rx_x4_blk_lock_latch_sts[0]=(((r).rx_x4_blk_lock_latch_sts[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LH_0f_GET(r) ((((r).rx_x4_blk_lock_latch_sts[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LH_0f_SET(r,f) (r).rx_x4_blk_lock_latch_sts[0]=(((r).rx_x4_blk_lock_latch_sts[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LL_0f_GET(r) (((r).rx_x4_blk_lock_latch_sts[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LL_0f_SET(r,f) (r).rx_x4_blk_lock_latch_sts[0]=(((r).rx_x4_blk_lock_latch_sts[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_X4_BLK_LOCK_LATCH_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_BLK_LOCK_LATCH_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr,(_r._rx_x4_blk_lock_latch_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_BLK_LOCK_LATCH_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr,(_r._rx_x4_blk_lock_latch_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_BLK_LOCK_LATCH_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr,(_r._rx_x4_blk_lock_latch_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_BLK_LOCK_LATCH_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_blk_lock_latch_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_BLK_LOCK_LATCH_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_blk_lock_latch_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_BLK_LOCK_LATCH_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_blk_lock_latch_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_BLK_LOCK_LATCH_STSr BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr
#define RX_X4_BLK_LOCK_LATCH_STSr_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr_t RX_X4_BLK_LOCK_LATCH_STSr_t;
#define RX_X4_BLK_LOCK_LATCH_STSr_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr_CLR
#define RX_X4_BLK_LOCK_LATCH_STSr_SET BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr_SET
#define RX_X4_BLK_LOCK_LATCH_STSr_GET BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr_GET
#define RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LH_4f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LH_4f_GET
#define RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LH_4f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LH_4f_SET
#define RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LL_4f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LL_4f_GET
#define RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LL_4f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LL_4f_SET
#define RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LH_3f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LH_3f_GET
#define RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LH_3f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LH_3f_SET
#define RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LL_3f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LL_3f_GET
#define RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LL_3f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LL_3f_SET
#define RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LH_2f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LH_2f_GET
#define RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LH_2f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LH_2f_SET
#define RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LL_2f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LL_2f_GET
#define RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LL_2f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LL_2f_SET
#define RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LH_1f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LH_1f_GET
#define RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LH_1f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LH_1f_SET
#define RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LL_1f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LL_1f_GET
#define RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LL_1f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LL_1f_SET
#define RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LH_0f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LH_0f_GET
#define RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LH_0f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LH_0f_SET
#define RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LL_0f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LL_0f_GET
#define RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LL_0f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr_BLOCK_LOCK_LL_0f_SET
#define READ_RX_X4_BLK_LOCK_LATCH_STSr BCMI_TSCF_GEN3_XGXS_READ_RX_X4_BLK_LOCK_LATCH_STSr
#define WRITE_RX_X4_BLK_LOCK_LATCH_STSr BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_BLK_LOCK_LATCH_STSr
#define MODIFY_RX_X4_BLK_LOCK_LATCH_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_BLK_LOCK_LATCH_STSr
#define READLN_RX_X4_BLK_LOCK_LATCH_STSr BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_BLK_LOCK_LATCH_STSr
#define WRITELN_RX_X4_BLK_LOCK_LATCH_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_BLK_LOCK_LATCH_STSr
#define WRITEALL_RX_X4_BLK_LOCK_LATCH_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_BLK_LOCK_LATCH_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_BLK_LOCK_LATCH_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_AM_LOCK_LATCH_STS
 * BLOCKS:   RX_X4_STATUS0
 * REGADDR:  0xc155
 * DESC:     Latched status of PCS information
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AM_LOCK_LL_0     AM Lock has transitioned low since last read (for Pseudo-logical lane 0).Clear on read
 *     AM_LOCK_LH_0     AM Lock has transitioned high since last read (for Pseudo-logical lane 0).Clear on read
 *     AM_LOCK_LL_1     AM Lock has transitioned low since last read (for Pseudo-logical lane 1).Clear on read
 *     AM_LOCK_LH_1     AM Lock has transitioned high since last read (for Pseudo-logical lane 1).Clear on read
 *     AM_LOCK_LL_2     AM Lock has transitioned low since last read (for Pseudo-logical lane 2).Clear on read
 *     AM_LOCK_LH_2     AM Lock has transitioned high since last read (for Pseudo-logical lane 2).Clear on read
 *     AM_LOCK_LL_3     AM Lock has transitioned low since last read (for Pseudo-logical lane 3).Clear on read
 *     AM_LOCK_LH_3     AM Lock has transitioned high since last read (for Pseudo-logical lane 3).Clear on read
 *     AM_LOCK_LL_4     AM Lock has transitioned low since last read (for Pseudo-logical lane 4).Clear on read
 *     AM_LOCK_LH_4     AM Lock has transitioned high since last read (for Pseudo-logical lane 4).Clear on read
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr (0x0000c155 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_AM_LOCK_LATCH_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr_s {
	uint32_t v[1];
	uint32_t rx_x4_am_lock_latch_sts[1];
	uint32_t _rx_x4_am_lock_latch_sts;
} BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr_CLR(r) (r).rx_x4_am_lock_latch_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr_SET(r,d) (r).rx_x4_am_lock_latch_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr_GET(r) (r).rx_x4_am_lock_latch_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LH_4f_GET(r) ((((r).rx_x4_am_lock_latch_sts[0]) >> 9) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LH_4f_SET(r,f) (r).rx_x4_am_lock_latch_sts[0]=(((r).rx_x4_am_lock_latch_sts[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LL_4f_GET(r) ((((r).rx_x4_am_lock_latch_sts[0]) >> 8) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LL_4f_SET(r,f) (r).rx_x4_am_lock_latch_sts[0]=(((r).rx_x4_am_lock_latch_sts[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LH_3f_GET(r) ((((r).rx_x4_am_lock_latch_sts[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LH_3f_SET(r,f) (r).rx_x4_am_lock_latch_sts[0]=(((r).rx_x4_am_lock_latch_sts[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LL_3f_GET(r) ((((r).rx_x4_am_lock_latch_sts[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LL_3f_SET(r,f) (r).rx_x4_am_lock_latch_sts[0]=(((r).rx_x4_am_lock_latch_sts[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LH_2f_GET(r) ((((r).rx_x4_am_lock_latch_sts[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LH_2f_SET(r,f) (r).rx_x4_am_lock_latch_sts[0]=(((r).rx_x4_am_lock_latch_sts[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LL_2f_GET(r) ((((r).rx_x4_am_lock_latch_sts[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LL_2f_SET(r,f) (r).rx_x4_am_lock_latch_sts[0]=(((r).rx_x4_am_lock_latch_sts[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LH_1f_GET(r) ((((r).rx_x4_am_lock_latch_sts[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LH_1f_SET(r,f) (r).rx_x4_am_lock_latch_sts[0]=(((r).rx_x4_am_lock_latch_sts[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LL_1f_GET(r) ((((r).rx_x4_am_lock_latch_sts[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LL_1f_SET(r,f) (r).rx_x4_am_lock_latch_sts[0]=(((r).rx_x4_am_lock_latch_sts[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LH_0f_GET(r) ((((r).rx_x4_am_lock_latch_sts[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LH_0f_SET(r,f) (r).rx_x4_am_lock_latch_sts[0]=(((r).rx_x4_am_lock_latch_sts[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LL_0f_GET(r) (((r).rx_x4_am_lock_latch_sts[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LL_0f_SET(r,f) (r).rx_x4_am_lock_latch_sts[0]=(((r).rx_x4_am_lock_latch_sts[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_X4_AM_LOCK_LATCH_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_AM_LOCK_LATCH_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr,(_r._rx_x4_am_lock_latch_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_AM_LOCK_LATCH_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr,(_r._rx_x4_am_lock_latch_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_AM_LOCK_LATCH_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr,(_r._rx_x4_am_lock_latch_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_AM_LOCK_LATCH_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_am_lock_latch_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_AM_LOCK_LATCH_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_am_lock_latch_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_AM_LOCK_LATCH_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_am_lock_latch_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_AM_LOCK_LATCH_STSr BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr
#define RX_X4_AM_LOCK_LATCH_STSr_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr_t RX_X4_AM_LOCK_LATCH_STSr_t;
#define RX_X4_AM_LOCK_LATCH_STSr_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr_CLR
#define RX_X4_AM_LOCK_LATCH_STSr_SET BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr_SET
#define RX_X4_AM_LOCK_LATCH_STSr_GET BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr_GET
#define RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LH_4f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LH_4f_GET
#define RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LH_4f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LH_4f_SET
#define RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LL_4f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LL_4f_GET
#define RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LL_4f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LL_4f_SET
#define RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LH_3f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LH_3f_GET
#define RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LH_3f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LH_3f_SET
#define RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LL_3f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LL_3f_GET
#define RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LL_3f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LL_3f_SET
#define RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LH_2f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LH_2f_GET
#define RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LH_2f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LH_2f_SET
#define RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LL_2f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LL_2f_GET
#define RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LL_2f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LL_2f_SET
#define RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LH_1f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LH_1f_GET
#define RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LH_1f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LH_1f_SET
#define RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LL_1f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LL_1f_GET
#define RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LL_1f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LL_1f_SET
#define RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LH_0f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LH_0f_GET
#define RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LH_0f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LH_0f_SET
#define RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LL_0f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LL_0f_GET
#define RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LL_0f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr_AM_LOCK_LL_0f_SET
#define READ_RX_X4_AM_LOCK_LATCH_STSr BCMI_TSCF_GEN3_XGXS_READ_RX_X4_AM_LOCK_LATCH_STSr
#define WRITE_RX_X4_AM_LOCK_LATCH_STSr BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_AM_LOCK_LATCH_STSr
#define MODIFY_RX_X4_AM_LOCK_LATCH_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_AM_LOCK_LATCH_STSr
#define READLN_RX_X4_AM_LOCK_LATCH_STSr BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_AM_LOCK_LATCH_STSr
#define WRITELN_RX_X4_AM_LOCK_LATCH_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_AM_LOCK_LATCH_STSr
#define WRITEALL_RX_X4_AM_LOCK_LATCH_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_AM_LOCK_LATCH_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_AM_LOCK_LATCH_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_PCS_LIVE_STS0
 * BLOCKS:   RX_X4_STATUS0
 * REGADDR:  0xc156
 * DESC:     Live status of PCS information
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     AM_LOCK_0        AM Lock status for pseudo-logical lane 0
 *     AM_LOCK_1        AM Lock status for pseudo-logical lane 1
 *     AM_LOCK_2        AM Lock status for pseudo-logical lane 2
 *     AM_LOCK_3        AM Lock status for pseudo-logical lane 3
 *     AM_LOCK_4        AM Lock status for pseudo-logical lane 4
 *     BLOCK_LOCK_0     BLOCK Lock status for pseudo-logical lane 0
 *     BLOCK_LOCK_1     BLOCK Lock status for pseudo-logical lane 1
 *     BLOCK_LOCK_2     BLOCK Lock status for pseudo-logical lane 2
 *     BLOCK_LOCK_3     BLOCK Lock status for pseudo-logical lane 3
 *     BLOCK_LOCK_4     BLOCK Lock status for pseudo-logical lane 4
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r (0x0000c156 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_PCS_LIVE_STS0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r_s {
	uint32_t v[1];
	uint32_t rx_x4_pcs_live_sts0[1];
	uint32_t _rx_x4_pcs_live_sts0;
} BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r_CLR(r) (r).rx_x4_pcs_live_sts0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r_SET(r,d) (r).rx_x4_pcs_live_sts0[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r_GET(r) (r).rx_x4_pcs_live_sts0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r_BLOCK_LOCK_4f_GET(r) ((((r).rx_x4_pcs_live_sts0[0]) >> 9) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r_BLOCK_LOCK_4f_SET(r,f) (r).rx_x4_pcs_live_sts0[0]=(((r).rx_x4_pcs_live_sts0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r_BLOCK_LOCK_3f_GET(r) ((((r).rx_x4_pcs_live_sts0[0]) >> 8) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r_BLOCK_LOCK_3f_SET(r,f) (r).rx_x4_pcs_live_sts0[0]=(((r).rx_x4_pcs_live_sts0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r_BLOCK_LOCK_2f_GET(r) ((((r).rx_x4_pcs_live_sts0[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r_BLOCK_LOCK_2f_SET(r,f) (r).rx_x4_pcs_live_sts0[0]=(((r).rx_x4_pcs_live_sts0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r_BLOCK_LOCK_1f_GET(r) ((((r).rx_x4_pcs_live_sts0[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r_BLOCK_LOCK_1f_SET(r,f) (r).rx_x4_pcs_live_sts0[0]=(((r).rx_x4_pcs_live_sts0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r_BLOCK_LOCK_0f_GET(r) ((((r).rx_x4_pcs_live_sts0[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r_BLOCK_LOCK_0f_SET(r,f) (r).rx_x4_pcs_live_sts0[0]=(((r).rx_x4_pcs_live_sts0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r_AM_LOCK_4f_GET(r) ((((r).rx_x4_pcs_live_sts0[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r_AM_LOCK_4f_SET(r,f) (r).rx_x4_pcs_live_sts0[0]=(((r).rx_x4_pcs_live_sts0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r_AM_LOCK_3f_GET(r) ((((r).rx_x4_pcs_live_sts0[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r_AM_LOCK_3f_SET(r,f) (r).rx_x4_pcs_live_sts0[0]=(((r).rx_x4_pcs_live_sts0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r_AM_LOCK_2f_GET(r) ((((r).rx_x4_pcs_live_sts0[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r_AM_LOCK_2f_SET(r,f) (r).rx_x4_pcs_live_sts0[0]=(((r).rx_x4_pcs_live_sts0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r_AM_LOCK_1f_GET(r) ((((r).rx_x4_pcs_live_sts0[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r_AM_LOCK_1f_SET(r,f) (r).rx_x4_pcs_live_sts0[0]=(((r).rx_x4_pcs_live_sts0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r_AM_LOCK_0f_GET(r) (((r).rx_x4_pcs_live_sts0[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r_AM_LOCK_0f_SET(r,f) (r).rx_x4_pcs_live_sts0[0]=(((r).rx_x4_pcs_live_sts0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_X4_PCS_LIVE_STS0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_PCS_LIVE_STS0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r,(_r._rx_x4_pcs_live_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_PCS_LIVE_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r,(_r._rx_x4_pcs_live_sts0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_PCS_LIVE_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r,(_r._rx_x4_pcs_live_sts0))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_PCS_LIVE_STS0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_pcs_live_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_PCS_LIVE_STS0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_pcs_live_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_PCS_LIVE_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_pcs_live_sts0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_PCS_LIVE_STS0r BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r
#define RX_X4_PCS_LIVE_STS0r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r_t RX_X4_PCS_LIVE_STS0r_t;
#define RX_X4_PCS_LIVE_STS0r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r_CLR
#define RX_X4_PCS_LIVE_STS0r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r_SET
#define RX_X4_PCS_LIVE_STS0r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r_GET
#define RX_X4_PCS_LIVE_STS0r_BLOCK_LOCK_4f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r_BLOCK_LOCK_4f_GET
#define RX_X4_PCS_LIVE_STS0r_BLOCK_LOCK_4f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r_BLOCK_LOCK_4f_SET
#define RX_X4_PCS_LIVE_STS0r_BLOCK_LOCK_3f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r_BLOCK_LOCK_3f_GET
#define RX_X4_PCS_LIVE_STS0r_BLOCK_LOCK_3f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r_BLOCK_LOCK_3f_SET
#define RX_X4_PCS_LIVE_STS0r_BLOCK_LOCK_2f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r_BLOCK_LOCK_2f_GET
#define RX_X4_PCS_LIVE_STS0r_BLOCK_LOCK_2f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r_BLOCK_LOCK_2f_SET
#define RX_X4_PCS_LIVE_STS0r_BLOCK_LOCK_1f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r_BLOCK_LOCK_1f_GET
#define RX_X4_PCS_LIVE_STS0r_BLOCK_LOCK_1f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r_BLOCK_LOCK_1f_SET
#define RX_X4_PCS_LIVE_STS0r_BLOCK_LOCK_0f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r_BLOCK_LOCK_0f_GET
#define RX_X4_PCS_LIVE_STS0r_BLOCK_LOCK_0f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r_BLOCK_LOCK_0f_SET
#define RX_X4_PCS_LIVE_STS0r_AM_LOCK_4f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r_AM_LOCK_4f_GET
#define RX_X4_PCS_LIVE_STS0r_AM_LOCK_4f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r_AM_LOCK_4f_SET
#define RX_X4_PCS_LIVE_STS0r_AM_LOCK_3f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r_AM_LOCK_3f_GET
#define RX_X4_PCS_LIVE_STS0r_AM_LOCK_3f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r_AM_LOCK_3f_SET
#define RX_X4_PCS_LIVE_STS0r_AM_LOCK_2f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r_AM_LOCK_2f_GET
#define RX_X4_PCS_LIVE_STS0r_AM_LOCK_2f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r_AM_LOCK_2f_SET
#define RX_X4_PCS_LIVE_STS0r_AM_LOCK_1f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r_AM_LOCK_1f_GET
#define RX_X4_PCS_LIVE_STS0r_AM_LOCK_1f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r_AM_LOCK_1f_SET
#define RX_X4_PCS_LIVE_STS0r_AM_LOCK_0f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r_AM_LOCK_0f_GET
#define RX_X4_PCS_LIVE_STS0r_AM_LOCK_0f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r_AM_LOCK_0f_SET
#define READ_RX_X4_PCS_LIVE_STS0r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_PCS_LIVE_STS0r
#define WRITE_RX_X4_PCS_LIVE_STS0r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_PCS_LIVE_STS0r
#define MODIFY_RX_X4_PCS_LIVE_STS0r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_PCS_LIVE_STS0r
#define READLN_RX_X4_PCS_LIVE_STS0r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_PCS_LIVE_STS0r
#define WRITELN_RX_X4_PCS_LIVE_STS0r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_PCS_LIVE_STS0r
#define WRITEALL_RX_X4_PCS_LIVE_STS0r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_PCS_LIVE_STS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_BIPCNT0
 * BLOCKS:   RX_X4_STATUS0
 * REGADDR:  0xc157
 * DESC:     BIP error count register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BIP_ERROR_COUNT_0 CL82 BIP error count for pseudo-logical lane 0.Saturates at 8'hFF. Clear on read.
 *     BIP_ERROR_COUNT_1 CL82 BIP error count for pseudo-logical lane 1.Saturates at 8'hFF. Clear on read.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT0r (0x0000c157 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT0r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_BIPCNT0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT0r_s {
	uint32_t v[1];
	uint32_t rx_x4_bipcnt0[1];
	uint32_t _rx_x4_bipcnt0;
} BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT0r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT0r_CLR(r) (r).rx_x4_bipcnt0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT0r_SET(r,d) (r).rx_x4_bipcnt0[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT0r_GET(r) (r).rx_x4_bipcnt0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT0r_BIP_ERROR_COUNT_1f_GET(r) ((((r).rx_x4_bipcnt0[0]) >> 8) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT0r_BIP_ERROR_COUNT_1f_SET(r,f) (r).rx_x4_bipcnt0[0]=(((r).rx_x4_bipcnt0[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT0r_BIP_ERROR_COUNT_0f_GET(r) (((r).rx_x4_bipcnt0[0]) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT0r_BIP_ERROR_COUNT_0f_SET(r,f) (r).rx_x4_bipcnt0[0]=(((r).rx_x4_bipcnt0[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access RX_X4_BIPCNT0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_BIPCNT0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT0r,(_r._rx_x4_bipcnt0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_BIPCNT0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT0r,(_r._rx_x4_bipcnt0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_BIPCNT0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT0r,(_r._rx_x4_bipcnt0))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_BIPCNT0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_bipcnt0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_BIPCNT0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_bipcnt0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_BIPCNT0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_bipcnt0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_BIPCNT0r BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT0r
#define RX_X4_BIPCNT0r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT0r_t RX_X4_BIPCNT0r_t;
#define RX_X4_BIPCNT0r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT0r_CLR
#define RX_X4_BIPCNT0r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT0r_SET
#define RX_X4_BIPCNT0r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT0r_GET
#define RX_X4_BIPCNT0r_BIP_ERROR_COUNT_1f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT0r_BIP_ERROR_COUNT_1f_GET
#define RX_X4_BIPCNT0r_BIP_ERROR_COUNT_1f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT0r_BIP_ERROR_COUNT_1f_SET
#define RX_X4_BIPCNT0r_BIP_ERROR_COUNT_0f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT0r_BIP_ERROR_COUNT_0f_GET
#define RX_X4_BIPCNT0r_BIP_ERROR_COUNT_0f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT0r_BIP_ERROR_COUNT_0f_SET
#define READ_RX_X4_BIPCNT0r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_BIPCNT0r
#define WRITE_RX_X4_BIPCNT0r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_BIPCNT0r
#define MODIFY_RX_X4_BIPCNT0r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_BIPCNT0r
#define READLN_RX_X4_BIPCNT0r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_BIPCNT0r
#define WRITELN_RX_X4_BIPCNT0r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_BIPCNT0r
#define WRITEALL_RX_X4_BIPCNT0r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_BIPCNT0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_BIPCNT1
 * BLOCKS:   RX_X4_STATUS0
 * REGADDR:  0xc158
 * DESC:     BIP error count register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BIP_ERROR_COUNT_2 CL82 BIP error count for pseudo-logical lane 2.Saturates at 8'hFF. Clear on read.
 *     BIP_ERROR_COUNT_3 CL82 BIP error count for pseudo-logical lane 3.Saturates at 8'hFF. Clear on read.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT1r (0x0000c158 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT1r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_BIPCNT1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT1r_s {
	uint32_t v[1];
	uint32_t rx_x4_bipcnt1[1];
	uint32_t _rx_x4_bipcnt1;
} BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT1r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT1r_CLR(r) (r).rx_x4_bipcnt1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT1r_SET(r,d) (r).rx_x4_bipcnt1[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT1r_GET(r) (r).rx_x4_bipcnt1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT1r_BIP_ERROR_COUNT_3f_GET(r) ((((r).rx_x4_bipcnt1[0]) >> 8) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT1r_BIP_ERROR_COUNT_3f_SET(r,f) (r).rx_x4_bipcnt1[0]=(((r).rx_x4_bipcnt1[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT1r_BIP_ERROR_COUNT_2f_GET(r) (((r).rx_x4_bipcnt1[0]) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT1r_BIP_ERROR_COUNT_2f_SET(r,f) (r).rx_x4_bipcnt1[0]=(((r).rx_x4_bipcnt1[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access RX_X4_BIPCNT1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_BIPCNT1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT1r,(_r._rx_x4_bipcnt1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_BIPCNT1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT1r,(_r._rx_x4_bipcnt1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_BIPCNT1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT1r,(_r._rx_x4_bipcnt1))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_BIPCNT1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_bipcnt1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_BIPCNT1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_bipcnt1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_BIPCNT1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_bipcnt1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_BIPCNT1r BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT1r
#define RX_X4_BIPCNT1r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT1r_t RX_X4_BIPCNT1r_t;
#define RX_X4_BIPCNT1r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT1r_CLR
#define RX_X4_BIPCNT1r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT1r_SET
#define RX_X4_BIPCNT1r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT1r_GET
#define RX_X4_BIPCNT1r_BIP_ERROR_COUNT_3f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT1r_BIP_ERROR_COUNT_3f_GET
#define RX_X4_BIPCNT1r_BIP_ERROR_COUNT_3f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT1r_BIP_ERROR_COUNT_3f_SET
#define RX_X4_BIPCNT1r_BIP_ERROR_COUNT_2f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT1r_BIP_ERROR_COUNT_2f_GET
#define RX_X4_BIPCNT1r_BIP_ERROR_COUNT_2f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT1r_BIP_ERROR_COUNT_2f_SET
#define READ_RX_X4_BIPCNT1r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_BIPCNT1r
#define WRITE_RX_X4_BIPCNT1r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_BIPCNT1r
#define MODIFY_RX_X4_BIPCNT1r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_BIPCNT1r
#define READLN_RX_X4_BIPCNT1r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_BIPCNT1r
#define WRITELN_RX_X4_BIPCNT1r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_BIPCNT1r
#define WRITEALL_RX_X4_BIPCNT1r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_BIPCNT1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_BIPCNT2
 * BLOCKS:   RX_X4_STATUS0
 * REGADDR:  0xc159
 * DESC:     BIP error count register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BIP_ERROR_COUNT_4 CL82 BIP error count for pseudo-logical lane 4.Saturates at 8'hFF. Clear on read.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT2r (0x0000c159 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_BIPCNT2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT2r_s {
	uint32_t v[1];
	uint32_t rx_x4_bipcnt2[1];
	uint32_t _rx_x4_bipcnt2;
} BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT2r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT2r_CLR(r) (r).rx_x4_bipcnt2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT2r_SET(r,d) (r).rx_x4_bipcnt2[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT2r_GET(r) (r).rx_x4_bipcnt2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT2r_BIP_ERROR_COUNT_4f_GET(r) (((r).rx_x4_bipcnt2[0]) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT2r_BIP_ERROR_COUNT_4f_SET(r,f) (r).rx_x4_bipcnt2[0]=(((r).rx_x4_bipcnt2[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access RX_X4_BIPCNT2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_BIPCNT2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT2r,(_r._rx_x4_bipcnt2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_BIPCNT2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT2r,(_r._rx_x4_bipcnt2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_BIPCNT2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT2r,(_r._rx_x4_bipcnt2))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_BIPCNT2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_bipcnt2))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_BIPCNT2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_bipcnt2))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_BIPCNT2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_bipcnt2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_BIPCNT2r BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT2r
#define RX_X4_BIPCNT2r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT2r_t RX_X4_BIPCNT2r_t;
#define RX_X4_BIPCNT2r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT2r_CLR
#define RX_X4_BIPCNT2r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT2r_SET
#define RX_X4_BIPCNT2r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT2r_GET
#define RX_X4_BIPCNT2r_BIP_ERROR_COUNT_4f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT2r_BIP_ERROR_COUNT_4f_GET
#define RX_X4_BIPCNT2r_BIP_ERROR_COUNT_4f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT2r_BIP_ERROR_COUNT_4f_SET
#define READ_RX_X4_BIPCNT2r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_BIPCNT2r
#define WRITE_RX_X4_BIPCNT2r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_BIPCNT2r
#define MODIFY_RX_X4_BIPCNT2r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_BIPCNT2r
#define READLN_RX_X4_BIPCNT2r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_BIPCNT2r
#define WRITELN_RX_X4_BIPCNT2r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_BIPCNT2r
#define WRITEALL_RX_X4_BIPCNT2r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_BIPCNT2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_BIPCNT2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_PSLL_TO_VL_MAP0
 * BLOCKS:   RX_X4_STATUS0
 * REGADDR:  0xc15a
 * DESC:     Pseudo-logical lane to virtual lane mapping
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     PSLL0_TO_VL_MAPPING Pseudo-logical lane 0 to virtual lane mapping.
 *     PSLL1_TO_VL_MAPPING Pseudo-logical lane 1 to virtual lane mapping.
 *     PSLL2_TO_VL_MAPPING Pseudo-logical lane 2 to virtual lane mapping.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP0r (0x0000c15a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP0r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_PSLL_TO_VL_MAP0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP0r_s {
	uint32_t v[1];
	uint32_t rx_x4_psll_to_vl_map0[1];
	uint32_t _rx_x4_psll_to_vl_map0;
} BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP0r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP0r_CLR(r) (r).rx_x4_psll_to_vl_map0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP0r_SET(r,d) (r).rx_x4_psll_to_vl_map0[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP0r_GET(r) (r).rx_x4_psll_to_vl_map0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP0r_PSLL2_TO_VL_MAPPINGf_GET(r) ((((r).rx_x4_psll_to_vl_map0[0]) >> 10) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP0r_PSLL2_TO_VL_MAPPINGf_SET(r,f) (r).rx_x4_psll_to_vl_map0[0]=(((r).rx_x4_psll_to_vl_map0[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10)) | (31 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP0r_PSLL1_TO_VL_MAPPINGf_GET(r) ((((r).rx_x4_psll_to_vl_map0[0]) >> 5) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP0r_PSLL1_TO_VL_MAPPINGf_SET(r,f) (r).rx_x4_psll_to_vl_map0[0]=(((r).rx_x4_psll_to_vl_map0[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5)) | (31 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP0r_PSLL0_TO_VL_MAPPINGf_GET(r) (((r).rx_x4_psll_to_vl_map0[0]) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP0r_PSLL0_TO_VL_MAPPINGf_SET(r,f) (r).rx_x4_psll_to_vl_map0[0]=(((r).rx_x4_psll_to_vl_map0[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access RX_X4_PSLL_TO_VL_MAP0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_PSLL_TO_VL_MAP0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP0r,(_r._rx_x4_psll_to_vl_map0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_PSLL_TO_VL_MAP0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP0r,(_r._rx_x4_psll_to_vl_map0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_PSLL_TO_VL_MAP0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP0r,(_r._rx_x4_psll_to_vl_map0))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_PSLL_TO_VL_MAP0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_psll_to_vl_map0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_PSLL_TO_VL_MAP0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_psll_to_vl_map0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_PSLL_TO_VL_MAP0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_psll_to_vl_map0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_PSLL_TO_VL_MAP0r BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP0r
#define RX_X4_PSLL_TO_VL_MAP0r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP0r_t RX_X4_PSLL_TO_VL_MAP0r_t;
#define RX_X4_PSLL_TO_VL_MAP0r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP0r_CLR
#define RX_X4_PSLL_TO_VL_MAP0r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP0r_SET
#define RX_X4_PSLL_TO_VL_MAP0r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP0r_GET
#define RX_X4_PSLL_TO_VL_MAP0r_PSLL2_TO_VL_MAPPINGf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP0r_PSLL2_TO_VL_MAPPINGf_GET
#define RX_X4_PSLL_TO_VL_MAP0r_PSLL2_TO_VL_MAPPINGf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP0r_PSLL2_TO_VL_MAPPINGf_SET
#define RX_X4_PSLL_TO_VL_MAP0r_PSLL1_TO_VL_MAPPINGf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP0r_PSLL1_TO_VL_MAPPINGf_GET
#define RX_X4_PSLL_TO_VL_MAP0r_PSLL1_TO_VL_MAPPINGf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP0r_PSLL1_TO_VL_MAPPINGf_SET
#define RX_X4_PSLL_TO_VL_MAP0r_PSLL0_TO_VL_MAPPINGf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP0r_PSLL0_TO_VL_MAPPINGf_GET
#define RX_X4_PSLL_TO_VL_MAP0r_PSLL0_TO_VL_MAPPINGf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP0r_PSLL0_TO_VL_MAPPINGf_SET
#define READ_RX_X4_PSLL_TO_VL_MAP0r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_PSLL_TO_VL_MAP0r
#define WRITE_RX_X4_PSLL_TO_VL_MAP0r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_PSLL_TO_VL_MAP0r
#define MODIFY_RX_X4_PSLL_TO_VL_MAP0r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_PSLL_TO_VL_MAP0r
#define READLN_RX_X4_PSLL_TO_VL_MAP0r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_PSLL_TO_VL_MAP0r
#define WRITELN_RX_X4_PSLL_TO_VL_MAP0r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_PSLL_TO_VL_MAP0r
#define WRITEALL_RX_X4_PSLL_TO_VL_MAP0r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_PSLL_TO_VL_MAP0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_PSLL_TO_VL_MAP1
 * BLOCKS:   RX_X4_STATUS0
 * REGADDR:  0xc15b
 * DESC:     Pseudo-logical lane to virtual lane mapping
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     PSLL3_TO_VL_MAPPING Pseudo-logical lane 3 to virtual lane mapping.
 *     PSLL4_TO_VL_MAPPING Pseudo-logical lane 4 to virtual lane mapping.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP1r (0x0000c15b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP1r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_PSLL_TO_VL_MAP1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP1r_s {
	uint32_t v[1];
	uint32_t rx_x4_psll_to_vl_map1[1];
	uint32_t _rx_x4_psll_to_vl_map1;
} BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP1r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP1r_CLR(r) (r).rx_x4_psll_to_vl_map1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP1r_SET(r,d) (r).rx_x4_psll_to_vl_map1[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP1r_GET(r) (r).rx_x4_psll_to_vl_map1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP1r_PSLL4_TO_VL_MAPPINGf_GET(r) ((((r).rx_x4_psll_to_vl_map1[0]) >> 5) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP1r_PSLL4_TO_VL_MAPPINGf_SET(r,f) (r).rx_x4_psll_to_vl_map1[0]=(((r).rx_x4_psll_to_vl_map1[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5)) | (31 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP1r_PSLL3_TO_VL_MAPPINGf_GET(r) (((r).rx_x4_psll_to_vl_map1[0]) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP1r_PSLL3_TO_VL_MAPPINGf_SET(r,f) (r).rx_x4_psll_to_vl_map1[0]=(((r).rx_x4_psll_to_vl_map1[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access RX_X4_PSLL_TO_VL_MAP1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_PSLL_TO_VL_MAP1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP1r,(_r._rx_x4_psll_to_vl_map1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_PSLL_TO_VL_MAP1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP1r,(_r._rx_x4_psll_to_vl_map1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_PSLL_TO_VL_MAP1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP1r,(_r._rx_x4_psll_to_vl_map1))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_PSLL_TO_VL_MAP1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_psll_to_vl_map1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_PSLL_TO_VL_MAP1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_psll_to_vl_map1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_PSLL_TO_VL_MAP1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_psll_to_vl_map1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_PSLL_TO_VL_MAP1r BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP1r
#define RX_X4_PSLL_TO_VL_MAP1r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP1r_t RX_X4_PSLL_TO_VL_MAP1r_t;
#define RX_X4_PSLL_TO_VL_MAP1r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP1r_CLR
#define RX_X4_PSLL_TO_VL_MAP1r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP1r_SET
#define RX_X4_PSLL_TO_VL_MAP1r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP1r_GET
#define RX_X4_PSLL_TO_VL_MAP1r_PSLL4_TO_VL_MAPPINGf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP1r_PSLL4_TO_VL_MAPPINGf_GET
#define RX_X4_PSLL_TO_VL_MAP1r_PSLL4_TO_VL_MAPPINGf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP1r_PSLL4_TO_VL_MAPPINGf_SET
#define RX_X4_PSLL_TO_VL_MAP1r_PSLL3_TO_VL_MAPPINGf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP1r_PSLL3_TO_VL_MAPPINGf_GET
#define RX_X4_PSLL_TO_VL_MAP1r_PSLL3_TO_VL_MAPPINGf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP1r_PSLL3_TO_VL_MAPPINGf_SET
#define READ_RX_X4_PSLL_TO_VL_MAP1r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_PSLL_TO_VL_MAP1r
#define WRITE_RX_X4_PSLL_TO_VL_MAP1r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_PSLL_TO_VL_MAP1r
#define MODIFY_RX_X4_PSLL_TO_VL_MAP1r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_PSLL_TO_VL_MAP1r
#define READLN_RX_X4_PSLL_TO_VL_MAP1r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_PSLL_TO_VL_MAP1r
#define WRITELN_RX_X4_PSLL_TO_VL_MAP1r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_PSLL_TO_VL_MAP1r
#define WRITEALL_RX_X4_PSLL_TO_VL_MAP1r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_PSLL_TO_VL_MAP1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_PSLL_TO_VL_MAP1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_PRTPERRCTR
 * BLOCKS:   RX_X4_STATUS0
 * REGADDR:  0xc15c
 * DESC:     PRTP Error Count Register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     PRTP_ERR_COUNT   Pseudo Random Test Pattern block error count
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PRTPERRCTRr (0x0000c15c | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_PRTPERRCTRr_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_PRTPERRCTR.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_PRTPERRCTRr_s {
	uint32_t v[1];
	uint32_t rx_x4_prtperrctr[1];
	uint32_t _rx_x4_prtperrctr;
} BCMI_TSCF_GEN3_XGXS_RX_X4_PRTPERRCTRr_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_PRTPERRCTRr_CLR(r) (r).rx_x4_prtperrctr[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PRTPERRCTRr_SET(r,d) (r).rx_x4_prtperrctr[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PRTPERRCTRr_GET(r) (r).rx_x4_prtperrctr[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PRTPERRCTRr_PRTP_ERR_COUNTf_GET(r) (((r).rx_x4_prtperrctr[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PRTPERRCTRr_PRTP_ERR_COUNTf_SET(r,f) (r).rx_x4_prtperrctr[0]=(((r).rx_x4_prtperrctr[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_PRTPERRCTR.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_PRTPERRCTRr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PRTPERRCTRr,(_r._rx_x4_prtperrctr))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_PRTPERRCTRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PRTPERRCTRr,(_r._rx_x4_prtperrctr)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_PRTPERRCTRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PRTPERRCTRr,(_r._rx_x4_prtperrctr))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_PRTPERRCTRr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PRTPERRCTRr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_prtperrctr))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_PRTPERRCTRr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PRTPERRCTRr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_prtperrctr))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_PRTPERRCTRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PRTPERRCTRr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_prtperrctr))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_PRTPERRCTRr BCMI_TSCF_GEN3_XGXS_RX_X4_PRTPERRCTRr
#define RX_X4_PRTPERRCTRr_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_PRTPERRCTRr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_PRTPERRCTRr_t RX_X4_PRTPERRCTRr_t;
#define RX_X4_PRTPERRCTRr_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_PRTPERRCTRr_CLR
#define RX_X4_PRTPERRCTRr_SET BCMI_TSCF_GEN3_XGXS_RX_X4_PRTPERRCTRr_SET
#define RX_X4_PRTPERRCTRr_GET BCMI_TSCF_GEN3_XGXS_RX_X4_PRTPERRCTRr_GET
#define RX_X4_PRTPERRCTRr_PRTP_ERR_COUNTf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_PRTPERRCTRr_PRTP_ERR_COUNTf_GET
#define RX_X4_PRTPERRCTRr_PRTP_ERR_COUNTf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_PRTPERRCTRr_PRTP_ERR_COUNTf_SET
#define READ_RX_X4_PRTPERRCTRr BCMI_TSCF_GEN3_XGXS_READ_RX_X4_PRTPERRCTRr
#define WRITE_RX_X4_PRTPERRCTRr BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_PRTPERRCTRr
#define MODIFY_RX_X4_PRTPERRCTRr BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_PRTPERRCTRr
#define READLN_RX_X4_PRTPERRCTRr BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_PRTPERRCTRr
#define WRITELN_RX_X4_PRTPERRCTRr BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_PRTPERRCTRr
#define WRITEALL_RX_X4_PRTPERRCTRr BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_PRTPERRCTRr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_PRTPERRCTRr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_PRTPSTS
 * BLOCKS:   RX_X4_STATUS0
 * REGADDR:  0xc15d
 * DESC:     PRTP Status Register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     PRTP_LOCK        Pseudo Random Test Pattern (PRTP) is locked
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PRTPSTSr (0x0000c15d | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_PRTPSTSr_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_PRTPSTS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_PRTPSTSr_s {
	uint32_t v[1];
	uint32_t rx_x4_prtpsts[1];
	uint32_t _rx_x4_prtpsts;
} BCMI_TSCF_GEN3_XGXS_RX_X4_PRTPSTSr_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_PRTPSTSr_CLR(r) (r).rx_x4_prtpsts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PRTPSTSr_SET(r,d) (r).rx_x4_prtpsts[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PRTPSTSr_GET(r) (r).rx_x4_prtpsts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PRTPSTSr_PRTP_LOCKf_GET(r) (((r).rx_x4_prtpsts[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PRTPSTSr_PRTP_LOCKf_SET(r,f) (r).rx_x4_prtpsts[0]=(((r).rx_x4_prtpsts[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_X4_PRTPSTS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_PRTPSTSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PRTPSTSr,(_r._rx_x4_prtpsts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_PRTPSTSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PRTPSTSr,(_r._rx_x4_prtpsts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_PRTPSTSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PRTPSTSr,(_r._rx_x4_prtpsts))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_PRTPSTSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PRTPSTSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_prtpsts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_PRTPSTSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PRTPSTSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_prtpsts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_PRTPSTSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PRTPSTSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_prtpsts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_PRTPSTSr BCMI_TSCF_GEN3_XGXS_RX_X4_PRTPSTSr
#define RX_X4_PRTPSTSr_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_PRTPSTSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_PRTPSTSr_t RX_X4_PRTPSTSr_t;
#define RX_X4_PRTPSTSr_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_PRTPSTSr_CLR
#define RX_X4_PRTPSTSr_SET BCMI_TSCF_GEN3_XGXS_RX_X4_PRTPSTSr_SET
#define RX_X4_PRTPSTSr_GET BCMI_TSCF_GEN3_XGXS_RX_X4_PRTPSTSr_GET
#define RX_X4_PRTPSTSr_PRTP_LOCKf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_PRTPSTSr_PRTP_LOCKf_GET
#define RX_X4_PRTPSTSr_PRTP_LOCKf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_PRTPSTSr_PRTP_LOCKf_SET
#define READ_RX_X4_PRTPSTSr BCMI_TSCF_GEN3_XGXS_READ_RX_X4_PRTPSTSr
#define WRITE_RX_X4_PRTPSTSr BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_PRTPSTSr
#define MODIFY_RX_X4_PRTPSTSr BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_PRTPSTSr
#define READLN_RX_X4_PRTPSTSr BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_PRTPSTSr
#define WRITELN_RX_X4_PRTPSTSr BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_PRTPSTSr
#define WRITEALL_RX_X4_PRTPSTSr BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_PRTPSTSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_PRTPSTSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_CL91_FC_STS
 * BLOCKS:   RX_X4_STATUS0
 * REGADDR:  0xc15e
 * DESC:     CL91 Fiber Channel Status Register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL91_FC_SYNC_LIVE_STATE CL91 Fiber Channel alignment lock FSM state
 *     CL91_FC_SYNC_LATCHED_STATE CL91 Fiber Channel alignment lock FSM state
 *     CL91_FC_CW_SYNC_LIVE CL91 Fiber Channel sync state live
 *     CL91_FC_CW_SYNC_LL CL91 Fiber Channel sync state latched low
 *     CL91_FC_CW_SYNC_LH CL91 Fiber Channel sync state latched high
 *     CL91_FC_CW_GOOD_CNT CL91 Fiber Channel align lock FSM good codeword count.
 *     CL91_FC_CW_BAD_CNT CL91 Fiber Channel align lock FSM bad codeword count.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_STSr (0x0000c15e | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_STSr_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL91_FC_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_STSr_s {
	uint32_t v[1];
	uint32_t rx_x4_cl91_fc_sts[1];
	uint32_t _rx_x4_cl91_fc_sts;
} BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_STSr_CLR(r) (r).rx_x4_cl91_fc_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_STSr_SET(r,d) (r).rx_x4_cl91_fc_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_STSr_GET(r) (r).rx_x4_cl91_fc_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_STSr_CL91_FC_CW_BAD_CNTf_GET(r) ((((r).rx_x4_cl91_fc_sts[0]) >> 11) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_STSr_CL91_FC_CW_BAD_CNTf_SET(r,f) (r).rx_x4_cl91_fc_sts[0]=(((r).rx_x4_cl91_fc_sts[0] & ~((uint32_t)0x3 << 11)) | ((((uint32_t)f) & 0x3) << 11)) | (3 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_STSr_CL91_FC_CW_GOOD_CNTf_GET(r) ((((r).rx_x4_cl91_fc_sts[0]) >> 9) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_STSr_CL91_FC_CW_GOOD_CNTf_SET(r,f) (r).rx_x4_cl91_fc_sts[0]=(((r).rx_x4_cl91_fc_sts[0] & ~((uint32_t)0x3 << 9)) | ((((uint32_t)f) & 0x3) << 9)) | (3 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_STSr_CL91_FC_CW_SYNC_LHf_GET(r) ((((r).rx_x4_cl91_fc_sts[0]) >> 8) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_STSr_CL91_FC_CW_SYNC_LHf_SET(r,f) (r).rx_x4_cl91_fc_sts[0]=(((r).rx_x4_cl91_fc_sts[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_STSr_CL91_FC_CW_SYNC_LLf_GET(r) ((((r).rx_x4_cl91_fc_sts[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_STSr_CL91_FC_CW_SYNC_LLf_SET(r,f) (r).rx_x4_cl91_fc_sts[0]=(((r).rx_x4_cl91_fc_sts[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_STSr_CL91_FC_CW_SYNC_LIVEf_GET(r) ((((r).rx_x4_cl91_fc_sts[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_STSr_CL91_FC_CW_SYNC_LIVEf_SET(r,f) (r).rx_x4_cl91_fc_sts[0]=(((r).rx_x4_cl91_fc_sts[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_STSr_CL91_FC_SYNC_LATCHED_STATEf_GET(r) ((((r).rx_x4_cl91_fc_sts[0]) >> 2) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_STSr_CL91_FC_SYNC_LATCHED_STATEf_SET(r,f) (r).rx_x4_cl91_fc_sts[0]=(((r).rx_x4_cl91_fc_sts[0] & ~((uint32_t)0xf << 2)) | ((((uint32_t)f) & 0xf) << 2)) | (15 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_STSr_CL91_FC_SYNC_LIVE_STATEf_GET(r) (((r).rx_x4_cl91_fc_sts[0]) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_STSr_CL91_FC_SYNC_LIVE_STATEf_SET(r,f) (r).rx_x4_cl91_fc_sts[0]=(((r).rx_x4_cl91_fc_sts[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access RX_X4_CL91_FC_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL91_FC_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_STSr,(_r._rx_x4_cl91_fc_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL91_FC_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_STSr,(_r._rx_x4_cl91_fc_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL91_FC_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_STSr,(_r._rx_x4_cl91_fc_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL91_FC_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_fc_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL91_FC_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_fc_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL91_FC_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl91_fc_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL91_FC_STSr BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_STSr
#define RX_X4_CL91_FC_STSr_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_STSr_t RX_X4_CL91_FC_STSr_t;
#define RX_X4_CL91_FC_STSr_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_STSr_CLR
#define RX_X4_CL91_FC_STSr_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_STSr_SET
#define RX_X4_CL91_FC_STSr_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_STSr_GET
#define RX_X4_CL91_FC_STSr_CL91_FC_CW_BAD_CNTf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_STSr_CL91_FC_CW_BAD_CNTf_GET
#define RX_X4_CL91_FC_STSr_CL91_FC_CW_BAD_CNTf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_STSr_CL91_FC_CW_BAD_CNTf_SET
#define RX_X4_CL91_FC_STSr_CL91_FC_CW_GOOD_CNTf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_STSr_CL91_FC_CW_GOOD_CNTf_GET
#define RX_X4_CL91_FC_STSr_CL91_FC_CW_GOOD_CNTf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_STSr_CL91_FC_CW_GOOD_CNTf_SET
#define RX_X4_CL91_FC_STSr_CL91_FC_CW_SYNC_LHf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_STSr_CL91_FC_CW_SYNC_LHf_GET
#define RX_X4_CL91_FC_STSr_CL91_FC_CW_SYNC_LHf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_STSr_CL91_FC_CW_SYNC_LHf_SET
#define RX_X4_CL91_FC_STSr_CL91_FC_CW_SYNC_LLf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_STSr_CL91_FC_CW_SYNC_LLf_GET
#define RX_X4_CL91_FC_STSr_CL91_FC_CW_SYNC_LLf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_STSr_CL91_FC_CW_SYNC_LLf_SET
#define RX_X4_CL91_FC_STSr_CL91_FC_CW_SYNC_LIVEf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_STSr_CL91_FC_CW_SYNC_LIVEf_GET
#define RX_X4_CL91_FC_STSr_CL91_FC_CW_SYNC_LIVEf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_STSr_CL91_FC_CW_SYNC_LIVEf_SET
#define RX_X4_CL91_FC_STSr_CL91_FC_SYNC_LATCHED_STATEf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_STSr_CL91_FC_SYNC_LATCHED_STATEf_GET
#define RX_X4_CL91_FC_STSr_CL91_FC_SYNC_LATCHED_STATEf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_STSr_CL91_FC_SYNC_LATCHED_STATEf_SET
#define RX_X4_CL91_FC_STSr_CL91_FC_SYNC_LIVE_STATEf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_STSr_CL91_FC_SYNC_LIVE_STATEf_GET
#define RX_X4_CL91_FC_STSr_CL91_FC_SYNC_LIVE_STATEf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_STSr_CL91_FC_SYNC_LIVE_STATEf_SET
#define READ_RX_X4_CL91_FC_STSr BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL91_FC_STSr
#define WRITE_RX_X4_CL91_FC_STSr BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL91_FC_STSr
#define MODIFY_RX_X4_CL91_FC_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL91_FC_STSr
#define READLN_RX_X4_CL91_FC_STSr BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL91_FC_STSr
#define WRITELN_RX_X4_CL91_FC_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL91_FC_STSr
#define WRITEALL_RX_X4_CL91_FC_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL91_FC_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_PCS_LATCH_STS1
 * BLOCKS:   RX_X4_STATUS1
 * REGADDR:  0xc160
 * DESC:     Latched status of PCS Information
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     DESKEW_STATUS_LL Deskew status has transitioned low since last read.Deskew achieved (1), Deskew not achieved (0)Clear on read
 *     DESKEW_STATUS_LH Deskew status has transitioned high since last read.Deskew achieved (1), Deskew not achieved (0)Clear on read
 *     LINK_STATUS_LL   PER PORT: Link Status indicator has transitioned low since last readClear on read
 *     LINK_STATUS_LH   PER PORT: Link Status indicator has transitioned high since last readClear on read
 *     HI_BER_LL        HI_BER has transitioned low since last read.Clear on read
 *     HI_BER_LH        HI_BER has transitioned high since last read.Clear on read
 *     LPI_RECEIVED_LH  PER PORT: Low Power Indicator (LPI) has transitioned high since last read.Clear on read
 *     LINK_INTERRUPT_LH PER PORT: Link Interrupt (LI)  has transitioned high since last read.Clear on read
 *     REMOTE_FAULT_LH  PER PORT: Remote Fault (RF)  has transitioned high since last read.Clear on read
 *     LOCAL_FAULT_LH   PER PORT: Local Fault (LF) indicator has transitioned high since last read.Clear on read
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r (0x0000c160 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_PCS_LATCH_STS1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r_s {
	uint32_t v[1];
	uint32_t rx_x4_pcs_latch_sts1[1];
	uint32_t _rx_x4_pcs_latch_sts1;
} BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r_CLR(r) (r).rx_x4_pcs_latch_sts1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r_SET(r,d) (r).rx_x4_pcs_latch_sts1[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r_GET(r) (r).rx_x4_pcs_latch_sts1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r_LOCAL_FAULT_LHf_GET(r) ((((r).rx_x4_pcs_latch_sts1[0]) >> 9) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r_LOCAL_FAULT_LHf_SET(r,f) (r).rx_x4_pcs_latch_sts1[0]=(((r).rx_x4_pcs_latch_sts1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r_REMOTE_FAULT_LHf_GET(r) ((((r).rx_x4_pcs_latch_sts1[0]) >> 8) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r_REMOTE_FAULT_LHf_SET(r,f) (r).rx_x4_pcs_latch_sts1[0]=(((r).rx_x4_pcs_latch_sts1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r_LINK_INTERRUPT_LHf_GET(r) ((((r).rx_x4_pcs_latch_sts1[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r_LINK_INTERRUPT_LHf_SET(r,f) (r).rx_x4_pcs_latch_sts1[0]=(((r).rx_x4_pcs_latch_sts1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r_LPI_RECEIVED_LHf_GET(r) ((((r).rx_x4_pcs_latch_sts1[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r_LPI_RECEIVED_LHf_SET(r,f) (r).rx_x4_pcs_latch_sts1[0]=(((r).rx_x4_pcs_latch_sts1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r_HI_BER_LHf_GET(r) ((((r).rx_x4_pcs_latch_sts1[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r_HI_BER_LHf_SET(r,f) (r).rx_x4_pcs_latch_sts1[0]=(((r).rx_x4_pcs_latch_sts1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r_HI_BER_LLf_GET(r) ((((r).rx_x4_pcs_latch_sts1[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r_HI_BER_LLf_SET(r,f) (r).rx_x4_pcs_latch_sts1[0]=(((r).rx_x4_pcs_latch_sts1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r_LINK_STATUS_LHf_GET(r) ((((r).rx_x4_pcs_latch_sts1[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r_LINK_STATUS_LHf_SET(r,f) (r).rx_x4_pcs_latch_sts1[0]=(((r).rx_x4_pcs_latch_sts1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r_LINK_STATUS_LLf_GET(r) ((((r).rx_x4_pcs_latch_sts1[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r_LINK_STATUS_LLf_SET(r,f) (r).rx_x4_pcs_latch_sts1[0]=(((r).rx_x4_pcs_latch_sts1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r_DESKEW_STATUS_LHf_GET(r) ((((r).rx_x4_pcs_latch_sts1[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r_DESKEW_STATUS_LHf_SET(r,f) (r).rx_x4_pcs_latch_sts1[0]=(((r).rx_x4_pcs_latch_sts1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r_DESKEW_STATUS_LLf_GET(r) (((r).rx_x4_pcs_latch_sts1[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r_DESKEW_STATUS_LLf_SET(r,f) (r).rx_x4_pcs_latch_sts1[0]=(((r).rx_x4_pcs_latch_sts1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_X4_PCS_LATCH_STS1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_PCS_LATCH_STS1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r,(_r._rx_x4_pcs_latch_sts1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_PCS_LATCH_STS1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r,(_r._rx_x4_pcs_latch_sts1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_PCS_LATCH_STS1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r,(_r._rx_x4_pcs_latch_sts1))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_PCS_LATCH_STS1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_pcs_latch_sts1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_PCS_LATCH_STS1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_pcs_latch_sts1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_PCS_LATCH_STS1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_pcs_latch_sts1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_PCS_LATCH_STS1r BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r
#define RX_X4_PCS_LATCH_STS1r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r_t RX_X4_PCS_LATCH_STS1r_t;
#define RX_X4_PCS_LATCH_STS1r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r_CLR
#define RX_X4_PCS_LATCH_STS1r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r_SET
#define RX_X4_PCS_LATCH_STS1r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r_GET
#define RX_X4_PCS_LATCH_STS1r_LOCAL_FAULT_LHf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r_LOCAL_FAULT_LHf_GET
#define RX_X4_PCS_LATCH_STS1r_LOCAL_FAULT_LHf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r_LOCAL_FAULT_LHf_SET
#define RX_X4_PCS_LATCH_STS1r_REMOTE_FAULT_LHf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r_REMOTE_FAULT_LHf_GET
#define RX_X4_PCS_LATCH_STS1r_REMOTE_FAULT_LHf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r_REMOTE_FAULT_LHf_SET
#define RX_X4_PCS_LATCH_STS1r_LINK_INTERRUPT_LHf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r_LINK_INTERRUPT_LHf_GET
#define RX_X4_PCS_LATCH_STS1r_LINK_INTERRUPT_LHf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r_LINK_INTERRUPT_LHf_SET
#define RX_X4_PCS_LATCH_STS1r_LPI_RECEIVED_LHf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r_LPI_RECEIVED_LHf_GET
#define RX_X4_PCS_LATCH_STS1r_LPI_RECEIVED_LHf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r_LPI_RECEIVED_LHf_SET
#define RX_X4_PCS_LATCH_STS1r_HI_BER_LHf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r_HI_BER_LHf_GET
#define RX_X4_PCS_LATCH_STS1r_HI_BER_LHf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r_HI_BER_LHf_SET
#define RX_X4_PCS_LATCH_STS1r_HI_BER_LLf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r_HI_BER_LLf_GET
#define RX_X4_PCS_LATCH_STS1r_HI_BER_LLf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r_HI_BER_LLf_SET
#define RX_X4_PCS_LATCH_STS1r_LINK_STATUS_LHf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r_LINK_STATUS_LHf_GET
#define RX_X4_PCS_LATCH_STS1r_LINK_STATUS_LHf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r_LINK_STATUS_LHf_SET
#define RX_X4_PCS_LATCH_STS1r_LINK_STATUS_LLf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r_LINK_STATUS_LLf_GET
#define RX_X4_PCS_LATCH_STS1r_LINK_STATUS_LLf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r_LINK_STATUS_LLf_SET
#define RX_X4_PCS_LATCH_STS1r_DESKEW_STATUS_LHf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r_DESKEW_STATUS_LHf_GET
#define RX_X4_PCS_LATCH_STS1r_DESKEW_STATUS_LHf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r_DESKEW_STATUS_LHf_SET
#define RX_X4_PCS_LATCH_STS1r_DESKEW_STATUS_LLf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r_DESKEW_STATUS_LLf_GET
#define RX_X4_PCS_LATCH_STS1r_DESKEW_STATUS_LLf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r_DESKEW_STATUS_LLf_SET
#define READ_RX_X4_PCS_LATCH_STS1r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_PCS_LATCH_STS1r
#define WRITE_RX_X4_PCS_LATCH_STS1r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_PCS_LATCH_STS1r
#define MODIFY_RX_X4_PCS_LATCH_STS1r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_PCS_LATCH_STS1r
#define READLN_RX_X4_PCS_LATCH_STS1r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_PCS_LATCH_STS1r
#define WRITELN_RX_X4_PCS_LATCH_STS1r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_PCS_LATCH_STS1r
#define WRITEALL_RX_X4_PCS_LATCH_STS1r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_PCS_LATCH_STS1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LATCH_STS1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_PCS_LIVE_STS1
 * BLOCKS:   RX_X4_STATUS1
 * REGADDR:  0xc161
 * DESC:     LiveLatched status of PCS Information
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     DESKEW_STATUS    Deskew achieved (1), Deskew not achieved (0)
 *     LINK_STATUS      PER PORT: Live Link Status indicator
 *     HI_BER           HI_BER indicator
 *     LPI_RECEIVED     Live LPI indicator
 *     LINK_INTERRUPT   Live link interrupt indicator
 *     REMOTE_FAULT     Live remote fault indicator
 *     LOCAL_FAULT      Live local fault indicator
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS1r (0x0000c161 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS1r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_PCS_LIVE_STS1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS1r_s {
	uint32_t v[1];
	uint32_t rx_x4_pcs_live_sts1[1];
	uint32_t _rx_x4_pcs_live_sts1;
} BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS1r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS1r_CLR(r) (r).rx_x4_pcs_live_sts1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS1r_SET(r,d) (r).rx_x4_pcs_live_sts1[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS1r_GET(r) (r).rx_x4_pcs_live_sts1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS1r_LOCAL_FAULTf_GET(r) ((((r).rx_x4_pcs_live_sts1[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS1r_LOCAL_FAULTf_SET(r,f) (r).rx_x4_pcs_live_sts1[0]=(((r).rx_x4_pcs_live_sts1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS1r_REMOTE_FAULTf_GET(r) ((((r).rx_x4_pcs_live_sts1[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS1r_REMOTE_FAULTf_SET(r,f) (r).rx_x4_pcs_live_sts1[0]=(((r).rx_x4_pcs_live_sts1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS1r_LINK_INTERRUPTf_GET(r) ((((r).rx_x4_pcs_live_sts1[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS1r_LINK_INTERRUPTf_SET(r,f) (r).rx_x4_pcs_live_sts1[0]=(((r).rx_x4_pcs_live_sts1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS1r_LPI_RECEIVEDf_GET(r) ((((r).rx_x4_pcs_live_sts1[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS1r_LPI_RECEIVEDf_SET(r,f) (r).rx_x4_pcs_live_sts1[0]=(((r).rx_x4_pcs_live_sts1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS1r_HI_BERf_GET(r) ((((r).rx_x4_pcs_live_sts1[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS1r_HI_BERf_SET(r,f) (r).rx_x4_pcs_live_sts1[0]=(((r).rx_x4_pcs_live_sts1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS1r_LINK_STATUSf_GET(r) ((((r).rx_x4_pcs_live_sts1[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS1r_LINK_STATUSf_SET(r,f) (r).rx_x4_pcs_live_sts1[0]=(((r).rx_x4_pcs_live_sts1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS1r_DESKEW_STATUSf_GET(r) (((r).rx_x4_pcs_live_sts1[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS1r_DESKEW_STATUSf_SET(r,f) (r).rx_x4_pcs_live_sts1[0]=(((r).rx_x4_pcs_live_sts1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_X4_PCS_LIVE_STS1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_PCS_LIVE_STS1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS1r,(_r._rx_x4_pcs_live_sts1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_PCS_LIVE_STS1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS1r,(_r._rx_x4_pcs_live_sts1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_PCS_LIVE_STS1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS1r,(_r._rx_x4_pcs_live_sts1))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_PCS_LIVE_STS1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_pcs_live_sts1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_PCS_LIVE_STS1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_pcs_live_sts1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_PCS_LIVE_STS1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_pcs_live_sts1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_PCS_LIVE_STS1r BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS1r
#define RX_X4_PCS_LIVE_STS1r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS1r_t RX_X4_PCS_LIVE_STS1r_t;
#define RX_X4_PCS_LIVE_STS1r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS1r_CLR
#define RX_X4_PCS_LIVE_STS1r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS1r_SET
#define RX_X4_PCS_LIVE_STS1r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS1r_GET
#define RX_X4_PCS_LIVE_STS1r_LOCAL_FAULTf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS1r_LOCAL_FAULTf_GET
#define RX_X4_PCS_LIVE_STS1r_LOCAL_FAULTf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS1r_LOCAL_FAULTf_SET
#define RX_X4_PCS_LIVE_STS1r_REMOTE_FAULTf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS1r_REMOTE_FAULTf_GET
#define RX_X4_PCS_LIVE_STS1r_REMOTE_FAULTf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS1r_REMOTE_FAULTf_SET
#define RX_X4_PCS_LIVE_STS1r_LINK_INTERRUPTf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS1r_LINK_INTERRUPTf_GET
#define RX_X4_PCS_LIVE_STS1r_LINK_INTERRUPTf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS1r_LINK_INTERRUPTf_SET
#define RX_X4_PCS_LIVE_STS1r_LPI_RECEIVEDf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS1r_LPI_RECEIVEDf_GET
#define RX_X4_PCS_LIVE_STS1r_LPI_RECEIVEDf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS1r_LPI_RECEIVEDf_SET
#define RX_X4_PCS_LIVE_STS1r_HI_BERf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS1r_HI_BERf_GET
#define RX_X4_PCS_LIVE_STS1r_HI_BERf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS1r_HI_BERf_SET
#define RX_X4_PCS_LIVE_STS1r_LINK_STATUSf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS1r_LINK_STATUSf_GET
#define RX_X4_PCS_LIVE_STS1r_LINK_STATUSf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS1r_LINK_STATUSf_SET
#define RX_X4_PCS_LIVE_STS1r_DESKEW_STATUSf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS1r_DESKEW_STATUSf_GET
#define RX_X4_PCS_LIVE_STS1r_DESKEW_STATUSf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS1r_DESKEW_STATUSf_SET
#define READ_RX_X4_PCS_LIVE_STS1r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_PCS_LIVE_STS1r
#define WRITE_RX_X4_PCS_LIVE_STS1r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_PCS_LIVE_STS1r
#define MODIFY_RX_X4_PCS_LIVE_STS1r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_PCS_LIVE_STS1r
#define READLN_RX_X4_PCS_LIVE_STS1r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_PCS_LIVE_STS1r
#define WRITELN_RX_X4_PCS_LIVE_STS1r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_PCS_LIVE_STS1r
#define WRITEALL_RX_X4_PCS_LIVE_STS1r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_PCS_LIVE_STS1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_PCS_LIVE_STS1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_DEC_STS0
 * BLOCKS:   RX_X4_STATUS1
 * REGADDR:  0xc162
 * DESC:     decode status 0 register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     BERMON_CURRENT_STATE BER Monitor fsm - current state
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS0r (0x0000c162 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS0r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_DEC_STS0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS0r_s {
	uint32_t v[1];
	uint32_t rx_x4_dec_sts0[1];
	uint32_t _rx_x4_dec_sts0;
} BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS0r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS0r_CLR(r) (r).rx_x4_dec_sts0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS0r_SET(r,d) (r).rx_x4_dec_sts0[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS0r_GET(r) (r).rx_x4_dec_sts0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS0r_BERMON_CURRENT_STATEf_GET(r) (((r).rx_x4_dec_sts0[0]) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS0r_BERMON_CURRENT_STATEf_SET(r,f) (r).rx_x4_dec_sts0[0]=(((r).rx_x4_dec_sts0[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access RX_X4_DEC_STS0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_DEC_STS0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS0r,(_r._rx_x4_dec_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_DEC_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS0r,(_r._rx_x4_dec_sts0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_DEC_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS0r,(_r._rx_x4_dec_sts0))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_DEC_STS0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_dec_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_DEC_STS0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_dec_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_DEC_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_dec_sts0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_DEC_STS0r BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS0r
#define RX_X4_DEC_STS0r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS0r_t RX_X4_DEC_STS0r_t;
#define RX_X4_DEC_STS0r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS0r_CLR
#define RX_X4_DEC_STS0r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS0r_SET
#define RX_X4_DEC_STS0r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS0r_GET
#define RX_X4_DEC_STS0r_BERMON_CURRENT_STATEf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS0r_BERMON_CURRENT_STATEf_GET
#define RX_X4_DEC_STS0r_BERMON_CURRENT_STATEf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS0r_BERMON_CURRENT_STATEf_SET
#define READ_RX_X4_DEC_STS0r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_DEC_STS0r
#define WRITE_RX_X4_DEC_STS0r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_DEC_STS0r
#define MODIFY_RX_X4_DEC_STS0r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_DEC_STS0r
#define READLN_RX_X4_DEC_STS0r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_DEC_STS0r
#define WRITELN_RX_X4_DEC_STS0r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_DEC_STS0r
#define WRITEALL_RX_X4_DEC_STS0r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_DEC_STS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_DEC_STS1
 * BLOCKS:   RX_X4_STATUS1
 * REGADDR:  0xc163
 * DESC:     decode status 1 register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BERMON_HISTORY_STATE BER Monitor fsm - latched states - latched on entry
 *     CL49_RXSM_HISTORY_STATE Receive SM - latched states - latched on entry
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS1r (0x0000c163 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS1r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_DEC_STS1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS1r_s {
	uint32_t v[1];
	uint32_t rx_x4_dec_sts1[1];
	uint32_t _rx_x4_dec_sts1;
} BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS1r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS1r_CLR(r) (r).rx_x4_dec_sts1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS1r_SET(r,d) (r).rx_x4_dec_sts1[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS1r_GET(r) (r).rx_x4_dec_sts1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS1r_CL49_RXSM_HISTORY_STATEf_GET(r) ((((r).rx_x4_dec_sts1[0]) >> 5) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS1r_CL49_RXSM_HISTORY_STATEf_SET(r,f) (r).rx_x4_dec_sts1[0]=(((r).rx_x4_dec_sts1[0] & ~((uint32_t)0xff << 5)) | ((((uint32_t)f) & 0xff) << 5)) | (255 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS1r_BERMON_HISTORY_STATEf_GET(r) (((r).rx_x4_dec_sts1[0]) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS1r_BERMON_HISTORY_STATEf_SET(r,f) (r).rx_x4_dec_sts1[0]=(((r).rx_x4_dec_sts1[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access RX_X4_DEC_STS1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_DEC_STS1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS1r,(_r._rx_x4_dec_sts1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_DEC_STS1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS1r,(_r._rx_x4_dec_sts1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_DEC_STS1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS1r,(_r._rx_x4_dec_sts1))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_DEC_STS1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_dec_sts1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_DEC_STS1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_dec_sts1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_DEC_STS1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_dec_sts1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_DEC_STS1r BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS1r
#define RX_X4_DEC_STS1r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS1r_t RX_X4_DEC_STS1r_t;
#define RX_X4_DEC_STS1r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS1r_CLR
#define RX_X4_DEC_STS1r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS1r_SET
#define RX_X4_DEC_STS1r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS1r_GET
#define RX_X4_DEC_STS1r_CL49_RXSM_HISTORY_STATEf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS1r_CL49_RXSM_HISTORY_STATEf_GET
#define RX_X4_DEC_STS1r_CL49_RXSM_HISTORY_STATEf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS1r_CL49_RXSM_HISTORY_STATEf_SET
#define RX_X4_DEC_STS1r_BERMON_HISTORY_STATEf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS1r_BERMON_HISTORY_STATEf_GET
#define RX_X4_DEC_STS1r_BERMON_HISTORY_STATEf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS1r_BERMON_HISTORY_STATEf_SET
#define READ_RX_X4_DEC_STS1r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_DEC_STS1r
#define WRITE_RX_X4_DEC_STS1r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_DEC_STS1r
#define MODIFY_RX_X4_DEC_STS1r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_DEC_STS1r
#define READLN_RX_X4_DEC_STS1r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_DEC_STS1r
#define WRITELN_RX_X4_DEC_STS1r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_DEC_STS1r
#define WRITEALL_RX_X4_DEC_STS1r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_DEC_STS1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_DEC_STS2
 * BLOCKS:   RX_X4_STATUS1
 * REGADDR:  0xc164
 * DESC:     decode status 2 register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CL49_RXSM_CURRENT_STATE Recieve SM - current state
 *     CL49_R_TYPE_CODED Receive SM - current r_type
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS2r (0x0000c164 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_DEC_STS2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS2r_s {
	uint32_t v[1];
	uint32_t rx_x4_dec_sts2[1];
	uint32_t _rx_x4_dec_sts2;
} BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS2r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS2r_CLR(r) (r).rx_x4_dec_sts2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS2r_SET(r,d) (r).rx_x4_dec_sts2[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS2r_GET(r) (r).rx_x4_dec_sts2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS2r_CL49_R_TYPE_CODEDf_GET(r) ((((r).rx_x4_dec_sts2[0]) >> 8) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS2r_CL49_R_TYPE_CODEDf_SET(r,f) (r).rx_x4_dec_sts2[0]=(((r).rx_x4_dec_sts2[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS2r_CL49_RXSM_CURRENT_STATEf_GET(r) (((r).rx_x4_dec_sts2[0]) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS2r_CL49_RXSM_CURRENT_STATEf_SET(r,f) (r).rx_x4_dec_sts2[0]=(((r).rx_x4_dec_sts2[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access RX_X4_DEC_STS2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_DEC_STS2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS2r,(_r._rx_x4_dec_sts2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_DEC_STS2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS2r,(_r._rx_x4_dec_sts2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_DEC_STS2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS2r,(_r._rx_x4_dec_sts2))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_DEC_STS2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_dec_sts2))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_DEC_STS2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_dec_sts2))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_DEC_STS2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_dec_sts2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_DEC_STS2r BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS2r
#define RX_X4_DEC_STS2r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS2r_t RX_X4_DEC_STS2r_t;
#define RX_X4_DEC_STS2r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS2r_CLR
#define RX_X4_DEC_STS2r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS2r_SET
#define RX_X4_DEC_STS2r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS2r_GET
#define RX_X4_DEC_STS2r_CL49_R_TYPE_CODEDf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS2r_CL49_R_TYPE_CODEDf_GET
#define RX_X4_DEC_STS2r_CL49_R_TYPE_CODEDf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS2r_CL49_R_TYPE_CODEDf_SET
#define RX_X4_DEC_STS2r_CL49_RXSM_CURRENT_STATEf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS2r_CL49_RXSM_CURRENT_STATEf_GET
#define RX_X4_DEC_STS2r_CL49_RXSM_CURRENT_STATEf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS2r_CL49_RXSM_CURRENT_STATEf_SET
#define READ_RX_X4_DEC_STS2r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_DEC_STS2r
#define WRITE_RX_X4_DEC_STS2r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_DEC_STS2r
#define MODIFY_RX_X4_DEC_STS2r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_DEC_STS2r
#define READLN_RX_X4_DEC_STS2r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_DEC_STS2r
#define WRITELN_RX_X4_DEC_STS2r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_DEC_STS2r
#define WRITEALL_RX_X4_DEC_STS2r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_DEC_STS2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_DEC_STS3
 * BLOCKS:   RX_X4_STATUS1
 * REGADDR:  0xc165
 * DESC:     decode status 3 register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     IEEE_ERRORED_BLOCKS Contains the count of the errored blocks decoded by the cl49/cl82 decoders.For cl82, it contains the lower 8 bits of the 22 bit value. The upper 14 bits are present in the cl82_errored_blocks_ho register.
 *     CL49_BER_COUNT   For cl49 - This field is the 6 bit BER count.It counts the number of times BER_BAD_SH state is entered.The counter saturates at 6'h3F and clears on read.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS3r (0x0000c165 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS3r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_DEC_STS3.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS3r_s {
	uint32_t v[1];
	uint32_t rx_x4_dec_sts3[1];
	uint32_t _rx_x4_dec_sts3;
} BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS3r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS3r_CLR(r) (r).rx_x4_dec_sts3[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS3r_SET(r,d) (r).rx_x4_dec_sts3[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS3r_GET(r) (r).rx_x4_dec_sts3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS3r_CL49_BER_COUNTf_GET(r) ((((r).rx_x4_dec_sts3[0]) >> 8) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS3r_CL49_BER_COUNTf_SET(r,f) (r).rx_x4_dec_sts3[0]=(((r).rx_x4_dec_sts3[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8)) | (63 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS3r_IEEE_ERRORED_BLOCKSf_GET(r) (((r).rx_x4_dec_sts3[0]) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS3r_IEEE_ERRORED_BLOCKSf_SET(r,f) (r).rx_x4_dec_sts3[0]=(((r).rx_x4_dec_sts3[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access RX_X4_DEC_STS3.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_DEC_STS3r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS3r,(_r._rx_x4_dec_sts3))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_DEC_STS3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS3r,(_r._rx_x4_dec_sts3)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_DEC_STS3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS3r,(_r._rx_x4_dec_sts3))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_DEC_STS3r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_dec_sts3))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_DEC_STS3r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_dec_sts3))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_DEC_STS3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS3r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_dec_sts3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_DEC_STS3r BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS3r
#define RX_X4_DEC_STS3r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS3r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS3r_t RX_X4_DEC_STS3r_t;
#define RX_X4_DEC_STS3r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS3r_CLR
#define RX_X4_DEC_STS3r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS3r_SET
#define RX_X4_DEC_STS3r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS3r_GET
#define RX_X4_DEC_STS3r_CL49_BER_COUNTf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS3r_CL49_BER_COUNTf_GET
#define RX_X4_DEC_STS3r_CL49_BER_COUNTf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS3r_CL49_BER_COUNTf_SET
#define RX_X4_DEC_STS3r_IEEE_ERRORED_BLOCKSf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS3r_IEEE_ERRORED_BLOCKSf_GET
#define RX_X4_DEC_STS3r_IEEE_ERRORED_BLOCKSf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS3r_IEEE_ERRORED_BLOCKSf_SET
#define READ_RX_X4_DEC_STS3r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_DEC_STS3r
#define WRITE_RX_X4_DEC_STS3r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_DEC_STS3r
#define MODIFY_RX_X4_DEC_STS3r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_DEC_STS3r
#define READLN_RX_X4_DEC_STS3r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_DEC_STS3r
#define WRITELN_RX_X4_DEC_STS3r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_DEC_STS3r
#define WRITEALL_RX_X4_DEC_STS3r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_DEC_STS3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_DEC_STS3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_CL36_SYNCACQ_STS0
 * BLOCKS:   RX_X4_STATUS1
 * REGADDR:  0xc168
 * DESC:     cl36rx_syncacq_status_0 register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CL36RX_SYNCACQ_STATE_CODED_PER_LN cl36 sync acquisition fsm - next state4'd0 - LOSS_OF_SYNC4'd1 - COMMA_DET_14'd2 - ACQ_SYNC_14'd3 - COMMA_DET_24'd4 - ACQ_SYNC_24'd5 - COMMA_DET_34'd6 - SYNC_ACQ_14'd7 - SYNC_ACQ_24'd8 - SYNC_ACQ_34'd9 - SYNC_ACQ_44'd10 - SYNC_ACQ_2A4'd11 - SYNC_ACQ_3A4'd12 - SYNC_ACQ_4A
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_SYNCACQ_STS0r (0x0000c168 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_SYNCACQ_STS0r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL36_SYNCACQ_STS0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_SYNCACQ_STS0r_s {
	uint32_t v[1];
	uint32_t rx_x4_cl36_syncacq_sts0[1];
	uint32_t _rx_x4_cl36_syncacq_sts0;
} BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_SYNCACQ_STS0r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_SYNCACQ_STS0r_CLR(r) (r).rx_x4_cl36_syncacq_sts0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_SYNCACQ_STS0r_SET(r,d) (r).rx_x4_cl36_syncacq_sts0[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_SYNCACQ_STS0r_GET(r) (r).rx_x4_cl36_syncacq_sts0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_SYNCACQ_STS0r_CL36RX_SYNCACQ_STATE_CODED_PER_LNf_GET(r) (((r).rx_x4_cl36_syncacq_sts0[0]) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_SYNCACQ_STS0r_CL36RX_SYNCACQ_STATE_CODED_PER_LNf_SET(r,f) (r).rx_x4_cl36_syncacq_sts0[0]=(((r).rx_x4_cl36_syncacq_sts0[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access RX_X4_CL36_SYNCACQ_STS0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL36_SYNCACQ_STS0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_SYNCACQ_STS0r,(_r._rx_x4_cl36_syncacq_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL36_SYNCACQ_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_SYNCACQ_STS0r,(_r._rx_x4_cl36_syncacq_sts0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL36_SYNCACQ_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_SYNCACQ_STS0r,(_r._rx_x4_cl36_syncacq_sts0))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL36_SYNCACQ_STS0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_SYNCACQ_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl36_syncacq_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL36_SYNCACQ_STS0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_SYNCACQ_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl36_syncacq_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL36_SYNCACQ_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_SYNCACQ_STS0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl36_syncacq_sts0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL36_SYNCACQ_STS0r BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_SYNCACQ_STS0r
#define RX_X4_CL36_SYNCACQ_STS0r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_SYNCACQ_STS0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_SYNCACQ_STS0r_t RX_X4_CL36_SYNCACQ_STS0r_t;
#define RX_X4_CL36_SYNCACQ_STS0r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_SYNCACQ_STS0r_CLR
#define RX_X4_CL36_SYNCACQ_STS0r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_SYNCACQ_STS0r_SET
#define RX_X4_CL36_SYNCACQ_STS0r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_SYNCACQ_STS0r_GET
#define RX_X4_CL36_SYNCACQ_STS0r_CL36RX_SYNCACQ_STATE_CODED_PER_LNf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_SYNCACQ_STS0r_CL36RX_SYNCACQ_STATE_CODED_PER_LNf_GET
#define RX_X4_CL36_SYNCACQ_STS0r_CL36RX_SYNCACQ_STATE_CODED_PER_LNf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_SYNCACQ_STS0r_CL36RX_SYNCACQ_STATE_CODED_PER_LNf_SET
#define READ_RX_X4_CL36_SYNCACQ_STS0r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL36_SYNCACQ_STS0r
#define WRITE_RX_X4_CL36_SYNCACQ_STS0r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL36_SYNCACQ_STS0r
#define MODIFY_RX_X4_CL36_SYNCACQ_STS0r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL36_SYNCACQ_STS0r
#define READLN_RX_X4_CL36_SYNCACQ_STS0r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL36_SYNCACQ_STS0r
#define WRITELN_RX_X4_CL36_SYNCACQ_STS0r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL36_SYNCACQ_STS0r
#define WRITEALL_RX_X4_CL36_SYNCACQ_STS0r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL36_SYNCACQ_STS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_SYNCACQ_STS0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_CL36_SYNCACQ_STS1
 * BLOCKS:   RX_X4_STATUS1
 * REGADDR:  0xc169
 * DESC:     cl36rx_syncacq_status_1 register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL36RX_SYNCACQ_HIS_STATE_PER_LN bit 0 - LOSS_OF_SYNCbit 1 - COMMA_DET_1bit 2 - ACQ_SYNC_1bit 3 - COMMA_DET_2bit 4 - ACQ_SYNC_2bit 5 - COMMA_DET_3bit 6 - SYNC_ACQ_1bit 7 - SYNC_ACQ_2bit 8 - SYNC_ACQ_3bit 9 - SYNC_ACQ_4bit 10 - SYNC_ACQ_2Abit 11 - SYNC_ACQ_3Abit 12 - SYNC_ACQ_4A
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_SYNCACQ_STS1r (0x0000c169 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_SYNCACQ_STS1r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL36_SYNCACQ_STS1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_SYNCACQ_STS1r_s {
	uint32_t v[1];
	uint32_t rx_x4_cl36_syncacq_sts1[1];
	uint32_t _rx_x4_cl36_syncacq_sts1;
} BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_SYNCACQ_STS1r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_SYNCACQ_STS1r_CLR(r) (r).rx_x4_cl36_syncacq_sts1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_SYNCACQ_STS1r_SET(r,d) (r).rx_x4_cl36_syncacq_sts1[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_SYNCACQ_STS1r_GET(r) (r).rx_x4_cl36_syncacq_sts1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_SYNCACQ_STS1r_CL36RX_SYNCACQ_HIS_STATE_PER_LNf_GET(r) (((r).rx_x4_cl36_syncacq_sts1[0]) & 0x1fff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_SYNCACQ_STS1r_CL36RX_SYNCACQ_HIS_STATE_PER_LNf_SET(r,f) (r).rx_x4_cl36_syncacq_sts1[0]=(((r).rx_x4_cl36_syncacq_sts1[0] & ~((uint32_t)0x1fff)) | (((uint32_t)f) & 0x1fff)) | (0x1fff << 16)

/*
 * These macros can be used to access RX_X4_CL36_SYNCACQ_STS1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL36_SYNCACQ_STS1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_SYNCACQ_STS1r,(_r._rx_x4_cl36_syncacq_sts1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL36_SYNCACQ_STS1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_SYNCACQ_STS1r,(_r._rx_x4_cl36_syncacq_sts1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL36_SYNCACQ_STS1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_SYNCACQ_STS1r,(_r._rx_x4_cl36_syncacq_sts1))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL36_SYNCACQ_STS1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_SYNCACQ_STS1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl36_syncacq_sts1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL36_SYNCACQ_STS1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_SYNCACQ_STS1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl36_syncacq_sts1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL36_SYNCACQ_STS1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_SYNCACQ_STS1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl36_syncacq_sts1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL36_SYNCACQ_STS1r BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_SYNCACQ_STS1r
#define RX_X4_CL36_SYNCACQ_STS1r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_SYNCACQ_STS1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_SYNCACQ_STS1r_t RX_X4_CL36_SYNCACQ_STS1r_t;
#define RX_X4_CL36_SYNCACQ_STS1r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_SYNCACQ_STS1r_CLR
#define RX_X4_CL36_SYNCACQ_STS1r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_SYNCACQ_STS1r_SET
#define RX_X4_CL36_SYNCACQ_STS1r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_SYNCACQ_STS1r_GET
#define RX_X4_CL36_SYNCACQ_STS1r_CL36RX_SYNCACQ_HIS_STATE_PER_LNf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_SYNCACQ_STS1r_CL36RX_SYNCACQ_HIS_STATE_PER_LNf_GET
#define RX_X4_CL36_SYNCACQ_STS1r_CL36RX_SYNCACQ_HIS_STATE_PER_LNf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_SYNCACQ_STS1r_CL36RX_SYNCACQ_HIS_STATE_PER_LNf_SET
#define READ_RX_X4_CL36_SYNCACQ_STS1r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL36_SYNCACQ_STS1r
#define WRITE_RX_X4_CL36_SYNCACQ_STS1r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL36_SYNCACQ_STS1r
#define MODIFY_RX_X4_CL36_SYNCACQ_STS1r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL36_SYNCACQ_STS1r
#define READLN_RX_X4_CL36_SYNCACQ_STS1r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL36_SYNCACQ_STS1r
#define WRITELN_RX_X4_CL36_SYNCACQ_STS1r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL36_SYNCACQ_STS1r
#define WRITEALL_RX_X4_CL36_SYNCACQ_STS1r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL36_SYNCACQ_STS1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_SYNCACQ_STS1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_CL36_BERCNT
 * BLOCKS:   RX_X4_STATUS1
 * REGADDR:  0xc16a
 * DESC:     cl36rx_bercount register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL36RX_BER_COUNT_PER_LN For cl36 - This field is the 8b/10b symbol error counter that increments1. upon detecting symbol error (due to invalid symbol or disparity error)2. when comma aligns on the wrong boundaryThe error conditions are detected only when cl36 sync_status is asserted.The counter saturates at 8'hFF and clears on read.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_BERCNTr (0x0000c16a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_BERCNTr_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL36_BERCNT.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_BERCNTr_s {
	uint32_t v[1];
	uint32_t rx_x4_cl36_bercnt[1];
	uint32_t _rx_x4_cl36_bercnt;
} BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_BERCNTr_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_BERCNTr_CLR(r) (r).rx_x4_cl36_bercnt[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_BERCNTr_SET(r,d) (r).rx_x4_cl36_bercnt[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_BERCNTr_GET(r) (r).rx_x4_cl36_bercnt[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_BERCNTr_CL36RX_BER_COUNT_PER_LNf_GET(r) (((r).rx_x4_cl36_bercnt[0]) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_BERCNTr_CL36RX_BER_COUNT_PER_LNf_SET(r,f) (r).rx_x4_cl36_bercnt[0]=(((r).rx_x4_cl36_bercnt[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access RX_X4_CL36_BERCNT.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL36_BERCNTr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_BERCNTr,(_r._rx_x4_cl36_bercnt))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL36_BERCNTr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_BERCNTr,(_r._rx_x4_cl36_bercnt)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL36_BERCNTr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_BERCNTr,(_r._rx_x4_cl36_bercnt))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL36_BERCNTr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_BERCNTr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl36_bercnt))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL36_BERCNTr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_BERCNTr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl36_bercnt))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL36_BERCNTr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_BERCNTr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl36_bercnt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL36_BERCNTr BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_BERCNTr
#define RX_X4_CL36_BERCNTr_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_BERCNTr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_BERCNTr_t RX_X4_CL36_BERCNTr_t;
#define RX_X4_CL36_BERCNTr_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_BERCNTr_CLR
#define RX_X4_CL36_BERCNTr_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_BERCNTr_SET
#define RX_X4_CL36_BERCNTr_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_BERCNTr_GET
#define RX_X4_CL36_BERCNTr_CL36RX_BER_COUNT_PER_LNf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_BERCNTr_CL36RX_BER_COUNT_PER_LNf_GET
#define RX_X4_CL36_BERCNTr_CL36RX_BER_COUNT_PER_LNf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_BERCNTr_CL36RX_BER_COUNT_PER_LNf_SET
#define READ_RX_X4_CL36_BERCNTr BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL36_BERCNTr
#define WRITE_RX_X4_CL36_BERCNTr BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL36_BERCNTr
#define MODIFY_RX_X4_CL36_BERCNTr BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL36_BERCNTr
#define READLN_RX_X4_CL36_BERCNTr BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL36_BERCNTr
#define WRITELN_RX_X4_CL36_BERCNTr BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL36_BERCNTr
#define WRITEALL_RX_X4_CL36_BERCNTr BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL36_BERCNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_CL36_BERCNTr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_IEEE_25G_PARLLEL_DET_STS
 * BLOCKS:   RX_X4_STATUS1
 * REGADDR:  0xc16b
 * DESC:     IEEE and MSA detction FSM live state
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MSA_IEEE_DET_STATE [0] : IEEE mode detection mode[1] : MSA mode detection mode[2] : Resolution is done see resolved bit to see what is resolved.
 *     RESOLVED_25_MODE 00: No resolution (either not enabled or still looking for lock)01: IEEE mode is resolved10: MSA mode is resolved11: Illegal value, It should never achieve this value.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STSr (0x0000c16b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STSr_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_IEEE_25G_PARLLEL_DET_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STSr_s {
	uint32_t v[1];
	uint32_t rx_x4_ieee_25g_parllel_det_sts[1];
	uint32_t _rx_x4_ieee_25g_parllel_det_sts;
} BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STSr_CLR(r) (r).rx_x4_ieee_25g_parllel_det_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STSr_SET(r,d) (r).rx_x4_ieee_25g_parllel_det_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STSr_GET(r) (r).rx_x4_ieee_25g_parllel_det_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STSr_RESOLVED_25_MODEf_GET(r) ((((r).rx_x4_ieee_25g_parllel_det_sts[0]) >> 3) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STSr_RESOLVED_25_MODEf_SET(r,f) (r).rx_x4_ieee_25g_parllel_det_sts[0]=(((r).rx_x4_ieee_25g_parllel_det_sts[0] & ~((uint32_t)0x3 << 3)) | ((((uint32_t)f) & 0x3) << 3)) | (3 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STSr_MSA_IEEE_DET_STATEf_GET(r) (((r).rx_x4_ieee_25g_parllel_det_sts[0]) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STSr_MSA_IEEE_DET_STATEf_SET(r,f) (r).rx_x4_ieee_25g_parllel_det_sts[0]=(((r).rx_x4_ieee_25g_parllel_det_sts[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access RX_X4_IEEE_25G_PARLLEL_DET_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_IEEE_25G_PARLLEL_DET_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STSr,(_r._rx_x4_ieee_25g_parllel_det_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_IEEE_25G_PARLLEL_DET_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STSr,(_r._rx_x4_ieee_25g_parllel_det_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_IEEE_25G_PARLLEL_DET_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STSr,(_r._rx_x4_ieee_25g_parllel_det_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_IEEE_25G_PARLLEL_DET_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ieee_25g_parllel_det_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_IEEE_25G_PARLLEL_DET_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ieee_25g_parllel_det_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_IEEE_25G_PARLLEL_DET_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_ieee_25g_parllel_det_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_IEEE_25G_PARLLEL_DET_STSr BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STSr
#define RX_X4_IEEE_25G_PARLLEL_DET_STSr_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STSr_t RX_X4_IEEE_25G_PARLLEL_DET_STSr_t;
#define RX_X4_IEEE_25G_PARLLEL_DET_STSr_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STSr_CLR
#define RX_X4_IEEE_25G_PARLLEL_DET_STSr_SET BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STSr_SET
#define RX_X4_IEEE_25G_PARLLEL_DET_STSr_GET BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STSr_GET
#define RX_X4_IEEE_25G_PARLLEL_DET_STSr_RESOLVED_25_MODEf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STSr_RESOLVED_25_MODEf_GET
#define RX_X4_IEEE_25G_PARLLEL_DET_STSr_RESOLVED_25_MODEf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STSr_RESOLVED_25_MODEf_SET
#define RX_X4_IEEE_25G_PARLLEL_DET_STSr_MSA_IEEE_DET_STATEf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STSr_MSA_IEEE_DET_STATEf_GET
#define RX_X4_IEEE_25G_PARLLEL_DET_STSr_MSA_IEEE_DET_STATEf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STSr_MSA_IEEE_DET_STATEf_SET
#define READ_RX_X4_IEEE_25G_PARLLEL_DET_STSr BCMI_TSCF_GEN3_XGXS_READ_RX_X4_IEEE_25G_PARLLEL_DET_STSr
#define WRITE_RX_X4_IEEE_25G_PARLLEL_DET_STSr BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_IEEE_25G_PARLLEL_DET_STSr
#define MODIFY_RX_X4_IEEE_25G_PARLLEL_DET_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_IEEE_25G_PARLLEL_DET_STSr
#define READLN_RX_X4_IEEE_25G_PARLLEL_DET_STSr BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_IEEE_25G_PARLLEL_DET_STSr
#define WRITELN_RX_X4_IEEE_25G_PARLLEL_DET_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_IEEE_25G_PARLLEL_DET_STSr
#define WRITEALL_RX_X4_IEEE_25G_PARLLEL_DET_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_IEEE_25G_PARLLEL_DET_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_CL49_SCRIDLE_TEST_ERR
 * BLOCKS:   RX_X4_STATUS1
 * REGADDR:  0xc16c
 * DESC:     CL49 Scrambled IDLE test Error register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL49_SCRIDLE_TEST_ERR CL49 Scrambled IDLE Test Error counter
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL49_SCRIDLE_TEST_ERRr (0x0000c16c | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL49_SCRIDLE_TEST_ERRr_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL49_SCRIDLE_TEST_ERR.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_CL49_SCRIDLE_TEST_ERRr_s {
	uint32_t v[1];
	uint32_t rx_x4_cl49_scridle_test_err[1];
	uint32_t _rx_x4_cl49_scridle_test_err;
} BCMI_TSCF_GEN3_XGXS_RX_X4_CL49_SCRIDLE_TEST_ERRr_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL49_SCRIDLE_TEST_ERRr_CLR(r) (r).rx_x4_cl49_scridle_test_err[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL49_SCRIDLE_TEST_ERRr_SET(r,d) (r).rx_x4_cl49_scridle_test_err[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL49_SCRIDLE_TEST_ERRr_GET(r) (r).rx_x4_cl49_scridle_test_err[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL49_SCRIDLE_TEST_ERRr_CL49_SCRIDLE_TEST_ERRf_GET(r) (((r).rx_x4_cl49_scridle_test_err[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL49_SCRIDLE_TEST_ERRr_CL49_SCRIDLE_TEST_ERRf_SET(r,f) (r).rx_x4_cl49_scridle_test_err[0]=(((r).rx_x4_cl49_scridle_test_err[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_CL49_SCRIDLE_TEST_ERR.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL49_SCRIDLE_TEST_ERRr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL49_SCRIDLE_TEST_ERRr,(_r._rx_x4_cl49_scridle_test_err))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL49_SCRIDLE_TEST_ERRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL49_SCRIDLE_TEST_ERRr,(_r._rx_x4_cl49_scridle_test_err)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL49_SCRIDLE_TEST_ERRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL49_SCRIDLE_TEST_ERRr,(_r._rx_x4_cl49_scridle_test_err))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL49_SCRIDLE_TEST_ERRr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL49_SCRIDLE_TEST_ERRr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl49_scridle_test_err))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL49_SCRIDLE_TEST_ERRr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL49_SCRIDLE_TEST_ERRr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl49_scridle_test_err))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL49_SCRIDLE_TEST_ERRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL49_SCRIDLE_TEST_ERRr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl49_scridle_test_err))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL49_SCRIDLE_TEST_ERRr BCMI_TSCF_GEN3_XGXS_RX_X4_CL49_SCRIDLE_TEST_ERRr
#define RX_X4_CL49_SCRIDLE_TEST_ERRr_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_CL49_SCRIDLE_TEST_ERRr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_CL49_SCRIDLE_TEST_ERRr_t RX_X4_CL49_SCRIDLE_TEST_ERRr_t;
#define RX_X4_CL49_SCRIDLE_TEST_ERRr_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_CL49_SCRIDLE_TEST_ERRr_CLR
#define RX_X4_CL49_SCRIDLE_TEST_ERRr_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL49_SCRIDLE_TEST_ERRr_SET
#define RX_X4_CL49_SCRIDLE_TEST_ERRr_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL49_SCRIDLE_TEST_ERRr_GET
#define RX_X4_CL49_SCRIDLE_TEST_ERRr_CL49_SCRIDLE_TEST_ERRf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL49_SCRIDLE_TEST_ERRr_CL49_SCRIDLE_TEST_ERRf_GET
#define RX_X4_CL49_SCRIDLE_TEST_ERRr_CL49_SCRIDLE_TEST_ERRf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL49_SCRIDLE_TEST_ERRr_CL49_SCRIDLE_TEST_ERRf_SET
#define READ_RX_X4_CL49_SCRIDLE_TEST_ERRr BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL49_SCRIDLE_TEST_ERRr
#define WRITE_RX_X4_CL49_SCRIDLE_TEST_ERRr BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL49_SCRIDLE_TEST_ERRr
#define MODIFY_RX_X4_CL49_SCRIDLE_TEST_ERRr BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL49_SCRIDLE_TEST_ERRr
#define READLN_RX_X4_CL49_SCRIDLE_TEST_ERRr BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL49_SCRIDLE_TEST_ERRr
#define WRITELN_RX_X4_CL49_SCRIDLE_TEST_ERRr BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL49_SCRIDLE_TEST_ERRr
#define WRITEALL_RX_X4_CL49_SCRIDLE_TEST_ERRr BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL49_SCRIDLE_TEST_ERRr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_CL49_SCRIDLE_TEST_ERRr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_CL82_AM_LATCH_STS_PSLL0
 * BLOCKS:   RX_X4_STATUS2
 * REGADDR:  0xc170
 * DESC:     AM FSM latched status for pseudo-logical lane 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AM_LOCK_HIS_STATE_PSLL_0 Alignment marker history states - per logical lane for psll 0clear on read
 *     AMRKR_SPACING_ERR_LATCH_MUX_PSLL_0 align marker spacing error detected - per logical lane for psll 0clear on read
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL0r (0x0000c170 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL0r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL82_AM_LATCH_STS_PSLL0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL0r_s {
	uint32_t v[1];
	uint32_t rx_x4_cl82_am_latch_sts_psll0[1];
	uint32_t _rx_x4_cl82_am_latch_sts_psll0;
} BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL0r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL0r_CLR(r) (r).rx_x4_cl82_am_latch_sts_psll0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL0r_SET(r,d) (r).rx_x4_cl82_am_latch_sts_psll0[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL0r_GET(r) (r).rx_x4_cl82_am_latch_sts_psll0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL0r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_0f_GET(r) ((((r).rx_x4_cl82_am_latch_sts_psll0[0]) >> 10) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL0r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_0f_SET(r,f) (r).rx_x4_cl82_am_latch_sts_psll0[0]=(((r).rx_x4_cl82_am_latch_sts_psll0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL0r_AM_LOCK_HIS_STATE_PSLL_0f_GET(r) (((r).rx_x4_cl82_am_latch_sts_psll0[0]) & 0x3ff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL0r_AM_LOCK_HIS_STATE_PSLL_0f_SET(r,f) (r).rx_x4_cl82_am_latch_sts_psll0[0]=(((r).rx_x4_cl82_am_latch_sts_psll0[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff)) | (0x3ff << 16)

/*
 * These macros can be used to access RX_X4_CL82_AM_LATCH_STS_PSLL0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL82_AM_LATCH_STS_PSLL0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL0r,(_r._rx_x4_cl82_am_latch_sts_psll0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL82_AM_LATCH_STS_PSLL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL0r,(_r._rx_x4_cl82_am_latch_sts_psll0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL82_AM_LATCH_STS_PSLL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL0r,(_r._rx_x4_cl82_am_latch_sts_psll0))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL82_AM_LATCH_STS_PSLL0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl82_am_latch_sts_psll0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL82_AM_LATCH_STS_PSLL0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl82_am_latch_sts_psll0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL82_AM_LATCH_STS_PSLL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl82_am_latch_sts_psll0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL82_AM_LATCH_STS_PSLL0r BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL0r
#define RX_X4_CL82_AM_LATCH_STS_PSLL0r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL0r_t RX_X4_CL82_AM_LATCH_STS_PSLL0r_t;
#define RX_X4_CL82_AM_LATCH_STS_PSLL0r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL0r_CLR
#define RX_X4_CL82_AM_LATCH_STS_PSLL0r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL0r_SET
#define RX_X4_CL82_AM_LATCH_STS_PSLL0r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL0r_GET
#define RX_X4_CL82_AM_LATCH_STS_PSLL0r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_0f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL0r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_0f_GET
#define RX_X4_CL82_AM_LATCH_STS_PSLL0r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_0f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL0r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_0f_SET
#define RX_X4_CL82_AM_LATCH_STS_PSLL0r_AM_LOCK_HIS_STATE_PSLL_0f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL0r_AM_LOCK_HIS_STATE_PSLL_0f_GET
#define RX_X4_CL82_AM_LATCH_STS_PSLL0r_AM_LOCK_HIS_STATE_PSLL_0f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL0r_AM_LOCK_HIS_STATE_PSLL_0f_SET
#define READ_RX_X4_CL82_AM_LATCH_STS_PSLL0r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL82_AM_LATCH_STS_PSLL0r
#define WRITE_RX_X4_CL82_AM_LATCH_STS_PSLL0r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL82_AM_LATCH_STS_PSLL0r
#define MODIFY_RX_X4_CL82_AM_LATCH_STS_PSLL0r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL82_AM_LATCH_STS_PSLL0r
#define READLN_RX_X4_CL82_AM_LATCH_STS_PSLL0r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL82_AM_LATCH_STS_PSLL0r
#define WRITELN_RX_X4_CL82_AM_LATCH_STS_PSLL0r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL82_AM_LATCH_STS_PSLL0r
#define WRITEALL_RX_X4_CL82_AM_LATCH_STS_PSLL0r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL82_AM_LATCH_STS_PSLL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_CL82_AM_LATCH_STS_PSLL1
 * BLOCKS:   RX_X4_STATUS2
 * REGADDR:  0xc171
 * DESC:     AM FSM latched status for pseudo-logical lane 1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AM_LOCK_HIS_STATE_PSLL_1 Alignment marker history states - per logical lane for psll 1clear on read
 *     AMRKR_SPACING_ERR_LATCH_MUX_PSLL_1 align marker spacing error detected - per logical lane for psll 1clear on read
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL1r (0x0000c171 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL1r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL82_AM_LATCH_STS_PSLL1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL1r_s {
	uint32_t v[1];
	uint32_t rx_x4_cl82_am_latch_sts_psll1[1];
	uint32_t _rx_x4_cl82_am_latch_sts_psll1;
} BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL1r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL1r_CLR(r) (r).rx_x4_cl82_am_latch_sts_psll1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL1r_SET(r,d) (r).rx_x4_cl82_am_latch_sts_psll1[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL1r_GET(r) (r).rx_x4_cl82_am_latch_sts_psll1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL1r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_1f_GET(r) ((((r).rx_x4_cl82_am_latch_sts_psll1[0]) >> 10) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL1r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_1f_SET(r,f) (r).rx_x4_cl82_am_latch_sts_psll1[0]=(((r).rx_x4_cl82_am_latch_sts_psll1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL1r_AM_LOCK_HIS_STATE_PSLL_1f_GET(r) (((r).rx_x4_cl82_am_latch_sts_psll1[0]) & 0x3ff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL1r_AM_LOCK_HIS_STATE_PSLL_1f_SET(r,f) (r).rx_x4_cl82_am_latch_sts_psll1[0]=(((r).rx_x4_cl82_am_latch_sts_psll1[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff)) | (0x3ff << 16)

/*
 * These macros can be used to access RX_X4_CL82_AM_LATCH_STS_PSLL1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL82_AM_LATCH_STS_PSLL1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL1r,(_r._rx_x4_cl82_am_latch_sts_psll1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL82_AM_LATCH_STS_PSLL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL1r,(_r._rx_x4_cl82_am_latch_sts_psll1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL82_AM_LATCH_STS_PSLL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL1r,(_r._rx_x4_cl82_am_latch_sts_psll1))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL82_AM_LATCH_STS_PSLL1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl82_am_latch_sts_psll1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL82_AM_LATCH_STS_PSLL1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl82_am_latch_sts_psll1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL82_AM_LATCH_STS_PSLL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl82_am_latch_sts_psll1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL82_AM_LATCH_STS_PSLL1r BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL1r
#define RX_X4_CL82_AM_LATCH_STS_PSLL1r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL1r_t RX_X4_CL82_AM_LATCH_STS_PSLL1r_t;
#define RX_X4_CL82_AM_LATCH_STS_PSLL1r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL1r_CLR
#define RX_X4_CL82_AM_LATCH_STS_PSLL1r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL1r_SET
#define RX_X4_CL82_AM_LATCH_STS_PSLL1r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL1r_GET
#define RX_X4_CL82_AM_LATCH_STS_PSLL1r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_1f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL1r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_1f_GET
#define RX_X4_CL82_AM_LATCH_STS_PSLL1r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_1f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL1r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_1f_SET
#define RX_X4_CL82_AM_LATCH_STS_PSLL1r_AM_LOCK_HIS_STATE_PSLL_1f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL1r_AM_LOCK_HIS_STATE_PSLL_1f_GET
#define RX_X4_CL82_AM_LATCH_STS_PSLL1r_AM_LOCK_HIS_STATE_PSLL_1f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL1r_AM_LOCK_HIS_STATE_PSLL_1f_SET
#define READ_RX_X4_CL82_AM_LATCH_STS_PSLL1r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL82_AM_LATCH_STS_PSLL1r
#define WRITE_RX_X4_CL82_AM_LATCH_STS_PSLL1r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL82_AM_LATCH_STS_PSLL1r
#define MODIFY_RX_X4_CL82_AM_LATCH_STS_PSLL1r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL82_AM_LATCH_STS_PSLL1r
#define READLN_RX_X4_CL82_AM_LATCH_STS_PSLL1r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL82_AM_LATCH_STS_PSLL1r
#define WRITELN_RX_X4_CL82_AM_LATCH_STS_PSLL1r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL82_AM_LATCH_STS_PSLL1r
#define WRITEALL_RX_X4_CL82_AM_LATCH_STS_PSLL1r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL82_AM_LATCH_STS_PSLL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_CL82_AM_LATCH_STS_PSLL2
 * BLOCKS:   RX_X4_STATUS2
 * REGADDR:  0xc172
 * DESC:     AM FSM latched status for pseudo-logical lane 2
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AM_LOCK_HIS_STATE_PSLL_2 Alignment marker history states - per logical lane for psll 2clear on read
 *     AMRKR_SPACING_ERR_LATCH_MUX_PSLL_2 align marker spacing error detected - per logical lane for psll 2clear on read
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL2r (0x0000c172 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL82_AM_LATCH_STS_PSLL2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL2r_s {
	uint32_t v[1];
	uint32_t rx_x4_cl82_am_latch_sts_psll2[1];
	uint32_t _rx_x4_cl82_am_latch_sts_psll2;
} BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL2r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL2r_CLR(r) (r).rx_x4_cl82_am_latch_sts_psll2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL2r_SET(r,d) (r).rx_x4_cl82_am_latch_sts_psll2[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL2r_GET(r) (r).rx_x4_cl82_am_latch_sts_psll2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL2r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_2f_GET(r) ((((r).rx_x4_cl82_am_latch_sts_psll2[0]) >> 10) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL2r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_2f_SET(r,f) (r).rx_x4_cl82_am_latch_sts_psll2[0]=(((r).rx_x4_cl82_am_latch_sts_psll2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL2r_AM_LOCK_HIS_STATE_PSLL_2f_GET(r) (((r).rx_x4_cl82_am_latch_sts_psll2[0]) & 0x3ff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL2r_AM_LOCK_HIS_STATE_PSLL_2f_SET(r,f) (r).rx_x4_cl82_am_latch_sts_psll2[0]=(((r).rx_x4_cl82_am_latch_sts_psll2[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff)) | (0x3ff << 16)

/*
 * These macros can be used to access RX_X4_CL82_AM_LATCH_STS_PSLL2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL82_AM_LATCH_STS_PSLL2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL2r,(_r._rx_x4_cl82_am_latch_sts_psll2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL82_AM_LATCH_STS_PSLL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL2r,(_r._rx_x4_cl82_am_latch_sts_psll2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL82_AM_LATCH_STS_PSLL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL2r,(_r._rx_x4_cl82_am_latch_sts_psll2))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL82_AM_LATCH_STS_PSLL2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl82_am_latch_sts_psll2))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL82_AM_LATCH_STS_PSLL2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl82_am_latch_sts_psll2))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL82_AM_LATCH_STS_PSLL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl82_am_latch_sts_psll2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL82_AM_LATCH_STS_PSLL2r BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL2r
#define RX_X4_CL82_AM_LATCH_STS_PSLL2r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL2r_t RX_X4_CL82_AM_LATCH_STS_PSLL2r_t;
#define RX_X4_CL82_AM_LATCH_STS_PSLL2r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL2r_CLR
#define RX_X4_CL82_AM_LATCH_STS_PSLL2r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL2r_SET
#define RX_X4_CL82_AM_LATCH_STS_PSLL2r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL2r_GET
#define RX_X4_CL82_AM_LATCH_STS_PSLL2r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_2f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL2r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_2f_GET
#define RX_X4_CL82_AM_LATCH_STS_PSLL2r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_2f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL2r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_2f_SET
#define RX_X4_CL82_AM_LATCH_STS_PSLL2r_AM_LOCK_HIS_STATE_PSLL_2f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL2r_AM_LOCK_HIS_STATE_PSLL_2f_GET
#define RX_X4_CL82_AM_LATCH_STS_PSLL2r_AM_LOCK_HIS_STATE_PSLL_2f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL2r_AM_LOCK_HIS_STATE_PSLL_2f_SET
#define READ_RX_X4_CL82_AM_LATCH_STS_PSLL2r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL82_AM_LATCH_STS_PSLL2r
#define WRITE_RX_X4_CL82_AM_LATCH_STS_PSLL2r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL82_AM_LATCH_STS_PSLL2r
#define MODIFY_RX_X4_CL82_AM_LATCH_STS_PSLL2r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL82_AM_LATCH_STS_PSLL2r
#define READLN_RX_X4_CL82_AM_LATCH_STS_PSLL2r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL82_AM_LATCH_STS_PSLL2r
#define WRITELN_RX_X4_CL82_AM_LATCH_STS_PSLL2r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL82_AM_LATCH_STS_PSLL2r
#define WRITEALL_RX_X4_CL82_AM_LATCH_STS_PSLL2r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL82_AM_LATCH_STS_PSLL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_CL82_AM_LATCH_STS_PSLL3
 * BLOCKS:   RX_X4_STATUS2
 * REGADDR:  0xc173
 * DESC:     AM FSM latched status for pseudo-logical lane 3
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AM_LOCK_HIS_STATE_PSLL_3 Alignment marker history states - per logical lane for psll 3clear on read
 *     AMRKR_SPACING_ERR_LATCH_MUX_PSLL_3 align marker spacing error detected - per logical lane for psll 3clear on read
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL3r (0x0000c173 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL3r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL82_AM_LATCH_STS_PSLL3.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL3r_s {
	uint32_t v[1];
	uint32_t rx_x4_cl82_am_latch_sts_psll3[1];
	uint32_t _rx_x4_cl82_am_latch_sts_psll3;
} BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL3r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL3r_CLR(r) (r).rx_x4_cl82_am_latch_sts_psll3[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL3r_SET(r,d) (r).rx_x4_cl82_am_latch_sts_psll3[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL3r_GET(r) (r).rx_x4_cl82_am_latch_sts_psll3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL3r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_3f_GET(r) ((((r).rx_x4_cl82_am_latch_sts_psll3[0]) >> 10) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL3r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_3f_SET(r,f) (r).rx_x4_cl82_am_latch_sts_psll3[0]=(((r).rx_x4_cl82_am_latch_sts_psll3[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL3r_AM_LOCK_HIS_STATE_PSLL_3f_GET(r) (((r).rx_x4_cl82_am_latch_sts_psll3[0]) & 0x3ff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL3r_AM_LOCK_HIS_STATE_PSLL_3f_SET(r,f) (r).rx_x4_cl82_am_latch_sts_psll3[0]=(((r).rx_x4_cl82_am_latch_sts_psll3[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff)) | (0x3ff << 16)

/*
 * These macros can be used to access RX_X4_CL82_AM_LATCH_STS_PSLL3.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL82_AM_LATCH_STS_PSLL3r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL3r,(_r._rx_x4_cl82_am_latch_sts_psll3))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL82_AM_LATCH_STS_PSLL3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL3r,(_r._rx_x4_cl82_am_latch_sts_psll3)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL82_AM_LATCH_STS_PSLL3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL3r,(_r._rx_x4_cl82_am_latch_sts_psll3))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL82_AM_LATCH_STS_PSLL3r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl82_am_latch_sts_psll3))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL82_AM_LATCH_STS_PSLL3r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl82_am_latch_sts_psll3))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL82_AM_LATCH_STS_PSLL3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL3r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl82_am_latch_sts_psll3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL82_AM_LATCH_STS_PSLL3r BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL3r
#define RX_X4_CL82_AM_LATCH_STS_PSLL3r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL3r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL3r_t RX_X4_CL82_AM_LATCH_STS_PSLL3r_t;
#define RX_X4_CL82_AM_LATCH_STS_PSLL3r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL3r_CLR
#define RX_X4_CL82_AM_LATCH_STS_PSLL3r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL3r_SET
#define RX_X4_CL82_AM_LATCH_STS_PSLL3r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL3r_GET
#define RX_X4_CL82_AM_LATCH_STS_PSLL3r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_3f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL3r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_3f_GET
#define RX_X4_CL82_AM_LATCH_STS_PSLL3r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_3f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL3r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_3f_SET
#define RX_X4_CL82_AM_LATCH_STS_PSLL3r_AM_LOCK_HIS_STATE_PSLL_3f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL3r_AM_LOCK_HIS_STATE_PSLL_3f_GET
#define RX_X4_CL82_AM_LATCH_STS_PSLL3r_AM_LOCK_HIS_STATE_PSLL_3f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL3r_AM_LOCK_HIS_STATE_PSLL_3f_SET
#define READ_RX_X4_CL82_AM_LATCH_STS_PSLL3r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL82_AM_LATCH_STS_PSLL3r
#define WRITE_RX_X4_CL82_AM_LATCH_STS_PSLL3r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL82_AM_LATCH_STS_PSLL3r
#define MODIFY_RX_X4_CL82_AM_LATCH_STS_PSLL3r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL82_AM_LATCH_STS_PSLL3r
#define READLN_RX_X4_CL82_AM_LATCH_STS_PSLL3r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL82_AM_LATCH_STS_PSLL3r
#define WRITELN_RX_X4_CL82_AM_LATCH_STS_PSLL3r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL82_AM_LATCH_STS_PSLL3r
#define WRITEALL_RX_X4_CL82_AM_LATCH_STS_PSLL3r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL82_AM_LATCH_STS_PSLL3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_CL82_AM_LATCH_STS_PSLL4
 * BLOCKS:   RX_X4_STATUS2
 * REGADDR:  0xc174
 * DESC:     AM FSM latched status for pseudo-logical lane 4
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AM_LOCK_HIS_STATE_PSLL_4 Alignment marker history states - per logical lane for psll 4clear on read
 *     AMRKR_SPACING_ERR_LATCH_MUX_PSLL_4 align marker spacing error detected - per logical lane for psll 4clear on read
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL4r (0x0000c174 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL4r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL82_AM_LATCH_STS_PSLL4.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL4r_s {
	uint32_t v[1];
	uint32_t rx_x4_cl82_am_latch_sts_psll4[1];
	uint32_t _rx_x4_cl82_am_latch_sts_psll4;
} BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL4r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL4r_CLR(r) (r).rx_x4_cl82_am_latch_sts_psll4[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL4r_SET(r,d) (r).rx_x4_cl82_am_latch_sts_psll4[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL4r_GET(r) (r).rx_x4_cl82_am_latch_sts_psll4[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL4r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_4f_GET(r) ((((r).rx_x4_cl82_am_latch_sts_psll4[0]) >> 10) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL4r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_4f_SET(r,f) (r).rx_x4_cl82_am_latch_sts_psll4[0]=(((r).rx_x4_cl82_am_latch_sts_psll4[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL4r_AM_LOCK_HIS_STATE_PSLL_4f_GET(r) (((r).rx_x4_cl82_am_latch_sts_psll4[0]) & 0x3ff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL4r_AM_LOCK_HIS_STATE_PSLL_4f_SET(r,f) (r).rx_x4_cl82_am_latch_sts_psll4[0]=(((r).rx_x4_cl82_am_latch_sts_psll4[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff)) | (0x3ff << 16)

/*
 * These macros can be used to access RX_X4_CL82_AM_LATCH_STS_PSLL4.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL82_AM_LATCH_STS_PSLL4r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL4r,(_r._rx_x4_cl82_am_latch_sts_psll4))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL82_AM_LATCH_STS_PSLL4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL4r,(_r._rx_x4_cl82_am_latch_sts_psll4)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL82_AM_LATCH_STS_PSLL4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL4r,(_r._rx_x4_cl82_am_latch_sts_psll4))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL82_AM_LATCH_STS_PSLL4r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl82_am_latch_sts_psll4))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL82_AM_LATCH_STS_PSLL4r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl82_am_latch_sts_psll4))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL82_AM_LATCH_STS_PSLL4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL4r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl82_am_latch_sts_psll4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL82_AM_LATCH_STS_PSLL4r BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL4r
#define RX_X4_CL82_AM_LATCH_STS_PSLL4r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL4r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL4r_t RX_X4_CL82_AM_LATCH_STS_PSLL4r_t;
#define RX_X4_CL82_AM_LATCH_STS_PSLL4r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL4r_CLR
#define RX_X4_CL82_AM_LATCH_STS_PSLL4r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL4r_SET
#define RX_X4_CL82_AM_LATCH_STS_PSLL4r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL4r_GET
#define RX_X4_CL82_AM_LATCH_STS_PSLL4r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_4f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL4r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_4f_GET
#define RX_X4_CL82_AM_LATCH_STS_PSLL4r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_4f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL4r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_4f_SET
#define RX_X4_CL82_AM_LATCH_STS_PSLL4r_AM_LOCK_HIS_STATE_PSLL_4f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL4r_AM_LOCK_HIS_STATE_PSLL_4f_GET
#define RX_X4_CL82_AM_LATCH_STS_PSLL4r_AM_LOCK_HIS_STATE_PSLL_4f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL4r_AM_LOCK_HIS_STATE_PSLL_4f_SET
#define READ_RX_X4_CL82_AM_LATCH_STS_PSLL4r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL82_AM_LATCH_STS_PSLL4r
#define WRITE_RX_X4_CL82_AM_LATCH_STS_PSLL4r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL82_AM_LATCH_STS_PSLL4r
#define MODIFY_RX_X4_CL82_AM_LATCH_STS_PSLL4r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL82_AM_LATCH_STS_PSLL4r
#define READLN_RX_X4_CL82_AM_LATCH_STS_PSLL4r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL82_AM_LATCH_STS_PSLL4r
#define WRITELN_RX_X4_CL82_AM_LATCH_STS_PSLL4r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL82_AM_LATCH_STS_PSLL4r
#define WRITEALL_RX_X4_CL82_AM_LATCH_STS_PSLL4r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL82_AM_LATCH_STS_PSLL4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL4r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_CL82_AM_LIVE_STS_PSLL0
 * BLOCKS:   RX_X4_STATUS2
 * REGADDR:  0xc175
 * DESC:     AM FSM live status for pseudo-logical lane 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     AM_LOCK_STATE_PSLL_0 Alignment marker current states - per logical lane for psll 0
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL0r (0x0000c175 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL0r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL82_AM_LIVE_STS_PSLL0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL0r_s {
	uint32_t v[1];
	uint32_t rx_x4_cl82_am_live_sts_psll0[1];
	uint32_t _rx_x4_cl82_am_live_sts_psll0;
} BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL0r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL0r_CLR(r) (r).rx_x4_cl82_am_live_sts_psll0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL0r_SET(r,d) (r).rx_x4_cl82_am_live_sts_psll0[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL0r_GET(r) (r).rx_x4_cl82_am_live_sts_psll0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL0r_AM_LOCK_STATE_PSLL_0f_GET(r) (((r).rx_x4_cl82_am_live_sts_psll0[0]) & 0x3ff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL0r_AM_LOCK_STATE_PSLL_0f_SET(r,f) (r).rx_x4_cl82_am_live_sts_psll0[0]=(((r).rx_x4_cl82_am_live_sts_psll0[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff)) | (0x3ff << 16)

/*
 * These macros can be used to access RX_X4_CL82_AM_LIVE_STS_PSLL0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL82_AM_LIVE_STS_PSLL0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL0r,(_r._rx_x4_cl82_am_live_sts_psll0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL82_AM_LIVE_STS_PSLL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL0r,(_r._rx_x4_cl82_am_live_sts_psll0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL82_AM_LIVE_STS_PSLL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL0r,(_r._rx_x4_cl82_am_live_sts_psll0))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL82_AM_LIVE_STS_PSLL0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl82_am_live_sts_psll0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL82_AM_LIVE_STS_PSLL0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl82_am_live_sts_psll0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL82_AM_LIVE_STS_PSLL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl82_am_live_sts_psll0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL82_AM_LIVE_STS_PSLL0r BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL0r
#define RX_X4_CL82_AM_LIVE_STS_PSLL0r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL0r_t RX_X4_CL82_AM_LIVE_STS_PSLL0r_t;
#define RX_X4_CL82_AM_LIVE_STS_PSLL0r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL0r_CLR
#define RX_X4_CL82_AM_LIVE_STS_PSLL0r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL0r_SET
#define RX_X4_CL82_AM_LIVE_STS_PSLL0r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL0r_GET
#define RX_X4_CL82_AM_LIVE_STS_PSLL0r_AM_LOCK_STATE_PSLL_0f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL0r_AM_LOCK_STATE_PSLL_0f_GET
#define RX_X4_CL82_AM_LIVE_STS_PSLL0r_AM_LOCK_STATE_PSLL_0f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL0r_AM_LOCK_STATE_PSLL_0f_SET
#define READ_RX_X4_CL82_AM_LIVE_STS_PSLL0r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL82_AM_LIVE_STS_PSLL0r
#define WRITE_RX_X4_CL82_AM_LIVE_STS_PSLL0r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL82_AM_LIVE_STS_PSLL0r
#define MODIFY_RX_X4_CL82_AM_LIVE_STS_PSLL0r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL82_AM_LIVE_STS_PSLL0r
#define READLN_RX_X4_CL82_AM_LIVE_STS_PSLL0r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL82_AM_LIVE_STS_PSLL0r
#define WRITELN_RX_X4_CL82_AM_LIVE_STS_PSLL0r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL82_AM_LIVE_STS_PSLL0r
#define WRITEALL_RX_X4_CL82_AM_LIVE_STS_PSLL0r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL82_AM_LIVE_STS_PSLL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_CL82_AM_LIVE_STS_PSLL1
 * BLOCKS:   RX_X4_STATUS2
 * REGADDR:  0xc176
 * DESC:     AM FSM live status for pseudo-logical lane 1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     AM_LOCK_STATE_PSLL_1 Alignment marker current states - per logical lane for psll 1
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL1r (0x0000c176 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL1r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL82_AM_LIVE_STS_PSLL1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL1r_s {
	uint32_t v[1];
	uint32_t rx_x4_cl82_am_live_sts_psll1[1];
	uint32_t _rx_x4_cl82_am_live_sts_psll1;
} BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL1r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL1r_CLR(r) (r).rx_x4_cl82_am_live_sts_psll1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL1r_SET(r,d) (r).rx_x4_cl82_am_live_sts_psll1[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL1r_GET(r) (r).rx_x4_cl82_am_live_sts_psll1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL1r_AM_LOCK_STATE_PSLL_1f_GET(r) (((r).rx_x4_cl82_am_live_sts_psll1[0]) & 0x3ff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL1r_AM_LOCK_STATE_PSLL_1f_SET(r,f) (r).rx_x4_cl82_am_live_sts_psll1[0]=(((r).rx_x4_cl82_am_live_sts_psll1[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff)) | (0x3ff << 16)

/*
 * These macros can be used to access RX_X4_CL82_AM_LIVE_STS_PSLL1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL82_AM_LIVE_STS_PSLL1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL1r,(_r._rx_x4_cl82_am_live_sts_psll1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL82_AM_LIVE_STS_PSLL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL1r,(_r._rx_x4_cl82_am_live_sts_psll1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL82_AM_LIVE_STS_PSLL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL1r,(_r._rx_x4_cl82_am_live_sts_psll1))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL82_AM_LIVE_STS_PSLL1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl82_am_live_sts_psll1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL82_AM_LIVE_STS_PSLL1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl82_am_live_sts_psll1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL82_AM_LIVE_STS_PSLL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl82_am_live_sts_psll1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL82_AM_LIVE_STS_PSLL1r BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL1r
#define RX_X4_CL82_AM_LIVE_STS_PSLL1r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL1r_t RX_X4_CL82_AM_LIVE_STS_PSLL1r_t;
#define RX_X4_CL82_AM_LIVE_STS_PSLL1r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL1r_CLR
#define RX_X4_CL82_AM_LIVE_STS_PSLL1r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL1r_SET
#define RX_X4_CL82_AM_LIVE_STS_PSLL1r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL1r_GET
#define RX_X4_CL82_AM_LIVE_STS_PSLL1r_AM_LOCK_STATE_PSLL_1f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL1r_AM_LOCK_STATE_PSLL_1f_GET
#define RX_X4_CL82_AM_LIVE_STS_PSLL1r_AM_LOCK_STATE_PSLL_1f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL1r_AM_LOCK_STATE_PSLL_1f_SET
#define READ_RX_X4_CL82_AM_LIVE_STS_PSLL1r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL82_AM_LIVE_STS_PSLL1r
#define WRITE_RX_X4_CL82_AM_LIVE_STS_PSLL1r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL82_AM_LIVE_STS_PSLL1r
#define MODIFY_RX_X4_CL82_AM_LIVE_STS_PSLL1r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL82_AM_LIVE_STS_PSLL1r
#define READLN_RX_X4_CL82_AM_LIVE_STS_PSLL1r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL82_AM_LIVE_STS_PSLL1r
#define WRITELN_RX_X4_CL82_AM_LIVE_STS_PSLL1r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL82_AM_LIVE_STS_PSLL1r
#define WRITEALL_RX_X4_CL82_AM_LIVE_STS_PSLL1r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL82_AM_LIVE_STS_PSLL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_CL82_AM_LIVE_STS_PSLL2
 * BLOCKS:   RX_X4_STATUS2
 * REGADDR:  0xc177
 * DESC:     AM FSM live status for pseudo-logical lane 2
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     AM_LOCK_STATE_PSLL_2 Alignment marker current states - per logical lane for psll 2
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL2r (0x0000c177 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL82_AM_LIVE_STS_PSLL2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL2r_s {
	uint32_t v[1];
	uint32_t rx_x4_cl82_am_live_sts_psll2[1];
	uint32_t _rx_x4_cl82_am_live_sts_psll2;
} BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL2r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL2r_CLR(r) (r).rx_x4_cl82_am_live_sts_psll2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL2r_SET(r,d) (r).rx_x4_cl82_am_live_sts_psll2[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL2r_GET(r) (r).rx_x4_cl82_am_live_sts_psll2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL2r_AM_LOCK_STATE_PSLL_2f_GET(r) (((r).rx_x4_cl82_am_live_sts_psll2[0]) & 0x3ff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL2r_AM_LOCK_STATE_PSLL_2f_SET(r,f) (r).rx_x4_cl82_am_live_sts_psll2[0]=(((r).rx_x4_cl82_am_live_sts_psll2[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff)) | (0x3ff << 16)

/*
 * These macros can be used to access RX_X4_CL82_AM_LIVE_STS_PSLL2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL82_AM_LIVE_STS_PSLL2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL2r,(_r._rx_x4_cl82_am_live_sts_psll2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL82_AM_LIVE_STS_PSLL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL2r,(_r._rx_x4_cl82_am_live_sts_psll2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL82_AM_LIVE_STS_PSLL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL2r,(_r._rx_x4_cl82_am_live_sts_psll2))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL82_AM_LIVE_STS_PSLL2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl82_am_live_sts_psll2))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL82_AM_LIVE_STS_PSLL2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl82_am_live_sts_psll2))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL82_AM_LIVE_STS_PSLL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl82_am_live_sts_psll2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL82_AM_LIVE_STS_PSLL2r BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL2r
#define RX_X4_CL82_AM_LIVE_STS_PSLL2r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL2r_t RX_X4_CL82_AM_LIVE_STS_PSLL2r_t;
#define RX_X4_CL82_AM_LIVE_STS_PSLL2r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL2r_CLR
#define RX_X4_CL82_AM_LIVE_STS_PSLL2r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL2r_SET
#define RX_X4_CL82_AM_LIVE_STS_PSLL2r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL2r_GET
#define RX_X4_CL82_AM_LIVE_STS_PSLL2r_AM_LOCK_STATE_PSLL_2f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL2r_AM_LOCK_STATE_PSLL_2f_GET
#define RX_X4_CL82_AM_LIVE_STS_PSLL2r_AM_LOCK_STATE_PSLL_2f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL2r_AM_LOCK_STATE_PSLL_2f_SET
#define READ_RX_X4_CL82_AM_LIVE_STS_PSLL2r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL82_AM_LIVE_STS_PSLL2r
#define WRITE_RX_X4_CL82_AM_LIVE_STS_PSLL2r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL82_AM_LIVE_STS_PSLL2r
#define MODIFY_RX_X4_CL82_AM_LIVE_STS_PSLL2r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL82_AM_LIVE_STS_PSLL2r
#define READLN_RX_X4_CL82_AM_LIVE_STS_PSLL2r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL82_AM_LIVE_STS_PSLL2r
#define WRITELN_RX_X4_CL82_AM_LIVE_STS_PSLL2r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL82_AM_LIVE_STS_PSLL2r
#define WRITEALL_RX_X4_CL82_AM_LIVE_STS_PSLL2r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL82_AM_LIVE_STS_PSLL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_CL82_AM_LIVE_STS_PSLL3
 * BLOCKS:   RX_X4_STATUS2
 * REGADDR:  0xc178
 * DESC:     AM FSM live status for pseudo-logical lane 3
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     AM_LOCK_STATE_PSLL_3 Alignment marker current states - per logical lane for psll 3
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL3r (0x0000c178 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL3r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL82_AM_LIVE_STS_PSLL3.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL3r_s {
	uint32_t v[1];
	uint32_t rx_x4_cl82_am_live_sts_psll3[1];
	uint32_t _rx_x4_cl82_am_live_sts_psll3;
} BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL3r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL3r_CLR(r) (r).rx_x4_cl82_am_live_sts_psll3[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL3r_SET(r,d) (r).rx_x4_cl82_am_live_sts_psll3[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL3r_GET(r) (r).rx_x4_cl82_am_live_sts_psll3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL3r_AM_LOCK_STATE_PSLL_3f_GET(r) (((r).rx_x4_cl82_am_live_sts_psll3[0]) & 0x3ff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL3r_AM_LOCK_STATE_PSLL_3f_SET(r,f) (r).rx_x4_cl82_am_live_sts_psll3[0]=(((r).rx_x4_cl82_am_live_sts_psll3[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff)) | (0x3ff << 16)

/*
 * These macros can be used to access RX_X4_CL82_AM_LIVE_STS_PSLL3.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL82_AM_LIVE_STS_PSLL3r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL3r,(_r._rx_x4_cl82_am_live_sts_psll3))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL82_AM_LIVE_STS_PSLL3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL3r,(_r._rx_x4_cl82_am_live_sts_psll3)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL82_AM_LIVE_STS_PSLL3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL3r,(_r._rx_x4_cl82_am_live_sts_psll3))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL82_AM_LIVE_STS_PSLL3r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl82_am_live_sts_psll3))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL82_AM_LIVE_STS_PSLL3r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl82_am_live_sts_psll3))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL82_AM_LIVE_STS_PSLL3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL3r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl82_am_live_sts_psll3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL82_AM_LIVE_STS_PSLL3r BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL3r
#define RX_X4_CL82_AM_LIVE_STS_PSLL3r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL3r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL3r_t RX_X4_CL82_AM_LIVE_STS_PSLL3r_t;
#define RX_X4_CL82_AM_LIVE_STS_PSLL3r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL3r_CLR
#define RX_X4_CL82_AM_LIVE_STS_PSLL3r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL3r_SET
#define RX_X4_CL82_AM_LIVE_STS_PSLL3r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL3r_GET
#define RX_X4_CL82_AM_LIVE_STS_PSLL3r_AM_LOCK_STATE_PSLL_3f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL3r_AM_LOCK_STATE_PSLL_3f_GET
#define RX_X4_CL82_AM_LIVE_STS_PSLL3r_AM_LOCK_STATE_PSLL_3f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL3r_AM_LOCK_STATE_PSLL_3f_SET
#define READ_RX_X4_CL82_AM_LIVE_STS_PSLL3r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL82_AM_LIVE_STS_PSLL3r
#define WRITE_RX_X4_CL82_AM_LIVE_STS_PSLL3r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL82_AM_LIVE_STS_PSLL3r
#define MODIFY_RX_X4_CL82_AM_LIVE_STS_PSLL3r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL82_AM_LIVE_STS_PSLL3r
#define READLN_RX_X4_CL82_AM_LIVE_STS_PSLL3r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL82_AM_LIVE_STS_PSLL3r
#define WRITELN_RX_X4_CL82_AM_LIVE_STS_PSLL3r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL82_AM_LIVE_STS_PSLL3r
#define WRITEALL_RX_X4_CL82_AM_LIVE_STS_PSLL3r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL82_AM_LIVE_STS_PSLL3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_CL82_AM_LIVE_STS_PSLL4
 * BLOCKS:   RX_X4_STATUS2
 * REGADDR:  0xc179
 * DESC:     AM FSM live status for pseudo-logical lane 4
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     AM_LOCK_STATE_PSLL_4 Alignment marker current states - per logical lane for psll 4
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL4r (0x0000c179 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL4r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL82_AM_LIVE_STS_PSLL4.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL4r_s {
	uint32_t v[1];
	uint32_t rx_x4_cl82_am_live_sts_psll4[1];
	uint32_t _rx_x4_cl82_am_live_sts_psll4;
} BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL4r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL4r_CLR(r) (r).rx_x4_cl82_am_live_sts_psll4[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL4r_SET(r,d) (r).rx_x4_cl82_am_live_sts_psll4[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL4r_GET(r) (r).rx_x4_cl82_am_live_sts_psll4[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL4r_AM_LOCK_STATE_PSLL_4f_GET(r) (((r).rx_x4_cl82_am_live_sts_psll4[0]) & 0x3ff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL4r_AM_LOCK_STATE_PSLL_4f_SET(r,f) (r).rx_x4_cl82_am_live_sts_psll4[0]=(((r).rx_x4_cl82_am_live_sts_psll4[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff)) | (0x3ff << 16)

/*
 * These macros can be used to access RX_X4_CL82_AM_LIVE_STS_PSLL4.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL82_AM_LIVE_STS_PSLL4r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL4r,(_r._rx_x4_cl82_am_live_sts_psll4))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL82_AM_LIVE_STS_PSLL4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL4r,(_r._rx_x4_cl82_am_live_sts_psll4)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL82_AM_LIVE_STS_PSLL4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL4r,(_r._rx_x4_cl82_am_live_sts_psll4))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL82_AM_LIVE_STS_PSLL4r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl82_am_live_sts_psll4))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL82_AM_LIVE_STS_PSLL4r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl82_am_live_sts_psll4))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL82_AM_LIVE_STS_PSLL4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL4r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl82_am_live_sts_psll4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL82_AM_LIVE_STS_PSLL4r BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL4r
#define RX_X4_CL82_AM_LIVE_STS_PSLL4r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL4r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL4r_t RX_X4_CL82_AM_LIVE_STS_PSLL4r_t;
#define RX_X4_CL82_AM_LIVE_STS_PSLL4r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL4r_CLR
#define RX_X4_CL82_AM_LIVE_STS_PSLL4r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL4r_SET
#define RX_X4_CL82_AM_LIVE_STS_PSLL4r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL4r_GET
#define RX_X4_CL82_AM_LIVE_STS_PSLL4r_AM_LOCK_STATE_PSLL_4f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL4r_AM_LOCK_STATE_PSLL_4f_GET
#define RX_X4_CL82_AM_LIVE_STS_PSLL4r_AM_LOCK_STATE_PSLL_4f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL4r_AM_LOCK_STATE_PSLL_4f_SET
#define READ_RX_X4_CL82_AM_LIVE_STS_PSLL4r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL82_AM_LIVE_STS_PSLL4r
#define WRITE_RX_X4_CL82_AM_LIVE_STS_PSLL4r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL82_AM_LIVE_STS_PSLL4r
#define MODIFY_RX_X4_CL82_AM_LIVE_STS_PSLL4r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL82_AM_LIVE_STS_PSLL4r
#define READLN_RX_X4_CL82_AM_LIVE_STS_PSLL4r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL82_AM_LIVE_STS_PSLL4r
#define WRITELN_RX_X4_CL82_AM_LIVE_STS_PSLL4r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL82_AM_LIVE_STS_PSLL4r
#define WRITEALL_RX_X4_CL82_AM_LIVE_STS_PSLL4r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL82_AM_LIVE_STS_PSLL4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL4r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_CL91_SYNC_STS
 * BLOCKS:   RX_X4_STATUS2
 * REGADDR:  0xc17a
 * DESC:     CL91 RXP per lane statuses
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL91_AMPS_LOCK_LIVE Boolean variable that is set when the receiver has detected the location of the alignment marker payload sequence for a given logical lane.
 *     CL91_AMPS_LOCK_LL Latched low version of cl91_amps_lock_live.
 *     CL91_AMPS_LOCK_LH Latched high version of cl91_amps_lock_live.
 *     CL91_FEC_LANE_MAP FEC lane ID per logical lane
 *     CL91_FEC_LANE_MAP_VALID Indicates that the FEC lane ID for the given logical lane is valid.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_SYNC_STSr (0x0000c17a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_SYNC_STSr_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL91_SYNC_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_SYNC_STSr_s {
	uint32_t v[1];
	uint32_t rx_x4_cl91_sync_sts[1];
	uint32_t _rx_x4_cl91_sync_sts;
} BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_SYNC_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_SYNC_STSr_CLR(r) (r).rx_x4_cl91_sync_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_SYNC_STSr_SET(r,d) (r).rx_x4_cl91_sync_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_SYNC_STSr_GET(r) (r).rx_x4_cl91_sync_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_SYNC_STSr_CL91_FEC_LANE_MAP_VALIDf_GET(r) ((((r).rx_x4_cl91_sync_sts[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_SYNC_STSr_CL91_FEC_LANE_MAP_VALIDf_SET(r,f) (r).rx_x4_cl91_sync_sts[0]=(((r).rx_x4_cl91_sync_sts[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_SYNC_STSr_CL91_FEC_LANE_MAPf_GET(r) ((((r).rx_x4_cl91_sync_sts[0]) >> 3) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_SYNC_STSr_CL91_FEC_LANE_MAPf_SET(r,f) (r).rx_x4_cl91_sync_sts[0]=(((r).rx_x4_cl91_sync_sts[0] & ~((uint32_t)0x3 << 3)) | ((((uint32_t)f) & 0x3) << 3)) | (3 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_SYNC_STSr_CL91_AMPS_LOCK_LHf_GET(r) ((((r).rx_x4_cl91_sync_sts[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_SYNC_STSr_CL91_AMPS_LOCK_LHf_SET(r,f) (r).rx_x4_cl91_sync_sts[0]=(((r).rx_x4_cl91_sync_sts[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_SYNC_STSr_CL91_AMPS_LOCK_LLf_GET(r) ((((r).rx_x4_cl91_sync_sts[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_SYNC_STSr_CL91_AMPS_LOCK_LLf_SET(r,f) (r).rx_x4_cl91_sync_sts[0]=(((r).rx_x4_cl91_sync_sts[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_SYNC_STSr_CL91_AMPS_LOCK_LIVEf_GET(r) (((r).rx_x4_cl91_sync_sts[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_SYNC_STSr_CL91_AMPS_LOCK_LIVEf_SET(r,f) (r).rx_x4_cl91_sync_sts[0]=(((r).rx_x4_cl91_sync_sts[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_X4_CL91_SYNC_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL91_SYNC_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_SYNC_STSr,(_r._rx_x4_cl91_sync_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL91_SYNC_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_SYNC_STSr,(_r._rx_x4_cl91_sync_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL91_SYNC_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_SYNC_STSr,(_r._rx_x4_cl91_sync_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL91_SYNC_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_SYNC_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_sync_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL91_SYNC_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_SYNC_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_sync_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL91_SYNC_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_SYNC_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl91_sync_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL91_SYNC_STSr BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_SYNC_STSr
#define RX_X4_CL91_SYNC_STSr_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_SYNC_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_SYNC_STSr_t RX_X4_CL91_SYNC_STSr_t;
#define RX_X4_CL91_SYNC_STSr_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_SYNC_STSr_CLR
#define RX_X4_CL91_SYNC_STSr_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_SYNC_STSr_SET
#define RX_X4_CL91_SYNC_STSr_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_SYNC_STSr_GET
#define RX_X4_CL91_SYNC_STSr_CL91_FEC_LANE_MAP_VALIDf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_SYNC_STSr_CL91_FEC_LANE_MAP_VALIDf_GET
#define RX_X4_CL91_SYNC_STSr_CL91_FEC_LANE_MAP_VALIDf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_SYNC_STSr_CL91_FEC_LANE_MAP_VALIDf_SET
#define RX_X4_CL91_SYNC_STSr_CL91_FEC_LANE_MAPf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_SYNC_STSr_CL91_FEC_LANE_MAPf_GET
#define RX_X4_CL91_SYNC_STSr_CL91_FEC_LANE_MAPf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_SYNC_STSr_CL91_FEC_LANE_MAPf_SET
#define RX_X4_CL91_SYNC_STSr_CL91_AMPS_LOCK_LHf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_SYNC_STSr_CL91_AMPS_LOCK_LHf_GET
#define RX_X4_CL91_SYNC_STSr_CL91_AMPS_LOCK_LHf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_SYNC_STSr_CL91_AMPS_LOCK_LHf_SET
#define RX_X4_CL91_SYNC_STSr_CL91_AMPS_LOCK_LLf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_SYNC_STSr_CL91_AMPS_LOCK_LLf_GET
#define RX_X4_CL91_SYNC_STSr_CL91_AMPS_LOCK_LLf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_SYNC_STSr_CL91_AMPS_LOCK_LLf_SET
#define RX_X4_CL91_SYNC_STSr_CL91_AMPS_LOCK_LIVEf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_SYNC_STSr_CL91_AMPS_LOCK_LIVEf_GET
#define RX_X4_CL91_SYNC_STSr_CL91_AMPS_LOCK_LIVEf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_SYNC_STSr_CL91_AMPS_LOCK_LIVEf_SET
#define READ_RX_X4_CL91_SYNC_STSr BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL91_SYNC_STSr
#define WRITE_RX_X4_CL91_SYNC_STSr BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL91_SYNC_STSr
#define MODIFY_RX_X4_CL91_SYNC_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL91_SYNC_STSr
#define READLN_RX_X4_CL91_SYNC_STSr BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL91_SYNC_STSr
#define WRITELN_RX_X4_CL91_SYNC_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL91_SYNC_STSr
#define WRITEALL_RX_X4_CL91_SYNC_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL91_SYNC_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_SYNC_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_FEC_SYNC_FSM_ST
 * BLOCKS:   RX_X4_STATUS2
 * REGADDR:  0xc17b
 * DESC:     block sync status
 * RESETVAL: 0x4 (4)
 * ACCESS:   R/W
 * FIELDS:
 *     CL91_FEC_SYNC_FSM_LIVE_STATE FEC synchronization FSM current state
 *     CL91_FEC_SYNC_FSM_LATCHED_STATE FEC synchronization FSM latched stateEach bit represents a particular state. The bit positions for each state is shown belowThe register clears only when read. It is not cleared even on pipeline reset.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_SYNC_FSM_STr (0x0000c17b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_SYNC_FSM_STr_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_SYNC_FSM_ST.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_SYNC_FSM_STr_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_sync_fsm_st[1];
	uint32_t _rx_x4_fec_sync_fsm_st;
} BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_SYNC_FSM_STr_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_SYNC_FSM_STr_CLR(r) (r).rx_x4_fec_sync_fsm_st[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_SYNC_FSM_STr_SET(r,d) (r).rx_x4_fec_sync_fsm_st[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_SYNC_FSM_STr_GET(r) (r).rx_x4_fec_sync_fsm_st[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_SYNC_FSM_STr_CL91_FEC_SYNC_FSM_LATCHED_STATEf_GET(r) ((((r).rx_x4_fec_sync_fsm_st[0]) >> 2) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_SYNC_FSM_STr_CL91_FEC_SYNC_FSM_LATCHED_STATEf_SET(r,f) (r).rx_x4_fec_sync_fsm_st[0]=(((r).rx_x4_fec_sync_fsm_st[0] & ~((uint32_t)0xf << 2)) | ((((uint32_t)f) & 0xf) << 2)) | (15 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_SYNC_FSM_STr_CL91_FEC_SYNC_FSM_LIVE_STATEf_GET(r) (((r).rx_x4_fec_sync_fsm_st[0]) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_SYNC_FSM_STr_CL91_FEC_SYNC_FSM_LIVE_STATEf_SET(r,f) (r).rx_x4_fec_sync_fsm_st[0]=(((r).rx_x4_fec_sync_fsm_st[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access RX_X4_FEC_SYNC_FSM_ST.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_SYNC_FSM_STr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_SYNC_FSM_STr,(_r._rx_x4_fec_sync_fsm_st))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_SYNC_FSM_STr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_SYNC_FSM_STr,(_r._rx_x4_fec_sync_fsm_st)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_SYNC_FSM_STr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_SYNC_FSM_STr,(_r._rx_x4_fec_sync_fsm_st))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_SYNC_FSM_STr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_SYNC_FSM_STr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_sync_fsm_st))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_SYNC_FSM_STr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_SYNC_FSM_STr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_sync_fsm_st))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_SYNC_FSM_STr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_SYNC_FSM_STr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_sync_fsm_st))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_SYNC_FSM_STr BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_SYNC_FSM_STr
#define RX_X4_FEC_SYNC_FSM_STr_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_SYNC_FSM_STr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_SYNC_FSM_STr_t RX_X4_FEC_SYNC_FSM_STr_t;
#define RX_X4_FEC_SYNC_FSM_STr_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_SYNC_FSM_STr_CLR
#define RX_X4_FEC_SYNC_FSM_STr_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_SYNC_FSM_STr_SET
#define RX_X4_FEC_SYNC_FSM_STr_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_SYNC_FSM_STr_GET
#define RX_X4_FEC_SYNC_FSM_STr_CL91_FEC_SYNC_FSM_LATCHED_STATEf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_SYNC_FSM_STr_CL91_FEC_SYNC_FSM_LATCHED_STATEf_GET
#define RX_X4_FEC_SYNC_FSM_STr_CL91_FEC_SYNC_FSM_LATCHED_STATEf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_SYNC_FSM_STr_CL91_FEC_SYNC_FSM_LATCHED_STATEf_SET
#define RX_X4_FEC_SYNC_FSM_STr_CL91_FEC_SYNC_FSM_LIVE_STATEf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_SYNC_FSM_STr_CL91_FEC_SYNC_FSM_LIVE_STATEf_GET
#define RX_X4_FEC_SYNC_FSM_STr_CL91_FEC_SYNC_FSM_LIVE_STATEf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_SYNC_FSM_STr_CL91_FEC_SYNC_FSM_LIVE_STATEf_SET
#define READ_RX_X4_FEC_SYNC_FSM_STr BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_SYNC_FSM_STr
#define WRITE_RX_X4_FEC_SYNC_FSM_STr BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_SYNC_FSM_STr
#define MODIFY_RX_X4_FEC_SYNC_FSM_STr BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_SYNC_FSM_STr
#define READLN_RX_X4_FEC_SYNC_FSM_STr BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_SYNC_FSM_STr
#define WRITELN_RX_X4_FEC_SYNC_FSM_STr BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_SYNC_FSM_STr
#define WRITEALL_RX_X4_FEC_SYNC_FSM_STr BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_SYNC_FSM_STr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_SYNC_FSM_STr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_CL91_FC_SLIP_CNT
 * BLOCKS:   RX_X4_STATUS2
 * REGADDR:  0xc17c
 * DESC:     CL91 FC CW sync slip count
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CL91_FC_SLIP_CNT Slip count value for CL91 Fiber channel codeword sync.Live value used for debug.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_SLIP_CNTr (0x0000c17c | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_SLIP_CNTr_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL91_FC_SLIP_CNT.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_SLIP_CNTr_s {
	uint32_t v[1];
	uint32_t rx_x4_cl91_fc_slip_cnt[1];
	uint32_t _rx_x4_cl91_fc_slip_cnt;
} BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_SLIP_CNTr_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_SLIP_CNTr_CLR(r) (r).rx_x4_cl91_fc_slip_cnt[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_SLIP_CNTr_SET(r,d) (r).rx_x4_cl91_fc_slip_cnt[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_SLIP_CNTr_GET(r) (r).rx_x4_cl91_fc_slip_cnt[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_SLIP_CNTr_CL91_FC_SLIP_CNTf_GET(r) (((r).rx_x4_cl91_fc_slip_cnt[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_SLIP_CNTr_CL91_FC_SLIP_CNTf_SET(r,f) (r).rx_x4_cl91_fc_slip_cnt[0]=(((r).rx_x4_cl91_fc_slip_cnt[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_CL91_FC_SLIP_CNT.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL91_FC_SLIP_CNTr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_SLIP_CNTr,(_r._rx_x4_cl91_fc_slip_cnt))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL91_FC_SLIP_CNTr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_SLIP_CNTr,(_r._rx_x4_cl91_fc_slip_cnt)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL91_FC_SLIP_CNTr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_SLIP_CNTr,(_r._rx_x4_cl91_fc_slip_cnt))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL91_FC_SLIP_CNTr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_SLIP_CNTr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_fc_slip_cnt))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL91_FC_SLIP_CNTr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_SLIP_CNTr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_fc_slip_cnt))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL91_FC_SLIP_CNTr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_SLIP_CNTr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl91_fc_slip_cnt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL91_FC_SLIP_CNTr BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_SLIP_CNTr
#define RX_X4_CL91_FC_SLIP_CNTr_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_SLIP_CNTr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_SLIP_CNTr_t RX_X4_CL91_FC_SLIP_CNTr_t;
#define RX_X4_CL91_FC_SLIP_CNTr_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_SLIP_CNTr_CLR
#define RX_X4_CL91_FC_SLIP_CNTr_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_SLIP_CNTr_SET
#define RX_X4_CL91_FC_SLIP_CNTr_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_SLIP_CNTr_GET
#define RX_X4_CL91_FC_SLIP_CNTr_CL91_FC_SLIP_CNTf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_SLIP_CNTr_CL91_FC_SLIP_CNTf_GET
#define RX_X4_CL91_FC_SLIP_CNTr_CL91_FC_SLIP_CNTf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_SLIP_CNTr_CL91_FC_SLIP_CNTf_SET
#define READ_RX_X4_CL91_FC_SLIP_CNTr BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL91_FC_SLIP_CNTr
#define WRITE_RX_X4_CL91_FC_SLIP_CNTr BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL91_FC_SLIP_CNTr
#define MODIFY_RX_X4_CL91_FC_SLIP_CNTr BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL91_FC_SLIP_CNTr
#define READLN_RX_X4_CL91_FC_SLIP_CNTr BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL91_FC_SLIP_CNTr
#define WRITELN_RX_X4_CL91_FC_SLIP_CNTr BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL91_FC_SLIP_CNTr
#define WRITEALL_RX_X4_CL91_FC_SLIP_CNTr BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL91_FC_SLIP_CNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FC_SLIP_CNTr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_FEC_DBG_ERRL0
 * BLOCKS:   RX_X4_STATUS3
 * REGADDR:  0xc180
 * DESC:     User FEC debug read data for stream 0[15:0]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     DBG_ERRL_STREAM0 16 LSB of the FEC debug data for stream 0, clear on read
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL0r (0x0000c180 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL0r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_DBG_ERRL0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL0r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_dbg_errl0[1];
	uint32_t _rx_x4_fec_dbg_errl0;
} BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL0r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL0r_CLR(r) (r).rx_x4_fec_dbg_errl0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL0r_SET(r,d) (r).rx_x4_fec_dbg_errl0[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL0r_GET(r) (r).rx_x4_fec_dbg_errl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL0r_DBG_ERRL_STREAM0f_GET(r) (((r).rx_x4_fec_dbg_errl0[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL0r_DBG_ERRL_STREAM0f_SET(r,f) (r).rx_x4_fec_dbg_errl0[0]=(((r).rx_x4_fec_dbg_errl0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_DBG_ERRL0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_DBG_ERRL0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL0r,(_r._rx_x4_fec_dbg_errl0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_DBG_ERRL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL0r,(_r._rx_x4_fec_dbg_errl0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_DBG_ERRL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL0r,(_r._rx_x4_fec_dbg_errl0))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_DBG_ERRL0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_dbg_errl0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_DBG_ERRL0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_dbg_errl0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_DBG_ERRL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_dbg_errl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_DBG_ERRL0r BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL0r
#define RX_X4_FEC_DBG_ERRL0r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL0r_t RX_X4_FEC_DBG_ERRL0r_t;
#define RX_X4_FEC_DBG_ERRL0r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL0r_CLR
#define RX_X4_FEC_DBG_ERRL0r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL0r_SET
#define RX_X4_FEC_DBG_ERRL0r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL0r_GET
#define RX_X4_FEC_DBG_ERRL0r_DBG_ERRL_STREAM0f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL0r_DBG_ERRL_STREAM0f_GET
#define RX_X4_FEC_DBG_ERRL0r_DBG_ERRL_STREAM0f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL0r_DBG_ERRL_STREAM0f_SET
#define READ_RX_X4_FEC_DBG_ERRL0r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_DBG_ERRL0r
#define WRITE_RX_X4_FEC_DBG_ERRL0r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_DBG_ERRL0r
#define MODIFY_RX_X4_FEC_DBG_ERRL0r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_DBG_ERRL0r
#define READLN_RX_X4_FEC_DBG_ERRL0r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_DBG_ERRL0r
#define WRITELN_RX_X4_FEC_DBG_ERRL0r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_DBG_ERRL0r
#define WRITEALL_RX_X4_FEC_DBG_ERRL0r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_DBG_ERRL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_FEC_DBG_ERRL1
 * BLOCKS:   RX_X4_STATUS3
 * REGADDR:  0xc181
 * DESC:     User FEC debug read data for stream 1[15:0]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     DBG_ERRL_STREAM1 16 LSB of the FEC debug data for stream 0, clear on read
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL1r (0x0000c181 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL1r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_DBG_ERRL1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL1r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_dbg_errl1[1];
	uint32_t _rx_x4_fec_dbg_errl1;
} BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL1r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL1r_CLR(r) (r).rx_x4_fec_dbg_errl1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL1r_SET(r,d) (r).rx_x4_fec_dbg_errl1[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL1r_GET(r) (r).rx_x4_fec_dbg_errl1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL1r_DBG_ERRL_STREAM1f_GET(r) (((r).rx_x4_fec_dbg_errl1[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL1r_DBG_ERRL_STREAM1f_SET(r,f) (r).rx_x4_fec_dbg_errl1[0]=(((r).rx_x4_fec_dbg_errl1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_DBG_ERRL1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_DBG_ERRL1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL1r,(_r._rx_x4_fec_dbg_errl1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_DBG_ERRL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL1r,(_r._rx_x4_fec_dbg_errl1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_DBG_ERRL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL1r,(_r._rx_x4_fec_dbg_errl1))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_DBG_ERRL1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_dbg_errl1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_DBG_ERRL1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_dbg_errl1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_DBG_ERRL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_dbg_errl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_DBG_ERRL1r BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL1r
#define RX_X4_FEC_DBG_ERRL1r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL1r_t RX_X4_FEC_DBG_ERRL1r_t;
#define RX_X4_FEC_DBG_ERRL1r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL1r_CLR
#define RX_X4_FEC_DBG_ERRL1r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL1r_SET
#define RX_X4_FEC_DBG_ERRL1r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL1r_GET
#define RX_X4_FEC_DBG_ERRL1r_DBG_ERRL_STREAM1f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL1r_DBG_ERRL_STREAM1f_GET
#define RX_X4_FEC_DBG_ERRL1r_DBG_ERRL_STREAM1f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL1r_DBG_ERRL_STREAM1f_SET
#define READ_RX_X4_FEC_DBG_ERRL1r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_DBG_ERRL1r
#define WRITE_RX_X4_FEC_DBG_ERRL1r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_DBG_ERRL1r
#define MODIFY_RX_X4_FEC_DBG_ERRL1r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_DBG_ERRL1r
#define READLN_RX_X4_FEC_DBG_ERRL1r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_DBG_ERRL1r
#define WRITELN_RX_X4_FEC_DBG_ERRL1r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_DBG_ERRL1r
#define WRITEALL_RX_X4_FEC_DBG_ERRL1r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_DBG_ERRL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_FEC_DBG_ERRL2
 * BLOCKS:   RX_X4_STATUS3
 * REGADDR:  0xc182
 * DESC:     User FEC debug read data for stream 2[15:0]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     DBG_ERRL_STREAM2 16 LSB of the FEC debug data for stream 2, clear on read
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL2r (0x0000c182 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_DBG_ERRL2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_dbg_errl2[1];
	uint32_t _rx_x4_fec_dbg_errl2;
} BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL2r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL2r_CLR(r) (r).rx_x4_fec_dbg_errl2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL2r_SET(r,d) (r).rx_x4_fec_dbg_errl2[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL2r_GET(r) (r).rx_x4_fec_dbg_errl2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL2r_DBG_ERRL_STREAM2f_GET(r) (((r).rx_x4_fec_dbg_errl2[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL2r_DBG_ERRL_STREAM2f_SET(r,f) (r).rx_x4_fec_dbg_errl2[0]=(((r).rx_x4_fec_dbg_errl2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_DBG_ERRL2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_DBG_ERRL2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL2r,(_r._rx_x4_fec_dbg_errl2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_DBG_ERRL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL2r,(_r._rx_x4_fec_dbg_errl2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_DBG_ERRL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL2r,(_r._rx_x4_fec_dbg_errl2))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_DBG_ERRL2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_dbg_errl2))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_DBG_ERRL2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_dbg_errl2))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_DBG_ERRL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_dbg_errl2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_DBG_ERRL2r BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL2r
#define RX_X4_FEC_DBG_ERRL2r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL2r_t RX_X4_FEC_DBG_ERRL2r_t;
#define RX_X4_FEC_DBG_ERRL2r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL2r_CLR
#define RX_X4_FEC_DBG_ERRL2r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL2r_SET
#define RX_X4_FEC_DBG_ERRL2r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL2r_GET
#define RX_X4_FEC_DBG_ERRL2r_DBG_ERRL_STREAM2f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL2r_DBG_ERRL_STREAM2f_GET
#define RX_X4_FEC_DBG_ERRL2r_DBG_ERRL_STREAM2f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL2r_DBG_ERRL_STREAM2f_SET
#define READ_RX_X4_FEC_DBG_ERRL2r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_DBG_ERRL2r
#define WRITE_RX_X4_FEC_DBG_ERRL2r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_DBG_ERRL2r
#define MODIFY_RX_X4_FEC_DBG_ERRL2r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_DBG_ERRL2r
#define READLN_RX_X4_FEC_DBG_ERRL2r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_DBG_ERRL2r
#define WRITELN_RX_X4_FEC_DBG_ERRL2r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_DBG_ERRL2r
#define WRITEALL_RX_X4_FEC_DBG_ERRL2r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_DBG_ERRL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_FEC_DBG_ERRL3
 * BLOCKS:   RX_X4_STATUS3
 * REGADDR:  0xc183
 * DESC:     User FEC debug read data for stream 3[15:0]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     DBG_ERRL_STREAM3 16 LSB of the FEC debug data for stream 3, clear on read
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL3r (0x0000c183 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL3r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_DBG_ERRL3.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL3r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_dbg_errl3[1];
	uint32_t _rx_x4_fec_dbg_errl3;
} BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL3r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL3r_CLR(r) (r).rx_x4_fec_dbg_errl3[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL3r_SET(r,d) (r).rx_x4_fec_dbg_errl3[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL3r_GET(r) (r).rx_x4_fec_dbg_errl3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL3r_DBG_ERRL_STREAM3f_GET(r) (((r).rx_x4_fec_dbg_errl3[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL3r_DBG_ERRL_STREAM3f_SET(r,f) (r).rx_x4_fec_dbg_errl3[0]=(((r).rx_x4_fec_dbg_errl3[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_DBG_ERRL3.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_DBG_ERRL3r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL3r,(_r._rx_x4_fec_dbg_errl3))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_DBG_ERRL3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL3r,(_r._rx_x4_fec_dbg_errl3)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_DBG_ERRL3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL3r,(_r._rx_x4_fec_dbg_errl3))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_DBG_ERRL3r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_dbg_errl3))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_DBG_ERRL3r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_dbg_errl3))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_DBG_ERRL3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL3r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_dbg_errl3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_DBG_ERRL3r BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL3r
#define RX_X4_FEC_DBG_ERRL3r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL3r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL3r_t RX_X4_FEC_DBG_ERRL3r_t;
#define RX_X4_FEC_DBG_ERRL3r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL3r_CLR
#define RX_X4_FEC_DBG_ERRL3r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL3r_SET
#define RX_X4_FEC_DBG_ERRL3r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL3r_GET
#define RX_X4_FEC_DBG_ERRL3r_DBG_ERRL_STREAM3f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL3r_DBG_ERRL_STREAM3f_GET
#define RX_X4_FEC_DBG_ERRL3r_DBG_ERRL_STREAM3f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL3r_DBG_ERRL_STREAM3f_SET
#define READ_RX_X4_FEC_DBG_ERRL3r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_DBG_ERRL3r
#define WRITE_RX_X4_FEC_DBG_ERRL3r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_DBG_ERRL3r
#define MODIFY_RX_X4_FEC_DBG_ERRL3r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_DBG_ERRL3r
#define READLN_RX_X4_FEC_DBG_ERRL3r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_DBG_ERRL3r
#define WRITELN_RX_X4_FEC_DBG_ERRL3r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_DBG_ERRL3r
#define WRITEALL_RX_X4_FEC_DBG_ERRL3r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_DBG_ERRL3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_FEC_DBG_ERRL4
 * BLOCKS:   RX_X4_STATUS3
 * REGADDR:  0xc184
 * DESC:     User FEC debug read data for stream 4[15:0]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     DBG_ERRL_STREAM4 16 LSB of the FEC debug data for stream 4, clear on read
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL4r (0x0000c184 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL4r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_DBG_ERRL4.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL4r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_dbg_errl4[1];
	uint32_t _rx_x4_fec_dbg_errl4;
} BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL4r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL4r_CLR(r) (r).rx_x4_fec_dbg_errl4[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL4r_SET(r,d) (r).rx_x4_fec_dbg_errl4[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL4r_GET(r) (r).rx_x4_fec_dbg_errl4[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL4r_DBG_ERRL_STREAM4f_GET(r) (((r).rx_x4_fec_dbg_errl4[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL4r_DBG_ERRL_STREAM4f_SET(r,f) (r).rx_x4_fec_dbg_errl4[0]=(((r).rx_x4_fec_dbg_errl4[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_DBG_ERRL4.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_DBG_ERRL4r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL4r,(_r._rx_x4_fec_dbg_errl4))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_DBG_ERRL4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL4r,(_r._rx_x4_fec_dbg_errl4)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_DBG_ERRL4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL4r,(_r._rx_x4_fec_dbg_errl4))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_DBG_ERRL4r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_dbg_errl4))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_DBG_ERRL4r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_dbg_errl4))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_DBG_ERRL4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL4r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_dbg_errl4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_DBG_ERRL4r BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL4r
#define RX_X4_FEC_DBG_ERRL4r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL4r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL4r_t RX_X4_FEC_DBG_ERRL4r_t;
#define RX_X4_FEC_DBG_ERRL4r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL4r_CLR
#define RX_X4_FEC_DBG_ERRL4r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL4r_SET
#define RX_X4_FEC_DBG_ERRL4r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL4r_GET
#define RX_X4_FEC_DBG_ERRL4r_DBG_ERRL_STREAM4f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL4r_DBG_ERRL_STREAM4f_GET
#define RX_X4_FEC_DBG_ERRL4r_DBG_ERRL_STREAM4f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL4r_DBG_ERRL_STREAM4f_SET
#define READ_RX_X4_FEC_DBG_ERRL4r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_DBG_ERRL4r
#define WRITE_RX_X4_FEC_DBG_ERRL4r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_DBG_ERRL4r
#define MODIFY_RX_X4_FEC_DBG_ERRL4r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_DBG_ERRL4r
#define READLN_RX_X4_FEC_DBG_ERRL4r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_DBG_ERRL4r
#define WRITELN_RX_X4_FEC_DBG_ERRL4r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_DBG_ERRL4r
#define WRITEALL_RX_X4_FEC_DBG_ERRL4r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_DBG_ERRL4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRL4r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_FEC_DBG_ERRAH0
 * BLOCKS:   RX_X4_STATUS3
 * REGADDR:  0xc185
 * DESC:     User FEC debug read data for stream 0[31:16]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     DBG_ERRH_STREAM0 16 MSB of the FEC debug data for stream 0, clear on readContents are latched upon read of Fecdbg_edataL
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH0r (0x0000c185 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH0r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_DBG_ERRAH0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH0r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_dbg_errah0[1];
	uint32_t _rx_x4_fec_dbg_errah0;
} BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH0r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH0r_CLR(r) (r).rx_x4_fec_dbg_errah0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH0r_SET(r,d) (r).rx_x4_fec_dbg_errah0[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH0r_GET(r) (r).rx_x4_fec_dbg_errah0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH0r_DBG_ERRH_STREAM0f_GET(r) (((r).rx_x4_fec_dbg_errah0[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH0r_DBG_ERRH_STREAM0f_SET(r,f) (r).rx_x4_fec_dbg_errah0[0]=(((r).rx_x4_fec_dbg_errah0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_DBG_ERRAH0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_DBG_ERRAH0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH0r,(_r._rx_x4_fec_dbg_errah0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_DBG_ERRAH0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH0r,(_r._rx_x4_fec_dbg_errah0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_DBG_ERRAH0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH0r,(_r._rx_x4_fec_dbg_errah0))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_DBG_ERRAH0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_dbg_errah0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_DBG_ERRAH0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_dbg_errah0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_DBG_ERRAH0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_dbg_errah0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_DBG_ERRAH0r BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH0r
#define RX_X4_FEC_DBG_ERRAH0r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH0r_t RX_X4_FEC_DBG_ERRAH0r_t;
#define RX_X4_FEC_DBG_ERRAH0r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH0r_CLR
#define RX_X4_FEC_DBG_ERRAH0r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH0r_SET
#define RX_X4_FEC_DBG_ERRAH0r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH0r_GET
#define RX_X4_FEC_DBG_ERRAH0r_DBG_ERRH_STREAM0f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH0r_DBG_ERRH_STREAM0f_GET
#define RX_X4_FEC_DBG_ERRAH0r_DBG_ERRH_STREAM0f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH0r_DBG_ERRH_STREAM0f_SET
#define READ_RX_X4_FEC_DBG_ERRAH0r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_DBG_ERRAH0r
#define WRITE_RX_X4_FEC_DBG_ERRAH0r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_DBG_ERRAH0r
#define MODIFY_RX_X4_FEC_DBG_ERRAH0r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_DBG_ERRAH0r
#define READLN_RX_X4_FEC_DBG_ERRAH0r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_DBG_ERRAH0r
#define WRITELN_RX_X4_FEC_DBG_ERRAH0r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_DBG_ERRAH0r
#define WRITEALL_RX_X4_FEC_DBG_ERRAH0r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_DBG_ERRAH0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_FEC_DBG_ERRAH1
 * BLOCKS:   RX_X4_STATUS3
 * REGADDR:  0xc186
 * DESC:     User FEC debug read data for stream 1[31:16]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     DBG_ERRH_STREAM1 16 MSB of the FEC debug data for stream 1, clear on readContents are latched upon read of Fecdbg_edataL
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH1r (0x0000c186 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH1r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_DBG_ERRAH1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH1r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_dbg_errah1[1];
	uint32_t _rx_x4_fec_dbg_errah1;
} BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH1r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH1r_CLR(r) (r).rx_x4_fec_dbg_errah1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH1r_SET(r,d) (r).rx_x4_fec_dbg_errah1[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH1r_GET(r) (r).rx_x4_fec_dbg_errah1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH1r_DBG_ERRH_STREAM1f_GET(r) (((r).rx_x4_fec_dbg_errah1[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH1r_DBG_ERRH_STREAM1f_SET(r,f) (r).rx_x4_fec_dbg_errah1[0]=(((r).rx_x4_fec_dbg_errah1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_DBG_ERRAH1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_DBG_ERRAH1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH1r,(_r._rx_x4_fec_dbg_errah1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_DBG_ERRAH1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH1r,(_r._rx_x4_fec_dbg_errah1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_DBG_ERRAH1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH1r,(_r._rx_x4_fec_dbg_errah1))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_DBG_ERRAH1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_dbg_errah1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_DBG_ERRAH1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_dbg_errah1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_DBG_ERRAH1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_dbg_errah1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_DBG_ERRAH1r BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH1r
#define RX_X4_FEC_DBG_ERRAH1r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH1r_t RX_X4_FEC_DBG_ERRAH1r_t;
#define RX_X4_FEC_DBG_ERRAH1r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH1r_CLR
#define RX_X4_FEC_DBG_ERRAH1r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH1r_SET
#define RX_X4_FEC_DBG_ERRAH1r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH1r_GET
#define RX_X4_FEC_DBG_ERRAH1r_DBG_ERRH_STREAM1f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH1r_DBG_ERRH_STREAM1f_GET
#define RX_X4_FEC_DBG_ERRAH1r_DBG_ERRH_STREAM1f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH1r_DBG_ERRH_STREAM1f_SET
#define READ_RX_X4_FEC_DBG_ERRAH1r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_DBG_ERRAH1r
#define WRITE_RX_X4_FEC_DBG_ERRAH1r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_DBG_ERRAH1r
#define MODIFY_RX_X4_FEC_DBG_ERRAH1r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_DBG_ERRAH1r
#define READLN_RX_X4_FEC_DBG_ERRAH1r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_DBG_ERRAH1r
#define WRITELN_RX_X4_FEC_DBG_ERRAH1r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_DBG_ERRAH1r
#define WRITEALL_RX_X4_FEC_DBG_ERRAH1r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_DBG_ERRAH1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_FEC_DBG_ERRAH2
 * BLOCKS:   RX_X4_STATUS3
 * REGADDR:  0xc187
 * DESC:     User FEC debug read data for stream 2[31:16]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     DBG_ERRH_STREAM2 16 MSB of the FEC debug data for stream 2, clear on readContents are latched upon read of Fecdbg_edataL
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH2r (0x0000c187 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_DBG_ERRAH2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_dbg_errah2[1];
	uint32_t _rx_x4_fec_dbg_errah2;
} BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH2r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH2r_CLR(r) (r).rx_x4_fec_dbg_errah2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH2r_SET(r,d) (r).rx_x4_fec_dbg_errah2[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH2r_GET(r) (r).rx_x4_fec_dbg_errah2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH2r_DBG_ERRH_STREAM2f_GET(r) (((r).rx_x4_fec_dbg_errah2[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH2r_DBG_ERRH_STREAM2f_SET(r,f) (r).rx_x4_fec_dbg_errah2[0]=(((r).rx_x4_fec_dbg_errah2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_DBG_ERRAH2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_DBG_ERRAH2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH2r,(_r._rx_x4_fec_dbg_errah2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_DBG_ERRAH2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH2r,(_r._rx_x4_fec_dbg_errah2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_DBG_ERRAH2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH2r,(_r._rx_x4_fec_dbg_errah2))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_DBG_ERRAH2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_dbg_errah2))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_DBG_ERRAH2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_dbg_errah2))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_DBG_ERRAH2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_dbg_errah2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_DBG_ERRAH2r BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH2r
#define RX_X4_FEC_DBG_ERRAH2r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH2r_t RX_X4_FEC_DBG_ERRAH2r_t;
#define RX_X4_FEC_DBG_ERRAH2r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH2r_CLR
#define RX_X4_FEC_DBG_ERRAH2r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH2r_SET
#define RX_X4_FEC_DBG_ERRAH2r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH2r_GET
#define RX_X4_FEC_DBG_ERRAH2r_DBG_ERRH_STREAM2f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH2r_DBG_ERRH_STREAM2f_GET
#define RX_X4_FEC_DBG_ERRAH2r_DBG_ERRH_STREAM2f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH2r_DBG_ERRH_STREAM2f_SET
#define READ_RX_X4_FEC_DBG_ERRAH2r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_DBG_ERRAH2r
#define WRITE_RX_X4_FEC_DBG_ERRAH2r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_DBG_ERRAH2r
#define MODIFY_RX_X4_FEC_DBG_ERRAH2r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_DBG_ERRAH2r
#define READLN_RX_X4_FEC_DBG_ERRAH2r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_DBG_ERRAH2r
#define WRITELN_RX_X4_FEC_DBG_ERRAH2r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_DBG_ERRAH2r
#define WRITEALL_RX_X4_FEC_DBG_ERRAH2r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_DBG_ERRAH2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_FEC_DBG_ERRAH3
 * BLOCKS:   RX_X4_STATUS3
 * REGADDR:  0xc188
 * DESC:     User FEC debug read data for stream 8[31:16]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     DBG_ERRH_STREAM3 16 MSB of the FEC debug data for stream 3, clear on readContents are latched upon read of Fecdbg_edataL
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH3r (0x0000c188 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH3r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_DBG_ERRAH3.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH3r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_dbg_errah3[1];
	uint32_t _rx_x4_fec_dbg_errah3;
} BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH3r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH3r_CLR(r) (r).rx_x4_fec_dbg_errah3[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH3r_SET(r,d) (r).rx_x4_fec_dbg_errah3[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH3r_GET(r) (r).rx_x4_fec_dbg_errah3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH3r_DBG_ERRH_STREAM3f_GET(r) (((r).rx_x4_fec_dbg_errah3[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH3r_DBG_ERRH_STREAM3f_SET(r,f) (r).rx_x4_fec_dbg_errah3[0]=(((r).rx_x4_fec_dbg_errah3[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_DBG_ERRAH3.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_DBG_ERRAH3r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH3r,(_r._rx_x4_fec_dbg_errah3))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_DBG_ERRAH3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH3r,(_r._rx_x4_fec_dbg_errah3)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_DBG_ERRAH3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH3r,(_r._rx_x4_fec_dbg_errah3))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_DBG_ERRAH3r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_dbg_errah3))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_DBG_ERRAH3r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_dbg_errah3))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_DBG_ERRAH3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH3r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_dbg_errah3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_DBG_ERRAH3r BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH3r
#define RX_X4_FEC_DBG_ERRAH3r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH3r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH3r_t RX_X4_FEC_DBG_ERRAH3r_t;
#define RX_X4_FEC_DBG_ERRAH3r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH3r_CLR
#define RX_X4_FEC_DBG_ERRAH3r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH3r_SET
#define RX_X4_FEC_DBG_ERRAH3r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH3r_GET
#define RX_X4_FEC_DBG_ERRAH3r_DBG_ERRH_STREAM3f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH3r_DBG_ERRH_STREAM3f_GET
#define RX_X4_FEC_DBG_ERRAH3r_DBG_ERRH_STREAM3f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH3r_DBG_ERRH_STREAM3f_SET
#define READ_RX_X4_FEC_DBG_ERRAH3r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_DBG_ERRAH3r
#define WRITE_RX_X4_FEC_DBG_ERRAH3r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_DBG_ERRAH3r
#define MODIFY_RX_X4_FEC_DBG_ERRAH3r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_DBG_ERRAH3r
#define READLN_RX_X4_FEC_DBG_ERRAH3r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_DBG_ERRAH3r
#define WRITELN_RX_X4_FEC_DBG_ERRAH3r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_DBG_ERRAH3r
#define WRITEALL_RX_X4_FEC_DBG_ERRAH3r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_DBG_ERRAH3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_FEC_DBG_ERRAH4
 * BLOCKS:   RX_X4_STATUS3
 * REGADDR:  0xc189
 * DESC:     User FEC debug read data for stream 4[31:16]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     DBG_ERRH_STREAM4 16 MSB of the FEC debug data for stream 4, clear on readContents are latched upon read of Fecdbg_edataL
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH4r (0x0000c189 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH4r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_DBG_ERRAH4.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH4r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_dbg_errah4[1];
	uint32_t _rx_x4_fec_dbg_errah4;
} BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH4r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH4r_CLR(r) (r).rx_x4_fec_dbg_errah4[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH4r_SET(r,d) (r).rx_x4_fec_dbg_errah4[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH4r_GET(r) (r).rx_x4_fec_dbg_errah4[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH4r_DBG_ERRH_STREAM4f_GET(r) (((r).rx_x4_fec_dbg_errah4[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH4r_DBG_ERRH_STREAM4f_SET(r,f) (r).rx_x4_fec_dbg_errah4[0]=(((r).rx_x4_fec_dbg_errah4[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_DBG_ERRAH4.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_DBG_ERRAH4r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH4r,(_r._rx_x4_fec_dbg_errah4))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_DBG_ERRAH4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH4r,(_r._rx_x4_fec_dbg_errah4)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_DBG_ERRAH4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH4r,(_r._rx_x4_fec_dbg_errah4))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_DBG_ERRAH4r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_dbg_errah4))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_DBG_ERRAH4r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_dbg_errah4))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_DBG_ERRAH4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH4r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_dbg_errah4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_DBG_ERRAH4r BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH4r
#define RX_X4_FEC_DBG_ERRAH4r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH4r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH4r_t RX_X4_FEC_DBG_ERRAH4r_t;
#define RX_X4_FEC_DBG_ERRAH4r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH4r_CLR
#define RX_X4_FEC_DBG_ERRAH4r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH4r_SET
#define RX_X4_FEC_DBG_ERRAH4r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH4r_GET
#define RX_X4_FEC_DBG_ERRAH4r_DBG_ERRH_STREAM4f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH4r_DBG_ERRH_STREAM4f_GET
#define RX_X4_FEC_DBG_ERRAH4r_DBG_ERRH_STREAM4f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH4r_DBG_ERRH_STREAM4f_SET
#define READ_RX_X4_FEC_DBG_ERRAH4r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_DBG_ERRAH4r
#define WRITE_RX_X4_FEC_DBG_ERRAH4r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_DBG_ERRAH4r
#define MODIFY_RX_X4_FEC_DBG_ERRAH4r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_DBG_ERRAH4r
#define READLN_RX_X4_FEC_DBG_ERRAH4r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_DBG_ERRAH4r
#define WRITELN_RX_X4_FEC_DBG_ERRAH4r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_DBG_ERRAH4r
#define WRITEALL_RX_X4_FEC_DBG_ERRAH4r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_DBG_ERRAH4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_DBG_ERRAH4r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_FEC_BURST_ERR_STSL0
 * BLOCKS:   RX_X4_STATUS3
 * REGADDR:  0xc18a
 * DESC:     fec burst error status lower 16 bits for stream 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BURST_ERR_STATUSL_STREAM0 16 LSB of the fec_burst_err_status for stream 0bits mapping :Bit [15:0] : b21[15:0]Note: Bit 15 of Fec_burst_err_statusH register clears upon reading this register
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL0r (0x0000c18a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL0r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_BURST_ERR_STSL0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL0r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_burst_err_stsl0[1];
	uint32_t _rx_x4_fec_burst_err_stsl0;
} BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL0r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL0r_CLR(r) (r).rx_x4_fec_burst_err_stsl0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL0r_SET(r,d) (r).rx_x4_fec_burst_err_stsl0[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL0r_GET(r) (r).rx_x4_fec_burst_err_stsl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL0r_BURST_ERR_STATUSL_STREAM0f_GET(r) (((r).rx_x4_fec_burst_err_stsl0[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL0r_BURST_ERR_STATUSL_STREAM0f_SET(r,f) (r).rx_x4_fec_burst_err_stsl0[0]=(((r).rx_x4_fec_burst_err_stsl0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_BURST_ERR_STSL0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_BURST_ERR_STSL0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL0r,(_r._rx_x4_fec_burst_err_stsl0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_BURST_ERR_STSL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL0r,(_r._rx_x4_fec_burst_err_stsl0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_BURST_ERR_STSL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL0r,(_r._rx_x4_fec_burst_err_stsl0))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_BURST_ERR_STSL0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_burst_err_stsl0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_BURST_ERR_STSL0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_burst_err_stsl0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_BURST_ERR_STSL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_burst_err_stsl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_BURST_ERR_STSL0r BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL0r
#define RX_X4_FEC_BURST_ERR_STSL0r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL0r_t RX_X4_FEC_BURST_ERR_STSL0r_t;
#define RX_X4_FEC_BURST_ERR_STSL0r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL0r_CLR
#define RX_X4_FEC_BURST_ERR_STSL0r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL0r_SET
#define RX_X4_FEC_BURST_ERR_STSL0r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL0r_GET
#define RX_X4_FEC_BURST_ERR_STSL0r_BURST_ERR_STATUSL_STREAM0f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL0r_BURST_ERR_STATUSL_STREAM0f_GET
#define RX_X4_FEC_BURST_ERR_STSL0r_BURST_ERR_STATUSL_STREAM0f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL0r_BURST_ERR_STATUSL_STREAM0f_SET
#define READ_RX_X4_FEC_BURST_ERR_STSL0r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_BURST_ERR_STSL0r
#define WRITE_RX_X4_FEC_BURST_ERR_STSL0r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_BURST_ERR_STSL0r
#define MODIFY_RX_X4_FEC_BURST_ERR_STSL0r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_BURST_ERR_STSL0r
#define READLN_RX_X4_FEC_BURST_ERR_STSL0r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_BURST_ERR_STSL0r
#define WRITELN_RX_X4_FEC_BURST_ERR_STSL0r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_BURST_ERR_STSL0r
#define WRITEALL_RX_X4_FEC_BURST_ERR_STSL0r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_BURST_ERR_STSL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_FEC_BURST_ERR_STSL1
 * BLOCKS:   RX_X4_STATUS3
 * REGADDR:  0xc18b
 * DESC:     fec burst error status lower 16 bits for stream 1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BURST_ERR_STATUSL_STREAM1 16 LSB of the fec_burst_err_status for stream 1bits mapping :Bit [15:0] : b21[15:0]Note: Bit 15 of Fec_burst_err_statusH register clears upon reading this register
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL1r (0x0000c18b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL1r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_BURST_ERR_STSL1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL1r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_burst_err_stsl1[1];
	uint32_t _rx_x4_fec_burst_err_stsl1;
} BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL1r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL1r_CLR(r) (r).rx_x4_fec_burst_err_stsl1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL1r_SET(r,d) (r).rx_x4_fec_burst_err_stsl1[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL1r_GET(r) (r).rx_x4_fec_burst_err_stsl1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL1r_BURST_ERR_STATUSL_STREAM1f_GET(r) (((r).rx_x4_fec_burst_err_stsl1[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL1r_BURST_ERR_STATUSL_STREAM1f_SET(r,f) (r).rx_x4_fec_burst_err_stsl1[0]=(((r).rx_x4_fec_burst_err_stsl1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_BURST_ERR_STSL1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_BURST_ERR_STSL1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL1r,(_r._rx_x4_fec_burst_err_stsl1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_BURST_ERR_STSL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL1r,(_r._rx_x4_fec_burst_err_stsl1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_BURST_ERR_STSL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL1r,(_r._rx_x4_fec_burst_err_stsl1))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_BURST_ERR_STSL1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_burst_err_stsl1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_BURST_ERR_STSL1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_burst_err_stsl1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_BURST_ERR_STSL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_burst_err_stsl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_BURST_ERR_STSL1r BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL1r
#define RX_X4_FEC_BURST_ERR_STSL1r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL1r_t RX_X4_FEC_BURST_ERR_STSL1r_t;
#define RX_X4_FEC_BURST_ERR_STSL1r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL1r_CLR
#define RX_X4_FEC_BURST_ERR_STSL1r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL1r_SET
#define RX_X4_FEC_BURST_ERR_STSL1r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL1r_GET
#define RX_X4_FEC_BURST_ERR_STSL1r_BURST_ERR_STATUSL_STREAM1f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL1r_BURST_ERR_STATUSL_STREAM1f_GET
#define RX_X4_FEC_BURST_ERR_STSL1r_BURST_ERR_STATUSL_STREAM1f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL1r_BURST_ERR_STATUSL_STREAM1f_SET
#define READ_RX_X4_FEC_BURST_ERR_STSL1r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_BURST_ERR_STSL1r
#define WRITE_RX_X4_FEC_BURST_ERR_STSL1r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_BURST_ERR_STSL1r
#define MODIFY_RX_X4_FEC_BURST_ERR_STSL1r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_BURST_ERR_STSL1r
#define READLN_RX_X4_FEC_BURST_ERR_STSL1r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_BURST_ERR_STSL1r
#define WRITELN_RX_X4_FEC_BURST_ERR_STSL1r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_BURST_ERR_STSL1r
#define WRITEALL_RX_X4_FEC_BURST_ERR_STSL1r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_BURST_ERR_STSL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_FEC_BURST_ERR_STSL2
 * BLOCKS:   RX_X4_STATUS3
 * REGADDR:  0xc18c
 * DESC:     fec burst error status lower 16 bits for stream 2
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BURST_ERR_STATUSL_STREAM2 16 LSB of the fec_burst_err_status for stream 2bits mapping :Bit [15:0] : b21[15:0]Note: Bit 15 of Fec_burst_err_statusH register clears upon reading this register
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL2r (0x0000c18c | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_BURST_ERR_STSL2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_burst_err_stsl2[1];
	uint32_t _rx_x4_fec_burst_err_stsl2;
} BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL2r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL2r_CLR(r) (r).rx_x4_fec_burst_err_stsl2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL2r_SET(r,d) (r).rx_x4_fec_burst_err_stsl2[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL2r_GET(r) (r).rx_x4_fec_burst_err_stsl2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL2r_BURST_ERR_STATUSL_STREAM2f_GET(r) (((r).rx_x4_fec_burst_err_stsl2[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL2r_BURST_ERR_STATUSL_STREAM2f_SET(r,f) (r).rx_x4_fec_burst_err_stsl2[0]=(((r).rx_x4_fec_burst_err_stsl2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_BURST_ERR_STSL2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_BURST_ERR_STSL2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL2r,(_r._rx_x4_fec_burst_err_stsl2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_BURST_ERR_STSL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL2r,(_r._rx_x4_fec_burst_err_stsl2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_BURST_ERR_STSL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL2r,(_r._rx_x4_fec_burst_err_stsl2))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_BURST_ERR_STSL2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_burst_err_stsl2))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_BURST_ERR_STSL2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_burst_err_stsl2))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_BURST_ERR_STSL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_burst_err_stsl2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_BURST_ERR_STSL2r BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL2r
#define RX_X4_FEC_BURST_ERR_STSL2r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL2r_t RX_X4_FEC_BURST_ERR_STSL2r_t;
#define RX_X4_FEC_BURST_ERR_STSL2r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL2r_CLR
#define RX_X4_FEC_BURST_ERR_STSL2r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL2r_SET
#define RX_X4_FEC_BURST_ERR_STSL2r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL2r_GET
#define RX_X4_FEC_BURST_ERR_STSL2r_BURST_ERR_STATUSL_STREAM2f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL2r_BURST_ERR_STATUSL_STREAM2f_GET
#define RX_X4_FEC_BURST_ERR_STSL2r_BURST_ERR_STATUSL_STREAM2f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL2r_BURST_ERR_STATUSL_STREAM2f_SET
#define READ_RX_X4_FEC_BURST_ERR_STSL2r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_BURST_ERR_STSL2r
#define WRITE_RX_X4_FEC_BURST_ERR_STSL2r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_BURST_ERR_STSL2r
#define MODIFY_RX_X4_FEC_BURST_ERR_STSL2r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_BURST_ERR_STSL2r
#define READLN_RX_X4_FEC_BURST_ERR_STSL2r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_BURST_ERR_STSL2r
#define WRITELN_RX_X4_FEC_BURST_ERR_STSL2r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_BURST_ERR_STSL2r
#define WRITEALL_RX_X4_FEC_BURST_ERR_STSL2r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_BURST_ERR_STSL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_FEC_BURST_ERR_STSL3
 * BLOCKS:   RX_X4_STATUS3
 * REGADDR:  0xc18d
 * DESC:     fec burst error status lower 16 bits for stream 3
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BURST_ERR_STATUSL_STREAM3 16 LSB of the fec_burst_err_status for stream 3bits mapping :Bit [15:0] : b21[15:0]Note: Bit 15 of Fec_burst_err_statusH register clears upon reading this register
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL3r (0x0000c18d | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL3r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_BURST_ERR_STSL3.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL3r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_burst_err_stsl3[1];
	uint32_t _rx_x4_fec_burst_err_stsl3;
} BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL3r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL3r_CLR(r) (r).rx_x4_fec_burst_err_stsl3[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL3r_SET(r,d) (r).rx_x4_fec_burst_err_stsl3[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL3r_GET(r) (r).rx_x4_fec_burst_err_stsl3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL3r_BURST_ERR_STATUSL_STREAM3f_GET(r) (((r).rx_x4_fec_burst_err_stsl3[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL3r_BURST_ERR_STATUSL_STREAM3f_SET(r,f) (r).rx_x4_fec_burst_err_stsl3[0]=(((r).rx_x4_fec_burst_err_stsl3[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_BURST_ERR_STSL3.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_BURST_ERR_STSL3r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL3r,(_r._rx_x4_fec_burst_err_stsl3))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_BURST_ERR_STSL3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL3r,(_r._rx_x4_fec_burst_err_stsl3)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_BURST_ERR_STSL3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL3r,(_r._rx_x4_fec_burst_err_stsl3))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_BURST_ERR_STSL3r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_burst_err_stsl3))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_BURST_ERR_STSL3r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_burst_err_stsl3))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_BURST_ERR_STSL3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL3r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_burst_err_stsl3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_BURST_ERR_STSL3r BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL3r
#define RX_X4_FEC_BURST_ERR_STSL3r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL3r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL3r_t RX_X4_FEC_BURST_ERR_STSL3r_t;
#define RX_X4_FEC_BURST_ERR_STSL3r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL3r_CLR
#define RX_X4_FEC_BURST_ERR_STSL3r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL3r_SET
#define RX_X4_FEC_BURST_ERR_STSL3r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL3r_GET
#define RX_X4_FEC_BURST_ERR_STSL3r_BURST_ERR_STATUSL_STREAM3f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL3r_BURST_ERR_STATUSL_STREAM3f_GET
#define RX_X4_FEC_BURST_ERR_STSL3r_BURST_ERR_STATUSL_STREAM3f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL3r_BURST_ERR_STATUSL_STREAM3f_SET
#define READ_RX_X4_FEC_BURST_ERR_STSL3r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_BURST_ERR_STSL3r
#define WRITE_RX_X4_FEC_BURST_ERR_STSL3r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_BURST_ERR_STSL3r
#define MODIFY_RX_X4_FEC_BURST_ERR_STSL3r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_BURST_ERR_STSL3r
#define READLN_RX_X4_FEC_BURST_ERR_STSL3r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_BURST_ERR_STSL3r
#define WRITELN_RX_X4_FEC_BURST_ERR_STSL3r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_BURST_ERR_STSL3r
#define WRITEALL_RX_X4_FEC_BURST_ERR_STSL3r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_BURST_ERR_STSL3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_FEC_BURST_ERR_STSL4
 * BLOCKS:   RX_X4_STATUS3
 * REGADDR:  0xc18e
 * DESC:     fec burst error status lower 16 bits for stream 4
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BURST_ERR_STATUSL_STREAM4 16 LSB of the fec_burst_err_status for stream 4bits mapping :Bit [15:0] : b21[15:0]Note: Bit 15 of Fec_burst_err_statusH register clears upon reading this register
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL4r (0x0000c18e | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL4r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_BURST_ERR_STSL4.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL4r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_burst_err_stsl4[1];
	uint32_t _rx_x4_fec_burst_err_stsl4;
} BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL4r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL4r_CLR(r) (r).rx_x4_fec_burst_err_stsl4[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL4r_SET(r,d) (r).rx_x4_fec_burst_err_stsl4[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL4r_GET(r) (r).rx_x4_fec_burst_err_stsl4[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL4r_BURST_ERR_STATUSL_STREAM4f_GET(r) (((r).rx_x4_fec_burst_err_stsl4[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL4r_BURST_ERR_STATUSL_STREAM4f_SET(r,f) (r).rx_x4_fec_burst_err_stsl4[0]=(((r).rx_x4_fec_burst_err_stsl4[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_BURST_ERR_STSL4.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_BURST_ERR_STSL4r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL4r,(_r._rx_x4_fec_burst_err_stsl4))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_BURST_ERR_STSL4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL4r,(_r._rx_x4_fec_burst_err_stsl4)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_BURST_ERR_STSL4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL4r,(_r._rx_x4_fec_burst_err_stsl4))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_BURST_ERR_STSL4r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_burst_err_stsl4))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_BURST_ERR_STSL4r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_burst_err_stsl4))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_BURST_ERR_STSL4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL4r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_burst_err_stsl4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_BURST_ERR_STSL4r BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL4r
#define RX_X4_FEC_BURST_ERR_STSL4r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL4r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL4r_t RX_X4_FEC_BURST_ERR_STSL4r_t;
#define RX_X4_FEC_BURST_ERR_STSL4r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL4r_CLR
#define RX_X4_FEC_BURST_ERR_STSL4r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL4r_SET
#define RX_X4_FEC_BURST_ERR_STSL4r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL4r_GET
#define RX_X4_FEC_BURST_ERR_STSL4r_BURST_ERR_STATUSL_STREAM4f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL4r_BURST_ERR_STATUSL_STREAM4f_GET
#define RX_X4_FEC_BURST_ERR_STSL4r_BURST_ERR_STATUSL_STREAM4f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL4r_BURST_ERR_STATUSL_STREAM4f_SET
#define READ_RX_X4_FEC_BURST_ERR_STSL4r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_BURST_ERR_STSL4r
#define WRITE_RX_X4_FEC_BURST_ERR_STSL4r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_BURST_ERR_STSL4r
#define MODIFY_RX_X4_FEC_BURST_ERR_STSL4r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_BURST_ERR_STSL4r
#define READLN_RX_X4_FEC_BURST_ERR_STSL4r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_BURST_ERR_STSL4r
#define WRITELN_RX_X4_FEC_BURST_ERR_STSL4r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_BURST_ERR_STSL4r
#define WRITEALL_RX_X4_FEC_BURST_ERR_STSL4r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_BURST_ERR_STSL4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSL4r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_FEC_BURST_ERR_STSH0
 * BLOCKS:   RX_X4_STATUS4
 * REGADDR:  0xc190
 * DESC:     fec burst error status lower 16 bits for stream 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BURST_ERR_STATUSH_STREAM0 Note: This register is only valid in case of Correctable Error scenario.In case of uncorrectable error case, This register may contain invalid data information.16 MSB of the fec_burst_err_status for stream 0bits mapping :Bit 15: status updatedBit 8: 21-bit burst detected, but location failed pattern searchBit 7: pattern match passedBit 6: Corrected alternate errorBit 5: Corrected errorBit [4:0] : b21[20:16]Note: Bit 15 clears upon reading Fec_burst_err_statusL register
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH0r (0x0000c190 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH0r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_BURST_ERR_STSH0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH0r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_burst_err_stsh0[1];
	uint32_t _rx_x4_fec_burst_err_stsh0;
} BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH0r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH0r_CLR(r) (r).rx_x4_fec_burst_err_stsh0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH0r_SET(r,d) (r).rx_x4_fec_burst_err_stsh0[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH0r_GET(r) (r).rx_x4_fec_burst_err_stsh0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH0r_BURST_ERR_STATUSH_STREAM0f_GET(r) (((r).rx_x4_fec_burst_err_stsh0[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH0r_BURST_ERR_STATUSH_STREAM0f_SET(r,f) (r).rx_x4_fec_burst_err_stsh0[0]=(((r).rx_x4_fec_burst_err_stsh0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_BURST_ERR_STSH0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_BURST_ERR_STSH0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH0r,(_r._rx_x4_fec_burst_err_stsh0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_BURST_ERR_STSH0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH0r,(_r._rx_x4_fec_burst_err_stsh0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_BURST_ERR_STSH0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH0r,(_r._rx_x4_fec_burst_err_stsh0))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_BURST_ERR_STSH0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_burst_err_stsh0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_BURST_ERR_STSH0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_burst_err_stsh0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_BURST_ERR_STSH0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_burst_err_stsh0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_BURST_ERR_STSH0r BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH0r
#define RX_X4_FEC_BURST_ERR_STSH0r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH0r_t RX_X4_FEC_BURST_ERR_STSH0r_t;
#define RX_X4_FEC_BURST_ERR_STSH0r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH0r_CLR
#define RX_X4_FEC_BURST_ERR_STSH0r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH0r_SET
#define RX_X4_FEC_BURST_ERR_STSH0r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH0r_GET
#define RX_X4_FEC_BURST_ERR_STSH0r_BURST_ERR_STATUSH_STREAM0f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH0r_BURST_ERR_STATUSH_STREAM0f_GET
#define RX_X4_FEC_BURST_ERR_STSH0r_BURST_ERR_STATUSH_STREAM0f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH0r_BURST_ERR_STATUSH_STREAM0f_SET
#define READ_RX_X4_FEC_BURST_ERR_STSH0r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_BURST_ERR_STSH0r
#define WRITE_RX_X4_FEC_BURST_ERR_STSH0r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_BURST_ERR_STSH0r
#define MODIFY_RX_X4_FEC_BURST_ERR_STSH0r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_BURST_ERR_STSH0r
#define READLN_RX_X4_FEC_BURST_ERR_STSH0r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_BURST_ERR_STSH0r
#define WRITELN_RX_X4_FEC_BURST_ERR_STSH0r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_BURST_ERR_STSH0r
#define WRITEALL_RX_X4_FEC_BURST_ERR_STSH0r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_BURST_ERR_STSH0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_FEC_BURST_ERR_STSH1
 * BLOCKS:   RX_X4_STATUS4
 * REGADDR:  0xc191
 * DESC:     fec burst error status lower 16 bits for stream 1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BURST_ERR_STATUSH_STREAM1 Note: This register is only valid in case of Correctable Error scenario.In case of uncorrectable error case, This register may contain invalid data information.16 MSB of the fec_burst_err_status for stream 1bits mapping :Bit 15: status updatedBit 8: 21-bit burst detected, but location failed pattern searchBit 7: pattern match passedBit 6: Corrected alternate errorBit 5: Corrected errorBit [4:0] : b21[20:16]Note: Bit 15 clears upon reading Fec_burst_err_statusL register
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH1r (0x0000c191 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH1r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_BURST_ERR_STSH1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH1r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_burst_err_stsh1[1];
	uint32_t _rx_x4_fec_burst_err_stsh1;
} BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH1r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH1r_CLR(r) (r).rx_x4_fec_burst_err_stsh1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH1r_SET(r,d) (r).rx_x4_fec_burst_err_stsh1[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH1r_GET(r) (r).rx_x4_fec_burst_err_stsh1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH1r_BURST_ERR_STATUSH_STREAM1f_GET(r) (((r).rx_x4_fec_burst_err_stsh1[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH1r_BURST_ERR_STATUSH_STREAM1f_SET(r,f) (r).rx_x4_fec_burst_err_stsh1[0]=(((r).rx_x4_fec_burst_err_stsh1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_BURST_ERR_STSH1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_BURST_ERR_STSH1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH1r,(_r._rx_x4_fec_burst_err_stsh1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_BURST_ERR_STSH1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH1r,(_r._rx_x4_fec_burst_err_stsh1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_BURST_ERR_STSH1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH1r,(_r._rx_x4_fec_burst_err_stsh1))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_BURST_ERR_STSH1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_burst_err_stsh1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_BURST_ERR_STSH1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_burst_err_stsh1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_BURST_ERR_STSH1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_burst_err_stsh1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_BURST_ERR_STSH1r BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH1r
#define RX_X4_FEC_BURST_ERR_STSH1r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH1r_t RX_X4_FEC_BURST_ERR_STSH1r_t;
#define RX_X4_FEC_BURST_ERR_STSH1r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH1r_CLR
#define RX_X4_FEC_BURST_ERR_STSH1r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH1r_SET
#define RX_X4_FEC_BURST_ERR_STSH1r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH1r_GET
#define RX_X4_FEC_BURST_ERR_STSH1r_BURST_ERR_STATUSH_STREAM1f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH1r_BURST_ERR_STATUSH_STREAM1f_GET
#define RX_X4_FEC_BURST_ERR_STSH1r_BURST_ERR_STATUSH_STREAM1f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH1r_BURST_ERR_STATUSH_STREAM1f_SET
#define READ_RX_X4_FEC_BURST_ERR_STSH1r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_BURST_ERR_STSH1r
#define WRITE_RX_X4_FEC_BURST_ERR_STSH1r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_BURST_ERR_STSH1r
#define MODIFY_RX_X4_FEC_BURST_ERR_STSH1r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_BURST_ERR_STSH1r
#define READLN_RX_X4_FEC_BURST_ERR_STSH1r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_BURST_ERR_STSH1r
#define WRITELN_RX_X4_FEC_BURST_ERR_STSH1r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_BURST_ERR_STSH1r
#define WRITEALL_RX_X4_FEC_BURST_ERR_STSH1r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_BURST_ERR_STSH1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_FEC_BURST_ERR_STSH2
 * BLOCKS:   RX_X4_STATUS4
 * REGADDR:  0xc192
 * DESC:     fec burst error status lower 16 bits for stream 2
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BURST_ERR_STATUSH_STREAM2 Note: This register is only valid in case of Correctable Error scenario.In case of uncorrectable error case, This register may contain invalid data information.16 MSB of the fec_burst_err_status for stream 2bits mapping :Bit 15: status updatedBit 8: 21-bit burst detected, but location failed pattern searchBit 7: pattern match passedBit 6: Corrected alternate errorBit 5: Corrected errorBit [4:0] : b21[20:16]Note: Bit 15 clears upon reading Fec_burst_err_statusL register
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH2r (0x0000c192 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_BURST_ERR_STSH2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_burst_err_stsh2[1];
	uint32_t _rx_x4_fec_burst_err_stsh2;
} BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH2r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH2r_CLR(r) (r).rx_x4_fec_burst_err_stsh2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH2r_SET(r,d) (r).rx_x4_fec_burst_err_stsh2[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH2r_GET(r) (r).rx_x4_fec_burst_err_stsh2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH2r_BURST_ERR_STATUSH_STREAM2f_GET(r) (((r).rx_x4_fec_burst_err_stsh2[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH2r_BURST_ERR_STATUSH_STREAM2f_SET(r,f) (r).rx_x4_fec_burst_err_stsh2[0]=(((r).rx_x4_fec_burst_err_stsh2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_BURST_ERR_STSH2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_BURST_ERR_STSH2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH2r,(_r._rx_x4_fec_burst_err_stsh2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_BURST_ERR_STSH2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH2r,(_r._rx_x4_fec_burst_err_stsh2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_BURST_ERR_STSH2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH2r,(_r._rx_x4_fec_burst_err_stsh2))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_BURST_ERR_STSH2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_burst_err_stsh2))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_BURST_ERR_STSH2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_burst_err_stsh2))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_BURST_ERR_STSH2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_burst_err_stsh2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_BURST_ERR_STSH2r BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH2r
#define RX_X4_FEC_BURST_ERR_STSH2r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH2r_t RX_X4_FEC_BURST_ERR_STSH2r_t;
#define RX_X4_FEC_BURST_ERR_STSH2r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH2r_CLR
#define RX_X4_FEC_BURST_ERR_STSH2r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH2r_SET
#define RX_X4_FEC_BURST_ERR_STSH2r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH2r_GET
#define RX_X4_FEC_BURST_ERR_STSH2r_BURST_ERR_STATUSH_STREAM2f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH2r_BURST_ERR_STATUSH_STREAM2f_GET
#define RX_X4_FEC_BURST_ERR_STSH2r_BURST_ERR_STATUSH_STREAM2f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH2r_BURST_ERR_STATUSH_STREAM2f_SET
#define READ_RX_X4_FEC_BURST_ERR_STSH2r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_BURST_ERR_STSH2r
#define WRITE_RX_X4_FEC_BURST_ERR_STSH2r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_BURST_ERR_STSH2r
#define MODIFY_RX_X4_FEC_BURST_ERR_STSH2r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_BURST_ERR_STSH2r
#define READLN_RX_X4_FEC_BURST_ERR_STSH2r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_BURST_ERR_STSH2r
#define WRITELN_RX_X4_FEC_BURST_ERR_STSH2r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_BURST_ERR_STSH2r
#define WRITEALL_RX_X4_FEC_BURST_ERR_STSH2r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_BURST_ERR_STSH2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_FEC_BURST_ERR_STSH3
 * BLOCKS:   RX_X4_STATUS4
 * REGADDR:  0xc193
 * DESC:     fec burst error status lower 16 bits for stream 3
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BURST_ERR_STATUSH_STREAM3 Note: This register is only valid in case of Correctable Error scenario.In case of uncorrectable error case, This register may contain invalid data information.16 MSB of the fec_burst_err_status for stream 3bits mapping :Bit 15: status updatedBit 8: 21-bit burst detected, but location failed pattern searchBit 7: pattern match passedBit 6: Corrected alternate errorBit 5: Corrected errorBit [4:0] : b21[20:16]Note: Bit 15 clears upon reading Fec_burst_err_statusL register
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH3r (0x0000c193 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH3r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_BURST_ERR_STSH3.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH3r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_burst_err_stsh3[1];
	uint32_t _rx_x4_fec_burst_err_stsh3;
} BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH3r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH3r_CLR(r) (r).rx_x4_fec_burst_err_stsh3[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH3r_SET(r,d) (r).rx_x4_fec_burst_err_stsh3[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH3r_GET(r) (r).rx_x4_fec_burst_err_stsh3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH3r_BURST_ERR_STATUSH_STREAM3f_GET(r) (((r).rx_x4_fec_burst_err_stsh3[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH3r_BURST_ERR_STATUSH_STREAM3f_SET(r,f) (r).rx_x4_fec_burst_err_stsh3[0]=(((r).rx_x4_fec_burst_err_stsh3[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_BURST_ERR_STSH3.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_BURST_ERR_STSH3r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH3r,(_r._rx_x4_fec_burst_err_stsh3))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_BURST_ERR_STSH3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH3r,(_r._rx_x4_fec_burst_err_stsh3)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_BURST_ERR_STSH3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH3r,(_r._rx_x4_fec_burst_err_stsh3))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_BURST_ERR_STSH3r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_burst_err_stsh3))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_BURST_ERR_STSH3r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_burst_err_stsh3))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_BURST_ERR_STSH3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH3r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_burst_err_stsh3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_BURST_ERR_STSH3r BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH3r
#define RX_X4_FEC_BURST_ERR_STSH3r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH3r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH3r_t RX_X4_FEC_BURST_ERR_STSH3r_t;
#define RX_X4_FEC_BURST_ERR_STSH3r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH3r_CLR
#define RX_X4_FEC_BURST_ERR_STSH3r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH3r_SET
#define RX_X4_FEC_BURST_ERR_STSH3r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH3r_GET
#define RX_X4_FEC_BURST_ERR_STSH3r_BURST_ERR_STATUSH_STREAM3f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH3r_BURST_ERR_STATUSH_STREAM3f_GET
#define RX_X4_FEC_BURST_ERR_STSH3r_BURST_ERR_STATUSH_STREAM3f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH3r_BURST_ERR_STATUSH_STREAM3f_SET
#define READ_RX_X4_FEC_BURST_ERR_STSH3r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_BURST_ERR_STSH3r
#define WRITE_RX_X4_FEC_BURST_ERR_STSH3r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_BURST_ERR_STSH3r
#define MODIFY_RX_X4_FEC_BURST_ERR_STSH3r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_BURST_ERR_STSH3r
#define READLN_RX_X4_FEC_BURST_ERR_STSH3r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_BURST_ERR_STSH3r
#define WRITELN_RX_X4_FEC_BURST_ERR_STSH3r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_BURST_ERR_STSH3r
#define WRITEALL_RX_X4_FEC_BURST_ERR_STSH3r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_BURST_ERR_STSH3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_FEC_BURST_ERR_STSH4
 * BLOCKS:   RX_X4_STATUS4
 * REGADDR:  0xc194
 * DESC:     fec burst error status lower 16 bits for stream 4
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BURST_ERR_STATUSH_STREAM4 Note: This register is only valid in case of Correctable Error scenario.In case of uncorrectable error case, This register may contain invalid data information.16 MSB of the fec_burst_err_status for stream 4bits mapping :Bit 15: status updatedBit 8: 21-bit burst detected, but location failed pattern searchBit 7: pattern match passedBit 6: Corrected alternate errorBit 5: Corrected errorBit [4:0] : b21[20:16]Note: Bit 15 clears upon reading Fec_burst_err_statusL register
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH4r (0x0000c194 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH4r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_BURST_ERR_STSH4.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH4r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_burst_err_stsh4[1];
	uint32_t _rx_x4_fec_burst_err_stsh4;
} BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH4r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH4r_CLR(r) (r).rx_x4_fec_burst_err_stsh4[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH4r_SET(r,d) (r).rx_x4_fec_burst_err_stsh4[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH4r_GET(r) (r).rx_x4_fec_burst_err_stsh4[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH4r_BURST_ERR_STATUSH_STREAM4f_GET(r) (((r).rx_x4_fec_burst_err_stsh4[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH4r_BURST_ERR_STATUSH_STREAM4f_SET(r,f) (r).rx_x4_fec_burst_err_stsh4[0]=(((r).rx_x4_fec_burst_err_stsh4[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_BURST_ERR_STSH4.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_BURST_ERR_STSH4r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH4r,(_r._rx_x4_fec_burst_err_stsh4))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_BURST_ERR_STSH4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH4r,(_r._rx_x4_fec_burst_err_stsh4)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_BURST_ERR_STSH4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH4r,(_r._rx_x4_fec_burst_err_stsh4))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_BURST_ERR_STSH4r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_burst_err_stsh4))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_BURST_ERR_STSH4r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_burst_err_stsh4))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_BURST_ERR_STSH4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH4r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_burst_err_stsh4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_BURST_ERR_STSH4r BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH4r
#define RX_X4_FEC_BURST_ERR_STSH4r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH4r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH4r_t RX_X4_FEC_BURST_ERR_STSH4r_t;
#define RX_X4_FEC_BURST_ERR_STSH4r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH4r_CLR
#define RX_X4_FEC_BURST_ERR_STSH4r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH4r_SET
#define RX_X4_FEC_BURST_ERR_STSH4r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH4r_GET
#define RX_X4_FEC_BURST_ERR_STSH4r_BURST_ERR_STATUSH_STREAM4f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH4r_BURST_ERR_STATUSH_STREAM4f_GET
#define RX_X4_FEC_BURST_ERR_STSH4r_BURST_ERR_STATUSH_STREAM4f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH4r_BURST_ERR_STATUSH_STREAM4f_SET
#define READ_RX_X4_FEC_BURST_ERR_STSH4r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_BURST_ERR_STSH4r
#define WRITE_RX_X4_FEC_BURST_ERR_STSH4r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_BURST_ERR_STSH4r
#define MODIFY_RX_X4_FEC_BURST_ERR_STSH4r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_BURST_ERR_STSH4r
#define READLN_RX_X4_FEC_BURST_ERR_STSH4r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_BURST_ERR_STSH4r
#define WRITELN_RX_X4_FEC_BURST_ERR_STSH4r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_BURST_ERR_STSH4r
#define WRITEALL_RX_X4_FEC_BURST_ERR_STSH4r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_BURST_ERR_STSH4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BURST_ERR_STSH4r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_FEC_CORRBLKSL0
 * BLOCKS:   RX_X4_STATUS4
 * REGADDR:  0xc195
 * DESC:     FEC corrected blocks counter for stream 0 [15:0]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CORCOUNTL_STREAM0 16 LSB of the corrected blocks count for stream 0, clear on read
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL0r (0x0000c195 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL0r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_CORRBLKSL0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL0r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_corrblksl0[1];
	uint32_t _rx_x4_fec_corrblksl0;
} BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL0r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL0r_CLR(r) (r).rx_x4_fec_corrblksl0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL0r_SET(r,d) (r).rx_x4_fec_corrblksl0[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL0r_GET(r) (r).rx_x4_fec_corrblksl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL0r_CORCOUNTL_STREAM0f_GET(r) (((r).rx_x4_fec_corrblksl0[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL0r_CORCOUNTL_STREAM0f_SET(r,f) (r).rx_x4_fec_corrblksl0[0]=(((r).rx_x4_fec_corrblksl0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_CORRBLKSL0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_CORRBLKSL0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL0r,(_r._rx_x4_fec_corrblksl0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_CORRBLKSL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL0r,(_r._rx_x4_fec_corrblksl0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_CORRBLKSL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL0r,(_r._rx_x4_fec_corrblksl0))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_CORRBLKSL0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_corrblksl0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_CORRBLKSL0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_corrblksl0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_CORRBLKSL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_corrblksl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_CORRBLKSL0r BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL0r
#define RX_X4_FEC_CORRBLKSL0r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL0r_t RX_X4_FEC_CORRBLKSL0r_t;
#define RX_X4_FEC_CORRBLKSL0r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL0r_CLR
#define RX_X4_FEC_CORRBLKSL0r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL0r_SET
#define RX_X4_FEC_CORRBLKSL0r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL0r_GET
#define RX_X4_FEC_CORRBLKSL0r_CORCOUNTL_STREAM0f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL0r_CORCOUNTL_STREAM0f_GET
#define RX_X4_FEC_CORRBLKSL0r_CORCOUNTL_STREAM0f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL0r_CORCOUNTL_STREAM0f_SET
#define READ_RX_X4_FEC_CORRBLKSL0r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_CORRBLKSL0r
#define WRITE_RX_X4_FEC_CORRBLKSL0r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_CORRBLKSL0r
#define MODIFY_RX_X4_FEC_CORRBLKSL0r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_CORRBLKSL0r
#define READLN_RX_X4_FEC_CORRBLKSL0r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_CORRBLKSL0r
#define WRITELN_RX_X4_FEC_CORRBLKSL0r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_CORRBLKSL0r
#define WRITEALL_RX_X4_FEC_CORRBLKSL0r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_CORRBLKSL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_FEC_CORRBLKSL1
 * BLOCKS:   RX_X4_STATUS4
 * REGADDR:  0xc196
 * DESC:     FEC corrected blocks counter for stream 1 [15:0]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CORCOUNTL_STREAM1 16 LSB of the corrected blocks count for stream 1, clear on read
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL1r (0x0000c196 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL1r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_CORRBLKSL1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL1r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_corrblksl1[1];
	uint32_t _rx_x4_fec_corrblksl1;
} BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL1r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL1r_CLR(r) (r).rx_x4_fec_corrblksl1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL1r_SET(r,d) (r).rx_x4_fec_corrblksl1[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL1r_GET(r) (r).rx_x4_fec_corrblksl1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL1r_CORCOUNTL_STREAM1f_GET(r) (((r).rx_x4_fec_corrblksl1[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL1r_CORCOUNTL_STREAM1f_SET(r,f) (r).rx_x4_fec_corrblksl1[0]=(((r).rx_x4_fec_corrblksl1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_CORRBLKSL1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_CORRBLKSL1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL1r,(_r._rx_x4_fec_corrblksl1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_CORRBLKSL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL1r,(_r._rx_x4_fec_corrblksl1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_CORRBLKSL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL1r,(_r._rx_x4_fec_corrblksl1))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_CORRBLKSL1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_corrblksl1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_CORRBLKSL1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_corrblksl1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_CORRBLKSL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_corrblksl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_CORRBLKSL1r BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL1r
#define RX_X4_FEC_CORRBLKSL1r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL1r_t RX_X4_FEC_CORRBLKSL1r_t;
#define RX_X4_FEC_CORRBLKSL1r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL1r_CLR
#define RX_X4_FEC_CORRBLKSL1r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL1r_SET
#define RX_X4_FEC_CORRBLKSL1r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL1r_GET
#define RX_X4_FEC_CORRBLKSL1r_CORCOUNTL_STREAM1f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL1r_CORCOUNTL_STREAM1f_GET
#define RX_X4_FEC_CORRBLKSL1r_CORCOUNTL_STREAM1f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL1r_CORCOUNTL_STREAM1f_SET
#define READ_RX_X4_FEC_CORRBLKSL1r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_CORRBLKSL1r
#define WRITE_RX_X4_FEC_CORRBLKSL1r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_CORRBLKSL1r
#define MODIFY_RX_X4_FEC_CORRBLKSL1r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_CORRBLKSL1r
#define READLN_RX_X4_FEC_CORRBLKSL1r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_CORRBLKSL1r
#define WRITELN_RX_X4_FEC_CORRBLKSL1r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_CORRBLKSL1r
#define WRITEALL_RX_X4_FEC_CORRBLKSL1r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_CORRBLKSL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_FEC_CORRBLKSL2
 * BLOCKS:   RX_X4_STATUS4
 * REGADDR:  0xc197
 * DESC:     FEC corrected blocks counter for stream 2 [15:0]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CORCOUNTL_STREAM2 16 LSB of the corrected blocks count for stream 2, clear on read
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL2r (0x0000c197 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_CORRBLKSL2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_corrblksl2[1];
	uint32_t _rx_x4_fec_corrblksl2;
} BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL2r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL2r_CLR(r) (r).rx_x4_fec_corrblksl2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL2r_SET(r,d) (r).rx_x4_fec_corrblksl2[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL2r_GET(r) (r).rx_x4_fec_corrblksl2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL2r_CORCOUNTL_STREAM2f_GET(r) (((r).rx_x4_fec_corrblksl2[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL2r_CORCOUNTL_STREAM2f_SET(r,f) (r).rx_x4_fec_corrblksl2[0]=(((r).rx_x4_fec_corrblksl2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_CORRBLKSL2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_CORRBLKSL2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL2r,(_r._rx_x4_fec_corrblksl2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_CORRBLKSL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL2r,(_r._rx_x4_fec_corrblksl2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_CORRBLKSL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL2r,(_r._rx_x4_fec_corrblksl2))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_CORRBLKSL2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_corrblksl2))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_CORRBLKSL2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_corrblksl2))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_CORRBLKSL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_corrblksl2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_CORRBLKSL2r BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL2r
#define RX_X4_FEC_CORRBLKSL2r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL2r_t RX_X4_FEC_CORRBLKSL2r_t;
#define RX_X4_FEC_CORRBLKSL2r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL2r_CLR
#define RX_X4_FEC_CORRBLKSL2r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL2r_SET
#define RX_X4_FEC_CORRBLKSL2r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL2r_GET
#define RX_X4_FEC_CORRBLKSL2r_CORCOUNTL_STREAM2f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL2r_CORCOUNTL_STREAM2f_GET
#define RX_X4_FEC_CORRBLKSL2r_CORCOUNTL_STREAM2f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL2r_CORCOUNTL_STREAM2f_SET
#define READ_RX_X4_FEC_CORRBLKSL2r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_CORRBLKSL2r
#define WRITE_RX_X4_FEC_CORRBLKSL2r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_CORRBLKSL2r
#define MODIFY_RX_X4_FEC_CORRBLKSL2r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_CORRBLKSL2r
#define READLN_RX_X4_FEC_CORRBLKSL2r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_CORRBLKSL2r
#define WRITELN_RX_X4_FEC_CORRBLKSL2r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_CORRBLKSL2r
#define WRITEALL_RX_X4_FEC_CORRBLKSL2r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_CORRBLKSL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_FEC_CORRBLKSL3
 * BLOCKS:   RX_X4_STATUS4
 * REGADDR:  0xc198
 * DESC:     FEC corrected blocks counter for stream 3 [15:0]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CORCOUNTL_STREAM3 16 LSB of the corrected blocks count for stream 3, clear on read
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL3r (0x0000c198 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL3r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_CORRBLKSL3.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL3r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_corrblksl3[1];
	uint32_t _rx_x4_fec_corrblksl3;
} BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL3r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL3r_CLR(r) (r).rx_x4_fec_corrblksl3[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL3r_SET(r,d) (r).rx_x4_fec_corrblksl3[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL3r_GET(r) (r).rx_x4_fec_corrblksl3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL3r_CORCOUNTL_STREAM3f_GET(r) (((r).rx_x4_fec_corrblksl3[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL3r_CORCOUNTL_STREAM3f_SET(r,f) (r).rx_x4_fec_corrblksl3[0]=(((r).rx_x4_fec_corrblksl3[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_CORRBLKSL3.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_CORRBLKSL3r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL3r,(_r._rx_x4_fec_corrblksl3))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_CORRBLKSL3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL3r,(_r._rx_x4_fec_corrblksl3)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_CORRBLKSL3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL3r,(_r._rx_x4_fec_corrblksl3))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_CORRBLKSL3r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_corrblksl3))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_CORRBLKSL3r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_corrblksl3))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_CORRBLKSL3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL3r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_corrblksl3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_CORRBLKSL3r BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL3r
#define RX_X4_FEC_CORRBLKSL3r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL3r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL3r_t RX_X4_FEC_CORRBLKSL3r_t;
#define RX_X4_FEC_CORRBLKSL3r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL3r_CLR
#define RX_X4_FEC_CORRBLKSL3r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL3r_SET
#define RX_X4_FEC_CORRBLKSL3r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL3r_GET
#define RX_X4_FEC_CORRBLKSL3r_CORCOUNTL_STREAM3f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL3r_CORCOUNTL_STREAM3f_GET
#define RX_X4_FEC_CORRBLKSL3r_CORCOUNTL_STREAM3f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL3r_CORCOUNTL_STREAM3f_SET
#define READ_RX_X4_FEC_CORRBLKSL3r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_CORRBLKSL3r
#define WRITE_RX_X4_FEC_CORRBLKSL3r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_CORRBLKSL3r
#define MODIFY_RX_X4_FEC_CORRBLKSL3r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_CORRBLKSL3r
#define READLN_RX_X4_FEC_CORRBLKSL3r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_CORRBLKSL3r
#define WRITELN_RX_X4_FEC_CORRBLKSL3r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_CORRBLKSL3r
#define WRITEALL_RX_X4_FEC_CORRBLKSL3r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_CORRBLKSL3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_FEC_CORRBLKSL4
 * BLOCKS:   RX_X4_STATUS4
 * REGADDR:  0xc199
 * DESC:     FEC corrected blocks counter for stream 4 [15:0]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CORCOUNTL_STREAM4 16 LSB of the corrected blocks count for stream 4, clear on read
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL4r (0x0000c199 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL4r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_CORRBLKSL4.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL4r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_corrblksl4[1];
	uint32_t _rx_x4_fec_corrblksl4;
} BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL4r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL4r_CLR(r) (r).rx_x4_fec_corrblksl4[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL4r_SET(r,d) (r).rx_x4_fec_corrblksl4[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL4r_GET(r) (r).rx_x4_fec_corrblksl4[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL4r_CORCOUNTL_STREAM4f_GET(r) (((r).rx_x4_fec_corrblksl4[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL4r_CORCOUNTL_STREAM4f_SET(r,f) (r).rx_x4_fec_corrblksl4[0]=(((r).rx_x4_fec_corrblksl4[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_CORRBLKSL4.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_CORRBLKSL4r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL4r,(_r._rx_x4_fec_corrblksl4))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_CORRBLKSL4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL4r,(_r._rx_x4_fec_corrblksl4)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_CORRBLKSL4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL4r,(_r._rx_x4_fec_corrblksl4))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_CORRBLKSL4r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_corrblksl4))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_CORRBLKSL4r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_corrblksl4))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_CORRBLKSL4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL4r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_corrblksl4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_CORRBLKSL4r BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL4r
#define RX_X4_FEC_CORRBLKSL4r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL4r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL4r_t RX_X4_FEC_CORRBLKSL4r_t;
#define RX_X4_FEC_CORRBLKSL4r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL4r_CLR
#define RX_X4_FEC_CORRBLKSL4r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL4r_SET
#define RX_X4_FEC_CORRBLKSL4r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL4r_GET
#define RX_X4_FEC_CORRBLKSL4r_CORCOUNTL_STREAM4f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL4r_CORCOUNTL_STREAM4f_GET
#define RX_X4_FEC_CORRBLKSL4r_CORCOUNTL_STREAM4f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL4r_CORCOUNTL_STREAM4f_SET
#define READ_RX_X4_FEC_CORRBLKSL4r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_CORRBLKSL4r
#define WRITE_RX_X4_FEC_CORRBLKSL4r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_CORRBLKSL4r
#define MODIFY_RX_X4_FEC_CORRBLKSL4r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_CORRBLKSL4r
#define READLN_RX_X4_FEC_CORRBLKSL4r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_CORRBLKSL4r
#define WRITELN_RX_X4_FEC_CORRBLKSL4r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_CORRBLKSL4r
#define WRITEALL_RX_X4_FEC_CORRBLKSL4r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_CORRBLKSL4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSL4r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_FEC_CORRBLKSH0
 * BLOCKS:   RX_X4_STATUS4
 * REGADDR:  0xc19a
 * DESC:     FEC corrected blocks counter for stream 0 [31:16]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CORCOUNTH_STREAM0 16 MSB of the corrected blocks count for stream 0, clear on readContents are latched upon read of corCountL
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH0r (0x0000c19a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH0r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_CORRBLKSH0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH0r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_corrblksh0[1];
	uint32_t _rx_x4_fec_corrblksh0;
} BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH0r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH0r_CLR(r) (r).rx_x4_fec_corrblksh0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH0r_SET(r,d) (r).rx_x4_fec_corrblksh0[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH0r_GET(r) (r).rx_x4_fec_corrblksh0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH0r_CORCOUNTH_STREAM0f_GET(r) (((r).rx_x4_fec_corrblksh0[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH0r_CORCOUNTH_STREAM0f_SET(r,f) (r).rx_x4_fec_corrblksh0[0]=(((r).rx_x4_fec_corrblksh0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_CORRBLKSH0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_CORRBLKSH0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH0r,(_r._rx_x4_fec_corrblksh0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_CORRBLKSH0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH0r,(_r._rx_x4_fec_corrblksh0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_CORRBLKSH0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH0r,(_r._rx_x4_fec_corrblksh0))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_CORRBLKSH0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_corrblksh0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_CORRBLKSH0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_corrblksh0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_CORRBLKSH0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_corrblksh0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_CORRBLKSH0r BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH0r
#define RX_X4_FEC_CORRBLKSH0r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH0r_t RX_X4_FEC_CORRBLKSH0r_t;
#define RX_X4_FEC_CORRBLKSH0r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH0r_CLR
#define RX_X4_FEC_CORRBLKSH0r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH0r_SET
#define RX_X4_FEC_CORRBLKSH0r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH0r_GET
#define RX_X4_FEC_CORRBLKSH0r_CORCOUNTH_STREAM0f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH0r_CORCOUNTH_STREAM0f_GET
#define RX_X4_FEC_CORRBLKSH0r_CORCOUNTH_STREAM0f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH0r_CORCOUNTH_STREAM0f_SET
#define READ_RX_X4_FEC_CORRBLKSH0r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_CORRBLKSH0r
#define WRITE_RX_X4_FEC_CORRBLKSH0r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_CORRBLKSH0r
#define MODIFY_RX_X4_FEC_CORRBLKSH0r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_CORRBLKSH0r
#define READLN_RX_X4_FEC_CORRBLKSH0r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_CORRBLKSH0r
#define WRITELN_RX_X4_FEC_CORRBLKSH0r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_CORRBLKSH0r
#define WRITEALL_RX_X4_FEC_CORRBLKSH0r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_CORRBLKSH0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_FEC_CORRBLKSH1
 * BLOCKS:   RX_X4_STATUS4
 * REGADDR:  0xc19b
 * DESC:     FEC corrected blocks counter for stream 1 [31:16]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CORCOUNTH_STREAM1 16 MSB of the corrected blocks count for stream 1, clear on readContents are latched upon read of corCountL
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH1r (0x0000c19b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH1r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_CORRBLKSH1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH1r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_corrblksh1[1];
	uint32_t _rx_x4_fec_corrblksh1;
} BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH1r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH1r_CLR(r) (r).rx_x4_fec_corrblksh1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH1r_SET(r,d) (r).rx_x4_fec_corrblksh1[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH1r_GET(r) (r).rx_x4_fec_corrblksh1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH1r_CORCOUNTH_STREAM1f_GET(r) (((r).rx_x4_fec_corrblksh1[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH1r_CORCOUNTH_STREAM1f_SET(r,f) (r).rx_x4_fec_corrblksh1[0]=(((r).rx_x4_fec_corrblksh1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_CORRBLKSH1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_CORRBLKSH1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH1r,(_r._rx_x4_fec_corrblksh1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_CORRBLKSH1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH1r,(_r._rx_x4_fec_corrblksh1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_CORRBLKSH1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH1r,(_r._rx_x4_fec_corrblksh1))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_CORRBLKSH1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_corrblksh1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_CORRBLKSH1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_corrblksh1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_CORRBLKSH1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_corrblksh1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_CORRBLKSH1r BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH1r
#define RX_X4_FEC_CORRBLKSH1r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH1r_t RX_X4_FEC_CORRBLKSH1r_t;
#define RX_X4_FEC_CORRBLKSH1r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH1r_CLR
#define RX_X4_FEC_CORRBLKSH1r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH1r_SET
#define RX_X4_FEC_CORRBLKSH1r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH1r_GET
#define RX_X4_FEC_CORRBLKSH1r_CORCOUNTH_STREAM1f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH1r_CORCOUNTH_STREAM1f_GET
#define RX_X4_FEC_CORRBLKSH1r_CORCOUNTH_STREAM1f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH1r_CORCOUNTH_STREAM1f_SET
#define READ_RX_X4_FEC_CORRBLKSH1r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_CORRBLKSH1r
#define WRITE_RX_X4_FEC_CORRBLKSH1r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_CORRBLKSH1r
#define MODIFY_RX_X4_FEC_CORRBLKSH1r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_CORRBLKSH1r
#define READLN_RX_X4_FEC_CORRBLKSH1r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_CORRBLKSH1r
#define WRITELN_RX_X4_FEC_CORRBLKSH1r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_CORRBLKSH1r
#define WRITEALL_RX_X4_FEC_CORRBLKSH1r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_CORRBLKSH1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_FEC_CORRBLKSH2
 * BLOCKS:   RX_X4_STATUS4
 * REGADDR:  0xc19c
 * DESC:     FEC corrected blocks counter for stream 2 [31:16]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CORCOUNTH_STREAM2 16 MSB of the corrected blocks count for stream 2, clear on readContents are latched upon read of corCountL
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH2r (0x0000c19c | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_CORRBLKSH2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_corrblksh2[1];
	uint32_t _rx_x4_fec_corrblksh2;
} BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH2r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH2r_CLR(r) (r).rx_x4_fec_corrblksh2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH2r_SET(r,d) (r).rx_x4_fec_corrblksh2[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH2r_GET(r) (r).rx_x4_fec_corrblksh2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH2r_CORCOUNTH_STREAM2f_GET(r) (((r).rx_x4_fec_corrblksh2[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH2r_CORCOUNTH_STREAM2f_SET(r,f) (r).rx_x4_fec_corrblksh2[0]=(((r).rx_x4_fec_corrblksh2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_CORRBLKSH2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_CORRBLKSH2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH2r,(_r._rx_x4_fec_corrblksh2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_CORRBLKSH2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH2r,(_r._rx_x4_fec_corrblksh2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_CORRBLKSH2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH2r,(_r._rx_x4_fec_corrblksh2))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_CORRBLKSH2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_corrblksh2))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_CORRBLKSH2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_corrblksh2))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_CORRBLKSH2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_corrblksh2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_CORRBLKSH2r BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH2r
#define RX_X4_FEC_CORRBLKSH2r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH2r_t RX_X4_FEC_CORRBLKSH2r_t;
#define RX_X4_FEC_CORRBLKSH2r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH2r_CLR
#define RX_X4_FEC_CORRBLKSH2r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH2r_SET
#define RX_X4_FEC_CORRBLKSH2r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH2r_GET
#define RX_X4_FEC_CORRBLKSH2r_CORCOUNTH_STREAM2f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH2r_CORCOUNTH_STREAM2f_GET
#define RX_X4_FEC_CORRBLKSH2r_CORCOUNTH_STREAM2f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH2r_CORCOUNTH_STREAM2f_SET
#define READ_RX_X4_FEC_CORRBLKSH2r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_CORRBLKSH2r
#define WRITE_RX_X4_FEC_CORRBLKSH2r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_CORRBLKSH2r
#define MODIFY_RX_X4_FEC_CORRBLKSH2r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_CORRBLKSH2r
#define READLN_RX_X4_FEC_CORRBLKSH2r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_CORRBLKSH2r
#define WRITELN_RX_X4_FEC_CORRBLKSH2r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_CORRBLKSH2r
#define WRITEALL_RX_X4_FEC_CORRBLKSH2r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_CORRBLKSH2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_FEC_CORRBLKSH3
 * BLOCKS:   RX_X4_STATUS4
 * REGADDR:  0xc19d
 * DESC:     FEC corrected blocks counter for stream 3 [31:16]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CORCOUNTH_STREAM3 16 MSB of the corrected blocks count for stream 3, clear on readContents are latched upon read of corCountL
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH3r (0x0000c19d | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH3r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_CORRBLKSH3.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH3r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_corrblksh3[1];
	uint32_t _rx_x4_fec_corrblksh3;
} BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH3r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH3r_CLR(r) (r).rx_x4_fec_corrblksh3[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH3r_SET(r,d) (r).rx_x4_fec_corrblksh3[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH3r_GET(r) (r).rx_x4_fec_corrblksh3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH3r_CORCOUNTH_STREAM3f_GET(r) (((r).rx_x4_fec_corrblksh3[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH3r_CORCOUNTH_STREAM3f_SET(r,f) (r).rx_x4_fec_corrblksh3[0]=(((r).rx_x4_fec_corrblksh3[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_CORRBLKSH3.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_CORRBLKSH3r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH3r,(_r._rx_x4_fec_corrblksh3))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_CORRBLKSH3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH3r,(_r._rx_x4_fec_corrblksh3)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_CORRBLKSH3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH3r,(_r._rx_x4_fec_corrblksh3))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_CORRBLKSH3r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_corrblksh3))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_CORRBLKSH3r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_corrblksh3))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_CORRBLKSH3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH3r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_corrblksh3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_CORRBLKSH3r BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH3r
#define RX_X4_FEC_CORRBLKSH3r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH3r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH3r_t RX_X4_FEC_CORRBLKSH3r_t;
#define RX_X4_FEC_CORRBLKSH3r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH3r_CLR
#define RX_X4_FEC_CORRBLKSH3r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH3r_SET
#define RX_X4_FEC_CORRBLKSH3r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH3r_GET
#define RX_X4_FEC_CORRBLKSH3r_CORCOUNTH_STREAM3f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH3r_CORCOUNTH_STREAM3f_GET
#define RX_X4_FEC_CORRBLKSH3r_CORCOUNTH_STREAM3f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH3r_CORCOUNTH_STREAM3f_SET
#define READ_RX_X4_FEC_CORRBLKSH3r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_CORRBLKSH3r
#define WRITE_RX_X4_FEC_CORRBLKSH3r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_CORRBLKSH3r
#define MODIFY_RX_X4_FEC_CORRBLKSH3r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_CORRBLKSH3r
#define READLN_RX_X4_FEC_CORRBLKSH3r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_CORRBLKSH3r
#define WRITELN_RX_X4_FEC_CORRBLKSH3r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_CORRBLKSH3r
#define WRITEALL_RX_X4_FEC_CORRBLKSH3r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_CORRBLKSH3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_FEC_CORRBLKSH4
 * BLOCKS:   RX_X4_STATUS4
 * REGADDR:  0xc19e
 * DESC:     FEC corrected blocks counter for stream 4 [31:16]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CORCOUNTH_STREAM4 16 MSB of the corrected blocks count for stream 4, clear on readContents are latched upon read of corCountL
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH4r (0x0000c19e | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH4r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_CORRBLKSH4.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH4r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_corrblksh4[1];
	uint32_t _rx_x4_fec_corrblksh4;
} BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH4r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH4r_CLR(r) (r).rx_x4_fec_corrblksh4[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH4r_SET(r,d) (r).rx_x4_fec_corrblksh4[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH4r_GET(r) (r).rx_x4_fec_corrblksh4[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH4r_CORCOUNTH_STREAM4f_GET(r) (((r).rx_x4_fec_corrblksh4[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH4r_CORCOUNTH_STREAM4f_SET(r,f) (r).rx_x4_fec_corrblksh4[0]=(((r).rx_x4_fec_corrblksh4[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_CORRBLKSH4.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_CORRBLKSH4r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH4r,(_r._rx_x4_fec_corrblksh4))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_CORRBLKSH4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH4r,(_r._rx_x4_fec_corrblksh4)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_CORRBLKSH4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH4r,(_r._rx_x4_fec_corrblksh4))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_CORRBLKSH4r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_corrblksh4))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_CORRBLKSH4r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_corrblksh4))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_CORRBLKSH4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH4r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_corrblksh4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_CORRBLKSH4r BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH4r
#define RX_X4_FEC_CORRBLKSH4r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH4r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH4r_t RX_X4_FEC_CORRBLKSH4r_t;
#define RX_X4_FEC_CORRBLKSH4r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH4r_CLR
#define RX_X4_FEC_CORRBLKSH4r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH4r_SET
#define RX_X4_FEC_CORRBLKSH4r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH4r_GET
#define RX_X4_FEC_CORRBLKSH4r_CORCOUNTH_STREAM4f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH4r_CORCOUNTH_STREAM4f_GET
#define RX_X4_FEC_CORRBLKSH4r_CORCOUNTH_STREAM4f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH4r_CORCOUNTH_STREAM4f_SET
#define READ_RX_X4_FEC_CORRBLKSH4r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_CORRBLKSH4r
#define WRITE_RX_X4_FEC_CORRBLKSH4r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_CORRBLKSH4r
#define MODIFY_RX_X4_FEC_CORRBLKSH4r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_CORRBLKSH4r
#define READLN_RX_X4_FEC_CORRBLKSH4r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_CORRBLKSH4r
#define WRITELN_RX_X4_FEC_CORRBLKSH4r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_CORRBLKSH4r
#define WRITEALL_RX_X4_FEC_CORRBLKSH4r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_CORRBLKSH4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORRBLKSH4r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_FEC_UNCORRBLKSL0
 * BLOCKS:   RX_X4_STATUS5
 * REGADDR:  0xc1a0
 * DESC:     FEC uncorrected blocks counter for stream 0[15:0]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     UNCORCOUNTL_STREAM0 16 LSB of the uncorrected blocks count for stream 0, clear on read
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL0r (0x0000c1a0 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL0r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_UNCORRBLKSL0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL0r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_uncorrblksl0[1];
	uint32_t _rx_x4_fec_uncorrblksl0;
} BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL0r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL0r_CLR(r) (r).rx_x4_fec_uncorrblksl0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL0r_SET(r,d) (r).rx_x4_fec_uncorrblksl0[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL0r_GET(r) (r).rx_x4_fec_uncorrblksl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL0r_UNCORCOUNTL_STREAM0f_GET(r) (((r).rx_x4_fec_uncorrblksl0[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL0r_UNCORCOUNTL_STREAM0f_SET(r,f) (r).rx_x4_fec_uncorrblksl0[0]=(((r).rx_x4_fec_uncorrblksl0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_UNCORRBLKSL0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_UNCORRBLKSL0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL0r,(_r._rx_x4_fec_uncorrblksl0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_UNCORRBLKSL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL0r,(_r._rx_x4_fec_uncorrblksl0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_UNCORRBLKSL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL0r,(_r._rx_x4_fec_uncorrblksl0))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_UNCORRBLKSL0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_uncorrblksl0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_UNCORRBLKSL0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_uncorrblksl0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_UNCORRBLKSL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_uncorrblksl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_UNCORRBLKSL0r BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL0r
#define RX_X4_FEC_UNCORRBLKSL0r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL0r_t RX_X4_FEC_UNCORRBLKSL0r_t;
#define RX_X4_FEC_UNCORRBLKSL0r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL0r_CLR
#define RX_X4_FEC_UNCORRBLKSL0r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL0r_SET
#define RX_X4_FEC_UNCORRBLKSL0r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL0r_GET
#define RX_X4_FEC_UNCORRBLKSL0r_UNCORCOUNTL_STREAM0f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL0r_UNCORCOUNTL_STREAM0f_GET
#define RX_X4_FEC_UNCORRBLKSL0r_UNCORCOUNTL_STREAM0f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL0r_UNCORCOUNTL_STREAM0f_SET
#define READ_RX_X4_FEC_UNCORRBLKSL0r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_UNCORRBLKSL0r
#define WRITE_RX_X4_FEC_UNCORRBLKSL0r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_UNCORRBLKSL0r
#define MODIFY_RX_X4_FEC_UNCORRBLKSL0r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_UNCORRBLKSL0r
#define READLN_RX_X4_FEC_UNCORRBLKSL0r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_UNCORRBLKSL0r
#define WRITELN_RX_X4_FEC_UNCORRBLKSL0r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_UNCORRBLKSL0r
#define WRITEALL_RX_X4_FEC_UNCORRBLKSL0r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_UNCORRBLKSL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_FEC_UNCORRBLKSL1
 * BLOCKS:   RX_X4_STATUS5
 * REGADDR:  0xc1a1
 * DESC:     FEC uncorrected blocks counter for stream 1[15:0]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     UNCORCOUNTL_STREAM1 16 LSB of the uncorrected blocks count for stream 1, clear on read
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL1r (0x0000c1a1 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL1r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_UNCORRBLKSL1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL1r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_uncorrblksl1[1];
	uint32_t _rx_x4_fec_uncorrblksl1;
} BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL1r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL1r_CLR(r) (r).rx_x4_fec_uncorrblksl1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL1r_SET(r,d) (r).rx_x4_fec_uncorrblksl1[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL1r_GET(r) (r).rx_x4_fec_uncorrblksl1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL1r_UNCORCOUNTL_STREAM1f_GET(r) (((r).rx_x4_fec_uncorrblksl1[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL1r_UNCORCOUNTL_STREAM1f_SET(r,f) (r).rx_x4_fec_uncorrblksl1[0]=(((r).rx_x4_fec_uncorrblksl1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_UNCORRBLKSL1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_UNCORRBLKSL1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL1r,(_r._rx_x4_fec_uncorrblksl1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_UNCORRBLKSL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL1r,(_r._rx_x4_fec_uncorrblksl1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_UNCORRBLKSL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL1r,(_r._rx_x4_fec_uncorrblksl1))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_UNCORRBLKSL1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_uncorrblksl1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_UNCORRBLKSL1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_uncorrblksl1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_UNCORRBLKSL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_uncorrblksl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_UNCORRBLKSL1r BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL1r
#define RX_X4_FEC_UNCORRBLKSL1r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL1r_t RX_X4_FEC_UNCORRBLKSL1r_t;
#define RX_X4_FEC_UNCORRBLKSL1r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL1r_CLR
#define RX_X4_FEC_UNCORRBLKSL1r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL1r_SET
#define RX_X4_FEC_UNCORRBLKSL1r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL1r_GET
#define RX_X4_FEC_UNCORRBLKSL1r_UNCORCOUNTL_STREAM1f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL1r_UNCORCOUNTL_STREAM1f_GET
#define RX_X4_FEC_UNCORRBLKSL1r_UNCORCOUNTL_STREAM1f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL1r_UNCORCOUNTL_STREAM1f_SET
#define READ_RX_X4_FEC_UNCORRBLKSL1r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_UNCORRBLKSL1r
#define WRITE_RX_X4_FEC_UNCORRBLKSL1r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_UNCORRBLKSL1r
#define MODIFY_RX_X4_FEC_UNCORRBLKSL1r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_UNCORRBLKSL1r
#define READLN_RX_X4_FEC_UNCORRBLKSL1r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_UNCORRBLKSL1r
#define WRITELN_RX_X4_FEC_UNCORRBLKSL1r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_UNCORRBLKSL1r
#define WRITEALL_RX_X4_FEC_UNCORRBLKSL1r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_UNCORRBLKSL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_FEC_UNCORRBLKSL2
 * BLOCKS:   RX_X4_STATUS5
 * REGADDR:  0xc1a2
 * DESC:     FEC uncorrected blocks counter for stream 2[15:0]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     UNCORCOUNTL_STREAM2 16 LSB of the uncorrected blocks count for stream 2, clear on read
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL2r (0x0000c1a2 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_UNCORRBLKSL2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_uncorrblksl2[1];
	uint32_t _rx_x4_fec_uncorrblksl2;
} BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL2r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL2r_CLR(r) (r).rx_x4_fec_uncorrblksl2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL2r_SET(r,d) (r).rx_x4_fec_uncorrblksl2[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL2r_GET(r) (r).rx_x4_fec_uncorrblksl2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL2r_UNCORCOUNTL_STREAM2f_GET(r) (((r).rx_x4_fec_uncorrblksl2[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL2r_UNCORCOUNTL_STREAM2f_SET(r,f) (r).rx_x4_fec_uncorrblksl2[0]=(((r).rx_x4_fec_uncorrblksl2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_UNCORRBLKSL2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_UNCORRBLKSL2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL2r,(_r._rx_x4_fec_uncorrblksl2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_UNCORRBLKSL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL2r,(_r._rx_x4_fec_uncorrblksl2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_UNCORRBLKSL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL2r,(_r._rx_x4_fec_uncorrblksl2))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_UNCORRBLKSL2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_uncorrblksl2))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_UNCORRBLKSL2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_uncorrblksl2))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_UNCORRBLKSL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_uncorrblksl2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_UNCORRBLKSL2r BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL2r
#define RX_X4_FEC_UNCORRBLKSL2r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL2r_t RX_X4_FEC_UNCORRBLKSL2r_t;
#define RX_X4_FEC_UNCORRBLKSL2r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL2r_CLR
#define RX_X4_FEC_UNCORRBLKSL2r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL2r_SET
#define RX_X4_FEC_UNCORRBLKSL2r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL2r_GET
#define RX_X4_FEC_UNCORRBLKSL2r_UNCORCOUNTL_STREAM2f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL2r_UNCORCOUNTL_STREAM2f_GET
#define RX_X4_FEC_UNCORRBLKSL2r_UNCORCOUNTL_STREAM2f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL2r_UNCORCOUNTL_STREAM2f_SET
#define READ_RX_X4_FEC_UNCORRBLKSL2r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_UNCORRBLKSL2r
#define WRITE_RX_X4_FEC_UNCORRBLKSL2r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_UNCORRBLKSL2r
#define MODIFY_RX_X4_FEC_UNCORRBLKSL2r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_UNCORRBLKSL2r
#define READLN_RX_X4_FEC_UNCORRBLKSL2r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_UNCORRBLKSL2r
#define WRITELN_RX_X4_FEC_UNCORRBLKSL2r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_UNCORRBLKSL2r
#define WRITEALL_RX_X4_FEC_UNCORRBLKSL2r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_UNCORRBLKSL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_FEC_UNCORRBLKSL3
 * BLOCKS:   RX_X4_STATUS5
 * REGADDR:  0xc1a3
 * DESC:     FEC uncorrected blocks counter for stream 3[15:0]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     UNCORCOUNTL_STREAM3 16 LSB of the uncorrected blocks count for stream 3, clear on read
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL3r (0x0000c1a3 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL3r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_UNCORRBLKSL3.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL3r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_uncorrblksl3[1];
	uint32_t _rx_x4_fec_uncorrblksl3;
} BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL3r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL3r_CLR(r) (r).rx_x4_fec_uncorrblksl3[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL3r_SET(r,d) (r).rx_x4_fec_uncorrblksl3[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL3r_GET(r) (r).rx_x4_fec_uncorrblksl3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL3r_UNCORCOUNTL_STREAM3f_GET(r) (((r).rx_x4_fec_uncorrblksl3[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL3r_UNCORCOUNTL_STREAM3f_SET(r,f) (r).rx_x4_fec_uncorrblksl3[0]=(((r).rx_x4_fec_uncorrblksl3[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_UNCORRBLKSL3.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_UNCORRBLKSL3r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL3r,(_r._rx_x4_fec_uncorrblksl3))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_UNCORRBLKSL3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL3r,(_r._rx_x4_fec_uncorrblksl3)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_UNCORRBLKSL3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL3r,(_r._rx_x4_fec_uncorrblksl3))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_UNCORRBLKSL3r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_uncorrblksl3))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_UNCORRBLKSL3r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_uncorrblksl3))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_UNCORRBLKSL3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL3r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_uncorrblksl3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_UNCORRBLKSL3r BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL3r
#define RX_X4_FEC_UNCORRBLKSL3r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL3r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL3r_t RX_X4_FEC_UNCORRBLKSL3r_t;
#define RX_X4_FEC_UNCORRBLKSL3r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL3r_CLR
#define RX_X4_FEC_UNCORRBLKSL3r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL3r_SET
#define RX_X4_FEC_UNCORRBLKSL3r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL3r_GET
#define RX_X4_FEC_UNCORRBLKSL3r_UNCORCOUNTL_STREAM3f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL3r_UNCORCOUNTL_STREAM3f_GET
#define RX_X4_FEC_UNCORRBLKSL3r_UNCORCOUNTL_STREAM3f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL3r_UNCORCOUNTL_STREAM3f_SET
#define READ_RX_X4_FEC_UNCORRBLKSL3r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_UNCORRBLKSL3r
#define WRITE_RX_X4_FEC_UNCORRBLKSL3r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_UNCORRBLKSL3r
#define MODIFY_RX_X4_FEC_UNCORRBLKSL3r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_UNCORRBLKSL3r
#define READLN_RX_X4_FEC_UNCORRBLKSL3r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_UNCORRBLKSL3r
#define WRITELN_RX_X4_FEC_UNCORRBLKSL3r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_UNCORRBLKSL3r
#define WRITEALL_RX_X4_FEC_UNCORRBLKSL3r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_UNCORRBLKSL3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_FEC_UNCORRBLKSL4
 * BLOCKS:   RX_X4_STATUS5
 * REGADDR:  0xc1a4
 * DESC:     FEC uncorrected blocks counter for stream 4[15:0]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     UNCORCOUNTL_STREAM4 16 LSB of the uncorrected blocks count for stream 4, clear on read
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL4r (0x0000c1a4 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL4r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_UNCORRBLKSL4.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL4r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_uncorrblksl4[1];
	uint32_t _rx_x4_fec_uncorrblksl4;
} BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL4r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL4r_CLR(r) (r).rx_x4_fec_uncorrblksl4[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL4r_SET(r,d) (r).rx_x4_fec_uncorrblksl4[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL4r_GET(r) (r).rx_x4_fec_uncorrblksl4[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL4r_UNCORCOUNTL_STREAM4f_GET(r) (((r).rx_x4_fec_uncorrblksl4[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL4r_UNCORCOUNTL_STREAM4f_SET(r,f) (r).rx_x4_fec_uncorrblksl4[0]=(((r).rx_x4_fec_uncorrblksl4[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_UNCORRBLKSL4.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_UNCORRBLKSL4r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL4r,(_r._rx_x4_fec_uncorrblksl4))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_UNCORRBLKSL4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL4r,(_r._rx_x4_fec_uncorrblksl4)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_UNCORRBLKSL4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL4r,(_r._rx_x4_fec_uncorrblksl4))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_UNCORRBLKSL4r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_uncorrblksl4))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_UNCORRBLKSL4r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_uncorrblksl4))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_UNCORRBLKSL4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL4r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_uncorrblksl4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_UNCORRBLKSL4r BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL4r
#define RX_X4_FEC_UNCORRBLKSL4r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL4r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL4r_t RX_X4_FEC_UNCORRBLKSL4r_t;
#define RX_X4_FEC_UNCORRBLKSL4r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL4r_CLR
#define RX_X4_FEC_UNCORRBLKSL4r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL4r_SET
#define RX_X4_FEC_UNCORRBLKSL4r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL4r_GET
#define RX_X4_FEC_UNCORRBLKSL4r_UNCORCOUNTL_STREAM4f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL4r_UNCORCOUNTL_STREAM4f_GET
#define RX_X4_FEC_UNCORRBLKSL4r_UNCORCOUNTL_STREAM4f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL4r_UNCORCOUNTL_STREAM4f_SET
#define READ_RX_X4_FEC_UNCORRBLKSL4r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_UNCORRBLKSL4r
#define WRITE_RX_X4_FEC_UNCORRBLKSL4r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_UNCORRBLKSL4r
#define MODIFY_RX_X4_FEC_UNCORRBLKSL4r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_UNCORRBLKSL4r
#define READLN_RX_X4_FEC_UNCORRBLKSL4r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_UNCORRBLKSL4r
#define WRITELN_RX_X4_FEC_UNCORRBLKSL4r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_UNCORRBLKSL4r
#define WRITEALL_RX_X4_FEC_UNCORRBLKSL4r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_UNCORRBLKSL4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSL4r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_FEC_UNCORRBLKSH0
 * BLOCKS:   RX_X4_STATUS5
 * REGADDR:  0xc1a5
 * DESC:     FEC uncorrected blocks counter for stream 0[31:16]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     UNCORCOUNTH_STREAM0 16 MSB of the uncorrected blocks count for stream 0, clear on readContents are latched upon read of uncorCountL
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH0r (0x0000c1a5 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH0r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_UNCORRBLKSH0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH0r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_uncorrblksh0[1];
	uint32_t _rx_x4_fec_uncorrblksh0;
} BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH0r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH0r_CLR(r) (r).rx_x4_fec_uncorrblksh0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH0r_SET(r,d) (r).rx_x4_fec_uncorrblksh0[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH0r_GET(r) (r).rx_x4_fec_uncorrblksh0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH0r_UNCORCOUNTH_STREAM0f_GET(r) (((r).rx_x4_fec_uncorrblksh0[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH0r_UNCORCOUNTH_STREAM0f_SET(r,f) (r).rx_x4_fec_uncorrblksh0[0]=(((r).rx_x4_fec_uncorrblksh0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_UNCORRBLKSH0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_UNCORRBLKSH0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH0r,(_r._rx_x4_fec_uncorrblksh0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_UNCORRBLKSH0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH0r,(_r._rx_x4_fec_uncorrblksh0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_UNCORRBLKSH0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH0r,(_r._rx_x4_fec_uncorrblksh0))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_UNCORRBLKSH0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_uncorrblksh0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_UNCORRBLKSH0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_uncorrblksh0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_UNCORRBLKSH0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_uncorrblksh0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_UNCORRBLKSH0r BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH0r
#define RX_X4_FEC_UNCORRBLKSH0r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH0r_t RX_X4_FEC_UNCORRBLKSH0r_t;
#define RX_X4_FEC_UNCORRBLKSH0r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH0r_CLR
#define RX_X4_FEC_UNCORRBLKSH0r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH0r_SET
#define RX_X4_FEC_UNCORRBLKSH0r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH0r_GET
#define RX_X4_FEC_UNCORRBLKSH0r_UNCORCOUNTH_STREAM0f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH0r_UNCORCOUNTH_STREAM0f_GET
#define RX_X4_FEC_UNCORRBLKSH0r_UNCORCOUNTH_STREAM0f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH0r_UNCORCOUNTH_STREAM0f_SET
#define READ_RX_X4_FEC_UNCORRBLKSH0r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_UNCORRBLKSH0r
#define WRITE_RX_X4_FEC_UNCORRBLKSH0r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_UNCORRBLKSH0r
#define MODIFY_RX_X4_FEC_UNCORRBLKSH0r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_UNCORRBLKSH0r
#define READLN_RX_X4_FEC_UNCORRBLKSH0r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_UNCORRBLKSH0r
#define WRITELN_RX_X4_FEC_UNCORRBLKSH0r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_UNCORRBLKSH0r
#define WRITEALL_RX_X4_FEC_UNCORRBLKSH0r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_UNCORRBLKSH0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_FEC_UNCORRBLKSH1
 * BLOCKS:   RX_X4_STATUS5
 * REGADDR:  0xc1a6
 * DESC:     FEC uncorrected blocks counter for stream 1[31:16]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     UNCORCOUNTH_STREAM1 16 MSB of the uncorrected blocks count for stream 1, clear on readContents are latched upon read of uncorCountL
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH1r (0x0000c1a6 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH1r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_UNCORRBLKSH1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH1r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_uncorrblksh1[1];
	uint32_t _rx_x4_fec_uncorrblksh1;
} BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH1r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH1r_CLR(r) (r).rx_x4_fec_uncorrblksh1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH1r_SET(r,d) (r).rx_x4_fec_uncorrblksh1[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH1r_GET(r) (r).rx_x4_fec_uncorrblksh1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH1r_UNCORCOUNTH_STREAM1f_GET(r) (((r).rx_x4_fec_uncorrblksh1[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH1r_UNCORCOUNTH_STREAM1f_SET(r,f) (r).rx_x4_fec_uncorrblksh1[0]=(((r).rx_x4_fec_uncorrblksh1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_UNCORRBLKSH1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_UNCORRBLKSH1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH1r,(_r._rx_x4_fec_uncorrblksh1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_UNCORRBLKSH1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH1r,(_r._rx_x4_fec_uncorrblksh1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_UNCORRBLKSH1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH1r,(_r._rx_x4_fec_uncorrblksh1))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_UNCORRBLKSH1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_uncorrblksh1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_UNCORRBLKSH1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_uncorrblksh1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_UNCORRBLKSH1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_uncorrblksh1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_UNCORRBLKSH1r BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH1r
#define RX_X4_FEC_UNCORRBLKSH1r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH1r_t RX_X4_FEC_UNCORRBLKSH1r_t;
#define RX_X4_FEC_UNCORRBLKSH1r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH1r_CLR
#define RX_X4_FEC_UNCORRBLKSH1r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH1r_SET
#define RX_X4_FEC_UNCORRBLKSH1r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH1r_GET
#define RX_X4_FEC_UNCORRBLKSH1r_UNCORCOUNTH_STREAM1f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH1r_UNCORCOUNTH_STREAM1f_GET
#define RX_X4_FEC_UNCORRBLKSH1r_UNCORCOUNTH_STREAM1f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH1r_UNCORCOUNTH_STREAM1f_SET
#define READ_RX_X4_FEC_UNCORRBLKSH1r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_UNCORRBLKSH1r
#define WRITE_RX_X4_FEC_UNCORRBLKSH1r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_UNCORRBLKSH1r
#define MODIFY_RX_X4_FEC_UNCORRBLKSH1r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_UNCORRBLKSH1r
#define READLN_RX_X4_FEC_UNCORRBLKSH1r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_UNCORRBLKSH1r
#define WRITELN_RX_X4_FEC_UNCORRBLKSH1r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_UNCORRBLKSH1r
#define WRITEALL_RX_X4_FEC_UNCORRBLKSH1r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_UNCORRBLKSH1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_FEC_UNCORRBLKSH2
 * BLOCKS:   RX_X4_STATUS5
 * REGADDR:  0xc1a7
 * DESC:     FEC uncorrected blocks counter for stream 2[31:16]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     UNCORCOUNTH_STREAM2 16 MSB of the uncorrected blocks count for stream 2, clear on readContents are latched upon read of uncorCountL
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH2r (0x0000c1a7 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_UNCORRBLKSH2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_uncorrblksh2[1];
	uint32_t _rx_x4_fec_uncorrblksh2;
} BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH2r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH2r_CLR(r) (r).rx_x4_fec_uncorrblksh2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH2r_SET(r,d) (r).rx_x4_fec_uncorrblksh2[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH2r_GET(r) (r).rx_x4_fec_uncorrblksh2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH2r_UNCORCOUNTH_STREAM2f_GET(r) (((r).rx_x4_fec_uncorrblksh2[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH2r_UNCORCOUNTH_STREAM2f_SET(r,f) (r).rx_x4_fec_uncorrblksh2[0]=(((r).rx_x4_fec_uncorrblksh2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_UNCORRBLKSH2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_UNCORRBLKSH2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH2r,(_r._rx_x4_fec_uncorrblksh2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_UNCORRBLKSH2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH2r,(_r._rx_x4_fec_uncorrblksh2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_UNCORRBLKSH2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH2r,(_r._rx_x4_fec_uncorrblksh2))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_UNCORRBLKSH2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_uncorrblksh2))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_UNCORRBLKSH2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_uncorrblksh2))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_UNCORRBLKSH2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_uncorrblksh2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_UNCORRBLKSH2r BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH2r
#define RX_X4_FEC_UNCORRBLKSH2r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH2r_t RX_X4_FEC_UNCORRBLKSH2r_t;
#define RX_X4_FEC_UNCORRBLKSH2r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH2r_CLR
#define RX_X4_FEC_UNCORRBLKSH2r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH2r_SET
#define RX_X4_FEC_UNCORRBLKSH2r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH2r_GET
#define RX_X4_FEC_UNCORRBLKSH2r_UNCORCOUNTH_STREAM2f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH2r_UNCORCOUNTH_STREAM2f_GET
#define RX_X4_FEC_UNCORRBLKSH2r_UNCORCOUNTH_STREAM2f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH2r_UNCORCOUNTH_STREAM2f_SET
#define READ_RX_X4_FEC_UNCORRBLKSH2r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_UNCORRBLKSH2r
#define WRITE_RX_X4_FEC_UNCORRBLKSH2r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_UNCORRBLKSH2r
#define MODIFY_RX_X4_FEC_UNCORRBLKSH2r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_UNCORRBLKSH2r
#define READLN_RX_X4_FEC_UNCORRBLKSH2r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_UNCORRBLKSH2r
#define WRITELN_RX_X4_FEC_UNCORRBLKSH2r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_UNCORRBLKSH2r
#define WRITEALL_RX_X4_FEC_UNCORRBLKSH2r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_UNCORRBLKSH2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_FEC_UNCORRBLKSH3
 * BLOCKS:   RX_X4_STATUS5
 * REGADDR:  0xc1a8
 * DESC:     FEC uncorrected blocks counter for stream 3[31:16]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     UNCORCOUNTH_STREAM3 16 MSB of the uncorrected blocks count for stream 3, clear on readContents are latched upon read of uncorCountL
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH3r (0x0000c1a8 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH3r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_UNCORRBLKSH3.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH3r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_uncorrblksh3[1];
	uint32_t _rx_x4_fec_uncorrblksh3;
} BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH3r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH3r_CLR(r) (r).rx_x4_fec_uncorrblksh3[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH3r_SET(r,d) (r).rx_x4_fec_uncorrblksh3[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH3r_GET(r) (r).rx_x4_fec_uncorrblksh3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH3r_UNCORCOUNTH_STREAM3f_GET(r) (((r).rx_x4_fec_uncorrblksh3[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH3r_UNCORCOUNTH_STREAM3f_SET(r,f) (r).rx_x4_fec_uncorrblksh3[0]=(((r).rx_x4_fec_uncorrblksh3[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_UNCORRBLKSH3.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_UNCORRBLKSH3r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH3r,(_r._rx_x4_fec_uncorrblksh3))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_UNCORRBLKSH3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH3r,(_r._rx_x4_fec_uncorrblksh3)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_UNCORRBLKSH3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH3r,(_r._rx_x4_fec_uncorrblksh3))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_UNCORRBLKSH3r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_uncorrblksh3))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_UNCORRBLKSH3r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_uncorrblksh3))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_UNCORRBLKSH3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH3r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_uncorrblksh3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_UNCORRBLKSH3r BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH3r
#define RX_X4_FEC_UNCORRBLKSH3r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH3r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH3r_t RX_X4_FEC_UNCORRBLKSH3r_t;
#define RX_X4_FEC_UNCORRBLKSH3r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH3r_CLR
#define RX_X4_FEC_UNCORRBLKSH3r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH3r_SET
#define RX_X4_FEC_UNCORRBLKSH3r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH3r_GET
#define RX_X4_FEC_UNCORRBLKSH3r_UNCORCOUNTH_STREAM3f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH3r_UNCORCOUNTH_STREAM3f_GET
#define RX_X4_FEC_UNCORRBLKSH3r_UNCORCOUNTH_STREAM3f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH3r_UNCORCOUNTH_STREAM3f_SET
#define READ_RX_X4_FEC_UNCORRBLKSH3r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_UNCORRBLKSH3r
#define WRITE_RX_X4_FEC_UNCORRBLKSH3r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_UNCORRBLKSH3r
#define MODIFY_RX_X4_FEC_UNCORRBLKSH3r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_UNCORRBLKSH3r
#define READLN_RX_X4_FEC_UNCORRBLKSH3r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_UNCORRBLKSH3r
#define WRITELN_RX_X4_FEC_UNCORRBLKSH3r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_UNCORRBLKSH3r
#define WRITEALL_RX_X4_FEC_UNCORRBLKSH3r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_UNCORRBLKSH3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_FEC_UNCORRBLKSH4
 * BLOCKS:   RX_X4_STATUS5
 * REGADDR:  0xc1a9
 * DESC:     FEC uncorrected blocks counter for stream 4[31:16]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     UNCORCOUNTH_STREAM4 16 MSB of the uncorrected blocks count for stream 4, clear on readContents are latched upon read of uncorCountL
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH4r (0x0000c1a9 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH4r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_UNCORRBLKSH4.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH4r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_uncorrblksh4[1];
	uint32_t _rx_x4_fec_uncorrblksh4;
} BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH4r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH4r_CLR(r) (r).rx_x4_fec_uncorrblksh4[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH4r_SET(r,d) (r).rx_x4_fec_uncorrblksh4[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH4r_GET(r) (r).rx_x4_fec_uncorrblksh4[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH4r_UNCORCOUNTH_STREAM4f_GET(r) (((r).rx_x4_fec_uncorrblksh4[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH4r_UNCORCOUNTH_STREAM4f_SET(r,f) (r).rx_x4_fec_uncorrblksh4[0]=(((r).rx_x4_fec_uncorrblksh4[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_UNCORRBLKSH4.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_UNCORRBLKSH4r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH4r,(_r._rx_x4_fec_uncorrblksh4))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_UNCORRBLKSH4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH4r,(_r._rx_x4_fec_uncorrblksh4)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_UNCORRBLKSH4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH4r,(_r._rx_x4_fec_uncorrblksh4))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_UNCORRBLKSH4r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_uncorrblksh4))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_UNCORRBLKSH4r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_uncorrblksh4))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_UNCORRBLKSH4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH4r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_uncorrblksh4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_UNCORRBLKSH4r BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH4r
#define RX_X4_FEC_UNCORRBLKSH4r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH4r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH4r_t RX_X4_FEC_UNCORRBLKSH4r_t;
#define RX_X4_FEC_UNCORRBLKSH4r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH4r_CLR
#define RX_X4_FEC_UNCORRBLKSH4r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH4r_SET
#define RX_X4_FEC_UNCORRBLKSH4r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH4r_GET
#define RX_X4_FEC_UNCORRBLKSH4r_UNCORCOUNTH_STREAM4f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH4r_UNCORCOUNTH_STREAM4f_GET
#define RX_X4_FEC_UNCORRBLKSH4r_UNCORCOUNTH_STREAM4f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH4r_UNCORCOUNTH_STREAM4f_SET
#define READ_RX_X4_FEC_UNCORRBLKSH4r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_UNCORRBLKSH4r
#define WRITE_RX_X4_FEC_UNCORRBLKSH4r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_UNCORRBLKSH4r
#define MODIFY_RX_X4_FEC_UNCORRBLKSH4r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_UNCORRBLKSH4r
#define READLN_RX_X4_FEC_UNCORRBLKSH4r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_UNCORRBLKSH4r
#define WRITELN_RX_X4_FEC_UNCORRBLKSH4r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_UNCORRBLKSH4r
#define WRITEALL_RX_X4_FEC_UNCORRBLKSH4r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_UNCORRBLKSH4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORRBLKSH4r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X4_CL73_CFG
 * BLOCKS:   AN_X4_ABILITIES
 * REGADDR:  0xc1c0
 * DESC:     CL73 Auto Neg Config Reg
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL73_AN_RESTART  CL73 Auto-Negotiation RestartA transition from zero to one on this bit will restart CL73 AN
 *     AD_TO_CL73_EN    When doing HP auto neg, if the other device is doing CL73 auto neg, then restart auto neg in CL73 mode.
 *     BAM_TO_HPAM_AD_EN Broadcom to Hewlett-Packard Auto-Detect EnableWhen doing Broadcom CL73 auto-negotioation, if the other device is doingHewlett-Packard auto-negotiation, then restart auto-negotiation in.Hewlett-Packard mode.
 *     CL73_NONCE_MATCH_VAL Clause 73 nonce match value
 *     CL73_NONCE_MATCH_OVER Clause 73 nonce match over-ride
 *     CL73_ENABLE      IEEE CL73 Auto-Negotiation Mode Enable
 *     CL73_HPAM_ENABLE Hewlett-Packard Auto-Negotiation Mode EnableIf both Broadcom CL73 and Hewlett Packard modes are enabled, then the local device will start in Broadcom CL73 mode.
 *     CL73_BAM_ENABLE  Broadcom CL73 Auto-Negotiation Mode Enable
 *     NUM_ADVERTISED_LANES Defines the number of lanes that are available via the advertised pagesSW must set this field before enabling AN0: one lane1: two lanes2: four lanes3: 10 lanes
 *     DISABLE_REMOTE_FAULT Disable the Remote Fault Reporting
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr (0x0000c1c0 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_CL73_CFG.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr_s {
	uint32_t v[1];
	uint32_t an_x4_cl73_cfg[1];
	uint32_t _an_x4_cl73_cfg;
} BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr_CLR(r) (r).an_x4_cl73_cfg[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr_SET(r,d) (r).an_x4_cl73_cfg[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr_GET(r) (r).an_x4_cl73_cfg[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr_DISABLE_REMOTE_FAULTf_GET(r) ((((r).an_x4_cl73_cfg[0]) >> 13) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr_DISABLE_REMOTE_FAULTf_SET(r,f) (r).an_x4_cl73_cfg[0]=(((r).an_x4_cl73_cfg[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr_NUM_ADVERTISED_LANESf_GET(r) ((((r).an_x4_cl73_cfg[0]) >> 11) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr_NUM_ADVERTISED_LANESf_SET(r,f) (r).an_x4_cl73_cfg[0]=(((r).an_x4_cl73_cfg[0] & ~((uint32_t)0x3 << 11)) | ((((uint32_t)f) & 0x3) << 11)) | (3 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr_CL73_BAM_ENABLEf_GET(r) ((((r).an_x4_cl73_cfg[0]) >> 10) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr_CL73_BAM_ENABLEf_SET(r,f) (r).an_x4_cl73_cfg[0]=(((r).an_x4_cl73_cfg[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr_CL73_HPAM_ENABLEf_GET(r) ((((r).an_x4_cl73_cfg[0]) >> 9) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr_CL73_HPAM_ENABLEf_SET(r,f) (r).an_x4_cl73_cfg[0]=(((r).an_x4_cl73_cfg[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr_CL73_ENABLEf_GET(r) ((((r).an_x4_cl73_cfg[0]) >> 8) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr_CL73_ENABLEf_SET(r,f) (r).an_x4_cl73_cfg[0]=(((r).an_x4_cl73_cfg[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr_CL73_NONCE_MATCH_OVERf_GET(r) ((((r).an_x4_cl73_cfg[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr_CL73_NONCE_MATCH_OVERf_SET(r,f) (r).an_x4_cl73_cfg[0]=(((r).an_x4_cl73_cfg[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr_CL73_NONCE_MATCH_VALf_GET(r) ((((r).an_x4_cl73_cfg[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr_CL73_NONCE_MATCH_VALf_SET(r,f) (r).an_x4_cl73_cfg[0]=(((r).an_x4_cl73_cfg[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr_BAM_TO_HPAM_AD_ENf_GET(r) ((((r).an_x4_cl73_cfg[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr_BAM_TO_HPAM_AD_ENf_SET(r,f) (r).an_x4_cl73_cfg[0]=(((r).an_x4_cl73_cfg[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr_AD_TO_CL73_ENf_GET(r) ((((r).an_x4_cl73_cfg[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr_AD_TO_CL73_ENf_SET(r,f) (r).an_x4_cl73_cfg[0]=(((r).an_x4_cl73_cfg[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr_CL73_AN_RESTARTf_GET(r) (((r).an_x4_cl73_cfg[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr_CL73_AN_RESTARTf_SET(r,f) (r).an_x4_cl73_cfg[0]=(((r).an_x4_cl73_cfg[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AN_X4_CL73_CFG.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X4_CL73_CFGr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr,(_r._an_x4_cl73_cfg))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_CL73_CFGr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr,(_r._an_x4_cl73_cfg)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_CL73_CFGr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr,(_r._an_x4_cl73_cfg))
#define BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_CL73_CFGr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_cl73_cfg))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_CL73_CFGr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_cl73_cfg))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_CL73_CFGr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_cl73_cfg))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_CL73_CFGr BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr
#define AN_X4_CL73_CFGr_SIZE BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr_t AN_X4_CL73_CFGr_t;
#define AN_X4_CL73_CFGr_CLR BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr_CLR
#define AN_X4_CL73_CFGr_SET BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr_SET
#define AN_X4_CL73_CFGr_GET BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr_GET
#define AN_X4_CL73_CFGr_DISABLE_REMOTE_FAULTf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr_DISABLE_REMOTE_FAULTf_GET
#define AN_X4_CL73_CFGr_DISABLE_REMOTE_FAULTf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr_DISABLE_REMOTE_FAULTf_SET
#define AN_X4_CL73_CFGr_NUM_ADVERTISED_LANESf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr_NUM_ADVERTISED_LANESf_GET
#define AN_X4_CL73_CFGr_NUM_ADVERTISED_LANESf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr_NUM_ADVERTISED_LANESf_SET
#define AN_X4_CL73_CFGr_CL73_BAM_ENABLEf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr_CL73_BAM_ENABLEf_GET
#define AN_X4_CL73_CFGr_CL73_BAM_ENABLEf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr_CL73_BAM_ENABLEf_SET
#define AN_X4_CL73_CFGr_CL73_HPAM_ENABLEf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr_CL73_HPAM_ENABLEf_GET
#define AN_X4_CL73_CFGr_CL73_HPAM_ENABLEf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr_CL73_HPAM_ENABLEf_SET
#define AN_X4_CL73_CFGr_CL73_ENABLEf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr_CL73_ENABLEf_GET
#define AN_X4_CL73_CFGr_CL73_ENABLEf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr_CL73_ENABLEf_SET
#define AN_X4_CL73_CFGr_CL73_NONCE_MATCH_OVERf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr_CL73_NONCE_MATCH_OVERf_GET
#define AN_X4_CL73_CFGr_CL73_NONCE_MATCH_OVERf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr_CL73_NONCE_MATCH_OVERf_SET
#define AN_X4_CL73_CFGr_CL73_NONCE_MATCH_VALf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr_CL73_NONCE_MATCH_VALf_GET
#define AN_X4_CL73_CFGr_CL73_NONCE_MATCH_VALf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr_CL73_NONCE_MATCH_VALf_SET
#define AN_X4_CL73_CFGr_BAM_TO_HPAM_AD_ENf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr_BAM_TO_HPAM_AD_ENf_GET
#define AN_X4_CL73_CFGr_BAM_TO_HPAM_AD_ENf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr_BAM_TO_HPAM_AD_ENf_SET
#define AN_X4_CL73_CFGr_AD_TO_CL73_ENf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr_AD_TO_CL73_ENf_GET
#define AN_X4_CL73_CFGr_AD_TO_CL73_ENf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr_AD_TO_CL73_ENf_SET
#define AN_X4_CL73_CFGr_CL73_AN_RESTARTf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr_CL73_AN_RESTARTf_GET
#define AN_X4_CL73_CFGr_CL73_AN_RESTARTf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr_CL73_AN_RESTARTf_SET
#define READ_AN_X4_CL73_CFGr BCMI_TSCF_GEN3_XGXS_READ_AN_X4_CL73_CFGr
#define WRITE_AN_X4_CL73_CFGr BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_CL73_CFGr
#define MODIFY_AN_X4_CL73_CFGr BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_CL73_CFGr
#define READLN_AN_X4_CL73_CFGr BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_CL73_CFGr
#define WRITELN_AN_X4_CL73_CFGr BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_CL73_CFGr
#define WRITEALL_AN_X4_CL73_CFGr BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_CL73_CFGr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CFGr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X4_LD_UP1_ABIL0
 * BLOCKS:   AN_X4_ABILITIES
 * REGADDR:  0xc1c1
 * DESC:     Local Device UP1 ABILITIES REG 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BAM_20G_KR2      UP1 Page Bit 16
 *     BAM_20G_CR2      UP1 Page Bit 17
 *     BAM_40G_KR2      UP1 Page Bit 22
 *     BAM_40G_CR2      UP1 Page Bit 23
 *     BAM_50G_KR2      UP1 Page Bit 24
 *     BAM_50G_CR2      UP1 Page Bit 25
 *     BAM_50G_KR4      UP1 Page Bit 32
 *     BAM_50G_CR4      UP1 Page Bit 33
 *     BAM_HG2          Hi Gig Mode
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r (0x0000c1c1 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_LD_UP1_ABIL0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r_s {
	uint32_t v[1];
	uint32_t an_x4_ld_up1_abil0[1];
	uint32_t _an_x4_ld_up1_abil0;
} BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r_CLR(r) (r).an_x4_ld_up1_abil0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r_SET(r,d) (r).an_x4_ld_up1_abil0[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r_GET(r) (r).an_x4_ld_up1_abil0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r_BAM_HG2f_GET(r) ((((r).an_x4_ld_up1_abil0[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r_BAM_HG2f_SET(r,f) (r).an_x4_ld_up1_abil0[0]=(((r).an_x4_ld_up1_abil0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r_BAM_50G_CR4f_GET(r) ((((r).an_x4_ld_up1_abil0[0]) >> 9) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r_BAM_50G_CR4f_SET(r,f) (r).an_x4_ld_up1_abil0[0]=(((r).an_x4_ld_up1_abil0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r_BAM_50G_KR4f_GET(r) ((((r).an_x4_ld_up1_abil0[0]) >> 8) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r_BAM_50G_KR4f_SET(r,f) (r).an_x4_ld_up1_abil0[0]=(((r).an_x4_ld_up1_abil0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r_BAM_50G_CR2f_GET(r) ((((r).an_x4_ld_up1_abil0[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r_BAM_50G_CR2f_SET(r,f) (r).an_x4_ld_up1_abil0[0]=(((r).an_x4_ld_up1_abil0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r_BAM_50G_KR2f_GET(r) ((((r).an_x4_ld_up1_abil0[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r_BAM_50G_KR2f_SET(r,f) (r).an_x4_ld_up1_abil0[0]=(((r).an_x4_ld_up1_abil0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r_BAM_40G_CR2f_GET(r) ((((r).an_x4_ld_up1_abil0[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r_BAM_40G_CR2f_SET(r,f) (r).an_x4_ld_up1_abil0[0]=(((r).an_x4_ld_up1_abil0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r_BAM_40G_KR2f_GET(r) ((((r).an_x4_ld_up1_abil0[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r_BAM_40G_KR2f_SET(r,f) (r).an_x4_ld_up1_abil0[0]=(((r).an_x4_ld_up1_abil0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r_BAM_20G_CR2f_GET(r) ((((r).an_x4_ld_up1_abil0[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r_BAM_20G_CR2f_SET(r,f) (r).an_x4_ld_up1_abil0[0]=(((r).an_x4_ld_up1_abil0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r_BAM_20G_KR2f_GET(r) (((r).an_x4_ld_up1_abil0[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r_BAM_20G_KR2f_SET(r,f) (r).an_x4_ld_up1_abil0[0]=(((r).an_x4_ld_up1_abil0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AN_X4_LD_UP1_ABIL0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X4_LD_UP1_ABIL0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r,(_r._an_x4_ld_up1_abil0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_LD_UP1_ABIL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r,(_r._an_x4_ld_up1_abil0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_LD_UP1_ABIL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r,(_r._an_x4_ld_up1_abil0))
#define BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_LD_UP1_ABIL0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_up1_abil0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_LD_UP1_ABIL0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_up1_abil0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_LD_UP1_ABIL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_ld_up1_abil0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_LD_UP1_ABIL0r BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r
#define AN_X4_LD_UP1_ABIL0r_SIZE BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r_t AN_X4_LD_UP1_ABIL0r_t;
#define AN_X4_LD_UP1_ABIL0r_CLR BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r_CLR
#define AN_X4_LD_UP1_ABIL0r_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r_SET
#define AN_X4_LD_UP1_ABIL0r_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r_GET
#define AN_X4_LD_UP1_ABIL0r_BAM_HG2f_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r_BAM_HG2f_GET
#define AN_X4_LD_UP1_ABIL0r_BAM_HG2f_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r_BAM_HG2f_SET
#define AN_X4_LD_UP1_ABIL0r_BAM_50G_CR4f_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r_BAM_50G_CR4f_GET
#define AN_X4_LD_UP1_ABIL0r_BAM_50G_CR4f_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r_BAM_50G_CR4f_SET
#define AN_X4_LD_UP1_ABIL0r_BAM_50G_KR4f_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r_BAM_50G_KR4f_GET
#define AN_X4_LD_UP1_ABIL0r_BAM_50G_KR4f_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r_BAM_50G_KR4f_SET
#define AN_X4_LD_UP1_ABIL0r_BAM_50G_CR2f_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r_BAM_50G_CR2f_GET
#define AN_X4_LD_UP1_ABIL0r_BAM_50G_CR2f_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r_BAM_50G_CR2f_SET
#define AN_X4_LD_UP1_ABIL0r_BAM_50G_KR2f_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r_BAM_50G_KR2f_GET
#define AN_X4_LD_UP1_ABIL0r_BAM_50G_KR2f_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r_BAM_50G_KR2f_SET
#define AN_X4_LD_UP1_ABIL0r_BAM_40G_CR2f_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r_BAM_40G_CR2f_GET
#define AN_X4_LD_UP1_ABIL0r_BAM_40G_CR2f_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r_BAM_40G_CR2f_SET
#define AN_X4_LD_UP1_ABIL0r_BAM_40G_KR2f_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r_BAM_40G_KR2f_GET
#define AN_X4_LD_UP1_ABIL0r_BAM_40G_KR2f_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r_BAM_40G_KR2f_SET
#define AN_X4_LD_UP1_ABIL0r_BAM_20G_CR2f_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r_BAM_20G_CR2f_GET
#define AN_X4_LD_UP1_ABIL0r_BAM_20G_CR2f_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r_BAM_20G_CR2f_SET
#define AN_X4_LD_UP1_ABIL0r_BAM_20G_KR2f_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r_BAM_20G_KR2f_GET
#define AN_X4_LD_UP1_ABIL0r_BAM_20G_KR2f_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r_BAM_20G_KR2f_SET
#define READ_AN_X4_LD_UP1_ABIL0r BCMI_TSCF_GEN3_XGXS_READ_AN_X4_LD_UP1_ABIL0r
#define WRITE_AN_X4_LD_UP1_ABIL0r BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_LD_UP1_ABIL0r
#define MODIFY_AN_X4_LD_UP1_ABIL0r BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_LD_UP1_ABIL0r
#define READLN_AN_X4_LD_UP1_ABIL0r BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_LD_UP1_ABIL0r
#define WRITELN_AN_X4_LD_UP1_ABIL0r BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_LD_UP1_ABIL0r
#define WRITEALL_AN_X4_LD_UP1_ABIL0r BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_LD_UP1_ABIL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X4_LD_UP1_ABIL1
 * BLOCKS:   AN_X4_ABILITIES
 * REGADDR:  0xc1c2
 * DESC:     Local Device UP1 ABILITIES REG 1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BAM_20G_KR1      UP1 Page Bit 18
 *     BAM_20G_CR1      UP1 Page Bit 19
 *     BAM_25G_KR1      UP1 Page Bit 20
 *     BAM_25G_CR1      UP1 Page Bit 21
 *     CL91_REQ         UP1 Page Bit 43 and 40 for CL91 requested and enable for 25/50G upper bit is for request of CL91 and lower is to enable LD'c CL91
 *     CL74_REQ         UP1 Page Bit 44 and 41 for CL74 requested and enable for 25/50G upper bit is for request of CL74 and lower is to enable LD'c CL74
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL1r (0x0000c1c2 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL1r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_LD_UP1_ABIL1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL1r_s {
	uint32_t v[1];
	uint32_t an_x4_ld_up1_abil1[1];
	uint32_t _an_x4_ld_up1_abil1;
} BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL1r_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL1r_CLR(r) (r).an_x4_ld_up1_abil1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL1r_SET(r,d) (r).an_x4_ld_up1_abil1[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL1r_GET(r) (r).an_x4_ld_up1_abil1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL1r_CL74_REQf_GET(r) ((((r).an_x4_ld_up1_abil1[0]) >> 14) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL1r_CL74_REQf_SET(r,f) (r).an_x4_ld_up1_abil1[0]=(((r).an_x4_ld_up1_abil1[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL1r_CL91_REQf_GET(r) ((((r).an_x4_ld_up1_abil1[0]) >> 12) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL1r_CL91_REQf_SET(r,f) (r).an_x4_ld_up1_abil1[0]=(((r).an_x4_ld_up1_abil1[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12)) | (3 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL1r_BAM_25G_CR1f_GET(r) ((((r).an_x4_ld_up1_abil1[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL1r_BAM_25G_CR1f_SET(r,f) (r).an_x4_ld_up1_abil1[0]=(((r).an_x4_ld_up1_abil1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL1r_BAM_25G_KR1f_GET(r) ((((r).an_x4_ld_up1_abil1[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL1r_BAM_25G_KR1f_SET(r,f) (r).an_x4_ld_up1_abil1[0]=(((r).an_x4_ld_up1_abil1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL1r_BAM_20G_CR1f_GET(r) ((((r).an_x4_ld_up1_abil1[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL1r_BAM_20G_CR1f_SET(r,f) (r).an_x4_ld_up1_abil1[0]=(((r).an_x4_ld_up1_abil1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL1r_BAM_20G_KR1f_GET(r) ((((r).an_x4_ld_up1_abil1[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL1r_BAM_20G_KR1f_SET(r,f) (r).an_x4_ld_up1_abil1[0]=(((r).an_x4_ld_up1_abil1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))

/*
 * These macros can be used to access AN_X4_LD_UP1_ABIL1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X4_LD_UP1_ABIL1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL1r,(_r._an_x4_ld_up1_abil1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_LD_UP1_ABIL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL1r,(_r._an_x4_ld_up1_abil1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_LD_UP1_ABIL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL1r,(_r._an_x4_ld_up1_abil1))
#define BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_LD_UP1_ABIL1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_up1_abil1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_LD_UP1_ABIL1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_up1_abil1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_LD_UP1_ABIL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_ld_up1_abil1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_LD_UP1_ABIL1r BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL1r
#define AN_X4_LD_UP1_ABIL1r_SIZE BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL1r_t AN_X4_LD_UP1_ABIL1r_t;
#define AN_X4_LD_UP1_ABIL1r_CLR BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL1r_CLR
#define AN_X4_LD_UP1_ABIL1r_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL1r_SET
#define AN_X4_LD_UP1_ABIL1r_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL1r_GET
#define AN_X4_LD_UP1_ABIL1r_CL74_REQf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL1r_CL74_REQf_GET
#define AN_X4_LD_UP1_ABIL1r_CL74_REQf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL1r_CL74_REQf_SET
#define AN_X4_LD_UP1_ABIL1r_CL91_REQf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL1r_CL91_REQf_GET
#define AN_X4_LD_UP1_ABIL1r_CL91_REQf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL1r_CL91_REQf_SET
#define AN_X4_LD_UP1_ABIL1r_BAM_25G_CR1f_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL1r_BAM_25G_CR1f_GET
#define AN_X4_LD_UP1_ABIL1r_BAM_25G_CR1f_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL1r_BAM_25G_CR1f_SET
#define AN_X4_LD_UP1_ABIL1r_BAM_25G_KR1f_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL1r_BAM_25G_KR1f_GET
#define AN_X4_LD_UP1_ABIL1r_BAM_25G_KR1f_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL1r_BAM_25G_KR1f_SET
#define AN_X4_LD_UP1_ABIL1r_BAM_20G_CR1f_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL1r_BAM_20G_CR1f_GET
#define AN_X4_LD_UP1_ABIL1r_BAM_20G_CR1f_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL1r_BAM_20G_CR1f_SET
#define AN_X4_LD_UP1_ABIL1r_BAM_20G_KR1f_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL1r_BAM_20G_KR1f_GET
#define AN_X4_LD_UP1_ABIL1r_BAM_20G_KR1f_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL1r_BAM_20G_KR1f_SET
#define READ_AN_X4_LD_UP1_ABIL1r BCMI_TSCF_GEN3_XGXS_READ_AN_X4_LD_UP1_ABIL1r
#define WRITE_AN_X4_LD_UP1_ABIL1r BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_LD_UP1_ABIL1r
#define MODIFY_AN_X4_LD_UP1_ABIL1r BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_LD_UP1_ABIL1r
#define READLN_AN_X4_LD_UP1_ABIL1r BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_LD_UP1_ABIL1r
#define WRITELN_AN_X4_LD_UP1_ABIL1r BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_LD_UP1_ABIL1r
#define WRITEALL_AN_X4_LD_UP1_ABIL1r BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_LD_UP1_ABIL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X4_LD_UP1_ABIL1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X4_LD_BASE_ABIL0
 * BLOCKS:   AN_X4_ABILITIES
 * REGADDR:  0xc1c3
 * DESC:     Local Device BASE ABILITIES REG 0
 * RESETVAL: 0x2a1 (673)
 * ACCESS:   R/W
 * FIELDS:
 *     CL73_BASE_SELECTOR IEEE Annex 28A Message SelectorSent in CL73 base page.
 *     TX_NONCE         First CL73 nonce to be transmitted.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL0r (0x0000c1c3 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL0r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_LD_BASE_ABIL0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL0r_s {
	uint32_t v[1];
	uint32_t an_x4_ld_base_abil0[1];
	uint32_t _an_x4_ld_base_abil0;
} BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL0r_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL0r_CLR(r) (r).an_x4_ld_base_abil0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL0r_SET(r,d) (r).an_x4_ld_base_abil0[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL0r_GET(r) (r).an_x4_ld_base_abil0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL0r_TX_NONCEf_GET(r) ((((r).an_x4_ld_base_abil0[0]) >> 5) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL0r_TX_NONCEf_SET(r,f) (r).an_x4_ld_base_abil0[0]=(((r).an_x4_ld_base_abil0[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5)) | (31 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL0r_CL73_BASE_SELECTORf_GET(r) (((r).an_x4_ld_base_abil0[0]) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL0r_CL73_BASE_SELECTORf_SET(r,f) (r).an_x4_ld_base_abil0[0]=(((r).an_x4_ld_base_abil0[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access AN_X4_LD_BASE_ABIL0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X4_LD_BASE_ABIL0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL0r,(_r._an_x4_ld_base_abil0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_LD_BASE_ABIL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL0r,(_r._an_x4_ld_base_abil0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_LD_BASE_ABIL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL0r,(_r._an_x4_ld_base_abil0))
#define BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_LD_BASE_ABIL0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_base_abil0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_LD_BASE_ABIL0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_base_abil0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_LD_BASE_ABIL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_ld_base_abil0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_LD_BASE_ABIL0r BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL0r
#define AN_X4_LD_BASE_ABIL0r_SIZE BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL0r_t AN_X4_LD_BASE_ABIL0r_t;
#define AN_X4_LD_BASE_ABIL0r_CLR BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL0r_CLR
#define AN_X4_LD_BASE_ABIL0r_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL0r_SET
#define AN_X4_LD_BASE_ABIL0r_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL0r_GET
#define AN_X4_LD_BASE_ABIL0r_TX_NONCEf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL0r_TX_NONCEf_GET
#define AN_X4_LD_BASE_ABIL0r_TX_NONCEf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL0r_TX_NONCEf_SET
#define AN_X4_LD_BASE_ABIL0r_CL73_BASE_SELECTORf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL0r_CL73_BASE_SELECTORf_GET
#define AN_X4_LD_BASE_ABIL0r_CL73_BASE_SELECTORf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL0r_CL73_BASE_SELECTORf_SET
#define READ_AN_X4_LD_BASE_ABIL0r BCMI_TSCF_GEN3_XGXS_READ_AN_X4_LD_BASE_ABIL0r
#define WRITE_AN_X4_LD_BASE_ABIL0r BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_LD_BASE_ABIL0r
#define MODIFY_AN_X4_LD_BASE_ABIL0r BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_LD_BASE_ABIL0r
#define READLN_AN_X4_LD_BASE_ABIL0r BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_LD_BASE_ABIL0r
#define WRITELN_AN_X4_LD_BASE_ABIL0r BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_LD_BASE_ABIL0r
#define WRITEALL_AN_X4_LD_BASE_ABIL0r BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_LD_BASE_ABIL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X4_LD_BASE_ABIL1
 * BLOCKS:   AN_X4_ABILITIES
 * REGADDR:  0xc1c4
 * DESC:     Local Device BASE ABILITIES REG 1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BASE_10G_KR1     Base Page Bit A2
 *     BASE_40G_KR4     Base page Bit A3
 *     BASE_40G_CR4     Base Page Bit A4
 *     BASE_100G_KR4    Base Page Bit A7
 *     BASE_100G_CR4    Base Page Bit A8
 *     BASE_1G_KX1      Base Page Bit A0
 *     CL73_PAUSE       Pause Ability[7:6]
 *     FEC_REQ          Forward Error CorrectionIf neither device requests FEC, then FEC is not done.
 *     NEXT_PAGE        Next Page ability bit.
 *     CL73_REMOTE_FAULT CL73 AN Advertisement Register (7.16.13) Remote Fault field.Specifies whether the Remote Fault field should be set in the CL73 base pages that are transmitted.0 = no fault1 = fault
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r (0x0000c1c4 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_LD_BASE_ABIL1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r_s {
	uint32_t v[1];
	uint32_t an_x4_ld_base_abil1[1];
	uint32_t _an_x4_ld_base_abil1;
} BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r_CLR(r) (r).an_x4_ld_base_abil1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r_SET(r,d) (r).an_x4_ld_base_abil1[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r_GET(r) (r).an_x4_ld_base_abil1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r_CL73_REMOTE_FAULTf_GET(r) ((((r).an_x4_ld_base_abil1[0]) >> 11) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r_CL73_REMOTE_FAULTf_SET(r,f) (r).an_x4_ld_base_abil1[0]=(((r).an_x4_ld_base_abil1[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r_NEXT_PAGEf_GET(r) ((((r).an_x4_ld_base_abil1[0]) >> 10) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r_NEXT_PAGEf_SET(r,f) (r).an_x4_ld_base_abil1[0]=(((r).an_x4_ld_base_abil1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r_FEC_REQf_GET(r) ((((r).an_x4_ld_base_abil1[0]) >> 8) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r_FEC_REQf_SET(r,f) (r).an_x4_ld_base_abil1[0]=(((r).an_x4_ld_base_abil1[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r_CL73_PAUSEf_GET(r) ((((r).an_x4_ld_base_abil1[0]) >> 6) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r_CL73_PAUSEf_SET(r,f) (r).an_x4_ld_base_abil1[0]=(((r).an_x4_ld_base_abil1[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6)) | (3 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r_BASE_1G_KX1f_GET(r) ((((r).an_x4_ld_base_abil1[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r_BASE_1G_KX1f_SET(r,f) (r).an_x4_ld_base_abil1[0]=(((r).an_x4_ld_base_abil1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r_BASE_100G_CR4f_GET(r) ((((r).an_x4_ld_base_abil1[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r_BASE_100G_CR4f_SET(r,f) (r).an_x4_ld_base_abil1[0]=(((r).an_x4_ld_base_abil1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r_BASE_100G_KR4f_GET(r) ((((r).an_x4_ld_base_abil1[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r_BASE_100G_KR4f_SET(r,f) (r).an_x4_ld_base_abil1[0]=(((r).an_x4_ld_base_abil1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r_BASE_40G_CR4f_GET(r) ((((r).an_x4_ld_base_abil1[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r_BASE_40G_CR4f_SET(r,f) (r).an_x4_ld_base_abil1[0]=(((r).an_x4_ld_base_abil1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r_BASE_40G_KR4f_GET(r) ((((r).an_x4_ld_base_abil1[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r_BASE_40G_KR4f_SET(r,f) (r).an_x4_ld_base_abil1[0]=(((r).an_x4_ld_base_abil1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r_BASE_10G_KR1f_GET(r) (((r).an_x4_ld_base_abil1[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r_BASE_10G_KR1f_SET(r,f) (r).an_x4_ld_base_abil1[0]=(((r).an_x4_ld_base_abil1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AN_X4_LD_BASE_ABIL1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X4_LD_BASE_ABIL1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r,(_r._an_x4_ld_base_abil1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_LD_BASE_ABIL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r,(_r._an_x4_ld_base_abil1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_LD_BASE_ABIL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r,(_r._an_x4_ld_base_abil1))
#define BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_LD_BASE_ABIL1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_base_abil1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_LD_BASE_ABIL1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_base_abil1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_LD_BASE_ABIL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_ld_base_abil1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_LD_BASE_ABIL1r BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r
#define AN_X4_LD_BASE_ABIL1r_SIZE BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r_t AN_X4_LD_BASE_ABIL1r_t;
#define AN_X4_LD_BASE_ABIL1r_CLR BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r_CLR
#define AN_X4_LD_BASE_ABIL1r_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r_SET
#define AN_X4_LD_BASE_ABIL1r_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r_GET
#define AN_X4_LD_BASE_ABIL1r_CL73_REMOTE_FAULTf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r_CL73_REMOTE_FAULTf_GET
#define AN_X4_LD_BASE_ABIL1r_CL73_REMOTE_FAULTf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r_CL73_REMOTE_FAULTf_SET
#define AN_X4_LD_BASE_ABIL1r_NEXT_PAGEf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r_NEXT_PAGEf_GET
#define AN_X4_LD_BASE_ABIL1r_NEXT_PAGEf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r_NEXT_PAGEf_SET
#define AN_X4_LD_BASE_ABIL1r_FEC_REQf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r_FEC_REQf_GET
#define AN_X4_LD_BASE_ABIL1r_FEC_REQf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r_FEC_REQf_SET
#define AN_X4_LD_BASE_ABIL1r_CL73_PAUSEf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r_CL73_PAUSEf_GET
#define AN_X4_LD_BASE_ABIL1r_CL73_PAUSEf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r_CL73_PAUSEf_SET
#define AN_X4_LD_BASE_ABIL1r_BASE_1G_KX1f_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r_BASE_1G_KX1f_GET
#define AN_X4_LD_BASE_ABIL1r_BASE_1G_KX1f_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r_BASE_1G_KX1f_SET
#define AN_X4_LD_BASE_ABIL1r_BASE_100G_CR4f_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r_BASE_100G_CR4f_GET
#define AN_X4_LD_BASE_ABIL1r_BASE_100G_CR4f_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r_BASE_100G_CR4f_SET
#define AN_X4_LD_BASE_ABIL1r_BASE_100G_KR4f_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r_BASE_100G_KR4f_GET
#define AN_X4_LD_BASE_ABIL1r_BASE_100G_KR4f_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r_BASE_100G_KR4f_SET
#define AN_X4_LD_BASE_ABIL1r_BASE_40G_CR4f_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r_BASE_40G_CR4f_GET
#define AN_X4_LD_BASE_ABIL1r_BASE_40G_CR4f_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r_BASE_40G_CR4f_SET
#define AN_X4_LD_BASE_ABIL1r_BASE_40G_KR4f_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r_BASE_40G_KR4f_GET
#define AN_X4_LD_BASE_ABIL1r_BASE_40G_KR4f_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r_BASE_40G_KR4f_SET
#define AN_X4_LD_BASE_ABIL1r_BASE_10G_KR1f_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r_BASE_10G_KR1f_GET
#define AN_X4_LD_BASE_ABIL1r_BASE_10G_KR1f_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r_BASE_10G_KR1f_SET
#define READ_AN_X4_LD_BASE_ABIL1r BCMI_TSCF_GEN3_XGXS_READ_AN_X4_LD_BASE_ABIL1r
#define WRITE_AN_X4_LD_BASE_ABIL1r BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_LD_BASE_ABIL1r
#define MODIFY_AN_X4_LD_BASE_ABIL1r BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_LD_BASE_ABIL1r
#define READLN_AN_X4_LD_BASE_ABIL1r BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_LD_BASE_ABIL1r
#define WRITELN_AN_X4_LD_BASE_ABIL1r BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_LD_BASE_ABIL1r
#define WRITEALL_AN_X4_LD_BASE_ABIL1r BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_LD_BASE_ABIL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X4_LD_BAM_ABIL
 * BLOCKS:   AN_X4_ABILITIES
 * REGADDR:  0xc1c5
 * DESC:     Local Device BAM ABILITIES
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL73_BAM_CODE    BAM code
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BAM_ABILr (0x0000c1c5 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BAM_ABILr_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_LD_BAM_ABIL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BAM_ABILr_s {
	uint32_t v[1];
	uint32_t an_x4_ld_bam_abil[1];
	uint32_t _an_x4_ld_bam_abil;
} BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BAM_ABILr_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BAM_ABILr_CLR(r) (r).an_x4_ld_bam_abil[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BAM_ABILr_SET(r,d) (r).an_x4_ld_bam_abil[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BAM_ABILr_GET(r) (r).an_x4_ld_bam_abil[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BAM_ABILr_CL73_BAM_CODEf_GET(r) (((r).an_x4_ld_bam_abil[0]) & 0x1ff)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BAM_ABILr_CL73_BAM_CODEf_SET(r,f) (r).an_x4_ld_bam_abil[0]=(((r).an_x4_ld_bam_abil[0] & ~((uint32_t)0x1ff)) | (((uint32_t)f) & 0x1ff)) | (0x1ff << 16)

/*
 * These macros can be used to access AN_X4_LD_BAM_ABIL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X4_LD_BAM_ABILr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BAM_ABILr,(_r._an_x4_ld_bam_abil))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_LD_BAM_ABILr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BAM_ABILr,(_r._an_x4_ld_bam_abil)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_LD_BAM_ABILr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BAM_ABILr,(_r._an_x4_ld_bam_abil))
#define BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_LD_BAM_ABILr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BAM_ABILr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_bam_abil))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_LD_BAM_ABILr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BAM_ABILr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_bam_abil))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_LD_BAM_ABILr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BAM_ABILr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_ld_bam_abil))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_LD_BAM_ABILr BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BAM_ABILr
#define AN_X4_LD_BAM_ABILr_SIZE BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BAM_ABILr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BAM_ABILr_t AN_X4_LD_BAM_ABILr_t;
#define AN_X4_LD_BAM_ABILr_CLR BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BAM_ABILr_CLR
#define AN_X4_LD_BAM_ABILr_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BAM_ABILr_SET
#define AN_X4_LD_BAM_ABILr_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BAM_ABILr_GET
#define AN_X4_LD_BAM_ABILr_CL73_BAM_CODEf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BAM_ABILr_CL73_BAM_CODEf_GET
#define AN_X4_LD_BAM_ABILr_CL73_BAM_CODEf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BAM_ABILr_CL73_BAM_CODEf_SET
#define READ_AN_X4_LD_BAM_ABILr BCMI_TSCF_GEN3_XGXS_READ_AN_X4_LD_BAM_ABILr
#define WRITE_AN_X4_LD_BAM_ABILr BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_LD_BAM_ABILr
#define MODIFY_AN_X4_LD_BAM_ABILr BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_LD_BAM_ABILr
#define READLN_AN_X4_LD_BAM_ABILr BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_LD_BAM_ABILr
#define WRITELN_AN_X4_LD_BAM_ABILr BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_LD_BAM_ABILr
#define WRITEALL_AN_X4_LD_BAM_ABILr BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_LD_BAM_ABILr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BAM_ABILr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X4_CL73_CTLS
 * BLOCKS:   AN_X4_ABILITIES
 * REGADDR:  0xc1c6
 * DESC:     CL73 AN MISC CONTROLS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     PD_2P5G_KX_EN    Setting this bit to 1 enables 2P5G KX Parallel Detect.
 *     PD_KX_EN         Setting this bit to 1 enables 1G KX Parallel Detect.
 *     AN_GOOD_TRAP     Trap the TLA_SEQUENCER in its AN_GOOD state.
 *     AN_GOOD_CHECK_TRAP Trap the TLA_SEQUENCER in its AN_GOOD_CHECK state.
 *     LINKFAILTIMER_DIS Ignore link_fail_inhibit timer.
 *     LINKFAILTIMERQUAL_EN Wait for long enough to link_fail_inhibit_timer to expire.
 *     AN_FAIL_COUNT_LIMIT Number of times AN may retry after AN failureIt indicates the max value of an_fail_count register
 *     AN_OUI_OVERRIDE_HPAM_DET bit 3: require programmable OUI to detect CL73 HP mode
 *     AN_OUI_OVERRIDE_HPAM_ADV bit 2: advertise programmable OUI for CL73 HP mode
 *     AN_OUI_OVERRIDE_BAM73_DET bit 1: require programmable OUI to detect CL73 BAM
 *     AN_OUI_OVERRIDE_BAM73_ADV bit 0: advertise programmable OUI in CL73 BAM
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr (0x0000c1c6 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_CL73_CTLS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_s {
	uint32_t v[1];
	uint32_t an_x4_cl73_ctls[1];
	uint32_t _an_x4_cl73_ctls;
} BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_CLR(r) (r).an_x4_cl73_ctls[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_SET(r,d) (r).an_x4_cl73_ctls[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_GET(r) (r).an_x4_cl73_ctls[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_AN_OUI_OVERRIDE_BAM73_ADVf_GET(r) ((((r).an_x4_cl73_ctls[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_AN_OUI_OVERRIDE_BAM73_ADVf_SET(r,f) (r).an_x4_cl73_ctls[0]=(((r).an_x4_cl73_ctls[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_AN_OUI_OVERRIDE_BAM73_DETf_GET(r) ((((r).an_x4_cl73_ctls[0]) >> 14) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_AN_OUI_OVERRIDE_BAM73_DETf_SET(r,f) (r).an_x4_cl73_ctls[0]=(((r).an_x4_cl73_ctls[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_AN_OUI_OVERRIDE_HPAM_ADVf_GET(r) ((((r).an_x4_cl73_ctls[0]) >> 13) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_AN_OUI_OVERRIDE_HPAM_ADVf_SET(r,f) (r).an_x4_cl73_ctls[0]=(((r).an_x4_cl73_ctls[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_AN_OUI_OVERRIDE_HPAM_DETf_GET(r) ((((r).an_x4_cl73_ctls[0]) >> 12) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_AN_OUI_OVERRIDE_HPAM_DETf_SET(r,f) (r).an_x4_cl73_ctls[0]=(((r).an_x4_cl73_ctls[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_AN_FAIL_COUNT_LIMITf_GET(r) ((((r).an_x4_cl73_ctls[0]) >> 6) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_AN_FAIL_COUNT_LIMITf_SET(r,f) (r).an_x4_cl73_ctls[0]=(((r).an_x4_cl73_ctls[0] & ~((uint32_t)0xf << 6)) | ((((uint32_t)f) & 0xf) << 6)) | (15 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_LINKFAILTIMERQUAL_ENf_GET(r) ((((r).an_x4_cl73_ctls[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_LINKFAILTIMERQUAL_ENf_SET(r,f) (r).an_x4_cl73_ctls[0]=(((r).an_x4_cl73_ctls[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_LINKFAILTIMER_DISf_GET(r) ((((r).an_x4_cl73_ctls[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_LINKFAILTIMER_DISf_SET(r,f) (r).an_x4_cl73_ctls[0]=(((r).an_x4_cl73_ctls[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_AN_GOOD_CHECK_TRAPf_GET(r) ((((r).an_x4_cl73_ctls[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_AN_GOOD_CHECK_TRAPf_SET(r,f) (r).an_x4_cl73_ctls[0]=(((r).an_x4_cl73_ctls[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_AN_GOOD_TRAPf_GET(r) ((((r).an_x4_cl73_ctls[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_AN_GOOD_TRAPf_SET(r,f) (r).an_x4_cl73_ctls[0]=(((r).an_x4_cl73_ctls[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_PD_KX_ENf_GET(r) ((((r).an_x4_cl73_ctls[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_PD_KX_ENf_SET(r,f) (r).an_x4_cl73_ctls[0]=(((r).an_x4_cl73_ctls[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_PD_2P5G_KX_ENf_GET(r) (((r).an_x4_cl73_ctls[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_PD_2P5G_KX_ENf_SET(r,f) (r).an_x4_cl73_ctls[0]=(((r).an_x4_cl73_ctls[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AN_X4_CL73_CTLS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X4_CL73_CTLSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr,(_r._an_x4_cl73_ctls))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_CL73_CTLSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr,(_r._an_x4_cl73_ctls)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_CL73_CTLSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr,(_r._an_x4_cl73_ctls))
#define BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_CL73_CTLSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_cl73_ctls))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_CL73_CTLSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_cl73_ctls))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_CL73_CTLSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_cl73_ctls))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_CL73_CTLSr BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr
#define AN_X4_CL73_CTLSr_SIZE BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_t AN_X4_CL73_CTLSr_t;
#define AN_X4_CL73_CTLSr_CLR BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_CLR
#define AN_X4_CL73_CTLSr_SET BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_SET
#define AN_X4_CL73_CTLSr_GET BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_GET
#define AN_X4_CL73_CTLSr_AN_OUI_OVERRIDE_BAM73_ADVf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_AN_OUI_OVERRIDE_BAM73_ADVf_GET
#define AN_X4_CL73_CTLSr_AN_OUI_OVERRIDE_BAM73_ADVf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_AN_OUI_OVERRIDE_BAM73_ADVf_SET
#define AN_X4_CL73_CTLSr_AN_OUI_OVERRIDE_BAM73_DETf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_AN_OUI_OVERRIDE_BAM73_DETf_GET
#define AN_X4_CL73_CTLSr_AN_OUI_OVERRIDE_BAM73_DETf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_AN_OUI_OVERRIDE_BAM73_DETf_SET
#define AN_X4_CL73_CTLSr_AN_OUI_OVERRIDE_HPAM_ADVf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_AN_OUI_OVERRIDE_HPAM_ADVf_GET
#define AN_X4_CL73_CTLSr_AN_OUI_OVERRIDE_HPAM_ADVf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_AN_OUI_OVERRIDE_HPAM_ADVf_SET
#define AN_X4_CL73_CTLSr_AN_OUI_OVERRIDE_HPAM_DETf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_AN_OUI_OVERRIDE_HPAM_DETf_GET
#define AN_X4_CL73_CTLSr_AN_OUI_OVERRIDE_HPAM_DETf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_AN_OUI_OVERRIDE_HPAM_DETf_SET
#define AN_X4_CL73_CTLSr_AN_FAIL_COUNT_LIMITf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_AN_FAIL_COUNT_LIMITf_GET
#define AN_X4_CL73_CTLSr_AN_FAIL_COUNT_LIMITf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_AN_FAIL_COUNT_LIMITf_SET
#define AN_X4_CL73_CTLSr_LINKFAILTIMERQUAL_ENf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_LINKFAILTIMERQUAL_ENf_GET
#define AN_X4_CL73_CTLSr_LINKFAILTIMERQUAL_ENf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_LINKFAILTIMERQUAL_ENf_SET
#define AN_X4_CL73_CTLSr_LINKFAILTIMER_DISf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_LINKFAILTIMER_DISf_GET
#define AN_X4_CL73_CTLSr_LINKFAILTIMER_DISf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_LINKFAILTIMER_DISf_SET
#define AN_X4_CL73_CTLSr_AN_GOOD_CHECK_TRAPf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_AN_GOOD_CHECK_TRAPf_GET
#define AN_X4_CL73_CTLSr_AN_GOOD_CHECK_TRAPf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_AN_GOOD_CHECK_TRAPf_SET
#define AN_X4_CL73_CTLSr_AN_GOOD_TRAPf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_AN_GOOD_TRAPf_GET
#define AN_X4_CL73_CTLSr_AN_GOOD_TRAPf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_AN_GOOD_TRAPf_SET
#define AN_X4_CL73_CTLSr_PD_KX_ENf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_PD_KX_ENf_GET
#define AN_X4_CL73_CTLSr_PD_KX_ENf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_PD_KX_ENf_SET
#define AN_X4_CL73_CTLSr_PD_2P5G_KX_ENf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_PD_2P5G_KX_ENf_GET
#define AN_X4_CL73_CTLSr_PD_2P5G_KX_ENf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr_PD_2P5G_KX_ENf_SET
#define READ_AN_X4_CL73_CTLSr BCMI_TSCF_GEN3_XGXS_READ_AN_X4_CL73_CTLSr
#define WRITE_AN_X4_CL73_CTLSr BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_CL73_CTLSr
#define MODIFY_AN_X4_CL73_CTLSr BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_CL73_CTLSr
#define READLN_AN_X4_CL73_CTLSr BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_CL73_CTLSr
#define WRITELN_AN_X4_CL73_CTLSr BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_CL73_CTLSr
#define WRITEALL_AN_X4_CL73_CTLSr BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_CL73_CTLSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X4_CL73_CTLSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X4_LD_BASE_ABIL2
 * BLOCKS:   AN_X4_ABILITIES
 * REGADDR:  0xc1c7
 * DESC:     Local Device BASE ABILITIES REG 2
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BASE_50G_CR2_EN  Enable Base page 50G CR2 bit position
 *     BASE_50G_CR2_SEL Base page 50G CR2 bit position
 *     BASE_50G_KR2_EN  Enable Base page 50G KR2 bit position
 *     BASE_50G_KR2_SEL Base page 50G KR2 bit position
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL2r (0x0000c1c7 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_LD_BASE_ABIL2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL2r_s {
	uint32_t v[1];
	uint32_t an_x4_ld_base_abil2[1];
	uint32_t _an_x4_ld_base_abil2;
} BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL2r_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL2r_CLR(r) (r).an_x4_ld_base_abil2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL2r_SET(r,d) (r).an_x4_ld_base_abil2[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL2r_GET(r) (r).an_x4_ld_base_abil2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL2r_BASE_50G_KR2_SELf_GET(r) ((((r).an_x4_ld_base_abil2[0]) >> 7) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL2r_BASE_50G_KR2_SELf_SET(r,f) (r).an_x4_ld_base_abil2[0]=(((r).an_x4_ld_base_abil2[0] & ~((uint32_t)0x1f << 7)) | ((((uint32_t)f) & 0x1f) << 7)) | (31 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL2r_BASE_50G_KR2_ENf_GET(r) ((((r).an_x4_ld_base_abil2[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL2r_BASE_50G_KR2_ENf_SET(r,f) (r).an_x4_ld_base_abil2[0]=(((r).an_x4_ld_base_abil2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL2r_BASE_50G_CR2_SELf_GET(r) ((((r).an_x4_ld_base_abil2[0]) >> 1) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL2r_BASE_50G_CR2_SELf_SET(r,f) (r).an_x4_ld_base_abil2[0]=(((r).an_x4_ld_base_abil2[0] & ~((uint32_t)0x1f << 1)) | ((((uint32_t)f) & 0x1f) << 1)) | (31 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL2r_BASE_50G_CR2_ENf_GET(r) (((r).an_x4_ld_base_abil2[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL2r_BASE_50G_CR2_ENf_SET(r,f) (r).an_x4_ld_base_abil2[0]=(((r).an_x4_ld_base_abil2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AN_X4_LD_BASE_ABIL2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X4_LD_BASE_ABIL2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL2r,(_r._an_x4_ld_base_abil2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_LD_BASE_ABIL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL2r,(_r._an_x4_ld_base_abil2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_LD_BASE_ABIL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL2r,(_r._an_x4_ld_base_abil2))
#define BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_LD_BASE_ABIL2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_base_abil2))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_LD_BASE_ABIL2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_base_abil2))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_LD_BASE_ABIL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_ld_base_abil2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_LD_BASE_ABIL2r BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL2r
#define AN_X4_LD_BASE_ABIL2r_SIZE BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL2r_t AN_X4_LD_BASE_ABIL2r_t;
#define AN_X4_LD_BASE_ABIL2r_CLR BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL2r_CLR
#define AN_X4_LD_BASE_ABIL2r_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL2r_SET
#define AN_X4_LD_BASE_ABIL2r_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL2r_GET
#define AN_X4_LD_BASE_ABIL2r_BASE_50G_KR2_SELf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL2r_BASE_50G_KR2_SELf_GET
#define AN_X4_LD_BASE_ABIL2r_BASE_50G_KR2_SELf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL2r_BASE_50G_KR2_SELf_SET
#define AN_X4_LD_BASE_ABIL2r_BASE_50G_KR2_ENf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL2r_BASE_50G_KR2_ENf_GET
#define AN_X4_LD_BASE_ABIL2r_BASE_50G_KR2_ENf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL2r_BASE_50G_KR2_ENf_SET
#define AN_X4_LD_BASE_ABIL2r_BASE_50G_CR2_SELf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL2r_BASE_50G_CR2_SELf_GET
#define AN_X4_LD_BASE_ABIL2r_BASE_50G_CR2_SELf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL2r_BASE_50G_CR2_SELf_SET
#define AN_X4_LD_BASE_ABIL2r_BASE_50G_CR2_ENf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL2r_BASE_50G_CR2_ENf_GET
#define AN_X4_LD_BASE_ABIL2r_BASE_50G_CR2_ENf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL2r_BASE_50G_CR2_ENf_SET
#define READ_AN_X4_LD_BASE_ABIL2r BCMI_TSCF_GEN3_XGXS_READ_AN_X4_LD_BASE_ABIL2r
#define WRITE_AN_X4_LD_BASE_ABIL2r BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_LD_BASE_ABIL2r
#define MODIFY_AN_X4_LD_BASE_ABIL2r BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_LD_BASE_ABIL2r
#define READLN_AN_X4_LD_BASE_ABIL2r BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_LD_BASE_ABIL2r
#define WRITELN_AN_X4_LD_BASE_ABIL2r BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_LD_BASE_ABIL2r
#define WRITEALL_AN_X4_LD_BASE_ABIL2r BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_LD_BASE_ABIL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X4_LD_BASE_ABIL3
 * BLOCKS:   AN_X4_ABILITIES
 * REGADDR:  0xc1c8
 * DESC:     Local Device BASE ABILITIES REG 3
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BASE_25G_CR1_EN  Enable Base page 25G CR1 bit position
 *     BASE_25G_CR1_SEL Base page 25G CR1 bit position
 *     BASE_25G_KR1_EN  Enable Base page 25G KR1 bit position
 *     BASE_25G_KR1_SEL Base page 25G KR1 bit position
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL3r (0x0000c1c8 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL3r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_LD_BASE_ABIL3.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL3r_s {
	uint32_t v[1];
	uint32_t an_x4_ld_base_abil3[1];
	uint32_t _an_x4_ld_base_abil3;
} BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL3r_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL3r_CLR(r) (r).an_x4_ld_base_abil3[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL3r_SET(r,d) (r).an_x4_ld_base_abil3[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL3r_GET(r) (r).an_x4_ld_base_abil3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL3r_BASE_25G_KR1_SELf_GET(r) ((((r).an_x4_ld_base_abil3[0]) >> 7) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL3r_BASE_25G_KR1_SELf_SET(r,f) (r).an_x4_ld_base_abil3[0]=(((r).an_x4_ld_base_abil3[0] & ~((uint32_t)0x1f << 7)) | ((((uint32_t)f) & 0x1f) << 7)) | (31 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL3r_BASE_25G_KR1_ENf_GET(r) ((((r).an_x4_ld_base_abil3[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL3r_BASE_25G_KR1_ENf_SET(r,f) (r).an_x4_ld_base_abil3[0]=(((r).an_x4_ld_base_abil3[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL3r_BASE_25G_CR1_SELf_GET(r) ((((r).an_x4_ld_base_abil3[0]) >> 1) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL3r_BASE_25G_CR1_SELf_SET(r,f) (r).an_x4_ld_base_abil3[0]=(((r).an_x4_ld_base_abil3[0] & ~((uint32_t)0x1f << 1)) | ((((uint32_t)f) & 0x1f) << 1)) | (31 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL3r_BASE_25G_CR1_ENf_GET(r) (((r).an_x4_ld_base_abil3[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL3r_BASE_25G_CR1_ENf_SET(r,f) (r).an_x4_ld_base_abil3[0]=(((r).an_x4_ld_base_abil3[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AN_X4_LD_BASE_ABIL3.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X4_LD_BASE_ABIL3r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL3r,(_r._an_x4_ld_base_abil3))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_LD_BASE_ABIL3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL3r,(_r._an_x4_ld_base_abil3)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_LD_BASE_ABIL3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL3r,(_r._an_x4_ld_base_abil3))
#define BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_LD_BASE_ABIL3r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_base_abil3))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_LD_BASE_ABIL3r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_base_abil3))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_LD_BASE_ABIL3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL3r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_ld_base_abil3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_LD_BASE_ABIL3r BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL3r
#define AN_X4_LD_BASE_ABIL3r_SIZE BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL3r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL3r_t AN_X4_LD_BASE_ABIL3r_t;
#define AN_X4_LD_BASE_ABIL3r_CLR BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL3r_CLR
#define AN_X4_LD_BASE_ABIL3r_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL3r_SET
#define AN_X4_LD_BASE_ABIL3r_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL3r_GET
#define AN_X4_LD_BASE_ABIL3r_BASE_25G_KR1_SELf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL3r_BASE_25G_KR1_SELf_GET
#define AN_X4_LD_BASE_ABIL3r_BASE_25G_KR1_SELf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL3r_BASE_25G_KR1_SELf_SET
#define AN_X4_LD_BASE_ABIL3r_BASE_25G_KR1_ENf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL3r_BASE_25G_KR1_ENf_GET
#define AN_X4_LD_BASE_ABIL3r_BASE_25G_KR1_ENf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL3r_BASE_25G_KR1_ENf_SET
#define AN_X4_LD_BASE_ABIL3r_BASE_25G_CR1_SELf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL3r_BASE_25G_CR1_SELf_GET
#define AN_X4_LD_BASE_ABIL3r_BASE_25G_CR1_SELf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL3r_BASE_25G_CR1_SELf_SET
#define AN_X4_LD_BASE_ABIL3r_BASE_25G_CR1_ENf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL3r_BASE_25G_CR1_ENf_GET
#define AN_X4_LD_BASE_ABIL3r_BASE_25G_CR1_ENf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL3r_BASE_25G_CR1_ENf_SET
#define READ_AN_X4_LD_BASE_ABIL3r BCMI_TSCF_GEN3_XGXS_READ_AN_X4_LD_BASE_ABIL3r
#define WRITE_AN_X4_LD_BASE_ABIL3r BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_LD_BASE_ABIL3r
#define MODIFY_AN_X4_LD_BASE_ABIL3r BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_LD_BASE_ABIL3r
#define READLN_AN_X4_LD_BASE_ABIL3r BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_LD_BASE_ABIL3r
#define WRITELN_AN_X4_LD_BASE_ABIL3r BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_LD_BASE_ABIL3r
#define WRITEALL_AN_X4_LD_BASE_ABIL3r BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_LD_BASE_ABIL3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X4_LD_BASE_ABIL4
 * BLOCKS:   AN_X4_ABILITIES
 * REGADDR:  0xc1c9
 * DESC:     Local Device BASE ABILITIES REG 4
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BASE_25G_CRS1_EN Enable Base page 25G CR1 bit position
 *     BASE_25G_CRS1_SEL Base page 25G CR1 bit position
 *     BASE_25G_KRS1_EN Enable Base page 25G KR1 bit position
 *     BASE_25G_KRS1_SEL Base page 25G KR1 bit position
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL4r (0x0000c1c9 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL4r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_LD_BASE_ABIL4.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL4r_s {
	uint32_t v[1];
	uint32_t an_x4_ld_base_abil4[1];
	uint32_t _an_x4_ld_base_abil4;
} BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL4r_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL4r_CLR(r) (r).an_x4_ld_base_abil4[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL4r_SET(r,d) (r).an_x4_ld_base_abil4[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL4r_GET(r) (r).an_x4_ld_base_abil4[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL4r_BASE_25G_KRS1_SELf_GET(r) ((((r).an_x4_ld_base_abil4[0]) >> 7) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL4r_BASE_25G_KRS1_SELf_SET(r,f) (r).an_x4_ld_base_abil4[0]=(((r).an_x4_ld_base_abil4[0] & ~((uint32_t)0x1f << 7)) | ((((uint32_t)f) & 0x1f) << 7)) | (31 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL4r_BASE_25G_KRS1_ENf_GET(r) ((((r).an_x4_ld_base_abil4[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL4r_BASE_25G_KRS1_ENf_SET(r,f) (r).an_x4_ld_base_abil4[0]=(((r).an_x4_ld_base_abil4[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL4r_BASE_25G_CRS1_SELf_GET(r) ((((r).an_x4_ld_base_abil4[0]) >> 1) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL4r_BASE_25G_CRS1_SELf_SET(r,f) (r).an_x4_ld_base_abil4[0]=(((r).an_x4_ld_base_abil4[0] & ~((uint32_t)0x1f << 1)) | ((((uint32_t)f) & 0x1f) << 1)) | (31 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL4r_BASE_25G_CRS1_ENf_GET(r) (((r).an_x4_ld_base_abil4[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL4r_BASE_25G_CRS1_ENf_SET(r,f) (r).an_x4_ld_base_abil4[0]=(((r).an_x4_ld_base_abil4[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AN_X4_LD_BASE_ABIL4.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X4_LD_BASE_ABIL4r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL4r,(_r._an_x4_ld_base_abil4))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_LD_BASE_ABIL4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL4r,(_r._an_x4_ld_base_abil4)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_LD_BASE_ABIL4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL4r,(_r._an_x4_ld_base_abil4))
#define BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_LD_BASE_ABIL4r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_base_abil4))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_LD_BASE_ABIL4r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_base_abil4))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_LD_BASE_ABIL4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL4r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_ld_base_abil4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_LD_BASE_ABIL4r BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL4r
#define AN_X4_LD_BASE_ABIL4r_SIZE BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL4r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL4r_t AN_X4_LD_BASE_ABIL4r_t;
#define AN_X4_LD_BASE_ABIL4r_CLR BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL4r_CLR
#define AN_X4_LD_BASE_ABIL4r_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL4r_SET
#define AN_X4_LD_BASE_ABIL4r_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL4r_GET
#define AN_X4_LD_BASE_ABIL4r_BASE_25G_KRS1_SELf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL4r_BASE_25G_KRS1_SELf_GET
#define AN_X4_LD_BASE_ABIL4r_BASE_25G_KRS1_SELf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL4r_BASE_25G_KRS1_SELf_SET
#define AN_X4_LD_BASE_ABIL4r_BASE_25G_KRS1_ENf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL4r_BASE_25G_KRS1_ENf_GET
#define AN_X4_LD_BASE_ABIL4r_BASE_25G_KRS1_ENf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL4r_BASE_25G_KRS1_ENf_SET
#define AN_X4_LD_BASE_ABIL4r_BASE_25G_CRS1_SELf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL4r_BASE_25G_CRS1_SELf_GET
#define AN_X4_LD_BASE_ABIL4r_BASE_25G_CRS1_SELf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL4r_BASE_25G_CRS1_SELf_SET
#define AN_X4_LD_BASE_ABIL4r_BASE_25G_CRS1_ENf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL4r_BASE_25G_CRS1_ENf_GET
#define AN_X4_LD_BASE_ABIL4r_BASE_25G_CRS1_ENf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL4r_BASE_25G_CRS1_ENf_SET
#define READ_AN_X4_LD_BASE_ABIL4r BCMI_TSCF_GEN3_XGXS_READ_AN_X4_LD_BASE_ABIL4r
#define WRITE_AN_X4_LD_BASE_ABIL4r BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_LD_BASE_ABIL4r
#define MODIFY_AN_X4_LD_BASE_ABIL4r BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_LD_BASE_ABIL4r
#define READLN_AN_X4_LD_BASE_ABIL4r BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_LD_BASE_ABIL4r
#define WRITELN_AN_X4_LD_BASE_ABIL4r BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_LD_BASE_ABIL4r
#define WRITEALL_AN_X4_LD_BASE_ABIL4r BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_LD_BASE_ABIL4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL4r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X4_LD_BASE_ABIL5
 * BLOCKS:   AN_X4_ABILITIES
 * REGADDR:  0xc1ca
 * DESC:     Local Device BASE ABILITIES REG 5
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BASE_2P5G_EN     Enable Base page 2.5G bit position and detection from LP
 *     BASE_2P5G_SEL    Base page 2.5G bit position Valid values are 6 thru 24, one of the available bits in the CL73 Base Page Technology Ability FieldValue 6 corresponds to bit D27 and Value 24 corresponds to bit D45 of the CL73 Base Page
 *     BASE_5P0G_EN     Enable Base page 5.0G bit position and detection from LP
 *     BASE_5P0G_SEL    Base page 5.0G bit position.Valid values are 6 thru 24, one of the available bits in the CL73 Base Page Technology Ability FieldValue 6 corresponds to bit D27 and Value 24 corresponds to bit D45 of the CL73 Base Page
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL5r (0x0000c1ca | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL5r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_LD_BASE_ABIL5.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL5r_s {
	uint32_t v[1];
	uint32_t an_x4_ld_base_abil5[1];
	uint32_t _an_x4_ld_base_abil5;
} BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL5r_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL5r_CLR(r) (r).an_x4_ld_base_abil5[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL5r_SET(r,d) (r).an_x4_ld_base_abil5[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL5r_GET(r) (r).an_x4_ld_base_abil5[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL5r_BASE_5P0G_SELf_GET(r) ((((r).an_x4_ld_base_abil5[0]) >> 7) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL5r_BASE_5P0G_SELf_SET(r,f) (r).an_x4_ld_base_abil5[0]=(((r).an_x4_ld_base_abil5[0] & ~((uint32_t)0x1f << 7)) | ((((uint32_t)f) & 0x1f) << 7)) | (31 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL5r_BASE_5P0G_ENf_GET(r) ((((r).an_x4_ld_base_abil5[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL5r_BASE_5P0G_ENf_SET(r,f) (r).an_x4_ld_base_abil5[0]=(((r).an_x4_ld_base_abil5[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL5r_BASE_2P5G_SELf_GET(r) ((((r).an_x4_ld_base_abil5[0]) >> 1) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL5r_BASE_2P5G_SELf_SET(r,f) (r).an_x4_ld_base_abil5[0]=(((r).an_x4_ld_base_abil5[0] & ~((uint32_t)0x1f << 1)) | ((((uint32_t)f) & 0x1f) << 1)) | (31 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL5r_BASE_2P5G_ENf_GET(r) (((r).an_x4_ld_base_abil5[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL5r_BASE_2P5G_ENf_SET(r,f) (r).an_x4_ld_base_abil5[0]=(((r).an_x4_ld_base_abil5[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AN_X4_LD_BASE_ABIL5.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X4_LD_BASE_ABIL5r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL5r,(_r._an_x4_ld_base_abil5))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_LD_BASE_ABIL5r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL5r,(_r._an_x4_ld_base_abil5)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_LD_BASE_ABIL5r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL5r,(_r._an_x4_ld_base_abil5))
#define BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_LD_BASE_ABIL5r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL5r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_base_abil5))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_LD_BASE_ABIL5r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL5r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_base_abil5))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_LD_BASE_ABIL5r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL5r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_ld_base_abil5))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_LD_BASE_ABIL5r BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL5r
#define AN_X4_LD_BASE_ABIL5r_SIZE BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL5r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL5r_t AN_X4_LD_BASE_ABIL5r_t;
#define AN_X4_LD_BASE_ABIL5r_CLR BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL5r_CLR
#define AN_X4_LD_BASE_ABIL5r_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL5r_SET
#define AN_X4_LD_BASE_ABIL5r_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL5r_GET
#define AN_X4_LD_BASE_ABIL5r_BASE_5P0G_SELf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL5r_BASE_5P0G_SELf_GET
#define AN_X4_LD_BASE_ABIL5r_BASE_5P0G_SELf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL5r_BASE_5P0G_SELf_SET
#define AN_X4_LD_BASE_ABIL5r_BASE_5P0G_ENf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL5r_BASE_5P0G_ENf_GET
#define AN_X4_LD_BASE_ABIL5r_BASE_5P0G_ENf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL5r_BASE_5P0G_ENf_SET
#define AN_X4_LD_BASE_ABIL5r_BASE_2P5G_SELf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL5r_BASE_2P5G_SELf_GET
#define AN_X4_LD_BASE_ABIL5r_BASE_2P5G_SELf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL5r_BASE_2P5G_SELf_SET
#define AN_X4_LD_BASE_ABIL5r_BASE_2P5G_ENf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL5r_BASE_2P5G_ENf_GET
#define AN_X4_LD_BASE_ABIL5r_BASE_2P5G_ENf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL5r_BASE_2P5G_ENf_SET
#define READ_AN_X4_LD_BASE_ABIL5r BCMI_TSCF_GEN3_XGXS_READ_AN_X4_LD_BASE_ABIL5r
#define WRITE_AN_X4_LD_BASE_ABIL5r BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_LD_BASE_ABIL5r
#define MODIFY_AN_X4_LD_BASE_ABIL5r BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_LD_BASE_ABIL5r
#define READLN_AN_X4_LD_BASE_ABIL5r BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_LD_BASE_ABIL5r
#define WRITELN_AN_X4_LD_BASE_ABIL5r BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_LD_BASE_ABIL5r
#define WRITEALL_AN_X4_LD_BASE_ABIL5r BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_LD_BASE_ABIL5r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X4_LD_BASE_ABIL5r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X4_LD_FEC_BASEPAGE_ABIL
 * BLOCKS:   AN_X4_ABILITIES
 * REGADDR:  0xc1cb
 * DESC:     Local Device BASE_RS FEC REQ Register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RS_FEC_REQ_EN    Enable Advertisement of RS FEC Request (CL91) for 25G C(K)R(S). 0: Disable, 1: Enable
 *     RS_FEC_REQ_SEL   Advertised position bit in BASE PAGE for RS FEC REQ.AN will keep looking for RS_FEC request from LPif this field is Non-Zero. To stop AN to even look, SW MUSTset this field to 0.
 *     BASE_R_FEC_REQ_EN Enable Advertisement of BASE FEC Request (CL74) for 25G C(K)R(S). 0: Disable, 1: Enable
 *     BASE_R_FEC_REQ_SEL Advertised position bit in BASE PAGE for BASE R FEC REQ.AN will keep looking for BASE_R_FEC request from LPif this field is Non-Zero. To stop AN to even look, SW MUSTset this field to 0.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_FEC_BASEPAGE_ABILr (0x0000c1cb | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_FEC_BASEPAGE_ABILr_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_LD_FEC_BASEPAGE_ABIL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X4_LD_FEC_BASEPAGE_ABILr_s {
	uint32_t v[1];
	uint32_t an_x4_ld_fec_basepage_abil[1];
	uint32_t _an_x4_ld_fec_basepage_abil;
} BCMI_TSCF_GEN3_XGXS_AN_X4_LD_FEC_BASEPAGE_ABILr_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_FEC_BASEPAGE_ABILr_CLR(r) (r).an_x4_ld_fec_basepage_abil[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_FEC_BASEPAGE_ABILr_SET(r,d) (r).an_x4_ld_fec_basepage_abil[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_FEC_BASEPAGE_ABILr_GET(r) (r).an_x4_ld_fec_basepage_abil[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_FEC_BASEPAGE_ABILr_BASE_R_FEC_REQ_SELf_GET(r) ((((r).an_x4_ld_fec_basepage_abil[0]) >> 7) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_FEC_BASEPAGE_ABILr_BASE_R_FEC_REQ_SELf_SET(r,f) (r).an_x4_ld_fec_basepage_abil[0]=(((r).an_x4_ld_fec_basepage_abil[0] & ~((uint32_t)0x1f << 7)) | ((((uint32_t)f) & 0x1f) << 7)) | (31 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_FEC_BASEPAGE_ABILr_BASE_R_FEC_REQ_ENf_GET(r) ((((r).an_x4_ld_fec_basepage_abil[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_FEC_BASEPAGE_ABILr_BASE_R_FEC_REQ_ENf_SET(r,f) (r).an_x4_ld_fec_basepage_abil[0]=(((r).an_x4_ld_fec_basepage_abil[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_FEC_BASEPAGE_ABILr_RS_FEC_REQ_SELf_GET(r) ((((r).an_x4_ld_fec_basepage_abil[0]) >> 1) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_FEC_BASEPAGE_ABILr_RS_FEC_REQ_SELf_SET(r,f) (r).an_x4_ld_fec_basepage_abil[0]=(((r).an_x4_ld_fec_basepage_abil[0] & ~((uint32_t)0x1f << 1)) | ((((uint32_t)f) & 0x1f) << 1)) | (31 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_FEC_BASEPAGE_ABILr_RS_FEC_REQ_ENf_GET(r) (((r).an_x4_ld_fec_basepage_abil[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_FEC_BASEPAGE_ABILr_RS_FEC_REQ_ENf_SET(r,f) (r).an_x4_ld_fec_basepage_abil[0]=(((r).an_x4_ld_fec_basepage_abil[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AN_X4_LD_FEC_BASEPAGE_ABIL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X4_LD_FEC_BASEPAGE_ABILr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_FEC_BASEPAGE_ABILr,(_r._an_x4_ld_fec_basepage_abil))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_LD_FEC_BASEPAGE_ABILr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_FEC_BASEPAGE_ABILr,(_r._an_x4_ld_fec_basepage_abil)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_LD_FEC_BASEPAGE_ABILr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_FEC_BASEPAGE_ABILr,(_r._an_x4_ld_fec_basepage_abil))
#define BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_LD_FEC_BASEPAGE_ABILr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_FEC_BASEPAGE_ABILr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_fec_basepage_abil))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_LD_FEC_BASEPAGE_ABILr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_FEC_BASEPAGE_ABILr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_fec_basepage_abil))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_LD_FEC_BASEPAGE_ABILr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_FEC_BASEPAGE_ABILr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_ld_fec_basepage_abil))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_LD_FEC_BASEPAGE_ABILr BCMI_TSCF_GEN3_XGXS_AN_X4_LD_FEC_BASEPAGE_ABILr
#define AN_X4_LD_FEC_BASEPAGE_ABILr_SIZE BCMI_TSCF_GEN3_XGXS_AN_X4_LD_FEC_BASEPAGE_ABILr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X4_LD_FEC_BASEPAGE_ABILr_t AN_X4_LD_FEC_BASEPAGE_ABILr_t;
#define AN_X4_LD_FEC_BASEPAGE_ABILr_CLR BCMI_TSCF_GEN3_XGXS_AN_X4_LD_FEC_BASEPAGE_ABILr_CLR
#define AN_X4_LD_FEC_BASEPAGE_ABILr_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_FEC_BASEPAGE_ABILr_SET
#define AN_X4_LD_FEC_BASEPAGE_ABILr_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_FEC_BASEPAGE_ABILr_GET
#define AN_X4_LD_FEC_BASEPAGE_ABILr_BASE_R_FEC_REQ_SELf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_FEC_BASEPAGE_ABILr_BASE_R_FEC_REQ_SELf_GET
#define AN_X4_LD_FEC_BASEPAGE_ABILr_BASE_R_FEC_REQ_SELf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_FEC_BASEPAGE_ABILr_BASE_R_FEC_REQ_SELf_SET
#define AN_X4_LD_FEC_BASEPAGE_ABILr_BASE_R_FEC_REQ_ENf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_FEC_BASEPAGE_ABILr_BASE_R_FEC_REQ_ENf_GET
#define AN_X4_LD_FEC_BASEPAGE_ABILr_BASE_R_FEC_REQ_ENf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_FEC_BASEPAGE_ABILr_BASE_R_FEC_REQ_ENf_SET
#define AN_X4_LD_FEC_BASEPAGE_ABILr_RS_FEC_REQ_SELf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_FEC_BASEPAGE_ABILr_RS_FEC_REQ_SELf_GET
#define AN_X4_LD_FEC_BASEPAGE_ABILr_RS_FEC_REQ_SELf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_FEC_BASEPAGE_ABILr_RS_FEC_REQ_SELf_SET
#define AN_X4_LD_FEC_BASEPAGE_ABILr_RS_FEC_REQ_ENf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_FEC_BASEPAGE_ABILr_RS_FEC_REQ_ENf_GET
#define AN_X4_LD_FEC_BASEPAGE_ABILr_RS_FEC_REQ_ENf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_FEC_BASEPAGE_ABILr_RS_FEC_REQ_ENf_SET
#define READ_AN_X4_LD_FEC_BASEPAGE_ABILr BCMI_TSCF_GEN3_XGXS_READ_AN_X4_LD_FEC_BASEPAGE_ABILr
#define WRITE_AN_X4_LD_FEC_BASEPAGE_ABILr BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_LD_FEC_BASEPAGE_ABILr
#define MODIFY_AN_X4_LD_FEC_BASEPAGE_ABILr BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_LD_FEC_BASEPAGE_ABILr
#define READLN_AN_X4_LD_FEC_BASEPAGE_ABILr BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_LD_FEC_BASEPAGE_ABILr
#define WRITELN_AN_X4_LD_FEC_BASEPAGE_ABILr BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_LD_FEC_BASEPAGE_ABILr
#define WRITEALL_AN_X4_LD_FEC_BASEPAGE_ABILr BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_LD_FEC_BASEPAGE_ABILr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X4_LD_FEC_BASEPAGE_ABILr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X4_SW_AN_BASE_PAGE0
 * BLOCKS:   AN_X4_ABILITIES
 * REGADDR:  0xc1cc
 * DESC:     SW AN Base Page 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     SW_AN_BP_0       LOCAL DEVICE PAGE 2 FIELD
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE0r (0x0000c1cc | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE0r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_SW_AN_BASE_PAGE0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE0r_s {
	uint32_t v[1];
	uint32_t an_x4_sw_an_base_page0[1];
	uint32_t _an_x4_sw_an_base_page0;
} BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE0r_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE0r_CLR(r) (r).an_x4_sw_an_base_page0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE0r_SET(r,d) (r).an_x4_sw_an_base_page0[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE0r_GET(r) (r).an_x4_sw_an_base_page0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE0r_SW_AN_BP_0f_GET(r) (((r).an_x4_sw_an_base_page0[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE0r_SW_AN_BP_0f_SET(r,f) (r).an_x4_sw_an_base_page0[0]=(((r).an_x4_sw_an_base_page0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AN_X4_SW_AN_BASE_PAGE0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X4_SW_AN_BASE_PAGE0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE0r,(_r._an_x4_sw_an_base_page0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_SW_AN_BASE_PAGE0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE0r,(_r._an_x4_sw_an_base_page0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_SW_AN_BASE_PAGE0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE0r,(_r._an_x4_sw_an_base_page0))
#define BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_SW_AN_BASE_PAGE0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_sw_an_base_page0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_SW_AN_BASE_PAGE0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_sw_an_base_page0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_SW_AN_BASE_PAGE0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_sw_an_base_page0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_SW_AN_BASE_PAGE0r BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE0r
#define AN_X4_SW_AN_BASE_PAGE0r_SIZE BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE0r_t AN_X4_SW_AN_BASE_PAGE0r_t;
#define AN_X4_SW_AN_BASE_PAGE0r_CLR BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE0r_CLR
#define AN_X4_SW_AN_BASE_PAGE0r_SET BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE0r_SET
#define AN_X4_SW_AN_BASE_PAGE0r_GET BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE0r_GET
#define AN_X4_SW_AN_BASE_PAGE0r_SW_AN_BP_0f_GET BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE0r_SW_AN_BP_0f_GET
#define AN_X4_SW_AN_BASE_PAGE0r_SW_AN_BP_0f_SET BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE0r_SW_AN_BP_0f_SET
#define READ_AN_X4_SW_AN_BASE_PAGE0r BCMI_TSCF_GEN3_XGXS_READ_AN_X4_SW_AN_BASE_PAGE0r
#define WRITE_AN_X4_SW_AN_BASE_PAGE0r BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_SW_AN_BASE_PAGE0r
#define MODIFY_AN_X4_SW_AN_BASE_PAGE0r BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_SW_AN_BASE_PAGE0r
#define READLN_AN_X4_SW_AN_BASE_PAGE0r BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_SW_AN_BASE_PAGE0r
#define WRITELN_AN_X4_SW_AN_BASE_PAGE0r BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_SW_AN_BASE_PAGE0r
#define WRITEALL_AN_X4_SW_AN_BASE_PAGE0r BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_SW_AN_BASE_PAGE0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X4_SW_AN_BASE_PAGE1
 * BLOCKS:   AN_X4_ABILITIES
 * REGADDR:  0xc1cd
 * DESC:     SW AN Base Page 1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     SW_AN_BP_1       LOCAL DEVICE PAGE 1 FIELD
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE1r (0x0000c1cd | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE1r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_SW_AN_BASE_PAGE1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE1r_s {
	uint32_t v[1];
	uint32_t an_x4_sw_an_base_page1[1];
	uint32_t _an_x4_sw_an_base_page1;
} BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE1r_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE1r_CLR(r) (r).an_x4_sw_an_base_page1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE1r_SET(r,d) (r).an_x4_sw_an_base_page1[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE1r_GET(r) (r).an_x4_sw_an_base_page1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE1r_SW_AN_BP_1f_GET(r) (((r).an_x4_sw_an_base_page1[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE1r_SW_AN_BP_1f_SET(r,f) (r).an_x4_sw_an_base_page1[0]=(((r).an_x4_sw_an_base_page1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AN_X4_SW_AN_BASE_PAGE1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X4_SW_AN_BASE_PAGE1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE1r,(_r._an_x4_sw_an_base_page1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_SW_AN_BASE_PAGE1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE1r,(_r._an_x4_sw_an_base_page1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_SW_AN_BASE_PAGE1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE1r,(_r._an_x4_sw_an_base_page1))
#define BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_SW_AN_BASE_PAGE1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_sw_an_base_page1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_SW_AN_BASE_PAGE1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_sw_an_base_page1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_SW_AN_BASE_PAGE1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_sw_an_base_page1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_SW_AN_BASE_PAGE1r BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE1r
#define AN_X4_SW_AN_BASE_PAGE1r_SIZE BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE1r_t AN_X4_SW_AN_BASE_PAGE1r_t;
#define AN_X4_SW_AN_BASE_PAGE1r_CLR BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE1r_CLR
#define AN_X4_SW_AN_BASE_PAGE1r_SET BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE1r_SET
#define AN_X4_SW_AN_BASE_PAGE1r_GET BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE1r_GET
#define AN_X4_SW_AN_BASE_PAGE1r_SW_AN_BP_1f_GET BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE1r_SW_AN_BP_1f_GET
#define AN_X4_SW_AN_BASE_PAGE1r_SW_AN_BP_1f_SET BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE1r_SW_AN_BP_1f_SET
#define READ_AN_X4_SW_AN_BASE_PAGE1r BCMI_TSCF_GEN3_XGXS_READ_AN_X4_SW_AN_BASE_PAGE1r
#define WRITE_AN_X4_SW_AN_BASE_PAGE1r BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_SW_AN_BASE_PAGE1r
#define MODIFY_AN_X4_SW_AN_BASE_PAGE1r BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_SW_AN_BASE_PAGE1r
#define READLN_AN_X4_SW_AN_BASE_PAGE1r BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_SW_AN_BASE_PAGE1r
#define WRITELN_AN_X4_SW_AN_BASE_PAGE1r BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_SW_AN_BASE_PAGE1r
#define WRITEALL_AN_X4_SW_AN_BASE_PAGE1r BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_SW_AN_BASE_PAGE1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X4_SW_AN_BASE_PAGE2
 * BLOCKS:   AN_X4_ABILITIES
 * REGADDR:  0xc1ce
 * DESC:     SW AN Base Page 2
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     SW_AN_BP_2       LOCAL DEVICE PAGE 0 FIELD
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE2r (0x0000c1ce | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_SW_AN_BASE_PAGE2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE2r_s {
	uint32_t v[1];
	uint32_t an_x4_sw_an_base_page2[1];
	uint32_t _an_x4_sw_an_base_page2;
} BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE2r_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE2r_CLR(r) (r).an_x4_sw_an_base_page2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE2r_SET(r,d) (r).an_x4_sw_an_base_page2[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE2r_GET(r) (r).an_x4_sw_an_base_page2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE2r_SW_AN_BP_2f_GET(r) (((r).an_x4_sw_an_base_page2[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE2r_SW_AN_BP_2f_SET(r,f) (r).an_x4_sw_an_base_page2[0]=(((r).an_x4_sw_an_base_page2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AN_X4_SW_AN_BASE_PAGE2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X4_SW_AN_BASE_PAGE2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE2r,(_r._an_x4_sw_an_base_page2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_SW_AN_BASE_PAGE2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE2r,(_r._an_x4_sw_an_base_page2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_SW_AN_BASE_PAGE2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE2r,(_r._an_x4_sw_an_base_page2))
#define BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_SW_AN_BASE_PAGE2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_sw_an_base_page2))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_SW_AN_BASE_PAGE2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_sw_an_base_page2))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_SW_AN_BASE_PAGE2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_sw_an_base_page2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_SW_AN_BASE_PAGE2r BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE2r
#define AN_X4_SW_AN_BASE_PAGE2r_SIZE BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE2r_t AN_X4_SW_AN_BASE_PAGE2r_t;
#define AN_X4_SW_AN_BASE_PAGE2r_CLR BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE2r_CLR
#define AN_X4_SW_AN_BASE_PAGE2r_SET BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE2r_SET
#define AN_X4_SW_AN_BASE_PAGE2r_GET BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE2r_GET
#define AN_X4_SW_AN_BASE_PAGE2r_SW_AN_BP_2f_GET BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE2r_SW_AN_BP_2f_GET
#define AN_X4_SW_AN_BASE_PAGE2r_SW_AN_BP_2f_SET BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE2r_SW_AN_BP_2f_SET
#define READ_AN_X4_SW_AN_BASE_PAGE2r BCMI_TSCF_GEN3_XGXS_READ_AN_X4_SW_AN_BASE_PAGE2r
#define WRITE_AN_X4_SW_AN_BASE_PAGE2r BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_SW_AN_BASE_PAGE2r
#define MODIFY_AN_X4_SW_AN_BASE_PAGE2r BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_SW_AN_BASE_PAGE2r
#define READLN_AN_X4_SW_AN_BASE_PAGE2r BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_SW_AN_BASE_PAGE2r
#define WRITELN_AN_X4_SW_AN_BASE_PAGE2r BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_SW_AN_BASE_PAGE2r
#define WRITEALL_AN_X4_SW_AN_BASE_PAGE2r BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_SW_AN_BASE_PAGE2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X4_SW_AN_BASE_PAGE2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X4_R_CL73_STS
 * BLOCKS:   AN_X4_STATUS
 * REGADDR:  0xc1d0
 * DESC:     R_CL73 Status 
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     DME_STATE        DME Receive State.
 *     DME_PAGE         Valid DME page received.
 *     DME_MV_PAIR      DME Delimiter detected.
 *     CLK_TRANS_MISS   Missing DME clock transition detected.
 *     PAGE_TOO_LONG    Too long DME page detected.
 *     PAGE_TOO_SHORT   Too short DME page detected.
 *     PULSE_TOO_LONG   Too long DME pulse detected.
 *     PULSE_TOO_MODERATE Too moderate DME pulse detected.
 *     PULSE_TOO_SHORT  Too short DME pulse detected.
 *     DME_LOCKED       Locked on DME signal.
 *     CL73_FIFO_FULL   CL73 Fifo Full.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr (0x0000c1d0 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_R_CL73_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_s {
	uint32_t v[1];
	uint32_t an_x4_r_cl73_sts[1];
	uint32_t _an_x4_r_cl73_sts;
} BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_CLR(r) (r).an_x4_r_cl73_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_SET(r,d) (r).an_x4_r_cl73_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_GET(r) (r).an_x4_r_cl73_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_CL73_FIFO_FULLf_GET(r) ((((r).an_x4_r_cl73_sts[0]) >> 11) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_CL73_FIFO_FULLf_SET(r,f) (r).an_x4_r_cl73_sts[0]=(((r).an_x4_r_cl73_sts[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_DME_LOCKEDf_GET(r) ((((r).an_x4_r_cl73_sts[0]) >> 10) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_DME_LOCKEDf_SET(r,f) (r).an_x4_r_cl73_sts[0]=(((r).an_x4_r_cl73_sts[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_PULSE_TOO_SHORTf_GET(r) ((((r).an_x4_r_cl73_sts[0]) >> 9) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_PULSE_TOO_SHORTf_SET(r,f) (r).an_x4_r_cl73_sts[0]=(((r).an_x4_r_cl73_sts[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_PULSE_TOO_MODERATEf_GET(r) ((((r).an_x4_r_cl73_sts[0]) >> 8) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_PULSE_TOO_MODERATEf_SET(r,f) (r).an_x4_r_cl73_sts[0]=(((r).an_x4_r_cl73_sts[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_PULSE_TOO_LONGf_GET(r) ((((r).an_x4_r_cl73_sts[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_PULSE_TOO_LONGf_SET(r,f) (r).an_x4_r_cl73_sts[0]=(((r).an_x4_r_cl73_sts[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_PAGE_TOO_SHORTf_GET(r) ((((r).an_x4_r_cl73_sts[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_PAGE_TOO_SHORTf_SET(r,f) (r).an_x4_r_cl73_sts[0]=(((r).an_x4_r_cl73_sts[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_PAGE_TOO_LONGf_GET(r) ((((r).an_x4_r_cl73_sts[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_PAGE_TOO_LONGf_SET(r,f) (r).an_x4_r_cl73_sts[0]=(((r).an_x4_r_cl73_sts[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_CLK_TRANS_MISSf_GET(r) ((((r).an_x4_r_cl73_sts[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_CLK_TRANS_MISSf_SET(r,f) (r).an_x4_r_cl73_sts[0]=(((r).an_x4_r_cl73_sts[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_DME_MV_PAIRf_GET(r) ((((r).an_x4_r_cl73_sts[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_DME_MV_PAIRf_SET(r,f) (r).an_x4_r_cl73_sts[0]=(((r).an_x4_r_cl73_sts[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_DME_PAGEf_GET(r) ((((r).an_x4_r_cl73_sts[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_DME_PAGEf_SET(r,f) (r).an_x4_r_cl73_sts[0]=(((r).an_x4_r_cl73_sts[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_DME_STATEf_GET(r) (((r).an_x4_r_cl73_sts[0]) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_DME_STATEf_SET(r,f) (r).an_x4_r_cl73_sts[0]=(((r).an_x4_r_cl73_sts[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access AN_X4_R_CL73_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X4_R_CL73_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr,(_r._an_x4_r_cl73_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_R_CL73_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr,(_r._an_x4_r_cl73_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_R_CL73_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr,(_r._an_x4_r_cl73_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_R_CL73_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_r_cl73_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_R_CL73_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_r_cl73_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_R_CL73_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_r_cl73_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_R_CL73_STSr BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr
#define AN_X4_R_CL73_STSr_SIZE BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_t AN_X4_R_CL73_STSr_t;
#define AN_X4_R_CL73_STSr_CLR BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_CLR
#define AN_X4_R_CL73_STSr_SET BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_SET
#define AN_X4_R_CL73_STSr_GET BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_GET
#define AN_X4_R_CL73_STSr_CL73_FIFO_FULLf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_CL73_FIFO_FULLf_GET
#define AN_X4_R_CL73_STSr_CL73_FIFO_FULLf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_CL73_FIFO_FULLf_SET
#define AN_X4_R_CL73_STSr_DME_LOCKEDf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_DME_LOCKEDf_GET
#define AN_X4_R_CL73_STSr_DME_LOCKEDf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_DME_LOCKEDf_SET
#define AN_X4_R_CL73_STSr_PULSE_TOO_SHORTf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_PULSE_TOO_SHORTf_GET
#define AN_X4_R_CL73_STSr_PULSE_TOO_SHORTf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_PULSE_TOO_SHORTf_SET
#define AN_X4_R_CL73_STSr_PULSE_TOO_MODERATEf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_PULSE_TOO_MODERATEf_GET
#define AN_X4_R_CL73_STSr_PULSE_TOO_MODERATEf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_PULSE_TOO_MODERATEf_SET
#define AN_X4_R_CL73_STSr_PULSE_TOO_LONGf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_PULSE_TOO_LONGf_GET
#define AN_X4_R_CL73_STSr_PULSE_TOO_LONGf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_PULSE_TOO_LONGf_SET
#define AN_X4_R_CL73_STSr_PAGE_TOO_SHORTf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_PAGE_TOO_SHORTf_GET
#define AN_X4_R_CL73_STSr_PAGE_TOO_SHORTf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_PAGE_TOO_SHORTf_SET
#define AN_X4_R_CL73_STSr_PAGE_TOO_LONGf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_PAGE_TOO_LONGf_GET
#define AN_X4_R_CL73_STSr_PAGE_TOO_LONGf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_PAGE_TOO_LONGf_SET
#define AN_X4_R_CL73_STSr_CLK_TRANS_MISSf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_CLK_TRANS_MISSf_GET
#define AN_X4_R_CL73_STSr_CLK_TRANS_MISSf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_CLK_TRANS_MISSf_SET
#define AN_X4_R_CL73_STSr_DME_MV_PAIRf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_DME_MV_PAIRf_GET
#define AN_X4_R_CL73_STSr_DME_MV_PAIRf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_DME_MV_PAIRf_SET
#define AN_X4_R_CL73_STSr_DME_PAGEf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_DME_PAGEf_GET
#define AN_X4_R_CL73_STSr_DME_PAGEf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_DME_PAGEf_SET
#define AN_X4_R_CL73_STSr_DME_STATEf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_DME_STATEf_GET
#define AN_X4_R_CL73_STSr_DME_STATEf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr_DME_STATEf_SET
#define READ_AN_X4_R_CL73_STSr BCMI_TSCF_GEN3_XGXS_READ_AN_X4_R_CL73_STSr
#define WRITE_AN_X4_R_CL73_STSr BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_R_CL73_STSr
#define MODIFY_AN_X4_R_CL73_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_R_CL73_STSr
#define READLN_AN_X4_R_CL73_STSr BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_R_CL73_STSr
#define WRITELN_AN_X4_R_CL73_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_R_CL73_STSr
#define WRITEALL_AN_X4_R_CL73_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_R_CL73_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X4_R_CL73_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X4_PXNG_STS
 * BLOCKS:   AN_X4_STATUS
 * REGADDR:  0xc1d1
 * DESC:     CL73_PXNG Status 
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CONSISTENCY_MISMATCH PXNG mismatch detected.
 *     COMPLETE_ACK     PXNG COMPLETE_ACKNOWLEDGE state.
 *     ACK_DETECT       PXNG ACKNOWLEDGE_DETECT state.
 *     ABILITY_DETECT   PXNG ABILITY_DETECT state.
 *     AN_ENABLE        PXNG AN_ENABLE state.
 *     ERROR_STATE      PXNG ERROR state.
 *     TRANSMIT_DISABLE PXNG TRANSMIT_DISABLE state
 *     NEXT_PAGE_WAIT   PXNG NEXT_PAGE_WAIT state.
 *     AN_GOOD_CHECK    PXNG AN_GOOD_CHECK state.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr (0x0000c1d1 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_PXNG_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr_s {
	uint32_t v[1];
	uint32_t an_x4_pxng_sts[1];
	uint32_t _an_x4_pxng_sts;
} BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr_CLR(r) (r).an_x4_pxng_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr_SET(r,d) (r).an_x4_pxng_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr_GET(r) (r).an_x4_pxng_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr_AN_GOOD_CHECKf_GET(r) ((((r).an_x4_pxng_sts[0]) >> 8) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr_AN_GOOD_CHECKf_SET(r,f) (r).an_x4_pxng_sts[0]=(((r).an_x4_pxng_sts[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr_NEXT_PAGE_WAITf_GET(r) ((((r).an_x4_pxng_sts[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr_NEXT_PAGE_WAITf_SET(r,f) (r).an_x4_pxng_sts[0]=(((r).an_x4_pxng_sts[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr_TRANSMIT_DISABLEf_GET(r) ((((r).an_x4_pxng_sts[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr_TRANSMIT_DISABLEf_SET(r,f) (r).an_x4_pxng_sts[0]=(((r).an_x4_pxng_sts[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr_ERROR_STATEf_GET(r) ((((r).an_x4_pxng_sts[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr_ERROR_STATEf_SET(r,f) (r).an_x4_pxng_sts[0]=(((r).an_x4_pxng_sts[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr_AN_ENABLEf_GET(r) ((((r).an_x4_pxng_sts[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr_AN_ENABLEf_SET(r,f) (r).an_x4_pxng_sts[0]=(((r).an_x4_pxng_sts[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr_ABILITY_DETECTf_GET(r) ((((r).an_x4_pxng_sts[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr_ABILITY_DETECTf_SET(r,f) (r).an_x4_pxng_sts[0]=(((r).an_x4_pxng_sts[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr_ACK_DETECTf_GET(r) ((((r).an_x4_pxng_sts[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr_ACK_DETECTf_SET(r,f) (r).an_x4_pxng_sts[0]=(((r).an_x4_pxng_sts[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr_COMPLETE_ACKf_GET(r) ((((r).an_x4_pxng_sts[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr_COMPLETE_ACKf_SET(r,f) (r).an_x4_pxng_sts[0]=(((r).an_x4_pxng_sts[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr_CONSISTENCY_MISMATCHf_GET(r) (((r).an_x4_pxng_sts[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr_CONSISTENCY_MISMATCHf_SET(r,f) (r).an_x4_pxng_sts[0]=(((r).an_x4_pxng_sts[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AN_X4_PXNG_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X4_PXNG_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr,(_r._an_x4_pxng_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_PXNG_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr,(_r._an_x4_pxng_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_PXNG_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr,(_r._an_x4_pxng_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_PXNG_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_pxng_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_PXNG_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_pxng_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_PXNG_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_pxng_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_PXNG_STSr BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr
#define AN_X4_PXNG_STSr_SIZE BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr_t AN_X4_PXNG_STSr_t;
#define AN_X4_PXNG_STSr_CLR BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr_CLR
#define AN_X4_PXNG_STSr_SET BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr_SET
#define AN_X4_PXNG_STSr_GET BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr_GET
#define AN_X4_PXNG_STSr_AN_GOOD_CHECKf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr_AN_GOOD_CHECKf_GET
#define AN_X4_PXNG_STSr_AN_GOOD_CHECKf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr_AN_GOOD_CHECKf_SET
#define AN_X4_PXNG_STSr_NEXT_PAGE_WAITf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr_NEXT_PAGE_WAITf_GET
#define AN_X4_PXNG_STSr_NEXT_PAGE_WAITf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr_NEXT_PAGE_WAITf_SET
#define AN_X4_PXNG_STSr_TRANSMIT_DISABLEf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr_TRANSMIT_DISABLEf_GET
#define AN_X4_PXNG_STSr_TRANSMIT_DISABLEf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr_TRANSMIT_DISABLEf_SET
#define AN_X4_PXNG_STSr_ERROR_STATEf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr_ERROR_STATEf_GET
#define AN_X4_PXNG_STSr_ERROR_STATEf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr_ERROR_STATEf_SET
#define AN_X4_PXNG_STSr_AN_ENABLEf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr_AN_ENABLEf_GET
#define AN_X4_PXNG_STSr_AN_ENABLEf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr_AN_ENABLEf_SET
#define AN_X4_PXNG_STSr_ABILITY_DETECTf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr_ABILITY_DETECTf_GET
#define AN_X4_PXNG_STSr_ABILITY_DETECTf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr_ABILITY_DETECTf_SET
#define AN_X4_PXNG_STSr_ACK_DETECTf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr_ACK_DETECTf_GET
#define AN_X4_PXNG_STSr_ACK_DETECTf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr_ACK_DETECTf_SET
#define AN_X4_PXNG_STSr_COMPLETE_ACKf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr_COMPLETE_ACKf_GET
#define AN_X4_PXNG_STSr_COMPLETE_ACKf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr_COMPLETE_ACKf_SET
#define AN_X4_PXNG_STSr_CONSISTENCY_MISMATCHf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr_CONSISTENCY_MISMATCHf_GET
#define AN_X4_PXNG_STSr_CONSISTENCY_MISMATCHf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr_CONSISTENCY_MISMATCHf_SET
#define READ_AN_X4_PXNG_STSr BCMI_TSCF_GEN3_XGXS_READ_AN_X4_PXNG_STSr
#define WRITE_AN_X4_PXNG_STSr BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_PXNG_STSr
#define MODIFY_AN_X4_PXNG_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_PXNG_STSr
#define READLN_AN_X4_PXNG_STSr BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_PXNG_STSr
#define WRITELN_AN_X4_PXNG_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_PXNG_STSr
#define WRITEALL_AN_X4_PXNG_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_PXNG_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X4_PXNG_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X4_PSEQ_STS
 * BLOCKS:   AN_X4_STATUS
 * REGADDR:  0xc1d2
 * DESC:     CL73_PSEQ Status 
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     HP_MODE          PSEQ Entered Hewlett-Packard mode.
 *     RX_BP            PSEQ Received base page.
 *     RX_NP            PSEQ Received next page.
 *     RX_MP_NULL       PSEQ Received message page 1.
 *     RX_MP_OUI        PSEQ Received message page 5.
 *     RX_MP_MISMATCH   PSEQ Received mismatching message page.
 *     RX_UP_OUI_MISMATCH PSEQ Received MPS-5 OUI mismatch.
 *     RX_UP_OUI_MATCH  PSEQ Received MPS-5 OUI match.
 *     RX_INVALID_SEQ   PSEQ Received invalid page sequence.
 *     RX_NP_TOGGLE_ERR PSEQ Received NP without T toggling.
 *     CL73_AN_COMPLETE PSEQ CL73 auto-neg is complete.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr (0x0000c1d2 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_PSEQ_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_s {
	uint32_t v[1];
	uint32_t an_x4_pseq_sts[1];
	uint32_t _an_x4_pseq_sts;
} BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_CLR(r) (r).an_x4_pseq_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_SET(r,d) (r).an_x4_pseq_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_GET(r) (r).an_x4_pseq_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_CL73_AN_COMPLETEf_GET(r) ((((r).an_x4_pseq_sts[0]) >> 10) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_CL73_AN_COMPLETEf_SET(r,f) (r).an_x4_pseq_sts[0]=(((r).an_x4_pseq_sts[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_RX_NP_TOGGLE_ERRf_GET(r) ((((r).an_x4_pseq_sts[0]) >> 9) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_RX_NP_TOGGLE_ERRf_SET(r,f) (r).an_x4_pseq_sts[0]=(((r).an_x4_pseq_sts[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_RX_INVALID_SEQf_GET(r) ((((r).an_x4_pseq_sts[0]) >> 8) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_RX_INVALID_SEQf_SET(r,f) (r).an_x4_pseq_sts[0]=(((r).an_x4_pseq_sts[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_RX_UP_OUI_MATCHf_GET(r) ((((r).an_x4_pseq_sts[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_RX_UP_OUI_MATCHf_SET(r,f) (r).an_x4_pseq_sts[0]=(((r).an_x4_pseq_sts[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_RX_UP_OUI_MISMATCHf_GET(r) ((((r).an_x4_pseq_sts[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_RX_UP_OUI_MISMATCHf_SET(r,f) (r).an_x4_pseq_sts[0]=(((r).an_x4_pseq_sts[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_RX_MP_MISMATCHf_GET(r) ((((r).an_x4_pseq_sts[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_RX_MP_MISMATCHf_SET(r,f) (r).an_x4_pseq_sts[0]=(((r).an_x4_pseq_sts[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_RX_MP_OUIf_GET(r) ((((r).an_x4_pseq_sts[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_RX_MP_OUIf_SET(r,f) (r).an_x4_pseq_sts[0]=(((r).an_x4_pseq_sts[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_RX_MP_NULLf_GET(r) ((((r).an_x4_pseq_sts[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_RX_MP_NULLf_SET(r,f) (r).an_x4_pseq_sts[0]=(((r).an_x4_pseq_sts[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_RX_NPf_GET(r) ((((r).an_x4_pseq_sts[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_RX_NPf_SET(r,f) (r).an_x4_pseq_sts[0]=(((r).an_x4_pseq_sts[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_RX_BPf_GET(r) ((((r).an_x4_pseq_sts[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_RX_BPf_SET(r,f) (r).an_x4_pseq_sts[0]=(((r).an_x4_pseq_sts[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_HP_MODEf_GET(r) (((r).an_x4_pseq_sts[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_HP_MODEf_SET(r,f) (r).an_x4_pseq_sts[0]=(((r).an_x4_pseq_sts[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AN_X4_PSEQ_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X4_PSEQ_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr,(_r._an_x4_pseq_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_PSEQ_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr,(_r._an_x4_pseq_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_PSEQ_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr,(_r._an_x4_pseq_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_PSEQ_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_pseq_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_PSEQ_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_pseq_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_PSEQ_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_pseq_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_PSEQ_STSr BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr
#define AN_X4_PSEQ_STSr_SIZE BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_t AN_X4_PSEQ_STSr_t;
#define AN_X4_PSEQ_STSr_CLR BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_CLR
#define AN_X4_PSEQ_STSr_SET BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_SET
#define AN_X4_PSEQ_STSr_GET BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_GET
#define AN_X4_PSEQ_STSr_CL73_AN_COMPLETEf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_CL73_AN_COMPLETEf_GET
#define AN_X4_PSEQ_STSr_CL73_AN_COMPLETEf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_CL73_AN_COMPLETEf_SET
#define AN_X4_PSEQ_STSr_RX_NP_TOGGLE_ERRf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_RX_NP_TOGGLE_ERRf_GET
#define AN_X4_PSEQ_STSr_RX_NP_TOGGLE_ERRf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_RX_NP_TOGGLE_ERRf_SET
#define AN_X4_PSEQ_STSr_RX_INVALID_SEQf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_RX_INVALID_SEQf_GET
#define AN_X4_PSEQ_STSr_RX_INVALID_SEQf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_RX_INVALID_SEQf_SET
#define AN_X4_PSEQ_STSr_RX_UP_OUI_MATCHf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_RX_UP_OUI_MATCHf_GET
#define AN_X4_PSEQ_STSr_RX_UP_OUI_MATCHf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_RX_UP_OUI_MATCHf_SET
#define AN_X4_PSEQ_STSr_RX_UP_OUI_MISMATCHf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_RX_UP_OUI_MISMATCHf_GET
#define AN_X4_PSEQ_STSr_RX_UP_OUI_MISMATCHf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_RX_UP_OUI_MISMATCHf_SET
#define AN_X4_PSEQ_STSr_RX_MP_MISMATCHf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_RX_MP_MISMATCHf_GET
#define AN_X4_PSEQ_STSr_RX_MP_MISMATCHf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_RX_MP_MISMATCHf_SET
#define AN_X4_PSEQ_STSr_RX_MP_OUIf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_RX_MP_OUIf_GET
#define AN_X4_PSEQ_STSr_RX_MP_OUIf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_RX_MP_OUIf_SET
#define AN_X4_PSEQ_STSr_RX_MP_NULLf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_RX_MP_NULLf_GET
#define AN_X4_PSEQ_STSr_RX_MP_NULLf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_RX_MP_NULLf_SET
#define AN_X4_PSEQ_STSr_RX_NPf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_RX_NPf_GET
#define AN_X4_PSEQ_STSr_RX_NPf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_RX_NPf_SET
#define AN_X4_PSEQ_STSr_RX_BPf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_RX_BPf_GET
#define AN_X4_PSEQ_STSr_RX_BPf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_RX_BPf_SET
#define AN_X4_PSEQ_STSr_HP_MODEf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_HP_MODEf_GET
#define AN_X4_PSEQ_STSr_HP_MODEf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr_HP_MODEf_SET
#define READ_AN_X4_PSEQ_STSr BCMI_TSCF_GEN3_XGXS_READ_AN_X4_PSEQ_STSr
#define WRITE_AN_X4_PSEQ_STSr BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_PSEQ_STSr
#define MODIFY_AN_X4_PSEQ_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_PSEQ_STSr
#define READLN_AN_X4_PSEQ_STSr BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_PSEQ_STSr
#define WRITELN_AN_X4_PSEQ_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_PSEQ_STSr
#define WRITEALL_AN_X4_PSEQ_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_PSEQ_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X4_PSEQ_RF
 * BLOCKS:   AN_X4_STATUS
 * REGADDR:  0xc1d3
 * DESC:     PSEQ Remote Fault Status 
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     REMOTE_FAULT_SET PSEQ Received a remote fault indication.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_RFr (0x0000c1d3 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_RFr_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_PSEQ_RF.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_RFr_s {
	uint32_t v[1];
	uint32_t an_x4_pseq_rf[1];
	uint32_t _an_x4_pseq_rf;
} BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_RFr_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_RFr_CLR(r) (r).an_x4_pseq_rf[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_RFr_SET(r,d) (r).an_x4_pseq_rf[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_RFr_GET(r) (r).an_x4_pseq_rf[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_RFr_REMOTE_FAULT_SETf_GET(r) (((r).an_x4_pseq_rf[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_RFr_REMOTE_FAULT_SETf_SET(r,f) (r).an_x4_pseq_rf[0]=(((r).an_x4_pseq_rf[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AN_X4_PSEQ_RF.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X4_PSEQ_RFr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_RFr,(_r._an_x4_pseq_rf))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_PSEQ_RFr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_RFr,(_r._an_x4_pseq_rf)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_PSEQ_RFr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_RFr,(_r._an_x4_pseq_rf))
#define BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_PSEQ_RFr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_RFr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_pseq_rf))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_PSEQ_RFr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_RFr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_pseq_rf))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_PSEQ_RFr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_RFr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_pseq_rf))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_PSEQ_RFr BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_RFr
#define AN_X4_PSEQ_RFr_SIZE BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_RFr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_RFr_t AN_X4_PSEQ_RFr_t;
#define AN_X4_PSEQ_RFr_CLR BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_RFr_CLR
#define AN_X4_PSEQ_RFr_SET BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_RFr_SET
#define AN_X4_PSEQ_RFr_GET BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_RFr_GET
#define AN_X4_PSEQ_RFr_REMOTE_FAULT_SETf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_RFr_REMOTE_FAULT_SETf_GET
#define AN_X4_PSEQ_RFr_REMOTE_FAULT_SETf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_RFr_REMOTE_FAULT_SETf_SET
#define READ_AN_X4_PSEQ_RFr BCMI_TSCF_GEN3_XGXS_READ_AN_X4_PSEQ_RFr
#define WRITE_AN_X4_PSEQ_RFr BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_PSEQ_RFr
#define MODIFY_AN_X4_PSEQ_RFr BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_PSEQ_RFr
#define READLN_AN_X4_PSEQ_RFr BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_PSEQ_RFr
#define WRITELN_AN_X4_PSEQ_RFr BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_PSEQ_RFr
#define WRITEALL_AN_X4_PSEQ_RFr BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_PSEQ_RFr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X4_PSEQ_RFr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X4_UNEXP_PAGE
 * BLOCKS:   AN_X4_STATUS
 * REGADDR:  0xc1d4
 * DESC:     PSEQ Unexpected page 
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     RX_UNEXPECTED_PAGE PSEQ Unexpected page received.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_UNEXP_PAGEr (0x0000c1d4 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X4_UNEXP_PAGEr_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_UNEXP_PAGE.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X4_UNEXP_PAGEr_s {
	uint32_t v[1];
	uint32_t an_x4_unexp_page[1];
	uint32_t _an_x4_unexp_page;
} BCMI_TSCF_GEN3_XGXS_AN_X4_UNEXP_PAGEr_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X4_UNEXP_PAGEr_CLR(r) (r).an_x4_unexp_page[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X4_UNEXP_PAGEr_SET(r,d) (r).an_x4_unexp_page[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X4_UNEXP_PAGEr_GET(r) (r).an_x4_unexp_page[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_UNEXP_PAGEr_RX_UNEXPECTED_PAGEf_GET(r) (((r).an_x4_unexp_page[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_UNEXP_PAGEr_RX_UNEXPECTED_PAGEf_SET(r,f) (r).an_x4_unexp_page[0]=(((r).an_x4_unexp_page[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AN_X4_UNEXP_PAGE.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X4_UNEXP_PAGEr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_UNEXP_PAGEr,(_r._an_x4_unexp_page))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_UNEXP_PAGEr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_UNEXP_PAGEr,(_r._an_x4_unexp_page)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_UNEXP_PAGEr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_UNEXP_PAGEr,(_r._an_x4_unexp_page))
#define BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_UNEXP_PAGEr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_UNEXP_PAGEr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_unexp_page))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_UNEXP_PAGEr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_UNEXP_PAGEr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_unexp_page))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_UNEXP_PAGEr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_UNEXP_PAGEr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_unexp_page))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_UNEXP_PAGEr BCMI_TSCF_GEN3_XGXS_AN_X4_UNEXP_PAGEr
#define AN_X4_UNEXP_PAGEr_SIZE BCMI_TSCF_GEN3_XGXS_AN_X4_UNEXP_PAGEr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X4_UNEXP_PAGEr_t AN_X4_UNEXP_PAGEr_t;
#define AN_X4_UNEXP_PAGEr_CLR BCMI_TSCF_GEN3_XGXS_AN_X4_UNEXP_PAGEr_CLR
#define AN_X4_UNEXP_PAGEr_SET BCMI_TSCF_GEN3_XGXS_AN_X4_UNEXP_PAGEr_SET
#define AN_X4_UNEXP_PAGEr_GET BCMI_TSCF_GEN3_XGXS_AN_X4_UNEXP_PAGEr_GET
#define AN_X4_UNEXP_PAGEr_RX_UNEXPECTED_PAGEf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_UNEXP_PAGEr_RX_UNEXPECTED_PAGEf_GET
#define AN_X4_UNEXP_PAGEr_RX_UNEXPECTED_PAGEf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_UNEXP_PAGEr_RX_UNEXPECTED_PAGEf_SET
#define READ_AN_X4_UNEXP_PAGEr BCMI_TSCF_GEN3_XGXS_READ_AN_X4_UNEXP_PAGEr
#define WRITE_AN_X4_UNEXP_PAGEr BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_UNEXP_PAGEr
#define MODIFY_AN_X4_UNEXP_PAGEr BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_UNEXP_PAGEr
#define READLN_AN_X4_UNEXP_PAGEr BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_UNEXP_PAGEr
#define WRITELN_AN_X4_UNEXP_PAGEr BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_UNEXP_PAGEr
#define WRITEALL_AN_X4_UNEXP_PAGEr BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_UNEXP_PAGEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X4_UNEXP_PAGEr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X4_LP_BASE1
 * BLOCKS:   AN_X4_STATUS
 * REGADDR:  0xc1d5
 * DESC:     PSEQ LP Base page 1 
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     LP_BASE1         PSEQ LP Base page 1.15 -- Next Page14 -- Acknowledge: Value always 0, writes ignored13 -- Remote Fault12 -- some PHY ability11 -- pause10 -- asm_dir09:05 -- echoed nonce04:00 -- S4 S3 S2 S1 S0 Selector description0 0 0 0 0 Reserved for future Auto-Negotiation development0 0 0 0 1 IEEE Std 802.30 0 0 1 0 IEEE Std 802.9 ISLAN-16T0 0 0 1 1 IEEE Std 802.50 0 1 0 0 IEEE Std 13940 0 1 0 1 Reserved for future Auto-Negotiation development0 0 1 1 X Reserved for future Auto-Negotiation development0 1 X X X Reserved for future Auto-Negotiation development1 X X X X Reserved for future Auto-Negotiation developmentFor up-to-date information on the allocation of Auto-Negotiation Selector Fields, visit www.ieee802.org/3/selectors/selectors.html
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE1r (0x0000c1d5 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE1r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_LP_BASE1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE1r_s {
	uint32_t v[1];
	uint32_t an_x4_lp_base1[1];
	uint32_t _an_x4_lp_base1;
} BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE1r_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE1r_CLR(r) (r).an_x4_lp_base1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE1r_SET(r,d) (r).an_x4_lp_base1[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE1r_GET(r) (r).an_x4_lp_base1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE1r_LP_BASE1f_GET(r) (((r).an_x4_lp_base1[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE1r_LP_BASE1f_SET(r,f) (r).an_x4_lp_base1[0]=(((r).an_x4_lp_base1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AN_X4_LP_BASE1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X4_LP_BASE1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE1r,(_r._an_x4_lp_base1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_LP_BASE1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE1r,(_r._an_x4_lp_base1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_LP_BASE1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE1r,(_r._an_x4_lp_base1))
#define BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_LP_BASE1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_lp_base1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_LP_BASE1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_lp_base1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_LP_BASE1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_lp_base1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_LP_BASE1r BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE1r
#define AN_X4_LP_BASE1r_SIZE BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE1r_t AN_X4_LP_BASE1r_t;
#define AN_X4_LP_BASE1r_CLR BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE1r_CLR
#define AN_X4_LP_BASE1r_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE1r_SET
#define AN_X4_LP_BASE1r_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE1r_GET
#define AN_X4_LP_BASE1r_LP_BASE1f_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE1r_LP_BASE1f_GET
#define AN_X4_LP_BASE1r_LP_BASE1f_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE1r_LP_BASE1f_SET
#define READ_AN_X4_LP_BASE1r BCMI_TSCF_GEN3_XGXS_READ_AN_X4_LP_BASE1r
#define WRITE_AN_X4_LP_BASE1r BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_LP_BASE1r
#define MODIFY_AN_X4_LP_BASE1r BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_LP_BASE1r
#define READLN_AN_X4_LP_BASE1r BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_LP_BASE1r
#define WRITELN_AN_X4_LP_BASE1r BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_LP_BASE1r
#define WRITEALL_AN_X4_LP_BASE1r BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_LP_BASE1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X4_LP_BASE2
 * BLOCKS:   AN_X4_STATUS
 * REGADDR:  0xc1d6
 * DESC:     PSEQ LP Base page 2 
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     LP_BASE2         PSEQ LP Base page 2.15:11 Reserved for future10 -- 100G CR109 -- 40G CR48 -- 40G KR47 -- 10G KR6 -- 10G KX45 -- 1G KX04:00 -- transmitted nonce
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE2r (0x0000c1d6 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_LP_BASE2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE2r_s {
	uint32_t v[1];
	uint32_t an_x4_lp_base2[1];
	uint32_t _an_x4_lp_base2;
} BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE2r_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE2r_CLR(r) (r).an_x4_lp_base2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE2r_SET(r,d) (r).an_x4_lp_base2[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE2r_GET(r) (r).an_x4_lp_base2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE2r_LP_BASE2f_GET(r) (((r).an_x4_lp_base2[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE2r_LP_BASE2f_SET(r,f) (r).an_x4_lp_base2[0]=(((r).an_x4_lp_base2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AN_X4_LP_BASE2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X4_LP_BASE2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE2r,(_r._an_x4_lp_base2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_LP_BASE2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE2r,(_r._an_x4_lp_base2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_LP_BASE2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE2r,(_r._an_x4_lp_base2))
#define BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_LP_BASE2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_lp_base2))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_LP_BASE2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_lp_base2))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_LP_BASE2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_lp_base2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_LP_BASE2r BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE2r
#define AN_X4_LP_BASE2r_SIZE BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE2r_t AN_X4_LP_BASE2r_t;
#define AN_X4_LP_BASE2r_CLR BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE2r_CLR
#define AN_X4_LP_BASE2r_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE2r_SET
#define AN_X4_LP_BASE2r_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE2r_GET
#define AN_X4_LP_BASE2r_LP_BASE2f_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE2r_LP_BASE2f_GET
#define AN_X4_LP_BASE2r_LP_BASE2f_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE2r_LP_BASE2f_SET
#define READ_AN_X4_LP_BASE2r BCMI_TSCF_GEN3_XGXS_READ_AN_X4_LP_BASE2r
#define WRITE_AN_X4_LP_BASE2r BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_LP_BASE2r
#define MODIFY_AN_X4_LP_BASE2r BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_LP_BASE2r
#define READLN_AN_X4_LP_BASE2r BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_LP_BASE2r
#define WRITELN_AN_X4_LP_BASE2r BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_LP_BASE2r
#define WRITEALL_AN_X4_LP_BASE2r BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_LP_BASE2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X4_LP_BASE3
 * BLOCKS:   AN_X4_STATUS
 * REGADDR:  0xc1d7
 * DESC:     PSEQ LP Base page 3 
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     LP_BASE3         PSEQ LP Base page 3.15 -- FEC requested14 -- FEC ability13:00 -- Reserved bits must be written with 0. A read returns an unknown value.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE3r (0x0000c1d7 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE3r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_LP_BASE3.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE3r_s {
	uint32_t v[1];
	uint32_t an_x4_lp_base3[1];
	uint32_t _an_x4_lp_base3;
} BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE3r_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE3r_CLR(r) (r).an_x4_lp_base3[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE3r_SET(r,d) (r).an_x4_lp_base3[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE3r_GET(r) (r).an_x4_lp_base3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE3r_LP_BASE3f_GET(r) (((r).an_x4_lp_base3[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE3r_LP_BASE3f_SET(r,f) (r).an_x4_lp_base3[0]=(((r).an_x4_lp_base3[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AN_X4_LP_BASE3.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X4_LP_BASE3r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE3r,(_r._an_x4_lp_base3))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_LP_BASE3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE3r,(_r._an_x4_lp_base3)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_LP_BASE3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE3r,(_r._an_x4_lp_base3))
#define BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_LP_BASE3r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_lp_base3))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_LP_BASE3r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_lp_base3))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_LP_BASE3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE3r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_lp_base3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_LP_BASE3r BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE3r
#define AN_X4_LP_BASE3r_SIZE BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE3r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE3r_t AN_X4_LP_BASE3r_t;
#define AN_X4_LP_BASE3r_CLR BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE3r_CLR
#define AN_X4_LP_BASE3r_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE3r_SET
#define AN_X4_LP_BASE3r_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE3r_GET
#define AN_X4_LP_BASE3r_LP_BASE3f_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE3r_LP_BASE3f_GET
#define AN_X4_LP_BASE3r_LP_BASE3f_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE3r_LP_BASE3f_SET
#define READ_AN_X4_LP_BASE3r BCMI_TSCF_GEN3_XGXS_READ_AN_X4_LP_BASE3r
#define WRITE_AN_X4_LP_BASE3r BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_LP_BASE3r
#define MODIFY_AN_X4_LP_BASE3r BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_LP_BASE3r
#define READLN_AN_X4_LP_BASE3r BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_LP_BASE3r
#define WRITELN_AN_X4_LP_BASE3r BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_LP_BASE3r
#define WRITEALL_AN_X4_LP_BASE3r BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_LP_BASE3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X4_LP_BASE3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X4_LP_OUI_UP1
 * BLOCKS:   AN_X4_STATUS
 * REGADDR:  0xc1d8
 * DESC:     PSEQ LP OUI UP-1 
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     LP_OUI_UP1       10:0 -- OUI MP5 bits 23:1311 -- !(Toggle bit in MP5 page)12 -- Read as 013 -- Read as 014 -- Ack bit in MP5 page15 -- Read as 1
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP1r (0x0000c1d8 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP1r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_LP_OUI_UP1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP1r_s {
	uint32_t v[1];
	uint32_t an_x4_lp_oui_up1[1];
	uint32_t _an_x4_lp_oui_up1;
} BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP1r_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP1r_CLR(r) (r).an_x4_lp_oui_up1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP1r_SET(r,d) (r).an_x4_lp_oui_up1[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP1r_GET(r) (r).an_x4_lp_oui_up1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP1r_LP_OUI_UP1f_GET(r) (((r).an_x4_lp_oui_up1[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP1r_LP_OUI_UP1f_SET(r,f) (r).an_x4_lp_oui_up1[0]=(((r).an_x4_lp_oui_up1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AN_X4_LP_OUI_UP1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X4_LP_OUI_UP1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP1r,(_r._an_x4_lp_oui_up1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_LP_OUI_UP1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP1r,(_r._an_x4_lp_oui_up1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_LP_OUI_UP1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP1r,(_r._an_x4_lp_oui_up1))
#define BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_LP_OUI_UP1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_lp_oui_up1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_LP_OUI_UP1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_lp_oui_up1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_LP_OUI_UP1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_lp_oui_up1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_LP_OUI_UP1r BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP1r
#define AN_X4_LP_OUI_UP1r_SIZE BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP1r_t AN_X4_LP_OUI_UP1r_t;
#define AN_X4_LP_OUI_UP1r_CLR BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP1r_CLR
#define AN_X4_LP_OUI_UP1r_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP1r_SET
#define AN_X4_LP_OUI_UP1r_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP1r_GET
#define AN_X4_LP_OUI_UP1r_LP_OUI_UP1f_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP1r_LP_OUI_UP1f_GET
#define AN_X4_LP_OUI_UP1r_LP_OUI_UP1f_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP1r_LP_OUI_UP1f_SET
#define READ_AN_X4_LP_OUI_UP1r BCMI_TSCF_GEN3_XGXS_READ_AN_X4_LP_OUI_UP1r
#define WRITE_AN_X4_LP_OUI_UP1r BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_LP_OUI_UP1r
#define MODIFY_AN_X4_LP_OUI_UP1r BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_LP_OUI_UP1r
#define READLN_AN_X4_LP_OUI_UP1r BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_LP_OUI_UP1r
#define WRITELN_AN_X4_LP_OUI_UP1r BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_LP_OUI_UP1r
#define WRITEALL_AN_X4_LP_OUI_UP1r BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_LP_OUI_UP1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X4_LP_OUI_UP2
 * BLOCKS:   AN_X4_STATUS
 * REGADDR:  0xc1d9
 * DESC:     PSEQ LP OUI UP-2 
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     LP_OUI_UP2       10:0 -- OUI MP5 bits 12:211 -- (Toggle bit in MP5 page)12 -- Read as 013 -- Read as 014 -- Ack bit in MP5 page15 -- Read as 1
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP2r (0x0000c1d9 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_LP_OUI_UP2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP2r_s {
	uint32_t v[1];
	uint32_t an_x4_lp_oui_up2[1];
	uint32_t _an_x4_lp_oui_up2;
} BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP2r_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP2r_CLR(r) (r).an_x4_lp_oui_up2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP2r_SET(r,d) (r).an_x4_lp_oui_up2[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP2r_GET(r) (r).an_x4_lp_oui_up2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP2r_LP_OUI_UP2f_GET(r) (((r).an_x4_lp_oui_up2[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP2r_LP_OUI_UP2f_SET(r,f) (r).an_x4_lp_oui_up2[0]=(((r).an_x4_lp_oui_up2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AN_X4_LP_OUI_UP2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X4_LP_OUI_UP2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP2r,(_r._an_x4_lp_oui_up2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_LP_OUI_UP2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP2r,(_r._an_x4_lp_oui_up2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_LP_OUI_UP2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP2r,(_r._an_x4_lp_oui_up2))
#define BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_LP_OUI_UP2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_lp_oui_up2))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_LP_OUI_UP2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_lp_oui_up2))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_LP_OUI_UP2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_lp_oui_up2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_LP_OUI_UP2r BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP2r
#define AN_X4_LP_OUI_UP2r_SIZE BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP2r_t AN_X4_LP_OUI_UP2r_t;
#define AN_X4_LP_OUI_UP2r_CLR BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP2r_CLR
#define AN_X4_LP_OUI_UP2r_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP2r_SET
#define AN_X4_LP_OUI_UP2r_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP2r_GET
#define AN_X4_LP_OUI_UP2r_LP_OUI_UP2f_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP2r_LP_OUI_UP2f_GET
#define AN_X4_LP_OUI_UP2r_LP_OUI_UP2f_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP2r_LP_OUI_UP2f_SET
#define READ_AN_X4_LP_OUI_UP2r BCMI_TSCF_GEN3_XGXS_READ_AN_X4_LP_OUI_UP2r
#define WRITE_AN_X4_LP_OUI_UP2r BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_LP_OUI_UP2r
#define MODIFY_AN_X4_LP_OUI_UP2r BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_LP_OUI_UP2r
#define READLN_AN_X4_LP_OUI_UP2r BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_LP_OUI_UP2r
#define WRITELN_AN_X4_LP_OUI_UP2r BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_LP_OUI_UP2r
#define WRITEALL_AN_X4_LP_OUI_UP2r BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_LP_OUI_UP2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X4_LP_OUI_UP3
 * BLOCKS:   AN_X4_STATUS
 * REGADDR:  0xc1da
 * DESC:     PSEQ LP OUI UP-3 
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     LP_OUI_UP3       PSEQ LP OUI UP-3.8:0 -- BAM Code10:9 -- OUI UP1 bits 1:011 -- Toggle bit in UP1 page13:12 -- Read as 014 -- Ack bit in UP1 page15 -- Read as 1
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP3r (0x0000c1da | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP3r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_LP_OUI_UP3.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP3r_s {
	uint32_t v[1];
	uint32_t an_x4_lp_oui_up3[1];
	uint32_t _an_x4_lp_oui_up3;
} BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP3r_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP3r_CLR(r) (r).an_x4_lp_oui_up3[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP3r_SET(r,d) (r).an_x4_lp_oui_up3[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP3r_GET(r) (r).an_x4_lp_oui_up3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP3r_LP_OUI_UP3f_GET(r) (((r).an_x4_lp_oui_up3[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP3r_LP_OUI_UP3f_SET(r,f) (r).an_x4_lp_oui_up3[0]=(((r).an_x4_lp_oui_up3[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AN_X4_LP_OUI_UP3.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X4_LP_OUI_UP3r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP3r,(_r._an_x4_lp_oui_up3))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_LP_OUI_UP3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP3r,(_r._an_x4_lp_oui_up3)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_LP_OUI_UP3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP3r,(_r._an_x4_lp_oui_up3))
#define BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_LP_OUI_UP3r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_lp_oui_up3))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_LP_OUI_UP3r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_lp_oui_up3))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_LP_OUI_UP3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP3r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_lp_oui_up3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_LP_OUI_UP3r BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP3r
#define AN_X4_LP_OUI_UP3r_SIZE BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP3r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP3r_t AN_X4_LP_OUI_UP3r_t;
#define AN_X4_LP_OUI_UP3r_CLR BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP3r_CLR
#define AN_X4_LP_OUI_UP3r_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP3r_SET
#define AN_X4_LP_OUI_UP3r_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP3r_GET
#define AN_X4_LP_OUI_UP3r_LP_OUI_UP3f_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP3r_LP_OUI_UP3f_GET
#define AN_X4_LP_OUI_UP3r_LP_OUI_UP3f_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP3r_LP_OUI_UP3f_SET
#define READ_AN_X4_LP_OUI_UP3r BCMI_TSCF_GEN3_XGXS_READ_AN_X4_LP_OUI_UP3r
#define WRITE_AN_X4_LP_OUI_UP3r BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_LP_OUI_UP3r
#define MODIFY_AN_X4_LP_OUI_UP3r BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_LP_OUI_UP3r
#define READLN_AN_X4_LP_OUI_UP3r BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_LP_OUI_UP3r
#define WRITELN_AN_X4_LP_OUI_UP3r BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_LP_OUI_UP3r
#define WRITEALL_AN_X4_LP_OUI_UP3r BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_LP_OUI_UP3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X4_LP_OUI_UP4
 * BLOCKS:   AN_X4_STATUS
 * REGADDR:  0xc1db
 * DESC:     PSEQ LP OUI UP-4 
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     LP_OUI_UP4       PSEQ LP OUI UP-4.10:0 -- User defined data; 26:16 bits in UP1 page10 -- 26 bits in UP1 page (Reserved)9 -- 25 bits in UP1 page which is SPEED_50G_CR2 in BAM8 -- 24 bits in UP1 page which is SPEED_50G_KR2 in BAM7 -- 23 bits in UP1 page which is SPEED_40G_CR2 in BAM6 -- 22 bits in UP1 page which is SPEED_40G_KR2 in BAM5 -- 21 bits in UP1 page which is SPEED_25G_CR2 in BAM4 -- 20 bits in UP1 page which is SPEED_25G_KR2 in BAM3 -- 19 bits in UP1 page which is SPEED_20G_CR1 in BAM2 -- 18 bits in UP1 page which is SPEED_20G_KR1 in BAM1 -- 17 bits in UP1 page which is SPEED_20G_CR2 in BAM0 -- 16 bits in UP1 page which is SPEED_20G_KR2 in BAM11 -- !(Toggle bit in UP1 page)13:12 -- Read as 014 -- Ack bit in UP1 page15 -- Next page in UP1 ; bit 15 in UP1 page
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP4r (0x0000c1db | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP4r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_LP_OUI_UP4.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP4r_s {
	uint32_t v[1];
	uint32_t an_x4_lp_oui_up4[1];
	uint32_t _an_x4_lp_oui_up4;
} BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP4r_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP4r_CLR(r) (r).an_x4_lp_oui_up4[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP4r_SET(r,d) (r).an_x4_lp_oui_up4[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP4r_GET(r) (r).an_x4_lp_oui_up4[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP4r_LP_OUI_UP4f_GET(r) (((r).an_x4_lp_oui_up4[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP4r_LP_OUI_UP4f_SET(r,f) (r).an_x4_lp_oui_up4[0]=(((r).an_x4_lp_oui_up4[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AN_X4_LP_OUI_UP4.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X4_LP_OUI_UP4r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP4r,(_r._an_x4_lp_oui_up4))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_LP_OUI_UP4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP4r,(_r._an_x4_lp_oui_up4)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_LP_OUI_UP4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP4r,(_r._an_x4_lp_oui_up4))
#define BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_LP_OUI_UP4r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_lp_oui_up4))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_LP_OUI_UP4r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_lp_oui_up4))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_LP_OUI_UP4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP4r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_lp_oui_up4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_LP_OUI_UP4r BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP4r
#define AN_X4_LP_OUI_UP4r_SIZE BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP4r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP4r_t AN_X4_LP_OUI_UP4r_t;
#define AN_X4_LP_OUI_UP4r_CLR BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP4r_CLR
#define AN_X4_LP_OUI_UP4r_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP4r_SET
#define AN_X4_LP_OUI_UP4r_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP4r_GET
#define AN_X4_LP_OUI_UP4r_LP_OUI_UP4f_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP4r_LP_OUI_UP4f_GET
#define AN_X4_LP_OUI_UP4r_LP_OUI_UP4f_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP4r_LP_OUI_UP4f_SET
#define READ_AN_X4_LP_OUI_UP4r BCMI_TSCF_GEN3_XGXS_READ_AN_X4_LP_OUI_UP4r
#define WRITE_AN_X4_LP_OUI_UP4r BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_LP_OUI_UP4r
#define MODIFY_AN_X4_LP_OUI_UP4r BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_LP_OUI_UP4r
#define READLN_AN_X4_LP_OUI_UP4r BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_LP_OUI_UP4r
#define WRITELN_AN_X4_LP_OUI_UP4r BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_LP_OUI_UP4r
#define WRITEALL_AN_X4_LP_OUI_UP4r BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_LP_OUI_UP4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP4r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X4_LP_OUI_UP5
 * BLOCKS:   AN_X4_STATUS
 * REGADDR:  0xc1dc
 * DESC:     PSEQ LP OUI UP-5 
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     LP_OUI_UP5       44:32 bits in UP1 page12 -- 44 bits in UP1 page which is CL74_FEC Request in BAM11 -- 43 bits in UP1 page which is CL91_FEC Request in BAM10 -- 42 bits in UP1 page which is HG2 Enabled in BAM9 --  41 bits in UP1 page which is CL74_FEC ability exist8 --  40 bits in UP1 page which is CL91_FEC ability exist7:2 --  39 to 34 bits in UP1 page which reserved1 --  33 bits in UP1 page which is SPEED_50G_CR4 in BAM0 --  32 bits in UP1 page which is SPEED_50G_KR4 in BAM
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP5r (0x0000c1dc | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP5r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_LP_OUI_UP5.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP5r_s {
	uint32_t v[1];
	uint32_t an_x4_lp_oui_up5[1];
	uint32_t _an_x4_lp_oui_up5;
} BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP5r_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP5r_CLR(r) (r).an_x4_lp_oui_up5[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP5r_SET(r,d) (r).an_x4_lp_oui_up5[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP5r_GET(r) (r).an_x4_lp_oui_up5[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP5r_LP_OUI_UP5f_GET(r) (((r).an_x4_lp_oui_up5[0]) & 0x1fff)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP5r_LP_OUI_UP5f_SET(r,f) (r).an_x4_lp_oui_up5[0]=(((r).an_x4_lp_oui_up5[0] & ~((uint32_t)0x1fff)) | (((uint32_t)f) & 0x1fff)) | (0x1fff << 16)

/*
 * These macros can be used to access AN_X4_LP_OUI_UP5.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X4_LP_OUI_UP5r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP5r,(_r._an_x4_lp_oui_up5))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_LP_OUI_UP5r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP5r,(_r._an_x4_lp_oui_up5)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_LP_OUI_UP5r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP5r,(_r._an_x4_lp_oui_up5))
#define BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_LP_OUI_UP5r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP5r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_lp_oui_up5))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_LP_OUI_UP5r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP5r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_lp_oui_up5))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_LP_OUI_UP5r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP5r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_lp_oui_up5))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_LP_OUI_UP5r BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP5r
#define AN_X4_LP_OUI_UP5r_SIZE BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP5r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP5r_t AN_X4_LP_OUI_UP5r_t;
#define AN_X4_LP_OUI_UP5r_CLR BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP5r_CLR
#define AN_X4_LP_OUI_UP5r_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP5r_SET
#define AN_X4_LP_OUI_UP5r_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP5r_GET
#define AN_X4_LP_OUI_UP5r_LP_OUI_UP5f_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP5r_LP_OUI_UP5f_GET
#define AN_X4_LP_OUI_UP5r_LP_OUI_UP5f_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP5r_LP_OUI_UP5f_SET
#define READ_AN_X4_LP_OUI_UP5r BCMI_TSCF_GEN3_XGXS_READ_AN_X4_LP_OUI_UP5r
#define WRITE_AN_X4_LP_OUI_UP5r BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_LP_OUI_UP5r
#define MODIFY_AN_X4_LP_OUI_UP5r BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_LP_OUI_UP5r
#define READLN_AN_X4_LP_OUI_UP5r BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_LP_OUI_UP5r
#define WRITELN_AN_X4_LP_OUI_UP5r BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_LP_OUI_UP5r
#define WRITEALL_AN_X4_LP_OUI_UP5r BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_LP_OUI_UP5r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X4_LP_OUI_UP5r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X4_RES_ERR
 * BLOCKS:   AN_X4_STATUS
 * REGADDR:  0xc1dd
 * DESC:     RES ERR
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     RESOLUTION_ERROR RES No common speed/mode.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_RES_ERRr (0x0000c1dd | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X4_RES_ERRr_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_RES_ERR.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X4_RES_ERRr_s {
	uint32_t v[1];
	uint32_t an_x4_res_err[1];
	uint32_t _an_x4_res_err;
} BCMI_TSCF_GEN3_XGXS_AN_X4_RES_ERRr_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X4_RES_ERRr_CLR(r) (r).an_x4_res_err[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X4_RES_ERRr_SET(r,d) (r).an_x4_res_err[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X4_RES_ERRr_GET(r) (r).an_x4_res_err[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_RES_ERRr_RESOLUTION_ERRORf_GET(r) (((r).an_x4_res_err[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_RES_ERRr_RESOLUTION_ERRORf_SET(r,f) (r).an_x4_res_err[0]=(((r).an_x4_res_err[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AN_X4_RES_ERR.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X4_RES_ERRr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_RES_ERRr,(_r._an_x4_res_err))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_RES_ERRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_RES_ERRr,(_r._an_x4_res_err)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_RES_ERRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_RES_ERRr,(_r._an_x4_res_err))
#define BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_RES_ERRr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_RES_ERRr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_res_err))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_RES_ERRr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_RES_ERRr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_res_err))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_RES_ERRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_RES_ERRr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_res_err))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_RES_ERRr BCMI_TSCF_GEN3_XGXS_AN_X4_RES_ERRr
#define AN_X4_RES_ERRr_SIZE BCMI_TSCF_GEN3_XGXS_AN_X4_RES_ERRr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X4_RES_ERRr_t AN_X4_RES_ERRr_t;
#define AN_X4_RES_ERRr_CLR BCMI_TSCF_GEN3_XGXS_AN_X4_RES_ERRr_CLR
#define AN_X4_RES_ERRr_SET BCMI_TSCF_GEN3_XGXS_AN_X4_RES_ERRr_SET
#define AN_X4_RES_ERRr_GET BCMI_TSCF_GEN3_XGXS_AN_X4_RES_ERRr_GET
#define AN_X4_RES_ERRr_RESOLUTION_ERRORf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_RES_ERRr_RESOLUTION_ERRORf_GET
#define AN_X4_RES_ERRr_RESOLUTION_ERRORf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_RES_ERRr_RESOLUTION_ERRORf_SET
#define READ_AN_X4_RES_ERRr BCMI_TSCF_GEN3_XGXS_READ_AN_X4_RES_ERRr
#define WRITE_AN_X4_RES_ERRr BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_RES_ERRr
#define MODIFY_AN_X4_RES_ERRr BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_RES_ERRr
#define READLN_AN_X4_RES_ERRr BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_RES_ERRr
#define WRITELN_AN_X4_RES_ERRr BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_RES_ERRr
#define WRITEALL_AN_X4_RES_ERRr BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_RES_ERRr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X4_RES_ERRr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X4_LD_PAGE2
 * BLOCKS:   AN_X4_SW_MGMT
 * REGADDR:  0xc1e0
 * DESC:     LOCAL DEVICE SW CONTROL PAGE 2
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LD_PAGE_2        LOCAL DEVICE PAGE 2 FIELD
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE2r (0x0000c1e0 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_LD_PAGE2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE2r_s {
	uint32_t v[1];
	uint32_t an_x4_ld_page2[1];
	uint32_t _an_x4_ld_page2;
} BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE2r_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE2r_CLR(r) (r).an_x4_ld_page2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE2r_SET(r,d) (r).an_x4_ld_page2[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE2r_GET(r) (r).an_x4_ld_page2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE2r_LD_PAGE_2f_GET(r) (((r).an_x4_ld_page2[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE2r_LD_PAGE_2f_SET(r,f) (r).an_x4_ld_page2[0]=(((r).an_x4_ld_page2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AN_X4_LD_PAGE2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X4_LD_PAGE2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE2r,(_r._an_x4_ld_page2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_LD_PAGE2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE2r,(_r._an_x4_ld_page2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_LD_PAGE2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE2r,(_r._an_x4_ld_page2))
#define BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_LD_PAGE2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_page2))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_LD_PAGE2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_page2))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_LD_PAGE2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_ld_page2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_LD_PAGE2r BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE2r
#define AN_X4_LD_PAGE2r_SIZE BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE2r_t AN_X4_LD_PAGE2r_t;
#define AN_X4_LD_PAGE2r_CLR BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE2r_CLR
#define AN_X4_LD_PAGE2r_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE2r_SET
#define AN_X4_LD_PAGE2r_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE2r_GET
#define AN_X4_LD_PAGE2r_LD_PAGE_2f_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE2r_LD_PAGE_2f_GET
#define AN_X4_LD_PAGE2r_LD_PAGE_2f_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE2r_LD_PAGE_2f_SET
#define READ_AN_X4_LD_PAGE2r BCMI_TSCF_GEN3_XGXS_READ_AN_X4_LD_PAGE2r
#define WRITE_AN_X4_LD_PAGE2r BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_LD_PAGE2r
#define MODIFY_AN_X4_LD_PAGE2r BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_LD_PAGE2r
#define READLN_AN_X4_LD_PAGE2r BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_LD_PAGE2r
#define WRITELN_AN_X4_LD_PAGE2r BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_LD_PAGE2r
#define WRITEALL_AN_X4_LD_PAGE2r BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_LD_PAGE2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X4_LD_PAGE1
 * BLOCKS:   AN_X4_SW_MGMT
 * REGADDR:  0xc1e1
 * DESC:     LOCAL DEVICE SW CONTROL PAGE 1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LD_PAGE_1        LOCAL DEVICE PAGE 1 FIELD
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE1r (0x0000c1e1 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE1r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_LD_PAGE1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE1r_s {
	uint32_t v[1];
	uint32_t an_x4_ld_page1[1];
	uint32_t _an_x4_ld_page1;
} BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE1r_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE1r_CLR(r) (r).an_x4_ld_page1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE1r_SET(r,d) (r).an_x4_ld_page1[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE1r_GET(r) (r).an_x4_ld_page1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE1r_LD_PAGE_1f_GET(r) (((r).an_x4_ld_page1[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE1r_LD_PAGE_1f_SET(r,f) (r).an_x4_ld_page1[0]=(((r).an_x4_ld_page1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AN_X4_LD_PAGE1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X4_LD_PAGE1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE1r,(_r._an_x4_ld_page1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_LD_PAGE1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE1r,(_r._an_x4_ld_page1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_LD_PAGE1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE1r,(_r._an_x4_ld_page1))
#define BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_LD_PAGE1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_page1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_LD_PAGE1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_page1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_LD_PAGE1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_ld_page1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_LD_PAGE1r BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE1r
#define AN_X4_LD_PAGE1r_SIZE BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE1r_t AN_X4_LD_PAGE1r_t;
#define AN_X4_LD_PAGE1r_CLR BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE1r_CLR
#define AN_X4_LD_PAGE1r_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE1r_SET
#define AN_X4_LD_PAGE1r_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE1r_GET
#define AN_X4_LD_PAGE1r_LD_PAGE_1f_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE1r_LD_PAGE_1f_GET
#define AN_X4_LD_PAGE1r_LD_PAGE_1f_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE1r_LD_PAGE_1f_SET
#define READ_AN_X4_LD_PAGE1r BCMI_TSCF_GEN3_XGXS_READ_AN_X4_LD_PAGE1r
#define WRITE_AN_X4_LD_PAGE1r BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_LD_PAGE1r
#define MODIFY_AN_X4_LD_PAGE1r BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_LD_PAGE1r
#define READLN_AN_X4_LD_PAGE1r BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_LD_PAGE1r
#define WRITELN_AN_X4_LD_PAGE1r BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_LD_PAGE1r
#define WRITEALL_AN_X4_LD_PAGE1r BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_LD_PAGE1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X4_LD_PAGE0
 * BLOCKS:   AN_X4_SW_MGMT
 * REGADDR:  0xc1e2
 * DESC:     LOCAL DEVICE SW CONTROL PAGE 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LD_PAGE_0        LOCAL DEVICE PAGE 0 FIELD
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE0r (0x0000c1e2 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE0r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_LD_PAGE0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE0r_s {
	uint32_t v[1];
	uint32_t an_x4_ld_page0[1];
	uint32_t _an_x4_ld_page0;
} BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE0r_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE0r_CLR(r) (r).an_x4_ld_page0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE0r_SET(r,d) (r).an_x4_ld_page0[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE0r_GET(r) (r).an_x4_ld_page0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE0r_LD_PAGE_0f_GET(r) (((r).an_x4_ld_page0[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE0r_LD_PAGE_0f_SET(r,f) (r).an_x4_ld_page0[0]=(((r).an_x4_ld_page0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AN_X4_LD_PAGE0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X4_LD_PAGE0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE0r,(_r._an_x4_ld_page0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_LD_PAGE0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE0r,(_r._an_x4_ld_page0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_LD_PAGE0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE0r,(_r._an_x4_ld_page0))
#define BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_LD_PAGE0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_page0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_LD_PAGE0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_page0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_LD_PAGE0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_ld_page0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_LD_PAGE0r BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE0r
#define AN_X4_LD_PAGE0r_SIZE BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE0r_t AN_X4_LD_PAGE0r_t;
#define AN_X4_LD_PAGE0r_CLR BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE0r_CLR
#define AN_X4_LD_PAGE0r_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE0r_SET
#define AN_X4_LD_PAGE0r_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE0r_GET
#define AN_X4_LD_PAGE0r_LD_PAGE_0f_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE0r_LD_PAGE_0f_GET
#define AN_X4_LD_PAGE0r_LD_PAGE_0f_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE0r_LD_PAGE_0f_SET
#define READ_AN_X4_LD_PAGE0r BCMI_TSCF_GEN3_XGXS_READ_AN_X4_LD_PAGE0r
#define WRITE_AN_X4_LD_PAGE0r BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_LD_PAGE0r
#define MODIFY_AN_X4_LD_PAGE0r BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_LD_PAGE0r
#define READLN_AN_X4_LD_PAGE0r BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_LD_PAGE0r
#define WRITELN_AN_X4_LD_PAGE0r BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_LD_PAGE0r
#define WRITEALL_AN_X4_LD_PAGE0r BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_LD_PAGE0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X4_LD_PAGE0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X4_LP_PAGE2
 * BLOCKS:   AN_X4_SW_MGMT
 * REGADDR:  0xc1e3
 * DESC:     LINK PARNTER SW CONTROL PAGE 2
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     LP_PAGE_2        LINK PARTNER PAGE 2 FIELD
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE2r (0x0000c1e3 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_LP_PAGE2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE2r_s {
	uint32_t v[1];
	uint32_t an_x4_lp_page2[1];
	uint32_t _an_x4_lp_page2;
} BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE2r_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE2r_CLR(r) (r).an_x4_lp_page2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE2r_SET(r,d) (r).an_x4_lp_page2[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE2r_GET(r) (r).an_x4_lp_page2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE2r_LP_PAGE_2f_GET(r) (((r).an_x4_lp_page2[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE2r_LP_PAGE_2f_SET(r,f) (r).an_x4_lp_page2[0]=(((r).an_x4_lp_page2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AN_X4_LP_PAGE2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X4_LP_PAGE2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE2r,(_r._an_x4_lp_page2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_LP_PAGE2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE2r,(_r._an_x4_lp_page2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_LP_PAGE2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE2r,(_r._an_x4_lp_page2))
#define BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_LP_PAGE2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_lp_page2))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_LP_PAGE2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_lp_page2))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_LP_PAGE2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_lp_page2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_LP_PAGE2r BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE2r
#define AN_X4_LP_PAGE2r_SIZE BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE2r_t AN_X4_LP_PAGE2r_t;
#define AN_X4_LP_PAGE2r_CLR BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE2r_CLR
#define AN_X4_LP_PAGE2r_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE2r_SET
#define AN_X4_LP_PAGE2r_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE2r_GET
#define AN_X4_LP_PAGE2r_LP_PAGE_2f_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE2r_LP_PAGE_2f_GET
#define AN_X4_LP_PAGE2r_LP_PAGE_2f_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE2r_LP_PAGE_2f_SET
#define READ_AN_X4_LP_PAGE2r BCMI_TSCF_GEN3_XGXS_READ_AN_X4_LP_PAGE2r
#define WRITE_AN_X4_LP_PAGE2r BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_LP_PAGE2r
#define MODIFY_AN_X4_LP_PAGE2r BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_LP_PAGE2r
#define READLN_AN_X4_LP_PAGE2r BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_LP_PAGE2r
#define WRITELN_AN_X4_LP_PAGE2r BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_LP_PAGE2r
#define WRITEALL_AN_X4_LP_PAGE2r BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_LP_PAGE2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X4_LP_PAGE1
 * BLOCKS:   AN_X4_SW_MGMT
 * REGADDR:  0xc1e4
 * DESC:     LINK PARNTER SW CONTROL PAGE 1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     LP_PAGE_1        LINK PARTNER PAGE 1 FIELD
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE1r (0x0000c1e4 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE1r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_LP_PAGE1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE1r_s {
	uint32_t v[1];
	uint32_t an_x4_lp_page1[1];
	uint32_t _an_x4_lp_page1;
} BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE1r_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE1r_CLR(r) (r).an_x4_lp_page1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE1r_SET(r,d) (r).an_x4_lp_page1[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE1r_GET(r) (r).an_x4_lp_page1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE1r_LP_PAGE_1f_GET(r) (((r).an_x4_lp_page1[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE1r_LP_PAGE_1f_SET(r,f) (r).an_x4_lp_page1[0]=(((r).an_x4_lp_page1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AN_X4_LP_PAGE1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X4_LP_PAGE1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE1r,(_r._an_x4_lp_page1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_LP_PAGE1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE1r,(_r._an_x4_lp_page1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_LP_PAGE1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE1r,(_r._an_x4_lp_page1))
#define BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_LP_PAGE1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_lp_page1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_LP_PAGE1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_lp_page1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_LP_PAGE1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_lp_page1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_LP_PAGE1r BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE1r
#define AN_X4_LP_PAGE1r_SIZE BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE1r_t AN_X4_LP_PAGE1r_t;
#define AN_X4_LP_PAGE1r_CLR BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE1r_CLR
#define AN_X4_LP_PAGE1r_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE1r_SET
#define AN_X4_LP_PAGE1r_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE1r_GET
#define AN_X4_LP_PAGE1r_LP_PAGE_1f_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE1r_LP_PAGE_1f_GET
#define AN_X4_LP_PAGE1r_LP_PAGE_1f_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE1r_LP_PAGE_1f_SET
#define READ_AN_X4_LP_PAGE1r BCMI_TSCF_GEN3_XGXS_READ_AN_X4_LP_PAGE1r
#define WRITE_AN_X4_LP_PAGE1r BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_LP_PAGE1r
#define MODIFY_AN_X4_LP_PAGE1r BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_LP_PAGE1r
#define READLN_AN_X4_LP_PAGE1r BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_LP_PAGE1r
#define WRITELN_AN_X4_LP_PAGE1r BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_LP_PAGE1r
#define WRITEALL_AN_X4_LP_PAGE1r BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_LP_PAGE1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X4_LP_PAGE0
 * BLOCKS:   AN_X4_SW_MGMT
 * REGADDR:  0xc1e5
 * DESC:     LINK PARNTER SW CONTROL PAGE 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     LP_PAGE_0        LINK PARTNER PAGE 0 FIELD
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE0r (0x0000c1e5 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE0r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_LP_PAGE0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE0r_s {
	uint32_t v[1];
	uint32_t an_x4_lp_page0[1];
	uint32_t _an_x4_lp_page0;
} BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE0r_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE0r_CLR(r) (r).an_x4_lp_page0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE0r_SET(r,d) (r).an_x4_lp_page0[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE0r_GET(r) (r).an_x4_lp_page0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE0r_LP_PAGE_0f_GET(r) (((r).an_x4_lp_page0[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE0r_LP_PAGE_0f_SET(r,f) (r).an_x4_lp_page0[0]=(((r).an_x4_lp_page0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AN_X4_LP_PAGE0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X4_LP_PAGE0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE0r,(_r._an_x4_lp_page0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_LP_PAGE0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE0r,(_r._an_x4_lp_page0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_LP_PAGE0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE0r,(_r._an_x4_lp_page0))
#define BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_LP_PAGE0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_lp_page0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_LP_PAGE0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_lp_page0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_LP_PAGE0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_lp_page0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_LP_PAGE0r BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE0r
#define AN_X4_LP_PAGE0r_SIZE BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE0r_t AN_X4_LP_PAGE0r_t;
#define AN_X4_LP_PAGE0r_CLR BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE0r_CLR
#define AN_X4_LP_PAGE0r_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE0r_SET
#define AN_X4_LP_PAGE0r_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE0r_GET
#define AN_X4_LP_PAGE0r_LP_PAGE_0f_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE0r_LP_PAGE_0f_GET
#define AN_X4_LP_PAGE0r_LP_PAGE_0f_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE0r_LP_PAGE_0f_SET
#define READ_AN_X4_LP_PAGE0r BCMI_TSCF_GEN3_XGXS_READ_AN_X4_LP_PAGE0r
#define WRITE_AN_X4_LP_PAGE0r BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_LP_PAGE0r
#define MODIFY_AN_X4_LP_PAGE0r BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_LP_PAGE0r
#define READLN_AN_X4_LP_PAGE0r BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_LP_PAGE0r
#define WRITELN_AN_X4_LP_PAGE0r BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_LP_PAGE0r
#define WRITEALL_AN_X4_LP_PAGE0r BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_LP_PAGE0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X4_LP_PAGE0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X4_SW_CTL_STS
 * BLOCKS:   AN_X4_SW_MGMT
 * REGADDR:  0xc1e6
 * DESC:     SW CONTROL STATUS INFORMATION
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TLA_LN_SEQUENCER_FSM_STATUS1 TLA Lane sequencer fsm latched status cont.
 *     PD_CL37_COMPLETED Parallel detect process has selected cl37 and it was completed.
 *     PD_SPEED_STATUS_1 Gen1 & Gen2 : Reserved.Gen3 : Speed status for PD attempt. Use this bit as MSBit of 2bit PD speed indication. LSBit is an_misc_status.pd_speed_status_02'b00: undefined, 2'b01: KX, 2'b10: 2p5G, 2'b11: undefined
 *     LD_SEQ_RESTART   Set by HW when the CL73 AN FSM enters the TX_DISABLE state.It indicates to SW that it has to restart the page sequence from the base page.Valid when ld_page_req is set.
 *     LP_PAGE_RDY      Set by HW, Clear on Read of lp_page_0
 *     LD_PAGE_REQ      Set by HW to indicate that is ready for page to be sent.
 *     LD_CONTROL_VALID Set by SW write to ld_page_0, Cleared when HW transfers the ld_page'sreflects internal status and used for debug
 *     AN_COMPLETED     All page exchanges have completed
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_SW_CTL_STSr (0x0000c1e6 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X4_SW_CTL_STSr_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_SW_CTL_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X4_SW_CTL_STSr_s {
	uint32_t v[1];
	uint32_t an_x4_sw_ctl_sts[1];
	uint32_t _an_x4_sw_ctl_sts;
} BCMI_TSCF_GEN3_XGXS_AN_X4_SW_CTL_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X4_SW_CTL_STSr_CLR(r) (r).an_x4_sw_ctl_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X4_SW_CTL_STSr_SET(r,d) (r).an_x4_sw_ctl_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X4_SW_CTL_STSr_GET(r) (r).an_x4_sw_ctl_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_SW_CTL_STSr_AN_COMPLETEDf_GET(r) ((((r).an_x4_sw_ctl_sts[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_SW_CTL_STSr_AN_COMPLETEDf_SET(r,f) (r).an_x4_sw_ctl_sts[0]=(((r).an_x4_sw_ctl_sts[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_SW_CTL_STSr_LD_CONTROL_VALIDf_GET(r) ((((r).an_x4_sw_ctl_sts[0]) >> 14) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_SW_CTL_STSr_LD_CONTROL_VALIDf_SET(r,f) (r).an_x4_sw_ctl_sts[0]=(((r).an_x4_sw_ctl_sts[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_SW_CTL_STSr_LD_PAGE_REQf_GET(r) ((((r).an_x4_sw_ctl_sts[0]) >> 13) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_SW_CTL_STSr_LD_PAGE_REQf_SET(r,f) (r).an_x4_sw_ctl_sts[0]=(((r).an_x4_sw_ctl_sts[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_SW_CTL_STSr_LP_PAGE_RDYf_GET(r) ((((r).an_x4_sw_ctl_sts[0]) >> 12) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_SW_CTL_STSr_LP_PAGE_RDYf_SET(r,f) (r).an_x4_sw_ctl_sts[0]=(((r).an_x4_sw_ctl_sts[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_SW_CTL_STSr_LD_SEQ_RESTARTf_GET(r) ((((r).an_x4_sw_ctl_sts[0]) >> 11) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_SW_CTL_STSr_LD_SEQ_RESTARTf_SET(r,f) (r).an_x4_sw_ctl_sts[0]=(((r).an_x4_sw_ctl_sts[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_SW_CTL_STSr_PD_SPEED_STATUS_1f_GET(r) ((((r).an_x4_sw_ctl_sts[0]) >> 9) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_SW_CTL_STSr_PD_SPEED_STATUS_1f_SET(r,f) (r).an_x4_sw_ctl_sts[0]=(((r).an_x4_sw_ctl_sts[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_SW_CTL_STSr_PD_CL37_COMPLETEDf_GET(r) ((((r).an_x4_sw_ctl_sts[0]) >> 8) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_SW_CTL_STSr_PD_CL37_COMPLETEDf_SET(r,f) (r).an_x4_sw_ctl_sts[0]=(((r).an_x4_sw_ctl_sts[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_SW_CTL_STSr_TLA_LN_SEQUENCER_FSM_STATUS1f_GET(r) (((r).an_x4_sw_ctl_sts[0]) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_SW_CTL_STSr_TLA_LN_SEQUENCER_FSM_STATUS1f_SET(r,f) (r).an_x4_sw_ctl_sts[0]=(((r).an_x4_sw_ctl_sts[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access AN_X4_SW_CTL_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X4_SW_CTL_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_SW_CTL_STSr,(_r._an_x4_sw_ctl_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_SW_CTL_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_SW_CTL_STSr,(_r._an_x4_sw_ctl_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_SW_CTL_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_SW_CTL_STSr,(_r._an_x4_sw_ctl_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_SW_CTL_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_SW_CTL_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_sw_ctl_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_SW_CTL_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_SW_CTL_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_sw_ctl_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_SW_CTL_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_SW_CTL_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_sw_ctl_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_SW_CTL_STSr BCMI_TSCF_GEN3_XGXS_AN_X4_SW_CTL_STSr
#define AN_X4_SW_CTL_STSr_SIZE BCMI_TSCF_GEN3_XGXS_AN_X4_SW_CTL_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X4_SW_CTL_STSr_t AN_X4_SW_CTL_STSr_t;
#define AN_X4_SW_CTL_STSr_CLR BCMI_TSCF_GEN3_XGXS_AN_X4_SW_CTL_STSr_CLR
#define AN_X4_SW_CTL_STSr_SET BCMI_TSCF_GEN3_XGXS_AN_X4_SW_CTL_STSr_SET
#define AN_X4_SW_CTL_STSr_GET BCMI_TSCF_GEN3_XGXS_AN_X4_SW_CTL_STSr_GET
#define AN_X4_SW_CTL_STSr_AN_COMPLETEDf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_SW_CTL_STSr_AN_COMPLETEDf_GET
#define AN_X4_SW_CTL_STSr_AN_COMPLETEDf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_SW_CTL_STSr_AN_COMPLETEDf_SET
#define AN_X4_SW_CTL_STSr_LD_CONTROL_VALIDf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_SW_CTL_STSr_LD_CONTROL_VALIDf_GET
#define AN_X4_SW_CTL_STSr_LD_CONTROL_VALIDf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_SW_CTL_STSr_LD_CONTROL_VALIDf_SET
#define AN_X4_SW_CTL_STSr_LD_PAGE_REQf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_SW_CTL_STSr_LD_PAGE_REQf_GET
#define AN_X4_SW_CTL_STSr_LD_PAGE_REQf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_SW_CTL_STSr_LD_PAGE_REQf_SET
#define AN_X4_SW_CTL_STSr_LP_PAGE_RDYf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_SW_CTL_STSr_LP_PAGE_RDYf_GET
#define AN_X4_SW_CTL_STSr_LP_PAGE_RDYf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_SW_CTL_STSr_LP_PAGE_RDYf_SET
#define AN_X4_SW_CTL_STSr_LD_SEQ_RESTARTf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_SW_CTL_STSr_LD_SEQ_RESTARTf_GET
#define AN_X4_SW_CTL_STSr_LD_SEQ_RESTARTf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_SW_CTL_STSr_LD_SEQ_RESTARTf_SET
#define AN_X4_SW_CTL_STSr_PD_SPEED_STATUS_1f_GET BCMI_TSCF_GEN3_XGXS_AN_X4_SW_CTL_STSr_PD_SPEED_STATUS_1f_GET
#define AN_X4_SW_CTL_STSr_PD_SPEED_STATUS_1f_SET BCMI_TSCF_GEN3_XGXS_AN_X4_SW_CTL_STSr_PD_SPEED_STATUS_1f_SET
#define AN_X4_SW_CTL_STSr_PD_CL37_COMPLETEDf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_SW_CTL_STSr_PD_CL37_COMPLETEDf_GET
#define AN_X4_SW_CTL_STSr_PD_CL37_COMPLETEDf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_SW_CTL_STSr_PD_CL37_COMPLETEDf_SET
#define AN_X4_SW_CTL_STSr_TLA_LN_SEQUENCER_FSM_STATUS1f_GET BCMI_TSCF_GEN3_XGXS_AN_X4_SW_CTL_STSr_TLA_LN_SEQUENCER_FSM_STATUS1f_GET
#define AN_X4_SW_CTL_STSr_TLA_LN_SEQUENCER_FSM_STATUS1f_SET BCMI_TSCF_GEN3_XGXS_AN_X4_SW_CTL_STSr_TLA_LN_SEQUENCER_FSM_STATUS1f_SET
#define READ_AN_X4_SW_CTL_STSr BCMI_TSCF_GEN3_XGXS_READ_AN_X4_SW_CTL_STSr
#define WRITE_AN_X4_SW_CTL_STSr BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_SW_CTL_STSr
#define MODIFY_AN_X4_SW_CTL_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_SW_CTL_STSr
#define READLN_AN_X4_SW_CTL_STSr BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_SW_CTL_STSr
#define WRITELN_AN_X4_SW_CTL_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_SW_CTL_STSr
#define WRITEALL_AN_X4_SW_CTL_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_SW_CTL_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X4_SW_CTL_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X4_LD_CTL
 * BLOCKS:   AN_X4_SW_MGMT
 * REGADDR:  0xc1e7
 * DESC:     LOCAL DEVICE CONTROLS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AN_HCD_RES_DISABLE Indicates HW does not perform HCD
 *     AN_TYPE_SW       Indicates SW managed AN
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_CTLr (0x0000c1e7 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_CTLr_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_LD_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X4_LD_CTLr_s {
	uint32_t v[1];
	uint32_t an_x4_ld_ctl[1];
	uint32_t _an_x4_ld_ctl;
} BCMI_TSCF_GEN3_XGXS_AN_X4_LD_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_CTLr_CLR(r) (r).an_x4_ld_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_CTLr_SET(r,d) (r).an_x4_ld_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_CTLr_GET(r) (r).an_x4_ld_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_CTLr_AN_TYPE_SWf_GET(r) ((((r).an_x4_ld_ctl[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_CTLr_AN_TYPE_SWf_SET(r,f) (r).an_x4_ld_ctl[0]=(((r).an_x4_ld_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_CTLr_AN_HCD_RES_DISABLEf_GET(r) (((r).an_x4_ld_ctl[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_LD_CTLr_AN_HCD_RES_DISABLEf_SET(r,f) (r).an_x4_ld_ctl[0]=(((r).an_x4_ld_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AN_X4_LD_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X4_LD_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_CTLr,(_r._an_x4_ld_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_LD_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_CTLr,(_r._an_x4_ld_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_LD_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_CTLr,(_r._an_x4_ld_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_LD_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_LD_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_LD_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_LD_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_ld_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_LD_CTLr BCMI_TSCF_GEN3_XGXS_AN_X4_LD_CTLr
#define AN_X4_LD_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_AN_X4_LD_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X4_LD_CTLr_t AN_X4_LD_CTLr_t;
#define AN_X4_LD_CTLr_CLR BCMI_TSCF_GEN3_XGXS_AN_X4_LD_CTLr_CLR
#define AN_X4_LD_CTLr_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_CTLr_SET
#define AN_X4_LD_CTLr_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_CTLr_GET
#define AN_X4_LD_CTLr_AN_TYPE_SWf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_CTLr_AN_TYPE_SWf_GET
#define AN_X4_LD_CTLr_AN_TYPE_SWf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_CTLr_AN_TYPE_SWf_SET
#define AN_X4_LD_CTLr_AN_HCD_RES_DISABLEf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_CTLr_AN_HCD_RES_DISABLEf_GET
#define AN_X4_LD_CTLr_AN_HCD_RES_DISABLEf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_LD_CTLr_AN_HCD_RES_DISABLEf_SET
#define READ_AN_X4_LD_CTLr BCMI_TSCF_GEN3_XGXS_READ_AN_X4_LD_CTLr
#define WRITE_AN_X4_LD_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_LD_CTLr
#define MODIFY_AN_X4_LD_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_LD_CTLr
#define READLN_AN_X4_LD_CTLr BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_LD_CTLr
#define WRITELN_AN_X4_LD_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_LD_CTLr
#define WRITEALL_AN_X4_LD_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_LD_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X4_LD_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X4_AN_ABIL_RESOLUTION_STS
 * BLOCKS:   AN_X4_SW_MGMT
 * REGADDR:  0xc1e8
 * DESC:     AN ABILITY RESOLUTION INFORMATION
 * RESETVAL: 0x120 (288)
 * ACCESS:   R/O
 * FIELDS:
 *     AN_HCD_CL72      HCD training ability
 *     AN_HCD_FEC       HCD forward-error correction ability
 *     AN_HCD_SPEED     HCD speedSPEED_10G_KR1       8'h01SPEED_10G_HG2_KR1   8'h05SPEED_20G_CR1       8'h08SPEED_20G_HG2_CR1   8'h0cSPEED_20G_KR1       8'h09SPEED_20G_HG2_KR1   8'h0dSPEED_25G_CR1       8'h10SPEED_25G_HG2_CR1   8'h14SPEED_25G_KR1       8'h11SPEED_25G_HG2_KR1   8'h15SPEED_20G_CR2       8'h18SPEED_20G_HG2_CR2   8'h1cSPEED_20G_KR2       8'h19SPEED_20G_HG2_KR2   8'h1dSPEED_40G_CR2       8'h20SPEED_40G_HG2_CR2   8'h24SPEED_40G_KR2       8'h21SPEED_40G_HG2_KR2   8'h25SPEED_40G_CR4       8'h28SPEED_40G_HG2_CR4   8'h2cSPEED_40G_KR4       8'h29SPEED_40G_HG2_KR4   8'h2dSPEED_50G_CR2       8'h30SPEED_50G_HG2_CR2   8'h34SPEED_50G_KR2       8'h31SPEED_50G_HG2_KR2   8'h35SPEED_50G_CR4       8'h38SPEED_50G_HG2_CR4   8'h3cSPEED_50G_KR4       8'h39SPEED_50G_HG2_KR4   8'h3DSPEED_100G_CR4      8'h40SPEED_100G_HG2_CR4  8'h44SPEED_100G_KR4      8'h41SPEED_100G_HG2_KR4  8'h45SPEED_CL73_20GVCO   8'h48SPEED_CL73_25GVCO   8'h50SPEED_1G_20GVCO     8'h58SPEED_1G_25GVCO     8'h60SPEED_2P5G_KX1      8'h62SPEED_5G_KR1        8'h63SPEED_25G_CR_IEEE   8'h70SPEED_25G_CRS_IEEE  8'h71SPEED_25G_KR_IEEE   8'h72SPEED_25G_KRS_IEEE  8'h73
 *     AN_HCD_PAUSE     HCD Pause Ability[11:10]00 - None01 - TX (from LD to LP)10 - RX (from LP to LD)11 - TX/RX (symmetrical)
 *     AN_HCD_DUPLEX    HCD full-duplex ability
 *     HCD_CL91_EN      Resolved HCD CL91 ability for 25G/50G
 *     HCD_DBG_CL74_UP_EN Resolved HCD CL74 ability for 25G/50G VIA USER PAGE
 *     HCD_DBG_CL74_BASE_EN Resolved HCD CL74 ability for 25G/50G VIA BASE PAGE
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_AN_ABIL_RESOLUTION_STSr (0x0000c1e8 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X4_AN_ABIL_RESOLUTION_STSr_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_AN_ABIL_RESOLUTION_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X4_AN_ABIL_RESOLUTION_STSr_s {
	uint32_t v[1];
	uint32_t an_x4_an_abil_resolution_sts[1];
	uint32_t _an_x4_an_abil_resolution_sts;
} BCMI_TSCF_GEN3_XGXS_AN_X4_AN_ABIL_RESOLUTION_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X4_AN_ABIL_RESOLUTION_STSr_CLR(r) (r).an_x4_an_abil_resolution_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X4_AN_ABIL_RESOLUTION_STSr_SET(r,d) (r).an_x4_an_abil_resolution_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X4_AN_ABIL_RESOLUTION_STSr_GET(r) (r).an_x4_an_abil_resolution_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_AN_ABIL_RESOLUTION_STSr_HCD_DBG_CL74_BASE_ENf_GET(r) ((((r).an_x4_an_abil_resolution_sts[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_AN_ABIL_RESOLUTION_STSr_HCD_DBG_CL74_BASE_ENf_SET(r,f) (r).an_x4_an_abil_resolution_sts[0]=(((r).an_x4_an_abil_resolution_sts[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_AN_ABIL_RESOLUTION_STSr_HCD_DBG_CL74_UP_ENf_GET(r) ((((r).an_x4_an_abil_resolution_sts[0]) >> 14) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_AN_ABIL_RESOLUTION_STSr_HCD_DBG_CL74_UP_ENf_SET(r,f) (r).an_x4_an_abil_resolution_sts[0]=(((r).an_x4_an_abil_resolution_sts[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_AN_ABIL_RESOLUTION_STSr_HCD_CL91_ENf_GET(r) ((((r).an_x4_an_abil_resolution_sts[0]) >> 13) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_AN_ABIL_RESOLUTION_STSr_HCD_CL91_ENf_SET(r,f) (r).an_x4_an_abil_resolution_sts[0]=(((r).an_x4_an_abil_resolution_sts[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_AN_ABIL_RESOLUTION_STSr_AN_HCD_DUPLEXf_GET(r) ((((r).an_x4_an_abil_resolution_sts[0]) >> 12) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_AN_ABIL_RESOLUTION_STSr_AN_HCD_DUPLEXf_SET(r,f) (r).an_x4_an_abil_resolution_sts[0]=(((r).an_x4_an_abil_resolution_sts[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_AN_ABIL_RESOLUTION_STSr_AN_HCD_PAUSEf_GET(r) ((((r).an_x4_an_abil_resolution_sts[0]) >> 10) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_AN_ABIL_RESOLUTION_STSr_AN_HCD_PAUSEf_SET(r,f) (r).an_x4_an_abil_resolution_sts[0]=(((r).an_x4_an_abil_resolution_sts[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10)) | (3 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_AN_ABIL_RESOLUTION_STSr_AN_HCD_SPEEDf_GET(r) ((((r).an_x4_an_abil_resolution_sts[0]) >> 2) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_AN_ABIL_RESOLUTION_STSr_AN_HCD_SPEEDf_SET(r,f) (r).an_x4_an_abil_resolution_sts[0]=(((r).an_x4_an_abil_resolution_sts[0] & ~((uint32_t)0xff << 2)) | ((((uint32_t)f) & 0xff) << 2)) | (255 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_AN_ABIL_RESOLUTION_STSr_AN_HCD_FECf_GET(r) ((((r).an_x4_an_abil_resolution_sts[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_AN_ABIL_RESOLUTION_STSr_AN_HCD_FECf_SET(r,f) (r).an_x4_an_abil_resolution_sts[0]=(((r).an_x4_an_abil_resolution_sts[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_AN_ABIL_RESOLUTION_STSr_AN_HCD_CL72f_GET(r) (((r).an_x4_an_abil_resolution_sts[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_AN_ABIL_RESOLUTION_STSr_AN_HCD_CL72f_SET(r,f) (r).an_x4_an_abil_resolution_sts[0]=(((r).an_x4_an_abil_resolution_sts[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AN_X4_AN_ABIL_RESOLUTION_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X4_AN_ABIL_RESOLUTION_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_AN_ABIL_RESOLUTION_STSr,(_r._an_x4_an_abil_resolution_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_AN_ABIL_RESOLUTION_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_AN_ABIL_RESOLUTION_STSr,(_r._an_x4_an_abil_resolution_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_AN_ABIL_RESOLUTION_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_AN_ABIL_RESOLUTION_STSr,(_r._an_x4_an_abil_resolution_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_AN_ABIL_RESOLUTION_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_AN_ABIL_RESOLUTION_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_an_abil_resolution_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_AN_ABIL_RESOLUTION_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_AN_ABIL_RESOLUTION_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_an_abil_resolution_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_AN_ABIL_RESOLUTION_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_AN_ABIL_RESOLUTION_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_an_abil_resolution_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_AN_ABIL_RESOLUTION_STSr BCMI_TSCF_GEN3_XGXS_AN_X4_AN_ABIL_RESOLUTION_STSr
#define AN_X4_AN_ABIL_RESOLUTION_STSr_SIZE BCMI_TSCF_GEN3_XGXS_AN_X4_AN_ABIL_RESOLUTION_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X4_AN_ABIL_RESOLUTION_STSr_t AN_X4_AN_ABIL_RESOLUTION_STSr_t;
#define AN_X4_AN_ABIL_RESOLUTION_STSr_CLR BCMI_TSCF_GEN3_XGXS_AN_X4_AN_ABIL_RESOLUTION_STSr_CLR
#define AN_X4_AN_ABIL_RESOLUTION_STSr_SET BCMI_TSCF_GEN3_XGXS_AN_X4_AN_ABIL_RESOLUTION_STSr_SET
#define AN_X4_AN_ABIL_RESOLUTION_STSr_GET BCMI_TSCF_GEN3_XGXS_AN_X4_AN_ABIL_RESOLUTION_STSr_GET
#define AN_X4_AN_ABIL_RESOLUTION_STSr_HCD_DBG_CL74_BASE_ENf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_AN_ABIL_RESOLUTION_STSr_HCD_DBG_CL74_BASE_ENf_GET
#define AN_X4_AN_ABIL_RESOLUTION_STSr_HCD_DBG_CL74_BASE_ENf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_AN_ABIL_RESOLUTION_STSr_HCD_DBG_CL74_BASE_ENf_SET
#define AN_X4_AN_ABIL_RESOLUTION_STSr_HCD_DBG_CL74_UP_ENf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_AN_ABIL_RESOLUTION_STSr_HCD_DBG_CL74_UP_ENf_GET
#define AN_X4_AN_ABIL_RESOLUTION_STSr_HCD_DBG_CL74_UP_ENf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_AN_ABIL_RESOLUTION_STSr_HCD_DBG_CL74_UP_ENf_SET
#define AN_X4_AN_ABIL_RESOLUTION_STSr_HCD_CL91_ENf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_AN_ABIL_RESOLUTION_STSr_HCD_CL91_ENf_GET
#define AN_X4_AN_ABIL_RESOLUTION_STSr_HCD_CL91_ENf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_AN_ABIL_RESOLUTION_STSr_HCD_CL91_ENf_SET
#define AN_X4_AN_ABIL_RESOLUTION_STSr_AN_HCD_DUPLEXf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_AN_ABIL_RESOLUTION_STSr_AN_HCD_DUPLEXf_GET
#define AN_X4_AN_ABIL_RESOLUTION_STSr_AN_HCD_DUPLEXf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_AN_ABIL_RESOLUTION_STSr_AN_HCD_DUPLEXf_SET
#define AN_X4_AN_ABIL_RESOLUTION_STSr_AN_HCD_PAUSEf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_AN_ABIL_RESOLUTION_STSr_AN_HCD_PAUSEf_GET
#define AN_X4_AN_ABIL_RESOLUTION_STSr_AN_HCD_PAUSEf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_AN_ABIL_RESOLUTION_STSr_AN_HCD_PAUSEf_SET
#define AN_X4_AN_ABIL_RESOLUTION_STSr_AN_HCD_SPEEDf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_AN_ABIL_RESOLUTION_STSr_AN_HCD_SPEEDf_GET
#define AN_X4_AN_ABIL_RESOLUTION_STSr_AN_HCD_SPEEDf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_AN_ABIL_RESOLUTION_STSr_AN_HCD_SPEEDf_SET
#define AN_X4_AN_ABIL_RESOLUTION_STSr_AN_HCD_FECf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_AN_ABIL_RESOLUTION_STSr_AN_HCD_FECf_GET
#define AN_X4_AN_ABIL_RESOLUTION_STSr_AN_HCD_FECf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_AN_ABIL_RESOLUTION_STSr_AN_HCD_FECf_SET
#define AN_X4_AN_ABIL_RESOLUTION_STSr_AN_HCD_CL72f_GET BCMI_TSCF_GEN3_XGXS_AN_X4_AN_ABIL_RESOLUTION_STSr_AN_HCD_CL72f_GET
#define AN_X4_AN_ABIL_RESOLUTION_STSr_AN_HCD_CL72f_SET BCMI_TSCF_GEN3_XGXS_AN_X4_AN_ABIL_RESOLUTION_STSr_AN_HCD_CL72f_SET
#define READ_AN_X4_AN_ABIL_RESOLUTION_STSr BCMI_TSCF_GEN3_XGXS_READ_AN_X4_AN_ABIL_RESOLUTION_STSr
#define WRITE_AN_X4_AN_ABIL_RESOLUTION_STSr BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_AN_ABIL_RESOLUTION_STSr
#define MODIFY_AN_X4_AN_ABIL_RESOLUTION_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_AN_ABIL_RESOLUTION_STSr
#define READLN_AN_X4_AN_ABIL_RESOLUTION_STSr BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_AN_ABIL_RESOLUTION_STSr
#define WRITELN_AN_X4_AN_ABIL_RESOLUTION_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_AN_ABIL_RESOLUTION_STSr
#define WRITEALL_AN_X4_AN_ABIL_RESOLUTION_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_AN_ABIL_RESOLUTION_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X4_AN_ABIL_RESOLUTION_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X4_AN_MISC_STS
 * BLOCKS:   AN_X4_SW_MGMT
 * REGADDR:  0xc1e9
 * DESC:     MISCILLANEOUS AN STATUS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     PD_SPEED_STATUS_0 Gen1 & Gen2 : ReservedGen3 : LSBit of Speed status for PD attempt. MSBit is sw_control_status.pd_speed_status_12'b00: undefined, 2'b01: KX, 2'b10: 2p5G, 2'b11: undefined
 *     PD_IN_PROGRESS   Currently Parallel detect is active
 *     AN_FAIL_COUNT    Number of AN retries due to AN failureSaturate, Clear on Read
 *     AN_ACTIVE        Auto-neg in progress
 *     PD_COMPLETED     Parallel detect process is
 *     SPEED_FORCE      Speed Force by AN_SEQ
 *     AN_RETRY_COUNT   Number of AN retried for any reason while performing HW-AN or SW_ANSaturate, Clear on Read
 *     AN_COMPLETE      AN Sequencer has completed Auto Neg
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_AN_MISC_STSr (0x0000c1e9 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X4_AN_MISC_STSr_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_AN_MISC_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X4_AN_MISC_STSr_s {
	uint32_t v[1];
	uint32_t an_x4_an_misc_sts[1];
	uint32_t _an_x4_an_misc_sts;
} BCMI_TSCF_GEN3_XGXS_AN_X4_AN_MISC_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X4_AN_MISC_STSr_CLR(r) (r).an_x4_an_misc_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X4_AN_MISC_STSr_SET(r,d) (r).an_x4_an_misc_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X4_AN_MISC_STSr_GET(r) (r).an_x4_an_misc_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_AN_MISC_STSr_AN_COMPLETEf_GET(r) ((((r).an_x4_an_misc_sts[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_AN_MISC_STSr_AN_COMPLETEf_SET(r,f) (r).an_x4_an_misc_sts[0]=(((r).an_x4_an_misc_sts[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_AN_MISC_STSr_AN_RETRY_COUNTf_GET(r) ((((r).an_x4_an_misc_sts[0]) >> 9) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_AN_MISC_STSr_AN_RETRY_COUNTf_SET(r,f) (r).an_x4_an_misc_sts[0]=(((r).an_x4_an_misc_sts[0] & ~((uint32_t)0x3f << 9)) | ((((uint32_t)f) & 0x3f) << 9)) | (63 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_AN_MISC_STSr_SPEED_FORCEf_GET(r) ((((r).an_x4_an_misc_sts[0]) >> 8) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_AN_MISC_STSr_SPEED_FORCEf_SET(r,f) (r).an_x4_an_misc_sts[0]=(((r).an_x4_an_misc_sts[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_AN_MISC_STSr_PD_COMPLETEDf_GET(r) ((((r).an_x4_an_misc_sts[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_AN_MISC_STSr_PD_COMPLETEDf_SET(r,f) (r).an_x4_an_misc_sts[0]=(((r).an_x4_an_misc_sts[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_AN_MISC_STSr_AN_ACTIVEf_GET(r) ((((r).an_x4_an_misc_sts[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_AN_MISC_STSr_AN_ACTIVEf_SET(r,f) (r).an_x4_an_misc_sts[0]=(((r).an_x4_an_misc_sts[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_AN_MISC_STSr_AN_FAIL_COUNTf_GET(r) ((((r).an_x4_an_misc_sts[0]) >> 2) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_AN_MISC_STSr_AN_FAIL_COUNTf_SET(r,f) (r).an_x4_an_misc_sts[0]=(((r).an_x4_an_misc_sts[0] & ~((uint32_t)0xf << 2)) | ((((uint32_t)f) & 0xf) << 2)) | (15 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_AN_MISC_STSr_PD_IN_PROGRESSf_GET(r) ((((r).an_x4_an_misc_sts[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_AN_MISC_STSr_PD_IN_PROGRESSf_SET(r,f) (r).an_x4_an_misc_sts[0]=(((r).an_x4_an_misc_sts[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_AN_MISC_STSr_PD_SPEED_STATUS_0f_GET(r) (((r).an_x4_an_misc_sts[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_AN_MISC_STSr_PD_SPEED_STATUS_0f_SET(r,f) (r).an_x4_an_misc_sts[0]=(((r).an_x4_an_misc_sts[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AN_X4_AN_MISC_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X4_AN_MISC_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_AN_MISC_STSr,(_r._an_x4_an_misc_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_AN_MISC_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_AN_MISC_STSr,(_r._an_x4_an_misc_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_AN_MISC_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_AN_MISC_STSr,(_r._an_x4_an_misc_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_AN_MISC_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_AN_MISC_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_an_misc_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_AN_MISC_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_AN_MISC_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_an_misc_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_AN_MISC_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_AN_MISC_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_an_misc_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_AN_MISC_STSr BCMI_TSCF_GEN3_XGXS_AN_X4_AN_MISC_STSr
#define AN_X4_AN_MISC_STSr_SIZE BCMI_TSCF_GEN3_XGXS_AN_X4_AN_MISC_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X4_AN_MISC_STSr_t AN_X4_AN_MISC_STSr_t;
#define AN_X4_AN_MISC_STSr_CLR BCMI_TSCF_GEN3_XGXS_AN_X4_AN_MISC_STSr_CLR
#define AN_X4_AN_MISC_STSr_SET BCMI_TSCF_GEN3_XGXS_AN_X4_AN_MISC_STSr_SET
#define AN_X4_AN_MISC_STSr_GET BCMI_TSCF_GEN3_XGXS_AN_X4_AN_MISC_STSr_GET
#define AN_X4_AN_MISC_STSr_AN_COMPLETEf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_AN_MISC_STSr_AN_COMPLETEf_GET
#define AN_X4_AN_MISC_STSr_AN_COMPLETEf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_AN_MISC_STSr_AN_COMPLETEf_SET
#define AN_X4_AN_MISC_STSr_AN_RETRY_COUNTf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_AN_MISC_STSr_AN_RETRY_COUNTf_GET
#define AN_X4_AN_MISC_STSr_AN_RETRY_COUNTf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_AN_MISC_STSr_AN_RETRY_COUNTf_SET
#define AN_X4_AN_MISC_STSr_SPEED_FORCEf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_AN_MISC_STSr_SPEED_FORCEf_GET
#define AN_X4_AN_MISC_STSr_SPEED_FORCEf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_AN_MISC_STSr_SPEED_FORCEf_SET
#define AN_X4_AN_MISC_STSr_PD_COMPLETEDf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_AN_MISC_STSr_PD_COMPLETEDf_GET
#define AN_X4_AN_MISC_STSr_PD_COMPLETEDf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_AN_MISC_STSr_PD_COMPLETEDf_SET
#define AN_X4_AN_MISC_STSr_AN_ACTIVEf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_AN_MISC_STSr_AN_ACTIVEf_GET
#define AN_X4_AN_MISC_STSr_AN_ACTIVEf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_AN_MISC_STSr_AN_ACTIVEf_SET
#define AN_X4_AN_MISC_STSr_AN_FAIL_COUNTf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_AN_MISC_STSr_AN_FAIL_COUNTf_GET
#define AN_X4_AN_MISC_STSr_AN_FAIL_COUNTf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_AN_MISC_STSr_AN_FAIL_COUNTf_SET
#define AN_X4_AN_MISC_STSr_PD_IN_PROGRESSf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_AN_MISC_STSr_PD_IN_PROGRESSf_GET
#define AN_X4_AN_MISC_STSr_PD_IN_PROGRESSf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_AN_MISC_STSr_PD_IN_PROGRESSf_SET
#define AN_X4_AN_MISC_STSr_PD_SPEED_STATUS_0f_GET BCMI_TSCF_GEN3_XGXS_AN_X4_AN_MISC_STSr_PD_SPEED_STATUS_0f_GET
#define AN_X4_AN_MISC_STSr_PD_SPEED_STATUS_0f_SET BCMI_TSCF_GEN3_XGXS_AN_X4_AN_MISC_STSr_PD_SPEED_STATUS_0f_SET
#define READ_AN_X4_AN_MISC_STSr BCMI_TSCF_GEN3_XGXS_READ_AN_X4_AN_MISC_STSr
#define WRITE_AN_X4_AN_MISC_STSr BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_AN_MISC_STSr
#define MODIFY_AN_X4_AN_MISC_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_AN_MISC_STSr
#define READLN_AN_X4_AN_MISC_STSr BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_AN_MISC_STSr
#define WRITELN_AN_X4_AN_MISC_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_AN_MISC_STSr
#define WRITEALL_AN_X4_AN_MISC_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_AN_MISC_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X4_AN_MISC_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X4_TLA_SEQUENCER_STS
 * BLOCKS:   AN_X4_SW_MGMT
 * REGADDR:  0xc1ea
 * DESC:     TLA SEQUENCER STATUS
 * RESETVAL: 0x1 (1)
 * ACCESS:   R/W
 * FIELDS:
 *     TLA_SEQ_FSM_STATUS TLA Lane sequencer fsm latched statusClear on read
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_TLA_SEQUENCER_STSr (0x0000c1ea | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X4_TLA_SEQUENCER_STSr_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_TLA_SEQUENCER_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X4_TLA_SEQUENCER_STSr_s {
	uint32_t v[1];
	uint32_t an_x4_tla_sequencer_sts[1];
	uint32_t _an_x4_tla_sequencer_sts;
} BCMI_TSCF_GEN3_XGXS_AN_X4_TLA_SEQUENCER_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X4_TLA_SEQUENCER_STSr_CLR(r) (r).an_x4_tla_sequencer_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X4_TLA_SEQUENCER_STSr_SET(r,d) (r).an_x4_tla_sequencer_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X4_TLA_SEQUENCER_STSr_GET(r) (r).an_x4_tla_sequencer_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_TLA_SEQUENCER_STSr_TLA_SEQ_FSM_STATUSf_GET(r) (((r).an_x4_tla_sequencer_sts[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_TLA_SEQUENCER_STSr_TLA_SEQ_FSM_STATUSf_SET(r,f) (r).an_x4_tla_sequencer_sts[0]=(((r).an_x4_tla_sequencer_sts[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AN_X4_TLA_SEQUENCER_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X4_TLA_SEQUENCER_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_TLA_SEQUENCER_STSr,(_r._an_x4_tla_sequencer_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_TLA_SEQUENCER_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_TLA_SEQUENCER_STSr,(_r._an_x4_tla_sequencer_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_TLA_SEQUENCER_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_TLA_SEQUENCER_STSr,(_r._an_x4_tla_sequencer_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_TLA_SEQUENCER_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_TLA_SEQUENCER_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_tla_sequencer_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_TLA_SEQUENCER_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_TLA_SEQUENCER_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_tla_sequencer_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_TLA_SEQUENCER_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_TLA_SEQUENCER_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_tla_sequencer_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_TLA_SEQUENCER_STSr BCMI_TSCF_GEN3_XGXS_AN_X4_TLA_SEQUENCER_STSr
#define AN_X4_TLA_SEQUENCER_STSr_SIZE BCMI_TSCF_GEN3_XGXS_AN_X4_TLA_SEQUENCER_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X4_TLA_SEQUENCER_STSr_t AN_X4_TLA_SEQUENCER_STSr_t;
#define AN_X4_TLA_SEQUENCER_STSr_CLR BCMI_TSCF_GEN3_XGXS_AN_X4_TLA_SEQUENCER_STSr_CLR
#define AN_X4_TLA_SEQUENCER_STSr_SET BCMI_TSCF_GEN3_XGXS_AN_X4_TLA_SEQUENCER_STSr_SET
#define AN_X4_TLA_SEQUENCER_STSr_GET BCMI_TSCF_GEN3_XGXS_AN_X4_TLA_SEQUENCER_STSr_GET
#define AN_X4_TLA_SEQUENCER_STSr_TLA_SEQ_FSM_STATUSf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_TLA_SEQUENCER_STSr_TLA_SEQ_FSM_STATUSf_GET
#define AN_X4_TLA_SEQUENCER_STSr_TLA_SEQ_FSM_STATUSf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_TLA_SEQUENCER_STSr_TLA_SEQ_FSM_STATUSf_SET
#define READ_AN_X4_TLA_SEQUENCER_STSr BCMI_TSCF_GEN3_XGXS_READ_AN_X4_TLA_SEQUENCER_STSr
#define WRITE_AN_X4_TLA_SEQUENCER_STSr BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_TLA_SEQUENCER_STSr
#define MODIFY_AN_X4_TLA_SEQUENCER_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_TLA_SEQUENCER_STSr
#define READLN_AN_X4_TLA_SEQUENCER_STSr BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_TLA_SEQUENCER_STSr
#define WRITELN_AN_X4_TLA_SEQUENCER_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_TLA_SEQUENCER_STSr
#define WRITEALL_AN_X4_TLA_SEQUENCER_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_TLA_SEQUENCER_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X4_TLA_SEQUENCER_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X4_INT
 * BLOCKS:   AN_X4_SW_MGMT
 * REGADDR:  0xc1eb
 * DESC:     SW AN and retimer Interrupt
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LP_PAGE_RDY_INT  Link partner's page has been receivedClear on read
 *     LD_PAGE_REQ_INT  Local device is requesting a new page for transmitClear on read
 *     AN_COMPLETED_SW_INT S/W AN page exchange completed indicationClear on read
 *     AN_GOOD_CHK_INT  Entry of port in AN Good check state.Clear on read
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_INTr (0x0000c1eb | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X4_INTr_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_INT.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X4_INTr_s {
	uint32_t v[1];
	uint32_t an_x4_int[1];
	uint32_t _an_x4_int;
} BCMI_TSCF_GEN3_XGXS_AN_X4_INTr_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X4_INTr_CLR(r) (r).an_x4_int[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X4_INTr_SET(r,d) (r).an_x4_int[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X4_INTr_GET(r) (r).an_x4_int[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_INTr_AN_GOOD_CHK_INTf_GET(r) ((((r).an_x4_int[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_INTr_AN_GOOD_CHK_INTf_SET(r,f) (r).an_x4_int[0]=(((r).an_x4_int[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_INTr_AN_COMPLETED_SW_INTf_GET(r) ((((r).an_x4_int[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_INTr_AN_COMPLETED_SW_INTf_SET(r,f) (r).an_x4_int[0]=(((r).an_x4_int[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_INTr_LD_PAGE_REQ_INTf_GET(r) ((((r).an_x4_int[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_INTr_LD_PAGE_REQ_INTf_SET(r,f) (r).an_x4_int[0]=(((r).an_x4_int[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_INTr_LP_PAGE_RDY_INTf_GET(r) (((r).an_x4_int[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_INTr_LP_PAGE_RDY_INTf_SET(r,f) (r).an_x4_int[0]=(((r).an_x4_int[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AN_X4_INT.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X4_INTr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_INTr,(_r._an_x4_int))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_INTr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_INTr,(_r._an_x4_int)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_INTr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_INTr,(_r._an_x4_int))
#define BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_INTr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_INTr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_int))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_INTr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_INTr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_int))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_INTr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_INTr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_int))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_INTr BCMI_TSCF_GEN3_XGXS_AN_X4_INTr
#define AN_X4_INTr_SIZE BCMI_TSCF_GEN3_XGXS_AN_X4_INTr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X4_INTr_t AN_X4_INTr_t;
#define AN_X4_INTr_CLR BCMI_TSCF_GEN3_XGXS_AN_X4_INTr_CLR
#define AN_X4_INTr_SET BCMI_TSCF_GEN3_XGXS_AN_X4_INTr_SET
#define AN_X4_INTr_GET BCMI_TSCF_GEN3_XGXS_AN_X4_INTr_GET
#define AN_X4_INTr_AN_GOOD_CHK_INTf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_INTr_AN_GOOD_CHK_INTf_GET
#define AN_X4_INTr_AN_GOOD_CHK_INTf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_INTr_AN_GOOD_CHK_INTf_SET
#define AN_X4_INTr_AN_COMPLETED_SW_INTf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_INTr_AN_COMPLETED_SW_INTf_GET
#define AN_X4_INTr_AN_COMPLETED_SW_INTf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_INTr_AN_COMPLETED_SW_INTf_SET
#define AN_X4_INTr_LD_PAGE_REQ_INTf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_INTr_LD_PAGE_REQ_INTf_GET
#define AN_X4_INTr_LD_PAGE_REQ_INTf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_INTr_LD_PAGE_REQ_INTf_SET
#define AN_X4_INTr_LP_PAGE_RDY_INTf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_INTr_LP_PAGE_RDY_INTf_GET
#define AN_X4_INTr_LP_PAGE_RDY_INTf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_INTr_LP_PAGE_RDY_INTf_SET
#define READ_AN_X4_INTr BCMI_TSCF_GEN3_XGXS_READ_AN_X4_INTr
#define WRITE_AN_X4_INTr BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_INTr
#define MODIFY_AN_X4_INTr BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_INTr
#define READLN_AN_X4_INTr BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_INTr
#define WRITELN_AN_X4_INTr BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_INTr
#define WRITEALL_AN_X4_INTr BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_INTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X4_INTr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X4_INT_EN
 * BLOCKS:   AN_X4_SW_MGMT
 * REGADDR:  0xc1ec
 * DESC:     SW AN and retimer Interrupt Enable
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LP_PAGE_RDY_EN   Enable Link partner's page has been receivedWriting 1 will enable this interrupt and interrupt is disable by default.
 *     LD_PAGE_REQ_EN   Enable Local device is requesting a new page for transmitWriting 1 will enable this interrupt and interrupt is disable by default.
 *     AN_COMPLETED_SW_EN Enable S/W AN page exchange completed indicationWriting 1 will enable this interrupt and interrupt is disable by default.
 *     AN_GOOD_CHK_EN   Enable interrupt when AN enters into AN Good check state.Writing 1 will enable this interrupt and interrupt is disable by default.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_INT_ENr (0x0000c1ec | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X4_INT_ENr_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_INT_EN.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X4_INT_ENr_s {
	uint32_t v[1];
	uint32_t an_x4_int_en[1];
	uint32_t _an_x4_int_en;
} BCMI_TSCF_GEN3_XGXS_AN_X4_INT_ENr_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X4_INT_ENr_CLR(r) (r).an_x4_int_en[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X4_INT_ENr_SET(r,d) (r).an_x4_int_en[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X4_INT_ENr_GET(r) (r).an_x4_int_en[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_INT_ENr_AN_GOOD_CHK_ENf_GET(r) ((((r).an_x4_int_en[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_INT_ENr_AN_GOOD_CHK_ENf_SET(r,f) (r).an_x4_int_en[0]=(((r).an_x4_int_en[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_INT_ENr_AN_COMPLETED_SW_ENf_GET(r) ((((r).an_x4_int_en[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_INT_ENr_AN_COMPLETED_SW_ENf_SET(r,f) (r).an_x4_int_en[0]=(((r).an_x4_int_en[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_INT_ENr_LD_PAGE_REQ_ENf_GET(r) ((((r).an_x4_int_en[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_INT_ENr_LD_PAGE_REQ_ENf_SET(r,f) (r).an_x4_int_en[0]=(((r).an_x4_int_en[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_INT_ENr_LP_PAGE_RDY_ENf_GET(r) (((r).an_x4_int_en[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_INT_ENr_LP_PAGE_RDY_ENf_SET(r,f) (r).an_x4_int_en[0]=(((r).an_x4_int_en[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AN_X4_INT_EN.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X4_INT_ENr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_INT_ENr,(_r._an_x4_int_en))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_INT_ENr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_INT_ENr,(_r._an_x4_int_en)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_INT_ENr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_INT_ENr,(_r._an_x4_int_en))
#define BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_INT_ENr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_INT_ENr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_int_en))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_INT_ENr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_INT_ENr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_int_en))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_INT_ENr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_INT_ENr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_int_en))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_INT_ENr BCMI_TSCF_GEN3_XGXS_AN_X4_INT_ENr
#define AN_X4_INT_ENr_SIZE BCMI_TSCF_GEN3_XGXS_AN_X4_INT_ENr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X4_INT_ENr_t AN_X4_INT_ENr_t;
#define AN_X4_INT_ENr_CLR BCMI_TSCF_GEN3_XGXS_AN_X4_INT_ENr_CLR
#define AN_X4_INT_ENr_SET BCMI_TSCF_GEN3_XGXS_AN_X4_INT_ENr_SET
#define AN_X4_INT_ENr_GET BCMI_TSCF_GEN3_XGXS_AN_X4_INT_ENr_GET
#define AN_X4_INT_ENr_AN_GOOD_CHK_ENf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_INT_ENr_AN_GOOD_CHK_ENf_GET
#define AN_X4_INT_ENr_AN_GOOD_CHK_ENf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_INT_ENr_AN_GOOD_CHK_ENf_SET
#define AN_X4_INT_ENr_AN_COMPLETED_SW_ENf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_INT_ENr_AN_COMPLETED_SW_ENf_GET
#define AN_X4_INT_ENr_AN_COMPLETED_SW_ENf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_INT_ENr_AN_COMPLETED_SW_ENf_SET
#define AN_X4_INT_ENr_LD_PAGE_REQ_ENf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_INT_ENr_LD_PAGE_REQ_ENf_GET
#define AN_X4_INT_ENr_LD_PAGE_REQ_ENf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_INT_ENr_LD_PAGE_REQ_ENf_SET
#define AN_X4_INT_ENr_LP_PAGE_RDY_ENf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_INT_ENr_LP_PAGE_RDY_ENf_GET
#define AN_X4_INT_ENr_LP_PAGE_RDY_ENf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_INT_ENr_LP_PAGE_RDY_ENf_SET
#define READ_AN_X4_INT_ENr BCMI_TSCF_GEN3_XGXS_READ_AN_X4_INT_ENr
#define WRITE_AN_X4_INT_ENr BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_INT_ENr
#define MODIFY_AN_X4_INT_ENr BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_INT_ENr
#define READLN_AN_X4_INT_ENr BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_INT_ENr
#define WRITELN_AN_X4_INT_ENr BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_INT_ENr
#define WRITEALL_AN_X4_INT_ENr BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_INT_ENr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X4_INT_ENr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AN_X4_WAIT_ACK_COMPLETE
 * BLOCKS:   AN_X4_SW_MGMT
 * REGADDR:  0xc1ed
 * DESC:     Wait for ACK register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     WAIT_FOR_ACK_EN  If this bit is set, then FSM will wait for the send_ack bit to be set by SW.
 *     SEND_ACK         Now send ACK for the last page. this is set by SW cleared by HW
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_WAIT_ACK_COMPLETEr (0x0000c1ed | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AN_X4_WAIT_ACK_COMPLETEr_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_WAIT_ACK_COMPLETE.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AN_X4_WAIT_ACK_COMPLETEr_s {
	uint32_t v[1];
	uint32_t an_x4_wait_ack_complete[1];
	uint32_t _an_x4_wait_ack_complete;
} BCMI_TSCF_GEN3_XGXS_AN_X4_WAIT_ACK_COMPLETEr_t;

#define BCMI_TSCF_GEN3_XGXS_AN_X4_WAIT_ACK_COMPLETEr_CLR(r) (r).an_x4_wait_ack_complete[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AN_X4_WAIT_ACK_COMPLETEr_SET(r,d) (r).an_x4_wait_ack_complete[0] = d
#define BCMI_TSCF_GEN3_XGXS_AN_X4_WAIT_ACK_COMPLETEr_GET(r) (r).an_x4_wait_ack_complete[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AN_X4_WAIT_ACK_COMPLETEr_SEND_ACKf_GET(r) ((((r).an_x4_wait_ack_complete[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_WAIT_ACK_COMPLETEr_SEND_ACKf_SET(r,f) (r).an_x4_wait_ack_complete[0]=(((r).an_x4_wait_ack_complete[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_AN_X4_WAIT_ACK_COMPLETEr_WAIT_FOR_ACK_ENf_GET(r) (((r).an_x4_wait_ack_complete[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AN_X4_WAIT_ACK_COMPLETEr_WAIT_FOR_ACK_ENf_SET(r,f) (r).an_x4_wait_ack_complete[0]=(((r).an_x4_wait_ack_complete[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AN_X4_WAIT_ACK_COMPLETE.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AN_X4_WAIT_ACK_COMPLETEr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_WAIT_ACK_COMPLETEr,(_r._an_x4_wait_ack_complete))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_WAIT_ACK_COMPLETEr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_WAIT_ACK_COMPLETEr,(_r._an_x4_wait_ack_complete)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_WAIT_ACK_COMPLETEr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_WAIT_ACK_COMPLETEr,(_r._an_x4_wait_ack_complete))
#define BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_WAIT_ACK_COMPLETEr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_WAIT_ACK_COMPLETEr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_wait_ack_complete))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_WAIT_ACK_COMPLETEr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_WAIT_ACK_COMPLETEr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_wait_ack_complete))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_WAIT_ACK_COMPLETEr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AN_X4_WAIT_ACK_COMPLETEr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_wait_ack_complete))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_WAIT_ACK_COMPLETEr BCMI_TSCF_GEN3_XGXS_AN_X4_WAIT_ACK_COMPLETEr
#define AN_X4_WAIT_ACK_COMPLETEr_SIZE BCMI_TSCF_GEN3_XGXS_AN_X4_WAIT_ACK_COMPLETEr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AN_X4_WAIT_ACK_COMPLETEr_t AN_X4_WAIT_ACK_COMPLETEr_t;
#define AN_X4_WAIT_ACK_COMPLETEr_CLR BCMI_TSCF_GEN3_XGXS_AN_X4_WAIT_ACK_COMPLETEr_CLR
#define AN_X4_WAIT_ACK_COMPLETEr_SET BCMI_TSCF_GEN3_XGXS_AN_X4_WAIT_ACK_COMPLETEr_SET
#define AN_X4_WAIT_ACK_COMPLETEr_GET BCMI_TSCF_GEN3_XGXS_AN_X4_WAIT_ACK_COMPLETEr_GET
#define AN_X4_WAIT_ACK_COMPLETEr_SEND_ACKf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_WAIT_ACK_COMPLETEr_SEND_ACKf_GET
#define AN_X4_WAIT_ACK_COMPLETEr_SEND_ACKf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_WAIT_ACK_COMPLETEr_SEND_ACKf_SET
#define AN_X4_WAIT_ACK_COMPLETEr_WAIT_FOR_ACK_ENf_GET BCMI_TSCF_GEN3_XGXS_AN_X4_WAIT_ACK_COMPLETEr_WAIT_FOR_ACK_ENf_GET
#define AN_X4_WAIT_ACK_COMPLETEr_WAIT_FOR_ACK_ENf_SET BCMI_TSCF_GEN3_XGXS_AN_X4_WAIT_ACK_COMPLETEr_WAIT_FOR_ACK_ENf_SET
#define READ_AN_X4_WAIT_ACK_COMPLETEr BCMI_TSCF_GEN3_XGXS_READ_AN_X4_WAIT_ACK_COMPLETEr
#define WRITE_AN_X4_WAIT_ACK_COMPLETEr BCMI_TSCF_GEN3_XGXS_WRITE_AN_X4_WAIT_ACK_COMPLETEr
#define MODIFY_AN_X4_WAIT_ACK_COMPLETEr BCMI_TSCF_GEN3_XGXS_MODIFY_AN_X4_WAIT_ACK_COMPLETEr
#define READLN_AN_X4_WAIT_ACK_COMPLETEr BCMI_TSCF_GEN3_XGXS_READLN_AN_X4_WAIT_ACK_COMPLETEr
#define WRITELN_AN_X4_WAIT_ACK_COMPLETEr BCMI_TSCF_GEN3_XGXS_WRITELN_AN_X4_WAIT_ACK_COMPLETEr
#define WRITEALL_AN_X4_WAIT_ACK_COMPLETEr BCMI_TSCF_GEN3_XGXS_WRITEALL_AN_X4_WAIT_ACK_COMPLETEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AN_X4_WAIT_ACK_COMPLETEr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_RXP_1588_SFD_TS_CTL
 * BLOCKS:   RX_X4_CONTROL1
 * REGADDR:  0xc1f0
 * DESC:     SFD timestamping control
 * RESETVAL: 0x6 (6)
 * ACCESS:   R/W
 * FIELDS:
 *     RX_CL36_SOP_ADJ_10UI Only applicable to CL36If set to 1, HW will adjust SOP timestamp by -10ui when SOP-to-SFD separation is 60UIIf set to 1, HW will NOT adjust SOP timestamp when SOP-to-SFD separation is 70UIIf set to 0, HW will NOT adjust SOP timestampMust be set to 1, when HW SFD timestamping is enabledOptionally set to 1, when HW SOP timestamping is enabled
 *     SFD_TS_EN        Enables SFD timestamping, by default.Setting this bit to 0 enables SOP timestamping. HG ports are expected to use SOP timestamping.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RXP_1588_SFD_TS_CTLr (0x0000c1f0 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_RXP_1588_SFD_TS_CTLr_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_RXP_1588_SFD_TS_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_RXP_1588_SFD_TS_CTLr_s {
	uint32_t v[1];
	uint32_t rx_x4_rxp_1588_sfd_ts_ctl[1];
	uint32_t _rx_x4_rxp_1588_sfd_ts_ctl;
} BCMI_TSCF_GEN3_XGXS_RX_X4_RXP_1588_SFD_TS_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_RXP_1588_SFD_TS_CTLr_CLR(r) (r).rx_x4_rxp_1588_sfd_ts_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RXP_1588_SFD_TS_CTLr_SET(r,d) (r).rx_x4_rxp_1588_sfd_ts_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RXP_1588_SFD_TS_CTLr_GET(r) (r).rx_x4_rxp_1588_sfd_ts_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RXP_1588_SFD_TS_CTLr_SFD_TS_ENf_GET(r) ((((r).rx_x4_rxp_1588_sfd_ts_ctl[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RXP_1588_SFD_TS_CTLr_SFD_TS_ENf_SET(r,f) (r).rx_x4_rxp_1588_sfd_ts_ctl[0]=(((r).rx_x4_rxp_1588_sfd_ts_ctl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RXP_1588_SFD_TS_CTLr_RX_CL36_SOP_ADJ_10UIf_GET(r) ((((r).rx_x4_rxp_1588_sfd_ts_ctl[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RXP_1588_SFD_TS_CTLr_RX_CL36_SOP_ADJ_10UIf_SET(r,f) (r).rx_x4_rxp_1588_sfd_ts_ctl[0]=(((r).rx_x4_rxp_1588_sfd_ts_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))

/*
 * These macros can be used to access RX_X4_RXP_1588_SFD_TS_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_RXP_1588_SFD_TS_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RXP_1588_SFD_TS_CTLr,(_r._rx_x4_rxp_1588_sfd_ts_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_RXP_1588_SFD_TS_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RXP_1588_SFD_TS_CTLr,(_r._rx_x4_rxp_1588_sfd_ts_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_RXP_1588_SFD_TS_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RXP_1588_SFD_TS_CTLr,(_r._rx_x4_rxp_1588_sfd_ts_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_RXP_1588_SFD_TS_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RXP_1588_SFD_TS_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_rxp_1588_sfd_ts_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_RXP_1588_SFD_TS_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RXP_1588_SFD_TS_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_rxp_1588_sfd_ts_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_RXP_1588_SFD_TS_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RXP_1588_SFD_TS_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_rxp_1588_sfd_ts_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_RXP_1588_SFD_TS_CTLr BCMI_TSCF_GEN3_XGXS_RX_X4_RXP_1588_SFD_TS_CTLr
#define RX_X4_RXP_1588_SFD_TS_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_RXP_1588_SFD_TS_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_RXP_1588_SFD_TS_CTLr_t RX_X4_RXP_1588_SFD_TS_CTLr_t;
#define RX_X4_RXP_1588_SFD_TS_CTLr_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_RXP_1588_SFD_TS_CTLr_CLR
#define RX_X4_RXP_1588_SFD_TS_CTLr_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RXP_1588_SFD_TS_CTLr_SET
#define RX_X4_RXP_1588_SFD_TS_CTLr_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RXP_1588_SFD_TS_CTLr_GET
#define RX_X4_RXP_1588_SFD_TS_CTLr_SFD_TS_ENf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RXP_1588_SFD_TS_CTLr_SFD_TS_ENf_GET
#define RX_X4_RXP_1588_SFD_TS_CTLr_SFD_TS_ENf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RXP_1588_SFD_TS_CTLr_SFD_TS_ENf_SET
#define RX_X4_RXP_1588_SFD_TS_CTLr_RX_CL36_SOP_ADJ_10UIf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RXP_1588_SFD_TS_CTLr_RX_CL36_SOP_ADJ_10UIf_GET
#define RX_X4_RXP_1588_SFD_TS_CTLr_RX_CL36_SOP_ADJ_10UIf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RXP_1588_SFD_TS_CTLr_RX_CL36_SOP_ADJ_10UIf_SET
#define READ_RX_X4_RXP_1588_SFD_TS_CTLr BCMI_TSCF_GEN3_XGXS_READ_RX_X4_RXP_1588_SFD_TS_CTLr
#define WRITE_RX_X4_RXP_1588_SFD_TS_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_RXP_1588_SFD_TS_CTLr
#define MODIFY_RX_X4_RXP_1588_SFD_TS_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_RXP_1588_SFD_TS_CTLr
#define READLN_RX_X4_RXP_1588_SFD_TS_CTLr BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_RXP_1588_SFD_TS_CTLr
#define WRITELN_RX_X4_RXP_1588_SFD_TS_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_RXP_1588_SFD_TS_CTLr
#define WRITEALL_RX_X4_RXP_1588_SFD_TS_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_RXP_1588_SFD_TS_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_RXP_1588_SFD_TS_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_RX_DESKEW_ADJ_INT0
 * BLOCKS:   RX_X4_CONTROL1
 * REGADDR:  0xc1f1
 * DESC:     RX deskew Adjustment0 Integer nanoseconds(Virtual lane based)
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TAB_DS_INT_NS_0  PMD RX deskew adjustment in nanoseconds. Signed 2s complement value. Indexed by Logical Lane.This field represents the Integral Part of Deskew adjustment for Virtual Lanes as explained below.In 100G MLD mode(Port0) - VL0/VL5/VL10/VL15In 40G MLD mode over 2 lanes(Port0 or Port2) - VL0/VL2In 40G MLD mode over 4 lanes(Port0) - VL0/VL1/VL2/VL3In 20G MLD mode over 2 lanes(Port0 or Port2) - VL0/VL1Programmed by SW. HW will sign-extend to 48 bits.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT0r (0x0000c1f1 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT0r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_RX_DESKEW_ADJ_INT0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT0r_s {
	uint32_t v[1];
	uint32_t rx_x4_rx_deskew_adj_int0[1];
	uint32_t _rx_x4_rx_deskew_adj_int0;
} BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT0r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT0r_CLR(r) (r).rx_x4_rx_deskew_adj_int0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT0r_SET(r,d) (r).rx_x4_rx_deskew_adj_int0[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT0r_GET(r) (r).rx_x4_rx_deskew_adj_int0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT0r_TAB_DS_INT_NS_0f_GET(r) (((r).rx_x4_rx_deskew_adj_int0[0]) & 0xfff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT0r_TAB_DS_INT_NS_0f_SET(r,f) (r).rx_x4_rx_deskew_adj_int0[0]=(((r).rx_x4_rx_deskew_adj_int0[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff)) | (0xfff << 16)

/*
 * These macros can be used to access RX_X4_RX_DESKEW_ADJ_INT0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_RX_DESKEW_ADJ_INT0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT0r,(_r._rx_x4_rx_deskew_adj_int0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_RX_DESKEW_ADJ_INT0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT0r,(_r._rx_x4_rx_deskew_adj_int0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_RX_DESKEW_ADJ_INT0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT0r,(_r._rx_x4_rx_deskew_adj_int0))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_RX_DESKEW_ADJ_INT0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_rx_deskew_adj_int0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_RX_DESKEW_ADJ_INT0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_rx_deskew_adj_int0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_RX_DESKEW_ADJ_INT0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_rx_deskew_adj_int0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_RX_DESKEW_ADJ_INT0r BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT0r
#define RX_X4_RX_DESKEW_ADJ_INT0r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT0r_t RX_X4_RX_DESKEW_ADJ_INT0r_t;
#define RX_X4_RX_DESKEW_ADJ_INT0r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT0r_CLR
#define RX_X4_RX_DESKEW_ADJ_INT0r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT0r_SET
#define RX_X4_RX_DESKEW_ADJ_INT0r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT0r_GET
#define RX_X4_RX_DESKEW_ADJ_INT0r_TAB_DS_INT_NS_0f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT0r_TAB_DS_INT_NS_0f_GET
#define RX_X4_RX_DESKEW_ADJ_INT0r_TAB_DS_INT_NS_0f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT0r_TAB_DS_INT_NS_0f_SET
#define READ_RX_X4_RX_DESKEW_ADJ_INT0r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_RX_DESKEW_ADJ_INT0r
#define WRITE_RX_X4_RX_DESKEW_ADJ_INT0r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_RX_DESKEW_ADJ_INT0r
#define MODIFY_RX_X4_RX_DESKEW_ADJ_INT0r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_RX_DESKEW_ADJ_INT0r
#define READLN_RX_X4_RX_DESKEW_ADJ_INT0r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_RX_DESKEW_ADJ_INT0r
#define WRITELN_RX_X4_RX_DESKEW_ADJ_INT0r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_RX_DESKEW_ADJ_INT0r
#define WRITEALL_RX_X4_RX_DESKEW_ADJ_INT0r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_RX_DESKEW_ADJ_INT0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_RX_DESKEW_ADJ_FRAC0
 * BLOCKS:   RX_X4_CONTROL1
 * REGADDR:  0xc1f2
 * DESC:     RX deskew Adjustment0 Fractional nanoseconds(Virtual lane based)
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TAB_DS_FRAC_NS_0 PMD RX deskew adjustment in fractional nanoseconds. Signed 2s complement value as an extension of tab_ds_int_ns.Indexed by Logical Lane.This field represents the Fractional Part of Deskew adjustment for Virtual Lanes as explained below.In 100G MLD mode(Port0) - VL0/VL5/VL10/VL15In 40G MLD mode over 2 lanes(Port0 or Port2) - VL0/VL2In 40G MLD mode over 4 lanes(Port0) - VL0/VL1/VL2/VL3In 20G MLD mode over 2 lanes(Port0 or Port2) - VL0/VL1
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC0r (0x0000c1f2 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC0r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_RX_DESKEW_ADJ_FRAC0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC0r_s {
	uint32_t v[1];
	uint32_t rx_x4_rx_deskew_adj_frac0[1];
	uint32_t _rx_x4_rx_deskew_adj_frac0;
} BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC0r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC0r_CLR(r) (r).rx_x4_rx_deskew_adj_frac0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC0r_SET(r,d) (r).rx_x4_rx_deskew_adj_frac0[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC0r_GET(r) (r).rx_x4_rx_deskew_adj_frac0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC0r_TAB_DS_FRAC_NS_0f_GET(r) ((((r).rx_x4_rx_deskew_adj_frac0[0]) >> 6) & 0x3ff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC0r_TAB_DS_FRAC_NS_0f_SET(r,f) (r).rx_x4_rx_deskew_adj_frac0[0]=(((r).rx_x4_rx_deskew_adj_frac0[0] & ~((uint32_t)0x3ff << 6)) | ((((uint32_t)f) & 0x3ff) << 6)) | (1023 << (16 + 6))

/*
 * These macros can be used to access RX_X4_RX_DESKEW_ADJ_FRAC0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_RX_DESKEW_ADJ_FRAC0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC0r,(_r._rx_x4_rx_deskew_adj_frac0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_RX_DESKEW_ADJ_FRAC0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC0r,(_r._rx_x4_rx_deskew_adj_frac0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_RX_DESKEW_ADJ_FRAC0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC0r,(_r._rx_x4_rx_deskew_adj_frac0))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_RX_DESKEW_ADJ_FRAC0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_rx_deskew_adj_frac0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_RX_DESKEW_ADJ_FRAC0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_rx_deskew_adj_frac0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_RX_DESKEW_ADJ_FRAC0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_rx_deskew_adj_frac0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_RX_DESKEW_ADJ_FRAC0r BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC0r
#define RX_X4_RX_DESKEW_ADJ_FRAC0r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC0r_t RX_X4_RX_DESKEW_ADJ_FRAC0r_t;
#define RX_X4_RX_DESKEW_ADJ_FRAC0r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC0r_CLR
#define RX_X4_RX_DESKEW_ADJ_FRAC0r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC0r_SET
#define RX_X4_RX_DESKEW_ADJ_FRAC0r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC0r_GET
#define RX_X4_RX_DESKEW_ADJ_FRAC0r_TAB_DS_FRAC_NS_0f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC0r_TAB_DS_FRAC_NS_0f_GET
#define RX_X4_RX_DESKEW_ADJ_FRAC0r_TAB_DS_FRAC_NS_0f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC0r_TAB_DS_FRAC_NS_0f_SET
#define READ_RX_X4_RX_DESKEW_ADJ_FRAC0r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_RX_DESKEW_ADJ_FRAC0r
#define WRITE_RX_X4_RX_DESKEW_ADJ_FRAC0r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_RX_DESKEW_ADJ_FRAC0r
#define MODIFY_RX_X4_RX_DESKEW_ADJ_FRAC0r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_RX_DESKEW_ADJ_FRAC0r
#define READLN_RX_X4_RX_DESKEW_ADJ_FRAC0r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_RX_DESKEW_ADJ_FRAC0r
#define WRITELN_RX_X4_RX_DESKEW_ADJ_FRAC0r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_RX_DESKEW_ADJ_FRAC0r
#define WRITEALL_RX_X4_RX_DESKEW_ADJ_FRAC0r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_RX_DESKEW_ADJ_FRAC0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_RX_DESKEW_ADJ_INT1
 * BLOCKS:   RX_X4_CONTROL1
 * REGADDR:  0xc1f3
 * DESC:     RX deskew Adjustment1 Integer nanoseconds(Virtual lane based)
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TAB_DS_INT_NS_1  PMD RX deskew adjustment in nanoseconds. Signed 2s complement value. Indexed by Logical Lane.This field represents the Integral Part of Deskew adjustment for Virtual Lanes as explained below.In 100G MLD mode(Port0) - VL1/VL6/VL11/VL16In 40G MLD mode over 2 lanes(Port0 or Port2) - VL1/VL3Programmed by SW. HW will sign-extend to 48 bits.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT1r (0x0000c1f3 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT1r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_RX_DESKEW_ADJ_INT1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT1r_s {
	uint32_t v[1];
	uint32_t rx_x4_rx_deskew_adj_int1[1];
	uint32_t _rx_x4_rx_deskew_adj_int1;
} BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT1r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT1r_CLR(r) (r).rx_x4_rx_deskew_adj_int1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT1r_SET(r,d) (r).rx_x4_rx_deskew_adj_int1[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT1r_GET(r) (r).rx_x4_rx_deskew_adj_int1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT1r_TAB_DS_INT_NS_1f_GET(r) (((r).rx_x4_rx_deskew_adj_int1[0]) & 0xfff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT1r_TAB_DS_INT_NS_1f_SET(r,f) (r).rx_x4_rx_deskew_adj_int1[0]=(((r).rx_x4_rx_deskew_adj_int1[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff)) | (0xfff << 16)

/*
 * These macros can be used to access RX_X4_RX_DESKEW_ADJ_INT1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_RX_DESKEW_ADJ_INT1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT1r,(_r._rx_x4_rx_deskew_adj_int1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_RX_DESKEW_ADJ_INT1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT1r,(_r._rx_x4_rx_deskew_adj_int1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_RX_DESKEW_ADJ_INT1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT1r,(_r._rx_x4_rx_deskew_adj_int1))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_RX_DESKEW_ADJ_INT1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_rx_deskew_adj_int1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_RX_DESKEW_ADJ_INT1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_rx_deskew_adj_int1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_RX_DESKEW_ADJ_INT1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_rx_deskew_adj_int1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_RX_DESKEW_ADJ_INT1r BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT1r
#define RX_X4_RX_DESKEW_ADJ_INT1r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT1r_t RX_X4_RX_DESKEW_ADJ_INT1r_t;
#define RX_X4_RX_DESKEW_ADJ_INT1r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT1r_CLR
#define RX_X4_RX_DESKEW_ADJ_INT1r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT1r_SET
#define RX_X4_RX_DESKEW_ADJ_INT1r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT1r_GET
#define RX_X4_RX_DESKEW_ADJ_INT1r_TAB_DS_INT_NS_1f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT1r_TAB_DS_INT_NS_1f_GET
#define RX_X4_RX_DESKEW_ADJ_INT1r_TAB_DS_INT_NS_1f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT1r_TAB_DS_INT_NS_1f_SET
#define READ_RX_X4_RX_DESKEW_ADJ_INT1r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_RX_DESKEW_ADJ_INT1r
#define WRITE_RX_X4_RX_DESKEW_ADJ_INT1r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_RX_DESKEW_ADJ_INT1r
#define MODIFY_RX_X4_RX_DESKEW_ADJ_INT1r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_RX_DESKEW_ADJ_INT1r
#define READLN_RX_X4_RX_DESKEW_ADJ_INT1r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_RX_DESKEW_ADJ_INT1r
#define WRITELN_RX_X4_RX_DESKEW_ADJ_INT1r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_RX_DESKEW_ADJ_INT1r
#define WRITEALL_RX_X4_RX_DESKEW_ADJ_INT1r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_RX_DESKEW_ADJ_INT1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_RX_DESKEW_ADJ_FRAC1
 * BLOCKS:   RX_X4_CONTROL1
 * REGADDR:  0xc1f4
 * DESC:     RX deskew Adjustment1 Fractional nanoseconds(Virtual lane based)
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TAB_DS_FRAC_NS_1 PMD RX deskew adjustment in fractional nanoseconds. Signed 2s complement value as an extension of tab_ds_int_ns.Indexed by Logical Lane.This field represents the Fractional Part of Deskew adjustment for Virtual Lanes as explained below.In 100G MLD mode(Port0) - VL1/VL6/VL11/VL16In 40G MLD mode over 2 lanes(Port0 or Port2) - VL1/VL3
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC1r (0x0000c1f4 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC1r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_RX_DESKEW_ADJ_FRAC1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC1r_s {
	uint32_t v[1];
	uint32_t rx_x4_rx_deskew_adj_frac1[1];
	uint32_t _rx_x4_rx_deskew_adj_frac1;
} BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC1r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC1r_CLR(r) (r).rx_x4_rx_deskew_adj_frac1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC1r_SET(r,d) (r).rx_x4_rx_deskew_adj_frac1[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC1r_GET(r) (r).rx_x4_rx_deskew_adj_frac1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC1r_TAB_DS_FRAC_NS_1f_GET(r) ((((r).rx_x4_rx_deskew_adj_frac1[0]) >> 6) & 0x3ff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC1r_TAB_DS_FRAC_NS_1f_SET(r,f) (r).rx_x4_rx_deskew_adj_frac1[0]=(((r).rx_x4_rx_deskew_adj_frac1[0] & ~((uint32_t)0x3ff << 6)) | ((((uint32_t)f) & 0x3ff) << 6)) | (1023 << (16 + 6))

/*
 * These macros can be used to access RX_X4_RX_DESKEW_ADJ_FRAC1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_RX_DESKEW_ADJ_FRAC1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC1r,(_r._rx_x4_rx_deskew_adj_frac1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_RX_DESKEW_ADJ_FRAC1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC1r,(_r._rx_x4_rx_deskew_adj_frac1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_RX_DESKEW_ADJ_FRAC1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC1r,(_r._rx_x4_rx_deskew_adj_frac1))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_RX_DESKEW_ADJ_FRAC1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_rx_deskew_adj_frac1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_RX_DESKEW_ADJ_FRAC1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_rx_deskew_adj_frac1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_RX_DESKEW_ADJ_FRAC1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_rx_deskew_adj_frac1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_RX_DESKEW_ADJ_FRAC1r BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC1r
#define RX_X4_RX_DESKEW_ADJ_FRAC1r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC1r_t RX_X4_RX_DESKEW_ADJ_FRAC1r_t;
#define RX_X4_RX_DESKEW_ADJ_FRAC1r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC1r_CLR
#define RX_X4_RX_DESKEW_ADJ_FRAC1r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC1r_SET
#define RX_X4_RX_DESKEW_ADJ_FRAC1r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC1r_GET
#define RX_X4_RX_DESKEW_ADJ_FRAC1r_TAB_DS_FRAC_NS_1f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC1r_TAB_DS_FRAC_NS_1f_GET
#define RX_X4_RX_DESKEW_ADJ_FRAC1r_TAB_DS_FRAC_NS_1f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC1r_TAB_DS_FRAC_NS_1f_SET
#define READ_RX_X4_RX_DESKEW_ADJ_FRAC1r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_RX_DESKEW_ADJ_FRAC1r
#define WRITE_RX_X4_RX_DESKEW_ADJ_FRAC1r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_RX_DESKEW_ADJ_FRAC1r
#define MODIFY_RX_X4_RX_DESKEW_ADJ_FRAC1r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_RX_DESKEW_ADJ_FRAC1r
#define READLN_RX_X4_RX_DESKEW_ADJ_FRAC1r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_RX_DESKEW_ADJ_FRAC1r
#define WRITELN_RX_X4_RX_DESKEW_ADJ_FRAC1r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_RX_DESKEW_ADJ_FRAC1r
#define WRITEALL_RX_X4_RX_DESKEW_ADJ_FRAC1r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_RX_DESKEW_ADJ_FRAC1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_RX_DESKEW_ADJ_INT2
 * BLOCKS:   RX_X4_CONTROL1
 * REGADDR:  0xc1f5
 * DESC:     RX deskew Adjustment2 Integer nanoseconds(Virtual lane based)
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TAB_DS_INT_NS_2  PMD RX deskew adjustment in nanoseconds. Signed 2s complement value. Indexed by Logical Lane.This field represents the Integral Part of Deskew adjustment for Virtual Lanes VL2 or VL7 or VL12 or VL17 in 100G MLD mode.Programmed by SW. HW will sign-extend to 48 bits.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT2r (0x0000c1f5 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_RX_DESKEW_ADJ_INT2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT2r_s {
	uint32_t v[1];
	uint32_t rx_x4_rx_deskew_adj_int2[1];
	uint32_t _rx_x4_rx_deskew_adj_int2;
} BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT2r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT2r_CLR(r) (r).rx_x4_rx_deskew_adj_int2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT2r_SET(r,d) (r).rx_x4_rx_deskew_adj_int2[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT2r_GET(r) (r).rx_x4_rx_deskew_adj_int2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT2r_TAB_DS_INT_NS_2f_GET(r) (((r).rx_x4_rx_deskew_adj_int2[0]) & 0xfff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT2r_TAB_DS_INT_NS_2f_SET(r,f) (r).rx_x4_rx_deskew_adj_int2[0]=(((r).rx_x4_rx_deskew_adj_int2[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff)) | (0xfff << 16)

/*
 * These macros can be used to access RX_X4_RX_DESKEW_ADJ_INT2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_RX_DESKEW_ADJ_INT2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT2r,(_r._rx_x4_rx_deskew_adj_int2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_RX_DESKEW_ADJ_INT2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT2r,(_r._rx_x4_rx_deskew_adj_int2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_RX_DESKEW_ADJ_INT2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT2r,(_r._rx_x4_rx_deskew_adj_int2))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_RX_DESKEW_ADJ_INT2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_rx_deskew_adj_int2))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_RX_DESKEW_ADJ_INT2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_rx_deskew_adj_int2))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_RX_DESKEW_ADJ_INT2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_rx_deskew_adj_int2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_RX_DESKEW_ADJ_INT2r BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT2r
#define RX_X4_RX_DESKEW_ADJ_INT2r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT2r_t RX_X4_RX_DESKEW_ADJ_INT2r_t;
#define RX_X4_RX_DESKEW_ADJ_INT2r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT2r_CLR
#define RX_X4_RX_DESKEW_ADJ_INT2r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT2r_SET
#define RX_X4_RX_DESKEW_ADJ_INT2r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT2r_GET
#define RX_X4_RX_DESKEW_ADJ_INT2r_TAB_DS_INT_NS_2f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT2r_TAB_DS_INT_NS_2f_GET
#define RX_X4_RX_DESKEW_ADJ_INT2r_TAB_DS_INT_NS_2f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT2r_TAB_DS_INT_NS_2f_SET
#define READ_RX_X4_RX_DESKEW_ADJ_INT2r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_RX_DESKEW_ADJ_INT2r
#define WRITE_RX_X4_RX_DESKEW_ADJ_INT2r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_RX_DESKEW_ADJ_INT2r
#define MODIFY_RX_X4_RX_DESKEW_ADJ_INT2r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_RX_DESKEW_ADJ_INT2r
#define READLN_RX_X4_RX_DESKEW_ADJ_INT2r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_RX_DESKEW_ADJ_INT2r
#define WRITELN_RX_X4_RX_DESKEW_ADJ_INT2r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_RX_DESKEW_ADJ_INT2r
#define WRITEALL_RX_X4_RX_DESKEW_ADJ_INT2r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_RX_DESKEW_ADJ_INT2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_RX_DESKEW_ADJ_FRAC2
 * BLOCKS:   RX_X4_CONTROL1
 * REGADDR:  0xc1f6
 * DESC:     RX deskew Adjustment2 Fractional nanoseconds(Virtual lane based)
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TAB_DS_FRAC_NS_2 PMD RX deskew adjustment in fractional nanoseconds. Signed 2s complement value as an extension of tab_ds_int_ns.Indexed by Logical Lane.This field represents the Fractional Part of Deskew adjustment for Virtual Lanes VL2 or VL7 or VL12 or VL17 in 100G MLD mode.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC2r (0x0000c1f6 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_RX_DESKEW_ADJ_FRAC2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC2r_s {
	uint32_t v[1];
	uint32_t rx_x4_rx_deskew_adj_frac2[1];
	uint32_t _rx_x4_rx_deskew_adj_frac2;
} BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC2r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC2r_CLR(r) (r).rx_x4_rx_deskew_adj_frac2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC2r_SET(r,d) (r).rx_x4_rx_deskew_adj_frac2[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC2r_GET(r) (r).rx_x4_rx_deskew_adj_frac2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC2r_TAB_DS_FRAC_NS_2f_GET(r) ((((r).rx_x4_rx_deskew_adj_frac2[0]) >> 6) & 0x3ff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC2r_TAB_DS_FRAC_NS_2f_SET(r,f) (r).rx_x4_rx_deskew_adj_frac2[0]=(((r).rx_x4_rx_deskew_adj_frac2[0] & ~((uint32_t)0x3ff << 6)) | ((((uint32_t)f) & 0x3ff) << 6)) | (1023 << (16 + 6))

/*
 * These macros can be used to access RX_X4_RX_DESKEW_ADJ_FRAC2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_RX_DESKEW_ADJ_FRAC2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC2r,(_r._rx_x4_rx_deskew_adj_frac2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_RX_DESKEW_ADJ_FRAC2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC2r,(_r._rx_x4_rx_deskew_adj_frac2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_RX_DESKEW_ADJ_FRAC2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC2r,(_r._rx_x4_rx_deskew_adj_frac2))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_RX_DESKEW_ADJ_FRAC2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_rx_deskew_adj_frac2))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_RX_DESKEW_ADJ_FRAC2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_rx_deskew_adj_frac2))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_RX_DESKEW_ADJ_FRAC2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_rx_deskew_adj_frac2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_RX_DESKEW_ADJ_FRAC2r BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC2r
#define RX_X4_RX_DESKEW_ADJ_FRAC2r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC2r_t RX_X4_RX_DESKEW_ADJ_FRAC2r_t;
#define RX_X4_RX_DESKEW_ADJ_FRAC2r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC2r_CLR
#define RX_X4_RX_DESKEW_ADJ_FRAC2r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC2r_SET
#define RX_X4_RX_DESKEW_ADJ_FRAC2r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC2r_GET
#define RX_X4_RX_DESKEW_ADJ_FRAC2r_TAB_DS_FRAC_NS_2f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC2r_TAB_DS_FRAC_NS_2f_GET
#define RX_X4_RX_DESKEW_ADJ_FRAC2r_TAB_DS_FRAC_NS_2f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC2r_TAB_DS_FRAC_NS_2f_SET
#define READ_RX_X4_RX_DESKEW_ADJ_FRAC2r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_RX_DESKEW_ADJ_FRAC2r
#define WRITE_RX_X4_RX_DESKEW_ADJ_FRAC2r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_RX_DESKEW_ADJ_FRAC2r
#define MODIFY_RX_X4_RX_DESKEW_ADJ_FRAC2r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_RX_DESKEW_ADJ_FRAC2r
#define READLN_RX_X4_RX_DESKEW_ADJ_FRAC2r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_RX_DESKEW_ADJ_FRAC2r
#define WRITELN_RX_X4_RX_DESKEW_ADJ_FRAC2r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_RX_DESKEW_ADJ_FRAC2r
#define WRITEALL_RX_X4_RX_DESKEW_ADJ_FRAC2r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_RX_DESKEW_ADJ_FRAC2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_RX_DESKEW_ADJ_INT3
 * BLOCKS:   RX_X4_CONTROL1
 * REGADDR:  0xc1f7
 * DESC:     RX deskew Adjustment3 Integer nanoseconds(Virtual lane based)
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TAB_DS_INT_NS_3  PMD RX deskew adjustment in nanoseconds. Signed 2s complement value. Indexed by Logical Lane.This field represents the Integral Part of Deskew adjustment for Virtual Lanes VL3 or VL8 or VL13 or VL18 in 100G MLD mode.Programmed by SW. HW will sign-extend to 48 bits.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT3r (0x0000c1f7 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT3r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_RX_DESKEW_ADJ_INT3.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT3r_s {
	uint32_t v[1];
	uint32_t rx_x4_rx_deskew_adj_int3[1];
	uint32_t _rx_x4_rx_deskew_adj_int3;
} BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT3r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT3r_CLR(r) (r).rx_x4_rx_deskew_adj_int3[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT3r_SET(r,d) (r).rx_x4_rx_deskew_adj_int3[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT3r_GET(r) (r).rx_x4_rx_deskew_adj_int3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT3r_TAB_DS_INT_NS_3f_GET(r) (((r).rx_x4_rx_deskew_adj_int3[0]) & 0xfff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT3r_TAB_DS_INT_NS_3f_SET(r,f) (r).rx_x4_rx_deskew_adj_int3[0]=(((r).rx_x4_rx_deskew_adj_int3[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff)) | (0xfff << 16)

/*
 * These macros can be used to access RX_X4_RX_DESKEW_ADJ_INT3.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_RX_DESKEW_ADJ_INT3r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT3r,(_r._rx_x4_rx_deskew_adj_int3))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_RX_DESKEW_ADJ_INT3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT3r,(_r._rx_x4_rx_deskew_adj_int3)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_RX_DESKEW_ADJ_INT3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT3r,(_r._rx_x4_rx_deskew_adj_int3))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_RX_DESKEW_ADJ_INT3r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_rx_deskew_adj_int3))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_RX_DESKEW_ADJ_INT3r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_rx_deskew_adj_int3))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_RX_DESKEW_ADJ_INT3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT3r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_rx_deskew_adj_int3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_RX_DESKEW_ADJ_INT3r BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT3r
#define RX_X4_RX_DESKEW_ADJ_INT3r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT3r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT3r_t RX_X4_RX_DESKEW_ADJ_INT3r_t;
#define RX_X4_RX_DESKEW_ADJ_INT3r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT3r_CLR
#define RX_X4_RX_DESKEW_ADJ_INT3r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT3r_SET
#define RX_X4_RX_DESKEW_ADJ_INT3r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT3r_GET
#define RX_X4_RX_DESKEW_ADJ_INT3r_TAB_DS_INT_NS_3f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT3r_TAB_DS_INT_NS_3f_GET
#define RX_X4_RX_DESKEW_ADJ_INT3r_TAB_DS_INT_NS_3f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT3r_TAB_DS_INT_NS_3f_SET
#define READ_RX_X4_RX_DESKEW_ADJ_INT3r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_RX_DESKEW_ADJ_INT3r
#define WRITE_RX_X4_RX_DESKEW_ADJ_INT3r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_RX_DESKEW_ADJ_INT3r
#define MODIFY_RX_X4_RX_DESKEW_ADJ_INT3r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_RX_DESKEW_ADJ_INT3r
#define READLN_RX_X4_RX_DESKEW_ADJ_INT3r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_RX_DESKEW_ADJ_INT3r
#define WRITELN_RX_X4_RX_DESKEW_ADJ_INT3r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_RX_DESKEW_ADJ_INT3r
#define WRITEALL_RX_X4_RX_DESKEW_ADJ_INT3r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_RX_DESKEW_ADJ_INT3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_RX_DESKEW_ADJ_FRAC3
 * BLOCKS:   RX_X4_CONTROL1
 * REGADDR:  0xc1f8
 * DESC:     RX deskew Adjustment3 Fractional nanoseconds(Virtual lane based)
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TAB_DS_FRAC_NS_3 PMD RX deskew adjustment in fractional nanoseconds. Signed 2s complement value as an extension of tab_ds_int_ns.Indexed by Logical Lane.This field represents the Fractional Part of Deskew adjustment for Virtual Lanes VL3 or VL8 or VL13 or VL18 in 100G MLD mode.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC3r (0x0000c1f8 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC3r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_RX_DESKEW_ADJ_FRAC3.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC3r_s {
	uint32_t v[1];
	uint32_t rx_x4_rx_deskew_adj_frac3[1];
	uint32_t _rx_x4_rx_deskew_adj_frac3;
} BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC3r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC3r_CLR(r) (r).rx_x4_rx_deskew_adj_frac3[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC3r_SET(r,d) (r).rx_x4_rx_deskew_adj_frac3[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC3r_GET(r) (r).rx_x4_rx_deskew_adj_frac3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC3r_TAB_DS_FRAC_NS_3f_GET(r) ((((r).rx_x4_rx_deskew_adj_frac3[0]) >> 6) & 0x3ff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC3r_TAB_DS_FRAC_NS_3f_SET(r,f) (r).rx_x4_rx_deskew_adj_frac3[0]=(((r).rx_x4_rx_deskew_adj_frac3[0] & ~((uint32_t)0x3ff << 6)) | ((((uint32_t)f) & 0x3ff) << 6)) | (1023 << (16 + 6))

/*
 * These macros can be used to access RX_X4_RX_DESKEW_ADJ_FRAC3.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_RX_DESKEW_ADJ_FRAC3r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC3r,(_r._rx_x4_rx_deskew_adj_frac3))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_RX_DESKEW_ADJ_FRAC3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC3r,(_r._rx_x4_rx_deskew_adj_frac3)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_RX_DESKEW_ADJ_FRAC3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC3r,(_r._rx_x4_rx_deskew_adj_frac3))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_RX_DESKEW_ADJ_FRAC3r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_rx_deskew_adj_frac3))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_RX_DESKEW_ADJ_FRAC3r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_rx_deskew_adj_frac3))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_RX_DESKEW_ADJ_FRAC3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC3r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_rx_deskew_adj_frac3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_RX_DESKEW_ADJ_FRAC3r BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC3r
#define RX_X4_RX_DESKEW_ADJ_FRAC3r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC3r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC3r_t RX_X4_RX_DESKEW_ADJ_FRAC3r_t;
#define RX_X4_RX_DESKEW_ADJ_FRAC3r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC3r_CLR
#define RX_X4_RX_DESKEW_ADJ_FRAC3r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC3r_SET
#define RX_X4_RX_DESKEW_ADJ_FRAC3r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC3r_GET
#define RX_X4_RX_DESKEW_ADJ_FRAC3r_TAB_DS_FRAC_NS_3f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC3r_TAB_DS_FRAC_NS_3f_GET
#define RX_X4_RX_DESKEW_ADJ_FRAC3r_TAB_DS_FRAC_NS_3f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC3r_TAB_DS_FRAC_NS_3f_SET
#define READ_RX_X4_RX_DESKEW_ADJ_FRAC3r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_RX_DESKEW_ADJ_FRAC3r
#define WRITE_RX_X4_RX_DESKEW_ADJ_FRAC3r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_RX_DESKEW_ADJ_FRAC3r
#define MODIFY_RX_X4_RX_DESKEW_ADJ_FRAC3r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_RX_DESKEW_ADJ_FRAC3r
#define READLN_RX_X4_RX_DESKEW_ADJ_FRAC3r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_RX_DESKEW_ADJ_FRAC3r
#define WRITELN_RX_X4_RX_DESKEW_ADJ_FRAC3r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_RX_DESKEW_ADJ_FRAC3r
#define WRITEALL_RX_X4_RX_DESKEW_ADJ_FRAC3r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_RX_DESKEW_ADJ_FRAC3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_RX_DESKEW_ADJ_INT4
 * BLOCKS:   RX_X4_CONTROL1
 * REGADDR:  0xc1f9
 * DESC:     RX deskew Adjustment4 Integer nanoseconds(Virtual lane based)
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TAB_DS_INT_NS_4  PMD RX deskew adjustment in nanoseconds. Signed 2s complement value. Indexed by Logical Lane.This field represents the Integral Part of Deskew adjustment for Virtual Lanes VL4 or VL9 or VL14 or VL19 in 100G MLD mode.Programmed by SW. HW will sign-extend to 48 bits.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT4r (0x0000c1f9 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT4r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_RX_DESKEW_ADJ_INT4.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT4r_s {
	uint32_t v[1];
	uint32_t rx_x4_rx_deskew_adj_int4[1];
	uint32_t _rx_x4_rx_deskew_adj_int4;
} BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT4r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT4r_CLR(r) (r).rx_x4_rx_deskew_adj_int4[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT4r_SET(r,d) (r).rx_x4_rx_deskew_adj_int4[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT4r_GET(r) (r).rx_x4_rx_deskew_adj_int4[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT4r_TAB_DS_INT_NS_4f_GET(r) (((r).rx_x4_rx_deskew_adj_int4[0]) & 0xfff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT4r_TAB_DS_INT_NS_4f_SET(r,f) (r).rx_x4_rx_deskew_adj_int4[0]=(((r).rx_x4_rx_deskew_adj_int4[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff)) | (0xfff << 16)

/*
 * These macros can be used to access RX_X4_RX_DESKEW_ADJ_INT4.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_RX_DESKEW_ADJ_INT4r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT4r,(_r._rx_x4_rx_deskew_adj_int4))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_RX_DESKEW_ADJ_INT4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT4r,(_r._rx_x4_rx_deskew_adj_int4)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_RX_DESKEW_ADJ_INT4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT4r,(_r._rx_x4_rx_deskew_adj_int4))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_RX_DESKEW_ADJ_INT4r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_rx_deskew_adj_int4))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_RX_DESKEW_ADJ_INT4r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_rx_deskew_adj_int4))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_RX_DESKEW_ADJ_INT4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT4r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_rx_deskew_adj_int4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_RX_DESKEW_ADJ_INT4r BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT4r
#define RX_X4_RX_DESKEW_ADJ_INT4r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT4r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT4r_t RX_X4_RX_DESKEW_ADJ_INT4r_t;
#define RX_X4_RX_DESKEW_ADJ_INT4r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT4r_CLR
#define RX_X4_RX_DESKEW_ADJ_INT4r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT4r_SET
#define RX_X4_RX_DESKEW_ADJ_INT4r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT4r_GET
#define RX_X4_RX_DESKEW_ADJ_INT4r_TAB_DS_INT_NS_4f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT4r_TAB_DS_INT_NS_4f_GET
#define RX_X4_RX_DESKEW_ADJ_INT4r_TAB_DS_INT_NS_4f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT4r_TAB_DS_INT_NS_4f_SET
#define READ_RX_X4_RX_DESKEW_ADJ_INT4r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_RX_DESKEW_ADJ_INT4r
#define WRITE_RX_X4_RX_DESKEW_ADJ_INT4r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_RX_DESKEW_ADJ_INT4r
#define MODIFY_RX_X4_RX_DESKEW_ADJ_INT4r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_RX_DESKEW_ADJ_INT4r
#define READLN_RX_X4_RX_DESKEW_ADJ_INT4r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_RX_DESKEW_ADJ_INT4r
#define WRITELN_RX_X4_RX_DESKEW_ADJ_INT4r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_RX_DESKEW_ADJ_INT4r
#define WRITEALL_RX_X4_RX_DESKEW_ADJ_INT4r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_RX_DESKEW_ADJ_INT4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_INT4r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_RX_DESKEW_ADJ_FRAC4
 * BLOCKS:   RX_X4_CONTROL1
 * REGADDR:  0xc1fa
 * DESC:     RX deskew Adjustment4 Fractional nanoseconds(Virtual lane based)
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TAB_DS_FRAC_NS_4 PMD RX deskew adjustment in fractional nanoseconds. Signed 2s complement value as an extension of tab_ds_int_ns.Indexed by Logical Lane.This field represents the Fractional Part of Deskew adjustment for Virtual Lanes VL4 or VL9 or VL14 or VL19 in 100G MLD mode.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC4r (0x0000c1fa | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC4r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_RX_DESKEW_ADJ_FRAC4.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC4r_s {
	uint32_t v[1];
	uint32_t rx_x4_rx_deskew_adj_frac4[1];
	uint32_t _rx_x4_rx_deskew_adj_frac4;
} BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC4r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC4r_CLR(r) (r).rx_x4_rx_deskew_adj_frac4[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC4r_SET(r,d) (r).rx_x4_rx_deskew_adj_frac4[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC4r_GET(r) (r).rx_x4_rx_deskew_adj_frac4[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC4r_TAB_DS_FRAC_NS_4f_GET(r) ((((r).rx_x4_rx_deskew_adj_frac4[0]) >> 6) & 0x3ff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC4r_TAB_DS_FRAC_NS_4f_SET(r,f) (r).rx_x4_rx_deskew_adj_frac4[0]=(((r).rx_x4_rx_deskew_adj_frac4[0] & ~((uint32_t)0x3ff << 6)) | ((((uint32_t)f) & 0x3ff) << 6)) | (1023 << (16 + 6))

/*
 * These macros can be used to access RX_X4_RX_DESKEW_ADJ_FRAC4.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_RX_DESKEW_ADJ_FRAC4r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC4r,(_r._rx_x4_rx_deskew_adj_frac4))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_RX_DESKEW_ADJ_FRAC4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC4r,(_r._rx_x4_rx_deskew_adj_frac4)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_RX_DESKEW_ADJ_FRAC4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC4r,(_r._rx_x4_rx_deskew_adj_frac4))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_RX_DESKEW_ADJ_FRAC4r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_rx_deskew_adj_frac4))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_RX_DESKEW_ADJ_FRAC4r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_rx_deskew_adj_frac4))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_RX_DESKEW_ADJ_FRAC4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC4r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_rx_deskew_adj_frac4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_RX_DESKEW_ADJ_FRAC4r BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC4r
#define RX_X4_RX_DESKEW_ADJ_FRAC4r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC4r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC4r_t RX_X4_RX_DESKEW_ADJ_FRAC4r_t;
#define RX_X4_RX_DESKEW_ADJ_FRAC4r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC4r_CLR
#define RX_X4_RX_DESKEW_ADJ_FRAC4r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC4r_SET
#define RX_X4_RX_DESKEW_ADJ_FRAC4r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC4r_GET
#define RX_X4_RX_DESKEW_ADJ_FRAC4r_TAB_DS_FRAC_NS_4f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC4r_TAB_DS_FRAC_NS_4f_GET
#define RX_X4_RX_DESKEW_ADJ_FRAC4r_TAB_DS_FRAC_NS_4f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC4r_TAB_DS_FRAC_NS_4f_SET
#define READ_RX_X4_RX_DESKEW_ADJ_FRAC4r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_RX_DESKEW_ADJ_FRAC4r
#define WRITE_RX_X4_RX_DESKEW_ADJ_FRAC4r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_RX_DESKEW_ADJ_FRAC4r
#define MODIFY_RX_X4_RX_DESKEW_ADJ_FRAC4r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_RX_DESKEW_ADJ_FRAC4r
#define READLN_RX_X4_RX_DESKEW_ADJ_FRAC4r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_RX_DESKEW_ADJ_FRAC4r
#define WRITELN_RX_X4_RX_DESKEW_ADJ_FRAC4r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_RX_DESKEW_ADJ_FRAC4r
#define WRITEALL_RX_X4_RX_DESKEW_ADJ_FRAC4r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_RX_DESKEW_ADJ_FRAC4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_ADJ_FRAC4r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  ILKN_CTL0
 * BLOCKS:   ILKN_X4_CONTROL0
 * REGADDR:  0xc330
 * DESC:     ilkn control 0 register
 * RESETVAL: 0x4 (4)
 * ACCESS:   R/W
 * FIELDS:
 *     WM               Watermark to reach before data from bypass interface is sent on egress data pathWatermark applies to the egress path onlyThe optimal setting of the watermark is between 2 and 6Watermark level of 2 is set for any configuration value of less than 2Watermark level of 6 is set for any configuration value of greater than 6
 *     ILKN_SEL         1 = enable ingress and egress data paths through ilkn bypass logicWhen 0, data paths are connected to the PCS interface
 *     INV_TX_ORDER     1 = when tx20_sel is 1, bit[39:20] from bypass interface is first sent on the egress data path0 = when tx20_sel is 1, bit[19:0] from bypass interface is first sent on the egress data path
 *     INV_RX_ORDER     1 = when rx20_sel is 1, ingress data from serdes is first packed into bit[39:20] of the bypass interface0 = when rx20_sel is 1, ingress data from serdes is first packed into bit[19:0] of the bypass interface
 *     SOFT_RST_TX      1 = reset tx path logic, other register setting is not changed; set bit to 0 for normal operation
 *     SOFT_RST_RX      1 = reset rx path logic, other register setting is not changed; set bit to 0 for normal operation
 *     CREDIT_EN        1 = enable credit generation to bypass interface on the egress pathWhen 0, no credit is issued for the egress path of the bypass interface
 */
#define BCMI_TSCF_GEN3_XGXS_ILKN_CTL0r (0x0000c330 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_ILKN_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program ILKN_CTL0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_ILKN_CTL0r_s {
	uint32_t v[1];
	uint32_t ilkn_ctl0[1];
	uint32_t _ilkn_ctl0;
} BCMI_TSCF_GEN3_XGXS_ILKN_CTL0r_t;

#define BCMI_TSCF_GEN3_XGXS_ILKN_CTL0r_CLR(r) (r).ilkn_ctl0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_ILKN_CTL0r_SET(r,d) (r).ilkn_ctl0[0] = d
#define BCMI_TSCF_GEN3_XGXS_ILKN_CTL0r_GET(r) (r).ilkn_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_ILKN_CTL0r_CREDIT_ENf_GET(r) ((((r).ilkn_ctl0[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_ILKN_CTL0r_CREDIT_ENf_SET(r,f) (r).ilkn_ctl0[0]=(((r).ilkn_ctl0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_ILKN_CTL0r_SOFT_RST_RXf_GET(r) ((((r).ilkn_ctl0[0]) >> 9) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_ILKN_CTL0r_SOFT_RST_RXf_SET(r,f) (r).ilkn_ctl0[0]=(((r).ilkn_ctl0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_ILKN_CTL0r_SOFT_RST_TXf_GET(r) ((((r).ilkn_ctl0[0]) >> 8) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_ILKN_CTL0r_SOFT_RST_TXf_SET(r,f) (r).ilkn_ctl0[0]=(((r).ilkn_ctl0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_ILKN_CTL0r_INV_RX_ORDERf_GET(r) ((((r).ilkn_ctl0[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_ILKN_CTL0r_INV_RX_ORDERf_SET(r,f) (r).ilkn_ctl0[0]=(((r).ilkn_ctl0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_ILKN_CTL0r_INV_TX_ORDERf_GET(r) ((((r).ilkn_ctl0[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_ILKN_CTL0r_INV_TX_ORDERf_SET(r,f) (r).ilkn_ctl0[0]=(((r).ilkn_ctl0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_ILKN_CTL0r_ILKN_SELf_GET(r) ((((r).ilkn_ctl0[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_ILKN_CTL0r_ILKN_SELf_SET(r,f) (r).ilkn_ctl0[0]=(((r).ilkn_ctl0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_ILKN_CTL0r_WMf_GET(r) (((r).ilkn_ctl0[0]) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_ILKN_CTL0r_WMf_SET(r,f) (r).ilkn_ctl0[0]=(((r).ilkn_ctl0[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access ILKN_CTL0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_ILKN_CTL0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_ILKN_CTL0r,(_r._ilkn_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_ILKN_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_ILKN_CTL0r,(_r._ilkn_ctl0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_ILKN_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_ILKN_CTL0r,(_r._ilkn_ctl0))
#define BCMI_TSCF_GEN3_XGXS_READLN_ILKN_CTL0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_ILKN_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ilkn_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_ILKN_CTL0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_ILKN_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ilkn_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_ILKN_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_ILKN_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ilkn_ctl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ILKN_CTL0r BCMI_TSCF_GEN3_XGXS_ILKN_CTL0r
#define ILKN_CTL0r_SIZE BCMI_TSCF_GEN3_XGXS_ILKN_CTL0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_ILKN_CTL0r_t ILKN_CTL0r_t;
#define ILKN_CTL0r_CLR BCMI_TSCF_GEN3_XGXS_ILKN_CTL0r_CLR
#define ILKN_CTL0r_SET BCMI_TSCF_GEN3_XGXS_ILKN_CTL0r_SET
#define ILKN_CTL0r_GET BCMI_TSCF_GEN3_XGXS_ILKN_CTL0r_GET
#define ILKN_CTL0r_CREDIT_ENf_GET BCMI_TSCF_GEN3_XGXS_ILKN_CTL0r_CREDIT_ENf_GET
#define ILKN_CTL0r_CREDIT_ENf_SET BCMI_TSCF_GEN3_XGXS_ILKN_CTL0r_CREDIT_ENf_SET
#define ILKN_CTL0r_SOFT_RST_RXf_GET BCMI_TSCF_GEN3_XGXS_ILKN_CTL0r_SOFT_RST_RXf_GET
#define ILKN_CTL0r_SOFT_RST_RXf_SET BCMI_TSCF_GEN3_XGXS_ILKN_CTL0r_SOFT_RST_RXf_SET
#define ILKN_CTL0r_SOFT_RST_TXf_GET BCMI_TSCF_GEN3_XGXS_ILKN_CTL0r_SOFT_RST_TXf_GET
#define ILKN_CTL0r_SOFT_RST_TXf_SET BCMI_TSCF_GEN3_XGXS_ILKN_CTL0r_SOFT_RST_TXf_SET
#define ILKN_CTL0r_INV_RX_ORDERf_GET BCMI_TSCF_GEN3_XGXS_ILKN_CTL0r_INV_RX_ORDERf_GET
#define ILKN_CTL0r_INV_RX_ORDERf_SET BCMI_TSCF_GEN3_XGXS_ILKN_CTL0r_INV_RX_ORDERf_SET
#define ILKN_CTL0r_INV_TX_ORDERf_GET BCMI_TSCF_GEN3_XGXS_ILKN_CTL0r_INV_TX_ORDERf_GET
#define ILKN_CTL0r_INV_TX_ORDERf_SET BCMI_TSCF_GEN3_XGXS_ILKN_CTL0r_INV_TX_ORDERf_SET
#define ILKN_CTL0r_ILKN_SELf_GET BCMI_TSCF_GEN3_XGXS_ILKN_CTL0r_ILKN_SELf_GET
#define ILKN_CTL0r_ILKN_SELf_SET BCMI_TSCF_GEN3_XGXS_ILKN_CTL0r_ILKN_SELf_SET
#define ILKN_CTL0r_WMf_GET BCMI_TSCF_GEN3_XGXS_ILKN_CTL0r_WMf_GET
#define ILKN_CTL0r_WMf_SET BCMI_TSCF_GEN3_XGXS_ILKN_CTL0r_WMf_SET
#define READ_ILKN_CTL0r BCMI_TSCF_GEN3_XGXS_READ_ILKN_CTL0r
#define WRITE_ILKN_CTL0r BCMI_TSCF_GEN3_XGXS_WRITE_ILKN_CTL0r
#define MODIFY_ILKN_CTL0r BCMI_TSCF_GEN3_XGXS_MODIFY_ILKN_CTL0r
#define READLN_ILKN_CTL0r BCMI_TSCF_GEN3_XGXS_READLN_ILKN_CTL0r
#define WRITELN_ILKN_CTL0r BCMI_TSCF_GEN3_XGXS_WRITELN_ILKN_CTL0r
#define WRITEALL_ILKN_CTL0r BCMI_TSCF_GEN3_XGXS_WRITEALL_ILKN_CTL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_ILKN_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  ILKN_STS0
 * BLOCKS:   ILKN_X4_STATUS0
 * REGADDR:  0xc340
 * DESC:     ilkn status 0 register
 * RESETVAL: 0x11 (17)
 * ACCESS:   R/W
 * FIELDS:
 *     RXFIFO_EMPTY     rxfifo status  - mainly for simulatin and debug purposesreal time rxfifo status in bypass rxclk domain; rxfifo is empty
 *     RXFIFO_FULL      rxfifo status  - mainly for simulatin and debug purposesreal time rxfifo status in serdes rxclk domain; rxfifo is full
 *     RXFIFO_OVERRUN   rxfifo status  - mainly for simulatin and debug purposesreal time rxfifo status in bypass rxclk domain; rxfifo is being written when full
 *     RXFIFO_UNDERRUN  rxfifo status  - mainly for simulatin and debug purposesreal time rxfifo status in bypass rxclk domain; rxfifo is being read when empty
 *     TXFIFO_EMPTY     txfifo status  - mainly for simulatin and debug purposesreal time txfifo status in serdes txwclk domain; txfifo is empty
 *     TXFIFO_FULL      txfifo status  - mainly for simulatin and debug purposesreal time txfifo status in bypass txclk domain; txfifo is full
 *     TXFIFO_OVERRUN   txfifo status  - mainly for simulatin and debug purposesreal time txfifo status in serdes txwclk domain; txfifo is being written when full
 *     TXFIFO_UNDERRUN  txfifo status  - mainly for simulatin and debug purposesreal time txfifo status in serdes txwclk domain; txfifo is being read when empty
 */
#define BCMI_TSCF_GEN3_XGXS_ILKN_STS0r (0x0000c340 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_ILKN_STS0r_SIZE 4

/*
 * This structure should be used to declare and program ILKN_STS0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_ILKN_STS0r_s {
	uint32_t v[1];
	uint32_t ilkn_sts0[1];
	uint32_t _ilkn_sts0;
} BCMI_TSCF_GEN3_XGXS_ILKN_STS0r_t;

#define BCMI_TSCF_GEN3_XGXS_ILKN_STS0r_CLR(r) (r).ilkn_sts0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_ILKN_STS0r_SET(r,d) (r).ilkn_sts0[0] = d
#define BCMI_TSCF_GEN3_XGXS_ILKN_STS0r_GET(r) (r).ilkn_sts0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_ILKN_STS0r_TXFIFO_UNDERRUNf_GET(r) ((((r).ilkn_sts0[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_ILKN_STS0r_TXFIFO_UNDERRUNf_SET(r,f) (r).ilkn_sts0[0]=(((r).ilkn_sts0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_ILKN_STS0r_TXFIFO_OVERRUNf_GET(r) ((((r).ilkn_sts0[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_ILKN_STS0r_TXFIFO_OVERRUNf_SET(r,f) (r).ilkn_sts0[0]=(((r).ilkn_sts0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_ILKN_STS0r_TXFIFO_FULLf_GET(r) ((((r).ilkn_sts0[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_ILKN_STS0r_TXFIFO_FULLf_SET(r,f) (r).ilkn_sts0[0]=(((r).ilkn_sts0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_ILKN_STS0r_TXFIFO_EMPTYf_GET(r) ((((r).ilkn_sts0[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_ILKN_STS0r_TXFIFO_EMPTYf_SET(r,f) (r).ilkn_sts0[0]=(((r).ilkn_sts0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_ILKN_STS0r_RXFIFO_UNDERRUNf_GET(r) ((((r).ilkn_sts0[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_ILKN_STS0r_RXFIFO_UNDERRUNf_SET(r,f) (r).ilkn_sts0[0]=(((r).ilkn_sts0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_ILKN_STS0r_RXFIFO_OVERRUNf_GET(r) ((((r).ilkn_sts0[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_ILKN_STS0r_RXFIFO_OVERRUNf_SET(r,f) (r).ilkn_sts0[0]=(((r).ilkn_sts0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_ILKN_STS0r_RXFIFO_FULLf_GET(r) ((((r).ilkn_sts0[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_ILKN_STS0r_RXFIFO_FULLf_SET(r,f) (r).ilkn_sts0[0]=(((r).ilkn_sts0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_ILKN_STS0r_RXFIFO_EMPTYf_GET(r) (((r).ilkn_sts0[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_ILKN_STS0r_RXFIFO_EMPTYf_SET(r,f) (r).ilkn_sts0[0]=(((r).ilkn_sts0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access ILKN_STS0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_ILKN_STS0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_ILKN_STS0r,(_r._ilkn_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_ILKN_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_ILKN_STS0r,(_r._ilkn_sts0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_ILKN_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_ILKN_STS0r,(_r._ilkn_sts0))
#define BCMI_TSCF_GEN3_XGXS_READLN_ILKN_STS0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_ILKN_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ilkn_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_ILKN_STS0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_ILKN_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ilkn_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_ILKN_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_ILKN_STS0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ilkn_sts0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ILKN_STS0r BCMI_TSCF_GEN3_XGXS_ILKN_STS0r
#define ILKN_STS0r_SIZE BCMI_TSCF_GEN3_XGXS_ILKN_STS0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_ILKN_STS0r_t ILKN_STS0r_t;
#define ILKN_STS0r_CLR BCMI_TSCF_GEN3_XGXS_ILKN_STS0r_CLR
#define ILKN_STS0r_SET BCMI_TSCF_GEN3_XGXS_ILKN_STS0r_SET
#define ILKN_STS0r_GET BCMI_TSCF_GEN3_XGXS_ILKN_STS0r_GET
#define ILKN_STS0r_TXFIFO_UNDERRUNf_GET BCMI_TSCF_GEN3_XGXS_ILKN_STS0r_TXFIFO_UNDERRUNf_GET
#define ILKN_STS0r_TXFIFO_UNDERRUNf_SET BCMI_TSCF_GEN3_XGXS_ILKN_STS0r_TXFIFO_UNDERRUNf_SET
#define ILKN_STS0r_TXFIFO_OVERRUNf_GET BCMI_TSCF_GEN3_XGXS_ILKN_STS0r_TXFIFO_OVERRUNf_GET
#define ILKN_STS0r_TXFIFO_OVERRUNf_SET BCMI_TSCF_GEN3_XGXS_ILKN_STS0r_TXFIFO_OVERRUNf_SET
#define ILKN_STS0r_TXFIFO_FULLf_GET BCMI_TSCF_GEN3_XGXS_ILKN_STS0r_TXFIFO_FULLf_GET
#define ILKN_STS0r_TXFIFO_FULLf_SET BCMI_TSCF_GEN3_XGXS_ILKN_STS0r_TXFIFO_FULLf_SET
#define ILKN_STS0r_TXFIFO_EMPTYf_GET BCMI_TSCF_GEN3_XGXS_ILKN_STS0r_TXFIFO_EMPTYf_GET
#define ILKN_STS0r_TXFIFO_EMPTYf_SET BCMI_TSCF_GEN3_XGXS_ILKN_STS0r_TXFIFO_EMPTYf_SET
#define ILKN_STS0r_RXFIFO_UNDERRUNf_GET BCMI_TSCF_GEN3_XGXS_ILKN_STS0r_RXFIFO_UNDERRUNf_GET
#define ILKN_STS0r_RXFIFO_UNDERRUNf_SET BCMI_TSCF_GEN3_XGXS_ILKN_STS0r_RXFIFO_UNDERRUNf_SET
#define ILKN_STS0r_RXFIFO_OVERRUNf_GET BCMI_TSCF_GEN3_XGXS_ILKN_STS0r_RXFIFO_OVERRUNf_GET
#define ILKN_STS0r_RXFIFO_OVERRUNf_SET BCMI_TSCF_GEN3_XGXS_ILKN_STS0r_RXFIFO_OVERRUNf_SET
#define ILKN_STS0r_RXFIFO_FULLf_GET BCMI_TSCF_GEN3_XGXS_ILKN_STS0r_RXFIFO_FULLf_GET
#define ILKN_STS0r_RXFIFO_FULLf_SET BCMI_TSCF_GEN3_XGXS_ILKN_STS0r_RXFIFO_FULLf_SET
#define ILKN_STS0r_RXFIFO_EMPTYf_GET BCMI_TSCF_GEN3_XGXS_ILKN_STS0r_RXFIFO_EMPTYf_GET
#define ILKN_STS0r_RXFIFO_EMPTYf_SET BCMI_TSCF_GEN3_XGXS_ILKN_STS0r_RXFIFO_EMPTYf_SET
#define READ_ILKN_STS0r BCMI_TSCF_GEN3_XGXS_READ_ILKN_STS0r
#define WRITE_ILKN_STS0r BCMI_TSCF_GEN3_XGXS_WRITE_ILKN_STS0r
#define MODIFY_ILKN_STS0r BCMI_TSCF_GEN3_XGXS_MODIFY_ILKN_STS0r
#define READLN_ILKN_STS0r BCMI_TSCF_GEN3_XGXS_READLN_ILKN_STS0r
#define WRITELN_ILKN_STS0r BCMI_TSCF_GEN3_XGXS_WRITELN_ILKN_STS0r
#define WRITEALL_ILKN_STS0r BCMI_TSCF_GEN3_XGXS_WRITEALL_ILKN_STS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_ILKN_STS0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_FEC_ALGN_FSM_ST
 * BLOCKS:   RX_X4_CL91_STATUS0
 * REGADDR:  0xc350
 * DESC:     fec alignment status
 * RESETVAL: 0x8 (8)
 * ACCESS:   R/W
 * FIELDS:
 *     CL91_FEC_ALGN_FSM_LIVE_STATE FEC alignment FSM current state
 *     CL91_FEC_ALGN_FSM_LATCHED_STATE FEC alignment FSM latched stateEach bit represents a particular state. The bit positions for each state is shown belowThe register clears only when read. It is not cleared even on pipeline reset.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_ALGN_FSM_STr (0x0000c350 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_ALGN_FSM_STr_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_ALGN_FSM_ST.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_ALGN_FSM_STr_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_algn_fsm_st[1];
	uint32_t _rx_x4_fec_algn_fsm_st;
} BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_ALGN_FSM_STr_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_ALGN_FSM_STr_CLR(r) (r).rx_x4_fec_algn_fsm_st[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_ALGN_FSM_STr_SET(r,d) (r).rx_x4_fec_algn_fsm_st[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_ALGN_FSM_STr_GET(r) (r).rx_x4_fec_algn_fsm_st[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_ALGN_FSM_STr_CL91_FEC_ALGN_FSM_LATCHED_STATEf_GET(r) ((((r).rx_x4_fec_algn_fsm_st[0]) >> 3) & 0x7f)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_ALGN_FSM_STr_CL91_FEC_ALGN_FSM_LATCHED_STATEf_SET(r,f) (r).rx_x4_fec_algn_fsm_st[0]=(((r).rx_x4_fec_algn_fsm_st[0] & ~((uint32_t)0x7f << 3)) | ((((uint32_t)f) & 0x7f) << 3)) | (127 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_ALGN_FSM_STr_CL91_FEC_ALGN_FSM_LIVE_STATEf_GET(r) (((r).rx_x4_fec_algn_fsm_st[0]) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_ALGN_FSM_STr_CL91_FEC_ALGN_FSM_LIVE_STATEf_SET(r,f) (r).rx_x4_fec_algn_fsm_st[0]=(((r).rx_x4_fec_algn_fsm_st[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access RX_X4_FEC_ALGN_FSM_ST.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_ALGN_FSM_STr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_ALGN_FSM_STr,(_r._rx_x4_fec_algn_fsm_st))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_ALGN_FSM_STr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_ALGN_FSM_STr,(_r._rx_x4_fec_algn_fsm_st)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_ALGN_FSM_STr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_ALGN_FSM_STr,(_r._rx_x4_fec_algn_fsm_st))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_ALGN_FSM_STr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_ALGN_FSM_STr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_algn_fsm_st))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_ALGN_FSM_STr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_ALGN_FSM_STr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_algn_fsm_st))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_ALGN_FSM_STr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_ALGN_FSM_STr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_algn_fsm_st))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_ALGN_FSM_STr BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_ALGN_FSM_STr
#define RX_X4_FEC_ALGN_FSM_STr_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_ALGN_FSM_STr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_ALGN_FSM_STr_t RX_X4_FEC_ALGN_FSM_STr_t;
#define RX_X4_FEC_ALGN_FSM_STr_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_ALGN_FSM_STr_CLR
#define RX_X4_FEC_ALGN_FSM_STr_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_ALGN_FSM_STr_SET
#define RX_X4_FEC_ALGN_FSM_STr_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_ALGN_FSM_STr_GET
#define RX_X4_FEC_ALGN_FSM_STr_CL91_FEC_ALGN_FSM_LATCHED_STATEf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_ALGN_FSM_STr_CL91_FEC_ALGN_FSM_LATCHED_STATEf_GET
#define RX_X4_FEC_ALGN_FSM_STr_CL91_FEC_ALGN_FSM_LATCHED_STATEf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_ALGN_FSM_STr_CL91_FEC_ALGN_FSM_LATCHED_STATEf_SET
#define RX_X4_FEC_ALGN_FSM_STr_CL91_FEC_ALGN_FSM_LIVE_STATEf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_ALGN_FSM_STr_CL91_FEC_ALGN_FSM_LIVE_STATEf_GET
#define RX_X4_FEC_ALGN_FSM_STr_CL91_FEC_ALGN_FSM_LIVE_STATEf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_ALGN_FSM_STr_CL91_FEC_ALGN_FSM_LIVE_STATEf_SET
#define READ_RX_X4_FEC_ALGN_FSM_STr BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_ALGN_FSM_STr
#define WRITE_RX_X4_FEC_ALGN_FSM_STr BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_ALGN_FSM_STr
#define MODIFY_RX_X4_FEC_ALGN_FSM_STr BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_ALGN_FSM_STr
#define READLN_RX_X4_FEC_ALGN_FSM_STr BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_ALGN_FSM_STr
#define WRITELN_RX_X4_FEC_ALGN_FSM_STr BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_ALGN_FSM_STr
#define WRITEALL_RX_X4_FEC_ALGN_FSM_STr BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_ALGN_FSM_STr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_ALGN_FSM_STr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_CL91_RXP_STS
 * BLOCKS:   RX_X4_CL91_STATUS0
 * REGADDR:  0xc351
 * DESC:     cl91 rxp status indicators
 * RESETVAL: 0x600 (1536)
 * ACCESS:   R/W
 * FIELDS:
 *     RESTART_LOCK_LIVE Set by the FEC alignment FSM in the deskew stage to reset the synchronization process on all FEC lanes
 *     RESTART_LOCK_LL  Latched low version of restart_lock_live
 *     RESTART_LOCK_LH  Latched high version of restart_lock_live
 *     FEC_ALIGN_STATUS_LIVE Set when deskew is achieved successfully.
 *     FEC_ALIGN_STATUS_LL Latched low version of fec_align_status_live
 *     FEC_ALIGN_STATUS_LH Latched high version of fec_align_status_live
 *     HI_SER_LIVE      When FEC_bypass_indication_enable is set, this bit is set to 1 if the number of RS-FEC symbol errors in a window of 8192 (or 128) codewords exceeds the threshold (K) and is set to 0 otherwise.
 *     HI_SER_LL        Latched low version of hi_ser_live
 *     HI_SER_LH        Latched high version of hi_ser_live
 *     FEC_BYP_CORR_ABILITY Indicates the ability to perform error detection without error correction.
 *     FEC_BYP_IND_ABILITY Indicates the ability to bypass the error indication function.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr (0x0000c351 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL91_RXP_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_s {
	uint32_t v[1];
	uint32_t rx_x4_cl91_rxp_sts[1];
	uint32_t _rx_x4_cl91_rxp_sts;
} BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_CLR(r) (r).rx_x4_cl91_rxp_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_SET(r,d) (r).rx_x4_cl91_rxp_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_GET(r) (r).rx_x4_cl91_rxp_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_FEC_BYP_IND_ABILITYf_GET(r) ((((r).rx_x4_cl91_rxp_sts[0]) >> 10) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_FEC_BYP_IND_ABILITYf_SET(r,f) (r).rx_x4_cl91_rxp_sts[0]=(((r).rx_x4_cl91_rxp_sts[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_FEC_BYP_CORR_ABILITYf_GET(r) ((((r).rx_x4_cl91_rxp_sts[0]) >> 9) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_FEC_BYP_CORR_ABILITYf_SET(r,f) (r).rx_x4_cl91_rxp_sts[0]=(((r).rx_x4_cl91_rxp_sts[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_HI_SER_LHf_GET(r) ((((r).rx_x4_cl91_rxp_sts[0]) >> 8) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_HI_SER_LHf_SET(r,f) (r).rx_x4_cl91_rxp_sts[0]=(((r).rx_x4_cl91_rxp_sts[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_HI_SER_LLf_GET(r) ((((r).rx_x4_cl91_rxp_sts[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_HI_SER_LLf_SET(r,f) (r).rx_x4_cl91_rxp_sts[0]=(((r).rx_x4_cl91_rxp_sts[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_HI_SER_LIVEf_GET(r) ((((r).rx_x4_cl91_rxp_sts[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_HI_SER_LIVEf_SET(r,f) (r).rx_x4_cl91_rxp_sts[0]=(((r).rx_x4_cl91_rxp_sts[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_FEC_ALIGN_STATUS_LHf_GET(r) ((((r).rx_x4_cl91_rxp_sts[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_FEC_ALIGN_STATUS_LHf_SET(r,f) (r).rx_x4_cl91_rxp_sts[0]=(((r).rx_x4_cl91_rxp_sts[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_FEC_ALIGN_STATUS_LLf_GET(r) ((((r).rx_x4_cl91_rxp_sts[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_FEC_ALIGN_STATUS_LLf_SET(r,f) (r).rx_x4_cl91_rxp_sts[0]=(((r).rx_x4_cl91_rxp_sts[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_FEC_ALIGN_STATUS_LIVEf_GET(r) ((((r).rx_x4_cl91_rxp_sts[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_FEC_ALIGN_STATUS_LIVEf_SET(r,f) (r).rx_x4_cl91_rxp_sts[0]=(((r).rx_x4_cl91_rxp_sts[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_RESTART_LOCK_LHf_GET(r) ((((r).rx_x4_cl91_rxp_sts[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_RESTART_LOCK_LHf_SET(r,f) (r).rx_x4_cl91_rxp_sts[0]=(((r).rx_x4_cl91_rxp_sts[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_RESTART_LOCK_LLf_GET(r) ((((r).rx_x4_cl91_rxp_sts[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_RESTART_LOCK_LLf_SET(r,f) (r).rx_x4_cl91_rxp_sts[0]=(((r).rx_x4_cl91_rxp_sts[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_RESTART_LOCK_LIVEf_GET(r) (((r).rx_x4_cl91_rxp_sts[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_RESTART_LOCK_LIVEf_SET(r,f) (r).rx_x4_cl91_rxp_sts[0]=(((r).rx_x4_cl91_rxp_sts[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_X4_CL91_RXP_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL91_RXP_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr,(_r._rx_x4_cl91_rxp_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL91_RXP_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr,(_r._rx_x4_cl91_rxp_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL91_RXP_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr,(_r._rx_x4_cl91_rxp_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL91_RXP_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_rxp_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL91_RXP_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_rxp_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL91_RXP_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl91_rxp_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL91_RXP_STSr BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr
#define RX_X4_CL91_RXP_STSr_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_t RX_X4_CL91_RXP_STSr_t;
#define RX_X4_CL91_RXP_STSr_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_CLR
#define RX_X4_CL91_RXP_STSr_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_SET
#define RX_X4_CL91_RXP_STSr_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_GET
#define RX_X4_CL91_RXP_STSr_FEC_BYP_IND_ABILITYf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_FEC_BYP_IND_ABILITYf_GET
#define RX_X4_CL91_RXP_STSr_FEC_BYP_IND_ABILITYf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_FEC_BYP_IND_ABILITYf_SET
#define RX_X4_CL91_RXP_STSr_FEC_BYP_CORR_ABILITYf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_FEC_BYP_CORR_ABILITYf_GET
#define RX_X4_CL91_RXP_STSr_FEC_BYP_CORR_ABILITYf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_FEC_BYP_CORR_ABILITYf_SET
#define RX_X4_CL91_RXP_STSr_HI_SER_LHf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_HI_SER_LHf_GET
#define RX_X4_CL91_RXP_STSr_HI_SER_LHf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_HI_SER_LHf_SET
#define RX_X4_CL91_RXP_STSr_HI_SER_LLf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_HI_SER_LLf_GET
#define RX_X4_CL91_RXP_STSr_HI_SER_LLf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_HI_SER_LLf_SET
#define RX_X4_CL91_RXP_STSr_HI_SER_LIVEf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_HI_SER_LIVEf_GET
#define RX_X4_CL91_RXP_STSr_HI_SER_LIVEf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_HI_SER_LIVEf_SET
#define RX_X4_CL91_RXP_STSr_FEC_ALIGN_STATUS_LHf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_FEC_ALIGN_STATUS_LHf_GET
#define RX_X4_CL91_RXP_STSr_FEC_ALIGN_STATUS_LHf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_FEC_ALIGN_STATUS_LHf_SET
#define RX_X4_CL91_RXP_STSr_FEC_ALIGN_STATUS_LLf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_FEC_ALIGN_STATUS_LLf_GET
#define RX_X4_CL91_RXP_STSr_FEC_ALIGN_STATUS_LLf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_FEC_ALIGN_STATUS_LLf_SET
#define RX_X4_CL91_RXP_STSr_FEC_ALIGN_STATUS_LIVEf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_FEC_ALIGN_STATUS_LIVEf_GET
#define RX_X4_CL91_RXP_STSr_FEC_ALIGN_STATUS_LIVEf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_FEC_ALIGN_STATUS_LIVEf_SET
#define RX_X4_CL91_RXP_STSr_RESTART_LOCK_LHf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_RESTART_LOCK_LHf_GET
#define RX_X4_CL91_RXP_STSr_RESTART_LOCK_LHf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_RESTART_LOCK_LHf_SET
#define RX_X4_CL91_RXP_STSr_RESTART_LOCK_LLf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_RESTART_LOCK_LLf_GET
#define RX_X4_CL91_RXP_STSr_RESTART_LOCK_LLf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_RESTART_LOCK_LLf_SET
#define RX_X4_CL91_RXP_STSr_RESTART_LOCK_LIVEf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_RESTART_LOCK_LIVEf_GET
#define RX_X4_CL91_RXP_STSr_RESTART_LOCK_LIVEf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr_RESTART_LOCK_LIVEf_SET
#define READ_RX_X4_CL91_RXP_STSr BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL91_RXP_STSr
#define WRITE_RX_X4_CL91_RXP_STSr BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL91_RXP_STSr
#define MODIFY_RX_X4_CL91_RXP_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL91_RXP_STSr
#define READLN_RX_X4_CL91_RXP_STSr BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL91_RXP_STSr
#define WRITELN_RX_X4_CL91_RXP_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL91_RXP_STSr
#define WRITEALL_RX_X4_CL91_RXP_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL91_RXP_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_RXP_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_FEC_CORR_CTR0
 * BLOCKS:   RX_X4_CL91_STATUS0
 * REGADDR:  0xc352
 * DESC:     Lower 16 bits of FEC corrected codeword counter
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL91_FEC_CORR_CW_CNTR_LOWER Lower 16 bits of the CL91 FEC corrected code word counter.Counts once for each corrected FEC codeword processed when fec_align_status is true.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORR_CTR0r (0x0000c352 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORR_CTR0r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_CORR_CTR0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORR_CTR0r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_corr_ctr0[1];
	uint32_t _rx_x4_fec_corr_ctr0;
} BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORR_CTR0r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORR_CTR0r_CLR(r) (r).rx_x4_fec_corr_ctr0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORR_CTR0r_SET(r,d) (r).rx_x4_fec_corr_ctr0[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORR_CTR0r_GET(r) (r).rx_x4_fec_corr_ctr0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORR_CTR0r_CL91_FEC_CORR_CW_CNTR_LOWERf_GET(r) (((r).rx_x4_fec_corr_ctr0[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORR_CTR0r_CL91_FEC_CORR_CW_CNTR_LOWERf_SET(r,f) (r).rx_x4_fec_corr_ctr0[0]=(((r).rx_x4_fec_corr_ctr0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_CORR_CTR0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_CORR_CTR0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORR_CTR0r,(_r._rx_x4_fec_corr_ctr0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_CORR_CTR0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORR_CTR0r,(_r._rx_x4_fec_corr_ctr0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_CORR_CTR0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORR_CTR0r,(_r._rx_x4_fec_corr_ctr0))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_CORR_CTR0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORR_CTR0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_corr_ctr0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_CORR_CTR0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORR_CTR0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_corr_ctr0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_CORR_CTR0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORR_CTR0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_corr_ctr0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_CORR_CTR0r BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORR_CTR0r
#define RX_X4_FEC_CORR_CTR0r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORR_CTR0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORR_CTR0r_t RX_X4_FEC_CORR_CTR0r_t;
#define RX_X4_FEC_CORR_CTR0r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORR_CTR0r_CLR
#define RX_X4_FEC_CORR_CTR0r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORR_CTR0r_SET
#define RX_X4_FEC_CORR_CTR0r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORR_CTR0r_GET
#define RX_X4_FEC_CORR_CTR0r_CL91_FEC_CORR_CW_CNTR_LOWERf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORR_CTR0r_CL91_FEC_CORR_CW_CNTR_LOWERf_GET
#define RX_X4_FEC_CORR_CTR0r_CL91_FEC_CORR_CW_CNTR_LOWERf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORR_CTR0r_CL91_FEC_CORR_CW_CNTR_LOWERf_SET
#define READ_RX_X4_FEC_CORR_CTR0r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_CORR_CTR0r
#define WRITE_RX_X4_FEC_CORR_CTR0r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_CORR_CTR0r
#define MODIFY_RX_X4_FEC_CORR_CTR0r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_CORR_CTR0r
#define READLN_RX_X4_FEC_CORR_CTR0r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_CORR_CTR0r
#define WRITELN_RX_X4_FEC_CORR_CTR0r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_CORR_CTR0r
#define WRITEALL_RX_X4_FEC_CORR_CTR0r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_CORR_CTR0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORR_CTR0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_FEC_CORR_CTR1
 * BLOCKS:   RX_X4_CL91_STATUS0
 * REGADDR:  0xc353
 * DESC:     Upper 16 bits of FEC corrected codeword counter
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL91_FEC_CORR_CW_CNTR_UPPER Upper 16 bits of the CL91 FEC corrected code word counter.Read the lower 16 bits firstSaturates on overflow
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORR_CTR1r (0x0000c353 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORR_CTR1r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_CORR_CTR1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORR_CTR1r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_corr_ctr1[1];
	uint32_t _rx_x4_fec_corr_ctr1;
} BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORR_CTR1r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORR_CTR1r_CLR(r) (r).rx_x4_fec_corr_ctr1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORR_CTR1r_SET(r,d) (r).rx_x4_fec_corr_ctr1[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORR_CTR1r_GET(r) (r).rx_x4_fec_corr_ctr1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORR_CTR1r_CL91_FEC_CORR_CW_CNTR_UPPERf_GET(r) (((r).rx_x4_fec_corr_ctr1[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORR_CTR1r_CL91_FEC_CORR_CW_CNTR_UPPERf_SET(r,f) (r).rx_x4_fec_corr_ctr1[0]=(((r).rx_x4_fec_corr_ctr1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_CORR_CTR1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_CORR_CTR1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORR_CTR1r,(_r._rx_x4_fec_corr_ctr1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_CORR_CTR1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORR_CTR1r,(_r._rx_x4_fec_corr_ctr1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_CORR_CTR1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORR_CTR1r,(_r._rx_x4_fec_corr_ctr1))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_CORR_CTR1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORR_CTR1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_corr_ctr1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_CORR_CTR1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORR_CTR1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_corr_ctr1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_CORR_CTR1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORR_CTR1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_corr_ctr1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_CORR_CTR1r BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORR_CTR1r
#define RX_X4_FEC_CORR_CTR1r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORR_CTR1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORR_CTR1r_t RX_X4_FEC_CORR_CTR1r_t;
#define RX_X4_FEC_CORR_CTR1r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORR_CTR1r_CLR
#define RX_X4_FEC_CORR_CTR1r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORR_CTR1r_SET
#define RX_X4_FEC_CORR_CTR1r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORR_CTR1r_GET
#define RX_X4_FEC_CORR_CTR1r_CL91_FEC_CORR_CW_CNTR_UPPERf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORR_CTR1r_CL91_FEC_CORR_CW_CNTR_UPPERf_GET
#define RX_X4_FEC_CORR_CTR1r_CL91_FEC_CORR_CW_CNTR_UPPERf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORR_CTR1r_CL91_FEC_CORR_CW_CNTR_UPPERf_SET
#define READ_RX_X4_FEC_CORR_CTR1r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_CORR_CTR1r
#define WRITE_RX_X4_FEC_CORR_CTR1r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_CORR_CTR1r
#define MODIFY_RX_X4_FEC_CORR_CTR1r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_CORR_CTR1r
#define READLN_RX_X4_FEC_CORR_CTR1r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_CORR_CTR1r
#define WRITELN_RX_X4_FEC_CORR_CTR1r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_CORR_CTR1r
#define WRITEALL_RX_X4_FEC_CORR_CTR1r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_CORR_CTR1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_CORR_CTR1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_FEC_UNCORR_CTR0
 * BLOCKS:   RX_X4_CL91_STATUS0
 * REGADDR:  0xc354
 * DESC:     Lower 16 bits of FEC uncorrected codeword counter
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL91_FEC_UNCORR_CW_CNTR_LOWER Lower 16 bits of the CL91 FEC uncorrected code word counter.Counts once for each uncorrected FEC codeword processed when fec_align_status is true.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORR_CTR0r (0x0000c354 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORR_CTR0r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_UNCORR_CTR0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORR_CTR0r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_uncorr_ctr0[1];
	uint32_t _rx_x4_fec_uncorr_ctr0;
} BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORR_CTR0r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORR_CTR0r_CLR(r) (r).rx_x4_fec_uncorr_ctr0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORR_CTR0r_SET(r,d) (r).rx_x4_fec_uncorr_ctr0[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORR_CTR0r_GET(r) (r).rx_x4_fec_uncorr_ctr0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORR_CTR0r_CL91_FEC_UNCORR_CW_CNTR_LOWERf_GET(r) (((r).rx_x4_fec_uncorr_ctr0[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORR_CTR0r_CL91_FEC_UNCORR_CW_CNTR_LOWERf_SET(r,f) (r).rx_x4_fec_uncorr_ctr0[0]=(((r).rx_x4_fec_uncorr_ctr0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_UNCORR_CTR0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_UNCORR_CTR0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORR_CTR0r,(_r._rx_x4_fec_uncorr_ctr0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_UNCORR_CTR0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORR_CTR0r,(_r._rx_x4_fec_uncorr_ctr0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_UNCORR_CTR0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORR_CTR0r,(_r._rx_x4_fec_uncorr_ctr0))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_UNCORR_CTR0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORR_CTR0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_uncorr_ctr0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_UNCORR_CTR0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORR_CTR0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_uncorr_ctr0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_UNCORR_CTR0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORR_CTR0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_uncorr_ctr0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_UNCORR_CTR0r BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORR_CTR0r
#define RX_X4_FEC_UNCORR_CTR0r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORR_CTR0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORR_CTR0r_t RX_X4_FEC_UNCORR_CTR0r_t;
#define RX_X4_FEC_UNCORR_CTR0r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORR_CTR0r_CLR
#define RX_X4_FEC_UNCORR_CTR0r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORR_CTR0r_SET
#define RX_X4_FEC_UNCORR_CTR0r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORR_CTR0r_GET
#define RX_X4_FEC_UNCORR_CTR0r_CL91_FEC_UNCORR_CW_CNTR_LOWERf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORR_CTR0r_CL91_FEC_UNCORR_CW_CNTR_LOWERf_GET
#define RX_X4_FEC_UNCORR_CTR0r_CL91_FEC_UNCORR_CW_CNTR_LOWERf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORR_CTR0r_CL91_FEC_UNCORR_CW_CNTR_LOWERf_SET
#define READ_RX_X4_FEC_UNCORR_CTR0r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_UNCORR_CTR0r
#define WRITE_RX_X4_FEC_UNCORR_CTR0r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_UNCORR_CTR0r
#define MODIFY_RX_X4_FEC_UNCORR_CTR0r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_UNCORR_CTR0r
#define READLN_RX_X4_FEC_UNCORR_CTR0r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_UNCORR_CTR0r
#define WRITELN_RX_X4_FEC_UNCORR_CTR0r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_UNCORR_CTR0r
#define WRITEALL_RX_X4_FEC_UNCORR_CTR0r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_UNCORR_CTR0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORR_CTR0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_FEC_UNCORR_CTR1
 * BLOCKS:   RX_X4_CL91_STATUS0
 * REGADDR:  0xc355
 * DESC:     Upper 16 bits of FEC uncorrected codeword counter
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL91_FEC_UNCORR_CW_CNTR_UPPER Upper 16 bits of the CL91 FEC uncorrected code word counter.Read the lower 16 bits firstSaturates on overflow
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORR_CTR1r (0x0000c355 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORR_CTR1r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_UNCORR_CTR1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORR_CTR1r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_uncorr_ctr1[1];
	uint32_t _rx_x4_fec_uncorr_ctr1;
} BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORR_CTR1r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORR_CTR1r_CLR(r) (r).rx_x4_fec_uncorr_ctr1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORR_CTR1r_SET(r,d) (r).rx_x4_fec_uncorr_ctr1[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORR_CTR1r_GET(r) (r).rx_x4_fec_uncorr_ctr1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORR_CTR1r_CL91_FEC_UNCORR_CW_CNTR_UPPERf_GET(r) (((r).rx_x4_fec_uncorr_ctr1[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORR_CTR1r_CL91_FEC_UNCORR_CW_CNTR_UPPERf_SET(r,f) (r).rx_x4_fec_uncorr_ctr1[0]=(((r).rx_x4_fec_uncorr_ctr1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_UNCORR_CTR1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_UNCORR_CTR1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORR_CTR1r,(_r._rx_x4_fec_uncorr_ctr1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_UNCORR_CTR1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORR_CTR1r,(_r._rx_x4_fec_uncorr_ctr1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_UNCORR_CTR1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORR_CTR1r,(_r._rx_x4_fec_uncorr_ctr1))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_UNCORR_CTR1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORR_CTR1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_uncorr_ctr1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_UNCORR_CTR1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORR_CTR1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_uncorr_ctr1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_UNCORR_CTR1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORR_CTR1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_uncorr_ctr1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_UNCORR_CTR1r BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORR_CTR1r
#define RX_X4_FEC_UNCORR_CTR1r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORR_CTR1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORR_CTR1r_t RX_X4_FEC_UNCORR_CTR1r_t;
#define RX_X4_FEC_UNCORR_CTR1r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORR_CTR1r_CLR
#define RX_X4_FEC_UNCORR_CTR1r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORR_CTR1r_SET
#define RX_X4_FEC_UNCORR_CTR1r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORR_CTR1r_GET
#define RX_X4_FEC_UNCORR_CTR1r_CL91_FEC_UNCORR_CW_CNTR_UPPERf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORR_CTR1r_CL91_FEC_UNCORR_CW_CNTR_UPPERf_GET
#define RX_X4_FEC_UNCORR_CTR1r_CL91_FEC_UNCORR_CW_CNTR_UPPERf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORR_CTR1r_CL91_FEC_UNCORR_CW_CNTR_UPPERf_SET
#define READ_RX_X4_FEC_UNCORR_CTR1r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_UNCORR_CTR1r
#define WRITE_RX_X4_FEC_UNCORR_CTR1r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_UNCORR_CTR1r
#define MODIFY_RX_X4_FEC_UNCORR_CTR1r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_UNCORR_CTR1r
#define READLN_RX_X4_FEC_UNCORR_CTR1r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_UNCORR_CTR1r
#define WRITELN_RX_X4_FEC_UNCORR_CTR1r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_UNCORR_CTR1r
#define WRITEALL_RX_X4_FEC_UNCORR_CTR1r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_UNCORR_CTR1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_UNCORR_CTR1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_FEC_BIT_ERR_CTR0
 * BLOCKS:   RX_X4_CL91_STATUS0
 * REGADDR:  0xc356
 * DESC:     Lower 16 bits of FEC bit error counter
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL91_FEC_CORR_BIT_CNTR_LOWER Counts corrected bits. Accurate only when no uncorrectable errors are present and doesnt count parity bits errors.  Lower 16 bits of the counter.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BIT_ERR_CTR0r (0x0000c356 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BIT_ERR_CTR0r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_BIT_ERR_CTR0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BIT_ERR_CTR0r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_bit_err_ctr0[1];
	uint32_t _rx_x4_fec_bit_err_ctr0;
} BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BIT_ERR_CTR0r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BIT_ERR_CTR0r_CLR(r) (r).rx_x4_fec_bit_err_ctr0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BIT_ERR_CTR0r_SET(r,d) (r).rx_x4_fec_bit_err_ctr0[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BIT_ERR_CTR0r_GET(r) (r).rx_x4_fec_bit_err_ctr0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BIT_ERR_CTR0r_CL91_FEC_CORR_BIT_CNTR_LOWERf_GET(r) (((r).rx_x4_fec_bit_err_ctr0[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BIT_ERR_CTR0r_CL91_FEC_CORR_BIT_CNTR_LOWERf_SET(r,f) (r).rx_x4_fec_bit_err_ctr0[0]=(((r).rx_x4_fec_bit_err_ctr0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_BIT_ERR_CTR0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_BIT_ERR_CTR0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BIT_ERR_CTR0r,(_r._rx_x4_fec_bit_err_ctr0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_BIT_ERR_CTR0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BIT_ERR_CTR0r,(_r._rx_x4_fec_bit_err_ctr0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_BIT_ERR_CTR0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BIT_ERR_CTR0r,(_r._rx_x4_fec_bit_err_ctr0))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_BIT_ERR_CTR0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BIT_ERR_CTR0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_bit_err_ctr0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_BIT_ERR_CTR0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BIT_ERR_CTR0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_bit_err_ctr0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_BIT_ERR_CTR0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BIT_ERR_CTR0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_bit_err_ctr0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_BIT_ERR_CTR0r BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BIT_ERR_CTR0r
#define RX_X4_FEC_BIT_ERR_CTR0r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BIT_ERR_CTR0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BIT_ERR_CTR0r_t RX_X4_FEC_BIT_ERR_CTR0r_t;
#define RX_X4_FEC_BIT_ERR_CTR0r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BIT_ERR_CTR0r_CLR
#define RX_X4_FEC_BIT_ERR_CTR0r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BIT_ERR_CTR0r_SET
#define RX_X4_FEC_BIT_ERR_CTR0r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BIT_ERR_CTR0r_GET
#define RX_X4_FEC_BIT_ERR_CTR0r_CL91_FEC_CORR_BIT_CNTR_LOWERf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BIT_ERR_CTR0r_CL91_FEC_CORR_BIT_CNTR_LOWERf_GET
#define RX_X4_FEC_BIT_ERR_CTR0r_CL91_FEC_CORR_BIT_CNTR_LOWERf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BIT_ERR_CTR0r_CL91_FEC_CORR_BIT_CNTR_LOWERf_SET
#define READ_RX_X4_FEC_BIT_ERR_CTR0r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_BIT_ERR_CTR0r
#define WRITE_RX_X4_FEC_BIT_ERR_CTR0r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_BIT_ERR_CTR0r
#define MODIFY_RX_X4_FEC_BIT_ERR_CTR0r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_BIT_ERR_CTR0r
#define READLN_RX_X4_FEC_BIT_ERR_CTR0r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_BIT_ERR_CTR0r
#define WRITELN_RX_X4_FEC_BIT_ERR_CTR0r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_BIT_ERR_CTR0r
#define WRITEALL_RX_X4_FEC_BIT_ERR_CTR0r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_BIT_ERR_CTR0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BIT_ERR_CTR0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_FEC_BIT_ERR_CTR1
 * BLOCKS:   RX_X4_CL91_STATUS0
 * REGADDR:  0xc357
 * DESC:     Upper 16 bits of FEC bit error counter
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL91_FEC_CORR_BIT_CNTR_UPPER Upper 16 bits of the CL91 FEC error bit counter.Read the lower 16 bits firstSaturates on overflow
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BIT_ERR_CTR1r (0x0000c357 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BIT_ERR_CTR1r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_BIT_ERR_CTR1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BIT_ERR_CTR1r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_bit_err_ctr1[1];
	uint32_t _rx_x4_fec_bit_err_ctr1;
} BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BIT_ERR_CTR1r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BIT_ERR_CTR1r_CLR(r) (r).rx_x4_fec_bit_err_ctr1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BIT_ERR_CTR1r_SET(r,d) (r).rx_x4_fec_bit_err_ctr1[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BIT_ERR_CTR1r_GET(r) (r).rx_x4_fec_bit_err_ctr1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BIT_ERR_CTR1r_CL91_FEC_CORR_BIT_CNTR_UPPERf_GET(r) (((r).rx_x4_fec_bit_err_ctr1[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BIT_ERR_CTR1r_CL91_FEC_CORR_BIT_CNTR_UPPERf_SET(r,f) (r).rx_x4_fec_bit_err_ctr1[0]=(((r).rx_x4_fec_bit_err_ctr1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_BIT_ERR_CTR1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_BIT_ERR_CTR1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BIT_ERR_CTR1r,(_r._rx_x4_fec_bit_err_ctr1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_BIT_ERR_CTR1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BIT_ERR_CTR1r,(_r._rx_x4_fec_bit_err_ctr1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_BIT_ERR_CTR1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BIT_ERR_CTR1r,(_r._rx_x4_fec_bit_err_ctr1))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_BIT_ERR_CTR1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BIT_ERR_CTR1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_bit_err_ctr1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_BIT_ERR_CTR1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BIT_ERR_CTR1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_bit_err_ctr1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_BIT_ERR_CTR1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BIT_ERR_CTR1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_bit_err_ctr1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_BIT_ERR_CTR1r BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BIT_ERR_CTR1r
#define RX_X4_FEC_BIT_ERR_CTR1r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BIT_ERR_CTR1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BIT_ERR_CTR1r_t RX_X4_FEC_BIT_ERR_CTR1r_t;
#define RX_X4_FEC_BIT_ERR_CTR1r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BIT_ERR_CTR1r_CLR
#define RX_X4_FEC_BIT_ERR_CTR1r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BIT_ERR_CTR1r_SET
#define RX_X4_FEC_BIT_ERR_CTR1r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BIT_ERR_CTR1r_GET
#define RX_X4_FEC_BIT_ERR_CTR1r_CL91_FEC_CORR_BIT_CNTR_UPPERf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BIT_ERR_CTR1r_CL91_FEC_CORR_BIT_CNTR_UPPERf_GET
#define RX_X4_FEC_BIT_ERR_CTR1r_CL91_FEC_CORR_BIT_CNTR_UPPERf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BIT_ERR_CTR1r_CL91_FEC_CORR_BIT_CNTR_UPPERf_SET
#define READ_RX_X4_FEC_BIT_ERR_CTR1r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_FEC_BIT_ERR_CTR1r
#define WRITE_RX_X4_FEC_BIT_ERR_CTR1r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_FEC_BIT_ERR_CTR1r
#define MODIFY_RX_X4_FEC_BIT_ERR_CTR1r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_FEC_BIT_ERR_CTR1r
#define READLN_RX_X4_FEC_BIT_ERR_CTR1r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_FEC_BIT_ERR_CTR1r
#define WRITELN_RX_X4_FEC_BIT_ERR_CTR1r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_FEC_BIT_ERR_CTR1r
#define WRITEALL_RX_X4_FEC_BIT_ERR_CTR1r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_FEC_BIT_ERR_CTR1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_FEC_BIT_ERR_CTR1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_CL91_FEC_SYM_ERR_CTR_LOW0
 * BLOCKS:   RX_X4_CL91_STATUS1
 * REGADDR:  0xc360
 * DESC:     CL91 FEC symbol error counter lower 16 bits of FEC lane 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     FEC_SYMBOL_ERROR_COUNTER_LOWER_0 Lower 16 bits of the FEC symbol error counter for FEC lane 0.Counts once for each 10-bit symbol corrected.Per FEC lane counter.If we have a 100G port, the 4 symbol error counters for port 0 represent the counter values per FEC lane.If we have a 25G port, add the 4 symbol error counter values of a port for the symbol error counter value for the FEC lane 0 for that port.If we have a 50G port, add the counter value of 0 and 2 for FEC lane 0 and counter value of 1 and 3 for FEC lane 1.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW0r (0x0000c360 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW0r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL91_FEC_SYM_ERR_CTR_LOW0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW0r_s {
	uint32_t v[1];
	uint32_t rx_x4_cl91_fec_sym_err_ctr_low0[1];
	uint32_t _rx_x4_cl91_fec_sym_err_ctr_low0;
} BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW0r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW0r_CLR(r) (r).rx_x4_cl91_fec_sym_err_ctr_low0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW0r_SET(r,d) (r).rx_x4_cl91_fec_sym_err_ctr_low0[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW0r_GET(r) (r).rx_x4_cl91_fec_sym_err_ctr_low0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW0r_FEC_SYMBOL_ERROR_COUNTER_LOWER_0f_GET(r) (((r).rx_x4_cl91_fec_sym_err_ctr_low0[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW0r_FEC_SYMBOL_ERROR_COUNTER_LOWER_0f_SET(r,f) (r).rx_x4_cl91_fec_sym_err_ctr_low0[0]=(((r).rx_x4_cl91_fec_sym_err_ctr_low0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_CL91_FEC_SYM_ERR_CTR_LOW0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW0r,(_r._rx_x4_cl91_fec_sym_err_ctr_low0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW0r,(_r._rx_x4_cl91_fec_sym_err_ctr_low0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW0r,(_r._rx_x4_cl91_fec_sym_err_ctr_low0))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_fec_sym_err_ctr_low0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_fec_sym_err_ctr_low0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl91_fec_sym_err_ctr_low0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW0r BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW0r
#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW0r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW0r_t RX_X4_CL91_FEC_SYM_ERR_CTR_LOW0r_t;
#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW0r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW0r_CLR
#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW0r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW0r_SET
#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW0r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW0r_GET
#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW0r_FEC_SYMBOL_ERROR_COUNTER_LOWER_0f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW0r_FEC_SYMBOL_ERROR_COUNTER_LOWER_0f_GET
#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW0r_FEC_SYMBOL_ERROR_COUNTER_LOWER_0f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW0r_FEC_SYMBOL_ERROR_COUNTER_LOWER_0f_SET
#define READ_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW0r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW0r
#define WRITE_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW0r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW0r
#define MODIFY_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW0r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW0r
#define READLN_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW0r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW0r
#define WRITELN_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW0r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW0r
#define WRITEALL_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW0r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_CL91_FEC_SYM_ERR_CTR_UP0
 * BLOCKS:   RX_X4_CL91_STATUS1
 * REGADDR:  0xc361
 * DESC:     CL91 FEC symbol error counter upper 16 bits of FEC lane 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     FEC_SYMBOL_ERROR_COUNTER_UPPER_0 Upper 16 bits of the FEC symbol error counter for FEC lane 0.Counts once for each 10-bit symbol corrected.Per FEC lane counter.Saturates on overflow.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP0r (0x0000c361 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP0r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL91_FEC_SYM_ERR_CTR_UP0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP0r_s {
	uint32_t v[1];
	uint32_t rx_x4_cl91_fec_sym_err_ctr_up0[1];
	uint32_t _rx_x4_cl91_fec_sym_err_ctr_up0;
} BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP0r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP0r_CLR(r) (r).rx_x4_cl91_fec_sym_err_ctr_up0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP0r_SET(r,d) (r).rx_x4_cl91_fec_sym_err_ctr_up0[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP0r_GET(r) (r).rx_x4_cl91_fec_sym_err_ctr_up0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP0r_FEC_SYMBOL_ERROR_COUNTER_UPPER_0f_GET(r) (((r).rx_x4_cl91_fec_sym_err_ctr_up0[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP0r_FEC_SYMBOL_ERROR_COUNTER_UPPER_0f_SET(r,f) (r).rx_x4_cl91_fec_sym_err_ctr_up0[0]=(((r).rx_x4_cl91_fec_sym_err_ctr_up0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_CL91_FEC_SYM_ERR_CTR_UP0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL91_FEC_SYM_ERR_CTR_UP0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP0r,(_r._rx_x4_cl91_fec_sym_err_ctr_up0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL91_FEC_SYM_ERR_CTR_UP0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP0r,(_r._rx_x4_cl91_fec_sym_err_ctr_up0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL91_FEC_SYM_ERR_CTR_UP0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP0r,(_r._rx_x4_cl91_fec_sym_err_ctr_up0))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL91_FEC_SYM_ERR_CTR_UP0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_fec_sym_err_ctr_up0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL91_FEC_SYM_ERR_CTR_UP0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_fec_sym_err_ctr_up0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL91_FEC_SYM_ERR_CTR_UP0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl91_fec_sym_err_ctr_up0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP0r BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP0r
#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP0r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP0r_t RX_X4_CL91_FEC_SYM_ERR_CTR_UP0r_t;
#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP0r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP0r_CLR
#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP0r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP0r_SET
#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP0r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP0r_GET
#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP0r_FEC_SYMBOL_ERROR_COUNTER_UPPER_0f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP0r_FEC_SYMBOL_ERROR_COUNTER_UPPER_0f_GET
#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP0r_FEC_SYMBOL_ERROR_COUNTER_UPPER_0f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP0r_FEC_SYMBOL_ERROR_COUNTER_UPPER_0f_SET
#define READ_RX_X4_CL91_FEC_SYM_ERR_CTR_UP0r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL91_FEC_SYM_ERR_CTR_UP0r
#define WRITE_RX_X4_CL91_FEC_SYM_ERR_CTR_UP0r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL91_FEC_SYM_ERR_CTR_UP0r
#define MODIFY_RX_X4_CL91_FEC_SYM_ERR_CTR_UP0r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL91_FEC_SYM_ERR_CTR_UP0r
#define READLN_RX_X4_CL91_FEC_SYM_ERR_CTR_UP0r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL91_FEC_SYM_ERR_CTR_UP0r
#define WRITELN_RX_X4_CL91_FEC_SYM_ERR_CTR_UP0r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL91_FEC_SYM_ERR_CTR_UP0r
#define WRITEALL_RX_X4_CL91_FEC_SYM_ERR_CTR_UP0r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL91_FEC_SYM_ERR_CTR_UP0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_CL91_FEC_SYM_ERR_CTR_LOW1
 * BLOCKS:   RX_X4_CL91_STATUS1
 * REGADDR:  0xc362
 * DESC:     CL91 FEC symbol error counter lower 16 bits of FEC lane 1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     FEC_SYMBOL_ERROR_COUNTER_LOWER_1 Lower 16 bits of the FEC symbol error counter for FEC lane 1.Counts once for each 10-bit symbol corrected.Per FEC lane counter.If we have a 100G port, the 4 symbol error counters for port 0 represent the counter values per FEC lane.If we have a 25G port, add the 4 symbol error counter values of a port for the symbol error counter value for the FEC lane 0 for that port.If we have a 50G port, add the counter value of 0 and 2 for FEC lane 0 and counter value of 1 and 3 for FEC lane 1.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW1r (0x0000c362 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW1r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL91_FEC_SYM_ERR_CTR_LOW1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW1r_s {
	uint32_t v[1];
	uint32_t rx_x4_cl91_fec_sym_err_ctr_low1[1];
	uint32_t _rx_x4_cl91_fec_sym_err_ctr_low1;
} BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW1r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW1r_CLR(r) (r).rx_x4_cl91_fec_sym_err_ctr_low1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW1r_SET(r,d) (r).rx_x4_cl91_fec_sym_err_ctr_low1[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW1r_GET(r) (r).rx_x4_cl91_fec_sym_err_ctr_low1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW1r_FEC_SYMBOL_ERROR_COUNTER_LOWER_1f_GET(r) (((r).rx_x4_cl91_fec_sym_err_ctr_low1[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW1r_FEC_SYMBOL_ERROR_COUNTER_LOWER_1f_SET(r,f) (r).rx_x4_cl91_fec_sym_err_ctr_low1[0]=(((r).rx_x4_cl91_fec_sym_err_ctr_low1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_CL91_FEC_SYM_ERR_CTR_LOW1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW1r,(_r._rx_x4_cl91_fec_sym_err_ctr_low1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW1r,(_r._rx_x4_cl91_fec_sym_err_ctr_low1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW1r,(_r._rx_x4_cl91_fec_sym_err_ctr_low1))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_fec_sym_err_ctr_low1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_fec_sym_err_ctr_low1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl91_fec_sym_err_ctr_low1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW1r BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW1r
#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW1r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW1r_t RX_X4_CL91_FEC_SYM_ERR_CTR_LOW1r_t;
#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW1r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW1r_CLR
#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW1r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW1r_SET
#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW1r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW1r_GET
#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW1r_FEC_SYMBOL_ERROR_COUNTER_LOWER_1f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW1r_FEC_SYMBOL_ERROR_COUNTER_LOWER_1f_GET
#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW1r_FEC_SYMBOL_ERROR_COUNTER_LOWER_1f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW1r_FEC_SYMBOL_ERROR_COUNTER_LOWER_1f_SET
#define READ_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW1r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW1r
#define WRITE_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW1r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW1r
#define MODIFY_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW1r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW1r
#define READLN_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW1r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW1r
#define WRITELN_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW1r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW1r
#define WRITEALL_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW1r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_CL91_FEC_SYM_ERR_CTR_UP1
 * BLOCKS:   RX_X4_CL91_STATUS1
 * REGADDR:  0xc363
 * DESC:     CL91 FEC symbol error counter upper 16 bits of FEC lane 1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     FEC_SYMBOL_ERROR_COUNTER_UPPER_1 Upper 16 bits of the FEC symbol error counter for FEC lane 1.Counts once for each 10-bit symbol corrected.Per FEC lane counter.Saturates on overflow.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP1r (0x0000c363 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP1r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL91_FEC_SYM_ERR_CTR_UP1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP1r_s {
	uint32_t v[1];
	uint32_t rx_x4_cl91_fec_sym_err_ctr_up1[1];
	uint32_t _rx_x4_cl91_fec_sym_err_ctr_up1;
} BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP1r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP1r_CLR(r) (r).rx_x4_cl91_fec_sym_err_ctr_up1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP1r_SET(r,d) (r).rx_x4_cl91_fec_sym_err_ctr_up1[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP1r_GET(r) (r).rx_x4_cl91_fec_sym_err_ctr_up1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP1r_FEC_SYMBOL_ERROR_COUNTER_UPPER_1f_GET(r) (((r).rx_x4_cl91_fec_sym_err_ctr_up1[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP1r_FEC_SYMBOL_ERROR_COUNTER_UPPER_1f_SET(r,f) (r).rx_x4_cl91_fec_sym_err_ctr_up1[0]=(((r).rx_x4_cl91_fec_sym_err_ctr_up1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_CL91_FEC_SYM_ERR_CTR_UP1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL91_FEC_SYM_ERR_CTR_UP1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP1r,(_r._rx_x4_cl91_fec_sym_err_ctr_up1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL91_FEC_SYM_ERR_CTR_UP1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP1r,(_r._rx_x4_cl91_fec_sym_err_ctr_up1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL91_FEC_SYM_ERR_CTR_UP1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP1r,(_r._rx_x4_cl91_fec_sym_err_ctr_up1))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL91_FEC_SYM_ERR_CTR_UP1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_fec_sym_err_ctr_up1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL91_FEC_SYM_ERR_CTR_UP1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_fec_sym_err_ctr_up1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL91_FEC_SYM_ERR_CTR_UP1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl91_fec_sym_err_ctr_up1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP1r BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP1r
#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP1r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP1r_t RX_X4_CL91_FEC_SYM_ERR_CTR_UP1r_t;
#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP1r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP1r_CLR
#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP1r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP1r_SET
#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP1r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP1r_GET
#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP1r_FEC_SYMBOL_ERROR_COUNTER_UPPER_1f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP1r_FEC_SYMBOL_ERROR_COUNTER_UPPER_1f_GET
#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP1r_FEC_SYMBOL_ERROR_COUNTER_UPPER_1f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP1r_FEC_SYMBOL_ERROR_COUNTER_UPPER_1f_SET
#define READ_RX_X4_CL91_FEC_SYM_ERR_CTR_UP1r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL91_FEC_SYM_ERR_CTR_UP1r
#define WRITE_RX_X4_CL91_FEC_SYM_ERR_CTR_UP1r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL91_FEC_SYM_ERR_CTR_UP1r
#define MODIFY_RX_X4_CL91_FEC_SYM_ERR_CTR_UP1r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL91_FEC_SYM_ERR_CTR_UP1r
#define READLN_RX_X4_CL91_FEC_SYM_ERR_CTR_UP1r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL91_FEC_SYM_ERR_CTR_UP1r
#define WRITELN_RX_X4_CL91_FEC_SYM_ERR_CTR_UP1r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL91_FEC_SYM_ERR_CTR_UP1r
#define WRITEALL_RX_X4_CL91_FEC_SYM_ERR_CTR_UP1r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL91_FEC_SYM_ERR_CTR_UP1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_CL91_FEC_SYM_ERR_CTR_LOW2
 * BLOCKS:   RX_X4_CL91_STATUS1
 * REGADDR:  0xc364
 * DESC:     CL91 FEC symbol error counter lower 16 bits of FEC lane 2
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     FEC_SYMBOL_ERROR_COUNTER_LOWER_2 Lower 16 bits of the FEC symbol error counter for FEC lane 2.Counts once for each 10-bit symbol corrected.Per FEC lane counter.If we have a 100G port, the 4 symbol error counters for port 0 represent the counter values per FEC lane.If we have a 25G port, add the 4 symbol error counter values of a port for the symbol error counter value for the FEC lane 0 for that port.If we have a 50G port, add the counter value of 0 and 2 for FEC lane 0 and counter value of 1 and 3 for FEC lane 1.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW2r (0x0000c364 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL91_FEC_SYM_ERR_CTR_LOW2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW2r_s {
	uint32_t v[1];
	uint32_t rx_x4_cl91_fec_sym_err_ctr_low2[1];
	uint32_t _rx_x4_cl91_fec_sym_err_ctr_low2;
} BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW2r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW2r_CLR(r) (r).rx_x4_cl91_fec_sym_err_ctr_low2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW2r_SET(r,d) (r).rx_x4_cl91_fec_sym_err_ctr_low2[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW2r_GET(r) (r).rx_x4_cl91_fec_sym_err_ctr_low2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW2r_FEC_SYMBOL_ERROR_COUNTER_LOWER_2f_GET(r) (((r).rx_x4_cl91_fec_sym_err_ctr_low2[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW2r_FEC_SYMBOL_ERROR_COUNTER_LOWER_2f_SET(r,f) (r).rx_x4_cl91_fec_sym_err_ctr_low2[0]=(((r).rx_x4_cl91_fec_sym_err_ctr_low2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_CL91_FEC_SYM_ERR_CTR_LOW2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW2r,(_r._rx_x4_cl91_fec_sym_err_ctr_low2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW2r,(_r._rx_x4_cl91_fec_sym_err_ctr_low2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW2r,(_r._rx_x4_cl91_fec_sym_err_ctr_low2))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_fec_sym_err_ctr_low2))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_fec_sym_err_ctr_low2))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl91_fec_sym_err_ctr_low2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW2r BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW2r
#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW2r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW2r_t RX_X4_CL91_FEC_SYM_ERR_CTR_LOW2r_t;
#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW2r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW2r_CLR
#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW2r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW2r_SET
#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW2r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW2r_GET
#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW2r_FEC_SYMBOL_ERROR_COUNTER_LOWER_2f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW2r_FEC_SYMBOL_ERROR_COUNTER_LOWER_2f_GET
#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW2r_FEC_SYMBOL_ERROR_COUNTER_LOWER_2f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW2r_FEC_SYMBOL_ERROR_COUNTER_LOWER_2f_SET
#define READ_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW2r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW2r
#define WRITE_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW2r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW2r
#define MODIFY_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW2r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW2r
#define READLN_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW2r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW2r
#define WRITELN_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW2r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW2r
#define WRITEALL_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW2r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_CL91_FEC_SYM_ERR_CTR_UP2
 * BLOCKS:   RX_X4_CL91_STATUS1
 * REGADDR:  0xc365
 * DESC:     CL91 FEC symbol error counter upper 16 bits of FEC lane 2
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     FEC_SYMBOL_ERROR_COUNTER_UPPER_2 Upper 16 bits of the FEC symbol error counter for FEC lane 2.Counts once for each 10-bit symbol corrected.Per FEC lane counter.Saturates on overflow.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP2r (0x0000c365 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL91_FEC_SYM_ERR_CTR_UP2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP2r_s {
	uint32_t v[1];
	uint32_t rx_x4_cl91_fec_sym_err_ctr_up2[1];
	uint32_t _rx_x4_cl91_fec_sym_err_ctr_up2;
} BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP2r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP2r_CLR(r) (r).rx_x4_cl91_fec_sym_err_ctr_up2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP2r_SET(r,d) (r).rx_x4_cl91_fec_sym_err_ctr_up2[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP2r_GET(r) (r).rx_x4_cl91_fec_sym_err_ctr_up2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP2r_FEC_SYMBOL_ERROR_COUNTER_UPPER_2f_GET(r) (((r).rx_x4_cl91_fec_sym_err_ctr_up2[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP2r_FEC_SYMBOL_ERROR_COUNTER_UPPER_2f_SET(r,f) (r).rx_x4_cl91_fec_sym_err_ctr_up2[0]=(((r).rx_x4_cl91_fec_sym_err_ctr_up2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_CL91_FEC_SYM_ERR_CTR_UP2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL91_FEC_SYM_ERR_CTR_UP2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP2r,(_r._rx_x4_cl91_fec_sym_err_ctr_up2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL91_FEC_SYM_ERR_CTR_UP2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP2r,(_r._rx_x4_cl91_fec_sym_err_ctr_up2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL91_FEC_SYM_ERR_CTR_UP2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP2r,(_r._rx_x4_cl91_fec_sym_err_ctr_up2))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL91_FEC_SYM_ERR_CTR_UP2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_fec_sym_err_ctr_up2))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL91_FEC_SYM_ERR_CTR_UP2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_fec_sym_err_ctr_up2))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL91_FEC_SYM_ERR_CTR_UP2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl91_fec_sym_err_ctr_up2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP2r BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP2r
#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP2r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP2r_t RX_X4_CL91_FEC_SYM_ERR_CTR_UP2r_t;
#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP2r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP2r_CLR
#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP2r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP2r_SET
#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP2r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP2r_GET
#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP2r_FEC_SYMBOL_ERROR_COUNTER_UPPER_2f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP2r_FEC_SYMBOL_ERROR_COUNTER_UPPER_2f_GET
#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP2r_FEC_SYMBOL_ERROR_COUNTER_UPPER_2f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP2r_FEC_SYMBOL_ERROR_COUNTER_UPPER_2f_SET
#define READ_RX_X4_CL91_FEC_SYM_ERR_CTR_UP2r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL91_FEC_SYM_ERR_CTR_UP2r
#define WRITE_RX_X4_CL91_FEC_SYM_ERR_CTR_UP2r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL91_FEC_SYM_ERR_CTR_UP2r
#define MODIFY_RX_X4_CL91_FEC_SYM_ERR_CTR_UP2r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL91_FEC_SYM_ERR_CTR_UP2r
#define READLN_RX_X4_CL91_FEC_SYM_ERR_CTR_UP2r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL91_FEC_SYM_ERR_CTR_UP2r
#define WRITELN_RX_X4_CL91_FEC_SYM_ERR_CTR_UP2r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL91_FEC_SYM_ERR_CTR_UP2r
#define WRITEALL_RX_X4_CL91_FEC_SYM_ERR_CTR_UP2r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL91_FEC_SYM_ERR_CTR_UP2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_CL91_FEC_SYM_ERR_CTR_LOW3
 * BLOCKS:   RX_X4_CL91_STATUS1
 * REGADDR:  0xc366
 * DESC:     CL91 FEC symbol error counter lower 16 bits of FEC lane 3
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     FEC_SYMBOL_ERROR_COUNTER_LOWER_3 Lower 16 bits of the FEC symbol error counter for FEC lane 3.Counts once for each 10-bit symbol corrected.Per FEC lane counter.If we have a 100G port, the 4 symbol error counters for port 0 represent the counter values per FEC lane.If we have a 25G port, add the 4 symbol error counter values of a port for the symbol error counter value for the FEC lane 0 for that port.If we have a 50G port, add the counter value of 0 and 2 for FEC lane 0 and counter value of 1 and 3 for FEC lane 1.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW3r (0x0000c366 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW3r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL91_FEC_SYM_ERR_CTR_LOW3.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW3r_s {
	uint32_t v[1];
	uint32_t rx_x4_cl91_fec_sym_err_ctr_low3[1];
	uint32_t _rx_x4_cl91_fec_sym_err_ctr_low3;
} BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW3r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW3r_CLR(r) (r).rx_x4_cl91_fec_sym_err_ctr_low3[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW3r_SET(r,d) (r).rx_x4_cl91_fec_sym_err_ctr_low3[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW3r_GET(r) (r).rx_x4_cl91_fec_sym_err_ctr_low3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW3r_FEC_SYMBOL_ERROR_COUNTER_LOWER_3f_GET(r) (((r).rx_x4_cl91_fec_sym_err_ctr_low3[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW3r_FEC_SYMBOL_ERROR_COUNTER_LOWER_3f_SET(r,f) (r).rx_x4_cl91_fec_sym_err_ctr_low3[0]=(((r).rx_x4_cl91_fec_sym_err_ctr_low3[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_CL91_FEC_SYM_ERR_CTR_LOW3.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW3r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW3r,(_r._rx_x4_cl91_fec_sym_err_ctr_low3))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW3r,(_r._rx_x4_cl91_fec_sym_err_ctr_low3)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW3r,(_r._rx_x4_cl91_fec_sym_err_ctr_low3))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW3r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_fec_sym_err_ctr_low3))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW3r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_fec_sym_err_ctr_low3))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW3r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl91_fec_sym_err_ctr_low3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW3r BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW3r
#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW3r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW3r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW3r_t RX_X4_CL91_FEC_SYM_ERR_CTR_LOW3r_t;
#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW3r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW3r_CLR
#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW3r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW3r_SET
#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW3r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW3r_GET
#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW3r_FEC_SYMBOL_ERROR_COUNTER_LOWER_3f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW3r_FEC_SYMBOL_ERROR_COUNTER_LOWER_3f_GET
#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW3r_FEC_SYMBOL_ERROR_COUNTER_LOWER_3f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW3r_FEC_SYMBOL_ERROR_COUNTER_LOWER_3f_SET
#define READ_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW3r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW3r
#define WRITE_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW3r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW3r
#define MODIFY_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW3r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW3r
#define READLN_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW3r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW3r
#define WRITELN_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW3r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW3r
#define WRITEALL_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW3r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_CL91_FEC_SYM_ERR_CTR_UP3
 * BLOCKS:   RX_X4_CL91_STATUS1
 * REGADDR:  0xc367
 * DESC:     CL91 FEC symbol error counter upper 16 bits of FEC lane 3
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     FEC_SYMBOL_ERROR_COUNTER_UPPER_3 Upper 16 bits of the FEC symbol error counter for FEC lane 3.Counts once for each 10-bit symbol corrected.Per FEC lane counter.Saturates on overflow.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP3r (0x0000c367 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP3r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL91_FEC_SYM_ERR_CTR_UP3.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP3r_s {
	uint32_t v[1];
	uint32_t rx_x4_cl91_fec_sym_err_ctr_up3[1];
	uint32_t _rx_x4_cl91_fec_sym_err_ctr_up3;
} BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP3r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP3r_CLR(r) (r).rx_x4_cl91_fec_sym_err_ctr_up3[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP3r_SET(r,d) (r).rx_x4_cl91_fec_sym_err_ctr_up3[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP3r_GET(r) (r).rx_x4_cl91_fec_sym_err_ctr_up3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP3r_FEC_SYMBOL_ERROR_COUNTER_UPPER_3f_GET(r) (((r).rx_x4_cl91_fec_sym_err_ctr_up3[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP3r_FEC_SYMBOL_ERROR_COUNTER_UPPER_3f_SET(r,f) (r).rx_x4_cl91_fec_sym_err_ctr_up3[0]=(((r).rx_x4_cl91_fec_sym_err_ctr_up3[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_CL91_FEC_SYM_ERR_CTR_UP3.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL91_FEC_SYM_ERR_CTR_UP3r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP3r,(_r._rx_x4_cl91_fec_sym_err_ctr_up3))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL91_FEC_SYM_ERR_CTR_UP3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP3r,(_r._rx_x4_cl91_fec_sym_err_ctr_up3)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL91_FEC_SYM_ERR_CTR_UP3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP3r,(_r._rx_x4_cl91_fec_sym_err_ctr_up3))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL91_FEC_SYM_ERR_CTR_UP3r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_fec_sym_err_ctr_up3))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL91_FEC_SYM_ERR_CTR_UP3r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_fec_sym_err_ctr_up3))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL91_FEC_SYM_ERR_CTR_UP3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP3r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl91_fec_sym_err_ctr_up3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP3r BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP3r
#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP3r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP3r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP3r_t RX_X4_CL91_FEC_SYM_ERR_CTR_UP3r_t;
#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP3r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP3r_CLR
#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP3r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP3r_SET
#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP3r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP3r_GET
#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP3r_FEC_SYMBOL_ERROR_COUNTER_UPPER_3f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP3r_FEC_SYMBOL_ERROR_COUNTER_UPPER_3f_GET
#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP3r_FEC_SYMBOL_ERROR_COUNTER_UPPER_3f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP3r_FEC_SYMBOL_ERROR_COUNTER_UPPER_3f_SET
#define READ_RX_X4_CL91_FEC_SYM_ERR_CTR_UP3r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_CL91_FEC_SYM_ERR_CTR_UP3r
#define WRITE_RX_X4_CL91_FEC_SYM_ERR_CTR_UP3r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_CL91_FEC_SYM_ERR_CTR_UP3r
#define MODIFY_RX_X4_CL91_FEC_SYM_ERR_CTR_UP3r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_CL91_FEC_SYM_ERR_CTR_UP3r
#define READLN_RX_X4_CL91_FEC_SYM_ERR_CTR_UP3r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_CL91_FEC_SYM_ERR_CTR_UP3r
#define WRITELN_RX_X4_CL91_FEC_SYM_ERR_CTR_UP3r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_CL91_FEC_SYM_ERR_CTR_UP3r
#define WRITEALL_RX_X4_CL91_FEC_SYM_ERR_CTR_UP3r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_CL91_FEC_SYM_ERR_CTR_UP3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_ECC_STS_CL91_BUFFER_BLK0
 * BLOCKS:   RX_X4_ECC
 * REGADDR:  0xc380
 * DESC:     ECC status register for CL91 buffer block 0 memory
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     ERR_EVENT_ADDRESS_CL91_BUFFER_BLK_0 ECC error location, valid only if 1-bit or 2-bit error bit is set
 *     ONE_BIT_ERR_EVENT_CL91_BUFFER_BLK_0 1-bit ECC error detected
 *     TWO_BIT_ERR_EVENT_CL91_BUFFER_BLK_0 2-bit ECC error detected
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK0r (0x0000c380 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK0r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_ECC_STS_CL91_BUFFER_BLK0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK0r_s {
	uint32_t v[1];
	uint32_t rx_x4_ecc_sts_cl91_buffer_blk0[1];
	uint32_t _rx_x4_ecc_sts_cl91_buffer_blk0;
} BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK0r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK0r_CLR(r) (r).rx_x4_ecc_sts_cl91_buffer_blk0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK0r_SET(r,d) (r).rx_x4_ecc_sts_cl91_buffer_blk0[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK0r_GET(r) (r).rx_x4_ecc_sts_cl91_buffer_blk0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK0r_TWO_BIT_ERR_EVENT_CL91_BUFFER_BLK_0f_GET(r) ((((r).rx_x4_ecc_sts_cl91_buffer_blk0[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK0r_TWO_BIT_ERR_EVENT_CL91_BUFFER_BLK_0f_SET(r,f) (r).rx_x4_ecc_sts_cl91_buffer_blk0[0]=(((r).rx_x4_ecc_sts_cl91_buffer_blk0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK0r_ONE_BIT_ERR_EVENT_CL91_BUFFER_BLK_0f_GET(r) ((((r).rx_x4_ecc_sts_cl91_buffer_blk0[0]) >> 14) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK0r_ONE_BIT_ERR_EVENT_CL91_BUFFER_BLK_0f_SET(r,f) (r).rx_x4_ecc_sts_cl91_buffer_blk0[0]=(((r).rx_x4_ecc_sts_cl91_buffer_blk0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK0r_ERR_EVENT_ADDRESS_CL91_BUFFER_BLK_0f_GET(r) (((r).rx_x4_ecc_sts_cl91_buffer_blk0[0]) & 0x3fff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK0r_ERR_EVENT_ADDRESS_CL91_BUFFER_BLK_0f_SET(r,f) (r).rx_x4_ecc_sts_cl91_buffer_blk0[0]=(((r).rx_x4_ecc_sts_cl91_buffer_blk0[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff)) | (0x3fff << 16)

/*
 * These macros can be used to access RX_X4_ECC_STS_CL91_BUFFER_BLK0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_ECC_STS_CL91_BUFFER_BLK0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK0r,(_r._rx_x4_ecc_sts_cl91_buffer_blk0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_ECC_STS_CL91_BUFFER_BLK0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK0r,(_r._rx_x4_ecc_sts_cl91_buffer_blk0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_ECC_STS_CL91_BUFFER_BLK0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK0r,(_r._rx_x4_ecc_sts_cl91_buffer_blk0))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_ECC_STS_CL91_BUFFER_BLK0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ecc_sts_cl91_buffer_blk0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_ECC_STS_CL91_BUFFER_BLK0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ecc_sts_cl91_buffer_blk0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_ECC_STS_CL91_BUFFER_BLK0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_ecc_sts_cl91_buffer_blk0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_ECC_STS_CL91_BUFFER_BLK0r BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK0r
#define RX_X4_ECC_STS_CL91_BUFFER_BLK0r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK0r_t RX_X4_ECC_STS_CL91_BUFFER_BLK0r_t;
#define RX_X4_ECC_STS_CL91_BUFFER_BLK0r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK0r_CLR
#define RX_X4_ECC_STS_CL91_BUFFER_BLK0r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK0r_SET
#define RX_X4_ECC_STS_CL91_BUFFER_BLK0r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK0r_GET
#define RX_X4_ECC_STS_CL91_BUFFER_BLK0r_TWO_BIT_ERR_EVENT_CL91_BUFFER_BLK_0f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK0r_TWO_BIT_ERR_EVENT_CL91_BUFFER_BLK_0f_GET
#define RX_X4_ECC_STS_CL91_BUFFER_BLK0r_TWO_BIT_ERR_EVENT_CL91_BUFFER_BLK_0f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK0r_TWO_BIT_ERR_EVENT_CL91_BUFFER_BLK_0f_SET
#define RX_X4_ECC_STS_CL91_BUFFER_BLK0r_ONE_BIT_ERR_EVENT_CL91_BUFFER_BLK_0f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK0r_ONE_BIT_ERR_EVENT_CL91_BUFFER_BLK_0f_GET
#define RX_X4_ECC_STS_CL91_BUFFER_BLK0r_ONE_BIT_ERR_EVENT_CL91_BUFFER_BLK_0f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK0r_ONE_BIT_ERR_EVENT_CL91_BUFFER_BLK_0f_SET
#define RX_X4_ECC_STS_CL91_BUFFER_BLK0r_ERR_EVENT_ADDRESS_CL91_BUFFER_BLK_0f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK0r_ERR_EVENT_ADDRESS_CL91_BUFFER_BLK_0f_GET
#define RX_X4_ECC_STS_CL91_BUFFER_BLK0r_ERR_EVENT_ADDRESS_CL91_BUFFER_BLK_0f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK0r_ERR_EVENT_ADDRESS_CL91_BUFFER_BLK_0f_SET
#define READ_RX_X4_ECC_STS_CL91_BUFFER_BLK0r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_ECC_STS_CL91_BUFFER_BLK0r
#define WRITE_RX_X4_ECC_STS_CL91_BUFFER_BLK0r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_ECC_STS_CL91_BUFFER_BLK0r
#define MODIFY_RX_X4_ECC_STS_CL91_BUFFER_BLK0r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_ECC_STS_CL91_BUFFER_BLK0r
#define READLN_RX_X4_ECC_STS_CL91_BUFFER_BLK0r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_ECC_STS_CL91_BUFFER_BLK0r
#define WRITELN_RX_X4_ECC_STS_CL91_BUFFER_BLK0r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_ECC_STS_CL91_BUFFER_BLK0r
#define WRITEALL_RX_X4_ECC_STS_CL91_BUFFER_BLK0r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_ECC_STS_CL91_BUFFER_BLK0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_ECC_STS_CL91_BUFFER_BLK1
 * BLOCKS:   RX_X4_ECC
 * REGADDR:  0xc381
 * DESC:     ECC status register for CL91 buffer block 1 memory
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     ERR_EVENT_ADDRESS_CL91_BUFFER_BLK_1 ECC error location, valid only if 1-bit or 2-bit error bit is set
 *     ONE_BIT_ERR_EVENT_CL91_BUFFER_BLK_1 1-bit ECC error detected
 *     TWO_BIT_ERR_EVENT_CL91_BUFFER_BLK_1 2-bit ECC error detected
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK1r (0x0000c381 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK1r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_ECC_STS_CL91_BUFFER_BLK1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK1r_s {
	uint32_t v[1];
	uint32_t rx_x4_ecc_sts_cl91_buffer_blk1[1];
	uint32_t _rx_x4_ecc_sts_cl91_buffer_blk1;
} BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK1r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK1r_CLR(r) (r).rx_x4_ecc_sts_cl91_buffer_blk1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK1r_SET(r,d) (r).rx_x4_ecc_sts_cl91_buffer_blk1[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK1r_GET(r) (r).rx_x4_ecc_sts_cl91_buffer_blk1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK1r_TWO_BIT_ERR_EVENT_CL91_BUFFER_BLK_1f_GET(r) ((((r).rx_x4_ecc_sts_cl91_buffer_blk1[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK1r_TWO_BIT_ERR_EVENT_CL91_BUFFER_BLK_1f_SET(r,f) (r).rx_x4_ecc_sts_cl91_buffer_blk1[0]=(((r).rx_x4_ecc_sts_cl91_buffer_blk1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK1r_ONE_BIT_ERR_EVENT_CL91_BUFFER_BLK_1f_GET(r) ((((r).rx_x4_ecc_sts_cl91_buffer_blk1[0]) >> 14) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK1r_ONE_BIT_ERR_EVENT_CL91_BUFFER_BLK_1f_SET(r,f) (r).rx_x4_ecc_sts_cl91_buffer_blk1[0]=(((r).rx_x4_ecc_sts_cl91_buffer_blk1[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK1r_ERR_EVENT_ADDRESS_CL91_BUFFER_BLK_1f_GET(r) (((r).rx_x4_ecc_sts_cl91_buffer_blk1[0]) & 0x3fff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK1r_ERR_EVENT_ADDRESS_CL91_BUFFER_BLK_1f_SET(r,f) (r).rx_x4_ecc_sts_cl91_buffer_blk1[0]=(((r).rx_x4_ecc_sts_cl91_buffer_blk1[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff)) | (0x3fff << 16)

/*
 * These macros can be used to access RX_X4_ECC_STS_CL91_BUFFER_BLK1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_ECC_STS_CL91_BUFFER_BLK1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK1r,(_r._rx_x4_ecc_sts_cl91_buffer_blk1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_ECC_STS_CL91_BUFFER_BLK1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK1r,(_r._rx_x4_ecc_sts_cl91_buffer_blk1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_ECC_STS_CL91_BUFFER_BLK1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK1r,(_r._rx_x4_ecc_sts_cl91_buffer_blk1))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_ECC_STS_CL91_BUFFER_BLK1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ecc_sts_cl91_buffer_blk1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_ECC_STS_CL91_BUFFER_BLK1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ecc_sts_cl91_buffer_blk1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_ECC_STS_CL91_BUFFER_BLK1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_ecc_sts_cl91_buffer_blk1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_ECC_STS_CL91_BUFFER_BLK1r BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK1r
#define RX_X4_ECC_STS_CL91_BUFFER_BLK1r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK1r_t RX_X4_ECC_STS_CL91_BUFFER_BLK1r_t;
#define RX_X4_ECC_STS_CL91_BUFFER_BLK1r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK1r_CLR
#define RX_X4_ECC_STS_CL91_BUFFER_BLK1r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK1r_SET
#define RX_X4_ECC_STS_CL91_BUFFER_BLK1r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK1r_GET
#define RX_X4_ECC_STS_CL91_BUFFER_BLK1r_TWO_BIT_ERR_EVENT_CL91_BUFFER_BLK_1f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK1r_TWO_BIT_ERR_EVENT_CL91_BUFFER_BLK_1f_GET
#define RX_X4_ECC_STS_CL91_BUFFER_BLK1r_TWO_BIT_ERR_EVENT_CL91_BUFFER_BLK_1f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK1r_TWO_BIT_ERR_EVENT_CL91_BUFFER_BLK_1f_SET
#define RX_X4_ECC_STS_CL91_BUFFER_BLK1r_ONE_BIT_ERR_EVENT_CL91_BUFFER_BLK_1f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK1r_ONE_BIT_ERR_EVENT_CL91_BUFFER_BLK_1f_GET
#define RX_X4_ECC_STS_CL91_BUFFER_BLK1r_ONE_BIT_ERR_EVENT_CL91_BUFFER_BLK_1f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK1r_ONE_BIT_ERR_EVENT_CL91_BUFFER_BLK_1f_SET
#define RX_X4_ECC_STS_CL91_BUFFER_BLK1r_ERR_EVENT_ADDRESS_CL91_BUFFER_BLK_1f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK1r_ERR_EVENT_ADDRESS_CL91_BUFFER_BLK_1f_GET
#define RX_X4_ECC_STS_CL91_BUFFER_BLK1r_ERR_EVENT_ADDRESS_CL91_BUFFER_BLK_1f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK1r_ERR_EVENT_ADDRESS_CL91_BUFFER_BLK_1f_SET
#define READ_RX_X4_ECC_STS_CL91_BUFFER_BLK1r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_ECC_STS_CL91_BUFFER_BLK1r
#define WRITE_RX_X4_ECC_STS_CL91_BUFFER_BLK1r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_ECC_STS_CL91_BUFFER_BLK1r
#define MODIFY_RX_X4_ECC_STS_CL91_BUFFER_BLK1r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_ECC_STS_CL91_BUFFER_BLK1r
#define READLN_RX_X4_ECC_STS_CL91_BUFFER_BLK1r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_ECC_STS_CL91_BUFFER_BLK1r
#define WRITELN_RX_X4_ECC_STS_CL91_BUFFER_BLK1r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_ECC_STS_CL91_BUFFER_BLK1r
#define WRITEALL_RX_X4_ECC_STS_CL91_BUFFER_BLK1r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_ECC_STS_CL91_BUFFER_BLK1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_ECC_STS_CL91_BUFFER_BLK2
 * BLOCKS:   RX_X4_ECC
 * REGADDR:  0xc382
 * DESC:     ECC status register for CL91 buffer block 2 memory
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     ERR_EVENT_ADDRESS_CL91_BUFFER_BLK_2 ECC error location, valid only if 1-bit or 2-bit error bit is set
 *     ONE_BIT_ERR_EVENT_CL91_BUFFER_BLK_2 1-bit ECC error detected
 *     TWO_BIT_ERR_EVENT_CL91_BUFFER_BLK_2 2-bit ECC error detected
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK2r (0x0000c382 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_ECC_STS_CL91_BUFFER_BLK2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK2r_s {
	uint32_t v[1];
	uint32_t rx_x4_ecc_sts_cl91_buffer_blk2[1];
	uint32_t _rx_x4_ecc_sts_cl91_buffer_blk2;
} BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK2r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK2r_CLR(r) (r).rx_x4_ecc_sts_cl91_buffer_blk2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK2r_SET(r,d) (r).rx_x4_ecc_sts_cl91_buffer_blk2[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK2r_GET(r) (r).rx_x4_ecc_sts_cl91_buffer_blk2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK2r_TWO_BIT_ERR_EVENT_CL91_BUFFER_BLK_2f_GET(r) ((((r).rx_x4_ecc_sts_cl91_buffer_blk2[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK2r_TWO_BIT_ERR_EVENT_CL91_BUFFER_BLK_2f_SET(r,f) (r).rx_x4_ecc_sts_cl91_buffer_blk2[0]=(((r).rx_x4_ecc_sts_cl91_buffer_blk2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK2r_ONE_BIT_ERR_EVENT_CL91_BUFFER_BLK_2f_GET(r) ((((r).rx_x4_ecc_sts_cl91_buffer_blk2[0]) >> 14) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK2r_ONE_BIT_ERR_EVENT_CL91_BUFFER_BLK_2f_SET(r,f) (r).rx_x4_ecc_sts_cl91_buffer_blk2[0]=(((r).rx_x4_ecc_sts_cl91_buffer_blk2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK2r_ERR_EVENT_ADDRESS_CL91_BUFFER_BLK_2f_GET(r) (((r).rx_x4_ecc_sts_cl91_buffer_blk2[0]) & 0x3fff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK2r_ERR_EVENT_ADDRESS_CL91_BUFFER_BLK_2f_SET(r,f) (r).rx_x4_ecc_sts_cl91_buffer_blk2[0]=(((r).rx_x4_ecc_sts_cl91_buffer_blk2[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff)) | (0x3fff << 16)

/*
 * These macros can be used to access RX_X4_ECC_STS_CL91_BUFFER_BLK2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_ECC_STS_CL91_BUFFER_BLK2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK2r,(_r._rx_x4_ecc_sts_cl91_buffer_blk2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_ECC_STS_CL91_BUFFER_BLK2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK2r,(_r._rx_x4_ecc_sts_cl91_buffer_blk2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_ECC_STS_CL91_BUFFER_BLK2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK2r,(_r._rx_x4_ecc_sts_cl91_buffer_blk2))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_ECC_STS_CL91_BUFFER_BLK2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ecc_sts_cl91_buffer_blk2))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_ECC_STS_CL91_BUFFER_BLK2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ecc_sts_cl91_buffer_blk2))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_ECC_STS_CL91_BUFFER_BLK2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_ecc_sts_cl91_buffer_blk2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_ECC_STS_CL91_BUFFER_BLK2r BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK2r
#define RX_X4_ECC_STS_CL91_BUFFER_BLK2r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK2r_t RX_X4_ECC_STS_CL91_BUFFER_BLK2r_t;
#define RX_X4_ECC_STS_CL91_BUFFER_BLK2r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK2r_CLR
#define RX_X4_ECC_STS_CL91_BUFFER_BLK2r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK2r_SET
#define RX_X4_ECC_STS_CL91_BUFFER_BLK2r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK2r_GET
#define RX_X4_ECC_STS_CL91_BUFFER_BLK2r_TWO_BIT_ERR_EVENT_CL91_BUFFER_BLK_2f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK2r_TWO_BIT_ERR_EVENT_CL91_BUFFER_BLK_2f_GET
#define RX_X4_ECC_STS_CL91_BUFFER_BLK2r_TWO_BIT_ERR_EVENT_CL91_BUFFER_BLK_2f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK2r_TWO_BIT_ERR_EVENT_CL91_BUFFER_BLK_2f_SET
#define RX_X4_ECC_STS_CL91_BUFFER_BLK2r_ONE_BIT_ERR_EVENT_CL91_BUFFER_BLK_2f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK2r_ONE_BIT_ERR_EVENT_CL91_BUFFER_BLK_2f_GET
#define RX_X4_ECC_STS_CL91_BUFFER_BLK2r_ONE_BIT_ERR_EVENT_CL91_BUFFER_BLK_2f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK2r_ONE_BIT_ERR_EVENT_CL91_BUFFER_BLK_2f_SET
#define RX_X4_ECC_STS_CL91_BUFFER_BLK2r_ERR_EVENT_ADDRESS_CL91_BUFFER_BLK_2f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK2r_ERR_EVENT_ADDRESS_CL91_BUFFER_BLK_2f_GET
#define RX_X4_ECC_STS_CL91_BUFFER_BLK2r_ERR_EVENT_ADDRESS_CL91_BUFFER_BLK_2f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK2r_ERR_EVENT_ADDRESS_CL91_BUFFER_BLK_2f_SET
#define READ_RX_X4_ECC_STS_CL91_BUFFER_BLK2r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_ECC_STS_CL91_BUFFER_BLK2r
#define WRITE_RX_X4_ECC_STS_CL91_BUFFER_BLK2r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_ECC_STS_CL91_BUFFER_BLK2r
#define MODIFY_RX_X4_ECC_STS_CL91_BUFFER_BLK2r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_ECC_STS_CL91_BUFFER_BLK2r
#define READLN_RX_X4_ECC_STS_CL91_BUFFER_BLK2r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_ECC_STS_CL91_BUFFER_BLK2r
#define WRITELN_RX_X4_ECC_STS_CL91_BUFFER_BLK2r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_ECC_STS_CL91_BUFFER_BLK2r
#define WRITEALL_RX_X4_ECC_STS_CL91_BUFFER_BLK2r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_ECC_STS_CL91_BUFFER_BLK2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_ECC_STS_DESKEW_MEM0
 * BLOCKS:   RX_X4_ECC
 * REGADDR:  0xc383
 * DESC:     ECC status register for MEM0 per physical lane
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     ERR_EVENT_ADDRESS_DESKEW_0 ECC error location, valid only if 1-bit or 2-bit error bit is set
 *     ONE_BIT_ERR_EVENT_DESKEW_0 1-bit ECC error detected
 *     TWO_BIT_ERR_EVENT_DESKEW_0 2-bit ECC error detected
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM0r (0x0000c383 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM0r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_ECC_STS_DESKEW_MEM0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM0r_s {
	uint32_t v[1];
	uint32_t rx_x4_ecc_sts_deskew_mem0[1];
	uint32_t _rx_x4_ecc_sts_deskew_mem0;
} BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM0r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM0r_CLR(r) (r).rx_x4_ecc_sts_deskew_mem0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM0r_SET(r,d) (r).rx_x4_ecc_sts_deskew_mem0[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM0r_GET(r) (r).rx_x4_ecc_sts_deskew_mem0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM0r_TWO_BIT_ERR_EVENT_DESKEW_0f_GET(r) ((((r).rx_x4_ecc_sts_deskew_mem0[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM0r_TWO_BIT_ERR_EVENT_DESKEW_0f_SET(r,f) (r).rx_x4_ecc_sts_deskew_mem0[0]=(((r).rx_x4_ecc_sts_deskew_mem0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM0r_ONE_BIT_ERR_EVENT_DESKEW_0f_GET(r) ((((r).rx_x4_ecc_sts_deskew_mem0[0]) >> 14) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM0r_ONE_BIT_ERR_EVENT_DESKEW_0f_SET(r,f) (r).rx_x4_ecc_sts_deskew_mem0[0]=(((r).rx_x4_ecc_sts_deskew_mem0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM0r_ERR_EVENT_ADDRESS_DESKEW_0f_GET(r) (((r).rx_x4_ecc_sts_deskew_mem0[0]) & 0x3fff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM0r_ERR_EVENT_ADDRESS_DESKEW_0f_SET(r,f) (r).rx_x4_ecc_sts_deskew_mem0[0]=(((r).rx_x4_ecc_sts_deskew_mem0[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff)) | (0x3fff << 16)

/*
 * These macros can be used to access RX_X4_ECC_STS_DESKEW_MEM0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_ECC_STS_DESKEW_MEM0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM0r,(_r._rx_x4_ecc_sts_deskew_mem0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_ECC_STS_DESKEW_MEM0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM0r,(_r._rx_x4_ecc_sts_deskew_mem0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_ECC_STS_DESKEW_MEM0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM0r,(_r._rx_x4_ecc_sts_deskew_mem0))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_ECC_STS_DESKEW_MEM0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ecc_sts_deskew_mem0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_ECC_STS_DESKEW_MEM0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ecc_sts_deskew_mem0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_ECC_STS_DESKEW_MEM0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_ecc_sts_deskew_mem0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_ECC_STS_DESKEW_MEM0r BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM0r
#define RX_X4_ECC_STS_DESKEW_MEM0r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM0r_t RX_X4_ECC_STS_DESKEW_MEM0r_t;
#define RX_X4_ECC_STS_DESKEW_MEM0r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM0r_CLR
#define RX_X4_ECC_STS_DESKEW_MEM0r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM0r_SET
#define RX_X4_ECC_STS_DESKEW_MEM0r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM0r_GET
#define RX_X4_ECC_STS_DESKEW_MEM0r_TWO_BIT_ERR_EVENT_DESKEW_0f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM0r_TWO_BIT_ERR_EVENT_DESKEW_0f_GET
#define RX_X4_ECC_STS_DESKEW_MEM0r_TWO_BIT_ERR_EVENT_DESKEW_0f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM0r_TWO_BIT_ERR_EVENT_DESKEW_0f_SET
#define RX_X4_ECC_STS_DESKEW_MEM0r_ONE_BIT_ERR_EVENT_DESKEW_0f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM0r_ONE_BIT_ERR_EVENT_DESKEW_0f_GET
#define RX_X4_ECC_STS_DESKEW_MEM0r_ONE_BIT_ERR_EVENT_DESKEW_0f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM0r_ONE_BIT_ERR_EVENT_DESKEW_0f_SET
#define RX_X4_ECC_STS_DESKEW_MEM0r_ERR_EVENT_ADDRESS_DESKEW_0f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM0r_ERR_EVENT_ADDRESS_DESKEW_0f_GET
#define RX_X4_ECC_STS_DESKEW_MEM0r_ERR_EVENT_ADDRESS_DESKEW_0f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM0r_ERR_EVENT_ADDRESS_DESKEW_0f_SET
#define READ_RX_X4_ECC_STS_DESKEW_MEM0r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_ECC_STS_DESKEW_MEM0r
#define WRITE_RX_X4_ECC_STS_DESKEW_MEM0r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_ECC_STS_DESKEW_MEM0r
#define MODIFY_RX_X4_ECC_STS_DESKEW_MEM0r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_ECC_STS_DESKEW_MEM0r
#define READLN_RX_X4_ECC_STS_DESKEW_MEM0r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_ECC_STS_DESKEW_MEM0r
#define WRITELN_RX_X4_ECC_STS_DESKEW_MEM0r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_ECC_STS_DESKEW_MEM0r
#define WRITEALL_RX_X4_ECC_STS_DESKEW_MEM0r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_ECC_STS_DESKEW_MEM0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_ECC_STS_DESKEW_MEM1
 * BLOCKS:   RX_X4_ECC
 * REGADDR:  0xc384
 * DESC:     ECC status register for MEM1 per physical lane
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     ERR_EVENT_ADDRESS_DESKEW_1 ECC error location, valid only if 1-bit or 2-bit error bit is set
 *     ONE_BIT_ERR_EVENT_DESKEW_1 1-bit ECC error detected
 *     TWO_BIT_ERR_EVENT_DESKEW_1 2-bit ECC error detected
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM1r (0x0000c384 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM1r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_ECC_STS_DESKEW_MEM1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM1r_s {
	uint32_t v[1];
	uint32_t rx_x4_ecc_sts_deskew_mem1[1];
	uint32_t _rx_x4_ecc_sts_deskew_mem1;
} BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM1r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM1r_CLR(r) (r).rx_x4_ecc_sts_deskew_mem1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM1r_SET(r,d) (r).rx_x4_ecc_sts_deskew_mem1[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM1r_GET(r) (r).rx_x4_ecc_sts_deskew_mem1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM1r_TWO_BIT_ERR_EVENT_DESKEW_1f_GET(r) ((((r).rx_x4_ecc_sts_deskew_mem1[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM1r_TWO_BIT_ERR_EVENT_DESKEW_1f_SET(r,f) (r).rx_x4_ecc_sts_deskew_mem1[0]=(((r).rx_x4_ecc_sts_deskew_mem1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM1r_ONE_BIT_ERR_EVENT_DESKEW_1f_GET(r) ((((r).rx_x4_ecc_sts_deskew_mem1[0]) >> 14) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM1r_ONE_BIT_ERR_EVENT_DESKEW_1f_SET(r,f) (r).rx_x4_ecc_sts_deskew_mem1[0]=(((r).rx_x4_ecc_sts_deskew_mem1[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM1r_ERR_EVENT_ADDRESS_DESKEW_1f_GET(r) (((r).rx_x4_ecc_sts_deskew_mem1[0]) & 0x3fff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM1r_ERR_EVENT_ADDRESS_DESKEW_1f_SET(r,f) (r).rx_x4_ecc_sts_deskew_mem1[0]=(((r).rx_x4_ecc_sts_deskew_mem1[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff)) | (0x3fff << 16)

/*
 * These macros can be used to access RX_X4_ECC_STS_DESKEW_MEM1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_ECC_STS_DESKEW_MEM1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM1r,(_r._rx_x4_ecc_sts_deskew_mem1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_ECC_STS_DESKEW_MEM1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM1r,(_r._rx_x4_ecc_sts_deskew_mem1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_ECC_STS_DESKEW_MEM1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM1r,(_r._rx_x4_ecc_sts_deskew_mem1))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_ECC_STS_DESKEW_MEM1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ecc_sts_deskew_mem1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_ECC_STS_DESKEW_MEM1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ecc_sts_deskew_mem1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_ECC_STS_DESKEW_MEM1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_ecc_sts_deskew_mem1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_ECC_STS_DESKEW_MEM1r BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM1r
#define RX_X4_ECC_STS_DESKEW_MEM1r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM1r_t RX_X4_ECC_STS_DESKEW_MEM1r_t;
#define RX_X4_ECC_STS_DESKEW_MEM1r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM1r_CLR
#define RX_X4_ECC_STS_DESKEW_MEM1r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM1r_SET
#define RX_X4_ECC_STS_DESKEW_MEM1r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM1r_GET
#define RX_X4_ECC_STS_DESKEW_MEM1r_TWO_BIT_ERR_EVENT_DESKEW_1f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM1r_TWO_BIT_ERR_EVENT_DESKEW_1f_GET
#define RX_X4_ECC_STS_DESKEW_MEM1r_TWO_BIT_ERR_EVENT_DESKEW_1f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM1r_TWO_BIT_ERR_EVENT_DESKEW_1f_SET
#define RX_X4_ECC_STS_DESKEW_MEM1r_ONE_BIT_ERR_EVENT_DESKEW_1f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM1r_ONE_BIT_ERR_EVENT_DESKEW_1f_GET
#define RX_X4_ECC_STS_DESKEW_MEM1r_ONE_BIT_ERR_EVENT_DESKEW_1f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM1r_ONE_BIT_ERR_EVENT_DESKEW_1f_SET
#define RX_X4_ECC_STS_DESKEW_MEM1r_ERR_EVENT_ADDRESS_DESKEW_1f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM1r_ERR_EVENT_ADDRESS_DESKEW_1f_GET
#define RX_X4_ECC_STS_DESKEW_MEM1r_ERR_EVENT_ADDRESS_DESKEW_1f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM1r_ERR_EVENT_ADDRESS_DESKEW_1f_SET
#define READ_RX_X4_ECC_STS_DESKEW_MEM1r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_ECC_STS_DESKEW_MEM1r
#define WRITE_RX_X4_ECC_STS_DESKEW_MEM1r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_ECC_STS_DESKEW_MEM1r
#define MODIFY_RX_X4_ECC_STS_DESKEW_MEM1r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_ECC_STS_DESKEW_MEM1r
#define READLN_RX_X4_ECC_STS_DESKEW_MEM1r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_ECC_STS_DESKEW_MEM1r
#define WRITELN_RX_X4_ECC_STS_DESKEW_MEM1r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_ECC_STS_DESKEW_MEM1r
#define WRITEALL_RX_X4_ECC_STS_DESKEW_MEM1r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_ECC_STS_DESKEW_MEM1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_ECC_STS_DESKEW_MEM2
 * BLOCKS:   RX_X4_ECC
 * REGADDR:  0xc385
 * DESC:     ECC status register for MEM2 per physical lane
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     ERR_EVENT_ADDRESS_DESKEW_2 ECC error location, valid only if 1-bit or 2-bit error bit is set
 *     ONE_BIT_ERR_EVENT_DESKEW_2 1-bit ECC error detected
 *     TWO_BIT_ERR_EVENT_DESKEW_2 2-bit ECC error detected
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM2r (0x0000c385 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_ECC_STS_DESKEW_MEM2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM2r_s {
	uint32_t v[1];
	uint32_t rx_x4_ecc_sts_deskew_mem2[1];
	uint32_t _rx_x4_ecc_sts_deskew_mem2;
} BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM2r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM2r_CLR(r) (r).rx_x4_ecc_sts_deskew_mem2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM2r_SET(r,d) (r).rx_x4_ecc_sts_deskew_mem2[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM2r_GET(r) (r).rx_x4_ecc_sts_deskew_mem2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM2r_TWO_BIT_ERR_EVENT_DESKEW_2f_GET(r) ((((r).rx_x4_ecc_sts_deskew_mem2[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM2r_TWO_BIT_ERR_EVENT_DESKEW_2f_SET(r,f) (r).rx_x4_ecc_sts_deskew_mem2[0]=(((r).rx_x4_ecc_sts_deskew_mem2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM2r_ONE_BIT_ERR_EVENT_DESKEW_2f_GET(r) ((((r).rx_x4_ecc_sts_deskew_mem2[0]) >> 14) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM2r_ONE_BIT_ERR_EVENT_DESKEW_2f_SET(r,f) (r).rx_x4_ecc_sts_deskew_mem2[0]=(((r).rx_x4_ecc_sts_deskew_mem2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM2r_ERR_EVENT_ADDRESS_DESKEW_2f_GET(r) (((r).rx_x4_ecc_sts_deskew_mem2[0]) & 0x3fff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM2r_ERR_EVENT_ADDRESS_DESKEW_2f_SET(r,f) (r).rx_x4_ecc_sts_deskew_mem2[0]=(((r).rx_x4_ecc_sts_deskew_mem2[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff)) | (0x3fff << 16)

/*
 * These macros can be used to access RX_X4_ECC_STS_DESKEW_MEM2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_ECC_STS_DESKEW_MEM2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM2r,(_r._rx_x4_ecc_sts_deskew_mem2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_ECC_STS_DESKEW_MEM2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM2r,(_r._rx_x4_ecc_sts_deskew_mem2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_ECC_STS_DESKEW_MEM2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM2r,(_r._rx_x4_ecc_sts_deskew_mem2))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_ECC_STS_DESKEW_MEM2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ecc_sts_deskew_mem2))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_ECC_STS_DESKEW_MEM2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ecc_sts_deskew_mem2))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_ECC_STS_DESKEW_MEM2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_ecc_sts_deskew_mem2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_ECC_STS_DESKEW_MEM2r BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM2r
#define RX_X4_ECC_STS_DESKEW_MEM2r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM2r_t RX_X4_ECC_STS_DESKEW_MEM2r_t;
#define RX_X4_ECC_STS_DESKEW_MEM2r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM2r_CLR
#define RX_X4_ECC_STS_DESKEW_MEM2r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM2r_SET
#define RX_X4_ECC_STS_DESKEW_MEM2r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM2r_GET
#define RX_X4_ECC_STS_DESKEW_MEM2r_TWO_BIT_ERR_EVENT_DESKEW_2f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM2r_TWO_BIT_ERR_EVENT_DESKEW_2f_GET
#define RX_X4_ECC_STS_DESKEW_MEM2r_TWO_BIT_ERR_EVENT_DESKEW_2f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM2r_TWO_BIT_ERR_EVENT_DESKEW_2f_SET
#define RX_X4_ECC_STS_DESKEW_MEM2r_ONE_BIT_ERR_EVENT_DESKEW_2f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM2r_ONE_BIT_ERR_EVENT_DESKEW_2f_GET
#define RX_X4_ECC_STS_DESKEW_MEM2r_ONE_BIT_ERR_EVENT_DESKEW_2f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM2r_ONE_BIT_ERR_EVENT_DESKEW_2f_SET
#define RX_X4_ECC_STS_DESKEW_MEM2r_ERR_EVENT_ADDRESS_DESKEW_2f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM2r_ERR_EVENT_ADDRESS_DESKEW_2f_GET
#define RX_X4_ECC_STS_DESKEW_MEM2r_ERR_EVENT_ADDRESS_DESKEW_2f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM2r_ERR_EVENT_ADDRESS_DESKEW_2f_SET
#define READ_RX_X4_ECC_STS_DESKEW_MEM2r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_ECC_STS_DESKEW_MEM2r
#define WRITE_RX_X4_ECC_STS_DESKEW_MEM2r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_ECC_STS_DESKEW_MEM2r
#define MODIFY_RX_X4_ECC_STS_DESKEW_MEM2r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_ECC_STS_DESKEW_MEM2r
#define READLN_RX_X4_ECC_STS_DESKEW_MEM2r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_ECC_STS_DESKEW_MEM2r
#define WRITELN_RX_X4_ECC_STS_DESKEW_MEM2r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_ECC_STS_DESKEW_MEM2r
#define WRITEALL_RX_X4_ECC_STS_DESKEW_MEM2r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_ECC_STS_DESKEW_MEM2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_STS_DESKEW_MEM2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_ECC_INTR_STS_1BIT
 * BLOCKS:   RX_X4_ECC
 * REGADDR:  0xc386
 * DESC:     ECC 1-bit interrupt status register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CL91_BUFFER_BLK0_1BIT_INT_STATUS Single bit, correctable error detected
 *     CL91_BUFFER_BLK1_1BIT_INT_STATUS Single bit, correctable error detected
 *     CL91_BUFFER_BLK2_1BIT_INT_STATUS Single bit, correctable error detected
 *     DESKEW_MEM_0_1BIT_INT_STATUS Single bit, correctable error detected
 *     DESKEW_MEM_1_1BIT_INT_STATUS Single bit, correctable error detected
 *     DESKEW_MEM_2_1BIT_INT_STATUS Single bit, correctable error detected
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_1BITr (0x0000c386 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_1BITr_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_ECC_INTR_STS_1BIT.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_1BITr_s {
	uint32_t v[1];
	uint32_t rx_x4_ecc_intr_sts_1bit[1];
	uint32_t _rx_x4_ecc_intr_sts_1bit;
} BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_1BITr_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_1BITr_CLR(r) (r).rx_x4_ecc_intr_sts_1bit[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_1BITr_SET(r,d) (r).rx_x4_ecc_intr_sts_1bit[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_1BITr_GET(r) (r).rx_x4_ecc_intr_sts_1bit[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_1BITr_DESKEW_MEM_2_1BIT_INT_STATUSf_GET(r) ((((r).rx_x4_ecc_intr_sts_1bit[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_1BITr_DESKEW_MEM_2_1BIT_INT_STATUSf_SET(r,f) (r).rx_x4_ecc_intr_sts_1bit[0]=(((r).rx_x4_ecc_intr_sts_1bit[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_1BITr_DESKEW_MEM_1_1BIT_INT_STATUSf_GET(r) ((((r).rx_x4_ecc_intr_sts_1bit[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_1BITr_DESKEW_MEM_1_1BIT_INT_STATUSf_SET(r,f) (r).rx_x4_ecc_intr_sts_1bit[0]=(((r).rx_x4_ecc_intr_sts_1bit[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_1BITr_DESKEW_MEM_0_1BIT_INT_STATUSf_GET(r) ((((r).rx_x4_ecc_intr_sts_1bit[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_1BITr_DESKEW_MEM_0_1BIT_INT_STATUSf_SET(r,f) (r).rx_x4_ecc_intr_sts_1bit[0]=(((r).rx_x4_ecc_intr_sts_1bit[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_1BITr_CL91_BUFFER_BLK2_1BIT_INT_STATUSf_GET(r) ((((r).rx_x4_ecc_intr_sts_1bit[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_1BITr_CL91_BUFFER_BLK2_1BIT_INT_STATUSf_SET(r,f) (r).rx_x4_ecc_intr_sts_1bit[0]=(((r).rx_x4_ecc_intr_sts_1bit[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_1BITr_CL91_BUFFER_BLK1_1BIT_INT_STATUSf_GET(r) ((((r).rx_x4_ecc_intr_sts_1bit[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_1BITr_CL91_BUFFER_BLK1_1BIT_INT_STATUSf_SET(r,f) (r).rx_x4_ecc_intr_sts_1bit[0]=(((r).rx_x4_ecc_intr_sts_1bit[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_1BITr_CL91_BUFFER_BLK0_1BIT_INT_STATUSf_GET(r) (((r).rx_x4_ecc_intr_sts_1bit[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_1BITr_CL91_BUFFER_BLK0_1BIT_INT_STATUSf_SET(r,f) (r).rx_x4_ecc_intr_sts_1bit[0]=(((r).rx_x4_ecc_intr_sts_1bit[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_X4_ECC_INTR_STS_1BIT.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_ECC_INTR_STS_1BITr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_1BITr,(_r._rx_x4_ecc_intr_sts_1bit))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_ECC_INTR_STS_1BITr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_1BITr,(_r._rx_x4_ecc_intr_sts_1bit)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_ECC_INTR_STS_1BITr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_1BITr,(_r._rx_x4_ecc_intr_sts_1bit))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_ECC_INTR_STS_1BITr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_1BITr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ecc_intr_sts_1bit))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_ECC_INTR_STS_1BITr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_1BITr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ecc_intr_sts_1bit))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_ECC_INTR_STS_1BITr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_1BITr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_ecc_intr_sts_1bit))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_ECC_INTR_STS_1BITr BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_1BITr
#define RX_X4_ECC_INTR_STS_1BITr_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_1BITr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_1BITr_t RX_X4_ECC_INTR_STS_1BITr_t;
#define RX_X4_ECC_INTR_STS_1BITr_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_1BITr_CLR
#define RX_X4_ECC_INTR_STS_1BITr_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_1BITr_SET
#define RX_X4_ECC_INTR_STS_1BITr_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_1BITr_GET
#define RX_X4_ECC_INTR_STS_1BITr_DESKEW_MEM_2_1BIT_INT_STATUSf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_1BITr_DESKEW_MEM_2_1BIT_INT_STATUSf_GET
#define RX_X4_ECC_INTR_STS_1BITr_DESKEW_MEM_2_1BIT_INT_STATUSf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_1BITr_DESKEW_MEM_2_1BIT_INT_STATUSf_SET
#define RX_X4_ECC_INTR_STS_1BITr_DESKEW_MEM_1_1BIT_INT_STATUSf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_1BITr_DESKEW_MEM_1_1BIT_INT_STATUSf_GET
#define RX_X4_ECC_INTR_STS_1BITr_DESKEW_MEM_1_1BIT_INT_STATUSf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_1BITr_DESKEW_MEM_1_1BIT_INT_STATUSf_SET
#define RX_X4_ECC_INTR_STS_1BITr_DESKEW_MEM_0_1BIT_INT_STATUSf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_1BITr_DESKEW_MEM_0_1BIT_INT_STATUSf_GET
#define RX_X4_ECC_INTR_STS_1BITr_DESKEW_MEM_0_1BIT_INT_STATUSf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_1BITr_DESKEW_MEM_0_1BIT_INT_STATUSf_SET
#define RX_X4_ECC_INTR_STS_1BITr_CL91_BUFFER_BLK2_1BIT_INT_STATUSf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_1BITr_CL91_BUFFER_BLK2_1BIT_INT_STATUSf_GET
#define RX_X4_ECC_INTR_STS_1BITr_CL91_BUFFER_BLK2_1BIT_INT_STATUSf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_1BITr_CL91_BUFFER_BLK2_1BIT_INT_STATUSf_SET
#define RX_X4_ECC_INTR_STS_1BITr_CL91_BUFFER_BLK1_1BIT_INT_STATUSf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_1BITr_CL91_BUFFER_BLK1_1BIT_INT_STATUSf_GET
#define RX_X4_ECC_INTR_STS_1BITr_CL91_BUFFER_BLK1_1BIT_INT_STATUSf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_1BITr_CL91_BUFFER_BLK1_1BIT_INT_STATUSf_SET
#define RX_X4_ECC_INTR_STS_1BITr_CL91_BUFFER_BLK0_1BIT_INT_STATUSf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_1BITr_CL91_BUFFER_BLK0_1BIT_INT_STATUSf_GET
#define RX_X4_ECC_INTR_STS_1BITr_CL91_BUFFER_BLK0_1BIT_INT_STATUSf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_1BITr_CL91_BUFFER_BLK0_1BIT_INT_STATUSf_SET
#define READ_RX_X4_ECC_INTR_STS_1BITr BCMI_TSCF_GEN3_XGXS_READ_RX_X4_ECC_INTR_STS_1BITr
#define WRITE_RX_X4_ECC_INTR_STS_1BITr BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_ECC_INTR_STS_1BITr
#define MODIFY_RX_X4_ECC_INTR_STS_1BITr BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_ECC_INTR_STS_1BITr
#define READLN_RX_X4_ECC_INTR_STS_1BITr BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_ECC_INTR_STS_1BITr
#define WRITELN_RX_X4_ECC_INTR_STS_1BITr BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_ECC_INTR_STS_1BITr
#define WRITEALL_RX_X4_ECC_INTR_STS_1BITr BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_ECC_INTR_STS_1BITr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_1BITr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_ECC_INTR_STS_2BIT
 * BLOCKS:   RX_X4_ECC
 * REGADDR:  0xc387
 * DESC:     ECC 2-bit interrupt status register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CL91_BUFFER_BLK0_2BIT_INT_STATUS Two bit, uncorrectable error detected
 *     CL91_BUFFER_BLK1_2BIT_INT_STATUS Two bit, uncorrectable error detected
 *     CL91_BUFFER_BLK2_2BIT_INT_STATUS Two bit, uncorrectable error detected
 *     DESKEW_MEM_0_2BIT_INT_STATUS Two bit, uncorrectable error detected
 *     DESKEW_MEM_1_2BIT_INT_STATUS Two bit, uncorrectable error detected
 *     DESKEW_MEM_2_2BIT_INT_STATUS Two bit, uncorrectable error detected
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_2BITr (0x0000c387 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_2BITr_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_ECC_INTR_STS_2BIT.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_2BITr_s {
	uint32_t v[1];
	uint32_t rx_x4_ecc_intr_sts_2bit[1];
	uint32_t _rx_x4_ecc_intr_sts_2bit;
} BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_2BITr_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_2BITr_CLR(r) (r).rx_x4_ecc_intr_sts_2bit[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_2BITr_SET(r,d) (r).rx_x4_ecc_intr_sts_2bit[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_2BITr_GET(r) (r).rx_x4_ecc_intr_sts_2bit[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_2BITr_DESKEW_MEM_2_2BIT_INT_STATUSf_GET(r) ((((r).rx_x4_ecc_intr_sts_2bit[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_2BITr_DESKEW_MEM_2_2BIT_INT_STATUSf_SET(r,f) (r).rx_x4_ecc_intr_sts_2bit[0]=(((r).rx_x4_ecc_intr_sts_2bit[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_2BITr_DESKEW_MEM_1_2BIT_INT_STATUSf_GET(r) ((((r).rx_x4_ecc_intr_sts_2bit[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_2BITr_DESKEW_MEM_1_2BIT_INT_STATUSf_SET(r,f) (r).rx_x4_ecc_intr_sts_2bit[0]=(((r).rx_x4_ecc_intr_sts_2bit[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_2BITr_DESKEW_MEM_0_2BIT_INT_STATUSf_GET(r) ((((r).rx_x4_ecc_intr_sts_2bit[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_2BITr_DESKEW_MEM_0_2BIT_INT_STATUSf_SET(r,f) (r).rx_x4_ecc_intr_sts_2bit[0]=(((r).rx_x4_ecc_intr_sts_2bit[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_2BITr_CL91_BUFFER_BLK2_2BIT_INT_STATUSf_GET(r) ((((r).rx_x4_ecc_intr_sts_2bit[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_2BITr_CL91_BUFFER_BLK2_2BIT_INT_STATUSf_SET(r,f) (r).rx_x4_ecc_intr_sts_2bit[0]=(((r).rx_x4_ecc_intr_sts_2bit[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_2BITr_CL91_BUFFER_BLK1_2BIT_INT_STATUSf_GET(r) ((((r).rx_x4_ecc_intr_sts_2bit[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_2BITr_CL91_BUFFER_BLK1_2BIT_INT_STATUSf_SET(r,f) (r).rx_x4_ecc_intr_sts_2bit[0]=(((r).rx_x4_ecc_intr_sts_2bit[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_2BITr_CL91_BUFFER_BLK0_2BIT_INT_STATUSf_GET(r) (((r).rx_x4_ecc_intr_sts_2bit[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_2BITr_CL91_BUFFER_BLK0_2BIT_INT_STATUSf_SET(r,f) (r).rx_x4_ecc_intr_sts_2bit[0]=(((r).rx_x4_ecc_intr_sts_2bit[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_X4_ECC_INTR_STS_2BIT.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_ECC_INTR_STS_2BITr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_2BITr,(_r._rx_x4_ecc_intr_sts_2bit))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_ECC_INTR_STS_2BITr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_2BITr,(_r._rx_x4_ecc_intr_sts_2bit)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_ECC_INTR_STS_2BITr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_2BITr,(_r._rx_x4_ecc_intr_sts_2bit))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_ECC_INTR_STS_2BITr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_2BITr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ecc_intr_sts_2bit))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_ECC_INTR_STS_2BITr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_2BITr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ecc_intr_sts_2bit))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_ECC_INTR_STS_2BITr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_2BITr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_ecc_intr_sts_2bit))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_ECC_INTR_STS_2BITr BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_2BITr
#define RX_X4_ECC_INTR_STS_2BITr_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_2BITr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_2BITr_t RX_X4_ECC_INTR_STS_2BITr_t;
#define RX_X4_ECC_INTR_STS_2BITr_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_2BITr_CLR
#define RX_X4_ECC_INTR_STS_2BITr_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_2BITr_SET
#define RX_X4_ECC_INTR_STS_2BITr_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_2BITr_GET
#define RX_X4_ECC_INTR_STS_2BITr_DESKEW_MEM_2_2BIT_INT_STATUSf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_2BITr_DESKEW_MEM_2_2BIT_INT_STATUSf_GET
#define RX_X4_ECC_INTR_STS_2BITr_DESKEW_MEM_2_2BIT_INT_STATUSf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_2BITr_DESKEW_MEM_2_2BIT_INT_STATUSf_SET
#define RX_X4_ECC_INTR_STS_2BITr_DESKEW_MEM_1_2BIT_INT_STATUSf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_2BITr_DESKEW_MEM_1_2BIT_INT_STATUSf_GET
#define RX_X4_ECC_INTR_STS_2BITr_DESKEW_MEM_1_2BIT_INT_STATUSf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_2BITr_DESKEW_MEM_1_2BIT_INT_STATUSf_SET
#define RX_X4_ECC_INTR_STS_2BITr_DESKEW_MEM_0_2BIT_INT_STATUSf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_2BITr_DESKEW_MEM_0_2BIT_INT_STATUSf_GET
#define RX_X4_ECC_INTR_STS_2BITr_DESKEW_MEM_0_2BIT_INT_STATUSf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_2BITr_DESKEW_MEM_0_2BIT_INT_STATUSf_SET
#define RX_X4_ECC_INTR_STS_2BITr_CL91_BUFFER_BLK2_2BIT_INT_STATUSf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_2BITr_CL91_BUFFER_BLK2_2BIT_INT_STATUSf_GET
#define RX_X4_ECC_INTR_STS_2BITr_CL91_BUFFER_BLK2_2BIT_INT_STATUSf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_2BITr_CL91_BUFFER_BLK2_2BIT_INT_STATUSf_SET
#define RX_X4_ECC_INTR_STS_2BITr_CL91_BUFFER_BLK1_2BIT_INT_STATUSf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_2BITr_CL91_BUFFER_BLK1_2BIT_INT_STATUSf_GET
#define RX_X4_ECC_INTR_STS_2BITr_CL91_BUFFER_BLK1_2BIT_INT_STATUSf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_2BITr_CL91_BUFFER_BLK1_2BIT_INT_STATUSf_SET
#define RX_X4_ECC_INTR_STS_2BITr_CL91_BUFFER_BLK0_2BIT_INT_STATUSf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_2BITr_CL91_BUFFER_BLK0_2BIT_INT_STATUSf_GET
#define RX_X4_ECC_INTR_STS_2BITr_CL91_BUFFER_BLK0_2BIT_INT_STATUSf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_2BITr_CL91_BUFFER_BLK0_2BIT_INT_STATUSf_SET
#define READ_RX_X4_ECC_INTR_STS_2BITr BCMI_TSCF_GEN3_XGXS_READ_RX_X4_ECC_INTR_STS_2BITr
#define WRITE_RX_X4_ECC_INTR_STS_2BITr BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_ECC_INTR_STS_2BITr
#define MODIFY_RX_X4_ECC_INTR_STS_2BITr BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_ECC_INTR_STS_2BITr
#define READLN_RX_X4_ECC_INTR_STS_2BITr BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_ECC_INTR_STS_2BITr
#define WRITELN_RX_X4_ECC_INTR_STS_2BITr BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_ECC_INTR_STS_2BITr
#define WRITEALL_RX_X4_ECC_INTR_STS_2BITr BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_ECC_INTR_STS_2BITr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_STS_2BITr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_ECC_INTR_EN_1BIT
 * BLOCKS:   RX_X4_ECC
 * REGADDR:  0xc388
 * DESC:     ECC 1-bit interrupt enable register
 * RESETVAL: 0x3f (63)
 * ACCESS:   R/W
 * FIELDS:
 *     CL91_BUFFER_BLK0_1BIT_INT_EN Enable for correctable error interrupt
 *     CL91_BUFFER_BLK1_1BIT_INT_EN Enable for correctable error interrupt
 *     CL91_BUFFER_BLK2_1BIT_INT_EN Enable for correctable error interrupt
 *     DESKEW_MEM_0_1BIT_INT_EN Enable for correctable error interrupt
 *     DESKEW_MEM_1_1BIT_INT_EN Enable for correctable error interrupt
 *     DESKEW_MEM_2_1BIT_INT_EN Enable for correctable error interrupt
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_1BITr (0x0000c388 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_1BITr_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_ECC_INTR_EN_1BIT.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_1BITr_s {
	uint32_t v[1];
	uint32_t rx_x4_ecc_intr_en_1bit[1];
	uint32_t _rx_x4_ecc_intr_en_1bit;
} BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_1BITr_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_1BITr_CLR(r) (r).rx_x4_ecc_intr_en_1bit[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_1BITr_SET(r,d) (r).rx_x4_ecc_intr_en_1bit[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_1BITr_GET(r) (r).rx_x4_ecc_intr_en_1bit[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_1BITr_DESKEW_MEM_2_1BIT_INT_ENf_GET(r) ((((r).rx_x4_ecc_intr_en_1bit[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_1BITr_DESKEW_MEM_2_1BIT_INT_ENf_SET(r,f) (r).rx_x4_ecc_intr_en_1bit[0]=(((r).rx_x4_ecc_intr_en_1bit[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_1BITr_DESKEW_MEM_1_1BIT_INT_ENf_GET(r) ((((r).rx_x4_ecc_intr_en_1bit[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_1BITr_DESKEW_MEM_1_1BIT_INT_ENf_SET(r,f) (r).rx_x4_ecc_intr_en_1bit[0]=(((r).rx_x4_ecc_intr_en_1bit[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_1BITr_DESKEW_MEM_0_1BIT_INT_ENf_GET(r) ((((r).rx_x4_ecc_intr_en_1bit[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_1BITr_DESKEW_MEM_0_1BIT_INT_ENf_SET(r,f) (r).rx_x4_ecc_intr_en_1bit[0]=(((r).rx_x4_ecc_intr_en_1bit[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_1BITr_CL91_BUFFER_BLK2_1BIT_INT_ENf_GET(r) ((((r).rx_x4_ecc_intr_en_1bit[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_1BITr_CL91_BUFFER_BLK2_1BIT_INT_ENf_SET(r,f) (r).rx_x4_ecc_intr_en_1bit[0]=(((r).rx_x4_ecc_intr_en_1bit[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_1BITr_CL91_BUFFER_BLK1_1BIT_INT_ENf_GET(r) ((((r).rx_x4_ecc_intr_en_1bit[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_1BITr_CL91_BUFFER_BLK1_1BIT_INT_ENf_SET(r,f) (r).rx_x4_ecc_intr_en_1bit[0]=(((r).rx_x4_ecc_intr_en_1bit[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_1BITr_CL91_BUFFER_BLK0_1BIT_INT_ENf_GET(r) (((r).rx_x4_ecc_intr_en_1bit[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_1BITr_CL91_BUFFER_BLK0_1BIT_INT_ENf_SET(r,f) (r).rx_x4_ecc_intr_en_1bit[0]=(((r).rx_x4_ecc_intr_en_1bit[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_X4_ECC_INTR_EN_1BIT.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_ECC_INTR_EN_1BITr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_1BITr,(_r._rx_x4_ecc_intr_en_1bit))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_ECC_INTR_EN_1BITr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_1BITr,(_r._rx_x4_ecc_intr_en_1bit)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_ECC_INTR_EN_1BITr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_1BITr,(_r._rx_x4_ecc_intr_en_1bit))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_ECC_INTR_EN_1BITr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_1BITr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ecc_intr_en_1bit))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_ECC_INTR_EN_1BITr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_1BITr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ecc_intr_en_1bit))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_ECC_INTR_EN_1BITr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_1BITr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_ecc_intr_en_1bit))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_ECC_INTR_EN_1BITr BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_1BITr
#define RX_X4_ECC_INTR_EN_1BITr_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_1BITr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_1BITr_t RX_X4_ECC_INTR_EN_1BITr_t;
#define RX_X4_ECC_INTR_EN_1BITr_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_1BITr_CLR
#define RX_X4_ECC_INTR_EN_1BITr_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_1BITr_SET
#define RX_X4_ECC_INTR_EN_1BITr_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_1BITr_GET
#define RX_X4_ECC_INTR_EN_1BITr_DESKEW_MEM_2_1BIT_INT_ENf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_1BITr_DESKEW_MEM_2_1BIT_INT_ENf_GET
#define RX_X4_ECC_INTR_EN_1BITr_DESKEW_MEM_2_1BIT_INT_ENf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_1BITr_DESKEW_MEM_2_1BIT_INT_ENf_SET
#define RX_X4_ECC_INTR_EN_1BITr_DESKEW_MEM_1_1BIT_INT_ENf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_1BITr_DESKEW_MEM_1_1BIT_INT_ENf_GET
#define RX_X4_ECC_INTR_EN_1BITr_DESKEW_MEM_1_1BIT_INT_ENf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_1BITr_DESKEW_MEM_1_1BIT_INT_ENf_SET
#define RX_X4_ECC_INTR_EN_1BITr_DESKEW_MEM_0_1BIT_INT_ENf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_1BITr_DESKEW_MEM_0_1BIT_INT_ENf_GET
#define RX_X4_ECC_INTR_EN_1BITr_DESKEW_MEM_0_1BIT_INT_ENf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_1BITr_DESKEW_MEM_0_1BIT_INT_ENf_SET
#define RX_X4_ECC_INTR_EN_1BITr_CL91_BUFFER_BLK2_1BIT_INT_ENf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_1BITr_CL91_BUFFER_BLK2_1BIT_INT_ENf_GET
#define RX_X4_ECC_INTR_EN_1BITr_CL91_BUFFER_BLK2_1BIT_INT_ENf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_1BITr_CL91_BUFFER_BLK2_1BIT_INT_ENf_SET
#define RX_X4_ECC_INTR_EN_1BITr_CL91_BUFFER_BLK1_1BIT_INT_ENf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_1BITr_CL91_BUFFER_BLK1_1BIT_INT_ENf_GET
#define RX_X4_ECC_INTR_EN_1BITr_CL91_BUFFER_BLK1_1BIT_INT_ENf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_1BITr_CL91_BUFFER_BLK1_1BIT_INT_ENf_SET
#define RX_X4_ECC_INTR_EN_1BITr_CL91_BUFFER_BLK0_1BIT_INT_ENf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_1BITr_CL91_BUFFER_BLK0_1BIT_INT_ENf_GET
#define RX_X4_ECC_INTR_EN_1BITr_CL91_BUFFER_BLK0_1BIT_INT_ENf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_1BITr_CL91_BUFFER_BLK0_1BIT_INT_ENf_SET
#define READ_RX_X4_ECC_INTR_EN_1BITr BCMI_TSCF_GEN3_XGXS_READ_RX_X4_ECC_INTR_EN_1BITr
#define WRITE_RX_X4_ECC_INTR_EN_1BITr BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_ECC_INTR_EN_1BITr
#define MODIFY_RX_X4_ECC_INTR_EN_1BITr BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_ECC_INTR_EN_1BITr
#define READLN_RX_X4_ECC_INTR_EN_1BITr BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_ECC_INTR_EN_1BITr
#define WRITELN_RX_X4_ECC_INTR_EN_1BITr BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_ECC_INTR_EN_1BITr
#define WRITEALL_RX_X4_ECC_INTR_EN_1BITr BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_ECC_INTR_EN_1BITr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_1BITr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_ECC_INTR_EN_2BIT
 * BLOCKS:   RX_X4_ECC
 * REGADDR:  0xc389
 * DESC:     ECC 2-bit interrupt enable register
 * RESETVAL: 0x3f (63)
 * ACCESS:   R/W
 * FIELDS:
 *     CL91_BUFFER_BLK0_2BIT_INT_EN Enable for uncorrectable error interrupt
 *     CL91_BUFFER_BLK1_2BIT_INT_EN Enable for uncorrectable error interrupt
 *     CL91_BUFFER_BLK2_2BIT_INT_EN Enable for uncorrectable error interrupt
 *     DESKEW_MEM_0_2BIT_INT_EN Enable for uncorrectable error interrupt
 *     DESKEW_MEM_1_2BIT_INT_EN Enable for uncorrectable error interrupt
 *     DESKEW_MEM_2_2BIT_INT_EN Enable for uncorrectable error interrupt
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_2BITr (0x0000c389 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_2BITr_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_ECC_INTR_EN_2BIT.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_2BITr_s {
	uint32_t v[1];
	uint32_t rx_x4_ecc_intr_en_2bit[1];
	uint32_t _rx_x4_ecc_intr_en_2bit;
} BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_2BITr_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_2BITr_CLR(r) (r).rx_x4_ecc_intr_en_2bit[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_2BITr_SET(r,d) (r).rx_x4_ecc_intr_en_2bit[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_2BITr_GET(r) (r).rx_x4_ecc_intr_en_2bit[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_2BITr_DESKEW_MEM_2_2BIT_INT_ENf_GET(r) ((((r).rx_x4_ecc_intr_en_2bit[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_2BITr_DESKEW_MEM_2_2BIT_INT_ENf_SET(r,f) (r).rx_x4_ecc_intr_en_2bit[0]=(((r).rx_x4_ecc_intr_en_2bit[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_2BITr_DESKEW_MEM_1_2BIT_INT_ENf_GET(r) ((((r).rx_x4_ecc_intr_en_2bit[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_2BITr_DESKEW_MEM_1_2BIT_INT_ENf_SET(r,f) (r).rx_x4_ecc_intr_en_2bit[0]=(((r).rx_x4_ecc_intr_en_2bit[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_2BITr_DESKEW_MEM_0_2BIT_INT_ENf_GET(r) ((((r).rx_x4_ecc_intr_en_2bit[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_2BITr_DESKEW_MEM_0_2BIT_INT_ENf_SET(r,f) (r).rx_x4_ecc_intr_en_2bit[0]=(((r).rx_x4_ecc_intr_en_2bit[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_2BITr_CL91_BUFFER_BLK2_2BIT_INT_ENf_GET(r) ((((r).rx_x4_ecc_intr_en_2bit[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_2BITr_CL91_BUFFER_BLK2_2BIT_INT_ENf_SET(r,f) (r).rx_x4_ecc_intr_en_2bit[0]=(((r).rx_x4_ecc_intr_en_2bit[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_2BITr_CL91_BUFFER_BLK1_2BIT_INT_ENf_GET(r) ((((r).rx_x4_ecc_intr_en_2bit[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_2BITr_CL91_BUFFER_BLK1_2BIT_INT_ENf_SET(r,f) (r).rx_x4_ecc_intr_en_2bit[0]=(((r).rx_x4_ecc_intr_en_2bit[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_2BITr_CL91_BUFFER_BLK0_2BIT_INT_ENf_GET(r) (((r).rx_x4_ecc_intr_en_2bit[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_2BITr_CL91_BUFFER_BLK0_2BIT_INT_ENf_SET(r,f) (r).rx_x4_ecc_intr_en_2bit[0]=(((r).rx_x4_ecc_intr_en_2bit[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_X4_ECC_INTR_EN_2BIT.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_ECC_INTR_EN_2BITr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_2BITr,(_r._rx_x4_ecc_intr_en_2bit))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_ECC_INTR_EN_2BITr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_2BITr,(_r._rx_x4_ecc_intr_en_2bit)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_ECC_INTR_EN_2BITr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_2BITr,(_r._rx_x4_ecc_intr_en_2bit))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_ECC_INTR_EN_2BITr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_2BITr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ecc_intr_en_2bit))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_ECC_INTR_EN_2BITr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_2BITr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ecc_intr_en_2bit))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_ECC_INTR_EN_2BITr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_2BITr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_ecc_intr_en_2bit))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_ECC_INTR_EN_2BITr BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_2BITr
#define RX_X4_ECC_INTR_EN_2BITr_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_2BITr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_2BITr_t RX_X4_ECC_INTR_EN_2BITr_t;
#define RX_X4_ECC_INTR_EN_2BITr_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_2BITr_CLR
#define RX_X4_ECC_INTR_EN_2BITr_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_2BITr_SET
#define RX_X4_ECC_INTR_EN_2BITr_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_2BITr_GET
#define RX_X4_ECC_INTR_EN_2BITr_DESKEW_MEM_2_2BIT_INT_ENf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_2BITr_DESKEW_MEM_2_2BIT_INT_ENf_GET
#define RX_X4_ECC_INTR_EN_2BITr_DESKEW_MEM_2_2BIT_INT_ENf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_2BITr_DESKEW_MEM_2_2BIT_INT_ENf_SET
#define RX_X4_ECC_INTR_EN_2BITr_DESKEW_MEM_1_2BIT_INT_ENf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_2BITr_DESKEW_MEM_1_2BIT_INT_ENf_GET
#define RX_X4_ECC_INTR_EN_2BITr_DESKEW_MEM_1_2BIT_INT_ENf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_2BITr_DESKEW_MEM_1_2BIT_INT_ENf_SET
#define RX_X4_ECC_INTR_EN_2BITr_DESKEW_MEM_0_2BIT_INT_ENf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_2BITr_DESKEW_MEM_0_2BIT_INT_ENf_GET
#define RX_X4_ECC_INTR_EN_2BITr_DESKEW_MEM_0_2BIT_INT_ENf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_2BITr_DESKEW_MEM_0_2BIT_INT_ENf_SET
#define RX_X4_ECC_INTR_EN_2BITr_CL91_BUFFER_BLK2_2BIT_INT_ENf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_2BITr_CL91_BUFFER_BLK2_2BIT_INT_ENf_GET
#define RX_X4_ECC_INTR_EN_2BITr_CL91_BUFFER_BLK2_2BIT_INT_ENf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_2BITr_CL91_BUFFER_BLK2_2BIT_INT_ENf_SET
#define RX_X4_ECC_INTR_EN_2BITr_CL91_BUFFER_BLK1_2BIT_INT_ENf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_2BITr_CL91_BUFFER_BLK1_2BIT_INT_ENf_GET
#define RX_X4_ECC_INTR_EN_2BITr_CL91_BUFFER_BLK1_2BIT_INT_ENf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_2BITr_CL91_BUFFER_BLK1_2BIT_INT_ENf_SET
#define RX_X4_ECC_INTR_EN_2BITr_CL91_BUFFER_BLK0_2BIT_INT_ENf_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_2BITr_CL91_BUFFER_BLK0_2BIT_INT_ENf_GET
#define RX_X4_ECC_INTR_EN_2BITr_CL91_BUFFER_BLK0_2BIT_INT_ENf_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_2BITr_CL91_BUFFER_BLK0_2BIT_INT_ENf_SET
#define READ_RX_X4_ECC_INTR_EN_2BITr BCMI_TSCF_GEN3_XGXS_READ_RX_X4_ECC_INTR_EN_2BITr
#define WRITE_RX_X4_ECC_INTR_EN_2BITr BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_ECC_INTR_EN_2BITr
#define MODIFY_RX_X4_ECC_INTR_EN_2BITr BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_ECC_INTR_EN_2BITr
#define READLN_RX_X4_ECC_INTR_EN_2BITr BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_ECC_INTR_EN_2BITr
#define WRITELN_RX_X4_ECC_INTR_EN_2BITr BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_ECC_INTR_EN_2BITr
#define WRITEALL_RX_X4_ECC_INTR_EN_2BITr BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_ECC_INTR_EN_2BITr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_INTR_EN_2BITr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_ECC_DIS_ECC_MEM
 * BLOCKS:   RX_X4_ECC
 * REGADDR:  0xc38a
 * DESC:     Disable ECC register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     DISABLE_ECC_CL91_BUFFER_BLK0 disable ECC check/generationThis bit should not be changed from 1 to 0 in the middle of the test
 *     DISABLE_ECC_CL91_BUFFER_BLK1 disable ECC check/generationThis bit should not be changed from 1 to 0 in the middle of the test
 *     DISABLE_ECC_CL91_BUFFER_BLK2 disable ECC check/generationThis bit should not be changed from 1 to 0 in the middle of the test
 *     DISABLE_ECC_DESKEW_MEM_0 disable ECC check/generationThis bit should not be changed from 1 to 0 in the middle of the test
 *     DISABLE_ECC_DESKEW_MEM_1 disable ECC check/generationThis bit should not be changed from 1 to 0 in the middle of the test
 *     DISABLE_ECC_DESKEW_MEM_2 disable ECC check/generationThis bit should not be changed from 1 to 0 in the middle of the test
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_DIS_ECC_MEMr (0x0000c38a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_DIS_ECC_MEMr_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_ECC_DIS_ECC_MEM.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_DIS_ECC_MEMr_s {
	uint32_t v[1];
	uint32_t rx_x4_ecc_dis_ecc_mem[1];
	uint32_t _rx_x4_ecc_dis_ecc_mem;
} BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_DIS_ECC_MEMr_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_DIS_ECC_MEMr_CLR(r) (r).rx_x4_ecc_dis_ecc_mem[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_DIS_ECC_MEMr_SET(r,d) (r).rx_x4_ecc_dis_ecc_mem[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_DIS_ECC_MEMr_GET(r) (r).rx_x4_ecc_dis_ecc_mem[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_DIS_ECC_MEMr_DISABLE_ECC_DESKEW_MEM_2f_GET(r) ((((r).rx_x4_ecc_dis_ecc_mem[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_DIS_ECC_MEMr_DISABLE_ECC_DESKEW_MEM_2f_SET(r,f) (r).rx_x4_ecc_dis_ecc_mem[0]=(((r).rx_x4_ecc_dis_ecc_mem[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_DIS_ECC_MEMr_DISABLE_ECC_DESKEW_MEM_1f_GET(r) ((((r).rx_x4_ecc_dis_ecc_mem[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_DIS_ECC_MEMr_DISABLE_ECC_DESKEW_MEM_1f_SET(r,f) (r).rx_x4_ecc_dis_ecc_mem[0]=(((r).rx_x4_ecc_dis_ecc_mem[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_DIS_ECC_MEMr_DISABLE_ECC_DESKEW_MEM_0f_GET(r) ((((r).rx_x4_ecc_dis_ecc_mem[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_DIS_ECC_MEMr_DISABLE_ECC_DESKEW_MEM_0f_SET(r,f) (r).rx_x4_ecc_dis_ecc_mem[0]=(((r).rx_x4_ecc_dis_ecc_mem[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_DIS_ECC_MEMr_DISABLE_ECC_CL91_BUFFER_BLK2f_GET(r) ((((r).rx_x4_ecc_dis_ecc_mem[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_DIS_ECC_MEMr_DISABLE_ECC_CL91_BUFFER_BLK2f_SET(r,f) (r).rx_x4_ecc_dis_ecc_mem[0]=(((r).rx_x4_ecc_dis_ecc_mem[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_DIS_ECC_MEMr_DISABLE_ECC_CL91_BUFFER_BLK1f_GET(r) ((((r).rx_x4_ecc_dis_ecc_mem[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_DIS_ECC_MEMr_DISABLE_ECC_CL91_BUFFER_BLK1f_SET(r,f) (r).rx_x4_ecc_dis_ecc_mem[0]=(((r).rx_x4_ecc_dis_ecc_mem[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_DIS_ECC_MEMr_DISABLE_ECC_CL91_BUFFER_BLK0f_GET(r) (((r).rx_x4_ecc_dis_ecc_mem[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_DIS_ECC_MEMr_DISABLE_ECC_CL91_BUFFER_BLK0f_SET(r,f) (r).rx_x4_ecc_dis_ecc_mem[0]=(((r).rx_x4_ecc_dis_ecc_mem[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_X4_ECC_DIS_ECC_MEM.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_ECC_DIS_ECC_MEMr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_DIS_ECC_MEMr,(_r._rx_x4_ecc_dis_ecc_mem))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_ECC_DIS_ECC_MEMr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_DIS_ECC_MEMr,(_r._rx_x4_ecc_dis_ecc_mem)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_ECC_DIS_ECC_MEMr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_DIS_ECC_MEMr,(_r._rx_x4_ecc_dis_ecc_mem))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_ECC_DIS_ECC_MEMr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_DIS_ECC_MEMr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ecc_dis_ecc_mem))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_ECC_DIS_ECC_MEMr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_DIS_ECC_MEMr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ecc_dis_ecc_mem))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_ECC_DIS_ECC_MEMr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_DIS_ECC_MEMr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_ecc_dis_ecc_mem))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_ECC_DIS_ECC_MEMr BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_DIS_ECC_MEMr
#define RX_X4_ECC_DIS_ECC_MEMr_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_DIS_ECC_MEMr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_DIS_ECC_MEMr_t RX_X4_ECC_DIS_ECC_MEMr_t;
#define RX_X4_ECC_DIS_ECC_MEMr_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_DIS_ECC_MEMr_CLR
#define RX_X4_ECC_DIS_ECC_MEMr_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_DIS_ECC_MEMr_SET
#define RX_X4_ECC_DIS_ECC_MEMr_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_DIS_ECC_MEMr_GET
#define RX_X4_ECC_DIS_ECC_MEMr_DISABLE_ECC_DESKEW_MEM_2f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_DIS_ECC_MEMr_DISABLE_ECC_DESKEW_MEM_2f_GET
#define RX_X4_ECC_DIS_ECC_MEMr_DISABLE_ECC_DESKEW_MEM_2f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_DIS_ECC_MEMr_DISABLE_ECC_DESKEW_MEM_2f_SET
#define RX_X4_ECC_DIS_ECC_MEMr_DISABLE_ECC_DESKEW_MEM_1f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_DIS_ECC_MEMr_DISABLE_ECC_DESKEW_MEM_1f_GET
#define RX_X4_ECC_DIS_ECC_MEMr_DISABLE_ECC_DESKEW_MEM_1f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_DIS_ECC_MEMr_DISABLE_ECC_DESKEW_MEM_1f_SET
#define RX_X4_ECC_DIS_ECC_MEMr_DISABLE_ECC_DESKEW_MEM_0f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_DIS_ECC_MEMr_DISABLE_ECC_DESKEW_MEM_0f_GET
#define RX_X4_ECC_DIS_ECC_MEMr_DISABLE_ECC_DESKEW_MEM_0f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_DIS_ECC_MEMr_DISABLE_ECC_DESKEW_MEM_0f_SET
#define RX_X4_ECC_DIS_ECC_MEMr_DISABLE_ECC_CL91_BUFFER_BLK2f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_DIS_ECC_MEMr_DISABLE_ECC_CL91_BUFFER_BLK2f_GET
#define RX_X4_ECC_DIS_ECC_MEMr_DISABLE_ECC_CL91_BUFFER_BLK2f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_DIS_ECC_MEMr_DISABLE_ECC_CL91_BUFFER_BLK2f_SET
#define RX_X4_ECC_DIS_ECC_MEMr_DISABLE_ECC_CL91_BUFFER_BLK1f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_DIS_ECC_MEMr_DISABLE_ECC_CL91_BUFFER_BLK1f_GET
#define RX_X4_ECC_DIS_ECC_MEMr_DISABLE_ECC_CL91_BUFFER_BLK1f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_DIS_ECC_MEMr_DISABLE_ECC_CL91_BUFFER_BLK1f_SET
#define RX_X4_ECC_DIS_ECC_MEMr_DISABLE_ECC_CL91_BUFFER_BLK0f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_DIS_ECC_MEMr_DISABLE_ECC_CL91_BUFFER_BLK0f_GET
#define RX_X4_ECC_DIS_ECC_MEMr_DISABLE_ECC_CL91_BUFFER_BLK0f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_DIS_ECC_MEMr_DISABLE_ECC_CL91_BUFFER_BLK0f_SET
#define READ_RX_X4_ECC_DIS_ECC_MEMr BCMI_TSCF_GEN3_XGXS_READ_RX_X4_ECC_DIS_ECC_MEMr
#define WRITE_RX_X4_ECC_DIS_ECC_MEMr BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_ECC_DIS_ECC_MEMr
#define MODIFY_RX_X4_ECC_DIS_ECC_MEMr BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_ECC_DIS_ECC_MEMr
#define READLN_RX_X4_ECC_DIS_ECC_MEMr BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_ECC_DIS_ECC_MEMr
#define WRITELN_RX_X4_ECC_DIS_ECC_MEMr BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_ECC_DIS_ECC_MEMr
#define WRITEALL_RX_X4_ECC_DIS_ECC_MEMr BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_ECC_DIS_ECC_MEMr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_DIS_ECC_MEMr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_ECC_CORRUPT
 * BLOCKS:   RX_X4_ECC
 * REGADDR:  0xc38b
 * DESC:     Corrupt ECC register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CORRUPT_ECC_CL91_BUFFER_BLK0 ECC error injection2'b01 - Inject 2-bit error on write data2'b10 - Inject 1-bit error on read data2'b11 - Inject 2-bit error on read data
 *     CORRUPT_ECC_CL91_BUFFER_BLK1 ECC error injection2'b01 - Inject 2-bit error on write data2'b10 - Inject 1-bit error on read data2'b11 - Inject 2-bit error on read data
 *     CORRUPT_ECC_CL91_BUFFER_BLK2 ECC error injection2'b01 - Inject 2-bit error on write data2'b10 - Inject 1-bit error on read data2'b11 - Inject 2-bit error on read data
 *     CORRUPT_ECC_DESKEW_MEM_0 ECC error injection2'b01 - Inject 2-bit error on write data2'b10 - Inject 1-bit error on read data2'b11 - Inject 2-bit error on read data
 *     CORRUPT_ECC_DESKEW_MEM_1 ECC error injection2'b01 - Inject 2-bit error on write data2'b10 - Inject 1-bit error on read data2'b11 - Inject 2-bit error on read data
 *     CORRUPT_ECC_DESKEW_MEM_2 ECC error injection2'b01 - Inject 2-bit error on write data2'b10 - Inject 1-bit error on read data2'b11 - Inject 2-bit error on read data
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_CORRUPTr (0x0000c38b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_CORRUPTr_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_ECC_CORRUPT.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_CORRUPTr_s {
	uint32_t v[1];
	uint32_t rx_x4_ecc_corrupt[1];
	uint32_t _rx_x4_ecc_corrupt;
} BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_CORRUPTr_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_CORRUPTr_CLR(r) (r).rx_x4_ecc_corrupt[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_CORRUPTr_SET(r,d) (r).rx_x4_ecc_corrupt[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_CORRUPTr_GET(r) (r).rx_x4_ecc_corrupt[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_CORRUPTr_CORRUPT_ECC_DESKEW_MEM_2f_GET(r) ((((r).rx_x4_ecc_corrupt[0]) >> 10) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_CORRUPTr_CORRUPT_ECC_DESKEW_MEM_2f_SET(r,f) (r).rx_x4_ecc_corrupt[0]=(((r).rx_x4_ecc_corrupt[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10)) | (3 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_CORRUPTr_CORRUPT_ECC_DESKEW_MEM_1f_GET(r) ((((r).rx_x4_ecc_corrupt[0]) >> 8) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_CORRUPTr_CORRUPT_ECC_DESKEW_MEM_1f_SET(r,f) (r).rx_x4_ecc_corrupt[0]=(((r).rx_x4_ecc_corrupt[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_CORRUPTr_CORRUPT_ECC_DESKEW_MEM_0f_GET(r) ((((r).rx_x4_ecc_corrupt[0]) >> 6) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_CORRUPTr_CORRUPT_ECC_DESKEW_MEM_0f_SET(r,f) (r).rx_x4_ecc_corrupt[0]=(((r).rx_x4_ecc_corrupt[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6)) | (3 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_CORRUPTr_CORRUPT_ECC_CL91_BUFFER_BLK2f_GET(r) ((((r).rx_x4_ecc_corrupt[0]) >> 4) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_CORRUPTr_CORRUPT_ECC_CL91_BUFFER_BLK2f_SET(r,f) (r).rx_x4_ecc_corrupt[0]=(((r).rx_x4_ecc_corrupt[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_CORRUPTr_CORRUPT_ECC_CL91_BUFFER_BLK1f_GET(r) ((((r).rx_x4_ecc_corrupt[0]) >> 2) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_CORRUPTr_CORRUPT_ECC_CL91_BUFFER_BLK1f_SET(r,f) (r).rx_x4_ecc_corrupt[0]=(((r).rx_x4_ecc_corrupt[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2)) | (3 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_CORRUPTr_CORRUPT_ECC_CL91_BUFFER_BLK0f_GET(r) (((r).rx_x4_ecc_corrupt[0]) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_CORRUPTr_CORRUPT_ECC_CL91_BUFFER_BLK0f_SET(r,f) (r).rx_x4_ecc_corrupt[0]=(((r).rx_x4_ecc_corrupt[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access RX_X4_ECC_CORRUPT.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_ECC_CORRUPTr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_CORRUPTr,(_r._rx_x4_ecc_corrupt))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_ECC_CORRUPTr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_CORRUPTr,(_r._rx_x4_ecc_corrupt)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_ECC_CORRUPTr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_CORRUPTr,(_r._rx_x4_ecc_corrupt))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_ECC_CORRUPTr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_CORRUPTr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ecc_corrupt))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_ECC_CORRUPTr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_CORRUPTr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ecc_corrupt))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_ECC_CORRUPTr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_CORRUPTr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_ecc_corrupt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_ECC_CORRUPTr BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_CORRUPTr
#define RX_X4_ECC_CORRUPTr_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_CORRUPTr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_CORRUPTr_t RX_X4_ECC_CORRUPTr_t;
#define RX_X4_ECC_CORRUPTr_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_CORRUPTr_CLR
#define RX_X4_ECC_CORRUPTr_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_CORRUPTr_SET
#define RX_X4_ECC_CORRUPTr_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_CORRUPTr_GET
#define RX_X4_ECC_CORRUPTr_CORRUPT_ECC_DESKEW_MEM_2f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_CORRUPTr_CORRUPT_ECC_DESKEW_MEM_2f_GET
#define RX_X4_ECC_CORRUPTr_CORRUPT_ECC_DESKEW_MEM_2f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_CORRUPTr_CORRUPT_ECC_DESKEW_MEM_2f_SET
#define RX_X4_ECC_CORRUPTr_CORRUPT_ECC_DESKEW_MEM_1f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_CORRUPTr_CORRUPT_ECC_DESKEW_MEM_1f_GET
#define RX_X4_ECC_CORRUPTr_CORRUPT_ECC_DESKEW_MEM_1f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_CORRUPTr_CORRUPT_ECC_DESKEW_MEM_1f_SET
#define RX_X4_ECC_CORRUPTr_CORRUPT_ECC_DESKEW_MEM_0f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_CORRUPTr_CORRUPT_ECC_DESKEW_MEM_0f_GET
#define RX_X4_ECC_CORRUPTr_CORRUPT_ECC_DESKEW_MEM_0f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_CORRUPTr_CORRUPT_ECC_DESKEW_MEM_0f_SET
#define RX_X4_ECC_CORRUPTr_CORRUPT_ECC_CL91_BUFFER_BLK2f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_CORRUPTr_CORRUPT_ECC_CL91_BUFFER_BLK2f_GET
#define RX_X4_ECC_CORRUPTr_CORRUPT_ECC_CL91_BUFFER_BLK2f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_CORRUPTr_CORRUPT_ECC_CL91_BUFFER_BLK2f_SET
#define RX_X4_ECC_CORRUPTr_CORRUPT_ECC_CL91_BUFFER_BLK1f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_CORRUPTr_CORRUPT_ECC_CL91_BUFFER_BLK1f_GET
#define RX_X4_ECC_CORRUPTr_CORRUPT_ECC_CL91_BUFFER_BLK1f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_CORRUPTr_CORRUPT_ECC_CL91_BUFFER_BLK1f_SET
#define RX_X4_ECC_CORRUPTr_CORRUPT_ECC_CL91_BUFFER_BLK0f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_CORRUPTr_CORRUPT_ECC_CL91_BUFFER_BLK0f_GET
#define RX_X4_ECC_CORRUPTr_CORRUPT_ECC_CL91_BUFFER_BLK0f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_CORRUPTr_CORRUPT_ECC_CL91_BUFFER_BLK0f_SET
#define READ_RX_X4_ECC_CORRUPTr BCMI_TSCF_GEN3_XGXS_READ_RX_X4_ECC_CORRUPTr
#define WRITE_RX_X4_ECC_CORRUPTr BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_ECC_CORRUPTr
#define MODIFY_RX_X4_ECC_CORRUPTr BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_ECC_CORRUPTr
#define READLN_RX_X4_ECC_CORRUPTr BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_ECC_CORRUPTr
#define WRITELN_RX_X4_ECC_CORRUPTr BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_ECC_CORRUPTr
#define WRITEALL_RX_X4_ECC_CORRUPTr BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_ECC_CORRUPTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_ECC_CORRUPTr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_RX_DESKEW_BASE_TS_CALC0
 * BLOCKS:   RX_X4_STATUS6
 * REGADDR:  0xc390
 * DESC:     Rx Base Timestamp status(Per Virtual lane) for Deskew
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     BASE_TS_SUB_NS_0 Indicates the sub-nano part of the Rx base timestamp used for AM timestamp calculation.On Deskew event, this deskew status information is provided for each Virtual Lane using multiple copies of this register as follows,In 100G MLD mode(Port0) - VL0(1st copy)/VL5(2nd copy)/VL10(3rd copy)/VL15(4th copy)In 40G MLD mode over 2 lanes(Port0) - VL0(1st copy)/VL1(2nd copy)In 40G MLD mode over 2 lanes(Port2) - VL0(3rd copy)/VL1(4th copy)In 40G MLD mode over 4 lanes(Port0) - VL0(1st copy)/VL1(2nd copy)/VL2(3rd copy)/VL3(4th copy)In 20G MLD mode over 2 lanes(Port0) - VL0(1st copy)/VL1(2nd copy)In 20G MLD mode over 2 lanes(Port2) - VL0(3rd copy)/VL1(4th copy)
 *     BASE_TS_NS_0     Indicates the Rx base timestamp(in nano seconds) for AM timestamp calculation.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC0r (0x0000c390 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC0r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_RX_DESKEW_BASE_TS_CALC0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC0r_s {
	uint32_t v[1];
	uint32_t rx_x4_rx_deskew_base_ts_calc0[1];
	uint32_t _rx_x4_rx_deskew_base_ts_calc0;
} BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC0r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC0r_CLR(r) (r).rx_x4_rx_deskew_base_ts_calc0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC0r_SET(r,d) (r).rx_x4_rx_deskew_base_ts_calc0[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC0r_GET(r) (r).rx_x4_rx_deskew_base_ts_calc0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC0r_BASE_TS_NS_0f_GET(r) ((((r).rx_x4_rx_deskew_base_ts_calc0[0]) >> 4) & 0xfff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC0r_BASE_TS_NS_0f_SET(r,f) (r).rx_x4_rx_deskew_base_ts_calc0[0]=(((r).rx_x4_rx_deskew_base_ts_calc0[0] & ~((uint32_t)0xfff << 4)) | ((((uint32_t)f) & 0xfff) << 4)) | (4095 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC0r_BASE_TS_SUB_NS_0f_GET(r) (((r).rx_x4_rx_deskew_base_ts_calc0[0]) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC0r_BASE_TS_SUB_NS_0f_SET(r,f) (r).rx_x4_rx_deskew_base_ts_calc0[0]=(((r).rx_x4_rx_deskew_base_ts_calc0[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access RX_X4_RX_DESKEW_BASE_TS_CALC0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_RX_DESKEW_BASE_TS_CALC0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC0r,(_r._rx_x4_rx_deskew_base_ts_calc0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_RX_DESKEW_BASE_TS_CALC0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC0r,(_r._rx_x4_rx_deskew_base_ts_calc0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_RX_DESKEW_BASE_TS_CALC0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC0r,(_r._rx_x4_rx_deskew_base_ts_calc0))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_RX_DESKEW_BASE_TS_CALC0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_rx_deskew_base_ts_calc0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_RX_DESKEW_BASE_TS_CALC0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_rx_deskew_base_ts_calc0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_RX_DESKEW_BASE_TS_CALC0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_rx_deskew_base_ts_calc0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_RX_DESKEW_BASE_TS_CALC0r BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC0r
#define RX_X4_RX_DESKEW_BASE_TS_CALC0r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC0r_t RX_X4_RX_DESKEW_BASE_TS_CALC0r_t;
#define RX_X4_RX_DESKEW_BASE_TS_CALC0r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC0r_CLR
#define RX_X4_RX_DESKEW_BASE_TS_CALC0r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC0r_SET
#define RX_X4_RX_DESKEW_BASE_TS_CALC0r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC0r_GET
#define RX_X4_RX_DESKEW_BASE_TS_CALC0r_BASE_TS_NS_0f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC0r_BASE_TS_NS_0f_GET
#define RX_X4_RX_DESKEW_BASE_TS_CALC0r_BASE_TS_NS_0f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC0r_BASE_TS_NS_0f_SET
#define RX_X4_RX_DESKEW_BASE_TS_CALC0r_BASE_TS_SUB_NS_0f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC0r_BASE_TS_SUB_NS_0f_GET
#define RX_X4_RX_DESKEW_BASE_TS_CALC0r_BASE_TS_SUB_NS_0f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC0r_BASE_TS_SUB_NS_0f_SET
#define READ_RX_X4_RX_DESKEW_BASE_TS_CALC0r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_RX_DESKEW_BASE_TS_CALC0r
#define WRITE_RX_X4_RX_DESKEW_BASE_TS_CALC0r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_RX_DESKEW_BASE_TS_CALC0r
#define MODIFY_RX_X4_RX_DESKEW_BASE_TS_CALC0r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_RX_DESKEW_BASE_TS_CALC0r
#define READLN_RX_X4_RX_DESKEW_BASE_TS_CALC0r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_RX_DESKEW_BASE_TS_CALC0r
#define WRITELN_RX_X4_RX_DESKEW_BASE_TS_CALC0r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_RX_DESKEW_BASE_TS_CALC0r
#define WRITEALL_RX_X4_RX_DESKEW_BASE_TS_CALC0r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_RX_DESKEW_BASE_TS_CALC0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_RX_DESKEW_BASE_TS_ADJ0
 * BLOCKS:   RX_X4_STATUS6
 * REGADDR:  0xc391
 * DESC:     Rx Base Timestamp Adjust status(Per Virtual lane) for Deskew
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     BIT_POS_ADJ_0    Indicates the Bit Position Adjustment that needs to be applied to the Rx base timestamp to extrapolate the AM Marker timestamp.This field is represented as a 2's complement value, as the bit position adjustment can be negativeOn Deskew event, this deskew status information is provided for each Virtual Lane using multiple copies of this register as follows,In 100G MLD mode(Port0) - VL0(1st copy)/VL5(2nd copy)/VL10(3rd copy)/VL15(4th copy)In 40G MLD mode over 2 lanes(Port0) - VL0(1st copy)/VL1(2nd copy)In 40G MLD mode over 2 lanes(Port2) - VL0(3rd copy)/VL1(4th copy)In 40G MLD mode over 4 lanes(Port0) - VL0(1st copy)/VL1(2nd copy)/VL2(3rd copy)/VL3(4th copy)In 20G MLD mode over 2 lanes(Port0) - VL0(1st copy)/VL1(2nd copy)In 20G MLD mode over 2 lanes(Port2) - VL0(3rd copy)/VL1(4th copy)
 *     BASE_TS_FCLK_ADJ_0 Indicates the Glas Adjustment or FCLK Adjust that needs to be applied to the Rx base timestamp to extrapolate the AM Marker timestamp.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ0r (0x0000c391 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ0r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_RX_DESKEW_BASE_TS_ADJ0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ0r_s {
	uint32_t v[1];
	uint32_t rx_x4_rx_deskew_base_ts_adj0[1];
	uint32_t _rx_x4_rx_deskew_base_ts_adj0;
} BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ0r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ0r_CLR(r) (r).rx_x4_rx_deskew_base_ts_adj0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ0r_SET(r,d) (r).rx_x4_rx_deskew_base_ts_adj0[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ0r_GET(r) (r).rx_x4_rx_deskew_base_ts_adj0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ0r_BASE_TS_FCLK_ADJ_0f_GET(r) ((((r).rx_x4_rx_deskew_base_ts_adj0[0]) >> 9) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ0r_BASE_TS_FCLK_ADJ_0f_SET(r,f) (r).rx_x4_rx_deskew_base_ts_adj0[0]=(((r).rx_x4_rx_deskew_base_ts_adj0[0] & ~((uint32_t)0x1f << 9)) | ((((uint32_t)f) & 0x1f) << 9)) | (31 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ0r_BIT_POS_ADJ_0f_GET(r) (((r).rx_x4_rx_deskew_base_ts_adj0[0]) & 0x1ff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ0r_BIT_POS_ADJ_0f_SET(r,f) (r).rx_x4_rx_deskew_base_ts_adj0[0]=(((r).rx_x4_rx_deskew_base_ts_adj0[0] & ~((uint32_t)0x1ff)) | (((uint32_t)f) & 0x1ff)) | (0x1ff << 16)

/*
 * These macros can be used to access RX_X4_RX_DESKEW_BASE_TS_ADJ0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_RX_DESKEW_BASE_TS_ADJ0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ0r,(_r._rx_x4_rx_deskew_base_ts_adj0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_RX_DESKEW_BASE_TS_ADJ0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ0r,(_r._rx_x4_rx_deskew_base_ts_adj0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_RX_DESKEW_BASE_TS_ADJ0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ0r,(_r._rx_x4_rx_deskew_base_ts_adj0))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_RX_DESKEW_BASE_TS_ADJ0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_rx_deskew_base_ts_adj0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_RX_DESKEW_BASE_TS_ADJ0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_rx_deskew_base_ts_adj0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_RX_DESKEW_BASE_TS_ADJ0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_rx_deskew_base_ts_adj0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_RX_DESKEW_BASE_TS_ADJ0r BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ0r
#define RX_X4_RX_DESKEW_BASE_TS_ADJ0r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ0r_t RX_X4_RX_DESKEW_BASE_TS_ADJ0r_t;
#define RX_X4_RX_DESKEW_BASE_TS_ADJ0r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ0r_CLR
#define RX_X4_RX_DESKEW_BASE_TS_ADJ0r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ0r_SET
#define RX_X4_RX_DESKEW_BASE_TS_ADJ0r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ0r_GET
#define RX_X4_RX_DESKEW_BASE_TS_ADJ0r_BASE_TS_FCLK_ADJ_0f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ0r_BASE_TS_FCLK_ADJ_0f_GET
#define RX_X4_RX_DESKEW_BASE_TS_ADJ0r_BASE_TS_FCLK_ADJ_0f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ0r_BASE_TS_FCLK_ADJ_0f_SET
#define RX_X4_RX_DESKEW_BASE_TS_ADJ0r_BIT_POS_ADJ_0f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ0r_BIT_POS_ADJ_0f_GET
#define RX_X4_RX_DESKEW_BASE_TS_ADJ0r_BIT_POS_ADJ_0f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ0r_BIT_POS_ADJ_0f_SET
#define READ_RX_X4_RX_DESKEW_BASE_TS_ADJ0r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_RX_DESKEW_BASE_TS_ADJ0r
#define WRITE_RX_X4_RX_DESKEW_BASE_TS_ADJ0r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_RX_DESKEW_BASE_TS_ADJ0r
#define MODIFY_RX_X4_RX_DESKEW_BASE_TS_ADJ0r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_RX_DESKEW_BASE_TS_ADJ0r
#define READLN_RX_X4_RX_DESKEW_BASE_TS_ADJ0r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_RX_DESKEW_BASE_TS_ADJ0r
#define WRITELN_RX_X4_RX_DESKEW_BASE_TS_ADJ0r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_RX_DESKEW_BASE_TS_ADJ0r
#define WRITEALL_RX_X4_RX_DESKEW_BASE_TS_ADJ0r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_RX_DESKEW_BASE_TS_ADJ0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_RX_DESKEW_AM_OFFS0
 * BLOCKS:   RX_X4_STATUS6
 * REGADDR:  0xc392
 * DESC:     Rx AM Block Offset status(Per Virtual lane) for Deskew
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     AM_BLOCK_OFFSET_0 Indicates the block offset from the block that carries the Rx base timestamp to the AM block.The block size is 66bits for CL82 ports that run with or without CL74 FEC.The block size is 60 for CL82 ports that run with CL91.On Deskew event, this deskew status information is provided for each Virtual Lane using multiple copies of this register as follows,In 100G MLD mode(Port0) - VL0(1st copy)/VL5(2nd copy)/VL10(3rd copy)/VL15(4th copy)In 40G MLD mode over 2 lanes(Port0) - VL0(1st copy)/VL1(2nd copy)In 40G MLD mode over 2 lanes(Port2) - VL0(3rd copy)/VL1(4th copy)In 40G MLD mode over 4 lanes(Port0) - VL0(1st copy)/VL1(2nd copy)/VL2(3rd copy)/VL3(4th copy)In 20G MLD mode over 2 lanes(Port0) - VL0(1st copy)/VL1(2nd copy)In 20G MLD mode over 2 lanes(Port2) - VL0(3rd copy)/VL1(4th copy)After DESKEW event, The final timestamp of the AM on each virtual lane is calculated as followsAM_timestamp_vl[n]  = Rx_base_timestamp{ns, sub_ns}+/- ((Bit_position_offset - bit_muxed_psl_lane_num)*num_bit_muxed_lanes*mod_ui_value)+ (bit_muxed_psl_lane_num*mod_ui_value)+ (Fclk_adjust*fclk_period)+ (AM_block_offset * block_size * num_bit_muxed_lanes*mod_ui_value)-	(Cl74_fec_block_number * num_bit_muxed_lanes*mod_ui_value) (applicable only for CL74)Where Num_bit_muxed_lanes =  1/2/5 based on the number of pseudo logical lanes bit-muxed onto 1 physical lanebit_muxed_psl_lane_num = Lane number of the pseudo logical lane within a bit muxed physical laneMod_ui_value = vco_clk_period * os_mode
 *     CL74_FEC_BLOCK_NUM_0 Indicates the CL74 FEC block number of the AM block within the CL74 codeword. Need to be used only for ports that employ CL74
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS0r (0x0000c392 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS0r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_RX_DESKEW_AM_OFFS0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS0r_s {
	uint32_t v[1];
	uint32_t rx_x4_rx_deskew_am_offs0[1];
	uint32_t _rx_x4_rx_deskew_am_offs0;
} BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS0r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS0r_CLR(r) (r).rx_x4_rx_deskew_am_offs0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS0r_SET(r,d) (r).rx_x4_rx_deskew_am_offs0[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS0r_GET(r) (r).rx_x4_rx_deskew_am_offs0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS0r_CL74_FEC_BLOCK_NUM_0f_GET(r) ((((r).rx_x4_rx_deskew_am_offs0[0]) >> 6) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS0r_CL74_FEC_BLOCK_NUM_0f_SET(r,f) (r).rx_x4_rx_deskew_am_offs0[0]=(((r).rx_x4_rx_deskew_am_offs0[0] & ~((uint32_t)0x1f << 6)) | ((((uint32_t)f) & 0x1f) << 6)) | (31 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS0r_AM_BLOCK_OFFSET_0f_GET(r) (((r).rx_x4_rx_deskew_am_offs0[0]) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS0r_AM_BLOCK_OFFSET_0f_SET(r,f) (r).rx_x4_rx_deskew_am_offs0[0]=(((r).rx_x4_rx_deskew_am_offs0[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access RX_X4_RX_DESKEW_AM_OFFS0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_RX_DESKEW_AM_OFFS0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS0r,(_r._rx_x4_rx_deskew_am_offs0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_RX_DESKEW_AM_OFFS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS0r,(_r._rx_x4_rx_deskew_am_offs0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_RX_DESKEW_AM_OFFS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS0r,(_r._rx_x4_rx_deskew_am_offs0))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_RX_DESKEW_AM_OFFS0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_rx_deskew_am_offs0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_RX_DESKEW_AM_OFFS0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_rx_deskew_am_offs0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_RX_DESKEW_AM_OFFS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_rx_deskew_am_offs0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_RX_DESKEW_AM_OFFS0r BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS0r
#define RX_X4_RX_DESKEW_AM_OFFS0r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS0r_t RX_X4_RX_DESKEW_AM_OFFS0r_t;
#define RX_X4_RX_DESKEW_AM_OFFS0r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS0r_CLR
#define RX_X4_RX_DESKEW_AM_OFFS0r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS0r_SET
#define RX_X4_RX_DESKEW_AM_OFFS0r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS0r_GET
#define RX_X4_RX_DESKEW_AM_OFFS0r_CL74_FEC_BLOCK_NUM_0f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS0r_CL74_FEC_BLOCK_NUM_0f_GET
#define RX_X4_RX_DESKEW_AM_OFFS0r_CL74_FEC_BLOCK_NUM_0f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS0r_CL74_FEC_BLOCK_NUM_0f_SET
#define RX_X4_RX_DESKEW_AM_OFFS0r_AM_BLOCK_OFFSET_0f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS0r_AM_BLOCK_OFFSET_0f_GET
#define RX_X4_RX_DESKEW_AM_OFFS0r_AM_BLOCK_OFFSET_0f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS0r_AM_BLOCK_OFFSET_0f_SET
#define READ_RX_X4_RX_DESKEW_AM_OFFS0r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_RX_DESKEW_AM_OFFS0r
#define WRITE_RX_X4_RX_DESKEW_AM_OFFS0r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_RX_DESKEW_AM_OFFS0r
#define MODIFY_RX_X4_RX_DESKEW_AM_OFFS0r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_RX_DESKEW_AM_OFFS0r
#define READLN_RX_X4_RX_DESKEW_AM_OFFS0r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_RX_DESKEW_AM_OFFS0r
#define WRITELN_RX_X4_RX_DESKEW_AM_OFFS0r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_RX_DESKEW_AM_OFFS0r
#define WRITEALL_RX_X4_RX_DESKEW_AM_OFFS0r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_RX_DESKEW_AM_OFFS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_RX_DESKEW_BASE_TS_CALC1
 * BLOCKS:   RX_X4_STATUS6
 * REGADDR:  0xc393
 * DESC:     Rx Base Timestamp status(Per Virtual lane) for Deskew
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     BASE_TS_SUB_NS_1 Indicates the sub-nano part of the Rx base timestamp used for AM timestamp calculation.On Deskew event, this deskew status information is provided for each Virtual Lane using multiple copies of this register as follows,In 100G MLD mode(Port0) - VL1(1st copy)/VL6(2nd copy)/VL11(3rd copy)/VL16(4th copy)In 40G MLD mode over 2 lanes(Port0) - VL2(1st copy)/VL3(2nd copy)In 40G MLD mode over 2 lanes(Port2) - VL2(3rd copy)/VL3(4th copy)
 *     BASE_TS_NS_1     Indicates the Rx base timestamp(in nano seconds) for AM timestamp calculation.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC1r (0x0000c393 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC1r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_RX_DESKEW_BASE_TS_CALC1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC1r_s {
	uint32_t v[1];
	uint32_t rx_x4_rx_deskew_base_ts_calc1[1];
	uint32_t _rx_x4_rx_deskew_base_ts_calc1;
} BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC1r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC1r_CLR(r) (r).rx_x4_rx_deskew_base_ts_calc1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC1r_SET(r,d) (r).rx_x4_rx_deskew_base_ts_calc1[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC1r_GET(r) (r).rx_x4_rx_deskew_base_ts_calc1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC1r_BASE_TS_NS_1f_GET(r) ((((r).rx_x4_rx_deskew_base_ts_calc1[0]) >> 4) & 0xfff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC1r_BASE_TS_NS_1f_SET(r,f) (r).rx_x4_rx_deskew_base_ts_calc1[0]=(((r).rx_x4_rx_deskew_base_ts_calc1[0] & ~((uint32_t)0xfff << 4)) | ((((uint32_t)f) & 0xfff) << 4)) | (4095 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC1r_BASE_TS_SUB_NS_1f_GET(r) (((r).rx_x4_rx_deskew_base_ts_calc1[0]) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC1r_BASE_TS_SUB_NS_1f_SET(r,f) (r).rx_x4_rx_deskew_base_ts_calc1[0]=(((r).rx_x4_rx_deskew_base_ts_calc1[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access RX_X4_RX_DESKEW_BASE_TS_CALC1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_RX_DESKEW_BASE_TS_CALC1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC1r,(_r._rx_x4_rx_deskew_base_ts_calc1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_RX_DESKEW_BASE_TS_CALC1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC1r,(_r._rx_x4_rx_deskew_base_ts_calc1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_RX_DESKEW_BASE_TS_CALC1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC1r,(_r._rx_x4_rx_deskew_base_ts_calc1))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_RX_DESKEW_BASE_TS_CALC1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_rx_deskew_base_ts_calc1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_RX_DESKEW_BASE_TS_CALC1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_rx_deskew_base_ts_calc1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_RX_DESKEW_BASE_TS_CALC1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_rx_deskew_base_ts_calc1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_RX_DESKEW_BASE_TS_CALC1r BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC1r
#define RX_X4_RX_DESKEW_BASE_TS_CALC1r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC1r_t RX_X4_RX_DESKEW_BASE_TS_CALC1r_t;
#define RX_X4_RX_DESKEW_BASE_TS_CALC1r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC1r_CLR
#define RX_X4_RX_DESKEW_BASE_TS_CALC1r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC1r_SET
#define RX_X4_RX_DESKEW_BASE_TS_CALC1r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC1r_GET
#define RX_X4_RX_DESKEW_BASE_TS_CALC1r_BASE_TS_NS_1f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC1r_BASE_TS_NS_1f_GET
#define RX_X4_RX_DESKEW_BASE_TS_CALC1r_BASE_TS_NS_1f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC1r_BASE_TS_NS_1f_SET
#define RX_X4_RX_DESKEW_BASE_TS_CALC1r_BASE_TS_SUB_NS_1f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC1r_BASE_TS_SUB_NS_1f_GET
#define RX_X4_RX_DESKEW_BASE_TS_CALC1r_BASE_TS_SUB_NS_1f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC1r_BASE_TS_SUB_NS_1f_SET
#define READ_RX_X4_RX_DESKEW_BASE_TS_CALC1r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_RX_DESKEW_BASE_TS_CALC1r
#define WRITE_RX_X4_RX_DESKEW_BASE_TS_CALC1r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_RX_DESKEW_BASE_TS_CALC1r
#define MODIFY_RX_X4_RX_DESKEW_BASE_TS_CALC1r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_RX_DESKEW_BASE_TS_CALC1r
#define READLN_RX_X4_RX_DESKEW_BASE_TS_CALC1r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_RX_DESKEW_BASE_TS_CALC1r
#define WRITELN_RX_X4_RX_DESKEW_BASE_TS_CALC1r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_RX_DESKEW_BASE_TS_CALC1r
#define WRITEALL_RX_X4_RX_DESKEW_BASE_TS_CALC1r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_RX_DESKEW_BASE_TS_CALC1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_RX_DESKEW_BASE_TS_ADJ1
 * BLOCKS:   RX_X4_STATUS6
 * REGADDR:  0xc394
 * DESC:     Rx Base Timestamp Adjust status(Per Virtual lane) for Deskew
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     BIT_POS_ADJ_1    Indicates the Bit Position Adjustment that needs to be applied to the Rx base timestamp to extrapolate the AM Marker timestamp.This field is represented as a 2's complement value, as the bit position adjustment can be negativeOn Deskew event, this deskew status information is provided for each Virtual Lane using multiple copies of this register as follows,In 100G MLD mode(Port0) - VL1(1st copy)/VL6(2nd copy)/VL11(3rd copy)/VL16(4th copy)In 40G MLD mode over 2 lanes(Port0) - VL2(1st copy)/VL3(2nd copy)In 40G MLD mode over 2 lanes(Port2) - VL2(3rd copy)/VL3(4th copy)
 *     BASE_TS_FCLK_ADJ_1 Indicates the Glas Adjustment or FCLK Adjust that needs to be applied to the Rx base timestamp to extrapolate the AM Marker timestamp.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ1r (0x0000c394 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ1r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_RX_DESKEW_BASE_TS_ADJ1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ1r_s {
	uint32_t v[1];
	uint32_t rx_x4_rx_deskew_base_ts_adj1[1];
	uint32_t _rx_x4_rx_deskew_base_ts_adj1;
} BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ1r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ1r_CLR(r) (r).rx_x4_rx_deskew_base_ts_adj1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ1r_SET(r,d) (r).rx_x4_rx_deskew_base_ts_adj1[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ1r_GET(r) (r).rx_x4_rx_deskew_base_ts_adj1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ1r_BASE_TS_FCLK_ADJ_1f_GET(r) ((((r).rx_x4_rx_deskew_base_ts_adj1[0]) >> 9) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ1r_BASE_TS_FCLK_ADJ_1f_SET(r,f) (r).rx_x4_rx_deskew_base_ts_adj1[0]=(((r).rx_x4_rx_deskew_base_ts_adj1[0] & ~((uint32_t)0x1f << 9)) | ((((uint32_t)f) & 0x1f) << 9)) | (31 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ1r_BIT_POS_ADJ_1f_GET(r) (((r).rx_x4_rx_deskew_base_ts_adj1[0]) & 0x1ff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ1r_BIT_POS_ADJ_1f_SET(r,f) (r).rx_x4_rx_deskew_base_ts_adj1[0]=(((r).rx_x4_rx_deskew_base_ts_adj1[0] & ~((uint32_t)0x1ff)) | (((uint32_t)f) & 0x1ff)) | (0x1ff << 16)

/*
 * These macros can be used to access RX_X4_RX_DESKEW_BASE_TS_ADJ1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_RX_DESKEW_BASE_TS_ADJ1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ1r,(_r._rx_x4_rx_deskew_base_ts_adj1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_RX_DESKEW_BASE_TS_ADJ1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ1r,(_r._rx_x4_rx_deskew_base_ts_adj1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_RX_DESKEW_BASE_TS_ADJ1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ1r,(_r._rx_x4_rx_deskew_base_ts_adj1))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_RX_DESKEW_BASE_TS_ADJ1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_rx_deskew_base_ts_adj1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_RX_DESKEW_BASE_TS_ADJ1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_rx_deskew_base_ts_adj1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_RX_DESKEW_BASE_TS_ADJ1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_rx_deskew_base_ts_adj1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_RX_DESKEW_BASE_TS_ADJ1r BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ1r
#define RX_X4_RX_DESKEW_BASE_TS_ADJ1r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ1r_t RX_X4_RX_DESKEW_BASE_TS_ADJ1r_t;
#define RX_X4_RX_DESKEW_BASE_TS_ADJ1r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ1r_CLR
#define RX_X4_RX_DESKEW_BASE_TS_ADJ1r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ1r_SET
#define RX_X4_RX_DESKEW_BASE_TS_ADJ1r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ1r_GET
#define RX_X4_RX_DESKEW_BASE_TS_ADJ1r_BASE_TS_FCLK_ADJ_1f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ1r_BASE_TS_FCLK_ADJ_1f_GET
#define RX_X4_RX_DESKEW_BASE_TS_ADJ1r_BASE_TS_FCLK_ADJ_1f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ1r_BASE_TS_FCLK_ADJ_1f_SET
#define RX_X4_RX_DESKEW_BASE_TS_ADJ1r_BIT_POS_ADJ_1f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ1r_BIT_POS_ADJ_1f_GET
#define RX_X4_RX_DESKEW_BASE_TS_ADJ1r_BIT_POS_ADJ_1f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ1r_BIT_POS_ADJ_1f_SET
#define READ_RX_X4_RX_DESKEW_BASE_TS_ADJ1r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_RX_DESKEW_BASE_TS_ADJ1r
#define WRITE_RX_X4_RX_DESKEW_BASE_TS_ADJ1r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_RX_DESKEW_BASE_TS_ADJ1r
#define MODIFY_RX_X4_RX_DESKEW_BASE_TS_ADJ1r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_RX_DESKEW_BASE_TS_ADJ1r
#define READLN_RX_X4_RX_DESKEW_BASE_TS_ADJ1r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_RX_DESKEW_BASE_TS_ADJ1r
#define WRITELN_RX_X4_RX_DESKEW_BASE_TS_ADJ1r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_RX_DESKEW_BASE_TS_ADJ1r
#define WRITEALL_RX_X4_RX_DESKEW_BASE_TS_ADJ1r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_RX_DESKEW_BASE_TS_ADJ1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_RX_DESKEW_AM_OFFS1
 * BLOCKS:   RX_X4_STATUS6
 * REGADDR:  0xc395
 * DESC:     Rx AM Block Offset status(Per Virtual lane) for Deskew
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     AM_BLOCK_OFFSET_1 Indicates the block offset from the block that carries the Rx base timestamp to the AM block.The block size is 66bits for CL82 ports that run with or without CL74 FEC.The block size is 60 for CL82 ports that run with CL91.On Deskew event, this deskew status information is provided for each Virtual Lane using multiple copies of this register as follows,In 100G MLD mode(Port0) - VL1(1st copy)/VL6(2nd copy)/VL11(3rd copy)/VL16(4th copy)In 40G MLD mode over 2 lanes(Port0) - VL2(1st copy)/VL3(2nd copy)In 40G MLD mode over 2 lanes(Port2) - VL2(3rd copy)/VL3(4th copy)
 *     CL74_FEC_BLOCK_NUM_1 Indicates the CL74 FEC block number of the AM block within the CL74 codeword. Need to be used only for ports that employ CL74
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS1r (0x0000c395 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS1r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_RX_DESKEW_AM_OFFS1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS1r_s {
	uint32_t v[1];
	uint32_t rx_x4_rx_deskew_am_offs1[1];
	uint32_t _rx_x4_rx_deskew_am_offs1;
} BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS1r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS1r_CLR(r) (r).rx_x4_rx_deskew_am_offs1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS1r_SET(r,d) (r).rx_x4_rx_deskew_am_offs1[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS1r_GET(r) (r).rx_x4_rx_deskew_am_offs1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS1r_CL74_FEC_BLOCK_NUM_1f_GET(r) ((((r).rx_x4_rx_deskew_am_offs1[0]) >> 6) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS1r_CL74_FEC_BLOCK_NUM_1f_SET(r,f) (r).rx_x4_rx_deskew_am_offs1[0]=(((r).rx_x4_rx_deskew_am_offs1[0] & ~((uint32_t)0x1f << 6)) | ((((uint32_t)f) & 0x1f) << 6)) | (31 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS1r_AM_BLOCK_OFFSET_1f_GET(r) (((r).rx_x4_rx_deskew_am_offs1[0]) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS1r_AM_BLOCK_OFFSET_1f_SET(r,f) (r).rx_x4_rx_deskew_am_offs1[0]=(((r).rx_x4_rx_deskew_am_offs1[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access RX_X4_RX_DESKEW_AM_OFFS1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_RX_DESKEW_AM_OFFS1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS1r,(_r._rx_x4_rx_deskew_am_offs1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_RX_DESKEW_AM_OFFS1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS1r,(_r._rx_x4_rx_deskew_am_offs1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_RX_DESKEW_AM_OFFS1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS1r,(_r._rx_x4_rx_deskew_am_offs1))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_RX_DESKEW_AM_OFFS1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_rx_deskew_am_offs1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_RX_DESKEW_AM_OFFS1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_rx_deskew_am_offs1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_RX_DESKEW_AM_OFFS1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_rx_deskew_am_offs1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_RX_DESKEW_AM_OFFS1r BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS1r
#define RX_X4_RX_DESKEW_AM_OFFS1r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS1r_t RX_X4_RX_DESKEW_AM_OFFS1r_t;
#define RX_X4_RX_DESKEW_AM_OFFS1r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS1r_CLR
#define RX_X4_RX_DESKEW_AM_OFFS1r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS1r_SET
#define RX_X4_RX_DESKEW_AM_OFFS1r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS1r_GET
#define RX_X4_RX_DESKEW_AM_OFFS1r_CL74_FEC_BLOCK_NUM_1f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS1r_CL74_FEC_BLOCK_NUM_1f_GET
#define RX_X4_RX_DESKEW_AM_OFFS1r_CL74_FEC_BLOCK_NUM_1f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS1r_CL74_FEC_BLOCK_NUM_1f_SET
#define RX_X4_RX_DESKEW_AM_OFFS1r_AM_BLOCK_OFFSET_1f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS1r_AM_BLOCK_OFFSET_1f_GET
#define RX_X4_RX_DESKEW_AM_OFFS1r_AM_BLOCK_OFFSET_1f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS1r_AM_BLOCK_OFFSET_1f_SET
#define READ_RX_X4_RX_DESKEW_AM_OFFS1r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_RX_DESKEW_AM_OFFS1r
#define WRITE_RX_X4_RX_DESKEW_AM_OFFS1r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_RX_DESKEW_AM_OFFS1r
#define MODIFY_RX_X4_RX_DESKEW_AM_OFFS1r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_RX_DESKEW_AM_OFFS1r
#define READLN_RX_X4_RX_DESKEW_AM_OFFS1r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_RX_DESKEW_AM_OFFS1r
#define WRITELN_RX_X4_RX_DESKEW_AM_OFFS1r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_RX_DESKEW_AM_OFFS1r
#define WRITEALL_RX_X4_RX_DESKEW_AM_OFFS1r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_RX_DESKEW_AM_OFFS1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_RX_DESKEW_BASE_TS_CALC2
 * BLOCKS:   RX_X4_STATUS6
 * REGADDR:  0xc396
 * DESC:     Rx Base Timestamp status(Per Virtual lane) for Deskew
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     BASE_TS_SUB_NS_2 Indicates the sub-nano part of the Rx base timestamp used for AM timestamp calculation.On Deskew event, this deskew status information is provided for each Virtual Lane using multiple copies of this register as follows,In 100G MLD mode(Port0) - VL2(1st copy)/VL7(2nd copy)/VL12(3rd copy)/VL17(4th copy)
 *     BASE_TS_NS_2     Indicates the Rx base timestamp(in nano seconds) for AM timestamp calculation.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC2r (0x0000c396 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_RX_DESKEW_BASE_TS_CALC2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC2r_s {
	uint32_t v[1];
	uint32_t rx_x4_rx_deskew_base_ts_calc2[1];
	uint32_t _rx_x4_rx_deskew_base_ts_calc2;
} BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC2r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC2r_CLR(r) (r).rx_x4_rx_deskew_base_ts_calc2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC2r_SET(r,d) (r).rx_x4_rx_deskew_base_ts_calc2[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC2r_GET(r) (r).rx_x4_rx_deskew_base_ts_calc2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC2r_BASE_TS_NS_2f_GET(r) ((((r).rx_x4_rx_deskew_base_ts_calc2[0]) >> 4) & 0xfff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC2r_BASE_TS_NS_2f_SET(r,f) (r).rx_x4_rx_deskew_base_ts_calc2[0]=(((r).rx_x4_rx_deskew_base_ts_calc2[0] & ~((uint32_t)0xfff << 4)) | ((((uint32_t)f) & 0xfff) << 4)) | (4095 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC2r_BASE_TS_SUB_NS_2f_GET(r) (((r).rx_x4_rx_deskew_base_ts_calc2[0]) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC2r_BASE_TS_SUB_NS_2f_SET(r,f) (r).rx_x4_rx_deskew_base_ts_calc2[0]=(((r).rx_x4_rx_deskew_base_ts_calc2[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access RX_X4_RX_DESKEW_BASE_TS_CALC2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_RX_DESKEW_BASE_TS_CALC2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC2r,(_r._rx_x4_rx_deskew_base_ts_calc2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_RX_DESKEW_BASE_TS_CALC2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC2r,(_r._rx_x4_rx_deskew_base_ts_calc2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_RX_DESKEW_BASE_TS_CALC2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC2r,(_r._rx_x4_rx_deskew_base_ts_calc2))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_RX_DESKEW_BASE_TS_CALC2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_rx_deskew_base_ts_calc2))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_RX_DESKEW_BASE_TS_CALC2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_rx_deskew_base_ts_calc2))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_RX_DESKEW_BASE_TS_CALC2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_rx_deskew_base_ts_calc2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_RX_DESKEW_BASE_TS_CALC2r BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC2r
#define RX_X4_RX_DESKEW_BASE_TS_CALC2r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC2r_t RX_X4_RX_DESKEW_BASE_TS_CALC2r_t;
#define RX_X4_RX_DESKEW_BASE_TS_CALC2r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC2r_CLR
#define RX_X4_RX_DESKEW_BASE_TS_CALC2r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC2r_SET
#define RX_X4_RX_DESKEW_BASE_TS_CALC2r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC2r_GET
#define RX_X4_RX_DESKEW_BASE_TS_CALC2r_BASE_TS_NS_2f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC2r_BASE_TS_NS_2f_GET
#define RX_X4_RX_DESKEW_BASE_TS_CALC2r_BASE_TS_NS_2f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC2r_BASE_TS_NS_2f_SET
#define RX_X4_RX_DESKEW_BASE_TS_CALC2r_BASE_TS_SUB_NS_2f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC2r_BASE_TS_SUB_NS_2f_GET
#define RX_X4_RX_DESKEW_BASE_TS_CALC2r_BASE_TS_SUB_NS_2f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC2r_BASE_TS_SUB_NS_2f_SET
#define READ_RX_X4_RX_DESKEW_BASE_TS_CALC2r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_RX_DESKEW_BASE_TS_CALC2r
#define WRITE_RX_X4_RX_DESKEW_BASE_TS_CALC2r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_RX_DESKEW_BASE_TS_CALC2r
#define MODIFY_RX_X4_RX_DESKEW_BASE_TS_CALC2r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_RX_DESKEW_BASE_TS_CALC2r
#define READLN_RX_X4_RX_DESKEW_BASE_TS_CALC2r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_RX_DESKEW_BASE_TS_CALC2r
#define WRITELN_RX_X4_RX_DESKEW_BASE_TS_CALC2r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_RX_DESKEW_BASE_TS_CALC2r
#define WRITEALL_RX_X4_RX_DESKEW_BASE_TS_CALC2r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_RX_DESKEW_BASE_TS_CALC2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_RX_DESKEW_BASE_TS_ADJ2
 * BLOCKS:   RX_X4_STATUS6
 * REGADDR:  0xc397
 * DESC:     Rx Base Timestamp Adjust status(Per Virtual lane) for Deskew
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     BIT_POS_ADJ_2    Indicates the Bit Position Adjustment that needs to be applied to the Rx base timestamp to extrapolate the AM Marker timestamp.This field is represented as a 2's complement value, as the bit position adjustment can be negativeOn Deskew event, this deskew status information is provided for each Virtual Lane using multiple copies of this register as follows,In 100G MLD mode(Port0) - VL2(1st copy)/VL7(2nd copy)/VL12(3rd copy)/VL17(4th copy)
 *     BASE_TS_FCLK_ADJ_2 Indicates the Glas Adjustment or FCLK Adjust that needs to be applied to the Rx base timestamp to extrapolate the AM Marker timestamp.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ2r (0x0000c397 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_RX_DESKEW_BASE_TS_ADJ2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ2r_s {
	uint32_t v[1];
	uint32_t rx_x4_rx_deskew_base_ts_adj2[1];
	uint32_t _rx_x4_rx_deskew_base_ts_adj2;
} BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ2r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ2r_CLR(r) (r).rx_x4_rx_deskew_base_ts_adj2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ2r_SET(r,d) (r).rx_x4_rx_deskew_base_ts_adj2[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ2r_GET(r) (r).rx_x4_rx_deskew_base_ts_adj2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ2r_BASE_TS_FCLK_ADJ_2f_GET(r) ((((r).rx_x4_rx_deskew_base_ts_adj2[0]) >> 9) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ2r_BASE_TS_FCLK_ADJ_2f_SET(r,f) (r).rx_x4_rx_deskew_base_ts_adj2[0]=(((r).rx_x4_rx_deskew_base_ts_adj2[0] & ~((uint32_t)0x1f << 9)) | ((((uint32_t)f) & 0x1f) << 9)) | (31 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ2r_BIT_POS_ADJ_2f_GET(r) (((r).rx_x4_rx_deskew_base_ts_adj2[0]) & 0x1ff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ2r_BIT_POS_ADJ_2f_SET(r,f) (r).rx_x4_rx_deskew_base_ts_adj2[0]=(((r).rx_x4_rx_deskew_base_ts_adj2[0] & ~((uint32_t)0x1ff)) | (((uint32_t)f) & 0x1ff)) | (0x1ff << 16)

/*
 * These macros can be used to access RX_X4_RX_DESKEW_BASE_TS_ADJ2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_RX_DESKEW_BASE_TS_ADJ2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ2r,(_r._rx_x4_rx_deskew_base_ts_adj2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_RX_DESKEW_BASE_TS_ADJ2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ2r,(_r._rx_x4_rx_deskew_base_ts_adj2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_RX_DESKEW_BASE_TS_ADJ2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ2r,(_r._rx_x4_rx_deskew_base_ts_adj2))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_RX_DESKEW_BASE_TS_ADJ2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_rx_deskew_base_ts_adj2))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_RX_DESKEW_BASE_TS_ADJ2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_rx_deskew_base_ts_adj2))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_RX_DESKEW_BASE_TS_ADJ2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_rx_deskew_base_ts_adj2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_RX_DESKEW_BASE_TS_ADJ2r BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ2r
#define RX_X4_RX_DESKEW_BASE_TS_ADJ2r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ2r_t RX_X4_RX_DESKEW_BASE_TS_ADJ2r_t;
#define RX_X4_RX_DESKEW_BASE_TS_ADJ2r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ2r_CLR
#define RX_X4_RX_DESKEW_BASE_TS_ADJ2r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ2r_SET
#define RX_X4_RX_DESKEW_BASE_TS_ADJ2r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ2r_GET
#define RX_X4_RX_DESKEW_BASE_TS_ADJ2r_BASE_TS_FCLK_ADJ_2f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ2r_BASE_TS_FCLK_ADJ_2f_GET
#define RX_X4_RX_DESKEW_BASE_TS_ADJ2r_BASE_TS_FCLK_ADJ_2f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ2r_BASE_TS_FCLK_ADJ_2f_SET
#define RX_X4_RX_DESKEW_BASE_TS_ADJ2r_BIT_POS_ADJ_2f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ2r_BIT_POS_ADJ_2f_GET
#define RX_X4_RX_DESKEW_BASE_TS_ADJ2r_BIT_POS_ADJ_2f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ2r_BIT_POS_ADJ_2f_SET
#define READ_RX_X4_RX_DESKEW_BASE_TS_ADJ2r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_RX_DESKEW_BASE_TS_ADJ2r
#define WRITE_RX_X4_RX_DESKEW_BASE_TS_ADJ2r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_RX_DESKEW_BASE_TS_ADJ2r
#define MODIFY_RX_X4_RX_DESKEW_BASE_TS_ADJ2r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_RX_DESKEW_BASE_TS_ADJ2r
#define READLN_RX_X4_RX_DESKEW_BASE_TS_ADJ2r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_RX_DESKEW_BASE_TS_ADJ2r
#define WRITELN_RX_X4_RX_DESKEW_BASE_TS_ADJ2r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_RX_DESKEW_BASE_TS_ADJ2r
#define WRITEALL_RX_X4_RX_DESKEW_BASE_TS_ADJ2r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_RX_DESKEW_BASE_TS_ADJ2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_RX_DESKEW_AM_OFFS2
 * BLOCKS:   RX_X4_STATUS6
 * REGADDR:  0xc398
 * DESC:     Rx AM Block Offset status(Per Virtual lane) for Deskew
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     AM_BLOCK_OFFSET_2 Indicates the block offset from the block that carries the Rx base timestamp to the AM block.The block size is 66bits for CL82 ports that run with or without CL74 FEC.The block size is 60 for CL82 ports that run with CL91.On Deskew event, this deskew status information is provided for each Virtual Lane using multiple copies of this register as follows,In 100G MLD mode(Port0) - VL2(1st copy)/VL7(2nd copy)/VL12(3rd copy)/VL17(4th copy)
 *     CL74_FEC_BLOCK_NUM_2 Indicates the CL74 FEC block number of the AM block within the CL74 codeword. Need to be used only for ports that employ CL74
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS2r (0x0000c398 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_RX_DESKEW_AM_OFFS2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS2r_s {
	uint32_t v[1];
	uint32_t rx_x4_rx_deskew_am_offs2[1];
	uint32_t _rx_x4_rx_deskew_am_offs2;
} BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS2r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS2r_CLR(r) (r).rx_x4_rx_deskew_am_offs2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS2r_SET(r,d) (r).rx_x4_rx_deskew_am_offs2[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS2r_GET(r) (r).rx_x4_rx_deskew_am_offs2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS2r_CL74_FEC_BLOCK_NUM_2f_GET(r) ((((r).rx_x4_rx_deskew_am_offs2[0]) >> 6) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS2r_CL74_FEC_BLOCK_NUM_2f_SET(r,f) (r).rx_x4_rx_deskew_am_offs2[0]=(((r).rx_x4_rx_deskew_am_offs2[0] & ~((uint32_t)0x1f << 6)) | ((((uint32_t)f) & 0x1f) << 6)) | (31 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS2r_AM_BLOCK_OFFSET_2f_GET(r) (((r).rx_x4_rx_deskew_am_offs2[0]) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS2r_AM_BLOCK_OFFSET_2f_SET(r,f) (r).rx_x4_rx_deskew_am_offs2[0]=(((r).rx_x4_rx_deskew_am_offs2[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access RX_X4_RX_DESKEW_AM_OFFS2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_RX_DESKEW_AM_OFFS2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS2r,(_r._rx_x4_rx_deskew_am_offs2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_RX_DESKEW_AM_OFFS2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS2r,(_r._rx_x4_rx_deskew_am_offs2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_RX_DESKEW_AM_OFFS2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS2r,(_r._rx_x4_rx_deskew_am_offs2))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_RX_DESKEW_AM_OFFS2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_rx_deskew_am_offs2))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_RX_DESKEW_AM_OFFS2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_rx_deskew_am_offs2))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_RX_DESKEW_AM_OFFS2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_rx_deskew_am_offs2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_RX_DESKEW_AM_OFFS2r BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS2r
#define RX_X4_RX_DESKEW_AM_OFFS2r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS2r_t RX_X4_RX_DESKEW_AM_OFFS2r_t;
#define RX_X4_RX_DESKEW_AM_OFFS2r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS2r_CLR
#define RX_X4_RX_DESKEW_AM_OFFS2r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS2r_SET
#define RX_X4_RX_DESKEW_AM_OFFS2r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS2r_GET
#define RX_X4_RX_DESKEW_AM_OFFS2r_CL74_FEC_BLOCK_NUM_2f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS2r_CL74_FEC_BLOCK_NUM_2f_GET
#define RX_X4_RX_DESKEW_AM_OFFS2r_CL74_FEC_BLOCK_NUM_2f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS2r_CL74_FEC_BLOCK_NUM_2f_SET
#define RX_X4_RX_DESKEW_AM_OFFS2r_AM_BLOCK_OFFSET_2f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS2r_AM_BLOCK_OFFSET_2f_GET
#define RX_X4_RX_DESKEW_AM_OFFS2r_AM_BLOCK_OFFSET_2f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS2r_AM_BLOCK_OFFSET_2f_SET
#define READ_RX_X4_RX_DESKEW_AM_OFFS2r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_RX_DESKEW_AM_OFFS2r
#define WRITE_RX_X4_RX_DESKEW_AM_OFFS2r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_RX_DESKEW_AM_OFFS2r
#define MODIFY_RX_X4_RX_DESKEW_AM_OFFS2r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_RX_DESKEW_AM_OFFS2r
#define READLN_RX_X4_RX_DESKEW_AM_OFFS2r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_RX_DESKEW_AM_OFFS2r
#define WRITELN_RX_X4_RX_DESKEW_AM_OFFS2r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_RX_DESKEW_AM_OFFS2r
#define WRITEALL_RX_X4_RX_DESKEW_AM_OFFS2r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_RX_DESKEW_AM_OFFS2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_RX_DESKEW_BASE_TS_CALC3
 * BLOCKS:   RX_X4_STATUS6
 * REGADDR:  0xc399
 * DESC:     Rx Base Timestamp status(Per Virtual lane) for Deskew
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     BASE_TS_SUB_NS_3 Indicates the sub-nano part of the Rx base timestamp used for AM timestamp calculation.On Deskew event, this deskew status information is provided for each Virtual Lane using multiple copies of this register as follows,In 100G MLD mode(Port0) - VL3(1st copy)/VL8(2nd copy)/VL13(3rd copy)/VL18(4th copy)
 *     BASE_TS_NS_3     Indicates the Rx base timestamp(in nano seconds) for AM timestamp calculation.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC3r (0x0000c399 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC3r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_RX_DESKEW_BASE_TS_CALC3.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC3r_s {
	uint32_t v[1];
	uint32_t rx_x4_rx_deskew_base_ts_calc3[1];
	uint32_t _rx_x4_rx_deskew_base_ts_calc3;
} BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC3r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC3r_CLR(r) (r).rx_x4_rx_deskew_base_ts_calc3[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC3r_SET(r,d) (r).rx_x4_rx_deskew_base_ts_calc3[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC3r_GET(r) (r).rx_x4_rx_deskew_base_ts_calc3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC3r_BASE_TS_NS_3f_GET(r) ((((r).rx_x4_rx_deskew_base_ts_calc3[0]) >> 4) & 0xfff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC3r_BASE_TS_NS_3f_SET(r,f) (r).rx_x4_rx_deskew_base_ts_calc3[0]=(((r).rx_x4_rx_deskew_base_ts_calc3[0] & ~((uint32_t)0xfff << 4)) | ((((uint32_t)f) & 0xfff) << 4)) | (4095 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC3r_BASE_TS_SUB_NS_3f_GET(r) (((r).rx_x4_rx_deskew_base_ts_calc3[0]) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC3r_BASE_TS_SUB_NS_3f_SET(r,f) (r).rx_x4_rx_deskew_base_ts_calc3[0]=(((r).rx_x4_rx_deskew_base_ts_calc3[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access RX_X4_RX_DESKEW_BASE_TS_CALC3.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_RX_DESKEW_BASE_TS_CALC3r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC3r,(_r._rx_x4_rx_deskew_base_ts_calc3))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_RX_DESKEW_BASE_TS_CALC3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC3r,(_r._rx_x4_rx_deskew_base_ts_calc3)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_RX_DESKEW_BASE_TS_CALC3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC3r,(_r._rx_x4_rx_deskew_base_ts_calc3))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_RX_DESKEW_BASE_TS_CALC3r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_rx_deskew_base_ts_calc3))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_RX_DESKEW_BASE_TS_CALC3r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_rx_deskew_base_ts_calc3))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_RX_DESKEW_BASE_TS_CALC3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC3r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_rx_deskew_base_ts_calc3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_RX_DESKEW_BASE_TS_CALC3r BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC3r
#define RX_X4_RX_DESKEW_BASE_TS_CALC3r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC3r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC3r_t RX_X4_RX_DESKEW_BASE_TS_CALC3r_t;
#define RX_X4_RX_DESKEW_BASE_TS_CALC3r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC3r_CLR
#define RX_X4_RX_DESKEW_BASE_TS_CALC3r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC3r_SET
#define RX_X4_RX_DESKEW_BASE_TS_CALC3r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC3r_GET
#define RX_X4_RX_DESKEW_BASE_TS_CALC3r_BASE_TS_NS_3f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC3r_BASE_TS_NS_3f_GET
#define RX_X4_RX_DESKEW_BASE_TS_CALC3r_BASE_TS_NS_3f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC3r_BASE_TS_NS_3f_SET
#define RX_X4_RX_DESKEW_BASE_TS_CALC3r_BASE_TS_SUB_NS_3f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC3r_BASE_TS_SUB_NS_3f_GET
#define RX_X4_RX_DESKEW_BASE_TS_CALC3r_BASE_TS_SUB_NS_3f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC3r_BASE_TS_SUB_NS_3f_SET
#define READ_RX_X4_RX_DESKEW_BASE_TS_CALC3r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_RX_DESKEW_BASE_TS_CALC3r
#define WRITE_RX_X4_RX_DESKEW_BASE_TS_CALC3r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_RX_DESKEW_BASE_TS_CALC3r
#define MODIFY_RX_X4_RX_DESKEW_BASE_TS_CALC3r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_RX_DESKEW_BASE_TS_CALC3r
#define READLN_RX_X4_RX_DESKEW_BASE_TS_CALC3r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_RX_DESKEW_BASE_TS_CALC3r
#define WRITELN_RX_X4_RX_DESKEW_BASE_TS_CALC3r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_RX_DESKEW_BASE_TS_CALC3r
#define WRITEALL_RX_X4_RX_DESKEW_BASE_TS_CALC3r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_RX_DESKEW_BASE_TS_CALC3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_RX_DESKEW_BASE_TS_ADJ3
 * BLOCKS:   RX_X4_STATUS6
 * REGADDR:  0xc39a
 * DESC:     Rx Base Timestamp Adjust status(Per Virtual lane) for Deskew
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     BIT_POS_ADJ_3    Indicates the Bit Position Adjustment that needs to be applied to the Rx base timestamp to extrapolate the AM Marker timestamp.This field is represented as a 2's complement value, as the bit position adjustment can be negativeOn Deskew event, this deskew status information is provided for each Virtual Lane using multiple copies of this register as follows,In 100G MLD mode(Port0) - VL3(1st copy)/VL8(2nd copy)/VL13(3rd copy)/VL18(4th copy)
 *     BASE_TS_FCLK_ADJ_3 Indicates the Glas Adjustment or FCLK Adjust that needs to be applied to the Rx base timestamp to extrapolate the AM Marker timestamp.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ3r (0x0000c39a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ3r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_RX_DESKEW_BASE_TS_ADJ3.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ3r_s {
	uint32_t v[1];
	uint32_t rx_x4_rx_deskew_base_ts_adj3[1];
	uint32_t _rx_x4_rx_deskew_base_ts_adj3;
} BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ3r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ3r_CLR(r) (r).rx_x4_rx_deskew_base_ts_adj3[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ3r_SET(r,d) (r).rx_x4_rx_deskew_base_ts_adj3[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ3r_GET(r) (r).rx_x4_rx_deskew_base_ts_adj3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ3r_BASE_TS_FCLK_ADJ_3f_GET(r) ((((r).rx_x4_rx_deskew_base_ts_adj3[0]) >> 9) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ3r_BASE_TS_FCLK_ADJ_3f_SET(r,f) (r).rx_x4_rx_deskew_base_ts_adj3[0]=(((r).rx_x4_rx_deskew_base_ts_adj3[0] & ~((uint32_t)0x1f << 9)) | ((((uint32_t)f) & 0x1f) << 9)) | (31 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ3r_BIT_POS_ADJ_3f_GET(r) (((r).rx_x4_rx_deskew_base_ts_adj3[0]) & 0x1ff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ3r_BIT_POS_ADJ_3f_SET(r,f) (r).rx_x4_rx_deskew_base_ts_adj3[0]=(((r).rx_x4_rx_deskew_base_ts_adj3[0] & ~((uint32_t)0x1ff)) | (((uint32_t)f) & 0x1ff)) | (0x1ff << 16)

/*
 * These macros can be used to access RX_X4_RX_DESKEW_BASE_TS_ADJ3.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_RX_DESKEW_BASE_TS_ADJ3r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ3r,(_r._rx_x4_rx_deskew_base_ts_adj3))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_RX_DESKEW_BASE_TS_ADJ3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ3r,(_r._rx_x4_rx_deskew_base_ts_adj3)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_RX_DESKEW_BASE_TS_ADJ3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ3r,(_r._rx_x4_rx_deskew_base_ts_adj3))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_RX_DESKEW_BASE_TS_ADJ3r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_rx_deskew_base_ts_adj3))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_RX_DESKEW_BASE_TS_ADJ3r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_rx_deskew_base_ts_adj3))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_RX_DESKEW_BASE_TS_ADJ3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ3r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_rx_deskew_base_ts_adj3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_RX_DESKEW_BASE_TS_ADJ3r BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ3r
#define RX_X4_RX_DESKEW_BASE_TS_ADJ3r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ3r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ3r_t RX_X4_RX_DESKEW_BASE_TS_ADJ3r_t;
#define RX_X4_RX_DESKEW_BASE_TS_ADJ3r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ3r_CLR
#define RX_X4_RX_DESKEW_BASE_TS_ADJ3r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ3r_SET
#define RX_X4_RX_DESKEW_BASE_TS_ADJ3r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ3r_GET
#define RX_X4_RX_DESKEW_BASE_TS_ADJ3r_BASE_TS_FCLK_ADJ_3f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ3r_BASE_TS_FCLK_ADJ_3f_GET
#define RX_X4_RX_DESKEW_BASE_TS_ADJ3r_BASE_TS_FCLK_ADJ_3f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ3r_BASE_TS_FCLK_ADJ_3f_SET
#define RX_X4_RX_DESKEW_BASE_TS_ADJ3r_BIT_POS_ADJ_3f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ3r_BIT_POS_ADJ_3f_GET
#define RX_X4_RX_DESKEW_BASE_TS_ADJ3r_BIT_POS_ADJ_3f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ3r_BIT_POS_ADJ_3f_SET
#define READ_RX_X4_RX_DESKEW_BASE_TS_ADJ3r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_RX_DESKEW_BASE_TS_ADJ3r
#define WRITE_RX_X4_RX_DESKEW_BASE_TS_ADJ3r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_RX_DESKEW_BASE_TS_ADJ3r
#define MODIFY_RX_X4_RX_DESKEW_BASE_TS_ADJ3r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_RX_DESKEW_BASE_TS_ADJ3r
#define READLN_RX_X4_RX_DESKEW_BASE_TS_ADJ3r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_RX_DESKEW_BASE_TS_ADJ3r
#define WRITELN_RX_X4_RX_DESKEW_BASE_TS_ADJ3r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_RX_DESKEW_BASE_TS_ADJ3r
#define WRITEALL_RX_X4_RX_DESKEW_BASE_TS_ADJ3r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_RX_DESKEW_BASE_TS_ADJ3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_RX_DESKEW_AM_OFFS3
 * BLOCKS:   RX_X4_STATUS6
 * REGADDR:  0xc39b
 * DESC:     Rx AM Block Offset status(Per Virtual lane) for Deskew
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     AM_BLOCK_OFFSET_3 Indicates the block offset from the block that carries the Rx base timestamp to the AM block.The block size is 66bits for CL82 ports that run with or without CL74 FEC.The block size is 60 for CL82 ports that run with CL91.On Deskew event, this deskew status information is provided for each Virtual Lane using multiple copies of this register as follows,In 100G MLD mode(Port0) - VL3(1st copy)/VL8(2nd copy)/VL13(3rd copy)/VL18(4th copy)
 *     CL74_FEC_BLOCK_NUM_3 Indicates the CL74 FEC block number of the AM block within the CL74 codeword. Need to be used only for ports that employ CL74
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS3r (0x0000c39b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS3r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_RX_DESKEW_AM_OFFS3.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS3r_s {
	uint32_t v[1];
	uint32_t rx_x4_rx_deskew_am_offs3[1];
	uint32_t _rx_x4_rx_deskew_am_offs3;
} BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS3r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS3r_CLR(r) (r).rx_x4_rx_deskew_am_offs3[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS3r_SET(r,d) (r).rx_x4_rx_deskew_am_offs3[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS3r_GET(r) (r).rx_x4_rx_deskew_am_offs3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS3r_CL74_FEC_BLOCK_NUM_3f_GET(r) ((((r).rx_x4_rx_deskew_am_offs3[0]) >> 6) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS3r_CL74_FEC_BLOCK_NUM_3f_SET(r,f) (r).rx_x4_rx_deskew_am_offs3[0]=(((r).rx_x4_rx_deskew_am_offs3[0] & ~((uint32_t)0x1f << 6)) | ((((uint32_t)f) & 0x1f) << 6)) | (31 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS3r_AM_BLOCK_OFFSET_3f_GET(r) (((r).rx_x4_rx_deskew_am_offs3[0]) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS3r_AM_BLOCK_OFFSET_3f_SET(r,f) (r).rx_x4_rx_deskew_am_offs3[0]=(((r).rx_x4_rx_deskew_am_offs3[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access RX_X4_RX_DESKEW_AM_OFFS3.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_RX_DESKEW_AM_OFFS3r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS3r,(_r._rx_x4_rx_deskew_am_offs3))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_RX_DESKEW_AM_OFFS3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS3r,(_r._rx_x4_rx_deskew_am_offs3)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_RX_DESKEW_AM_OFFS3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS3r,(_r._rx_x4_rx_deskew_am_offs3))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_RX_DESKEW_AM_OFFS3r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_rx_deskew_am_offs3))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_RX_DESKEW_AM_OFFS3r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_rx_deskew_am_offs3))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_RX_DESKEW_AM_OFFS3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS3r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_rx_deskew_am_offs3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_RX_DESKEW_AM_OFFS3r BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS3r
#define RX_X4_RX_DESKEW_AM_OFFS3r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS3r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS3r_t RX_X4_RX_DESKEW_AM_OFFS3r_t;
#define RX_X4_RX_DESKEW_AM_OFFS3r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS3r_CLR
#define RX_X4_RX_DESKEW_AM_OFFS3r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS3r_SET
#define RX_X4_RX_DESKEW_AM_OFFS3r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS3r_GET
#define RX_X4_RX_DESKEW_AM_OFFS3r_CL74_FEC_BLOCK_NUM_3f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS3r_CL74_FEC_BLOCK_NUM_3f_GET
#define RX_X4_RX_DESKEW_AM_OFFS3r_CL74_FEC_BLOCK_NUM_3f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS3r_CL74_FEC_BLOCK_NUM_3f_SET
#define RX_X4_RX_DESKEW_AM_OFFS3r_AM_BLOCK_OFFSET_3f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS3r_AM_BLOCK_OFFSET_3f_GET
#define RX_X4_RX_DESKEW_AM_OFFS3r_AM_BLOCK_OFFSET_3f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS3r_AM_BLOCK_OFFSET_3f_SET
#define READ_RX_X4_RX_DESKEW_AM_OFFS3r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_RX_DESKEW_AM_OFFS3r
#define WRITE_RX_X4_RX_DESKEW_AM_OFFS3r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_RX_DESKEW_AM_OFFS3r
#define MODIFY_RX_X4_RX_DESKEW_AM_OFFS3r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_RX_DESKEW_AM_OFFS3r
#define READLN_RX_X4_RX_DESKEW_AM_OFFS3r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_RX_DESKEW_AM_OFFS3r
#define WRITELN_RX_X4_RX_DESKEW_AM_OFFS3r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_RX_DESKEW_AM_OFFS3r
#define WRITEALL_RX_X4_RX_DESKEW_AM_OFFS3r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_RX_DESKEW_AM_OFFS3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_RX_DESKEW_BASE_TS_CALC4
 * BLOCKS:   RX_X4_STATUS6
 * REGADDR:  0xc39c
 * DESC:     Rx Base Timestamp status(Per Virtual lane) for Deskew
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     BASE_TS_SUB_NS_4 Indicates the sub-nano part of the Rx base timestamp used for AM timestamp calculation.On Deskew event, this deskew status information is provided for each Virtual Lane using multiple copies of this register as follows,In 100G MLD mode(Port0) - VL4(1st copy)/VL9(2nd copy)/VL14(3rd copy)/VL19(4th copy)
 *     BASE_TS_NS_4     Indicates the Rx base timestamp(in nano seconds) for AM timestamp calculation.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC4r (0x0000c39c | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC4r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_RX_DESKEW_BASE_TS_CALC4.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC4r_s {
	uint32_t v[1];
	uint32_t rx_x4_rx_deskew_base_ts_calc4[1];
	uint32_t _rx_x4_rx_deskew_base_ts_calc4;
} BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC4r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC4r_CLR(r) (r).rx_x4_rx_deskew_base_ts_calc4[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC4r_SET(r,d) (r).rx_x4_rx_deskew_base_ts_calc4[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC4r_GET(r) (r).rx_x4_rx_deskew_base_ts_calc4[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC4r_BASE_TS_NS_4f_GET(r) ((((r).rx_x4_rx_deskew_base_ts_calc4[0]) >> 4) & 0xfff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC4r_BASE_TS_NS_4f_SET(r,f) (r).rx_x4_rx_deskew_base_ts_calc4[0]=(((r).rx_x4_rx_deskew_base_ts_calc4[0] & ~((uint32_t)0xfff << 4)) | ((((uint32_t)f) & 0xfff) << 4)) | (4095 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC4r_BASE_TS_SUB_NS_4f_GET(r) (((r).rx_x4_rx_deskew_base_ts_calc4[0]) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC4r_BASE_TS_SUB_NS_4f_SET(r,f) (r).rx_x4_rx_deskew_base_ts_calc4[0]=(((r).rx_x4_rx_deskew_base_ts_calc4[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access RX_X4_RX_DESKEW_BASE_TS_CALC4.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_RX_DESKEW_BASE_TS_CALC4r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC4r,(_r._rx_x4_rx_deskew_base_ts_calc4))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_RX_DESKEW_BASE_TS_CALC4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC4r,(_r._rx_x4_rx_deskew_base_ts_calc4)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_RX_DESKEW_BASE_TS_CALC4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC4r,(_r._rx_x4_rx_deskew_base_ts_calc4))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_RX_DESKEW_BASE_TS_CALC4r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_rx_deskew_base_ts_calc4))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_RX_DESKEW_BASE_TS_CALC4r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_rx_deskew_base_ts_calc4))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_RX_DESKEW_BASE_TS_CALC4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC4r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_rx_deskew_base_ts_calc4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_RX_DESKEW_BASE_TS_CALC4r BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC4r
#define RX_X4_RX_DESKEW_BASE_TS_CALC4r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC4r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC4r_t RX_X4_RX_DESKEW_BASE_TS_CALC4r_t;
#define RX_X4_RX_DESKEW_BASE_TS_CALC4r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC4r_CLR
#define RX_X4_RX_DESKEW_BASE_TS_CALC4r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC4r_SET
#define RX_X4_RX_DESKEW_BASE_TS_CALC4r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC4r_GET
#define RX_X4_RX_DESKEW_BASE_TS_CALC4r_BASE_TS_NS_4f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC4r_BASE_TS_NS_4f_GET
#define RX_X4_RX_DESKEW_BASE_TS_CALC4r_BASE_TS_NS_4f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC4r_BASE_TS_NS_4f_SET
#define RX_X4_RX_DESKEW_BASE_TS_CALC4r_BASE_TS_SUB_NS_4f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC4r_BASE_TS_SUB_NS_4f_GET
#define RX_X4_RX_DESKEW_BASE_TS_CALC4r_BASE_TS_SUB_NS_4f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC4r_BASE_TS_SUB_NS_4f_SET
#define READ_RX_X4_RX_DESKEW_BASE_TS_CALC4r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_RX_DESKEW_BASE_TS_CALC4r
#define WRITE_RX_X4_RX_DESKEW_BASE_TS_CALC4r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_RX_DESKEW_BASE_TS_CALC4r
#define MODIFY_RX_X4_RX_DESKEW_BASE_TS_CALC4r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_RX_DESKEW_BASE_TS_CALC4r
#define READLN_RX_X4_RX_DESKEW_BASE_TS_CALC4r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_RX_DESKEW_BASE_TS_CALC4r
#define WRITELN_RX_X4_RX_DESKEW_BASE_TS_CALC4r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_RX_DESKEW_BASE_TS_CALC4r
#define WRITEALL_RX_X4_RX_DESKEW_BASE_TS_CALC4r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_RX_DESKEW_BASE_TS_CALC4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_CALC4r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_RX_DESKEW_BASE_TS_ADJ4
 * BLOCKS:   RX_X4_STATUS6
 * REGADDR:  0xc39d
 * DESC:     Rx Base Timestamp Adjust status(Per Virtual lane) for Deskew
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     BIT_POS_ADJ_4    Indicates the Bit Position Adjustment that needs to be applied to the Rx base timestamp to extrapolate the AM Marker timestamp.This field is represented as a 2's complement value, as the bit position adjustment can be negativeOn Deskew event, this deskew status information is provided for each Virtual Lane using multiple copies of this register as follows,In 100G MLD mode(Port0) - VL4(1st copy)/VL9(2nd copy)/VL14(3rd copy)/VL19(4th copy)
 *     BASE_TS_FCLK_ADJ_4 Indicates the Glas Adjustment or FCLK Adjust that needs to be applied to the Rx base timestamp to extrapolate the AM Marker timestamp.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ4r (0x0000c39d | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ4r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_RX_DESKEW_BASE_TS_ADJ4.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ4r_s {
	uint32_t v[1];
	uint32_t rx_x4_rx_deskew_base_ts_adj4[1];
	uint32_t _rx_x4_rx_deskew_base_ts_adj4;
} BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ4r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ4r_CLR(r) (r).rx_x4_rx_deskew_base_ts_adj4[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ4r_SET(r,d) (r).rx_x4_rx_deskew_base_ts_adj4[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ4r_GET(r) (r).rx_x4_rx_deskew_base_ts_adj4[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ4r_BASE_TS_FCLK_ADJ_4f_GET(r) ((((r).rx_x4_rx_deskew_base_ts_adj4[0]) >> 9) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ4r_BASE_TS_FCLK_ADJ_4f_SET(r,f) (r).rx_x4_rx_deskew_base_ts_adj4[0]=(((r).rx_x4_rx_deskew_base_ts_adj4[0] & ~((uint32_t)0x1f << 9)) | ((((uint32_t)f) & 0x1f) << 9)) | (31 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ4r_BIT_POS_ADJ_4f_GET(r) (((r).rx_x4_rx_deskew_base_ts_adj4[0]) & 0x1ff)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ4r_BIT_POS_ADJ_4f_SET(r,f) (r).rx_x4_rx_deskew_base_ts_adj4[0]=(((r).rx_x4_rx_deskew_base_ts_adj4[0] & ~((uint32_t)0x1ff)) | (((uint32_t)f) & 0x1ff)) | (0x1ff << 16)

/*
 * These macros can be used to access RX_X4_RX_DESKEW_BASE_TS_ADJ4.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_RX_DESKEW_BASE_TS_ADJ4r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ4r,(_r._rx_x4_rx_deskew_base_ts_adj4))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_RX_DESKEW_BASE_TS_ADJ4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ4r,(_r._rx_x4_rx_deskew_base_ts_adj4)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_RX_DESKEW_BASE_TS_ADJ4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ4r,(_r._rx_x4_rx_deskew_base_ts_adj4))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_RX_DESKEW_BASE_TS_ADJ4r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_rx_deskew_base_ts_adj4))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_RX_DESKEW_BASE_TS_ADJ4r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_rx_deskew_base_ts_adj4))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_RX_DESKEW_BASE_TS_ADJ4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ4r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_rx_deskew_base_ts_adj4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_RX_DESKEW_BASE_TS_ADJ4r BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ4r
#define RX_X4_RX_DESKEW_BASE_TS_ADJ4r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ4r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ4r_t RX_X4_RX_DESKEW_BASE_TS_ADJ4r_t;
#define RX_X4_RX_DESKEW_BASE_TS_ADJ4r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ4r_CLR
#define RX_X4_RX_DESKEW_BASE_TS_ADJ4r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ4r_SET
#define RX_X4_RX_DESKEW_BASE_TS_ADJ4r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ4r_GET
#define RX_X4_RX_DESKEW_BASE_TS_ADJ4r_BASE_TS_FCLK_ADJ_4f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ4r_BASE_TS_FCLK_ADJ_4f_GET
#define RX_X4_RX_DESKEW_BASE_TS_ADJ4r_BASE_TS_FCLK_ADJ_4f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ4r_BASE_TS_FCLK_ADJ_4f_SET
#define RX_X4_RX_DESKEW_BASE_TS_ADJ4r_BIT_POS_ADJ_4f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ4r_BIT_POS_ADJ_4f_GET
#define RX_X4_RX_DESKEW_BASE_TS_ADJ4r_BIT_POS_ADJ_4f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ4r_BIT_POS_ADJ_4f_SET
#define READ_RX_X4_RX_DESKEW_BASE_TS_ADJ4r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_RX_DESKEW_BASE_TS_ADJ4r
#define WRITE_RX_X4_RX_DESKEW_BASE_TS_ADJ4r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_RX_DESKEW_BASE_TS_ADJ4r
#define MODIFY_RX_X4_RX_DESKEW_BASE_TS_ADJ4r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_RX_DESKEW_BASE_TS_ADJ4r
#define READLN_RX_X4_RX_DESKEW_BASE_TS_ADJ4r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_RX_DESKEW_BASE_TS_ADJ4r
#define WRITELN_RX_X4_RX_DESKEW_BASE_TS_ADJ4r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_RX_DESKEW_BASE_TS_ADJ4r
#define WRITEALL_RX_X4_RX_DESKEW_BASE_TS_ADJ4r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_RX_DESKEW_BASE_TS_ADJ4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_BASE_TS_ADJ4r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_X4_RX_DESKEW_AM_OFFS4
 * BLOCKS:   RX_X4_STATUS6
 * REGADDR:  0xc39e
 * DESC:     Rx AM Block Offset status(Per Virtual lane) for Deskew
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     AM_BLOCK_OFFSET_4 Indicates the block offset from the block that carries the Rx base timestamp to the AM block.The block size is 66bits for CL82 ports that run with or without CL74 FEC.The block size is 60 for CL82 ports that run with CL91.On Deskew event, this deskew status information is provided for each Virtual Lane using multiple copies of this register as follows,In 100G MLD mode(Port0) - VL4(1st copy)/VL9(2nd copy)/VL14(3rd copy)/VL19(4th copy)
 *     CL74_FEC_BLOCK_NUM_4 Indicates the CL74 FEC block number of the AM block within the CL74 codeword. Need to be used only for ports that employ CL74
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS4r (0x0000c39e | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS4r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_RX_DESKEW_AM_OFFS4.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS4r_s {
	uint32_t v[1];
	uint32_t rx_x4_rx_deskew_am_offs4[1];
	uint32_t _rx_x4_rx_deskew_am_offs4;
} BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS4r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS4r_CLR(r) (r).rx_x4_rx_deskew_am_offs4[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS4r_SET(r,d) (r).rx_x4_rx_deskew_am_offs4[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS4r_GET(r) (r).rx_x4_rx_deskew_am_offs4[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS4r_CL74_FEC_BLOCK_NUM_4f_GET(r) ((((r).rx_x4_rx_deskew_am_offs4[0]) >> 6) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS4r_CL74_FEC_BLOCK_NUM_4f_SET(r,f) (r).rx_x4_rx_deskew_am_offs4[0]=(((r).rx_x4_rx_deskew_am_offs4[0] & ~((uint32_t)0x1f << 6)) | ((((uint32_t)f) & 0x1f) << 6)) | (31 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS4r_AM_BLOCK_OFFSET_4f_GET(r) (((r).rx_x4_rx_deskew_am_offs4[0]) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS4r_AM_BLOCK_OFFSET_4f_SET(r,f) (r).rx_x4_rx_deskew_am_offs4[0]=(((r).rx_x4_rx_deskew_am_offs4[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access RX_X4_RX_DESKEW_AM_OFFS4.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_X4_RX_DESKEW_AM_OFFS4r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS4r,(_r._rx_x4_rx_deskew_am_offs4))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_RX_DESKEW_AM_OFFS4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS4r,(_r._rx_x4_rx_deskew_am_offs4)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_RX_DESKEW_AM_OFFS4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS4r,(_r._rx_x4_rx_deskew_am_offs4))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_RX_DESKEW_AM_OFFS4r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_rx_deskew_am_offs4))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_RX_DESKEW_AM_OFFS4r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_rx_deskew_am_offs4))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_RX_DESKEW_AM_OFFS4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS4r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_rx_deskew_am_offs4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_RX_DESKEW_AM_OFFS4r BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS4r
#define RX_X4_RX_DESKEW_AM_OFFS4r_SIZE BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS4r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS4r_t RX_X4_RX_DESKEW_AM_OFFS4r_t;
#define RX_X4_RX_DESKEW_AM_OFFS4r_CLR BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS4r_CLR
#define RX_X4_RX_DESKEW_AM_OFFS4r_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS4r_SET
#define RX_X4_RX_DESKEW_AM_OFFS4r_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS4r_GET
#define RX_X4_RX_DESKEW_AM_OFFS4r_CL74_FEC_BLOCK_NUM_4f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS4r_CL74_FEC_BLOCK_NUM_4f_GET
#define RX_X4_RX_DESKEW_AM_OFFS4r_CL74_FEC_BLOCK_NUM_4f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS4r_CL74_FEC_BLOCK_NUM_4f_SET
#define RX_X4_RX_DESKEW_AM_OFFS4r_AM_BLOCK_OFFSET_4f_GET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS4r_AM_BLOCK_OFFSET_4f_GET
#define RX_X4_RX_DESKEW_AM_OFFS4r_AM_BLOCK_OFFSET_4f_SET BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS4r_AM_BLOCK_OFFSET_4f_SET
#define READ_RX_X4_RX_DESKEW_AM_OFFS4r BCMI_TSCF_GEN3_XGXS_READ_RX_X4_RX_DESKEW_AM_OFFS4r
#define WRITE_RX_X4_RX_DESKEW_AM_OFFS4r BCMI_TSCF_GEN3_XGXS_WRITE_RX_X4_RX_DESKEW_AM_OFFS4r
#define MODIFY_RX_X4_RX_DESKEW_AM_OFFS4r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_X4_RX_DESKEW_AM_OFFS4r
#define READLN_RX_X4_RX_DESKEW_AM_OFFS4r BCMI_TSCF_GEN3_XGXS_READLN_RX_X4_RX_DESKEW_AM_OFFS4r
#define WRITELN_RX_X4_RX_DESKEW_AM_OFFS4r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_X4_RX_DESKEW_AM_OFFS4r
#define WRITEALL_RX_X4_RX_DESKEW_AM_OFFS4r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_X4_RX_DESKEW_AM_OFFS4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_X4_RX_DESKEW_AM_OFFS4r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  ACC_CTL
 * BLOCKS:   MDIO_CL22_IEEE_COM
 * REGADDR:  0x000d
 * DEVAD:    1
 * DESC:     MMD_access_control
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MDIO_DEVAD       Device address
 *     MDIO_FUNCTION    00 = address01 = data, no post increment10 = data, post increment on reads and write11 = data, post increment on writes only
 */
#define BCMI_TSCF_GEN3_XGXS_ACC_CTLr (0x0001000d | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_ACC_CTLr_SIZE 4

/*
 * This structure should be used to declare and program ACC_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_ACC_CTLr_s {
	uint32_t v[1];
	uint32_t acc_ctl[1];
	uint32_t _acc_ctl;
} BCMI_TSCF_GEN3_XGXS_ACC_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_ACC_CTLr_CLR(r) (r).acc_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_ACC_CTLr_SET(r,d) (r).acc_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_ACC_CTLr_GET(r) (r).acc_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_ACC_CTLr_MDIO_FUNCTIONf_GET(r) ((((r).acc_ctl[0]) >> 14) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_ACC_CTLr_MDIO_FUNCTIONf_SET(r,f) (r).acc_ctl[0]=(((r).acc_ctl[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_ACC_CTLr_MDIO_DEVADf_GET(r) (((r).acc_ctl[0]) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_ACC_CTLr_MDIO_DEVADf_SET(r,f) (r).acc_ctl[0]=(((r).acc_ctl[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access ACC_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_ACC_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_ACC_CTLr,(_r._acc_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_ACC_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_ACC_CTLr,(_r._acc_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_ACC_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_ACC_CTLr,(_r._acc_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_ACC_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_ACC_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._acc_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_ACC_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_ACC_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._acc_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_ACC_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_ACC_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._acc_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ACC_CTLr BCMI_TSCF_GEN3_XGXS_ACC_CTLr
#define ACC_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_ACC_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_ACC_CTLr_t ACC_CTLr_t;
#define ACC_CTLr_CLR BCMI_TSCF_GEN3_XGXS_ACC_CTLr_CLR
#define ACC_CTLr_SET BCMI_TSCF_GEN3_XGXS_ACC_CTLr_SET
#define ACC_CTLr_GET BCMI_TSCF_GEN3_XGXS_ACC_CTLr_GET
#define ACC_CTLr_MDIO_FUNCTIONf_GET BCMI_TSCF_GEN3_XGXS_ACC_CTLr_MDIO_FUNCTIONf_GET
#define ACC_CTLr_MDIO_FUNCTIONf_SET BCMI_TSCF_GEN3_XGXS_ACC_CTLr_MDIO_FUNCTIONf_SET
#define ACC_CTLr_MDIO_DEVADf_GET BCMI_TSCF_GEN3_XGXS_ACC_CTLr_MDIO_DEVADf_GET
#define ACC_CTLr_MDIO_DEVADf_SET BCMI_TSCF_GEN3_XGXS_ACC_CTLr_MDIO_DEVADf_SET
#define READ_ACC_CTLr BCMI_TSCF_GEN3_XGXS_READ_ACC_CTLr
#define WRITE_ACC_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_ACC_CTLr
#define MODIFY_ACC_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_ACC_CTLr
#define READLN_ACC_CTLr BCMI_TSCF_GEN3_XGXS_READLN_ACC_CTLr
#define WRITELN_ACC_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_ACC_CTLr
#define WRITEALL_ACC_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_ACC_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_ACC_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  ACC_ADDR_DATA
 * BLOCKS:   MDIO_CL22_IEEE_COM
 * REGADDR:  0x000e
 * DEVAD:    1
 * DESC:     MMD_access_addr_data
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MDIO_ADDR_DATA   If function field in PMD access control register is set to 00then this is the address register. Otherwise it is the data register
 */
#define BCMI_TSCF_GEN3_XGXS_ACC_ADDR_DATAr (0x0001000e | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_ACC_ADDR_DATAr_SIZE 4

/*
 * This structure should be used to declare and program ACC_ADDR_DATA.
 */
typedef union BCMI_TSCF_GEN3_XGXS_ACC_ADDR_DATAr_s {
	uint32_t v[1];
	uint32_t acc_addr_data[1];
	uint32_t _acc_addr_data;
} BCMI_TSCF_GEN3_XGXS_ACC_ADDR_DATAr_t;

#define BCMI_TSCF_GEN3_XGXS_ACC_ADDR_DATAr_CLR(r) (r).acc_addr_data[0] = 0
#define BCMI_TSCF_GEN3_XGXS_ACC_ADDR_DATAr_SET(r,d) (r).acc_addr_data[0] = d
#define BCMI_TSCF_GEN3_XGXS_ACC_ADDR_DATAr_GET(r) (r).acc_addr_data[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_ACC_ADDR_DATAr_MDIO_ADDR_DATAf_GET(r) (((r).acc_addr_data[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_ACC_ADDR_DATAr_MDIO_ADDR_DATAf_SET(r,f) (r).acc_addr_data[0]=(((r).acc_addr_data[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access ACC_ADDR_DATA.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_ACC_ADDR_DATAr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_ACC_ADDR_DATAr,(_r._acc_addr_data))
#define BCMI_TSCF_GEN3_XGXS_WRITE_ACC_ADDR_DATAr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_ACC_ADDR_DATAr,(_r._acc_addr_data)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_ACC_ADDR_DATAr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_ACC_ADDR_DATAr,(_r._acc_addr_data))
#define BCMI_TSCF_GEN3_XGXS_READLN_ACC_ADDR_DATAr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_ACC_ADDR_DATAr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._acc_addr_data))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_ACC_ADDR_DATAr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_ACC_ADDR_DATAr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._acc_addr_data))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_ACC_ADDR_DATAr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_ACC_ADDR_DATAr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._acc_addr_data))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ACC_ADDR_DATAr BCMI_TSCF_GEN3_XGXS_ACC_ADDR_DATAr
#define ACC_ADDR_DATAr_SIZE BCMI_TSCF_GEN3_XGXS_ACC_ADDR_DATAr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_ACC_ADDR_DATAr_t ACC_ADDR_DATAr_t;
#define ACC_ADDR_DATAr_CLR BCMI_TSCF_GEN3_XGXS_ACC_ADDR_DATAr_CLR
#define ACC_ADDR_DATAr_SET BCMI_TSCF_GEN3_XGXS_ACC_ADDR_DATAr_SET
#define ACC_ADDR_DATAr_GET BCMI_TSCF_GEN3_XGXS_ACC_ADDR_DATAr_GET
#define ACC_ADDR_DATAr_MDIO_ADDR_DATAf_GET BCMI_TSCF_GEN3_XGXS_ACC_ADDR_DATAr_MDIO_ADDR_DATAf_GET
#define ACC_ADDR_DATAr_MDIO_ADDR_DATAf_SET BCMI_TSCF_GEN3_XGXS_ACC_ADDR_DATAr_MDIO_ADDR_DATAf_SET
#define READ_ACC_ADDR_DATAr BCMI_TSCF_GEN3_XGXS_READ_ACC_ADDR_DATAr
#define WRITE_ACC_ADDR_DATAr BCMI_TSCF_GEN3_XGXS_WRITE_ACC_ADDR_DATAr
#define MODIFY_ACC_ADDR_DATAr BCMI_TSCF_GEN3_XGXS_MODIFY_ACC_ADDR_DATAr
#define READLN_ACC_ADDR_DATAr BCMI_TSCF_GEN3_XGXS_READLN_ACC_ADDR_DATAr
#define WRITELN_ACC_ADDR_DATAr BCMI_TSCF_GEN3_XGXS_WRITELN_ACC_ADDR_DATAr
#define WRITEALL_ACC_ADDR_DATAr BCMI_TSCF_GEN3_XGXS_WRITEALL_ACC_ADDR_DATAr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_ACC_ADDR_DATAr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  CL93N72_IT_BASE_R_PMD_CTL
 * BLOCKS:   CL93N72_IEEE_TX
 * REGADDR:  0x0096
 * DEVAD:    1
 * DESC:     BASE-R PMD control register 150
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL93N72_IEEE_RESTART_TRAINING 1 = Restart 10GBASE-KR cl93n72 training0 = Normal operation(self clearing)
 *     CL93N72_IEEE_TRAINING_ENABLE 1 = Enable the 10GBASE-KR start-up protocol0 = Disable the 10GBASE-KR start-up protocol
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_CTLr (0x00010096 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_CTLr_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_IT_BASE_R_PMD_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_CTLr_s {
	uint32_t v[1];
	uint32_t cl93n72_it_base_r_pmd_ctl[1];
	uint32_t _cl93n72_it_base_r_pmd_ctl;
} BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_CTLr_CLR(r) (r).cl93n72_it_base_r_pmd_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_CTLr_SET(r,d) (r).cl93n72_it_base_r_pmd_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_CTLr_GET(r) (r).cl93n72_it_base_r_pmd_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_CTLr_CL93N72_IEEE_TRAINING_ENABLEf_GET(r) ((((r).cl93n72_it_base_r_pmd_ctl[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_CTLr_CL93N72_IEEE_TRAINING_ENABLEf_SET(r,f) (r).cl93n72_it_base_r_pmd_ctl[0]=(((r).cl93n72_it_base_r_pmd_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_CTLr_CL93N72_IEEE_RESTART_TRAININGf_GET(r) (((r).cl93n72_it_base_r_pmd_ctl[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_CTLr_CL93N72_IEEE_RESTART_TRAININGf_SET(r,f) (r).cl93n72_it_base_r_pmd_ctl[0]=(((r).cl93n72_it_base_r_pmd_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access CL93N72_IT_BASE_R_PMD_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_CL93N72_IT_BASE_R_PMD_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_CTLr,(_r._cl93n72_it_base_r_pmd_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_IT_BASE_R_PMD_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_CTLr,(_r._cl93n72_it_base_r_pmd_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_IT_BASE_R_PMD_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_CTLr,(_r._cl93n72_it_base_r_pmd_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_IT_BASE_R_PMD_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_it_base_r_pmd_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_IT_BASE_R_PMD_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_it_base_r_pmd_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_IT_BASE_R_PMD_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_it_base_r_pmd_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_IT_BASE_R_PMD_CTLr BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_CTLr
#define CL93N72_IT_BASE_R_PMD_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_CTLr_t CL93N72_IT_BASE_R_PMD_CTLr_t;
#define CL93N72_IT_BASE_R_PMD_CTLr_CLR BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_CTLr_CLR
#define CL93N72_IT_BASE_R_PMD_CTLr_SET BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_CTLr_SET
#define CL93N72_IT_BASE_R_PMD_CTLr_GET BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_CTLr_GET
#define CL93N72_IT_BASE_R_PMD_CTLr_CL93N72_IEEE_TRAINING_ENABLEf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_CTLr_CL93N72_IEEE_TRAINING_ENABLEf_GET
#define CL93N72_IT_BASE_R_PMD_CTLr_CL93N72_IEEE_TRAINING_ENABLEf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_CTLr_CL93N72_IEEE_TRAINING_ENABLEf_SET
#define CL93N72_IT_BASE_R_PMD_CTLr_CL93N72_IEEE_RESTART_TRAININGf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_CTLr_CL93N72_IEEE_RESTART_TRAININGf_GET
#define CL93N72_IT_BASE_R_PMD_CTLr_CL93N72_IEEE_RESTART_TRAININGf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_CTLr_CL93N72_IEEE_RESTART_TRAININGf_SET
#define READ_CL93N72_IT_BASE_R_PMD_CTLr BCMI_TSCF_GEN3_XGXS_READ_CL93N72_IT_BASE_R_PMD_CTLr
#define WRITE_CL93N72_IT_BASE_R_PMD_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_IT_BASE_R_PMD_CTLr
#define MODIFY_CL93N72_IT_BASE_R_PMD_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_IT_BASE_R_PMD_CTLr
#define READLN_CL93N72_IT_BASE_R_PMD_CTLr BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_IT_BASE_R_PMD_CTLr
#define WRITELN_CL93N72_IT_BASE_R_PMD_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_IT_BASE_R_PMD_CTLr
#define WRITEALL_CL93N72_IT_BASE_R_PMD_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_IT_BASE_R_PMD_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  CL93N72_IT_BASE_R_PMD_STS
 * BLOCKS:   CL93N72_IEEE_TX
 * REGADDR:  0x0097
 * DEVAD:    1
 * DESC:     BASE-R PMD status register 151
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CL93N72_IEEE_RECEIVER_STATUS 1 = Receiver trained and ready to receive data0 = Receiver training
 *     CL93N72_IEEE_FRAME_LOCK 1 = Training frame delineation detected0 = Training frame delineation not detected
 *     CL93N72_IEEE_TRAINING_STATUS 1 = Start-up protocol in progress0 = Start-up protocol complete
 *     CL93N72_IEEE_TRAINING_FAILURE 1 = Training failure has been detected0 = Training failure has not been detected
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_STSr (0x00010097 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_STSr_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_IT_BASE_R_PMD_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_STSr_s {
	uint32_t v[1];
	uint32_t cl93n72_it_base_r_pmd_sts[1];
	uint32_t _cl93n72_it_base_r_pmd_sts;
} BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_STSr_CLR(r) (r).cl93n72_it_base_r_pmd_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_STSr_SET(r,d) (r).cl93n72_it_base_r_pmd_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_STSr_GET(r) (r).cl93n72_it_base_r_pmd_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_STSr_CL93N72_IEEE_TRAINING_FAILUREf_GET(r) ((((r).cl93n72_it_base_r_pmd_sts[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_STSr_CL93N72_IEEE_TRAINING_FAILUREf_SET(r,f) (r).cl93n72_it_base_r_pmd_sts[0]=(((r).cl93n72_it_base_r_pmd_sts[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_STSr_CL93N72_IEEE_TRAINING_STATUSf_GET(r) ((((r).cl93n72_it_base_r_pmd_sts[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_STSr_CL93N72_IEEE_TRAINING_STATUSf_SET(r,f) (r).cl93n72_it_base_r_pmd_sts[0]=(((r).cl93n72_it_base_r_pmd_sts[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_STSr_CL93N72_IEEE_FRAME_LOCKf_GET(r) ((((r).cl93n72_it_base_r_pmd_sts[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_STSr_CL93N72_IEEE_FRAME_LOCKf_SET(r,f) (r).cl93n72_it_base_r_pmd_sts[0]=(((r).cl93n72_it_base_r_pmd_sts[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_STSr_CL93N72_IEEE_RECEIVER_STATUSf_GET(r) (((r).cl93n72_it_base_r_pmd_sts[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_STSr_CL93N72_IEEE_RECEIVER_STATUSf_SET(r,f) (r).cl93n72_it_base_r_pmd_sts[0]=(((r).cl93n72_it_base_r_pmd_sts[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access CL93N72_IT_BASE_R_PMD_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_CL93N72_IT_BASE_R_PMD_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_STSr,(_r._cl93n72_it_base_r_pmd_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_IT_BASE_R_PMD_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_STSr,(_r._cl93n72_it_base_r_pmd_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_IT_BASE_R_PMD_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_STSr,(_r._cl93n72_it_base_r_pmd_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_IT_BASE_R_PMD_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_it_base_r_pmd_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_IT_BASE_R_PMD_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_it_base_r_pmd_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_IT_BASE_R_PMD_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_it_base_r_pmd_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_IT_BASE_R_PMD_STSr BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_STSr
#define CL93N72_IT_BASE_R_PMD_STSr_SIZE BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_STSr_t CL93N72_IT_BASE_R_PMD_STSr_t;
#define CL93N72_IT_BASE_R_PMD_STSr_CLR BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_STSr_CLR
#define CL93N72_IT_BASE_R_PMD_STSr_SET BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_STSr_SET
#define CL93N72_IT_BASE_R_PMD_STSr_GET BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_STSr_GET
#define CL93N72_IT_BASE_R_PMD_STSr_CL93N72_IEEE_TRAINING_FAILUREf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_STSr_CL93N72_IEEE_TRAINING_FAILUREf_GET
#define CL93N72_IT_BASE_R_PMD_STSr_CL93N72_IEEE_TRAINING_FAILUREf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_STSr_CL93N72_IEEE_TRAINING_FAILUREf_SET
#define CL93N72_IT_BASE_R_PMD_STSr_CL93N72_IEEE_TRAINING_STATUSf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_STSr_CL93N72_IEEE_TRAINING_STATUSf_GET
#define CL93N72_IT_BASE_R_PMD_STSr_CL93N72_IEEE_TRAINING_STATUSf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_STSr_CL93N72_IEEE_TRAINING_STATUSf_SET
#define CL93N72_IT_BASE_R_PMD_STSr_CL93N72_IEEE_FRAME_LOCKf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_STSr_CL93N72_IEEE_FRAME_LOCKf_GET
#define CL93N72_IT_BASE_R_PMD_STSr_CL93N72_IEEE_FRAME_LOCKf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_STSr_CL93N72_IEEE_FRAME_LOCKf_SET
#define CL93N72_IT_BASE_R_PMD_STSr_CL93N72_IEEE_RECEIVER_STATUSf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_STSr_CL93N72_IEEE_RECEIVER_STATUSf_GET
#define CL93N72_IT_BASE_R_PMD_STSr_CL93N72_IEEE_RECEIVER_STATUSf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_STSr_CL93N72_IEEE_RECEIVER_STATUSf_SET
#define READ_CL93N72_IT_BASE_R_PMD_STSr BCMI_TSCF_GEN3_XGXS_READ_CL93N72_IT_BASE_R_PMD_STSr
#define WRITE_CL93N72_IT_BASE_R_PMD_STSr BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_IT_BASE_R_PMD_STSr
#define MODIFY_CL93N72_IT_BASE_R_PMD_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_IT_BASE_R_PMD_STSr
#define READLN_CL93N72_IT_BASE_R_PMD_STSr BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_IT_BASE_R_PMD_STSr
#define WRITELN_CL93N72_IT_BASE_R_PMD_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_IT_BASE_R_PMD_STSr
#define WRITEALL_CL93N72_IT_BASE_R_PMD_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_IT_BASE_R_PMD_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_PMD_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  CL93N72_IR_BASE_R_LP_COEFF_UPD
 * BLOCKS:   CL93N72_IEEE_RX
 * REGADDR:  0x0098
 * DEVAD:    1
 * DESC:     BASE-R LP coeff update register 152
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CL93N72_IEEE_LP_COEFF_UPDATE This register reflects the first 16-bit Word of the training framemost recently recieived from the Link PartnerThis register is not writeable when cl93n72 training is disabled asindicated in the IEEE spec.15:14 Reserved13   Preset1 = Preset coefficients0 = Normal operation12   Initialize 1 = Initialize coefficients0 = Normal operation11:6 Reserved5:4  Coefficient (+1) update5 41 1 = reserved0 1 = increment1 0 = decrement0 0 = hold3:2  Coefficient (0) update3 21 1 = reserved0 1 = increment1 0 = decrement0 0 = hold1:0  Coefficient (-1) update1 01 1 = reserved0 1 = increment1 0 = decrement0 0 = hold
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_IR_BASE_R_LP_COEFF_UPDr (0x00010098 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_CL93N72_IR_BASE_R_LP_COEFF_UPDr_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_IR_BASE_R_LP_COEFF_UPD.
 */
typedef union BCMI_TSCF_GEN3_XGXS_CL93N72_IR_BASE_R_LP_COEFF_UPDr_s {
	uint32_t v[1];
	uint32_t cl93n72_ir_base_r_lp_coeff_upd[1];
	uint32_t _cl93n72_ir_base_r_lp_coeff_upd;
} BCMI_TSCF_GEN3_XGXS_CL93N72_IR_BASE_R_LP_COEFF_UPDr_t;

#define BCMI_TSCF_GEN3_XGXS_CL93N72_IR_BASE_R_LP_COEFF_UPDr_CLR(r) (r).cl93n72_ir_base_r_lp_coeff_upd[0] = 0
#define BCMI_TSCF_GEN3_XGXS_CL93N72_IR_BASE_R_LP_COEFF_UPDr_SET(r,d) (r).cl93n72_ir_base_r_lp_coeff_upd[0] = d
#define BCMI_TSCF_GEN3_XGXS_CL93N72_IR_BASE_R_LP_COEFF_UPDr_GET(r) (r).cl93n72_ir_base_r_lp_coeff_upd[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_IR_BASE_R_LP_COEFF_UPDr_CL93N72_IEEE_LP_COEFF_UPDATEf_GET(r) (((r).cl93n72_ir_base_r_lp_coeff_upd[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_IR_BASE_R_LP_COEFF_UPDr_CL93N72_IEEE_LP_COEFF_UPDATEf_SET(r,f) (r).cl93n72_ir_base_r_lp_coeff_upd[0]=(((r).cl93n72_ir_base_r_lp_coeff_upd[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access CL93N72_IR_BASE_R_LP_COEFF_UPD.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_CL93N72_IR_BASE_R_LP_COEFF_UPDr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_IR_BASE_R_LP_COEFF_UPDr,(_r._cl93n72_ir_base_r_lp_coeff_upd))
#define BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_IR_BASE_R_LP_COEFF_UPDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_IR_BASE_R_LP_COEFF_UPDr,(_r._cl93n72_ir_base_r_lp_coeff_upd)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_IR_BASE_R_LP_COEFF_UPDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_IR_BASE_R_LP_COEFF_UPDr,(_r._cl93n72_ir_base_r_lp_coeff_upd))
#define BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_IR_BASE_R_LP_COEFF_UPDr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_IR_BASE_R_LP_COEFF_UPDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ir_base_r_lp_coeff_upd))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_IR_BASE_R_LP_COEFF_UPDr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_IR_BASE_R_LP_COEFF_UPDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ir_base_r_lp_coeff_upd))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_IR_BASE_R_LP_COEFF_UPDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_IR_BASE_R_LP_COEFF_UPDr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_ir_base_r_lp_coeff_upd))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_IR_BASE_R_LP_COEFF_UPDr BCMI_TSCF_GEN3_XGXS_CL93N72_IR_BASE_R_LP_COEFF_UPDr
#define CL93N72_IR_BASE_R_LP_COEFF_UPDr_SIZE BCMI_TSCF_GEN3_XGXS_CL93N72_IR_BASE_R_LP_COEFF_UPDr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_CL93N72_IR_BASE_R_LP_COEFF_UPDr_t CL93N72_IR_BASE_R_LP_COEFF_UPDr_t;
#define CL93N72_IR_BASE_R_LP_COEFF_UPDr_CLR BCMI_TSCF_GEN3_XGXS_CL93N72_IR_BASE_R_LP_COEFF_UPDr_CLR
#define CL93N72_IR_BASE_R_LP_COEFF_UPDr_SET BCMI_TSCF_GEN3_XGXS_CL93N72_IR_BASE_R_LP_COEFF_UPDr_SET
#define CL93N72_IR_BASE_R_LP_COEFF_UPDr_GET BCMI_TSCF_GEN3_XGXS_CL93N72_IR_BASE_R_LP_COEFF_UPDr_GET
#define CL93N72_IR_BASE_R_LP_COEFF_UPDr_CL93N72_IEEE_LP_COEFF_UPDATEf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_IR_BASE_R_LP_COEFF_UPDr_CL93N72_IEEE_LP_COEFF_UPDATEf_GET
#define CL93N72_IR_BASE_R_LP_COEFF_UPDr_CL93N72_IEEE_LP_COEFF_UPDATEf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_IR_BASE_R_LP_COEFF_UPDr_CL93N72_IEEE_LP_COEFF_UPDATEf_SET
#define READ_CL93N72_IR_BASE_R_LP_COEFF_UPDr BCMI_TSCF_GEN3_XGXS_READ_CL93N72_IR_BASE_R_LP_COEFF_UPDr
#define WRITE_CL93N72_IR_BASE_R_LP_COEFF_UPDr BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_IR_BASE_R_LP_COEFF_UPDr
#define MODIFY_CL93N72_IR_BASE_R_LP_COEFF_UPDr BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_IR_BASE_R_LP_COEFF_UPDr
#define READLN_CL93N72_IR_BASE_R_LP_COEFF_UPDr BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_IR_BASE_R_LP_COEFF_UPDr
#define WRITELN_CL93N72_IR_BASE_R_LP_COEFF_UPDr BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_IR_BASE_R_LP_COEFF_UPDr
#define WRITEALL_CL93N72_IR_BASE_R_LP_COEFF_UPDr BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_IR_BASE_R_LP_COEFF_UPDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_CL93N72_IR_BASE_R_LP_COEFF_UPDr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  CL93N72_IR_BASE_R_LP_STS_REP
 * BLOCKS:   CL93N72_IEEE_RX
 * REGADDR:  0x0099
 * DEVAD:    1
 * DESC:     BASE-R LP status report register 153
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CL93N72_IEEE_LP_STATUS_REPORT This register reflects the second 16-bit Word of the training framemost recently recieived from the Link Partner15   Receiver Ready1 =  The LP receiver has determined that training iscomplete and is prepared to receive data0 =  The LP receiver is requesting that training continue14:6 Reserved5:4  Coefficient (+1) status5 41 1 = maximum1 0 = minimum0 1 = updated0 0 = not_updated3:2  Coefficient (0) status3 21 1 = maximum1 0 = minimum0 1 = updated0 0 = not_updated1:0  Coefficient (-1) status1 01 1 = maximum1 0 = minimum0 1 = updated0 0 = not_updated
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_IR_BASE_R_LP_STS_REPr (0x00010099 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_CL93N72_IR_BASE_R_LP_STS_REPr_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_IR_BASE_R_LP_STS_REP.
 */
typedef union BCMI_TSCF_GEN3_XGXS_CL93N72_IR_BASE_R_LP_STS_REPr_s {
	uint32_t v[1];
	uint32_t cl93n72_ir_base_r_lp_sts_rep[1];
	uint32_t _cl93n72_ir_base_r_lp_sts_rep;
} BCMI_TSCF_GEN3_XGXS_CL93N72_IR_BASE_R_LP_STS_REPr_t;

#define BCMI_TSCF_GEN3_XGXS_CL93N72_IR_BASE_R_LP_STS_REPr_CLR(r) (r).cl93n72_ir_base_r_lp_sts_rep[0] = 0
#define BCMI_TSCF_GEN3_XGXS_CL93N72_IR_BASE_R_LP_STS_REPr_SET(r,d) (r).cl93n72_ir_base_r_lp_sts_rep[0] = d
#define BCMI_TSCF_GEN3_XGXS_CL93N72_IR_BASE_R_LP_STS_REPr_GET(r) (r).cl93n72_ir_base_r_lp_sts_rep[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_IR_BASE_R_LP_STS_REPr_CL93N72_IEEE_LP_STATUS_REPORTf_GET(r) (((r).cl93n72_ir_base_r_lp_sts_rep[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_IR_BASE_R_LP_STS_REPr_CL93N72_IEEE_LP_STATUS_REPORTf_SET(r,f) (r).cl93n72_ir_base_r_lp_sts_rep[0]=(((r).cl93n72_ir_base_r_lp_sts_rep[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access CL93N72_IR_BASE_R_LP_STS_REP.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_CL93N72_IR_BASE_R_LP_STS_REPr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_IR_BASE_R_LP_STS_REPr,(_r._cl93n72_ir_base_r_lp_sts_rep))
#define BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_IR_BASE_R_LP_STS_REPr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_IR_BASE_R_LP_STS_REPr,(_r._cl93n72_ir_base_r_lp_sts_rep)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_IR_BASE_R_LP_STS_REPr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_IR_BASE_R_LP_STS_REPr,(_r._cl93n72_ir_base_r_lp_sts_rep))
#define BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_IR_BASE_R_LP_STS_REPr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_IR_BASE_R_LP_STS_REPr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ir_base_r_lp_sts_rep))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_IR_BASE_R_LP_STS_REPr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_IR_BASE_R_LP_STS_REPr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ir_base_r_lp_sts_rep))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_IR_BASE_R_LP_STS_REPr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_IR_BASE_R_LP_STS_REPr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_ir_base_r_lp_sts_rep))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_IR_BASE_R_LP_STS_REPr BCMI_TSCF_GEN3_XGXS_CL93N72_IR_BASE_R_LP_STS_REPr
#define CL93N72_IR_BASE_R_LP_STS_REPr_SIZE BCMI_TSCF_GEN3_XGXS_CL93N72_IR_BASE_R_LP_STS_REPr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_CL93N72_IR_BASE_R_LP_STS_REPr_t CL93N72_IR_BASE_R_LP_STS_REPr_t;
#define CL93N72_IR_BASE_R_LP_STS_REPr_CLR BCMI_TSCF_GEN3_XGXS_CL93N72_IR_BASE_R_LP_STS_REPr_CLR
#define CL93N72_IR_BASE_R_LP_STS_REPr_SET BCMI_TSCF_GEN3_XGXS_CL93N72_IR_BASE_R_LP_STS_REPr_SET
#define CL93N72_IR_BASE_R_LP_STS_REPr_GET BCMI_TSCF_GEN3_XGXS_CL93N72_IR_BASE_R_LP_STS_REPr_GET
#define CL93N72_IR_BASE_R_LP_STS_REPr_CL93N72_IEEE_LP_STATUS_REPORTf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_IR_BASE_R_LP_STS_REPr_CL93N72_IEEE_LP_STATUS_REPORTf_GET
#define CL93N72_IR_BASE_R_LP_STS_REPr_CL93N72_IEEE_LP_STATUS_REPORTf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_IR_BASE_R_LP_STS_REPr_CL93N72_IEEE_LP_STATUS_REPORTf_SET
#define READ_CL93N72_IR_BASE_R_LP_STS_REPr BCMI_TSCF_GEN3_XGXS_READ_CL93N72_IR_BASE_R_LP_STS_REPr
#define WRITE_CL93N72_IR_BASE_R_LP_STS_REPr BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_IR_BASE_R_LP_STS_REPr
#define MODIFY_CL93N72_IR_BASE_R_LP_STS_REPr BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_IR_BASE_R_LP_STS_REPr
#define READLN_CL93N72_IR_BASE_R_LP_STS_REPr BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_IR_BASE_R_LP_STS_REPr
#define WRITELN_CL93N72_IR_BASE_R_LP_STS_REPr BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_IR_BASE_R_LP_STS_REPr
#define WRITEALL_CL93N72_IR_BASE_R_LP_STS_REPr BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_IR_BASE_R_LP_STS_REPr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_CL93N72_IR_BASE_R_LP_STS_REPr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  CL93N72_IT_BASE_R_LD_COEFF_UPD
 * BLOCKS:   CL93N72_IEEE_TX
 * REGADDR:  0x009a
 * DEVAD:    1
 * DESC:     BASE-R LD coeff update register 154
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CL93N72_IEEE_LD_COEFF_UPDATE This register reflects the first 16-bit Word of the outgoing training framesent by the Local Device15:14 Reserved13   Preset1 = Preset coefficients0 = Normal operation12   Initialize 1 = Initialize coefficients0 = Normal operation11:6 Reserved5:4  Coefficient (+1) update5 41 1 = reserved0 1 = increment1 0 = decrement0 0 = hold3:2  Coefficient (0) update3 21 1 = reserved0 1 = increment1 0 = decrement0 0 = hold1:0  Coefficient (-1) update1 01 1 = reserved0 1 = increment1 0 = decrement0 0 = hold
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_LD_COEFF_UPDr (0x0001009a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_LD_COEFF_UPDr_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_IT_BASE_R_LD_COEFF_UPD.
 */
typedef union BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_LD_COEFF_UPDr_s {
	uint32_t v[1];
	uint32_t cl93n72_it_base_r_ld_coeff_upd[1];
	uint32_t _cl93n72_it_base_r_ld_coeff_upd;
} BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_LD_COEFF_UPDr_t;

#define BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_LD_COEFF_UPDr_CLR(r) (r).cl93n72_it_base_r_ld_coeff_upd[0] = 0
#define BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_LD_COEFF_UPDr_SET(r,d) (r).cl93n72_it_base_r_ld_coeff_upd[0] = d
#define BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_LD_COEFF_UPDr_GET(r) (r).cl93n72_it_base_r_ld_coeff_upd[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_LD_COEFF_UPDr_CL93N72_IEEE_LD_COEFF_UPDATEf_GET(r) (((r).cl93n72_it_base_r_ld_coeff_upd[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_LD_COEFF_UPDr_CL93N72_IEEE_LD_COEFF_UPDATEf_SET(r,f) (r).cl93n72_it_base_r_ld_coeff_upd[0]=(((r).cl93n72_it_base_r_ld_coeff_upd[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access CL93N72_IT_BASE_R_LD_COEFF_UPD.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_CL93N72_IT_BASE_R_LD_COEFF_UPDr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_LD_COEFF_UPDr,(_r._cl93n72_it_base_r_ld_coeff_upd))
#define BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_IT_BASE_R_LD_COEFF_UPDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_LD_COEFF_UPDr,(_r._cl93n72_it_base_r_ld_coeff_upd)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_IT_BASE_R_LD_COEFF_UPDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_LD_COEFF_UPDr,(_r._cl93n72_it_base_r_ld_coeff_upd))
#define BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_IT_BASE_R_LD_COEFF_UPDr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_LD_COEFF_UPDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_it_base_r_ld_coeff_upd))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_IT_BASE_R_LD_COEFF_UPDr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_LD_COEFF_UPDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_it_base_r_ld_coeff_upd))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_IT_BASE_R_LD_COEFF_UPDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_LD_COEFF_UPDr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_it_base_r_ld_coeff_upd))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_IT_BASE_R_LD_COEFF_UPDr BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_LD_COEFF_UPDr
#define CL93N72_IT_BASE_R_LD_COEFF_UPDr_SIZE BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_LD_COEFF_UPDr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_LD_COEFF_UPDr_t CL93N72_IT_BASE_R_LD_COEFF_UPDr_t;
#define CL93N72_IT_BASE_R_LD_COEFF_UPDr_CLR BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_LD_COEFF_UPDr_CLR
#define CL93N72_IT_BASE_R_LD_COEFF_UPDr_SET BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_LD_COEFF_UPDr_SET
#define CL93N72_IT_BASE_R_LD_COEFF_UPDr_GET BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_LD_COEFF_UPDr_GET
#define CL93N72_IT_BASE_R_LD_COEFF_UPDr_CL93N72_IEEE_LD_COEFF_UPDATEf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_LD_COEFF_UPDr_CL93N72_IEEE_LD_COEFF_UPDATEf_GET
#define CL93N72_IT_BASE_R_LD_COEFF_UPDr_CL93N72_IEEE_LD_COEFF_UPDATEf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_LD_COEFF_UPDr_CL93N72_IEEE_LD_COEFF_UPDATEf_SET
#define READ_CL93N72_IT_BASE_R_LD_COEFF_UPDr BCMI_TSCF_GEN3_XGXS_READ_CL93N72_IT_BASE_R_LD_COEFF_UPDr
#define WRITE_CL93N72_IT_BASE_R_LD_COEFF_UPDr BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_IT_BASE_R_LD_COEFF_UPDr
#define MODIFY_CL93N72_IT_BASE_R_LD_COEFF_UPDr BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_IT_BASE_R_LD_COEFF_UPDr
#define READLN_CL93N72_IT_BASE_R_LD_COEFF_UPDr BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_IT_BASE_R_LD_COEFF_UPDr
#define WRITELN_CL93N72_IT_BASE_R_LD_COEFF_UPDr BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_IT_BASE_R_LD_COEFF_UPDr
#define WRITEALL_CL93N72_IT_BASE_R_LD_COEFF_UPDr BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_IT_BASE_R_LD_COEFF_UPDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_LD_COEFF_UPDr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  CL93N72_IT_BASE_R_LD_STS_REP
 * BLOCKS:   CL93N72_IEEE_TX
 * REGADDR:  0x009b
 * DEVAD:    1
 * DESC:     BASE-R LD status report register 155
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CL93N72_IEEE_LD_STATUS_REPORT This register reflects the second 16-bit Word of the outgoing training framesent by the Local Device15   Receiver Ready1 =  The LD receiver has determined that training iscomplete and is prepared to receive data0 =  The LD receiver is requesting that training continue14:6 Reserved5:4  Coefficient (+1) status5 41 1 = maximum1 0 = minimum0 1 = updated0 0 = not_updated3:2  Coefficient (0) status3 21 1 = maximum1 0 = minimum0 1 = updated0 0 = not_updated1:0  Coefficient (-1) status1 01 1 = maximum1 0 = minimum0 1 = updated0 0 = not_updated
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_LD_STS_REPr (0x0001009b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_LD_STS_REPr_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_IT_BASE_R_LD_STS_REP.
 */
typedef union BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_LD_STS_REPr_s {
	uint32_t v[1];
	uint32_t cl93n72_it_base_r_ld_sts_rep[1];
	uint32_t _cl93n72_it_base_r_ld_sts_rep;
} BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_LD_STS_REPr_t;

#define BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_LD_STS_REPr_CLR(r) (r).cl93n72_it_base_r_ld_sts_rep[0] = 0
#define BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_LD_STS_REPr_SET(r,d) (r).cl93n72_it_base_r_ld_sts_rep[0] = d
#define BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_LD_STS_REPr_GET(r) (r).cl93n72_it_base_r_ld_sts_rep[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_LD_STS_REPr_CL93N72_IEEE_LD_STATUS_REPORTf_GET(r) (((r).cl93n72_it_base_r_ld_sts_rep[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_LD_STS_REPr_CL93N72_IEEE_LD_STATUS_REPORTf_SET(r,f) (r).cl93n72_it_base_r_ld_sts_rep[0]=(((r).cl93n72_it_base_r_ld_sts_rep[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access CL93N72_IT_BASE_R_LD_STS_REP.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_CL93N72_IT_BASE_R_LD_STS_REPr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_LD_STS_REPr,(_r._cl93n72_it_base_r_ld_sts_rep))
#define BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_IT_BASE_R_LD_STS_REPr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_LD_STS_REPr,(_r._cl93n72_it_base_r_ld_sts_rep)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_IT_BASE_R_LD_STS_REPr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_LD_STS_REPr,(_r._cl93n72_it_base_r_ld_sts_rep))
#define BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_IT_BASE_R_LD_STS_REPr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_LD_STS_REPr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_it_base_r_ld_sts_rep))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_IT_BASE_R_LD_STS_REPr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_LD_STS_REPr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_it_base_r_ld_sts_rep))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_IT_BASE_R_LD_STS_REPr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_LD_STS_REPr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_it_base_r_ld_sts_rep))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_IT_BASE_R_LD_STS_REPr BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_LD_STS_REPr
#define CL93N72_IT_BASE_R_LD_STS_REPr_SIZE BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_LD_STS_REPr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_LD_STS_REPr_t CL93N72_IT_BASE_R_LD_STS_REPr_t;
#define CL93N72_IT_BASE_R_LD_STS_REPr_CLR BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_LD_STS_REPr_CLR
#define CL93N72_IT_BASE_R_LD_STS_REPr_SET BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_LD_STS_REPr_SET
#define CL93N72_IT_BASE_R_LD_STS_REPr_GET BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_LD_STS_REPr_GET
#define CL93N72_IT_BASE_R_LD_STS_REPr_CL93N72_IEEE_LD_STATUS_REPORTf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_LD_STS_REPr_CL93N72_IEEE_LD_STATUS_REPORTf_GET
#define CL93N72_IT_BASE_R_LD_STS_REPr_CL93N72_IEEE_LD_STATUS_REPORTf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_LD_STS_REPr_CL93N72_IEEE_LD_STATUS_REPORTf_SET
#define READ_CL93N72_IT_BASE_R_LD_STS_REPr BCMI_TSCF_GEN3_XGXS_READ_CL93N72_IT_BASE_R_LD_STS_REPr
#define WRITE_CL93N72_IT_BASE_R_LD_STS_REPr BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_IT_BASE_R_LD_STS_REPr
#define MODIFY_CL93N72_IT_BASE_R_LD_STS_REPr BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_IT_BASE_R_LD_STS_REPr
#define READLN_CL93N72_IT_BASE_R_LD_STS_REPr BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_IT_BASE_R_LD_STS_REPr
#define WRITELN_CL93N72_IT_BASE_R_LD_STS_REPr BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_IT_BASE_R_LD_STS_REPr
#define WRITEALL_CL93N72_IT_BASE_R_LD_STS_REPr BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_IT_BASE_R_LD_STS_REPr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_CL93N72_IT_BASE_R_LD_STS_REPr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_RX_PF_CTL_DC_OFFS
 * BLOCKS:   DSC_AFE1
 * REGADDR:  0xd000
 * DEVAD:    1
 * DESC:     rx_pf_ctrl_dc_offset register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RX_PF2_CTRL      DC cut (Low PF),
 *     RX_PF_CTRL       Main Peaking Filter
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PF_CTL_DC_OFFSr (0x0001d000 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PF_CTL_DC_OFFSr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_PF_CTL_DC_OFFS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_RX_PF_CTL_DC_OFFSr_s {
	uint32_t v[1];
	uint32_t dsc_rx_pf_ctl_dc_offs[1];
	uint32_t _dsc_rx_pf_ctl_dc_offs;
} BCMI_TSCF_GEN3_XGXS_DSC_RX_PF_CTL_DC_OFFSr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PF_CTL_DC_OFFSr_CLR(r) (r).dsc_rx_pf_ctl_dc_offs[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PF_CTL_DC_OFFSr_SET(r,d) (r).dsc_rx_pf_ctl_dc_offs[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PF_CTL_DC_OFFSr_GET(r) (r).dsc_rx_pf_ctl_dc_offs[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PF_CTL_DC_OFFSr_RX_PF_CTRLf_GET(r) ((((r).dsc_rx_pf_ctl_dc_offs[0]) >> 11) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PF_CTL_DC_OFFSr_RX_PF_CTRLf_SET(r,f) (r).dsc_rx_pf_ctl_dc_offs[0]=(((r).dsc_rx_pf_ctl_dc_offs[0] & ~((uint32_t)0xf << 11)) | ((((uint32_t)f) & 0xf) << 11)) | (15 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PF_CTL_DC_OFFSr_RX_PF2_CTRLf_GET(r) ((((r).dsc_rx_pf_ctl_dc_offs[0]) >> 8) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PF_CTL_DC_OFFSr_RX_PF2_CTRLf_SET(r,f) (r).dsc_rx_pf_ctl_dc_offs[0]=(((r).dsc_rx_pf_ctl_dc_offs[0] & ~((uint32_t)0x7 << 8)) | ((((uint32_t)f) & 0x7) << 8)) | (7 << (16 + 8))

/*
 * These macros can be used to access DSC_RX_PF_CTL_DC_OFFS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_PF_CTL_DC_OFFSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_PF_CTL_DC_OFFSr,(_r._dsc_rx_pf_ctl_dc_offs))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_PF_CTL_DC_OFFSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_PF_CTL_DC_OFFSr,(_r._dsc_rx_pf_ctl_dc_offs)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_PF_CTL_DC_OFFSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_PF_CTL_DC_OFFSr,(_r._dsc_rx_pf_ctl_dc_offs))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_PF_CTL_DC_OFFSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_PF_CTL_DC_OFFSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_pf_ctl_dc_offs))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_PF_CTL_DC_OFFSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_PF_CTL_DC_OFFSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_pf_ctl_dc_offs))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_PF_CTL_DC_OFFSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_PF_CTL_DC_OFFSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_pf_ctl_dc_offs))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_PF_CTL_DC_OFFSr BCMI_TSCF_GEN3_XGXS_DSC_RX_PF_CTL_DC_OFFSr
#define DSC_RX_PF_CTL_DC_OFFSr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_RX_PF_CTL_DC_OFFSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_RX_PF_CTL_DC_OFFSr_t DSC_RX_PF_CTL_DC_OFFSr_t;
#define DSC_RX_PF_CTL_DC_OFFSr_CLR BCMI_TSCF_GEN3_XGXS_DSC_RX_PF_CTL_DC_OFFSr_CLR
#define DSC_RX_PF_CTL_DC_OFFSr_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_PF_CTL_DC_OFFSr_SET
#define DSC_RX_PF_CTL_DC_OFFSr_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_PF_CTL_DC_OFFSr_GET
#define DSC_RX_PF_CTL_DC_OFFSr_RX_PF_CTRLf_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_PF_CTL_DC_OFFSr_RX_PF_CTRLf_GET
#define DSC_RX_PF_CTL_DC_OFFSr_RX_PF_CTRLf_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_PF_CTL_DC_OFFSr_RX_PF_CTRLf_SET
#define DSC_RX_PF_CTL_DC_OFFSr_RX_PF2_CTRLf_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_PF_CTL_DC_OFFSr_RX_PF2_CTRLf_GET
#define DSC_RX_PF_CTL_DC_OFFSr_RX_PF2_CTRLf_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_PF_CTL_DC_OFFSr_RX_PF2_CTRLf_SET
#define READ_DSC_RX_PF_CTL_DC_OFFSr BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_PF_CTL_DC_OFFSr
#define WRITE_DSC_RX_PF_CTL_DC_OFFSr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_PF_CTL_DC_OFFSr
#define MODIFY_DSC_RX_PF_CTL_DC_OFFSr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_PF_CTL_DC_OFFSr
#define READLN_DSC_RX_PF_CTL_DC_OFFSr BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_PF_CTL_DC_OFFSr
#define WRITELN_DSC_RX_PF_CTL_DC_OFFSr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_PF_CTL_DC_OFFSr
#define WRITEALL_DSC_RX_PF_CTL_DC_OFFSr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_PF_CTL_DC_OFFSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_RX_PF_CTL_DC_OFFSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_RXA_SLCR_OFFS_ADJ_DN_DP
 * BLOCKS:   DSC_AFE1
 * REGADDR:  0xd001
 * DEVAD:    1
 * DESC:     rxa_slicer_offset_adj_dn_dp register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXA_SLICER_OFFSET_ADJ_DP signed 2's complement rxa slicer offset adjust for data_pos[5:0]
 *     RXA_SLICER_OFFSET_ADJ_DN signed 2's complement rxa slicer offset adjust for data_neg[5:0]
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DPr (0x0001d001 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DPr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RXA_SLCR_OFFS_ADJ_DN_DP.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DPr_s {
	uint32_t v[1];
	uint32_t dsc_rxa_slcr_offs_adj_dn_dp[1];
	uint32_t _dsc_rxa_slcr_offs_adj_dn_dp;
} BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DPr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DPr_CLR(r) (r).dsc_rxa_slcr_offs_adj_dn_dp[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DPr_SET(r,d) (r).dsc_rxa_slcr_offs_adj_dn_dp[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DPr_GET(r) (r).dsc_rxa_slcr_offs_adj_dn_dp[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DPr_RXA_SLICER_OFFSET_ADJ_DNf_GET(r) ((((r).dsc_rxa_slcr_offs_adj_dn_dp[0]) >> 8) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DPr_RXA_SLICER_OFFSET_ADJ_DNf_SET(r,f) (r).dsc_rxa_slcr_offs_adj_dn_dp[0]=(((r).dsc_rxa_slcr_offs_adj_dn_dp[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8)) | (63 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DPr_RXA_SLICER_OFFSET_ADJ_DPf_GET(r) (((r).dsc_rxa_slcr_offs_adj_dn_dp[0]) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DPr_RXA_SLICER_OFFSET_ADJ_DPf_SET(r,f) (r).dsc_rxa_slcr_offs_adj_dn_dp[0]=(((r).dsc_rxa_slcr_offs_adj_dn_dp[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access DSC_RXA_SLCR_OFFS_ADJ_DN_DP.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_RXA_SLCR_OFFS_ADJ_DN_DPr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DPr,(_r._dsc_rxa_slcr_offs_adj_dn_dp))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RXA_SLCR_OFFS_ADJ_DN_DPr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DPr,(_r._dsc_rxa_slcr_offs_adj_dn_dp)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RXA_SLCR_OFFS_ADJ_DN_DPr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DPr,(_r._dsc_rxa_slcr_offs_adj_dn_dp))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_RXA_SLCR_OFFS_ADJ_DN_DPr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DPr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxa_slcr_offs_adj_dn_dp))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RXA_SLCR_OFFS_ADJ_DN_DPr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DPr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxa_slcr_offs_adj_dn_dp))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RXA_SLCR_OFFS_ADJ_DN_DPr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DPr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rxa_slcr_offs_adj_dn_dp))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_RXA_SLCR_OFFS_ADJ_DN_DPr BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DPr
#define DSC_RXA_SLCR_OFFS_ADJ_DN_DPr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DPr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DPr_t DSC_RXA_SLCR_OFFS_ADJ_DN_DPr_t;
#define DSC_RXA_SLCR_OFFS_ADJ_DN_DPr_CLR BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DPr_CLR
#define DSC_RXA_SLCR_OFFS_ADJ_DN_DPr_SET BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DPr_SET
#define DSC_RXA_SLCR_OFFS_ADJ_DN_DPr_GET BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DPr_GET
#define DSC_RXA_SLCR_OFFS_ADJ_DN_DPr_RXA_SLICER_OFFSET_ADJ_DNf_GET BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DPr_RXA_SLICER_OFFSET_ADJ_DNf_GET
#define DSC_RXA_SLCR_OFFS_ADJ_DN_DPr_RXA_SLICER_OFFSET_ADJ_DNf_SET BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DPr_RXA_SLICER_OFFSET_ADJ_DNf_SET
#define DSC_RXA_SLCR_OFFS_ADJ_DN_DPr_RXA_SLICER_OFFSET_ADJ_DPf_GET BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DPr_RXA_SLICER_OFFSET_ADJ_DPf_GET
#define DSC_RXA_SLCR_OFFS_ADJ_DN_DPr_RXA_SLICER_OFFSET_ADJ_DPf_SET BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DPr_RXA_SLICER_OFFSET_ADJ_DPf_SET
#define READ_DSC_RXA_SLCR_OFFS_ADJ_DN_DPr BCMI_TSCF_GEN3_XGXS_READ_DSC_RXA_SLCR_OFFS_ADJ_DN_DPr
#define WRITE_DSC_RXA_SLCR_OFFS_ADJ_DN_DPr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RXA_SLCR_OFFS_ADJ_DN_DPr
#define MODIFY_DSC_RXA_SLCR_OFFS_ADJ_DN_DPr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RXA_SLCR_OFFS_ADJ_DN_DPr
#define READLN_DSC_RXA_SLCR_OFFS_ADJ_DN_DPr BCMI_TSCF_GEN3_XGXS_READLN_DSC_RXA_SLCR_OFFS_ADJ_DN_DPr
#define WRITELN_DSC_RXA_SLCR_OFFS_ADJ_DN_DPr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RXA_SLCR_OFFS_ADJ_DN_DPr
#define WRITEALL_DSC_RXA_SLCR_OFFS_ADJ_DN_DPr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RXA_SLCR_OFFS_ADJ_DN_DPr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DPr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP
 * BLOCKS:   DSC_AFE1
 * REGADDR:  0xd002
 * DEVAD:    1
 * DESC:     rxa_slicer_offset_adj_zn_zp register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXA_SLICER_OFFSET_ADJ_ZP signed 2's complement rxa slicer offset adjust for phs_neg[5:0]
 *     RXA_SLICER_OFFSET_ADJ_ZN signed 2's complement rxa slicer offset adjust for phs_pos[5:0]
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr (0x0001d002 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr_s {
	uint32_t v[1];
	uint32_t dsc_rxa_slcr_offs_adj_zn_zp[1];
	uint32_t _dsc_rxa_slcr_offs_adj_zn_zp;
} BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr_CLR(r) (r).dsc_rxa_slcr_offs_adj_zn_zp[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr_SET(r,d) (r).dsc_rxa_slcr_offs_adj_zn_zp[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr_GET(r) (r).dsc_rxa_slcr_offs_adj_zn_zp[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr_RXA_SLICER_OFFSET_ADJ_ZNf_GET(r) ((((r).dsc_rxa_slcr_offs_adj_zn_zp[0]) >> 8) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr_RXA_SLICER_OFFSET_ADJ_ZNf_SET(r,f) (r).dsc_rxa_slcr_offs_adj_zn_zp[0]=(((r).dsc_rxa_slcr_offs_adj_zn_zp[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8)) | (63 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr_RXA_SLICER_OFFSET_ADJ_ZPf_GET(r) (((r).dsc_rxa_slcr_offs_adj_zn_zp[0]) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr_RXA_SLICER_OFFSET_ADJ_ZPf_SET(r,f) (r).dsc_rxa_slcr_offs_adj_zn_zp[0]=(((r).dsc_rxa_slcr_offs_adj_zn_zp[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr,(_r._dsc_rxa_slcr_offs_adj_zn_zp))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr,(_r._dsc_rxa_slcr_offs_adj_zn_zp)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr,(_r._dsc_rxa_slcr_offs_adj_zn_zp))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxa_slcr_offs_adj_zn_zp))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxa_slcr_offs_adj_zn_zp))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rxa_slcr_offs_adj_zn_zp))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr
#define DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr_t DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr_t;
#define DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr_CLR BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr_CLR
#define DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr_SET BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr_SET
#define DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr_GET BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr_GET
#define DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr_RXA_SLICER_OFFSET_ADJ_ZNf_GET BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr_RXA_SLICER_OFFSET_ADJ_ZNf_GET
#define DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr_RXA_SLICER_OFFSET_ADJ_ZNf_SET BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr_RXA_SLICER_OFFSET_ADJ_ZNf_SET
#define DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr_RXA_SLICER_OFFSET_ADJ_ZPf_GET BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr_RXA_SLICER_OFFSET_ADJ_ZPf_GET
#define DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr_RXA_SLICER_OFFSET_ADJ_ZPf_SET BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr_RXA_SLICER_OFFSET_ADJ_ZPf_SET
#define READ_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr BCMI_TSCF_GEN3_XGXS_READ_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr
#define WRITE_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr
#define MODIFY_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr
#define READLN_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr BCMI_TSCF_GEN3_XGXS_READLN_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr
#define WRITELN_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr
#define WRITEALL_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZPr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_RXAB_SLCR_OFFS_ADJ_LMS
 * BLOCKS:   DSC_AFE1
 * REGADDR:  0xd003
 * DEVAD:    1
 * DESC:     rxab_slicer_offset_adj_lms register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXB_SLICER_OFFSET_ADJ_LMS signed 2's complement rxb slicer offset adjust for lms[5:0]
 *     RXA_SLICER_OFFSET_ADJ_LMS signed 2's complement rxa slicer offset adjust for lms[5:0]
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMSr (0x0001d003 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMSr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RXAB_SLCR_OFFS_ADJ_LMS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMSr_s {
	uint32_t v[1];
	uint32_t dsc_rxab_slcr_offs_adj_lms[1];
	uint32_t _dsc_rxab_slcr_offs_adj_lms;
} BCMI_TSCF_GEN3_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMSr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMSr_CLR(r) (r).dsc_rxab_slcr_offs_adj_lms[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMSr_SET(r,d) (r).dsc_rxab_slcr_offs_adj_lms[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMSr_GET(r) (r).dsc_rxab_slcr_offs_adj_lms[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMSr_RXA_SLICER_OFFSET_ADJ_LMSf_GET(r) ((((r).dsc_rxab_slcr_offs_adj_lms[0]) >> 8) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMSr_RXA_SLICER_OFFSET_ADJ_LMSf_SET(r,f) (r).dsc_rxab_slcr_offs_adj_lms[0]=(((r).dsc_rxab_slcr_offs_adj_lms[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8)) | (63 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMSr_RXB_SLICER_OFFSET_ADJ_LMSf_GET(r) (((r).dsc_rxab_slcr_offs_adj_lms[0]) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMSr_RXB_SLICER_OFFSET_ADJ_LMSf_SET(r,f) (r).dsc_rxab_slcr_offs_adj_lms[0]=(((r).dsc_rxab_slcr_offs_adj_lms[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access DSC_RXAB_SLCR_OFFS_ADJ_LMS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_RXAB_SLCR_OFFS_ADJ_LMSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMSr,(_r._dsc_rxab_slcr_offs_adj_lms))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RXAB_SLCR_OFFS_ADJ_LMSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMSr,(_r._dsc_rxab_slcr_offs_adj_lms)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RXAB_SLCR_OFFS_ADJ_LMSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMSr,(_r._dsc_rxab_slcr_offs_adj_lms))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_RXAB_SLCR_OFFS_ADJ_LMSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxab_slcr_offs_adj_lms))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RXAB_SLCR_OFFS_ADJ_LMSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxab_slcr_offs_adj_lms))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RXAB_SLCR_OFFS_ADJ_LMSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rxab_slcr_offs_adj_lms))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_RXAB_SLCR_OFFS_ADJ_LMSr BCMI_TSCF_GEN3_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMSr
#define DSC_RXAB_SLCR_OFFS_ADJ_LMSr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMSr_t DSC_RXAB_SLCR_OFFS_ADJ_LMSr_t;
#define DSC_RXAB_SLCR_OFFS_ADJ_LMSr_CLR BCMI_TSCF_GEN3_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMSr_CLR
#define DSC_RXAB_SLCR_OFFS_ADJ_LMSr_SET BCMI_TSCF_GEN3_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMSr_SET
#define DSC_RXAB_SLCR_OFFS_ADJ_LMSr_GET BCMI_TSCF_GEN3_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMSr_GET
#define DSC_RXAB_SLCR_OFFS_ADJ_LMSr_RXA_SLICER_OFFSET_ADJ_LMSf_GET BCMI_TSCF_GEN3_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMSr_RXA_SLICER_OFFSET_ADJ_LMSf_GET
#define DSC_RXAB_SLCR_OFFS_ADJ_LMSr_RXA_SLICER_OFFSET_ADJ_LMSf_SET BCMI_TSCF_GEN3_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMSr_RXA_SLICER_OFFSET_ADJ_LMSf_SET
#define DSC_RXAB_SLCR_OFFS_ADJ_LMSr_RXB_SLICER_OFFSET_ADJ_LMSf_GET BCMI_TSCF_GEN3_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMSr_RXB_SLICER_OFFSET_ADJ_LMSf_GET
#define DSC_RXAB_SLCR_OFFS_ADJ_LMSr_RXB_SLICER_OFFSET_ADJ_LMSf_SET BCMI_TSCF_GEN3_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMSr_RXB_SLICER_OFFSET_ADJ_LMSf_SET
#define READ_DSC_RXAB_SLCR_OFFS_ADJ_LMSr BCMI_TSCF_GEN3_XGXS_READ_DSC_RXAB_SLCR_OFFS_ADJ_LMSr
#define WRITE_DSC_RXAB_SLCR_OFFS_ADJ_LMSr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RXAB_SLCR_OFFS_ADJ_LMSr
#define MODIFY_DSC_RXAB_SLCR_OFFS_ADJ_LMSr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RXAB_SLCR_OFFS_ADJ_LMSr
#define READLN_DSC_RXAB_SLCR_OFFS_ADJ_LMSr BCMI_TSCF_GEN3_XGXS_READLN_DSC_RXAB_SLCR_OFFS_ADJ_LMSr
#define WRITELN_DSC_RXAB_SLCR_OFFS_ADJ_LMSr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RXAB_SLCR_OFFS_ADJ_LMSr
#define WRITEALL_DSC_RXAB_SLCR_OFFS_ADJ_LMSr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RXAB_SLCR_OFFS_ADJ_LMSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_RXB_SLCR_OFFS_ADJ_DN_DP
 * BLOCKS:   DSC_AFE1
 * REGADDR:  0xd004
 * DEVAD:    1
 * DESC:     rxb_slicer_offset_adj_dn_dp register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXB_SLICER_OFFSET_ADJ_DP signed 2's complement rxb slicer offset adjust for data_pos[5:0]
 *     RXB_SLICER_OFFSET_ADJ_DN signed 2's complement rxb slicer offset adjust for data_neg[5:0]
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DPr (0x0001d004 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DPr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RXB_SLCR_OFFS_ADJ_DN_DP.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DPr_s {
	uint32_t v[1];
	uint32_t dsc_rxb_slcr_offs_adj_dn_dp[1];
	uint32_t _dsc_rxb_slcr_offs_adj_dn_dp;
} BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DPr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DPr_CLR(r) (r).dsc_rxb_slcr_offs_adj_dn_dp[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DPr_SET(r,d) (r).dsc_rxb_slcr_offs_adj_dn_dp[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DPr_GET(r) (r).dsc_rxb_slcr_offs_adj_dn_dp[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DPr_RXB_SLICER_OFFSET_ADJ_DNf_GET(r) ((((r).dsc_rxb_slcr_offs_adj_dn_dp[0]) >> 8) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DPr_RXB_SLICER_OFFSET_ADJ_DNf_SET(r,f) (r).dsc_rxb_slcr_offs_adj_dn_dp[0]=(((r).dsc_rxb_slcr_offs_adj_dn_dp[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8)) | (63 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DPr_RXB_SLICER_OFFSET_ADJ_DPf_GET(r) (((r).dsc_rxb_slcr_offs_adj_dn_dp[0]) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DPr_RXB_SLICER_OFFSET_ADJ_DPf_SET(r,f) (r).dsc_rxb_slcr_offs_adj_dn_dp[0]=(((r).dsc_rxb_slcr_offs_adj_dn_dp[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access DSC_RXB_SLCR_OFFS_ADJ_DN_DP.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_RXB_SLCR_OFFS_ADJ_DN_DPr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DPr,(_r._dsc_rxb_slcr_offs_adj_dn_dp))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RXB_SLCR_OFFS_ADJ_DN_DPr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DPr,(_r._dsc_rxb_slcr_offs_adj_dn_dp)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RXB_SLCR_OFFS_ADJ_DN_DPr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DPr,(_r._dsc_rxb_slcr_offs_adj_dn_dp))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_RXB_SLCR_OFFS_ADJ_DN_DPr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DPr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxb_slcr_offs_adj_dn_dp))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RXB_SLCR_OFFS_ADJ_DN_DPr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DPr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxb_slcr_offs_adj_dn_dp))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RXB_SLCR_OFFS_ADJ_DN_DPr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DPr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rxb_slcr_offs_adj_dn_dp))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_RXB_SLCR_OFFS_ADJ_DN_DPr BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DPr
#define DSC_RXB_SLCR_OFFS_ADJ_DN_DPr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DPr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DPr_t DSC_RXB_SLCR_OFFS_ADJ_DN_DPr_t;
#define DSC_RXB_SLCR_OFFS_ADJ_DN_DPr_CLR BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DPr_CLR
#define DSC_RXB_SLCR_OFFS_ADJ_DN_DPr_SET BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DPr_SET
#define DSC_RXB_SLCR_OFFS_ADJ_DN_DPr_GET BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DPr_GET
#define DSC_RXB_SLCR_OFFS_ADJ_DN_DPr_RXB_SLICER_OFFSET_ADJ_DNf_GET BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DPr_RXB_SLICER_OFFSET_ADJ_DNf_GET
#define DSC_RXB_SLCR_OFFS_ADJ_DN_DPr_RXB_SLICER_OFFSET_ADJ_DNf_SET BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DPr_RXB_SLICER_OFFSET_ADJ_DNf_SET
#define DSC_RXB_SLCR_OFFS_ADJ_DN_DPr_RXB_SLICER_OFFSET_ADJ_DPf_GET BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DPr_RXB_SLICER_OFFSET_ADJ_DPf_GET
#define DSC_RXB_SLCR_OFFS_ADJ_DN_DPr_RXB_SLICER_OFFSET_ADJ_DPf_SET BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DPr_RXB_SLICER_OFFSET_ADJ_DPf_SET
#define READ_DSC_RXB_SLCR_OFFS_ADJ_DN_DPr BCMI_TSCF_GEN3_XGXS_READ_DSC_RXB_SLCR_OFFS_ADJ_DN_DPr
#define WRITE_DSC_RXB_SLCR_OFFS_ADJ_DN_DPr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RXB_SLCR_OFFS_ADJ_DN_DPr
#define MODIFY_DSC_RXB_SLCR_OFFS_ADJ_DN_DPr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RXB_SLCR_OFFS_ADJ_DN_DPr
#define READLN_DSC_RXB_SLCR_OFFS_ADJ_DN_DPr BCMI_TSCF_GEN3_XGXS_READLN_DSC_RXB_SLCR_OFFS_ADJ_DN_DPr
#define WRITELN_DSC_RXB_SLCR_OFFS_ADJ_DN_DPr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RXB_SLCR_OFFS_ADJ_DN_DPr
#define WRITEALL_DSC_RXB_SLCR_OFFS_ADJ_DN_DPr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RXB_SLCR_OFFS_ADJ_DN_DPr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DPr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP
 * BLOCKS:   DSC_AFE1
 * REGADDR:  0xd005
 * DEVAD:    1
 * DESC:     rxb_slicer_offset_adj_zn_zp register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXB_SLICER_OFFSET_ADJ_ZP signed 2's complement rxb slicer offset adjust for phs_pos[5:0]
 *     RXB_SLICER_OFFSET_ADJ_ZN signed 2's complement rxb slicer offset adjust for phs_neg[5:0]
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr (0x0001d005 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr_s {
	uint32_t v[1];
	uint32_t dsc_rxb_slcr_offs_adj_zn_zp[1];
	uint32_t _dsc_rxb_slcr_offs_adj_zn_zp;
} BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr_CLR(r) (r).dsc_rxb_slcr_offs_adj_zn_zp[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr_SET(r,d) (r).dsc_rxb_slcr_offs_adj_zn_zp[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr_GET(r) (r).dsc_rxb_slcr_offs_adj_zn_zp[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr_RXB_SLICER_OFFSET_ADJ_ZNf_GET(r) ((((r).dsc_rxb_slcr_offs_adj_zn_zp[0]) >> 8) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr_RXB_SLICER_OFFSET_ADJ_ZNf_SET(r,f) (r).dsc_rxb_slcr_offs_adj_zn_zp[0]=(((r).dsc_rxb_slcr_offs_adj_zn_zp[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8)) | (63 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr_RXB_SLICER_OFFSET_ADJ_ZPf_GET(r) (((r).dsc_rxb_slcr_offs_adj_zn_zp[0]) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr_RXB_SLICER_OFFSET_ADJ_ZPf_SET(r,f) (r).dsc_rxb_slcr_offs_adj_zn_zp[0]=(((r).dsc_rxb_slcr_offs_adj_zn_zp[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr,(_r._dsc_rxb_slcr_offs_adj_zn_zp))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr,(_r._dsc_rxb_slcr_offs_adj_zn_zp)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr,(_r._dsc_rxb_slcr_offs_adj_zn_zp))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxb_slcr_offs_adj_zn_zp))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxb_slcr_offs_adj_zn_zp))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rxb_slcr_offs_adj_zn_zp))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr
#define DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr_t DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr_t;
#define DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr_CLR BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr_CLR
#define DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr_SET BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr_SET
#define DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr_GET BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr_GET
#define DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr_RXB_SLICER_OFFSET_ADJ_ZNf_GET BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr_RXB_SLICER_OFFSET_ADJ_ZNf_GET
#define DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr_RXB_SLICER_OFFSET_ADJ_ZNf_SET BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr_RXB_SLICER_OFFSET_ADJ_ZNf_SET
#define DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr_RXB_SLICER_OFFSET_ADJ_ZPf_GET BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr_RXB_SLICER_OFFSET_ADJ_ZPf_GET
#define DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr_RXB_SLICER_OFFSET_ADJ_ZPf_SET BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr_RXB_SLICER_OFFSET_ADJ_ZPf_SET
#define READ_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr BCMI_TSCF_GEN3_XGXS_READ_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr
#define WRITE_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr
#define MODIFY_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr
#define READLN_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr BCMI_TSCF_GEN3_XGXS_READLN_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr
#define WRITELN_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr
#define WRITEALL_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZPr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_RXC_SLCR_OFFS_ADJ_DN_DP
 * BLOCKS:   DSC_AFE1
 * REGADDR:  0xd006
 * DEVAD:    1
 * DESC:     rxc_slicer_offset_adj_dn_dp register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXC_SLICER_OFFSET_ADJ_DP signed 2's complement rxc slicer offset adjust for data_pos[5:0]
 *     RXC_SLICER_OFFSET_ADJ_DN signed 2's complement rxc slicer offset adjust for data_neg[5:0]
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DPr (0x0001d006 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DPr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RXC_SLCR_OFFS_ADJ_DN_DP.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DPr_s {
	uint32_t v[1];
	uint32_t dsc_rxc_slcr_offs_adj_dn_dp[1];
	uint32_t _dsc_rxc_slcr_offs_adj_dn_dp;
} BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DPr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DPr_CLR(r) (r).dsc_rxc_slcr_offs_adj_dn_dp[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DPr_SET(r,d) (r).dsc_rxc_slcr_offs_adj_dn_dp[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DPr_GET(r) (r).dsc_rxc_slcr_offs_adj_dn_dp[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DPr_RXC_SLICER_OFFSET_ADJ_DNf_GET(r) ((((r).dsc_rxc_slcr_offs_adj_dn_dp[0]) >> 8) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DPr_RXC_SLICER_OFFSET_ADJ_DNf_SET(r,f) (r).dsc_rxc_slcr_offs_adj_dn_dp[0]=(((r).dsc_rxc_slcr_offs_adj_dn_dp[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8)) | (63 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DPr_RXC_SLICER_OFFSET_ADJ_DPf_GET(r) (((r).dsc_rxc_slcr_offs_adj_dn_dp[0]) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DPr_RXC_SLICER_OFFSET_ADJ_DPf_SET(r,f) (r).dsc_rxc_slcr_offs_adj_dn_dp[0]=(((r).dsc_rxc_slcr_offs_adj_dn_dp[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access DSC_RXC_SLCR_OFFS_ADJ_DN_DP.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_RXC_SLCR_OFFS_ADJ_DN_DPr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DPr,(_r._dsc_rxc_slcr_offs_adj_dn_dp))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RXC_SLCR_OFFS_ADJ_DN_DPr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DPr,(_r._dsc_rxc_slcr_offs_adj_dn_dp)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RXC_SLCR_OFFS_ADJ_DN_DPr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DPr,(_r._dsc_rxc_slcr_offs_adj_dn_dp))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_RXC_SLCR_OFFS_ADJ_DN_DPr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DPr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxc_slcr_offs_adj_dn_dp))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RXC_SLCR_OFFS_ADJ_DN_DPr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DPr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxc_slcr_offs_adj_dn_dp))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RXC_SLCR_OFFS_ADJ_DN_DPr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DPr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rxc_slcr_offs_adj_dn_dp))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_RXC_SLCR_OFFS_ADJ_DN_DPr BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DPr
#define DSC_RXC_SLCR_OFFS_ADJ_DN_DPr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DPr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DPr_t DSC_RXC_SLCR_OFFS_ADJ_DN_DPr_t;
#define DSC_RXC_SLCR_OFFS_ADJ_DN_DPr_CLR BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DPr_CLR
#define DSC_RXC_SLCR_OFFS_ADJ_DN_DPr_SET BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DPr_SET
#define DSC_RXC_SLCR_OFFS_ADJ_DN_DPr_GET BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DPr_GET
#define DSC_RXC_SLCR_OFFS_ADJ_DN_DPr_RXC_SLICER_OFFSET_ADJ_DNf_GET BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DPr_RXC_SLICER_OFFSET_ADJ_DNf_GET
#define DSC_RXC_SLCR_OFFS_ADJ_DN_DPr_RXC_SLICER_OFFSET_ADJ_DNf_SET BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DPr_RXC_SLICER_OFFSET_ADJ_DNf_SET
#define DSC_RXC_SLCR_OFFS_ADJ_DN_DPr_RXC_SLICER_OFFSET_ADJ_DPf_GET BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DPr_RXC_SLICER_OFFSET_ADJ_DPf_GET
#define DSC_RXC_SLCR_OFFS_ADJ_DN_DPr_RXC_SLICER_OFFSET_ADJ_DPf_SET BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DPr_RXC_SLICER_OFFSET_ADJ_DPf_SET
#define READ_DSC_RXC_SLCR_OFFS_ADJ_DN_DPr BCMI_TSCF_GEN3_XGXS_READ_DSC_RXC_SLCR_OFFS_ADJ_DN_DPr
#define WRITE_DSC_RXC_SLCR_OFFS_ADJ_DN_DPr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RXC_SLCR_OFFS_ADJ_DN_DPr
#define MODIFY_DSC_RXC_SLCR_OFFS_ADJ_DN_DPr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RXC_SLCR_OFFS_ADJ_DN_DPr
#define READLN_DSC_RXC_SLCR_OFFS_ADJ_DN_DPr BCMI_TSCF_GEN3_XGXS_READLN_DSC_RXC_SLCR_OFFS_ADJ_DN_DPr
#define WRITELN_DSC_RXC_SLCR_OFFS_ADJ_DN_DPr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RXC_SLCR_OFFS_ADJ_DN_DPr
#define WRITEALL_DSC_RXC_SLCR_OFFS_ADJ_DN_DPr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RXC_SLCR_OFFS_ADJ_DN_DPr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DPr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP
 * BLOCKS:   DSC_AFE1
 * REGADDR:  0xd007
 * DEVAD:    1
 * DESC:     rxc_slicer_offset_adj_zn_zp register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXC_SLICER_OFFSET_ADJ_ZP signed 2's complement rxc slicer offset adjust for phs_pos[5:0]
 *     RXC_SLICER_OFFSET_ADJ_ZN signed 2's complement rxc slicer offset adjust for phs_neg[5:0]
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr (0x0001d007 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr_s {
	uint32_t v[1];
	uint32_t dsc_rxc_slcr_offs_adj_zn_zp[1];
	uint32_t _dsc_rxc_slcr_offs_adj_zn_zp;
} BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr_CLR(r) (r).dsc_rxc_slcr_offs_adj_zn_zp[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr_SET(r,d) (r).dsc_rxc_slcr_offs_adj_zn_zp[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr_GET(r) (r).dsc_rxc_slcr_offs_adj_zn_zp[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr_RXC_SLICER_OFFSET_ADJ_ZNf_GET(r) ((((r).dsc_rxc_slcr_offs_adj_zn_zp[0]) >> 8) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr_RXC_SLICER_OFFSET_ADJ_ZNf_SET(r,f) (r).dsc_rxc_slcr_offs_adj_zn_zp[0]=(((r).dsc_rxc_slcr_offs_adj_zn_zp[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8)) | (63 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr_RXC_SLICER_OFFSET_ADJ_ZPf_GET(r) (((r).dsc_rxc_slcr_offs_adj_zn_zp[0]) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr_RXC_SLICER_OFFSET_ADJ_ZPf_SET(r,f) (r).dsc_rxc_slcr_offs_adj_zn_zp[0]=(((r).dsc_rxc_slcr_offs_adj_zn_zp[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr,(_r._dsc_rxc_slcr_offs_adj_zn_zp))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr,(_r._dsc_rxc_slcr_offs_adj_zn_zp)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr,(_r._dsc_rxc_slcr_offs_adj_zn_zp))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxc_slcr_offs_adj_zn_zp))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxc_slcr_offs_adj_zn_zp))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rxc_slcr_offs_adj_zn_zp))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr
#define DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr_t DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr_t;
#define DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr_CLR BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr_CLR
#define DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr_SET BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr_SET
#define DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr_GET BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr_GET
#define DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr_RXC_SLICER_OFFSET_ADJ_ZNf_GET BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr_RXC_SLICER_OFFSET_ADJ_ZNf_GET
#define DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr_RXC_SLICER_OFFSET_ADJ_ZNf_SET BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr_RXC_SLICER_OFFSET_ADJ_ZNf_SET
#define DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr_RXC_SLICER_OFFSET_ADJ_ZPf_GET BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr_RXC_SLICER_OFFSET_ADJ_ZPf_GET
#define DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr_RXC_SLICER_OFFSET_ADJ_ZPf_SET BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr_RXC_SLICER_OFFSET_ADJ_ZPf_SET
#define READ_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr BCMI_TSCF_GEN3_XGXS_READ_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr
#define WRITE_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr
#define MODIFY_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr
#define READLN_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr BCMI_TSCF_GEN3_XGXS_READLN_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr
#define WRITELN_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr
#define WRITEALL_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZPr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_RXCD_SLCR_OFFS_ADJ_LMS
 * BLOCKS:   DSC_AFE1
 * REGADDR:  0xd008
 * DEVAD:    1
 * DESC:     rxcd_slicer_offset_adj_lms register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXD_SLICER_OFFSET_ADJ_LMS signed 2's complement rxd slicer offset adjust for lms[5:0]
 *     RXC_SLICER_OFFSET_ADJ_LMS signed 2's complement rxc slicer offset adjust for lms[5:0]
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMSr (0x0001d008 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMSr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RXCD_SLCR_OFFS_ADJ_LMS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMSr_s {
	uint32_t v[1];
	uint32_t dsc_rxcd_slcr_offs_adj_lms[1];
	uint32_t _dsc_rxcd_slcr_offs_adj_lms;
} BCMI_TSCF_GEN3_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMSr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMSr_CLR(r) (r).dsc_rxcd_slcr_offs_adj_lms[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMSr_SET(r,d) (r).dsc_rxcd_slcr_offs_adj_lms[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMSr_GET(r) (r).dsc_rxcd_slcr_offs_adj_lms[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMSr_RXC_SLICER_OFFSET_ADJ_LMSf_GET(r) ((((r).dsc_rxcd_slcr_offs_adj_lms[0]) >> 8) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMSr_RXC_SLICER_OFFSET_ADJ_LMSf_SET(r,f) (r).dsc_rxcd_slcr_offs_adj_lms[0]=(((r).dsc_rxcd_slcr_offs_adj_lms[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8)) | (63 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMSr_RXD_SLICER_OFFSET_ADJ_LMSf_GET(r) (((r).dsc_rxcd_slcr_offs_adj_lms[0]) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMSr_RXD_SLICER_OFFSET_ADJ_LMSf_SET(r,f) (r).dsc_rxcd_slcr_offs_adj_lms[0]=(((r).dsc_rxcd_slcr_offs_adj_lms[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access DSC_RXCD_SLCR_OFFS_ADJ_LMS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_RXCD_SLCR_OFFS_ADJ_LMSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMSr,(_r._dsc_rxcd_slcr_offs_adj_lms))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RXCD_SLCR_OFFS_ADJ_LMSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMSr,(_r._dsc_rxcd_slcr_offs_adj_lms)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RXCD_SLCR_OFFS_ADJ_LMSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMSr,(_r._dsc_rxcd_slcr_offs_adj_lms))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_RXCD_SLCR_OFFS_ADJ_LMSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxcd_slcr_offs_adj_lms))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RXCD_SLCR_OFFS_ADJ_LMSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxcd_slcr_offs_adj_lms))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RXCD_SLCR_OFFS_ADJ_LMSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rxcd_slcr_offs_adj_lms))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_RXCD_SLCR_OFFS_ADJ_LMSr BCMI_TSCF_GEN3_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMSr
#define DSC_RXCD_SLCR_OFFS_ADJ_LMSr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMSr_t DSC_RXCD_SLCR_OFFS_ADJ_LMSr_t;
#define DSC_RXCD_SLCR_OFFS_ADJ_LMSr_CLR BCMI_TSCF_GEN3_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMSr_CLR
#define DSC_RXCD_SLCR_OFFS_ADJ_LMSr_SET BCMI_TSCF_GEN3_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMSr_SET
#define DSC_RXCD_SLCR_OFFS_ADJ_LMSr_GET BCMI_TSCF_GEN3_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMSr_GET
#define DSC_RXCD_SLCR_OFFS_ADJ_LMSr_RXC_SLICER_OFFSET_ADJ_LMSf_GET BCMI_TSCF_GEN3_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMSr_RXC_SLICER_OFFSET_ADJ_LMSf_GET
#define DSC_RXCD_SLCR_OFFS_ADJ_LMSr_RXC_SLICER_OFFSET_ADJ_LMSf_SET BCMI_TSCF_GEN3_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMSr_RXC_SLICER_OFFSET_ADJ_LMSf_SET
#define DSC_RXCD_SLCR_OFFS_ADJ_LMSr_RXD_SLICER_OFFSET_ADJ_LMSf_GET BCMI_TSCF_GEN3_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMSr_RXD_SLICER_OFFSET_ADJ_LMSf_GET
#define DSC_RXCD_SLCR_OFFS_ADJ_LMSr_RXD_SLICER_OFFSET_ADJ_LMSf_SET BCMI_TSCF_GEN3_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMSr_RXD_SLICER_OFFSET_ADJ_LMSf_SET
#define READ_DSC_RXCD_SLCR_OFFS_ADJ_LMSr BCMI_TSCF_GEN3_XGXS_READ_DSC_RXCD_SLCR_OFFS_ADJ_LMSr
#define WRITE_DSC_RXCD_SLCR_OFFS_ADJ_LMSr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RXCD_SLCR_OFFS_ADJ_LMSr
#define MODIFY_DSC_RXCD_SLCR_OFFS_ADJ_LMSr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RXCD_SLCR_OFFS_ADJ_LMSr
#define READLN_DSC_RXCD_SLCR_OFFS_ADJ_LMSr BCMI_TSCF_GEN3_XGXS_READLN_DSC_RXCD_SLCR_OFFS_ADJ_LMSr
#define WRITELN_DSC_RXCD_SLCR_OFFS_ADJ_LMSr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RXCD_SLCR_OFFS_ADJ_LMSr
#define WRITEALL_DSC_RXCD_SLCR_OFFS_ADJ_LMSr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RXCD_SLCR_OFFS_ADJ_LMSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_RXD_SLCR_OFFS_ADJ_DN_DP
 * BLOCKS:   DSC_AFE1
 * REGADDR:  0xd009
 * DEVAD:    1
 * DESC:     rxd_slicer_offset_adj_dn_dp register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXD_SLICER_OFFSET_ADJ_DP signed 2's complement rxd slicer offset adjust for data_pos[5:0]
 *     RXD_SLICER_OFFSET_ADJ_DN signed 2's complement rxd slicer offset adjust for data_neg[5:0]
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DPr (0x0001d009 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DPr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RXD_SLCR_OFFS_ADJ_DN_DP.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DPr_s {
	uint32_t v[1];
	uint32_t dsc_rxd_slcr_offs_adj_dn_dp[1];
	uint32_t _dsc_rxd_slcr_offs_adj_dn_dp;
} BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DPr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DPr_CLR(r) (r).dsc_rxd_slcr_offs_adj_dn_dp[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DPr_SET(r,d) (r).dsc_rxd_slcr_offs_adj_dn_dp[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DPr_GET(r) (r).dsc_rxd_slcr_offs_adj_dn_dp[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DPr_RXD_SLICER_OFFSET_ADJ_DNf_GET(r) ((((r).dsc_rxd_slcr_offs_adj_dn_dp[0]) >> 8) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DPr_RXD_SLICER_OFFSET_ADJ_DNf_SET(r,f) (r).dsc_rxd_slcr_offs_adj_dn_dp[0]=(((r).dsc_rxd_slcr_offs_adj_dn_dp[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8)) | (63 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DPr_RXD_SLICER_OFFSET_ADJ_DPf_GET(r) (((r).dsc_rxd_slcr_offs_adj_dn_dp[0]) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DPr_RXD_SLICER_OFFSET_ADJ_DPf_SET(r,f) (r).dsc_rxd_slcr_offs_adj_dn_dp[0]=(((r).dsc_rxd_slcr_offs_adj_dn_dp[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access DSC_RXD_SLCR_OFFS_ADJ_DN_DP.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_RXD_SLCR_OFFS_ADJ_DN_DPr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DPr,(_r._dsc_rxd_slcr_offs_adj_dn_dp))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RXD_SLCR_OFFS_ADJ_DN_DPr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DPr,(_r._dsc_rxd_slcr_offs_adj_dn_dp)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RXD_SLCR_OFFS_ADJ_DN_DPr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DPr,(_r._dsc_rxd_slcr_offs_adj_dn_dp))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_RXD_SLCR_OFFS_ADJ_DN_DPr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DPr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxd_slcr_offs_adj_dn_dp))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RXD_SLCR_OFFS_ADJ_DN_DPr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DPr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxd_slcr_offs_adj_dn_dp))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RXD_SLCR_OFFS_ADJ_DN_DPr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DPr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rxd_slcr_offs_adj_dn_dp))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_RXD_SLCR_OFFS_ADJ_DN_DPr BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DPr
#define DSC_RXD_SLCR_OFFS_ADJ_DN_DPr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DPr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DPr_t DSC_RXD_SLCR_OFFS_ADJ_DN_DPr_t;
#define DSC_RXD_SLCR_OFFS_ADJ_DN_DPr_CLR BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DPr_CLR
#define DSC_RXD_SLCR_OFFS_ADJ_DN_DPr_SET BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DPr_SET
#define DSC_RXD_SLCR_OFFS_ADJ_DN_DPr_GET BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DPr_GET
#define DSC_RXD_SLCR_OFFS_ADJ_DN_DPr_RXD_SLICER_OFFSET_ADJ_DNf_GET BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DPr_RXD_SLICER_OFFSET_ADJ_DNf_GET
#define DSC_RXD_SLCR_OFFS_ADJ_DN_DPr_RXD_SLICER_OFFSET_ADJ_DNf_SET BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DPr_RXD_SLICER_OFFSET_ADJ_DNf_SET
#define DSC_RXD_SLCR_OFFS_ADJ_DN_DPr_RXD_SLICER_OFFSET_ADJ_DPf_GET BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DPr_RXD_SLICER_OFFSET_ADJ_DPf_GET
#define DSC_RXD_SLCR_OFFS_ADJ_DN_DPr_RXD_SLICER_OFFSET_ADJ_DPf_SET BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DPr_RXD_SLICER_OFFSET_ADJ_DPf_SET
#define READ_DSC_RXD_SLCR_OFFS_ADJ_DN_DPr BCMI_TSCF_GEN3_XGXS_READ_DSC_RXD_SLCR_OFFS_ADJ_DN_DPr
#define WRITE_DSC_RXD_SLCR_OFFS_ADJ_DN_DPr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RXD_SLCR_OFFS_ADJ_DN_DPr
#define MODIFY_DSC_RXD_SLCR_OFFS_ADJ_DN_DPr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RXD_SLCR_OFFS_ADJ_DN_DPr
#define READLN_DSC_RXD_SLCR_OFFS_ADJ_DN_DPr BCMI_TSCF_GEN3_XGXS_READLN_DSC_RXD_SLCR_OFFS_ADJ_DN_DPr
#define WRITELN_DSC_RXD_SLCR_OFFS_ADJ_DN_DPr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RXD_SLCR_OFFS_ADJ_DN_DPr
#define WRITEALL_DSC_RXD_SLCR_OFFS_ADJ_DN_DPr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RXD_SLCR_OFFS_ADJ_DN_DPr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DPr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP
 * BLOCKS:   DSC_AFE1
 * REGADDR:  0xd00a
 * DEVAD:    1
 * DESC:     rxd_slicer_offset_adj_zn_zp register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXD_SLICER_OFFSET_ADJ_ZP signed 2's complement rxd slicer offset adjust for phs_pos[5:0]
 *     RXD_SLICER_OFFSET_ADJ_ZN signed 2's complement rxd slicer offset adjust for phs_neg[5:0]
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr (0x0001d00a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr_s {
	uint32_t v[1];
	uint32_t dsc_rxd_slcr_offs_adj_zn_zp[1];
	uint32_t _dsc_rxd_slcr_offs_adj_zn_zp;
} BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr_CLR(r) (r).dsc_rxd_slcr_offs_adj_zn_zp[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr_SET(r,d) (r).dsc_rxd_slcr_offs_adj_zn_zp[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr_GET(r) (r).dsc_rxd_slcr_offs_adj_zn_zp[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr_RXD_SLICER_OFFSET_ADJ_ZNf_GET(r) ((((r).dsc_rxd_slcr_offs_adj_zn_zp[0]) >> 8) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr_RXD_SLICER_OFFSET_ADJ_ZNf_SET(r,f) (r).dsc_rxd_slcr_offs_adj_zn_zp[0]=(((r).dsc_rxd_slcr_offs_adj_zn_zp[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8)) | (63 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr_RXD_SLICER_OFFSET_ADJ_ZPf_GET(r) (((r).dsc_rxd_slcr_offs_adj_zn_zp[0]) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr_RXD_SLICER_OFFSET_ADJ_ZPf_SET(r,f) (r).dsc_rxd_slcr_offs_adj_zn_zp[0]=(((r).dsc_rxd_slcr_offs_adj_zn_zp[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr,(_r._dsc_rxd_slcr_offs_adj_zn_zp))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr,(_r._dsc_rxd_slcr_offs_adj_zn_zp)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr,(_r._dsc_rxd_slcr_offs_adj_zn_zp))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxd_slcr_offs_adj_zn_zp))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxd_slcr_offs_adj_zn_zp))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rxd_slcr_offs_adj_zn_zp))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr
#define DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr_t DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr_t;
#define DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr_CLR BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr_CLR
#define DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr_SET BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr_SET
#define DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr_GET BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr_GET
#define DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr_RXD_SLICER_OFFSET_ADJ_ZNf_GET BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr_RXD_SLICER_OFFSET_ADJ_ZNf_GET
#define DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr_RXD_SLICER_OFFSET_ADJ_ZNf_SET BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr_RXD_SLICER_OFFSET_ADJ_ZNf_SET
#define DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr_RXD_SLICER_OFFSET_ADJ_ZPf_GET BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr_RXD_SLICER_OFFSET_ADJ_ZPf_GET
#define DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr_RXD_SLICER_OFFSET_ADJ_ZPf_SET BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr_RXD_SLICER_OFFSET_ADJ_ZPf_SET
#define READ_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr BCMI_TSCF_GEN3_XGXS_READ_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr
#define WRITE_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr
#define MODIFY_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr
#define READLN_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr BCMI_TSCF_GEN3_XGXS_READLN_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr
#define WRITELN_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr
#define WRITEALL_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZPr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_RX_PHASE_LMS_THR_SEL
 * BLOCKS:   DSC_AFE1
 * REGADDR:  0xd00b
 * DEVAD:    1
 * DESC:     rx_phase_lms_thresh_sel register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RX_LMS_THRESH_SEL signed 2's complement +/-127. 127=300mV
 *     RX_PHASE_THRESH_SEL signed 2's complement -63 to +63. 63=150mV
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PHASE_LMS_THR_SELr (0x0001d00b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PHASE_LMS_THR_SELr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_PHASE_LMS_THR_SEL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_RX_PHASE_LMS_THR_SELr_s {
	uint32_t v[1];
	uint32_t dsc_rx_phase_lms_thr_sel[1];
	uint32_t _dsc_rx_phase_lms_thr_sel;
} BCMI_TSCF_GEN3_XGXS_DSC_RX_PHASE_LMS_THR_SELr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PHASE_LMS_THR_SELr_CLR(r) (r).dsc_rx_phase_lms_thr_sel[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PHASE_LMS_THR_SELr_SET(r,d) (r).dsc_rx_phase_lms_thr_sel[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PHASE_LMS_THR_SELr_GET(r) (r).dsc_rx_phase_lms_thr_sel[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PHASE_LMS_THR_SELr_RX_PHASE_THRESH_SELf_GET(r) ((((r).dsc_rx_phase_lms_thr_sel[0]) >> 8) & 0x7f)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PHASE_LMS_THR_SELr_RX_PHASE_THRESH_SELf_SET(r,f) (r).dsc_rx_phase_lms_thr_sel[0]=(((r).dsc_rx_phase_lms_thr_sel[0] & ~((uint32_t)0x7f << 8)) | ((((uint32_t)f) & 0x7f) << 8)) | (127 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PHASE_LMS_THR_SELr_RX_LMS_THRESH_SELf_GET(r) (((r).dsc_rx_phase_lms_thr_sel[0]) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PHASE_LMS_THR_SELr_RX_LMS_THRESH_SELf_SET(r,f) (r).dsc_rx_phase_lms_thr_sel[0]=(((r).dsc_rx_phase_lms_thr_sel[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access DSC_RX_PHASE_LMS_THR_SEL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_PHASE_LMS_THR_SELr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_PHASE_LMS_THR_SELr,(_r._dsc_rx_phase_lms_thr_sel))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_PHASE_LMS_THR_SELr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_PHASE_LMS_THR_SELr,(_r._dsc_rx_phase_lms_thr_sel)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_PHASE_LMS_THR_SELr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_PHASE_LMS_THR_SELr,(_r._dsc_rx_phase_lms_thr_sel))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_PHASE_LMS_THR_SELr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_PHASE_LMS_THR_SELr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_phase_lms_thr_sel))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_PHASE_LMS_THR_SELr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_PHASE_LMS_THR_SELr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_phase_lms_thr_sel))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_PHASE_LMS_THR_SELr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_PHASE_LMS_THR_SELr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_phase_lms_thr_sel))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_PHASE_LMS_THR_SELr BCMI_TSCF_GEN3_XGXS_DSC_RX_PHASE_LMS_THR_SELr
#define DSC_RX_PHASE_LMS_THR_SELr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_RX_PHASE_LMS_THR_SELr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_RX_PHASE_LMS_THR_SELr_t DSC_RX_PHASE_LMS_THR_SELr_t;
#define DSC_RX_PHASE_LMS_THR_SELr_CLR BCMI_TSCF_GEN3_XGXS_DSC_RX_PHASE_LMS_THR_SELr_CLR
#define DSC_RX_PHASE_LMS_THR_SELr_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_PHASE_LMS_THR_SELr_SET
#define DSC_RX_PHASE_LMS_THR_SELr_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_PHASE_LMS_THR_SELr_GET
#define DSC_RX_PHASE_LMS_THR_SELr_RX_PHASE_THRESH_SELf_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_PHASE_LMS_THR_SELr_RX_PHASE_THRESH_SELf_GET
#define DSC_RX_PHASE_LMS_THR_SELr_RX_PHASE_THRESH_SELf_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_PHASE_LMS_THR_SELr_RX_PHASE_THRESH_SELf_SET
#define DSC_RX_PHASE_LMS_THR_SELr_RX_LMS_THRESH_SELf_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_PHASE_LMS_THR_SELr_RX_LMS_THRESH_SELf_GET
#define DSC_RX_PHASE_LMS_THR_SELr_RX_LMS_THRESH_SELf_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_PHASE_LMS_THR_SELr_RX_LMS_THRESH_SELf_SET
#define READ_DSC_RX_PHASE_LMS_THR_SELr BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_PHASE_LMS_THR_SELr
#define WRITE_DSC_RX_PHASE_LMS_THR_SELr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_PHASE_LMS_THR_SELr
#define MODIFY_DSC_RX_PHASE_LMS_THR_SELr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_PHASE_LMS_THR_SELr
#define READLN_DSC_RX_PHASE_LMS_THR_SELr BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_PHASE_LMS_THR_SELr
#define WRITELN_DSC_RX_PHASE_LMS_THR_SELr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_PHASE_LMS_THR_SELr
#define WRITEALL_DSC_RX_PHASE_LMS_THR_SELr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_PHASE_LMS_THR_SELr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_RX_PHASE_LMS_THR_SELr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_RX_DFE_TAP2_AB
 * BLOCKS:   DSC_AFE2
 * REGADDR:  0xd010
 * DEVAD:    1
 * DESC:     rx_dfe_tap2_ab register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXB_DFE_TAP2     signed 2's complement  +/-15, 1LSB=150mV/64
 *     RXA_DFE_TAP2     signed 2's complement +/-15, 1LSB=150mV/64
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_ABr (0x0001d010 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_ABr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP2_AB.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_ABr_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap2_ab[1];
	uint32_t _dsc_rx_dfe_tap2_ab;
} BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_ABr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_ABr_CLR(r) (r).dsc_rx_dfe_tap2_ab[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_ABr_SET(r,d) (r).dsc_rx_dfe_tap2_ab[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_ABr_GET(r) (r).dsc_rx_dfe_tap2_ab[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_ABr_RXA_DFE_TAP2f_GET(r) ((((r).dsc_rx_dfe_tap2_ab[0]) >> 8) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_ABr_RXA_DFE_TAP2f_SET(r,f) (r).dsc_rx_dfe_tap2_ab[0]=(((r).dsc_rx_dfe_tap2_ab[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8)) | (31 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_ABr_RXB_DFE_TAP2f_GET(r) (((r).dsc_rx_dfe_tap2_ab[0]) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_ABr_RXB_DFE_TAP2f_SET(r,f) (r).dsc_rx_dfe_tap2_ab[0]=(((r).dsc_rx_dfe_tap2_ab[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access DSC_RX_DFE_TAP2_AB.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_DFE_TAP2_ABr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_ABr,(_r._dsc_rx_dfe_tap2_ab))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_DFE_TAP2_ABr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_ABr,(_r._dsc_rx_dfe_tap2_ab)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_DFE_TAP2_ABr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_ABr,(_r._dsc_rx_dfe_tap2_ab))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_DFE_TAP2_ABr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_ABr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap2_ab))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_DFE_TAP2_ABr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_ABr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap2_ab))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_DFE_TAP2_ABr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_ABr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap2_ab))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP2_ABr BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_ABr
#define DSC_RX_DFE_TAP2_ABr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_ABr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_ABr_t DSC_RX_DFE_TAP2_ABr_t;
#define DSC_RX_DFE_TAP2_ABr_CLR BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_ABr_CLR
#define DSC_RX_DFE_TAP2_ABr_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_ABr_SET
#define DSC_RX_DFE_TAP2_ABr_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_ABr_GET
#define DSC_RX_DFE_TAP2_ABr_RXA_DFE_TAP2f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_ABr_RXA_DFE_TAP2f_GET
#define DSC_RX_DFE_TAP2_ABr_RXA_DFE_TAP2f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_ABr_RXA_DFE_TAP2f_SET
#define DSC_RX_DFE_TAP2_ABr_RXB_DFE_TAP2f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_ABr_RXB_DFE_TAP2f_GET
#define DSC_RX_DFE_TAP2_ABr_RXB_DFE_TAP2f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_ABr_RXB_DFE_TAP2f_SET
#define READ_DSC_RX_DFE_TAP2_ABr BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_DFE_TAP2_ABr
#define WRITE_DSC_RX_DFE_TAP2_ABr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_DFE_TAP2_ABr
#define MODIFY_DSC_RX_DFE_TAP2_ABr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_DFE_TAP2_ABr
#define READLN_DSC_RX_DFE_TAP2_ABr BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_DFE_TAP2_ABr
#define WRITELN_DSC_RX_DFE_TAP2_ABr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_DFE_TAP2_ABr
#define WRITEALL_DSC_RX_DFE_TAP2_ABr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_DFE_TAP2_ABr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_ABr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_RX_DFE_TAP2_CD
 * BLOCKS:   DSC_AFE2
 * REGADDR:  0xd011
 * DEVAD:    1
 * DESC:     rx_dfe_tap2_cd register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXD_DFE_TAP2     signed 2's complement +/-15, 1LSB=150mV/64
 *     RXC_DFE_TAP2     signed 2's complement +/-15, 1LSB=150mV/64
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_CDr (0x0001d011 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_CDr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP2_CD.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_CDr_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap2_cd[1];
	uint32_t _dsc_rx_dfe_tap2_cd;
} BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_CDr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_CDr_CLR(r) (r).dsc_rx_dfe_tap2_cd[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_CDr_SET(r,d) (r).dsc_rx_dfe_tap2_cd[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_CDr_GET(r) (r).dsc_rx_dfe_tap2_cd[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_CDr_RXC_DFE_TAP2f_GET(r) ((((r).dsc_rx_dfe_tap2_cd[0]) >> 8) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_CDr_RXC_DFE_TAP2f_SET(r,f) (r).dsc_rx_dfe_tap2_cd[0]=(((r).dsc_rx_dfe_tap2_cd[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8)) | (31 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_CDr_RXD_DFE_TAP2f_GET(r) (((r).dsc_rx_dfe_tap2_cd[0]) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_CDr_RXD_DFE_TAP2f_SET(r,f) (r).dsc_rx_dfe_tap2_cd[0]=(((r).dsc_rx_dfe_tap2_cd[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access DSC_RX_DFE_TAP2_CD.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_DFE_TAP2_CDr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_CDr,(_r._dsc_rx_dfe_tap2_cd))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_DFE_TAP2_CDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_CDr,(_r._dsc_rx_dfe_tap2_cd)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_DFE_TAP2_CDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_CDr,(_r._dsc_rx_dfe_tap2_cd))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_DFE_TAP2_CDr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_CDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap2_cd))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_DFE_TAP2_CDr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_CDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap2_cd))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_DFE_TAP2_CDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_CDr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap2_cd))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP2_CDr BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_CDr
#define DSC_RX_DFE_TAP2_CDr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_CDr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_CDr_t DSC_RX_DFE_TAP2_CDr_t;
#define DSC_RX_DFE_TAP2_CDr_CLR BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_CDr_CLR
#define DSC_RX_DFE_TAP2_CDr_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_CDr_SET
#define DSC_RX_DFE_TAP2_CDr_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_CDr_GET
#define DSC_RX_DFE_TAP2_CDr_RXC_DFE_TAP2f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_CDr_RXC_DFE_TAP2f_GET
#define DSC_RX_DFE_TAP2_CDr_RXC_DFE_TAP2f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_CDr_RXC_DFE_TAP2f_SET
#define DSC_RX_DFE_TAP2_CDr_RXD_DFE_TAP2f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_CDr_RXD_DFE_TAP2f_GET
#define DSC_RX_DFE_TAP2_CDr_RXD_DFE_TAP2f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_CDr_RXD_DFE_TAP2f_SET
#define READ_DSC_RX_DFE_TAP2_CDr BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_DFE_TAP2_CDr
#define WRITE_DSC_RX_DFE_TAP2_CDr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_DFE_TAP2_CDr
#define MODIFY_DSC_RX_DFE_TAP2_CDr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_DFE_TAP2_CDr
#define READLN_DSC_RX_DFE_TAP2_CDr BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_DFE_TAP2_CDr
#define WRITELN_DSC_RX_DFE_TAP2_CDr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_DFE_TAP2_CDr
#define WRITEALL_DSC_RX_DFE_TAP2_CDr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_DFE_TAP2_CDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP2_CDr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_RX_DFE_TAP3_AB
 * BLOCKS:   DSC_AFE2
 * REGADDR:  0xd012
 * DEVAD:    1
 * DESC:     rx_dfe_tap3_ab register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXB_DFE_TAP3     signed 2's complement +/-15, 1LSB=150mV/64
 *     RXA_DFE_TAP3     signed 2's complement +/-15, 1LSB=150mV/64
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_ABr (0x0001d012 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_ABr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP3_AB.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_ABr_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap3_ab[1];
	uint32_t _dsc_rx_dfe_tap3_ab;
} BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_ABr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_ABr_CLR(r) (r).dsc_rx_dfe_tap3_ab[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_ABr_SET(r,d) (r).dsc_rx_dfe_tap3_ab[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_ABr_GET(r) (r).dsc_rx_dfe_tap3_ab[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_ABr_RXA_DFE_TAP3f_GET(r) ((((r).dsc_rx_dfe_tap3_ab[0]) >> 8) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_ABr_RXA_DFE_TAP3f_SET(r,f) (r).dsc_rx_dfe_tap3_ab[0]=(((r).dsc_rx_dfe_tap3_ab[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8)) | (31 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_ABr_RXB_DFE_TAP3f_GET(r) (((r).dsc_rx_dfe_tap3_ab[0]) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_ABr_RXB_DFE_TAP3f_SET(r,f) (r).dsc_rx_dfe_tap3_ab[0]=(((r).dsc_rx_dfe_tap3_ab[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access DSC_RX_DFE_TAP3_AB.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_DFE_TAP3_ABr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_ABr,(_r._dsc_rx_dfe_tap3_ab))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_DFE_TAP3_ABr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_ABr,(_r._dsc_rx_dfe_tap3_ab)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_DFE_TAP3_ABr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_ABr,(_r._dsc_rx_dfe_tap3_ab))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_DFE_TAP3_ABr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_ABr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap3_ab))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_DFE_TAP3_ABr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_ABr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap3_ab))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_DFE_TAP3_ABr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_ABr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap3_ab))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP3_ABr BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_ABr
#define DSC_RX_DFE_TAP3_ABr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_ABr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_ABr_t DSC_RX_DFE_TAP3_ABr_t;
#define DSC_RX_DFE_TAP3_ABr_CLR BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_ABr_CLR
#define DSC_RX_DFE_TAP3_ABr_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_ABr_SET
#define DSC_RX_DFE_TAP3_ABr_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_ABr_GET
#define DSC_RX_DFE_TAP3_ABr_RXA_DFE_TAP3f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_ABr_RXA_DFE_TAP3f_GET
#define DSC_RX_DFE_TAP3_ABr_RXA_DFE_TAP3f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_ABr_RXA_DFE_TAP3f_SET
#define DSC_RX_DFE_TAP3_ABr_RXB_DFE_TAP3f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_ABr_RXB_DFE_TAP3f_GET
#define DSC_RX_DFE_TAP3_ABr_RXB_DFE_TAP3f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_ABr_RXB_DFE_TAP3f_SET
#define READ_DSC_RX_DFE_TAP3_ABr BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_DFE_TAP3_ABr
#define WRITE_DSC_RX_DFE_TAP3_ABr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_DFE_TAP3_ABr
#define MODIFY_DSC_RX_DFE_TAP3_ABr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_DFE_TAP3_ABr
#define READLN_DSC_RX_DFE_TAP3_ABr BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_DFE_TAP3_ABr
#define WRITELN_DSC_RX_DFE_TAP3_ABr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_DFE_TAP3_ABr
#define WRITEALL_DSC_RX_DFE_TAP3_ABr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_DFE_TAP3_ABr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_ABr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_RX_DFE_TAP3_CD
 * BLOCKS:   DSC_AFE2
 * REGADDR:  0xd013
 * DEVAD:    1
 * DESC:     rx_dfe_tap3_cd register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXD_DFE_TAP3     signed 2's complement +/-15, 1LSB=150mV/64
 *     RXC_DFE_TAP3     signed 2's complement +/-15, 1LSB=150mV/64
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_CDr (0x0001d013 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_CDr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP3_CD.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_CDr_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap3_cd[1];
	uint32_t _dsc_rx_dfe_tap3_cd;
} BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_CDr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_CDr_CLR(r) (r).dsc_rx_dfe_tap3_cd[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_CDr_SET(r,d) (r).dsc_rx_dfe_tap3_cd[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_CDr_GET(r) (r).dsc_rx_dfe_tap3_cd[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_CDr_RXC_DFE_TAP3f_GET(r) ((((r).dsc_rx_dfe_tap3_cd[0]) >> 8) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_CDr_RXC_DFE_TAP3f_SET(r,f) (r).dsc_rx_dfe_tap3_cd[0]=(((r).dsc_rx_dfe_tap3_cd[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8)) | (31 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_CDr_RXD_DFE_TAP3f_GET(r) (((r).dsc_rx_dfe_tap3_cd[0]) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_CDr_RXD_DFE_TAP3f_SET(r,f) (r).dsc_rx_dfe_tap3_cd[0]=(((r).dsc_rx_dfe_tap3_cd[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access DSC_RX_DFE_TAP3_CD.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_DFE_TAP3_CDr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_CDr,(_r._dsc_rx_dfe_tap3_cd))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_DFE_TAP3_CDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_CDr,(_r._dsc_rx_dfe_tap3_cd)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_DFE_TAP3_CDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_CDr,(_r._dsc_rx_dfe_tap3_cd))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_DFE_TAP3_CDr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_CDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap3_cd))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_DFE_TAP3_CDr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_CDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap3_cd))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_DFE_TAP3_CDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_CDr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap3_cd))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP3_CDr BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_CDr
#define DSC_RX_DFE_TAP3_CDr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_CDr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_CDr_t DSC_RX_DFE_TAP3_CDr_t;
#define DSC_RX_DFE_TAP3_CDr_CLR BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_CDr_CLR
#define DSC_RX_DFE_TAP3_CDr_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_CDr_SET
#define DSC_RX_DFE_TAP3_CDr_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_CDr_GET
#define DSC_RX_DFE_TAP3_CDr_RXC_DFE_TAP3f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_CDr_RXC_DFE_TAP3f_GET
#define DSC_RX_DFE_TAP3_CDr_RXC_DFE_TAP3f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_CDr_RXC_DFE_TAP3f_SET
#define DSC_RX_DFE_TAP3_CDr_RXD_DFE_TAP3f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_CDr_RXD_DFE_TAP3f_GET
#define DSC_RX_DFE_TAP3_CDr_RXD_DFE_TAP3f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_CDr_RXD_DFE_TAP3f_SET
#define READ_DSC_RX_DFE_TAP3_CDr BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_DFE_TAP3_CDr
#define WRITE_DSC_RX_DFE_TAP3_CDr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_DFE_TAP3_CDr
#define MODIFY_DSC_RX_DFE_TAP3_CDr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_DFE_TAP3_CDr
#define READLN_DSC_RX_DFE_TAP3_CDr BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_DFE_TAP3_CDr
#define WRITELN_DSC_RX_DFE_TAP3_CDr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_DFE_TAP3_CDr
#define WRITEALL_DSC_RX_DFE_TAP3_CDr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_DFE_TAP3_CDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP3_CDr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_RX_DFE_TAP4_ABCD
 * BLOCKS:   DSC_AFE2
 * REGADDR:  0xd014
 * DEVAD:    1
 * DESC:     rx_dfe_tap4_abcd register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXD_DFE_TAP4     signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXC_DFE_TAP4     signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXB_DFE_TAP4     signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXA_DFE_TAP4     signed 2's complement +/-7, 1 LSB=150mV/64
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP4_ABCDr (0x0001d014 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP4_ABCDr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP4_ABCD.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP4_ABCDr_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap4_abcd[1];
	uint32_t _dsc_rx_dfe_tap4_abcd;
} BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP4_ABCDr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP4_ABCDr_CLR(r) (r).dsc_rx_dfe_tap4_abcd[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP4_ABCDr_SET(r,d) (r).dsc_rx_dfe_tap4_abcd[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP4_ABCDr_GET(r) (r).dsc_rx_dfe_tap4_abcd[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP4_ABCDr_RXA_DFE_TAP4f_GET(r) ((((r).dsc_rx_dfe_tap4_abcd[0]) >> 12) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP4_ABCDr_RXA_DFE_TAP4f_SET(r,f) (r).dsc_rx_dfe_tap4_abcd[0]=(((r).dsc_rx_dfe_tap4_abcd[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP4_ABCDr_RXB_DFE_TAP4f_GET(r) ((((r).dsc_rx_dfe_tap4_abcd[0]) >> 8) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP4_ABCDr_RXB_DFE_TAP4f_SET(r,f) (r).dsc_rx_dfe_tap4_abcd[0]=(((r).dsc_rx_dfe_tap4_abcd[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP4_ABCDr_RXC_DFE_TAP4f_GET(r) ((((r).dsc_rx_dfe_tap4_abcd[0]) >> 4) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP4_ABCDr_RXC_DFE_TAP4f_SET(r,f) (r).dsc_rx_dfe_tap4_abcd[0]=(((r).dsc_rx_dfe_tap4_abcd[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4)) | (15 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP4_ABCDr_RXD_DFE_TAP4f_GET(r) (((r).dsc_rx_dfe_tap4_abcd[0]) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP4_ABCDr_RXD_DFE_TAP4f_SET(r,f) (r).dsc_rx_dfe_tap4_abcd[0]=(((r).dsc_rx_dfe_tap4_abcd[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access DSC_RX_DFE_TAP4_ABCD.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_DFE_TAP4_ABCDr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP4_ABCDr,(_r._dsc_rx_dfe_tap4_abcd))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_DFE_TAP4_ABCDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP4_ABCDr,(_r._dsc_rx_dfe_tap4_abcd)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_DFE_TAP4_ABCDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP4_ABCDr,(_r._dsc_rx_dfe_tap4_abcd))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_DFE_TAP4_ABCDr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP4_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap4_abcd))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_DFE_TAP4_ABCDr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP4_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap4_abcd))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_DFE_TAP4_ABCDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP4_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap4_abcd))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP4_ABCDr BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP4_ABCDr
#define DSC_RX_DFE_TAP4_ABCDr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP4_ABCDr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP4_ABCDr_t DSC_RX_DFE_TAP4_ABCDr_t;
#define DSC_RX_DFE_TAP4_ABCDr_CLR BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP4_ABCDr_CLR
#define DSC_RX_DFE_TAP4_ABCDr_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP4_ABCDr_SET
#define DSC_RX_DFE_TAP4_ABCDr_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP4_ABCDr_GET
#define DSC_RX_DFE_TAP4_ABCDr_RXA_DFE_TAP4f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP4_ABCDr_RXA_DFE_TAP4f_GET
#define DSC_RX_DFE_TAP4_ABCDr_RXA_DFE_TAP4f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP4_ABCDr_RXA_DFE_TAP4f_SET
#define DSC_RX_DFE_TAP4_ABCDr_RXB_DFE_TAP4f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP4_ABCDr_RXB_DFE_TAP4f_GET
#define DSC_RX_DFE_TAP4_ABCDr_RXB_DFE_TAP4f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP4_ABCDr_RXB_DFE_TAP4f_SET
#define DSC_RX_DFE_TAP4_ABCDr_RXC_DFE_TAP4f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP4_ABCDr_RXC_DFE_TAP4f_GET
#define DSC_RX_DFE_TAP4_ABCDr_RXC_DFE_TAP4f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP4_ABCDr_RXC_DFE_TAP4f_SET
#define DSC_RX_DFE_TAP4_ABCDr_RXD_DFE_TAP4f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP4_ABCDr_RXD_DFE_TAP4f_GET
#define DSC_RX_DFE_TAP4_ABCDr_RXD_DFE_TAP4f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP4_ABCDr_RXD_DFE_TAP4f_SET
#define READ_DSC_RX_DFE_TAP4_ABCDr BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_DFE_TAP4_ABCDr
#define WRITE_DSC_RX_DFE_TAP4_ABCDr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_DFE_TAP4_ABCDr
#define MODIFY_DSC_RX_DFE_TAP4_ABCDr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_DFE_TAP4_ABCDr
#define READLN_DSC_RX_DFE_TAP4_ABCDr BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_DFE_TAP4_ABCDr
#define WRITELN_DSC_RX_DFE_TAP4_ABCDr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_DFE_TAP4_ABCDr
#define WRITEALL_DSC_RX_DFE_TAP4_ABCDr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_DFE_TAP4_ABCDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP4_ABCDr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_RX_DFE_TAP5_ABCD
 * BLOCKS:   DSC_AFE2
 * REGADDR:  0xd015
 * DEVAD:    1
 * DESC:     rx_dfe_tap5_abcd register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXD_DFE_TAP5     signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXC_DFE_TAP5     signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXB_DFE_TAP5     signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXA_DFE_TAP5     signed 2's complement +/-7, 1 LSB=150mV/64
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP5_ABCDr (0x0001d015 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP5_ABCDr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP5_ABCD.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP5_ABCDr_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap5_abcd[1];
	uint32_t _dsc_rx_dfe_tap5_abcd;
} BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP5_ABCDr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP5_ABCDr_CLR(r) (r).dsc_rx_dfe_tap5_abcd[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP5_ABCDr_SET(r,d) (r).dsc_rx_dfe_tap5_abcd[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP5_ABCDr_GET(r) (r).dsc_rx_dfe_tap5_abcd[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP5_ABCDr_RXA_DFE_TAP5f_GET(r) ((((r).dsc_rx_dfe_tap5_abcd[0]) >> 12) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP5_ABCDr_RXA_DFE_TAP5f_SET(r,f) (r).dsc_rx_dfe_tap5_abcd[0]=(((r).dsc_rx_dfe_tap5_abcd[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP5_ABCDr_RXB_DFE_TAP5f_GET(r) ((((r).dsc_rx_dfe_tap5_abcd[0]) >> 8) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP5_ABCDr_RXB_DFE_TAP5f_SET(r,f) (r).dsc_rx_dfe_tap5_abcd[0]=(((r).dsc_rx_dfe_tap5_abcd[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP5_ABCDr_RXC_DFE_TAP5f_GET(r) ((((r).dsc_rx_dfe_tap5_abcd[0]) >> 4) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP5_ABCDr_RXC_DFE_TAP5f_SET(r,f) (r).dsc_rx_dfe_tap5_abcd[0]=(((r).dsc_rx_dfe_tap5_abcd[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4)) | (15 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP5_ABCDr_RXD_DFE_TAP5f_GET(r) (((r).dsc_rx_dfe_tap5_abcd[0]) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP5_ABCDr_RXD_DFE_TAP5f_SET(r,f) (r).dsc_rx_dfe_tap5_abcd[0]=(((r).dsc_rx_dfe_tap5_abcd[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access DSC_RX_DFE_TAP5_ABCD.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_DFE_TAP5_ABCDr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP5_ABCDr,(_r._dsc_rx_dfe_tap5_abcd))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_DFE_TAP5_ABCDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP5_ABCDr,(_r._dsc_rx_dfe_tap5_abcd)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_DFE_TAP5_ABCDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP5_ABCDr,(_r._dsc_rx_dfe_tap5_abcd))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_DFE_TAP5_ABCDr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP5_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap5_abcd))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_DFE_TAP5_ABCDr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP5_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap5_abcd))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_DFE_TAP5_ABCDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP5_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap5_abcd))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP5_ABCDr BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP5_ABCDr
#define DSC_RX_DFE_TAP5_ABCDr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP5_ABCDr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP5_ABCDr_t DSC_RX_DFE_TAP5_ABCDr_t;
#define DSC_RX_DFE_TAP5_ABCDr_CLR BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP5_ABCDr_CLR
#define DSC_RX_DFE_TAP5_ABCDr_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP5_ABCDr_SET
#define DSC_RX_DFE_TAP5_ABCDr_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP5_ABCDr_GET
#define DSC_RX_DFE_TAP5_ABCDr_RXA_DFE_TAP5f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP5_ABCDr_RXA_DFE_TAP5f_GET
#define DSC_RX_DFE_TAP5_ABCDr_RXA_DFE_TAP5f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP5_ABCDr_RXA_DFE_TAP5f_SET
#define DSC_RX_DFE_TAP5_ABCDr_RXB_DFE_TAP5f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP5_ABCDr_RXB_DFE_TAP5f_GET
#define DSC_RX_DFE_TAP5_ABCDr_RXB_DFE_TAP5f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP5_ABCDr_RXB_DFE_TAP5f_SET
#define DSC_RX_DFE_TAP5_ABCDr_RXC_DFE_TAP5f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP5_ABCDr_RXC_DFE_TAP5f_GET
#define DSC_RX_DFE_TAP5_ABCDr_RXC_DFE_TAP5f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP5_ABCDr_RXC_DFE_TAP5f_SET
#define DSC_RX_DFE_TAP5_ABCDr_RXD_DFE_TAP5f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP5_ABCDr_RXD_DFE_TAP5f_GET
#define DSC_RX_DFE_TAP5_ABCDr_RXD_DFE_TAP5f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP5_ABCDr_RXD_DFE_TAP5f_SET
#define READ_DSC_RX_DFE_TAP5_ABCDr BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_DFE_TAP5_ABCDr
#define WRITE_DSC_RX_DFE_TAP5_ABCDr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_DFE_TAP5_ABCDr
#define MODIFY_DSC_RX_DFE_TAP5_ABCDr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_DFE_TAP5_ABCDr
#define READLN_DSC_RX_DFE_TAP5_ABCDr BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_DFE_TAP5_ABCDr
#define WRITELN_DSC_RX_DFE_TAP5_ABCDr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_DFE_TAP5_ABCDr
#define WRITEALL_DSC_RX_DFE_TAP5_ABCDr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_DFE_TAP5_ABCDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP5_ABCDr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_RX_DFE_TAP6_ABCD
 * BLOCKS:   DSC_AFE2
 * REGADDR:  0xd016
 * DEVAD:    1
 * DESC:     rx_dfe_tap6_abcd register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXD_DFE_TAP6     signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXC_DFE_TAP6     signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXB_DFE_TAP6     signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXA_DFE_TAP6     signed 2's complement +/-7, 1 LSB=150mV/64
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP6_ABCDr (0x0001d016 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP6_ABCDr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP6_ABCD.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP6_ABCDr_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap6_abcd[1];
	uint32_t _dsc_rx_dfe_tap6_abcd;
} BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP6_ABCDr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP6_ABCDr_CLR(r) (r).dsc_rx_dfe_tap6_abcd[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP6_ABCDr_SET(r,d) (r).dsc_rx_dfe_tap6_abcd[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP6_ABCDr_GET(r) (r).dsc_rx_dfe_tap6_abcd[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP6_ABCDr_RXA_DFE_TAP6f_GET(r) ((((r).dsc_rx_dfe_tap6_abcd[0]) >> 12) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP6_ABCDr_RXA_DFE_TAP6f_SET(r,f) (r).dsc_rx_dfe_tap6_abcd[0]=(((r).dsc_rx_dfe_tap6_abcd[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP6_ABCDr_RXB_DFE_TAP6f_GET(r) ((((r).dsc_rx_dfe_tap6_abcd[0]) >> 8) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP6_ABCDr_RXB_DFE_TAP6f_SET(r,f) (r).dsc_rx_dfe_tap6_abcd[0]=(((r).dsc_rx_dfe_tap6_abcd[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP6_ABCDr_RXC_DFE_TAP6f_GET(r) ((((r).dsc_rx_dfe_tap6_abcd[0]) >> 4) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP6_ABCDr_RXC_DFE_TAP6f_SET(r,f) (r).dsc_rx_dfe_tap6_abcd[0]=(((r).dsc_rx_dfe_tap6_abcd[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4)) | (15 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP6_ABCDr_RXD_DFE_TAP6f_GET(r) (((r).dsc_rx_dfe_tap6_abcd[0]) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP6_ABCDr_RXD_DFE_TAP6f_SET(r,f) (r).dsc_rx_dfe_tap6_abcd[0]=(((r).dsc_rx_dfe_tap6_abcd[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access DSC_RX_DFE_TAP6_ABCD.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_DFE_TAP6_ABCDr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP6_ABCDr,(_r._dsc_rx_dfe_tap6_abcd))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_DFE_TAP6_ABCDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP6_ABCDr,(_r._dsc_rx_dfe_tap6_abcd)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_DFE_TAP6_ABCDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP6_ABCDr,(_r._dsc_rx_dfe_tap6_abcd))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_DFE_TAP6_ABCDr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP6_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap6_abcd))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_DFE_TAP6_ABCDr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP6_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap6_abcd))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_DFE_TAP6_ABCDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP6_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap6_abcd))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP6_ABCDr BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP6_ABCDr
#define DSC_RX_DFE_TAP6_ABCDr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP6_ABCDr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP6_ABCDr_t DSC_RX_DFE_TAP6_ABCDr_t;
#define DSC_RX_DFE_TAP6_ABCDr_CLR BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP6_ABCDr_CLR
#define DSC_RX_DFE_TAP6_ABCDr_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP6_ABCDr_SET
#define DSC_RX_DFE_TAP6_ABCDr_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP6_ABCDr_GET
#define DSC_RX_DFE_TAP6_ABCDr_RXA_DFE_TAP6f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP6_ABCDr_RXA_DFE_TAP6f_GET
#define DSC_RX_DFE_TAP6_ABCDr_RXA_DFE_TAP6f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP6_ABCDr_RXA_DFE_TAP6f_SET
#define DSC_RX_DFE_TAP6_ABCDr_RXB_DFE_TAP6f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP6_ABCDr_RXB_DFE_TAP6f_GET
#define DSC_RX_DFE_TAP6_ABCDr_RXB_DFE_TAP6f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP6_ABCDr_RXB_DFE_TAP6f_SET
#define DSC_RX_DFE_TAP6_ABCDr_RXC_DFE_TAP6f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP6_ABCDr_RXC_DFE_TAP6f_GET
#define DSC_RX_DFE_TAP6_ABCDr_RXC_DFE_TAP6f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP6_ABCDr_RXC_DFE_TAP6f_SET
#define DSC_RX_DFE_TAP6_ABCDr_RXD_DFE_TAP6f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP6_ABCDr_RXD_DFE_TAP6f_GET
#define DSC_RX_DFE_TAP6_ABCDr_RXD_DFE_TAP6f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP6_ABCDr_RXD_DFE_TAP6f_SET
#define READ_DSC_RX_DFE_TAP6_ABCDr BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_DFE_TAP6_ABCDr
#define WRITE_DSC_RX_DFE_TAP6_ABCDr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_DFE_TAP6_ABCDr
#define MODIFY_DSC_RX_DFE_TAP6_ABCDr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_DFE_TAP6_ABCDr
#define READLN_DSC_RX_DFE_TAP6_ABCDr BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_DFE_TAP6_ABCDr
#define WRITELN_DSC_RX_DFE_TAP6_ABCDr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_DFE_TAP6_ABCDr
#define WRITEALL_DSC_RX_DFE_TAP6_ABCDr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_DFE_TAP6_ABCDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP6_ABCDr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_RX_DFE_TAP7_ABCD
 * BLOCKS:   DSC_AFE2
 * REGADDR:  0xd017
 * DEVAD:    1
 * DESC:     rx_dfe_tap7_abcd register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXD_DFE_TAP7     signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXC_DFE_TAP7     signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXB_DFE_TAP7     signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXA_DFE_TAP7     signed 2's complement +/-7, 1 LSB=150mV/64
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_ABCDr (0x0001d017 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_ABCDr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP7_ABCD.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_ABCDr_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap7_abcd[1];
	uint32_t _dsc_rx_dfe_tap7_abcd;
} BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_ABCDr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_ABCDr_CLR(r) (r).dsc_rx_dfe_tap7_abcd[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_ABCDr_SET(r,d) (r).dsc_rx_dfe_tap7_abcd[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_ABCDr_GET(r) (r).dsc_rx_dfe_tap7_abcd[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_ABCDr_RXA_DFE_TAP7f_GET(r) ((((r).dsc_rx_dfe_tap7_abcd[0]) >> 12) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_ABCDr_RXA_DFE_TAP7f_SET(r,f) (r).dsc_rx_dfe_tap7_abcd[0]=(((r).dsc_rx_dfe_tap7_abcd[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_ABCDr_RXB_DFE_TAP7f_GET(r) ((((r).dsc_rx_dfe_tap7_abcd[0]) >> 8) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_ABCDr_RXB_DFE_TAP7f_SET(r,f) (r).dsc_rx_dfe_tap7_abcd[0]=(((r).dsc_rx_dfe_tap7_abcd[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_ABCDr_RXC_DFE_TAP7f_GET(r) ((((r).dsc_rx_dfe_tap7_abcd[0]) >> 4) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_ABCDr_RXC_DFE_TAP7f_SET(r,f) (r).dsc_rx_dfe_tap7_abcd[0]=(((r).dsc_rx_dfe_tap7_abcd[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4)) | (15 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_ABCDr_RXD_DFE_TAP7f_GET(r) (((r).dsc_rx_dfe_tap7_abcd[0]) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_ABCDr_RXD_DFE_TAP7f_SET(r,f) (r).dsc_rx_dfe_tap7_abcd[0]=(((r).dsc_rx_dfe_tap7_abcd[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access DSC_RX_DFE_TAP7_ABCD.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_DFE_TAP7_ABCDr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_ABCDr,(_r._dsc_rx_dfe_tap7_abcd))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_DFE_TAP7_ABCDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_ABCDr,(_r._dsc_rx_dfe_tap7_abcd)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_DFE_TAP7_ABCDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_ABCDr,(_r._dsc_rx_dfe_tap7_abcd))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_DFE_TAP7_ABCDr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap7_abcd))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_DFE_TAP7_ABCDr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap7_abcd))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_DFE_TAP7_ABCDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap7_abcd))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP7_ABCDr BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_ABCDr
#define DSC_RX_DFE_TAP7_ABCDr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_ABCDr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_ABCDr_t DSC_RX_DFE_TAP7_ABCDr_t;
#define DSC_RX_DFE_TAP7_ABCDr_CLR BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_ABCDr_CLR
#define DSC_RX_DFE_TAP7_ABCDr_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_ABCDr_SET
#define DSC_RX_DFE_TAP7_ABCDr_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_ABCDr_GET
#define DSC_RX_DFE_TAP7_ABCDr_RXA_DFE_TAP7f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_ABCDr_RXA_DFE_TAP7f_GET
#define DSC_RX_DFE_TAP7_ABCDr_RXA_DFE_TAP7f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_ABCDr_RXA_DFE_TAP7f_SET
#define DSC_RX_DFE_TAP7_ABCDr_RXB_DFE_TAP7f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_ABCDr_RXB_DFE_TAP7f_GET
#define DSC_RX_DFE_TAP7_ABCDr_RXB_DFE_TAP7f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_ABCDr_RXB_DFE_TAP7f_SET
#define DSC_RX_DFE_TAP7_ABCDr_RXC_DFE_TAP7f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_ABCDr_RXC_DFE_TAP7f_GET
#define DSC_RX_DFE_TAP7_ABCDr_RXC_DFE_TAP7f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_ABCDr_RXC_DFE_TAP7f_SET
#define DSC_RX_DFE_TAP7_ABCDr_RXD_DFE_TAP7f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_ABCDr_RXD_DFE_TAP7f_GET
#define DSC_RX_DFE_TAP7_ABCDr_RXD_DFE_TAP7f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_ABCDr_RXD_DFE_TAP7f_SET
#define READ_DSC_RX_DFE_TAP7_ABCDr BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_DFE_TAP7_ABCDr
#define WRITE_DSC_RX_DFE_TAP7_ABCDr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_DFE_TAP7_ABCDr
#define MODIFY_DSC_RX_DFE_TAP7_ABCDr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_DFE_TAP7_ABCDr
#define READLN_DSC_RX_DFE_TAP7_ABCDr BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_DFE_TAP7_ABCDr
#define WRITELN_DSC_RX_DFE_TAP7_ABCDr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_DFE_TAP7_ABCDr
#define WRITEALL_DSC_RX_DFE_TAP7_ABCDr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_DFE_TAP7_ABCDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_ABCDr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_RX_DFE_TAP8_ABCD
 * BLOCKS:   DSC_AFE2
 * REGADDR:  0xd018
 * DEVAD:    1
 * DESC:     rx_dfe_tap8_abcd register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXD_DFE_TAP8     signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXC_DFE_TAP8     signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXB_DFE_TAP8     signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXA_DFE_TAP8     signed 2's complement +/-7, 1 LSB=150mV/64
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP8_ABCDr (0x0001d018 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP8_ABCDr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP8_ABCD.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP8_ABCDr_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap8_abcd[1];
	uint32_t _dsc_rx_dfe_tap8_abcd;
} BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP8_ABCDr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP8_ABCDr_CLR(r) (r).dsc_rx_dfe_tap8_abcd[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP8_ABCDr_SET(r,d) (r).dsc_rx_dfe_tap8_abcd[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP8_ABCDr_GET(r) (r).dsc_rx_dfe_tap8_abcd[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP8_ABCDr_RXA_DFE_TAP8f_GET(r) ((((r).dsc_rx_dfe_tap8_abcd[0]) >> 12) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP8_ABCDr_RXA_DFE_TAP8f_SET(r,f) (r).dsc_rx_dfe_tap8_abcd[0]=(((r).dsc_rx_dfe_tap8_abcd[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP8_ABCDr_RXB_DFE_TAP8f_GET(r) ((((r).dsc_rx_dfe_tap8_abcd[0]) >> 8) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP8_ABCDr_RXB_DFE_TAP8f_SET(r,f) (r).dsc_rx_dfe_tap8_abcd[0]=(((r).dsc_rx_dfe_tap8_abcd[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP8_ABCDr_RXC_DFE_TAP8f_GET(r) ((((r).dsc_rx_dfe_tap8_abcd[0]) >> 4) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP8_ABCDr_RXC_DFE_TAP8f_SET(r,f) (r).dsc_rx_dfe_tap8_abcd[0]=(((r).dsc_rx_dfe_tap8_abcd[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4)) | (15 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP8_ABCDr_RXD_DFE_TAP8f_GET(r) (((r).dsc_rx_dfe_tap8_abcd[0]) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP8_ABCDr_RXD_DFE_TAP8f_SET(r,f) (r).dsc_rx_dfe_tap8_abcd[0]=(((r).dsc_rx_dfe_tap8_abcd[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access DSC_RX_DFE_TAP8_ABCD.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_DFE_TAP8_ABCDr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP8_ABCDr,(_r._dsc_rx_dfe_tap8_abcd))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_DFE_TAP8_ABCDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP8_ABCDr,(_r._dsc_rx_dfe_tap8_abcd)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_DFE_TAP8_ABCDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP8_ABCDr,(_r._dsc_rx_dfe_tap8_abcd))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_DFE_TAP8_ABCDr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP8_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap8_abcd))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_DFE_TAP8_ABCDr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP8_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap8_abcd))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_DFE_TAP8_ABCDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP8_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap8_abcd))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP8_ABCDr BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP8_ABCDr
#define DSC_RX_DFE_TAP8_ABCDr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP8_ABCDr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP8_ABCDr_t DSC_RX_DFE_TAP8_ABCDr_t;
#define DSC_RX_DFE_TAP8_ABCDr_CLR BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP8_ABCDr_CLR
#define DSC_RX_DFE_TAP8_ABCDr_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP8_ABCDr_SET
#define DSC_RX_DFE_TAP8_ABCDr_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP8_ABCDr_GET
#define DSC_RX_DFE_TAP8_ABCDr_RXA_DFE_TAP8f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP8_ABCDr_RXA_DFE_TAP8f_GET
#define DSC_RX_DFE_TAP8_ABCDr_RXA_DFE_TAP8f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP8_ABCDr_RXA_DFE_TAP8f_SET
#define DSC_RX_DFE_TAP8_ABCDr_RXB_DFE_TAP8f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP8_ABCDr_RXB_DFE_TAP8f_GET
#define DSC_RX_DFE_TAP8_ABCDr_RXB_DFE_TAP8f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP8_ABCDr_RXB_DFE_TAP8f_SET
#define DSC_RX_DFE_TAP8_ABCDr_RXC_DFE_TAP8f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP8_ABCDr_RXC_DFE_TAP8f_GET
#define DSC_RX_DFE_TAP8_ABCDr_RXC_DFE_TAP8f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP8_ABCDr_RXC_DFE_TAP8f_SET
#define DSC_RX_DFE_TAP8_ABCDr_RXD_DFE_TAP8f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP8_ABCDr_RXD_DFE_TAP8f_GET
#define DSC_RX_DFE_TAP8_ABCDr_RXD_DFE_TAP8f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP8_ABCDr_RXD_DFE_TAP8f_SET
#define READ_DSC_RX_DFE_TAP8_ABCDr BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_DFE_TAP8_ABCDr
#define WRITE_DSC_RX_DFE_TAP8_ABCDr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_DFE_TAP8_ABCDr
#define MODIFY_DSC_RX_DFE_TAP8_ABCDr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_DFE_TAP8_ABCDr
#define READLN_DSC_RX_DFE_TAP8_ABCDr BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_DFE_TAP8_ABCDr
#define WRITELN_DSC_RX_DFE_TAP8_ABCDr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_DFE_TAP8_ABCDr
#define WRITEALL_DSC_RX_DFE_TAP8_ABCDr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_DFE_TAP8_ABCDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP8_ABCDr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_RX_DFE_TAP9_ABCD
 * BLOCKS:   DSC_AFE2
 * REGADDR:  0xd019
 * DEVAD:    1
 * DESC:     rx_dfe_tap9_abcd register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXD_DFE_TAP9     signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXC_DFE_TAP9     signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXB_DFE_TAP9     signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXA_DFE_TAP9     signed 2's complement +/-7, 1 LSB=150mV/64
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_ABCDr (0x0001d019 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_ABCDr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP9_ABCD.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_ABCDr_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap9_abcd[1];
	uint32_t _dsc_rx_dfe_tap9_abcd;
} BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_ABCDr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_ABCDr_CLR(r) (r).dsc_rx_dfe_tap9_abcd[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_ABCDr_SET(r,d) (r).dsc_rx_dfe_tap9_abcd[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_ABCDr_GET(r) (r).dsc_rx_dfe_tap9_abcd[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_ABCDr_RXA_DFE_TAP9f_GET(r) ((((r).dsc_rx_dfe_tap9_abcd[0]) >> 12) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_ABCDr_RXA_DFE_TAP9f_SET(r,f) (r).dsc_rx_dfe_tap9_abcd[0]=(((r).dsc_rx_dfe_tap9_abcd[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_ABCDr_RXB_DFE_TAP9f_GET(r) ((((r).dsc_rx_dfe_tap9_abcd[0]) >> 8) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_ABCDr_RXB_DFE_TAP9f_SET(r,f) (r).dsc_rx_dfe_tap9_abcd[0]=(((r).dsc_rx_dfe_tap9_abcd[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_ABCDr_RXC_DFE_TAP9f_GET(r) ((((r).dsc_rx_dfe_tap9_abcd[0]) >> 4) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_ABCDr_RXC_DFE_TAP9f_SET(r,f) (r).dsc_rx_dfe_tap9_abcd[0]=(((r).dsc_rx_dfe_tap9_abcd[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4)) | (15 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_ABCDr_RXD_DFE_TAP9f_GET(r) (((r).dsc_rx_dfe_tap9_abcd[0]) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_ABCDr_RXD_DFE_TAP9f_SET(r,f) (r).dsc_rx_dfe_tap9_abcd[0]=(((r).dsc_rx_dfe_tap9_abcd[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access DSC_RX_DFE_TAP9_ABCD.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_DFE_TAP9_ABCDr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_ABCDr,(_r._dsc_rx_dfe_tap9_abcd))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_DFE_TAP9_ABCDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_ABCDr,(_r._dsc_rx_dfe_tap9_abcd)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_DFE_TAP9_ABCDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_ABCDr,(_r._dsc_rx_dfe_tap9_abcd))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_DFE_TAP9_ABCDr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap9_abcd))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_DFE_TAP9_ABCDr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap9_abcd))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_DFE_TAP9_ABCDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap9_abcd))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP9_ABCDr BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_ABCDr
#define DSC_RX_DFE_TAP9_ABCDr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_ABCDr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_ABCDr_t DSC_RX_DFE_TAP9_ABCDr_t;
#define DSC_RX_DFE_TAP9_ABCDr_CLR BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_ABCDr_CLR
#define DSC_RX_DFE_TAP9_ABCDr_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_ABCDr_SET
#define DSC_RX_DFE_TAP9_ABCDr_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_ABCDr_GET
#define DSC_RX_DFE_TAP9_ABCDr_RXA_DFE_TAP9f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_ABCDr_RXA_DFE_TAP9f_GET
#define DSC_RX_DFE_TAP9_ABCDr_RXA_DFE_TAP9f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_ABCDr_RXA_DFE_TAP9f_SET
#define DSC_RX_DFE_TAP9_ABCDr_RXB_DFE_TAP9f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_ABCDr_RXB_DFE_TAP9f_GET
#define DSC_RX_DFE_TAP9_ABCDr_RXB_DFE_TAP9f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_ABCDr_RXB_DFE_TAP9f_SET
#define DSC_RX_DFE_TAP9_ABCDr_RXC_DFE_TAP9f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_ABCDr_RXC_DFE_TAP9f_GET
#define DSC_RX_DFE_TAP9_ABCDr_RXC_DFE_TAP9f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_ABCDr_RXC_DFE_TAP9f_SET
#define DSC_RX_DFE_TAP9_ABCDr_RXD_DFE_TAP9f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_ABCDr_RXD_DFE_TAP9f_GET
#define DSC_RX_DFE_TAP9_ABCDr_RXD_DFE_TAP9f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_ABCDr_RXD_DFE_TAP9f_SET
#define READ_DSC_RX_DFE_TAP9_ABCDr BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_DFE_TAP9_ABCDr
#define WRITE_DSC_RX_DFE_TAP9_ABCDr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_DFE_TAP9_ABCDr
#define MODIFY_DSC_RX_DFE_TAP9_ABCDr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_DFE_TAP9_ABCDr
#define READLN_DSC_RX_DFE_TAP9_ABCDr BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_DFE_TAP9_ABCDr
#define WRITELN_DSC_RX_DFE_TAP9_ABCDr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_DFE_TAP9_ABCDr
#define WRITEALL_DSC_RX_DFE_TAP9_ABCDr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_DFE_TAP9_ABCDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_ABCDr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_RX_DFE_TAP10_ABCD
 * BLOCKS:   DSC_AFE3
 * REGADDR:  0xd020
 * DEVAD:    1
 * DESC:     rx_dfe_tap10_abcd register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXD_DFE_TAP10    signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXC_DFE_TAP10    signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXB_DFE_TAP10    signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXA_DFE_TAP10    signed 2's complement +/-7, 1 LSB=150mV/64
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP10_ABCDr (0x0001d020 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP10_ABCDr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP10_ABCD.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP10_ABCDr_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap10_abcd[1];
	uint32_t _dsc_rx_dfe_tap10_abcd;
} BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP10_ABCDr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP10_ABCDr_CLR(r) (r).dsc_rx_dfe_tap10_abcd[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP10_ABCDr_SET(r,d) (r).dsc_rx_dfe_tap10_abcd[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP10_ABCDr_GET(r) (r).dsc_rx_dfe_tap10_abcd[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP10_ABCDr_RXA_DFE_TAP10f_GET(r) ((((r).dsc_rx_dfe_tap10_abcd[0]) >> 12) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP10_ABCDr_RXA_DFE_TAP10f_SET(r,f) (r).dsc_rx_dfe_tap10_abcd[0]=(((r).dsc_rx_dfe_tap10_abcd[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP10_ABCDr_RXB_DFE_TAP10f_GET(r) ((((r).dsc_rx_dfe_tap10_abcd[0]) >> 8) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP10_ABCDr_RXB_DFE_TAP10f_SET(r,f) (r).dsc_rx_dfe_tap10_abcd[0]=(((r).dsc_rx_dfe_tap10_abcd[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP10_ABCDr_RXC_DFE_TAP10f_GET(r) ((((r).dsc_rx_dfe_tap10_abcd[0]) >> 4) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP10_ABCDr_RXC_DFE_TAP10f_SET(r,f) (r).dsc_rx_dfe_tap10_abcd[0]=(((r).dsc_rx_dfe_tap10_abcd[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4)) | (15 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP10_ABCDr_RXD_DFE_TAP10f_GET(r) (((r).dsc_rx_dfe_tap10_abcd[0]) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP10_ABCDr_RXD_DFE_TAP10f_SET(r,f) (r).dsc_rx_dfe_tap10_abcd[0]=(((r).dsc_rx_dfe_tap10_abcd[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access DSC_RX_DFE_TAP10_ABCD.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_DFE_TAP10_ABCDr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP10_ABCDr,(_r._dsc_rx_dfe_tap10_abcd))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_DFE_TAP10_ABCDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP10_ABCDr,(_r._dsc_rx_dfe_tap10_abcd)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_DFE_TAP10_ABCDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP10_ABCDr,(_r._dsc_rx_dfe_tap10_abcd))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_DFE_TAP10_ABCDr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP10_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap10_abcd))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_DFE_TAP10_ABCDr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP10_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap10_abcd))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_DFE_TAP10_ABCDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP10_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap10_abcd))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP10_ABCDr BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP10_ABCDr
#define DSC_RX_DFE_TAP10_ABCDr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP10_ABCDr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP10_ABCDr_t DSC_RX_DFE_TAP10_ABCDr_t;
#define DSC_RX_DFE_TAP10_ABCDr_CLR BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP10_ABCDr_CLR
#define DSC_RX_DFE_TAP10_ABCDr_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP10_ABCDr_SET
#define DSC_RX_DFE_TAP10_ABCDr_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP10_ABCDr_GET
#define DSC_RX_DFE_TAP10_ABCDr_RXA_DFE_TAP10f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP10_ABCDr_RXA_DFE_TAP10f_GET
#define DSC_RX_DFE_TAP10_ABCDr_RXA_DFE_TAP10f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP10_ABCDr_RXA_DFE_TAP10f_SET
#define DSC_RX_DFE_TAP10_ABCDr_RXB_DFE_TAP10f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP10_ABCDr_RXB_DFE_TAP10f_GET
#define DSC_RX_DFE_TAP10_ABCDr_RXB_DFE_TAP10f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP10_ABCDr_RXB_DFE_TAP10f_SET
#define DSC_RX_DFE_TAP10_ABCDr_RXC_DFE_TAP10f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP10_ABCDr_RXC_DFE_TAP10f_GET
#define DSC_RX_DFE_TAP10_ABCDr_RXC_DFE_TAP10f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP10_ABCDr_RXC_DFE_TAP10f_SET
#define DSC_RX_DFE_TAP10_ABCDr_RXD_DFE_TAP10f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP10_ABCDr_RXD_DFE_TAP10f_GET
#define DSC_RX_DFE_TAP10_ABCDr_RXD_DFE_TAP10f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP10_ABCDr_RXD_DFE_TAP10f_SET
#define READ_DSC_RX_DFE_TAP10_ABCDr BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_DFE_TAP10_ABCDr
#define WRITE_DSC_RX_DFE_TAP10_ABCDr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_DFE_TAP10_ABCDr
#define MODIFY_DSC_RX_DFE_TAP10_ABCDr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_DFE_TAP10_ABCDr
#define READLN_DSC_RX_DFE_TAP10_ABCDr BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_DFE_TAP10_ABCDr
#define WRITELN_DSC_RX_DFE_TAP10_ABCDr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_DFE_TAP10_ABCDr
#define WRITEALL_DSC_RX_DFE_TAP10_ABCDr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_DFE_TAP10_ABCDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP10_ABCDr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_RX_DFE_TAP11_ABCD
 * BLOCKS:   DSC_AFE3
 * REGADDR:  0xd021
 * DEVAD:    1
 * DESC:     rx_dfe_tap11_abcd register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXD_DFE_TAP11    signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXC_DFE_TAP11    signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXB_DFE_TAP11    signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXA_DFE_TAP11    signed 2's complement +/-7, 1 LSB=150mV/64
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_ABCDr (0x0001d021 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_ABCDr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP11_ABCD.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_ABCDr_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap11_abcd[1];
	uint32_t _dsc_rx_dfe_tap11_abcd;
} BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_ABCDr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_ABCDr_CLR(r) (r).dsc_rx_dfe_tap11_abcd[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_ABCDr_SET(r,d) (r).dsc_rx_dfe_tap11_abcd[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_ABCDr_GET(r) (r).dsc_rx_dfe_tap11_abcd[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_ABCDr_RXA_DFE_TAP11f_GET(r) ((((r).dsc_rx_dfe_tap11_abcd[0]) >> 12) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_ABCDr_RXA_DFE_TAP11f_SET(r,f) (r).dsc_rx_dfe_tap11_abcd[0]=(((r).dsc_rx_dfe_tap11_abcd[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_ABCDr_RXB_DFE_TAP11f_GET(r) ((((r).dsc_rx_dfe_tap11_abcd[0]) >> 8) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_ABCDr_RXB_DFE_TAP11f_SET(r,f) (r).dsc_rx_dfe_tap11_abcd[0]=(((r).dsc_rx_dfe_tap11_abcd[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_ABCDr_RXC_DFE_TAP11f_GET(r) ((((r).dsc_rx_dfe_tap11_abcd[0]) >> 4) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_ABCDr_RXC_DFE_TAP11f_SET(r,f) (r).dsc_rx_dfe_tap11_abcd[0]=(((r).dsc_rx_dfe_tap11_abcd[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4)) | (15 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_ABCDr_RXD_DFE_TAP11f_GET(r) (((r).dsc_rx_dfe_tap11_abcd[0]) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_ABCDr_RXD_DFE_TAP11f_SET(r,f) (r).dsc_rx_dfe_tap11_abcd[0]=(((r).dsc_rx_dfe_tap11_abcd[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access DSC_RX_DFE_TAP11_ABCD.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_DFE_TAP11_ABCDr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_ABCDr,(_r._dsc_rx_dfe_tap11_abcd))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_DFE_TAP11_ABCDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_ABCDr,(_r._dsc_rx_dfe_tap11_abcd)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_DFE_TAP11_ABCDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_ABCDr,(_r._dsc_rx_dfe_tap11_abcd))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_DFE_TAP11_ABCDr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap11_abcd))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_DFE_TAP11_ABCDr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap11_abcd))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_DFE_TAP11_ABCDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap11_abcd))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP11_ABCDr BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_ABCDr
#define DSC_RX_DFE_TAP11_ABCDr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_ABCDr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_ABCDr_t DSC_RX_DFE_TAP11_ABCDr_t;
#define DSC_RX_DFE_TAP11_ABCDr_CLR BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_ABCDr_CLR
#define DSC_RX_DFE_TAP11_ABCDr_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_ABCDr_SET
#define DSC_RX_DFE_TAP11_ABCDr_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_ABCDr_GET
#define DSC_RX_DFE_TAP11_ABCDr_RXA_DFE_TAP11f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_ABCDr_RXA_DFE_TAP11f_GET
#define DSC_RX_DFE_TAP11_ABCDr_RXA_DFE_TAP11f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_ABCDr_RXA_DFE_TAP11f_SET
#define DSC_RX_DFE_TAP11_ABCDr_RXB_DFE_TAP11f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_ABCDr_RXB_DFE_TAP11f_GET
#define DSC_RX_DFE_TAP11_ABCDr_RXB_DFE_TAP11f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_ABCDr_RXB_DFE_TAP11f_SET
#define DSC_RX_DFE_TAP11_ABCDr_RXC_DFE_TAP11f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_ABCDr_RXC_DFE_TAP11f_GET
#define DSC_RX_DFE_TAP11_ABCDr_RXC_DFE_TAP11f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_ABCDr_RXC_DFE_TAP11f_SET
#define DSC_RX_DFE_TAP11_ABCDr_RXD_DFE_TAP11f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_ABCDr_RXD_DFE_TAP11f_GET
#define DSC_RX_DFE_TAP11_ABCDr_RXD_DFE_TAP11f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_ABCDr_RXD_DFE_TAP11f_SET
#define READ_DSC_RX_DFE_TAP11_ABCDr BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_DFE_TAP11_ABCDr
#define WRITE_DSC_RX_DFE_TAP11_ABCDr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_DFE_TAP11_ABCDr
#define MODIFY_DSC_RX_DFE_TAP11_ABCDr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_DFE_TAP11_ABCDr
#define READLN_DSC_RX_DFE_TAP11_ABCDr BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_DFE_TAP11_ABCDr
#define WRITELN_DSC_RX_DFE_TAP11_ABCDr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_DFE_TAP11_ABCDr
#define WRITEALL_DSC_RX_DFE_TAP11_ABCDr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_DFE_TAP11_ABCDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_ABCDr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_RX_DFE_TAP12_ABCD
 * BLOCKS:   DSC_AFE3
 * REGADDR:  0xd022
 * DEVAD:    1
 * DESC:     rx_dfe_tap12_abcd register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXD_DFE_TAP12    signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXC_DFE_TAP12    signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXB_DFE_TAP12    signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXA_DFE_TAP12    signed 2's complement +/-7, 1 LSB=150mV/64
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP12_ABCDr (0x0001d022 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP12_ABCDr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP12_ABCD.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP12_ABCDr_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap12_abcd[1];
	uint32_t _dsc_rx_dfe_tap12_abcd;
} BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP12_ABCDr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP12_ABCDr_CLR(r) (r).dsc_rx_dfe_tap12_abcd[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP12_ABCDr_SET(r,d) (r).dsc_rx_dfe_tap12_abcd[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP12_ABCDr_GET(r) (r).dsc_rx_dfe_tap12_abcd[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP12_ABCDr_RXA_DFE_TAP12f_GET(r) ((((r).dsc_rx_dfe_tap12_abcd[0]) >> 12) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP12_ABCDr_RXA_DFE_TAP12f_SET(r,f) (r).dsc_rx_dfe_tap12_abcd[0]=(((r).dsc_rx_dfe_tap12_abcd[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP12_ABCDr_RXB_DFE_TAP12f_GET(r) ((((r).dsc_rx_dfe_tap12_abcd[0]) >> 8) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP12_ABCDr_RXB_DFE_TAP12f_SET(r,f) (r).dsc_rx_dfe_tap12_abcd[0]=(((r).dsc_rx_dfe_tap12_abcd[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP12_ABCDr_RXC_DFE_TAP12f_GET(r) ((((r).dsc_rx_dfe_tap12_abcd[0]) >> 4) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP12_ABCDr_RXC_DFE_TAP12f_SET(r,f) (r).dsc_rx_dfe_tap12_abcd[0]=(((r).dsc_rx_dfe_tap12_abcd[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4)) | (15 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP12_ABCDr_RXD_DFE_TAP12f_GET(r) (((r).dsc_rx_dfe_tap12_abcd[0]) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP12_ABCDr_RXD_DFE_TAP12f_SET(r,f) (r).dsc_rx_dfe_tap12_abcd[0]=(((r).dsc_rx_dfe_tap12_abcd[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access DSC_RX_DFE_TAP12_ABCD.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_DFE_TAP12_ABCDr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP12_ABCDr,(_r._dsc_rx_dfe_tap12_abcd))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_DFE_TAP12_ABCDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP12_ABCDr,(_r._dsc_rx_dfe_tap12_abcd)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_DFE_TAP12_ABCDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP12_ABCDr,(_r._dsc_rx_dfe_tap12_abcd))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_DFE_TAP12_ABCDr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP12_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap12_abcd))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_DFE_TAP12_ABCDr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP12_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap12_abcd))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_DFE_TAP12_ABCDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP12_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap12_abcd))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP12_ABCDr BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP12_ABCDr
#define DSC_RX_DFE_TAP12_ABCDr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP12_ABCDr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP12_ABCDr_t DSC_RX_DFE_TAP12_ABCDr_t;
#define DSC_RX_DFE_TAP12_ABCDr_CLR BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP12_ABCDr_CLR
#define DSC_RX_DFE_TAP12_ABCDr_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP12_ABCDr_SET
#define DSC_RX_DFE_TAP12_ABCDr_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP12_ABCDr_GET
#define DSC_RX_DFE_TAP12_ABCDr_RXA_DFE_TAP12f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP12_ABCDr_RXA_DFE_TAP12f_GET
#define DSC_RX_DFE_TAP12_ABCDr_RXA_DFE_TAP12f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP12_ABCDr_RXA_DFE_TAP12f_SET
#define DSC_RX_DFE_TAP12_ABCDr_RXB_DFE_TAP12f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP12_ABCDr_RXB_DFE_TAP12f_GET
#define DSC_RX_DFE_TAP12_ABCDr_RXB_DFE_TAP12f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP12_ABCDr_RXB_DFE_TAP12f_SET
#define DSC_RX_DFE_TAP12_ABCDr_RXC_DFE_TAP12f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP12_ABCDr_RXC_DFE_TAP12f_GET
#define DSC_RX_DFE_TAP12_ABCDr_RXC_DFE_TAP12f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP12_ABCDr_RXC_DFE_TAP12f_SET
#define DSC_RX_DFE_TAP12_ABCDr_RXD_DFE_TAP12f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP12_ABCDr_RXD_DFE_TAP12f_GET
#define DSC_RX_DFE_TAP12_ABCDr_RXD_DFE_TAP12f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP12_ABCDr_RXD_DFE_TAP12f_SET
#define READ_DSC_RX_DFE_TAP12_ABCDr BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_DFE_TAP12_ABCDr
#define WRITE_DSC_RX_DFE_TAP12_ABCDr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_DFE_TAP12_ABCDr
#define MODIFY_DSC_RX_DFE_TAP12_ABCDr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_DFE_TAP12_ABCDr
#define READLN_DSC_RX_DFE_TAP12_ABCDr BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_DFE_TAP12_ABCDr
#define WRITELN_DSC_RX_DFE_TAP12_ABCDr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_DFE_TAP12_ABCDr
#define WRITEALL_DSC_RX_DFE_TAP12_ABCDr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_DFE_TAP12_ABCDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP12_ABCDr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_RX_DFE_TAP13_ABCD
 * BLOCKS:   DSC_AFE3
 * REGADDR:  0xd023
 * DEVAD:    1
 * DESC:     rx_dfe_tap13_abcd register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXD_DFE_TAP13    signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXC_DFE_TAP13    signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXB_DFE_TAP13    signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXA_DFE_TAP13    signed 2's complement +/-7, 1 LSB=150mV/64
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_ABCDr (0x0001d023 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_ABCDr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP13_ABCD.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_ABCDr_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap13_abcd[1];
	uint32_t _dsc_rx_dfe_tap13_abcd;
} BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_ABCDr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_ABCDr_CLR(r) (r).dsc_rx_dfe_tap13_abcd[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_ABCDr_SET(r,d) (r).dsc_rx_dfe_tap13_abcd[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_ABCDr_GET(r) (r).dsc_rx_dfe_tap13_abcd[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_ABCDr_RXA_DFE_TAP13f_GET(r) ((((r).dsc_rx_dfe_tap13_abcd[0]) >> 12) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_ABCDr_RXA_DFE_TAP13f_SET(r,f) (r).dsc_rx_dfe_tap13_abcd[0]=(((r).dsc_rx_dfe_tap13_abcd[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_ABCDr_RXB_DFE_TAP13f_GET(r) ((((r).dsc_rx_dfe_tap13_abcd[0]) >> 8) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_ABCDr_RXB_DFE_TAP13f_SET(r,f) (r).dsc_rx_dfe_tap13_abcd[0]=(((r).dsc_rx_dfe_tap13_abcd[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_ABCDr_RXC_DFE_TAP13f_GET(r) ((((r).dsc_rx_dfe_tap13_abcd[0]) >> 4) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_ABCDr_RXC_DFE_TAP13f_SET(r,f) (r).dsc_rx_dfe_tap13_abcd[0]=(((r).dsc_rx_dfe_tap13_abcd[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4)) | (15 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_ABCDr_RXD_DFE_TAP13f_GET(r) (((r).dsc_rx_dfe_tap13_abcd[0]) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_ABCDr_RXD_DFE_TAP13f_SET(r,f) (r).dsc_rx_dfe_tap13_abcd[0]=(((r).dsc_rx_dfe_tap13_abcd[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access DSC_RX_DFE_TAP13_ABCD.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_DFE_TAP13_ABCDr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_ABCDr,(_r._dsc_rx_dfe_tap13_abcd))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_DFE_TAP13_ABCDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_ABCDr,(_r._dsc_rx_dfe_tap13_abcd)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_DFE_TAP13_ABCDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_ABCDr,(_r._dsc_rx_dfe_tap13_abcd))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_DFE_TAP13_ABCDr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap13_abcd))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_DFE_TAP13_ABCDr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap13_abcd))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_DFE_TAP13_ABCDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap13_abcd))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP13_ABCDr BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_ABCDr
#define DSC_RX_DFE_TAP13_ABCDr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_ABCDr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_ABCDr_t DSC_RX_DFE_TAP13_ABCDr_t;
#define DSC_RX_DFE_TAP13_ABCDr_CLR BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_ABCDr_CLR
#define DSC_RX_DFE_TAP13_ABCDr_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_ABCDr_SET
#define DSC_RX_DFE_TAP13_ABCDr_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_ABCDr_GET
#define DSC_RX_DFE_TAP13_ABCDr_RXA_DFE_TAP13f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_ABCDr_RXA_DFE_TAP13f_GET
#define DSC_RX_DFE_TAP13_ABCDr_RXA_DFE_TAP13f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_ABCDr_RXA_DFE_TAP13f_SET
#define DSC_RX_DFE_TAP13_ABCDr_RXB_DFE_TAP13f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_ABCDr_RXB_DFE_TAP13f_GET
#define DSC_RX_DFE_TAP13_ABCDr_RXB_DFE_TAP13f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_ABCDr_RXB_DFE_TAP13f_SET
#define DSC_RX_DFE_TAP13_ABCDr_RXC_DFE_TAP13f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_ABCDr_RXC_DFE_TAP13f_GET
#define DSC_RX_DFE_TAP13_ABCDr_RXC_DFE_TAP13f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_ABCDr_RXC_DFE_TAP13f_SET
#define DSC_RX_DFE_TAP13_ABCDr_RXD_DFE_TAP13f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_ABCDr_RXD_DFE_TAP13f_GET
#define DSC_RX_DFE_TAP13_ABCDr_RXD_DFE_TAP13f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_ABCDr_RXD_DFE_TAP13f_SET
#define READ_DSC_RX_DFE_TAP13_ABCDr BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_DFE_TAP13_ABCDr
#define WRITE_DSC_RX_DFE_TAP13_ABCDr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_DFE_TAP13_ABCDr
#define MODIFY_DSC_RX_DFE_TAP13_ABCDr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_DFE_TAP13_ABCDr
#define READLN_DSC_RX_DFE_TAP13_ABCDr BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_DFE_TAP13_ABCDr
#define WRITELN_DSC_RX_DFE_TAP13_ABCDr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_DFE_TAP13_ABCDr
#define WRITEALL_DSC_RX_DFE_TAP13_ABCDr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_DFE_TAP13_ABCDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_ABCDr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_RX_DFE_TAP14_ABCD
 * BLOCKS:   DSC_AFE3
 * REGADDR:  0xd024
 * DEVAD:    1
 * DESC:     rx_dfe_tap14_abcd register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXD_DFE_TAP14    signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXC_DFE_TAP14    signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXB_DFE_TAP14    signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXA_DFE_TAP14    signed 2's complement +/-7, 1 LSB=150mV/64
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP14_ABCDr (0x0001d024 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP14_ABCDr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP14_ABCD.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP14_ABCDr_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap14_abcd[1];
	uint32_t _dsc_rx_dfe_tap14_abcd;
} BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP14_ABCDr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP14_ABCDr_CLR(r) (r).dsc_rx_dfe_tap14_abcd[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP14_ABCDr_SET(r,d) (r).dsc_rx_dfe_tap14_abcd[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP14_ABCDr_GET(r) (r).dsc_rx_dfe_tap14_abcd[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP14_ABCDr_RXA_DFE_TAP14f_GET(r) ((((r).dsc_rx_dfe_tap14_abcd[0]) >> 12) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP14_ABCDr_RXA_DFE_TAP14f_SET(r,f) (r).dsc_rx_dfe_tap14_abcd[0]=(((r).dsc_rx_dfe_tap14_abcd[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP14_ABCDr_RXB_DFE_TAP14f_GET(r) ((((r).dsc_rx_dfe_tap14_abcd[0]) >> 8) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP14_ABCDr_RXB_DFE_TAP14f_SET(r,f) (r).dsc_rx_dfe_tap14_abcd[0]=(((r).dsc_rx_dfe_tap14_abcd[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP14_ABCDr_RXC_DFE_TAP14f_GET(r) ((((r).dsc_rx_dfe_tap14_abcd[0]) >> 4) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP14_ABCDr_RXC_DFE_TAP14f_SET(r,f) (r).dsc_rx_dfe_tap14_abcd[0]=(((r).dsc_rx_dfe_tap14_abcd[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4)) | (15 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP14_ABCDr_RXD_DFE_TAP14f_GET(r) (((r).dsc_rx_dfe_tap14_abcd[0]) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP14_ABCDr_RXD_DFE_TAP14f_SET(r,f) (r).dsc_rx_dfe_tap14_abcd[0]=(((r).dsc_rx_dfe_tap14_abcd[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access DSC_RX_DFE_TAP14_ABCD.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_DFE_TAP14_ABCDr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP14_ABCDr,(_r._dsc_rx_dfe_tap14_abcd))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_DFE_TAP14_ABCDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP14_ABCDr,(_r._dsc_rx_dfe_tap14_abcd)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_DFE_TAP14_ABCDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP14_ABCDr,(_r._dsc_rx_dfe_tap14_abcd))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_DFE_TAP14_ABCDr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP14_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap14_abcd))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_DFE_TAP14_ABCDr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP14_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap14_abcd))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_DFE_TAP14_ABCDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP14_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap14_abcd))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP14_ABCDr BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP14_ABCDr
#define DSC_RX_DFE_TAP14_ABCDr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP14_ABCDr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP14_ABCDr_t DSC_RX_DFE_TAP14_ABCDr_t;
#define DSC_RX_DFE_TAP14_ABCDr_CLR BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP14_ABCDr_CLR
#define DSC_RX_DFE_TAP14_ABCDr_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP14_ABCDr_SET
#define DSC_RX_DFE_TAP14_ABCDr_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP14_ABCDr_GET
#define DSC_RX_DFE_TAP14_ABCDr_RXA_DFE_TAP14f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP14_ABCDr_RXA_DFE_TAP14f_GET
#define DSC_RX_DFE_TAP14_ABCDr_RXA_DFE_TAP14f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP14_ABCDr_RXA_DFE_TAP14f_SET
#define DSC_RX_DFE_TAP14_ABCDr_RXB_DFE_TAP14f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP14_ABCDr_RXB_DFE_TAP14f_GET
#define DSC_RX_DFE_TAP14_ABCDr_RXB_DFE_TAP14f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP14_ABCDr_RXB_DFE_TAP14f_SET
#define DSC_RX_DFE_TAP14_ABCDr_RXC_DFE_TAP14f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP14_ABCDr_RXC_DFE_TAP14f_GET
#define DSC_RX_DFE_TAP14_ABCDr_RXC_DFE_TAP14f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP14_ABCDr_RXC_DFE_TAP14f_SET
#define DSC_RX_DFE_TAP14_ABCDr_RXD_DFE_TAP14f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP14_ABCDr_RXD_DFE_TAP14f_GET
#define DSC_RX_DFE_TAP14_ABCDr_RXD_DFE_TAP14f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP14_ABCDr_RXD_DFE_TAP14f_SET
#define READ_DSC_RX_DFE_TAP14_ABCDr BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_DFE_TAP14_ABCDr
#define WRITE_DSC_RX_DFE_TAP14_ABCDr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_DFE_TAP14_ABCDr
#define MODIFY_DSC_RX_DFE_TAP14_ABCDr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_DFE_TAP14_ABCDr
#define READLN_DSC_RX_DFE_TAP14_ABCDr BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_DFE_TAP14_ABCDr
#define WRITELN_DSC_RX_DFE_TAP14_ABCDr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_DFE_TAP14_ABCDr
#define WRITEALL_DSC_RX_DFE_TAP14_ABCDr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_DFE_TAP14_ABCDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP14_ABCDr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_RX_DFE_TAP7_8_MUX_ABCD
 * BLOCKS:   DSC_AFE3
 * REGADDR:  0xd025
 * DEVAD:    1
 * DESC:     rx_dfe_tap7_8_mux_abcd register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXD_DFE_TAP8_MUX tapN cancels ISI from location (N+value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXD_DFE_TAP7_MUX tapN cancels ISI from location (N+value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXC_DFE_TAP8_MUX tapN cancels ISI from location (N+value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXC_DFE_TAP7_MUX tapN cancels ISI from location (N+value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXB_DFE_TAP8_MUX tapN cancels ISI from location (N+value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXB_DFE_TAP7_MUX tapN cancels ISI from location (N+value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXA_DFE_TAP8_MUX tapN cancels ISI from location (N+value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXA_DFE_TAP7_MUX tapN cancels ISI from location (N+value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr (0x0001d025 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP7_8_MUX_ABCD.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap7_8_mux_abcd[1];
	uint32_t _dsc_rx_dfe_tap7_8_mux_abcd;
} BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_CLR(r) (r).dsc_rx_dfe_tap7_8_mux_abcd[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_SET(r,d) (r).dsc_rx_dfe_tap7_8_mux_abcd[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_GET(r) (r).dsc_rx_dfe_tap7_8_mux_abcd[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXA_DFE_TAP7_MUXf_GET(r) ((((r).dsc_rx_dfe_tap7_8_mux_abcd[0]) >> 14) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXA_DFE_TAP7_MUXf_SET(r,f) (r).dsc_rx_dfe_tap7_8_mux_abcd[0]=(((r).dsc_rx_dfe_tap7_8_mux_abcd[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXA_DFE_TAP8_MUXf_GET(r) ((((r).dsc_rx_dfe_tap7_8_mux_abcd[0]) >> 12) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXA_DFE_TAP8_MUXf_SET(r,f) (r).dsc_rx_dfe_tap7_8_mux_abcd[0]=(((r).dsc_rx_dfe_tap7_8_mux_abcd[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12)) | (3 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXB_DFE_TAP7_MUXf_GET(r) ((((r).dsc_rx_dfe_tap7_8_mux_abcd[0]) >> 10) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXB_DFE_TAP7_MUXf_SET(r,f) (r).dsc_rx_dfe_tap7_8_mux_abcd[0]=(((r).dsc_rx_dfe_tap7_8_mux_abcd[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10)) | (3 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXB_DFE_TAP8_MUXf_GET(r) ((((r).dsc_rx_dfe_tap7_8_mux_abcd[0]) >> 8) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXB_DFE_TAP8_MUXf_SET(r,f) (r).dsc_rx_dfe_tap7_8_mux_abcd[0]=(((r).dsc_rx_dfe_tap7_8_mux_abcd[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXC_DFE_TAP7_MUXf_GET(r) ((((r).dsc_rx_dfe_tap7_8_mux_abcd[0]) >> 6) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXC_DFE_TAP7_MUXf_SET(r,f) (r).dsc_rx_dfe_tap7_8_mux_abcd[0]=(((r).dsc_rx_dfe_tap7_8_mux_abcd[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6)) | (3 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXC_DFE_TAP8_MUXf_GET(r) ((((r).dsc_rx_dfe_tap7_8_mux_abcd[0]) >> 4) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXC_DFE_TAP8_MUXf_SET(r,f) (r).dsc_rx_dfe_tap7_8_mux_abcd[0]=(((r).dsc_rx_dfe_tap7_8_mux_abcd[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXD_DFE_TAP7_MUXf_GET(r) ((((r).dsc_rx_dfe_tap7_8_mux_abcd[0]) >> 2) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXD_DFE_TAP7_MUXf_SET(r,f) (r).dsc_rx_dfe_tap7_8_mux_abcd[0]=(((r).dsc_rx_dfe_tap7_8_mux_abcd[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2)) | (3 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXD_DFE_TAP8_MUXf_GET(r) (((r).dsc_rx_dfe_tap7_8_mux_abcd[0]) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXD_DFE_TAP8_MUXf_SET(r,f) (r).dsc_rx_dfe_tap7_8_mux_abcd[0]=(((r).dsc_rx_dfe_tap7_8_mux_abcd[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access DSC_RX_DFE_TAP7_8_MUX_ABCD.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_DFE_TAP7_8_MUX_ABCDr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr,(_r._dsc_rx_dfe_tap7_8_mux_abcd))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_DFE_TAP7_8_MUX_ABCDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr,(_r._dsc_rx_dfe_tap7_8_mux_abcd)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_DFE_TAP7_8_MUX_ABCDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr,(_r._dsc_rx_dfe_tap7_8_mux_abcd))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_DFE_TAP7_8_MUX_ABCDr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap7_8_mux_abcd))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_DFE_TAP7_8_MUX_ABCDr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap7_8_mux_abcd))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_DFE_TAP7_8_MUX_ABCDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap7_8_mux_abcd))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP7_8_MUX_ABCDr BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr
#define DSC_RX_DFE_TAP7_8_MUX_ABCDr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_t DSC_RX_DFE_TAP7_8_MUX_ABCDr_t;
#define DSC_RX_DFE_TAP7_8_MUX_ABCDr_CLR BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_CLR
#define DSC_RX_DFE_TAP7_8_MUX_ABCDr_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_SET
#define DSC_RX_DFE_TAP7_8_MUX_ABCDr_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_GET
#define DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXA_DFE_TAP7_MUXf_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXA_DFE_TAP7_MUXf_GET
#define DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXA_DFE_TAP7_MUXf_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXA_DFE_TAP7_MUXf_SET
#define DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXA_DFE_TAP8_MUXf_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXA_DFE_TAP8_MUXf_GET
#define DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXA_DFE_TAP8_MUXf_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXA_DFE_TAP8_MUXf_SET
#define DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXB_DFE_TAP7_MUXf_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXB_DFE_TAP7_MUXf_GET
#define DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXB_DFE_TAP7_MUXf_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXB_DFE_TAP7_MUXf_SET
#define DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXB_DFE_TAP8_MUXf_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXB_DFE_TAP8_MUXf_GET
#define DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXB_DFE_TAP8_MUXf_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXB_DFE_TAP8_MUXf_SET
#define DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXC_DFE_TAP7_MUXf_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXC_DFE_TAP7_MUXf_GET
#define DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXC_DFE_TAP7_MUXf_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXC_DFE_TAP7_MUXf_SET
#define DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXC_DFE_TAP8_MUXf_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXC_DFE_TAP8_MUXf_GET
#define DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXC_DFE_TAP8_MUXf_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXC_DFE_TAP8_MUXf_SET
#define DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXD_DFE_TAP7_MUXf_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXD_DFE_TAP7_MUXf_GET
#define DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXD_DFE_TAP7_MUXf_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXD_DFE_TAP7_MUXf_SET
#define DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXD_DFE_TAP8_MUXf_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXD_DFE_TAP8_MUXf_GET
#define DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXD_DFE_TAP8_MUXf_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXD_DFE_TAP8_MUXf_SET
#define READ_DSC_RX_DFE_TAP7_8_MUX_ABCDr BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_DFE_TAP7_8_MUX_ABCDr
#define WRITE_DSC_RX_DFE_TAP7_8_MUX_ABCDr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_DFE_TAP7_8_MUX_ABCDr
#define MODIFY_DSC_RX_DFE_TAP7_8_MUX_ABCDr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_DFE_TAP7_8_MUX_ABCDr
#define READLN_DSC_RX_DFE_TAP7_8_MUX_ABCDr BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_DFE_TAP7_8_MUX_ABCDr
#define WRITELN_DSC_RX_DFE_TAP7_8_MUX_ABCDr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_DFE_TAP7_8_MUX_ABCDr
#define WRITEALL_DSC_RX_DFE_TAP7_8_MUX_ABCDr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_DFE_TAP7_8_MUX_ABCDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_RX_DFE_TAP9_10_MUX_ABCD
 * BLOCKS:   DSC_AFE3
 * REGADDR:  0xd026
 * DEVAD:    1
 * DESC:     rx_dfe_tap9_10_mux_abcd register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXD_DFE_TAP10_MUX tapN cancels ISI from location (N+value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXD_DFE_TAP9_MUX tapN cancels ISI from location (N+value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXC_DFE_TAP10_MUX tapN cancels ISI from location (N+value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXC_DFE_TAP9_MUX tapN cancels ISI from location (N+value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXB_DFE_TAP10_MUX tapN cancels ISI from location (N+value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXB_DFE_TAP9_MUX tapN cancels ISI from location (N+value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXA_DFE_TAP10_MUX tapN cancels ISI from location (N+value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXA_DFE_TAP9_MUX tapN cancels ISI from location (N+value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr (0x0001d026 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP9_10_MUX_ABCD.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap9_10_mux_abcd[1];
	uint32_t _dsc_rx_dfe_tap9_10_mux_abcd;
} BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_CLR(r) (r).dsc_rx_dfe_tap9_10_mux_abcd[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_SET(r,d) (r).dsc_rx_dfe_tap9_10_mux_abcd[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_GET(r) (r).dsc_rx_dfe_tap9_10_mux_abcd[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXA_DFE_TAP9_MUXf_GET(r) ((((r).dsc_rx_dfe_tap9_10_mux_abcd[0]) >> 14) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXA_DFE_TAP9_MUXf_SET(r,f) (r).dsc_rx_dfe_tap9_10_mux_abcd[0]=(((r).dsc_rx_dfe_tap9_10_mux_abcd[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXA_DFE_TAP10_MUXf_GET(r) ((((r).dsc_rx_dfe_tap9_10_mux_abcd[0]) >> 12) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXA_DFE_TAP10_MUXf_SET(r,f) (r).dsc_rx_dfe_tap9_10_mux_abcd[0]=(((r).dsc_rx_dfe_tap9_10_mux_abcd[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12)) | (3 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXB_DFE_TAP9_MUXf_GET(r) ((((r).dsc_rx_dfe_tap9_10_mux_abcd[0]) >> 10) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXB_DFE_TAP9_MUXf_SET(r,f) (r).dsc_rx_dfe_tap9_10_mux_abcd[0]=(((r).dsc_rx_dfe_tap9_10_mux_abcd[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10)) | (3 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXB_DFE_TAP10_MUXf_GET(r) ((((r).dsc_rx_dfe_tap9_10_mux_abcd[0]) >> 8) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXB_DFE_TAP10_MUXf_SET(r,f) (r).dsc_rx_dfe_tap9_10_mux_abcd[0]=(((r).dsc_rx_dfe_tap9_10_mux_abcd[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXC_DFE_TAP9_MUXf_GET(r) ((((r).dsc_rx_dfe_tap9_10_mux_abcd[0]) >> 6) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXC_DFE_TAP9_MUXf_SET(r,f) (r).dsc_rx_dfe_tap9_10_mux_abcd[0]=(((r).dsc_rx_dfe_tap9_10_mux_abcd[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6)) | (3 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXC_DFE_TAP10_MUXf_GET(r) ((((r).dsc_rx_dfe_tap9_10_mux_abcd[0]) >> 4) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXC_DFE_TAP10_MUXf_SET(r,f) (r).dsc_rx_dfe_tap9_10_mux_abcd[0]=(((r).dsc_rx_dfe_tap9_10_mux_abcd[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXD_DFE_TAP9_MUXf_GET(r) ((((r).dsc_rx_dfe_tap9_10_mux_abcd[0]) >> 2) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXD_DFE_TAP9_MUXf_SET(r,f) (r).dsc_rx_dfe_tap9_10_mux_abcd[0]=(((r).dsc_rx_dfe_tap9_10_mux_abcd[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2)) | (3 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXD_DFE_TAP10_MUXf_GET(r) (((r).dsc_rx_dfe_tap9_10_mux_abcd[0]) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXD_DFE_TAP10_MUXf_SET(r,f) (r).dsc_rx_dfe_tap9_10_mux_abcd[0]=(((r).dsc_rx_dfe_tap9_10_mux_abcd[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access DSC_RX_DFE_TAP9_10_MUX_ABCD.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_DFE_TAP9_10_MUX_ABCDr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr,(_r._dsc_rx_dfe_tap9_10_mux_abcd))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_DFE_TAP9_10_MUX_ABCDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr,(_r._dsc_rx_dfe_tap9_10_mux_abcd)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_DFE_TAP9_10_MUX_ABCDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr,(_r._dsc_rx_dfe_tap9_10_mux_abcd))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_DFE_TAP9_10_MUX_ABCDr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap9_10_mux_abcd))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_DFE_TAP9_10_MUX_ABCDr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap9_10_mux_abcd))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_DFE_TAP9_10_MUX_ABCDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap9_10_mux_abcd))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP9_10_MUX_ABCDr BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr
#define DSC_RX_DFE_TAP9_10_MUX_ABCDr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_t DSC_RX_DFE_TAP9_10_MUX_ABCDr_t;
#define DSC_RX_DFE_TAP9_10_MUX_ABCDr_CLR BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_CLR
#define DSC_RX_DFE_TAP9_10_MUX_ABCDr_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_SET
#define DSC_RX_DFE_TAP9_10_MUX_ABCDr_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_GET
#define DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXA_DFE_TAP9_MUXf_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXA_DFE_TAP9_MUXf_GET
#define DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXA_DFE_TAP9_MUXf_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXA_DFE_TAP9_MUXf_SET
#define DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXA_DFE_TAP10_MUXf_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXA_DFE_TAP10_MUXf_GET
#define DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXA_DFE_TAP10_MUXf_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXA_DFE_TAP10_MUXf_SET
#define DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXB_DFE_TAP9_MUXf_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXB_DFE_TAP9_MUXf_GET
#define DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXB_DFE_TAP9_MUXf_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXB_DFE_TAP9_MUXf_SET
#define DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXB_DFE_TAP10_MUXf_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXB_DFE_TAP10_MUXf_GET
#define DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXB_DFE_TAP10_MUXf_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXB_DFE_TAP10_MUXf_SET
#define DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXC_DFE_TAP9_MUXf_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXC_DFE_TAP9_MUXf_GET
#define DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXC_DFE_TAP9_MUXf_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXC_DFE_TAP9_MUXf_SET
#define DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXC_DFE_TAP10_MUXf_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXC_DFE_TAP10_MUXf_GET
#define DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXC_DFE_TAP10_MUXf_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXC_DFE_TAP10_MUXf_SET
#define DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXD_DFE_TAP9_MUXf_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXD_DFE_TAP9_MUXf_GET
#define DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXD_DFE_TAP9_MUXf_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXD_DFE_TAP9_MUXf_SET
#define DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXD_DFE_TAP10_MUXf_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXD_DFE_TAP10_MUXf_GET
#define DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXD_DFE_TAP10_MUXf_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXD_DFE_TAP10_MUXf_SET
#define READ_DSC_RX_DFE_TAP9_10_MUX_ABCDr BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_DFE_TAP9_10_MUX_ABCDr
#define WRITE_DSC_RX_DFE_TAP9_10_MUX_ABCDr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_DFE_TAP9_10_MUX_ABCDr
#define MODIFY_DSC_RX_DFE_TAP9_10_MUX_ABCDr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_DFE_TAP9_10_MUX_ABCDr
#define READLN_DSC_RX_DFE_TAP9_10_MUX_ABCDr BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_DFE_TAP9_10_MUX_ABCDr
#define WRITELN_DSC_RX_DFE_TAP9_10_MUX_ABCDr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_DFE_TAP9_10_MUX_ABCDr
#define WRITEALL_DSC_RX_DFE_TAP9_10_MUX_ABCDr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_DFE_TAP9_10_MUX_ABCDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_RX_DFE_TAP11_12_MUX_ABCD
 * BLOCKS:   DSC_AFE3
 * REGADDR:  0xd027
 * DEVAD:    1
 * DESC:     rx_dfe_tap11_12_mux_abcd register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXD_DFE_TAP12_MUX tapN cancels ISI from location (N+value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXD_DFE_TAP11_MUX tapN cancels ISI from location (N+value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXC_DFE_TAP12_MUX tapN cancels ISI from location (N+value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXC_DFE_TAP11_MUX tapN cancels ISI from location (N+value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXB_DFE_TAP12_MUX tapN cancels ISI from location (N+value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXB_DFE_TAP11_MUX tapN cancels ISI from location (N+value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXA_DFE_TAP12_MUX tapN cancels ISI from location (N+value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXA_DFE_TAP11_MUX tapN cancels ISI from location (N+value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr (0x0001d027 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP11_12_MUX_ABCD.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap11_12_mux_abcd[1];
	uint32_t _dsc_rx_dfe_tap11_12_mux_abcd;
} BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_CLR(r) (r).dsc_rx_dfe_tap11_12_mux_abcd[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_SET(r,d) (r).dsc_rx_dfe_tap11_12_mux_abcd[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_GET(r) (r).dsc_rx_dfe_tap11_12_mux_abcd[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXA_DFE_TAP11_MUXf_GET(r) ((((r).dsc_rx_dfe_tap11_12_mux_abcd[0]) >> 14) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXA_DFE_TAP11_MUXf_SET(r,f) (r).dsc_rx_dfe_tap11_12_mux_abcd[0]=(((r).dsc_rx_dfe_tap11_12_mux_abcd[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXA_DFE_TAP12_MUXf_GET(r) ((((r).dsc_rx_dfe_tap11_12_mux_abcd[0]) >> 12) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXA_DFE_TAP12_MUXf_SET(r,f) (r).dsc_rx_dfe_tap11_12_mux_abcd[0]=(((r).dsc_rx_dfe_tap11_12_mux_abcd[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12)) | (3 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXB_DFE_TAP11_MUXf_GET(r) ((((r).dsc_rx_dfe_tap11_12_mux_abcd[0]) >> 10) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXB_DFE_TAP11_MUXf_SET(r,f) (r).dsc_rx_dfe_tap11_12_mux_abcd[0]=(((r).dsc_rx_dfe_tap11_12_mux_abcd[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10)) | (3 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXB_DFE_TAP12_MUXf_GET(r) ((((r).dsc_rx_dfe_tap11_12_mux_abcd[0]) >> 8) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXB_DFE_TAP12_MUXf_SET(r,f) (r).dsc_rx_dfe_tap11_12_mux_abcd[0]=(((r).dsc_rx_dfe_tap11_12_mux_abcd[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXC_DFE_TAP11_MUXf_GET(r) ((((r).dsc_rx_dfe_tap11_12_mux_abcd[0]) >> 6) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXC_DFE_TAP11_MUXf_SET(r,f) (r).dsc_rx_dfe_tap11_12_mux_abcd[0]=(((r).dsc_rx_dfe_tap11_12_mux_abcd[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6)) | (3 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXC_DFE_TAP12_MUXf_GET(r) ((((r).dsc_rx_dfe_tap11_12_mux_abcd[0]) >> 4) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXC_DFE_TAP12_MUXf_SET(r,f) (r).dsc_rx_dfe_tap11_12_mux_abcd[0]=(((r).dsc_rx_dfe_tap11_12_mux_abcd[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXD_DFE_TAP11_MUXf_GET(r) ((((r).dsc_rx_dfe_tap11_12_mux_abcd[0]) >> 2) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXD_DFE_TAP11_MUXf_SET(r,f) (r).dsc_rx_dfe_tap11_12_mux_abcd[0]=(((r).dsc_rx_dfe_tap11_12_mux_abcd[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2)) | (3 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXD_DFE_TAP12_MUXf_GET(r) (((r).dsc_rx_dfe_tap11_12_mux_abcd[0]) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXD_DFE_TAP12_MUXf_SET(r,f) (r).dsc_rx_dfe_tap11_12_mux_abcd[0]=(((r).dsc_rx_dfe_tap11_12_mux_abcd[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access DSC_RX_DFE_TAP11_12_MUX_ABCD.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_DFE_TAP11_12_MUX_ABCDr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr,(_r._dsc_rx_dfe_tap11_12_mux_abcd))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_DFE_TAP11_12_MUX_ABCDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr,(_r._dsc_rx_dfe_tap11_12_mux_abcd)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_DFE_TAP11_12_MUX_ABCDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr,(_r._dsc_rx_dfe_tap11_12_mux_abcd))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_DFE_TAP11_12_MUX_ABCDr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap11_12_mux_abcd))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_DFE_TAP11_12_MUX_ABCDr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap11_12_mux_abcd))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_DFE_TAP11_12_MUX_ABCDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap11_12_mux_abcd))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP11_12_MUX_ABCDr BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr
#define DSC_RX_DFE_TAP11_12_MUX_ABCDr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_t DSC_RX_DFE_TAP11_12_MUX_ABCDr_t;
#define DSC_RX_DFE_TAP11_12_MUX_ABCDr_CLR BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_CLR
#define DSC_RX_DFE_TAP11_12_MUX_ABCDr_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_SET
#define DSC_RX_DFE_TAP11_12_MUX_ABCDr_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_GET
#define DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXA_DFE_TAP11_MUXf_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXA_DFE_TAP11_MUXf_GET
#define DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXA_DFE_TAP11_MUXf_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXA_DFE_TAP11_MUXf_SET
#define DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXA_DFE_TAP12_MUXf_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXA_DFE_TAP12_MUXf_GET
#define DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXA_DFE_TAP12_MUXf_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXA_DFE_TAP12_MUXf_SET
#define DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXB_DFE_TAP11_MUXf_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXB_DFE_TAP11_MUXf_GET
#define DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXB_DFE_TAP11_MUXf_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXB_DFE_TAP11_MUXf_SET
#define DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXB_DFE_TAP12_MUXf_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXB_DFE_TAP12_MUXf_GET
#define DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXB_DFE_TAP12_MUXf_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXB_DFE_TAP12_MUXf_SET
#define DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXC_DFE_TAP11_MUXf_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXC_DFE_TAP11_MUXf_GET
#define DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXC_DFE_TAP11_MUXf_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXC_DFE_TAP11_MUXf_SET
#define DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXC_DFE_TAP12_MUXf_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXC_DFE_TAP12_MUXf_GET
#define DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXC_DFE_TAP12_MUXf_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXC_DFE_TAP12_MUXf_SET
#define DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXD_DFE_TAP11_MUXf_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXD_DFE_TAP11_MUXf_GET
#define DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXD_DFE_TAP11_MUXf_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXD_DFE_TAP11_MUXf_SET
#define DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXD_DFE_TAP12_MUXf_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXD_DFE_TAP12_MUXf_GET
#define DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXD_DFE_TAP12_MUXf_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXD_DFE_TAP12_MUXf_SET
#define READ_DSC_RX_DFE_TAP11_12_MUX_ABCDr BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_DFE_TAP11_12_MUX_ABCDr
#define WRITE_DSC_RX_DFE_TAP11_12_MUX_ABCDr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_DFE_TAP11_12_MUX_ABCDr
#define MODIFY_DSC_RX_DFE_TAP11_12_MUX_ABCDr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_DFE_TAP11_12_MUX_ABCDr
#define READLN_DSC_RX_DFE_TAP11_12_MUX_ABCDr BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_DFE_TAP11_12_MUX_ABCDr
#define WRITELN_DSC_RX_DFE_TAP11_12_MUX_ABCDr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_DFE_TAP11_12_MUX_ABCDr
#define WRITEALL_DSC_RX_DFE_TAP11_12_MUX_ABCDr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_DFE_TAP11_12_MUX_ABCDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_RX_DFE_TAP13_14_MUX_ABCD
 * BLOCKS:   DSC_AFE3
 * REGADDR:  0xd028
 * DEVAD:    1
 * DESC:     rx_dfe_tap13_14_mux_abcd register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXD_DFE_TAP14_MUX tapN cancels ISI from location (N+value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXD_DFE_TAP13_MUX tapN cancels ISI from location (N+value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXC_DFE_TAP14_MUX tapN cancels ISI from location (N+value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXC_DFE_TAP13_MUX tapN cancels ISI from location (N+value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXB_DFE_TAP14_MUX tapN cancels ISI from location (N+value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXB_DFE_TAP13_MUX tapN cancels ISI from location (N+value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXA_DFE_TAP14_MUX tapN cancels ISI from location (N+value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXA_DFE_TAP13_MUX tapN cancels ISI from location (N+value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr (0x0001d028 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP13_14_MUX_ABCD.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap13_14_mux_abcd[1];
	uint32_t _dsc_rx_dfe_tap13_14_mux_abcd;
} BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_CLR(r) (r).dsc_rx_dfe_tap13_14_mux_abcd[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_SET(r,d) (r).dsc_rx_dfe_tap13_14_mux_abcd[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_GET(r) (r).dsc_rx_dfe_tap13_14_mux_abcd[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXA_DFE_TAP13_MUXf_GET(r) ((((r).dsc_rx_dfe_tap13_14_mux_abcd[0]) >> 14) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXA_DFE_TAP13_MUXf_SET(r,f) (r).dsc_rx_dfe_tap13_14_mux_abcd[0]=(((r).dsc_rx_dfe_tap13_14_mux_abcd[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXA_DFE_TAP14_MUXf_GET(r) ((((r).dsc_rx_dfe_tap13_14_mux_abcd[0]) >> 12) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXA_DFE_TAP14_MUXf_SET(r,f) (r).dsc_rx_dfe_tap13_14_mux_abcd[0]=(((r).dsc_rx_dfe_tap13_14_mux_abcd[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12)) | (3 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXB_DFE_TAP13_MUXf_GET(r) ((((r).dsc_rx_dfe_tap13_14_mux_abcd[0]) >> 10) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXB_DFE_TAP13_MUXf_SET(r,f) (r).dsc_rx_dfe_tap13_14_mux_abcd[0]=(((r).dsc_rx_dfe_tap13_14_mux_abcd[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10)) | (3 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXB_DFE_TAP14_MUXf_GET(r) ((((r).dsc_rx_dfe_tap13_14_mux_abcd[0]) >> 8) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXB_DFE_TAP14_MUXf_SET(r,f) (r).dsc_rx_dfe_tap13_14_mux_abcd[0]=(((r).dsc_rx_dfe_tap13_14_mux_abcd[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXC_DFE_TAP13_MUXf_GET(r) ((((r).dsc_rx_dfe_tap13_14_mux_abcd[0]) >> 6) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXC_DFE_TAP13_MUXf_SET(r,f) (r).dsc_rx_dfe_tap13_14_mux_abcd[0]=(((r).dsc_rx_dfe_tap13_14_mux_abcd[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6)) | (3 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXC_DFE_TAP14_MUXf_GET(r) ((((r).dsc_rx_dfe_tap13_14_mux_abcd[0]) >> 4) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXC_DFE_TAP14_MUXf_SET(r,f) (r).dsc_rx_dfe_tap13_14_mux_abcd[0]=(((r).dsc_rx_dfe_tap13_14_mux_abcd[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXD_DFE_TAP13_MUXf_GET(r) ((((r).dsc_rx_dfe_tap13_14_mux_abcd[0]) >> 2) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXD_DFE_TAP13_MUXf_SET(r,f) (r).dsc_rx_dfe_tap13_14_mux_abcd[0]=(((r).dsc_rx_dfe_tap13_14_mux_abcd[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2)) | (3 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXD_DFE_TAP14_MUXf_GET(r) (((r).dsc_rx_dfe_tap13_14_mux_abcd[0]) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXD_DFE_TAP14_MUXf_SET(r,f) (r).dsc_rx_dfe_tap13_14_mux_abcd[0]=(((r).dsc_rx_dfe_tap13_14_mux_abcd[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access DSC_RX_DFE_TAP13_14_MUX_ABCD.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_DFE_TAP13_14_MUX_ABCDr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr,(_r._dsc_rx_dfe_tap13_14_mux_abcd))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_DFE_TAP13_14_MUX_ABCDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr,(_r._dsc_rx_dfe_tap13_14_mux_abcd)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_DFE_TAP13_14_MUX_ABCDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr,(_r._dsc_rx_dfe_tap13_14_mux_abcd))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_DFE_TAP13_14_MUX_ABCDr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap13_14_mux_abcd))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_DFE_TAP13_14_MUX_ABCDr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap13_14_mux_abcd))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_DFE_TAP13_14_MUX_ABCDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap13_14_mux_abcd))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP13_14_MUX_ABCDr BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr
#define DSC_RX_DFE_TAP13_14_MUX_ABCDr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_t DSC_RX_DFE_TAP13_14_MUX_ABCDr_t;
#define DSC_RX_DFE_TAP13_14_MUX_ABCDr_CLR BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_CLR
#define DSC_RX_DFE_TAP13_14_MUX_ABCDr_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_SET
#define DSC_RX_DFE_TAP13_14_MUX_ABCDr_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_GET
#define DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXA_DFE_TAP13_MUXf_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXA_DFE_TAP13_MUXf_GET
#define DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXA_DFE_TAP13_MUXf_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXA_DFE_TAP13_MUXf_SET
#define DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXA_DFE_TAP14_MUXf_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXA_DFE_TAP14_MUXf_GET
#define DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXA_DFE_TAP14_MUXf_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXA_DFE_TAP14_MUXf_SET
#define DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXB_DFE_TAP13_MUXf_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXB_DFE_TAP13_MUXf_GET
#define DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXB_DFE_TAP13_MUXf_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXB_DFE_TAP13_MUXf_SET
#define DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXB_DFE_TAP14_MUXf_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXB_DFE_TAP14_MUXf_GET
#define DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXB_DFE_TAP14_MUXf_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXB_DFE_TAP14_MUXf_SET
#define DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXC_DFE_TAP13_MUXf_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXC_DFE_TAP13_MUXf_GET
#define DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXC_DFE_TAP13_MUXf_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXC_DFE_TAP13_MUXf_SET
#define DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXC_DFE_TAP14_MUXf_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXC_DFE_TAP14_MUXf_GET
#define DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXC_DFE_TAP14_MUXf_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXC_DFE_TAP14_MUXf_SET
#define DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXD_DFE_TAP13_MUXf_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXD_DFE_TAP13_MUXf_GET
#define DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXD_DFE_TAP13_MUXf_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXD_DFE_TAP13_MUXf_SET
#define DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXD_DFE_TAP14_MUXf_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXD_DFE_TAP14_MUXf_GET
#define DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXD_DFE_TAP14_MUXf_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXD_DFE_TAP14_MUXf_SET
#define READ_DSC_RX_DFE_TAP13_14_MUX_ABCDr BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_DFE_TAP13_14_MUX_ABCDr
#define WRITE_DSC_RX_DFE_TAP13_14_MUX_ABCDr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_DFE_TAP13_14_MUX_ABCDr
#define MODIFY_DSC_RX_DFE_TAP13_14_MUX_ABCDr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_DFE_TAP13_14_MUX_ABCDr
#define READLN_DSC_RX_DFE_TAP13_14_MUX_ABCDr BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_DFE_TAP13_14_MUX_ABCDr
#define WRITELN_DSC_RX_DFE_TAP13_14_MUX_ABCDr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_DFE_TAP13_14_MUX_ABCDr
#define WRITEALL_DSC_RX_DFE_TAP13_14_MUX_ABCDr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_DFE_TAP13_14_MUX_ABCDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_LOAD_PRESETS
 * BLOCKS:   DSC_AFE3
 * REGADDR:  0xd029
 * DEVAD:    1
 * DESC:     load_presets.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     PRESET_AFE       Load presets for analog interface Registers
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_LOAD_PRESETSr (0x0001d029 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_LOAD_PRESETSr_SIZE 4

/*
 * This structure should be used to declare and program DSC_LOAD_PRESETS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_LOAD_PRESETSr_s {
	uint32_t v[1];
	uint32_t dsc_load_presets[1];
	uint32_t _dsc_load_presets;
} BCMI_TSCF_GEN3_XGXS_DSC_LOAD_PRESETSr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_LOAD_PRESETSr_CLR(r) (r).dsc_load_presets[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_LOAD_PRESETSr_SET(r,d) (r).dsc_load_presets[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_LOAD_PRESETSr_GET(r) (r).dsc_load_presets[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_LOAD_PRESETSr_PRESET_AFEf_GET(r) (((r).dsc_load_presets[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_LOAD_PRESETSr_PRESET_AFEf_SET(r,f) (r).dsc_load_presets[0]=(((r).dsc_load_presets[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access DSC_LOAD_PRESETS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_LOAD_PRESETSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_LOAD_PRESETSr,(_r._dsc_load_presets))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_LOAD_PRESETSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_LOAD_PRESETSr,(_r._dsc_load_presets)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_LOAD_PRESETSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_LOAD_PRESETSr,(_r._dsc_load_presets))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_LOAD_PRESETSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_LOAD_PRESETSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_load_presets))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_LOAD_PRESETSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_LOAD_PRESETSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_load_presets))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_LOAD_PRESETSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_LOAD_PRESETSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_load_presets))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_LOAD_PRESETSr BCMI_TSCF_GEN3_XGXS_DSC_LOAD_PRESETSr
#define DSC_LOAD_PRESETSr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_LOAD_PRESETSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_LOAD_PRESETSr_t DSC_LOAD_PRESETSr_t;
#define DSC_LOAD_PRESETSr_CLR BCMI_TSCF_GEN3_XGXS_DSC_LOAD_PRESETSr_CLR
#define DSC_LOAD_PRESETSr_SET BCMI_TSCF_GEN3_XGXS_DSC_LOAD_PRESETSr_SET
#define DSC_LOAD_PRESETSr_GET BCMI_TSCF_GEN3_XGXS_DSC_LOAD_PRESETSr_GET
#define DSC_LOAD_PRESETSr_PRESET_AFEf_GET BCMI_TSCF_GEN3_XGXS_DSC_LOAD_PRESETSr_PRESET_AFEf_GET
#define DSC_LOAD_PRESETSr_PRESET_AFEf_SET BCMI_TSCF_GEN3_XGXS_DSC_LOAD_PRESETSr_PRESET_AFEf_SET
#define READ_DSC_LOAD_PRESETSr BCMI_TSCF_GEN3_XGXS_READ_DSC_LOAD_PRESETSr
#define WRITE_DSC_LOAD_PRESETSr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_LOAD_PRESETSr
#define MODIFY_DSC_LOAD_PRESETSr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_LOAD_PRESETSr
#define READLN_DSC_LOAD_PRESETSr BCMI_TSCF_GEN3_XGXS_READLN_DSC_LOAD_PRESETSr
#define WRITELN_DSC_LOAD_PRESETSr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_LOAD_PRESETSr
#define WRITEALL_DSC_LOAD_PRESETSr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_LOAD_PRESETSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_LOAD_PRESETSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_UC_CTL
 * BLOCKS:   DSC_A
 * REGADDR:  0xd03d
 * DEVAD:    1
 * DESC:     DSC uC Control
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     UC_DSC_GP_UC_REQ gp_uc request
 *     UC_DSC_ERROR_FOUND Error Found.
 *     UC_DSC_READY_FOR_CMD Ready for command.
 *     UC_DSC_SUPP_INFO Supplemental information.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_UC_CTLr (0x0001d03d | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_UC_CTLr_SIZE 4

/*
 * This structure should be used to declare and program DSC_UC_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_UC_CTLr_s {
	uint32_t v[1];
	uint32_t dsc_uc_ctl[1];
	uint32_t _dsc_uc_ctl;
} BCMI_TSCF_GEN3_XGXS_DSC_UC_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_UC_CTLr_CLR(r) (r).dsc_uc_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_UC_CTLr_SET(r,d) (r).dsc_uc_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_UC_CTLr_GET(r) (r).dsc_uc_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_UC_CTLr_UC_DSC_SUPP_INFOf_GET(r) ((((r).dsc_uc_ctl[0]) >> 8) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_DSC_UC_CTLr_UC_DSC_SUPP_INFOf_SET(r,f) (r).dsc_uc_ctl[0]=(((r).dsc_uc_ctl[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_DSC_UC_CTLr_UC_DSC_READY_FOR_CMDf_GET(r) ((((r).dsc_uc_ctl[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_UC_CTLr_UC_DSC_READY_FOR_CMDf_SET(r,f) (r).dsc_uc_ctl[0]=(((r).dsc_uc_ctl[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_DSC_UC_CTLr_UC_DSC_ERROR_FOUNDf_GET(r) ((((r).dsc_uc_ctl[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_UC_CTLr_UC_DSC_ERROR_FOUNDf_SET(r,f) (r).dsc_uc_ctl[0]=(((r).dsc_uc_ctl[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_DSC_UC_CTLr_UC_DSC_GP_UC_REQf_GET(r) (((r).dsc_uc_ctl[0]) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_DSC_UC_CTLr_UC_DSC_GP_UC_REQf_SET(r,f) (r).dsc_uc_ctl[0]=(((r).dsc_uc_ctl[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access DSC_UC_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_UC_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_UC_CTLr,(_r._dsc_uc_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_UC_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_UC_CTLr,(_r._dsc_uc_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_UC_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_UC_CTLr,(_r._dsc_uc_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_UC_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_UC_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_uc_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_UC_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_UC_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_uc_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_UC_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_UC_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_uc_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_UC_CTLr BCMI_TSCF_GEN3_XGXS_DSC_UC_CTLr
#define DSC_UC_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_UC_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_UC_CTLr_t DSC_UC_CTLr_t;
#define DSC_UC_CTLr_CLR BCMI_TSCF_GEN3_XGXS_DSC_UC_CTLr_CLR
#define DSC_UC_CTLr_SET BCMI_TSCF_GEN3_XGXS_DSC_UC_CTLr_SET
#define DSC_UC_CTLr_GET BCMI_TSCF_GEN3_XGXS_DSC_UC_CTLr_GET
#define DSC_UC_CTLr_UC_DSC_SUPP_INFOf_GET BCMI_TSCF_GEN3_XGXS_DSC_UC_CTLr_UC_DSC_SUPP_INFOf_GET
#define DSC_UC_CTLr_UC_DSC_SUPP_INFOf_SET BCMI_TSCF_GEN3_XGXS_DSC_UC_CTLr_UC_DSC_SUPP_INFOf_SET
#define DSC_UC_CTLr_UC_DSC_READY_FOR_CMDf_GET BCMI_TSCF_GEN3_XGXS_DSC_UC_CTLr_UC_DSC_READY_FOR_CMDf_GET
#define DSC_UC_CTLr_UC_DSC_READY_FOR_CMDf_SET BCMI_TSCF_GEN3_XGXS_DSC_UC_CTLr_UC_DSC_READY_FOR_CMDf_SET
#define DSC_UC_CTLr_UC_DSC_ERROR_FOUNDf_GET BCMI_TSCF_GEN3_XGXS_DSC_UC_CTLr_UC_DSC_ERROR_FOUNDf_GET
#define DSC_UC_CTLr_UC_DSC_ERROR_FOUNDf_SET BCMI_TSCF_GEN3_XGXS_DSC_UC_CTLr_UC_DSC_ERROR_FOUNDf_SET
#define DSC_UC_CTLr_UC_DSC_GP_UC_REQf_GET BCMI_TSCF_GEN3_XGXS_DSC_UC_CTLr_UC_DSC_GP_UC_REQf_GET
#define DSC_UC_CTLr_UC_DSC_GP_UC_REQf_SET BCMI_TSCF_GEN3_XGXS_DSC_UC_CTLr_UC_DSC_GP_UC_REQf_SET
#define READ_DSC_UC_CTLr BCMI_TSCF_GEN3_XGXS_READ_DSC_UC_CTLr
#define WRITE_DSC_UC_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_UC_CTLr
#define MODIFY_DSC_UC_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_UC_CTLr
#define READLN_DSC_UC_CTLr BCMI_TSCF_GEN3_XGXS_READLN_DSC_UC_CTLr
#define WRITELN_DSC_UC_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_UC_CTLr
#define WRITEALL_DSC_UC_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_UC_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_UC_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_SCRATCH
 * BLOCKS:   DSC_A
 * REGADDR:  0xd03e
 * DEVAD:    1
 * DESC:     DSC uC Scratch
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     UC_DSC_SCRATCH   DSC scratch register.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_SCRATCHr (0x0001d03e | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_SCRATCHr_SIZE 4

/*
 * This structure should be used to declare and program DSC_SCRATCH.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_SCRATCHr_s {
	uint32_t v[1];
	uint32_t dsc_scratch[1];
	uint32_t _dsc_scratch;
} BCMI_TSCF_GEN3_XGXS_DSC_SCRATCHr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_SCRATCHr_CLR(r) (r).dsc_scratch[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_SCRATCHr_SET(r,d) (r).dsc_scratch[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_SCRATCHr_GET(r) (r).dsc_scratch[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_SCRATCHr_UC_DSC_SCRATCHf_GET(r) (((r).dsc_scratch[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_DSC_SCRATCHr_UC_DSC_SCRATCHf_SET(r,f) (r).dsc_scratch[0]=(((r).dsc_scratch[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access DSC_SCRATCH.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_SCRATCHr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SCRATCHr,(_r._dsc_scratch))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_SCRATCHr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SCRATCHr,(_r._dsc_scratch)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_SCRATCHr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SCRATCHr,(_r._dsc_scratch))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_SCRATCHr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SCRATCHr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_scratch))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_SCRATCHr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SCRATCHr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_scratch))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_SCRATCHr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SCRATCHr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_scratch))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_SCRATCHr BCMI_TSCF_GEN3_XGXS_DSC_SCRATCHr
#define DSC_SCRATCHr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_SCRATCHr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_SCRATCHr_t DSC_SCRATCHr_t;
#define DSC_SCRATCHr_CLR BCMI_TSCF_GEN3_XGXS_DSC_SCRATCHr_CLR
#define DSC_SCRATCHr_SET BCMI_TSCF_GEN3_XGXS_DSC_SCRATCHr_SET
#define DSC_SCRATCHr_GET BCMI_TSCF_GEN3_XGXS_DSC_SCRATCHr_GET
#define DSC_SCRATCHr_UC_DSC_SCRATCHf_GET BCMI_TSCF_GEN3_XGXS_DSC_SCRATCHr_UC_DSC_SCRATCHf_GET
#define DSC_SCRATCHr_UC_DSC_SCRATCHf_SET BCMI_TSCF_GEN3_XGXS_DSC_SCRATCHr_UC_DSC_SCRATCHf_SET
#define READ_DSC_SCRATCHr BCMI_TSCF_GEN3_XGXS_READ_DSC_SCRATCHr
#define WRITE_DSC_SCRATCHr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_SCRATCHr
#define MODIFY_DSC_SCRATCHr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_SCRATCHr
#define READLN_DSC_SCRATCHr BCMI_TSCF_GEN3_XGXS_READLN_DSC_SCRATCHr
#define WRITELN_DSC_SCRATCHr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_SCRATCHr
#define WRITEALL_DSC_SCRATCHr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_SCRATCHr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_SCRATCHr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_TRNSUM_A_LO
 * BLOCKS:   DSC_B
 * REGADDR:  0xd040
 * DEVAD:    1
 * DESC:     trnsum a low register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TRNSUM_A_LOW     Trnsum interleave 'a' LSB result (7:0)
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_A_LOr (0x0001d040 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_A_LOr_SIZE 4

/*
 * This structure should be used to declare and program DSC_TRNSUM_A_LO.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_A_LOr_s {
	uint32_t v[1];
	uint32_t dsc_trnsum_a_lo[1];
	uint32_t _dsc_trnsum_a_lo;
} BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_A_LOr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_A_LOr_CLR(r) (r).dsc_trnsum_a_lo[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_A_LOr_SET(r,d) (r).dsc_trnsum_a_lo[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_A_LOr_GET(r) (r).dsc_trnsum_a_lo[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_A_LOr_TRNSUM_A_LOWf_GET(r) ((((r).dsc_trnsum_a_lo[0]) >> 8) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_A_LOr_TRNSUM_A_LOWf_SET(r,f) (r).dsc_trnsum_a_lo[0]=(((r).dsc_trnsum_a_lo[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))

/*
 * These macros can be used to access DSC_TRNSUM_A_LO.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_TRNSUM_A_LOr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_A_LOr,(_r._dsc_trnsum_a_lo))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_TRNSUM_A_LOr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_A_LOr,(_r._dsc_trnsum_a_lo)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_TRNSUM_A_LOr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_A_LOr,(_r._dsc_trnsum_a_lo))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_TRNSUM_A_LOr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_A_LOr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_a_lo))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_TRNSUM_A_LOr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_A_LOr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_a_lo))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_TRNSUM_A_LOr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_A_LOr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_trnsum_a_lo))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_TRNSUM_A_LOr BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_A_LOr
#define DSC_TRNSUM_A_LOr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_A_LOr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_A_LOr_t DSC_TRNSUM_A_LOr_t;
#define DSC_TRNSUM_A_LOr_CLR BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_A_LOr_CLR
#define DSC_TRNSUM_A_LOr_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_A_LOr_SET
#define DSC_TRNSUM_A_LOr_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_A_LOr_GET
#define DSC_TRNSUM_A_LOr_TRNSUM_A_LOWf_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_A_LOr_TRNSUM_A_LOWf_GET
#define DSC_TRNSUM_A_LOr_TRNSUM_A_LOWf_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_A_LOr_TRNSUM_A_LOWf_SET
#define READ_DSC_TRNSUM_A_LOr BCMI_TSCF_GEN3_XGXS_READ_DSC_TRNSUM_A_LOr
#define WRITE_DSC_TRNSUM_A_LOr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_TRNSUM_A_LOr
#define MODIFY_DSC_TRNSUM_A_LOr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_TRNSUM_A_LOr
#define READLN_DSC_TRNSUM_A_LOr BCMI_TSCF_GEN3_XGXS_READLN_DSC_TRNSUM_A_LOr
#define WRITELN_DSC_TRNSUM_A_LOr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_TRNSUM_A_LOr
#define WRITEALL_DSC_TRNSUM_A_LOr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_TRNSUM_A_LOr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_A_LOr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_TRNSUM_A
 * BLOCKS:   DSC_B
 * REGADDR:  0xd041
 * DEVAD:    1
 * DESC:     trnsum a register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TRNSUM_A         Trnsum interleave 'a' result (23:8)
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Ar (0x0001d041 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Ar_SIZE 4

/*
 * This structure should be used to declare and program DSC_TRNSUM_A.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Ar_s {
	uint32_t v[1];
	uint32_t dsc_trnsum_a[1];
	uint32_t _dsc_trnsum_a;
} BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Ar_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Ar_CLR(r) (r).dsc_trnsum_a[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Ar_SET(r,d) (r).dsc_trnsum_a[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Ar_GET(r) (r).dsc_trnsum_a[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Ar_TRNSUM_Af_GET(r) (((r).dsc_trnsum_a[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Ar_TRNSUM_Af_SET(r,f) (r).dsc_trnsum_a[0]=(((r).dsc_trnsum_a[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access DSC_TRNSUM_A.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_TRNSUM_Ar(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Ar,(_r._dsc_trnsum_a))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_TRNSUM_Ar(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Ar,(_r._dsc_trnsum_a)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_TRNSUM_Ar(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Ar,(_r._dsc_trnsum_a))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_TRNSUM_Ar(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Ar|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_a))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_TRNSUM_Ar(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Ar|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_a))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_TRNSUM_Ar(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Ar|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_trnsum_a))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_TRNSUM_Ar BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Ar
#define DSC_TRNSUM_Ar_SIZE BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Ar_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Ar_t DSC_TRNSUM_Ar_t;
#define DSC_TRNSUM_Ar_CLR BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Ar_CLR
#define DSC_TRNSUM_Ar_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Ar_SET
#define DSC_TRNSUM_Ar_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Ar_GET
#define DSC_TRNSUM_Ar_TRNSUM_Af_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Ar_TRNSUM_Af_GET
#define DSC_TRNSUM_Ar_TRNSUM_Af_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Ar_TRNSUM_Af_SET
#define READ_DSC_TRNSUM_Ar BCMI_TSCF_GEN3_XGXS_READ_DSC_TRNSUM_Ar
#define WRITE_DSC_TRNSUM_Ar BCMI_TSCF_GEN3_XGXS_WRITE_DSC_TRNSUM_Ar
#define MODIFY_DSC_TRNSUM_Ar BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_TRNSUM_Ar
#define READLN_DSC_TRNSUM_Ar BCMI_TSCF_GEN3_XGXS_READLN_DSC_TRNSUM_Ar
#define WRITELN_DSC_TRNSUM_Ar BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_TRNSUM_Ar
#define WRITEALL_DSC_TRNSUM_Ar BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_TRNSUM_Ar

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Ar'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_TRNSUM_B_LO
 * BLOCKS:   DSC_B
 * REGADDR:  0xd042
 * DEVAD:    1
 * DESC:     trnsum b low register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TRNSUM_B_LOW     Trnsum interleave 'b' LSB result (7:0)
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_B_LOr (0x0001d042 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_B_LOr_SIZE 4

/*
 * This structure should be used to declare and program DSC_TRNSUM_B_LO.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_B_LOr_s {
	uint32_t v[1];
	uint32_t dsc_trnsum_b_lo[1];
	uint32_t _dsc_trnsum_b_lo;
} BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_B_LOr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_B_LOr_CLR(r) (r).dsc_trnsum_b_lo[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_B_LOr_SET(r,d) (r).dsc_trnsum_b_lo[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_B_LOr_GET(r) (r).dsc_trnsum_b_lo[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_B_LOr_TRNSUM_B_LOWf_GET(r) ((((r).dsc_trnsum_b_lo[0]) >> 8) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_B_LOr_TRNSUM_B_LOWf_SET(r,f) (r).dsc_trnsum_b_lo[0]=(((r).dsc_trnsum_b_lo[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))

/*
 * These macros can be used to access DSC_TRNSUM_B_LO.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_TRNSUM_B_LOr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_B_LOr,(_r._dsc_trnsum_b_lo))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_TRNSUM_B_LOr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_B_LOr,(_r._dsc_trnsum_b_lo)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_TRNSUM_B_LOr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_B_LOr,(_r._dsc_trnsum_b_lo))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_TRNSUM_B_LOr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_B_LOr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_b_lo))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_TRNSUM_B_LOr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_B_LOr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_b_lo))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_TRNSUM_B_LOr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_B_LOr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_trnsum_b_lo))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_TRNSUM_B_LOr BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_B_LOr
#define DSC_TRNSUM_B_LOr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_B_LOr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_B_LOr_t DSC_TRNSUM_B_LOr_t;
#define DSC_TRNSUM_B_LOr_CLR BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_B_LOr_CLR
#define DSC_TRNSUM_B_LOr_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_B_LOr_SET
#define DSC_TRNSUM_B_LOr_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_B_LOr_GET
#define DSC_TRNSUM_B_LOr_TRNSUM_B_LOWf_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_B_LOr_TRNSUM_B_LOWf_GET
#define DSC_TRNSUM_B_LOr_TRNSUM_B_LOWf_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_B_LOr_TRNSUM_B_LOWf_SET
#define READ_DSC_TRNSUM_B_LOr BCMI_TSCF_GEN3_XGXS_READ_DSC_TRNSUM_B_LOr
#define WRITE_DSC_TRNSUM_B_LOr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_TRNSUM_B_LOr
#define MODIFY_DSC_TRNSUM_B_LOr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_TRNSUM_B_LOr
#define READLN_DSC_TRNSUM_B_LOr BCMI_TSCF_GEN3_XGXS_READLN_DSC_TRNSUM_B_LOr
#define WRITELN_DSC_TRNSUM_B_LOr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_TRNSUM_B_LOr
#define WRITEALL_DSC_TRNSUM_B_LOr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_TRNSUM_B_LOr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_B_LOr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_TRNSUM_B
 * BLOCKS:   DSC_B
 * REGADDR:  0xd043
 * DEVAD:    1
 * DESC:     trnsum b register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TRNSUM_B         Trnsum interleave 'b' result (23:8)
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Br (0x0001d043 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Br_SIZE 4

/*
 * This structure should be used to declare and program DSC_TRNSUM_B.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Br_s {
	uint32_t v[1];
	uint32_t dsc_trnsum_b[1];
	uint32_t _dsc_trnsum_b;
} BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Br_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Br_CLR(r) (r).dsc_trnsum_b[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Br_SET(r,d) (r).dsc_trnsum_b[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Br_GET(r) (r).dsc_trnsum_b[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Br_TRNSUM_Bf_GET(r) (((r).dsc_trnsum_b[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Br_TRNSUM_Bf_SET(r,f) (r).dsc_trnsum_b[0]=(((r).dsc_trnsum_b[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access DSC_TRNSUM_B.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_TRNSUM_Br(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Br,(_r._dsc_trnsum_b))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_TRNSUM_Br(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Br,(_r._dsc_trnsum_b)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_TRNSUM_Br(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Br,(_r._dsc_trnsum_b))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_TRNSUM_Br(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Br|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_b))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_TRNSUM_Br(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Br|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_b))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_TRNSUM_Br(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Br|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_trnsum_b))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_TRNSUM_Br BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Br
#define DSC_TRNSUM_Br_SIZE BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Br_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Br_t DSC_TRNSUM_Br_t;
#define DSC_TRNSUM_Br_CLR BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Br_CLR
#define DSC_TRNSUM_Br_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Br_SET
#define DSC_TRNSUM_Br_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Br_GET
#define DSC_TRNSUM_Br_TRNSUM_Bf_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Br_TRNSUM_Bf_GET
#define DSC_TRNSUM_Br_TRNSUM_Bf_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Br_TRNSUM_Bf_SET
#define READ_DSC_TRNSUM_Br BCMI_TSCF_GEN3_XGXS_READ_DSC_TRNSUM_Br
#define WRITE_DSC_TRNSUM_Br BCMI_TSCF_GEN3_XGXS_WRITE_DSC_TRNSUM_Br
#define MODIFY_DSC_TRNSUM_Br BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_TRNSUM_Br
#define READLN_DSC_TRNSUM_Br BCMI_TSCF_GEN3_XGXS_READLN_DSC_TRNSUM_Br
#define WRITELN_DSC_TRNSUM_Br BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_TRNSUM_Br
#define WRITEALL_DSC_TRNSUM_Br BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_TRNSUM_Br

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Br'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_TRNSUM_C_LO
 * BLOCKS:   DSC_B
 * REGADDR:  0xd044
 * DEVAD:    1
 * DESC:     trnsum c low register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TRNSUM_C_LOW     Trnsum interleave 'c' LSB result (7:0)
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_C_LOr (0x0001d044 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_C_LOr_SIZE 4

/*
 * This structure should be used to declare and program DSC_TRNSUM_C_LO.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_C_LOr_s {
	uint32_t v[1];
	uint32_t dsc_trnsum_c_lo[1];
	uint32_t _dsc_trnsum_c_lo;
} BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_C_LOr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_C_LOr_CLR(r) (r).dsc_trnsum_c_lo[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_C_LOr_SET(r,d) (r).dsc_trnsum_c_lo[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_C_LOr_GET(r) (r).dsc_trnsum_c_lo[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_C_LOr_TRNSUM_C_LOWf_GET(r) ((((r).dsc_trnsum_c_lo[0]) >> 8) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_C_LOr_TRNSUM_C_LOWf_SET(r,f) (r).dsc_trnsum_c_lo[0]=(((r).dsc_trnsum_c_lo[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))

/*
 * These macros can be used to access DSC_TRNSUM_C_LO.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_TRNSUM_C_LOr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_C_LOr,(_r._dsc_trnsum_c_lo))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_TRNSUM_C_LOr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_C_LOr,(_r._dsc_trnsum_c_lo)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_TRNSUM_C_LOr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_C_LOr,(_r._dsc_trnsum_c_lo))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_TRNSUM_C_LOr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_C_LOr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_c_lo))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_TRNSUM_C_LOr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_C_LOr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_c_lo))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_TRNSUM_C_LOr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_C_LOr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_trnsum_c_lo))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_TRNSUM_C_LOr BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_C_LOr
#define DSC_TRNSUM_C_LOr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_C_LOr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_C_LOr_t DSC_TRNSUM_C_LOr_t;
#define DSC_TRNSUM_C_LOr_CLR BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_C_LOr_CLR
#define DSC_TRNSUM_C_LOr_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_C_LOr_SET
#define DSC_TRNSUM_C_LOr_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_C_LOr_GET
#define DSC_TRNSUM_C_LOr_TRNSUM_C_LOWf_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_C_LOr_TRNSUM_C_LOWf_GET
#define DSC_TRNSUM_C_LOr_TRNSUM_C_LOWf_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_C_LOr_TRNSUM_C_LOWf_SET
#define READ_DSC_TRNSUM_C_LOr BCMI_TSCF_GEN3_XGXS_READ_DSC_TRNSUM_C_LOr
#define WRITE_DSC_TRNSUM_C_LOr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_TRNSUM_C_LOr
#define MODIFY_DSC_TRNSUM_C_LOr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_TRNSUM_C_LOr
#define READLN_DSC_TRNSUM_C_LOr BCMI_TSCF_GEN3_XGXS_READLN_DSC_TRNSUM_C_LOr
#define WRITELN_DSC_TRNSUM_C_LOr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_TRNSUM_C_LOr
#define WRITEALL_DSC_TRNSUM_C_LOr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_TRNSUM_C_LOr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_C_LOr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_TRNSUM_C
 * BLOCKS:   DSC_B
 * REGADDR:  0xd045
 * DEVAD:    1
 * DESC:     trnsum c register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TRNSUM_C         Trnsum interleave 'c' result (23:8)
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Cr (0x0001d045 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Cr_SIZE 4

/*
 * This structure should be used to declare and program DSC_TRNSUM_C.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Cr_s {
	uint32_t v[1];
	uint32_t dsc_trnsum_c[1];
	uint32_t _dsc_trnsum_c;
} BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Cr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Cr_CLR(r) (r).dsc_trnsum_c[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Cr_SET(r,d) (r).dsc_trnsum_c[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Cr_GET(r) (r).dsc_trnsum_c[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Cr_TRNSUM_Cf_GET(r) (((r).dsc_trnsum_c[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Cr_TRNSUM_Cf_SET(r,f) (r).dsc_trnsum_c[0]=(((r).dsc_trnsum_c[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access DSC_TRNSUM_C.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_TRNSUM_Cr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Cr,(_r._dsc_trnsum_c))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_TRNSUM_Cr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Cr,(_r._dsc_trnsum_c)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_TRNSUM_Cr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Cr,(_r._dsc_trnsum_c))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_TRNSUM_Cr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Cr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_c))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_TRNSUM_Cr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Cr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_c))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_TRNSUM_Cr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Cr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_trnsum_c))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_TRNSUM_Cr BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Cr
#define DSC_TRNSUM_Cr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Cr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Cr_t DSC_TRNSUM_Cr_t;
#define DSC_TRNSUM_Cr_CLR BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Cr_CLR
#define DSC_TRNSUM_Cr_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Cr_SET
#define DSC_TRNSUM_Cr_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Cr_GET
#define DSC_TRNSUM_Cr_TRNSUM_Cf_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Cr_TRNSUM_Cf_GET
#define DSC_TRNSUM_Cr_TRNSUM_Cf_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Cr_TRNSUM_Cf_SET
#define READ_DSC_TRNSUM_Cr BCMI_TSCF_GEN3_XGXS_READ_DSC_TRNSUM_Cr
#define WRITE_DSC_TRNSUM_Cr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_TRNSUM_Cr
#define MODIFY_DSC_TRNSUM_Cr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_TRNSUM_Cr
#define READLN_DSC_TRNSUM_Cr BCMI_TSCF_GEN3_XGXS_READLN_DSC_TRNSUM_Cr
#define WRITELN_DSC_TRNSUM_Cr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_TRNSUM_Cr
#define WRITEALL_DSC_TRNSUM_Cr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_TRNSUM_Cr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Cr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_TRNSUM_D_LO
 * BLOCKS:   DSC_B
 * REGADDR:  0xd046
 * DEVAD:    1
 * DESC:     trnsum d low register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TRNSUM_D_LOW     Trnsum interleave 'd' LSB result (7:0)
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_D_LOr (0x0001d046 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_D_LOr_SIZE 4

/*
 * This structure should be used to declare and program DSC_TRNSUM_D_LO.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_D_LOr_s {
	uint32_t v[1];
	uint32_t dsc_trnsum_d_lo[1];
	uint32_t _dsc_trnsum_d_lo;
} BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_D_LOr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_D_LOr_CLR(r) (r).dsc_trnsum_d_lo[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_D_LOr_SET(r,d) (r).dsc_trnsum_d_lo[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_D_LOr_GET(r) (r).dsc_trnsum_d_lo[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_D_LOr_TRNSUM_D_LOWf_GET(r) ((((r).dsc_trnsum_d_lo[0]) >> 8) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_D_LOr_TRNSUM_D_LOWf_SET(r,f) (r).dsc_trnsum_d_lo[0]=(((r).dsc_trnsum_d_lo[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))

/*
 * These macros can be used to access DSC_TRNSUM_D_LO.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_TRNSUM_D_LOr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_D_LOr,(_r._dsc_trnsum_d_lo))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_TRNSUM_D_LOr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_D_LOr,(_r._dsc_trnsum_d_lo)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_TRNSUM_D_LOr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_D_LOr,(_r._dsc_trnsum_d_lo))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_TRNSUM_D_LOr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_D_LOr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_d_lo))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_TRNSUM_D_LOr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_D_LOr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_d_lo))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_TRNSUM_D_LOr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_D_LOr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_trnsum_d_lo))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_TRNSUM_D_LOr BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_D_LOr
#define DSC_TRNSUM_D_LOr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_D_LOr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_D_LOr_t DSC_TRNSUM_D_LOr_t;
#define DSC_TRNSUM_D_LOr_CLR BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_D_LOr_CLR
#define DSC_TRNSUM_D_LOr_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_D_LOr_SET
#define DSC_TRNSUM_D_LOr_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_D_LOr_GET
#define DSC_TRNSUM_D_LOr_TRNSUM_D_LOWf_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_D_LOr_TRNSUM_D_LOWf_GET
#define DSC_TRNSUM_D_LOr_TRNSUM_D_LOWf_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_D_LOr_TRNSUM_D_LOWf_SET
#define READ_DSC_TRNSUM_D_LOr BCMI_TSCF_GEN3_XGXS_READ_DSC_TRNSUM_D_LOr
#define WRITE_DSC_TRNSUM_D_LOr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_TRNSUM_D_LOr
#define MODIFY_DSC_TRNSUM_D_LOr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_TRNSUM_D_LOr
#define READLN_DSC_TRNSUM_D_LOr BCMI_TSCF_GEN3_XGXS_READLN_DSC_TRNSUM_D_LOr
#define WRITELN_DSC_TRNSUM_D_LOr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_TRNSUM_D_LOr
#define WRITEALL_DSC_TRNSUM_D_LOr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_TRNSUM_D_LOr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_D_LOr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_TRNSUM_D
 * BLOCKS:   DSC_B
 * REGADDR:  0xd047
 * DEVAD:    1
 * DESC:     trnsum d register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TRNSUM_D         Trnsum interleave 'd' result (15:8)
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Dr (0x0001d047 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Dr_SIZE 4

/*
 * This structure should be used to declare and program DSC_TRNSUM_D.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Dr_s {
	uint32_t v[1];
	uint32_t dsc_trnsum_d[1];
	uint32_t _dsc_trnsum_d;
} BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Dr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Dr_CLR(r) (r).dsc_trnsum_d[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Dr_SET(r,d) (r).dsc_trnsum_d[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Dr_GET(r) (r).dsc_trnsum_d[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Dr_TRNSUM_Df_GET(r) (((r).dsc_trnsum_d[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Dr_TRNSUM_Df_SET(r,f) (r).dsc_trnsum_d[0]=(((r).dsc_trnsum_d[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access DSC_TRNSUM_D.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_TRNSUM_Dr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Dr,(_r._dsc_trnsum_d))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_TRNSUM_Dr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Dr,(_r._dsc_trnsum_d)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_TRNSUM_Dr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Dr,(_r._dsc_trnsum_d))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_TRNSUM_Dr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Dr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_d))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_TRNSUM_Dr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Dr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_d))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_TRNSUM_Dr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Dr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_trnsum_d))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_TRNSUM_Dr BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Dr
#define DSC_TRNSUM_Dr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Dr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Dr_t DSC_TRNSUM_Dr_t;
#define DSC_TRNSUM_Dr_CLR BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Dr_CLR
#define DSC_TRNSUM_Dr_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Dr_SET
#define DSC_TRNSUM_Dr_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Dr_GET
#define DSC_TRNSUM_Dr_TRNSUM_Df_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Dr_TRNSUM_Df_GET
#define DSC_TRNSUM_Dr_TRNSUM_Df_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Dr_TRNSUM_Df_SET
#define READ_DSC_TRNSUM_Dr BCMI_TSCF_GEN3_XGXS_READ_DSC_TRNSUM_Dr
#define WRITE_DSC_TRNSUM_Dr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_TRNSUM_Dr
#define MODIFY_DSC_TRNSUM_Dr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_TRNSUM_Dr
#define READLN_DSC_TRNSUM_Dr BCMI_TSCF_GEN3_XGXS_READLN_DSC_TRNSUM_Dr
#define WRITELN_DSC_TRNSUM_Dr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_TRNSUM_Dr
#define WRITEALL_DSC_TRNSUM_Dr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_TRNSUM_Dr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_Dr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_TRNSUM_LO
 * BLOCKS:   DSC_B
 * REGADDR:  0xd048
 * DEVAD:    1
 * DESC:     trnsum low register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TRNSUM_LOW       Trnsum  LSB result (9:0)
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_LOr (0x0001d048 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_LOr_SIZE 4

/*
 * This structure should be used to declare and program DSC_TRNSUM_LO.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_LOr_s {
	uint32_t v[1];
	uint32_t dsc_trnsum_lo[1];
	uint32_t _dsc_trnsum_lo;
} BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_LOr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_LOr_CLR(r) (r).dsc_trnsum_lo[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_LOr_SET(r,d) (r).dsc_trnsum_lo[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_LOr_GET(r) (r).dsc_trnsum_lo[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_LOr_TRNSUM_LOWf_GET(r) ((((r).dsc_trnsum_lo[0]) >> 6) & 0x3ff)
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_LOr_TRNSUM_LOWf_SET(r,f) (r).dsc_trnsum_lo[0]=(((r).dsc_trnsum_lo[0] & ~((uint32_t)0x3ff << 6)) | ((((uint32_t)f) & 0x3ff) << 6)) | (1023 << (16 + 6))

/*
 * These macros can be used to access DSC_TRNSUM_LO.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_TRNSUM_LOr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_LOr,(_r._dsc_trnsum_lo))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_TRNSUM_LOr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_LOr,(_r._dsc_trnsum_lo)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_TRNSUM_LOr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_LOr,(_r._dsc_trnsum_lo))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_TRNSUM_LOr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_LOr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_lo))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_TRNSUM_LOr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_LOr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_lo))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_TRNSUM_LOr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_LOr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_trnsum_lo))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_TRNSUM_LOr BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_LOr
#define DSC_TRNSUM_LOr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_LOr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_LOr_t DSC_TRNSUM_LOr_t;
#define DSC_TRNSUM_LOr_CLR BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_LOr_CLR
#define DSC_TRNSUM_LOr_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_LOr_SET
#define DSC_TRNSUM_LOr_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_LOr_GET
#define DSC_TRNSUM_LOr_TRNSUM_LOWf_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_LOr_TRNSUM_LOWf_GET
#define DSC_TRNSUM_LOr_TRNSUM_LOWf_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_LOr_TRNSUM_LOWf_SET
#define READ_DSC_TRNSUM_LOr BCMI_TSCF_GEN3_XGXS_READ_DSC_TRNSUM_LOr
#define WRITE_DSC_TRNSUM_LOr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_TRNSUM_LOr
#define MODIFY_DSC_TRNSUM_LOr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_TRNSUM_LOr
#define READLN_DSC_TRNSUM_LOr BCMI_TSCF_GEN3_XGXS_READLN_DSC_TRNSUM_LOr
#define WRITELN_DSC_TRNSUM_LOr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_TRNSUM_LOr
#define WRITEALL_DSC_TRNSUM_LOr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_TRNSUM_LOr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_LOr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_TRNSUM
 * BLOCKS:   DSC_B
 * REGADDR:  0xd049
 * DEVAD:    1
 * DESC:     trnsum register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TRNSUM           Trnsum result (25:10)
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUMr (0x0001d049 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUMr_SIZE 4

/*
 * This structure should be used to declare and program DSC_TRNSUM.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_TRNSUMr_s {
	uint32_t v[1];
	uint32_t dsc_trnsum[1];
	uint32_t _dsc_trnsum;
} BCMI_TSCF_GEN3_XGXS_DSC_TRNSUMr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUMr_CLR(r) (r).dsc_trnsum[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUMr_SET(r,d) (r).dsc_trnsum[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUMr_GET(r) (r).dsc_trnsum[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUMr_TRNSUMf_GET(r) (((r).dsc_trnsum[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUMr_TRNSUMf_SET(r,f) (r).dsc_trnsum[0]=(((r).dsc_trnsum[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access DSC_TRNSUM.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_TRNSUMr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUMr,(_r._dsc_trnsum))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_TRNSUMr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUMr,(_r._dsc_trnsum)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_TRNSUMr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUMr,(_r._dsc_trnsum))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_TRNSUMr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUMr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_TRNSUMr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUMr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_TRNSUMr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUMr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_trnsum))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_TRNSUMr BCMI_TSCF_GEN3_XGXS_DSC_TRNSUMr
#define DSC_TRNSUMr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_TRNSUMr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_TRNSUMr_t DSC_TRNSUMr_t;
#define DSC_TRNSUMr_CLR BCMI_TSCF_GEN3_XGXS_DSC_TRNSUMr_CLR
#define DSC_TRNSUMr_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUMr_SET
#define DSC_TRNSUMr_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUMr_GET
#define DSC_TRNSUMr_TRNSUMf_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUMr_TRNSUMf_GET
#define DSC_TRNSUMr_TRNSUMf_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUMr_TRNSUMf_SET
#define READ_DSC_TRNSUMr BCMI_TSCF_GEN3_XGXS_READ_DSC_TRNSUMr
#define WRITE_DSC_TRNSUMr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_TRNSUMr
#define MODIFY_DSC_TRNSUMr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_TRNSUMr
#define READLN_DSC_TRNSUMr BCMI_TSCF_GEN3_XGXS_READLN_DSC_TRNSUMr
#define WRITELN_DSC_TRNSUMr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_TRNSUMr
#define WRITEALL_DSC_TRNSUMr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_TRNSUMr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_TRNSUMr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_DC_OFFS_STS
 * BLOCKS:   DSC_B
 * REGADDR:  0xd04c
 * DEVAD:    1
 * DESC:     dc offset status register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     DC_OFFSET_BIN    rx dc offset
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_STSr (0x0001d04c | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_STSr_SIZE 4

/*
 * This structure should be used to declare and program DSC_DC_OFFS_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_STSr_s {
	uint32_t v[1];
	uint32_t dsc_dc_offs_sts[1];
	uint32_t _dsc_dc_offs_sts;
} BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_STSr_CLR(r) (r).dsc_dc_offs_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_STSr_SET(r,d) (r).dsc_dc_offs_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_STSr_GET(r) (r).dsc_dc_offs_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_STSr_DC_OFFSET_BINf_GET(r) (((r).dsc_dc_offs_sts[0]) & 0x7f)
#define BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_STSr_DC_OFFSET_BINf_SET(r,f) (r).dsc_dc_offs_sts[0]=(((r).dsc_dc_offs_sts[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f)) | (0x7f << 16)

/*
 * These macros can be used to access DSC_DC_OFFS_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_DC_OFFS_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_STSr,(_r._dsc_dc_offs_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_DC_OFFS_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_STSr,(_r._dsc_dc_offs_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_DC_OFFS_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_STSr,(_r._dsc_dc_offs_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_DC_OFFS_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_dc_offs_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_DC_OFFS_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_dc_offs_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_DC_OFFS_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_dc_offs_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_DC_OFFS_STSr BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_STSr
#define DSC_DC_OFFS_STSr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_STSr_t DSC_DC_OFFS_STSr_t;
#define DSC_DC_OFFS_STSr_CLR BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_STSr_CLR
#define DSC_DC_OFFS_STSr_SET BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_STSr_SET
#define DSC_DC_OFFS_STSr_GET BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_STSr_GET
#define DSC_DC_OFFS_STSr_DC_OFFSET_BINf_GET BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_STSr_DC_OFFSET_BINf_GET
#define DSC_DC_OFFS_STSr_DC_OFFSET_BINf_SET BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_STSr_DC_OFFSET_BINf_SET
#define READ_DSC_DC_OFFS_STSr BCMI_TSCF_GEN3_XGXS_READ_DSC_DC_OFFS_STSr
#define WRITE_DSC_DC_OFFS_STSr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_DC_OFFS_STSr
#define MODIFY_DSC_DC_OFFS_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_DC_OFFS_STSr
#define READLN_DSC_DC_OFFS_STSr BCMI_TSCF_GEN3_XGXS_READLN_DSC_DC_OFFS_STSr
#define WRITELN_DSC_DC_OFFS_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_DC_OFFS_STSr
#define WRITEALL_DSC_DC_OFFS_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_DC_OFFS_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_VGA_D_THR_STS
 * BLOCKS:   DSC_B
 * REGADDR:  0xd04d
 * DEVAD:    1
 * DESC:     vga gain and data threshold status register.
 * RESETVAL: 0x2700 (9984)
 * ACCESS:   R/O
 * FIELDS:
 *     RX_DATA_THRESH_SEL Read out of the Data Slicer threshold in 2's complement signed format.
 *     RX_VGA_CTRL      Read out of the VGA control.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_VGA_D_THR_STSr (0x0001d04d | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_VGA_D_THR_STSr_SIZE 4

/*
 * This structure should be used to declare and program DSC_VGA_D_THR_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_VGA_D_THR_STSr_s {
	uint32_t v[1];
	uint32_t dsc_vga_d_thr_sts[1];
	uint32_t _dsc_vga_d_thr_sts;
} BCMI_TSCF_GEN3_XGXS_DSC_VGA_D_THR_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_VGA_D_THR_STSr_CLR(r) (r).dsc_vga_d_thr_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_VGA_D_THR_STSr_SET(r,d) (r).dsc_vga_d_thr_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_VGA_D_THR_STSr_GET(r) (r).dsc_vga_d_thr_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_VGA_D_THR_STSr_RX_VGA_CTRLf_GET(r) ((((r).dsc_vga_d_thr_sts[0]) >> 8) & 0x7f)
#define BCMI_TSCF_GEN3_XGXS_DSC_VGA_D_THR_STSr_RX_VGA_CTRLf_SET(r,f) (r).dsc_vga_d_thr_sts[0]=(((r).dsc_vga_d_thr_sts[0] & ~((uint32_t)0x7f << 8)) | ((((uint32_t)f) & 0x7f) << 8)) | (127 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_DSC_VGA_D_THR_STSr_RX_DATA_THRESH_SELf_GET(r) (((r).dsc_vga_d_thr_sts[0]) & 0x7f)
#define BCMI_TSCF_GEN3_XGXS_DSC_VGA_D_THR_STSr_RX_DATA_THRESH_SELf_SET(r,f) (r).dsc_vga_d_thr_sts[0]=(((r).dsc_vga_d_thr_sts[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f)) | (0x7f << 16)

/*
 * These macros can be used to access DSC_VGA_D_THR_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_VGA_D_THR_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_VGA_D_THR_STSr,(_r._dsc_vga_d_thr_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_VGA_D_THR_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_VGA_D_THR_STSr,(_r._dsc_vga_d_thr_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_VGA_D_THR_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_VGA_D_THR_STSr,(_r._dsc_vga_d_thr_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_VGA_D_THR_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_VGA_D_THR_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_vga_d_thr_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_VGA_D_THR_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_VGA_D_THR_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_vga_d_thr_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_VGA_D_THR_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_VGA_D_THR_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_vga_d_thr_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_VGA_D_THR_STSr BCMI_TSCF_GEN3_XGXS_DSC_VGA_D_THR_STSr
#define DSC_VGA_D_THR_STSr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_VGA_D_THR_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_VGA_D_THR_STSr_t DSC_VGA_D_THR_STSr_t;
#define DSC_VGA_D_THR_STSr_CLR BCMI_TSCF_GEN3_XGXS_DSC_VGA_D_THR_STSr_CLR
#define DSC_VGA_D_THR_STSr_SET BCMI_TSCF_GEN3_XGXS_DSC_VGA_D_THR_STSr_SET
#define DSC_VGA_D_THR_STSr_GET BCMI_TSCF_GEN3_XGXS_DSC_VGA_D_THR_STSr_GET
#define DSC_VGA_D_THR_STSr_RX_VGA_CTRLf_GET BCMI_TSCF_GEN3_XGXS_DSC_VGA_D_THR_STSr_RX_VGA_CTRLf_GET
#define DSC_VGA_D_THR_STSr_RX_VGA_CTRLf_SET BCMI_TSCF_GEN3_XGXS_DSC_VGA_D_THR_STSr_RX_VGA_CTRLf_SET
#define DSC_VGA_D_THR_STSr_RX_DATA_THRESH_SELf_GET BCMI_TSCF_GEN3_XGXS_DSC_VGA_D_THR_STSr_RX_DATA_THRESH_SELf_GET
#define DSC_VGA_D_THR_STSr_RX_DATA_THRESH_SELf_SET BCMI_TSCF_GEN3_XGXS_DSC_VGA_D_THR_STSr_RX_DATA_THRESH_SELf_SET
#define READ_DSC_VGA_D_THR_STSr BCMI_TSCF_GEN3_XGXS_READ_DSC_VGA_D_THR_STSr
#define WRITE_DSC_VGA_D_THR_STSr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_VGA_D_THR_STSr
#define MODIFY_DSC_VGA_D_THR_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_VGA_D_THR_STSr
#define READLN_DSC_VGA_D_THR_STSr BCMI_TSCF_GEN3_XGXS_READLN_DSC_VGA_D_THR_STSr
#define WRITELN_DSC_VGA_D_THR_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_VGA_D_THR_STSr
#define WRITEALL_DSC_VGA_D_THR_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_VGA_D_THR_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_VGA_D_THR_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_CDR_CTL0
 * BLOCKS:   DSC_C
 * REGADDR:  0xd050
 * DEVAD:    1
 * DESC:     cdr control register 0.
 * RESETVAL: 0xc09 (3081)
 * ACCESS:   R/W
 * FIELDS:
 *     OS_ALL_EDGES     0: 001/110 (and os_pattern_enhanced ==0 and br_pd_en ==0) , 1: x01/x10 patterns
 *     BR_PD_EN         0: (refer to os_all_edges) 1: use 011/100 patterns
 *     OS_PATTERN_ENHANCED when 1, selects 001/110 and also 010/101 from 4 locations {n,n+1, n+9, n+10}
 *     CDR_FREQ_EN      1: 2nd order loop output to contribute
 *     CDR_INTEG_REG_CLR clear integ Register
 *     CDR_PHASE_ERR_FRZ 1: override phase error to be 0
 *     CDR_INTEG_SAT_SEL 0:(-24576, 24575), 1:(-16384, 16383)
 *     CDR_FREQ_OVERRIDE_EN 1:override integ Register with cdr_freq_override_val
 *     CDR_ZERO_POLARITY inverts the phase slicer information before the phase detector
 *     CDR_PD_RISE_EN   applicable to os1,2,4. For br cdr please set these to 1.OS CDR: enables 001 patterns/ rising edgesBR CDR: enables 011 patterns.
 *     CDR_PD_FALL_EN   applicable to os1,2,4.OS CDR: enables 110 patterns/ falling edgesBR CDR: enables 100 patterns.
 *     SEND_LMS_TO_CDR  applicable to os1,2,4
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r (0x0001d050 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program DSC_CDR_CTL0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_s {
	uint32_t v[1];
	uint32_t dsc_cdr_ctl0[1];
	uint32_t _dsc_cdr_ctl0;
} BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_CLR(r) (r).dsc_cdr_ctl0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_SET(r,d) (r).dsc_cdr_ctl0[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_GET(r) (r).dsc_cdr_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_SEND_LMS_TO_CDRf_GET(r) ((((r).dsc_cdr_ctl0[0]) >> 12) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_SEND_LMS_TO_CDRf_SET(r,f) (r).dsc_cdr_ctl0[0]=(((r).dsc_cdr_ctl0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_CDR_PD_FALL_ENf_GET(r) ((((r).dsc_cdr_ctl0[0]) >> 11) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_CDR_PD_FALL_ENf_SET(r,f) (r).dsc_cdr_ctl0[0]=(((r).dsc_cdr_ctl0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_CDR_PD_RISE_ENf_GET(r) ((((r).dsc_cdr_ctl0[0]) >> 10) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_CDR_PD_RISE_ENf_SET(r,f) (r).dsc_cdr_ctl0[0]=(((r).dsc_cdr_ctl0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_CDR_ZERO_POLARITYf_GET(r) ((((r).dsc_cdr_ctl0[0]) >> 9) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_CDR_ZERO_POLARITYf_SET(r,f) (r).dsc_cdr_ctl0[0]=(((r).dsc_cdr_ctl0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_CDR_FREQ_OVERRIDE_ENf_GET(r) ((((r).dsc_cdr_ctl0[0]) >> 8) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_CDR_FREQ_OVERRIDE_ENf_SET(r,f) (r).dsc_cdr_ctl0[0]=(((r).dsc_cdr_ctl0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_CDR_INTEG_SAT_SELf_GET(r) ((((r).dsc_cdr_ctl0[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_CDR_INTEG_SAT_SELf_SET(r,f) (r).dsc_cdr_ctl0[0]=(((r).dsc_cdr_ctl0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_CDR_PHASE_ERR_FRZf_GET(r) ((((r).dsc_cdr_ctl0[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_CDR_PHASE_ERR_FRZf_SET(r,f) (r).dsc_cdr_ctl0[0]=(((r).dsc_cdr_ctl0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_CDR_INTEG_REG_CLRf_GET(r) ((((r).dsc_cdr_ctl0[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_CDR_INTEG_REG_CLRf_SET(r,f) (r).dsc_cdr_ctl0[0]=(((r).dsc_cdr_ctl0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_CDR_FREQ_ENf_GET(r) ((((r).dsc_cdr_ctl0[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_CDR_FREQ_ENf_SET(r,f) (r).dsc_cdr_ctl0[0]=(((r).dsc_cdr_ctl0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_OS_PATTERN_ENHANCEDf_GET(r) ((((r).dsc_cdr_ctl0[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_OS_PATTERN_ENHANCEDf_SET(r,f) (r).dsc_cdr_ctl0[0]=(((r).dsc_cdr_ctl0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_BR_PD_ENf_GET(r) ((((r).dsc_cdr_ctl0[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_BR_PD_ENf_SET(r,f) (r).dsc_cdr_ctl0[0]=(((r).dsc_cdr_ctl0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_OS_ALL_EDGESf_GET(r) (((r).dsc_cdr_ctl0[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_OS_ALL_EDGESf_SET(r,f) (r).dsc_cdr_ctl0[0]=(((r).dsc_cdr_ctl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access DSC_CDR_CTL0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_CDR_CTL0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r,(_r._dsc_cdr_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_CDR_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r,(_r._dsc_cdr_ctl0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_CDR_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r,(_r._dsc_cdr_ctl0))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_CDR_CTL0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_cdr_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_CDR_CTL0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_cdr_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_CDR_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_cdr_ctl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_CDR_CTL0r BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r
#define DSC_CDR_CTL0r_SIZE BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_t DSC_CDR_CTL0r_t;
#define DSC_CDR_CTL0r_CLR BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_CLR
#define DSC_CDR_CTL0r_SET BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_SET
#define DSC_CDR_CTL0r_GET BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_GET
#define DSC_CDR_CTL0r_SEND_LMS_TO_CDRf_GET BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_SEND_LMS_TO_CDRf_GET
#define DSC_CDR_CTL0r_SEND_LMS_TO_CDRf_SET BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_SEND_LMS_TO_CDRf_SET
#define DSC_CDR_CTL0r_CDR_PD_FALL_ENf_GET BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_CDR_PD_FALL_ENf_GET
#define DSC_CDR_CTL0r_CDR_PD_FALL_ENf_SET BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_CDR_PD_FALL_ENf_SET
#define DSC_CDR_CTL0r_CDR_PD_RISE_ENf_GET BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_CDR_PD_RISE_ENf_GET
#define DSC_CDR_CTL0r_CDR_PD_RISE_ENf_SET BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_CDR_PD_RISE_ENf_SET
#define DSC_CDR_CTL0r_CDR_ZERO_POLARITYf_GET BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_CDR_ZERO_POLARITYf_GET
#define DSC_CDR_CTL0r_CDR_ZERO_POLARITYf_SET BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_CDR_ZERO_POLARITYf_SET
#define DSC_CDR_CTL0r_CDR_FREQ_OVERRIDE_ENf_GET BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_CDR_FREQ_OVERRIDE_ENf_GET
#define DSC_CDR_CTL0r_CDR_FREQ_OVERRIDE_ENf_SET BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_CDR_FREQ_OVERRIDE_ENf_SET
#define DSC_CDR_CTL0r_CDR_INTEG_SAT_SELf_GET BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_CDR_INTEG_SAT_SELf_GET
#define DSC_CDR_CTL0r_CDR_INTEG_SAT_SELf_SET BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_CDR_INTEG_SAT_SELf_SET
#define DSC_CDR_CTL0r_CDR_PHASE_ERR_FRZf_GET BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_CDR_PHASE_ERR_FRZf_GET
#define DSC_CDR_CTL0r_CDR_PHASE_ERR_FRZf_SET BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_CDR_PHASE_ERR_FRZf_SET
#define DSC_CDR_CTL0r_CDR_INTEG_REG_CLRf_GET BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_CDR_INTEG_REG_CLRf_GET
#define DSC_CDR_CTL0r_CDR_INTEG_REG_CLRf_SET BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_CDR_INTEG_REG_CLRf_SET
#define DSC_CDR_CTL0r_CDR_FREQ_ENf_GET BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_CDR_FREQ_ENf_GET
#define DSC_CDR_CTL0r_CDR_FREQ_ENf_SET BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_CDR_FREQ_ENf_SET
#define DSC_CDR_CTL0r_OS_PATTERN_ENHANCEDf_GET BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_OS_PATTERN_ENHANCEDf_GET
#define DSC_CDR_CTL0r_OS_PATTERN_ENHANCEDf_SET BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_OS_PATTERN_ENHANCEDf_SET
#define DSC_CDR_CTL0r_BR_PD_ENf_GET BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_BR_PD_ENf_GET
#define DSC_CDR_CTL0r_BR_PD_ENf_SET BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_BR_PD_ENf_SET
#define DSC_CDR_CTL0r_OS_ALL_EDGESf_GET BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_OS_ALL_EDGESf_GET
#define DSC_CDR_CTL0r_OS_ALL_EDGESf_SET BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r_OS_ALL_EDGESf_SET
#define READ_DSC_CDR_CTL0r BCMI_TSCF_GEN3_XGXS_READ_DSC_CDR_CTL0r
#define WRITE_DSC_CDR_CTL0r BCMI_TSCF_GEN3_XGXS_WRITE_DSC_CDR_CTL0r
#define MODIFY_DSC_CDR_CTL0r BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_CDR_CTL0r
#define READLN_DSC_CDR_CTL0r BCMI_TSCF_GEN3_XGXS_READLN_DSC_CDR_CTL0r
#define WRITELN_DSC_CDR_CTL0r BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_CDR_CTL0r
#define WRITEALL_DSC_CDR_CTL0r BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_CDR_CTL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_CDR_CTL1
 * BLOCKS:   DSC_C
 * REGADDR:  0xd051
 * DEVAD:    1
 * DESC:     cdr control register 1.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CDR_FREQ_OVERRIDE_VAL Gets loaded into the integ reg @ reset. Also, see alternate use in description of cdr_freq_override_en  Program round(ppm_required * 83.89/32) to this registerppm_required = 200 if 200e-6 frequency offset is needed
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL1r (0x0001d051 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL1r_SIZE 4

/*
 * This structure should be used to declare and program DSC_CDR_CTL1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL1r_s {
	uint32_t v[1];
	uint32_t dsc_cdr_ctl1[1];
	uint32_t _dsc_cdr_ctl1;
} BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL1r_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL1r_CLR(r) (r).dsc_cdr_ctl1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL1r_SET(r,d) (r).dsc_cdr_ctl1[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL1r_GET(r) (r).dsc_cdr_ctl1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL1r_CDR_FREQ_OVERRIDE_VALf_GET(r) ((((r).dsc_cdr_ctl1[0]) >> 5) & 0x7ff)
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL1r_CDR_FREQ_OVERRIDE_VALf_SET(r,f) (r).dsc_cdr_ctl1[0]=(((r).dsc_cdr_ctl1[0] & ~((uint32_t)0x7ff << 5)) | ((((uint32_t)f) & 0x7ff) << 5)) | (2047 << (16 + 5))

/*
 * These macros can be used to access DSC_CDR_CTL1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_CDR_CTL1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL1r,(_r._dsc_cdr_ctl1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_CDR_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL1r,(_r._dsc_cdr_ctl1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_CDR_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL1r,(_r._dsc_cdr_ctl1))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_CDR_CTL1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_cdr_ctl1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_CDR_CTL1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_cdr_ctl1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_CDR_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_cdr_ctl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_CDR_CTL1r BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL1r
#define DSC_CDR_CTL1r_SIZE BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL1r_t DSC_CDR_CTL1r_t;
#define DSC_CDR_CTL1r_CLR BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL1r_CLR
#define DSC_CDR_CTL1r_SET BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL1r_SET
#define DSC_CDR_CTL1r_GET BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL1r_GET
#define DSC_CDR_CTL1r_CDR_FREQ_OVERRIDE_VALf_GET BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL1r_CDR_FREQ_OVERRIDE_VALf_GET
#define DSC_CDR_CTL1r_CDR_FREQ_OVERRIDE_VALf_SET BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL1r_CDR_FREQ_OVERRIDE_VALf_SET
#define READ_DSC_CDR_CTL1r BCMI_TSCF_GEN3_XGXS_READ_DSC_CDR_CTL1r
#define WRITE_DSC_CDR_CTL1r BCMI_TSCF_GEN3_XGXS_WRITE_DSC_CDR_CTL1r
#define MODIFY_DSC_CDR_CTL1r BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_CDR_CTL1r
#define READLN_DSC_CDR_CTL1r BCMI_TSCF_GEN3_XGXS_READLN_DSC_CDR_CTL1r
#define WRITELN_DSC_CDR_CTL1r BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_CDR_CTL1r
#define WRITEALL_DSC_CDR_CTL1r BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_CDR_CTL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_CDR_CTL2
 * BLOCKS:   DSC_C
 * REGADDR:  0xd052
 * DEVAD:    1
 * DESC:     cdr control register 2
 * RESETVAL: 0x80 (128)
 * ACCESS:   R/W
 * FIELDS:
 *     CDR_LM_THR_SEL   cdr lock monitor looks for integ reg to be within sat level - (cdr_lm_thr_sel +1)*512 in magnitude
 *     CDR_1G_SWAP_PZ   When 1, this will swap the peaks and zeros going out as the DME data. It will still use the original peaks and zeros for data recovery.
 *     CDR_1G_FORCE_EN  Forces the enable on the 1g logic. Else it should be enabled with osr mode setting to correct value.
 *     TX_PI_LOOP_TIMING_SRC_SEL Needs to be 1 in order to gate the phase sum on.
 *     PHS_SUM_IGNORE_DSC_LOCK Normally the phase summer waits for dsc lock. This bit overrides that wait.
 *     CDR_1G_MANUAL_MODE Puts the 1G CDR in manual mode.
 *     CDR_1G_MANUAL_STROBE Manual Strobe for the 1G CDR.
 *     CDR_PROP_BW_EXTEND For OS modes 8,16,32:When 1, the proportional BW is increased by 2{cdr_prop_bw_extend, cdr_bwsel_prop_[norm/acqcdr]}: Gain===============================================0, 0                   :                 *10, 1                   :                 *21, 0                   :                 *31, 1                   :                 *4For OS modes 1,2,4:When 1, the Kp is effectively doubled. The data path widths only support this multiplication (this bit set to 1) for rise edge only PD or a fall edge only PD.{cdr_prop_bw_extend, cdr_bwsel_prop_[norm/acqcdr]}: Gain===============================================0, 0                   :                 *10, 1                   :                 *21, 0                   :                 *21, 1                   :                 *4
 *     RX_PHASE_SUM_ACC_MODE 3'b000: osr-mode dependent scaling of rx pi phase steps3'b001: sum over 16 cycles and divide by 43'b010: sum over 20 cycles and divide by 5others: un-supported
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r (0x0001d052 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_CDR_CTL2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r_s {
	uint32_t v[1];
	uint32_t dsc_cdr_ctl2[1];
	uint32_t _dsc_cdr_ctl2;
} BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r_CLR(r) (r).dsc_cdr_ctl2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r_SET(r,d) (r).dsc_cdr_ctl2[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r_GET(r) (r).dsc_cdr_ctl2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r_RX_PHASE_SUM_ACC_MODEf_GET(r) ((((r).dsc_cdr_ctl2[0]) >> 11) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r_RX_PHASE_SUM_ACC_MODEf_SET(r,f) (r).dsc_cdr_ctl2[0]=(((r).dsc_cdr_ctl2[0] & ~((uint32_t)0x7 << 11)) | ((((uint32_t)f) & 0x7) << 11)) | (7 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r_CDR_PROP_BW_EXTENDf_GET(r) ((((r).dsc_cdr_ctl2[0]) >> 10) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r_CDR_PROP_BW_EXTENDf_SET(r,f) (r).dsc_cdr_ctl2[0]=(((r).dsc_cdr_ctl2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r_CDR_1G_MANUAL_STROBEf_GET(r) ((((r).dsc_cdr_ctl2[0]) >> 9) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r_CDR_1G_MANUAL_STROBEf_SET(r,f) (r).dsc_cdr_ctl2[0]=(((r).dsc_cdr_ctl2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r_CDR_1G_MANUAL_MODEf_GET(r) ((((r).dsc_cdr_ctl2[0]) >> 8) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r_CDR_1G_MANUAL_MODEf_SET(r,f) (r).dsc_cdr_ctl2[0]=(((r).dsc_cdr_ctl2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r_PHS_SUM_IGNORE_DSC_LOCKf_GET(r) ((((r).dsc_cdr_ctl2[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r_PHS_SUM_IGNORE_DSC_LOCKf_SET(r,f) (r).dsc_cdr_ctl2[0]=(((r).dsc_cdr_ctl2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r_TX_PI_LOOP_TIMING_SRC_SELf_GET(r) ((((r).dsc_cdr_ctl2[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r_TX_PI_LOOP_TIMING_SRC_SELf_SET(r,f) (r).dsc_cdr_ctl2[0]=(((r).dsc_cdr_ctl2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r_CDR_1G_FORCE_ENf_GET(r) ((((r).dsc_cdr_ctl2[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r_CDR_1G_FORCE_ENf_SET(r,f) (r).dsc_cdr_ctl2[0]=(((r).dsc_cdr_ctl2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r_CDR_1G_SWAP_PZf_GET(r) ((((r).dsc_cdr_ctl2[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r_CDR_1G_SWAP_PZf_SET(r,f) (r).dsc_cdr_ctl2[0]=(((r).dsc_cdr_ctl2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r_CDR_LM_THR_SELf_GET(r) (((r).dsc_cdr_ctl2[0]) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r_CDR_LM_THR_SELf_SET(r,f) (r).dsc_cdr_ctl2[0]=(((r).dsc_cdr_ctl2[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access DSC_CDR_CTL2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_CDR_CTL2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r,(_r._dsc_cdr_ctl2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_CDR_CTL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r,(_r._dsc_cdr_ctl2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_CDR_CTL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r,(_r._dsc_cdr_ctl2))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_CDR_CTL2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_cdr_ctl2))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_CDR_CTL2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_cdr_ctl2))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_CDR_CTL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_cdr_ctl2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_CDR_CTL2r BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r
#define DSC_CDR_CTL2r_SIZE BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r_t DSC_CDR_CTL2r_t;
#define DSC_CDR_CTL2r_CLR BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r_CLR
#define DSC_CDR_CTL2r_SET BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r_SET
#define DSC_CDR_CTL2r_GET BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r_GET
#define DSC_CDR_CTL2r_RX_PHASE_SUM_ACC_MODEf_GET BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r_RX_PHASE_SUM_ACC_MODEf_GET
#define DSC_CDR_CTL2r_RX_PHASE_SUM_ACC_MODEf_SET BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r_RX_PHASE_SUM_ACC_MODEf_SET
#define DSC_CDR_CTL2r_CDR_PROP_BW_EXTENDf_GET BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r_CDR_PROP_BW_EXTENDf_GET
#define DSC_CDR_CTL2r_CDR_PROP_BW_EXTENDf_SET BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r_CDR_PROP_BW_EXTENDf_SET
#define DSC_CDR_CTL2r_CDR_1G_MANUAL_STROBEf_GET BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r_CDR_1G_MANUAL_STROBEf_GET
#define DSC_CDR_CTL2r_CDR_1G_MANUAL_STROBEf_SET BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r_CDR_1G_MANUAL_STROBEf_SET
#define DSC_CDR_CTL2r_CDR_1G_MANUAL_MODEf_GET BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r_CDR_1G_MANUAL_MODEf_GET
#define DSC_CDR_CTL2r_CDR_1G_MANUAL_MODEf_SET BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r_CDR_1G_MANUAL_MODEf_SET
#define DSC_CDR_CTL2r_PHS_SUM_IGNORE_DSC_LOCKf_GET BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r_PHS_SUM_IGNORE_DSC_LOCKf_GET
#define DSC_CDR_CTL2r_PHS_SUM_IGNORE_DSC_LOCKf_SET BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r_PHS_SUM_IGNORE_DSC_LOCKf_SET
#define DSC_CDR_CTL2r_TX_PI_LOOP_TIMING_SRC_SELf_GET BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r_TX_PI_LOOP_TIMING_SRC_SELf_GET
#define DSC_CDR_CTL2r_TX_PI_LOOP_TIMING_SRC_SELf_SET BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r_TX_PI_LOOP_TIMING_SRC_SELf_SET
#define DSC_CDR_CTL2r_CDR_1G_FORCE_ENf_GET BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r_CDR_1G_FORCE_ENf_GET
#define DSC_CDR_CTL2r_CDR_1G_FORCE_ENf_SET BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r_CDR_1G_FORCE_ENf_SET
#define DSC_CDR_CTL2r_CDR_1G_SWAP_PZf_GET BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r_CDR_1G_SWAP_PZf_GET
#define DSC_CDR_CTL2r_CDR_1G_SWAP_PZf_SET BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r_CDR_1G_SWAP_PZf_SET
#define DSC_CDR_CTL2r_CDR_LM_THR_SELf_GET BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r_CDR_LM_THR_SELf_GET
#define DSC_CDR_CTL2r_CDR_LM_THR_SELf_SET BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r_CDR_LM_THR_SELf_SET
#define READ_DSC_CDR_CTL2r BCMI_TSCF_GEN3_XGXS_READ_DSC_CDR_CTL2r
#define WRITE_DSC_CDR_CTL2r BCMI_TSCF_GEN3_XGXS_WRITE_DSC_CDR_CTL2r
#define MODIFY_DSC_CDR_CTL2r BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_CDR_CTL2r
#define READLN_DSC_CDR_CTL2r BCMI_TSCF_GEN3_XGXS_READLN_DSC_CDR_CTL2r
#define WRITELN_DSC_CDR_CTL2r BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_CDR_CTL2r
#define WRITEALL_DSC_CDR_CTL2r BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_CDR_CTL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_CDR_CTL2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_RX_PI_CTL
 * BLOCKS:   DSC_C
 * REGADDR:  0xd053
 * DEVAD:    1
 * DESC:     rx pi control register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RX_PI_SLICERS_EN bit-vector representing which PI's to adjust: [0] d, [1] dq, [2] p, [3] pq, [4] l, [6] lq
 *     RX_PI_PHASE_STEP_CNT # of steps to adjust: 0..7: [1, 46,52,58,64,70,76,84]
 *     RX_PI_PHASE_STEP_DIR 0: left shift, 1: right shift
 *     RX_PI_MANUAL_MODE 0: normal, 1:disconnect all PI's from CDR when enabled
 *     RX_PI_MANUAL_STROBE perform a manual override over specified number of clocks
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CTLr (0x0001d053 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CTLr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_PI_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CTLr_s {
	uint32_t v[1];
	uint32_t dsc_rx_pi_ctl[1];
	uint32_t _dsc_rx_pi_ctl;
} BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CTLr_CLR(r) (r).dsc_rx_pi_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CTLr_SET(r,d) (r).dsc_rx_pi_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CTLr_GET(r) (r).dsc_rx_pi_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CTLr_RX_PI_MANUAL_STROBEf_GET(r) ((((r).dsc_rx_pi_ctl[0]) >> 11) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CTLr_RX_PI_MANUAL_STROBEf_SET(r,f) (r).dsc_rx_pi_ctl[0]=(((r).dsc_rx_pi_ctl[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CTLr_RX_PI_MANUAL_MODEf_GET(r) ((((r).dsc_rx_pi_ctl[0]) >> 10) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CTLr_RX_PI_MANUAL_MODEf_SET(r,f) (r).dsc_rx_pi_ctl[0]=(((r).dsc_rx_pi_ctl[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CTLr_RX_PI_PHASE_STEP_DIRf_GET(r) ((((r).dsc_rx_pi_ctl[0]) >> 9) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CTLr_RX_PI_PHASE_STEP_DIRf_SET(r,f) (r).dsc_rx_pi_ctl[0]=(((r).dsc_rx_pi_ctl[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CTLr_RX_PI_PHASE_STEP_CNTf_GET(r) ((((r).dsc_rx_pi_ctl[0]) >> 6) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CTLr_RX_PI_PHASE_STEP_CNTf_SET(r,f) (r).dsc_rx_pi_ctl[0]=(((r).dsc_rx_pi_ctl[0] & ~((uint32_t)0x7 << 6)) | ((((uint32_t)f) & 0x7) << 6)) | (7 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CTLr_RX_PI_SLICERS_ENf_GET(r) (((r).dsc_rx_pi_ctl[0]) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CTLr_RX_PI_SLICERS_ENf_SET(r,f) (r).dsc_rx_pi_ctl[0]=(((r).dsc_rx_pi_ctl[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access DSC_RX_PI_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_PI_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CTLr,(_r._dsc_rx_pi_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_PI_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CTLr,(_r._dsc_rx_pi_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_PI_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CTLr,(_r._dsc_rx_pi_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_PI_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_pi_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_PI_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_pi_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_PI_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_pi_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_PI_CTLr BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CTLr
#define DSC_RX_PI_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CTLr_t DSC_RX_PI_CTLr_t;
#define DSC_RX_PI_CTLr_CLR BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CTLr_CLR
#define DSC_RX_PI_CTLr_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CTLr_SET
#define DSC_RX_PI_CTLr_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CTLr_GET
#define DSC_RX_PI_CTLr_RX_PI_MANUAL_STROBEf_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CTLr_RX_PI_MANUAL_STROBEf_GET
#define DSC_RX_PI_CTLr_RX_PI_MANUAL_STROBEf_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CTLr_RX_PI_MANUAL_STROBEf_SET
#define DSC_RX_PI_CTLr_RX_PI_MANUAL_MODEf_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CTLr_RX_PI_MANUAL_MODEf_GET
#define DSC_RX_PI_CTLr_RX_PI_MANUAL_MODEf_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CTLr_RX_PI_MANUAL_MODEf_SET
#define DSC_RX_PI_CTLr_RX_PI_PHASE_STEP_DIRf_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CTLr_RX_PI_PHASE_STEP_DIRf_GET
#define DSC_RX_PI_CTLr_RX_PI_PHASE_STEP_DIRf_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CTLr_RX_PI_PHASE_STEP_DIRf_SET
#define DSC_RX_PI_CTLr_RX_PI_PHASE_STEP_CNTf_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CTLr_RX_PI_PHASE_STEP_CNTf_GET
#define DSC_RX_PI_CTLr_RX_PI_PHASE_STEP_CNTf_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CTLr_RX_PI_PHASE_STEP_CNTf_SET
#define DSC_RX_PI_CTLr_RX_PI_SLICERS_ENf_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CTLr_RX_PI_SLICERS_ENf_GET
#define DSC_RX_PI_CTLr_RX_PI_SLICERS_ENf_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CTLr_RX_PI_SLICERS_ENf_SET
#define READ_DSC_RX_PI_CTLr BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_PI_CTLr
#define WRITE_DSC_RX_PI_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_PI_CTLr
#define MODIFY_DSC_RX_PI_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_PI_CTLr
#define READLN_DSC_RX_PI_CTLr BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_PI_CTLr
#define WRITELN_DSC_RX_PI_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_PI_CTLr
#define WRITEALL_DSC_RX_PI_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_PI_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_TRNSUM_CTL2
 * BLOCKS:   DSC_C
 * REGADDR:  0xd054
 * DEVAD:    1
 * DESC:     trnsum control 2 register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TRNSUM_CLR_SC    Self Clearing bitWhen asserted, the trnsum accumulator clears.
 *     TRNSUM_DISABLE_SM_CLEAR When asserted,a pulse on uc_trnsum_en no longer clears the accumulator.
 *     TRNSUM_PATTERN_MATCH_SEL 0, 3: pattern matching on rx_data1: pattern matching on m1err2: pattern matching on expected prbs data
 *     TRNSUM_EYE_CLOSE_PREV_EN When 1, the first eye close event after previous 6 non-eye closure events is picked. The eye close condition settings need to be turned on for this setting to work.
 *     TRNSUM_EYE_CLOSURE_ERR_SEL When trnsum_eye_closure_en is set, this field determines what is compared against d slicer. d!=error_selected , where error_selected is:1'b0: emux1'b1: expected prbs
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTL2r (0x0001d054 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTL2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_TRNSUM_CTL2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTL2r_s {
	uint32_t v[1];
	uint32_t dsc_trnsum_ctl2[1];
	uint32_t _dsc_trnsum_ctl2;
} BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTL2r_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTL2r_CLR(r) (r).dsc_trnsum_ctl2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTL2r_SET(r,d) (r).dsc_trnsum_ctl2[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTL2r_GET(r) (r).dsc_trnsum_ctl2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTL2r_TRNSUM_EYE_CLOSURE_ERR_SELf_GET(r) ((((r).dsc_trnsum_ctl2[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTL2r_TRNSUM_EYE_CLOSURE_ERR_SELf_SET(r,f) (r).dsc_trnsum_ctl2[0]=(((r).dsc_trnsum_ctl2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTL2r_TRNSUM_EYE_CLOSE_PREV_ENf_GET(r) ((((r).dsc_trnsum_ctl2[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTL2r_TRNSUM_EYE_CLOSE_PREV_ENf_SET(r,f) (r).dsc_trnsum_ctl2[0]=(((r).dsc_trnsum_ctl2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTL2r_TRNSUM_PATTERN_MATCH_SELf_GET(r) ((((r).dsc_trnsum_ctl2[0]) >> 2) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTL2r_TRNSUM_PATTERN_MATCH_SELf_SET(r,f) (r).dsc_trnsum_ctl2[0]=(((r).dsc_trnsum_ctl2[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2)) | (3 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTL2r_TRNSUM_DISABLE_SM_CLEARf_GET(r) ((((r).dsc_trnsum_ctl2[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTL2r_TRNSUM_DISABLE_SM_CLEARf_SET(r,f) (r).dsc_trnsum_ctl2[0]=(((r).dsc_trnsum_ctl2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTL2r_TRNSUM_CLR_SCf_GET(r) (((r).dsc_trnsum_ctl2[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTL2r_TRNSUM_CLR_SCf_SET(r,f) (r).dsc_trnsum_ctl2[0]=(((r).dsc_trnsum_ctl2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access DSC_TRNSUM_CTL2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_TRNSUM_CTL2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTL2r,(_r._dsc_trnsum_ctl2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_TRNSUM_CTL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTL2r,(_r._dsc_trnsum_ctl2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_TRNSUM_CTL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTL2r,(_r._dsc_trnsum_ctl2))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_TRNSUM_CTL2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_ctl2))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_TRNSUM_CTL2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_ctl2))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_TRNSUM_CTL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_trnsum_ctl2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_TRNSUM_CTL2r BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTL2r
#define DSC_TRNSUM_CTL2r_SIZE BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTL2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTL2r_t DSC_TRNSUM_CTL2r_t;
#define DSC_TRNSUM_CTL2r_CLR BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTL2r_CLR
#define DSC_TRNSUM_CTL2r_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTL2r_SET
#define DSC_TRNSUM_CTL2r_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTL2r_GET
#define DSC_TRNSUM_CTL2r_TRNSUM_EYE_CLOSURE_ERR_SELf_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTL2r_TRNSUM_EYE_CLOSURE_ERR_SELf_GET
#define DSC_TRNSUM_CTL2r_TRNSUM_EYE_CLOSURE_ERR_SELf_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTL2r_TRNSUM_EYE_CLOSURE_ERR_SELf_SET
#define DSC_TRNSUM_CTL2r_TRNSUM_EYE_CLOSE_PREV_ENf_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTL2r_TRNSUM_EYE_CLOSE_PREV_ENf_GET
#define DSC_TRNSUM_CTL2r_TRNSUM_EYE_CLOSE_PREV_ENf_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTL2r_TRNSUM_EYE_CLOSE_PREV_ENf_SET
#define DSC_TRNSUM_CTL2r_TRNSUM_PATTERN_MATCH_SELf_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTL2r_TRNSUM_PATTERN_MATCH_SELf_GET
#define DSC_TRNSUM_CTL2r_TRNSUM_PATTERN_MATCH_SELf_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTL2r_TRNSUM_PATTERN_MATCH_SELf_SET
#define DSC_TRNSUM_CTL2r_TRNSUM_DISABLE_SM_CLEARf_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTL2r_TRNSUM_DISABLE_SM_CLEARf_GET
#define DSC_TRNSUM_CTL2r_TRNSUM_DISABLE_SM_CLEARf_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTL2r_TRNSUM_DISABLE_SM_CLEARf_SET
#define DSC_TRNSUM_CTL2r_TRNSUM_CLR_SCf_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTL2r_TRNSUM_CLR_SCf_GET
#define DSC_TRNSUM_CTL2r_TRNSUM_CLR_SCf_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTL2r_TRNSUM_CLR_SCf_SET
#define READ_DSC_TRNSUM_CTL2r BCMI_TSCF_GEN3_XGXS_READ_DSC_TRNSUM_CTL2r
#define WRITE_DSC_TRNSUM_CTL2r BCMI_TSCF_GEN3_XGXS_WRITE_DSC_TRNSUM_CTL2r
#define MODIFY_DSC_TRNSUM_CTL2r BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_TRNSUM_CTL2r
#define READLN_DSC_TRNSUM_CTL2r BCMI_TSCF_GEN3_XGXS_READLN_DSC_TRNSUM_CTL2r
#define WRITELN_DSC_TRNSUM_CTL2r BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_TRNSUM_CTL2r
#define WRITEALL_DSC_TRNSUM_CTL2r BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_TRNSUM_CTL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTL2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_TRNSUM_CTL
 * BLOCKS:   DSC_C
 * REGADDR:  0xd055
 * DEVAD:    1
 * DESC:     trnsum control register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TRNSUM_GAIN      bit-vector representing the gain to be applied: [0] 1, [1] 2, [2] 4, [3] 8
 *     TRNSUM_SEL_EMUX  0 selects phase slicer and 1 selects lms slicer
 *     TRNSUM_TAP_RANGE_SEL Taps -32 to 4 are broken into groups of 8 and                        this selects the range
 *     TRNSUM_COR_SEL   00: normal; 01: all 1s instead of emux; 10:                        count number of emux!= data; 11: all 1s instead of d[n-delay]
 *     TRNSUM_QPHASE_MULT_EN Enables cdr phase error to weigh the                        correlator output
 *     TRNSUM_RANDOM_TAPSEL_DISABLE Disables randomizing logic for tap                        selection. Enables sequential selection.
 *     TRNSUM_EYE_CLOSURE_EN When enabled this ands another term to the                        condition. d[n] != emux[n]
 *     TRNSUM_EN        Training sum enable
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTLr (0x0001d055 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTLr_SIZE 4

/*
 * This structure should be used to declare and program DSC_TRNSUM_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTLr_s {
	uint32_t v[1];
	uint32_t dsc_trnsum_ctl[1];
	uint32_t _dsc_trnsum_ctl;
} BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTLr_CLR(r) (r).dsc_trnsum_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTLr_SET(r,d) (r).dsc_trnsum_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTLr_GET(r) (r).dsc_trnsum_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTLr_TRNSUM_ENf_GET(r) ((((r).dsc_trnsum_ctl[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTLr_TRNSUM_ENf_SET(r,f) (r).dsc_trnsum_ctl[0]=(((r).dsc_trnsum_ctl[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTLr_TRNSUM_EYE_CLOSURE_ENf_GET(r) ((((r).dsc_trnsum_ctl[0]) >> 14) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTLr_TRNSUM_EYE_CLOSURE_ENf_SET(r,f) (r).dsc_trnsum_ctl[0]=(((r).dsc_trnsum_ctl[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTLr_TRNSUM_RANDOM_TAPSEL_DISABLEf_GET(r) ((((r).dsc_trnsum_ctl[0]) >> 13) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTLr_TRNSUM_RANDOM_TAPSEL_DISABLEf_SET(r,f) (r).dsc_trnsum_ctl[0]=(((r).dsc_trnsum_ctl[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTLr_TRNSUM_QPHASE_MULT_ENf_GET(r) ((((r).dsc_trnsum_ctl[0]) >> 12) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTLr_TRNSUM_QPHASE_MULT_ENf_SET(r,f) (r).dsc_trnsum_ctl[0]=(((r).dsc_trnsum_ctl[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTLr_TRNSUM_COR_SELf_GET(r) ((((r).dsc_trnsum_ctl[0]) >> 8) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTLr_TRNSUM_COR_SELf_SET(r,f) (r).dsc_trnsum_ctl[0]=(((r).dsc_trnsum_ctl[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTLr_TRNSUM_TAP_RANGE_SELf_GET(r) ((((r).dsc_trnsum_ctl[0]) >> 4) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTLr_TRNSUM_TAP_RANGE_SELf_SET(r,f) (r).dsc_trnsum_ctl[0]=(((r).dsc_trnsum_ctl[0] & ~((uint32_t)0x7 << 4)) | ((((uint32_t)f) & 0x7) << 4)) | (7 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTLr_TRNSUM_SEL_EMUXf_GET(r) ((((r).dsc_trnsum_ctl[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTLr_TRNSUM_SEL_EMUXf_SET(r,f) (r).dsc_trnsum_ctl[0]=(((r).dsc_trnsum_ctl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTLr_TRNSUM_GAINf_GET(r) (((r).dsc_trnsum_ctl[0]) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTLr_TRNSUM_GAINf_SET(r,f) (r).dsc_trnsum_ctl[0]=(((r).dsc_trnsum_ctl[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access DSC_TRNSUM_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_TRNSUM_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTLr,(_r._dsc_trnsum_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_TRNSUM_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTLr,(_r._dsc_trnsum_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_TRNSUM_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTLr,(_r._dsc_trnsum_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_TRNSUM_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_TRNSUM_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_TRNSUM_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_trnsum_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_TRNSUM_CTLr BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTLr
#define DSC_TRNSUM_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTLr_t DSC_TRNSUM_CTLr_t;
#define DSC_TRNSUM_CTLr_CLR BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTLr_CLR
#define DSC_TRNSUM_CTLr_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTLr_SET
#define DSC_TRNSUM_CTLr_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTLr_GET
#define DSC_TRNSUM_CTLr_TRNSUM_ENf_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTLr_TRNSUM_ENf_GET
#define DSC_TRNSUM_CTLr_TRNSUM_ENf_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTLr_TRNSUM_ENf_SET
#define DSC_TRNSUM_CTLr_TRNSUM_EYE_CLOSURE_ENf_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTLr_TRNSUM_EYE_CLOSURE_ENf_GET
#define DSC_TRNSUM_CTLr_TRNSUM_EYE_CLOSURE_ENf_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTLr_TRNSUM_EYE_CLOSURE_ENf_SET
#define DSC_TRNSUM_CTLr_TRNSUM_RANDOM_TAPSEL_DISABLEf_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTLr_TRNSUM_RANDOM_TAPSEL_DISABLEf_GET
#define DSC_TRNSUM_CTLr_TRNSUM_RANDOM_TAPSEL_DISABLEf_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTLr_TRNSUM_RANDOM_TAPSEL_DISABLEf_SET
#define DSC_TRNSUM_CTLr_TRNSUM_QPHASE_MULT_ENf_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTLr_TRNSUM_QPHASE_MULT_ENf_GET
#define DSC_TRNSUM_CTLr_TRNSUM_QPHASE_MULT_ENf_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTLr_TRNSUM_QPHASE_MULT_ENf_SET
#define DSC_TRNSUM_CTLr_TRNSUM_COR_SELf_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTLr_TRNSUM_COR_SELf_GET
#define DSC_TRNSUM_CTLr_TRNSUM_COR_SELf_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTLr_TRNSUM_COR_SELf_SET
#define DSC_TRNSUM_CTLr_TRNSUM_TAP_RANGE_SELf_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTLr_TRNSUM_TAP_RANGE_SELf_GET
#define DSC_TRNSUM_CTLr_TRNSUM_TAP_RANGE_SELf_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTLr_TRNSUM_TAP_RANGE_SELf_SET
#define DSC_TRNSUM_CTLr_TRNSUM_SEL_EMUXf_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTLr_TRNSUM_SEL_EMUXf_GET
#define DSC_TRNSUM_CTLr_TRNSUM_SEL_EMUXf_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTLr_TRNSUM_SEL_EMUXf_SET
#define DSC_TRNSUM_CTLr_TRNSUM_GAINf_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTLr_TRNSUM_GAINf_GET
#define DSC_TRNSUM_CTLr_TRNSUM_GAINf_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTLr_TRNSUM_GAINf_SET
#define READ_DSC_TRNSUM_CTLr BCMI_TSCF_GEN3_XGXS_READ_DSC_TRNSUM_CTLr
#define WRITE_DSC_TRNSUM_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_TRNSUM_CTLr
#define MODIFY_DSC_TRNSUM_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_TRNSUM_CTLr
#define READLN_DSC_TRNSUM_CTLr BCMI_TSCF_GEN3_XGXS_READLN_DSC_TRNSUM_CTLr
#define WRITELN_DSC_TRNSUM_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_TRNSUM_CTLr
#define WRITEALL_DSC_TRNSUM_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_TRNSUM_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_TRNSUM_PAT_CTL1
 * BLOCKS:   DSC_C
 * REGADDR:  0xd056
 * DEVAD:    1
 * DESC:     trnsum pattern control 1 register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TRNSUM_PATTERN   pattern to be compared
 *     TRNSUM_PATTERN_FULL_CHECK_OFF enables pattern matching
 *     TRNSUM_EDGE_PATTERN_EN enables pattern matching on edges {-6,-5,-4,-3,-2,-1,data,0,1,2} where a number (eg: -4) represents an edge between d[-4] and d[-3]
 *     TRNSUM_INV_PATTERN_EN enables inverted pattern matching
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL1r (0x0001d056 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL1r_SIZE 4

/*
 * This structure should be used to declare and program DSC_TRNSUM_PAT_CTL1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL1r_s {
	uint32_t v[1];
	uint32_t dsc_trnsum_pat_ctl1[1];
	uint32_t _dsc_trnsum_pat_ctl1;
} BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL1r_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL1r_CLR(r) (r).dsc_trnsum_pat_ctl1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL1r_SET(r,d) (r).dsc_trnsum_pat_ctl1[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL1r_GET(r) (r).dsc_trnsum_pat_ctl1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL1r_TRNSUM_INV_PATTERN_ENf_GET(r) ((((r).dsc_trnsum_pat_ctl1[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL1r_TRNSUM_INV_PATTERN_ENf_SET(r,f) (r).dsc_trnsum_pat_ctl1[0]=(((r).dsc_trnsum_pat_ctl1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL1r_TRNSUM_EDGE_PATTERN_ENf_GET(r) ((((r).dsc_trnsum_pat_ctl1[0]) >> 14) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL1r_TRNSUM_EDGE_PATTERN_ENf_SET(r,f) (r).dsc_trnsum_pat_ctl1[0]=(((r).dsc_trnsum_pat_ctl1[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL1r_TRNSUM_PATTERN_FULL_CHECK_OFFf_GET(r) ((((r).dsc_trnsum_pat_ctl1[0]) >> 12) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL1r_TRNSUM_PATTERN_FULL_CHECK_OFFf_SET(r,f) (r).dsc_trnsum_pat_ctl1[0]=(((r).dsc_trnsum_pat_ctl1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL1r_TRNSUM_PATTERNf_GET(r) (((r).dsc_trnsum_pat_ctl1[0]) & 0x3ff)
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL1r_TRNSUM_PATTERNf_SET(r,f) (r).dsc_trnsum_pat_ctl1[0]=(((r).dsc_trnsum_pat_ctl1[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff)) | (0x3ff << 16)

/*
 * These macros can be used to access DSC_TRNSUM_PAT_CTL1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_TRNSUM_PAT_CTL1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL1r,(_r._dsc_trnsum_pat_ctl1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_TRNSUM_PAT_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL1r,(_r._dsc_trnsum_pat_ctl1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_TRNSUM_PAT_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL1r,(_r._dsc_trnsum_pat_ctl1))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_TRNSUM_PAT_CTL1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_pat_ctl1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_TRNSUM_PAT_CTL1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_pat_ctl1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_TRNSUM_PAT_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_trnsum_pat_ctl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_TRNSUM_PAT_CTL1r BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL1r
#define DSC_TRNSUM_PAT_CTL1r_SIZE BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL1r_t DSC_TRNSUM_PAT_CTL1r_t;
#define DSC_TRNSUM_PAT_CTL1r_CLR BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL1r_CLR
#define DSC_TRNSUM_PAT_CTL1r_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL1r_SET
#define DSC_TRNSUM_PAT_CTL1r_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL1r_GET
#define DSC_TRNSUM_PAT_CTL1r_TRNSUM_INV_PATTERN_ENf_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL1r_TRNSUM_INV_PATTERN_ENf_GET
#define DSC_TRNSUM_PAT_CTL1r_TRNSUM_INV_PATTERN_ENf_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL1r_TRNSUM_INV_PATTERN_ENf_SET
#define DSC_TRNSUM_PAT_CTL1r_TRNSUM_EDGE_PATTERN_ENf_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL1r_TRNSUM_EDGE_PATTERN_ENf_GET
#define DSC_TRNSUM_PAT_CTL1r_TRNSUM_EDGE_PATTERN_ENf_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL1r_TRNSUM_EDGE_PATTERN_ENf_SET
#define DSC_TRNSUM_PAT_CTL1r_TRNSUM_PATTERN_FULL_CHECK_OFFf_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL1r_TRNSUM_PATTERN_FULL_CHECK_OFFf_GET
#define DSC_TRNSUM_PAT_CTL1r_TRNSUM_PATTERN_FULL_CHECK_OFFf_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL1r_TRNSUM_PATTERN_FULL_CHECK_OFFf_SET
#define DSC_TRNSUM_PAT_CTL1r_TRNSUM_PATTERNf_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL1r_TRNSUM_PATTERNf_GET
#define DSC_TRNSUM_PAT_CTL1r_TRNSUM_PATTERNf_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL1r_TRNSUM_PATTERNf_SET
#define READ_DSC_TRNSUM_PAT_CTL1r BCMI_TSCF_GEN3_XGXS_READ_DSC_TRNSUM_PAT_CTL1r
#define WRITE_DSC_TRNSUM_PAT_CTL1r BCMI_TSCF_GEN3_XGXS_WRITE_DSC_TRNSUM_PAT_CTL1r
#define MODIFY_DSC_TRNSUM_PAT_CTL1r BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_TRNSUM_PAT_CTL1r
#define READLN_DSC_TRNSUM_PAT_CTL1r BCMI_TSCF_GEN3_XGXS_READLN_DSC_TRNSUM_PAT_CTL1r
#define WRITELN_DSC_TRNSUM_PAT_CTL1r BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_TRNSUM_PAT_CTL1r
#define WRITEALL_DSC_TRNSUM_PAT_CTL1r BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_TRNSUM_PAT_CTL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_TRNSUM_PAT_CTL2
 * BLOCKS:   DSC_C
 * REGADDR:  0xd057
 * DEVAD:    1
 * DESC:     trnsum pattern control 2 register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TRNSUM_PATTERN_BIT_EN pattern mask
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL2r (0x0001d057 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_TRNSUM_PAT_CTL2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL2r_s {
	uint32_t v[1];
	uint32_t dsc_trnsum_pat_ctl2[1];
	uint32_t _dsc_trnsum_pat_ctl2;
} BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL2r_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL2r_CLR(r) (r).dsc_trnsum_pat_ctl2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL2r_SET(r,d) (r).dsc_trnsum_pat_ctl2[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL2r_GET(r) (r).dsc_trnsum_pat_ctl2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL2r_TRNSUM_PATTERN_BIT_ENf_GET(r) (((r).dsc_trnsum_pat_ctl2[0]) & 0x3ff)
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL2r_TRNSUM_PATTERN_BIT_ENf_SET(r,f) (r).dsc_trnsum_pat_ctl2[0]=(((r).dsc_trnsum_pat_ctl2[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff)) | (0x3ff << 16)

/*
 * These macros can be used to access DSC_TRNSUM_PAT_CTL2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_TRNSUM_PAT_CTL2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL2r,(_r._dsc_trnsum_pat_ctl2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_TRNSUM_PAT_CTL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL2r,(_r._dsc_trnsum_pat_ctl2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_TRNSUM_PAT_CTL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL2r,(_r._dsc_trnsum_pat_ctl2))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_TRNSUM_PAT_CTL2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_pat_ctl2))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_TRNSUM_PAT_CTL2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_pat_ctl2))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_TRNSUM_PAT_CTL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_trnsum_pat_ctl2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_TRNSUM_PAT_CTL2r BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL2r
#define DSC_TRNSUM_PAT_CTL2r_SIZE BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL2r_t DSC_TRNSUM_PAT_CTL2r_t;
#define DSC_TRNSUM_PAT_CTL2r_CLR BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL2r_CLR
#define DSC_TRNSUM_PAT_CTL2r_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL2r_SET
#define DSC_TRNSUM_PAT_CTL2r_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL2r_GET
#define DSC_TRNSUM_PAT_CTL2r_TRNSUM_PATTERN_BIT_ENf_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL2r_TRNSUM_PATTERN_BIT_ENf_GET
#define DSC_TRNSUM_PAT_CTL2r_TRNSUM_PATTERN_BIT_ENf_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL2r_TRNSUM_PATTERN_BIT_ENf_SET
#define READ_DSC_TRNSUM_PAT_CTL2r BCMI_TSCF_GEN3_XGXS_READ_DSC_TRNSUM_PAT_CTL2r
#define WRITE_DSC_TRNSUM_PAT_CTL2r BCMI_TSCF_GEN3_XGXS_WRITE_DSC_TRNSUM_PAT_CTL2r
#define MODIFY_DSC_TRNSUM_PAT_CTL2r BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_TRNSUM_PAT_CTL2r
#define READLN_DSC_TRNSUM_PAT_CTL2r BCMI_TSCF_GEN3_XGXS_READLN_DSC_TRNSUM_PAT_CTL2r
#define WRITELN_DSC_TRNSUM_PAT_CTL2r BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_TRNSUM_PAT_CTL2r
#define WRITEALL_DSC_TRNSUM_PAT_CTL2r BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_TRNSUM_PAT_CTL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_PAT_CTL2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_TRNSUM_TAP_CTL
 * BLOCKS:   DSC_C
 * REGADDR:  0xd058
 * DEVAD:    1
 * DESC:     trnsum tap control register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TRNSUM_TAP_EN    Training taps enabled (either randomize over                        them or not)
 *     TRNSUM_TAP_SIGN  Sign of the 8 taps in the group
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TAP_CTLr (0x0001d058 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TAP_CTLr_SIZE 4

/*
 * This structure should be used to declare and program DSC_TRNSUM_TAP_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TAP_CTLr_s {
	uint32_t v[1];
	uint32_t dsc_trnsum_tap_ctl[1];
	uint32_t _dsc_trnsum_tap_ctl;
} BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TAP_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TAP_CTLr_CLR(r) (r).dsc_trnsum_tap_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TAP_CTLr_SET(r,d) (r).dsc_trnsum_tap_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TAP_CTLr_GET(r) (r).dsc_trnsum_tap_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TAP_CTLr_TRNSUM_TAP_SIGNf_GET(r) ((((r).dsc_trnsum_tap_ctl[0]) >> 8) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TAP_CTLr_TRNSUM_TAP_SIGNf_SET(r,f) (r).dsc_trnsum_tap_ctl[0]=(((r).dsc_trnsum_tap_ctl[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TAP_CTLr_TRNSUM_TAP_ENf_GET(r) (((r).dsc_trnsum_tap_ctl[0]) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TAP_CTLr_TRNSUM_TAP_ENf_SET(r,f) (r).dsc_trnsum_tap_ctl[0]=(((r).dsc_trnsum_tap_ctl[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access DSC_TRNSUM_TAP_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_TRNSUM_TAP_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TAP_CTLr,(_r._dsc_trnsum_tap_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_TRNSUM_TAP_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TAP_CTLr,(_r._dsc_trnsum_tap_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_TRNSUM_TAP_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TAP_CTLr,(_r._dsc_trnsum_tap_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_TRNSUM_TAP_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TAP_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_tap_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_TRNSUM_TAP_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TAP_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_tap_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_TRNSUM_TAP_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TAP_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_trnsum_tap_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_TRNSUM_TAP_CTLr BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TAP_CTLr
#define DSC_TRNSUM_TAP_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TAP_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TAP_CTLr_t DSC_TRNSUM_TAP_CTLr_t;
#define DSC_TRNSUM_TAP_CTLr_CLR BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TAP_CTLr_CLR
#define DSC_TRNSUM_TAP_CTLr_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TAP_CTLr_SET
#define DSC_TRNSUM_TAP_CTLr_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TAP_CTLr_GET
#define DSC_TRNSUM_TAP_CTLr_TRNSUM_TAP_SIGNf_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TAP_CTLr_TRNSUM_TAP_SIGNf_GET
#define DSC_TRNSUM_TAP_CTLr_TRNSUM_TAP_SIGNf_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TAP_CTLr_TRNSUM_TAP_SIGNf_SET
#define DSC_TRNSUM_TAP_CTLr_TRNSUM_TAP_ENf_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TAP_CTLr_TRNSUM_TAP_ENf_GET
#define DSC_TRNSUM_TAP_CTLr_TRNSUM_TAP_ENf_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TAP_CTLr_TRNSUM_TAP_ENf_SET
#define READ_DSC_TRNSUM_TAP_CTLr BCMI_TSCF_GEN3_XGXS_READ_DSC_TRNSUM_TAP_CTLr
#define WRITE_DSC_TRNSUM_TAP_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_TRNSUM_TAP_CTLr
#define MODIFY_DSC_TRNSUM_TAP_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_TRNSUM_TAP_CTLr
#define READLN_DSC_TRNSUM_TAP_CTLr BCMI_TSCF_GEN3_XGXS_READLN_DSC_TRNSUM_TAP_CTLr
#define WRITELN_DSC_TRNSUM_TAP_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_TRNSUM_TAP_CTLr
#define WRITEALL_DSC_TRNSUM_TAP_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_TRNSUM_TAP_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TAP_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_TRNSUM_TDT_CTL
 * BLOCKS:   DSC_C
 * REGADDR:  0xd059
 * DEVAD:    1
 * DESC:     trnsum tdt control register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TDT_BIT_SEL      tdt bit select: range is 0 to 39
 *     TDT_PRBS_MODE    enables selection of every 511th bit or 255th bitIf tdt_cycle_sel[0] = 0, then it wraps @ 255, else @ 511
 *     TDT_TRNSUM_EN    enables the tdt featureAt no point should this be disabled in the middle of collecting data over multiple locations.The counters which figure out which cycle to select while this bit is 1.
 *     TDT_CYCLE_SEL    the cycle counter wraps at this number
 *     TDT_CYCLE_BIN    valid range: from 0 to tdt_cycle_sel; this cycle the tdt is enabled on bit indicated by tdt_bit_sel
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TDT_CTLr (0x0001d059 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TDT_CTLr_SIZE 4

/*
 * This structure should be used to declare and program DSC_TRNSUM_TDT_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TDT_CTLr_s {
	uint32_t v[1];
	uint32_t dsc_trnsum_tdt_ctl[1];
	uint32_t _dsc_trnsum_tdt_ctl;
} BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TDT_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TDT_CTLr_CLR(r) (r).dsc_trnsum_tdt_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TDT_CTLr_SET(r,d) (r).dsc_trnsum_tdt_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TDT_CTLr_GET(r) (r).dsc_trnsum_tdt_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TDT_CTLr_TDT_CYCLE_BINf_GET(r) ((((r).dsc_trnsum_tdt_ctl[0]) >> 12) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TDT_CTLr_TDT_CYCLE_BINf_SET(r,f) (r).dsc_trnsum_tdt_ctl[0]=(((r).dsc_trnsum_tdt_ctl[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TDT_CTLr_TDT_CYCLE_SELf_GET(r) ((((r).dsc_trnsum_tdt_ctl[0]) >> 8) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TDT_CTLr_TDT_CYCLE_SELf_SET(r,f) (r).dsc_trnsum_tdt_ctl[0]=(((r).dsc_trnsum_tdt_ctl[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TDT_CTLr_TDT_TRNSUM_ENf_GET(r) ((((r).dsc_trnsum_tdt_ctl[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TDT_CTLr_TDT_TRNSUM_ENf_SET(r,f) (r).dsc_trnsum_tdt_ctl[0]=(((r).dsc_trnsum_tdt_ctl[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TDT_CTLr_TDT_PRBS_MODEf_GET(r) ((((r).dsc_trnsum_tdt_ctl[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TDT_CTLr_TDT_PRBS_MODEf_SET(r,f) (r).dsc_trnsum_tdt_ctl[0]=(((r).dsc_trnsum_tdt_ctl[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TDT_CTLr_TDT_BIT_SELf_GET(r) (((r).dsc_trnsum_tdt_ctl[0]) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TDT_CTLr_TDT_BIT_SELf_SET(r,f) (r).dsc_trnsum_tdt_ctl[0]=(((r).dsc_trnsum_tdt_ctl[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access DSC_TRNSUM_TDT_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_TRNSUM_TDT_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TDT_CTLr,(_r._dsc_trnsum_tdt_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_TRNSUM_TDT_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TDT_CTLr,(_r._dsc_trnsum_tdt_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_TRNSUM_TDT_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TDT_CTLr,(_r._dsc_trnsum_tdt_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_TRNSUM_TDT_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TDT_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_tdt_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_TRNSUM_TDT_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TDT_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_tdt_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_TRNSUM_TDT_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TDT_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_trnsum_tdt_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_TRNSUM_TDT_CTLr BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TDT_CTLr
#define DSC_TRNSUM_TDT_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TDT_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TDT_CTLr_t DSC_TRNSUM_TDT_CTLr_t;
#define DSC_TRNSUM_TDT_CTLr_CLR BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TDT_CTLr_CLR
#define DSC_TRNSUM_TDT_CTLr_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TDT_CTLr_SET
#define DSC_TRNSUM_TDT_CTLr_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TDT_CTLr_GET
#define DSC_TRNSUM_TDT_CTLr_TDT_CYCLE_BINf_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TDT_CTLr_TDT_CYCLE_BINf_GET
#define DSC_TRNSUM_TDT_CTLr_TDT_CYCLE_BINf_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TDT_CTLr_TDT_CYCLE_BINf_SET
#define DSC_TRNSUM_TDT_CTLr_TDT_CYCLE_SELf_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TDT_CTLr_TDT_CYCLE_SELf_GET
#define DSC_TRNSUM_TDT_CTLr_TDT_CYCLE_SELf_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TDT_CTLr_TDT_CYCLE_SELf_SET
#define DSC_TRNSUM_TDT_CTLr_TDT_TRNSUM_ENf_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TDT_CTLr_TDT_TRNSUM_ENf_GET
#define DSC_TRNSUM_TDT_CTLr_TDT_TRNSUM_ENf_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TDT_CTLr_TDT_TRNSUM_ENf_SET
#define DSC_TRNSUM_TDT_CTLr_TDT_PRBS_MODEf_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TDT_CTLr_TDT_PRBS_MODEf_GET
#define DSC_TRNSUM_TDT_CTLr_TDT_PRBS_MODEf_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TDT_CTLr_TDT_PRBS_MODEf_SET
#define DSC_TRNSUM_TDT_CTLr_TDT_BIT_SELf_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TDT_CTLr_TDT_BIT_SELf_GET
#define DSC_TRNSUM_TDT_CTLr_TDT_BIT_SELf_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TDT_CTLr_TDT_BIT_SELf_SET
#define READ_DSC_TRNSUM_TDT_CTLr BCMI_TSCF_GEN3_XGXS_READ_DSC_TRNSUM_TDT_CTLr
#define WRITE_DSC_TRNSUM_TDT_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_TRNSUM_TDT_CTLr
#define MODIFY_DSC_TRNSUM_TDT_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_TRNSUM_TDT_CTLr
#define READLN_DSC_TRNSUM_TDT_CTLr BCMI_TSCF_GEN3_XGXS_READLN_DSC_TRNSUM_TDT_CTLr
#define WRITELN_DSC_TRNSUM_TDT_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_TRNSUM_TDT_CTLr
#define WRITEALL_DSC_TRNSUM_TDT_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_TRNSUM_TDT_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_TDT_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_TRNSUM_MISC
 * BLOCKS:   DSC_C
 * REGADDR:  0xd05a
 * DEVAD:    1
 * DESC:     trnsum misc register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TDT_PRBS_SLIP    tdt bit select: range is 0 to 39self clearing
 *     CDR_1G_TRNSUM_EN Enables accumulation of 1G CDR phase step.This logic is only supported in the repeater application - controlled by a strap bit @ kernel
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_MISCr (0x0001d05a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_MISCr_SIZE 4

/*
 * This structure should be used to declare and program DSC_TRNSUM_MISC.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_MISCr_s {
	uint32_t v[1];
	uint32_t dsc_trnsum_misc[1];
	uint32_t _dsc_trnsum_misc;
} BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_MISCr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_MISCr_CLR(r) (r).dsc_trnsum_misc[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_MISCr_SET(r,d) (r).dsc_trnsum_misc[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_MISCr_GET(r) (r).dsc_trnsum_misc[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_MISCr_CDR_1G_TRNSUM_ENf_GET(r) ((((r).dsc_trnsum_misc[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_MISCr_CDR_1G_TRNSUM_ENf_SET(r,f) (r).dsc_trnsum_misc[0]=(((r).dsc_trnsum_misc[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_MISCr_TDT_PRBS_SLIPf_GET(r) (((r).dsc_trnsum_misc[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_MISCr_TDT_PRBS_SLIPf_SET(r,f) (r).dsc_trnsum_misc[0]=(((r).dsc_trnsum_misc[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access DSC_TRNSUM_MISC.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_TRNSUM_MISCr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_MISCr,(_r._dsc_trnsum_misc))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_TRNSUM_MISCr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_MISCr,(_r._dsc_trnsum_misc)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_TRNSUM_MISCr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_MISCr,(_r._dsc_trnsum_misc))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_TRNSUM_MISCr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_MISCr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_misc))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_TRNSUM_MISCr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_MISCr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_misc))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_TRNSUM_MISCr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_MISCr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_trnsum_misc))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_TRNSUM_MISCr BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_MISCr
#define DSC_TRNSUM_MISCr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_MISCr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_MISCr_t DSC_TRNSUM_MISCr_t;
#define DSC_TRNSUM_MISCr_CLR BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_MISCr_CLR
#define DSC_TRNSUM_MISCr_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_MISCr_SET
#define DSC_TRNSUM_MISCr_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_MISCr_GET
#define DSC_TRNSUM_MISCr_CDR_1G_TRNSUM_ENf_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_MISCr_CDR_1G_TRNSUM_ENf_GET
#define DSC_TRNSUM_MISCr_CDR_1G_TRNSUM_ENf_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_MISCr_CDR_1G_TRNSUM_ENf_SET
#define DSC_TRNSUM_MISCr_TDT_PRBS_SLIPf_GET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_MISCr_TDT_PRBS_SLIPf_GET
#define DSC_TRNSUM_MISCr_TDT_PRBS_SLIPf_SET BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_MISCr_TDT_PRBS_SLIPf_SET
#define READ_DSC_TRNSUM_MISCr BCMI_TSCF_GEN3_XGXS_READ_DSC_TRNSUM_MISCr
#define WRITE_DSC_TRNSUM_MISCr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_TRNSUM_MISCr
#define MODIFY_DSC_TRNSUM_MISCr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_TRNSUM_MISCr
#define READLN_DSC_TRNSUM_MISCr BCMI_TSCF_GEN3_XGXS_READLN_DSC_TRNSUM_MISCr
#define WRITELN_DSC_TRNSUM_MISCr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_TRNSUM_MISCr
#define WRITEALL_DSC_TRNSUM_MISCr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_TRNSUM_MISCr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_TRNSUM_MISCr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_VGA_CTL1
 * BLOCKS:   DSC_C
 * REGADDR:  0xd05c
 * DEVAD:    1
 * DESC:     vga block control register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     VGA_TIMER_T2     VGA timed write. Wait for  (1,2, ...8) cycles
 *     UC_TRNSUM_EN     1'b1 will move the state from UC_TUNE to MEASURE. This is a self-clear register bit.
 *     DC_OFFS_WRITE_EN self clearing dc offset write strobe
 *     VGA_DEC          self clearing vga dec
 *     VGA_INC          self clearing vga inc
 *     RX_VGA_CTRL_VAL  override val of vga
 *     VGA_WRITE        strobe to write VGA values
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_VGA_CTL1r (0x0001d05c | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_VGA_CTL1r_SIZE 4

/*
 * This structure should be used to declare and program DSC_VGA_CTL1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_VGA_CTL1r_s {
	uint32_t v[1];
	uint32_t dsc_vga_ctl1[1];
	uint32_t _dsc_vga_ctl1;
} BCMI_TSCF_GEN3_XGXS_DSC_VGA_CTL1r_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_VGA_CTL1r_CLR(r) (r).dsc_vga_ctl1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_VGA_CTL1r_SET(r,d) (r).dsc_vga_ctl1[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_VGA_CTL1r_GET(r) (r).dsc_vga_ctl1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_VGA_CTL1r_VGA_WRITEf_GET(r) ((((r).dsc_vga_ctl1[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_VGA_CTL1r_VGA_WRITEf_SET(r,f) (r).dsc_vga_ctl1[0]=(((r).dsc_vga_ctl1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_DSC_VGA_CTL1r_RX_VGA_CTRL_VALf_GET(r) ((((r).dsc_vga_ctl1[0]) >> 8) & 0x7f)
#define BCMI_TSCF_GEN3_XGXS_DSC_VGA_CTL1r_RX_VGA_CTRL_VALf_SET(r,f) (r).dsc_vga_ctl1[0]=(((r).dsc_vga_ctl1[0] & ~((uint32_t)0x7f << 8)) | ((((uint32_t)f) & 0x7f) << 8)) | (127 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_DSC_VGA_CTL1r_VGA_INCf_GET(r) ((((r).dsc_vga_ctl1[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_VGA_CTL1r_VGA_INCf_SET(r,f) (r).dsc_vga_ctl1[0]=(((r).dsc_vga_ctl1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_DSC_VGA_CTL1r_VGA_DECf_GET(r) ((((r).dsc_vga_ctl1[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_VGA_CTL1r_VGA_DECf_SET(r,f) (r).dsc_vga_ctl1[0]=(((r).dsc_vga_ctl1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_DSC_VGA_CTL1r_DC_OFFS_WRITE_ENf_GET(r) ((((r).dsc_vga_ctl1[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_VGA_CTL1r_DC_OFFS_WRITE_ENf_SET(r,f) (r).dsc_vga_ctl1[0]=(((r).dsc_vga_ctl1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_DSC_VGA_CTL1r_UC_TRNSUM_ENf_GET(r) ((((r).dsc_vga_ctl1[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_VGA_CTL1r_UC_TRNSUM_ENf_SET(r,f) (r).dsc_vga_ctl1[0]=(((r).dsc_vga_ctl1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_DSC_VGA_CTL1r_VGA_TIMER_T2f_GET(r) (((r).dsc_vga_ctl1[0]) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_DSC_VGA_CTL1r_VGA_TIMER_T2f_SET(r,f) (r).dsc_vga_ctl1[0]=(((r).dsc_vga_ctl1[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access DSC_VGA_CTL1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_VGA_CTL1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_VGA_CTL1r,(_r._dsc_vga_ctl1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_VGA_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_VGA_CTL1r,(_r._dsc_vga_ctl1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_VGA_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_VGA_CTL1r,(_r._dsc_vga_ctl1))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_VGA_CTL1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_VGA_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_vga_ctl1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_VGA_CTL1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_VGA_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_vga_ctl1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_VGA_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_VGA_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_vga_ctl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_VGA_CTL1r BCMI_TSCF_GEN3_XGXS_DSC_VGA_CTL1r
#define DSC_VGA_CTL1r_SIZE BCMI_TSCF_GEN3_XGXS_DSC_VGA_CTL1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_VGA_CTL1r_t DSC_VGA_CTL1r_t;
#define DSC_VGA_CTL1r_CLR BCMI_TSCF_GEN3_XGXS_DSC_VGA_CTL1r_CLR
#define DSC_VGA_CTL1r_SET BCMI_TSCF_GEN3_XGXS_DSC_VGA_CTL1r_SET
#define DSC_VGA_CTL1r_GET BCMI_TSCF_GEN3_XGXS_DSC_VGA_CTL1r_GET
#define DSC_VGA_CTL1r_VGA_WRITEf_GET BCMI_TSCF_GEN3_XGXS_DSC_VGA_CTL1r_VGA_WRITEf_GET
#define DSC_VGA_CTL1r_VGA_WRITEf_SET BCMI_TSCF_GEN3_XGXS_DSC_VGA_CTL1r_VGA_WRITEf_SET
#define DSC_VGA_CTL1r_RX_VGA_CTRL_VALf_GET BCMI_TSCF_GEN3_XGXS_DSC_VGA_CTL1r_RX_VGA_CTRL_VALf_GET
#define DSC_VGA_CTL1r_RX_VGA_CTRL_VALf_SET BCMI_TSCF_GEN3_XGXS_DSC_VGA_CTL1r_RX_VGA_CTRL_VALf_SET
#define DSC_VGA_CTL1r_VGA_INCf_GET BCMI_TSCF_GEN3_XGXS_DSC_VGA_CTL1r_VGA_INCf_GET
#define DSC_VGA_CTL1r_VGA_INCf_SET BCMI_TSCF_GEN3_XGXS_DSC_VGA_CTL1r_VGA_INCf_SET
#define DSC_VGA_CTL1r_VGA_DECf_GET BCMI_TSCF_GEN3_XGXS_DSC_VGA_CTL1r_VGA_DECf_GET
#define DSC_VGA_CTL1r_VGA_DECf_SET BCMI_TSCF_GEN3_XGXS_DSC_VGA_CTL1r_VGA_DECf_SET
#define DSC_VGA_CTL1r_DC_OFFS_WRITE_ENf_GET BCMI_TSCF_GEN3_XGXS_DSC_VGA_CTL1r_DC_OFFS_WRITE_ENf_GET
#define DSC_VGA_CTL1r_DC_OFFS_WRITE_ENf_SET BCMI_TSCF_GEN3_XGXS_DSC_VGA_CTL1r_DC_OFFS_WRITE_ENf_SET
#define DSC_VGA_CTL1r_UC_TRNSUM_ENf_GET BCMI_TSCF_GEN3_XGXS_DSC_VGA_CTL1r_UC_TRNSUM_ENf_GET
#define DSC_VGA_CTL1r_UC_TRNSUM_ENf_SET BCMI_TSCF_GEN3_XGXS_DSC_VGA_CTL1r_UC_TRNSUM_ENf_SET
#define DSC_VGA_CTL1r_VGA_TIMER_T2f_GET BCMI_TSCF_GEN3_XGXS_DSC_VGA_CTL1r_VGA_TIMER_T2f_GET
#define DSC_VGA_CTL1r_VGA_TIMER_T2f_SET BCMI_TSCF_GEN3_XGXS_DSC_VGA_CTL1r_VGA_TIMER_T2f_SET
#define READ_DSC_VGA_CTL1r BCMI_TSCF_GEN3_XGXS_READ_DSC_VGA_CTL1r
#define WRITE_DSC_VGA_CTL1r BCMI_TSCF_GEN3_XGXS_WRITE_DSC_VGA_CTL1r
#define MODIFY_DSC_VGA_CTL1r BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_VGA_CTL1r
#define READLN_DSC_VGA_CTL1r BCMI_TSCF_GEN3_XGXS_READLN_DSC_VGA_CTL1r
#define WRITELN_DSC_VGA_CTL1r BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_VGA_CTL1r
#define WRITEALL_DSC_VGA_CTL1r BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_VGA_CTL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_VGA_CTL1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_DATA_SLCR_THR_CTL
 * BLOCKS:   DSC_C
 * REGADDR:  0xd05d
 * DEVAD:    1
 * DESC:     data slicer threshold control register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     THRESH_TIMER_T1  1,2,3,4 - indicates how many cycles to wait for before applying an inc or dec
 *     THRESH_STEP_SIZE 1,2,3 - auto increment step size for threshold
 *     DATA_THRESH_SEL_VAL Override mode value
 *     DATA_THRESH_WRITE self clearing data thresh write (for override mode)
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_DATA_SLCR_THR_CTLr (0x0001d05d | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_DATA_SLCR_THR_CTLr_SIZE 4

/*
 * This structure should be used to declare and program DSC_DATA_SLCR_THR_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_DATA_SLCR_THR_CTLr_s {
	uint32_t v[1];
	uint32_t dsc_data_slcr_thr_ctl[1];
	uint32_t _dsc_data_slcr_thr_ctl;
} BCMI_TSCF_GEN3_XGXS_DSC_DATA_SLCR_THR_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_DATA_SLCR_THR_CTLr_CLR(r) (r).dsc_data_slcr_thr_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_DATA_SLCR_THR_CTLr_SET(r,d) (r).dsc_data_slcr_thr_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_DATA_SLCR_THR_CTLr_GET(r) (r).dsc_data_slcr_thr_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_DATA_SLCR_THR_CTLr_DATA_THRESH_WRITEf_GET(r) ((((r).dsc_data_slcr_thr_ctl[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_DATA_SLCR_THR_CTLr_DATA_THRESH_WRITEf_SET(r,f) (r).dsc_data_slcr_thr_ctl[0]=(((r).dsc_data_slcr_thr_ctl[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_DSC_DATA_SLCR_THR_CTLr_DATA_THRESH_SEL_VALf_GET(r) ((((r).dsc_data_slcr_thr_ctl[0]) >> 8) & 0x7f)
#define BCMI_TSCF_GEN3_XGXS_DSC_DATA_SLCR_THR_CTLr_DATA_THRESH_SEL_VALf_SET(r,f) (r).dsc_data_slcr_thr_ctl[0]=(((r).dsc_data_slcr_thr_ctl[0] & ~((uint32_t)0x7f << 8)) | ((((uint32_t)f) & 0x7f) << 8)) | (127 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_DSC_DATA_SLCR_THR_CTLr_THRESH_STEP_SIZEf_GET(r) ((((r).dsc_data_slcr_thr_ctl[0]) >> 4) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_DSC_DATA_SLCR_THR_CTLr_THRESH_STEP_SIZEf_SET(r,f) (r).dsc_data_slcr_thr_ctl[0]=(((r).dsc_data_slcr_thr_ctl[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_DSC_DATA_SLCR_THR_CTLr_THRESH_TIMER_T1f_GET(r) (((r).dsc_data_slcr_thr_ctl[0]) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_DSC_DATA_SLCR_THR_CTLr_THRESH_TIMER_T1f_SET(r,f) (r).dsc_data_slcr_thr_ctl[0]=(((r).dsc_data_slcr_thr_ctl[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access DSC_DATA_SLCR_THR_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_DATA_SLCR_THR_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_DATA_SLCR_THR_CTLr,(_r._dsc_data_slcr_thr_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_DATA_SLCR_THR_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_DATA_SLCR_THR_CTLr,(_r._dsc_data_slcr_thr_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_DATA_SLCR_THR_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_DATA_SLCR_THR_CTLr,(_r._dsc_data_slcr_thr_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_DATA_SLCR_THR_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_DATA_SLCR_THR_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_data_slcr_thr_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_DATA_SLCR_THR_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_DATA_SLCR_THR_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_data_slcr_thr_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_DATA_SLCR_THR_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_DATA_SLCR_THR_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_data_slcr_thr_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_DATA_SLCR_THR_CTLr BCMI_TSCF_GEN3_XGXS_DSC_DATA_SLCR_THR_CTLr
#define DSC_DATA_SLCR_THR_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_DATA_SLCR_THR_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_DATA_SLCR_THR_CTLr_t DSC_DATA_SLCR_THR_CTLr_t;
#define DSC_DATA_SLCR_THR_CTLr_CLR BCMI_TSCF_GEN3_XGXS_DSC_DATA_SLCR_THR_CTLr_CLR
#define DSC_DATA_SLCR_THR_CTLr_SET BCMI_TSCF_GEN3_XGXS_DSC_DATA_SLCR_THR_CTLr_SET
#define DSC_DATA_SLCR_THR_CTLr_GET BCMI_TSCF_GEN3_XGXS_DSC_DATA_SLCR_THR_CTLr_GET
#define DSC_DATA_SLCR_THR_CTLr_DATA_THRESH_WRITEf_GET BCMI_TSCF_GEN3_XGXS_DSC_DATA_SLCR_THR_CTLr_DATA_THRESH_WRITEf_GET
#define DSC_DATA_SLCR_THR_CTLr_DATA_THRESH_WRITEf_SET BCMI_TSCF_GEN3_XGXS_DSC_DATA_SLCR_THR_CTLr_DATA_THRESH_WRITEf_SET
#define DSC_DATA_SLCR_THR_CTLr_DATA_THRESH_SEL_VALf_GET BCMI_TSCF_GEN3_XGXS_DSC_DATA_SLCR_THR_CTLr_DATA_THRESH_SEL_VALf_GET
#define DSC_DATA_SLCR_THR_CTLr_DATA_THRESH_SEL_VALf_SET BCMI_TSCF_GEN3_XGXS_DSC_DATA_SLCR_THR_CTLr_DATA_THRESH_SEL_VALf_SET
#define DSC_DATA_SLCR_THR_CTLr_THRESH_STEP_SIZEf_GET BCMI_TSCF_GEN3_XGXS_DSC_DATA_SLCR_THR_CTLr_THRESH_STEP_SIZEf_GET
#define DSC_DATA_SLCR_THR_CTLr_THRESH_STEP_SIZEf_SET BCMI_TSCF_GEN3_XGXS_DSC_DATA_SLCR_THR_CTLr_THRESH_STEP_SIZEf_SET
#define DSC_DATA_SLCR_THR_CTLr_THRESH_TIMER_T1f_GET BCMI_TSCF_GEN3_XGXS_DSC_DATA_SLCR_THR_CTLr_THRESH_TIMER_T1f_GET
#define DSC_DATA_SLCR_THR_CTLr_THRESH_TIMER_T1f_SET BCMI_TSCF_GEN3_XGXS_DSC_DATA_SLCR_THR_CTLr_THRESH_TIMER_T1f_SET
#define READ_DSC_DATA_SLCR_THR_CTLr BCMI_TSCF_GEN3_XGXS_READ_DSC_DATA_SLCR_THR_CTLr
#define WRITE_DSC_DATA_SLCR_THR_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_DATA_SLCR_THR_CTLr
#define MODIFY_DSC_DATA_SLCR_THR_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_DATA_SLCR_THR_CTLr
#define READLN_DSC_DATA_SLCR_THR_CTLr BCMI_TSCF_GEN3_XGXS_READLN_DSC_DATA_SLCR_THR_CTLr
#define WRITELN_DSC_DATA_SLCR_THR_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_DATA_SLCR_THR_CTLr
#define WRITEALL_DSC_DATA_SLCR_THR_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_DATA_SLCR_THR_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_DATA_SLCR_THR_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_DC_OFFS_CTL
 * BLOCKS:   DSC_C
 * REGADDR:  0xd05e
 * DEVAD:    1
 * DESC:     dc offset control register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     DC_OFFS_EN       Enables DC Offset tap for adaptation (still needs trnsum to be un-frozen)
 *     DC_OFFS_HYS_EN   Needs to be 1 for hysteresis to be on
 *     DC_OFFS_HYS_MAG  0: 11th bit <<7; 1: 11th bit <<5
 *     DC_OFFS_GRADIENT_INVERT Inverts the sense of the update (inc,dec swap)
 *     DC_OFFS_GAIN     multiplies the +-40 error by 2^{0,1,2,3}
 *     DC_OFFS_ACC_CLR  Clears the internal state except for the final tap
 *     DC_OFFS_WRITE_VAL write value for the dc offset in override modeThe logic walks to this value @ the start of automatic adaptation
 *     DC_OFFS_WRITE_FRC_EN self clearing dc offset force write strobeThis is simply an override to everything. This write gets sign gray converted and written to the dc_offset register
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_CTLr (0x0001d05e | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_CTLr_SIZE 4

/*
 * This structure should be used to declare and program DSC_DC_OFFS_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_CTLr_s {
	uint32_t v[1];
	uint32_t dsc_dc_offs_ctl[1];
	uint32_t _dsc_dc_offs_ctl;
} BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_CTLr_CLR(r) (r).dsc_dc_offs_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_CTLr_SET(r,d) (r).dsc_dc_offs_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_CTLr_GET(r) (r).dsc_dc_offs_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_CTLr_DC_OFFS_WRITE_FRC_ENf_GET(r) ((((r).dsc_dc_offs_ctl[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_CTLr_DC_OFFS_WRITE_FRC_ENf_SET(r,f) (r).dsc_dc_offs_ctl[0]=(((r).dsc_dc_offs_ctl[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_CTLr_DC_OFFS_WRITE_VALf_GET(r) ((((r).dsc_dc_offs_ctl[0]) >> 8) & 0x7f)
#define BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_CTLr_DC_OFFS_WRITE_VALf_SET(r,f) (r).dsc_dc_offs_ctl[0]=(((r).dsc_dc_offs_ctl[0] & ~((uint32_t)0x7f << 8)) | ((((uint32_t)f) & 0x7f) << 8)) | (127 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_CTLr_DC_OFFS_ACC_CLRf_GET(r) ((((r).dsc_dc_offs_ctl[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_CTLr_DC_OFFS_ACC_CLRf_SET(r,f) (r).dsc_dc_offs_ctl[0]=(((r).dsc_dc_offs_ctl[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_CTLr_DC_OFFS_GAINf_GET(r) ((((r).dsc_dc_offs_ctl[0]) >> 5) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_CTLr_DC_OFFS_GAINf_SET(r,f) (r).dsc_dc_offs_ctl[0]=(((r).dsc_dc_offs_ctl[0] & ~((uint32_t)0x3 << 5)) | ((((uint32_t)f) & 0x3) << 5)) | (3 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_CTLr_DC_OFFS_GRADIENT_INVERTf_GET(r) ((((r).dsc_dc_offs_ctl[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_CTLr_DC_OFFS_GRADIENT_INVERTf_SET(r,f) (r).dsc_dc_offs_ctl[0]=(((r).dsc_dc_offs_ctl[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_CTLr_DC_OFFS_HYS_MAGf_GET(r) ((((r).dsc_dc_offs_ctl[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_CTLr_DC_OFFS_HYS_MAGf_SET(r,f) (r).dsc_dc_offs_ctl[0]=(((r).dsc_dc_offs_ctl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_CTLr_DC_OFFS_HYS_ENf_GET(r) ((((r).dsc_dc_offs_ctl[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_CTLr_DC_OFFS_HYS_ENf_SET(r,f) (r).dsc_dc_offs_ctl[0]=(((r).dsc_dc_offs_ctl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_CTLr_DC_OFFS_ENf_GET(r) (((r).dsc_dc_offs_ctl[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_CTLr_DC_OFFS_ENf_SET(r,f) (r).dsc_dc_offs_ctl[0]=(((r).dsc_dc_offs_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access DSC_DC_OFFS_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_DC_OFFS_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_CTLr,(_r._dsc_dc_offs_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_DC_OFFS_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_CTLr,(_r._dsc_dc_offs_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_DC_OFFS_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_CTLr,(_r._dsc_dc_offs_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_DC_OFFS_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_dc_offs_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_DC_OFFS_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_dc_offs_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_DC_OFFS_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_dc_offs_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_DC_OFFS_CTLr BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_CTLr
#define DSC_DC_OFFS_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_CTLr_t DSC_DC_OFFS_CTLr_t;
#define DSC_DC_OFFS_CTLr_CLR BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_CTLr_CLR
#define DSC_DC_OFFS_CTLr_SET BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_CTLr_SET
#define DSC_DC_OFFS_CTLr_GET BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_CTLr_GET
#define DSC_DC_OFFS_CTLr_DC_OFFS_WRITE_FRC_ENf_GET BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_CTLr_DC_OFFS_WRITE_FRC_ENf_GET
#define DSC_DC_OFFS_CTLr_DC_OFFS_WRITE_FRC_ENf_SET BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_CTLr_DC_OFFS_WRITE_FRC_ENf_SET
#define DSC_DC_OFFS_CTLr_DC_OFFS_WRITE_VALf_GET BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_CTLr_DC_OFFS_WRITE_VALf_GET
#define DSC_DC_OFFS_CTLr_DC_OFFS_WRITE_VALf_SET BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_CTLr_DC_OFFS_WRITE_VALf_SET
#define DSC_DC_OFFS_CTLr_DC_OFFS_ACC_CLRf_GET BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_CTLr_DC_OFFS_ACC_CLRf_GET
#define DSC_DC_OFFS_CTLr_DC_OFFS_ACC_CLRf_SET BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_CTLr_DC_OFFS_ACC_CLRf_SET
#define DSC_DC_OFFS_CTLr_DC_OFFS_GAINf_GET BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_CTLr_DC_OFFS_GAINf_GET
#define DSC_DC_OFFS_CTLr_DC_OFFS_GAINf_SET BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_CTLr_DC_OFFS_GAINf_SET
#define DSC_DC_OFFS_CTLr_DC_OFFS_GRADIENT_INVERTf_GET BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_CTLr_DC_OFFS_GRADIENT_INVERTf_GET
#define DSC_DC_OFFS_CTLr_DC_OFFS_GRADIENT_INVERTf_SET BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_CTLr_DC_OFFS_GRADIENT_INVERTf_SET
#define DSC_DC_OFFS_CTLr_DC_OFFS_HYS_MAGf_GET BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_CTLr_DC_OFFS_HYS_MAGf_GET
#define DSC_DC_OFFS_CTLr_DC_OFFS_HYS_MAGf_SET BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_CTLr_DC_OFFS_HYS_MAGf_SET
#define DSC_DC_OFFS_CTLr_DC_OFFS_HYS_ENf_GET BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_CTLr_DC_OFFS_HYS_ENf_GET
#define DSC_DC_OFFS_CTLr_DC_OFFS_HYS_ENf_SET BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_CTLr_DC_OFFS_HYS_ENf_SET
#define DSC_DC_OFFS_CTLr_DC_OFFS_ENf_GET BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_CTLr_DC_OFFS_ENf_GET
#define DSC_DC_OFFS_CTLr_DC_OFFS_ENf_SET BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_CTLr_DC_OFFS_ENf_SET
#define READ_DSC_DC_OFFS_CTLr BCMI_TSCF_GEN3_XGXS_READ_DSC_DC_OFFS_CTLr
#define WRITE_DSC_DC_OFFS_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_DC_OFFS_CTLr
#define MODIFY_DSC_DC_OFFS_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_DC_OFFS_CTLr
#define READLN_DSC_DC_OFFS_CTLr BCMI_TSCF_GEN3_XGXS_READLN_DSC_DC_OFFS_CTLr
#define WRITELN_DSC_DC_OFFS_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_DC_OFFS_CTLr
#define WRITEALL_DSC_DC_OFFS_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_DC_OFFS_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_DC_OFFS_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_SM_CTL0
 * BLOCKS:   DSC_D
 * REGADDR:  0xd060
 * DEVAD:    1
 * DESC:     DSC STATE MACHINE CONTROL 0
 * RESETVAL: 0x8 (8)
 * ACCESS:   R/W
 * FIELDS:
 *     EEE_MODE_EN      1'b1 will enable the EEE mode.
 *     EEE_QUIET_RX_AFE_PWRDWN_VAL 1'b1 will enable the RX AFE powerdown in EEE_QUIET mode.
 *     IGNORE_RX_MODE   If set to 1'b1 then pmd_rx_mode input will be ignored in DSC SM.
 *     CL72_TIMER_EN    If enabled to 1'b1 then LFSR is loaded with 0x01CD else it is loaded with 0x1C1E for all non-EEE and non-MEASURE states.
 *     UC_TUNE_EN       uc_tune_en is used to move in and out of UC_TUNE state. Look for DSC SM state diagram for more details.
 *     HW_TUNE_EN       Should be 1'b1 along with uc_tune_en==1'b1 to move from UC_TUNE to HW_TUNE state.  This is a self-clear register bit.
 *     EEE_MEASURE_EN   1'b1 Enables the measurement during EEE_MEASURE.
 *     UC_ACK_DSC_EEE_DONE 1'b1 will enable the EEE_DONE to DONE transition. This is a self-clear bit.
 *     UC_ACK_DSC_RESTART 1'b1 will enable the RESTART to CONFIG transition. This is a self-clear bit.
 *     UC_ACK_DSC_CONFIG 1'b1 will enable the CONFIG to WAIT_FOR_SIG transition. This is a self-clear bit.
 *     SET_MEAS_INCOMPLETE 1'b1 will force meas_incomplete to be 1'b1 to start a new measurement in EEE mode. This is a self-clear bit.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r (0x0001d060 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program DSC_SM_CTL0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_s {
	uint32_t v[1];
	uint32_t dsc_sm_ctl0[1];
	uint32_t _dsc_sm_ctl0;
} BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_CLR(r) (r).dsc_sm_ctl0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_SET(r,d) (r).dsc_sm_ctl0[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_GET(r) (r).dsc_sm_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_SET_MEAS_INCOMPLETEf_GET(r) ((((r).dsc_sm_ctl0[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_SET_MEAS_INCOMPLETEf_SET(r,f) (r).dsc_sm_ctl0[0]=(((r).dsc_sm_ctl0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_UC_ACK_DSC_CONFIGf_GET(r) ((((r).dsc_sm_ctl0[0]) >> 14) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_UC_ACK_DSC_CONFIGf_SET(r,f) (r).dsc_sm_ctl0[0]=(((r).dsc_sm_ctl0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_UC_ACK_DSC_RESTARTf_GET(r) ((((r).dsc_sm_ctl0[0]) >> 13) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_UC_ACK_DSC_RESTARTf_SET(r,f) (r).dsc_sm_ctl0[0]=(((r).dsc_sm_ctl0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_UC_ACK_DSC_EEE_DONEf_GET(r) ((((r).dsc_sm_ctl0[0]) >> 11) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_UC_ACK_DSC_EEE_DONEf_SET(r,f) (r).dsc_sm_ctl0[0]=(((r).dsc_sm_ctl0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_EEE_MEASURE_ENf_GET(r) ((((r).dsc_sm_ctl0[0]) >> 8) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_EEE_MEASURE_ENf_SET(r,f) (r).dsc_sm_ctl0[0]=(((r).dsc_sm_ctl0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_HW_TUNE_ENf_GET(r) ((((r).dsc_sm_ctl0[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_HW_TUNE_ENf_SET(r,f) (r).dsc_sm_ctl0[0]=(((r).dsc_sm_ctl0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_UC_TUNE_ENf_GET(r) ((((r).dsc_sm_ctl0[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_UC_TUNE_ENf_SET(r,f) (r).dsc_sm_ctl0[0]=(((r).dsc_sm_ctl0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_CL72_TIMER_ENf_GET(r) ((((r).dsc_sm_ctl0[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_CL72_TIMER_ENf_SET(r,f) (r).dsc_sm_ctl0[0]=(((r).dsc_sm_ctl0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_IGNORE_RX_MODEf_GET(r) ((((r).dsc_sm_ctl0[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_IGNORE_RX_MODEf_SET(r,f) (r).dsc_sm_ctl0[0]=(((r).dsc_sm_ctl0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_EEE_QUIET_RX_AFE_PWRDWN_VALf_GET(r) ((((r).dsc_sm_ctl0[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_EEE_QUIET_RX_AFE_PWRDWN_VALf_SET(r,f) (r).dsc_sm_ctl0[0]=(((r).dsc_sm_ctl0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_EEE_MODE_ENf_GET(r) ((((r).dsc_sm_ctl0[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_EEE_MODE_ENf_SET(r,f) (r).dsc_sm_ctl0[0]=(((r).dsc_sm_ctl0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))

/*
 * These macros can be used to access DSC_SM_CTL0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_SM_CTL0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r,(_r._dsc_sm_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_SM_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r,(_r._dsc_sm_ctl0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_SM_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r,(_r._dsc_sm_ctl0))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_SM_CTL0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_SM_CTL0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_SM_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_sm_ctl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_SM_CTL0r BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r
#define DSC_SM_CTL0r_SIZE BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_t DSC_SM_CTL0r_t;
#define DSC_SM_CTL0r_CLR BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_CLR
#define DSC_SM_CTL0r_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_SET
#define DSC_SM_CTL0r_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_GET
#define DSC_SM_CTL0r_SET_MEAS_INCOMPLETEf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_SET_MEAS_INCOMPLETEf_GET
#define DSC_SM_CTL0r_SET_MEAS_INCOMPLETEf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_SET_MEAS_INCOMPLETEf_SET
#define DSC_SM_CTL0r_UC_ACK_DSC_CONFIGf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_UC_ACK_DSC_CONFIGf_GET
#define DSC_SM_CTL0r_UC_ACK_DSC_CONFIGf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_UC_ACK_DSC_CONFIGf_SET
#define DSC_SM_CTL0r_UC_ACK_DSC_RESTARTf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_UC_ACK_DSC_RESTARTf_GET
#define DSC_SM_CTL0r_UC_ACK_DSC_RESTARTf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_UC_ACK_DSC_RESTARTf_SET
#define DSC_SM_CTL0r_UC_ACK_DSC_EEE_DONEf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_UC_ACK_DSC_EEE_DONEf_GET
#define DSC_SM_CTL0r_UC_ACK_DSC_EEE_DONEf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_UC_ACK_DSC_EEE_DONEf_SET
#define DSC_SM_CTL0r_EEE_MEASURE_ENf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_EEE_MEASURE_ENf_GET
#define DSC_SM_CTL0r_EEE_MEASURE_ENf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_EEE_MEASURE_ENf_SET
#define DSC_SM_CTL0r_HW_TUNE_ENf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_HW_TUNE_ENf_GET
#define DSC_SM_CTL0r_HW_TUNE_ENf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_HW_TUNE_ENf_SET
#define DSC_SM_CTL0r_UC_TUNE_ENf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_UC_TUNE_ENf_GET
#define DSC_SM_CTL0r_UC_TUNE_ENf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_UC_TUNE_ENf_SET
#define DSC_SM_CTL0r_CL72_TIMER_ENf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_CL72_TIMER_ENf_GET
#define DSC_SM_CTL0r_CL72_TIMER_ENf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_CL72_TIMER_ENf_SET
#define DSC_SM_CTL0r_IGNORE_RX_MODEf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_IGNORE_RX_MODEf_GET
#define DSC_SM_CTL0r_IGNORE_RX_MODEf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_IGNORE_RX_MODEf_SET
#define DSC_SM_CTL0r_EEE_QUIET_RX_AFE_PWRDWN_VALf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_EEE_QUIET_RX_AFE_PWRDWN_VALf_GET
#define DSC_SM_CTL0r_EEE_QUIET_RX_AFE_PWRDWN_VALf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_EEE_QUIET_RX_AFE_PWRDWN_VALf_SET
#define DSC_SM_CTL0r_EEE_MODE_ENf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_EEE_MODE_ENf_GET
#define DSC_SM_CTL0r_EEE_MODE_ENf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r_EEE_MODE_ENf_SET
#define READ_DSC_SM_CTL0r BCMI_TSCF_GEN3_XGXS_READ_DSC_SM_CTL0r
#define WRITE_DSC_SM_CTL0r BCMI_TSCF_GEN3_XGXS_WRITE_DSC_SM_CTL0r
#define MODIFY_DSC_SM_CTL0r BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_SM_CTL0r
#define READLN_DSC_SM_CTL0r BCMI_TSCF_GEN3_XGXS_READLN_DSC_SM_CTL0r
#define WRITELN_DSC_SM_CTL0r BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_SM_CTL0r
#define WRITEALL_DSC_SM_CTL0r BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_SM_CTL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_SM_CTL1
 * BLOCKS:   DSC_D
 * REGADDR:  0xd061
 * DEVAD:    1
 * DESC:     DSC STATE MACHINE CONTROL 1
 * RESETVAL: 0x200 (512)
 * ACCESS:   R/W
 * FIELDS:
 *     RX_DSC_LOCK_FRC  rx_dsc_lock force.
 *     RX_DSC_LOCK_FRC_VAL rx_dsc_lock force value.
 *     DSC_CLR_FRC      DSC clear force.
 *     DSC_CLR_FRC_VAL  DSC clear force value.
 *     TRNSUM_FRZ_FRC   Training Sum freeze force.
 *     TRNSUM_FRZ_FRC_VAL raining Sum freeze force value.
 *     TIMER_DONE_FRC   Can be forced to 1'b1 which will disable the H/W timer in HW_TUNE and MEASURE states.
 *     TIMER_DONE_FRC_VAL If timer_done_frc is set to 1'b1 and DSC SM is in HW_TUNE or MEASURE states then setting this bit to 1 will move the state to next state.
 *     FREQ_UPD_EN_FRC  Frequency update force.
 *     FREQ_UPD_EN_FRC_VAL Frequency update force value.
 *     CDR_FRZ_FRC      CDR Freeze force.
 *     CDR_FRZ_FRC_VAL  CDR Freeze force value.
 *     TRNSUM_CLR_FRC   Training Sum freeze force.
 *     TRNSUM_CLR_FRC_VAL raining Sum freeze force value.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r (0x0001d061 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_SIZE 4

/*
 * This structure should be used to declare and program DSC_SM_CTL1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_s {
	uint32_t v[1];
	uint32_t dsc_sm_ctl1[1];
	uint32_t _dsc_sm_ctl1;
} BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_CLR(r) (r).dsc_sm_ctl1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_SET(r,d) (r).dsc_sm_ctl1[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_GET(r) (r).dsc_sm_ctl1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_TRNSUM_CLR_FRC_VALf_GET(r) ((((r).dsc_sm_ctl1[0]) >> 13) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_TRNSUM_CLR_FRC_VALf_SET(r,f) (r).dsc_sm_ctl1[0]=(((r).dsc_sm_ctl1[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_TRNSUM_CLR_FRCf_GET(r) ((((r).dsc_sm_ctl1[0]) >> 12) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_TRNSUM_CLR_FRCf_SET(r,f) (r).dsc_sm_ctl1[0]=(((r).dsc_sm_ctl1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_CDR_FRZ_FRC_VALf_GET(r) ((((r).dsc_sm_ctl1[0]) >> 11) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_CDR_FRZ_FRC_VALf_SET(r,f) (r).dsc_sm_ctl1[0]=(((r).dsc_sm_ctl1[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_CDR_FRZ_FRCf_GET(r) ((((r).dsc_sm_ctl1[0]) >> 10) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_CDR_FRZ_FRCf_SET(r,f) (r).dsc_sm_ctl1[0]=(((r).dsc_sm_ctl1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_FREQ_UPD_EN_FRC_VALf_GET(r) ((((r).dsc_sm_ctl1[0]) >> 9) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_FREQ_UPD_EN_FRC_VALf_SET(r,f) (r).dsc_sm_ctl1[0]=(((r).dsc_sm_ctl1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_FREQ_UPD_EN_FRCf_GET(r) ((((r).dsc_sm_ctl1[0]) >> 8) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_FREQ_UPD_EN_FRCf_SET(r,f) (r).dsc_sm_ctl1[0]=(((r).dsc_sm_ctl1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_TIMER_DONE_FRC_VALf_GET(r) ((((r).dsc_sm_ctl1[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_TIMER_DONE_FRC_VALf_SET(r,f) (r).dsc_sm_ctl1[0]=(((r).dsc_sm_ctl1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_TIMER_DONE_FRCf_GET(r) ((((r).dsc_sm_ctl1[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_TIMER_DONE_FRCf_SET(r,f) (r).dsc_sm_ctl1[0]=(((r).dsc_sm_ctl1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_TRNSUM_FRZ_FRC_VALf_GET(r) ((((r).dsc_sm_ctl1[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_TRNSUM_FRZ_FRC_VALf_SET(r,f) (r).dsc_sm_ctl1[0]=(((r).dsc_sm_ctl1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_TRNSUM_FRZ_FRCf_GET(r) ((((r).dsc_sm_ctl1[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_TRNSUM_FRZ_FRCf_SET(r,f) (r).dsc_sm_ctl1[0]=(((r).dsc_sm_ctl1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_DSC_CLR_FRC_VALf_GET(r) ((((r).dsc_sm_ctl1[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_DSC_CLR_FRC_VALf_SET(r,f) (r).dsc_sm_ctl1[0]=(((r).dsc_sm_ctl1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_DSC_CLR_FRCf_GET(r) ((((r).dsc_sm_ctl1[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_DSC_CLR_FRCf_SET(r,f) (r).dsc_sm_ctl1[0]=(((r).dsc_sm_ctl1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_RX_DSC_LOCK_FRC_VALf_GET(r) ((((r).dsc_sm_ctl1[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_RX_DSC_LOCK_FRC_VALf_SET(r,f) (r).dsc_sm_ctl1[0]=(((r).dsc_sm_ctl1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_RX_DSC_LOCK_FRCf_GET(r) (((r).dsc_sm_ctl1[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_RX_DSC_LOCK_FRCf_SET(r,f) (r).dsc_sm_ctl1[0]=(((r).dsc_sm_ctl1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access DSC_SM_CTL1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_SM_CTL1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r,(_r._dsc_sm_ctl1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_SM_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r,(_r._dsc_sm_ctl1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_SM_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r,(_r._dsc_sm_ctl1))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_SM_CTL1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_ctl1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_SM_CTL1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_ctl1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_SM_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_sm_ctl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_SM_CTL1r BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r
#define DSC_SM_CTL1r_SIZE BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_t DSC_SM_CTL1r_t;
#define DSC_SM_CTL1r_CLR BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_CLR
#define DSC_SM_CTL1r_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_SET
#define DSC_SM_CTL1r_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_GET
#define DSC_SM_CTL1r_TRNSUM_CLR_FRC_VALf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_TRNSUM_CLR_FRC_VALf_GET
#define DSC_SM_CTL1r_TRNSUM_CLR_FRC_VALf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_TRNSUM_CLR_FRC_VALf_SET
#define DSC_SM_CTL1r_TRNSUM_CLR_FRCf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_TRNSUM_CLR_FRCf_GET
#define DSC_SM_CTL1r_TRNSUM_CLR_FRCf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_TRNSUM_CLR_FRCf_SET
#define DSC_SM_CTL1r_CDR_FRZ_FRC_VALf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_CDR_FRZ_FRC_VALf_GET
#define DSC_SM_CTL1r_CDR_FRZ_FRC_VALf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_CDR_FRZ_FRC_VALf_SET
#define DSC_SM_CTL1r_CDR_FRZ_FRCf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_CDR_FRZ_FRCf_GET
#define DSC_SM_CTL1r_CDR_FRZ_FRCf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_CDR_FRZ_FRCf_SET
#define DSC_SM_CTL1r_FREQ_UPD_EN_FRC_VALf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_FREQ_UPD_EN_FRC_VALf_GET
#define DSC_SM_CTL1r_FREQ_UPD_EN_FRC_VALf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_FREQ_UPD_EN_FRC_VALf_SET
#define DSC_SM_CTL1r_FREQ_UPD_EN_FRCf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_FREQ_UPD_EN_FRCf_GET
#define DSC_SM_CTL1r_FREQ_UPD_EN_FRCf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_FREQ_UPD_EN_FRCf_SET
#define DSC_SM_CTL1r_TIMER_DONE_FRC_VALf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_TIMER_DONE_FRC_VALf_GET
#define DSC_SM_CTL1r_TIMER_DONE_FRC_VALf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_TIMER_DONE_FRC_VALf_SET
#define DSC_SM_CTL1r_TIMER_DONE_FRCf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_TIMER_DONE_FRCf_GET
#define DSC_SM_CTL1r_TIMER_DONE_FRCf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_TIMER_DONE_FRCf_SET
#define DSC_SM_CTL1r_TRNSUM_FRZ_FRC_VALf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_TRNSUM_FRZ_FRC_VALf_GET
#define DSC_SM_CTL1r_TRNSUM_FRZ_FRC_VALf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_TRNSUM_FRZ_FRC_VALf_SET
#define DSC_SM_CTL1r_TRNSUM_FRZ_FRCf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_TRNSUM_FRZ_FRCf_GET
#define DSC_SM_CTL1r_TRNSUM_FRZ_FRCf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_TRNSUM_FRZ_FRCf_SET
#define DSC_SM_CTL1r_DSC_CLR_FRC_VALf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_DSC_CLR_FRC_VALf_GET
#define DSC_SM_CTL1r_DSC_CLR_FRC_VALf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_DSC_CLR_FRC_VALf_SET
#define DSC_SM_CTL1r_DSC_CLR_FRCf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_DSC_CLR_FRCf_GET
#define DSC_SM_CTL1r_DSC_CLR_FRCf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_DSC_CLR_FRCf_SET
#define DSC_SM_CTL1r_RX_DSC_LOCK_FRC_VALf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_RX_DSC_LOCK_FRC_VALf_GET
#define DSC_SM_CTL1r_RX_DSC_LOCK_FRC_VALf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_RX_DSC_LOCK_FRC_VALf_SET
#define DSC_SM_CTL1r_RX_DSC_LOCK_FRCf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_RX_DSC_LOCK_FRCf_GET
#define DSC_SM_CTL1r_RX_DSC_LOCK_FRCf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r_RX_DSC_LOCK_FRCf_SET
#define READ_DSC_SM_CTL1r BCMI_TSCF_GEN3_XGXS_READ_DSC_SM_CTL1r
#define WRITE_DSC_SM_CTL1r BCMI_TSCF_GEN3_XGXS_WRITE_DSC_SM_CTL1r
#define MODIFY_DSC_SM_CTL1r BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_SM_CTL1r
#define READLN_DSC_SM_CTL1r BCMI_TSCF_GEN3_XGXS_READLN_DSC_SM_CTL1r
#define WRITELN_DSC_SM_CTL1r BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_SM_CTL1r
#define WRITEALL_DSC_SM_CTL1r BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_SM_CTL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_SM_CTL2
 * BLOCKS:   DSC_D
 * REGADDR:  0xd062
 * DEVAD:    1
 * DESC:     DSC STATE MACHINE CONTROL 2
 * RESETVAL: 0x87 (135)
 * ACCESS:   R/W
 * FIELDS:
 *     EEE_LFSR_CNT     LFSR timer start value for all EEE timers except EEE_MEASURE.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL2r (0x0001d062 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_SM_CTL2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL2r_s {
	uint32_t v[1];
	uint32_t dsc_sm_ctl2[1];
	uint32_t _dsc_sm_ctl2;
} BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL2r_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL2r_CLR(r) (r).dsc_sm_ctl2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL2r_SET(r,d) (r).dsc_sm_ctl2[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL2r_GET(r) (r).dsc_sm_ctl2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL2r_EEE_LFSR_CNTf_GET(r) (((r).dsc_sm_ctl2[0]) & 0x1fff)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL2r_EEE_LFSR_CNTf_SET(r,f) (r).dsc_sm_ctl2[0]=(((r).dsc_sm_ctl2[0] & ~((uint32_t)0x1fff)) | (((uint32_t)f) & 0x1fff)) | (0x1fff << 16)

/*
 * These macros can be used to access DSC_SM_CTL2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_SM_CTL2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL2r,(_r._dsc_sm_ctl2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_SM_CTL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL2r,(_r._dsc_sm_ctl2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_SM_CTL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL2r,(_r._dsc_sm_ctl2))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_SM_CTL2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_ctl2))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_SM_CTL2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_ctl2))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_SM_CTL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_sm_ctl2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_SM_CTL2r BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL2r
#define DSC_SM_CTL2r_SIZE BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL2r_t DSC_SM_CTL2r_t;
#define DSC_SM_CTL2r_CLR BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL2r_CLR
#define DSC_SM_CTL2r_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL2r_SET
#define DSC_SM_CTL2r_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL2r_GET
#define DSC_SM_CTL2r_EEE_LFSR_CNTf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL2r_EEE_LFSR_CNTf_GET
#define DSC_SM_CTL2r_EEE_LFSR_CNTf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL2r_EEE_LFSR_CNTf_SET
#define READ_DSC_SM_CTL2r BCMI_TSCF_GEN3_XGXS_READ_DSC_SM_CTL2r
#define WRITE_DSC_SM_CTL2r BCMI_TSCF_GEN3_XGXS_WRITE_DSC_SM_CTL2r
#define MODIFY_DSC_SM_CTL2r BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_SM_CTL2r
#define READLN_DSC_SM_CTL2r BCMI_TSCF_GEN3_XGXS_READLN_DSC_SM_CTL2r
#define WRITELN_DSC_SM_CTL2r BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_SM_CTL2r
#define WRITEALL_DSC_SM_CTL2r BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_SM_CTL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_SM_CTL3
 * BLOCKS:   DSC_D
 * REGADDR:  0xd063
 * DEVAD:    1
 * DESC:     DSC STATE MACHINE CONTROL 3
 * RESETVAL: 0x1c1e (7198)
 * ACCESS:   R/W
 * FIELDS:
 *     MEASURE_LFSR_CNT LFSR timer start value for MEASURE and EEE_MEASURE state timers.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL3r (0x0001d063 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL3r_SIZE 4

/*
 * This structure should be used to declare and program DSC_SM_CTL3.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL3r_s {
	uint32_t v[1];
	uint32_t dsc_sm_ctl3[1];
	uint32_t _dsc_sm_ctl3;
} BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL3r_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL3r_CLR(r) (r).dsc_sm_ctl3[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL3r_SET(r,d) (r).dsc_sm_ctl3[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL3r_GET(r) (r).dsc_sm_ctl3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL3r_MEASURE_LFSR_CNTf_GET(r) (((r).dsc_sm_ctl3[0]) & 0x1fff)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL3r_MEASURE_LFSR_CNTf_SET(r,f) (r).dsc_sm_ctl3[0]=(((r).dsc_sm_ctl3[0] & ~((uint32_t)0x1fff)) | (((uint32_t)f) & 0x1fff)) | (0x1fff << 16)

/*
 * These macros can be used to access DSC_SM_CTL3.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_SM_CTL3r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL3r,(_r._dsc_sm_ctl3))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_SM_CTL3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL3r,(_r._dsc_sm_ctl3)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_SM_CTL3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL3r,(_r._dsc_sm_ctl3))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_SM_CTL3r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_ctl3))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_SM_CTL3r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_ctl3))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_SM_CTL3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL3r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_sm_ctl3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_SM_CTL3r BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL3r
#define DSC_SM_CTL3r_SIZE BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL3r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL3r_t DSC_SM_CTL3r_t;
#define DSC_SM_CTL3r_CLR BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL3r_CLR
#define DSC_SM_CTL3r_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL3r_SET
#define DSC_SM_CTL3r_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL3r_GET
#define DSC_SM_CTL3r_MEASURE_LFSR_CNTf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL3r_MEASURE_LFSR_CNTf_GET
#define DSC_SM_CTL3r_MEASURE_LFSR_CNTf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL3r_MEASURE_LFSR_CNTf_SET
#define READ_DSC_SM_CTL3r BCMI_TSCF_GEN3_XGXS_READ_DSC_SM_CTL3r
#define WRITE_DSC_SM_CTL3r BCMI_TSCF_GEN3_XGXS_WRITE_DSC_SM_CTL3r
#define MODIFY_DSC_SM_CTL3r BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_SM_CTL3r
#define READLN_DSC_SM_CTL3r BCMI_TSCF_GEN3_XGXS_READLN_DSC_SM_CTL3r
#define WRITELN_DSC_SM_CTL3r BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_SM_CTL3r
#define WRITEALL_DSC_SM_CTL3r BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_SM_CTL3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_SM_CTL4
 * BLOCKS:   DSC_D
 * REGADDR:  0xd064
 * DEVAD:    1
 * DESC:     DSC STATE MACHINE CONTROL 4
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     ACQ_CDR_TIMEOUT  Defines timeout value for the ACQ_CDR state timer.  Valid range is 0 to 31 which is mapped to 0 to 448 LFSR wraps.
 *     CDR_SETTLE_TIMEOUT Defines timeout value for the CDR_SETTLE state timer.  Valid range is 0 to 31 which is mapped to 0 to 448 LFSR wraps.
 *     HW_TUNE_TIMEOUT  Defines timeout value for the HW_TUNE state timer.  Valid range is 0 to 31 which is mapped to 0 to 448 LFSR wraps.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL4r (0x0001d064 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL4r_SIZE 4

/*
 * This structure should be used to declare and program DSC_SM_CTL4.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL4r_s {
	uint32_t v[1];
	uint32_t dsc_sm_ctl4[1];
	uint32_t _dsc_sm_ctl4;
} BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL4r_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL4r_CLR(r) (r).dsc_sm_ctl4[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL4r_SET(r,d) (r).dsc_sm_ctl4[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL4r_GET(r) (r).dsc_sm_ctl4[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL4r_HW_TUNE_TIMEOUTf_GET(r) ((((r).dsc_sm_ctl4[0]) >> 10) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL4r_HW_TUNE_TIMEOUTf_SET(r,f) (r).dsc_sm_ctl4[0]=(((r).dsc_sm_ctl4[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10)) | (31 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL4r_CDR_SETTLE_TIMEOUTf_GET(r) ((((r).dsc_sm_ctl4[0]) >> 5) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL4r_CDR_SETTLE_TIMEOUTf_SET(r,f) (r).dsc_sm_ctl4[0]=(((r).dsc_sm_ctl4[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5)) | (31 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL4r_ACQ_CDR_TIMEOUTf_GET(r) (((r).dsc_sm_ctl4[0]) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL4r_ACQ_CDR_TIMEOUTf_SET(r,f) (r).dsc_sm_ctl4[0]=(((r).dsc_sm_ctl4[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access DSC_SM_CTL4.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_SM_CTL4r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL4r,(_r._dsc_sm_ctl4))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_SM_CTL4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL4r,(_r._dsc_sm_ctl4)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_SM_CTL4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL4r,(_r._dsc_sm_ctl4))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_SM_CTL4r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_ctl4))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_SM_CTL4r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_ctl4))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_SM_CTL4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL4r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_sm_ctl4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_SM_CTL4r BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL4r
#define DSC_SM_CTL4r_SIZE BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL4r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL4r_t DSC_SM_CTL4r_t;
#define DSC_SM_CTL4r_CLR BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL4r_CLR
#define DSC_SM_CTL4r_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL4r_SET
#define DSC_SM_CTL4r_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL4r_GET
#define DSC_SM_CTL4r_HW_TUNE_TIMEOUTf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL4r_HW_TUNE_TIMEOUTf_GET
#define DSC_SM_CTL4r_HW_TUNE_TIMEOUTf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL4r_HW_TUNE_TIMEOUTf_SET
#define DSC_SM_CTL4r_CDR_SETTLE_TIMEOUTf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL4r_CDR_SETTLE_TIMEOUTf_GET
#define DSC_SM_CTL4r_CDR_SETTLE_TIMEOUTf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL4r_CDR_SETTLE_TIMEOUTf_SET
#define DSC_SM_CTL4r_ACQ_CDR_TIMEOUTf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL4r_ACQ_CDR_TIMEOUTf_GET
#define DSC_SM_CTL4r_ACQ_CDR_TIMEOUTf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL4r_ACQ_CDR_TIMEOUTf_SET
#define READ_DSC_SM_CTL4r BCMI_TSCF_GEN3_XGXS_READ_DSC_SM_CTL4r
#define WRITE_DSC_SM_CTL4r BCMI_TSCF_GEN3_XGXS_WRITE_DSC_SM_CTL4r
#define MODIFY_DSC_SM_CTL4r BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_SM_CTL4r
#define READLN_DSC_SM_CTL4r BCMI_TSCF_GEN3_XGXS_READLN_DSC_SM_CTL4r
#define WRITELN_DSC_SM_CTL4r BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_SM_CTL4r
#define WRITEALL_DSC_SM_CTL4r BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_SM_CTL4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL4r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_SM_CTL5
 * BLOCKS:   DSC_D
 * REGADDR:  0xd065
 * DEVAD:    1
 * DESC:     DSC STATE MACHINE CONTROL 5
 * RESETVAL: 0x35ad (13741)
 * ACCESS:   R/W
 * FIELDS:
 *     MEASURE_TIMEOUT  Defines timeout value for the MEASURE state timer.  Valid range is 0 to 31 which is mapped to 0 to 448 LFSR wraps.
 *     EEE_ACQ_CDR_TIMEOUT Defines timeout value for the EEE_ACQ_CDR state timer.  Valid range is 0 to 31 which is mapped to 0 to 448 LFSR wraps.
 *     EEE_CDR_SETTLE_TIMEOUT Defines timeout value for the EEE_CDR_SETTLE state timer.  Valid range is 0 to 31 which is mapped to 0 to 448 LFSR wraps.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL5r (0x0001d065 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL5r_SIZE 4

/*
 * This structure should be used to declare and program DSC_SM_CTL5.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL5r_s {
	uint32_t v[1];
	uint32_t dsc_sm_ctl5[1];
	uint32_t _dsc_sm_ctl5;
} BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL5r_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL5r_CLR(r) (r).dsc_sm_ctl5[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL5r_SET(r,d) (r).dsc_sm_ctl5[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL5r_GET(r) (r).dsc_sm_ctl5[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL5r_EEE_CDR_SETTLE_TIMEOUTf_GET(r) ((((r).dsc_sm_ctl5[0]) >> 10) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL5r_EEE_CDR_SETTLE_TIMEOUTf_SET(r,f) (r).dsc_sm_ctl5[0]=(((r).dsc_sm_ctl5[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10)) | (31 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL5r_EEE_ACQ_CDR_TIMEOUTf_GET(r) ((((r).dsc_sm_ctl5[0]) >> 5) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL5r_EEE_ACQ_CDR_TIMEOUTf_SET(r,f) (r).dsc_sm_ctl5[0]=(((r).dsc_sm_ctl5[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5)) | (31 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL5r_MEASURE_TIMEOUTf_GET(r) (((r).dsc_sm_ctl5[0]) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL5r_MEASURE_TIMEOUTf_SET(r,f) (r).dsc_sm_ctl5[0]=(((r).dsc_sm_ctl5[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access DSC_SM_CTL5.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_SM_CTL5r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL5r,(_r._dsc_sm_ctl5))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_SM_CTL5r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL5r,(_r._dsc_sm_ctl5)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_SM_CTL5r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL5r,(_r._dsc_sm_ctl5))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_SM_CTL5r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL5r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_ctl5))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_SM_CTL5r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL5r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_ctl5))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_SM_CTL5r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL5r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_sm_ctl5))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_SM_CTL5r BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL5r
#define DSC_SM_CTL5r_SIZE BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL5r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL5r_t DSC_SM_CTL5r_t;
#define DSC_SM_CTL5r_CLR BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL5r_CLR
#define DSC_SM_CTL5r_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL5r_SET
#define DSC_SM_CTL5r_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL5r_GET
#define DSC_SM_CTL5r_EEE_CDR_SETTLE_TIMEOUTf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL5r_EEE_CDR_SETTLE_TIMEOUTf_GET
#define DSC_SM_CTL5r_EEE_CDR_SETTLE_TIMEOUTf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL5r_EEE_CDR_SETTLE_TIMEOUTf_SET
#define DSC_SM_CTL5r_EEE_ACQ_CDR_TIMEOUTf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL5r_EEE_ACQ_CDR_TIMEOUTf_GET
#define DSC_SM_CTL5r_EEE_ACQ_CDR_TIMEOUTf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL5r_EEE_ACQ_CDR_TIMEOUTf_SET
#define DSC_SM_CTL5r_MEASURE_TIMEOUTf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL5r_MEASURE_TIMEOUTf_GET
#define DSC_SM_CTL5r_MEASURE_TIMEOUTf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL5r_MEASURE_TIMEOUTf_SET
#define READ_DSC_SM_CTL5r BCMI_TSCF_GEN3_XGXS_READ_DSC_SM_CTL5r
#define WRITE_DSC_SM_CTL5r BCMI_TSCF_GEN3_XGXS_WRITE_DSC_SM_CTL5r
#define MODIFY_DSC_SM_CTL5r BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_SM_CTL5r
#define READLN_DSC_SM_CTL5r BCMI_TSCF_GEN3_XGXS_READLN_DSC_SM_CTL5r
#define WRITELN_DSC_SM_CTL5r BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_SM_CTL5r
#define WRITEALL_DSC_SM_CTL5r BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_SM_CTL5r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL5r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_SM_CTL6
 * BLOCKS:   DSC_D
 * REGADDR:  0xd066
 * DEVAD:    1
 * DESC:     DSC STATE MACHINE CONTROL 6
 * RESETVAL: 0x340d (13325)
 * ACCESS:   R/W
 * FIELDS:
 *     EEE_HW_TUNE_TIMEOUT Defines timeout value for the EEE_HW_TUNE state timer.  Valid range is 0 to 31 which is mapped to 0 to 448 LFSR wraps.
 *     EEE_ANA_PWR_TIMEOUT Defines timeout value for the EEE_ANA_PWR state timer.  Valid range is 0 to 31 which is mapped to 0 to 448 LFSR wraps.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL6r (0x0001d066 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL6r_SIZE 4

/*
 * This structure should be used to declare and program DSC_SM_CTL6.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL6r_s {
	uint32_t v[1];
	uint32_t dsc_sm_ctl6[1];
	uint32_t _dsc_sm_ctl6;
} BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL6r_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL6r_CLR(r) (r).dsc_sm_ctl6[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL6r_SET(r,d) (r).dsc_sm_ctl6[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL6r_GET(r) (r).dsc_sm_ctl6[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL6r_EEE_ANA_PWR_TIMEOUTf_GET(r) ((((r).dsc_sm_ctl6[0]) >> 10) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL6r_EEE_ANA_PWR_TIMEOUTf_SET(r,f) (r).dsc_sm_ctl6[0]=(((r).dsc_sm_ctl6[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10)) | (31 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL6r_EEE_HW_TUNE_TIMEOUTf_GET(r) (((r).dsc_sm_ctl6[0]) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL6r_EEE_HW_TUNE_TIMEOUTf_SET(r,f) (r).dsc_sm_ctl6[0]=(((r).dsc_sm_ctl6[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access DSC_SM_CTL6.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_SM_CTL6r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL6r,(_r._dsc_sm_ctl6))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_SM_CTL6r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL6r,(_r._dsc_sm_ctl6)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_SM_CTL6r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL6r,(_r._dsc_sm_ctl6))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_SM_CTL6r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL6r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_ctl6))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_SM_CTL6r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL6r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_ctl6))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_SM_CTL6r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL6r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_sm_ctl6))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_SM_CTL6r BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL6r
#define DSC_SM_CTL6r_SIZE BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL6r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL6r_t DSC_SM_CTL6r_t;
#define DSC_SM_CTL6r_CLR BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL6r_CLR
#define DSC_SM_CTL6r_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL6r_SET
#define DSC_SM_CTL6r_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL6r_GET
#define DSC_SM_CTL6r_EEE_ANA_PWR_TIMEOUTf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL6r_EEE_ANA_PWR_TIMEOUTf_GET
#define DSC_SM_CTL6r_EEE_ANA_PWR_TIMEOUTf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL6r_EEE_ANA_PWR_TIMEOUTf_SET
#define DSC_SM_CTL6r_EEE_HW_TUNE_TIMEOUTf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL6r_EEE_HW_TUNE_TIMEOUTf_GET
#define DSC_SM_CTL6r_EEE_HW_TUNE_TIMEOUTf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL6r_EEE_HW_TUNE_TIMEOUTf_SET
#define READ_DSC_SM_CTL6r BCMI_TSCF_GEN3_XGXS_READ_DSC_SM_CTL6r
#define WRITE_DSC_SM_CTL6r BCMI_TSCF_GEN3_XGXS_WRITE_DSC_SM_CTL6r
#define MODIFY_DSC_SM_CTL6r BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_SM_CTL6r
#define READLN_DSC_SM_CTL6r BCMI_TSCF_GEN3_XGXS_READLN_DSC_SM_CTL6r
#define WRITELN_DSC_SM_CTL6r BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_SM_CTL6r
#define WRITEALL_DSC_SM_CTL6r BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_SM_CTL6r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL6r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_SM_CTL7
 * BLOCKS:   DSC_D
 * REGADDR:  0xd067
 * DEVAD:    1
 * DESC:     DSC STATE MACHINE CONTROL 7
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CDR_BWSEL_INTEG_ACQCDR CDR 2nd Order Loop Bandwidth select for ACQ_CDR state.{0, 1,2,3} map to {2^0, 2^1, 2^2, 2^-1}
 *     CDR_BWSEL_INTEG_EEE_ACQCDR CDR 2nd Order Loop Bandwidth select for EEE_ACQ_CDR state.{0, 1,2,3} map to {2^0, 2^1, 2^2, 2^-1}
 *     CDR_BWSEL_INTEG_NORM CDR 2nd Order Loop Bandwidth select for non ACQ_CDR and EEE_ACQ_CDR states.{0, 1,2,3} map to {2^0, 2^1, 2^2, 2^-1}
 *     CDR_BWSEL_PROP_ACQCDR CDR Proportional Bandwidth select for ACQ_CDR state.{0, 1} map to {2^0, 2^1}
 *     CDR_BWSEL_PROP_NORM CDR Proportional Bandwidth select for non ACQ_CDR and EEE_ACQ_CDR states.{0, 1} map to {2^0, 2^1}
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL7r (0x0001d067 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL7r_SIZE 4

/*
 * This structure should be used to declare and program DSC_SM_CTL7.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL7r_s {
	uint32_t v[1];
	uint32_t dsc_sm_ctl7[1];
	uint32_t _dsc_sm_ctl7;
} BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL7r_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL7r_CLR(r) (r).dsc_sm_ctl7[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL7r_SET(r,d) (r).dsc_sm_ctl7[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL7r_GET(r) (r).dsc_sm_ctl7[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL7r_CDR_BWSEL_PROP_NORMf_GET(r) ((((r).dsc_sm_ctl7[0]) >> 14) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL7r_CDR_BWSEL_PROP_NORMf_SET(r,f) (r).dsc_sm_ctl7[0]=(((r).dsc_sm_ctl7[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL7r_CDR_BWSEL_PROP_ACQCDRf_GET(r) ((((r).dsc_sm_ctl7[0]) >> 12) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL7r_CDR_BWSEL_PROP_ACQCDRf_SET(r,f) (r).dsc_sm_ctl7[0]=(((r).dsc_sm_ctl7[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL7r_CDR_BWSEL_INTEG_NORMf_GET(r) ((((r).dsc_sm_ctl7[0]) >> 8) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL7r_CDR_BWSEL_INTEG_NORMf_SET(r,f) (r).dsc_sm_ctl7[0]=(((r).dsc_sm_ctl7[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL7r_CDR_BWSEL_INTEG_EEE_ACQCDRf_GET(r) ((((r).dsc_sm_ctl7[0]) >> 4) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL7r_CDR_BWSEL_INTEG_EEE_ACQCDRf_SET(r,f) (r).dsc_sm_ctl7[0]=(((r).dsc_sm_ctl7[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4)) | (15 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL7r_CDR_BWSEL_INTEG_ACQCDRf_GET(r) (((r).dsc_sm_ctl7[0]) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL7r_CDR_BWSEL_INTEG_ACQCDRf_SET(r,f) (r).dsc_sm_ctl7[0]=(((r).dsc_sm_ctl7[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access DSC_SM_CTL7.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_SM_CTL7r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL7r,(_r._dsc_sm_ctl7))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_SM_CTL7r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL7r,(_r._dsc_sm_ctl7)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_SM_CTL7r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL7r,(_r._dsc_sm_ctl7))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_SM_CTL7r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL7r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_ctl7))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_SM_CTL7r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL7r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_ctl7))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_SM_CTL7r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL7r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_sm_ctl7))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_SM_CTL7r BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL7r
#define DSC_SM_CTL7r_SIZE BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL7r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL7r_t DSC_SM_CTL7r_t;
#define DSC_SM_CTL7r_CLR BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL7r_CLR
#define DSC_SM_CTL7r_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL7r_SET
#define DSC_SM_CTL7r_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL7r_GET
#define DSC_SM_CTL7r_CDR_BWSEL_PROP_NORMf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL7r_CDR_BWSEL_PROP_NORMf_GET
#define DSC_SM_CTL7r_CDR_BWSEL_PROP_NORMf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL7r_CDR_BWSEL_PROP_NORMf_SET
#define DSC_SM_CTL7r_CDR_BWSEL_PROP_ACQCDRf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL7r_CDR_BWSEL_PROP_ACQCDRf_GET
#define DSC_SM_CTL7r_CDR_BWSEL_PROP_ACQCDRf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL7r_CDR_BWSEL_PROP_ACQCDRf_SET
#define DSC_SM_CTL7r_CDR_BWSEL_INTEG_NORMf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL7r_CDR_BWSEL_INTEG_NORMf_GET
#define DSC_SM_CTL7r_CDR_BWSEL_INTEG_NORMf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL7r_CDR_BWSEL_INTEG_NORMf_SET
#define DSC_SM_CTL7r_CDR_BWSEL_INTEG_EEE_ACQCDRf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL7r_CDR_BWSEL_INTEG_EEE_ACQCDRf_GET
#define DSC_SM_CTL7r_CDR_BWSEL_INTEG_EEE_ACQCDRf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL7r_CDR_BWSEL_INTEG_EEE_ACQCDRf_SET
#define DSC_SM_CTL7r_CDR_BWSEL_INTEG_ACQCDRf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL7r_CDR_BWSEL_INTEG_ACQCDRf_GET
#define DSC_SM_CTL7r_CDR_BWSEL_INTEG_ACQCDRf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL7r_CDR_BWSEL_INTEG_ACQCDRf_SET
#define READ_DSC_SM_CTL7r BCMI_TSCF_GEN3_XGXS_READ_DSC_SM_CTL7r
#define WRITE_DSC_SM_CTL7r BCMI_TSCF_GEN3_XGXS_WRITE_DSC_SM_CTL7r
#define MODIFY_DSC_SM_CTL7r BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_SM_CTL7r
#define READLN_DSC_SM_CTL7r BCMI_TSCF_GEN3_XGXS_READLN_DSC_SM_CTL7r
#define WRITELN_DSC_SM_CTL7r BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_SM_CTL7r
#define WRITEALL_DSC_SM_CTL7r BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_SM_CTL7r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL7r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_SM_CTL8
 * BLOCKS:   DSC_D
 * REGADDR:  0xd068
 * DEVAD:    1
 * DESC:     DSC STATE MACHINE CONTROL 8
 * RESETVAL: 0x11 (17)
 * ACCESS:   R/W
 * FIELDS:
 *     PHASE_ERR_OFFSET Phase Error Offset for non-EEE_ACQ_CDR states. Signed value. Valid range is -8 to 7. This translates to either -8/2 to 7/2 or -8/4 to 7/4, depending on how rg_phase_err_offset_mult_2 is set. By default is is -8/4 to 7/4 adding into VCO reg.
 *     EEE_PHASE_ERR_OFFSET Phase Error Offset for EEE_ACQ_CDR state. Signed value. Valid range is -8 to 7.
 *     PHASE_ERR_OFFSET_EN Phase Error Offset Enable for non-EEE_ACQ_CDR states.
 *     EEE_PHASE_ERR_OFFSET_EN Phase Error Offset Enable for EEE_ACQ_CDR state.
 *     CDR_BWSEL_PROP_EEE_ACQCDR CDR Proportional Bandwidth select for EEE_ACQ_CDR state.{0, 1} map to {2^0, 2^1}
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL8r (0x0001d068 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL8r_SIZE 4

/*
 * This structure should be used to declare and program DSC_SM_CTL8.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL8r_s {
	uint32_t v[1];
	uint32_t dsc_sm_ctl8[1];
	uint32_t _dsc_sm_ctl8;
} BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL8r_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL8r_CLR(r) (r).dsc_sm_ctl8[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL8r_SET(r,d) (r).dsc_sm_ctl8[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL8r_GET(r) (r).dsc_sm_ctl8[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL8r_CDR_BWSEL_PROP_EEE_ACQCDRf_GET(r) ((((r).dsc_sm_ctl8[0]) >> 14) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL8r_CDR_BWSEL_PROP_EEE_ACQCDRf_SET(r,f) (r).dsc_sm_ctl8[0]=(((r).dsc_sm_ctl8[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL8r_EEE_PHASE_ERR_OFFSET_ENf_GET(r) ((((r).dsc_sm_ctl8[0]) >> 10) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL8r_EEE_PHASE_ERR_OFFSET_ENf_SET(r,f) (r).dsc_sm_ctl8[0]=(((r).dsc_sm_ctl8[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10)) | (3 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL8r_PHASE_ERR_OFFSET_ENf_GET(r) ((((r).dsc_sm_ctl8[0]) >> 8) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL8r_PHASE_ERR_OFFSET_ENf_SET(r,f) (r).dsc_sm_ctl8[0]=(((r).dsc_sm_ctl8[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL8r_EEE_PHASE_ERR_OFFSETf_GET(r) ((((r).dsc_sm_ctl8[0]) >> 4) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL8r_EEE_PHASE_ERR_OFFSETf_SET(r,f) (r).dsc_sm_ctl8[0]=(((r).dsc_sm_ctl8[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4)) | (15 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL8r_PHASE_ERR_OFFSETf_GET(r) (((r).dsc_sm_ctl8[0]) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL8r_PHASE_ERR_OFFSETf_SET(r,f) (r).dsc_sm_ctl8[0]=(((r).dsc_sm_ctl8[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access DSC_SM_CTL8.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_SM_CTL8r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL8r,(_r._dsc_sm_ctl8))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_SM_CTL8r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL8r,(_r._dsc_sm_ctl8)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_SM_CTL8r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL8r,(_r._dsc_sm_ctl8))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_SM_CTL8r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL8r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_ctl8))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_SM_CTL8r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL8r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_ctl8))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_SM_CTL8r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL8r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_sm_ctl8))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_SM_CTL8r BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL8r
#define DSC_SM_CTL8r_SIZE BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL8r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL8r_t DSC_SM_CTL8r_t;
#define DSC_SM_CTL8r_CLR BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL8r_CLR
#define DSC_SM_CTL8r_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL8r_SET
#define DSC_SM_CTL8r_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL8r_GET
#define DSC_SM_CTL8r_CDR_BWSEL_PROP_EEE_ACQCDRf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL8r_CDR_BWSEL_PROP_EEE_ACQCDRf_GET
#define DSC_SM_CTL8r_CDR_BWSEL_PROP_EEE_ACQCDRf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL8r_CDR_BWSEL_PROP_EEE_ACQCDRf_SET
#define DSC_SM_CTL8r_EEE_PHASE_ERR_OFFSET_ENf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL8r_EEE_PHASE_ERR_OFFSET_ENf_GET
#define DSC_SM_CTL8r_EEE_PHASE_ERR_OFFSET_ENf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL8r_EEE_PHASE_ERR_OFFSET_ENf_SET
#define DSC_SM_CTL8r_PHASE_ERR_OFFSET_ENf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL8r_PHASE_ERR_OFFSET_ENf_GET
#define DSC_SM_CTL8r_PHASE_ERR_OFFSET_ENf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL8r_PHASE_ERR_OFFSET_ENf_SET
#define DSC_SM_CTL8r_EEE_PHASE_ERR_OFFSETf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL8r_EEE_PHASE_ERR_OFFSETf_GET
#define DSC_SM_CTL8r_EEE_PHASE_ERR_OFFSETf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL8r_EEE_PHASE_ERR_OFFSETf_SET
#define DSC_SM_CTL8r_PHASE_ERR_OFFSETf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL8r_PHASE_ERR_OFFSETf_GET
#define DSC_SM_CTL8r_PHASE_ERR_OFFSETf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL8r_PHASE_ERR_OFFSETf_SET
#define READ_DSC_SM_CTL8r BCMI_TSCF_GEN3_XGXS_READ_DSC_SM_CTL8r
#define WRITE_DSC_SM_CTL8r BCMI_TSCF_GEN3_XGXS_WRITE_DSC_SM_CTL8r
#define MODIFY_DSC_SM_CTL8r BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_SM_CTL8r
#define READLN_DSC_SM_CTL8r BCMI_TSCF_GEN3_XGXS_READLN_DSC_SM_CTL8r
#define WRITELN_DSC_SM_CTL8r BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_SM_CTL8r
#define WRITEALL_DSC_SM_CTL8r BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_SM_CTL8r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL8r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_SM_CTL9
 * BLOCKS:   DSC_D
 * REGADDR:  0xd069
 * DEVAD:    1
 * DESC:     DSC STATE MACHINE CONTROL 9
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RX_RESTART_PMD   1: restarts the RX PMD. This is a self-clear register bit.
 *     RX_RESTART_PMD_HOLD 1: restarts the RX PMD and holds it in RESTART state until this bit is cleared.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL9r (0x0001d069 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL9r_SIZE 4

/*
 * This structure should be used to declare and program DSC_SM_CTL9.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL9r_s {
	uint32_t v[1];
	uint32_t dsc_sm_ctl9[1];
	uint32_t _dsc_sm_ctl9;
} BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL9r_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL9r_CLR(r) (r).dsc_sm_ctl9[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL9r_SET(r,d) (r).dsc_sm_ctl9[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL9r_GET(r) (r).dsc_sm_ctl9[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL9r_RX_RESTART_PMD_HOLDf_GET(r) ((((r).dsc_sm_ctl9[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL9r_RX_RESTART_PMD_HOLDf_SET(r,f) (r).dsc_sm_ctl9[0]=(((r).dsc_sm_ctl9[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL9r_RX_RESTART_PMDf_GET(r) (((r).dsc_sm_ctl9[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL9r_RX_RESTART_PMDf_SET(r,f) (r).dsc_sm_ctl9[0]=(((r).dsc_sm_ctl9[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access DSC_SM_CTL9.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_SM_CTL9r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL9r,(_r._dsc_sm_ctl9))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_SM_CTL9r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL9r,(_r._dsc_sm_ctl9)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_SM_CTL9r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL9r,(_r._dsc_sm_ctl9))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_SM_CTL9r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL9r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_ctl9))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_SM_CTL9r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL9r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_ctl9))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_SM_CTL9r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL9r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_sm_ctl9))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_SM_CTL9r BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL9r
#define DSC_SM_CTL9r_SIZE BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL9r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL9r_t DSC_SM_CTL9r_t;
#define DSC_SM_CTL9r_CLR BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL9r_CLR
#define DSC_SM_CTL9r_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL9r_SET
#define DSC_SM_CTL9r_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL9r_GET
#define DSC_SM_CTL9r_RX_RESTART_PMD_HOLDf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL9r_RX_RESTART_PMD_HOLDf_GET
#define DSC_SM_CTL9r_RX_RESTART_PMD_HOLDf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL9r_RX_RESTART_PMD_HOLDf_SET
#define DSC_SM_CTL9r_RX_RESTART_PMDf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL9r_RX_RESTART_PMDf_GET
#define DSC_SM_CTL9r_RX_RESTART_PMDf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL9r_RX_RESTART_PMDf_SET
#define READ_DSC_SM_CTL9r BCMI_TSCF_GEN3_XGXS_READ_DSC_SM_CTL9r
#define WRITE_DSC_SM_CTL9r BCMI_TSCF_GEN3_XGXS_WRITE_DSC_SM_CTL9r
#define MODIFY_DSC_SM_CTL9r BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_SM_CTL9r
#define READLN_DSC_SM_CTL9r BCMI_TSCF_GEN3_XGXS_READLN_DSC_SM_CTL9r
#define WRITELN_DSC_SM_CTL9r BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_SM_CTL9r
#define WRITEALL_DSC_SM_CTL9r BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_SM_CTL9r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_SM_CTL9r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_SM_STS_DSC_LOCK
 * BLOCKS:   DSC_D
 * REGADDR:  0xd06a
 * DEVAD:    1
 * DESC:     DSC STATE MACHINE DSC_LOCK STATUS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     RX_DSC_LOCK      1 indicates that DSC is locked.
 *     MEAS_INCOMPLETE  1 indicates that measurement is incomplete. 0 indicates that measurement is complete.
 *     EEE_MEASURE_CNT  Indicates the eee_measure_cnt status. This is a debug register.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_LOCKr (0x0001d06a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_LOCKr_SIZE 4

/*
 * This structure should be used to declare and program DSC_SM_STS_DSC_LOCK.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_LOCKr_s {
	uint32_t v[1];
	uint32_t dsc_sm_sts_dsc_lock[1];
	uint32_t _dsc_sm_sts_dsc_lock;
} BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_LOCKr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_LOCKr_CLR(r) (r).dsc_sm_sts_dsc_lock[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_LOCKr_SET(r,d) (r).dsc_sm_sts_dsc_lock[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_LOCKr_GET(r) (r).dsc_sm_sts_dsc_lock[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_LOCKr_EEE_MEASURE_CNTf_GET(r) ((((r).dsc_sm_sts_dsc_lock[0]) >> 7) & 0x1ff)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_LOCKr_EEE_MEASURE_CNTf_SET(r,f) (r).dsc_sm_sts_dsc_lock[0]=(((r).dsc_sm_sts_dsc_lock[0] & ~((uint32_t)0x1ff << 7)) | ((((uint32_t)f) & 0x1ff) << 7)) | (511 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_LOCKr_MEAS_INCOMPLETEf_GET(r) ((((r).dsc_sm_sts_dsc_lock[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_LOCKr_MEAS_INCOMPLETEf_SET(r,f) (r).dsc_sm_sts_dsc_lock[0]=(((r).dsc_sm_sts_dsc_lock[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_LOCKr_RX_DSC_LOCKf_GET(r) (((r).dsc_sm_sts_dsc_lock[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_LOCKr_RX_DSC_LOCKf_SET(r,f) (r).dsc_sm_sts_dsc_lock[0]=(((r).dsc_sm_sts_dsc_lock[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access DSC_SM_STS_DSC_LOCK.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_SM_STS_DSC_LOCKr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_LOCKr,(_r._dsc_sm_sts_dsc_lock))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_SM_STS_DSC_LOCKr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_LOCKr,(_r._dsc_sm_sts_dsc_lock)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_SM_STS_DSC_LOCKr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_LOCKr,(_r._dsc_sm_sts_dsc_lock))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_SM_STS_DSC_LOCKr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_LOCKr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_sts_dsc_lock))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_SM_STS_DSC_LOCKr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_LOCKr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_sts_dsc_lock))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_SM_STS_DSC_LOCKr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_LOCKr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_sm_sts_dsc_lock))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_SM_STS_DSC_LOCKr BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_LOCKr
#define DSC_SM_STS_DSC_LOCKr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_LOCKr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_LOCKr_t DSC_SM_STS_DSC_LOCKr_t;
#define DSC_SM_STS_DSC_LOCKr_CLR BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_LOCKr_CLR
#define DSC_SM_STS_DSC_LOCKr_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_LOCKr_SET
#define DSC_SM_STS_DSC_LOCKr_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_LOCKr_GET
#define DSC_SM_STS_DSC_LOCKr_EEE_MEASURE_CNTf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_LOCKr_EEE_MEASURE_CNTf_GET
#define DSC_SM_STS_DSC_LOCKr_EEE_MEASURE_CNTf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_LOCKr_EEE_MEASURE_CNTf_SET
#define DSC_SM_STS_DSC_LOCKr_MEAS_INCOMPLETEf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_LOCKr_MEAS_INCOMPLETEf_GET
#define DSC_SM_STS_DSC_LOCKr_MEAS_INCOMPLETEf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_LOCKr_MEAS_INCOMPLETEf_SET
#define DSC_SM_STS_DSC_LOCKr_RX_DSC_LOCKf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_LOCKr_RX_DSC_LOCKf_GET
#define DSC_SM_STS_DSC_LOCKr_RX_DSC_LOCKf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_LOCKr_RX_DSC_LOCKf_SET
#define READ_DSC_SM_STS_DSC_LOCKr BCMI_TSCF_GEN3_XGXS_READ_DSC_SM_STS_DSC_LOCKr
#define WRITE_DSC_SM_STS_DSC_LOCKr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_SM_STS_DSC_LOCKr
#define MODIFY_DSC_SM_STS_DSC_LOCKr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_SM_STS_DSC_LOCKr
#define READLN_DSC_SM_STS_DSC_LOCKr BCMI_TSCF_GEN3_XGXS_READLN_DSC_SM_STS_DSC_LOCKr
#define WRITELN_DSC_SM_STS_DSC_LOCKr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_SM_STS_DSC_LOCKr
#define WRITEALL_DSC_SM_STS_DSC_LOCKr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_SM_STS_DSC_LOCKr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_LOCKr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_SM_STS_DSC_ST_ONE_HOT
 * BLOCKS:   DSC_D
 * REGADDR:  0xd06b
 * DEVAD:    1
 * DESC:     DSC STATE MACHINE STATUS ONE HOT
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     DSC_STATE_ONE_HOT Sticky one-hot coded states. These registers are cleared on read.RESET           =  0RESTART         =  1CONFIG          =  2WAIT_FOR_SIG    =  3ACQ_CDR         =  4CDR_SETTLE      =  5HW_TUNE         =  6UC_TUNE         =  7MEASURE         =  8DONE            =  9
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_ST_ONE_HOTr (0x0001d06b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_ST_ONE_HOTr_SIZE 4

/*
 * This structure should be used to declare and program DSC_SM_STS_DSC_ST_ONE_HOT.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_ST_ONE_HOTr_s {
	uint32_t v[1];
	uint32_t dsc_sm_sts_dsc_st_one_hot[1];
	uint32_t _dsc_sm_sts_dsc_st_one_hot;
} BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_ST_ONE_HOTr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_ST_ONE_HOTr_CLR(r) (r).dsc_sm_sts_dsc_st_one_hot[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_ST_ONE_HOTr_SET(r,d) (r).dsc_sm_sts_dsc_st_one_hot[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_ST_ONE_HOTr_GET(r) (r).dsc_sm_sts_dsc_st_one_hot[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_ST_ONE_HOTr_DSC_STATE_ONE_HOTf_GET(r) (((r).dsc_sm_sts_dsc_st_one_hot[0]) & 0x3ff)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_ST_ONE_HOTr_DSC_STATE_ONE_HOTf_SET(r,f) (r).dsc_sm_sts_dsc_st_one_hot[0]=(((r).dsc_sm_sts_dsc_st_one_hot[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff)) | (0x3ff << 16)

/*
 * These macros can be used to access DSC_SM_STS_DSC_ST_ONE_HOT.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_SM_STS_DSC_ST_ONE_HOTr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_ST_ONE_HOTr,(_r._dsc_sm_sts_dsc_st_one_hot))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_SM_STS_DSC_ST_ONE_HOTr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_ST_ONE_HOTr,(_r._dsc_sm_sts_dsc_st_one_hot)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_SM_STS_DSC_ST_ONE_HOTr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_ST_ONE_HOTr,(_r._dsc_sm_sts_dsc_st_one_hot))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_SM_STS_DSC_ST_ONE_HOTr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_ST_ONE_HOTr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_sts_dsc_st_one_hot))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_SM_STS_DSC_ST_ONE_HOTr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_ST_ONE_HOTr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_sts_dsc_st_one_hot))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_SM_STS_DSC_ST_ONE_HOTr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_ST_ONE_HOTr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_sm_sts_dsc_st_one_hot))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_SM_STS_DSC_ST_ONE_HOTr BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_ST_ONE_HOTr
#define DSC_SM_STS_DSC_ST_ONE_HOTr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_ST_ONE_HOTr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_ST_ONE_HOTr_t DSC_SM_STS_DSC_ST_ONE_HOTr_t;
#define DSC_SM_STS_DSC_ST_ONE_HOTr_CLR BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_ST_ONE_HOTr_CLR
#define DSC_SM_STS_DSC_ST_ONE_HOTr_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_ST_ONE_HOTr_SET
#define DSC_SM_STS_DSC_ST_ONE_HOTr_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_ST_ONE_HOTr_GET
#define DSC_SM_STS_DSC_ST_ONE_HOTr_DSC_STATE_ONE_HOTf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_ST_ONE_HOTr_DSC_STATE_ONE_HOTf_GET
#define DSC_SM_STS_DSC_ST_ONE_HOTr_DSC_STATE_ONE_HOTf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_ST_ONE_HOTr_DSC_STATE_ONE_HOTf_SET
#define READ_DSC_SM_STS_DSC_ST_ONE_HOTr BCMI_TSCF_GEN3_XGXS_READ_DSC_SM_STS_DSC_ST_ONE_HOTr
#define WRITE_DSC_SM_STS_DSC_ST_ONE_HOTr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_SM_STS_DSC_ST_ONE_HOTr
#define MODIFY_DSC_SM_STS_DSC_ST_ONE_HOTr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_SM_STS_DSC_ST_ONE_HOTr
#define READLN_DSC_SM_STS_DSC_ST_ONE_HOTr BCMI_TSCF_GEN3_XGXS_READLN_DSC_SM_STS_DSC_ST_ONE_HOTr
#define WRITELN_DSC_SM_STS_DSC_ST_ONE_HOTr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_SM_STS_DSC_ST_ONE_HOTr
#define WRITEALL_DSC_SM_STS_DSC_ST_ONE_HOTr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_SM_STS_DSC_ST_ONE_HOTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_ST_ONE_HOTr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_SM_STS_DSC_ST_EEE_ONE_HOT
 * BLOCKS:   DSC_D
 * REGADDR:  0xd06c
 * DEVAD:    1
 * DESC:     DSC STATE MACHINE STATUS EEE ONE HOT
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     DSC_STATE_EEE_ONE_HOT Sticky one-hot coded EEE state . These registers are cleared on read.EEE_QUIET       =  0EEE_ANA_PWR     =  1EEE_ACQ_CDR     =  2EEE_CDR_SETTLE  =  3EEE_HW_TUNE     =  4EEE_MEASURE     =  5EEE_DONE        =  6
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_ST_EEE_ONE_HOTr (0x0001d06c | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_ST_EEE_ONE_HOTr_SIZE 4

/*
 * This structure should be used to declare and program DSC_SM_STS_DSC_ST_EEE_ONE_HOT.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_ST_EEE_ONE_HOTr_s {
	uint32_t v[1];
	uint32_t dsc_sm_sts_dsc_st_eee_one_hot[1];
	uint32_t _dsc_sm_sts_dsc_st_eee_one_hot;
} BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_ST_EEE_ONE_HOTr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_ST_EEE_ONE_HOTr_CLR(r) (r).dsc_sm_sts_dsc_st_eee_one_hot[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_ST_EEE_ONE_HOTr_SET(r,d) (r).dsc_sm_sts_dsc_st_eee_one_hot[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_ST_EEE_ONE_HOTr_GET(r) (r).dsc_sm_sts_dsc_st_eee_one_hot[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_ST_EEE_ONE_HOTr_DSC_STATE_EEE_ONE_HOTf_GET(r) (((r).dsc_sm_sts_dsc_st_eee_one_hot[0]) & 0x7f)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_ST_EEE_ONE_HOTr_DSC_STATE_EEE_ONE_HOTf_SET(r,f) (r).dsc_sm_sts_dsc_st_eee_one_hot[0]=(((r).dsc_sm_sts_dsc_st_eee_one_hot[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f)) | (0x7f << 16)

/*
 * These macros can be used to access DSC_SM_STS_DSC_ST_EEE_ONE_HOT.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_SM_STS_DSC_ST_EEE_ONE_HOTr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_ST_EEE_ONE_HOTr,(_r._dsc_sm_sts_dsc_st_eee_one_hot))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_SM_STS_DSC_ST_EEE_ONE_HOTr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_ST_EEE_ONE_HOTr,(_r._dsc_sm_sts_dsc_st_eee_one_hot)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_SM_STS_DSC_ST_EEE_ONE_HOTr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_ST_EEE_ONE_HOTr,(_r._dsc_sm_sts_dsc_st_eee_one_hot))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_SM_STS_DSC_ST_EEE_ONE_HOTr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_ST_EEE_ONE_HOTr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_sts_dsc_st_eee_one_hot))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_SM_STS_DSC_ST_EEE_ONE_HOTr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_ST_EEE_ONE_HOTr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_sts_dsc_st_eee_one_hot))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_SM_STS_DSC_ST_EEE_ONE_HOTr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_ST_EEE_ONE_HOTr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_sm_sts_dsc_st_eee_one_hot))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_SM_STS_DSC_ST_EEE_ONE_HOTr BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_ST_EEE_ONE_HOTr
#define DSC_SM_STS_DSC_ST_EEE_ONE_HOTr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_ST_EEE_ONE_HOTr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_ST_EEE_ONE_HOTr_t DSC_SM_STS_DSC_ST_EEE_ONE_HOTr_t;
#define DSC_SM_STS_DSC_ST_EEE_ONE_HOTr_CLR BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_ST_EEE_ONE_HOTr_CLR
#define DSC_SM_STS_DSC_ST_EEE_ONE_HOTr_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_ST_EEE_ONE_HOTr_SET
#define DSC_SM_STS_DSC_ST_EEE_ONE_HOTr_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_ST_EEE_ONE_HOTr_GET
#define DSC_SM_STS_DSC_ST_EEE_ONE_HOTr_DSC_STATE_EEE_ONE_HOTf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_ST_EEE_ONE_HOTr_DSC_STATE_EEE_ONE_HOTf_GET
#define DSC_SM_STS_DSC_ST_EEE_ONE_HOTr_DSC_STATE_EEE_ONE_HOTf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_ST_EEE_ONE_HOTr_DSC_STATE_EEE_ONE_HOTf_SET
#define READ_DSC_SM_STS_DSC_ST_EEE_ONE_HOTr BCMI_TSCF_GEN3_XGXS_READ_DSC_SM_STS_DSC_ST_EEE_ONE_HOTr
#define WRITE_DSC_SM_STS_DSC_ST_EEE_ONE_HOTr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_SM_STS_DSC_ST_EEE_ONE_HOTr
#define MODIFY_DSC_SM_STS_DSC_ST_EEE_ONE_HOTr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_SM_STS_DSC_ST_EEE_ONE_HOTr
#define READLN_DSC_SM_STS_DSC_ST_EEE_ONE_HOTr BCMI_TSCF_GEN3_XGXS_READLN_DSC_SM_STS_DSC_ST_EEE_ONE_HOTr
#define WRITELN_DSC_SM_STS_DSC_ST_EEE_ONE_HOTr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_SM_STS_DSC_ST_EEE_ONE_HOTr
#define WRITEALL_DSC_SM_STS_DSC_ST_EEE_ONE_HOTr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_SM_STS_DSC_ST_EEE_ONE_HOTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_ST_EEE_ONE_HOTr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_SM_STS_RESTART
 * BLOCKS:   DSC_D
 * REGADDR:  0xd06d
 * DEVAD:    1
 * DESC:     DSC STATE MACHINE STATUS RESTART
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     RESTART_PI_EXT_MODE Indicates when SM moves to RESTART state due to enabling of RX_PI external control (i.e. digital loopback enable). This is clear on read.
 *     RESTART_SIGDET   Indicates when SM moves to RESTART state due to sigdet==0 and eee_mode_en register is 1'b0. This is clear on read.
 *     RESTART_PMD_RESTART Indicates when SM moves to RESTART state due to assertion of pmd_restart to 1'b1. This is clear on read.
 *     EEE_QUIET_FROM_EEE_STATES Indicates when SM moves from any EEE states to EEE_QUIET state. This is clear on read.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_RESTARTr (0x0001d06d | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_RESTARTr_SIZE 4

/*
 * This structure should be used to declare and program DSC_SM_STS_RESTART.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_RESTARTr_s {
	uint32_t v[1];
	uint32_t dsc_sm_sts_restart[1];
	uint32_t _dsc_sm_sts_restart;
} BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_RESTARTr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_RESTARTr_CLR(r) (r).dsc_sm_sts_restart[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_RESTARTr_SET(r,d) (r).dsc_sm_sts_restart[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_RESTARTr_GET(r) (r).dsc_sm_sts_restart[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_RESTARTr_EEE_QUIET_FROM_EEE_STATESf_GET(r) ((((r).dsc_sm_sts_restart[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_RESTARTr_EEE_QUIET_FROM_EEE_STATESf_SET(r,f) (r).dsc_sm_sts_restart[0]=(((r).dsc_sm_sts_restart[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_RESTARTr_RESTART_PMD_RESTARTf_GET(r) ((((r).dsc_sm_sts_restart[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_RESTARTr_RESTART_PMD_RESTARTf_SET(r,f) (r).dsc_sm_sts_restart[0]=(((r).dsc_sm_sts_restart[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_RESTARTr_RESTART_SIGDETf_GET(r) ((((r).dsc_sm_sts_restart[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_RESTARTr_RESTART_SIGDETf_SET(r,f) (r).dsc_sm_sts_restart[0]=(((r).dsc_sm_sts_restart[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_RESTARTr_RESTART_PI_EXT_MODEf_GET(r) (((r).dsc_sm_sts_restart[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_RESTARTr_RESTART_PI_EXT_MODEf_SET(r,f) (r).dsc_sm_sts_restart[0]=(((r).dsc_sm_sts_restart[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access DSC_SM_STS_RESTART.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_SM_STS_RESTARTr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_RESTARTr,(_r._dsc_sm_sts_restart))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_SM_STS_RESTARTr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_RESTARTr,(_r._dsc_sm_sts_restart)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_SM_STS_RESTARTr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_RESTARTr,(_r._dsc_sm_sts_restart))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_SM_STS_RESTARTr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_RESTARTr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_sts_restart))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_SM_STS_RESTARTr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_RESTARTr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_sts_restart))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_SM_STS_RESTARTr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_RESTARTr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_sm_sts_restart))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_SM_STS_RESTARTr BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_RESTARTr
#define DSC_SM_STS_RESTARTr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_RESTARTr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_RESTARTr_t DSC_SM_STS_RESTARTr_t;
#define DSC_SM_STS_RESTARTr_CLR BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_RESTARTr_CLR
#define DSC_SM_STS_RESTARTr_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_RESTARTr_SET
#define DSC_SM_STS_RESTARTr_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_RESTARTr_GET
#define DSC_SM_STS_RESTARTr_EEE_QUIET_FROM_EEE_STATESf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_RESTARTr_EEE_QUIET_FROM_EEE_STATESf_GET
#define DSC_SM_STS_RESTARTr_EEE_QUIET_FROM_EEE_STATESf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_RESTARTr_EEE_QUIET_FROM_EEE_STATESf_SET
#define DSC_SM_STS_RESTARTr_RESTART_PMD_RESTARTf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_RESTARTr_RESTART_PMD_RESTARTf_GET
#define DSC_SM_STS_RESTARTr_RESTART_PMD_RESTARTf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_RESTARTr_RESTART_PMD_RESTARTf_SET
#define DSC_SM_STS_RESTARTr_RESTART_SIGDETf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_RESTARTr_RESTART_SIGDETf_GET
#define DSC_SM_STS_RESTARTr_RESTART_SIGDETf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_RESTARTr_RESTART_SIGDETf_SET
#define DSC_SM_STS_RESTARTr_RESTART_PI_EXT_MODEf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_RESTARTr_RESTART_PI_EXT_MODEf_GET
#define DSC_SM_STS_RESTARTr_RESTART_PI_EXT_MODEf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_RESTARTr_RESTART_PI_EXT_MODEf_SET
#define READ_DSC_SM_STS_RESTARTr BCMI_TSCF_GEN3_XGXS_READ_DSC_SM_STS_RESTARTr
#define WRITE_DSC_SM_STS_RESTARTr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_SM_STS_RESTARTr
#define MODIFY_DSC_SM_STS_RESTARTr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_SM_STS_RESTARTr
#define READLN_DSC_SM_STS_RESTARTr BCMI_TSCF_GEN3_XGXS_READLN_DSC_SM_STS_RESTARTr
#define WRITELN_DSC_SM_STS_RESTARTr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_SM_STS_RESTARTr
#define WRITEALL_DSC_SM_STS_RESTARTr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_SM_STS_RESTARTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_RESTARTr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_SM_STS_DSC_ST
 * BLOCKS:   DSC_D
 * REGADDR:  0xd06e
 * DEVAD:    1
 * DESC:     DSC STATE MACHINE STATUS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     DSC_SM_READY_FOR_CMD Ready for Command.
 *     DSC_SM_GP_UC_REQ gp_uc_req.
 *     DSC_SM_SCRATCH   3 bits of dsc_scratch
 *     DSC_STATE        Live DSC SM state. Following are the state encodings.RESET           =  0RESTART         =  1CONFIG          =  2WAIT_FOR_SIG    =  3ACQ_CDR         =  4CDR_SETTLE      =  5HW_TUNE         =  6UC_TUNE         =  7MEASURE         =  8DONE            =  9EEE_QUIET       =  10EEE_ANA_PWR     =  11EEE_ACQ_CDR     =  12EEE_CDR_SETTLE  =  13EEE_HW_TUNE     =  14EEE_MEASURE     =  15EEE_DONE        =  16
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_STr (0x0001d06e | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_STr_SIZE 4

/*
 * This structure should be used to declare and program DSC_SM_STS_DSC_ST.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_STr_s {
	uint32_t v[1];
	uint32_t dsc_sm_sts_dsc_st[1];
	uint32_t _dsc_sm_sts_dsc_st;
} BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_STr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_STr_CLR(r) (r).dsc_sm_sts_dsc_st[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_STr_SET(r,d) (r).dsc_sm_sts_dsc_st[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_STr_GET(r) (r).dsc_sm_sts_dsc_st[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_STr_DSC_STATEf_GET(r) ((((r).dsc_sm_sts_dsc_st[0]) >> 11) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_STr_DSC_STATEf_SET(r,f) (r).dsc_sm_sts_dsc_st[0]=(((r).dsc_sm_sts_dsc_st[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11)) | (31 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_STr_DSC_SM_SCRATCHf_GET(r) ((((r).dsc_sm_sts_dsc_st[0]) >> 8) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_STr_DSC_SM_SCRATCHf_SET(r,f) (r).dsc_sm_sts_dsc_st[0]=(((r).dsc_sm_sts_dsc_st[0] & ~((uint32_t)0x7 << 8)) | ((((uint32_t)f) & 0x7) << 8)) | (7 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_STr_DSC_SM_GP_UC_REQf_GET(r) ((((r).dsc_sm_sts_dsc_st[0]) >> 1) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_STr_DSC_SM_GP_UC_REQf_SET(r,f) (r).dsc_sm_sts_dsc_st[0]=(((r).dsc_sm_sts_dsc_st[0] & ~((uint32_t)0x3f << 1)) | ((((uint32_t)f) & 0x3f) << 1)) | (63 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_STr_DSC_SM_READY_FOR_CMDf_GET(r) (((r).dsc_sm_sts_dsc_st[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_STr_DSC_SM_READY_FOR_CMDf_SET(r,f) (r).dsc_sm_sts_dsc_st[0]=(((r).dsc_sm_sts_dsc_st[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access DSC_SM_STS_DSC_ST.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_SM_STS_DSC_STr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_STr,(_r._dsc_sm_sts_dsc_st))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_SM_STS_DSC_STr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_STr,(_r._dsc_sm_sts_dsc_st)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_SM_STS_DSC_STr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_STr,(_r._dsc_sm_sts_dsc_st))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_SM_STS_DSC_STr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_STr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_sts_dsc_st))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_SM_STS_DSC_STr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_STr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_sts_dsc_st))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_SM_STS_DSC_STr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_STr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_sm_sts_dsc_st))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_SM_STS_DSC_STr BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_STr
#define DSC_SM_STS_DSC_STr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_STr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_STr_t DSC_SM_STS_DSC_STr_t;
#define DSC_SM_STS_DSC_STr_CLR BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_STr_CLR
#define DSC_SM_STS_DSC_STr_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_STr_SET
#define DSC_SM_STS_DSC_STr_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_STr_GET
#define DSC_SM_STS_DSC_STr_DSC_STATEf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_STr_DSC_STATEf_GET
#define DSC_SM_STS_DSC_STr_DSC_STATEf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_STr_DSC_STATEf_SET
#define DSC_SM_STS_DSC_STr_DSC_SM_SCRATCHf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_STr_DSC_SM_SCRATCHf_GET
#define DSC_SM_STS_DSC_STr_DSC_SM_SCRATCHf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_STr_DSC_SM_SCRATCHf_SET
#define DSC_SM_STS_DSC_STr_DSC_SM_GP_UC_REQf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_STr_DSC_SM_GP_UC_REQf_GET
#define DSC_SM_STS_DSC_STr_DSC_SM_GP_UC_REQf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_STr_DSC_SM_GP_UC_REQf_SET
#define DSC_SM_STS_DSC_STr_DSC_SM_READY_FOR_CMDf_GET BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_STr_DSC_SM_READY_FOR_CMDf_GET
#define DSC_SM_STS_DSC_STr_DSC_SM_READY_FOR_CMDf_SET BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_STr_DSC_SM_READY_FOR_CMDf_SET
#define READ_DSC_SM_STS_DSC_STr BCMI_TSCF_GEN3_XGXS_READ_DSC_SM_STS_DSC_STr
#define WRITE_DSC_SM_STS_DSC_STr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_SM_STS_DSC_STr
#define MODIFY_DSC_SM_STS_DSC_STr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_SM_STS_DSC_STr
#define READLN_DSC_SM_STS_DSC_STr BCMI_TSCF_GEN3_XGXS_READLN_DSC_SM_STS_DSC_STr
#define WRITELN_DSC_SM_STS_DSC_STr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_SM_STS_DSC_STr
#define WRITEALL_DSC_SM_STS_DSC_STr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_SM_STS_DSC_STr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_SM_STS_DSC_STr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_RX_PI_CNT_BIN_PD
 * BLOCKS:   DSC_E
 * REGADDR:  0xd070
 * DEVAD:    1
 * DESC:     rx_pi status register, both p and d.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CNT_BIN_P_PD     PI counter value for phase slicer
 *     CNT_BIN_D_PD     PI counter value for phase quadrature slicer
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_PDr (0x0001d070 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_PDr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_PI_CNT_BIN_PD.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_PDr_s {
	uint32_t v[1];
	uint32_t dsc_rx_pi_cnt_bin_pd[1];
	uint32_t _dsc_rx_pi_cnt_bin_pd;
} BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_PDr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_PDr_CLR(r) (r).dsc_rx_pi_cnt_bin_pd[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_PDr_SET(r,d) (r).dsc_rx_pi_cnt_bin_pd[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_PDr_GET(r) (r).dsc_rx_pi_cnt_bin_pd[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_PDr_CNT_BIN_D_PDf_GET(r) ((((r).dsc_rx_pi_cnt_bin_pd[0]) >> 8) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_PDr_CNT_BIN_D_PDf_SET(r,f) (r).dsc_rx_pi_cnt_bin_pd[0]=(((r).dsc_rx_pi_cnt_bin_pd[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_PDr_CNT_BIN_P_PDf_GET(r) (((r).dsc_rx_pi_cnt_bin_pd[0]) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_PDr_CNT_BIN_P_PDf_SET(r,f) (r).dsc_rx_pi_cnt_bin_pd[0]=(((r).dsc_rx_pi_cnt_bin_pd[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access DSC_RX_PI_CNT_BIN_PD.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_PI_CNT_BIN_PDr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_PDr,(_r._dsc_rx_pi_cnt_bin_pd))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_PI_CNT_BIN_PDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_PDr,(_r._dsc_rx_pi_cnt_bin_pd)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_PI_CNT_BIN_PDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_PDr,(_r._dsc_rx_pi_cnt_bin_pd))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_PI_CNT_BIN_PDr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_PDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_pi_cnt_bin_pd))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_PI_CNT_BIN_PDr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_PDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_pi_cnt_bin_pd))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_PI_CNT_BIN_PDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_PDr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_pi_cnt_bin_pd))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_PI_CNT_BIN_PDr BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_PDr
#define DSC_RX_PI_CNT_BIN_PDr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_PDr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_PDr_t DSC_RX_PI_CNT_BIN_PDr_t;
#define DSC_RX_PI_CNT_BIN_PDr_CLR BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_PDr_CLR
#define DSC_RX_PI_CNT_BIN_PDr_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_PDr_SET
#define DSC_RX_PI_CNT_BIN_PDr_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_PDr_GET
#define DSC_RX_PI_CNT_BIN_PDr_CNT_BIN_D_PDf_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_PDr_CNT_BIN_D_PDf_GET
#define DSC_RX_PI_CNT_BIN_PDr_CNT_BIN_D_PDf_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_PDr_CNT_BIN_D_PDf_SET
#define DSC_RX_PI_CNT_BIN_PDr_CNT_BIN_P_PDf_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_PDr_CNT_BIN_P_PDf_GET
#define DSC_RX_PI_CNT_BIN_PDr_CNT_BIN_P_PDf_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_PDr_CNT_BIN_P_PDf_SET
#define READ_DSC_RX_PI_CNT_BIN_PDr BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_PI_CNT_BIN_PDr
#define WRITE_DSC_RX_PI_CNT_BIN_PDr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_PI_CNT_BIN_PDr
#define MODIFY_DSC_RX_PI_CNT_BIN_PDr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_PI_CNT_BIN_PDr
#define READLN_DSC_RX_PI_CNT_BIN_PDr BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_PI_CNT_BIN_PDr
#define WRITELN_DSC_RX_PI_CNT_BIN_PDr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_PI_CNT_BIN_PDr
#define WRITEALL_DSC_RX_PI_CNT_BIN_PDr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_PI_CNT_BIN_PDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_PDr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_RX_PI_CNT_BIN_LD
 * BLOCKS:   DSC_E
 * REGADDR:  0xd071
 * DEVAD:    1
 * DESC:     rx_pi status register, both l and d.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CNT_BIN_L_LD     PI counter value for LMS slicer
 *     CNT_BIN_D_LD     PI counter value for LMS quadrature slicer
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_LDr (0x0001d071 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_LDr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_PI_CNT_BIN_LD.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_LDr_s {
	uint32_t v[1];
	uint32_t dsc_rx_pi_cnt_bin_ld[1];
	uint32_t _dsc_rx_pi_cnt_bin_ld;
} BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_LDr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_LDr_CLR(r) (r).dsc_rx_pi_cnt_bin_ld[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_LDr_SET(r,d) (r).dsc_rx_pi_cnt_bin_ld[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_LDr_GET(r) (r).dsc_rx_pi_cnt_bin_ld[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_LDr_CNT_BIN_D_LDf_GET(r) ((((r).dsc_rx_pi_cnt_bin_ld[0]) >> 8) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_LDr_CNT_BIN_D_LDf_SET(r,f) (r).dsc_rx_pi_cnt_bin_ld[0]=(((r).dsc_rx_pi_cnt_bin_ld[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_LDr_CNT_BIN_L_LDf_GET(r) (((r).dsc_rx_pi_cnt_bin_ld[0]) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_LDr_CNT_BIN_L_LDf_SET(r,f) (r).dsc_rx_pi_cnt_bin_ld[0]=(((r).dsc_rx_pi_cnt_bin_ld[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access DSC_RX_PI_CNT_BIN_LD.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_PI_CNT_BIN_LDr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_LDr,(_r._dsc_rx_pi_cnt_bin_ld))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_PI_CNT_BIN_LDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_LDr,(_r._dsc_rx_pi_cnt_bin_ld)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_PI_CNT_BIN_LDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_LDr,(_r._dsc_rx_pi_cnt_bin_ld))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_PI_CNT_BIN_LDr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_LDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_pi_cnt_bin_ld))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_PI_CNT_BIN_LDr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_LDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_pi_cnt_bin_ld))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_PI_CNT_BIN_LDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_LDr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_pi_cnt_bin_ld))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_PI_CNT_BIN_LDr BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_LDr
#define DSC_RX_PI_CNT_BIN_LDr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_LDr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_LDr_t DSC_RX_PI_CNT_BIN_LDr_t;
#define DSC_RX_PI_CNT_BIN_LDr_CLR BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_LDr_CLR
#define DSC_RX_PI_CNT_BIN_LDr_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_LDr_SET
#define DSC_RX_PI_CNT_BIN_LDr_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_LDr_GET
#define DSC_RX_PI_CNT_BIN_LDr_CNT_BIN_D_LDf_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_LDr_CNT_BIN_D_LDf_GET
#define DSC_RX_PI_CNT_BIN_LDr_CNT_BIN_D_LDf_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_LDr_CNT_BIN_D_LDf_SET
#define DSC_RX_PI_CNT_BIN_LDr_CNT_BIN_L_LDf_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_LDr_CNT_BIN_L_LDf_GET
#define DSC_RX_PI_CNT_BIN_LDr_CNT_BIN_L_LDf_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_LDr_CNT_BIN_L_LDf_SET
#define READ_DSC_RX_PI_CNT_BIN_LDr BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_PI_CNT_BIN_LDr
#define WRITE_DSC_RX_PI_CNT_BIN_LDr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_PI_CNT_BIN_LDr
#define MODIFY_DSC_RX_PI_CNT_BIN_LDr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_PI_CNT_BIN_LDr
#define READLN_DSC_RX_PI_CNT_BIN_LDr BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_PI_CNT_BIN_LDr
#define WRITELN_DSC_RX_PI_CNT_BIN_LDr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_PI_CNT_BIN_LDr
#define WRITEALL_DSC_RX_PI_CNT_BIN_LDr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_PI_CNT_BIN_LDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_LDr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_RX_DATA_15_TO0
 * BLOCKS:   DSC_E
 * REGADDR:  0xd072
 * DEVAD:    1
 * DESC:     rx data bits 15 to 0.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     RX_DATA_15_TO_0  Rx data is 40 bit wide in rclk40 domain. These are bits 15 to 0.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DATA_15_TO0r (0x0001d072 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DATA_15_TO0r_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DATA_15_TO0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_RX_DATA_15_TO0r_s {
	uint32_t v[1];
	uint32_t dsc_rx_data_15_to0[1];
	uint32_t _dsc_rx_data_15_to0;
} BCMI_TSCF_GEN3_XGXS_DSC_RX_DATA_15_TO0r_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DATA_15_TO0r_CLR(r) (r).dsc_rx_data_15_to0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DATA_15_TO0r_SET(r,d) (r).dsc_rx_data_15_to0[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DATA_15_TO0r_GET(r) (r).dsc_rx_data_15_to0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DATA_15_TO0r_RX_DATA_15_TO_0f_GET(r) (((r).dsc_rx_data_15_to0[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DATA_15_TO0r_RX_DATA_15_TO_0f_SET(r,f) (r).dsc_rx_data_15_to0[0]=(((r).dsc_rx_data_15_to0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access DSC_RX_DATA_15_TO0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_DATA_15_TO0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DATA_15_TO0r,(_r._dsc_rx_data_15_to0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_DATA_15_TO0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DATA_15_TO0r,(_r._dsc_rx_data_15_to0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_DATA_15_TO0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DATA_15_TO0r,(_r._dsc_rx_data_15_to0))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_DATA_15_TO0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DATA_15_TO0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_data_15_to0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_DATA_15_TO0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DATA_15_TO0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_data_15_to0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_DATA_15_TO0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DATA_15_TO0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_data_15_to0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DATA_15_TO0r BCMI_TSCF_GEN3_XGXS_DSC_RX_DATA_15_TO0r
#define DSC_RX_DATA_15_TO0r_SIZE BCMI_TSCF_GEN3_XGXS_DSC_RX_DATA_15_TO0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_RX_DATA_15_TO0r_t DSC_RX_DATA_15_TO0r_t;
#define DSC_RX_DATA_15_TO0r_CLR BCMI_TSCF_GEN3_XGXS_DSC_RX_DATA_15_TO0r_CLR
#define DSC_RX_DATA_15_TO0r_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DATA_15_TO0r_SET
#define DSC_RX_DATA_15_TO0r_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DATA_15_TO0r_GET
#define DSC_RX_DATA_15_TO0r_RX_DATA_15_TO_0f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DATA_15_TO0r_RX_DATA_15_TO_0f_GET
#define DSC_RX_DATA_15_TO0r_RX_DATA_15_TO_0f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DATA_15_TO0r_RX_DATA_15_TO_0f_SET
#define READ_DSC_RX_DATA_15_TO0r BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_DATA_15_TO0r
#define WRITE_DSC_RX_DATA_15_TO0r BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_DATA_15_TO0r
#define MODIFY_DSC_RX_DATA_15_TO0r BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_DATA_15_TO0r
#define READLN_DSC_RX_DATA_15_TO0r BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_DATA_15_TO0r
#define WRITELN_DSC_RX_DATA_15_TO0r BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_DATA_15_TO0r
#define WRITEALL_DSC_RX_DATA_15_TO0r BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_DATA_15_TO0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_RX_DATA_15_TO0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_RX_DATA_35_TO_20
 * BLOCKS:   DSC_E
 * REGADDR:  0xd073
 * DEVAD:    1
 * DESC:     rx data bits 35 to 20.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     RX_DATA_35_TO_20 Rx data is 40 bit wide in rclk40 domain. These are bits 35 to 20.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DATA_35_TO_20r (0x0001d073 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DATA_35_TO_20r_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DATA_35_TO_20.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_RX_DATA_35_TO_20r_s {
	uint32_t v[1];
	uint32_t dsc_rx_data_35_to_20[1];
	uint32_t _dsc_rx_data_35_to_20;
} BCMI_TSCF_GEN3_XGXS_DSC_RX_DATA_35_TO_20r_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DATA_35_TO_20r_CLR(r) (r).dsc_rx_data_35_to_20[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DATA_35_TO_20r_SET(r,d) (r).dsc_rx_data_35_to_20[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DATA_35_TO_20r_GET(r) (r).dsc_rx_data_35_to_20[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DATA_35_TO_20r_RX_DATA_35_TO_20f_GET(r) (((r).dsc_rx_data_35_to_20[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_DATA_35_TO_20r_RX_DATA_35_TO_20f_SET(r,f) (r).dsc_rx_data_35_to_20[0]=(((r).dsc_rx_data_35_to_20[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access DSC_RX_DATA_35_TO_20.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_DATA_35_TO_20r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DATA_35_TO_20r,(_r._dsc_rx_data_35_to_20))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_DATA_35_TO_20r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DATA_35_TO_20r,(_r._dsc_rx_data_35_to_20)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_DATA_35_TO_20r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DATA_35_TO_20r,(_r._dsc_rx_data_35_to_20))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_DATA_35_TO_20r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DATA_35_TO_20r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_data_35_to_20))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_DATA_35_TO_20r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DATA_35_TO_20r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_data_35_to_20))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_DATA_35_TO_20r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_DATA_35_TO_20r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_data_35_to_20))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DATA_35_TO_20r BCMI_TSCF_GEN3_XGXS_DSC_RX_DATA_35_TO_20r
#define DSC_RX_DATA_35_TO_20r_SIZE BCMI_TSCF_GEN3_XGXS_DSC_RX_DATA_35_TO_20r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_RX_DATA_35_TO_20r_t DSC_RX_DATA_35_TO_20r_t;
#define DSC_RX_DATA_35_TO_20r_CLR BCMI_TSCF_GEN3_XGXS_DSC_RX_DATA_35_TO_20r_CLR
#define DSC_RX_DATA_35_TO_20r_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DATA_35_TO_20r_SET
#define DSC_RX_DATA_35_TO_20r_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DATA_35_TO_20r_GET
#define DSC_RX_DATA_35_TO_20r_RX_DATA_35_TO_20f_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_DATA_35_TO_20r_RX_DATA_35_TO_20f_GET
#define DSC_RX_DATA_35_TO_20r_RX_DATA_35_TO_20f_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_DATA_35_TO_20r_RX_DATA_35_TO_20f_SET
#define READ_DSC_RX_DATA_35_TO_20r BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_DATA_35_TO_20r
#define WRITE_DSC_RX_DATA_35_TO_20r BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_DATA_35_TO_20r
#define MODIFY_DSC_RX_DATA_35_TO_20r BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_DATA_35_TO_20r
#define READLN_DSC_RX_DATA_35_TO_20r BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_DATA_35_TO_20r
#define WRITELN_DSC_RX_DATA_35_TO_20r BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_DATA_35_TO_20r
#define WRITEALL_DSC_RX_DATA_35_TO_20r BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_DATA_35_TO_20r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_RX_DATA_35_TO_20r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_CDR_STS_PHASE_ERR
 * BLOCKS:   DSC_E
 * REGADDR:  0xd074
 * DEVAD:    1
 * DESC:     cdr status register.
 * RESETVAL: 0x100 (256)
 * ACCESS:   R/O
 * FIELDS:
 *     CDR_PHASE_ERROR  shadowed version of phase error value
 *     CDR_LM_OUTOFLOCK CDR Lock Monitor loss of lock (1 implies a potential loss of lock). This bit sets itself on register read.And if the cdr_integ_reg is within bounds it clears itself in the next cycle from which it detects within bounds. Note: Set on readThe valid bounds on the cdr_integ_reg are programmed using cdr_lm_thr_selHas more meaning after rx_dsc_lock is asserted.
 *     CDR_VCO_REG      shadowed version of cdr_vco_reg[3:0]
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_PHASE_ERRr (0x0001d074 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_PHASE_ERRr_SIZE 4

/*
 * This structure should be used to declare and program DSC_CDR_STS_PHASE_ERR.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_PHASE_ERRr_s {
	uint32_t v[1];
	uint32_t dsc_cdr_sts_phase_err[1];
	uint32_t _dsc_cdr_sts_phase_err;
} BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_PHASE_ERRr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_PHASE_ERRr_CLR(r) (r).dsc_cdr_sts_phase_err[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_PHASE_ERRr_SET(r,d) (r).dsc_cdr_sts_phase_err[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_PHASE_ERRr_GET(r) (r).dsc_cdr_sts_phase_err[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_PHASE_ERRr_CDR_VCO_REGf_GET(r) ((((r).dsc_cdr_sts_phase_err[0]) >> 12) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_PHASE_ERRr_CDR_VCO_REGf_SET(r,f) (r).dsc_cdr_sts_phase_err[0]=(((r).dsc_cdr_sts_phase_err[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_PHASE_ERRr_CDR_LM_OUTOFLOCKf_GET(r) ((((r).dsc_cdr_sts_phase_err[0]) >> 8) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_PHASE_ERRr_CDR_LM_OUTOFLOCKf_SET(r,f) (r).dsc_cdr_sts_phase_err[0]=(((r).dsc_cdr_sts_phase_err[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_PHASE_ERRr_CDR_PHASE_ERRORf_GET(r) (((r).dsc_cdr_sts_phase_err[0]) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_PHASE_ERRr_CDR_PHASE_ERRORf_SET(r,f) (r).dsc_cdr_sts_phase_err[0]=(((r).dsc_cdr_sts_phase_err[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access DSC_CDR_STS_PHASE_ERR.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_CDR_STS_PHASE_ERRr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_PHASE_ERRr,(_r._dsc_cdr_sts_phase_err))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_CDR_STS_PHASE_ERRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_PHASE_ERRr,(_r._dsc_cdr_sts_phase_err)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_CDR_STS_PHASE_ERRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_PHASE_ERRr,(_r._dsc_cdr_sts_phase_err))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_CDR_STS_PHASE_ERRr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_PHASE_ERRr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_cdr_sts_phase_err))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_CDR_STS_PHASE_ERRr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_PHASE_ERRr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_cdr_sts_phase_err))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_CDR_STS_PHASE_ERRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_PHASE_ERRr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_cdr_sts_phase_err))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_CDR_STS_PHASE_ERRr BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_PHASE_ERRr
#define DSC_CDR_STS_PHASE_ERRr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_PHASE_ERRr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_PHASE_ERRr_t DSC_CDR_STS_PHASE_ERRr_t;
#define DSC_CDR_STS_PHASE_ERRr_CLR BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_PHASE_ERRr_CLR
#define DSC_CDR_STS_PHASE_ERRr_SET BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_PHASE_ERRr_SET
#define DSC_CDR_STS_PHASE_ERRr_GET BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_PHASE_ERRr_GET
#define DSC_CDR_STS_PHASE_ERRr_CDR_VCO_REGf_GET BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_PHASE_ERRr_CDR_VCO_REGf_GET
#define DSC_CDR_STS_PHASE_ERRr_CDR_VCO_REGf_SET BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_PHASE_ERRr_CDR_VCO_REGf_SET
#define DSC_CDR_STS_PHASE_ERRr_CDR_LM_OUTOFLOCKf_GET BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_PHASE_ERRr_CDR_LM_OUTOFLOCKf_GET
#define DSC_CDR_STS_PHASE_ERRr_CDR_LM_OUTOFLOCKf_SET BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_PHASE_ERRr_CDR_LM_OUTOFLOCKf_SET
#define DSC_CDR_STS_PHASE_ERRr_CDR_PHASE_ERRORf_GET BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_PHASE_ERRr_CDR_PHASE_ERRORf_GET
#define DSC_CDR_STS_PHASE_ERRr_CDR_PHASE_ERRORf_SET BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_PHASE_ERRr_CDR_PHASE_ERRORf_SET
#define READ_DSC_CDR_STS_PHASE_ERRr BCMI_TSCF_GEN3_XGXS_READ_DSC_CDR_STS_PHASE_ERRr
#define WRITE_DSC_CDR_STS_PHASE_ERRr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_CDR_STS_PHASE_ERRr
#define MODIFY_DSC_CDR_STS_PHASE_ERRr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_CDR_STS_PHASE_ERRr
#define READLN_DSC_CDR_STS_PHASE_ERRr BCMI_TSCF_GEN3_XGXS_READLN_DSC_CDR_STS_PHASE_ERRr
#define WRITELN_DSC_CDR_STS_PHASE_ERRr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_CDR_STS_PHASE_ERRr
#define WRITEALL_DSC_CDR_STS_PHASE_ERRr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_CDR_STS_PHASE_ERRr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_PHASE_ERRr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_RX_PI_CNT_BIN_D
 * BLOCKS:   DSC_E
 * REGADDR:  0xd075
 * DEVAD:    1
 * DESC:     rx_pi status register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CNT_BIN_D        PI counter value for data slicer
 *     CNT_BIN_DQ       PI counter value for data quadrature slicer
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Dr (0x0001d075 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Dr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_PI_CNT_BIN_D.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Dr_s {
	uint32_t v[1];
	uint32_t dsc_rx_pi_cnt_bin_d[1];
	uint32_t _dsc_rx_pi_cnt_bin_d;
} BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Dr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Dr_CLR(r) (r).dsc_rx_pi_cnt_bin_d[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Dr_SET(r,d) (r).dsc_rx_pi_cnt_bin_d[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Dr_GET(r) (r).dsc_rx_pi_cnt_bin_d[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Dr_CNT_BIN_DQf_GET(r) ((((r).dsc_rx_pi_cnt_bin_d[0]) >> 8) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Dr_CNT_BIN_DQf_SET(r,f) (r).dsc_rx_pi_cnt_bin_d[0]=(((r).dsc_rx_pi_cnt_bin_d[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Dr_CNT_BIN_Df_GET(r) (((r).dsc_rx_pi_cnt_bin_d[0]) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Dr_CNT_BIN_Df_SET(r,f) (r).dsc_rx_pi_cnt_bin_d[0]=(((r).dsc_rx_pi_cnt_bin_d[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access DSC_RX_PI_CNT_BIN_D.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_PI_CNT_BIN_Dr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Dr,(_r._dsc_rx_pi_cnt_bin_d))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_PI_CNT_BIN_Dr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Dr,(_r._dsc_rx_pi_cnt_bin_d)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_PI_CNT_BIN_Dr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Dr,(_r._dsc_rx_pi_cnt_bin_d))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_PI_CNT_BIN_Dr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Dr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_pi_cnt_bin_d))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_PI_CNT_BIN_Dr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Dr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_pi_cnt_bin_d))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_PI_CNT_BIN_Dr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Dr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_pi_cnt_bin_d))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_PI_CNT_BIN_Dr BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Dr
#define DSC_RX_PI_CNT_BIN_Dr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Dr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Dr_t DSC_RX_PI_CNT_BIN_Dr_t;
#define DSC_RX_PI_CNT_BIN_Dr_CLR BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Dr_CLR
#define DSC_RX_PI_CNT_BIN_Dr_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Dr_SET
#define DSC_RX_PI_CNT_BIN_Dr_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Dr_GET
#define DSC_RX_PI_CNT_BIN_Dr_CNT_BIN_DQf_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Dr_CNT_BIN_DQf_GET
#define DSC_RX_PI_CNT_BIN_Dr_CNT_BIN_DQf_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Dr_CNT_BIN_DQf_SET
#define DSC_RX_PI_CNT_BIN_Dr_CNT_BIN_Df_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Dr_CNT_BIN_Df_GET
#define DSC_RX_PI_CNT_BIN_Dr_CNT_BIN_Df_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Dr_CNT_BIN_Df_SET
#define READ_DSC_RX_PI_CNT_BIN_Dr BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_PI_CNT_BIN_Dr
#define WRITE_DSC_RX_PI_CNT_BIN_Dr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_PI_CNT_BIN_Dr
#define MODIFY_DSC_RX_PI_CNT_BIN_Dr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_PI_CNT_BIN_Dr
#define READLN_DSC_RX_PI_CNT_BIN_Dr BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_PI_CNT_BIN_Dr
#define WRITELN_DSC_RX_PI_CNT_BIN_Dr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_PI_CNT_BIN_Dr
#define WRITEALL_DSC_RX_PI_CNT_BIN_Dr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_PI_CNT_BIN_Dr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Dr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_RX_PI_CNT_BIN_P
 * BLOCKS:   DSC_E
 * REGADDR:  0xd076
 * DEVAD:    1
 * DESC:     rx_pi status register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CNT_BIN_P        PI counter value for phase slicer
 *     CNT_BIN_PQ       PI counter value for phase quadrature slicer
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Pr (0x0001d076 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Pr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_PI_CNT_BIN_P.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Pr_s {
	uint32_t v[1];
	uint32_t dsc_rx_pi_cnt_bin_p[1];
	uint32_t _dsc_rx_pi_cnt_bin_p;
} BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Pr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Pr_CLR(r) (r).dsc_rx_pi_cnt_bin_p[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Pr_SET(r,d) (r).dsc_rx_pi_cnt_bin_p[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Pr_GET(r) (r).dsc_rx_pi_cnt_bin_p[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Pr_CNT_BIN_PQf_GET(r) ((((r).dsc_rx_pi_cnt_bin_p[0]) >> 8) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Pr_CNT_BIN_PQf_SET(r,f) (r).dsc_rx_pi_cnt_bin_p[0]=(((r).dsc_rx_pi_cnt_bin_p[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Pr_CNT_BIN_Pf_GET(r) (((r).dsc_rx_pi_cnt_bin_p[0]) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Pr_CNT_BIN_Pf_SET(r,f) (r).dsc_rx_pi_cnt_bin_p[0]=(((r).dsc_rx_pi_cnt_bin_p[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access DSC_RX_PI_CNT_BIN_P.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_PI_CNT_BIN_Pr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Pr,(_r._dsc_rx_pi_cnt_bin_p))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_PI_CNT_BIN_Pr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Pr,(_r._dsc_rx_pi_cnt_bin_p)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_PI_CNT_BIN_Pr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Pr,(_r._dsc_rx_pi_cnt_bin_p))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_PI_CNT_BIN_Pr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Pr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_pi_cnt_bin_p))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_PI_CNT_BIN_Pr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Pr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_pi_cnt_bin_p))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_PI_CNT_BIN_Pr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Pr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_pi_cnt_bin_p))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_PI_CNT_BIN_Pr BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Pr
#define DSC_RX_PI_CNT_BIN_Pr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Pr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Pr_t DSC_RX_PI_CNT_BIN_Pr_t;
#define DSC_RX_PI_CNT_BIN_Pr_CLR BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Pr_CLR
#define DSC_RX_PI_CNT_BIN_Pr_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Pr_SET
#define DSC_RX_PI_CNT_BIN_Pr_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Pr_GET
#define DSC_RX_PI_CNT_BIN_Pr_CNT_BIN_PQf_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Pr_CNT_BIN_PQf_GET
#define DSC_RX_PI_CNT_BIN_Pr_CNT_BIN_PQf_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Pr_CNT_BIN_PQf_SET
#define DSC_RX_PI_CNT_BIN_Pr_CNT_BIN_Pf_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Pr_CNT_BIN_Pf_GET
#define DSC_RX_PI_CNT_BIN_Pr_CNT_BIN_Pf_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Pr_CNT_BIN_Pf_SET
#define READ_DSC_RX_PI_CNT_BIN_Pr BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_PI_CNT_BIN_Pr
#define WRITE_DSC_RX_PI_CNT_BIN_Pr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_PI_CNT_BIN_Pr
#define MODIFY_DSC_RX_PI_CNT_BIN_Pr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_PI_CNT_BIN_Pr
#define READLN_DSC_RX_PI_CNT_BIN_Pr BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_PI_CNT_BIN_Pr
#define WRITELN_DSC_RX_PI_CNT_BIN_Pr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_PI_CNT_BIN_Pr
#define WRITEALL_DSC_RX_PI_CNT_BIN_Pr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_PI_CNT_BIN_Pr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Pr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_RX_PI_CNT_BIN_L
 * BLOCKS:   DSC_E
 * REGADDR:  0xd077
 * DEVAD:    1
 * DESC:     rx_pi status register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CNT_BIN_L        PI counter value for LMS slicer
 *     CNT_BIN_LQ       PI counter value for LMS quadrature slicer
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Lr (0x0001d077 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Lr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_PI_CNT_BIN_L.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Lr_s {
	uint32_t v[1];
	uint32_t dsc_rx_pi_cnt_bin_l[1];
	uint32_t _dsc_rx_pi_cnt_bin_l;
} BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Lr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Lr_CLR(r) (r).dsc_rx_pi_cnt_bin_l[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Lr_SET(r,d) (r).dsc_rx_pi_cnt_bin_l[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Lr_GET(r) (r).dsc_rx_pi_cnt_bin_l[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Lr_CNT_BIN_LQf_GET(r) ((((r).dsc_rx_pi_cnt_bin_l[0]) >> 8) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Lr_CNT_BIN_LQf_SET(r,f) (r).dsc_rx_pi_cnt_bin_l[0]=(((r).dsc_rx_pi_cnt_bin_l[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Lr_CNT_BIN_Lf_GET(r) (((r).dsc_rx_pi_cnt_bin_l[0]) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Lr_CNT_BIN_Lf_SET(r,f) (r).dsc_rx_pi_cnt_bin_l[0]=(((r).dsc_rx_pi_cnt_bin_l[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access DSC_RX_PI_CNT_BIN_L.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_PI_CNT_BIN_Lr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Lr,(_r._dsc_rx_pi_cnt_bin_l))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_PI_CNT_BIN_Lr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Lr,(_r._dsc_rx_pi_cnt_bin_l)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_PI_CNT_BIN_Lr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Lr,(_r._dsc_rx_pi_cnt_bin_l))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_PI_CNT_BIN_Lr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Lr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_pi_cnt_bin_l))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_PI_CNT_BIN_Lr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Lr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_pi_cnt_bin_l))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_PI_CNT_BIN_Lr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Lr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_pi_cnt_bin_l))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_PI_CNT_BIN_Lr BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Lr
#define DSC_RX_PI_CNT_BIN_Lr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Lr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Lr_t DSC_RX_PI_CNT_BIN_Lr_t;
#define DSC_RX_PI_CNT_BIN_Lr_CLR BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Lr_CLR
#define DSC_RX_PI_CNT_BIN_Lr_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Lr_SET
#define DSC_RX_PI_CNT_BIN_Lr_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Lr_GET
#define DSC_RX_PI_CNT_BIN_Lr_CNT_BIN_LQf_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Lr_CNT_BIN_LQf_GET
#define DSC_RX_PI_CNT_BIN_Lr_CNT_BIN_LQf_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Lr_CNT_BIN_LQf_SET
#define DSC_RX_PI_CNT_BIN_Lr_CNT_BIN_Lf_GET BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Lr_CNT_BIN_Lf_GET
#define DSC_RX_PI_CNT_BIN_Lr_CNT_BIN_Lf_SET BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Lr_CNT_BIN_Lf_SET
#define READ_DSC_RX_PI_CNT_BIN_Lr BCMI_TSCF_GEN3_XGXS_READ_DSC_RX_PI_CNT_BIN_Lr
#define WRITE_DSC_RX_PI_CNT_BIN_Lr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_RX_PI_CNT_BIN_Lr
#define MODIFY_DSC_RX_PI_CNT_BIN_Lr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_RX_PI_CNT_BIN_Lr
#define READLN_DSC_RX_PI_CNT_BIN_Lr BCMI_TSCF_GEN3_XGXS_READLN_DSC_RX_PI_CNT_BIN_Lr
#define WRITELN_DSC_RX_PI_CNT_BIN_Lr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_RX_PI_CNT_BIN_Lr
#define WRITEALL_DSC_RX_PI_CNT_BIN_Lr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_RX_PI_CNT_BIN_Lr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_RX_PI_CNT_BIN_Lr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_CDR_STS_INTEG
 * BLOCKS:   DSC_E
 * REGADDR:  0xd078
 * DEVAD:    1
 * DESC:     cdr status register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CDR_INTEG_REG    Divide this by 83.886 to get the approximate ppm frequency offset the CDR is tracking. (The CDR must settle first - rx_dsc_lock asserted high).
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_INTEGr (0x0001d078 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_INTEGr_SIZE 4

/*
 * This structure should be used to declare and program DSC_CDR_STS_INTEG.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_INTEGr_s {
	uint32_t v[1];
	uint32_t dsc_cdr_sts_integ[1];
	uint32_t _dsc_cdr_sts_integ;
} BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_INTEGr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_INTEGr_CLR(r) (r).dsc_cdr_sts_integ[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_INTEGr_SET(r,d) (r).dsc_cdr_sts_integ[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_INTEGr_GET(r) (r).dsc_cdr_sts_integ[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_INTEGr_CDR_INTEG_REGf_GET(r) (((r).dsc_cdr_sts_integ[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_INTEGr_CDR_INTEG_REGf_SET(r,f) (r).dsc_cdr_sts_integ[0]=(((r).dsc_cdr_sts_integ[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access DSC_CDR_STS_INTEG.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_CDR_STS_INTEGr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_INTEGr,(_r._dsc_cdr_sts_integ))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_CDR_STS_INTEGr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_INTEGr,(_r._dsc_cdr_sts_integ)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_CDR_STS_INTEGr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_INTEGr,(_r._dsc_cdr_sts_integ))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_CDR_STS_INTEGr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_INTEGr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_cdr_sts_integ))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_CDR_STS_INTEGr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_INTEGr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_cdr_sts_integ))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_CDR_STS_INTEGr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_INTEGr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_cdr_sts_integ))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_CDR_STS_INTEGr BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_INTEGr
#define DSC_CDR_STS_INTEGr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_INTEGr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_INTEGr_t DSC_CDR_STS_INTEGr_t;
#define DSC_CDR_STS_INTEGr_CLR BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_INTEGr_CLR
#define DSC_CDR_STS_INTEGr_SET BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_INTEGr_SET
#define DSC_CDR_STS_INTEGr_GET BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_INTEGr_GET
#define DSC_CDR_STS_INTEGr_CDR_INTEG_REGf_GET BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_INTEGr_CDR_INTEG_REGf_GET
#define DSC_CDR_STS_INTEGr_CDR_INTEG_REGf_SET BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_INTEGr_CDR_INTEG_REGf_SET
#define READ_DSC_CDR_STS_INTEGr BCMI_TSCF_GEN3_XGXS_READ_DSC_CDR_STS_INTEGr
#define WRITE_DSC_CDR_STS_INTEGr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_CDR_STS_INTEGr
#define MODIFY_DSC_CDR_STS_INTEGr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_CDR_STS_INTEGr
#define READLN_DSC_CDR_STS_INTEGr BCMI_TSCF_GEN3_XGXS_READLN_DSC_CDR_STS_INTEGr
#define WRITELN_DSC_CDR_STS_INTEGr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_CDR_STS_INTEGr
#define WRITEALL_DSC_CDR_STS_INTEGr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_CDR_STS_INTEGr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_CDR_STS_INTEGr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_CDR_1G_STS
 * BLOCKS:   DSC_E
 * REGADDR:  0xd07a
 * DEVAD:    1
 * DESC:     1g cdr status reg
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CDR_1G_PHASE_POINTER 1G phase pointer - currently wraps @ 33. Not used for 20.625
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_1G_STSr (0x0001d07a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_1G_STSr_SIZE 4

/*
 * This structure should be used to declare and program DSC_CDR_1G_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_CDR_1G_STSr_s {
	uint32_t v[1];
	uint32_t dsc_cdr_1g_sts[1];
	uint32_t _dsc_cdr_1g_sts;
} BCMI_TSCF_GEN3_XGXS_DSC_CDR_1G_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_1G_STSr_CLR(r) (r).dsc_cdr_1g_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_1G_STSr_SET(r,d) (r).dsc_cdr_1g_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_1G_STSr_GET(r) (r).dsc_cdr_1g_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_1G_STSr_CDR_1G_PHASE_POINTERf_GET(r) (((r).dsc_cdr_1g_sts[0]) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_DSC_CDR_1G_STSr_CDR_1G_PHASE_POINTERf_SET(r,f) (r).dsc_cdr_1g_sts[0]=(((r).dsc_cdr_1g_sts[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access DSC_CDR_1G_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_CDR_1G_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_CDR_1G_STSr,(_r._dsc_cdr_1g_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_CDR_1G_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_CDR_1G_STSr,(_r._dsc_cdr_1g_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_CDR_1G_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_CDR_1G_STSr,(_r._dsc_cdr_1g_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_CDR_1G_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_CDR_1G_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_cdr_1g_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_CDR_1G_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_CDR_1G_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_cdr_1g_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_CDR_1G_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_CDR_1G_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_cdr_1g_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_CDR_1G_STSr BCMI_TSCF_GEN3_XGXS_DSC_CDR_1G_STSr
#define DSC_CDR_1G_STSr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_CDR_1G_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_CDR_1G_STSr_t DSC_CDR_1G_STSr_t;
#define DSC_CDR_1G_STSr_CLR BCMI_TSCF_GEN3_XGXS_DSC_CDR_1G_STSr_CLR
#define DSC_CDR_1G_STSr_SET BCMI_TSCF_GEN3_XGXS_DSC_CDR_1G_STSr_SET
#define DSC_CDR_1G_STSr_GET BCMI_TSCF_GEN3_XGXS_DSC_CDR_1G_STSr_GET
#define DSC_CDR_1G_STSr_CDR_1G_PHASE_POINTERf_GET BCMI_TSCF_GEN3_XGXS_DSC_CDR_1G_STSr_CDR_1G_PHASE_POINTERf_GET
#define DSC_CDR_1G_STSr_CDR_1G_PHASE_POINTERf_SET BCMI_TSCF_GEN3_XGXS_DSC_CDR_1G_STSr_CDR_1G_PHASE_POINTERf_SET
#define READ_DSC_CDR_1G_STSr BCMI_TSCF_GEN3_XGXS_READ_DSC_CDR_1G_STSr
#define WRITE_DSC_CDR_1G_STSr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_CDR_1G_STSr
#define MODIFY_DSC_CDR_1G_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_CDR_1G_STSr
#define READLN_DSC_CDR_1G_STSr BCMI_TSCF_GEN3_XGXS_READLN_DSC_CDR_1G_STSr
#define WRITELN_DSC_CDR_1G_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_CDR_1G_STSr
#define WRITEALL_DSC_CDR_1G_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_CDR_1G_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_CDR_1G_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DSC_PRESET
 * BLOCKS:   DSC_E
 * REGADDR:  0xd07e
 * DEVAD:    1
 * DESC:     preset register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     PRESET_C         Preset bit 1. Hooked up to DSC_C register bank
 *     PRESET_D         Preset bit 2. Hooked up to DSC_D register bank
 *     PRESET_A         Preset bit 3. Hooked up to gen purpose bank a
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_PRESETr (0x0001d07e | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DSC_PRESETr_SIZE 4

/*
 * This structure should be used to declare and program DSC_PRESET.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DSC_PRESETr_s {
	uint32_t v[1];
	uint32_t dsc_preset[1];
	uint32_t _dsc_preset;
} BCMI_TSCF_GEN3_XGXS_DSC_PRESETr_t;

#define BCMI_TSCF_GEN3_XGXS_DSC_PRESETr_CLR(r) (r).dsc_preset[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DSC_PRESETr_SET(r,d) (r).dsc_preset[0] = d
#define BCMI_TSCF_GEN3_XGXS_DSC_PRESETr_GET(r) (r).dsc_preset[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DSC_PRESETr_PRESET_Af_GET(r) ((((r).dsc_preset[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_PRESETr_PRESET_Af_SET(r,f) (r).dsc_preset[0]=(((r).dsc_preset[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_DSC_PRESETr_PRESET_Df_GET(r) ((((r).dsc_preset[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_PRESETr_PRESET_Df_SET(r,f) (r).dsc_preset[0]=(((r).dsc_preset[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_DSC_PRESETr_PRESET_Cf_GET(r) (((r).dsc_preset[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DSC_PRESETr_PRESET_Cf_SET(r,f) (r).dsc_preset[0]=(((r).dsc_preset[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access DSC_PRESET.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DSC_PRESETr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_PRESETr,(_r._dsc_preset))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DSC_PRESETr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_PRESETr,(_r._dsc_preset)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_PRESETr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_PRESETr,(_r._dsc_preset))
#define BCMI_TSCF_GEN3_XGXS_READLN_DSC_PRESETr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DSC_PRESETr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_preset))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_PRESETr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_PRESETr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_preset))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_PRESETr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DSC_PRESETr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_preset))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_PRESETr BCMI_TSCF_GEN3_XGXS_DSC_PRESETr
#define DSC_PRESETr_SIZE BCMI_TSCF_GEN3_XGXS_DSC_PRESETr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DSC_PRESETr_t DSC_PRESETr_t;
#define DSC_PRESETr_CLR BCMI_TSCF_GEN3_XGXS_DSC_PRESETr_CLR
#define DSC_PRESETr_SET BCMI_TSCF_GEN3_XGXS_DSC_PRESETr_SET
#define DSC_PRESETr_GET BCMI_TSCF_GEN3_XGXS_DSC_PRESETr_GET
#define DSC_PRESETr_PRESET_Af_GET BCMI_TSCF_GEN3_XGXS_DSC_PRESETr_PRESET_Af_GET
#define DSC_PRESETr_PRESET_Af_SET BCMI_TSCF_GEN3_XGXS_DSC_PRESETr_PRESET_Af_SET
#define DSC_PRESETr_PRESET_Df_GET BCMI_TSCF_GEN3_XGXS_DSC_PRESETr_PRESET_Df_GET
#define DSC_PRESETr_PRESET_Df_SET BCMI_TSCF_GEN3_XGXS_DSC_PRESETr_PRESET_Df_SET
#define DSC_PRESETr_PRESET_Cf_GET BCMI_TSCF_GEN3_XGXS_DSC_PRESETr_PRESET_Cf_GET
#define DSC_PRESETr_PRESET_Cf_SET BCMI_TSCF_GEN3_XGXS_DSC_PRESETr_PRESET_Cf_SET
#define READ_DSC_PRESETr BCMI_TSCF_GEN3_XGXS_READ_DSC_PRESETr
#define WRITE_DSC_PRESETr BCMI_TSCF_GEN3_XGXS_WRITE_DSC_PRESETr
#define MODIFY_DSC_PRESETr BCMI_TSCF_GEN3_XGXS_MODIFY_DSC_PRESETr
#define READLN_DSC_PRESETr BCMI_TSCF_GEN3_XGXS_READLN_DSC_PRESETr
#define WRITELN_DSC_PRESETr BCMI_TSCF_GEN3_XGXS_WRITELN_DSC_PRESETr
#define WRITEALL_DSC_PRESETr BCMI_TSCF_GEN3_XGXS_WRITEALL_DSC_PRESETr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DSC_PRESETr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  CL93N72_UR_CTL0
 * BLOCKS:   CL93N72_USER_RX
 * REGADDR:  0xd080
 * DEVAD:    1
 * DESC:     Control 0 Register
 * RESETVAL: 0x4 (4)
 * ACCESS:   R/W
 * FIELDS:
 *     CL93N72_RX_TRAINING_EN RX Training EnableEnables the frame lock fsm on the RX sides
 *     CL93N72_TR_COARSE_LOCK Set to TRUE (1'b1) by the micro when coarse lock to recovered clock has occured.cl93n72_pmd, then, proceeds with establishing frame_lock.
 *     CL93N72_RX_SIGNAL_OK Firmware sets this bit to 1'b0 when the training is in progressand sets this bit to 1'b1 when the training is complete
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL0r (0x0001d080 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_UR_CTL0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL0r_s {
	uint32_t v[1];
	uint32_t cl93n72_ur_ctl0[1];
	uint32_t _cl93n72_ur_ctl0;
} BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL0r_t;

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL0r_CLR(r) (r).cl93n72_ur_ctl0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL0r_SET(r,d) (r).cl93n72_ur_ctl0[0] = d
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL0r_GET(r) (r).cl93n72_ur_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL0r_CL93N72_RX_SIGNAL_OKf_GET(r) ((((r).cl93n72_ur_ctl0[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL0r_CL93N72_RX_SIGNAL_OKf_SET(r,f) (r).cl93n72_ur_ctl0[0]=(((r).cl93n72_ur_ctl0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL0r_CL93N72_TR_COARSE_LOCKf_GET(r) ((((r).cl93n72_ur_ctl0[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL0r_CL93N72_TR_COARSE_LOCKf_SET(r,f) (r).cl93n72_ur_ctl0[0]=(((r).cl93n72_ur_ctl0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL0r_CL93N72_RX_TRAINING_ENf_GET(r) (((r).cl93n72_ur_ctl0[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL0r_CL93N72_RX_TRAINING_ENf_SET(r,f) (r).cl93n72_ur_ctl0[0]=(((r).cl93n72_ur_ctl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access CL93N72_UR_CTL0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UR_CTL0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL0r,(_r._cl93n72_ur_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UR_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL0r,(_r._cl93n72_ur_ctl0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UR_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL0r,(_r._cl93n72_ur_ctl0))
#define BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UR_CTL0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ur_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UR_CTL0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ur_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UR_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_ur_ctl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_UR_CTL0r BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL0r
#define CL93N72_UR_CTL0r_SIZE BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL0r_t CL93N72_UR_CTL0r_t;
#define CL93N72_UR_CTL0r_CLR BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL0r_CLR
#define CL93N72_UR_CTL0r_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL0r_SET
#define CL93N72_UR_CTL0r_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL0r_GET
#define CL93N72_UR_CTL0r_CL93N72_RX_SIGNAL_OKf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL0r_CL93N72_RX_SIGNAL_OKf_GET
#define CL93N72_UR_CTL0r_CL93N72_RX_SIGNAL_OKf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL0r_CL93N72_RX_SIGNAL_OKf_SET
#define CL93N72_UR_CTL0r_CL93N72_TR_COARSE_LOCKf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL0r_CL93N72_TR_COARSE_LOCKf_GET
#define CL93N72_UR_CTL0r_CL93N72_TR_COARSE_LOCKf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL0r_CL93N72_TR_COARSE_LOCKf_SET
#define CL93N72_UR_CTL0r_CL93N72_RX_TRAINING_ENf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL0r_CL93N72_RX_TRAINING_ENf_GET
#define CL93N72_UR_CTL0r_CL93N72_RX_TRAINING_ENf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL0r_CL93N72_RX_TRAINING_ENf_SET
#define READ_CL93N72_UR_CTL0r BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UR_CTL0r
#define WRITE_CL93N72_UR_CTL0r BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UR_CTL0r
#define MODIFY_CL93N72_UR_CTL0r BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UR_CTL0r
#define READLN_CL93N72_UR_CTL0r BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UR_CTL0r
#define WRITELN_CL93N72_UR_CTL0r BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UR_CTL0r
#define WRITEALL_CL93N72_UR_CTL0r BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UR_CTL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  CL93N72_UR_CTL1
 * BLOCKS:   CL93N72_USER_RX
 * REGADDR:  0xd081
 * DEVAD:    1
 * DESC:     Control 1 Register
 * RESETVAL: 0x52 (82)
 * ACCESS:   R/W
 * FIELDS:
 *     CL93N72_GOOD_MARKER_CNT Number of good marker to checkbefore enabling frame lock
 *     CL93N72_BAD_MARKER_CNT Number of bad marker to checkbefore losing frame lock
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL1r (0x0001d081 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL1r_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_UR_CTL1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL1r_s {
	uint32_t v[1];
	uint32_t cl93n72_ur_ctl1[1];
	uint32_t _cl93n72_ur_ctl1;
} BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL1r_t;

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL1r_CLR(r) (r).cl93n72_ur_ctl1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL1r_SET(r,d) (r).cl93n72_ur_ctl1[0] = d
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL1r_GET(r) (r).cl93n72_ur_ctl1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL1r_CL93N72_BAD_MARKER_CNTf_GET(r) ((((r).cl93n72_ur_ctl1[0]) >> 4) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL1r_CL93N72_BAD_MARKER_CNTf_SET(r,f) (r).cl93n72_ur_ctl1[0]=(((r).cl93n72_ur_ctl1[0] & ~((uint32_t)0x7 << 4)) | ((((uint32_t)f) & 0x7) << 4)) | (7 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL1r_CL93N72_GOOD_MARKER_CNTf_GET(r) (((r).cl93n72_ur_ctl1[0]) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL1r_CL93N72_GOOD_MARKER_CNTf_SET(r,f) (r).cl93n72_ur_ctl1[0]=(((r).cl93n72_ur_ctl1[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access CL93N72_UR_CTL1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UR_CTL1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL1r,(_r._cl93n72_ur_ctl1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UR_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL1r,(_r._cl93n72_ur_ctl1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UR_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL1r,(_r._cl93n72_ur_ctl1))
#define BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UR_CTL1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ur_ctl1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UR_CTL1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ur_ctl1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UR_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_ur_ctl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_UR_CTL1r BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL1r
#define CL93N72_UR_CTL1r_SIZE BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL1r_t CL93N72_UR_CTL1r_t;
#define CL93N72_UR_CTL1r_CLR BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL1r_CLR
#define CL93N72_UR_CTL1r_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL1r_SET
#define CL93N72_UR_CTL1r_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL1r_GET
#define CL93N72_UR_CTL1r_CL93N72_BAD_MARKER_CNTf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL1r_CL93N72_BAD_MARKER_CNTf_GET
#define CL93N72_UR_CTL1r_CL93N72_BAD_MARKER_CNTf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL1r_CL93N72_BAD_MARKER_CNTf_SET
#define CL93N72_UR_CTL1r_CL93N72_GOOD_MARKER_CNTf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL1r_CL93N72_GOOD_MARKER_CNTf_GET
#define CL93N72_UR_CTL1r_CL93N72_GOOD_MARKER_CNTf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL1r_CL93N72_GOOD_MARKER_CNTf_SET
#define READ_CL93N72_UR_CTL1r BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UR_CTL1r
#define WRITE_CL93N72_UR_CTL1r BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UR_CTL1r
#define MODIFY_CL93N72_UR_CTL1r BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UR_CTL1r
#define READLN_CL93N72_UR_CTL1r BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UR_CTL1r
#define WRITELN_CL93N72_UR_CTL1r BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UR_CTL1r
#define WRITEALL_CL93N72_UR_CTL1r BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UR_CTL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  CL93N72_UR_CTL2
 * BLOCKS:   CL93N72_USER_RX
 * REGADDR:  0xd082
 * DEVAD:    1
 * DESC:     Control 2 Register
 * RESETVAL: 0x310 (784)
 * ACCESS:   R/W
 * FIELDS:
 *     CL93N72_CTRL_FRAME_DLY 0   : dis1-7 : early delay w.r.t cl93n72 rcvd data (7 vals)8  : sync to cl93n72 rcvd data9-15 : late delay w.r.t cl93n72 rcvd data (7 vals)
 *     CL93N72_DME_CELL_BOUNDARY_CHK Check for DME cell boundary transitions0 - disabled1 - enabled
 *     CL93N72_STRICT_DME_CHK This field specifies whether the edges of DME cells are allowedto shift by a couple samples0 - ignore bits 0, 3, 4 and 7 of the DME cell1 - check all 8 bits of the DME cell
 *     CL93N72_STRICT_MARKER_CHK When determining frame lock, this field can be used tospecifies whether the edges of frame markers are allowedto shift by a couple samples0 - ignore first and last two samples of the marker1 - do not ignore first and last two samples of the markercheck for all 16 ones followed by 16 zeros
 *     CL93N72_PPM_OFFSET_EN if enabled, cl93n72 tracks ppm offset of incoming datawhile checking from frame lock, one bit offset ineither direction for every frame (~4384 bits)0 - disabled1 - enabled
 *     CL93N72_RX_DP_LN_CLK_EN cl93n72 Rx datapath lane clock enable0 - disabled1 - enabled
 *     CL93N72_FRAME_CONSISTENCY_CHK_EN cl93n72 frame consistency check enable0 - disabled1 - enabled - checks that three consective frames from the link partnerhas the same status response/coffcient update request informationbefore it set the sets the latched status bits
 *     CL93N72_BLOCK_LP_IEEE_UPDATES cl93n72 Block new lp ieee control/status page updates while an interrupt is pending0 - when the consistency checks are disabled, allow lp ieee control/status pagesto be updated upon receiving new pages all of the time1 - when the consistency checks are disabled, block lp ieee control/status pagesto be updated upon receiving new pages if an interrupt is already pending
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL2r (0x0001d082 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL2r_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_UR_CTL2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL2r_s {
	uint32_t v[1];
	uint32_t cl93n72_ur_ctl2[1];
	uint32_t _cl93n72_ur_ctl2;
} BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL2r_t;

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL2r_CLR(r) (r).cl93n72_ur_ctl2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL2r_SET(r,d) (r).cl93n72_ur_ctl2[0] = d
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL2r_GET(r) (r).cl93n72_ur_ctl2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL2r_CL93N72_BLOCK_LP_IEEE_UPDATESf_GET(r) ((((r).cl93n72_ur_ctl2[0]) >> 10) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL2r_CL93N72_BLOCK_LP_IEEE_UPDATESf_SET(r,f) (r).cl93n72_ur_ctl2[0]=(((r).cl93n72_ur_ctl2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL2r_CL93N72_FRAME_CONSISTENCY_CHK_ENf_GET(r) ((((r).cl93n72_ur_ctl2[0]) >> 9) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL2r_CL93N72_FRAME_CONSISTENCY_CHK_ENf_SET(r,f) (r).cl93n72_ur_ctl2[0]=(((r).cl93n72_ur_ctl2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL2r_CL93N72_RX_DP_LN_CLK_ENf_GET(r) ((((r).cl93n72_ur_ctl2[0]) >> 8) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL2r_CL93N72_RX_DP_LN_CLK_ENf_SET(r,f) (r).cl93n72_ur_ctl2[0]=(((r).cl93n72_ur_ctl2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL2r_CL93N72_PPM_OFFSET_ENf_GET(r) ((((r).cl93n72_ur_ctl2[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL2r_CL93N72_PPM_OFFSET_ENf_SET(r,f) (r).cl93n72_ur_ctl2[0]=(((r).cl93n72_ur_ctl2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL2r_CL93N72_STRICT_MARKER_CHKf_GET(r) ((((r).cl93n72_ur_ctl2[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL2r_CL93N72_STRICT_MARKER_CHKf_SET(r,f) (r).cl93n72_ur_ctl2[0]=(((r).cl93n72_ur_ctl2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL2r_CL93N72_STRICT_DME_CHKf_GET(r) ((((r).cl93n72_ur_ctl2[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL2r_CL93N72_STRICT_DME_CHKf_SET(r,f) (r).cl93n72_ur_ctl2[0]=(((r).cl93n72_ur_ctl2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL2r_CL93N72_DME_CELL_BOUNDARY_CHKf_GET(r) ((((r).cl93n72_ur_ctl2[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL2r_CL93N72_DME_CELL_BOUNDARY_CHKf_SET(r,f) (r).cl93n72_ur_ctl2[0]=(((r).cl93n72_ur_ctl2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL2r_CL93N72_CTRL_FRAME_DLYf_GET(r) (((r).cl93n72_ur_ctl2[0]) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL2r_CL93N72_CTRL_FRAME_DLYf_SET(r,f) (r).cl93n72_ur_ctl2[0]=(((r).cl93n72_ur_ctl2[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access CL93N72_UR_CTL2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UR_CTL2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL2r,(_r._cl93n72_ur_ctl2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UR_CTL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL2r,(_r._cl93n72_ur_ctl2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UR_CTL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL2r,(_r._cl93n72_ur_ctl2))
#define BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UR_CTL2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ur_ctl2))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UR_CTL2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ur_ctl2))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UR_CTL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_ur_ctl2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_UR_CTL2r BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL2r
#define CL93N72_UR_CTL2r_SIZE BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL2r_t CL93N72_UR_CTL2r_t;
#define CL93N72_UR_CTL2r_CLR BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL2r_CLR
#define CL93N72_UR_CTL2r_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL2r_SET
#define CL93N72_UR_CTL2r_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL2r_GET
#define CL93N72_UR_CTL2r_CL93N72_BLOCK_LP_IEEE_UPDATESf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL2r_CL93N72_BLOCK_LP_IEEE_UPDATESf_GET
#define CL93N72_UR_CTL2r_CL93N72_BLOCK_LP_IEEE_UPDATESf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL2r_CL93N72_BLOCK_LP_IEEE_UPDATESf_SET
#define CL93N72_UR_CTL2r_CL93N72_FRAME_CONSISTENCY_CHK_ENf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL2r_CL93N72_FRAME_CONSISTENCY_CHK_ENf_GET
#define CL93N72_UR_CTL2r_CL93N72_FRAME_CONSISTENCY_CHK_ENf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL2r_CL93N72_FRAME_CONSISTENCY_CHK_ENf_SET
#define CL93N72_UR_CTL2r_CL93N72_RX_DP_LN_CLK_ENf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL2r_CL93N72_RX_DP_LN_CLK_ENf_GET
#define CL93N72_UR_CTL2r_CL93N72_RX_DP_LN_CLK_ENf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL2r_CL93N72_RX_DP_LN_CLK_ENf_SET
#define CL93N72_UR_CTL2r_CL93N72_PPM_OFFSET_ENf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL2r_CL93N72_PPM_OFFSET_ENf_GET
#define CL93N72_UR_CTL2r_CL93N72_PPM_OFFSET_ENf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL2r_CL93N72_PPM_OFFSET_ENf_SET
#define CL93N72_UR_CTL2r_CL93N72_STRICT_MARKER_CHKf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL2r_CL93N72_STRICT_MARKER_CHKf_GET
#define CL93N72_UR_CTL2r_CL93N72_STRICT_MARKER_CHKf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL2r_CL93N72_STRICT_MARKER_CHKf_SET
#define CL93N72_UR_CTL2r_CL93N72_STRICT_DME_CHKf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL2r_CL93N72_STRICT_DME_CHKf_GET
#define CL93N72_UR_CTL2r_CL93N72_STRICT_DME_CHKf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL2r_CL93N72_STRICT_DME_CHKf_SET
#define CL93N72_UR_CTL2r_CL93N72_DME_CELL_BOUNDARY_CHKf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL2r_CL93N72_DME_CELL_BOUNDARY_CHKf_GET
#define CL93N72_UR_CTL2r_CL93N72_DME_CELL_BOUNDARY_CHKf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL2r_CL93N72_DME_CELL_BOUNDARY_CHKf_SET
#define CL93N72_UR_CTL2r_CL93N72_CTRL_FRAME_DLYf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL2r_CL93N72_CTRL_FRAME_DLYf_GET
#define CL93N72_UR_CTL2r_CL93N72_CTRL_FRAME_DLYf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL2r_CL93N72_CTRL_FRAME_DLYf_SET
#define READ_CL93N72_UR_CTL2r BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UR_CTL2r
#define WRITE_CL93N72_UR_CTL2r BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UR_CTL2r
#define MODIFY_CL93N72_UR_CTL2r BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UR_CTL2r
#define READLN_CL93N72_UR_CTL2r BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UR_CTL2r
#define WRITELN_CL93N72_UR_CTL2r BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UR_CTL2r
#define WRITEALL_CL93N72_UR_CTL2r BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UR_CTL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_CL93N72_UR_CTL2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  CL93N72_UR_STS0
 * BLOCKS:   CL93N72_USER_RX
 * REGADDR:  0xd083
 * DEVAD:    1
 * DESC:     Status 0 Register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CL93N72_FRAME_LOCK Frame Lock signal statusThis bit provides status of the frame lock signal from the frame lock fsm.1 - frame locked0 - frame not lockedThe status bit in the IEEE registers space is set by firmware
 *     CL93N72_REMOTE_RX_READY remote_rx_ready statusThis bit provides status of the remote_rx_ready signal from the link partner.
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_STS0r (0x0001d083 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_STS0r_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_UR_STS0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_CL93N72_UR_STS0r_s {
	uint32_t v[1];
	uint32_t cl93n72_ur_sts0[1];
	uint32_t _cl93n72_ur_sts0;
} BCMI_TSCF_GEN3_XGXS_CL93N72_UR_STS0r_t;

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_STS0r_CLR(r) (r).cl93n72_ur_sts0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_STS0r_SET(r,d) (r).cl93n72_ur_sts0[0] = d
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_STS0r_GET(r) (r).cl93n72_ur_sts0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_STS0r_CL93N72_REMOTE_RX_READYf_GET(r) ((((r).cl93n72_ur_sts0[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_STS0r_CL93N72_REMOTE_RX_READYf_SET(r,f) (r).cl93n72_ur_sts0[0]=(((r).cl93n72_ur_sts0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_STS0r_CL93N72_FRAME_LOCKf_GET(r) (((r).cl93n72_ur_sts0[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_STS0r_CL93N72_FRAME_LOCKf_SET(r,f) (r).cl93n72_ur_sts0[0]=(((r).cl93n72_ur_sts0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access CL93N72_UR_STS0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UR_STS0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_STS0r,(_r._cl93n72_ur_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UR_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_STS0r,(_r._cl93n72_ur_sts0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UR_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_STS0r,(_r._cl93n72_ur_sts0))
#define BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UR_STS0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ur_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UR_STS0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ur_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UR_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_STS0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_ur_sts0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_UR_STS0r BCMI_TSCF_GEN3_XGXS_CL93N72_UR_STS0r
#define CL93N72_UR_STS0r_SIZE BCMI_TSCF_GEN3_XGXS_CL93N72_UR_STS0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_CL93N72_UR_STS0r_t CL93N72_UR_STS0r_t;
#define CL93N72_UR_STS0r_CLR BCMI_TSCF_GEN3_XGXS_CL93N72_UR_STS0r_CLR
#define CL93N72_UR_STS0r_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_STS0r_SET
#define CL93N72_UR_STS0r_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_STS0r_GET
#define CL93N72_UR_STS0r_CL93N72_REMOTE_RX_READYf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_STS0r_CL93N72_REMOTE_RX_READYf_GET
#define CL93N72_UR_STS0r_CL93N72_REMOTE_RX_READYf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_STS0r_CL93N72_REMOTE_RX_READYf_SET
#define CL93N72_UR_STS0r_CL93N72_FRAME_LOCKf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_STS0r_CL93N72_FRAME_LOCKf_GET
#define CL93N72_UR_STS0r_CL93N72_FRAME_LOCKf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_STS0r_CL93N72_FRAME_LOCKf_SET
#define READ_CL93N72_UR_STS0r BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UR_STS0r
#define WRITE_CL93N72_UR_STS0r BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UR_STS0r
#define MODIFY_CL93N72_UR_STS0r BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UR_STS0r
#define READLN_CL93N72_UR_STS0r BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UR_STS0r
#define WRITELN_CL93N72_UR_STS0r BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UR_STS0r
#define WRITEALL_CL93N72_UR_STS0r BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UR_STS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_CL93N72_UR_STS0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  CL93N72_UR_UC_INTR_CTL0
 * BLOCKS:   CL93N72_USER_RX
 * REGADDR:  0xd084
 * DEVAD:    1
 * DESC:     Micro Interrupt Control 0 Register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL93N72_MICRO_UPDATE_CHG_INT_EN Update field micro interrupt enable. Enables an interrupt when the update field value changes in the training frame received from Link PartnerThe Link parnter request a change to the Local Device TX FIR tap values via the update field1 - Enable. Generates an interrupt when cl93n72_micro_lstatus_update_chg = 1'b1.0 - Disable
 *     CL93N72_MICRO_STATUS_CHG_INT_EN Status field change micro interrupt enable. Enables an interrupt when the status field value changes in the training frame received from Link PartnerWhen the Local Devices requests Link Partner to change its TX FIR tap values, then the Link Partner updatestaps and sends a response on the stataus field of the training frame1 - Enable. Generates an interrupt when cl93n72_micro_lstatus_status_chg = 1'b1.0 - Disable
 *     CL93N72_MICRO_FRAME_LOCK_INT_EN frame_lock change micro interrupt enable.1 - Enable0 - Disable
 *     CL93N72_MICRO_UPDATE_REQ_INT_FRC Force an interrupt on cl93n72_micro_update_req_int pin0 -  interrupt on the cl93n72_micro_update_req_int pingenerated when the update field value changes in the trainingframe received from Link Partner andcl93n72_micro_update_chg_int_en field is set to 1'b11 -  interrupt on the cl93n72_micro_update_req_int pingenerated by the cl93n72_micro_update_req_int_frc_val field
 *     CL93N72_MICRO_UPDATE_REQ_INT_FRC_VAL Force value on cl93n72_micro_update_req_int pinwhen cl93n72_micro_update_req_int_frc field is set to 1'b1
 *     CL93N72_MICRO_STATUS_RESP_INT_FRC Force an interrupt on cl93n72_micro_status_resp_int pin0 -  interrupt on the cl93n72_micro_status_resp_int pingenerated when the status field value changes in the trainingframe received from Link Partner andcl93n72_micro_status_chg_int_en field is set to 1'b11 -  interrupt on the cl93n72_micro_status_resp_int pingenerated by the cl93n72_micro_status_resp_int_frc_val field
 *     CL93N72_MICRO_STATUS_RESP_INT_FRC_VAL Force value on cl93n72_micro_status_resp_int pinwhen cl93n72_micro_status_resp_int_frc field is set to 1'b1
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL0r (0x0001d084 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_UR_UC_INTR_CTL0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL0r_s {
	uint32_t v[1];
	uint32_t cl93n72_ur_uc_intr_ctl0[1];
	uint32_t _cl93n72_ur_uc_intr_ctl0;
} BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL0r_t;

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL0r_CLR(r) (r).cl93n72_ur_uc_intr_ctl0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL0r_SET(r,d) (r).cl93n72_ur_uc_intr_ctl0[0] = d
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL0r_GET(r) (r).cl93n72_ur_uc_intr_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL0r_CL93N72_MICRO_STATUS_RESP_INT_FRC_VALf_GET(r) ((((r).cl93n72_ur_uc_intr_ctl0[0]) >> 11) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL0r_CL93N72_MICRO_STATUS_RESP_INT_FRC_VALf_SET(r,f) (r).cl93n72_ur_uc_intr_ctl0[0]=(((r).cl93n72_ur_uc_intr_ctl0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL0r_CL93N72_MICRO_STATUS_RESP_INT_FRCf_GET(r) ((((r).cl93n72_ur_uc_intr_ctl0[0]) >> 10) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL0r_CL93N72_MICRO_STATUS_RESP_INT_FRCf_SET(r,f) (r).cl93n72_ur_uc_intr_ctl0[0]=(((r).cl93n72_ur_uc_intr_ctl0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL0r_CL93N72_MICRO_UPDATE_REQ_INT_FRC_VALf_GET(r) ((((r).cl93n72_ur_uc_intr_ctl0[0]) >> 9) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL0r_CL93N72_MICRO_UPDATE_REQ_INT_FRC_VALf_SET(r,f) (r).cl93n72_ur_uc_intr_ctl0[0]=(((r).cl93n72_ur_uc_intr_ctl0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL0r_CL93N72_MICRO_UPDATE_REQ_INT_FRCf_GET(r) ((((r).cl93n72_ur_uc_intr_ctl0[0]) >> 8) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL0r_CL93N72_MICRO_UPDATE_REQ_INT_FRCf_SET(r,f) (r).cl93n72_ur_uc_intr_ctl0[0]=(((r).cl93n72_ur_uc_intr_ctl0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL0r_CL93N72_MICRO_FRAME_LOCK_INT_ENf_GET(r) ((((r).cl93n72_ur_uc_intr_ctl0[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL0r_CL93N72_MICRO_FRAME_LOCK_INT_ENf_SET(r,f) (r).cl93n72_ur_uc_intr_ctl0[0]=(((r).cl93n72_ur_uc_intr_ctl0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL0r_CL93N72_MICRO_STATUS_CHG_INT_ENf_GET(r) ((((r).cl93n72_ur_uc_intr_ctl0[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL0r_CL93N72_MICRO_STATUS_CHG_INT_ENf_SET(r,f) (r).cl93n72_ur_uc_intr_ctl0[0]=(((r).cl93n72_ur_uc_intr_ctl0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL0r_CL93N72_MICRO_UPDATE_CHG_INT_ENf_GET(r) (((r).cl93n72_ur_uc_intr_ctl0[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL0r_CL93N72_MICRO_UPDATE_CHG_INT_ENf_SET(r,f) (r).cl93n72_ur_uc_intr_ctl0[0]=(((r).cl93n72_ur_uc_intr_ctl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access CL93N72_UR_UC_INTR_CTL0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UR_UC_INTR_CTL0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL0r,(_r._cl93n72_ur_uc_intr_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UR_UC_INTR_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL0r,(_r._cl93n72_ur_uc_intr_ctl0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UR_UC_INTR_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL0r,(_r._cl93n72_ur_uc_intr_ctl0))
#define BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UR_UC_INTR_CTL0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ur_uc_intr_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UR_UC_INTR_CTL0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ur_uc_intr_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UR_UC_INTR_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_ur_uc_intr_ctl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_UR_UC_INTR_CTL0r BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL0r
#define CL93N72_UR_UC_INTR_CTL0r_SIZE BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL0r_t CL93N72_UR_UC_INTR_CTL0r_t;
#define CL93N72_UR_UC_INTR_CTL0r_CLR BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL0r_CLR
#define CL93N72_UR_UC_INTR_CTL0r_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL0r_SET
#define CL93N72_UR_UC_INTR_CTL0r_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL0r_GET
#define CL93N72_UR_UC_INTR_CTL0r_CL93N72_MICRO_STATUS_RESP_INT_FRC_VALf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL0r_CL93N72_MICRO_STATUS_RESP_INT_FRC_VALf_GET
#define CL93N72_UR_UC_INTR_CTL0r_CL93N72_MICRO_STATUS_RESP_INT_FRC_VALf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL0r_CL93N72_MICRO_STATUS_RESP_INT_FRC_VALf_SET
#define CL93N72_UR_UC_INTR_CTL0r_CL93N72_MICRO_STATUS_RESP_INT_FRCf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL0r_CL93N72_MICRO_STATUS_RESP_INT_FRCf_GET
#define CL93N72_UR_UC_INTR_CTL0r_CL93N72_MICRO_STATUS_RESP_INT_FRCf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL0r_CL93N72_MICRO_STATUS_RESP_INT_FRCf_SET
#define CL93N72_UR_UC_INTR_CTL0r_CL93N72_MICRO_UPDATE_REQ_INT_FRC_VALf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL0r_CL93N72_MICRO_UPDATE_REQ_INT_FRC_VALf_GET
#define CL93N72_UR_UC_INTR_CTL0r_CL93N72_MICRO_UPDATE_REQ_INT_FRC_VALf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL0r_CL93N72_MICRO_UPDATE_REQ_INT_FRC_VALf_SET
#define CL93N72_UR_UC_INTR_CTL0r_CL93N72_MICRO_UPDATE_REQ_INT_FRCf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL0r_CL93N72_MICRO_UPDATE_REQ_INT_FRCf_GET
#define CL93N72_UR_UC_INTR_CTL0r_CL93N72_MICRO_UPDATE_REQ_INT_FRCf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL0r_CL93N72_MICRO_UPDATE_REQ_INT_FRCf_SET
#define CL93N72_UR_UC_INTR_CTL0r_CL93N72_MICRO_FRAME_LOCK_INT_ENf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL0r_CL93N72_MICRO_FRAME_LOCK_INT_ENf_GET
#define CL93N72_UR_UC_INTR_CTL0r_CL93N72_MICRO_FRAME_LOCK_INT_ENf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL0r_CL93N72_MICRO_FRAME_LOCK_INT_ENf_SET
#define CL93N72_UR_UC_INTR_CTL0r_CL93N72_MICRO_STATUS_CHG_INT_ENf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL0r_CL93N72_MICRO_STATUS_CHG_INT_ENf_GET
#define CL93N72_UR_UC_INTR_CTL0r_CL93N72_MICRO_STATUS_CHG_INT_ENf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL0r_CL93N72_MICRO_STATUS_CHG_INT_ENf_SET
#define CL93N72_UR_UC_INTR_CTL0r_CL93N72_MICRO_UPDATE_CHG_INT_ENf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL0r_CL93N72_MICRO_UPDATE_CHG_INT_ENf_GET
#define CL93N72_UR_UC_INTR_CTL0r_CL93N72_MICRO_UPDATE_CHG_INT_ENf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL0r_CL93N72_MICRO_UPDATE_CHG_INT_ENf_SET
#define READ_CL93N72_UR_UC_INTR_CTL0r BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UR_UC_INTR_CTL0r
#define WRITE_CL93N72_UR_UC_INTR_CTL0r BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UR_UC_INTR_CTL0r
#define MODIFY_CL93N72_UR_UC_INTR_CTL0r BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UR_UC_INTR_CTL0r
#define READLN_CL93N72_UR_UC_INTR_CTL0r BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UR_UC_INTR_CTL0r
#define WRITELN_CL93N72_UR_UC_INTR_CTL0r BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UR_UC_INTR_CTL0r
#define WRITEALL_CL93N72_UR_UC_INTR_CTL0r BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UR_UC_INTR_CTL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  CL93N72_UR_UC_STS0
 * BLOCKS:   CL93N72_USER_RX
 * REGADDR:  0xd085
 * DEVAD:    1
 * DESC:     Micro Status 0 Register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CL93N72_MICRO_UPDATE_CHG_LSTATUS coeffcient update field change latched status -  This bit is set to 1'b1 when the update field value changes in thetraining frame received from the Link Partner.This bit cleared when this register is read.
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_STS0r (0x0001d085 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_STS0r_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_UR_UC_STS0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_STS0r_s {
	uint32_t v[1];
	uint32_t cl93n72_ur_uc_sts0[1];
	uint32_t _cl93n72_ur_uc_sts0;
} BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_STS0r_t;

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_STS0r_CLR(r) (r).cl93n72_ur_uc_sts0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_STS0r_SET(r,d) (r).cl93n72_ur_uc_sts0[0] = d
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_STS0r_GET(r) (r).cl93n72_ur_uc_sts0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_STS0r_CL93N72_MICRO_UPDATE_CHG_LSTATUSf_GET(r) (((r).cl93n72_ur_uc_sts0[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_STS0r_CL93N72_MICRO_UPDATE_CHG_LSTATUSf_SET(r,f) (r).cl93n72_ur_uc_sts0[0]=(((r).cl93n72_ur_uc_sts0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access CL93N72_UR_UC_STS0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UR_UC_STS0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_STS0r,(_r._cl93n72_ur_uc_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UR_UC_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_STS0r,(_r._cl93n72_ur_uc_sts0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UR_UC_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_STS0r,(_r._cl93n72_ur_uc_sts0))
#define BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UR_UC_STS0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ur_uc_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UR_UC_STS0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ur_uc_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UR_UC_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_STS0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_ur_uc_sts0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_UR_UC_STS0r BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_STS0r
#define CL93N72_UR_UC_STS0r_SIZE BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_STS0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_STS0r_t CL93N72_UR_UC_STS0r_t;
#define CL93N72_UR_UC_STS0r_CLR BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_STS0r_CLR
#define CL93N72_UR_UC_STS0r_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_STS0r_SET
#define CL93N72_UR_UC_STS0r_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_STS0r_GET
#define CL93N72_UR_UC_STS0r_CL93N72_MICRO_UPDATE_CHG_LSTATUSf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_STS0r_CL93N72_MICRO_UPDATE_CHG_LSTATUSf_GET
#define CL93N72_UR_UC_STS0r_CL93N72_MICRO_UPDATE_CHG_LSTATUSf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_STS0r_CL93N72_MICRO_UPDATE_CHG_LSTATUSf_SET
#define READ_CL93N72_UR_UC_STS0r BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UR_UC_STS0r
#define WRITE_CL93N72_UR_UC_STS0r BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UR_UC_STS0r
#define MODIFY_CL93N72_UR_UC_STS0r BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UR_UC_STS0r
#define READLN_CL93N72_UR_UC_STS0r BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UR_UC_STS0r
#define WRITELN_CL93N72_UR_UC_STS0r BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UR_UC_STS0r
#define WRITEALL_CL93N72_UR_UC_STS0r BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UR_UC_STS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_STS0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  CL93N72_UR_UC_STS1
 * BLOCKS:   CL93N72_USER_RX
 * REGADDR:  0xd086
 * DEVAD:    1
 * DESC:     Micro Status 1 Register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CL93N72_MICRO_STATUS_CHG_LSTATUS coeffcient status field latched status - This bit is set to 1'b1 when the status field value changes in thetraining frame received from the Link Partner.This bit cleared when this register is read.
 *     CL93N72_MICRO_FRAME_LOCK_LSTATUS Frame lock change latched status - This bit is set to 1'b1 when a change is detected on the frame lock signalThis bit cleared when this register is read.
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_STS1r (0x0001d086 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_STS1r_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_UR_UC_STS1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_STS1r_s {
	uint32_t v[1];
	uint32_t cl93n72_ur_uc_sts1[1];
	uint32_t _cl93n72_ur_uc_sts1;
} BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_STS1r_t;

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_STS1r_CLR(r) (r).cl93n72_ur_uc_sts1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_STS1r_SET(r,d) (r).cl93n72_ur_uc_sts1[0] = d
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_STS1r_GET(r) (r).cl93n72_ur_uc_sts1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_STS1r_CL93N72_MICRO_FRAME_LOCK_LSTATUSf_GET(r) ((((r).cl93n72_ur_uc_sts1[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_STS1r_CL93N72_MICRO_FRAME_LOCK_LSTATUSf_SET(r,f) (r).cl93n72_ur_uc_sts1[0]=(((r).cl93n72_ur_uc_sts1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_STS1r_CL93N72_MICRO_STATUS_CHG_LSTATUSf_GET(r) (((r).cl93n72_ur_uc_sts1[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_STS1r_CL93N72_MICRO_STATUS_CHG_LSTATUSf_SET(r,f) (r).cl93n72_ur_uc_sts1[0]=(((r).cl93n72_ur_uc_sts1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access CL93N72_UR_UC_STS1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UR_UC_STS1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_STS1r,(_r._cl93n72_ur_uc_sts1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UR_UC_STS1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_STS1r,(_r._cl93n72_ur_uc_sts1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UR_UC_STS1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_STS1r,(_r._cl93n72_ur_uc_sts1))
#define BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UR_UC_STS1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_STS1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ur_uc_sts1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UR_UC_STS1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_STS1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ur_uc_sts1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UR_UC_STS1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_STS1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_ur_uc_sts1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_UR_UC_STS1r BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_STS1r
#define CL93N72_UR_UC_STS1r_SIZE BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_STS1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_STS1r_t CL93N72_UR_UC_STS1r_t;
#define CL93N72_UR_UC_STS1r_CLR BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_STS1r_CLR
#define CL93N72_UR_UC_STS1r_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_STS1r_SET
#define CL93N72_UR_UC_STS1r_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_STS1r_GET
#define CL93N72_UR_UC_STS1r_CL93N72_MICRO_FRAME_LOCK_LSTATUSf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_STS1r_CL93N72_MICRO_FRAME_LOCK_LSTATUSf_GET
#define CL93N72_UR_UC_STS1r_CL93N72_MICRO_FRAME_LOCK_LSTATUSf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_STS1r_CL93N72_MICRO_FRAME_LOCK_LSTATUSf_SET
#define CL93N72_UR_UC_STS1r_CL93N72_MICRO_STATUS_CHG_LSTATUSf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_STS1r_CL93N72_MICRO_STATUS_CHG_LSTATUSf_GET
#define CL93N72_UR_UC_STS1r_CL93N72_MICRO_STATUS_CHG_LSTATUSf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_STS1r_CL93N72_MICRO_STATUS_CHG_LSTATUSf_SET
#define READ_CL93N72_UR_UC_STS1r BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UR_UC_STS1r
#define WRITE_CL93N72_UR_UC_STS1r BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UR_UC_STS1r
#define MODIFY_CL93N72_UR_UC_STS1r BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UR_UC_STS1r
#define READLN_CL93N72_UR_UC_STS1r BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UR_UC_STS1r
#define WRITELN_CL93N72_UR_UC_STS1r BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UR_UC_STS1r
#define WRITEALL_CL93N72_UR_UC_STS1r BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UR_UC_STS1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_STS1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  CL93N72_UR_PCS_RX_FCTTS_RCVCTL_PAGE
 * BLOCKS:   CL93N72_USER_RX
 * REGADDR:  0xd087
 * DEVAD:    1
 * DESC:     PCS FC received TTS control page register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CL93N72_RX_FCTTS_RCVCTRL_PAGE This register reflects the first 16-bit Word of the tts/training framemost recently recieived from the Link PartnerThis register is read only.15:14 Extended Marker2'b11 -  32GFC marker received2'b00 -  16GFC marker received13   Preset1 = Preset coefficients0 = Normal operation12   Initialize1 = Initialize coefficients0 = Normal operation11   FECReq (FEC request)1 - the FC_Port is requesting the use of Forward Error Correction (FEC)0 - the FC_Port is directing not to use Forward Error Correction (FEC)10   Parallel Lane Support1 - 4 lanes supported0 - Only single lane supported9:6 Reserved5:4  Coefficient (+1) update5 41 1 = reserved0 1 = increment1 0 = decrement0 0 = hold3:2  Coefficient (0) update3 21 1 = reserved0 1 = increment1 0 = decrement0 0 = hold1:0  Coefficient (-1) update1 01 1 = reserved0 1 = increment1 0 = decrement0 0 = hold
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_RCVCTL_PAGEr (0x0001d087 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_RCVCTL_PAGEr_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_UR_PCS_RX_FCTTS_RCVCTL_PAGE.
 */
typedef union BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_RCVCTL_PAGEr_s {
	uint32_t v[1];
	uint32_t cl93n72_ur_pcs_rx_fctts_rcvctl_page[1];
	uint32_t _cl93n72_ur_pcs_rx_fctts_rcvctl_page;
} BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_RCVCTL_PAGEr_t;

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_RCVCTL_PAGEr_CLR(r) (r).cl93n72_ur_pcs_rx_fctts_rcvctl_page[0] = 0
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_RCVCTL_PAGEr_SET(r,d) (r).cl93n72_ur_pcs_rx_fctts_rcvctl_page[0] = d
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_RCVCTL_PAGEr_GET(r) (r).cl93n72_ur_pcs_rx_fctts_rcvctl_page[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_RCVCTL_PAGEr_CL93N72_RX_FCTTS_RCVCTRL_PAGEf_GET(r) (((r).cl93n72_ur_pcs_rx_fctts_rcvctl_page[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_RCVCTL_PAGEr_CL93N72_RX_FCTTS_RCVCTRL_PAGEf_SET(r,f) (r).cl93n72_ur_pcs_rx_fctts_rcvctl_page[0]=(((r).cl93n72_ur_pcs_rx_fctts_rcvctl_page[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access CL93N72_UR_PCS_RX_FCTTS_RCVCTL_PAGE.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UR_PCS_RX_FCTTS_RCVCTL_PAGEr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_RCVCTL_PAGEr,(_r._cl93n72_ur_pcs_rx_fctts_rcvctl_page))
#define BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UR_PCS_RX_FCTTS_RCVCTL_PAGEr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_RCVCTL_PAGEr,(_r._cl93n72_ur_pcs_rx_fctts_rcvctl_page)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UR_PCS_RX_FCTTS_RCVCTL_PAGEr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_RCVCTL_PAGEr,(_r._cl93n72_ur_pcs_rx_fctts_rcvctl_page))
#define BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UR_PCS_RX_FCTTS_RCVCTL_PAGEr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_RCVCTL_PAGEr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ur_pcs_rx_fctts_rcvctl_page))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UR_PCS_RX_FCTTS_RCVCTL_PAGEr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_RCVCTL_PAGEr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ur_pcs_rx_fctts_rcvctl_page))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UR_PCS_RX_FCTTS_RCVCTL_PAGEr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_RCVCTL_PAGEr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_ur_pcs_rx_fctts_rcvctl_page))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_UR_PCS_RX_FCTTS_RCVCTL_PAGEr BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_RCVCTL_PAGEr
#define CL93N72_UR_PCS_RX_FCTTS_RCVCTL_PAGEr_SIZE BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_RCVCTL_PAGEr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_RCVCTL_PAGEr_t CL93N72_UR_PCS_RX_FCTTS_RCVCTL_PAGEr_t;
#define CL93N72_UR_PCS_RX_FCTTS_RCVCTL_PAGEr_CLR BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_RCVCTL_PAGEr_CLR
#define CL93N72_UR_PCS_RX_FCTTS_RCVCTL_PAGEr_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_RCVCTL_PAGEr_SET
#define CL93N72_UR_PCS_RX_FCTTS_RCVCTL_PAGEr_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_RCVCTL_PAGEr_GET
#define CL93N72_UR_PCS_RX_FCTTS_RCVCTL_PAGEr_CL93N72_RX_FCTTS_RCVCTRL_PAGEf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_RCVCTL_PAGEr_CL93N72_RX_FCTTS_RCVCTRL_PAGEf_GET
#define CL93N72_UR_PCS_RX_FCTTS_RCVCTL_PAGEr_CL93N72_RX_FCTTS_RCVCTRL_PAGEf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_RCVCTL_PAGEr_CL93N72_RX_FCTTS_RCVCTRL_PAGEf_SET
#define READ_CL93N72_UR_PCS_RX_FCTTS_RCVCTL_PAGEr BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UR_PCS_RX_FCTTS_RCVCTL_PAGEr
#define WRITE_CL93N72_UR_PCS_RX_FCTTS_RCVCTL_PAGEr BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UR_PCS_RX_FCTTS_RCVCTL_PAGEr
#define MODIFY_CL93N72_UR_PCS_RX_FCTTS_RCVCTL_PAGEr BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UR_PCS_RX_FCTTS_RCVCTL_PAGEr
#define READLN_CL93N72_UR_PCS_RX_FCTTS_RCVCTL_PAGEr BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UR_PCS_RX_FCTTS_RCVCTL_PAGEr
#define WRITELN_CL93N72_UR_PCS_RX_FCTTS_RCVCTL_PAGEr BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UR_PCS_RX_FCTTS_RCVCTL_PAGEr
#define WRITEALL_CL93N72_UR_PCS_RX_FCTTS_RCVCTL_PAGEr BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UR_PCS_RX_FCTTS_RCVCTL_PAGEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_RCVCTL_PAGEr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  CL93N72_UR_PCS_RX_FCTTS_RCVSTS_PAGE
 * BLOCKS:   CL93N72_USER_RX
 * REGADDR:  0xd088
 * DEVAD:    1
 * DESC:     PCS FC received TTS status page register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CL93N72_RX_FCTTS_RCVSTS_PAGE This register reflects the second 16-bit Word of the tts/training framemost recently recieived from the Link Partner15   TC (Training complete or Receiver Ready)1 - The LP receiver has determined that training iscomplete and is prepared to receive data0 - The LP receiver is requesting that training continue14   SN (Speed Negotiation)1 - the transmitter is using and has not completed Speed Negotiation0 - the transmitter has completed or did not use Speed Negotiation13   FECCap  (FEC Capability)1 - FC_Port has Forward Error Correction (FEC) capability0 - FC_Port does not have Forward Error Correction (FEC) capability12   TF  (Transmitter fixed)1 - the transmitter is operating with fixed transmitter coefficients.0 - the transmitter coefficients may be trained by the receiver.11:6 Reserved5:4  Coefficient (+1) status5 41 1 = maximum1 0 = minimum0 1 = updated0 0 = not_updated3:2  Coefficient (0) status3 21 1 = maximum1 0 = minimum0 1 = updated0 0 = not_updated1:0  Coefficient (-1) status1 01 1 = maximum1 0 = minimum0 1 = updated0 0 = not_updated
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_RCVSTS_PAGEr (0x0001d088 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_RCVSTS_PAGEr_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_UR_PCS_RX_FCTTS_RCVSTS_PAGE.
 */
typedef union BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_RCVSTS_PAGEr_s {
	uint32_t v[1];
	uint32_t cl93n72_ur_pcs_rx_fctts_rcvsts_page[1];
	uint32_t _cl93n72_ur_pcs_rx_fctts_rcvsts_page;
} BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_RCVSTS_PAGEr_t;

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_RCVSTS_PAGEr_CLR(r) (r).cl93n72_ur_pcs_rx_fctts_rcvsts_page[0] = 0
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_RCVSTS_PAGEr_SET(r,d) (r).cl93n72_ur_pcs_rx_fctts_rcvsts_page[0] = d
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_RCVSTS_PAGEr_GET(r) (r).cl93n72_ur_pcs_rx_fctts_rcvsts_page[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_RCVSTS_PAGEr_CL93N72_RX_FCTTS_RCVSTS_PAGEf_GET(r) (((r).cl93n72_ur_pcs_rx_fctts_rcvsts_page[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_RCVSTS_PAGEr_CL93N72_RX_FCTTS_RCVSTS_PAGEf_SET(r,f) (r).cl93n72_ur_pcs_rx_fctts_rcvsts_page[0]=(((r).cl93n72_ur_pcs_rx_fctts_rcvsts_page[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access CL93N72_UR_PCS_RX_FCTTS_RCVSTS_PAGE.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UR_PCS_RX_FCTTS_RCVSTS_PAGEr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_RCVSTS_PAGEr,(_r._cl93n72_ur_pcs_rx_fctts_rcvsts_page))
#define BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UR_PCS_RX_FCTTS_RCVSTS_PAGEr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_RCVSTS_PAGEr,(_r._cl93n72_ur_pcs_rx_fctts_rcvsts_page)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UR_PCS_RX_FCTTS_RCVSTS_PAGEr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_RCVSTS_PAGEr,(_r._cl93n72_ur_pcs_rx_fctts_rcvsts_page))
#define BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UR_PCS_RX_FCTTS_RCVSTS_PAGEr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_RCVSTS_PAGEr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ur_pcs_rx_fctts_rcvsts_page))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UR_PCS_RX_FCTTS_RCVSTS_PAGEr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_RCVSTS_PAGEr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ur_pcs_rx_fctts_rcvsts_page))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UR_PCS_RX_FCTTS_RCVSTS_PAGEr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_RCVSTS_PAGEr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_ur_pcs_rx_fctts_rcvsts_page))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_UR_PCS_RX_FCTTS_RCVSTS_PAGEr BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_RCVSTS_PAGEr
#define CL93N72_UR_PCS_RX_FCTTS_RCVSTS_PAGEr_SIZE BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_RCVSTS_PAGEr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_RCVSTS_PAGEr_t CL93N72_UR_PCS_RX_FCTTS_RCVSTS_PAGEr_t;
#define CL93N72_UR_PCS_RX_FCTTS_RCVSTS_PAGEr_CLR BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_RCVSTS_PAGEr_CLR
#define CL93N72_UR_PCS_RX_FCTTS_RCVSTS_PAGEr_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_RCVSTS_PAGEr_SET
#define CL93N72_UR_PCS_RX_FCTTS_RCVSTS_PAGEr_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_RCVSTS_PAGEr_GET
#define CL93N72_UR_PCS_RX_FCTTS_RCVSTS_PAGEr_CL93N72_RX_FCTTS_RCVSTS_PAGEf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_RCVSTS_PAGEr_CL93N72_RX_FCTTS_RCVSTS_PAGEf_GET
#define CL93N72_UR_PCS_RX_FCTTS_RCVSTS_PAGEr_CL93N72_RX_FCTTS_RCVSTS_PAGEf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_RCVSTS_PAGEr_CL93N72_RX_FCTTS_RCVSTS_PAGEf_SET
#define READ_CL93N72_UR_PCS_RX_FCTTS_RCVSTS_PAGEr BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UR_PCS_RX_FCTTS_RCVSTS_PAGEr
#define WRITE_CL93N72_UR_PCS_RX_FCTTS_RCVSTS_PAGEr BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UR_PCS_RX_FCTTS_RCVSTS_PAGEr
#define MODIFY_CL93N72_UR_PCS_RX_FCTTS_RCVSTS_PAGEr BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UR_PCS_RX_FCTTS_RCVSTS_PAGEr
#define READLN_CL93N72_UR_PCS_RX_FCTTS_RCVSTS_PAGEr BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UR_PCS_RX_FCTTS_RCVSTS_PAGEr
#define WRITELN_CL93N72_UR_PCS_RX_FCTTS_RCVSTS_PAGEr BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UR_PCS_RX_FCTTS_RCVSTS_PAGEr
#define WRITEALL_CL93N72_UR_PCS_RX_FCTTS_RCVSTS_PAGEr BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UR_PCS_RX_FCTTS_RCVSTS_PAGEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_RCVSTS_PAGEr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  CL93N72_UR_PCS_RX_FCTTS_CTL0
 * BLOCKS:   CL93N72_USER_RX
 * REGADDR:  0xd089
 * DEVAD:    1
 * DESC:     PCS FC RX control 0 register
 * RESETVAL: 0x12c (300)
 * ACCESS:   R/W
 * FIELDS:
 *     CL93N72_RX_FCTTS_SYNC_COUNT_CHKVAL cl93n72_rx_fctts_sync_count_chkval specify the number of consective valid frame markersto be detected to assert sync_test_pass. The number of frames can be selected from 0 to 2047sync_test_pass = cl93n72_rx_fctts_sync_count >= cl93n72_rx_fctts_sync_count_chkval
 *     CL93N72_RX_FCTTS_SYNC_COUNT_CLR rx_fctts_sync_count_clrWhen this bit is set to 1'b1, it clears the rx_fctts_sync_countself-clearing
 *     CL93N72_RX_FCTTS_EXT_MARKER_CHECK_EN Extended frame marker check enable2'b01 - check for 32GFC format extended marker i.e. 48'h0F0F_0000_FFFF (LSB received first)2'b10 - check for 16GFC format extended marker i.e. 48'h00FF_0000_FFFF (LSB received first)'2'b00, 2'b11 - check for normal standard marker  i.e. 32'h0000_FFFF (LSB received first)
 *     CL93N72_RX_FCTTS_SN_EN Fiber Channel TTS  Speed Negotiation Enable1 - enabled0 - disabled
 *     CL93N72_PMD_TO_PCS_FCTTS_RX_LN_INTR pmd to pcs fiber channel rx lane interruptThis field control the value of the pmd_fctts_rx_ln_intr pin for a given laneThe intended use is that:1) PMD firmware is to write 1 to this field to generate an interrupt to the PCS2) PCS firmware is to write 0 to this register to clear the interrupt to the PCS
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_CTL0r (0x0001d089 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_UR_PCS_RX_FCTTS_CTL0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_CTL0r_s {
	uint32_t v[1];
	uint32_t cl93n72_ur_pcs_rx_fctts_ctl0[1];
	uint32_t _cl93n72_ur_pcs_rx_fctts_ctl0;
} BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_CTL0r_t;

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_CTL0r_CLR(r) (r).cl93n72_ur_pcs_rx_fctts_ctl0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_CTL0r_SET(r,d) (r).cl93n72_ur_pcs_rx_fctts_ctl0[0] = d
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_CTL0r_GET(r) (r).cl93n72_ur_pcs_rx_fctts_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_CTL0r_CL93N72_PMD_TO_PCS_FCTTS_RX_LN_INTRf_GET(r) ((((r).cl93n72_ur_pcs_rx_fctts_ctl0[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_CTL0r_CL93N72_PMD_TO_PCS_FCTTS_RX_LN_INTRf_SET(r,f) (r).cl93n72_ur_pcs_rx_fctts_ctl0[0]=(((r).cl93n72_ur_pcs_rx_fctts_ctl0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_CTL0r_CL93N72_RX_FCTTS_SN_ENf_GET(r) ((((r).cl93n72_ur_pcs_rx_fctts_ctl0[0]) >> 14) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_CTL0r_CL93N72_RX_FCTTS_SN_ENf_SET(r,f) (r).cl93n72_ur_pcs_rx_fctts_ctl0[0]=(((r).cl93n72_ur_pcs_rx_fctts_ctl0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_CTL0r_CL93N72_RX_FCTTS_EXT_MARKER_CHECK_ENf_GET(r) ((((r).cl93n72_ur_pcs_rx_fctts_ctl0[0]) >> 12) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_CTL0r_CL93N72_RX_FCTTS_EXT_MARKER_CHECK_ENf_SET(r,f) (r).cl93n72_ur_pcs_rx_fctts_ctl0[0]=(((r).cl93n72_ur_pcs_rx_fctts_ctl0[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12)) | (3 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_CTL0r_CL93N72_RX_FCTTS_SYNC_COUNT_CLRf_GET(r) ((((r).cl93n72_ur_pcs_rx_fctts_ctl0[0]) >> 11) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_CTL0r_CL93N72_RX_FCTTS_SYNC_COUNT_CLRf_SET(r,f) (r).cl93n72_ur_pcs_rx_fctts_ctl0[0]=(((r).cl93n72_ur_pcs_rx_fctts_ctl0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_CTL0r_CL93N72_RX_FCTTS_SYNC_COUNT_CHKVALf_GET(r) (((r).cl93n72_ur_pcs_rx_fctts_ctl0[0]) & 0x7ff)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_CTL0r_CL93N72_RX_FCTTS_SYNC_COUNT_CHKVALf_SET(r,f) (r).cl93n72_ur_pcs_rx_fctts_ctl0[0]=(((r).cl93n72_ur_pcs_rx_fctts_ctl0[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff)) | (0x7ff << 16)

/*
 * These macros can be used to access CL93N72_UR_PCS_RX_FCTTS_CTL0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UR_PCS_RX_FCTTS_CTL0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_CTL0r,(_r._cl93n72_ur_pcs_rx_fctts_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UR_PCS_RX_FCTTS_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_CTL0r,(_r._cl93n72_ur_pcs_rx_fctts_ctl0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UR_PCS_RX_FCTTS_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_CTL0r,(_r._cl93n72_ur_pcs_rx_fctts_ctl0))
#define BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UR_PCS_RX_FCTTS_CTL0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ur_pcs_rx_fctts_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UR_PCS_RX_FCTTS_CTL0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ur_pcs_rx_fctts_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UR_PCS_RX_FCTTS_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_ur_pcs_rx_fctts_ctl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_UR_PCS_RX_FCTTS_CTL0r BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_CTL0r
#define CL93N72_UR_PCS_RX_FCTTS_CTL0r_SIZE BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_CTL0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_CTL0r_t CL93N72_UR_PCS_RX_FCTTS_CTL0r_t;
#define CL93N72_UR_PCS_RX_FCTTS_CTL0r_CLR BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_CTL0r_CLR
#define CL93N72_UR_PCS_RX_FCTTS_CTL0r_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_CTL0r_SET
#define CL93N72_UR_PCS_RX_FCTTS_CTL0r_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_CTL0r_GET
#define CL93N72_UR_PCS_RX_FCTTS_CTL0r_CL93N72_PMD_TO_PCS_FCTTS_RX_LN_INTRf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_CTL0r_CL93N72_PMD_TO_PCS_FCTTS_RX_LN_INTRf_GET
#define CL93N72_UR_PCS_RX_FCTTS_CTL0r_CL93N72_PMD_TO_PCS_FCTTS_RX_LN_INTRf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_CTL0r_CL93N72_PMD_TO_PCS_FCTTS_RX_LN_INTRf_SET
#define CL93N72_UR_PCS_RX_FCTTS_CTL0r_CL93N72_RX_FCTTS_SN_ENf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_CTL0r_CL93N72_RX_FCTTS_SN_ENf_GET
#define CL93N72_UR_PCS_RX_FCTTS_CTL0r_CL93N72_RX_FCTTS_SN_ENf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_CTL0r_CL93N72_RX_FCTTS_SN_ENf_SET
#define CL93N72_UR_PCS_RX_FCTTS_CTL0r_CL93N72_RX_FCTTS_EXT_MARKER_CHECK_ENf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_CTL0r_CL93N72_RX_FCTTS_EXT_MARKER_CHECK_ENf_GET
#define CL93N72_UR_PCS_RX_FCTTS_CTL0r_CL93N72_RX_FCTTS_EXT_MARKER_CHECK_ENf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_CTL0r_CL93N72_RX_FCTTS_EXT_MARKER_CHECK_ENf_SET
#define CL93N72_UR_PCS_RX_FCTTS_CTL0r_CL93N72_RX_FCTTS_SYNC_COUNT_CLRf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_CTL0r_CL93N72_RX_FCTTS_SYNC_COUNT_CLRf_GET
#define CL93N72_UR_PCS_RX_FCTTS_CTL0r_CL93N72_RX_FCTTS_SYNC_COUNT_CLRf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_CTL0r_CL93N72_RX_FCTTS_SYNC_COUNT_CLRf_SET
#define CL93N72_UR_PCS_RX_FCTTS_CTL0r_CL93N72_RX_FCTTS_SYNC_COUNT_CHKVALf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_CTL0r_CL93N72_RX_FCTTS_SYNC_COUNT_CHKVALf_GET
#define CL93N72_UR_PCS_RX_FCTTS_CTL0r_CL93N72_RX_FCTTS_SYNC_COUNT_CHKVALf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_CTL0r_CL93N72_RX_FCTTS_SYNC_COUNT_CHKVALf_SET
#define READ_CL93N72_UR_PCS_RX_FCTTS_CTL0r BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UR_PCS_RX_FCTTS_CTL0r
#define WRITE_CL93N72_UR_PCS_RX_FCTTS_CTL0r BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UR_PCS_RX_FCTTS_CTL0r
#define MODIFY_CL93N72_UR_PCS_RX_FCTTS_CTL0r BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UR_PCS_RX_FCTTS_CTL0r
#define READLN_CL93N72_UR_PCS_RX_FCTTS_CTL0r BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UR_PCS_RX_FCTTS_CTL0r
#define WRITELN_CL93N72_UR_PCS_RX_FCTTS_CTL0r BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UR_PCS_RX_FCTTS_CTL0r
#define WRITEALL_CL93N72_UR_PCS_RX_FCTTS_CTL0r BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UR_PCS_RX_FCTTS_CTL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  CL93N72_UR_PCS_RX_FCTTS_SYNC_CNT
 * BLOCKS:   CL93N72_USER_RX
 * REGADDR:  0xd08a
 * DEVAD:    1
 * DESC:     PCS FC TTS frame marker sync count register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CL93N72_RX_FCTTS_SYNC_COUNT Fiber channel sync count:1) 16 bits counter that saturates at 16'hFFFF.2) Starts to count when frame_lock is asserted3) Increment upon receiving consecutive good frames (until it saturates)4) Reset sync_count when:a.	Bad frame is receivedb.	Frame lock is de-assertedc.	When cl93n72_rx_fctts_sync_count_clr register field is set to 1'b1.d.	Signal_detect is lost (RX_LOS scenario). RX_LOS results in a loss offrame_lock and a bad frame received, both of which result in a resetof the sync_count.6) Logic will assert sync_test_pass whencl93n72_rx_fctts_sync_count >= programmable value(cl93n72_rx_fctts_sync_count_chkval register field)
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_SYNC_CNTr (0x0001d08a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_SYNC_CNTr_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_UR_PCS_RX_FCTTS_SYNC_CNT.
 */
typedef union BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_SYNC_CNTr_s {
	uint32_t v[1];
	uint32_t cl93n72_ur_pcs_rx_fctts_sync_cnt[1];
	uint32_t _cl93n72_ur_pcs_rx_fctts_sync_cnt;
} BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_SYNC_CNTr_t;

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_SYNC_CNTr_CLR(r) (r).cl93n72_ur_pcs_rx_fctts_sync_cnt[0] = 0
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_SYNC_CNTr_SET(r,d) (r).cl93n72_ur_pcs_rx_fctts_sync_cnt[0] = d
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_SYNC_CNTr_GET(r) (r).cl93n72_ur_pcs_rx_fctts_sync_cnt[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_SYNC_CNTr_CL93N72_RX_FCTTS_SYNC_COUNTf_GET(r) (((r).cl93n72_ur_pcs_rx_fctts_sync_cnt[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_SYNC_CNTr_CL93N72_RX_FCTTS_SYNC_COUNTf_SET(r,f) (r).cl93n72_ur_pcs_rx_fctts_sync_cnt[0]=(((r).cl93n72_ur_pcs_rx_fctts_sync_cnt[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access CL93N72_UR_PCS_RX_FCTTS_SYNC_CNT.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UR_PCS_RX_FCTTS_SYNC_CNTr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_SYNC_CNTr,(_r._cl93n72_ur_pcs_rx_fctts_sync_cnt))
#define BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UR_PCS_RX_FCTTS_SYNC_CNTr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_SYNC_CNTr,(_r._cl93n72_ur_pcs_rx_fctts_sync_cnt)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UR_PCS_RX_FCTTS_SYNC_CNTr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_SYNC_CNTr,(_r._cl93n72_ur_pcs_rx_fctts_sync_cnt))
#define BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UR_PCS_RX_FCTTS_SYNC_CNTr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_SYNC_CNTr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ur_pcs_rx_fctts_sync_cnt))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UR_PCS_RX_FCTTS_SYNC_CNTr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_SYNC_CNTr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ur_pcs_rx_fctts_sync_cnt))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UR_PCS_RX_FCTTS_SYNC_CNTr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_SYNC_CNTr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_ur_pcs_rx_fctts_sync_cnt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_UR_PCS_RX_FCTTS_SYNC_CNTr BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_SYNC_CNTr
#define CL93N72_UR_PCS_RX_FCTTS_SYNC_CNTr_SIZE BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_SYNC_CNTr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_SYNC_CNTr_t CL93N72_UR_PCS_RX_FCTTS_SYNC_CNTr_t;
#define CL93N72_UR_PCS_RX_FCTTS_SYNC_CNTr_CLR BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_SYNC_CNTr_CLR
#define CL93N72_UR_PCS_RX_FCTTS_SYNC_CNTr_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_SYNC_CNTr_SET
#define CL93N72_UR_PCS_RX_FCTTS_SYNC_CNTr_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_SYNC_CNTr_GET
#define CL93N72_UR_PCS_RX_FCTTS_SYNC_CNTr_CL93N72_RX_FCTTS_SYNC_COUNTf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_SYNC_CNTr_CL93N72_RX_FCTTS_SYNC_COUNTf_GET
#define CL93N72_UR_PCS_RX_FCTTS_SYNC_CNTr_CL93N72_RX_FCTTS_SYNC_COUNTf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_SYNC_CNTr_CL93N72_RX_FCTTS_SYNC_COUNTf_SET
#define READ_CL93N72_UR_PCS_RX_FCTTS_SYNC_CNTr BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UR_PCS_RX_FCTTS_SYNC_CNTr
#define WRITE_CL93N72_UR_PCS_RX_FCTTS_SYNC_CNTr BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UR_PCS_RX_FCTTS_SYNC_CNTr
#define MODIFY_CL93N72_UR_PCS_RX_FCTTS_SYNC_CNTr BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UR_PCS_RX_FCTTS_SYNC_CNTr
#define READLN_CL93N72_UR_PCS_RX_FCTTS_SYNC_CNTr BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UR_PCS_RX_FCTTS_SYNC_CNTr
#define WRITELN_CL93N72_UR_PCS_RX_FCTTS_SYNC_CNTr BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UR_PCS_RX_FCTTS_SYNC_CNTr
#define WRITEALL_CL93N72_UR_PCS_RX_FCTTS_SYNC_CNTr BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UR_PCS_RX_FCTTS_SYNC_CNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_SYNC_CNTr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  CL93N72_UR_PCS_RX_FCTTS_STS0
 * BLOCKS:   CL93N72_USER_RX
 * REGADDR:  0xd08b
 * DEVAD:    1
 * DESC:     PCS FC RX status 0 register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CL93N72_RX_FCTTS_STATUS0 Rx Fiber channel status 0 register fields15:15 Reserved14:12 Parallel Lane SupportThese bits are extracted from the last valid control page (bit 10:8) received from the link partnerbit14:123'b100 - 4 lanes supported and this is lane 03'b101 - 4 lanes supported and this is lane 13'b110 - 4 lanes supported and this is lane 23'b111 - 4 lanes supported and this is lane 33'b0xx - Only single lane supported11:11 FECReq (FEC request)This bit is extracted from the last valid control page (bit 11) received from the link partner1 - the FC_Port is requesting the use of Forward Error Correction (FEC)0 - the FC_Port is directing not to use Forward Error Correction (FEC)10:9  Extended MarkerThese bits are extracted from the last valid control page (bit 15:14) received from the link partner2'b11 -  32GFC marker received2'b00 -  16GFC marker received8:8   FECCap  (FEC Capability)This bit is extracted from the last valid status page (bit 13) received from the link partner1 - FC_Port has Forward Error Correction (FEC) capability0 - FC_Port does not have Forward Error Correction (FEC) capability7:7   SN (Speed Negotiation)This bit is extracted from the last valid status page (bit 14) received from the link partner1 - the transmitter is using and has not completed Speed Negotiation0 - the transmitter has completed or did not use Speed Negotiation6:6   TC (Training Complete)This bit is extracted from the last valid status page (bit 15) received from the link partner1 - transmitter training is complete0 - request to begin or continue transmitter trainingPlease note: the bit is not reset upon the training state machine transitions to SEND_DATA state5:5   sync_test_pass_LHIt only goes to a 1 if the sync_test_pass field transitions from a 0 to a 1cleared upon reading this register4:4   sync_test_pass_LLIt only goes to a 1 if the sync_test_pass field transitions from a 1 to a 0cleared upon reading this register3:3   sync_test_passThis indicates if the consecutive, programmable, number of frames without an error has been received.1 - received programmable number of frames0 - has not received programmable number of framesThe number of frames are programmable via cl93n72_rx_fctts_sync_count_chkval field2:2   frame_lock_LHIt only goes to a 1 if the frame_lock field transitions from a 0 to a 1cleared upon reading this register1:1   frame_lock_LLIt only goes to a 1 if the frame_lock field transitions from a 1 to a 0cleared upon reading this register0:0   frame_lockThis field provides live status of frame_lock variable defined in Figure 72.4 Frame lock state diagram1 - receiver locked onto the TTS/training frames0 - receiver not-locked
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_STS0r (0x0001d08b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_STS0r_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_UR_PCS_RX_FCTTS_STS0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_STS0r_s {
	uint32_t v[1];
	uint32_t cl93n72_ur_pcs_rx_fctts_sts0[1];
	uint32_t _cl93n72_ur_pcs_rx_fctts_sts0;
} BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_STS0r_t;

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_STS0r_CLR(r) (r).cl93n72_ur_pcs_rx_fctts_sts0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_STS0r_SET(r,d) (r).cl93n72_ur_pcs_rx_fctts_sts0[0] = d
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_STS0r_GET(r) (r).cl93n72_ur_pcs_rx_fctts_sts0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_STS0r_CL93N72_RX_FCTTS_STATUS0f_GET(r) (((r).cl93n72_ur_pcs_rx_fctts_sts0[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_STS0r_CL93N72_RX_FCTTS_STATUS0f_SET(r,f) (r).cl93n72_ur_pcs_rx_fctts_sts0[0]=(((r).cl93n72_ur_pcs_rx_fctts_sts0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access CL93N72_UR_PCS_RX_FCTTS_STS0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UR_PCS_RX_FCTTS_STS0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_STS0r,(_r._cl93n72_ur_pcs_rx_fctts_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UR_PCS_RX_FCTTS_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_STS0r,(_r._cl93n72_ur_pcs_rx_fctts_sts0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UR_PCS_RX_FCTTS_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_STS0r,(_r._cl93n72_ur_pcs_rx_fctts_sts0))
#define BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UR_PCS_RX_FCTTS_STS0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ur_pcs_rx_fctts_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UR_PCS_RX_FCTTS_STS0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ur_pcs_rx_fctts_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UR_PCS_RX_FCTTS_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_STS0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_ur_pcs_rx_fctts_sts0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_UR_PCS_RX_FCTTS_STS0r BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_STS0r
#define CL93N72_UR_PCS_RX_FCTTS_STS0r_SIZE BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_STS0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_STS0r_t CL93N72_UR_PCS_RX_FCTTS_STS0r_t;
#define CL93N72_UR_PCS_RX_FCTTS_STS0r_CLR BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_STS0r_CLR
#define CL93N72_UR_PCS_RX_FCTTS_STS0r_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_STS0r_SET
#define CL93N72_UR_PCS_RX_FCTTS_STS0r_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_STS0r_GET
#define CL93N72_UR_PCS_RX_FCTTS_STS0r_CL93N72_RX_FCTTS_STATUS0f_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_STS0r_CL93N72_RX_FCTTS_STATUS0f_GET
#define CL93N72_UR_PCS_RX_FCTTS_STS0r_CL93N72_RX_FCTTS_STATUS0f_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_STS0r_CL93N72_RX_FCTTS_STATUS0f_SET
#define READ_CL93N72_UR_PCS_RX_FCTTS_STS0r BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UR_PCS_RX_FCTTS_STS0r
#define WRITE_CL93N72_UR_PCS_RX_FCTTS_STS0r BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UR_PCS_RX_FCTTS_STS0r
#define MODIFY_CL93N72_UR_PCS_RX_FCTTS_STS0r BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UR_PCS_RX_FCTTS_STS0r
#define READLN_CL93N72_UR_PCS_RX_FCTTS_STS0r BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UR_PCS_RX_FCTTS_STS0r
#define WRITELN_CL93N72_UR_PCS_RX_FCTTS_STS0r BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UR_PCS_RX_FCTTS_STS0r
#define WRITEALL_CL93N72_UR_PCS_RX_FCTTS_STS0r BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UR_PCS_RX_FCTTS_STS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_STS0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  CL93N72_UR_PCS_RX_FCTTS_STS1
 * BLOCKS:   CL93N72_USER_RX
 * REGADDR:  0xd08c
 * DEVAD:    1
 * DESC:     PCS FC RX status 1 register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CL93N72_RX_FCTTS_SN_STATUS Fiber Channel TTS Speed Negotiation status1 - enabled0 - disabled
 *     CL93N72_RX_CDR_COARSE_LOCK cdr coarse lock when TTS/cl72 frames are used during speed negotiation/trainingPMD firmware set this field to 1 when coarse lock to recovered clock has occuredPCS can use this field to start detecting sync code word on the datait received on the pmd_rx_data pins when both the TTS and the encoded data isused for speed negotiationPlease note that this field is only set when TTS/cl72 frames are used duringspeed negotiation/training.
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_STS1r (0x0001d08c | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_STS1r_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_UR_PCS_RX_FCTTS_STS1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_STS1r_s {
	uint32_t v[1];
	uint32_t cl93n72_ur_pcs_rx_fctts_sts1[1];
	uint32_t _cl93n72_ur_pcs_rx_fctts_sts1;
} BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_STS1r_t;

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_STS1r_CLR(r) (r).cl93n72_ur_pcs_rx_fctts_sts1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_STS1r_SET(r,d) (r).cl93n72_ur_pcs_rx_fctts_sts1[0] = d
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_STS1r_GET(r) (r).cl93n72_ur_pcs_rx_fctts_sts1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_STS1r_CL93N72_RX_CDR_COARSE_LOCKf_GET(r) ((((r).cl93n72_ur_pcs_rx_fctts_sts1[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_STS1r_CL93N72_RX_CDR_COARSE_LOCKf_SET(r,f) (r).cl93n72_ur_pcs_rx_fctts_sts1[0]=(((r).cl93n72_ur_pcs_rx_fctts_sts1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_STS1r_CL93N72_RX_FCTTS_SN_STATUSf_GET(r) (((r).cl93n72_ur_pcs_rx_fctts_sts1[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_STS1r_CL93N72_RX_FCTTS_SN_STATUSf_SET(r,f) (r).cl93n72_ur_pcs_rx_fctts_sts1[0]=(((r).cl93n72_ur_pcs_rx_fctts_sts1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access CL93N72_UR_PCS_RX_FCTTS_STS1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UR_PCS_RX_FCTTS_STS1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_STS1r,(_r._cl93n72_ur_pcs_rx_fctts_sts1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UR_PCS_RX_FCTTS_STS1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_STS1r,(_r._cl93n72_ur_pcs_rx_fctts_sts1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UR_PCS_RX_FCTTS_STS1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_STS1r,(_r._cl93n72_ur_pcs_rx_fctts_sts1))
#define BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UR_PCS_RX_FCTTS_STS1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_STS1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ur_pcs_rx_fctts_sts1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UR_PCS_RX_FCTTS_STS1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_STS1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ur_pcs_rx_fctts_sts1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UR_PCS_RX_FCTTS_STS1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_STS1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_ur_pcs_rx_fctts_sts1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_UR_PCS_RX_FCTTS_STS1r BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_STS1r
#define CL93N72_UR_PCS_RX_FCTTS_STS1r_SIZE BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_STS1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_STS1r_t CL93N72_UR_PCS_RX_FCTTS_STS1r_t;
#define CL93N72_UR_PCS_RX_FCTTS_STS1r_CLR BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_STS1r_CLR
#define CL93N72_UR_PCS_RX_FCTTS_STS1r_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_STS1r_SET
#define CL93N72_UR_PCS_RX_FCTTS_STS1r_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_STS1r_GET
#define CL93N72_UR_PCS_RX_FCTTS_STS1r_CL93N72_RX_CDR_COARSE_LOCKf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_STS1r_CL93N72_RX_CDR_COARSE_LOCKf_GET
#define CL93N72_UR_PCS_RX_FCTTS_STS1r_CL93N72_RX_CDR_COARSE_LOCKf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_STS1r_CL93N72_RX_CDR_COARSE_LOCKf_SET
#define CL93N72_UR_PCS_RX_FCTTS_STS1r_CL93N72_RX_FCTTS_SN_STATUSf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_STS1r_CL93N72_RX_FCTTS_SN_STATUSf_GET
#define CL93N72_UR_PCS_RX_FCTTS_STS1r_CL93N72_RX_FCTTS_SN_STATUSf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_STS1r_CL93N72_RX_FCTTS_SN_STATUSf_SET
#define READ_CL93N72_UR_PCS_RX_FCTTS_STS1r BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UR_PCS_RX_FCTTS_STS1r
#define WRITE_CL93N72_UR_PCS_RX_FCTTS_STS1r BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UR_PCS_RX_FCTTS_STS1r
#define MODIFY_CL93N72_UR_PCS_RX_FCTTS_STS1r BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UR_PCS_RX_FCTTS_STS1r
#define READLN_CL93N72_UR_PCS_RX_FCTTS_STS1r BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UR_PCS_RX_FCTTS_STS1r
#define WRITELN_CL93N72_UR_PCS_RX_FCTTS_STS1r BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UR_PCS_RX_FCTTS_STS1r
#define WRITEALL_CL93N72_UR_PCS_RX_FCTTS_STS1r BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UR_PCS_RX_FCTTS_STS1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_CL93N72_UR_PCS_RX_FCTTS_STS1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  CL93N72_UR_UC_INTR_CTL1
 * BLOCKS:   CL93N72_USER_RX
 * REGADDR:  0xd08d
 * DEVAD:    1
 * DESC:     Micro Interrupt Control 1 Register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL93N72_MICRO_INTERRUPT_MASK_CONTROL_PAGE Interrupt mask for the control page received from the link partner1 - mask. A change on the corresponding bit will not generate interrupt0 - normal mode.  A change on the corresponding bit will generate interruptshould be set 0xCFC0 during training
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL1r (0x0001d08d | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL1r_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_UR_UC_INTR_CTL1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL1r_s {
	uint32_t v[1];
	uint32_t cl93n72_ur_uc_intr_ctl1[1];
	uint32_t _cl93n72_ur_uc_intr_ctl1;
} BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL1r_t;

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL1r_CLR(r) (r).cl93n72_ur_uc_intr_ctl1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL1r_SET(r,d) (r).cl93n72_ur_uc_intr_ctl1[0] = d
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL1r_GET(r) (r).cl93n72_ur_uc_intr_ctl1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL1r_CL93N72_MICRO_INTERRUPT_MASK_CONTROL_PAGEf_GET(r) (((r).cl93n72_ur_uc_intr_ctl1[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL1r_CL93N72_MICRO_INTERRUPT_MASK_CONTROL_PAGEf_SET(r,f) (r).cl93n72_ur_uc_intr_ctl1[0]=(((r).cl93n72_ur_uc_intr_ctl1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access CL93N72_UR_UC_INTR_CTL1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UR_UC_INTR_CTL1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL1r,(_r._cl93n72_ur_uc_intr_ctl1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UR_UC_INTR_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL1r,(_r._cl93n72_ur_uc_intr_ctl1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UR_UC_INTR_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL1r,(_r._cl93n72_ur_uc_intr_ctl1))
#define BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UR_UC_INTR_CTL1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ur_uc_intr_ctl1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UR_UC_INTR_CTL1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ur_uc_intr_ctl1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UR_UC_INTR_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_ur_uc_intr_ctl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_UR_UC_INTR_CTL1r BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL1r
#define CL93N72_UR_UC_INTR_CTL1r_SIZE BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL1r_t CL93N72_UR_UC_INTR_CTL1r_t;
#define CL93N72_UR_UC_INTR_CTL1r_CLR BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL1r_CLR
#define CL93N72_UR_UC_INTR_CTL1r_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL1r_SET
#define CL93N72_UR_UC_INTR_CTL1r_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL1r_GET
#define CL93N72_UR_UC_INTR_CTL1r_CL93N72_MICRO_INTERRUPT_MASK_CONTROL_PAGEf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL1r_CL93N72_MICRO_INTERRUPT_MASK_CONTROL_PAGEf_GET
#define CL93N72_UR_UC_INTR_CTL1r_CL93N72_MICRO_INTERRUPT_MASK_CONTROL_PAGEf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL1r_CL93N72_MICRO_INTERRUPT_MASK_CONTROL_PAGEf_SET
#define READ_CL93N72_UR_UC_INTR_CTL1r BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UR_UC_INTR_CTL1r
#define WRITE_CL93N72_UR_UC_INTR_CTL1r BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UR_UC_INTR_CTL1r
#define MODIFY_CL93N72_UR_UC_INTR_CTL1r BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UR_UC_INTR_CTL1r
#define READLN_CL93N72_UR_UC_INTR_CTL1r BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UR_UC_INTR_CTL1r
#define WRITELN_CL93N72_UR_UC_INTR_CTL1r BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UR_UC_INTR_CTL1r
#define WRITEALL_CL93N72_UR_UC_INTR_CTL1r BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UR_UC_INTR_CTL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  CL93N72_UR_UC_INTR_CTL2
 * BLOCKS:   CL93N72_USER_RX
 * REGADDR:  0xd08e
 * DEVAD:    1
 * DESC:     Micro Interrupt Control 2 Register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL93N72_MICRO_INTERRUPT_MASK_STATUS_PAGE Interrupt mask for the status page received from the link partner1 - mask. A change on the corresponding bit will not generate interrupt0 - normal mode.  A change on the corresponding bit will generate interruptshould be set 0x7FC0 during training
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL2r (0x0001d08e | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL2r_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_UR_UC_INTR_CTL2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL2r_s {
	uint32_t v[1];
	uint32_t cl93n72_ur_uc_intr_ctl2[1];
	uint32_t _cl93n72_ur_uc_intr_ctl2;
} BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL2r_t;

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL2r_CLR(r) (r).cl93n72_ur_uc_intr_ctl2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL2r_SET(r,d) (r).cl93n72_ur_uc_intr_ctl2[0] = d
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL2r_GET(r) (r).cl93n72_ur_uc_intr_ctl2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL2r_CL93N72_MICRO_INTERRUPT_MASK_STATUS_PAGEf_GET(r) (((r).cl93n72_ur_uc_intr_ctl2[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL2r_CL93N72_MICRO_INTERRUPT_MASK_STATUS_PAGEf_SET(r,f) (r).cl93n72_ur_uc_intr_ctl2[0]=(((r).cl93n72_ur_uc_intr_ctl2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access CL93N72_UR_UC_INTR_CTL2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UR_UC_INTR_CTL2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL2r,(_r._cl93n72_ur_uc_intr_ctl2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UR_UC_INTR_CTL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL2r,(_r._cl93n72_ur_uc_intr_ctl2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UR_UC_INTR_CTL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL2r,(_r._cl93n72_ur_uc_intr_ctl2))
#define BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UR_UC_INTR_CTL2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ur_uc_intr_ctl2))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UR_UC_INTR_CTL2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ur_uc_intr_ctl2))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UR_UC_INTR_CTL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_ur_uc_intr_ctl2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_UR_UC_INTR_CTL2r BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL2r
#define CL93N72_UR_UC_INTR_CTL2r_SIZE BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL2r_t CL93N72_UR_UC_INTR_CTL2r_t;
#define CL93N72_UR_UC_INTR_CTL2r_CLR BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL2r_CLR
#define CL93N72_UR_UC_INTR_CTL2r_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL2r_SET
#define CL93N72_UR_UC_INTR_CTL2r_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL2r_GET
#define CL93N72_UR_UC_INTR_CTL2r_CL93N72_MICRO_INTERRUPT_MASK_STATUS_PAGEf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL2r_CL93N72_MICRO_INTERRUPT_MASK_STATUS_PAGEf_GET
#define CL93N72_UR_UC_INTR_CTL2r_CL93N72_MICRO_INTERRUPT_MASK_STATUS_PAGEf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL2r_CL93N72_MICRO_INTERRUPT_MASK_STATUS_PAGEf_SET
#define READ_CL93N72_UR_UC_INTR_CTL2r BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UR_UC_INTR_CTL2r
#define WRITE_CL93N72_UR_UC_INTR_CTL2r BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UR_UC_INTR_CTL2r
#define MODIFY_CL93N72_UR_UC_INTR_CTL2r BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UR_UC_INTR_CTL2r
#define READLN_CL93N72_UR_UC_INTR_CTL2r BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UR_UC_INTR_CTL2r
#define WRITELN_CL93N72_UR_UC_INTR_CTL2r BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UR_UC_INTR_CTL2r
#define WRITEALL_CL93N72_UR_UC_INTR_CTL2r BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UR_UC_INTR_CTL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_CL93N72_UR_UC_INTR_CTL2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  CL93N72_UT_XMT_UPD_PAGE
 * BLOCKS:   CL93N72_USER_TX
 * REGADDR:  0xd090
 * DEVAD:    1
 * DESC:     cl93n72 Send Coefficient Update Request to Link Partner Register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL93N72_XMT_UPDATE_PAGE Local Device (LD) Coefficient Update registerContains correction information from the local receiverto the link partner transmit equalizer.Bit15:14   Reserved Transmitted as 0, ignored on reception.13   Preset1 = Preset coefficients0 = Normal operation12   Initialize 1 = Initialize coefficients0 = Normal operation11:6 Reserved Transmitted as 0, ignored on reception.5:4  Coefficient (+1) update5 41 1 = reserved0 1 = increment1 0 = decrement0 0 = hold3:2  Coefficient (0) update3 21 1 = reserved0 1 = increment1 0 = decrement0 0 = hold1:0  Coefficient (-1) update1 01 1 = reserved0 1 = increment1 0 = decrement0 0 = hold
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_XMT_UPD_PAGEr (0x0001d090 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_XMT_UPD_PAGEr_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_UT_XMT_UPD_PAGE.
 */
typedef union BCMI_TSCF_GEN3_XGXS_CL93N72_UT_XMT_UPD_PAGEr_s {
	uint32_t v[1];
	uint32_t cl93n72_ut_xmt_upd_page[1];
	uint32_t _cl93n72_ut_xmt_upd_page;
} BCMI_TSCF_GEN3_XGXS_CL93N72_UT_XMT_UPD_PAGEr_t;

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_XMT_UPD_PAGEr_CLR(r) (r).cl93n72_ut_xmt_upd_page[0] = 0
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_XMT_UPD_PAGEr_SET(r,d) (r).cl93n72_ut_xmt_upd_page[0] = d
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_XMT_UPD_PAGEr_GET(r) (r).cl93n72_ut_xmt_upd_page[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_XMT_UPD_PAGEr_CL93N72_XMT_UPDATE_PAGEf_GET(r) (((r).cl93n72_ut_xmt_upd_page[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_XMT_UPD_PAGEr_CL93N72_XMT_UPDATE_PAGEf_SET(r,f) (r).cl93n72_ut_xmt_upd_page[0]=(((r).cl93n72_ut_xmt_upd_page[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access CL93N72_UT_XMT_UPD_PAGE.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UT_XMT_UPD_PAGEr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_XMT_UPD_PAGEr,(_r._cl93n72_ut_xmt_upd_page))
#define BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UT_XMT_UPD_PAGEr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_XMT_UPD_PAGEr,(_r._cl93n72_ut_xmt_upd_page)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UT_XMT_UPD_PAGEr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_XMT_UPD_PAGEr,(_r._cl93n72_ut_xmt_upd_page))
#define BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UT_XMT_UPD_PAGEr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_XMT_UPD_PAGEr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ut_xmt_upd_page))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UT_XMT_UPD_PAGEr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_XMT_UPD_PAGEr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ut_xmt_upd_page))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UT_XMT_UPD_PAGEr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_XMT_UPD_PAGEr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_ut_xmt_upd_page))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_UT_XMT_UPD_PAGEr BCMI_TSCF_GEN3_XGXS_CL93N72_UT_XMT_UPD_PAGEr
#define CL93N72_UT_XMT_UPD_PAGEr_SIZE BCMI_TSCF_GEN3_XGXS_CL93N72_UT_XMT_UPD_PAGEr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_CL93N72_UT_XMT_UPD_PAGEr_t CL93N72_UT_XMT_UPD_PAGEr_t;
#define CL93N72_UT_XMT_UPD_PAGEr_CLR BCMI_TSCF_GEN3_XGXS_CL93N72_UT_XMT_UPD_PAGEr_CLR
#define CL93N72_UT_XMT_UPD_PAGEr_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_XMT_UPD_PAGEr_SET
#define CL93N72_UT_XMT_UPD_PAGEr_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_XMT_UPD_PAGEr_GET
#define CL93N72_UT_XMT_UPD_PAGEr_CL93N72_XMT_UPDATE_PAGEf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_XMT_UPD_PAGEr_CL93N72_XMT_UPDATE_PAGEf_GET
#define CL93N72_UT_XMT_UPD_PAGEr_CL93N72_XMT_UPDATE_PAGEf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_XMT_UPD_PAGEr_CL93N72_XMT_UPDATE_PAGEf_SET
#define READ_CL93N72_UT_XMT_UPD_PAGEr BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UT_XMT_UPD_PAGEr
#define WRITE_CL93N72_UT_XMT_UPD_PAGEr BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UT_XMT_UPD_PAGEr
#define MODIFY_CL93N72_UT_XMT_UPD_PAGEr BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UT_XMT_UPD_PAGEr
#define READLN_CL93N72_UT_XMT_UPD_PAGEr BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UT_XMT_UPD_PAGEr
#define WRITELN_CL93N72_UT_XMT_UPD_PAGEr BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UT_XMT_UPD_PAGEr
#define WRITEALL_CL93N72_UT_XMT_UPD_PAGEr BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UT_XMT_UPD_PAGEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_CL93N72_UT_XMT_UPD_PAGEr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  CL93N72_UT_LD_XMT_STS_PAGE
 * BLOCKS:   CL93N72_USER_TX
 * REGADDR:  0xd091
 * DEVAD:    1
 * DESC:     cl93n72 Send Local Device's Coeffcient Status to Link Partner Register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL93N72_LD_XMT_STATUS_PAGE Local Device's transmit status page
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_LD_XMT_STS_PAGEr (0x0001d091 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_LD_XMT_STS_PAGEr_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_UT_LD_XMT_STS_PAGE.
 */
typedef union BCMI_TSCF_GEN3_XGXS_CL93N72_UT_LD_XMT_STS_PAGEr_s {
	uint32_t v[1];
	uint32_t cl93n72_ut_ld_xmt_sts_page[1];
	uint32_t _cl93n72_ut_ld_xmt_sts_page;
} BCMI_TSCF_GEN3_XGXS_CL93N72_UT_LD_XMT_STS_PAGEr_t;

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_LD_XMT_STS_PAGEr_CLR(r) (r).cl93n72_ut_ld_xmt_sts_page[0] = 0
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_LD_XMT_STS_PAGEr_SET(r,d) (r).cl93n72_ut_ld_xmt_sts_page[0] = d
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_LD_XMT_STS_PAGEr_GET(r) (r).cl93n72_ut_ld_xmt_sts_page[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_LD_XMT_STS_PAGEr_CL93N72_LD_XMT_STATUS_PAGEf_GET(r) (((r).cl93n72_ut_ld_xmt_sts_page[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_LD_XMT_STS_PAGEr_CL93N72_LD_XMT_STATUS_PAGEf_SET(r,f) (r).cl93n72_ut_ld_xmt_sts_page[0]=(((r).cl93n72_ut_ld_xmt_sts_page[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access CL93N72_UT_LD_XMT_STS_PAGE.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UT_LD_XMT_STS_PAGEr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_LD_XMT_STS_PAGEr,(_r._cl93n72_ut_ld_xmt_sts_page))
#define BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UT_LD_XMT_STS_PAGEr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_LD_XMT_STS_PAGEr,(_r._cl93n72_ut_ld_xmt_sts_page)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UT_LD_XMT_STS_PAGEr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_LD_XMT_STS_PAGEr,(_r._cl93n72_ut_ld_xmt_sts_page))
#define BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UT_LD_XMT_STS_PAGEr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_LD_XMT_STS_PAGEr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ut_ld_xmt_sts_page))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UT_LD_XMT_STS_PAGEr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_LD_XMT_STS_PAGEr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ut_ld_xmt_sts_page))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UT_LD_XMT_STS_PAGEr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_LD_XMT_STS_PAGEr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_ut_ld_xmt_sts_page))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_UT_LD_XMT_STS_PAGEr BCMI_TSCF_GEN3_XGXS_CL93N72_UT_LD_XMT_STS_PAGEr
#define CL93N72_UT_LD_XMT_STS_PAGEr_SIZE BCMI_TSCF_GEN3_XGXS_CL93N72_UT_LD_XMT_STS_PAGEr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_CL93N72_UT_LD_XMT_STS_PAGEr_t CL93N72_UT_LD_XMT_STS_PAGEr_t;
#define CL93N72_UT_LD_XMT_STS_PAGEr_CLR BCMI_TSCF_GEN3_XGXS_CL93N72_UT_LD_XMT_STS_PAGEr_CLR
#define CL93N72_UT_LD_XMT_STS_PAGEr_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_LD_XMT_STS_PAGEr_SET
#define CL93N72_UT_LD_XMT_STS_PAGEr_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_LD_XMT_STS_PAGEr_GET
#define CL93N72_UT_LD_XMT_STS_PAGEr_CL93N72_LD_XMT_STATUS_PAGEf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_LD_XMT_STS_PAGEr_CL93N72_LD_XMT_STATUS_PAGEf_GET
#define CL93N72_UT_LD_XMT_STS_PAGEr_CL93N72_LD_XMT_STATUS_PAGEf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_LD_XMT_STS_PAGEr_CL93N72_LD_XMT_STATUS_PAGEf_SET
#define READ_CL93N72_UT_LD_XMT_STS_PAGEr BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UT_LD_XMT_STS_PAGEr
#define WRITE_CL93N72_UT_LD_XMT_STS_PAGEr BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UT_LD_XMT_STS_PAGEr
#define MODIFY_CL93N72_UT_LD_XMT_STS_PAGEr BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UT_LD_XMT_STS_PAGEr
#define READLN_CL93N72_UT_LD_XMT_STS_PAGEr BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UT_LD_XMT_STS_PAGEr
#define WRITELN_CL93N72_UT_LD_XMT_STS_PAGEr BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UT_LD_XMT_STS_PAGEr
#define WRITEALL_CL93N72_UT_LD_XMT_STS_PAGEr BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UT_LD_XMT_STS_PAGEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_CL93N72_UT_LD_XMT_STS_PAGEr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  CL93N72_UT_CTL0
 * BLOCKS:   CL93N72_USER_TX
 * REGADDR:  0xd092
 * DEVAD:    1
 * DESC:     cl93n72 Control 0 Register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL93N72_SW_RX_TRAINED Set to TRUE (1'b1) by the micro when the remote transmitand local equalizers have been optimized and normal datatransmission may commence; set to FALSE (1'b0) otherwise.
 *     CL93N72_SW_FRAME_LOCK Set to TRUE (1'b1) by the micro to indicate to the training fsmframe lock has been achieved
 *     CL93N72_SW_REMOTE_RX_READY Set to TRUE (1'b1) by the micro to indicate to the training fsmlink parnter rx ready bit is set. It indicates that the remote is trained
 *     CL93N72_IGNORE_XMT_REG_VALUE cl93n72_ignore_xmt_reg_value is used to tell the cl93n72transmitter that it should ignore the contents of cl93n72_xmt_update_pageand cl93n72_ld_xmt_status_page fields. This is used in applications thatonly allows the control and status to change during the same frame1 - ignore (do not use) cl93n72_xmt_update_page/cl93n72_ld_xmt_status_page    fields in the cl93n72 frame(s) trasmitterd to LP 0 - allow cl93n72_xmt_update_page/cl93n72_ld_xmt_status_pagefields in the cl93n72 frame(s) trasmitterd to LP
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL0r (0x0001d092 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_UT_CTL0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL0r_s {
	uint32_t v[1];
	uint32_t cl93n72_ut_ctl0[1];
	uint32_t _cl93n72_ut_ctl0;
} BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL0r_t;

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL0r_CLR(r) (r).cl93n72_ut_ctl0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL0r_SET(r,d) (r).cl93n72_ut_ctl0[0] = d
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL0r_GET(r) (r).cl93n72_ut_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL0r_CL93N72_IGNORE_XMT_REG_VALUEf_GET(r) ((((r).cl93n72_ut_ctl0[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL0r_CL93N72_IGNORE_XMT_REG_VALUEf_SET(r,f) (r).cl93n72_ut_ctl0[0]=(((r).cl93n72_ut_ctl0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL0r_CL93N72_SW_REMOTE_RX_READYf_GET(r) ((((r).cl93n72_ut_ctl0[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL0r_CL93N72_SW_REMOTE_RX_READYf_SET(r,f) (r).cl93n72_ut_ctl0[0]=(((r).cl93n72_ut_ctl0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL0r_CL93N72_SW_FRAME_LOCKf_GET(r) ((((r).cl93n72_ut_ctl0[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL0r_CL93N72_SW_FRAME_LOCKf_SET(r,f) (r).cl93n72_ut_ctl0[0]=(((r).cl93n72_ut_ctl0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL0r_CL93N72_SW_RX_TRAINEDf_GET(r) (((r).cl93n72_ut_ctl0[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL0r_CL93N72_SW_RX_TRAINEDf_SET(r,f) (r).cl93n72_ut_ctl0[0]=(((r).cl93n72_ut_ctl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access CL93N72_UT_CTL0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UT_CTL0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL0r,(_r._cl93n72_ut_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UT_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL0r,(_r._cl93n72_ut_ctl0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UT_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL0r,(_r._cl93n72_ut_ctl0))
#define BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UT_CTL0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ut_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UT_CTL0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ut_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UT_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_ut_ctl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_UT_CTL0r BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL0r
#define CL93N72_UT_CTL0r_SIZE BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL0r_t CL93N72_UT_CTL0r_t;
#define CL93N72_UT_CTL0r_CLR BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL0r_CLR
#define CL93N72_UT_CTL0r_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL0r_SET
#define CL93N72_UT_CTL0r_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL0r_GET
#define CL93N72_UT_CTL0r_CL93N72_IGNORE_XMT_REG_VALUEf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL0r_CL93N72_IGNORE_XMT_REG_VALUEf_GET
#define CL93N72_UT_CTL0r_CL93N72_IGNORE_XMT_REG_VALUEf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL0r_CL93N72_IGNORE_XMT_REG_VALUEf_SET
#define CL93N72_UT_CTL0r_CL93N72_SW_REMOTE_RX_READYf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL0r_CL93N72_SW_REMOTE_RX_READYf_GET
#define CL93N72_UT_CTL0r_CL93N72_SW_REMOTE_RX_READYf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL0r_CL93N72_SW_REMOTE_RX_READYf_SET
#define CL93N72_UT_CTL0r_CL93N72_SW_FRAME_LOCKf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL0r_CL93N72_SW_FRAME_LOCKf_GET
#define CL93N72_UT_CTL0r_CL93N72_SW_FRAME_LOCKf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL0r_CL93N72_SW_FRAME_LOCKf_SET
#define CL93N72_UT_CTL0r_CL93N72_SW_RX_TRAINEDf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL0r_CL93N72_SW_RX_TRAINEDf_GET
#define CL93N72_UT_CTL0r_CL93N72_SW_RX_TRAINEDf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL0r_CL93N72_SW_RX_TRAINEDf_SET
#define READ_CL93N72_UT_CTL0r BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UT_CTL0r
#define WRITE_CL93N72_UT_CTL0r BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UT_CTL0r
#define MODIFY_CL93N72_UT_CTL0r BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UT_CTL0r
#define READLN_CL93N72_UT_CTL0r BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UT_CTL0r
#define WRITELN_CL93N72_UT_CTL0r BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UT_CTL0r
#define WRITEALL_CL93N72_UT_CTL0r BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UT_CTL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  CL93N72_UT_CTL1
 * BLOCKS:   CL93N72_USER_TX
 * REGADDR:  0xd093
 * DEVAD:    1
 * DESC:     cl93n72 Control 1 Register
 * RESETVAL: 0x4 (4)
 * ACCESS:   R/W
 * FIELDS:
 *     CL93N72_BRK_RING_OSC PRBS 11 Ring Oscillator control1: No oscillating - low power mode0: Osciallate - normal mode
 *     CL93N72_DIS_MAX_WAIT_TIMER disable max wait timer1 = max wait timer disabled0 = max wait timer enabled
 *     CL93N72_TX_DP_LN_CLK_EN cl93n72 Tx Datapath lane clock enable0 - disabled1 - enabled
 *     CL93N72_TIMER_VALUE_SEL This bit is used to select the register fields that sets themaximum training time and the number of frames to be sent bythe local device after it has been traininedThis field is normally set while the datapath reset is asserted.This bit is asynchronous to the txcom_* register fields1 = use txcom_cl93n72_wait_cntr_limit_2ndset/txcom_cl93n72_max_wait_timer_period_2ndset0 = use txcom_cl93n72_wait_cntr_limit/txcom_cl93n72_max_wait_timer_period
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL1r (0x0001d093 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL1r_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_UT_CTL1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL1r_s {
	uint32_t v[1];
	uint32_t cl93n72_ut_ctl1[1];
	uint32_t _cl93n72_ut_ctl1;
} BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL1r_t;

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL1r_CLR(r) (r).cl93n72_ut_ctl1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL1r_SET(r,d) (r).cl93n72_ut_ctl1[0] = d
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL1r_GET(r) (r).cl93n72_ut_ctl1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL1r_CL93N72_TIMER_VALUE_SELf_GET(r) ((((r).cl93n72_ut_ctl1[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL1r_CL93N72_TIMER_VALUE_SELf_SET(r,f) (r).cl93n72_ut_ctl1[0]=(((r).cl93n72_ut_ctl1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL1r_CL93N72_TX_DP_LN_CLK_ENf_GET(r) ((((r).cl93n72_ut_ctl1[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL1r_CL93N72_TX_DP_LN_CLK_ENf_SET(r,f) (r).cl93n72_ut_ctl1[0]=(((r).cl93n72_ut_ctl1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL1r_CL93N72_DIS_MAX_WAIT_TIMERf_GET(r) ((((r).cl93n72_ut_ctl1[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL1r_CL93N72_DIS_MAX_WAIT_TIMERf_SET(r,f) (r).cl93n72_ut_ctl1[0]=(((r).cl93n72_ut_ctl1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL1r_CL93N72_BRK_RING_OSCf_GET(r) (((r).cl93n72_ut_ctl1[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL1r_CL93N72_BRK_RING_OSCf_SET(r,f) (r).cl93n72_ut_ctl1[0]=(((r).cl93n72_ut_ctl1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access CL93N72_UT_CTL1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UT_CTL1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL1r,(_r._cl93n72_ut_ctl1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UT_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL1r,(_r._cl93n72_ut_ctl1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UT_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL1r,(_r._cl93n72_ut_ctl1))
#define BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UT_CTL1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ut_ctl1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UT_CTL1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ut_ctl1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UT_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_ut_ctl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_UT_CTL1r BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL1r
#define CL93N72_UT_CTL1r_SIZE BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL1r_t CL93N72_UT_CTL1r_t;
#define CL93N72_UT_CTL1r_CLR BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL1r_CLR
#define CL93N72_UT_CTL1r_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL1r_SET
#define CL93N72_UT_CTL1r_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL1r_GET
#define CL93N72_UT_CTL1r_CL93N72_TIMER_VALUE_SELf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL1r_CL93N72_TIMER_VALUE_SELf_GET
#define CL93N72_UT_CTL1r_CL93N72_TIMER_VALUE_SELf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL1r_CL93N72_TIMER_VALUE_SELf_SET
#define CL93N72_UT_CTL1r_CL93N72_TX_DP_LN_CLK_ENf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL1r_CL93N72_TX_DP_LN_CLK_ENf_GET
#define CL93N72_UT_CTL1r_CL93N72_TX_DP_LN_CLK_ENf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL1r_CL93N72_TX_DP_LN_CLK_ENf_SET
#define CL93N72_UT_CTL1r_CL93N72_DIS_MAX_WAIT_TIMERf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL1r_CL93N72_DIS_MAX_WAIT_TIMERf_GET
#define CL93N72_UT_CTL1r_CL93N72_DIS_MAX_WAIT_TIMERf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL1r_CL93N72_DIS_MAX_WAIT_TIMERf_SET
#define CL93N72_UT_CTL1r_CL93N72_BRK_RING_OSCf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL1r_CL93N72_BRK_RING_OSCf_GET
#define CL93N72_UT_CTL1r_CL93N72_BRK_RING_OSCf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL1r_CL93N72_BRK_RING_OSCf_SET
#define READ_CL93N72_UT_CTL1r BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UT_CTL1r
#define WRITE_CL93N72_UT_CTL1r BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UT_CTL1r
#define MODIFY_CL93N72_UT_CTL1r BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UT_CTL1r
#define READLN_CL93N72_UT_CTL1r BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UT_CTL1r
#define WRITELN_CL93N72_UT_CTL1r BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UT_CTL1r
#define WRITEALL_CL93N72_UT_CTL1r BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UT_CTL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  CL93N72_UT_CTL2
 * BLOCKS:   CL93N72_USER_TX
 * REGADDR:  0xd094
 * DEVAD:    1
 * DESC:     cl93n72 Control 2 Register
 * RESETVAL: 0x1808 (6152)
 * ACCESS:   R/W
 * FIELDS:
 *     CL93N72_TXFIR_PRE pre cursor tap coeeficient value.CAUI-4 chip to chip defaults
 *     CL93N72_TXFIR_POST post cursor tap coeeficient value.CAUI-4 chip to chip defaults
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL2r (0x0001d094 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL2r_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_UT_CTL2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL2r_s {
	uint32_t v[1];
	uint32_t cl93n72_ut_ctl2[1];
	uint32_t _cl93n72_ut_ctl2;
} BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL2r_t;

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL2r_CLR(r) (r).cl93n72_ut_ctl2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL2r_SET(r,d) (r).cl93n72_ut_ctl2[0] = d
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL2r_GET(r) (r).cl93n72_ut_ctl2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL2r_CL93N72_TXFIR_POSTf_GET(r) ((((r).cl93n72_ut_ctl2[0]) >> 8) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL2r_CL93N72_TXFIR_POSTf_SET(r,f) (r).cl93n72_ut_ctl2[0]=(((r).cl93n72_ut_ctl2[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8)) | (63 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL2r_CL93N72_TXFIR_PREf_GET(r) (((r).cl93n72_ut_ctl2[0]) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL2r_CL93N72_TXFIR_PREf_SET(r,f) (r).cl93n72_ut_ctl2[0]=(((r).cl93n72_ut_ctl2[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access CL93N72_UT_CTL2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UT_CTL2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL2r,(_r._cl93n72_ut_ctl2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UT_CTL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL2r,(_r._cl93n72_ut_ctl2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UT_CTL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL2r,(_r._cl93n72_ut_ctl2))
#define BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UT_CTL2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ut_ctl2))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UT_CTL2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ut_ctl2))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UT_CTL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_ut_ctl2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_UT_CTL2r BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL2r
#define CL93N72_UT_CTL2r_SIZE BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL2r_t CL93N72_UT_CTL2r_t;
#define CL93N72_UT_CTL2r_CLR BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL2r_CLR
#define CL93N72_UT_CTL2r_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL2r_SET
#define CL93N72_UT_CTL2r_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL2r_GET
#define CL93N72_UT_CTL2r_CL93N72_TXFIR_POSTf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL2r_CL93N72_TXFIR_POSTf_GET
#define CL93N72_UT_CTL2r_CL93N72_TXFIR_POSTf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL2r_CL93N72_TXFIR_POSTf_SET
#define CL93N72_UT_CTL2r_CL93N72_TXFIR_PREf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL2r_CL93N72_TXFIR_PREf_GET
#define CL93N72_UT_CTL2r_CL93N72_TXFIR_PREf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL2r_CL93N72_TXFIR_PREf_SET
#define READ_CL93N72_UT_CTL2r BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UT_CTL2r
#define WRITE_CL93N72_UT_CTL2r BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UT_CTL2r
#define MODIFY_CL93N72_UT_CTL2r BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UT_CTL2r
#define READLN_CL93N72_UT_CTL2r BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UT_CTL2r
#define WRITELN_CL93N72_UT_CTL2r BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UT_CTL2r
#define WRITEALL_CL93N72_UT_CTL2r BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UT_CTL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  CL93N72_UT_CTL3
 * BLOCKS:   CL93N72_USER_TX
 * REGADDR:  0xd095
 * DEVAD:    1
 * DESC:     cl93n72 Control 3 Register
 * RESETVAL: 0x50 (80)
 * ACCESS:   R/W
 * FIELDS:
 *     CL93N72_TXFIR_MAIN main cursor tap coeeficient value.CAUI-4 chip to chip defaults
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL3r (0x0001d095 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL3r_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_UT_CTL3.
 */
typedef union BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL3r_s {
	uint32_t v[1];
	uint32_t cl93n72_ut_ctl3[1];
	uint32_t _cl93n72_ut_ctl3;
} BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL3r_t;

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL3r_CLR(r) (r).cl93n72_ut_ctl3[0] = 0
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL3r_SET(r,d) (r).cl93n72_ut_ctl3[0] = d
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL3r_GET(r) (r).cl93n72_ut_ctl3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL3r_CL93N72_TXFIR_MAINf_GET(r) (((r).cl93n72_ut_ctl3[0]) & 0x7f)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL3r_CL93N72_TXFIR_MAINf_SET(r,f) (r).cl93n72_ut_ctl3[0]=(((r).cl93n72_ut_ctl3[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f)) | (0x7f << 16)

/*
 * These macros can be used to access CL93N72_UT_CTL3.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UT_CTL3r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL3r,(_r._cl93n72_ut_ctl3))
#define BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UT_CTL3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL3r,(_r._cl93n72_ut_ctl3)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UT_CTL3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL3r,(_r._cl93n72_ut_ctl3))
#define BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UT_CTL3r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ut_ctl3))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UT_CTL3r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ut_ctl3))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UT_CTL3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL3r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_ut_ctl3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_UT_CTL3r BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL3r
#define CL93N72_UT_CTL3r_SIZE BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL3r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL3r_t CL93N72_UT_CTL3r_t;
#define CL93N72_UT_CTL3r_CLR BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL3r_CLR
#define CL93N72_UT_CTL3r_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL3r_SET
#define CL93N72_UT_CTL3r_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL3r_GET
#define CL93N72_UT_CTL3r_CL93N72_TXFIR_MAINf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL3r_CL93N72_TXFIR_MAINf_GET
#define CL93N72_UT_CTL3r_CL93N72_TXFIR_MAINf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL3r_CL93N72_TXFIR_MAINf_SET
#define READ_CL93N72_UT_CTL3r BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UT_CTL3r
#define WRITE_CL93N72_UT_CTL3r BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UT_CTL3r
#define MODIFY_CL93N72_UT_CTL3r BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UT_CTL3r
#define READLN_CL93N72_UT_CTL3r BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UT_CTL3r
#define WRITELN_CL93N72_UT_CTL3r BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UT_CTL3r
#define WRITEALL_CL93N72_UT_CTL3r BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UT_CTL3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  CL93N72_UT_STS0
 * BLOCKS:   CL93N72_USER_TX
 * REGADDR:  0xd096
 * DEVAD:    1
 * DESC:     cl93n72 Status 0 Register
 * RESETVAL: 0x2 (2)
 * ACCESS:   R/O
 * FIELDS:
 *     CL93N72_LOCAL_RX_READY Set to TRUE (1'b1) by the FSM when the remote transmitand local equalizers have been optimized and normal datatransmission may commence; set to FALSE (1'b0) otherwise.
 *     CL93N72_TRAINING_FSM_SIGNAL_DETECT 1 - cl93n72 is in SEND_DATA state0 - cl93n72 is in training state
 *     CL93N72_SM_CURRENT_STATE Training State machine current state0 = ST_INITIALIZE1 = ST_SEND_TRAINING2 = ST_TRAIN_LOCAL3 = ST_TRAIN_REMOTE4 = ST_LINK_READY5 = ST_SEND_DATA6 = ST_TRAINING_FAILURE
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_STS0r (0x0001d096 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_STS0r_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_UT_STS0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_CL93N72_UT_STS0r_s {
	uint32_t v[1];
	uint32_t cl93n72_ut_sts0[1];
	uint32_t _cl93n72_ut_sts0;
} BCMI_TSCF_GEN3_XGXS_CL93N72_UT_STS0r_t;

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_STS0r_CLR(r) (r).cl93n72_ut_sts0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_STS0r_SET(r,d) (r).cl93n72_ut_sts0[0] = d
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_STS0r_GET(r) (r).cl93n72_ut_sts0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_STS0r_CL93N72_SM_CURRENT_STATEf_GET(r) ((((r).cl93n72_ut_sts0[0]) >> 12) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_STS0r_CL93N72_SM_CURRENT_STATEf_SET(r,f) (r).cl93n72_ut_sts0[0]=(((r).cl93n72_ut_sts0[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12)) | (7 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_STS0r_CL93N72_TRAINING_FSM_SIGNAL_DETECTf_GET(r) ((((r).cl93n72_ut_sts0[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_STS0r_CL93N72_TRAINING_FSM_SIGNAL_DETECTf_SET(r,f) (r).cl93n72_ut_sts0[0]=(((r).cl93n72_ut_sts0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_STS0r_CL93N72_LOCAL_RX_READYf_GET(r) (((r).cl93n72_ut_sts0[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_STS0r_CL93N72_LOCAL_RX_READYf_SET(r,f) (r).cl93n72_ut_sts0[0]=(((r).cl93n72_ut_sts0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access CL93N72_UT_STS0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UT_STS0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_STS0r,(_r._cl93n72_ut_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UT_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_STS0r,(_r._cl93n72_ut_sts0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UT_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_STS0r,(_r._cl93n72_ut_sts0))
#define BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UT_STS0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ut_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UT_STS0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ut_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UT_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_STS0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_ut_sts0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_UT_STS0r BCMI_TSCF_GEN3_XGXS_CL93N72_UT_STS0r
#define CL93N72_UT_STS0r_SIZE BCMI_TSCF_GEN3_XGXS_CL93N72_UT_STS0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_CL93N72_UT_STS0r_t CL93N72_UT_STS0r_t;
#define CL93N72_UT_STS0r_CLR BCMI_TSCF_GEN3_XGXS_CL93N72_UT_STS0r_CLR
#define CL93N72_UT_STS0r_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_STS0r_SET
#define CL93N72_UT_STS0r_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_STS0r_GET
#define CL93N72_UT_STS0r_CL93N72_SM_CURRENT_STATEf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_STS0r_CL93N72_SM_CURRENT_STATEf_GET
#define CL93N72_UT_STS0r_CL93N72_SM_CURRENT_STATEf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_STS0r_CL93N72_SM_CURRENT_STATEf_SET
#define CL93N72_UT_STS0r_CL93N72_TRAINING_FSM_SIGNAL_DETECTf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_STS0r_CL93N72_TRAINING_FSM_SIGNAL_DETECTf_GET
#define CL93N72_UT_STS0r_CL93N72_TRAINING_FSM_SIGNAL_DETECTf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_STS0r_CL93N72_TRAINING_FSM_SIGNAL_DETECTf_SET
#define CL93N72_UT_STS0r_CL93N72_LOCAL_RX_READYf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_STS0r_CL93N72_LOCAL_RX_READYf_GET
#define CL93N72_UT_STS0r_CL93N72_LOCAL_RX_READYf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_STS0r_CL93N72_LOCAL_RX_READYf_SET
#define READ_CL93N72_UT_STS0r BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UT_STS0r
#define WRITE_CL93N72_UT_STS0r BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UT_STS0r
#define MODIFY_CL93N72_UT_STS0r BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UT_STS0r
#define READLN_CL93N72_UT_STS0r BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UT_STS0r
#define WRITELN_CL93N72_UT_STS0r BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UT_STS0r
#define WRITEALL_CL93N72_UT_STS0r BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UT_STS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_CL93N72_UT_STS0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  CL93N72_UT_CTL4
 * BLOCKS:   CL93N72_USER_TX
 * REGADDR:  0xd097
 * DEVAD:    1
 * DESC:     cl93n72 Control 4 Register
 * RESETVAL: 0x23f5 (9205)
 * ACCESS:   R/W
 * FIELDS:
 *     CL93N72_PRBS_SEED_VAL prbs seed valueThese bits can be used to specify the cl72/cl93 prbs seed valuesPLEASE NOTE: The default value of these register bits for each lane is unique. The IEEE P802.3bj/D2.1defines the following default seed values for each lane:Lane 0 - 11'h3F5Lane 1 - 11'h513Lane 2 - 11'h5A7Lane 3 - 11'h36F
 *     CL93N72_CL93PRBS_POLY_SEL cl93 mode prbs polynomial selectThese bits are used to select the following prbs polynomials when prbs_mode_sel field is set to 1'b1:2'b00: 1 + x5 + x6 + x10 + x112'b01: 1 + x5 + x6 + x9  + x112'b10: 1 + x4 + x6 + x8  + x112'b11: 1 + x4 + x6 + x7  + x11PLEASE NOTE:The default value of these register bits for each lane is unique. The IEEE P802.3bj/D2.1defines the following default seed values for each lane:Lane 0 - 2'b00Lane 1 - 2'b01Lane 2 - 2'b10Lane 3 - 2'b11
 *     CL93N72_PRBS_MODE_SEL This field is used to select prbs mode0 - cl72 mode. Uses 1 + x9  + x11 prbs polynomial1 - cl93 mode. The prbs polynomial is specified by the  cl93n72_cl93prbs_poly_sel field
 *     CL93N72_PRBS_SEED_SEL These bits used to select the seed for prbs generator during the training sequence:2'b00 - cl72 mode - random seed every frame, cl93 mode - seed specified by the cl93n72_prbs_seed_val field2'b01 - random seed every frame2'b10 - random seed first frame only and then same seed every frame2'b11 - seed specified by the prbs_seed_val field
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL4r (0x0001d097 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL4r_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_UT_CTL4.
 */
typedef union BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL4r_s {
	uint32_t v[1];
	uint32_t cl93n72_ut_ctl4[1];
	uint32_t _cl93n72_ut_ctl4;
} BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL4r_t;

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL4r_CLR(r) (r).cl93n72_ut_ctl4[0] = 0
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL4r_SET(r,d) (r).cl93n72_ut_ctl4[0] = d
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL4r_GET(r) (r).cl93n72_ut_ctl4[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL4r_CL93N72_PRBS_SEED_SELf_GET(r) ((((r).cl93n72_ut_ctl4[0]) >> 14) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL4r_CL93N72_PRBS_SEED_SELf_SET(r,f) (r).cl93n72_ut_ctl4[0]=(((r).cl93n72_ut_ctl4[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL4r_CL93N72_PRBS_MODE_SELf_GET(r) ((((r).cl93n72_ut_ctl4[0]) >> 13) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL4r_CL93N72_PRBS_MODE_SELf_SET(r,f) (r).cl93n72_ut_ctl4[0]=(((r).cl93n72_ut_ctl4[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL4r_CL93N72_CL93PRBS_POLY_SELf_GET(r) ((((r).cl93n72_ut_ctl4[0]) >> 11) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL4r_CL93N72_CL93PRBS_POLY_SELf_SET(r,f) (r).cl93n72_ut_ctl4[0]=(((r).cl93n72_ut_ctl4[0] & ~((uint32_t)0x3 << 11)) | ((((uint32_t)f) & 0x3) << 11)) | (3 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL4r_CL93N72_PRBS_SEED_VALf_GET(r) (((r).cl93n72_ut_ctl4[0]) & 0x7ff)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL4r_CL93N72_PRBS_SEED_VALf_SET(r,f) (r).cl93n72_ut_ctl4[0]=(((r).cl93n72_ut_ctl4[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff)) | (0x7ff << 16)

/*
 * These macros can be used to access CL93N72_UT_CTL4.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UT_CTL4r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL4r,(_r._cl93n72_ut_ctl4))
#define BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UT_CTL4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL4r,(_r._cl93n72_ut_ctl4)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UT_CTL4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL4r,(_r._cl93n72_ut_ctl4))
#define BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UT_CTL4r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ut_ctl4))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UT_CTL4r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ut_ctl4))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UT_CTL4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL4r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_ut_ctl4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_UT_CTL4r BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL4r
#define CL93N72_UT_CTL4r_SIZE BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL4r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL4r_t CL93N72_UT_CTL4r_t;
#define CL93N72_UT_CTL4r_CLR BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL4r_CLR
#define CL93N72_UT_CTL4r_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL4r_SET
#define CL93N72_UT_CTL4r_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL4r_GET
#define CL93N72_UT_CTL4r_CL93N72_PRBS_SEED_SELf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL4r_CL93N72_PRBS_SEED_SELf_GET
#define CL93N72_UT_CTL4r_CL93N72_PRBS_SEED_SELf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL4r_CL93N72_PRBS_SEED_SELf_SET
#define CL93N72_UT_CTL4r_CL93N72_PRBS_MODE_SELf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL4r_CL93N72_PRBS_MODE_SELf_GET
#define CL93N72_UT_CTL4r_CL93N72_PRBS_MODE_SELf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL4r_CL93N72_PRBS_MODE_SELf_SET
#define CL93N72_UT_CTL4r_CL93N72_CL93PRBS_POLY_SELf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL4r_CL93N72_CL93PRBS_POLY_SELf_GET
#define CL93N72_UT_CTL4r_CL93N72_CL93PRBS_POLY_SELf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL4r_CL93N72_CL93PRBS_POLY_SELf_SET
#define CL93N72_UT_CTL4r_CL93N72_PRBS_SEED_VALf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL4r_CL93N72_PRBS_SEED_VALf_GET
#define CL93N72_UT_CTL4r_CL93N72_PRBS_SEED_VALf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL4r_CL93N72_PRBS_SEED_VALf_SET
#define READ_CL93N72_UT_CTL4r BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UT_CTL4r
#define WRITE_CL93N72_UT_CTL4r BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UT_CTL4r
#define MODIFY_CL93N72_UT_CTL4r BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UT_CTL4r
#define READLN_CL93N72_UT_CTL4r BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UT_CTL4r
#define WRITELN_CL93N72_UT_CTL4r BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UT_CTL4r
#define WRITEALL_CL93N72_UT_CTL4r BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UT_CTL4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_CL93N72_UT_CTL4r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  CL93N72_UT_PCS_TX_FCTTS_CTL0
 * BLOCKS:   CL93N72_USER_TX
 * REGADDR:  0xd09b
 * DEVAD:    1
 * DESC:     cl93n72 pcs tx fc tts control 0 register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL93N72_FCTTS_SN_TO_TRN_REQ PCS sets this field to request the PMD firmware to perform seemless transitionfrom FC TTS speed negotiation to FC TTS trainingPMD firmware clears this field to 1'b0 to acknowledge the request
 *     CL93N72_SEND_FCTTS_AFTER_TRAINING Send TTS frames after fiber channel training is complete0 - disabled1 - enabled
 *     CL93N72_FCTTS_INFO Scratch register bit for future use
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_CTL0r (0x0001d09b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_UT_PCS_TX_FCTTS_CTL0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_CTL0r_s {
	uint32_t v[1];
	uint32_t cl93n72_ut_pcs_tx_fctts_ctl0[1];
	uint32_t _cl93n72_ut_pcs_tx_fctts_ctl0;
} BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_CTL0r_t;

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_CTL0r_CLR(r) (r).cl93n72_ut_pcs_tx_fctts_ctl0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_CTL0r_SET(r,d) (r).cl93n72_ut_pcs_tx_fctts_ctl0[0] = d
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_CTL0r_GET(r) (r).cl93n72_ut_pcs_tx_fctts_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_CTL0r_CL93N72_FCTTS_INFOf_GET(r) ((((r).cl93n72_ut_pcs_tx_fctts_ctl0[0]) >> 2) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_CTL0r_CL93N72_FCTTS_INFOf_SET(r,f) (r).cl93n72_ut_pcs_tx_fctts_ctl0[0]=(((r).cl93n72_ut_pcs_tx_fctts_ctl0[0] & ~((uint32_t)0x3f << 2)) | ((((uint32_t)f) & 0x3f) << 2)) | (63 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_CTL0r_CL93N72_SEND_FCTTS_AFTER_TRAININGf_GET(r) ((((r).cl93n72_ut_pcs_tx_fctts_ctl0[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_CTL0r_CL93N72_SEND_FCTTS_AFTER_TRAININGf_SET(r,f) (r).cl93n72_ut_pcs_tx_fctts_ctl0[0]=(((r).cl93n72_ut_pcs_tx_fctts_ctl0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_CTL0r_CL93N72_FCTTS_SN_TO_TRN_REQf_GET(r) (((r).cl93n72_ut_pcs_tx_fctts_ctl0[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_CTL0r_CL93N72_FCTTS_SN_TO_TRN_REQf_SET(r,f) (r).cl93n72_ut_pcs_tx_fctts_ctl0[0]=(((r).cl93n72_ut_pcs_tx_fctts_ctl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access CL93N72_UT_PCS_TX_FCTTS_CTL0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UT_PCS_TX_FCTTS_CTL0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_CTL0r,(_r._cl93n72_ut_pcs_tx_fctts_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UT_PCS_TX_FCTTS_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_CTL0r,(_r._cl93n72_ut_pcs_tx_fctts_ctl0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UT_PCS_TX_FCTTS_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_CTL0r,(_r._cl93n72_ut_pcs_tx_fctts_ctl0))
#define BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UT_PCS_TX_FCTTS_CTL0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ut_pcs_tx_fctts_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UT_PCS_TX_FCTTS_CTL0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ut_pcs_tx_fctts_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UT_PCS_TX_FCTTS_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_ut_pcs_tx_fctts_ctl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_UT_PCS_TX_FCTTS_CTL0r BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_CTL0r
#define CL93N72_UT_PCS_TX_FCTTS_CTL0r_SIZE BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_CTL0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_CTL0r_t CL93N72_UT_PCS_TX_FCTTS_CTL0r_t;
#define CL93N72_UT_PCS_TX_FCTTS_CTL0r_CLR BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_CTL0r_CLR
#define CL93N72_UT_PCS_TX_FCTTS_CTL0r_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_CTL0r_SET
#define CL93N72_UT_PCS_TX_FCTTS_CTL0r_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_CTL0r_GET
#define CL93N72_UT_PCS_TX_FCTTS_CTL0r_CL93N72_FCTTS_INFOf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_CTL0r_CL93N72_FCTTS_INFOf_GET
#define CL93N72_UT_PCS_TX_FCTTS_CTL0r_CL93N72_FCTTS_INFOf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_CTL0r_CL93N72_FCTTS_INFOf_SET
#define CL93N72_UT_PCS_TX_FCTTS_CTL0r_CL93N72_SEND_FCTTS_AFTER_TRAININGf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_CTL0r_CL93N72_SEND_FCTTS_AFTER_TRAININGf_GET
#define CL93N72_UT_PCS_TX_FCTTS_CTL0r_CL93N72_SEND_FCTTS_AFTER_TRAININGf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_CTL0r_CL93N72_SEND_FCTTS_AFTER_TRAININGf_SET
#define CL93N72_UT_PCS_TX_FCTTS_CTL0r_CL93N72_FCTTS_SN_TO_TRN_REQf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_CTL0r_CL93N72_FCTTS_SN_TO_TRN_REQf_GET
#define CL93N72_UT_PCS_TX_FCTTS_CTL0r_CL93N72_FCTTS_SN_TO_TRN_REQf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_CTL0r_CL93N72_FCTTS_SN_TO_TRN_REQf_SET
#define READ_CL93N72_UT_PCS_TX_FCTTS_CTL0r BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UT_PCS_TX_FCTTS_CTL0r
#define WRITE_CL93N72_UT_PCS_TX_FCTTS_CTL0r BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UT_PCS_TX_FCTTS_CTL0r
#define MODIFY_CL93N72_UT_PCS_TX_FCTTS_CTL0r BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UT_PCS_TX_FCTTS_CTL0r
#define READLN_CL93N72_UT_PCS_TX_FCTTS_CTL0r BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UT_PCS_TX_FCTTS_CTL0r
#define WRITELN_CL93N72_UT_PCS_TX_FCTTS_CTL0r BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UT_PCS_TX_FCTTS_CTL0r
#define WRITEALL_CL93N72_UT_PCS_TX_FCTTS_CTL0r BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UT_PCS_TX_FCTTS_CTL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  CL93N72_UT_PCS_TX_FCTTS_STS0
 * BLOCKS:   CL93N72_USER_TX
 * REGADDR:  0xd09c
 * DEVAD:    1
 * DESC:     cl93n72 pcs tx fc tts status 0 register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CL93N72_TX_FCTTS_SN_STATUS cl93n72 fiber channel speed negotiation tts status1 - enabled0 - disabled
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_STS0r (0x0001d09c | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_STS0r_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_UT_PCS_TX_FCTTS_STS0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_STS0r_s {
	uint32_t v[1];
	uint32_t cl93n72_ut_pcs_tx_fctts_sts0[1];
	uint32_t _cl93n72_ut_pcs_tx_fctts_sts0;
} BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_STS0r_t;

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_STS0r_CLR(r) (r).cl93n72_ut_pcs_tx_fctts_sts0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_STS0r_SET(r,d) (r).cl93n72_ut_pcs_tx_fctts_sts0[0] = d
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_STS0r_GET(r) (r).cl93n72_ut_pcs_tx_fctts_sts0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_STS0r_CL93N72_TX_FCTTS_SN_STATUSf_GET(r) (((r).cl93n72_ut_pcs_tx_fctts_sts0[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_STS0r_CL93N72_TX_FCTTS_SN_STATUSf_SET(r,f) (r).cl93n72_ut_pcs_tx_fctts_sts0[0]=(((r).cl93n72_ut_pcs_tx_fctts_sts0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access CL93N72_UT_PCS_TX_FCTTS_STS0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UT_PCS_TX_FCTTS_STS0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_STS0r,(_r._cl93n72_ut_pcs_tx_fctts_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UT_PCS_TX_FCTTS_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_STS0r,(_r._cl93n72_ut_pcs_tx_fctts_sts0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UT_PCS_TX_FCTTS_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_STS0r,(_r._cl93n72_ut_pcs_tx_fctts_sts0))
#define BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UT_PCS_TX_FCTTS_STS0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ut_pcs_tx_fctts_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UT_PCS_TX_FCTTS_STS0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ut_pcs_tx_fctts_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UT_PCS_TX_FCTTS_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_STS0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_ut_pcs_tx_fctts_sts0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_UT_PCS_TX_FCTTS_STS0r BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_STS0r
#define CL93N72_UT_PCS_TX_FCTTS_STS0r_SIZE BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_STS0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_STS0r_t CL93N72_UT_PCS_TX_FCTTS_STS0r_t;
#define CL93N72_UT_PCS_TX_FCTTS_STS0r_CLR BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_STS0r_CLR
#define CL93N72_UT_PCS_TX_FCTTS_STS0r_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_STS0r_SET
#define CL93N72_UT_PCS_TX_FCTTS_STS0r_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_STS0r_GET
#define CL93N72_UT_PCS_TX_FCTTS_STS0r_CL93N72_TX_FCTTS_SN_STATUSf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_STS0r_CL93N72_TX_FCTTS_SN_STATUSf_GET
#define CL93N72_UT_PCS_TX_FCTTS_STS0r_CL93N72_TX_FCTTS_SN_STATUSf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_STS0r_CL93N72_TX_FCTTS_SN_STATUSf_SET
#define READ_CL93N72_UT_PCS_TX_FCTTS_STS0r BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UT_PCS_TX_FCTTS_STS0r
#define WRITE_CL93N72_UT_PCS_TX_FCTTS_STS0r BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UT_PCS_TX_FCTTS_STS0r
#define MODIFY_CL93N72_UT_PCS_TX_FCTTS_STS0r BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UT_PCS_TX_FCTTS_STS0r
#define READLN_CL93N72_UT_PCS_TX_FCTTS_STS0r BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UT_PCS_TX_FCTTS_STS0r
#define WRITELN_CL93N72_UT_PCS_TX_FCTTS_STS0r BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UT_PCS_TX_FCTTS_STS0r
#define WRITEALL_CL93N72_UT_PCS_TX_FCTTS_STS0r BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UT_PCS_TX_FCTTS_STS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_STS0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  CL93N72_UT_PMD_TX_FCTTS_CTL0
 * BLOCKS:   CL93N72_USER_TX
 * REGADDR:  0xd09d
 * DEVAD:    1
 * DESC:     cl93n72 pmd tx fc tts control 0 register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL93N72_TX_FCTTS_SN_EN cl93n72 fiber channel speed negotiation enable1 - enabled0 - disabled
 *     CL93N72_FCTTS_SN_TO_TRN_REQ_INTR_EN cl93n72_fctts_sn_to_trn_req interrupt1 - enabled. Generates an interrupt to micro  whenwhen cl93n72_fctts_sn_to_trn_req field to 1'b10 - disabled.
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PMD_TX_FCTTS_CTL0r (0x0001d09d | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PMD_TX_FCTTS_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_UT_PMD_TX_FCTTS_CTL0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PMD_TX_FCTTS_CTL0r_s {
	uint32_t v[1];
	uint32_t cl93n72_ut_pmd_tx_fctts_ctl0[1];
	uint32_t _cl93n72_ut_pmd_tx_fctts_ctl0;
} BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PMD_TX_FCTTS_CTL0r_t;

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PMD_TX_FCTTS_CTL0r_CLR(r) (r).cl93n72_ut_pmd_tx_fctts_ctl0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PMD_TX_FCTTS_CTL0r_SET(r,d) (r).cl93n72_ut_pmd_tx_fctts_ctl0[0] = d
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PMD_TX_FCTTS_CTL0r_GET(r) (r).cl93n72_ut_pmd_tx_fctts_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PMD_TX_FCTTS_CTL0r_CL93N72_FCTTS_SN_TO_TRN_REQ_INTR_ENf_GET(r) ((((r).cl93n72_ut_pmd_tx_fctts_ctl0[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PMD_TX_FCTTS_CTL0r_CL93N72_FCTTS_SN_TO_TRN_REQ_INTR_ENf_SET(r,f) (r).cl93n72_ut_pmd_tx_fctts_ctl0[0]=(((r).cl93n72_ut_pmd_tx_fctts_ctl0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PMD_TX_FCTTS_CTL0r_CL93N72_TX_FCTTS_SN_ENf_GET(r) (((r).cl93n72_ut_pmd_tx_fctts_ctl0[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PMD_TX_FCTTS_CTL0r_CL93N72_TX_FCTTS_SN_ENf_SET(r,f) (r).cl93n72_ut_pmd_tx_fctts_ctl0[0]=(((r).cl93n72_ut_pmd_tx_fctts_ctl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access CL93N72_UT_PMD_TX_FCTTS_CTL0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UT_PMD_TX_FCTTS_CTL0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PMD_TX_FCTTS_CTL0r,(_r._cl93n72_ut_pmd_tx_fctts_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UT_PMD_TX_FCTTS_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PMD_TX_FCTTS_CTL0r,(_r._cl93n72_ut_pmd_tx_fctts_ctl0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UT_PMD_TX_FCTTS_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PMD_TX_FCTTS_CTL0r,(_r._cl93n72_ut_pmd_tx_fctts_ctl0))
#define BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UT_PMD_TX_FCTTS_CTL0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PMD_TX_FCTTS_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ut_pmd_tx_fctts_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UT_PMD_TX_FCTTS_CTL0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PMD_TX_FCTTS_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ut_pmd_tx_fctts_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UT_PMD_TX_FCTTS_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PMD_TX_FCTTS_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_ut_pmd_tx_fctts_ctl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_UT_PMD_TX_FCTTS_CTL0r BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PMD_TX_FCTTS_CTL0r
#define CL93N72_UT_PMD_TX_FCTTS_CTL0r_SIZE BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PMD_TX_FCTTS_CTL0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PMD_TX_FCTTS_CTL0r_t CL93N72_UT_PMD_TX_FCTTS_CTL0r_t;
#define CL93N72_UT_PMD_TX_FCTTS_CTL0r_CLR BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PMD_TX_FCTTS_CTL0r_CLR
#define CL93N72_UT_PMD_TX_FCTTS_CTL0r_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PMD_TX_FCTTS_CTL0r_SET
#define CL93N72_UT_PMD_TX_FCTTS_CTL0r_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PMD_TX_FCTTS_CTL0r_GET
#define CL93N72_UT_PMD_TX_FCTTS_CTL0r_CL93N72_FCTTS_SN_TO_TRN_REQ_INTR_ENf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PMD_TX_FCTTS_CTL0r_CL93N72_FCTTS_SN_TO_TRN_REQ_INTR_ENf_GET
#define CL93N72_UT_PMD_TX_FCTTS_CTL0r_CL93N72_FCTTS_SN_TO_TRN_REQ_INTR_ENf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PMD_TX_FCTTS_CTL0r_CL93N72_FCTTS_SN_TO_TRN_REQ_INTR_ENf_SET
#define CL93N72_UT_PMD_TX_FCTTS_CTL0r_CL93N72_TX_FCTTS_SN_ENf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PMD_TX_FCTTS_CTL0r_CL93N72_TX_FCTTS_SN_ENf_GET
#define CL93N72_UT_PMD_TX_FCTTS_CTL0r_CL93N72_TX_FCTTS_SN_ENf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PMD_TX_FCTTS_CTL0r_CL93N72_TX_FCTTS_SN_ENf_SET
#define READ_CL93N72_UT_PMD_TX_FCTTS_CTL0r BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UT_PMD_TX_FCTTS_CTL0r
#define WRITE_CL93N72_UT_PMD_TX_FCTTS_CTL0r BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UT_PMD_TX_FCTTS_CTL0r
#define MODIFY_CL93N72_UT_PMD_TX_FCTTS_CTL0r BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UT_PMD_TX_FCTTS_CTL0r
#define READLN_CL93N72_UT_PMD_TX_FCTTS_CTL0r BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UT_PMD_TX_FCTTS_CTL0r
#define WRITELN_CL93N72_UT_PMD_TX_FCTTS_CTL0r BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UT_PMD_TX_FCTTS_CTL0r
#define WRITEALL_CL93N72_UT_PMD_TX_FCTTS_CTL0r BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UT_PMD_TX_FCTTS_CTL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PMD_TX_FCTTS_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  CL93N72_UT_PCS_TX_FCTTS_INTR
 * BLOCKS:   CL93N72_USER_TX
 * REGADDR:  0xd09e
 * DEVAD:    1
 * DESC:     cl93n72 pcs tx fc tts interrupt register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL93N72_PMD_TO_PCS_FCTTS_TX_LN_INTR pmd to pcs fiber channel tx lane interruptThis field control the value of the pmd_fctts_tx_ln_intr pin for a given laneThe intended use is that:1) PMD firmware is to write 1 to this field to generate an interrupt to the PCS2) PCS firmware is to write 0 to this fields to clear an interrupt to the PCS
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_INTRr (0x0001d09e | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_INTRr_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_UT_PCS_TX_FCTTS_INTR.
 */
typedef union BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_INTRr_s {
	uint32_t v[1];
	uint32_t cl93n72_ut_pcs_tx_fctts_intr[1];
	uint32_t _cl93n72_ut_pcs_tx_fctts_intr;
} BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_INTRr_t;

#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_INTRr_CLR(r) (r).cl93n72_ut_pcs_tx_fctts_intr[0] = 0
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_INTRr_SET(r,d) (r).cl93n72_ut_pcs_tx_fctts_intr[0] = d
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_INTRr_GET(r) (r).cl93n72_ut_pcs_tx_fctts_intr[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_INTRr_CL93N72_PMD_TO_PCS_FCTTS_TX_LN_INTRf_GET(r) (((r).cl93n72_ut_pcs_tx_fctts_intr[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_INTRr_CL93N72_PMD_TO_PCS_FCTTS_TX_LN_INTRf_SET(r,f) (r).cl93n72_ut_pcs_tx_fctts_intr[0]=(((r).cl93n72_ut_pcs_tx_fctts_intr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access CL93N72_UT_PCS_TX_FCTTS_INTR.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UT_PCS_TX_FCTTS_INTRr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_INTRr,(_r._cl93n72_ut_pcs_tx_fctts_intr))
#define BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UT_PCS_TX_FCTTS_INTRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_INTRr,(_r._cl93n72_ut_pcs_tx_fctts_intr)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UT_PCS_TX_FCTTS_INTRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_INTRr,(_r._cl93n72_ut_pcs_tx_fctts_intr))
#define BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UT_PCS_TX_FCTTS_INTRr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_INTRr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ut_pcs_tx_fctts_intr))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UT_PCS_TX_FCTTS_INTRr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_INTRr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ut_pcs_tx_fctts_intr))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UT_PCS_TX_FCTTS_INTRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_INTRr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_ut_pcs_tx_fctts_intr))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_UT_PCS_TX_FCTTS_INTRr BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_INTRr
#define CL93N72_UT_PCS_TX_FCTTS_INTRr_SIZE BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_INTRr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_INTRr_t CL93N72_UT_PCS_TX_FCTTS_INTRr_t;
#define CL93N72_UT_PCS_TX_FCTTS_INTRr_CLR BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_INTRr_CLR
#define CL93N72_UT_PCS_TX_FCTTS_INTRr_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_INTRr_SET
#define CL93N72_UT_PCS_TX_FCTTS_INTRr_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_INTRr_GET
#define CL93N72_UT_PCS_TX_FCTTS_INTRr_CL93N72_PMD_TO_PCS_FCTTS_TX_LN_INTRf_GET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_INTRr_CL93N72_PMD_TO_PCS_FCTTS_TX_LN_INTRf_GET
#define CL93N72_UT_PCS_TX_FCTTS_INTRr_CL93N72_PMD_TO_PCS_FCTTS_TX_LN_INTRf_SET BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_INTRr_CL93N72_PMD_TO_PCS_FCTTS_TX_LN_INTRf_SET
#define READ_CL93N72_UT_PCS_TX_FCTTS_INTRr BCMI_TSCF_GEN3_XGXS_READ_CL93N72_UT_PCS_TX_FCTTS_INTRr
#define WRITE_CL93N72_UT_PCS_TX_FCTTS_INTRr BCMI_TSCF_GEN3_XGXS_WRITE_CL93N72_UT_PCS_TX_FCTTS_INTRr
#define MODIFY_CL93N72_UT_PCS_TX_FCTTS_INTRr BCMI_TSCF_GEN3_XGXS_MODIFY_CL93N72_UT_PCS_TX_FCTTS_INTRr
#define READLN_CL93N72_UT_PCS_TX_FCTTS_INTRr BCMI_TSCF_GEN3_XGXS_READLN_CL93N72_UT_PCS_TX_FCTTS_INTRr
#define WRITELN_CL93N72_UT_PCS_TX_FCTTS_INTRr BCMI_TSCF_GEN3_XGXS_WRITELN_CL93N72_UT_PCS_TX_FCTTS_INTRr
#define WRITEALL_CL93N72_UT_PCS_TX_FCTTS_INTRr BCMI_TSCF_GEN3_XGXS_WRITEALL_CL93N72_UT_PCS_TX_FCTTS_INTRr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_CL93N72_UT_PCS_TX_FCTTS_INTRr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TX_PI_CTL0
 * BLOCKS:   TX_PI_MONTEREY
 * REGADDR:  0xd0a0
 * DEVAD:    1
 * DESC:     TX Phase Interpolator Control 0
 * RESETVAL: 0x7000 (28672)
 * ACCESS:   R/W
 * FIELDS:
 *     TX_PI_EN         Transmit Phase Interpolator Enable. If 1'b0 will gate off the TX PI clock and also freeze the PI code.
 *     TX_PI_JITTER_FILTER_EN This enables the IIR filter for the phase_sum_val logic from the CDR ( or external CDR in case of Repeater ) .
 *     TX_PI_EXT_CTRL_EN Enable for the phase error (inc/dec) from the remote loopback ( or HS Phase FIFO in case of Repeater )
 *     TX_PI_FREQ_OVERRIDE_EN Enable for the frequency override mode. It should be 1'b1 for fixed frequency and jitter generation modes.
 *     TX_PI_SJ_GEN_EN  Sinusoidal Jitter (SJ) Enable. This has priority over tx_pi_ssc_gen_en if both are enabled simultaneously.
 *     TX_PI_SSC_GEN_EN Spread Spectrum Jitter (SSC) Enable. This has priority over tx_pi_ssc_gen_en if both are enabled simultaneously.
 *     TX_PI_JIT_SSC_FREQ_MODE SSJ Mode Select:1'b1 : 10G SSC mode and 1'b0: 6G SSC mode
 *     TX_PI_SECOND_ORDER_LOOP_EN 2nd Order Loop Enable. 1'b1 will enable the 2nd order loop of the IIR filter. 1'b0 will reset the all the flops related to the 2nd order loop.This bit is only valid when tx_pi_jitter_filter_en is set to 1'b1.
 *     TX_PI_FIRST_ORDER_BWSEL_INTEG First order bandwidth control.2'd0 -  80 KHz2'd1 - 160 KHz2'd2 - 321 KHz2'd3 - 642 KHz
 *     TX_PI_SECOND_ORDER_BWSEL_INTEG Second order bandwidth control. Valid values are 0, 1, 2 and 3.
 *     TX_PI_EXT_PHASE_BWSEL_INTEG External Phase bandwidth control. Valid values are 0 to 7.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r (0x0001d0a0 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program TX_PI_CTL0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_s {
	uint32_t v[1];
	uint32_t tx_pi_ctl0[1];
	uint32_t _tx_pi_ctl0;
} BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_t;

#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_CLR(r) (r).tx_pi_ctl0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_SET(r,d) (r).tx_pi_ctl0[0] = d
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_GET(r) (r).tx_pi_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_TX_PI_EXT_PHASE_BWSEL_INTEGf_GET(r) ((((r).tx_pi_ctl0[0]) >> 12) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_TX_PI_EXT_PHASE_BWSEL_INTEGf_SET(r,f) (r).tx_pi_ctl0[0]=(((r).tx_pi_ctl0[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12)) | (7 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_TX_PI_SECOND_ORDER_BWSEL_INTEGf_GET(r) ((((r).tx_pi_ctl0[0]) >> 10) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_TX_PI_SECOND_ORDER_BWSEL_INTEGf_SET(r,f) (r).tx_pi_ctl0[0]=(((r).tx_pi_ctl0[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10)) | (3 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_TX_PI_FIRST_ORDER_BWSEL_INTEGf_GET(r) ((((r).tx_pi_ctl0[0]) >> 8) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_TX_PI_FIRST_ORDER_BWSEL_INTEGf_SET(r,f) (r).tx_pi_ctl0[0]=(((r).tx_pi_ctl0[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_TX_PI_SECOND_ORDER_LOOP_ENf_GET(r) ((((r).tx_pi_ctl0[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_TX_PI_SECOND_ORDER_LOOP_ENf_SET(r,f) (r).tx_pi_ctl0[0]=(((r).tx_pi_ctl0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_TX_PI_JIT_SSC_FREQ_MODEf_GET(r) ((((r).tx_pi_ctl0[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_TX_PI_JIT_SSC_FREQ_MODEf_SET(r,f) (r).tx_pi_ctl0[0]=(((r).tx_pi_ctl0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_TX_PI_SSC_GEN_ENf_GET(r) ((((r).tx_pi_ctl0[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_TX_PI_SSC_GEN_ENf_SET(r,f) (r).tx_pi_ctl0[0]=(((r).tx_pi_ctl0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_TX_PI_SJ_GEN_ENf_GET(r) ((((r).tx_pi_ctl0[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_TX_PI_SJ_GEN_ENf_SET(r,f) (r).tx_pi_ctl0[0]=(((r).tx_pi_ctl0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_TX_PI_FREQ_OVERRIDE_ENf_GET(r) ((((r).tx_pi_ctl0[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_TX_PI_FREQ_OVERRIDE_ENf_SET(r,f) (r).tx_pi_ctl0[0]=(((r).tx_pi_ctl0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_TX_PI_EXT_CTRL_ENf_GET(r) ((((r).tx_pi_ctl0[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_TX_PI_EXT_CTRL_ENf_SET(r,f) (r).tx_pi_ctl0[0]=(((r).tx_pi_ctl0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_TX_PI_JITTER_FILTER_ENf_GET(r) ((((r).tx_pi_ctl0[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_TX_PI_JITTER_FILTER_ENf_SET(r,f) (r).tx_pi_ctl0[0]=(((r).tx_pi_ctl0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_TX_PI_ENf_GET(r) (((r).tx_pi_ctl0[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_TX_PI_ENf_SET(r,f) (r).tx_pi_ctl0[0]=(((r).tx_pi_ctl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TX_PI_CTL0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TX_PI_CTL0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r,(_r._tx_pi_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TX_PI_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r,(_r._tx_pi_ctl0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TX_PI_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r,(_r._tx_pi_ctl0))
#define BCMI_TSCF_GEN3_XGXS_READLN_TX_PI_CTL0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TX_PI_CTL0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_PI_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_pi_ctl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_PI_CTL0r BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r
#define TX_PI_CTL0r_SIZE BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_t TX_PI_CTL0r_t;
#define TX_PI_CTL0r_CLR BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_CLR
#define TX_PI_CTL0r_SET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_SET
#define TX_PI_CTL0r_GET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_GET
#define TX_PI_CTL0r_TX_PI_EXT_PHASE_BWSEL_INTEGf_GET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_TX_PI_EXT_PHASE_BWSEL_INTEGf_GET
#define TX_PI_CTL0r_TX_PI_EXT_PHASE_BWSEL_INTEGf_SET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_TX_PI_EXT_PHASE_BWSEL_INTEGf_SET
#define TX_PI_CTL0r_TX_PI_SECOND_ORDER_BWSEL_INTEGf_GET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_TX_PI_SECOND_ORDER_BWSEL_INTEGf_GET
#define TX_PI_CTL0r_TX_PI_SECOND_ORDER_BWSEL_INTEGf_SET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_TX_PI_SECOND_ORDER_BWSEL_INTEGf_SET
#define TX_PI_CTL0r_TX_PI_FIRST_ORDER_BWSEL_INTEGf_GET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_TX_PI_FIRST_ORDER_BWSEL_INTEGf_GET
#define TX_PI_CTL0r_TX_PI_FIRST_ORDER_BWSEL_INTEGf_SET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_TX_PI_FIRST_ORDER_BWSEL_INTEGf_SET
#define TX_PI_CTL0r_TX_PI_SECOND_ORDER_LOOP_ENf_GET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_TX_PI_SECOND_ORDER_LOOP_ENf_GET
#define TX_PI_CTL0r_TX_PI_SECOND_ORDER_LOOP_ENf_SET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_TX_PI_SECOND_ORDER_LOOP_ENf_SET
#define TX_PI_CTL0r_TX_PI_JIT_SSC_FREQ_MODEf_GET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_TX_PI_JIT_SSC_FREQ_MODEf_GET
#define TX_PI_CTL0r_TX_PI_JIT_SSC_FREQ_MODEf_SET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_TX_PI_JIT_SSC_FREQ_MODEf_SET
#define TX_PI_CTL0r_TX_PI_SSC_GEN_ENf_GET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_TX_PI_SSC_GEN_ENf_GET
#define TX_PI_CTL0r_TX_PI_SSC_GEN_ENf_SET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_TX_PI_SSC_GEN_ENf_SET
#define TX_PI_CTL0r_TX_PI_SJ_GEN_ENf_GET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_TX_PI_SJ_GEN_ENf_GET
#define TX_PI_CTL0r_TX_PI_SJ_GEN_ENf_SET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_TX_PI_SJ_GEN_ENf_SET
#define TX_PI_CTL0r_TX_PI_FREQ_OVERRIDE_ENf_GET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_TX_PI_FREQ_OVERRIDE_ENf_GET
#define TX_PI_CTL0r_TX_PI_FREQ_OVERRIDE_ENf_SET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_TX_PI_FREQ_OVERRIDE_ENf_SET
#define TX_PI_CTL0r_TX_PI_EXT_CTRL_ENf_GET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_TX_PI_EXT_CTRL_ENf_GET
#define TX_PI_CTL0r_TX_PI_EXT_CTRL_ENf_SET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_TX_PI_EXT_CTRL_ENf_SET
#define TX_PI_CTL0r_TX_PI_JITTER_FILTER_ENf_GET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_TX_PI_JITTER_FILTER_ENf_GET
#define TX_PI_CTL0r_TX_PI_JITTER_FILTER_ENf_SET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_TX_PI_JITTER_FILTER_ENf_SET
#define TX_PI_CTL0r_TX_PI_ENf_GET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_TX_PI_ENf_GET
#define TX_PI_CTL0r_TX_PI_ENf_SET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r_TX_PI_ENf_SET
#define READ_TX_PI_CTL0r BCMI_TSCF_GEN3_XGXS_READ_TX_PI_CTL0r
#define WRITE_TX_PI_CTL0r BCMI_TSCF_GEN3_XGXS_WRITE_TX_PI_CTL0r
#define MODIFY_TX_PI_CTL0r BCMI_TSCF_GEN3_XGXS_MODIFY_TX_PI_CTL0r
#define READLN_TX_PI_CTL0r BCMI_TSCF_GEN3_XGXS_READLN_TX_PI_CTL0r
#define WRITELN_TX_PI_CTL0r BCMI_TSCF_GEN3_XGXS_WRITELN_TX_PI_CTL0r
#define WRITEALL_TX_PI_CTL0r BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_PI_CTL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TX_PI_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TX_PI_CTL1
 * BLOCKS:   TX_PI_MONTEREY
 * REGADDR:  0xd0a1
 * DEVAD:    1
 * DESC:     TX Phase Interpolator Control 1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TX_PI_FREQ_OVERRIDE_VAL Fixed Frequncy Override Value: Valid values are -8192 to +8192. Register tx_pi_freq_override_en should be 1'b1 to enable the Fixed Frequncy Override mode.+8192 (-8192) value in this register will result into 1 TX PI phase inc (dec) every 20T tclk. This results into (1/64 * 1/20)UI phase inc (or dec) per UI = 781.25(-781.25) ppm. So 1 ppm = 10.486 value.If tx_pi_jit_gen_en is set to 1'b1 then this register provides initilization value for Jitter Gen Integ Reg. Valid values in jitter generation mode are -8192 to +8191
 */
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL1r (0x0001d0a1 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL1r_SIZE 4

/*
 * This structure should be used to declare and program TX_PI_CTL1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TX_PI_CTL1r_s {
	uint32_t v[1];
	uint32_t tx_pi_ctl1[1];
	uint32_t _tx_pi_ctl1;
} BCMI_TSCF_GEN3_XGXS_TX_PI_CTL1r_t;

#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL1r_CLR(r) (r).tx_pi_ctl1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL1r_SET(r,d) (r).tx_pi_ctl1[0] = d
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL1r_GET(r) (r).tx_pi_ctl1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL1r_TX_PI_FREQ_OVERRIDE_VALf_GET(r) (((r).tx_pi_ctl1[0]) & 0x7fff)
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL1r_TX_PI_FREQ_OVERRIDE_VALf_SET(r,f) (r).tx_pi_ctl1[0]=(((r).tx_pi_ctl1[0] & ~((uint32_t)0x7fff)) | (((uint32_t)f) & 0x7fff)) | (0x7fff << 16)

/*
 * These macros can be used to access TX_PI_CTL1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TX_PI_CTL1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_CTL1r,(_r._tx_pi_ctl1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TX_PI_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_CTL1r,(_r._tx_pi_ctl1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TX_PI_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_CTL1r,(_r._tx_pi_ctl1))
#define BCMI_TSCF_GEN3_XGXS_READLN_TX_PI_CTL1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_ctl1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TX_PI_CTL1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_ctl1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_PI_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_pi_ctl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_PI_CTL1r BCMI_TSCF_GEN3_XGXS_TX_PI_CTL1r
#define TX_PI_CTL1r_SIZE BCMI_TSCF_GEN3_XGXS_TX_PI_CTL1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TX_PI_CTL1r_t TX_PI_CTL1r_t;
#define TX_PI_CTL1r_CLR BCMI_TSCF_GEN3_XGXS_TX_PI_CTL1r_CLR
#define TX_PI_CTL1r_SET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL1r_SET
#define TX_PI_CTL1r_GET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL1r_GET
#define TX_PI_CTL1r_TX_PI_FREQ_OVERRIDE_VALf_GET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL1r_TX_PI_FREQ_OVERRIDE_VALf_GET
#define TX_PI_CTL1r_TX_PI_FREQ_OVERRIDE_VALf_SET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL1r_TX_PI_FREQ_OVERRIDE_VALf_SET
#define READ_TX_PI_CTL1r BCMI_TSCF_GEN3_XGXS_READ_TX_PI_CTL1r
#define WRITE_TX_PI_CTL1r BCMI_TSCF_GEN3_XGXS_WRITE_TX_PI_CTL1r
#define MODIFY_TX_PI_CTL1r BCMI_TSCF_GEN3_XGXS_MODIFY_TX_PI_CTL1r
#define READLN_TX_PI_CTL1r BCMI_TSCF_GEN3_XGXS_READLN_TX_PI_CTL1r
#define WRITELN_TX_PI_CTL1r BCMI_TSCF_GEN3_XGXS_WRITELN_TX_PI_CTL1r
#define WRITEALL_TX_PI_CTL1r BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_PI_CTL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TX_PI_CTL1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TX_PI_CTL2
 * BLOCKS:   TX_PI_MONTEREY
 * REGADDR:  0xd0a2
 * DEVAD:    1
 * DESC:     TX Phase Interpolator Control 2
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TX_PI_JIT_FREQ_IDX Jitter Generator Frequency Index. Valid values are from 0 to 63. Each value maps to a table into the spec which then provides various Jitter generator parameters.In SJ  mode: It provides ndiv, Nsj (or Nsj_div_ndiv), sj_gain1 and sj_gain2. Refer Jitter Generator spec for the table details.In SSC mode: It provides Nssc.                                               Refer Jitter Generator spec for the table details.
 *     TX_PI_JIT_AMP    Jitter Generator Amplification Factor. Valid values are 0 to 63.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL2r (0x0001d0a2 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL2r_SIZE 4

/*
 * This structure should be used to declare and program TX_PI_CTL2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TX_PI_CTL2r_s {
	uint32_t v[1];
	uint32_t tx_pi_ctl2[1];
	uint32_t _tx_pi_ctl2;
} BCMI_TSCF_GEN3_XGXS_TX_PI_CTL2r_t;

#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL2r_CLR(r) (r).tx_pi_ctl2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL2r_SET(r,d) (r).tx_pi_ctl2[0] = d
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL2r_GET(r) (r).tx_pi_ctl2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL2r_TX_PI_JIT_AMPf_GET(r) ((((r).tx_pi_ctl2[0]) >> 8) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL2r_TX_PI_JIT_AMPf_SET(r,f) (r).tx_pi_ctl2[0]=(((r).tx_pi_ctl2[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8)) | (63 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL2r_TX_PI_JIT_FREQ_IDXf_GET(r) (((r).tx_pi_ctl2[0]) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL2r_TX_PI_JIT_FREQ_IDXf_SET(r,f) (r).tx_pi_ctl2[0]=(((r).tx_pi_ctl2[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access TX_PI_CTL2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TX_PI_CTL2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_CTL2r,(_r._tx_pi_ctl2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TX_PI_CTL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_CTL2r,(_r._tx_pi_ctl2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TX_PI_CTL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_CTL2r,(_r._tx_pi_ctl2))
#define BCMI_TSCF_GEN3_XGXS_READLN_TX_PI_CTL2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_ctl2))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TX_PI_CTL2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_ctl2))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_PI_CTL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_pi_ctl2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_PI_CTL2r BCMI_TSCF_GEN3_XGXS_TX_PI_CTL2r
#define TX_PI_CTL2r_SIZE BCMI_TSCF_GEN3_XGXS_TX_PI_CTL2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TX_PI_CTL2r_t TX_PI_CTL2r_t;
#define TX_PI_CTL2r_CLR BCMI_TSCF_GEN3_XGXS_TX_PI_CTL2r_CLR
#define TX_PI_CTL2r_SET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL2r_SET
#define TX_PI_CTL2r_GET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL2r_GET
#define TX_PI_CTL2r_TX_PI_JIT_AMPf_GET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL2r_TX_PI_JIT_AMPf_GET
#define TX_PI_CTL2r_TX_PI_JIT_AMPf_SET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL2r_TX_PI_JIT_AMPf_SET
#define TX_PI_CTL2r_TX_PI_JIT_FREQ_IDXf_GET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL2r_TX_PI_JIT_FREQ_IDXf_GET
#define TX_PI_CTL2r_TX_PI_JIT_FREQ_IDXf_SET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL2r_TX_PI_JIT_FREQ_IDXf_SET
#define READ_TX_PI_CTL2r BCMI_TSCF_GEN3_XGXS_READ_TX_PI_CTL2r
#define WRITE_TX_PI_CTL2r BCMI_TSCF_GEN3_XGXS_WRITE_TX_PI_CTL2r
#define MODIFY_TX_PI_CTL2r BCMI_TSCF_GEN3_XGXS_MODIFY_TX_PI_CTL2r
#define READLN_TX_PI_CTL2r BCMI_TSCF_GEN3_XGXS_READLN_TX_PI_CTL2r
#define WRITELN_TX_PI_CTL2r BCMI_TSCF_GEN3_XGXS_WRITELN_TX_PI_CTL2r
#define WRITEALL_TX_PI_CTL2r BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_PI_CTL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TX_PI_CTL2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TX_PI_CTL3
 * BLOCKS:   TX_PI_MONTEREY
 * REGADDR:  0xd0a3
 * DEVAD:    1
 * DESC:     TX Phase Interpolator Control 3
 * RESETVAL: 0x100 (256)
 * ACCESS:   R/W
 * FIELDS:
 *     TX_PI_PHASE_OVERRIDE Manual Phase Override Mode. When 1'b1 the PI phase can be moved manually using registers. All the filter logic is bypassed during manual mode.
 *     TX_PI_PHASE_STROBE Manual Phase strobe. When set to 1'b1 then it will generate 1 phase step (inc/dec depending on tx_pi_phase_step_dir) or multiple phase steps if tx_pi_phase_step_osr is 1'b1.If tx_pi_phase_override is 1'b0 then manual phase steps will be added with the output of the IIR filter phase steps during the time when there is no phase steps from the IIR filter.Self Clearing Register. Must be polled for 1'b0 before writing it to 1'b1 again for correct Manual Phase Step Shift.
 *     TX_PI_PHASE_STEP_DIR Manual Phase Step direction.1'b0: Increment1'b1: Decrement
 *     TX_PI_PHASE_INVERT 1'b1 : will invert (i.e. swap) the final inc and dec before the PI code shifter logic.
 *     TX_PI_PHASE_STEP_NUM Defines the number of phase steps movement for every manual strobe. Valid values are 1 to 15.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL3r (0x0001d0a3 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL3r_SIZE 4

/*
 * This structure should be used to declare and program TX_PI_CTL3.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TX_PI_CTL3r_s {
	uint32_t v[1];
	uint32_t tx_pi_ctl3[1];
	uint32_t _tx_pi_ctl3;
} BCMI_TSCF_GEN3_XGXS_TX_PI_CTL3r_t;

#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL3r_CLR(r) (r).tx_pi_ctl3[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL3r_SET(r,d) (r).tx_pi_ctl3[0] = d
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL3r_GET(r) (r).tx_pi_ctl3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL3r_TX_PI_PHASE_STEP_NUMf_GET(r) ((((r).tx_pi_ctl3[0]) >> 8) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL3r_TX_PI_PHASE_STEP_NUMf_SET(r,f) (r).tx_pi_ctl3[0]=(((r).tx_pi_ctl3[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL3r_TX_PI_PHASE_INVERTf_GET(r) ((((r).tx_pi_ctl3[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL3r_TX_PI_PHASE_INVERTf_SET(r,f) (r).tx_pi_ctl3[0]=(((r).tx_pi_ctl3[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL3r_TX_PI_PHASE_STEP_DIRf_GET(r) ((((r).tx_pi_ctl3[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL3r_TX_PI_PHASE_STEP_DIRf_SET(r,f) (r).tx_pi_ctl3[0]=(((r).tx_pi_ctl3[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL3r_TX_PI_PHASE_STROBEf_GET(r) ((((r).tx_pi_ctl3[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL3r_TX_PI_PHASE_STROBEf_SET(r,f) (r).tx_pi_ctl3[0]=(((r).tx_pi_ctl3[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL3r_TX_PI_PHASE_OVERRIDEf_GET(r) (((r).tx_pi_ctl3[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL3r_TX_PI_PHASE_OVERRIDEf_SET(r,f) (r).tx_pi_ctl3[0]=(((r).tx_pi_ctl3[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TX_PI_CTL3.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TX_PI_CTL3r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_CTL3r,(_r._tx_pi_ctl3))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TX_PI_CTL3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_CTL3r,(_r._tx_pi_ctl3)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TX_PI_CTL3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_CTL3r,(_r._tx_pi_ctl3))
#define BCMI_TSCF_GEN3_XGXS_READLN_TX_PI_CTL3r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_CTL3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_ctl3))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TX_PI_CTL3r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_CTL3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_ctl3))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_PI_CTL3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_CTL3r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_pi_ctl3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_PI_CTL3r BCMI_TSCF_GEN3_XGXS_TX_PI_CTL3r
#define TX_PI_CTL3r_SIZE BCMI_TSCF_GEN3_XGXS_TX_PI_CTL3r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TX_PI_CTL3r_t TX_PI_CTL3r_t;
#define TX_PI_CTL3r_CLR BCMI_TSCF_GEN3_XGXS_TX_PI_CTL3r_CLR
#define TX_PI_CTL3r_SET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL3r_SET
#define TX_PI_CTL3r_GET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL3r_GET
#define TX_PI_CTL3r_TX_PI_PHASE_STEP_NUMf_GET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL3r_TX_PI_PHASE_STEP_NUMf_GET
#define TX_PI_CTL3r_TX_PI_PHASE_STEP_NUMf_SET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL3r_TX_PI_PHASE_STEP_NUMf_SET
#define TX_PI_CTL3r_TX_PI_PHASE_INVERTf_GET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL3r_TX_PI_PHASE_INVERTf_GET
#define TX_PI_CTL3r_TX_PI_PHASE_INVERTf_SET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL3r_TX_PI_PHASE_INVERTf_SET
#define TX_PI_CTL3r_TX_PI_PHASE_STEP_DIRf_GET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL3r_TX_PI_PHASE_STEP_DIRf_GET
#define TX_PI_CTL3r_TX_PI_PHASE_STEP_DIRf_SET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL3r_TX_PI_PHASE_STEP_DIRf_SET
#define TX_PI_CTL3r_TX_PI_PHASE_STROBEf_GET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL3r_TX_PI_PHASE_STROBEf_GET
#define TX_PI_CTL3r_TX_PI_PHASE_STROBEf_SET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL3r_TX_PI_PHASE_STROBEf_SET
#define TX_PI_CTL3r_TX_PI_PHASE_OVERRIDEf_GET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL3r_TX_PI_PHASE_OVERRIDEf_GET
#define TX_PI_CTL3r_TX_PI_PHASE_OVERRIDEf_SET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL3r_TX_PI_PHASE_OVERRIDEf_SET
#define READ_TX_PI_CTL3r BCMI_TSCF_GEN3_XGXS_READ_TX_PI_CTL3r
#define WRITE_TX_PI_CTL3r BCMI_TSCF_GEN3_XGXS_WRITE_TX_PI_CTL3r
#define MODIFY_TX_PI_CTL3r BCMI_TSCF_GEN3_XGXS_MODIFY_TX_PI_CTL3r
#define READLN_TX_PI_CTL3r BCMI_TSCF_GEN3_XGXS_READLN_TX_PI_CTL3r
#define WRITELN_TX_PI_CTL3r BCMI_TSCF_GEN3_XGXS_WRITELN_TX_PI_CTL3r
#define WRITEALL_TX_PI_CTL3r BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_PI_CTL3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TX_PI_CTL3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TX_PI_CTL4
 * BLOCKS:   TX_PI_MONTEREY
 * REGADDR:  0xd0a4
 * DEVAD:    1
 * DESC:     TX Phase Interpolator Control 4
 * RESETVAL: 0x704 (1796)
 * ACCESS:   R/W
 * FIELDS:
 *     TX_PI_FRZ_FRC    IIR filter freeze control by force. 1'b1 will force the freeze value indicated by tx_pi_frz_frc_val otherwise Normal IIR operation.
 *     TX_PI_FRZ_FRC_VAL Force value for the IIR filter freeze. 1'b1 is freeze, 1'b0 is normal IIR operation.
 *     TX_PI_FRZ_MODE   Freeze Mode. 1'b1 will freeze the integ2 reg so that during the freeze, TX PI will generate the phase steps based on the integ2 freeze value.1'b1 will freeze the integ2 reg so that during the freeze, TX PI will generate the phase steps based on the integ2 freeze value.1'b0 will force the phase_sum_val input from the CDR loop timing path of the IIR filter to 0s which will result in slowly bringing the TX clock to 0 ppm from PLL/VCO clock.
 *     TX_PI_RESET_CODE_DBG Debug register.Resets the TX PI code going to AFE. This is just a debug register and is not recommended to be used during normal operation of TX PI.
 *     TX_PI_SAMPLER_MAX_CNT This register defines the sampling of the phase_sum_val from the CDR by TX_PI. There is a local counter running with TX_PI clock (i.e. tclk) which counts from 0 to tx_pi_sample_max_cnt.This register value should be pragrammed such that (tx_pi_sample_max_cnt+1)*N cycles of tclk equals the phase_sum_val_toggle period. N should be >=1 and the smallest number.Supported values are from 7 to 15. Do not program values less than 7.Programming examples are as below for widely used modes.----------------------------------------------------------------------------------------------------------------------------------------------------------------------------phase_sum_val_toggle period in tclk terms   tx_pi_sample_max_cnt  comments----------------------------------------------------------------------------------------------------------------------------------------------------------------------------8                                     7               default mode used in remote loopback and repeater application between same kind of PMD cores and same data rate.10 or 20                               916 or 32                              15  (or 7)40                                     9  (or 7)
 */
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL4r (0x0001d0a4 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL4r_SIZE 4

/*
 * This structure should be used to declare and program TX_PI_CTL4.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TX_PI_CTL4r_s {
	uint32_t v[1];
	uint32_t tx_pi_ctl4[1];
	uint32_t _tx_pi_ctl4;
} BCMI_TSCF_GEN3_XGXS_TX_PI_CTL4r_t;

#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL4r_CLR(r) (r).tx_pi_ctl4[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL4r_SET(r,d) (r).tx_pi_ctl4[0] = d
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL4r_GET(r) (r).tx_pi_ctl4[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL4r_TX_PI_SAMPLER_MAX_CNTf_GET(r) ((((r).tx_pi_ctl4[0]) >> 8) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL4r_TX_PI_SAMPLER_MAX_CNTf_SET(r,f) (r).tx_pi_ctl4[0]=(((r).tx_pi_ctl4[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL4r_TX_PI_RESET_CODE_DBGf_GET(r) ((((r).tx_pi_ctl4[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL4r_TX_PI_RESET_CODE_DBGf_SET(r,f) (r).tx_pi_ctl4[0]=(((r).tx_pi_ctl4[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL4r_TX_PI_FRZ_MODEf_GET(r) ((((r).tx_pi_ctl4[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL4r_TX_PI_FRZ_MODEf_SET(r,f) (r).tx_pi_ctl4[0]=(((r).tx_pi_ctl4[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL4r_TX_PI_FRZ_FRC_VALf_GET(r) ((((r).tx_pi_ctl4[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL4r_TX_PI_FRZ_FRC_VALf_SET(r,f) (r).tx_pi_ctl4[0]=(((r).tx_pi_ctl4[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL4r_TX_PI_FRZ_FRCf_GET(r) (((r).tx_pi_ctl4[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL4r_TX_PI_FRZ_FRCf_SET(r,f) (r).tx_pi_ctl4[0]=(((r).tx_pi_ctl4[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TX_PI_CTL4.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TX_PI_CTL4r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_CTL4r,(_r._tx_pi_ctl4))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TX_PI_CTL4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_CTL4r,(_r._tx_pi_ctl4)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TX_PI_CTL4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_CTL4r,(_r._tx_pi_ctl4))
#define BCMI_TSCF_GEN3_XGXS_READLN_TX_PI_CTL4r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_CTL4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_ctl4))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TX_PI_CTL4r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_CTL4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_ctl4))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_PI_CTL4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_CTL4r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_pi_ctl4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_PI_CTL4r BCMI_TSCF_GEN3_XGXS_TX_PI_CTL4r
#define TX_PI_CTL4r_SIZE BCMI_TSCF_GEN3_XGXS_TX_PI_CTL4r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TX_PI_CTL4r_t TX_PI_CTL4r_t;
#define TX_PI_CTL4r_CLR BCMI_TSCF_GEN3_XGXS_TX_PI_CTL4r_CLR
#define TX_PI_CTL4r_SET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL4r_SET
#define TX_PI_CTL4r_GET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL4r_GET
#define TX_PI_CTL4r_TX_PI_SAMPLER_MAX_CNTf_GET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL4r_TX_PI_SAMPLER_MAX_CNTf_GET
#define TX_PI_CTL4r_TX_PI_SAMPLER_MAX_CNTf_SET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL4r_TX_PI_SAMPLER_MAX_CNTf_SET
#define TX_PI_CTL4r_TX_PI_RESET_CODE_DBGf_GET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL4r_TX_PI_RESET_CODE_DBGf_GET
#define TX_PI_CTL4r_TX_PI_RESET_CODE_DBGf_SET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL4r_TX_PI_RESET_CODE_DBGf_SET
#define TX_PI_CTL4r_TX_PI_FRZ_MODEf_GET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL4r_TX_PI_FRZ_MODEf_GET
#define TX_PI_CTL4r_TX_PI_FRZ_MODEf_SET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL4r_TX_PI_FRZ_MODEf_SET
#define TX_PI_CTL4r_TX_PI_FRZ_FRC_VALf_GET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL4r_TX_PI_FRZ_FRC_VALf_GET
#define TX_PI_CTL4r_TX_PI_FRZ_FRC_VALf_SET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL4r_TX_PI_FRZ_FRC_VALf_SET
#define TX_PI_CTL4r_TX_PI_FRZ_FRCf_GET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL4r_TX_PI_FRZ_FRCf_GET
#define TX_PI_CTL4r_TX_PI_FRZ_FRCf_SET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL4r_TX_PI_FRZ_FRCf_SET
#define READ_TX_PI_CTL4r BCMI_TSCF_GEN3_XGXS_READ_TX_PI_CTL4r
#define WRITE_TX_PI_CTL4r BCMI_TSCF_GEN3_XGXS_WRITE_TX_PI_CTL4r
#define MODIFY_TX_PI_CTL4r BCMI_TSCF_GEN3_XGXS_MODIFY_TX_PI_CTL4r
#define READLN_TX_PI_CTL4r BCMI_TSCF_GEN3_XGXS_READLN_TX_PI_CTL4r
#define WRITELN_TX_PI_CTL4r BCMI_TSCF_GEN3_XGXS_WRITELN_TX_PI_CTL4r
#define WRITEALL_TX_PI_CTL4r BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_PI_CTL4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TX_PI_CTL4r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TX_PI_CTL5
 * BLOCKS:   TX_PI_MONTEREY
 * REGADDR:  0xd0a5
 * DEVAD:    1
 * DESC:     TX Phase Interpolator Control 5
 * RESETVAL: 0x4 (4)
 * ACCESS:   R/W
 * FIELDS:
 *     TX_PI_HS_FIFO_PHSERR_INVERT 1'b1: Inverts the hs_fifo_phserr[4:0] to invert the meaning of inc/dec from hs_fifo_phserr[4:0]. When this bit is 1'b0, 1'b1 is increment and 1'b0 is decrement.
 *     TX_PI_REPEATER_MODE_EN Selects the source of the Loop Timing CDR and Phase Detector inc/dec information.1'b1: Select external CDR and hs_fifo_phserr[4:0] from the high speed Phase FIFO PD inside AFE for ultra-low latency path.1'b0: selects the internal CDR and inc/dec from the Remote Loopback Phase Detector.
 *     TX_PI_EXT_PD_SEL Selects the source of the Phase Detector inc/dec information.1'b1: Select external PD path irrespective of rg_tx_pi_repeater_mode_en1'b0: Select PD path based on rg_tx_pi_repeater_mode_en
 *     TX_PI_EXT_PD_INC_DEC_MULT_BYPASS 1'b1 : will bypass the 2x mutiplier on the  pmd_tx_pi_ext_pd_inc and pmd_tx_pi_ext_pd_dec pins. 2x multiplier when enabled is only applicable to the tx_pi_ext_pd_inc_dec_sel = 1 and to thefinal inc/dec mux path. It is not applicable for the path when these pins feed in to the PD filter which is enabled when tx_pi_ext_pd_sel is 1. In this mode, TX_PI step size is 1/128UI and ppm range control from pins is limited to  +/-390.625.1'b0 : 2x mutiplier on the pmd_tx_pi_ext_pd_inc and pmd_tx_pi_ext_pd_dec pins are enabled before feeding to the final inc/dec mux. It is needed to get the 1/64UI TX_PI step size and full ppmrange control of +/-781.25 using the external inc/dec pins.
 *     TX_PI_EXT_PD_INC_DEC_SWAP 1'b1 : will swap the pmd_tx_pi_ext_pd_inc and pmd_tx_pi_ext_pd_dec pins before feeding them to the tx_pi logic.It is only valid when tx_pi_ext_pd_inc_dec_sel OR tx_pi_ext_pd_sel bits are 1'b1.
 *     TX_PI_EXT_PD_INC_DEC_SEL 1'b1 : will select the pmd_tx_pi_ext_pd_inc and pmd_tx_pi_ext_pd_dec pins by controlling the tx_pi final inc/dec complete bypass mux .If tx_pi_jitter_filter_en OR tx_pi_freq_override_en OR tx_pi_ext_ctrl_en reg fields are enabled then final mux will automatically switch to the normal tx_pi modeas if tx_pi_ext_pd_inc_dec_sel is 1'b0. Once all these fields are cleared then it will switch back to the pmd_tx_pi_ext_pd_inc/dec pin control mode if tx_pi_ext_pd_inc_dec_sel is 1.
 *     AFE_TX_FIFO_RESETB 1'b0: will assert the reset pin tx_fifo_resetb to 1'b0.1'b1: Once this bit is written to 1'b1 then phase error (bit 4) from FIFO is looked for 2 transitions and then reset is de-asserted to the Phase FIFO.
 *     AFE_TX_FIFO_RESETB_FRC 1'b0: Normal mode where reset pin tx_fifo_resetb is controlled as per the description of the register afe_tx_fifo_resetb.1'b1: force the reset pin tx_fifo_resetb to value indicated in the register afe_tx_fifo_resetb.
 *     TX_PI_PD_BYPASS_FLT 1'b1 will enable filter bypass for inc/dec indication from all sources to get a quicker phase locking time.
 *     TX_PI_PD_BYPASS_VCO 1'b1 will enable filter and vco bypass for inc/dec indication from all sources to get a quicker phase locking time.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r (0x0001d0a5 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r_SIZE 4

/*
 * This structure should be used to declare and program TX_PI_CTL5.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r_s {
	uint32_t v[1];
	uint32_t tx_pi_ctl5[1];
	uint32_t _tx_pi_ctl5;
} BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r_t;

#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r_CLR(r) (r).tx_pi_ctl5[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r_SET(r,d) (r).tx_pi_ctl5[0] = d
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r_GET(r) (r).tx_pi_ctl5[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r_TX_PI_PD_BYPASS_VCOf_GET(r) ((((r).tx_pi_ctl5[0]) >> 11) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r_TX_PI_PD_BYPASS_VCOf_SET(r,f) (r).tx_pi_ctl5[0]=(((r).tx_pi_ctl5[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r_TX_PI_PD_BYPASS_FLTf_GET(r) ((((r).tx_pi_ctl5[0]) >> 10) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r_TX_PI_PD_BYPASS_FLTf_SET(r,f) (r).tx_pi_ctl5[0]=(((r).tx_pi_ctl5[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r_AFE_TX_FIFO_RESETB_FRCf_GET(r) ((((r).tx_pi_ctl5[0]) >> 9) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r_AFE_TX_FIFO_RESETB_FRCf_SET(r,f) (r).tx_pi_ctl5[0]=(((r).tx_pi_ctl5[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r_AFE_TX_FIFO_RESETBf_GET(r) ((((r).tx_pi_ctl5[0]) >> 8) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r_AFE_TX_FIFO_RESETBf_SET(r,f) (r).tx_pi_ctl5[0]=(((r).tx_pi_ctl5[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r_TX_PI_EXT_PD_INC_DEC_SELf_GET(r) ((((r).tx_pi_ctl5[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r_TX_PI_EXT_PD_INC_DEC_SELf_SET(r,f) (r).tx_pi_ctl5[0]=(((r).tx_pi_ctl5[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r_TX_PI_EXT_PD_INC_DEC_SWAPf_GET(r) ((((r).tx_pi_ctl5[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r_TX_PI_EXT_PD_INC_DEC_SWAPf_SET(r,f) (r).tx_pi_ctl5[0]=(((r).tx_pi_ctl5[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r_TX_PI_EXT_PD_INC_DEC_MULT_BYPASSf_GET(r) ((((r).tx_pi_ctl5[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r_TX_PI_EXT_PD_INC_DEC_MULT_BYPASSf_SET(r,f) (r).tx_pi_ctl5[0]=(((r).tx_pi_ctl5[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r_TX_PI_EXT_PD_SELf_GET(r) ((((r).tx_pi_ctl5[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r_TX_PI_EXT_PD_SELf_SET(r,f) (r).tx_pi_ctl5[0]=(((r).tx_pi_ctl5[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r_TX_PI_REPEATER_MODE_ENf_GET(r) ((((r).tx_pi_ctl5[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r_TX_PI_REPEATER_MODE_ENf_SET(r,f) (r).tx_pi_ctl5[0]=(((r).tx_pi_ctl5[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r_TX_PI_HS_FIFO_PHSERR_INVERTf_GET(r) ((((r).tx_pi_ctl5[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r_TX_PI_HS_FIFO_PHSERR_INVERTf_SET(r,f) (r).tx_pi_ctl5[0]=(((r).tx_pi_ctl5[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))

/*
 * These macros can be used to access TX_PI_CTL5.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TX_PI_CTL5r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r,(_r._tx_pi_ctl5))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TX_PI_CTL5r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r,(_r._tx_pi_ctl5)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TX_PI_CTL5r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r,(_r._tx_pi_ctl5))
#define BCMI_TSCF_GEN3_XGXS_READLN_TX_PI_CTL5r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_ctl5))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TX_PI_CTL5r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_ctl5))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_PI_CTL5r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_pi_ctl5))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_PI_CTL5r BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r
#define TX_PI_CTL5r_SIZE BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r_t TX_PI_CTL5r_t;
#define TX_PI_CTL5r_CLR BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r_CLR
#define TX_PI_CTL5r_SET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r_SET
#define TX_PI_CTL5r_GET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r_GET
#define TX_PI_CTL5r_TX_PI_PD_BYPASS_VCOf_GET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r_TX_PI_PD_BYPASS_VCOf_GET
#define TX_PI_CTL5r_TX_PI_PD_BYPASS_VCOf_SET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r_TX_PI_PD_BYPASS_VCOf_SET
#define TX_PI_CTL5r_TX_PI_PD_BYPASS_FLTf_GET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r_TX_PI_PD_BYPASS_FLTf_GET
#define TX_PI_CTL5r_TX_PI_PD_BYPASS_FLTf_SET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r_TX_PI_PD_BYPASS_FLTf_SET
#define TX_PI_CTL5r_AFE_TX_FIFO_RESETB_FRCf_GET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r_AFE_TX_FIFO_RESETB_FRCf_GET
#define TX_PI_CTL5r_AFE_TX_FIFO_RESETB_FRCf_SET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r_AFE_TX_FIFO_RESETB_FRCf_SET
#define TX_PI_CTL5r_AFE_TX_FIFO_RESETBf_GET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r_AFE_TX_FIFO_RESETBf_GET
#define TX_PI_CTL5r_AFE_TX_FIFO_RESETBf_SET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r_AFE_TX_FIFO_RESETBf_SET
#define TX_PI_CTL5r_TX_PI_EXT_PD_INC_DEC_SELf_GET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r_TX_PI_EXT_PD_INC_DEC_SELf_GET
#define TX_PI_CTL5r_TX_PI_EXT_PD_INC_DEC_SELf_SET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r_TX_PI_EXT_PD_INC_DEC_SELf_SET
#define TX_PI_CTL5r_TX_PI_EXT_PD_INC_DEC_SWAPf_GET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r_TX_PI_EXT_PD_INC_DEC_SWAPf_GET
#define TX_PI_CTL5r_TX_PI_EXT_PD_INC_DEC_SWAPf_SET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r_TX_PI_EXT_PD_INC_DEC_SWAPf_SET
#define TX_PI_CTL5r_TX_PI_EXT_PD_INC_DEC_MULT_BYPASSf_GET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r_TX_PI_EXT_PD_INC_DEC_MULT_BYPASSf_GET
#define TX_PI_CTL5r_TX_PI_EXT_PD_INC_DEC_MULT_BYPASSf_SET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r_TX_PI_EXT_PD_INC_DEC_MULT_BYPASSf_SET
#define TX_PI_CTL5r_TX_PI_EXT_PD_SELf_GET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r_TX_PI_EXT_PD_SELf_GET
#define TX_PI_CTL5r_TX_PI_EXT_PD_SELf_SET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r_TX_PI_EXT_PD_SELf_SET
#define TX_PI_CTL5r_TX_PI_REPEATER_MODE_ENf_GET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r_TX_PI_REPEATER_MODE_ENf_GET
#define TX_PI_CTL5r_TX_PI_REPEATER_MODE_ENf_SET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r_TX_PI_REPEATER_MODE_ENf_SET
#define TX_PI_CTL5r_TX_PI_HS_FIFO_PHSERR_INVERTf_GET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r_TX_PI_HS_FIFO_PHSERR_INVERTf_GET
#define TX_PI_CTL5r_TX_PI_HS_FIFO_PHSERR_INVERTf_SET BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r_TX_PI_HS_FIFO_PHSERR_INVERTf_SET
#define READ_TX_PI_CTL5r BCMI_TSCF_GEN3_XGXS_READ_TX_PI_CTL5r
#define WRITE_TX_PI_CTL5r BCMI_TSCF_GEN3_XGXS_WRITE_TX_PI_CTL5r
#define MODIFY_TX_PI_CTL5r BCMI_TSCF_GEN3_XGXS_MODIFY_TX_PI_CTL5r
#define READLN_TX_PI_CTL5r BCMI_TSCF_GEN3_XGXS_READLN_TX_PI_CTL5r
#define WRITELN_TX_PI_CTL5r BCMI_TSCF_GEN3_XGXS_WRITELN_TX_PI_CTL5r
#define WRITEALL_TX_PI_CTL5r BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_PI_CTL5r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TX_PI_CTL5r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TX_PI_STS0
 * BLOCKS:   TX_PI_MONTEREY
 * REGADDR:  0xd0a8
 * DEVAD:    1
 * DESC:     TX Phase Interpolator Status 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TX_PI_PHASE_CNTR TX PI Phase Counter. Signed Value.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_PI_STS0r (0x0001d0a8 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TX_PI_STS0r_SIZE 4

/*
 * This structure should be used to declare and program TX_PI_STS0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TX_PI_STS0r_s {
	uint32_t v[1];
	uint32_t tx_pi_sts0[1];
	uint32_t _tx_pi_sts0;
} BCMI_TSCF_GEN3_XGXS_TX_PI_STS0r_t;

#define BCMI_TSCF_GEN3_XGXS_TX_PI_STS0r_CLR(r) (r).tx_pi_sts0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TX_PI_STS0r_SET(r,d) (r).tx_pi_sts0[0] = d
#define BCMI_TSCF_GEN3_XGXS_TX_PI_STS0r_GET(r) (r).tx_pi_sts0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_PI_STS0r_TX_PI_PHASE_CNTRf_GET(r) (((r).tx_pi_sts0[0]) & 0x7f)
#define BCMI_TSCF_GEN3_XGXS_TX_PI_STS0r_TX_PI_PHASE_CNTRf_SET(r,f) (r).tx_pi_sts0[0]=(((r).tx_pi_sts0[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f)) | (0x7f << 16)

/*
 * These macros can be used to access TX_PI_STS0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TX_PI_STS0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_STS0r,(_r._tx_pi_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TX_PI_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_STS0r,(_r._tx_pi_sts0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TX_PI_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_STS0r,(_r._tx_pi_sts0))
#define BCMI_TSCF_GEN3_XGXS_READLN_TX_PI_STS0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TX_PI_STS0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_PI_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_STS0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_pi_sts0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_PI_STS0r BCMI_TSCF_GEN3_XGXS_TX_PI_STS0r
#define TX_PI_STS0r_SIZE BCMI_TSCF_GEN3_XGXS_TX_PI_STS0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TX_PI_STS0r_t TX_PI_STS0r_t;
#define TX_PI_STS0r_CLR BCMI_TSCF_GEN3_XGXS_TX_PI_STS0r_CLR
#define TX_PI_STS0r_SET BCMI_TSCF_GEN3_XGXS_TX_PI_STS0r_SET
#define TX_PI_STS0r_GET BCMI_TSCF_GEN3_XGXS_TX_PI_STS0r_GET
#define TX_PI_STS0r_TX_PI_PHASE_CNTRf_GET BCMI_TSCF_GEN3_XGXS_TX_PI_STS0r_TX_PI_PHASE_CNTRf_GET
#define TX_PI_STS0r_TX_PI_PHASE_CNTRf_SET BCMI_TSCF_GEN3_XGXS_TX_PI_STS0r_TX_PI_PHASE_CNTRf_SET
#define READ_TX_PI_STS0r BCMI_TSCF_GEN3_XGXS_READ_TX_PI_STS0r
#define WRITE_TX_PI_STS0r BCMI_TSCF_GEN3_XGXS_WRITE_TX_PI_STS0r
#define MODIFY_TX_PI_STS0r BCMI_TSCF_GEN3_XGXS_MODIFY_TX_PI_STS0r
#define READLN_TX_PI_STS0r BCMI_TSCF_GEN3_XGXS_READLN_TX_PI_STS0r
#define WRITELN_TX_PI_STS0r BCMI_TSCF_GEN3_XGXS_WRITELN_TX_PI_STS0r
#define WRITEALL_TX_PI_STS0r BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_PI_STS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TX_PI_STS0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TX_PI_STS1
 * BLOCKS:   TX_PI_MONTEREY
 * REGADDR:  0xd0a9
 * DEVAD:    1
 * DESC:     TX Phase Interpolator Status 1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TX_PI_INTEG1_REG TX PI integ1 register. Signed Value.This field is meant for internal debug only.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_PI_STS1r (0x0001d0a9 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TX_PI_STS1r_SIZE 4

/*
 * This structure should be used to declare and program TX_PI_STS1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TX_PI_STS1r_s {
	uint32_t v[1];
	uint32_t tx_pi_sts1[1];
	uint32_t _tx_pi_sts1;
} BCMI_TSCF_GEN3_XGXS_TX_PI_STS1r_t;

#define BCMI_TSCF_GEN3_XGXS_TX_PI_STS1r_CLR(r) (r).tx_pi_sts1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TX_PI_STS1r_SET(r,d) (r).tx_pi_sts1[0] = d
#define BCMI_TSCF_GEN3_XGXS_TX_PI_STS1r_GET(r) (r).tx_pi_sts1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_PI_STS1r_TX_PI_INTEG1_REGf_GET(r) (((r).tx_pi_sts1[0]) & 0x3fff)
#define BCMI_TSCF_GEN3_XGXS_TX_PI_STS1r_TX_PI_INTEG1_REGf_SET(r,f) (r).tx_pi_sts1[0]=(((r).tx_pi_sts1[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff)) | (0x3fff << 16)

/*
 * These macros can be used to access TX_PI_STS1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TX_PI_STS1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_STS1r,(_r._tx_pi_sts1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TX_PI_STS1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_STS1r,(_r._tx_pi_sts1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TX_PI_STS1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_STS1r,(_r._tx_pi_sts1))
#define BCMI_TSCF_GEN3_XGXS_READLN_TX_PI_STS1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_STS1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_sts1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TX_PI_STS1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_STS1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_sts1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_PI_STS1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_STS1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_pi_sts1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_PI_STS1r BCMI_TSCF_GEN3_XGXS_TX_PI_STS1r
#define TX_PI_STS1r_SIZE BCMI_TSCF_GEN3_XGXS_TX_PI_STS1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TX_PI_STS1r_t TX_PI_STS1r_t;
#define TX_PI_STS1r_CLR BCMI_TSCF_GEN3_XGXS_TX_PI_STS1r_CLR
#define TX_PI_STS1r_SET BCMI_TSCF_GEN3_XGXS_TX_PI_STS1r_SET
#define TX_PI_STS1r_GET BCMI_TSCF_GEN3_XGXS_TX_PI_STS1r_GET
#define TX_PI_STS1r_TX_PI_INTEG1_REGf_GET BCMI_TSCF_GEN3_XGXS_TX_PI_STS1r_TX_PI_INTEG1_REGf_GET
#define TX_PI_STS1r_TX_PI_INTEG1_REGf_SET BCMI_TSCF_GEN3_XGXS_TX_PI_STS1r_TX_PI_INTEG1_REGf_SET
#define READ_TX_PI_STS1r BCMI_TSCF_GEN3_XGXS_READ_TX_PI_STS1r
#define WRITE_TX_PI_STS1r BCMI_TSCF_GEN3_XGXS_WRITE_TX_PI_STS1r
#define MODIFY_TX_PI_STS1r BCMI_TSCF_GEN3_XGXS_MODIFY_TX_PI_STS1r
#define READLN_TX_PI_STS1r BCMI_TSCF_GEN3_XGXS_READLN_TX_PI_STS1r
#define WRITELN_TX_PI_STS1r BCMI_TSCF_GEN3_XGXS_WRITELN_TX_PI_STS1r
#define WRITEALL_TX_PI_STS1r BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_PI_STS1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TX_PI_STS1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TX_PI_STS2
 * BLOCKS:   TX_PI_MONTEREY
 * REGADDR:  0xd0aa
 * DEVAD:    1
 * DESC:     TX Phase Interpolator Status 2
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TX_PI_INTEG2_REG TX PI integ2 register. Signed Value. Once settled, it can provide the information of the ppm on the TX clock w.r.t. PLL/VCO clock.+8192 (-8192) is equal to +781.25 (-781.25) ppm which means tclk is slower (faster) w.r.t. PLL/VCO clock.Divide this register value by 10.485 to get the tclk ppm.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_PI_STS2r (0x0001d0aa | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TX_PI_STS2r_SIZE 4

/*
 * This structure should be used to declare and program TX_PI_STS2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TX_PI_STS2r_s {
	uint32_t v[1];
	uint32_t tx_pi_sts2[1];
	uint32_t _tx_pi_sts2;
} BCMI_TSCF_GEN3_XGXS_TX_PI_STS2r_t;

#define BCMI_TSCF_GEN3_XGXS_TX_PI_STS2r_CLR(r) (r).tx_pi_sts2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TX_PI_STS2r_SET(r,d) (r).tx_pi_sts2[0] = d
#define BCMI_TSCF_GEN3_XGXS_TX_PI_STS2r_GET(r) (r).tx_pi_sts2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_PI_STS2r_TX_PI_INTEG2_REGf_GET(r) (((r).tx_pi_sts2[0]) & 0x7fff)
#define BCMI_TSCF_GEN3_XGXS_TX_PI_STS2r_TX_PI_INTEG2_REGf_SET(r,f) (r).tx_pi_sts2[0]=(((r).tx_pi_sts2[0] & ~((uint32_t)0x7fff)) | (((uint32_t)f) & 0x7fff)) | (0x7fff << 16)

/*
 * These macros can be used to access TX_PI_STS2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TX_PI_STS2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_STS2r,(_r._tx_pi_sts2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TX_PI_STS2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_STS2r,(_r._tx_pi_sts2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TX_PI_STS2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_STS2r,(_r._tx_pi_sts2))
#define BCMI_TSCF_GEN3_XGXS_READLN_TX_PI_STS2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_STS2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_sts2))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TX_PI_STS2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_STS2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_sts2))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_PI_STS2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_STS2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_pi_sts2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_PI_STS2r BCMI_TSCF_GEN3_XGXS_TX_PI_STS2r
#define TX_PI_STS2r_SIZE BCMI_TSCF_GEN3_XGXS_TX_PI_STS2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TX_PI_STS2r_t TX_PI_STS2r_t;
#define TX_PI_STS2r_CLR BCMI_TSCF_GEN3_XGXS_TX_PI_STS2r_CLR
#define TX_PI_STS2r_SET BCMI_TSCF_GEN3_XGXS_TX_PI_STS2r_SET
#define TX_PI_STS2r_GET BCMI_TSCF_GEN3_XGXS_TX_PI_STS2r_GET
#define TX_PI_STS2r_TX_PI_INTEG2_REGf_GET BCMI_TSCF_GEN3_XGXS_TX_PI_STS2r_TX_PI_INTEG2_REGf_GET
#define TX_PI_STS2r_TX_PI_INTEG2_REGf_SET BCMI_TSCF_GEN3_XGXS_TX_PI_STS2r_TX_PI_INTEG2_REGf_SET
#define READ_TX_PI_STS2r BCMI_TSCF_GEN3_XGXS_READ_TX_PI_STS2r
#define WRITE_TX_PI_STS2r BCMI_TSCF_GEN3_XGXS_WRITE_TX_PI_STS2r
#define MODIFY_TX_PI_STS2r BCMI_TSCF_GEN3_XGXS_MODIFY_TX_PI_STS2r
#define READLN_TX_PI_STS2r BCMI_TSCF_GEN3_XGXS_READLN_TX_PI_STS2r
#define WRITELN_TX_PI_STS2r BCMI_TSCF_GEN3_XGXS_WRITELN_TX_PI_STS2r
#define WRITEALL_TX_PI_STS2r BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_PI_STS2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TX_PI_STS2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TX_PI_STS3
 * BLOCKS:   TX_PI_MONTEREY
 * REGADDR:  0xd0ab
 * DEVAD:    1
 * DESC:     TX Phase Interpolator Status 3
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TX_PI_PHASE_ERR  TX PI Phase Error. Signed Value. Valid values are -8 to +8.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_PI_STS3r (0x0001d0ab | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TX_PI_STS3r_SIZE 4

/*
 * This structure should be used to declare and program TX_PI_STS3.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TX_PI_STS3r_s {
	uint32_t v[1];
	uint32_t tx_pi_sts3[1];
	uint32_t _tx_pi_sts3;
} BCMI_TSCF_GEN3_XGXS_TX_PI_STS3r_t;

#define BCMI_TSCF_GEN3_XGXS_TX_PI_STS3r_CLR(r) (r).tx_pi_sts3[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TX_PI_STS3r_SET(r,d) (r).tx_pi_sts3[0] = d
#define BCMI_TSCF_GEN3_XGXS_TX_PI_STS3r_GET(r) (r).tx_pi_sts3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_PI_STS3r_TX_PI_PHASE_ERRf_GET(r) (((r).tx_pi_sts3[0]) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_TX_PI_STS3r_TX_PI_PHASE_ERRf_SET(r,f) (r).tx_pi_sts3[0]=(((r).tx_pi_sts3[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access TX_PI_STS3.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TX_PI_STS3r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_STS3r,(_r._tx_pi_sts3))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TX_PI_STS3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_STS3r,(_r._tx_pi_sts3)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TX_PI_STS3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_STS3r,(_r._tx_pi_sts3))
#define BCMI_TSCF_GEN3_XGXS_READLN_TX_PI_STS3r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_STS3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_sts3))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TX_PI_STS3r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_STS3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_sts3))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_PI_STS3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_STS3r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_pi_sts3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_PI_STS3r BCMI_TSCF_GEN3_XGXS_TX_PI_STS3r
#define TX_PI_STS3r_SIZE BCMI_TSCF_GEN3_XGXS_TX_PI_STS3r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TX_PI_STS3r_t TX_PI_STS3r_t;
#define TX_PI_STS3r_CLR BCMI_TSCF_GEN3_XGXS_TX_PI_STS3r_CLR
#define TX_PI_STS3r_SET BCMI_TSCF_GEN3_XGXS_TX_PI_STS3r_SET
#define TX_PI_STS3r_GET BCMI_TSCF_GEN3_XGXS_TX_PI_STS3r_GET
#define TX_PI_STS3r_TX_PI_PHASE_ERRf_GET BCMI_TSCF_GEN3_XGXS_TX_PI_STS3r_TX_PI_PHASE_ERRf_GET
#define TX_PI_STS3r_TX_PI_PHASE_ERRf_SET BCMI_TSCF_GEN3_XGXS_TX_PI_STS3r_TX_PI_PHASE_ERRf_SET
#define READ_TX_PI_STS3r BCMI_TSCF_GEN3_XGXS_READ_TX_PI_STS3r
#define WRITE_TX_PI_STS3r BCMI_TSCF_GEN3_XGXS_WRITE_TX_PI_STS3r
#define MODIFY_TX_PI_STS3r BCMI_TSCF_GEN3_XGXS_MODIFY_TX_PI_STS3r
#define READLN_TX_PI_STS3r BCMI_TSCF_GEN3_XGXS_READLN_TX_PI_STS3r
#define WRITELN_TX_PI_STS3r BCMI_TSCF_GEN3_XGXS_WRITELN_TX_PI_STS3r
#define WRITEALL_TX_PI_STS3r BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_PI_STS3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TX_PI_STS3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TX_PI_STS4
 * BLOCKS:   TX_PI_MONTEREY
 * REGADDR:  0xd0ac
 * DEVAD:    1
 * DESC:     TX Phase Interpolator Status 4
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TX_PI_HS_FIFO_PHSERR Bit 4 of hs_fifo_pherr.
 *     ST_AFE_TX_FIFO_RESETB Status of the final afe_tx_fifo_resetb signal connected to the AFE pin.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_PI_STS4r (0x0001d0ac | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TX_PI_STS4r_SIZE 4

/*
 * This structure should be used to declare and program TX_PI_STS4.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TX_PI_STS4r_s {
	uint32_t v[1];
	uint32_t tx_pi_sts4[1];
	uint32_t _tx_pi_sts4;
} BCMI_TSCF_GEN3_XGXS_TX_PI_STS4r_t;

#define BCMI_TSCF_GEN3_XGXS_TX_PI_STS4r_CLR(r) (r).tx_pi_sts4[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TX_PI_STS4r_SET(r,d) (r).tx_pi_sts4[0] = d
#define BCMI_TSCF_GEN3_XGXS_TX_PI_STS4r_GET(r) (r).tx_pi_sts4[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_PI_STS4r_ST_AFE_TX_FIFO_RESETBf_GET(r) ((((r).tx_pi_sts4[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_PI_STS4r_ST_AFE_TX_FIFO_RESETBf_SET(r,f) (r).tx_pi_sts4[0]=(((r).tx_pi_sts4[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_TX_PI_STS4r_TX_PI_HS_FIFO_PHSERRf_GET(r) (((r).tx_pi_sts4[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_PI_STS4r_TX_PI_HS_FIFO_PHSERRf_SET(r,f) (r).tx_pi_sts4[0]=(((r).tx_pi_sts4[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TX_PI_STS4.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TX_PI_STS4r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_STS4r,(_r._tx_pi_sts4))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TX_PI_STS4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_STS4r,(_r._tx_pi_sts4)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TX_PI_STS4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_STS4r,(_r._tx_pi_sts4))
#define BCMI_TSCF_GEN3_XGXS_READLN_TX_PI_STS4r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_STS4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_sts4))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TX_PI_STS4r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_STS4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_sts4))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_PI_STS4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_STS4r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_pi_sts4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_PI_STS4r BCMI_TSCF_GEN3_XGXS_TX_PI_STS4r
#define TX_PI_STS4r_SIZE BCMI_TSCF_GEN3_XGXS_TX_PI_STS4r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TX_PI_STS4r_t TX_PI_STS4r_t;
#define TX_PI_STS4r_CLR BCMI_TSCF_GEN3_XGXS_TX_PI_STS4r_CLR
#define TX_PI_STS4r_SET BCMI_TSCF_GEN3_XGXS_TX_PI_STS4r_SET
#define TX_PI_STS4r_GET BCMI_TSCF_GEN3_XGXS_TX_PI_STS4r_GET
#define TX_PI_STS4r_ST_AFE_TX_FIFO_RESETBf_GET BCMI_TSCF_GEN3_XGXS_TX_PI_STS4r_ST_AFE_TX_FIFO_RESETBf_GET
#define TX_PI_STS4r_ST_AFE_TX_FIFO_RESETBf_SET BCMI_TSCF_GEN3_XGXS_TX_PI_STS4r_ST_AFE_TX_FIFO_RESETBf_SET
#define TX_PI_STS4r_TX_PI_HS_FIFO_PHSERRf_GET BCMI_TSCF_GEN3_XGXS_TX_PI_STS4r_TX_PI_HS_FIFO_PHSERRf_GET
#define TX_PI_STS4r_TX_PI_HS_FIFO_PHSERRf_SET BCMI_TSCF_GEN3_XGXS_TX_PI_STS4r_TX_PI_HS_FIFO_PHSERRf_SET
#define READ_TX_PI_STS4r BCMI_TSCF_GEN3_XGXS_READ_TX_PI_STS4r
#define WRITE_TX_PI_STS4r BCMI_TSCF_GEN3_XGXS_WRITE_TX_PI_STS4r
#define MODIFY_TX_PI_STS4r BCMI_TSCF_GEN3_XGXS_MODIFY_TX_PI_STS4r
#define READLN_TX_PI_STS4r BCMI_TSCF_GEN3_XGXS_READLN_TX_PI_STS4r
#define WRITELN_TX_PI_STS4r BCMI_TSCF_GEN3_XGXS_WRITELN_TX_PI_STS4r
#define WRITEALL_TX_PI_STS4r BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_PI_STS4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TX_PI_STS4r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TX_PI_TX_FIFO_OVFB_STS
 * BLOCKS:   TX_PI_MONTEREY
 * REGADDR:  0xd0ad
 * DEVAD:    1
 * DESC:     TX FIFO Overflow Status
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TX_FIFO_OVFB     Indiactes live status of the tx_fifo_ovfb signal from AFE/High Speed Phase FIFO.
 *     TX_FIFO_OVFB_FALL_EDGE_LH lathc high indication for 1 -> 0 transition on tx_fifo_ovfb signal from AFE/High Speed Phase FIFO. This is clear on read status.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_PI_TX_FIFO_OVFB_STSr (0x0001d0ad | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TX_PI_TX_FIFO_OVFB_STSr_SIZE 4

/*
 * This structure should be used to declare and program TX_PI_TX_FIFO_OVFB_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TX_PI_TX_FIFO_OVFB_STSr_s {
	uint32_t v[1];
	uint32_t tx_pi_tx_fifo_ovfb_sts[1];
	uint32_t _tx_pi_tx_fifo_ovfb_sts;
} BCMI_TSCF_GEN3_XGXS_TX_PI_TX_FIFO_OVFB_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_TX_PI_TX_FIFO_OVFB_STSr_CLR(r) (r).tx_pi_tx_fifo_ovfb_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TX_PI_TX_FIFO_OVFB_STSr_SET(r,d) (r).tx_pi_tx_fifo_ovfb_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_TX_PI_TX_FIFO_OVFB_STSr_GET(r) (r).tx_pi_tx_fifo_ovfb_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_PI_TX_FIFO_OVFB_STSr_TX_FIFO_OVFB_FALL_EDGE_LHf_GET(r) ((((r).tx_pi_tx_fifo_ovfb_sts[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_PI_TX_FIFO_OVFB_STSr_TX_FIFO_OVFB_FALL_EDGE_LHf_SET(r,f) (r).tx_pi_tx_fifo_ovfb_sts[0]=(((r).tx_pi_tx_fifo_ovfb_sts[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_TX_PI_TX_FIFO_OVFB_STSr_TX_FIFO_OVFBf_GET(r) (((r).tx_pi_tx_fifo_ovfb_sts[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_PI_TX_FIFO_OVFB_STSr_TX_FIFO_OVFBf_SET(r,f) (r).tx_pi_tx_fifo_ovfb_sts[0]=(((r).tx_pi_tx_fifo_ovfb_sts[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TX_PI_TX_FIFO_OVFB_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TX_PI_TX_FIFO_OVFB_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_TX_FIFO_OVFB_STSr,(_r._tx_pi_tx_fifo_ovfb_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TX_PI_TX_FIFO_OVFB_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_TX_FIFO_OVFB_STSr,(_r._tx_pi_tx_fifo_ovfb_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TX_PI_TX_FIFO_OVFB_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_TX_FIFO_OVFB_STSr,(_r._tx_pi_tx_fifo_ovfb_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_TX_PI_TX_FIFO_OVFB_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_TX_FIFO_OVFB_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_tx_fifo_ovfb_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TX_PI_TX_FIFO_OVFB_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_TX_FIFO_OVFB_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_tx_fifo_ovfb_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_PI_TX_FIFO_OVFB_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_PI_TX_FIFO_OVFB_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_pi_tx_fifo_ovfb_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_PI_TX_FIFO_OVFB_STSr BCMI_TSCF_GEN3_XGXS_TX_PI_TX_FIFO_OVFB_STSr
#define TX_PI_TX_FIFO_OVFB_STSr_SIZE BCMI_TSCF_GEN3_XGXS_TX_PI_TX_FIFO_OVFB_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TX_PI_TX_FIFO_OVFB_STSr_t TX_PI_TX_FIFO_OVFB_STSr_t;
#define TX_PI_TX_FIFO_OVFB_STSr_CLR BCMI_TSCF_GEN3_XGXS_TX_PI_TX_FIFO_OVFB_STSr_CLR
#define TX_PI_TX_FIFO_OVFB_STSr_SET BCMI_TSCF_GEN3_XGXS_TX_PI_TX_FIFO_OVFB_STSr_SET
#define TX_PI_TX_FIFO_OVFB_STSr_GET BCMI_TSCF_GEN3_XGXS_TX_PI_TX_FIFO_OVFB_STSr_GET
#define TX_PI_TX_FIFO_OVFB_STSr_TX_FIFO_OVFB_FALL_EDGE_LHf_GET BCMI_TSCF_GEN3_XGXS_TX_PI_TX_FIFO_OVFB_STSr_TX_FIFO_OVFB_FALL_EDGE_LHf_GET
#define TX_PI_TX_FIFO_OVFB_STSr_TX_FIFO_OVFB_FALL_EDGE_LHf_SET BCMI_TSCF_GEN3_XGXS_TX_PI_TX_FIFO_OVFB_STSr_TX_FIFO_OVFB_FALL_EDGE_LHf_SET
#define TX_PI_TX_FIFO_OVFB_STSr_TX_FIFO_OVFBf_GET BCMI_TSCF_GEN3_XGXS_TX_PI_TX_FIFO_OVFB_STSr_TX_FIFO_OVFBf_GET
#define TX_PI_TX_FIFO_OVFB_STSr_TX_FIFO_OVFBf_SET BCMI_TSCF_GEN3_XGXS_TX_PI_TX_FIFO_OVFB_STSr_TX_FIFO_OVFBf_SET
#define READ_TX_PI_TX_FIFO_OVFB_STSr BCMI_TSCF_GEN3_XGXS_READ_TX_PI_TX_FIFO_OVFB_STSr
#define WRITE_TX_PI_TX_FIFO_OVFB_STSr BCMI_TSCF_GEN3_XGXS_WRITE_TX_PI_TX_FIFO_OVFB_STSr
#define MODIFY_TX_PI_TX_FIFO_OVFB_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_TX_PI_TX_FIFO_OVFB_STSr
#define READLN_TX_PI_TX_FIFO_OVFB_STSr BCMI_TSCF_GEN3_XGXS_READLN_TX_PI_TX_FIFO_OVFB_STSr
#define WRITELN_TX_PI_TX_FIFO_OVFB_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_TX_PI_TX_FIFO_OVFB_STSr
#define WRITEALL_TX_PI_TX_FIFO_OVFB_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_PI_TX_FIFO_OVFB_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TX_PI_TX_FIFO_OVFB_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RXTXCOM_OSR_MODE_CTL
 * BLOCKS:   RXTXCOM_CKRST_CTRL_MONTEREY
 * REGADDR:  0xd0b0
 * DEVAD:    1
 * DESC:     OSR_MODE_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     OSR_MODE_FRC_VAL oversample (OS) mode Decoding of this register is as follows.OSX1          4'd0OSX2          4'd1OSX4          4'd2OSX16P5       4'd8OSX20P625     4'd12OSX8          4'd5OSX16         4'd9OSX32         4'd13OSX8P25       4'd4
 *     OSR_MODE_FRC     oversample (OS) mode force. Setting this bit will allow the register value to be used for OS mode.Othersise, the pin input values are used for OS mode
 */
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_CTLr (0x0001d0b0 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_CTLr_SIZE 4

/*
 * This structure should be used to declare and program RXTXCOM_OSR_MODE_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_CTLr_s {
	uint32_t v[1];
	uint32_t rxtxcom_osr_mode_ctl[1];
	uint32_t _rxtxcom_osr_mode_ctl;
} BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_CTLr_CLR(r) (r).rxtxcom_osr_mode_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_CTLr_SET(r,d) (r).rxtxcom_osr_mode_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_CTLr_GET(r) (r).rxtxcom_osr_mode_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_CTLr_OSR_MODE_FRCf_GET(r) ((((r).rxtxcom_osr_mode_ctl[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_CTLr_OSR_MODE_FRCf_SET(r,f) (r).rxtxcom_osr_mode_ctl[0]=(((r).rxtxcom_osr_mode_ctl[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_CTLr_OSR_MODE_FRC_VALf_GET(r) (((r).rxtxcom_osr_mode_ctl[0]) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_CTLr_OSR_MODE_FRC_VALf_SET(r,f) (r).rxtxcom_osr_mode_ctl[0]=(((r).rxtxcom_osr_mode_ctl[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access RXTXCOM_OSR_MODE_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RXTXCOM_OSR_MODE_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_CTLr,(_r._rxtxcom_osr_mode_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RXTXCOM_OSR_MODE_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_CTLr,(_r._rxtxcom_osr_mode_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RXTXCOM_OSR_MODE_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_CTLr,(_r._rxtxcom_osr_mode_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_RXTXCOM_OSR_MODE_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxtxcom_osr_mode_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RXTXCOM_OSR_MODE_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxtxcom_osr_mode_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RXTXCOM_OSR_MODE_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rxtxcom_osr_mode_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RXTXCOM_OSR_MODE_CTLr BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_CTLr
#define RXTXCOM_OSR_MODE_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_CTLr_t RXTXCOM_OSR_MODE_CTLr_t;
#define RXTXCOM_OSR_MODE_CTLr_CLR BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_CTLr_CLR
#define RXTXCOM_OSR_MODE_CTLr_SET BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_CTLr_SET
#define RXTXCOM_OSR_MODE_CTLr_GET BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_CTLr_GET
#define RXTXCOM_OSR_MODE_CTLr_OSR_MODE_FRCf_GET BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_CTLr_OSR_MODE_FRCf_GET
#define RXTXCOM_OSR_MODE_CTLr_OSR_MODE_FRCf_SET BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_CTLr_OSR_MODE_FRCf_SET
#define RXTXCOM_OSR_MODE_CTLr_OSR_MODE_FRC_VALf_GET BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_CTLr_OSR_MODE_FRC_VALf_GET
#define RXTXCOM_OSR_MODE_CTLr_OSR_MODE_FRC_VALf_SET BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_CTLr_OSR_MODE_FRC_VALf_SET
#define READ_RXTXCOM_OSR_MODE_CTLr BCMI_TSCF_GEN3_XGXS_READ_RXTXCOM_OSR_MODE_CTLr
#define WRITE_RXTXCOM_OSR_MODE_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_RXTXCOM_OSR_MODE_CTLr
#define MODIFY_RXTXCOM_OSR_MODE_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_RXTXCOM_OSR_MODE_CTLr
#define READLN_RXTXCOM_OSR_MODE_CTLr BCMI_TSCF_GEN3_XGXS_READLN_RXTXCOM_OSR_MODE_CTLr
#define WRITELN_RXTXCOM_OSR_MODE_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_RXTXCOM_OSR_MODE_CTLr
#define WRITEALL_RXTXCOM_OSR_MODE_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_RXTXCOM_OSR_MODE_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RXTXCOM_LN_CLK_RST_N_PWRDWN_CTL
 * BLOCKS:   RXTXCOM_CKRST_CTRL_MONTEREY
 * REGADDR:  0xd0b1
 * DEVAD:    1
 * DESC:     LANE_CLK_RESET_N_POWERDOWN_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LN_DP_S_RSTB     Active Low Lane Soft Reset for datapath. If asserted by writing to 1'b0 will reset the datapath for a lane.This soft reset is equivalent to the hard reset input pin pmd_ln_dp_h_rstb_i.
 */
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr (0x0001d0b1 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr_SIZE 4

/*
 * This structure should be used to declare and program RXTXCOM_LN_CLK_RST_N_PWRDWN_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr_s {
	uint32_t v[1];
	uint32_t rxtxcom_ln_clk_rst_n_pwrdwn_ctl[1];
	uint32_t _rxtxcom_ln_clk_rst_n_pwrdwn_ctl;
} BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr_CLR(r) (r).rxtxcom_ln_clk_rst_n_pwrdwn_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr_SET(r,d) (r).rxtxcom_ln_clk_rst_n_pwrdwn_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr_GET(r) (r).rxtxcom_ln_clk_rst_n_pwrdwn_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr_LN_DP_S_RSTBf_GET(r) (((r).rxtxcom_ln_clk_rst_n_pwrdwn_ctl[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr_LN_DP_S_RSTBf_SET(r,f) (r).rxtxcom_ln_clk_rst_n_pwrdwn_ctl[0]=(((r).rxtxcom_ln_clk_rst_n_pwrdwn_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RXTXCOM_LN_CLK_RST_N_PWRDWN_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr,(_r._rxtxcom_ln_clk_rst_n_pwrdwn_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr,(_r._rxtxcom_ln_clk_rst_n_pwrdwn_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr,(_r._rxtxcom_ln_clk_rst_n_pwrdwn_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxtxcom_ln_clk_rst_n_pwrdwn_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxtxcom_ln_clk_rst_n_pwrdwn_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rxtxcom_ln_clk_rst_n_pwrdwn_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr
#define RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr_t RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr_t;
#define RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr_CLR BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr_CLR
#define RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr_SET BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr_SET
#define RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr_GET BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr_GET
#define RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr_LN_DP_S_RSTBf_GET BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr_LN_DP_S_RSTBf_GET
#define RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr_LN_DP_S_RSTBf_SET BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr_LN_DP_S_RSTBf_SET
#define READ_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr BCMI_TSCF_GEN3_XGXS_READ_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr
#define WRITE_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr
#define MODIFY_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr
#define READLN_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr BCMI_TSCF_GEN3_XGXS_READLN_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr
#define WRITELN_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr
#define WRITEALL_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTL
 * BLOCKS:   RXTXCOM_CKRST_CTRL_MONTEREY
 * REGADDR:  0xd0b3
 * DEVAD:    1
 * DESC:     LANE_RESET_N_PWRDN_PIN_KILL_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     PMD_LN_H_RSTB_PKILL 1'b1 will disable the pmd_ln_h_rstb input pin.
 *     PMD_LN_DP_H_RSTB_PKILL 1'b1 will disable the pmd_ln_dp_h_rstb input pin.
 */
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr (0x0001d0b3 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_SIZE 4

/*
 * This structure should be used to declare and program RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_s {
	uint32_t v[1];
	uint32_t rxtxcom_ln_rst_n_pwrdn_pin_kill_ctl[1];
	uint32_t _rxtxcom_ln_rst_n_pwrdn_pin_kill_ctl;
} BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_CLR(r) (r).rxtxcom_ln_rst_n_pwrdn_pin_kill_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_SET(r,d) (r).rxtxcom_ln_rst_n_pwrdn_pin_kill_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_GET(r) (r).rxtxcom_ln_rst_n_pwrdn_pin_kill_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_DP_H_RSTB_PKILLf_GET(r) ((((r).rxtxcom_ln_rst_n_pwrdn_pin_kill_ctl[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_DP_H_RSTB_PKILLf_SET(r,f) (r).rxtxcom_ln_rst_n_pwrdn_pin_kill_ctl[0]=(((r).rxtxcom_ln_rst_n_pwrdn_pin_kill_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_H_RSTB_PKILLf_GET(r) (((r).rxtxcom_ln_rst_n_pwrdn_pin_kill_ctl[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_H_RSTB_PKILLf_SET(r,f) (r).rxtxcom_ln_rst_n_pwrdn_pin_kill_ctl[0]=(((r).rxtxcom_ln_rst_n_pwrdn_pin_kill_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr,(_r._rxtxcom_ln_rst_n_pwrdn_pin_kill_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr,(_r._rxtxcom_ln_rst_n_pwrdn_pin_kill_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr,(_r._rxtxcom_ln_rst_n_pwrdn_pin_kill_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxtxcom_ln_rst_n_pwrdn_pin_kill_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxtxcom_ln_rst_n_pwrdn_pin_kill_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rxtxcom_ln_rst_n_pwrdn_pin_kill_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_t RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_t;
#define RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_CLR BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_CLR
#define RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_SET BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_SET
#define RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_GET BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_GET
#define RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_DP_H_RSTB_PKILLf_GET BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_DP_H_RSTB_PKILLf_GET
#define RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_DP_H_RSTB_PKILLf_SET BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_DP_H_RSTB_PKILLf_SET
#define RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_H_RSTB_PKILLf_GET BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_H_RSTB_PKILLf_GET
#define RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_H_RSTB_PKILLf_SET BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_H_RSTB_PKILLf_SET
#define READ_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_TSCF_GEN3_XGXS_READ_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define WRITE_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define MODIFY_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define READLN_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_TSCF_GEN3_XGXS_READLN_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define WRITELN_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define WRITEALL_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RXTXCOM_UC_ACK_LN_CTL
 * BLOCKS:   RXTXCOM_CKRST_CTRL_MONTEREY
 * REGADDR:  0xd0b5
 * DEVAD:    1
 * DESC:     UC_ACK_LANE_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     UC_ACK_LANE_CFG_DONE uC will write this to 1 to indicate it's configuration of the lane is complete. Writing to 1'b1 willshould release internal hold on lane_dp_reset, only if lane_dp_reset_state is 3'b001.
 *     UC_ACK_LANE_DP_RESET uC will write this to 1 to acknowledge a reset event after seeing "lane_dp_reset_coccured".
 */
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_UC_ACK_LN_CTLr (0x0001d0b5 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_UC_ACK_LN_CTLr_SIZE 4

/*
 * This structure should be used to declare and program RXTXCOM_UC_ACK_LN_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RXTXCOM_UC_ACK_LN_CTLr_s {
	uint32_t v[1];
	uint32_t rxtxcom_uc_ack_ln_ctl[1];
	uint32_t _rxtxcom_uc_ack_ln_ctl;
} BCMI_TSCF_GEN3_XGXS_RXTXCOM_UC_ACK_LN_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_UC_ACK_LN_CTLr_CLR(r) (r).rxtxcom_uc_ack_ln_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_UC_ACK_LN_CTLr_SET(r,d) (r).rxtxcom_uc_ack_ln_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_UC_ACK_LN_CTLr_GET(r) (r).rxtxcom_uc_ack_ln_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_UC_ACK_LN_CTLr_UC_ACK_LANE_DP_RESETf_GET(r) ((((r).rxtxcom_uc_ack_ln_ctl[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_UC_ACK_LN_CTLr_UC_ACK_LANE_DP_RESETf_SET(r,f) (r).rxtxcom_uc_ack_ln_ctl[0]=(((r).rxtxcom_uc_ack_ln_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_UC_ACK_LN_CTLr_UC_ACK_LANE_CFG_DONEf_GET(r) (((r).rxtxcom_uc_ack_ln_ctl[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_UC_ACK_LN_CTLr_UC_ACK_LANE_CFG_DONEf_SET(r,f) (r).rxtxcom_uc_ack_ln_ctl[0]=(((r).rxtxcom_uc_ack_ln_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RXTXCOM_UC_ACK_LN_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RXTXCOM_UC_ACK_LN_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_UC_ACK_LN_CTLr,(_r._rxtxcom_uc_ack_ln_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RXTXCOM_UC_ACK_LN_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_UC_ACK_LN_CTLr,(_r._rxtxcom_uc_ack_ln_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RXTXCOM_UC_ACK_LN_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_UC_ACK_LN_CTLr,(_r._rxtxcom_uc_ack_ln_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_RXTXCOM_UC_ACK_LN_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_UC_ACK_LN_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxtxcom_uc_ack_ln_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RXTXCOM_UC_ACK_LN_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_UC_ACK_LN_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxtxcom_uc_ack_ln_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RXTXCOM_UC_ACK_LN_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_UC_ACK_LN_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rxtxcom_uc_ack_ln_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RXTXCOM_UC_ACK_LN_CTLr BCMI_TSCF_GEN3_XGXS_RXTXCOM_UC_ACK_LN_CTLr
#define RXTXCOM_UC_ACK_LN_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_RXTXCOM_UC_ACK_LN_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RXTXCOM_UC_ACK_LN_CTLr_t RXTXCOM_UC_ACK_LN_CTLr_t;
#define RXTXCOM_UC_ACK_LN_CTLr_CLR BCMI_TSCF_GEN3_XGXS_RXTXCOM_UC_ACK_LN_CTLr_CLR
#define RXTXCOM_UC_ACK_LN_CTLr_SET BCMI_TSCF_GEN3_XGXS_RXTXCOM_UC_ACK_LN_CTLr_SET
#define RXTXCOM_UC_ACK_LN_CTLr_GET BCMI_TSCF_GEN3_XGXS_RXTXCOM_UC_ACK_LN_CTLr_GET
#define RXTXCOM_UC_ACK_LN_CTLr_UC_ACK_LANE_DP_RESETf_GET BCMI_TSCF_GEN3_XGXS_RXTXCOM_UC_ACK_LN_CTLr_UC_ACK_LANE_DP_RESETf_GET
#define RXTXCOM_UC_ACK_LN_CTLr_UC_ACK_LANE_DP_RESETf_SET BCMI_TSCF_GEN3_XGXS_RXTXCOM_UC_ACK_LN_CTLr_UC_ACK_LANE_DP_RESETf_SET
#define RXTXCOM_UC_ACK_LN_CTLr_UC_ACK_LANE_CFG_DONEf_GET BCMI_TSCF_GEN3_XGXS_RXTXCOM_UC_ACK_LN_CTLr_UC_ACK_LANE_CFG_DONEf_GET
#define RXTXCOM_UC_ACK_LN_CTLr_UC_ACK_LANE_CFG_DONEf_SET BCMI_TSCF_GEN3_XGXS_RXTXCOM_UC_ACK_LN_CTLr_UC_ACK_LANE_CFG_DONEf_SET
#define READ_RXTXCOM_UC_ACK_LN_CTLr BCMI_TSCF_GEN3_XGXS_READ_RXTXCOM_UC_ACK_LN_CTLr
#define WRITE_RXTXCOM_UC_ACK_LN_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_RXTXCOM_UC_ACK_LN_CTLr
#define MODIFY_RXTXCOM_UC_ACK_LN_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_RXTXCOM_UC_ACK_LN_CTLr
#define READLN_RXTXCOM_UC_ACK_LN_CTLr BCMI_TSCF_GEN3_XGXS_READLN_RXTXCOM_UC_ACK_LN_CTLr
#define WRITELN_RXTXCOM_UC_ACK_LN_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_RXTXCOM_UC_ACK_LN_CTLr
#define WRITEALL_RXTXCOM_UC_ACK_LN_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_RXTXCOM_UC_ACK_LN_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RXTXCOM_UC_ACK_LN_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RXTXCOM_LN_RST_OCC_CTL
 * BLOCKS:   RXTXCOM_CKRST_CTRL_MONTEREY
 * REGADDR:  0xd0b6
 * DEVAD:    1
 * DESC:     LANE_REG_RESET_OCCURRED_CONTROL
 * RESETVAL: 0x1 (1)
 * ACCESS:   R/W
 * FIELDS:
 *     LANE_REG_RESET_OCCURRED Set to 1'b1 upon lane level register reset and remains so until cleared by register write from uC.
 */
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_RST_OCC_CTLr (0x0001d0b6 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_RST_OCC_CTLr_SIZE 4

/*
 * This structure should be used to declare and program RXTXCOM_LN_RST_OCC_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_RST_OCC_CTLr_s {
	uint32_t v[1];
	uint32_t rxtxcom_ln_rst_occ_ctl[1];
	uint32_t _rxtxcom_ln_rst_occ_ctl;
} BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_RST_OCC_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_RST_OCC_CTLr_CLR(r) (r).rxtxcom_ln_rst_occ_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_RST_OCC_CTLr_SET(r,d) (r).rxtxcom_ln_rst_occ_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_RST_OCC_CTLr_GET(r) (r).rxtxcom_ln_rst_occ_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_RST_OCC_CTLr_LANE_REG_RESET_OCCURREDf_GET(r) (((r).rxtxcom_ln_rst_occ_ctl[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_RST_OCC_CTLr_LANE_REG_RESET_OCCURREDf_SET(r,f) (r).rxtxcom_ln_rst_occ_ctl[0]=(((r).rxtxcom_ln_rst_occ_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RXTXCOM_LN_RST_OCC_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RXTXCOM_LN_RST_OCC_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_RST_OCC_CTLr,(_r._rxtxcom_ln_rst_occ_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RXTXCOM_LN_RST_OCC_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_RST_OCC_CTLr,(_r._rxtxcom_ln_rst_occ_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RXTXCOM_LN_RST_OCC_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_RST_OCC_CTLr,(_r._rxtxcom_ln_rst_occ_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_RXTXCOM_LN_RST_OCC_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_RST_OCC_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxtxcom_ln_rst_occ_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RXTXCOM_LN_RST_OCC_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_RST_OCC_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxtxcom_ln_rst_occ_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RXTXCOM_LN_RST_OCC_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_RST_OCC_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rxtxcom_ln_rst_occ_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RXTXCOM_LN_RST_OCC_CTLr BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_RST_OCC_CTLr
#define RXTXCOM_LN_RST_OCC_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_RST_OCC_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_RST_OCC_CTLr_t RXTXCOM_LN_RST_OCC_CTLr_t;
#define RXTXCOM_LN_RST_OCC_CTLr_CLR BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_RST_OCC_CTLr_CLR
#define RXTXCOM_LN_RST_OCC_CTLr_SET BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_RST_OCC_CTLr_SET
#define RXTXCOM_LN_RST_OCC_CTLr_GET BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_RST_OCC_CTLr_GET
#define RXTXCOM_LN_RST_OCC_CTLr_LANE_REG_RESET_OCCURREDf_GET BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_RST_OCC_CTLr_LANE_REG_RESET_OCCURREDf_GET
#define RXTXCOM_LN_RST_OCC_CTLr_LANE_REG_RESET_OCCURREDf_SET BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_RST_OCC_CTLr_LANE_REG_RESET_OCCURREDf_SET
#define READ_RXTXCOM_LN_RST_OCC_CTLr BCMI_TSCF_GEN3_XGXS_READ_RXTXCOM_LN_RST_OCC_CTLr
#define WRITE_RXTXCOM_LN_RST_OCC_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_RXTXCOM_LN_RST_OCC_CTLr
#define MODIFY_RXTXCOM_LN_RST_OCC_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_RXTXCOM_LN_RST_OCC_CTLr
#define READLN_RXTXCOM_LN_RST_OCC_CTLr BCMI_TSCF_GEN3_XGXS_READLN_RXTXCOM_LN_RST_OCC_CTLr
#define WRITELN_RXTXCOM_LN_RST_OCC_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_RXTXCOM_LN_RST_OCC_CTLr
#define WRITEALL_RXTXCOM_LN_RST_OCC_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_RXTXCOM_LN_RST_OCC_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_RST_OCC_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RXTXCOM_PLL_SEL_CTL
 * BLOCKS:   RXTXCOM_CKRST_CTRL_MONTEREY
 * REGADDR:  0xd0b7
 * DEVAD:    1
 * DESC:     PLL_SELECT_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     PLL_SELECT       This register controls the selection of the PLL0 or PLL1 as clock source for the  lane. This register will be only reset upon POR hard or POR soft reset.This register is expected to be changed only when  lane datapath is in reset.0 - Select PLL0 as clock for  lane.1 - Select PLL1 as clock for  lane.
 */
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_PLL_SEL_CTLr (0x0001d0b7 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_PLL_SEL_CTLr_SIZE 4

/*
 * This structure should be used to declare and program RXTXCOM_PLL_SEL_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RXTXCOM_PLL_SEL_CTLr_s {
	uint32_t v[1];
	uint32_t rxtxcom_pll_sel_ctl[1];
	uint32_t _rxtxcom_pll_sel_ctl;
} BCMI_TSCF_GEN3_XGXS_RXTXCOM_PLL_SEL_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_PLL_SEL_CTLr_CLR(r) (r).rxtxcom_pll_sel_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_PLL_SEL_CTLr_SET(r,d) (r).rxtxcom_pll_sel_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_PLL_SEL_CTLr_GET(r) (r).rxtxcom_pll_sel_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_PLL_SEL_CTLr_PLL_SELECTf_GET(r) (((r).rxtxcom_pll_sel_ctl[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_PLL_SEL_CTLr_PLL_SELECTf_SET(r,f) (r).rxtxcom_pll_sel_ctl[0]=(((r).rxtxcom_pll_sel_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RXTXCOM_PLL_SEL_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RXTXCOM_PLL_SEL_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_PLL_SEL_CTLr,(_r._rxtxcom_pll_sel_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RXTXCOM_PLL_SEL_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_PLL_SEL_CTLr,(_r._rxtxcom_pll_sel_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RXTXCOM_PLL_SEL_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_PLL_SEL_CTLr,(_r._rxtxcom_pll_sel_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_RXTXCOM_PLL_SEL_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_PLL_SEL_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxtxcom_pll_sel_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RXTXCOM_PLL_SEL_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_PLL_SEL_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxtxcom_pll_sel_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RXTXCOM_PLL_SEL_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_PLL_SEL_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rxtxcom_pll_sel_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RXTXCOM_PLL_SEL_CTLr BCMI_TSCF_GEN3_XGXS_RXTXCOM_PLL_SEL_CTLr
#define RXTXCOM_PLL_SEL_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_RXTXCOM_PLL_SEL_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RXTXCOM_PLL_SEL_CTLr_t RXTXCOM_PLL_SEL_CTLr_t;
#define RXTXCOM_PLL_SEL_CTLr_CLR BCMI_TSCF_GEN3_XGXS_RXTXCOM_PLL_SEL_CTLr_CLR
#define RXTXCOM_PLL_SEL_CTLr_SET BCMI_TSCF_GEN3_XGXS_RXTXCOM_PLL_SEL_CTLr_SET
#define RXTXCOM_PLL_SEL_CTLr_GET BCMI_TSCF_GEN3_XGXS_RXTXCOM_PLL_SEL_CTLr_GET
#define RXTXCOM_PLL_SEL_CTLr_PLL_SELECTf_GET BCMI_TSCF_GEN3_XGXS_RXTXCOM_PLL_SEL_CTLr_PLL_SELECTf_GET
#define RXTXCOM_PLL_SEL_CTLr_PLL_SELECTf_SET BCMI_TSCF_GEN3_XGXS_RXTXCOM_PLL_SEL_CTLr_PLL_SELECTf_SET
#define READ_RXTXCOM_PLL_SEL_CTLr BCMI_TSCF_GEN3_XGXS_READ_RXTXCOM_PLL_SEL_CTLr
#define WRITE_RXTXCOM_PLL_SEL_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_RXTXCOM_PLL_SEL_CTLr
#define MODIFY_RXTXCOM_PLL_SEL_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_RXTXCOM_PLL_SEL_CTLr
#define READLN_RXTXCOM_PLL_SEL_CTLr BCMI_TSCF_GEN3_XGXS_READLN_RXTXCOM_PLL_SEL_CTLr
#define WRITELN_RXTXCOM_PLL_SEL_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_RXTXCOM_PLL_SEL_CTLr
#define WRITEALL_RXTXCOM_PLL_SEL_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_RXTXCOM_PLL_SEL_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RXTXCOM_PLL_SEL_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RXTXCOM_LN_DP_RST_ST_STS
 * BLOCKS:   RXTXCOM_CKRST_CTRL_MONTEREY
 * REGADDR:  0xd0b9
 * DEVAD:    1
 * DESC:     LANE_DP_RESET_STATE_STATUS
 * RESETVAL: 0x7 (7)
 * ACCESS:   R/O
 * FIELDS:
 *     LANE_DP_RESET_STATE Bit 2: lane_dp_reset_active   : Set to 1'b1 whenenver lane_dp_reset is currently requested through any register or pin controls.Bit 1: lane_dp_reset_occurred : Set to 1'b1 whenenver lane_dp_reset is currently requested through any register or pin controls and is latched high.Bit 0: lane_dp_reset_held     : Set to 1'b1 whenenver lane_dp_reset is internally held. Cleared to 1'b0, only if lane_dp_reset_state==001 and uc_ack_lane_cfg_done == 1.
 */
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_DP_RST_ST_STSr (0x0001d0b9 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_DP_RST_ST_STSr_SIZE 4

/*
 * This structure should be used to declare and program RXTXCOM_LN_DP_RST_ST_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_DP_RST_ST_STSr_s {
	uint32_t v[1];
	uint32_t rxtxcom_ln_dp_rst_st_sts[1];
	uint32_t _rxtxcom_ln_dp_rst_st_sts;
} BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_DP_RST_ST_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_DP_RST_ST_STSr_CLR(r) (r).rxtxcom_ln_dp_rst_st_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_DP_RST_ST_STSr_SET(r,d) (r).rxtxcom_ln_dp_rst_st_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_DP_RST_ST_STSr_GET(r) (r).rxtxcom_ln_dp_rst_st_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_DP_RST_ST_STSr_LANE_DP_RESET_STATEf_GET(r) (((r).rxtxcom_ln_dp_rst_st_sts[0]) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_DP_RST_ST_STSr_LANE_DP_RESET_STATEf_SET(r,f) (r).rxtxcom_ln_dp_rst_st_sts[0]=(((r).rxtxcom_ln_dp_rst_st_sts[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access RXTXCOM_LN_DP_RST_ST_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RXTXCOM_LN_DP_RST_ST_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_DP_RST_ST_STSr,(_r._rxtxcom_ln_dp_rst_st_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RXTXCOM_LN_DP_RST_ST_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_DP_RST_ST_STSr,(_r._rxtxcom_ln_dp_rst_st_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RXTXCOM_LN_DP_RST_ST_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_DP_RST_ST_STSr,(_r._rxtxcom_ln_dp_rst_st_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_RXTXCOM_LN_DP_RST_ST_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_DP_RST_ST_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxtxcom_ln_dp_rst_st_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RXTXCOM_LN_DP_RST_ST_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_DP_RST_ST_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxtxcom_ln_dp_rst_st_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RXTXCOM_LN_DP_RST_ST_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_DP_RST_ST_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rxtxcom_ln_dp_rst_st_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RXTXCOM_LN_DP_RST_ST_STSr BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_DP_RST_ST_STSr
#define RXTXCOM_LN_DP_RST_ST_STSr_SIZE BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_DP_RST_ST_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_DP_RST_ST_STSr_t RXTXCOM_LN_DP_RST_ST_STSr_t;
#define RXTXCOM_LN_DP_RST_ST_STSr_CLR BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_DP_RST_ST_STSr_CLR
#define RXTXCOM_LN_DP_RST_ST_STSr_SET BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_DP_RST_ST_STSr_SET
#define RXTXCOM_LN_DP_RST_ST_STSr_GET BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_DP_RST_ST_STSr_GET
#define RXTXCOM_LN_DP_RST_ST_STSr_LANE_DP_RESET_STATEf_GET BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_DP_RST_ST_STSr_LANE_DP_RESET_STATEf_GET
#define RXTXCOM_LN_DP_RST_ST_STSr_LANE_DP_RESET_STATEf_SET BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_DP_RST_ST_STSr_LANE_DP_RESET_STATEf_SET
#define READ_RXTXCOM_LN_DP_RST_ST_STSr BCMI_TSCF_GEN3_XGXS_READ_RXTXCOM_LN_DP_RST_ST_STSr
#define WRITE_RXTXCOM_LN_DP_RST_ST_STSr BCMI_TSCF_GEN3_XGXS_WRITE_RXTXCOM_LN_DP_RST_ST_STSr
#define MODIFY_RXTXCOM_LN_DP_RST_ST_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_RXTXCOM_LN_DP_RST_ST_STSr
#define READLN_RXTXCOM_LN_DP_RST_ST_STSr BCMI_TSCF_GEN3_XGXS_READLN_RXTXCOM_LN_DP_RST_ST_STSr
#define WRITELN_RXTXCOM_LN_DP_RST_ST_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_RXTXCOM_LN_DP_RST_ST_STSr
#define WRITEALL_RXTXCOM_LN_DP_RST_ST_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_RXTXCOM_LN_DP_RST_ST_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_DP_RST_ST_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RXTXCOM_MCST_MASK_CTL
 * BLOCKS:   RXTXCOM_CKRST_CTRL_MONTEREY
 * REGADDR:  0xd0ba
 * DEVAD:    1
 * DESC:     MULTICAST_MASK_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MULTICAST_MASK_CONTROL This masks the lane from a broadcast or multicast write operation.
 */
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_MCST_MASK_CTLr (0x0001d0ba | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_MCST_MASK_CTLr_SIZE 4

/*
 * This structure should be used to declare and program RXTXCOM_MCST_MASK_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RXTXCOM_MCST_MASK_CTLr_s {
	uint32_t v[1];
	uint32_t rxtxcom_mcst_mask_ctl[1];
	uint32_t _rxtxcom_mcst_mask_ctl;
} BCMI_TSCF_GEN3_XGXS_RXTXCOM_MCST_MASK_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_MCST_MASK_CTLr_CLR(r) (r).rxtxcom_mcst_mask_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_MCST_MASK_CTLr_SET(r,d) (r).rxtxcom_mcst_mask_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_MCST_MASK_CTLr_GET(r) (r).rxtxcom_mcst_mask_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_MCST_MASK_CTLr_MULTICAST_MASK_CONTROLf_GET(r) (((r).rxtxcom_mcst_mask_ctl[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_MCST_MASK_CTLr_MULTICAST_MASK_CONTROLf_SET(r,f) (r).rxtxcom_mcst_mask_ctl[0]=(((r).rxtxcom_mcst_mask_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RXTXCOM_MCST_MASK_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RXTXCOM_MCST_MASK_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_MCST_MASK_CTLr,(_r._rxtxcom_mcst_mask_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RXTXCOM_MCST_MASK_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_MCST_MASK_CTLr,(_r._rxtxcom_mcst_mask_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RXTXCOM_MCST_MASK_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_MCST_MASK_CTLr,(_r._rxtxcom_mcst_mask_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_RXTXCOM_MCST_MASK_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_MCST_MASK_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxtxcom_mcst_mask_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RXTXCOM_MCST_MASK_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_MCST_MASK_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxtxcom_mcst_mask_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RXTXCOM_MCST_MASK_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_MCST_MASK_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rxtxcom_mcst_mask_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RXTXCOM_MCST_MASK_CTLr BCMI_TSCF_GEN3_XGXS_RXTXCOM_MCST_MASK_CTLr
#define RXTXCOM_MCST_MASK_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_RXTXCOM_MCST_MASK_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RXTXCOM_MCST_MASK_CTLr_t RXTXCOM_MCST_MASK_CTLr_t;
#define RXTXCOM_MCST_MASK_CTLr_CLR BCMI_TSCF_GEN3_XGXS_RXTXCOM_MCST_MASK_CTLr_CLR
#define RXTXCOM_MCST_MASK_CTLr_SET BCMI_TSCF_GEN3_XGXS_RXTXCOM_MCST_MASK_CTLr_SET
#define RXTXCOM_MCST_MASK_CTLr_GET BCMI_TSCF_GEN3_XGXS_RXTXCOM_MCST_MASK_CTLr_GET
#define RXTXCOM_MCST_MASK_CTLr_MULTICAST_MASK_CONTROLf_GET BCMI_TSCF_GEN3_XGXS_RXTXCOM_MCST_MASK_CTLr_MULTICAST_MASK_CONTROLf_GET
#define RXTXCOM_MCST_MASK_CTLr_MULTICAST_MASK_CONTROLf_SET BCMI_TSCF_GEN3_XGXS_RXTXCOM_MCST_MASK_CTLr_MULTICAST_MASK_CONTROLf_SET
#define READ_RXTXCOM_MCST_MASK_CTLr BCMI_TSCF_GEN3_XGXS_READ_RXTXCOM_MCST_MASK_CTLr
#define WRITE_RXTXCOM_MCST_MASK_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_RXTXCOM_MCST_MASK_CTLr
#define MODIFY_RXTXCOM_MCST_MASK_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_RXTXCOM_MCST_MASK_CTLr
#define READLN_RXTXCOM_MCST_MASK_CTLr BCMI_TSCF_GEN3_XGXS_READLN_RXTXCOM_MCST_MASK_CTLr
#define WRITELN_RXTXCOM_MCST_MASK_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_RXTXCOM_MCST_MASK_CTLr
#define WRITEALL_RXTXCOM_MCST_MASK_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_RXTXCOM_MCST_MASK_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RXTXCOM_MCST_MASK_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RXTXCOM_OSR_MODE_STS_MC_MASK
 * BLOCKS:   RXTXCOM_CKRST_CTRL_MONTEREY
 * REGADDR:  0xd0bb
 * DEVAD:    1
 * DESC:     OSR_MODE_STATUS_MC_MASK
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     OSR_MODE         OSR Mode status after the mux.OSR Mode status after the osr_mode_frc/frc_val mux.OSX1          4'd0OSX2          4'd1OSX4          4'd2OSX16P5       4'd8OSX20P625     4'd12OSX8          4'd5OSX16         4'd9OSX32         4'd13OSX8P25       4'd4
 *     MULTICAST_MASK_CONTROL_STATUS Status of multicast mask control for masking lane from multicast write operation.
 */
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr (0x0001d0bb | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr_SIZE 4

/*
 * This structure should be used to declare and program RXTXCOM_OSR_MODE_STS_MC_MASK.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr_s {
	uint32_t v[1];
	uint32_t rxtxcom_osr_mode_sts_mc_mask[1];
	uint32_t _rxtxcom_osr_mode_sts_mc_mask;
} BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr_t;

#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr_CLR(r) (r).rxtxcom_osr_mode_sts_mc_mask[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr_SET(r,d) (r).rxtxcom_osr_mode_sts_mc_mask[0] = d
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr_GET(r) (r).rxtxcom_osr_mode_sts_mc_mask[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr_MULTICAST_MASK_CONTROL_STATUSf_GET(r) ((((r).rxtxcom_osr_mode_sts_mc_mask[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr_MULTICAST_MASK_CONTROL_STATUSf_SET(r,f) (r).rxtxcom_osr_mode_sts_mc_mask[0]=(((r).rxtxcom_osr_mode_sts_mc_mask[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr_OSR_MODEf_GET(r) (((r).rxtxcom_osr_mode_sts_mc_mask[0]) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr_OSR_MODEf_SET(r,f) (r).rxtxcom_osr_mode_sts_mc_mask[0]=(((r).rxtxcom_osr_mode_sts_mc_mask[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access RXTXCOM_OSR_MODE_STS_MC_MASK.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RXTXCOM_OSR_MODE_STS_MC_MASKr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr,(_r._rxtxcom_osr_mode_sts_mc_mask))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RXTXCOM_OSR_MODE_STS_MC_MASKr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr,(_r._rxtxcom_osr_mode_sts_mc_mask)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RXTXCOM_OSR_MODE_STS_MC_MASKr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr,(_r._rxtxcom_osr_mode_sts_mc_mask))
#define BCMI_TSCF_GEN3_XGXS_READLN_RXTXCOM_OSR_MODE_STS_MC_MASKr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxtxcom_osr_mode_sts_mc_mask))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RXTXCOM_OSR_MODE_STS_MC_MASKr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxtxcom_osr_mode_sts_mc_mask))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RXTXCOM_OSR_MODE_STS_MC_MASKr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rxtxcom_osr_mode_sts_mc_mask))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RXTXCOM_OSR_MODE_STS_MC_MASKr BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr
#define RXTXCOM_OSR_MODE_STS_MC_MASKr_SIZE BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr_t RXTXCOM_OSR_MODE_STS_MC_MASKr_t;
#define RXTXCOM_OSR_MODE_STS_MC_MASKr_CLR BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr_CLR
#define RXTXCOM_OSR_MODE_STS_MC_MASKr_SET BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr_SET
#define RXTXCOM_OSR_MODE_STS_MC_MASKr_GET BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr_GET
#define RXTXCOM_OSR_MODE_STS_MC_MASKr_MULTICAST_MASK_CONTROL_STATUSf_GET BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr_MULTICAST_MASK_CONTROL_STATUSf_GET
#define RXTXCOM_OSR_MODE_STS_MC_MASKr_MULTICAST_MASK_CONTROL_STATUSf_SET BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr_MULTICAST_MASK_CONTROL_STATUSf_SET
#define RXTXCOM_OSR_MODE_STS_MC_MASKr_OSR_MODEf_GET BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr_OSR_MODEf_GET
#define RXTXCOM_OSR_MODE_STS_MC_MASKr_OSR_MODEf_SET BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr_OSR_MODEf_SET
#define READ_RXTXCOM_OSR_MODE_STS_MC_MASKr BCMI_TSCF_GEN3_XGXS_READ_RXTXCOM_OSR_MODE_STS_MC_MASKr
#define WRITE_RXTXCOM_OSR_MODE_STS_MC_MASKr BCMI_TSCF_GEN3_XGXS_WRITE_RXTXCOM_OSR_MODE_STS_MC_MASKr
#define MODIFY_RXTXCOM_OSR_MODE_STS_MC_MASKr BCMI_TSCF_GEN3_XGXS_MODIFY_RXTXCOM_OSR_MODE_STS_MC_MASKr
#define READLN_RXTXCOM_OSR_MODE_STS_MC_MASKr BCMI_TSCF_GEN3_XGXS_READLN_RXTXCOM_OSR_MODE_STS_MC_MASKr
#define WRITELN_RXTXCOM_OSR_MODE_STS_MC_MASKr BCMI_TSCF_GEN3_XGXS_WRITELN_RXTXCOM_OSR_MODE_STS_MC_MASKr
#define WRITEALL_RXTXCOM_OSR_MODE_STS_MC_MASKr BCMI_TSCF_GEN3_XGXS_WRITEALL_RXTXCOM_OSR_MODE_STS_MC_MASKr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STS
 * BLOCKS:   RXTXCOM_CKRST_CTRL_MONTEREY
 * REGADDR:  0xd0bc
 * DEVAD:    1
 * DESC:     AFE_RESET_PWRDN_OSR_MODE_PIN_STATUS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     OSR_MODE_PIN     Indicates the status of the pmd_osr_mode input pin.Decoding of pmd_osr_mode[3:0] pin and osr_mode registers are as follows.OSX1          4'd0OSX2          4'd1OSX4          4'd2OSX16P5       4'd8OSX20P625     4'd12OSX8          4'd5OSX16         4'd9OSX32         4'd13OSX8P25       4'd4
 */
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr (0x0001d0bc | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_SIZE 4

/*
 * This structure should be used to declare and program RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_s {
	uint32_t v[1];
	uint32_t rxtxcom_afe_rst_pwrdn_osr_mode_pin_sts[1];
	uint32_t _rxtxcom_afe_rst_pwrdn_osr_mode_pin_sts;
} BCMI_TSCF_GEN3_XGXS_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_CLR(r) (r).rxtxcom_afe_rst_pwrdn_osr_mode_pin_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_SET(r,d) (r).rxtxcom_afe_rst_pwrdn_osr_mode_pin_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_GET(r) (r).rxtxcom_afe_rst_pwrdn_osr_mode_pin_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_OSR_MODE_PINf_GET(r) (((r).rxtxcom_afe_rst_pwrdn_osr_mode_pin_sts[0]) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_OSR_MODE_PINf_SET(r,f) (r).rxtxcom_afe_rst_pwrdn_osr_mode_pin_sts[0]=(((r).rxtxcom_afe_rst_pwrdn_osr_mode_pin_sts[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr,(_r._rxtxcom_afe_rst_pwrdn_osr_mode_pin_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr,(_r._rxtxcom_afe_rst_pwrdn_osr_mode_pin_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr,(_r._rxtxcom_afe_rst_pwrdn_osr_mode_pin_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxtxcom_afe_rst_pwrdn_osr_mode_pin_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxtxcom_afe_rst_pwrdn_osr_mode_pin_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rxtxcom_afe_rst_pwrdn_osr_mode_pin_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_TSCF_GEN3_XGXS_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr
#define RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_SIZE BCMI_TSCF_GEN3_XGXS_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_t RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_t;
#define RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_CLR BCMI_TSCF_GEN3_XGXS_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_CLR
#define RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_SET BCMI_TSCF_GEN3_XGXS_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_SET
#define RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_GET BCMI_TSCF_GEN3_XGXS_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_GET
#define RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_OSR_MODE_PINf_GET BCMI_TSCF_GEN3_XGXS_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_OSR_MODE_PINf_GET
#define RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_OSR_MODE_PINf_SET BCMI_TSCF_GEN3_XGXS_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_OSR_MODE_PINf_SET
#define READ_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_TSCF_GEN3_XGXS_READ_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr
#define WRITE_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_TSCF_GEN3_XGXS_WRITE_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr
#define MODIFY_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr
#define READLN_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_TSCF_GEN3_XGXS_READLN_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr
#define WRITELN_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr
#define WRITEALL_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RXTXCOM_LN_S_RSTB_CTL
 * BLOCKS:   RXTXCOM_CKRST_CTRL_MONTEREY
 * REGADDR:  0xd0be
 * DEVAD:    1
 * DESC:     LN_S_RSTB_CONTROL
 * RESETVAL: 0x1 (1)
 * ACCESS:   R/W
 * FIELDS:
 *     LN_S_RSTB        Active Low Lane Soft Reset. If asserted by writing to 1'b0 will reset the registers and datapath for a lane.This soft reset is equivalent to the hard reset input pin pmd_ln_h_rstb_i.
 *     HW_FW_HANDSHAKE_DISABLE 1: disables the HW-FW handshake logic for the TX lane which means there is no acknowledgement required from uC and lane reset will be de-asserted once reset register/pin conditions are de-asserted.This register bit is unused in RX lane.
 */
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_S_RSTB_CTLr (0x0001d0be | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_S_RSTB_CTLr_SIZE 4

/*
 * This structure should be used to declare and program RXTXCOM_LN_S_RSTB_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_S_RSTB_CTLr_s {
	uint32_t v[1];
	uint32_t rxtxcom_ln_s_rstb_ctl[1];
	uint32_t _rxtxcom_ln_s_rstb_ctl;
} BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_S_RSTB_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_S_RSTB_CTLr_CLR(r) (r).rxtxcom_ln_s_rstb_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_S_RSTB_CTLr_SET(r,d) (r).rxtxcom_ln_s_rstb_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_S_RSTB_CTLr_GET(r) (r).rxtxcom_ln_s_rstb_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_S_RSTB_CTLr_HW_FW_HANDSHAKE_DISABLEf_GET(r) ((((r).rxtxcom_ln_s_rstb_ctl[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_S_RSTB_CTLr_HW_FW_HANDSHAKE_DISABLEf_SET(r,f) (r).rxtxcom_ln_s_rstb_ctl[0]=(((r).rxtxcom_ln_s_rstb_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_S_RSTB_CTLr_LN_S_RSTBf_GET(r) (((r).rxtxcom_ln_s_rstb_ctl[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_S_RSTB_CTLr_LN_S_RSTBf_SET(r,f) (r).rxtxcom_ln_s_rstb_ctl[0]=(((r).rxtxcom_ln_s_rstb_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RXTXCOM_LN_S_RSTB_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RXTXCOM_LN_S_RSTB_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_S_RSTB_CTLr,(_r._rxtxcom_ln_s_rstb_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RXTXCOM_LN_S_RSTB_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_S_RSTB_CTLr,(_r._rxtxcom_ln_s_rstb_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RXTXCOM_LN_S_RSTB_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_S_RSTB_CTLr,(_r._rxtxcom_ln_s_rstb_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_RXTXCOM_LN_S_RSTB_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_S_RSTB_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxtxcom_ln_s_rstb_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RXTXCOM_LN_S_RSTB_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_S_RSTB_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxtxcom_ln_s_rstb_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RXTXCOM_LN_S_RSTB_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_S_RSTB_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rxtxcom_ln_s_rstb_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RXTXCOM_LN_S_RSTB_CTLr BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_S_RSTB_CTLr
#define RXTXCOM_LN_S_RSTB_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_S_RSTB_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_S_RSTB_CTLr_t RXTXCOM_LN_S_RSTB_CTLr_t;
#define RXTXCOM_LN_S_RSTB_CTLr_CLR BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_S_RSTB_CTLr_CLR
#define RXTXCOM_LN_S_RSTB_CTLr_SET BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_S_RSTB_CTLr_SET
#define RXTXCOM_LN_S_RSTB_CTLr_GET BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_S_RSTB_CTLr_GET
#define RXTXCOM_LN_S_RSTB_CTLr_HW_FW_HANDSHAKE_DISABLEf_GET BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_S_RSTB_CTLr_HW_FW_HANDSHAKE_DISABLEf_GET
#define RXTXCOM_LN_S_RSTB_CTLr_HW_FW_HANDSHAKE_DISABLEf_SET BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_S_RSTB_CTLr_HW_FW_HANDSHAKE_DISABLEf_SET
#define RXTXCOM_LN_S_RSTB_CTLr_LN_S_RSTBf_GET BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_S_RSTB_CTLr_LN_S_RSTBf_GET
#define RXTXCOM_LN_S_RSTB_CTLr_LN_S_RSTBf_SET BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_S_RSTB_CTLr_LN_S_RSTBf_SET
#define READ_RXTXCOM_LN_S_RSTB_CTLr BCMI_TSCF_GEN3_XGXS_READ_RXTXCOM_LN_S_RSTB_CTLr
#define WRITE_RXTXCOM_LN_S_RSTB_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_RXTXCOM_LN_S_RSTB_CTLr
#define MODIFY_RXTXCOM_LN_S_RSTB_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_RXTXCOM_LN_S_RSTB_CTLr
#define READLN_RXTXCOM_LN_S_RSTB_CTLr BCMI_TSCF_GEN3_XGXS_READLN_RXTXCOM_LN_S_RSTB_CTLr
#define WRITELN_RXTXCOM_LN_S_RSTB_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_RXTXCOM_LN_S_RSTB_CTLr
#define WRITEALL_RXTXCOM_LN_S_RSTB_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_RXTXCOM_LN_S_RSTB_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RXTXCOM_LN_S_RSTB_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_CTL0
 * BLOCKS:   AMS_RX
 * REGADDR:  0xd0c0
 * DEVAD:    1
 * DESC:     AMS RX CONTROL_0
 * RESETVAL: 0x10 (16)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_RX_MASTER_DIODES_IBIAS master diodes ibias (max, mode, min) amsbus ctrl_out  2:0DFT_MUX
 *     AMS_RX_SIGDET_THRESHOLD NA. Please use afe_sigdet_thresh from sigdet module. amsbus ctrl_out  5:3
 *     AMS_RX_SIGDET_PWRDN default=0 for enable signal detector amsbus ctrl_out  6:6DFT_MUX
 *     AMS_RX_SIGDET_BYPASS force sigdet output = 1 amsbus ctrl_out  7:7
 *     AMS_RX_TPORT_EN  output rx_rclk20 to PLL test port amsbus ctrl_out  8:8DFT_MUX
 *     AMS_RX_VGA_10G_BW enables lower freq EQ peaking used in 10G mode amsbus ctrl_out  9:9
 *     AMS_RX_EQ_LZ_EN  DFE summer and buffer for non-DFE modes amsbus ctrl_out  10:10
 *     AMS_RX_DFE_HGAIN_EN enables high, fixed gain for the DFE summer and buffer. amsbus ctrl_out  11:11
 *     AMS_RX_DC_COUPLE for QSGMII DC mode with 50 Ohm pull-up to RVDD1p0 amsbus ctrl_out  12:12DFT_DFS=1'b0
 *     AMS_RX_PEAKING_FILTER_IBIAS peaking filter ibias (max, mode, min) amsbus ctrl_out  15:13
 */
#define BCMI_TSCF_GEN3_XGXS_RX_CTL0r (0x0001d0c0 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program RX_CTL0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_CTL0r_s {
	uint32_t v[1];
	uint32_t rx_ctl0[1];
	uint32_t _rx_ctl0;
} BCMI_TSCF_GEN3_XGXS_RX_CTL0r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_CTL0r_CLR(r) (r).rx_ctl0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_CTL0r_SET(r,d) (r).rx_ctl0[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_CTL0r_GET(r) (r).rx_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_CTL0r_AMS_RX_PEAKING_FILTER_IBIASf_GET(r) ((((r).rx_ctl0[0]) >> 13) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL0r_AMS_RX_PEAKING_FILTER_IBIASf_SET(r,f) (r).rx_ctl0[0]=(((r).rx_ctl0[0] & ~((uint32_t)0x7 << 13)) | ((((uint32_t)f) & 0x7) << 13)) | (7 << (16 + 13))
#define BCMI_TSCF_GEN3_XGXS_RX_CTL0r_AMS_RX_DC_COUPLEf_GET(r) ((((r).rx_ctl0[0]) >> 12) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL0r_AMS_RX_DC_COUPLEf_SET(r,f) (r).rx_ctl0[0]=(((r).rx_ctl0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_RX_CTL0r_AMS_RX_DFE_HGAIN_ENf_GET(r) ((((r).rx_ctl0[0]) >> 11) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL0r_AMS_RX_DFE_HGAIN_ENf_SET(r,f) (r).rx_ctl0[0]=(((r).rx_ctl0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_RX_CTL0r_AMS_RX_EQ_LZ_ENf_GET(r) ((((r).rx_ctl0[0]) >> 10) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL0r_AMS_RX_EQ_LZ_ENf_SET(r,f) (r).rx_ctl0[0]=(((r).rx_ctl0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_RX_CTL0r_AMS_RX_VGA_10G_BWf_GET(r) ((((r).rx_ctl0[0]) >> 9) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL0r_AMS_RX_VGA_10G_BWf_SET(r,f) (r).rx_ctl0[0]=(((r).rx_ctl0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_RX_CTL0r_AMS_RX_TPORT_ENf_GET(r) ((((r).rx_ctl0[0]) >> 8) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL0r_AMS_RX_TPORT_ENf_SET(r,f) (r).rx_ctl0[0]=(((r).rx_ctl0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_RX_CTL0r_AMS_RX_SIGDET_BYPASSf_GET(r) ((((r).rx_ctl0[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL0r_AMS_RX_SIGDET_BYPASSf_SET(r,f) (r).rx_ctl0[0]=(((r).rx_ctl0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_RX_CTL0r_AMS_RX_SIGDET_PWRDNf_GET(r) ((((r).rx_ctl0[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL0r_AMS_RX_SIGDET_PWRDNf_SET(r,f) (r).rx_ctl0[0]=(((r).rx_ctl0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_RX_CTL0r_AMS_RX_SIGDET_THRESHOLDf_GET(r) ((((r).rx_ctl0[0]) >> 3) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL0r_AMS_RX_SIGDET_THRESHOLDf_SET(r,f) (r).rx_ctl0[0]=(((r).rx_ctl0[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3)) | (7 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_RX_CTL0r_AMS_RX_MASTER_DIODES_IBIASf_GET(r) (((r).rx_ctl0[0]) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL0r_AMS_RX_MASTER_DIODES_IBIASf_SET(r,f) (r).rx_ctl0[0]=(((r).rx_ctl0[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access RX_CTL0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_CTL0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL0r,(_r._rx_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL0r,(_r._rx_ctl0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL0r,(_r._rx_ctl0))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_CTL0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_CTL0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_ctl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_CTL0r BCMI_TSCF_GEN3_XGXS_RX_CTL0r
#define RX_CTL0r_SIZE BCMI_TSCF_GEN3_XGXS_RX_CTL0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_CTL0r_t RX_CTL0r_t;
#define RX_CTL0r_CLR BCMI_TSCF_GEN3_XGXS_RX_CTL0r_CLR
#define RX_CTL0r_SET BCMI_TSCF_GEN3_XGXS_RX_CTL0r_SET
#define RX_CTL0r_GET BCMI_TSCF_GEN3_XGXS_RX_CTL0r_GET
#define RX_CTL0r_AMS_RX_PEAKING_FILTER_IBIASf_GET BCMI_TSCF_GEN3_XGXS_RX_CTL0r_AMS_RX_PEAKING_FILTER_IBIASf_GET
#define RX_CTL0r_AMS_RX_PEAKING_FILTER_IBIASf_SET BCMI_TSCF_GEN3_XGXS_RX_CTL0r_AMS_RX_PEAKING_FILTER_IBIASf_SET
#define RX_CTL0r_AMS_RX_DC_COUPLEf_GET BCMI_TSCF_GEN3_XGXS_RX_CTL0r_AMS_RX_DC_COUPLEf_GET
#define RX_CTL0r_AMS_RX_DC_COUPLEf_SET BCMI_TSCF_GEN3_XGXS_RX_CTL0r_AMS_RX_DC_COUPLEf_SET
#define RX_CTL0r_AMS_RX_DFE_HGAIN_ENf_GET BCMI_TSCF_GEN3_XGXS_RX_CTL0r_AMS_RX_DFE_HGAIN_ENf_GET
#define RX_CTL0r_AMS_RX_DFE_HGAIN_ENf_SET BCMI_TSCF_GEN3_XGXS_RX_CTL0r_AMS_RX_DFE_HGAIN_ENf_SET
#define RX_CTL0r_AMS_RX_EQ_LZ_ENf_GET BCMI_TSCF_GEN3_XGXS_RX_CTL0r_AMS_RX_EQ_LZ_ENf_GET
#define RX_CTL0r_AMS_RX_EQ_LZ_ENf_SET BCMI_TSCF_GEN3_XGXS_RX_CTL0r_AMS_RX_EQ_LZ_ENf_SET
#define RX_CTL0r_AMS_RX_VGA_10G_BWf_GET BCMI_TSCF_GEN3_XGXS_RX_CTL0r_AMS_RX_VGA_10G_BWf_GET
#define RX_CTL0r_AMS_RX_VGA_10G_BWf_SET BCMI_TSCF_GEN3_XGXS_RX_CTL0r_AMS_RX_VGA_10G_BWf_SET
#define RX_CTL0r_AMS_RX_TPORT_ENf_GET BCMI_TSCF_GEN3_XGXS_RX_CTL0r_AMS_RX_TPORT_ENf_GET
#define RX_CTL0r_AMS_RX_TPORT_ENf_SET BCMI_TSCF_GEN3_XGXS_RX_CTL0r_AMS_RX_TPORT_ENf_SET
#define RX_CTL0r_AMS_RX_SIGDET_BYPASSf_GET BCMI_TSCF_GEN3_XGXS_RX_CTL0r_AMS_RX_SIGDET_BYPASSf_GET
#define RX_CTL0r_AMS_RX_SIGDET_BYPASSf_SET BCMI_TSCF_GEN3_XGXS_RX_CTL0r_AMS_RX_SIGDET_BYPASSf_SET
#define RX_CTL0r_AMS_RX_SIGDET_PWRDNf_GET BCMI_TSCF_GEN3_XGXS_RX_CTL0r_AMS_RX_SIGDET_PWRDNf_GET
#define RX_CTL0r_AMS_RX_SIGDET_PWRDNf_SET BCMI_TSCF_GEN3_XGXS_RX_CTL0r_AMS_RX_SIGDET_PWRDNf_SET
#define RX_CTL0r_AMS_RX_SIGDET_THRESHOLDf_GET BCMI_TSCF_GEN3_XGXS_RX_CTL0r_AMS_RX_SIGDET_THRESHOLDf_GET
#define RX_CTL0r_AMS_RX_SIGDET_THRESHOLDf_SET BCMI_TSCF_GEN3_XGXS_RX_CTL0r_AMS_RX_SIGDET_THRESHOLDf_SET
#define RX_CTL0r_AMS_RX_MASTER_DIODES_IBIASf_GET BCMI_TSCF_GEN3_XGXS_RX_CTL0r_AMS_RX_MASTER_DIODES_IBIASf_GET
#define RX_CTL0r_AMS_RX_MASTER_DIODES_IBIASf_SET BCMI_TSCF_GEN3_XGXS_RX_CTL0r_AMS_RX_MASTER_DIODES_IBIASf_SET
#define READ_RX_CTL0r BCMI_TSCF_GEN3_XGXS_READ_RX_CTL0r
#define WRITE_RX_CTL0r BCMI_TSCF_GEN3_XGXS_WRITE_RX_CTL0r
#define MODIFY_RX_CTL0r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_CTL0r
#define READLN_RX_CTL0r BCMI_TSCF_GEN3_XGXS_READLN_RX_CTL0r
#define WRITELN_RX_CTL0r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_CTL0r
#define WRITEALL_RX_CTL0r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_CTL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_CTL1
 * BLOCKS:   AMS_RX
 * REGADDR:  0xd0c1
 * DEVAD:    1
 * DESC:     AMS RX CONTROL_1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_RX_SPARE_16  ams rx reserved [16] amsbus ctrl_out  16:16
 *     AMS_RX_VGA0_IBIAS VGA0 ibias (max, mode, min) amsbus ctrl_out  19:17
 *     AMS_RX_VGA1_IBIAS VGA1 ibias (max, mode, min) amsbus ctrl_out  22:20
 *     AMS_RX_VGA2_IBIAS VGA2 ibias (max, mode, min) amsbus ctrl_out  25:23
 *     AMS_RX_VGA3_IBIAS VGA3 ibias (max, mode, min) amsbus ctrl_out  28:26
 *     AMS_RX_CM_VOLTAGE_IBIAS input CM voltage ibias (max, mode, min) amsbus ctrl_out  31:29
 */
#define BCMI_TSCF_GEN3_XGXS_RX_CTL1r (0x0001d0c1 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_CTL1r_SIZE 4

/*
 * This structure should be used to declare and program RX_CTL1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_CTL1r_s {
	uint32_t v[1];
	uint32_t rx_ctl1[1];
	uint32_t _rx_ctl1;
} BCMI_TSCF_GEN3_XGXS_RX_CTL1r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_CTL1r_CLR(r) (r).rx_ctl1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_CTL1r_SET(r,d) (r).rx_ctl1[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_CTL1r_GET(r) (r).rx_ctl1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_CTL1r_AMS_RX_CM_VOLTAGE_IBIASf_GET(r) ((((r).rx_ctl1[0]) >> 13) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL1r_AMS_RX_CM_VOLTAGE_IBIASf_SET(r,f) (r).rx_ctl1[0]=(((r).rx_ctl1[0] & ~((uint32_t)0x7 << 13)) | ((((uint32_t)f) & 0x7) << 13)) | (7 << (16 + 13))
#define BCMI_TSCF_GEN3_XGXS_RX_CTL1r_AMS_RX_VGA3_IBIASf_GET(r) ((((r).rx_ctl1[0]) >> 10) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL1r_AMS_RX_VGA3_IBIASf_SET(r,f) (r).rx_ctl1[0]=(((r).rx_ctl1[0] & ~((uint32_t)0x7 << 10)) | ((((uint32_t)f) & 0x7) << 10)) | (7 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_RX_CTL1r_AMS_RX_VGA2_IBIASf_GET(r) ((((r).rx_ctl1[0]) >> 7) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL1r_AMS_RX_VGA2_IBIASf_SET(r,f) (r).rx_ctl1[0]=(((r).rx_ctl1[0] & ~((uint32_t)0x7 << 7)) | ((((uint32_t)f) & 0x7) << 7)) | (7 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_RX_CTL1r_AMS_RX_VGA1_IBIASf_GET(r) ((((r).rx_ctl1[0]) >> 4) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL1r_AMS_RX_VGA1_IBIASf_SET(r,f) (r).rx_ctl1[0]=(((r).rx_ctl1[0] & ~((uint32_t)0x7 << 4)) | ((((uint32_t)f) & 0x7) << 4)) | (7 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_RX_CTL1r_AMS_RX_VGA0_IBIASf_GET(r) ((((r).rx_ctl1[0]) >> 1) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL1r_AMS_RX_VGA0_IBIASf_SET(r,f) (r).rx_ctl1[0]=(((r).rx_ctl1[0] & ~((uint32_t)0x7 << 1)) | ((((uint32_t)f) & 0x7) << 1)) | (7 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_RX_CTL1r_AMS_RX_SPARE_16f_GET(r) (((r).rx_ctl1[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL1r_AMS_RX_SPARE_16f_SET(r,f) (r).rx_ctl1[0]=(((r).rx_ctl1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_CTL1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_CTL1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL1r,(_r._rx_ctl1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL1r,(_r._rx_ctl1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL1r,(_r._rx_ctl1))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_CTL1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_ctl1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_CTL1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_ctl1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_ctl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_CTL1r BCMI_TSCF_GEN3_XGXS_RX_CTL1r
#define RX_CTL1r_SIZE BCMI_TSCF_GEN3_XGXS_RX_CTL1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_CTL1r_t RX_CTL1r_t;
#define RX_CTL1r_CLR BCMI_TSCF_GEN3_XGXS_RX_CTL1r_CLR
#define RX_CTL1r_SET BCMI_TSCF_GEN3_XGXS_RX_CTL1r_SET
#define RX_CTL1r_GET BCMI_TSCF_GEN3_XGXS_RX_CTL1r_GET
#define RX_CTL1r_AMS_RX_CM_VOLTAGE_IBIASf_GET BCMI_TSCF_GEN3_XGXS_RX_CTL1r_AMS_RX_CM_VOLTAGE_IBIASf_GET
#define RX_CTL1r_AMS_RX_CM_VOLTAGE_IBIASf_SET BCMI_TSCF_GEN3_XGXS_RX_CTL1r_AMS_RX_CM_VOLTAGE_IBIASf_SET
#define RX_CTL1r_AMS_RX_VGA3_IBIASf_GET BCMI_TSCF_GEN3_XGXS_RX_CTL1r_AMS_RX_VGA3_IBIASf_GET
#define RX_CTL1r_AMS_RX_VGA3_IBIASf_SET BCMI_TSCF_GEN3_XGXS_RX_CTL1r_AMS_RX_VGA3_IBIASf_SET
#define RX_CTL1r_AMS_RX_VGA2_IBIASf_GET BCMI_TSCF_GEN3_XGXS_RX_CTL1r_AMS_RX_VGA2_IBIASf_GET
#define RX_CTL1r_AMS_RX_VGA2_IBIASf_SET BCMI_TSCF_GEN3_XGXS_RX_CTL1r_AMS_RX_VGA2_IBIASf_SET
#define RX_CTL1r_AMS_RX_VGA1_IBIASf_GET BCMI_TSCF_GEN3_XGXS_RX_CTL1r_AMS_RX_VGA1_IBIASf_GET
#define RX_CTL1r_AMS_RX_VGA1_IBIASf_SET BCMI_TSCF_GEN3_XGXS_RX_CTL1r_AMS_RX_VGA1_IBIASf_SET
#define RX_CTL1r_AMS_RX_VGA0_IBIASf_GET BCMI_TSCF_GEN3_XGXS_RX_CTL1r_AMS_RX_VGA0_IBIASf_GET
#define RX_CTL1r_AMS_RX_VGA0_IBIASf_SET BCMI_TSCF_GEN3_XGXS_RX_CTL1r_AMS_RX_VGA0_IBIASf_SET
#define RX_CTL1r_AMS_RX_SPARE_16f_GET BCMI_TSCF_GEN3_XGXS_RX_CTL1r_AMS_RX_SPARE_16f_GET
#define RX_CTL1r_AMS_RX_SPARE_16f_SET BCMI_TSCF_GEN3_XGXS_RX_CTL1r_AMS_RX_SPARE_16f_SET
#define READ_RX_CTL1r BCMI_TSCF_GEN3_XGXS_READ_RX_CTL1r
#define WRITE_RX_CTL1r BCMI_TSCF_GEN3_XGXS_WRITE_RX_CTL1r
#define MODIFY_RX_CTL1r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_CTL1r
#define READLN_RX_CTL1r BCMI_TSCF_GEN3_XGXS_READLN_RX_CTL1r
#define WRITELN_RX_CTL1r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_CTL1r
#define WRITEALL_RX_CTL1r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_CTL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_CTL1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_CTL2
 * BLOCKS:   AMS_RX
 * REGADDR:  0xd0c2
 * DEVAD:    1
 * DESC:     AMS RX CONTROL_2
 * RESETVAL: 0xe00 (3584)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_RX_SIGDET_IBIAS signal detect ibias (max, mode, min) amsbus ctrl_out  34:32
 *     AMS_RX_PHASE_INTERPOLATORS_IBIAS phase interpolators ibias (max, mode, min) amsbus ctrl_out  37:35DFT_MUX
 *     AMS_RX_DFE_TAP_WEIGHT_IBIAS DFE tap weight ibias (max, mode, min) amsbus ctrl_out  40:38
 *     AMS_RX_SEL_UGBW  unity gain buffer BW amsbus ctrl_out  42:41
 *     AMS_RX_SEL_TH4DFE DFE tap threshold voltage amsbus ctrl_out  44:43
 *     AMS_RX_PD_CH_P1  powers down the p1 amsbus ctrl_out  45:45
 *     AMS_RX_SIGDET_POWER_SAVE see AMS amsbus ctrl_out  46:46
 *     AMS_RX_PWRDN_FTAP power down for floating taps amsbus ctrl_out  47:47
 */
#define BCMI_TSCF_GEN3_XGXS_RX_CTL2r (0x0001d0c2 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_CTL2r_SIZE 4

/*
 * This structure should be used to declare and program RX_CTL2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_CTL2r_s {
	uint32_t v[1];
	uint32_t rx_ctl2[1];
	uint32_t _rx_ctl2;
} BCMI_TSCF_GEN3_XGXS_RX_CTL2r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_CTL2r_CLR(r) (r).rx_ctl2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_CTL2r_SET(r,d) (r).rx_ctl2[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_CTL2r_GET(r) (r).rx_ctl2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_CTL2r_AMS_RX_PWRDN_FTAPf_GET(r) ((((r).rx_ctl2[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL2r_AMS_RX_PWRDN_FTAPf_SET(r,f) (r).rx_ctl2[0]=(((r).rx_ctl2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_RX_CTL2r_AMS_RX_SIGDET_POWER_SAVEf_GET(r) ((((r).rx_ctl2[0]) >> 14) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL2r_AMS_RX_SIGDET_POWER_SAVEf_SET(r,f) (r).rx_ctl2[0]=(((r).rx_ctl2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_RX_CTL2r_AMS_RX_PD_CH_P1f_GET(r) ((((r).rx_ctl2[0]) >> 13) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL2r_AMS_RX_PD_CH_P1f_SET(r,f) (r).rx_ctl2[0]=(((r).rx_ctl2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_GEN3_XGXS_RX_CTL2r_AMS_RX_SEL_TH4DFEf_GET(r) ((((r).rx_ctl2[0]) >> 11) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL2r_AMS_RX_SEL_TH4DFEf_SET(r,f) (r).rx_ctl2[0]=(((r).rx_ctl2[0] & ~((uint32_t)0x3 << 11)) | ((((uint32_t)f) & 0x3) << 11)) | (3 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_RX_CTL2r_AMS_RX_SEL_UGBWf_GET(r) ((((r).rx_ctl2[0]) >> 9) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL2r_AMS_RX_SEL_UGBWf_SET(r,f) (r).rx_ctl2[0]=(((r).rx_ctl2[0] & ~((uint32_t)0x3 << 9)) | ((((uint32_t)f) & 0x3) << 9)) | (3 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_RX_CTL2r_AMS_RX_DFE_TAP_WEIGHT_IBIASf_GET(r) ((((r).rx_ctl2[0]) >> 6) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL2r_AMS_RX_DFE_TAP_WEIGHT_IBIASf_SET(r,f) (r).rx_ctl2[0]=(((r).rx_ctl2[0] & ~((uint32_t)0x7 << 6)) | ((((uint32_t)f) & 0x7) << 6)) | (7 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_RX_CTL2r_AMS_RX_PHASE_INTERPOLATORS_IBIASf_GET(r) ((((r).rx_ctl2[0]) >> 3) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL2r_AMS_RX_PHASE_INTERPOLATORS_IBIASf_SET(r,f) (r).rx_ctl2[0]=(((r).rx_ctl2[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3)) | (7 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_RX_CTL2r_AMS_RX_SIGDET_IBIASf_GET(r) (((r).rx_ctl2[0]) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL2r_AMS_RX_SIGDET_IBIASf_SET(r,f) (r).rx_ctl2[0]=(((r).rx_ctl2[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access RX_CTL2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_CTL2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL2r,(_r._rx_ctl2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_CTL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL2r,(_r._rx_ctl2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_CTL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL2r,(_r._rx_ctl2))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_CTL2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_ctl2))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_CTL2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_ctl2))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_CTL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_ctl2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_CTL2r BCMI_TSCF_GEN3_XGXS_RX_CTL2r
#define RX_CTL2r_SIZE BCMI_TSCF_GEN3_XGXS_RX_CTL2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_CTL2r_t RX_CTL2r_t;
#define RX_CTL2r_CLR BCMI_TSCF_GEN3_XGXS_RX_CTL2r_CLR
#define RX_CTL2r_SET BCMI_TSCF_GEN3_XGXS_RX_CTL2r_SET
#define RX_CTL2r_GET BCMI_TSCF_GEN3_XGXS_RX_CTL2r_GET
#define RX_CTL2r_AMS_RX_PWRDN_FTAPf_GET BCMI_TSCF_GEN3_XGXS_RX_CTL2r_AMS_RX_PWRDN_FTAPf_GET
#define RX_CTL2r_AMS_RX_PWRDN_FTAPf_SET BCMI_TSCF_GEN3_XGXS_RX_CTL2r_AMS_RX_PWRDN_FTAPf_SET
#define RX_CTL2r_AMS_RX_SIGDET_POWER_SAVEf_GET BCMI_TSCF_GEN3_XGXS_RX_CTL2r_AMS_RX_SIGDET_POWER_SAVEf_GET
#define RX_CTL2r_AMS_RX_SIGDET_POWER_SAVEf_SET BCMI_TSCF_GEN3_XGXS_RX_CTL2r_AMS_RX_SIGDET_POWER_SAVEf_SET
#define RX_CTL2r_AMS_RX_PD_CH_P1f_GET BCMI_TSCF_GEN3_XGXS_RX_CTL2r_AMS_RX_PD_CH_P1f_GET
#define RX_CTL2r_AMS_RX_PD_CH_P1f_SET BCMI_TSCF_GEN3_XGXS_RX_CTL2r_AMS_RX_PD_CH_P1f_SET
#define RX_CTL2r_AMS_RX_SEL_TH4DFEf_GET BCMI_TSCF_GEN3_XGXS_RX_CTL2r_AMS_RX_SEL_TH4DFEf_GET
#define RX_CTL2r_AMS_RX_SEL_TH4DFEf_SET BCMI_TSCF_GEN3_XGXS_RX_CTL2r_AMS_RX_SEL_TH4DFEf_SET
#define RX_CTL2r_AMS_RX_SEL_UGBWf_GET BCMI_TSCF_GEN3_XGXS_RX_CTL2r_AMS_RX_SEL_UGBWf_GET
#define RX_CTL2r_AMS_RX_SEL_UGBWf_SET BCMI_TSCF_GEN3_XGXS_RX_CTL2r_AMS_RX_SEL_UGBWf_SET
#define RX_CTL2r_AMS_RX_DFE_TAP_WEIGHT_IBIASf_GET BCMI_TSCF_GEN3_XGXS_RX_CTL2r_AMS_RX_DFE_TAP_WEIGHT_IBIASf_GET
#define RX_CTL2r_AMS_RX_DFE_TAP_WEIGHT_IBIASf_SET BCMI_TSCF_GEN3_XGXS_RX_CTL2r_AMS_RX_DFE_TAP_WEIGHT_IBIASf_SET
#define RX_CTL2r_AMS_RX_PHASE_INTERPOLATORS_IBIASf_GET BCMI_TSCF_GEN3_XGXS_RX_CTL2r_AMS_RX_PHASE_INTERPOLATORS_IBIASf_GET
#define RX_CTL2r_AMS_RX_PHASE_INTERPOLATORS_IBIASf_SET BCMI_TSCF_GEN3_XGXS_RX_CTL2r_AMS_RX_PHASE_INTERPOLATORS_IBIASf_SET
#define RX_CTL2r_AMS_RX_SIGDET_IBIASf_GET BCMI_TSCF_GEN3_XGXS_RX_CTL2r_AMS_RX_SIGDET_IBIASf_GET
#define RX_CTL2r_AMS_RX_SIGDET_IBIASf_SET BCMI_TSCF_GEN3_XGXS_RX_CTL2r_AMS_RX_SIGDET_IBIASf_SET
#define READ_RX_CTL2r BCMI_TSCF_GEN3_XGXS_READ_RX_CTL2r
#define WRITE_RX_CTL2r BCMI_TSCF_GEN3_XGXS_WRITE_RX_CTL2r
#define MODIFY_RX_CTL2r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_CTL2r
#define READLN_RX_CTL2r BCMI_TSCF_GEN3_XGXS_READLN_RX_CTL2r
#define WRITELN_RX_CTL2r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_CTL2r
#define WRITEALL_RX_CTL2r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_CTL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_CTL2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_CTL3
 * BLOCKS:   AMS_RX
 * REGADDR:  0xd0c3
 * DEVAD:    1
 * DESC:     AMS RX CONTROL_3
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_RX_MET_R_IBIAS met R ibias (max, mode, min) amsbus ctrl_out  50:48
 *     AMS_RX_DLL_IBIAS DLL ibias (max, mode, min) amsbus ctrl_out  53:51DFT_MUX
 *     AMS_RX_OFFSET_CORRECTION_IBIAS offset correction ibias (max, mode, min) amsbus ctrl_out  56:54
 *     AMS_RX_DFE_SUM_BUF_IBIAS DFE sum/buf ibias (max, mode, min) amsbus ctrl_out  59:57
 *     AMS_RX_DFE_SLICER_IBIAS dfe_slicer_ibias amsbus ctrl_out  62:60
 *     AMS_RX_SPARE_63  ams rx reserved[63] amsbus ctrl_out  63:63
 */
#define BCMI_TSCF_GEN3_XGXS_RX_CTL3r (0x0001d0c3 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_CTL3r_SIZE 4

/*
 * This structure should be used to declare and program RX_CTL3.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_CTL3r_s {
	uint32_t v[1];
	uint32_t rx_ctl3[1];
	uint32_t _rx_ctl3;
} BCMI_TSCF_GEN3_XGXS_RX_CTL3r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_CTL3r_CLR(r) (r).rx_ctl3[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_CTL3r_SET(r,d) (r).rx_ctl3[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_CTL3r_GET(r) (r).rx_ctl3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_CTL3r_AMS_RX_SPARE_63f_GET(r) ((((r).rx_ctl3[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL3r_AMS_RX_SPARE_63f_SET(r,f) (r).rx_ctl3[0]=(((r).rx_ctl3[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_RX_CTL3r_AMS_RX_DFE_SLICER_IBIASf_GET(r) ((((r).rx_ctl3[0]) >> 12) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL3r_AMS_RX_DFE_SLICER_IBIASf_SET(r,f) (r).rx_ctl3[0]=(((r).rx_ctl3[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12)) | (7 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_RX_CTL3r_AMS_RX_DFE_SUM_BUF_IBIASf_GET(r) ((((r).rx_ctl3[0]) >> 9) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL3r_AMS_RX_DFE_SUM_BUF_IBIASf_SET(r,f) (r).rx_ctl3[0]=(((r).rx_ctl3[0] & ~((uint32_t)0x7 << 9)) | ((((uint32_t)f) & 0x7) << 9)) | (7 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_RX_CTL3r_AMS_RX_OFFSET_CORRECTION_IBIASf_GET(r) ((((r).rx_ctl3[0]) >> 6) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL3r_AMS_RX_OFFSET_CORRECTION_IBIASf_SET(r,f) (r).rx_ctl3[0]=(((r).rx_ctl3[0] & ~((uint32_t)0x7 << 6)) | ((((uint32_t)f) & 0x7) << 6)) | (7 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_RX_CTL3r_AMS_RX_DLL_IBIASf_GET(r) ((((r).rx_ctl3[0]) >> 3) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL3r_AMS_RX_DLL_IBIASf_SET(r,f) (r).rx_ctl3[0]=(((r).rx_ctl3[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3)) | (7 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_RX_CTL3r_AMS_RX_MET_R_IBIASf_GET(r) (((r).rx_ctl3[0]) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL3r_AMS_RX_MET_R_IBIASf_SET(r,f) (r).rx_ctl3[0]=(((r).rx_ctl3[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access RX_CTL3.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_CTL3r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL3r,(_r._rx_ctl3))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_CTL3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL3r,(_r._rx_ctl3)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_CTL3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL3r,(_r._rx_ctl3))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_CTL3r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_ctl3))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_CTL3r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_ctl3))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_CTL3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL3r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_ctl3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_CTL3r BCMI_TSCF_GEN3_XGXS_RX_CTL3r
#define RX_CTL3r_SIZE BCMI_TSCF_GEN3_XGXS_RX_CTL3r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_CTL3r_t RX_CTL3r_t;
#define RX_CTL3r_CLR BCMI_TSCF_GEN3_XGXS_RX_CTL3r_CLR
#define RX_CTL3r_SET BCMI_TSCF_GEN3_XGXS_RX_CTL3r_SET
#define RX_CTL3r_GET BCMI_TSCF_GEN3_XGXS_RX_CTL3r_GET
#define RX_CTL3r_AMS_RX_SPARE_63f_GET BCMI_TSCF_GEN3_XGXS_RX_CTL3r_AMS_RX_SPARE_63f_GET
#define RX_CTL3r_AMS_RX_SPARE_63f_SET BCMI_TSCF_GEN3_XGXS_RX_CTL3r_AMS_RX_SPARE_63f_SET
#define RX_CTL3r_AMS_RX_DFE_SLICER_IBIASf_GET BCMI_TSCF_GEN3_XGXS_RX_CTL3r_AMS_RX_DFE_SLICER_IBIASf_GET
#define RX_CTL3r_AMS_RX_DFE_SLICER_IBIASf_SET BCMI_TSCF_GEN3_XGXS_RX_CTL3r_AMS_RX_DFE_SLICER_IBIASf_SET
#define RX_CTL3r_AMS_RX_DFE_SUM_BUF_IBIASf_GET BCMI_TSCF_GEN3_XGXS_RX_CTL3r_AMS_RX_DFE_SUM_BUF_IBIASf_GET
#define RX_CTL3r_AMS_RX_DFE_SUM_BUF_IBIASf_SET BCMI_TSCF_GEN3_XGXS_RX_CTL3r_AMS_RX_DFE_SUM_BUF_IBIASf_SET
#define RX_CTL3r_AMS_RX_OFFSET_CORRECTION_IBIASf_GET BCMI_TSCF_GEN3_XGXS_RX_CTL3r_AMS_RX_OFFSET_CORRECTION_IBIASf_GET
#define RX_CTL3r_AMS_RX_OFFSET_CORRECTION_IBIASf_SET BCMI_TSCF_GEN3_XGXS_RX_CTL3r_AMS_RX_OFFSET_CORRECTION_IBIASf_SET
#define RX_CTL3r_AMS_RX_DLL_IBIASf_GET BCMI_TSCF_GEN3_XGXS_RX_CTL3r_AMS_RX_DLL_IBIASf_GET
#define RX_CTL3r_AMS_RX_DLL_IBIASf_SET BCMI_TSCF_GEN3_XGXS_RX_CTL3r_AMS_RX_DLL_IBIASf_SET
#define RX_CTL3r_AMS_RX_MET_R_IBIASf_GET BCMI_TSCF_GEN3_XGXS_RX_CTL3r_AMS_RX_MET_R_IBIASf_GET
#define RX_CTL3r_AMS_RX_MET_R_IBIASf_SET BCMI_TSCF_GEN3_XGXS_RX_CTL3r_AMS_RX_MET_R_IBIASf_SET
#define READ_RX_CTL3r BCMI_TSCF_GEN3_XGXS_READ_RX_CTL3r
#define WRITE_RX_CTL3r BCMI_TSCF_GEN3_XGXS_WRITE_RX_CTL3r
#define MODIFY_RX_CTL3r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_CTL3r
#define READLN_RX_CTL3r BCMI_TSCF_GEN3_XGXS_READLN_RX_CTL3r
#define WRITELN_RX_CTL3r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_CTL3r
#define WRITEALL_RX_CTL3r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_CTL3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_CTL3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_CTL4
 * BLOCKS:   AMS_RX
 * REGADDR:  0xd0c4
 * DEVAD:    1
 * DESC:     AMS RX CONTROL_4
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_RX_DFE_SLICER_CAL_IBIAS DFE slicer cal ibias (max, mode, min) amsbus ctrl_out  66:64
 *     AMS_RX_TBD_IBIAS TBD ibias (max, mode, min) amsbus ctrl_out  69:67
 *     AMS_RX_VGA0_RESCAL_MUX VGA0 rescal mux (force, ctrl[3:0]) - rescal override amsbus ctrl_out  74:70
 *     AMS_RX_VGA1_RESCAL_MUX VGA1 rescal mux (force, ctrl[3:0]) - rescal override amsbus ctrl_out  79:75
 */
#define BCMI_TSCF_GEN3_XGXS_RX_CTL4r (0x0001d0c4 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_CTL4r_SIZE 4

/*
 * This structure should be used to declare and program RX_CTL4.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_CTL4r_s {
	uint32_t v[1];
	uint32_t rx_ctl4[1];
	uint32_t _rx_ctl4;
} BCMI_TSCF_GEN3_XGXS_RX_CTL4r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_CTL4r_CLR(r) (r).rx_ctl4[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_CTL4r_SET(r,d) (r).rx_ctl4[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_CTL4r_GET(r) (r).rx_ctl4[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_CTL4r_AMS_RX_VGA1_RESCAL_MUXf_GET(r) ((((r).rx_ctl4[0]) >> 11) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL4r_AMS_RX_VGA1_RESCAL_MUXf_SET(r,f) (r).rx_ctl4[0]=(((r).rx_ctl4[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11)) | (31 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_RX_CTL4r_AMS_RX_VGA0_RESCAL_MUXf_GET(r) ((((r).rx_ctl4[0]) >> 6) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL4r_AMS_RX_VGA0_RESCAL_MUXf_SET(r,f) (r).rx_ctl4[0]=(((r).rx_ctl4[0] & ~((uint32_t)0x1f << 6)) | ((((uint32_t)f) & 0x1f) << 6)) | (31 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_RX_CTL4r_AMS_RX_TBD_IBIASf_GET(r) ((((r).rx_ctl4[0]) >> 3) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL4r_AMS_RX_TBD_IBIASf_SET(r,f) (r).rx_ctl4[0]=(((r).rx_ctl4[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3)) | (7 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_RX_CTL4r_AMS_RX_DFE_SLICER_CAL_IBIASf_GET(r) (((r).rx_ctl4[0]) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL4r_AMS_RX_DFE_SLICER_CAL_IBIASf_SET(r,f) (r).rx_ctl4[0]=(((r).rx_ctl4[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access RX_CTL4.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_CTL4r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL4r,(_r._rx_ctl4))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_CTL4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL4r,(_r._rx_ctl4)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_CTL4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL4r,(_r._rx_ctl4))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_CTL4r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_ctl4))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_CTL4r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_ctl4))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_CTL4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL4r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_ctl4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_CTL4r BCMI_TSCF_GEN3_XGXS_RX_CTL4r
#define RX_CTL4r_SIZE BCMI_TSCF_GEN3_XGXS_RX_CTL4r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_CTL4r_t RX_CTL4r_t;
#define RX_CTL4r_CLR BCMI_TSCF_GEN3_XGXS_RX_CTL4r_CLR
#define RX_CTL4r_SET BCMI_TSCF_GEN3_XGXS_RX_CTL4r_SET
#define RX_CTL4r_GET BCMI_TSCF_GEN3_XGXS_RX_CTL4r_GET
#define RX_CTL4r_AMS_RX_VGA1_RESCAL_MUXf_GET BCMI_TSCF_GEN3_XGXS_RX_CTL4r_AMS_RX_VGA1_RESCAL_MUXf_GET
#define RX_CTL4r_AMS_RX_VGA1_RESCAL_MUXf_SET BCMI_TSCF_GEN3_XGXS_RX_CTL4r_AMS_RX_VGA1_RESCAL_MUXf_SET
#define RX_CTL4r_AMS_RX_VGA0_RESCAL_MUXf_GET BCMI_TSCF_GEN3_XGXS_RX_CTL4r_AMS_RX_VGA0_RESCAL_MUXf_GET
#define RX_CTL4r_AMS_RX_VGA0_RESCAL_MUXf_SET BCMI_TSCF_GEN3_XGXS_RX_CTL4r_AMS_RX_VGA0_RESCAL_MUXf_SET
#define RX_CTL4r_AMS_RX_TBD_IBIASf_GET BCMI_TSCF_GEN3_XGXS_RX_CTL4r_AMS_RX_TBD_IBIASf_GET
#define RX_CTL4r_AMS_RX_TBD_IBIASf_SET BCMI_TSCF_GEN3_XGXS_RX_CTL4r_AMS_RX_TBD_IBIASf_SET
#define RX_CTL4r_AMS_RX_DFE_SLICER_CAL_IBIASf_GET BCMI_TSCF_GEN3_XGXS_RX_CTL4r_AMS_RX_DFE_SLICER_CAL_IBIASf_GET
#define RX_CTL4r_AMS_RX_DFE_SLICER_CAL_IBIASf_SET BCMI_TSCF_GEN3_XGXS_RX_CTL4r_AMS_RX_DFE_SLICER_CAL_IBIASf_SET
#define READ_RX_CTL4r BCMI_TSCF_GEN3_XGXS_READ_RX_CTL4r
#define WRITE_RX_CTL4r BCMI_TSCF_GEN3_XGXS_WRITE_RX_CTL4r
#define MODIFY_RX_CTL4r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_CTL4r
#define READLN_RX_CTL4r BCMI_TSCF_GEN3_XGXS_READLN_RX_CTL4r
#define WRITELN_RX_CTL4r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_CTL4r
#define WRITEALL_RX_CTL4r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_CTL4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_CTL4r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_CTL5
 * BLOCKS:   AMS_RX
 * REGADDR:  0xd0c5
 * DEVAD:    1
 * DESC:     AMS RX CONTROL_5
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_RX_VGA2_RESCAL_MUX VGA2 rescal mux (force, ctrl[3:0]) - rescal override amsbus ctrl_out  84:80
 *     AMS_RX_VGA3_RESCAL_MUX VGA3 rescal mux (force, ctrl[3:0]) - rescal override amsbus ctrl_out  89:85
 *     AMS_RX_SPARE_91_90 ams rx reserved[91:90] amsbus ctrl_out  91:90
 *     AMS_RX_TESTCLK_DIV divides rclk20 for test port. 00=OFF; 01=div2; 10=div4; 11=div8 amsbus ctrl_out  93:92DFT_MUX
 *     AMS_RX_TESTCLK_MUX 0=local test clock; 1=adjacent lane test clock amsbus ctrl_out  94:94DFT_MUX
 *     AMS_RX_RXCLK_MUX NA. Use rx_pll_select or pll_select register fields from ckrst_ctrl regmap. 0=4T clks from PLL0; 1=4T clks from PLL1 amsbus ctrl_out  95:95
 */
#define BCMI_TSCF_GEN3_XGXS_RX_CTL5r (0x0001d0c5 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_CTL5r_SIZE 4

/*
 * This structure should be used to declare and program RX_CTL5.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_CTL5r_s {
	uint32_t v[1];
	uint32_t rx_ctl5[1];
	uint32_t _rx_ctl5;
} BCMI_TSCF_GEN3_XGXS_RX_CTL5r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_CTL5r_CLR(r) (r).rx_ctl5[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_CTL5r_SET(r,d) (r).rx_ctl5[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_CTL5r_GET(r) (r).rx_ctl5[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_CTL5r_AMS_RX_RXCLK_MUXf_GET(r) ((((r).rx_ctl5[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL5r_AMS_RX_RXCLK_MUXf_SET(r,f) (r).rx_ctl5[0]=(((r).rx_ctl5[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_RX_CTL5r_AMS_RX_TESTCLK_MUXf_GET(r) ((((r).rx_ctl5[0]) >> 14) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL5r_AMS_RX_TESTCLK_MUXf_SET(r,f) (r).rx_ctl5[0]=(((r).rx_ctl5[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_RX_CTL5r_AMS_RX_TESTCLK_DIVf_GET(r) ((((r).rx_ctl5[0]) >> 12) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL5r_AMS_RX_TESTCLK_DIVf_SET(r,f) (r).rx_ctl5[0]=(((r).rx_ctl5[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12)) | (3 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_RX_CTL5r_AMS_RX_SPARE_91_90f_GET(r) ((((r).rx_ctl5[0]) >> 10) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL5r_AMS_RX_SPARE_91_90f_SET(r,f) (r).rx_ctl5[0]=(((r).rx_ctl5[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10)) | (3 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_RX_CTL5r_AMS_RX_VGA3_RESCAL_MUXf_GET(r) ((((r).rx_ctl5[0]) >> 5) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL5r_AMS_RX_VGA3_RESCAL_MUXf_SET(r,f) (r).rx_ctl5[0]=(((r).rx_ctl5[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5)) | (31 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_RX_CTL5r_AMS_RX_VGA2_RESCAL_MUXf_GET(r) (((r).rx_ctl5[0]) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL5r_AMS_RX_VGA2_RESCAL_MUXf_SET(r,f) (r).rx_ctl5[0]=(((r).rx_ctl5[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access RX_CTL5.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_CTL5r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL5r,(_r._rx_ctl5))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_CTL5r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL5r,(_r._rx_ctl5)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_CTL5r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL5r,(_r._rx_ctl5))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_CTL5r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL5r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_ctl5))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_CTL5r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL5r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_ctl5))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_CTL5r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL5r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_ctl5))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_CTL5r BCMI_TSCF_GEN3_XGXS_RX_CTL5r
#define RX_CTL5r_SIZE BCMI_TSCF_GEN3_XGXS_RX_CTL5r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_CTL5r_t RX_CTL5r_t;
#define RX_CTL5r_CLR BCMI_TSCF_GEN3_XGXS_RX_CTL5r_CLR
#define RX_CTL5r_SET BCMI_TSCF_GEN3_XGXS_RX_CTL5r_SET
#define RX_CTL5r_GET BCMI_TSCF_GEN3_XGXS_RX_CTL5r_GET
#define RX_CTL5r_AMS_RX_RXCLK_MUXf_GET BCMI_TSCF_GEN3_XGXS_RX_CTL5r_AMS_RX_RXCLK_MUXf_GET
#define RX_CTL5r_AMS_RX_RXCLK_MUXf_SET BCMI_TSCF_GEN3_XGXS_RX_CTL5r_AMS_RX_RXCLK_MUXf_SET
#define RX_CTL5r_AMS_RX_TESTCLK_MUXf_GET BCMI_TSCF_GEN3_XGXS_RX_CTL5r_AMS_RX_TESTCLK_MUXf_GET
#define RX_CTL5r_AMS_RX_TESTCLK_MUXf_SET BCMI_TSCF_GEN3_XGXS_RX_CTL5r_AMS_RX_TESTCLK_MUXf_SET
#define RX_CTL5r_AMS_RX_TESTCLK_DIVf_GET BCMI_TSCF_GEN3_XGXS_RX_CTL5r_AMS_RX_TESTCLK_DIVf_GET
#define RX_CTL5r_AMS_RX_TESTCLK_DIVf_SET BCMI_TSCF_GEN3_XGXS_RX_CTL5r_AMS_RX_TESTCLK_DIVf_SET
#define RX_CTL5r_AMS_RX_SPARE_91_90f_GET BCMI_TSCF_GEN3_XGXS_RX_CTL5r_AMS_RX_SPARE_91_90f_GET
#define RX_CTL5r_AMS_RX_SPARE_91_90f_SET BCMI_TSCF_GEN3_XGXS_RX_CTL5r_AMS_RX_SPARE_91_90f_SET
#define RX_CTL5r_AMS_RX_VGA3_RESCAL_MUXf_GET BCMI_TSCF_GEN3_XGXS_RX_CTL5r_AMS_RX_VGA3_RESCAL_MUXf_GET
#define RX_CTL5r_AMS_RX_VGA3_RESCAL_MUXf_SET BCMI_TSCF_GEN3_XGXS_RX_CTL5r_AMS_RX_VGA3_RESCAL_MUXf_SET
#define RX_CTL5r_AMS_RX_VGA2_RESCAL_MUXf_GET BCMI_TSCF_GEN3_XGXS_RX_CTL5r_AMS_RX_VGA2_RESCAL_MUXf_GET
#define RX_CTL5r_AMS_RX_VGA2_RESCAL_MUXf_SET BCMI_TSCF_GEN3_XGXS_RX_CTL5r_AMS_RX_VGA2_RESCAL_MUXf_SET
#define READ_RX_CTL5r BCMI_TSCF_GEN3_XGXS_READ_RX_CTL5r
#define WRITE_RX_CTL5r BCMI_TSCF_GEN3_XGXS_WRITE_RX_CTL5r
#define MODIFY_RX_CTL5r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_CTL5r
#define READLN_RX_CTL5r BCMI_TSCF_GEN3_XGXS_READLN_RX_CTL5r
#define WRITELN_RX_CTL5r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_CTL5r
#define WRITEALL_RX_CTL5r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_CTL5r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_CTL5r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_CTL6
 * BLOCKS:   AMS_RX
 * REGADDR:  0xd0c6
 * DEVAD:    1
 * DESC:     AMS RX CONTROL_6
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_RX_PEAKING_FILTER_RESCAL_MUX peaking filter rescal mux- (force, ctrl[3:1]) -rescal override amsbus ctrl_out  99:96
 *     AMS_RX_OFFSET_CORRECTION_RESCAL_MUX offset correction rescal mux (force, ctrl[3:0]) - rescal override amsbus ctrl_out  103:100
 *     AMS_RX_SPARE_111_104 ams rx reserved[111:104] amsbus ctrl_out  111:104
 */
#define BCMI_TSCF_GEN3_XGXS_RX_CTL6r (0x0001d0c6 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_CTL6r_SIZE 4

/*
 * This structure should be used to declare and program RX_CTL6.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_CTL6r_s {
	uint32_t v[1];
	uint32_t rx_ctl6[1];
	uint32_t _rx_ctl6;
} BCMI_TSCF_GEN3_XGXS_RX_CTL6r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_CTL6r_CLR(r) (r).rx_ctl6[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_CTL6r_SET(r,d) (r).rx_ctl6[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_CTL6r_GET(r) (r).rx_ctl6[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_CTL6r_AMS_RX_SPARE_111_104f_GET(r) ((((r).rx_ctl6[0]) >> 8) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL6r_AMS_RX_SPARE_111_104f_SET(r,f) (r).rx_ctl6[0]=(((r).rx_ctl6[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_RX_CTL6r_AMS_RX_OFFSET_CORRECTION_RESCAL_MUXf_GET(r) ((((r).rx_ctl6[0]) >> 4) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL6r_AMS_RX_OFFSET_CORRECTION_RESCAL_MUXf_SET(r,f) (r).rx_ctl6[0]=(((r).rx_ctl6[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4)) | (15 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_RX_CTL6r_AMS_RX_PEAKING_FILTER_RESCAL_MUXf_GET(r) (((r).rx_ctl6[0]) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL6r_AMS_RX_PEAKING_FILTER_RESCAL_MUXf_SET(r,f) (r).rx_ctl6[0]=(((r).rx_ctl6[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access RX_CTL6.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_CTL6r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL6r,(_r._rx_ctl6))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_CTL6r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL6r,(_r._rx_ctl6)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_CTL6r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL6r,(_r._rx_ctl6))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_CTL6r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL6r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_ctl6))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_CTL6r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL6r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_ctl6))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_CTL6r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL6r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_ctl6))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_CTL6r BCMI_TSCF_GEN3_XGXS_RX_CTL6r
#define RX_CTL6r_SIZE BCMI_TSCF_GEN3_XGXS_RX_CTL6r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_CTL6r_t RX_CTL6r_t;
#define RX_CTL6r_CLR BCMI_TSCF_GEN3_XGXS_RX_CTL6r_CLR
#define RX_CTL6r_SET BCMI_TSCF_GEN3_XGXS_RX_CTL6r_SET
#define RX_CTL6r_GET BCMI_TSCF_GEN3_XGXS_RX_CTL6r_GET
#define RX_CTL6r_AMS_RX_SPARE_111_104f_GET BCMI_TSCF_GEN3_XGXS_RX_CTL6r_AMS_RX_SPARE_111_104f_GET
#define RX_CTL6r_AMS_RX_SPARE_111_104f_SET BCMI_TSCF_GEN3_XGXS_RX_CTL6r_AMS_RX_SPARE_111_104f_SET
#define RX_CTL6r_AMS_RX_OFFSET_CORRECTION_RESCAL_MUXf_GET BCMI_TSCF_GEN3_XGXS_RX_CTL6r_AMS_RX_OFFSET_CORRECTION_RESCAL_MUXf_GET
#define RX_CTL6r_AMS_RX_OFFSET_CORRECTION_RESCAL_MUXf_SET BCMI_TSCF_GEN3_XGXS_RX_CTL6r_AMS_RX_OFFSET_CORRECTION_RESCAL_MUXf_SET
#define RX_CTL6r_AMS_RX_PEAKING_FILTER_RESCAL_MUXf_GET BCMI_TSCF_GEN3_XGXS_RX_CTL6r_AMS_RX_PEAKING_FILTER_RESCAL_MUXf_GET
#define RX_CTL6r_AMS_RX_PEAKING_FILTER_RESCAL_MUXf_SET BCMI_TSCF_GEN3_XGXS_RX_CTL6r_AMS_RX_PEAKING_FILTER_RESCAL_MUXf_SET
#define READ_RX_CTL6r BCMI_TSCF_GEN3_XGXS_READ_RX_CTL6r
#define WRITE_RX_CTL6r BCMI_TSCF_GEN3_XGXS_WRITE_RX_CTL6r
#define MODIFY_RX_CTL6r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_CTL6r
#define READLN_RX_CTL6r BCMI_TSCF_GEN3_XGXS_READLN_RX_CTL6r
#define WRITELN_RX_CTL6r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_CTL6r
#define WRITEALL_RX_CTL6r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_CTL6r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_CTL6r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_CTL7
 * BLOCKS:   AMS_RX
 * REGADDR:  0xd0c7
 * DEVAD:    1
 * DESC:     AMS RX CONTROL_7
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_RX_DC_OFFSET dc_offset amsbus ctrl_out  118:112
 *     AMS_RX_FORCE_DC_OFFSET enables override using register bits amsbus ctrl_out  119:119
 *     AMS_RX_DC_OFFSET_RANGE dc_offset range, 2x amsbus ctrl_out  120:120
 *     AMS_RX_RX_OFFSET_PD pwrdn AFE offset cancellation DAC amsbus ctrl_out  121:121
 *     AMS_RX_SHORT_VGA_OUTPUT used for slicer calibration amsbus ctrl_out  122:122
 *     AMS_RX_SPARE_123 ams rx reserved [123] amsbus ctrl_out  123:123
 *     AMS_RX_VGA_LOW_GAIN extends low gain range by ~ -4dB per stage amsbus ctrl_out  125:124
 *     AMS_RX_VGA_STEP_MODE stage sequential. See AMS amsbus ctrl_out  127:126
 */
#define BCMI_TSCF_GEN3_XGXS_RX_CTL7r (0x0001d0c7 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_CTL7r_SIZE 4

/*
 * This structure should be used to declare and program RX_CTL7.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_CTL7r_s {
	uint32_t v[1];
	uint32_t rx_ctl7[1];
	uint32_t _rx_ctl7;
} BCMI_TSCF_GEN3_XGXS_RX_CTL7r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_CTL7r_CLR(r) (r).rx_ctl7[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_CTL7r_SET(r,d) (r).rx_ctl7[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_CTL7r_GET(r) (r).rx_ctl7[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_CTL7r_AMS_RX_VGA_STEP_MODEf_GET(r) ((((r).rx_ctl7[0]) >> 14) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL7r_AMS_RX_VGA_STEP_MODEf_SET(r,f) (r).rx_ctl7[0]=(((r).rx_ctl7[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_RX_CTL7r_AMS_RX_VGA_LOW_GAINf_GET(r) ((((r).rx_ctl7[0]) >> 12) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL7r_AMS_RX_VGA_LOW_GAINf_SET(r,f) (r).rx_ctl7[0]=(((r).rx_ctl7[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12)) | (3 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_RX_CTL7r_AMS_RX_SPARE_123f_GET(r) ((((r).rx_ctl7[0]) >> 11) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL7r_AMS_RX_SPARE_123f_SET(r,f) (r).rx_ctl7[0]=(((r).rx_ctl7[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_RX_CTL7r_AMS_RX_SHORT_VGA_OUTPUTf_GET(r) ((((r).rx_ctl7[0]) >> 10) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL7r_AMS_RX_SHORT_VGA_OUTPUTf_SET(r,f) (r).rx_ctl7[0]=(((r).rx_ctl7[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_RX_CTL7r_AMS_RX_RX_OFFSET_PDf_GET(r) ((((r).rx_ctl7[0]) >> 9) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL7r_AMS_RX_RX_OFFSET_PDf_SET(r,f) (r).rx_ctl7[0]=(((r).rx_ctl7[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_RX_CTL7r_AMS_RX_DC_OFFSET_RANGEf_GET(r) ((((r).rx_ctl7[0]) >> 8) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL7r_AMS_RX_DC_OFFSET_RANGEf_SET(r,f) (r).rx_ctl7[0]=(((r).rx_ctl7[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_RX_CTL7r_AMS_RX_FORCE_DC_OFFSETf_GET(r) ((((r).rx_ctl7[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL7r_AMS_RX_FORCE_DC_OFFSETf_SET(r,f) (r).rx_ctl7[0]=(((r).rx_ctl7[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_RX_CTL7r_AMS_RX_DC_OFFSETf_GET(r) (((r).rx_ctl7[0]) & 0x7f)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL7r_AMS_RX_DC_OFFSETf_SET(r,f) (r).rx_ctl7[0]=(((r).rx_ctl7[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f)) | (0x7f << 16)

/*
 * These macros can be used to access RX_CTL7.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_CTL7r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL7r,(_r._rx_ctl7))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_CTL7r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL7r,(_r._rx_ctl7)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_CTL7r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL7r,(_r._rx_ctl7))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_CTL7r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL7r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_ctl7))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_CTL7r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL7r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_ctl7))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_CTL7r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL7r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_ctl7))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_CTL7r BCMI_TSCF_GEN3_XGXS_RX_CTL7r
#define RX_CTL7r_SIZE BCMI_TSCF_GEN3_XGXS_RX_CTL7r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_CTL7r_t RX_CTL7r_t;
#define RX_CTL7r_CLR BCMI_TSCF_GEN3_XGXS_RX_CTL7r_CLR
#define RX_CTL7r_SET BCMI_TSCF_GEN3_XGXS_RX_CTL7r_SET
#define RX_CTL7r_GET BCMI_TSCF_GEN3_XGXS_RX_CTL7r_GET
#define RX_CTL7r_AMS_RX_VGA_STEP_MODEf_GET BCMI_TSCF_GEN3_XGXS_RX_CTL7r_AMS_RX_VGA_STEP_MODEf_GET
#define RX_CTL7r_AMS_RX_VGA_STEP_MODEf_SET BCMI_TSCF_GEN3_XGXS_RX_CTL7r_AMS_RX_VGA_STEP_MODEf_SET
#define RX_CTL7r_AMS_RX_VGA_LOW_GAINf_GET BCMI_TSCF_GEN3_XGXS_RX_CTL7r_AMS_RX_VGA_LOW_GAINf_GET
#define RX_CTL7r_AMS_RX_VGA_LOW_GAINf_SET BCMI_TSCF_GEN3_XGXS_RX_CTL7r_AMS_RX_VGA_LOW_GAINf_SET
#define RX_CTL7r_AMS_RX_SPARE_123f_GET BCMI_TSCF_GEN3_XGXS_RX_CTL7r_AMS_RX_SPARE_123f_GET
#define RX_CTL7r_AMS_RX_SPARE_123f_SET BCMI_TSCF_GEN3_XGXS_RX_CTL7r_AMS_RX_SPARE_123f_SET
#define RX_CTL7r_AMS_RX_SHORT_VGA_OUTPUTf_GET BCMI_TSCF_GEN3_XGXS_RX_CTL7r_AMS_RX_SHORT_VGA_OUTPUTf_GET
#define RX_CTL7r_AMS_RX_SHORT_VGA_OUTPUTf_SET BCMI_TSCF_GEN3_XGXS_RX_CTL7r_AMS_RX_SHORT_VGA_OUTPUTf_SET
#define RX_CTL7r_AMS_RX_RX_OFFSET_PDf_GET BCMI_TSCF_GEN3_XGXS_RX_CTL7r_AMS_RX_RX_OFFSET_PDf_GET
#define RX_CTL7r_AMS_RX_RX_OFFSET_PDf_SET BCMI_TSCF_GEN3_XGXS_RX_CTL7r_AMS_RX_RX_OFFSET_PDf_SET
#define RX_CTL7r_AMS_RX_DC_OFFSET_RANGEf_GET BCMI_TSCF_GEN3_XGXS_RX_CTL7r_AMS_RX_DC_OFFSET_RANGEf_GET
#define RX_CTL7r_AMS_RX_DC_OFFSET_RANGEf_SET BCMI_TSCF_GEN3_XGXS_RX_CTL7r_AMS_RX_DC_OFFSET_RANGEf_SET
#define RX_CTL7r_AMS_RX_FORCE_DC_OFFSETf_GET BCMI_TSCF_GEN3_XGXS_RX_CTL7r_AMS_RX_FORCE_DC_OFFSETf_GET
#define RX_CTL7r_AMS_RX_FORCE_DC_OFFSETf_SET BCMI_TSCF_GEN3_XGXS_RX_CTL7r_AMS_RX_FORCE_DC_OFFSETf_SET
#define RX_CTL7r_AMS_RX_DC_OFFSETf_GET BCMI_TSCF_GEN3_XGXS_RX_CTL7r_AMS_RX_DC_OFFSETf_GET
#define RX_CTL7r_AMS_RX_DC_OFFSETf_SET BCMI_TSCF_GEN3_XGXS_RX_CTL7r_AMS_RX_DC_OFFSETf_SET
#define READ_RX_CTL7r BCMI_TSCF_GEN3_XGXS_READ_RX_CTL7r
#define WRITE_RX_CTL7r BCMI_TSCF_GEN3_XGXS_WRITE_RX_CTL7r
#define MODIFY_RX_CTL7r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_CTL7r
#define READLN_RX_CTL7r BCMI_TSCF_GEN3_XGXS_READLN_RX_CTL7r
#define WRITELN_RX_CTL7r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_CTL7r
#define WRITEALL_RX_CTL7r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_CTL7r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_CTL7r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_CTL8
 * BLOCKS:   AMS_RX
 * REGADDR:  0xd0c8
 * DEVAD:    1
 * DESC:     AMS RX CONTROL_8
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_RX_DAC4CK_LMS dac4ck_lms amsbus ctrl_out  133:128
 *     AMS_RX_SPARE_135_134 ams rx reserved[135:134] amsbus ctrl_out  135:134DFT_MUX
 *     AMS_RX_DAC4CK_PHS dac4ck_phs amsbus ctrl_out  141:136
 *     AMS_RX_SPARE_143_142 ams rx reserved[143:142] amsbus ctrl_out  143:142
 */
#define BCMI_TSCF_GEN3_XGXS_RX_CTL8r (0x0001d0c8 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_CTL8r_SIZE 4

/*
 * This structure should be used to declare and program RX_CTL8.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_CTL8r_s {
	uint32_t v[1];
	uint32_t rx_ctl8[1];
	uint32_t _rx_ctl8;
} BCMI_TSCF_GEN3_XGXS_RX_CTL8r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_CTL8r_CLR(r) (r).rx_ctl8[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_CTL8r_SET(r,d) (r).rx_ctl8[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_CTL8r_GET(r) (r).rx_ctl8[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_CTL8r_AMS_RX_SPARE_143_142f_GET(r) ((((r).rx_ctl8[0]) >> 14) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL8r_AMS_RX_SPARE_143_142f_SET(r,f) (r).rx_ctl8[0]=(((r).rx_ctl8[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_RX_CTL8r_AMS_RX_DAC4CK_PHSf_GET(r) ((((r).rx_ctl8[0]) >> 8) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL8r_AMS_RX_DAC4CK_PHSf_SET(r,f) (r).rx_ctl8[0]=(((r).rx_ctl8[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8)) | (63 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_RX_CTL8r_AMS_RX_SPARE_135_134f_GET(r) ((((r).rx_ctl8[0]) >> 6) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL8r_AMS_RX_SPARE_135_134f_SET(r,f) (r).rx_ctl8[0]=(((r).rx_ctl8[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6)) | (3 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_RX_CTL8r_AMS_RX_DAC4CK_LMSf_GET(r) (((r).rx_ctl8[0]) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL8r_AMS_RX_DAC4CK_LMSf_SET(r,f) (r).rx_ctl8[0]=(((r).rx_ctl8[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access RX_CTL8.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_CTL8r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL8r,(_r._rx_ctl8))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_CTL8r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL8r,(_r._rx_ctl8)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_CTL8r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL8r,(_r._rx_ctl8))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_CTL8r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL8r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_ctl8))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_CTL8r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL8r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_ctl8))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_CTL8r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL8r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_ctl8))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_CTL8r BCMI_TSCF_GEN3_XGXS_RX_CTL8r
#define RX_CTL8r_SIZE BCMI_TSCF_GEN3_XGXS_RX_CTL8r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_CTL8r_t RX_CTL8r_t;
#define RX_CTL8r_CLR BCMI_TSCF_GEN3_XGXS_RX_CTL8r_CLR
#define RX_CTL8r_SET BCMI_TSCF_GEN3_XGXS_RX_CTL8r_SET
#define RX_CTL8r_GET BCMI_TSCF_GEN3_XGXS_RX_CTL8r_GET
#define RX_CTL8r_AMS_RX_SPARE_143_142f_GET BCMI_TSCF_GEN3_XGXS_RX_CTL8r_AMS_RX_SPARE_143_142f_GET
#define RX_CTL8r_AMS_RX_SPARE_143_142f_SET BCMI_TSCF_GEN3_XGXS_RX_CTL8r_AMS_RX_SPARE_143_142f_SET
#define RX_CTL8r_AMS_RX_DAC4CK_PHSf_GET BCMI_TSCF_GEN3_XGXS_RX_CTL8r_AMS_RX_DAC4CK_PHSf_GET
#define RX_CTL8r_AMS_RX_DAC4CK_PHSf_SET BCMI_TSCF_GEN3_XGXS_RX_CTL8r_AMS_RX_DAC4CK_PHSf_SET
#define RX_CTL8r_AMS_RX_SPARE_135_134f_GET BCMI_TSCF_GEN3_XGXS_RX_CTL8r_AMS_RX_SPARE_135_134f_GET
#define RX_CTL8r_AMS_RX_SPARE_135_134f_SET BCMI_TSCF_GEN3_XGXS_RX_CTL8r_AMS_RX_SPARE_135_134f_SET
#define RX_CTL8r_AMS_RX_DAC4CK_LMSf_GET BCMI_TSCF_GEN3_XGXS_RX_CTL8r_AMS_RX_DAC4CK_LMSf_GET
#define RX_CTL8r_AMS_RX_DAC4CK_LMSf_SET BCMI_TSCF_GEN3_XGXS_RX_CTL8r_AMS_RX_DAC4CK_LMSf_SET
#define READ_RX_CTL8r BCMI_TSCF_GEN3_XGXS_READ_RX_CTL8r
#define WRITE_RX_CTL8r BCMI_TSCF_GEN3_XGXS_WRITE_RX_CTL8r
#define MODIFY_RX_CTL8r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_CTL8r
#define READLN_RX_CTL8r BCMI_TSCF_GEN3_XGXS_READLN_RX_CTL8r
#define WRITELN_RX_CTL8r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_CTL8r
#define WRITEALL_RX_CTL8r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_CTL8r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_CTL8r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_CTL9
 * BLOCKS:   AMS_RX
 * REGADDR:  0xd0c9
 * DEVAD:    1
 * DESC:     AMS RX CONTROL_9
 * RESETVAL: 0x300 (768)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_RX_DAC4CK_DAT dac4ck_dat amsbus ctrl_out  149:144DFT_MUX
 *     AMS_RX_SPARE_151_150 ams rx reserved[151:150] amsbus ctrl_out  151:150
 *     AMS_RX_CLK_BW_CTRL clk_bw_ctrl<1:0> for 15G to 28G amsbus ctrl_out  153:152DFT_MUX
 *     AMS_RX_EN_TAP9DELAY 0=less delay for 25-28G; 1=more delay for <25G amsbus ctrl_out  154:154
 *     AMS_RX_SEL_D2CLP 0=high power for 25-28g; 1=low power for <25G amsbus ctrl_out  155:155DFT_MUX
 *     AMS_RX_D2C_CLKBUF_IBIAS d2c and clock buffer ibias (max, mode, min) amsbus ctrl_out  158:156DFT_MUX
 *     AMS_RX_DATA12T_LL_EN enable 12t data and clk ouputs for LL mode amsbus ctrl_out  159:159
 */
#define BCMI_TSCF_GEN3_XGXS_RX_CTL9r (0x0001d0c9 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_CTL9r_SIZE 4

/*
 * This structure should be used to declare and program RX_CTL9.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_CTL9r_s {
	uint32_t v[1];
	uint32_t rx_ctl9[1];
	uint32_t _rx_ctl9;
} BCMI_TSCF_GEN3_XGXS_RX_CTL9r_t;

#define BCMI_TSCF_GEN3_XGXS_RX_CTL9r_CLR(r) (r).rx_ctl9[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_CTL9r_SET(r,d) (r).rx_ctl9[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_CTL9r_GET(r) (r).rx_ctl9[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_CTL9r_AMS_RX_DATA12T_LL_ENf_GET(r) ((((r).rx_ctl9[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL9r_AMS_RX_DATA12T_LL_ENf_SET(r,f) (r).rx_ctl9[0]=(((r).rx_ctl9[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_RX_CTL9r_AMS_RX_D2C_CLKBUF_IBIASf_GET(r) ((((r).rx_ctl9[0]) >> 12) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL9r_AMS_RX_D2C_CLKBUF_IBIASf_SET(r,f) (r).rx_ctl9[0]=(((r).rx_ctl9[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12)) | (7 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_RX_CTL9r_AMS_RX_SEL_D2CLPf_GET(r) ((((r).rx_ctl9[0]) >> 11) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL9r_AMS_RX_SEL_D2CLPf_SET(r,f) (r).rx_ctl9[0]=(((r).rx_ctl9[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_RX_CTL9r_AMS_RX_EN_TAP9DELAYf_GET(r) ((((r).rx_ctl9[0]) >> 10) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL9r_AMS_RX_EN_TAP9DELAYf_SET(r,f) (r).rx_ctl9[0]=(((r).rx_ctl9[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_RX_CTL9r_AMS_RX_CLK_BW_CTRLf_GET(r) ((((r).rx_ctl9[0]) >> 8) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL9r_AMS_RX_CLK_BW_CTRLf_SET(r,f) (r).rx_ctl9[0]=(((r).rx_ctl9[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_RX_CTL9r_AMS_RX_SPARE_151_150f_GET(r) ((((r).rx_ctl9[0]) >> 6) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL9r_AMS_RX_SPARE_151_150f_SET(r,f) (r).rx_ctl9[0]=(((r).rx_ctl9[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6)) | (3 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_RX_CTL9r_AMS_RX_DAC4CK_DATf_GET(r) (((r).rx_ctl9[0]) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_RX_CTL9r_AMS_RX_DAC4CK_DATf_SET(r,f) (r).rx_ctl9[0]=(((r).rx_ctl9[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access RX_CTL9.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_CTL9r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL9r,(_r._rx_ctl9))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_CTL9r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL9r,(_r._rx_ctl9)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_CTL9r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL9r,(_r._rx_ctl9))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_CTL9r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL9r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_ctl9))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_CTL9r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL9r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_ctl9))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_CTL9r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_CTL9r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_ctl9))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_CTL9r BCMI_TSCF_GEN3_XGXS_RX_CTL9r
#define RX_CTL9r_SIZE BCMI_TSCF_GEN3_XGXS_RX_CTL9r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_CTL9r_t RX_CTL9r_t;
#define RX_CTL9r_CLR BCMI_TSCF_GEN3_XGXS_RX_CTL9r_CLR
#define RX_CTL9r_SET BCMI_TSCF_GEN3_XGXS_RX_CTL9r_SET
#define RX_CTL9r_GET BCMI_TSCF_GEN3_XGXS_RX_CTL9r_GET
#define RX_CTL9r_AMS_RX_DATA12T_LL_ENf_GET BCMI_TSCF_GEN3_XGXS_RX_CTL9r_AMS_RX_DATA12T_LL_ENf_GET
#define RX_CTL9r_AMS_RX_DATA12T_LL_ENf_SET BCMI_TSCF_GEN3_XGXS_RX_CTL9r_AMS_RX_DATA12T_LL_ENf_SET
#define RX_CTL9r_AMS_RX_D2C_CLKBUF_IBIASf_GET BCMI_TSCF_GEN3_XGXS_RX_CTL9r_AMS_RX_D2C_CLKBUF_IBIASf_GET
#define RX_CTL9r_AMS_RX_D2C_CLKBUF_IBIASf_SET BCMI_TSCF_GEN3_XGXS_RX_CTL9r_AMS_RX_D2C_CLKBUF_IBIASf_SET
#define RX_CTL9r_AMS_RX_SEL_D2CLPf_GET BCMI_TSCF_GEN3_XGXS_RX_CTL9r_AMS_RX_SEL_D2CLPf_GET
#define RX_CTL9r_AMS_RX_SEL_D2CLPf_SET BCMI_TSCF_GEN3_XGXS_RX_CTL9r_AMS_RX_SEL_D2CLPf_SET
#define RX_CTL9r_AMS_RX_EN_TAP9DELAYf_GET BCMI_TSCF_GEN3_XGXS_RX_CTL9r_AMS_RX_EN_TAP9DELAYf_GET
#define RX_CTL9r_AMS_RX_EN_TAP9DELAYf_SET BCMI_TSCF_GEN3_XGXS_RX_CTL9r_AMS_RX_EN_TAP9DELAYf_SET
#define RX_CTL9r_AMS_RX_CLK_BW_CTRLf_GET BCMI_TSCF_GEN3_XGXS_RX_CTL9r_AMS_RX_CLK_BW_CTRLf_GET
#define RX_CTL9r_AMS_RX_CLK_BW_CTRLf_SET BCMI_TSCF_GEN3_XGXS_RX_CTL9r_AMS_RX_CLK_BW_CTRLf_SET
#define RX_CTL9r_AMS_RX_SPARE_151_150f_GET BCMI_TSCF_GEN3_XGXS_RX_CTL9r_AMS_RX_SPARE_151_150f_GET
#define RX_CTL9r_AMS_RX_SPARE_151_150f_SET BCMI_TSCF_GEN3_XGXS_RX_CTL9r_AMS_RX_SPARE_151_150f_SET
#define RX_CTL9r_AMS_RX_DAC4CK_DATf_GET BCMI_TSCF_GEN3_XGXS_RX_CTL9r_AMS_RX_DAC4CK_DATf_GET
#define RX_CTL9r_AMS_RX_DAC4CK_DATf_SET BCMI_TSCF_GEN3_XGXS_RX_CTL9r_AMS_RX_DAC4CK_DATf_SET
#define READ_RX_CTL9r BCMI_TSCF_GEN3_XGXS_READ_RX_CTL9r
#define WRITE_RX_CTL9r BCMI_TSCF_GEN3_XGXS_WRITE_RX_CTL9r
#define MODIFY_RX_CTL9r BCMI_TSCF_GEN3_XGXS_MODIFY_RX_CTL9r
#define READLN_RX_CTL9r BCMI_TSCF_GEN3_XGXS_READLN_RX_CTL9r
#define WRITELN_RX_CTL9r BCMI_TSCF_GEN3_XGXS_WRITELN_RX_CTL9r
#define WRITEALL_RX_CTL9r BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_CTL9r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_CTL9r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_STS
 * BLOCKS:   AMS_RX
 * REGADDR:  0xd0cb
 * DEVAD:    1
 * DESC:     AMS RX STATUS
 * RESETVAL: 0x8000 (32768)
 * ACCESS:   R/O
 * FIELDS:
 *     AMS_RX_VGA       Copy of VGA control vga_ctrl[4:0]
 *     AMS_RX_TAP1_DFE_GRAY Copy of tap1 dfe in gray code
 *     AMS_RX_PF        Copy of peaking filter control rx_pf_ctrl[3:0]
 *     AMS_RX_SIGDET    Signal Detect status
 */
#define BCMI_TSCF_GEN3_XGXS_RX_STSr (0x0001d0cb | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_STSr_SIZE 4

/*
 * This structure should be used to declare and program RX_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_STSr_s {
	uint32_t v[1];
	uint32_t rx_sts[1];
	uint32_t _rx_sts;
} BCMI_TSCF_GEN3_XGXS_RX_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_RX_STSr_CLR(r) (r).rx_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_STSr_SET(r,d) (r).rx_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_STSr_GET(r) (r).rx_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_STSr_AMS_RX_SIGDETf_GET(r) ((((r).rx_sts[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_STSr_AMS_RX_SIGDETf_SET(r,f) (r).rx_sts[0]=(((r).rx_sts[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_RX_STSr_AMS_RX_PFf_GET(r) ((((r).rx_sts[0]) >> 11) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_RX_STSr_AMS_RX_PFf_SET(r,f) (r).rx_sts[0]=(((r).rx_sts[0] & ~((uint32_t)0xf << 11)) | ((((uint32_t)f) & 0xf) << 11)) | (15 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_RX_STSr_AMS_RX_TAP1_DFE_GRAYf_GET(r) ((((r).rx_sts[0]) >> 5) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_RX_STSr_AMS_RX_TAP1_DFE_GRAYf_SET(r,f) (r).rx_sts[0]=(((r).rx_sts[0] & ~((uint32_t)0x3f << 5)) | ((((uint32_t)f) & 0x3f) << 5)) | (63 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_RX_STSr_AMS_RX_VGAf_GET(r) (((r).rx_sts[0]) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_RX_STSr_AMS_RX_VGAf_SET(r,f) (r).rx_sts[0]=(((r).rx_sts[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access RX_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_STSr,(_r._rx_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_STSr,(_r._rx_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_STSr,(_r._rx_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_STSr BCMI_TSCF_GEN3_XGXS_RX_STSr
#define RX_STSr_SIZE BCMI_TSCF_GEN3_XGXS_RX_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_STSr_t RX_STSr_t;
#define RX_STSr_CLR BCMI_TSCF_GEN3_XGXS_RX_STSr_CLR
#define RX_STSr_SET BCMI_TSCF_GEN3_XGXS_RX_STSr_SET
#define RX_STSr_GET BCMI_TSCF_GEN3_XGXS_RX_STSr_GET
#define RX_STSr_AMS_RX_SIGDETf_GET BCMI_TSCF_GEN3_XGXS_RX_STSr_AMS_RX_SIGDETf_GET
#define RX_STSr_AMS_RX_SIGDETf_SET BCMI_TSCF_GEN3_XGXS_RX_STSr_AMS_RX_SIGDETf_SET
#define RX_STSr_AMS_RX_PFf_GET BCMI_TSCF_GEN3_XGXS_RX_STSr_AMS_RX_PFf_GET
#define RX_STSr_AMS_RX_PFf_SET BCMI_TSCF_GEN3_XGXS_RX_STSr_AMS_RX_PFf_SET
#define RX_STSr_AMS_RX_TAP1_DFE_GRAYf_GET BCMI_TSCF_GEN3_XGXS_RX_STSr_AMS_RX_TAP1_DFE_GRAYf_GET
#define RX_STSr_AMS_RX_TAP1_DFE_GRAYf_SET BCMI_TSCF_GEN3_XGXS_RX_STSr_AMS_RX_TAP1_DFE_GRAYf_SET
#define RX_STSr_AMS_RX_VGAf_GET BCMI_TSCF_GEN3_XGXS_RX_STSr_AMS_RX_VGAf_GET
#define RX_STSr_AMS_RX_VGAf_SET BCMI_TSCF_GEN3_XGXS_RX_STSr_AMS_RX_VGAf_SET
#define READ_RX_STSr BCMI_TSCF_GEN3_XGXS_READ_RX_STSr
#define WRITE_RX_STSr BCMI_TSCF_GEN3_XGXS_WRITE_RX_STSr
#define MODIFY_RX_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_RX_STSr
#define READLN_RX_STSr BCMI_TSCF_GEN3_XGXS_READLN_RX_STSr
#define WRITELN_RX_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_RX_STSr
#define WRITEALL_RX_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TX_CTL0
 * BLOCKS:   AMS_TX
 * REGADDR:  0xd0d0
 * DEVAD:    1
 * DESC:     AMS TX CONTROL_0
 * RESETVAL: 0xc0 (192)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_TX_TXCLK_MUX NA. Use tx_pll_select or pll_select register fields from ckrst_ctrl regmap. 0=2T clks from PLL0; 1=2T clks from PLL1 amsbus ctrl_out  0:0
 *     AMS_TX_SPARE_3_1 AMS reserved[3:1] amsbus ctrl_out  3:1
 *     AMS_TX_TEST_DATA generates output pattern amsbus ctrl_out  5:4
 *     AMS_TX_TICKSEL   timing control of load signal at ana/dig interface amsbus ctrl_out  7:6
 *     AMS_TX_VDDR_BGB  bias mode control amsbus ctrl_out  8:8DFT_MUX
 *     AMS_TX_DCC_SEL   select DCC mode. 0=using DCC circuit. 1= signle ended amsbus ctrl_out  9:9DFT_MUX
 *     AMS_TX_DCC_DIS   disable DCC amsbus ctrl_out  10:10DFT_MUX
 *     AMS_TX_CAL_OFF   disable RESCAL[3:0], enable cal_aux[3:0] amsbus ctrl_out  11:11DFT_MUX
 *     AMS_TX_CAL_AUX   Rescal manual control when cal_off=1 amsbus ctrl_out  15:12DFT_MUX
 */
#define BCMI_TSCF_GEN3_XGXS_TX_CTL0r (0x0001d0d0 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TX_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program TX_CTL0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TX_CTL0r_s {
	uint32_t v[1];
	uint32_t tx_ctl0[1];
	uint32_t _tx_ctl0;
} BCMI_TSCF_GEN3_XGXS_TX_CTL0r_t;

#define BCMI_TSCF_GEN3_XGXS_TX_CTL0r_CLR(r) (r).tx_ctl0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TX_CTL0r_SET(r,d) (r).tx_ctl0[0] = d
#define BCMI_TSCF_GEN3_XGXS_TX_CTL0r_GET(r) (r).tx_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_CTL0r_AMS_TX_CAL_AUXf_GET(r) ((((r).tx_ctl0[0]) >> 12) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_TX_CTL0r_AMS_TX_CAL_AUXf_SET(r,f) (r).tx_ctl0[0]=(((r).tx_ctl0[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_TX_CTL0r_AMS_TX_CAL_OFFf_GET(r) ((((r).tx_ctl0[0]) >> 11) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_CTL0r_AMS_TX_CAL_OFFf_SET(r,f) (r).tx_ctl0[0]=(((r).tx_ctl0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_TX_CTL0r_AMS_TX_DCC_DISf_GET(r) ((((r).tx_ctl0[0]) >> 10) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_CTL0r_AMS_TX_DCC_DISf_SET(r,f) (r).tx_ctl0[0]=(((r).tx_ctl0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_TX_CTL0r_AMS_TX_DCC_SELf_GET(r) ((((r).tx_ctl0[0]) >> 9) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_CTL0r_AMS_TX_DCC_SELf_SET(r,f) (r).tx_ctl0[0]=(((r).tx_ctl0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_TX_CTL0r_AMS_TX_VDDR_BGBf_GET(r) ((((r).tx_ctl0[0]) >> 8) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_CTL0r_AMS_TX_VDDR_BGBf_SET(r,f) (r).tx_ctl0[0]=(((r).tx_ctl0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_TX_CTL0r_AMS_TX_TICKSELf_GET(r) ((((r).tx_ctl0[0]) >> 6) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_TX_CTL0r_AMS_TX_TICKSELf_SET(r,f) (r).tx_ctl0[0]=(((r).tx_ctl0[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6)) | (3 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_TX_CTL0r_AMS_TX_TEST_DATAf_GET(r) ((((r).tx_ctl0[0]) >> 4) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_TX_CTL0r_AMS_TX_TEST_DATAf_SET(r,f) (r).tx_ctl0[0]=(((r).tx_ctl0[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_TX_CTL0r_AMS_TX_SPARE_3_1f_GET(r) ((((r).tx_ctl0[0]) >> 1) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_TX_CTL0r_AMS_TX_SPARE_3_1f_SET(r,f) (r).tx_ctl0[0]=(((r).tx_ctl0[0] & ~((uint32_t)0x7 << 1)) | ((((uint32_t)f) & 0x7) << 1)) | (7 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_TX_CTL0r_AMS_TX_TXCLK_MUXf_GET(r) (((r).tx_ctl0[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_CTL0r_AMS_TX_TXCLK_MUXf_SET(r,f) (r).tx_ctl0[0]=(((r).tx_ctl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TX_CTL0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TX_CTL0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_CTL0r,(_r._tx_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TX_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_CTL0r,(_r._tx_ctl0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TX_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_CTL0r,(_r._tx_ctl0))
#define BCMI_TSCF_GEN3_XGXS_READLN_TX_CTL0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TX_CTL0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_ctl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_CTL0r BCMI_TSCF_GEN3_XGXS_TX_CTL0r
#define TX_CTL0r_SIZE BCMI_TSCF_GEN3_XGXS_TX_CTL0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TX_CTL0r_t TX_CTL0r_t;
#define TX_CTL0r_CLR BCMI_TSCF_GEN3_XGXS_TX_CTL0r_CLR
#define TX_CTL0r_SET BCMI_TSCF_GEN3_XGXS_TX_CTL0r_SET
#define TX_CTL0r_GET BCMI_TSCF_GEN3_XGXS_TX_CTL0r_GET
#define TX_CTL0r_AMS_TX_CAL_AUXf_GET BCMI_TSCF_GEN3_XGXS_TX_CTL0r_AMS_TX_CAL_AUXf_GET
#define TX_CTL0r_AMS_TX_CAL_AUXf_SET BCMI_TSCF_GEN3_XGXS_TX_CTL0r_AMS_TX_CAL_AUXf_SET
#define TX_CTL0r_AMS_TX_CAL_OFFf_GET BCMI_TSCF_GEN3_XGXS_TX_CTL0r_AMS_TX_CAL_OFFf_GET
#define TX_CTL0r_AMS_TX_CAL_OFFf_SET BCMI_TSCF_GEN3_XGXS_TX_CTL0r_AMS_TX_CAL_OFFf_SET
#define TX_CTL0r_AMS_TX_DCC_DISf_GET BCMI_TSCF_GEN3_XGXS_TX_CTL0r_AMS_TX_DCC_DISf_GET
#define TX_CTL0r_AMS_TX_DCC_DISf_SET BCMI_TSCF_GEN3_XGXS_TX_CTL0r_AMS_TX_DCC_DISf_SET
#define TX_CTL0r_AMS_TX_DCC_SELf_GET BCMI_TSCF_GEN3_XGXS_TX_CTL0r_AMS_TX_DCC_SELf_GET
#define TX_CTL0r_AMS_TX_DCC_SELf_SET BCMI_TSCF_GEN3_XGXS_TX_CTL0r_AMS_TX_DCC_SELf_SET
#define TX_CTL0r_AMS_TX_VDDR_BGBf_GET BCMI_TSCF_GEN3_XGXS_TX_CTL0r_AMS_TX_VDDR_BGBf_GET
#define TX_CTL0r_AMS_TX_VDDR_BGBf_SET BCMI_TSCF_GEN3_XGXS_TX_CTL0r_AMS_TX_VDDR_BGBf_SET
#define TX_CTL0r_AMS_TX_TICKSELf_GET BCMI_TSCF_GEN3_XGXS_TX_CTL0r_AMS_TX_TICKSELf_GET
#define TX_CTL0r_AMS_TX_TICKSELf_SET BCMI_TSCF_GEN3_XGXS_TX_CTL0r_AMS_TX_TICKSELf_SET
#define TX_CTL0r_AMS_TX_TEST_DATAf_GET BCMI_TSCF_GEN3_XGXS_TX_CTL0r_AMS_TX_TEST_DATAf_GET
#define TX_CTL0r_AMS_TX_TEST_DATAf_SET BCMI_TSCF_GEN3_XGXS_TX_CTL0r_AMS_TX_TEST_DATAf_SET
#define TX_CTL0r_AMS_TX_SPARE_3_1f_GET BCMI_TSCF_GEN3_XGXS_TX_CTL0r_AMS_TX_SPARE_3_1f_GET
#define TX_CTL0r_AMS_TX_SPARE_3_1f_SET BCMI_TSCF_GEN3_XGXS_TX_CTL0r_AMS_TX_SPARE_3_1f_SET
#define TX_CTL0r_AMS_TX_TXCLK_MUXf_GET BCMI_TSCF_GEN3_XGXS_TX_CTL0r_AMS_TX_TXCLK_MUXf_GET
#define TX_CTL0r_AMS_TX_TXCLK_MUXf_SET BCMI_TSCF_GEN3_XGXS_TX_CTL0r_AMS_TX_TXCLK_MUXf_SET
#define READ_TX_CTL0r BCMI_TSCF_GEN3_XGXS_READ_TX_CTL0r
#define WRITE_TX_CTL0r BCMI_TSCF_GEN3_XGXS_WRITE_TX_CTL0r
#define MODIFY_TX_CTL0r BCMI_TSCF_GEN3_XGXS_MODIFY_TX_CTL0r
#define READLN_TX_CTL0r BCMI_TSCF_GEN3_XGXS_READLN_TX_CTL0r
#define WRITELN_TX_CTL0r BCMI_TSCF_GEN3_XGXS_WRITELN_TX_CTL0r
#define WRITEALL_TX_CTL0r BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_CTL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TX_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TX_CTL1
 * BLOCKS:   AMS_TX
 * REGADDR:  0xd0d1
 * DEVAD:    1
 * DESC:     AMS TX CONTROL_1
 * RESETVAL: 0x2000 (8192)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_TX_IBIAS     master bias diode amsbus ctrl_out  18:16DFT_MUX
 *     AMS_TX_IPHINT    phase interpolator current control amsbus ctrl_out  21:19DFT_MUX
 *     AMS_TX_ICML      clock input buffer current control amsbus ctrl_out  24:22DFT_MUX
 *     AMS_TX_ILDO      LDO bias current control amsbus ctrl_out  27:25
 *     AMS_TX_LDO_VREF  adjusts internal driver supply voltage, scales output amplitute amsbus ctrl_out  29:28DFT_MUX
 *     AMS_TX_SEL_EMPH_MODE select emphasis mode. See AMS amsbus ctrl_out  30
 *     AMS_TX_CLK20_EN  enables the 20T clock. This clock is used in OS2 and OS4 modes and is not meant to be used in OS1 mode. amsbus ctrl_out  31DFT_MUX
 */
#define BCMI_TSCF_GEN3_XGXS_TX_CTL1r (0x0001d0d1 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TX_CTL1r_SIZE 4

/*
 * This structure should be used to declare and program TX_CTL1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TX_CTL1r_s {
	uint32_t v[1];
	uint32_t tx_ctl1[1];
	uint32_t _tx_ctl1;
} BCMI_TSCF_GEN3_XGXS_TX_CTL1r_t;

#define BCMI_TSCF_GEN3_XGXS_TX_CTL1r_CLR(r) (r).tx_ctl1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TX_CTL1r_SET(r,d) (r).tx_ctl1[0] = d
#define BCMI_TSCF_GEN3_XGXS_TX_CTL1r_GET(r) (r).tx_ctl1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_CTL1r_AMS_TX_CLK20_ENf_GET(r) ((((r).tx_ctl1[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_CTL1r_AMS_TX_CLK20_ENf_SET(r,f) (r).tx_ctl1[0]=(((r).tx_ctl1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_TX_CTL1r_AMS_TX_SEL_EMPH_MODEf_GET(r) ((((r).tx_ctl1[0]) >> 14) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_CTL1r_AMS_TX_SEL_EMPH_MODEf_SET(r,f) (r).tx_ctl1[0]=(((r).tx_ctl1[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_TX_CTL1r_AMS_TX_LDO_VREFf_GET(r) ((((r).tx_ctl1[0]) >> 12) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_TX_CTL1r_AMS_TX_LDO_VREFf_SET(r,f) (r).tx_ctl1[0]=(((r).tx_ctl1[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12)) | (3 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_TX_CTL1r_AMS_TX_ILDOf_GET(r) ((((r).tx_ctl1[0]) >> 9) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_TX_CTL1r_AMS_TX_ILDOf_SET(r,f) (r).tx_ctl1[0]=(((r).tx_ctl1[0] & ~((uint32_t)0x7 << 9)) | ((((uint32_t)f) & 0x7) << 9)) | (7 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_TX_CTL1r_AMS_TX_ICMLf_GET(r) ((((r).tx_ctl1[0]) >> 6) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_TX_CTL1r_AMS_TX_ICMLf_SET(r,f) (r).tx_ctl1[0]=(((r).tx_ctl1[0] & ~((uint32_t)0x7 << 6)) | ((((uint32_t)f) & 0x7) << 6)) | (7 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_TX_CTL1r_AMS_TX_IPHINTf_GET(r) ((((r).tx_ctl1[0]) >> 3) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_TX_CTL1r_AMS_TX_IPHINTf_SET(r,f) (r).tx_ctl1[0]=(((r).tx_ctl1[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3)) | (7 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_TX_CTL1r_AMS_TX_IBIASf_GET(r) (((r).tx_ctl1[0]) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_TX_CTL1r_AMS_TX_IBIASf_SET(r,f) (r).tx_ctl1[0]=(((r).tx_ctl1[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access TX_CTL1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TX_CTL1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_CTL1r,(_r._tx_ctl1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TX_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_CTL1r,(_r._tx_ctl1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TX_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_CTL1r,(_r._tx_ctl1))
#define BCMI_TSCF_GEN3_XGXS_READLN_TX_CTL1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_ctl1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TX_CTL1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_ctl1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_ctl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_CTL1r BCMI_TSCF_GEN3_XGXS_TX_CTL1r
#define TX_CTL1r_SIZE BCMI_TSCF_GEN3_XGXS_TX_CTL1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TX_CTL1r_t TX_CTL1r_t;
#define TX_CTL1r_CLR BCMI_TSCF_GEN3_XGXS_TX_CTL1r_CLR
#define TX_CTL1r_SET BCMI_TSCF_GEN3_XGXS_TX_CTL1r_SET
#define TX_CTL1r_GET BCMI_TSCF_GEN3_XGXS_TX_CTL1r_GET
#define TX_CTL1r_AMS_TX_CLK20_ENf_GET BCMI_TSCF_GEN3_XGXS_TX_CTL1r_AMS_TX_CLK20_ENf_GET
#define TX_CTL1r_AMS_TX_CLK20_ENf_SET BCMI_TSCF_GEN3_XGXS_TX_CTL1r_AMS_TX_CLK20_ENf_SET
#define TX_CTL1r_AMS_TX_SEL_EMPH_MODEf_GET BCMI_TSCF_GEN3_XGXS_TX_CTL1r_AMS_TX_SEL_EMPH_MODEf_GET
#define TX_CTL1r_AMS_TX_SEL_EMPH_MODEf_SET BCMI_TSCF_GEN3_XGXS_TX_CTL1r_AMS_TX_SEL_EMPH_MODEf_SET
#define TX_CTL1r_AMS_TX_LDO_VREFf_GET BCMI_TSCF_GEN3_XGXS_TX_CTL1r_AMS_TX_LDO_VREFf_GET
#define TX_CTL1r_AMS_TX_LDO_VREFf_SET BCMI_TSCF_GEN3_XGXS_TX_CTL1r_AMS_TX_LDO_VREFf_SET
#define TX_CTL1r_AMS_TX_ILDOf_GET BCMI_TSCF_GEN3_XGXS_TX_CTL1r_AMS_TX_ILDOf_GET
#define TX_CTL1r_AMS_TX_ILDOf_SET BCMI_TSCF_GEN3_XGXS_TX_CTL1r_AMS_TX_ILDOf_SET
#define TX_CTL1r_AMS_TX_ICMLf_GET BCMI_TSCF_GEN3_XGXS_TX_CTL1r_AMS_TX_ICMLf_GET
#define TX_CTL1r_AMS_TX_ICMLf_SET BCMI_TSCF_GEN3_XGXS_TX_CTL1r_AMS_TX_ICMLf_SET
#define TX_CTL1r_AMS_TX_IPHINTf_GET BCMI_TSCF_GEN3_XGXS_TX_CTL1r_AMS_TX_IPHINTf_GET
#define TX_CTL1r_AMS_TX_IPHINTf_SET BCMI_TSCF_GEN3_XGXS_TX_CTL1r_AMS_TX_IPHINTf_SET
#define TX_CTL1r_AMS_TX_IBIASf_GET BCMI_TSCF_GEN3_XGXS_TX_CTL1r_AMS_TX_IBIASf_GET
#define TX_CTL1r_AMS_TX_IBIASf_SET BCMI_TSCF_GEN3_XGXS_TX_CTL1r_AMS_TX_IBIASf_SET
#define READ_TX_CTL1r BCMI_TSCF_GEN3_XGXS_READ_TX_CTL1r
#define WRITE_TX_CTL1r BCMI_TSCF_GEN3_XGXS_WRITE_TX_CTL1r
#define MODIFY_TX_CTL1r BCMI_TSCF_GEN3_XGXS_MODIFY_TX_CTL1r
#define READLN_TX_CTL1r BCMI_TSCF_GEN3_XGXS_READLN_TX_CTL1r
#define WRITELN_TX_CTL1r BCMI_TSCF_GEN3_XGXS_WRITELN_TX_CTL1r
#define WRITEALL_TX_CTL1r BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_CTL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TX_CTL1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TX_CTL2
 * BLOCKS:   AMS_TX
 * REGADDR:  0xd0d2
 * DEVAD:    1
 * DESC:     AMS TX CONTROL_2
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_TX_AMP_CTL   see AMS amsbus ctrl_out  35:32DFT_MUX
 *     AMS_TX_POST3_COEF Donot use. ( driven by hardware, please see txfir_post3/txfir_post3_offset/txfir_post3_adjusted register fields) amsbus ctrl_out  38:36EXT_MUX=afe_tx_post3_coef[2:0]
 *     AMS_TX_SIGN_POST3 Donot use. ( driven by hardware, please see txfir_post3/txfir_post3_offset/txfir_post3_adjusted register fields) amsbus ctrl_out  39:39EXT_MUX=afe_tx_sign_post3
 *     AMS_TX_POST2_COEF Donot use. ( driven by hardware, please see txfir_post2/txfir_post2_offset/txfir_post2_adjusted register fields) amsbus ctrl_out  43:40EXT_MUX=afe_tx_post2_coef[3:0]
 *     AMS_TX_SIGN_POST2 Donot use. ( driven by hardware, please see txfir_post2/txfir_post2_offset/txfir_post2_adjusted register fields) amsbus ctrl_out  44:44EXT_MUX=afe_tx_sign_post2
 *     AMS_TX_DRIVER_MODE see AMS amsbus ctrl_out  46:45
 *     AMS_TX_ELEC_IDLE_AUX force electrical idle mode amsbus ctrl_out  47:47DFT_MUX
 */
#define BCMI_TSCF_GEN3_XGXS_TX_CTL2r (0x0001d0d2 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TX_CTL2r_SIZE 4

/*
 * This structure should be used to declare and program TX_CTL2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TX_CTL2r_s {
	uint32_t v[1];
	uint32_t tx_ctl2[1];
	uint32_t _tx_ctl2;
} BCMI_TSCF_GEN3_XGXS_TX_CTL2r_t;

#define BCMI_TSCF_GEN3_XGXS_TX_CTL2r_CLR(r) (r).tx_ctl2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TX_CTL2r_SET(r,d) (r).tx_ctl2[0] = d
#define BCMI_TSCF_GEN3_XGXS_TX_CTL2r_GET(r) (r).tx_ctl2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_CTL2r_AMS_TX_ELEC_IDLE_AUXf_GET(r) ((((r).tx_ctl2[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_CTL2r_AMS_TX_ELEC_IDLE_AUXf_SET(r,f) (r).tx_ctl2[0]=(((r).tx_ctl2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_TX_CTL2r_AMS_TX_DRIVER_MODEf_GET(r) ((((r).tx_ctl2[0]) >> 13) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_TX_CTL2r_AMS_TX_DRIVER_MODEf_SET(r,f) (r).tx_ctl2[0]=(((r).tx_ctl2[0] & ~((uint32_t)0x3 << 13)) | ((((uint32_t)f) & 0x3) << 13)) | (3 << (16 + 13))
#define BCMI_TSCF_GEN3_XGXS_TX_CTL2r_AMS_TX_SIGN_POST2f_GET(r) ((((r).tx_ctl2[0]) >> 12) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_CTL2r_AMS_TX_SIGN_POST2f_SET(r,f) (r).tx_ctl2[0]=(((r).tx_ctl2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_TX_CTL2r_AMS_TX_POST2_COEFf_GET(r) ((((r).tx_ctl2[0]) >> 8) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_TX_CTL2r_AMS_TX_POST2_COEFf_SET(r,f) (r).tx_ctl2[0]=(((r).tx_ctl2[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_TX_CTL2r_AMS_TX_SIGN_POST3f_GET(r) ((((r).tx_ctl2[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_CTL2r_AMS_TX_SIGN_POST3f_SET(r,f) (r).tx_ctl2[0]=(((r).tx_ctl2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_TX_CTL2r_AMS_TX_POST3_COEFf_GET(r) ((((r).tx_ctl2[0]) >> 4) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_TX_CTL2r_AMS_TX_POST3_COEFf_SET(r,f) (r).tx_ctl2[0]=(((r).tx_ctl2[0] & ~((uint32_t)0x7 << 4)) | ((((uint32_t)f) & 0x7) << 4)) | (7 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_TX_CTL2r_AMS_TX_AMP_CTLf_GET(r) (((r).tx_ctl2[0]) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_TX_CTL2r_AMS_TX_AMP_CTLf_SET(r,f) (r).tx_ctl2[0]=(((r).tx_ctl2[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access TX_CTL2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TX_CTL2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_CTL2r,(_r._tx_ctl2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TX_CTL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_CTL2r,(_r._tx_ctl2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TX_CTL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_CTL2r,(_r._tx_ctl2))
#define BCMI_TSCF_GEN3_XGXS_READLN_TX_CTL2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_ctl2))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TX_CTL2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_ctl2))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_CTL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_ctl2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_CTL2r BCMI_TSCF_GEN3_XGXS_TX_CTL2r
#define TX_CTL2r_SIZE BCMI_TSCF_GEN3_XGXS_TX_CTL2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TX_CTL2r_t TX_CTL2r_t;
#define TX_CTL2r_CLR BCMI_TSCF_GEN3_XGXS_TX_CTL2r_CLR
#define TX_CTL2r_SET BCMI_TSCF_GEN3_XGXS_TX_CTL2r_SET
#define TX_CTL2r_GET BCMI_TSCF_GEN3_XGXS_TX_CTL2r_GET
#define TX_CTL2r_AMS_TX_ELEC_IDLE_AUXf_GET BCMI_TSCF_GEN3_XGXS_TX_CTL2r_AMS_TX_ELEC_IDLE_AUXf_GET
#define TX_CTL2r_AMS_TX_ELEC_IDLE_AUXf_SET BCMI_TSCF_GEN3_XGXS_TX_CTL2r_AMS_TX_ELEC_IDLE_AUXf_SET
#define TX_CTL2r_AMS_TX_DRIVER_MODEf_GET BCMI_TSCF_GEN3_XGXS_TX_CTL2r_AMS_TX_DRIVER_MODEf_GET
#define TX_CTL2r_AMS_TX_DRIVER_MODEf_SET BCMI_TSCF_GEN3_XGXS_TX_CTL2r_AMS_TX_DRIVER_MODEf_SET
#define TX_CTL2r_AMS_TX_SIGN_POST2f_GET BCMI_TSCF_GEN3_XGXS_TX_CTL2r_AMS_TX_SIGN_POST2f_GET
#define TX_CTL2r_AMS_TX_SIGN_POST2f_SET BCMI_TSCF_GEN3_XGXS_TX_CTL2r_AMS_TX_SIGN_POST2f_SET
#define TX_CTL2r_AMS_TX_POST2_COEFf_GET BCMI_TSCF_GEN3_XGXS_TX_CTL2r_AMS_TX_POST2_COEFf_GET
#define TX_CTL2r_AMS_TX_POST2_COEFf_SET BCMI_TSCF_GEN3_XGXS_TX_CTL2r_AMS_TX_POST2_COEFf_SET
#define TX_CTL2r_AMS_TX_SIGN_POST3f_GET BCMI_TSCF_GEN3_XGXS_TX_CTL2r_AMS_TX_SIGN_POST3f_GET
#define TX_CTL2r_AMS_TX_SIGN_POST3f_SET BCMI_TSCF_GEN3_XGXS_TX_CTL2r_AMS_TX_SIGN_POST3f_SET
#define TX_CTL2r_AMS_TX_POST3_COEFf_GET BCMI_TSCF_GEN3_XGXS_TX_CTL2r_AMS_TX_POST3_COEFf_GET
#define TX_CTL2r_AMS_TX_POST3_COEFf_SET BCMI_TSCF_GEN3_XGXS_TX_CTL2r_AMS_TX_POST3_COEFf_SET
#define TX_CTL2r_AMS_TX_AMP_CTLf_GET BCMI_TSCF_GEN3_XGXS_TX_CTL2r_AMS_TX_AMP_CTLf_GET
#define TX_CTL2r_AMS_TX_AMP_CTLf_SET BCMI_TSCF_GEN3_XGXS_TX_CTL2r_AMS_TX_AMP_CTLf_SET
#define READ_TX_CTL2r BCMI_TSCF_GEN3_XGXS_READ_TX_CTL2r
#define WRITE_TX_CTL2r BCMI_TSCF_GEN3_XGXS_WRITE_TX_CTL2r
#define MODIFY_TX_CTL2r BCMI_TSCF_GEN3_XGXS_MODIFY_TX_CTL2r
#define READLN_TX_CTL2r BCMI_TSCF_GEN3_XGXS_READLN_TX_CTL2r
#define WRITELN_TX_CTL2r BCMI_TSCF_GEN3_XGXS_WRITELN_TX_CTL2r
#define WRITEALL_TX_CTL2r BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_CTL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TX_CTL2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TX_CTL3
 * BLOCKS:   AMS_TX
 * REGADDR:  0xd0d3
 * DEVAD:    1
 * DESC:     AMS TX CONTROL_3
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_TX_FIFO_DEPTH select the depth of the FIFO amsbus ctrl_out  50:48
 *     AMS_TX_SEL_FIFO_POL invert FIFO data polarity amsbus ctrl_out  51:51
 *     AMS_TX_PDET_MODE see AMS. amsbus ctrl_out  53:52
 *     AMS_TX_SEL_LL    select low latency input path in the serializer, driven by hardware LL auto select. amsbus ctrl_out  54:54EXT_MUX=afe_tx_sel_ll
 *     AMS_TX_SEL_TXMASTER select TX lane as master, only one TX lane can be set to master. amsbus ctrl_out  55:55
 *     AMS_TX_PDET_LL_CLK 0= TCA clk, 1= LL clk amsbus ctrl_out  56:56
 *     AMS_TX_SPARE_63_57 AMS reserved[63:57] amsbus ctrl_out  63:57
 */
#define BCMI_TSCF_GEN3_XGXS_TX_CTL3r (0x0001d0d3 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TX_CTL3r_SIZE 4

/*
 * This structure should be used to declare and program TX_CTL3.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TX_CTL3r_s {
	uint32_t v[1];
	uint32_t tx_ctl3[1];
	uint32_t _tx_ctl3;
} BCMI_TSCF_GEN3_XGXS_TX_CTL3r_t;

#define BCMI_TSCF_GEN3_XGXS_TX_CTL3r_CLR(r) (r).tx_ctl3[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TX_CTL3r_SET(r,d) (r).tx_ctl3[0] = d
#define BCMI_TSCF_GEN3_XGXS_TX_CTL3r_GET(r) (r).tx_ctl3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_CTL3r_AMS_TX_SPARE_63_57f_GET(r) ((((r).tx_ctl3[0]) >> 9) & 0x7f)
#define BCMI_TSCF_GEN3_XGXS_TX_CTL3r_AMS_TX_SPARE_63_57f_SET(r,f) (r).tx_ctl3[0]=(((r).tx_ctl3[0] & ~((uint32_t)0x7f << 9)) | ((((uint32_t)f) & 0x7f) << 9)) | (127 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_TX_CTL3r_AMS_TX_PDET_LL_CLKf_GET(r) ((((r).tx_ctl3[0]) >> 8) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_CTL3r_AMS_TX_PDET_LL_CLKf_SET(r,f) (r).tx_ctl3[0]=(((r).tx_ctl3[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_TX_CTL3r_AMS_TX_SEL_TXMASTERf_GET(r) ((((r).tx_ctl3[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_CTL3r_AMS_TX_SEL_TXMASTERf_SET(r,f) (r).tx_ctl3[0]=(((r).tx_ctl3[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_TX_CTL3r_AMS_TX_SEL_LLf_GET(r) ((((r).tx_ctl3[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_CTL3r_AMS_TX_SEL_LLf_SET(r,f) (r).tx_ctl3[0]=(((r).tx_ctl3[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_TX_CTL3r_AMS_TX_PDET_MODEf_GET(r) ((((r).tx_ctl3[0]) >> 4) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_TX_CTL3r_AMS_TX_PDET_MODEf_SET(r,f) (r).tx_ctl3[0]=(((r).tx_ctl3[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_TX_CTL3r_AMS_TX_SEL_FIFO_POLf_GET(r) ((((r).tx_ctl3[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_CTL3r_AMS_TX_SEL_FIFO_POLf_SET(r,f) (r).tx_ctl3[0]=(((r).tx_ctl3[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_TX_CTL3r_AMS_TX_FIFO_DEPTHf_GET(r) (((r).tx_ctl3[0]) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_TX_CTL3r_AMS_TX_FIFO_DEPTHf_SET(r,f) (r).tx_ctl3[0]=(((r).tx_ctl3[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access TX_CTL3.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TX_CTL3r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_CTL3r,(_r._tx_ctl3))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TX_CTL3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_CTL3r,(_r._tx_ctl3)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TX_CTL3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_CTL3r,(_r._tx_ctl3))
#define BCMI_TSCF_GEN3_XGXS_READLN_TX_CTL3r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_CTL3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_ctl3))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TX_CTL3r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_CTL3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_ctl3))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_CTL3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_CTL3r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_ctl3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_CTL3r BCMI_TSCF_GEN3_XGXS_TX_CTL3r
#define TX_CTL3r_SIZE BCMI_TSCF_GEN3_XGXS_TX_CTL3r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TX_CTL3r_t TX_CTL3r_t;
#define TX_CTL3r_CLR BCMI_TSCF_GEN3_XGXS_TX_CTL3r_CLR
#define TX_CTL3r_SET BCMI_TSCF_GEN3_XGXS_TX_CTL3r_SET
#define TX_CTL3r_GET BCMI_TSCF_GEN3_XGXS_TX_CTL3r_GET
#define TX_CTL3r_AMS_TX_SPARE_63_57f_GET BCMI_TSCF_GEN3_XGXS_TX_CTL3r_AMS_TX_SPARE_63_57f_GET
#define TX_CTL3r_AMS_TX_SPARE_63_57f_SET BCMI_TSCF_GEN3_XGXS_TX_CTL3r_AMS_TX_SPARE_63_57f_SET
#define TX_CTL3r_AMS_TX_PDET_LL_CLKf_GET BCMI_TSCF_GEN3_XGXS_TX_CTL3r_AMS_TX_PDET_LL_CLKf_GET
#define TX_CTL3r_AMS_TX_PDET_LL_CLKf_SET BCMI_TSCF_GEN3_XGXS_TX_CTL3r_AMS_TX_PDET_LL_CLKf_SET
#define TX_CTL3r_AMS_TX_SEL_TXMASTERf_GET BCMI_TSCF_GEN3_XGXS_TX_CTL3r_AMS_TX_SEL_TXMASTERf_GET
#define TX_CTL3r_AMS_TX_SEL_TXMASTERf_SET BCMI_TSCF_GEN3_XGXS_TX_CTL3r_AMS_TX_SEL_TXMASTERf_SET
#define TX_CTL3r_AMS_TX_SEL_LLf_GET BCMI_TSCF_GEN3_XGXS_TX_CTL3r_AMS_TX_SEL_LLf_GET
#define TX_CTL3r_AMS_TX_SEL_LLf_SET BCMI_TSCF_GEN3_XGXS_TX_CTL3r_AMS_TX_SEL_LLf_SET
#define TX_CTL3r_AMS_TX_PDET_MODEf_GET BCMI_TSCF_GEN3_XGXS_TX_CTL3r_AMS_TX_PDET_MODEf_GET
#define TX_CTL3r_AMS_TX_PDET_MODEf_SET BCMI_TSCF_GEN3_XGXS_TX_CTL3r_AMS_TX_PDET_MODEf_SET
#define TX_CTL3r_AMS_TX_SEL_FIFO_POLf_GET BCMI_TSCF_GEN3_XGXS_TX_CTL3r_AMS_TX_SEL_FIFO_POLf_GET
#define TX_CTL3r_AMS_TX_SEL_FIFO_POLf_SET BCMI_TSCF_GEN3_XGXS_TX_CTL3r_AMS_TX_SEL_FIFO_POLf_SET
#define TX_CTL3r_AMS_TX_FIFO_DEPTHf_GET BCMI_TSCF_GEN3_XGXS_TX_CTL3r_AMS_TX_FIFO_DEPTHf_GET
#define TX_CTL3r_AMS_TX_FIFO_DEPTHf_SET BCMI_TSCF_GEN3_XGXS_TX_CTL3r_AMS_TX_FIFO_DEPTHf_SET
#define READ_TX_CTL3r BCMI_TSCF_GEN3_XGXS_READ_TX_CTL3r
#define WRITE_TX_CTL3r BCMI_TSCF_GEN3_XGXS_WRITE_TX_CTL3r
#define MODIFY_TX_CTL3r BCMI_TSCF_GEN3_XGXS_MODIFY_TX_CTL3r
#define READLN_TX_CTL3r BCMI_TSCF_GEN3_XGXS_READLN_TX_CTL3r
#define WRITELN_TX_CTL3r BCMI_TSCF_GEN3_XGXS_WRITELN_TX_CTL3r
#define WRITEALL_TX_CTL3r BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_CTL3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TX_CTL3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TX_INTCTL
 * BLOCKS:   AMS_TX
 * REGADDR:  0xd0d8
 * DEVAD:    1
 * DESC:     INTERNAL TX CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AUTO_LL_SELPATH_TX_DIS 0= tx_disable or eee_alert_pattern, 1= use AMS bit
 */
#define BCMI_TSCF_GEN3_XGXS_TX_INTCTLr (0x0001d0d8 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TX_INTCTLr_SIZE 4

/*
 * This structure should be used to declare and program TX_INTCTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TX_INTCTLr_s {
	uint32_t v[1];
	uint32_t tx_intctl[1];
	uint32_t _tx_intctl;
} BCMI_TSCF_GEN3_XGXS_TX_INTCTLr_t;

#define BCMI_TSCF_GEN3_XGXS_TX_INTCTLr_CLR(r) (r).tx_intctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TX_INTCTLr_SET(r,d) (r).tx_intctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_TX_INTCTLr_GET(r) (r).tx_intctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_INTCTLr_AUTO_LL_SELPATH_TX_DISf_GET(r) (((r).tx_intctl[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_INTCTLr_AUTO_LL_SELPATH_TX_DISf_SET(r,f) (r).tx_intctl[0]=(((r).tx_intctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TX_INTCTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TX_INTCTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_INTCTLr,(_r._tx_intctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TX_INTCTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_INTCTLr,(_r._tx_intctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TX_INTCTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_INTCTLr,(_r._tx_intctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_TX_INTCTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_INTCTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_intctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TX_INTCTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_INTCTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_intctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_INTCTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_INTCTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_intctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_INTCTLr BCMI_TSCF_GEN3_XGXS_TX_INTCTLr
#define TX_INTCTLr_SIZE BCMI_TSCF_GEN3_XGXS_TX_INTCTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TX_INTCTLr_t TX_INTCTLr_t;
#define TX_INTCTLr_CLR BCMI_TSCF_GEN3_XGXS_TX_INTCTLr_CLR
#define TX_INTCTLr_SET BCMI_TSCF_GEN3_XGXS_TX_INTCTLr_SET
#define TX_INTCTLr_GET BCMI_TSCF_GEN3_XGXS_TX_INTCTLr_GET
#define TX_INTCTLr_AUTO_LL_SELPATH_TX_DISf_GET BCMI_TSCF_GEN3_XGXS_TX_INTCTLr_AUTO_LL_SELPATH_TX_DISf_GET
#define TX_INTCTLr_AUTO_LL_SELPATH_TX_DISf_SET BCMI_TSCF_GEN3_XGXS_TX_INTCTLr_AUTO_LL_SELPATH_TX_DISf_SET
#define READ_TX_INTCTLr BCMI_TSCF_GEN3_XGXS_READ_TX_INTCTLr
#define WRITE_TX_INTCTLr BCMI_TSCF_GEN3_XGXS_WRITE_TX_INTCTLr
#define MODIFY_TX_INTCTLr BCMI_TSCF_GEN3_XGXS_MODIFY_TX_INTCTLr
#define READLN_TX_INTCTLr BCMI_TSCF_GEN3_XGXS_READLN_TX_INTCTLr
#define WRITELN_TX_INTCTLr BCMI_TSCF_GEN3_XGXS_WRITELN_TX_INTCTLr
#define WRITEALL_TX_INTCTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_INTCTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TX_INTCTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TX_STS
 * BLOCKS:   AMS_TX
 * REGADDR:  0xd0d9
 * DEVAD:    1
 * DESC:     AMS TX STATUS
 * RESETVAL: 0xa0 (160)
 * ACCESS:   R/O
 * FIELDS:
 *     AMS_TX_VERSION_ID AMS version ID. Used to track the core version.
 *     AMS_TX_ANA_RESCAL Copy of ana_rescal bus. Control cod efor global resistor calibration. See AMS for more details.
 *     AMS_TX_DRV_HV_DISABLE Copy of of tx_drv_hv_disable. By default, assume high voltage driver (HVD) mode and 1.25V
 *     AMS_TX_SPARE_STS_13 Reserved bit.
 *     AMS_TX_LANE_ID   TX Lane ID
 */
#define BCMI_TSCF_GEN3_XGXS_TX_STSr (0x0001d0d9 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TX_STSr_SIZE 4

/*
 * This structure should be used to declare and program TX_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TX_STSr_s {
	uint32_t v[1];
	uint32_t tx_sts[1];
	uint32_t _tx_sts;
} BCMI_TSCF_GEN3_XGXS_TX_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_TX_STSr_CLR(r) (r).tx_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TX_STSr_SET(r,d) (r).tx_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_TX_STSr_GET(r) (r).tx_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_STSr_AMS_TX_LANE_IDf_GET(r) ((((r).tx_sts[0]) >> 14) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_TX_STSr_AMS_TX_LANE_IDf_SET(r,f) (r).tx_sts[0]=(((r).tx_sts[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_TX_STSr_AMS_TX_SPARE_STS_13f_GET(r) ((((r).tx_sts[0]) >> 13) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_STSr_AMS_TX_SPARE_STS_13f_SET(r,f) (r).tx_sts[0]=(((r).tx_sts[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_GEN3_XGXS_TX_STSr_AMS_TX_DRV_HV_DISABLEf_GET(r) ((((r).tx_sts[0]) >> 12) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_STSr_AMS_TX_DRV_HV_DISABLEf_SET(r,f) (r).tx_sts[0]=(((r).tx_sts[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_TX_STSr_AMS_TX_ANA_RESCALf_GET(r) ((((r).tx_sts[0]) >> 8) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_TX_STSr_AMS_TX_ANA_RESCALf_SET(r,f) (r).tx_sts[0]=(((r).tx_sts[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_TX_STSr_AMS_TX_VERSION_IDf_GET(r) (((r).tx_sts[0]) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_TX_STSr_AMS_TX_VERSION_IDf_SET(r,f) (r).tx_sts[0]=(((r).tx_sts[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access TX_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TX_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_STSr,(_r._tx_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TX_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_STSr,(_r._tx_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TX_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_STSr,(_r._tx_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_TX_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TX_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_STSr BCMI_TSCF_GEN3_XGXS_TX_STSr
#define TX_STSr_SIZE BCMI_TSCF_GEN3_XGXS_TX_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TX_STSr_t TX_STSr_t;
#define TX_STSr_CLR BCMI_TSCF_GEN3_XGXS_TX_STSr_CLR
#define TX_STSr_SET BCMI_TSCF_GEN3_XGXS_TX_STSr_SET
#define TX_STSr_GET BCMI_TSCF_GEN3_XGXS_TX_STSr_GET
#define TX_STSr_AMS_TX_LANE_IDf_GET BCMI_TSCF_GEN3_XGXS_TX_STSr_AMS_TX_LANE_IDf_GET
#define TX_STSr_AMS_TX_LANE_IDf_SET BCMI_TSCF_GEN3_XGXS_TX_STSr_AMS_TX_LANE_IDf_SET
#define TX_STSr_AMS_TX_SPARE_STS_13f_GET BCMI_TSCF_GEN3_XGXS_TX_STSr_AMS_TX_SPARE_STS_13f_GET
#define TX_STSr_AMS_TX_SPARE_STS_13f_SET BCMI_TSCF_GEN3_XGXS_TX_STSr_AMS_TX_SPARE_STS_13f_SET
#define TX_STSr_AMS_TX_DRV_HV_DISABLEf_GET BCMI_TSCF_GEN3_XGXS_TX_STSr_AMS_TX_DRV_HV_DISABLEf_GET
#define TX_STSr_AMS_TX_DRV_HV_DISABLEf_SET BCMI_TSCF_GEN3_XGXS_TX_STSr_AMS_TX_DRV_HV_DISABLEf_SET
#define TX_STSr_AMS_TX_ANA_RESCALf_GET BCMI_TSCF_GEN3_XGXS_TX_STSr_AMS_TX_ANA_RESCALf_GET
#define TX_STSr_AMS_TX_ANA_RESCALf_SET BCMI_TSCF_GEN3_XGXS_TX_STSr_AMS_TX_ANA_RESCALf_SET
#define TX_STSr_AMS_TX_VERSION_IDf_GET BCMI_TSCF_GEN3_XGXS_TX_STSr_AMS_TX_VERSION_IDf_GET
#define TX_STSr_AMS_TX_VERSION_IDf_SET BCMI_TSCF_GEN3_XGXS_TX_STSr_AMS_TX_VERSION_IDf_SET
#define READ_TX_STSr BCMI_TSCF_GEN3_XGXS_READ_TX_STSr
#define WRITE_TX_STSr BCMI_TSCF_GEN3_XGXS_WRITE_TX_STSr
#define MODIFY_TX_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_TX_STSr
#define READLN_TX_STSr BCMI_TSCF_GEN3_XGXS_READLN_TX_STSr
#define WRITELN_TX_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_TX_STSr
#define WRITEALL_TX_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TX_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SIGDET_CTL0
 * BLOCKS:   SIGDET
 * REGADDR:  0xd0e0
 * DEVAD:    1
 * DESC:     SIGDET_CTRL_0
 * RESETVAL: 0x1109 (4361)
 * ACCESS:   R/W
 * FIELDS:
 *     SIGNAL_DETECT_FILTER_COUNT Defines the width of the signal_detect==1'b1 pulses which will be filtered. Valid range is 0 to 31which maps to 0 to 448 clock cycles. Refer PMD spec for more details about the mapping.
 *     LOS_FILTER_COUNT Defines the width of the signal_detect==1'b0 pulses which will be filtered. Valid range is 0 to 31which maps to 0 to 448 clock cycles. Refer PMD spec for more details about the mapping.
 */
#define BCMI_TSCF_GEN3_XGXS_SIGDET_CTL0r (0x0001d0e0 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SIGDET_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program SIGDET_CTL0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SIGDET_CTL0r_s {
	uint32_t v[1];
	uint32_t sigdet_ctl0[1];
	uint32_t _sigdet_ctl0;
} BCMI_TSCF_GEN3_XGXS_SIGDET_CTL0r_t;

#define BCMI_TSCF_GEN3_XGXS_SIGDET_CTL0r_CLR(r) (r).sigdet_ctl0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SIGDET_CTL0r_SET(r,d) (r).sigdet_ctl0[0] = d
#define BCMI_TSCF_GEN3_XGXS_SIGDET_CTL0r_GET(r) (r).sigdet_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SIGDET_CTL0r_LOS_FILTER_COUNTf_GET(r) ((((r).sigdet_ctl0[0]) >> 8) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_SIGDET_CTL0r_LOS_FILTER_COUNTf_SET(r,f) (r).sigdet_ctl0[0]=(((r).sigdet_ctl0[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8)) | (31 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_SIGDET_CTL0r_SIGNAL_DETECT_FILTER_COUNTf_GET(r) (((r).sigdet_ctl0[0]) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_SIGDET_CTL0r_SIGNAL_DETECT_FILTER_COUNTf_SET(r,f) (r).sigdet_ctl0[0]=(((r).sigdet_ctl0[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access SIGDET_CTL0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SIGDET_CTL0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SIGDET_CTL0r,(_r._sigdet_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SIGDET_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SIGDET_CTL0r,(_r._sigdet_ctl0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SIGDET_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SIGDET_CTL0r,(_r._sigdet_ctl0))
#define BCMI_TSCF_GEN3_XGXS_READLN_SIGDET_CTL0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SIGDET_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sigdet_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_SIGDET_CTL0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SIGDET_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sigdet_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_SIGDET_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SIGDET_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sigdet_ctl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SIGDET_CTL0r BCMI_TSCF_GEN3_XGXS_SIGDET_CTL0r
#define SIGDET_CTL0r_SIZE BCMI_TSCF_GEN3_XGXS_SIGDET_CTL0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SIGDET_CTL0r_t SIGDET_CTL0r_t;
#define SIGDET_CTL0r_CLR BCMI_TSCF_GEN3_XGXS_SIGDET_CTL0r_CLR
#define SIGDET_CTL0r_SET BCMI_TSCF_GEN3_XGXS_SIGDET_CTL0r_SET
#define SIGDET_CTL0r_GET BCMI_TSCF_GEN3_XGXS_SIGDET_CTL0r_GET
#define SIGDET_CTL0r_LOS_FILTER_COUNTf_GET BCMI_TSCF_GEN3_XGXS_SIGDET_CTL0r_LOS_FILTER_COUNTf_GET
#define SIGDET_CTL0r_LOS_FILTER_COUNTf_SET BCMI_TSCF_GEN3_XGXS_SIGDET_CTL0r_LOS_FILTER_COUNTf_SET
#define SIGDET_CTL0r_SIGNAL_DETECT_FILTER_COUNTf_GET BCMI_TSCF_GEN3_XGXS_SIGDET_CTL0r_SIGNAL_DETECT_FILTER_COUNTf_GET
#define SIGDET_CTL0r_SIGNAL_DETECT_FILTER_COUNTf_SET BCMI_TSCF_GEN3_XGXS_SIGDET_CTL0r_SIGNAL_DETECT_FILTER_COUNTf_SET
#define READ_SIGDET_CTL0r BCMI_TSCF_GEN3_XGXS_READ_SIGDET_CTL0r
#define WRITE_SIGDET_CTL0r BCMI_TSCF_GEN3_XGXS_WRITE_SIGDET_CTL0r
#define MODIFY_SIGDET_CTL0r BCMI_TSCF_GEN3_XGXS_MODIFY_SIGDET_CTL0r
#define READLN_SIGDET_CTL0r BCMI_TSCF_GEN3_XGXS_READLN_SIGDET_CTL0r
#define WRITELN_SIGDET_CTL0r BCMI_TSCF_GEN3_XGXS_WRITELN_SIGDET_CTL0r
#define WRITEALL_SIGDET_CTL0r BCMI_TSCF_GEN3_XGXS_WRITEALL_SIGDET_CTL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SIGDET_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SIGDET_CTL1
 * BLOCKS:   SIGDET
 * REGADDR:  0xd0e1
 * DEVAD:    1
 * DESC:     SIGDET_CTRL_1
 * RESETVAL: 0xa008 (40968)
 * ACCESS:   R/W
 * FIELDS:
 *     AFE_SIGNAL_DETECT_DIS 1'b1 will disable the signal_detect from AFE.
 *     EXT_LOS_EN       1'b1 will enable the external (optical) LOS path into the sigdet filter.
 *     EXT_LOS_INV      1'b1 will invert the polarity of the pmd_ext_los pin.
 *     IGNORE_LP_MODE   1'b1 will ignore the pmd_rx_mode (low power mode) input pin. Set to 1'b0 if EEE mode is supported by the PCS
 *     SIGNAL_DETECT_FILTER_1US 1'b1 will use 1us heartbeat for los_count counter instead of comclk.
 *     ENERGY_DETECT_FRC pmd_energy_detect Force.
 *     ENERGY_DETECT_FRC_VAL pmd_energy_detect Force Value.
 *     SIGNAL_DETECT_FRC pmd_signal_detect Force.
 *     SIGNAL_DETECT_FRC_VAL pmd_signal_detect Force Value.
 *     ENERGY_DETECT_MASK_COUNT Defines the mask_count timer for energy_detect. Valid range is 0 to 31which maps to 0 to 448 clock cycles. Refer PMD spec for more details about the mapping.
 */
#define BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r (0x0001d0e1 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r_SIZE 4

/*
 * This structure should be used to declare and program SIGDET_CTL1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r_s {
	uint32_t v[1];
	uint32_t sigdet_ctl1[1];
	uint32_t _sigdet_ctl1;
} BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r_t;

#define BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r_CLR(r) (r).sigdet_ctl1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r_SET(r,d) (r).sigdet_ctl1[0] = d
#define BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r_GET(r) (r).sigdet_ctl1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r_ENERGY_DETECT_MASK_COUNTf_GET(r) ((((r).sigdet_ctl1[0]) >> 11) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r_ENERGY_DETECT_MASK_COUNTf_SET(r,f) (r).sigdet_ctl1[0]=(((r).sigdet_ctl1[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11)) | (31 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r_SIGNAL_DETECT_FRC_VALf_GET(r) ((((r).sigdet_ctl1[0]) >> 8) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r_SIGNAL_DETECT_FRC_VALf_SET(r,f) (r).sigdet_ctl1[0]=(((r).sigdet_ctl1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r_SIGNAL_DETECT_FRCf_GET(r) ((((r).sigdet_ctl1[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r_SIGNAL_DETECT_FRCf_SET(r,f) (r).sigdet_ctl1[0]=(((r).sigdet_ctl1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r_ENERGY_DETECT_FRC_VALf_GET(r) ((((r).sigdet_ctl1[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r_ENERGY_DETECT_FRC_VALf_SET(r,f) (r).sigdet_ctl1[0]=(((r).sigdet_ctl1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r_ENERGY_DETECT_FRCf_GET(r) ((((r).sigdet_ctl1[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r_ENERGY_DETECT_FRCf_SET(r,f) (r).sigdet_ctl1[0]=(((r).sigdet_ctl1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r_SIGNAL_DETECT_FILTER_1USf_GET(r) ((((r).sigdet_ctl1[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r_SIGNAL_DETECT_FILTER_1USf_SET(r,f) (r).sigdet_ctl1[0]=(((r).sigdet_ctl1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r_IGNORE_LP_MODEf_GET(r) ((((r).sigdet_ctl1[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r_IGNORE_LP_MODEf_SET(r,f) (r).sigdet_ctl1[0]=(((r).sigdet_ctl1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r_EXT_LOS_INVf_GET(r) ((((r).sigdet_ctl1[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r_EXT_LOS_INVf_SET(r,f) (r).sigdet_ctl1[0]=(((r).sigdet_ctl1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r_EXT_LOS_ENf_GET(r) ((((r).sigdet_ctl1[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r_EXT_LOS_ENf_SET(r,f) (r).sigdet_ctl1[0]=(((r).sigdet_ctl1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r_AFE_SIGNAL_DETECT_DISf_GET(r) (((r).sigdet_ctl1[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r_AFE_SIGNAL_DETECT_DISf_SET(r,f) (r).sigdet_ctl1[0]=(((r).sigdet_ctl1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access SIGDET_CTL1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SIGDET_CTL1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r,(_r._sigdet_ctl1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SIGDET_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r,(_r._sigdet_ctl1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SIGDET_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r,(_r._sigdet_ctl1))
#define BCMI_TSCF_GEN3_XGXS_READLN_SIGDET_CTL1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sigdet_ctl1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_SIGDET_CTL1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sigdet_ctl1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_SIGDET_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sigdet_ctl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SIGDET_CTL1r BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r
#define SIGDET_CTL1r_SIZE BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r_t SIGDET_CTL1r_t;
#define SIGDET_CTL1r_CLR BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r_CLR
#define SIGDET_CTL1r_SET BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r_SET
#define SIGDET_CTL1r_GET BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r_GET
#define SIGDET_CTL1r_ENERGY_DETECT_MASK_COUNTf_GET BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r_ENERGY_DETECT_MASK_COUNTf_GET
#define SIGDET_CTL1r_ENERGY_DETECT_MASK_COUNTf_SET BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r_ENERGY_DETECT_MASK_COUNTf_SET
#define SIGDET_CTL1r_SIGNAL_DETECT_FRC_VALf_GET BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r_SIGNAL_DETECT_FRC_VALf_GET
#define SIGDET_CTL1r_SIGNAL_DETECT_FRC_VALf_SET BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r_SIGNAL_DETECT_FRC_VALf_SET
#define SIGDET_CTL1r_SIGNAL_DETECT_FRCf_GET BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r_SIGNAL_DETECT_FRCf_GET
#define SIGDET_CTL1r_SIGNAL_DETECT_FRCf_SET BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r_SIGNAL_DETECT_FRCf_SET
#define SIGDET_CTL1r_ENERGY_DETECT_FRC_VALf_GET BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r_ENERGY_DETECT_FRC_VALf_GET
#define SIGDET_CTL1r_ENERGY_DETECT_FRC_VALf_SET BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r_ENERGY_DETECT_FRC_VALf_SET
#define SIGDET_CTL1r_ENERGY_DETECT_FRCf_GET BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r_ENERGY_DETECT_FRCf_GET
#define SIGDET_CTL1r_ENERGY_DETECT_FRCf_SET BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r_ENERGY_DETECT_FRCf_SET
#define SIGDET_CTL1r_SIGNAL_DETECT_FILTER_1USf_GET BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r_SIGNAL_DETECT_FILTER_1USf_GET
#define SIGDET_CTL1r_SIGNAL_DETECT_FILTER_1USf_SET BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r_SIGNAL_DETECT_FILTER_1USf_SET
#define SIGDET_CTL1r_IGNORE_LP_MODEf_GET BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r_IGNORE_LP_MODEf_GET
#define SIGDET_CTL1r_IGNORE_LP_MODEf_SET BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r_IGNORE_LP_MODEf_SET
#define SIGDET_CTL1r_EXT_LOS_INVf_GET BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r_EXT_LOS_INVf_GET
#define SIGDET_CTL1r_EXT_LOS_INVf_SET BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r_EXT_LOS_INVf_SET
#define SIGDET_CTL1r_EXT_LOS_ENf_GET BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r_EXT_LOS_ENf_GET
#define SIGDET_CTL1r_EXT_LOS_ENf_SET BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r_EXT_LOS_ENf_SET
#define SIGDET_CTL1r_AFE_SIGNAL_DETECT_DISf_GET BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r_AFE_SIGNAL_DETECT_DISf_GET
#define SIGDET_CTL1r_AFE_SIGNAL_DETECT_DISf_SET BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r_AFE_SIGNAL_DETECT_DISf_SET
#define READ_SIGDET_CTL1r BCMI_TSCF_GEN3_XGXS_READ_SIGDET_CTL1r
#define WRITE_SIGDET_CTL1r BCMI_TSCF_GEN3_XGXS_WRITE_SIGDET_CTL1r
#define MODIFY_SIGDET_CTL1r BCMI_TSCF_GEN3_XGXS_MODIFY_SIGDET_CTL1r
#define READLN_SIGDET_CTL1r BCMI_TSCF_GEN3_XGXS_READLN_SIGDET_CTL1r
#define WRITELN_SIGDET_CTL1r BCMI_TSCF_GEN3_XGXS_WRITELN_SIGDET_CTL1r
#define WRITEALL_SIGDET_CTL1r BCMI_TSCF_GEN3_XGXS_WRITEALL_SIGDET_CTL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SIGDET_CTL1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SIGDET_CTL2
 * BLOCKS:   SIGDET
 * REGADDR:  0xd0e2
 * DEVAD:    1
 * DESC:     SIGDET_CTRL_2
 * RESETVAL: 0x3f22 (16162)
 * ACCESS:   R/W
 * FIELDS:
 *     LOS_THRESH       AFE signal detect threshold to be used when filtered signal_detect == 1.
 *     SIGNAL_DETECT_THRESH AFE signal detect threshold to be used when filtered signal_detect == 0.
 *     HOLD_LOS_COUNT   HOLD_LOS state counter. Value 0 to 7 maps to 2 to 16 in increments of 2.
 *     HOLD_SD_COUNT    HOLD_SD state counter. Value 0 to 7 maps to 2 to 16 in increments of 2.
 */
#define BCMI_TSCF_GEN3_XGXS_SIGDET_CTL2r (0x0001d0e2 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SIGDET_CTL2r_SIZE 4

/*
 * This structure should be used to declare and program SIGDET_CTL2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SIGDET_CTL2r_s {
	uint32_t v[1];
	uint32_t sigdet_ctl2[1];
	uint32_t _sigdet_ctl2;
} BCMI_TSCF_GEN3_XGXS_SIGDET_CTL2r_t;

#define BCMI_TSCF_GEN3_XGXS_SIGDET_CTL2r_CLR(r) (r).sigdet_ctl2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SIGDET_CTL2r_SET(r,d) (r).sigdet_ctl2[0] = d
#define BCMI_TSCF_GEN3_XGXS_SIGDET_CTL2r_GET(r) (r).sigdet_ctl2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SIGDET_CTL2r_HOLD_SD_COUNTf_GET(r) ((((r).sigdet_ctl2[0]) >> 11) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_SIGDET_CTL2r_HOLD_SD_COUNTf_SET(r,f) (r).sigdet_ctl2[0]=(((r).sigdet_ctl2[0] & ~((uint32_t)0x7 << 11)) | ((((uint32_t)f) & 0x7) << 11)) | (7 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_SIGDET_CTL2r_HOLD_LOS_COUNTf_GET(r) ((((r).sigdet_ctl2[0]) >> 8) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_SIGDET_CTL2r_HOLD_LOS_COUNTf_SET(r,f) (r).sigdet_ctl2[0]=(((r).sigdet_ctl2[0] & ~((uint32_t)0x7 << 8)) | ((((uint32_t)f) & 0x7) << 8)) | (7 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_SIGDET_CTL2r_SIGNAL_DETECT_THRESHf_GET(r) ((((r).sigdet_ctl2[0]) >> 4) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_SIGDET_CTL2r_SIGNAL_DETECT_THRESHf_SET(r,f) (r).sigdet_ctl2[0]=(((r).sigdet_ctl2[0] & ~((uint32_t)0x7 << 4)) | ((((uint32_t)f) & 0x7) << 4)) | (7 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_SIGDET_CTL2r_LOS_THRESHf_GET(r) (((r).sigdet_ctl2[0]) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_SIGDET_CTL2r_LOS_THRESHf_SET(r,f) (r).sigdet_ctl2[0]=(((r).sigdet_ctl2[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access SIGDET_CTL2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SIGDET_CTL2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SIGDET_CTL2r,(_r._sigdet_ctl2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SIGDET_CTL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SIGDET_CTL2r,(_r._sigdet_ctl2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SIGDET_CTL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SIGDET_CTL2r,(_r._sigdet_ctl2))
#define BCMI_TSCF_GEN3_XGXS_READLN_SIGDET_CTL2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SIGDET_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sigdet_ctl2))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_SIGDET_CTL2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SIGDET_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sigdet_ctl2))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_SIGDET_CTL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SIGDET_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sigdet_ctl2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SIGDET_CTL2r BCMI_TSCF_GEN3_XGXS_SIGDET_CTL2r
#define SIGDET_CTL2r_SIZE BCMI_TSCF_GEN3_XGXS_SIGDET_CTL2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SIGDET_CTL2r_t SIGDET_CTL2r_t;
#define SIGDET_CTL2r_CLR BCMI_TSCF_GEN3_XGXS_SIGDET_CTL2r_CLR
#define SIGDET_CTL2r_SET BCMI_TSCF_GEN3_XGXS_SIGDET_CTL2r_SET
#define SIGDET_CTL2r_GET BCMI_TSCF_GEN3_XGXS_SIGDET_CTL2r_GET
#define SIGDET_CTL2r_HOLD_SD_COUNTf_GET BCMI_TSCF_GEN3_XGXS_SIGDET_CTL2r_HOLD_SD_COUNTf_GET
#define SIGDET_CTL2r_HOLD_SD_COUNTf_SET BCMI_TSCF_GEN3_XGXS_SIGDET_CTL2r_HOLD_SD_COUNTf_SET
#define SIGDET_CTL2r_HOLD_LOS_COUNTf_GET BCMI_TSCF_GEN3_XGXS_SIGDET_CTL2r_HOLD_LOS_COUNTf_GET
#define SIGDET_CTL2r_HOLD_LOS_COUNTf_SET BCMI_TSCF_GEN3_XGXS_SIGDET_CTL2r_HOLD_LOS_COUNTf_SET
#define SIGDET_CTL2r_SIGNAL_DETECT_THRESHf_GET BCMI_TSCF_GEN3_XGXS_SIGDET_CTL2r_SIGNAL_DETECT_THRESHf_GET
#define SIGDET_CTL2r_SIGNAL_DETECT_THRESHf_SET BCMI_TSCF_GEN3_XGXS_SIGDET_CTL2r_SIGNAL_DETECT_THRESHf_SET
#define SIGDET_CTL2r_LOS_THRESHf_GET BCMI_TSCF_GEN3_XGXS_SIGDET_CTL2r_LOS_THRESHf_GET
#define SIGDET_CTL2r_LOS_THRESHf_SET BCMI_TSCF_GEN3_XGXS_SIGDET_CTL2r_LOS_THRESHf_SET
#define READ_SIGDET_CTL2r BCMI_TSCF_GEN3_XGXS_READ_SIGDET_CTL2r
#define WRITE_SIGDET_CTL2r BCMI_TSCF_GEN3_XGXS_WRITE_SIGDET_CTL2r
#define MODIFY_SIGDET_CTL2r BCMI_TSCF_GEN3_XGXS_MODIFY_SIGDET_CTL2r
#define READLN_SIGDET_CTL2r BCMI_TSCF_GEN3_XGXS_READLN_SIGDET_CTL2r
#define WRITELN_SIGDET_CTL2r BCMI_TSCF_GEN3_XGXS_WRITELN_SIGDET_CTL2r
#define WRITEALL_SIGDET_CTL2r BCMI_TSCF_GEN3_XGXS_WRITEALL_SIGDET_CTL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SIGDET_CTL2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SIGDET_STS0
 * BLOCKS:   SIGDET
 * REGADDR:  0xd0e8
 * DEVAD:    1
 * DESC:     SIGDET_STATUS_0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     SIGNAL_DETECT    Filtered version of Signal Detect after frc/frc_val.
 *     SIGNAL_DETECT_CHANGE This latches the transition on signal_detect and cleared on read.
 *     SIGNAL_DETECT_RAW Raw version of Signal Detect going into the filter.
 *     SIGNAL_DETECT_RAW_CHANGE This latches the transition on signal_detect_raw and cleared on read.
 *     EXT_SIGDET       External LOS/sigdet from the pin going into the sigdet filter.
 *     EXT_SIGDET_CHANGE This latches the transition on ext_sigdet and cleared on read.
 *     AFE_SIGDET       Internal sigdet from the AFE sigdet block going into the sigdet filter.
 *     AFE_SIGDET_CHANGE This latches the transition on afe_sigdet and cleared on read.
 */
#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS0r (0x0001d0e8 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS0r_SIZE 4

/*
 * This structure should be used to declare and program SIGDET_STS0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SIGDET_STS0r_s {
	uint32_t v[1];
	uint32_t sigdet_sts0[1];
	uint32_t _sigdet_sts0;
} BCMI_TSCF_GEN3_XGXS_SIGDET_STS0r_t;

#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS0r_CLR(r) (r).sigdet_sts0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS0r_SET(r,d) (r).sigdet_sts0[0] = d
#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS0r_GET(r) (r).sigdet_sts0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS0r_AFE_SIGDET_CHANGEf_GET(r) ((((r).sigdet_sts0[0]) >> 9) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS0r_AFE_SIGDET_CHANGEf_SET(r,f) (r).sigdet_sts0[0]=(((r).sigdet_sts0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS0r_AFE_SIGDETf_GET(r) ((((r).sigdet_sts0[0]) >> 8) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS0r_AFE_SIGDETf_SET(r,f) (r).sigdet_sts0[0]=(((r).sigdet_sts0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS0r_EXT_SIGDET_CHANGEf_GET(r) ((((r).sigdet_sts0[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS0r_EXT_SIGDET_CHANGEf_SET(r,f) (r).sigdet_sts0[0]=(((r).sigdet_sts0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS0r_EXT_SIGDETf_GET(r) ((((r).sigdet_sts0[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS0r_EXT_SIGDETf_SET(r,f) (r).sigdet_sts0[0]=(((r).sigdet_sts0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS0r_SIGNAL_DETECT_RAW_CHANGEf_GET(r) ((((r).sigdet_sts0[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS0r_SIGNAL_DETECT_RAW_CHANGEf_SET(r,f) (r).sigdet_sts0[0]=(((r).sigdet_sts0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS0r_SIGNAL_DETECT_RAWf_GET(r) ((((r).sigdet_sts0[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS0r_SIGNAL_DETECT_RAWf_SET(r,f) (r).sigdet_sts0[0]=(((r).sigdet_sts0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS0r_SIGNAL_DETECT_CHANGEf_GET(r) ((((r).sigdet_sts0[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS0r_SIGNAL_DETECT_CHANGEf_SET(r,f) (r).sigdet_sts0[0]=(((r).sigdet_sts0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS0r_SIGNAL_DETECTf_GET(r) (((r).sigdet_sts0[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS0r_SIGNAL_DETECTf_SET(r,f) (r).sigdet_sts0[0]=(((r).sigdet_sts0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access SIGDET_STS0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SIGDET_STS0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SIGDET_STS0r,(_r._sigdet_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SIGDET_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SIGDET_STS0r,(_r._sigdet_sts0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SIGDET_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SIGDET_STS0r,(_r._sigdet_sts0))
#define BCMI_TSCF_GEN3_XGXS_READLN_SIGDET_STS0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SIGDET_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sigdet_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_SIGDET_STS0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SIGDET_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sigdet_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_SIGDET_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SIGDET_STS0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sigdet_sts0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SIGDET_STS0r BCMI_TSCF_GEN3_XGXS_SIGDET_STS0r
#define SIGDET_STS0r_SIZE BCMI_TSCF_GEN3_XGXS_SIGDET_STS0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SIGDET_STS0r_t SIGDET_STS0r_t;
#define SIGDET_STS0r_CLR BCMI_TSCF_GEN3_XGXS_SIGDET_STS0r_CLR
#define SIGDET_STS0r_SET BCMI_TSCF_GEN3_XGXS_SIGDET_STS0r_SET
#define SIGDET_STS0r_GET BCMI_TSCF_GEN3_XGXS_SIGDET_STS0r_GET
#define SIGDET_STS0r_AFE_SIGDET_CHANGEf_GET BCMI_TSCF_GEN3_XGXS_SIGDET_STS0r_AFE_SIGDET_CHANGEf_GET
#define SIGDET_STS0r_AFE_SIGDET_CHANGEf_SET BCMI_TSCF_GEN3_XGXS_SIGDET_STS0r_AFE_SIGDET_CHANGEf_SET
#define SIGDET_STS0r_AFE_SIGDETf_GET BCMI_TSCF_GEN3_XGXS_SIGDET_STS0r_AFE_SIGDETf_GET
#define SIGDET_STS0r_AFE_SIGDETf_SET BCMI_TSCF_GEN3_XGXS_SIGDET_STS0r_AFE_SIGDETf_SET
#define SIGDET_STS0r_EXT_SIGDET_CHANGEf_GET BCMI_TSCF_GEN3_XGXS_SIGDET_STS0r_EXT_SIGDET_CHANGEf_GET
#define SIGDET_STS0r_EXT_SIGDET_CHANGEf_SET BCMI_TSCF_GEN3_XGXS_SIGDET_STS0r_EXT_SIGDET_CHANGEf_SET
#define SIGDET_STS0r_EXT_SIGDETf_GET BCMI_TSCF_GEN3_XGXS_SIGDET_STS0r_EXT_SIGDETf_GET
#define SIGDET_STS0r_EXT_SIGDETf_SET BCMI_TSCF_GEN3_XGXS_SIGDET_STS0r_EXT_SIGDETf_SET
#define SIGDET_STS0r_SIGNAL_DETECT_RAW_CHANGEf_GET BCMI_TSCF_GEN3_XGXS_SIGDET_STS0r_SIGNAL_DETECT_RAW_CHANGEf_GET
#define SIGDET_STS0r_SIGNAL_DETECT_RAW_CHANGEf_SET BCMI_TSCF_GEN3_XGXS_SIGDET_STS0r_SIGNAL_DETECT_RAW_CHANGEf_SET
#define SIGDET_STS0r_SIGNAL_DETECT_RAWf_GET BCMI_TSCF_GEN3_XGXS_SIGDET_STS0r_SIGNAL_DETECT_RAWf_GET
#define SIGDET_STS0r_SIGNAL_DETECT_RAWf_SET BCMI_TSCF_GEN3_XGXS_SIGDET_STS0r_SIGNAL_DETECT_RAWf_SET
#define SIGDET_STS0r_SIGNAL_DETECT_CHANGEf_GET BCMI_TSCF_GEN3_XGXS_SIGDET_STS0r_SIGNAL_DETECT_CHANGEf_GET
#define SIGDET_STS0r_SIGNAL_DETECT_CHANGEf_SET BCMI_TSCF_GEN3_XGXS_SIGDET_STS0r_SIGNAL_DETECT_CHANGEf_SET
#define SIGDET_STS0r_SIGNAL_DETECTf_GET BCMI_TSCF_GEN3_XGXS_SIGDET_STS0r_SIGNAL_DETECTf_GET
#define SIGDET_STS0r_SIGNAL_DETECTf_SET BCMI_TSCF_GEN3_XGXS_SIGDET_STS0r_SIGNAL_DETECTf_SET
#define READ_SIGDET_STS0r BCMI_TSCF_GEN3_XGXS_READ_SIGDET_STS0r
#define WRITE_SIGDET_STS0r BCMI_TSCF_GEN3_XGXS_WRITE_SIGDET_STS0r
#define MODIFY_SIGDET_STS0r BCMI_TSCF_GEN3_XGXS_MODIFY_SIGDET_STS0r
#define READLN_SIGDET_STS0r BCMI_TSCF_GEN3_XGXS_READLN_SIGDET_STS0r
#define WRITELN_SIGDET_STS0r BCMI_TSCF_GEN3_XGXS_WRITELN_SIGDET_STS0r
#define WRITEALL_SIGDET_STS0r BCMI_TSCF_GEN3_XGXS_WRITEALL_SIGDET_STS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SIGDET_STS0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SIGDET_STS1
 * BLOCKS:   SIGDET
 * REGADDR:  0xd0e9
 * DEVAD:    1
 * DESC:     SIGDET_STATUS_1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     UC_SIGNAL_DETECT Filtered version of Signal Detect after frc/frc_val.
 *     UC_SIGNAL_DETECT_CHANGE This latches the transition on uc_signal_detect and cleared on read.
 *     UC_EXT_SIGDET    External LOS/sigdet from the pin going into the sigdet filter.
 *     UC_EXT_SIGDET_CHANGE This latches the transition on uc_ext_sigdet and cleared on read.
 *     UC_AFE_SIGDET    Internal sigdet from the AFE sigdet block going into the sigdet filter.
 *     UC_AFE_SIGDET_CHANGE This latches the transition on uc_afe_sigdet and cleared on read.
 */
#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS1r (0x0001d0e9 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS1r_SIZE 4

/*
 * This structure should be used to declare and program SIGDET_STS1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SIGDET_STS1r_s {
	uint32_t v[1];
	uint32_t sigdet_sts1[1];
	uint32_t _sigdet_sts1;
} BCMI_TSCF_GEN3_XGXS_SIGDET_STS1r_t;

#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS1r_CLR(r) (r).sigdet_sts1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS1r_SET(r,d) (r).sigdet_sts1[0] = d
#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS1r_GET(r) (r).sigdet_sts1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS1r_UC_AFE_SIGDET_CHANGEf_GET(r) ((((r).sigdet_sts1[0]) >> 9) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS1r_UC_AFE_SIGDET_CHANGEf_SET(r,f) (r).sigdet_sts1[0]=(((r).sigdet_sts1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS1r_UC_AFE_SIGDETf_GET(r) ((((r).sigdet_sts1[0]) >> 8) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS1r_UC_AFE_SIGDETf_SET(r,f) (r).sigdet_sts1[0]=(((r).sigdet_sts1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS1r_UC_EXT_SIGDET_CHANGEf_GET(r) ((((r).sigdet_sts1[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS1r_UC_EXT_SIGDET_CHANGEf_SET(r,f) (r).sigdet_sts1[0]=(((r).sigdet_sts1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS1r_UC_EXT_SIGDETf_GET(r) ((((r).sigdet_sts1[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS1r_UC_EXT_SIGDETf_SET(r,f) (r).sigdet_sts1[0]=(((r).sigdet_sts1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS1r_UC_SIGNAL_DETECT_CHANGEf_GET(r) ((((r).sigdet_sts1[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS1r_UC_SIGNAL_DETECT_CHANGEf_SET(r,f) (r).sigdet_sts1[0]=(((r).sigdet_sts1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS1r_UC_SIGNAL_DETECTf_GET(r) (((r).sigdet_sts1[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS1r_UC_SIGNAL_DETECTf_SET(r,f) (r).sigdet_sts1[0]=(((r).sigdet_sts1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access SIGDET_STS1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SIGDET_STS1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SIGDET_STS1r,(_r._sigdet_sts1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SIGDET_STS1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SIGDET_STS1r,(_r._sigdet_sts1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SIGDET_STS1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SIGDET_STS1r,(_r._sigdet_sts1))
#define BCMI_TSCF_GEN3_XGXS_READLN_SIGDET_STS1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SIGDET_STS1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sigdet_sts1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_SIGDET_STS1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SIGDET_STS1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sigdet_sts1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_SIGDET_STS1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SIGDET_STS1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sigdet_sts1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SIGDET_STS1r BCMI_TSCF_GEN3_XGXS_SIGDET_STS1r
#define SIGDET_STS1r_SIZE BCMI_TSCF_GEN3_XGXS_SIGDET_STS1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SIGDET_STS1r_t SIGDET_STS1r_t;
#define SIGDET_STS1r_CLR BCMI_TSCF_GEN3_XGXS_SIGDET_STS1r_CLR
#define SIGDET_STS1r_SET BCMI_TSCF_GEN3_XGXS_SIGDET_STS1r_SET
#define SIGDET_STS1r_GET BCMI_TSCF_GEN3_XGXS_SIGDET_STS1r_GET
#define SIGDET_STS1r_UC_AFE_SIGDET_CHANGEf_GET BCMI_TSCF_GEN3_XGXS_SIGDET_STS1r_UC_AFE_SIGDET_CHANGEf_GET
#define SIGDET_STS1r_UC_AFE_SIGDET_CHANGEf_SET BCMI_TSCF_GEN3_XGXS_SIGDET_STS1r_UC_AFE_SIGDET_CHANGEf_SET
#define SIGDET_STS1r_UC_AFE_SIGDETf_GET BCMI_TSCF_GEN3_XGXS_SIGDET_STS1r_UC_AFE_SIGDETf_GET
#define SIGDET_STS1r_UC_AFE_SIGDETf_SET BCMI_TSCF_GEN3_XGXS_SIGDET_STS1r_UC_AFE_SIGDETf_SET
#define SIGDET_STS1r_UC_EXT_SIGDET_CHANGEf_GET BCMI_TSCF_GEN3_XGXS_SIGDET_STS1r_UC_EXT_SIGDET_CHANGEf_GET
#define SIGDET_STS1r_UC_EXT_SIGDET_CHANGEf_SET BCMI_TSCF_GEN3_XGXS_SIGDET_STS1r_UC_EXT_SIGDET_CHANGEf_SET
#define SIGDET_STS1r_UC_EXT_SIGDETf_GET BCMI_TSCF_GEN3_XGXS_SIGDET_STS1r_UC_EXT_SIGDETf_GET
#define SIGDET_STS1r_UC_EXT_SIGDETf_SET BCMI_TSCF_GEN3_XGXS_SIGDET_STS1r_UC_EXT_SIGDETf_SET
#define SIGDET_STS1r_UC_SIGNAL_DETECT_CHANGEf_GET BCMI_TSCF_GEN3_XGXS_SIGDET_STS1r_UC_SIGNAL_DETECT_CHANGEf_GET
#define SIGDET_STS1r_UC_SIGNAL_DETECT_CHANGEf_SET BCMI_TSCF_GEN3_XGXS_SIGDET_STS1r_UC_SIGNAL_DETECT_CHANGEf_SET
#define SIGDET_STS1r_UC_SIGNAL_DETECTf_GET BCMI_TSCF_GEN3_XGXS_SIGDET_STS1r_UC_SIGNAL_DETECTf_GET
#define SIGDET_STS1r_UC_SIGNAL_DETECTf_SET BCMI_TSCF_GEN3_XGXS_SIGDET_STS1r_UC_SIGNAL_DETECTf_SET
#define READ_SIGDET_STS1r BCMI_TSCF_GEN3_XGXS_READ_SIGDET_STS1r
#define WRITE_SIGDET_STS1r BCMI_TSCF_GEN3_XGXS_WRITE_SIGDET_STS1r
#define MODIFY_SIGDET_STS1r BCMI_TSCF_GEN3_XGXS_MODIFY_SIGDET_STS1r
#define READLN_SIGDET_STS1r BCMI_TSCF_GEN3_XGXS_READLN_SIGDET_STS1r
#define WRITELN_SIGDET_STS1r BCMI_TSCF_GEN3_XGXS_WRITELN_SIGDET_STS1r
#define WRITEALL_SIGDET_STS1r BCMI_TSCF_GEN3_XGXS_WRITEALL_SIGDET_STS1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SIGDET_STS1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SIGDET_STS2
 * BLOCKS:   SIGDET
 * REGADDR:  0xd0ea
 * DEVAD:    1
 * DESC:     SIGDET_STATUS_2
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     ENERGY_DETECT    Filtered version of Energy Detect after frc/frc_val.
 *     ENERGY_DETECT_CHANGE This latches the transition on energy_detect and cleared on read.
 */
#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS2r (0x0001d0ea | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS2r_SIZE 4

/*
 * This structure should be used to declare and program SIGDET_STS2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SIGDET_STS2r_s {
	uint32_t v[1];
	uint32_t sigdet_sts2[1];
	uint32_t _sigdet_sts2;
} BCMI_TSCF_GEN3_XGXS_SIGDET_STS2r_t;

#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS2r_CLR(r) (r).sigdet_sts2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS2r_SET(r,d) (r).sigdet_sts2[0] = d
#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS2r_GET(r) (r).sigdet_sts2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS2r_ENERGY_DETECT_CHANGEf_GET(r) ((((r).sigdet_sts2[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS2r_ENERGY_DETECT_CHANGEf_SET(r,f) (r).sigdet_sts2[0]=(((r).sigdet_sts2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS2r_ENERGY_DETECTf_GET(r) (((r).sigdet_sts2[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS2r_ENERGY_DETECTf_SET(r,f) (r).sigdet_sts2[0]=(((r).sigdet_sts2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access SIGDET_STS2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SIGDET_STS2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SIGDET_STS2r,(_r._sigdet_sts2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SIGDET_STS2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SIGDET_STS2r,(_r._sigdet_sts2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SIGDET_STS2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SIGDET_STS2r,(_r._sigdet_sts2))
#define BCMI_TSCF_GEN3_XGXS_READLN_SIGDET_STS2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SIGDET_STS2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sigdet_sts2))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_SIGDET_STS2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SIGDET_STS2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sigdet_sts2))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_SIGDET_STS2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SIGDET_STS2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sigdet_sts2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SIGDET_STS2r BCMI_TSCF_GEN3_XGXS_SIGDET_STS2r
#define SIGDET_STS2r_SIZE BCMI_TSCF_GEN3_XGXS_SIGDET_STS2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SIGDET_STS2r_t SIGDET_STS2r_t;
#define SIGDET_STS2r_CLR BCMI_TSCF_GEN3_XGXS_SIGDET_STS2r_CLR
#define SIGDET_STS2r_SET BCMI_TSCF_GEN3_XGXS_SIGDET_STS2r_SET
#define SIGDET_STS2r_GET BCMI_TSCF_GEN3_XGXS_SIGDET_STS2r_GET
#define SIGDET_STS2r_ENERGY_DETECT_CHANGEf_GET BCMI_TSCF_GEN3_XGXS_SIGDET_STS2r_ENERGY_DETECT_CHANGEf_GET
#define SIGDET_STS2r_ENERGY_DETECT_CHANGEf_SET BCMI_TSCF_GEN3_XGXS_SIGDET_STS2r_ENERGY_DETECT_CHANGEf_SET
#define SIGDET_STS2r_ENERGY_DETECTf_GET BCMI_TSCF_GEN3_XGXS_SIGDET_STS2r_ENERGY_DETECTf_GET
#define SIGDET_STS2r_ENERGY_DETECTf_SET BCMI_TSCF_GEN3_XGXS_SIGDET_STS2r_ENERGY_DETECTf_SET
#define READ_SIGDET_STS2r BCMI_TSCF_GEN3_XGXS_READ_SIGDET_STS2r
#define WRITE_SIGDET_STS2r BCMI_TSCF_GEN3_XGXS_WRITE_SIGDET_STS2r
#define MODIFY_SIGDET_STS2r BCMI_TSCF_GEN3_XGXS_MODIFY_SIGDET_STS2r
#define READLN_SIGDET_STS2r BCMI_TSCF_GEN3_XGXS_READLN_SIGDET_STS2r
#define WRITELN_SIGDET_STS2r BCMI_TSCF_GEN3_XGXS_WRITELN_SIGDET_STS2r
#define WRITEALL_SIGDET_STS2r BCMI_TSCF_GEN3_XGXS_WRITEALL_SIGDET_STS2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SIGDET_STS2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SIGDET_STS3
 * BLOCKS:   SIGDET
 * REGADDR:  0xd0eb
 * DEVAD:    1
 * DESC:     SIGDET_STATUS_3
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     PMD_SIGNAL_DETECT Filtered version of Signal Detect after frc/frc_val.
 */
#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS3r (0x0001d0eb | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS3r_SIZE 4

/*
 * This structure should be used to declare and program SIGDET_STS3.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SIGDET_STS3r_s {
	uint32_t v[1];
	uint32_t sigdet_sts3[1];
	uint32_t _sigdet_sts3;
} BCMI_TSCF_GEN3_XGXS_SIGDET_STS3r_t;

#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS3r_CLR(r) (r).sigdet_sts3[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS3r_SET(r,d) (r).sigdet_sts3[0] = d
#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS3r_GET(r) (r).sigdet_sts3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS3r_PMD_SIGNAL_DETECTf_GET(r) (((r).sigdet_sts3[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS3r_PMD_SIGNAL_DETECTf_SET(r,f) (r).sigdet_sts3[0]=(((r).sigdet_sts3[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access SIGDET_STS3.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SIGDET_STS3r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SIGDET_STS3r,(_r._sigdet_sts3))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SIGDET_STS3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SIGDET_STS3r,(_r._sigdet_sts3)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SIGDET_STS3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SIGDET_STS3r,(_r._sigdet_sts3))
#define BCMI_TSCF_GEN3_XGXS_READLN_SIGDET_STS3r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SIGDET_STS3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sigdet_sts3))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_SIGDET_STS3r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SIGDET_STS3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sigdet_sts3))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_SIGDET_STS3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SIGDET_STS3r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sigdet_sts3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SIGDET_STS3r BCMI_TSCF_GEN3_XGXS_SIGDET_STS3r
#define SIGDET_STS3r_SIZE BCMI_TSCF_GEN3_XGXS_SIGDET_STS3r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SIGDET_STS3r_t SIGDET_STS3r_t;
#define SIGDET_STS3r_CLR BCMI_TSCF_GEN3_XGXS_SIGDET_STS3r_CLR
#define SIGDET_STS3r_SET BCMI_TSCF_GEN3_XGXS_SIGDET_STS3r_SET
#define SIGDET_STS3r_GET BCMI_TSCF_GEN3_XGXS_SIGDET_STS3r_GET
#define SIGDET_STS3r_PMD_SIGNAL_DETECTf_GET BCMI_TSCF_GEN3_XGXS_SIGDET_STS3r_PMD_SIGNAL_DETECTf_GET
#define SIGDET_STS3r_PMD_SIGNAL_DETECTf_SET BCMI_TSCF_GEN3_XGXS_SIGDET_STS3r_PMD_SIGNAL_DETECTf_SET
#define READ_SIGDET_STS3r BCMI_TSCF_GEN3_XGXS_READ_SIGDET_STS3r
#define WRITE_SIGDET_STS3r BCMI_TSCF_GEN3_XGXS_WRITE_SIGDET_STS3r
#define MODIFY_SIGDET_STS3r BCMI_TSCF_GEN3_XGXS_MODIFY_SIGDET_STS3r
#define READLN_SIGDET_STS3r BCMI_TSCF_GEN3_XGXS_READLN_SIGDET_STS3r
#define WRITELN_SIGDET_STS3r BCMI_TSCF_GEN3_XGXS_WRITELN_SIGDET_STS3r
#define WRITEALL_SIGDET_STS3r BCMI_TSCF_GEN3_XGXS_WRITEALL_SIGDET_STS3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SIGDET_STS3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  SIGDET_STS4
 * BLOCKS:   SIGDET
 * REGADDR:  0xd0ec
 * DEVAD:    1
 * DESC:     SIGDET_STATUS_4
 * RESETVAL: 0x2 (2)
 * ACCESS:   R/O
 * FIELDS:
 *     AFE_SIGDET_THRESH Live status of sigdet_thresh going to AFE.
 */
#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS4r (0x0001d0ec | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS4r_SIZE 4

/*
 * This structure should be used to declare and program SIGDET_STS4.
 */
typedef union BCMI_TSCF_GEN3_XGXS_SIGDET_STS4r_s {
	uint32_t v[1];
	uint32_t sigdet_sts4[1];
	uint32_t _sigdet_sts4;
} BCMI_TSCF_GEN3_XGXS_SIGDET_STS4r_t;

#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS4r_CLR(r) (r).sigdet_sts4[0] = 0
#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS4r_SET(r,d) (r).sigdet_sts4[0] = d
#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS4r_GET(r) (r).sigdet_sts4[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS4r_AFE_SIGDET_THRESHf_GET(r) (((r).sigdet_sts4[0]) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_SIGDET_STS4r_AFE_SIGDET_THRESHf_SET(r,f) (r).sigdet_sts4[0]=(((r).sigdet_sts4[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access SIGDET_STS4.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_SIGDET_STS4r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SIGDET_STS4r,(_r._sigdet_sts4))
#define BCMI_TSCF_GEN3_XGXS_WRITE_SIGDET_STS4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SIGDET_STS4r,(_r._sigdet_sts4)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_SIGDET_STS4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SIGDET_STS4r,(_r._sigdet_sts4))
#define BCMI_TSCF_GEN3_XGXS_READLN_SIGDET_STS4r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_SIGDET_STS4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sigdet_sts4))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_SIGDET_STS4r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SIGDET_STS4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sigdet_sts4))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_SIGDET_STS4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_SIGDET_STS4r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sigdet_sts4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SIGDET_STS4r BCMI_TSCF_GEN3_XGXS_SIGDET_STS4r
#define SIGDET_STS4r_SIZE BCMI_TSCF_GEN3_XGXS_SIGDET_STS4r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_SIGDET_STS4r_t SIGDET_STS4r_t;
#define SIGDET_STS4r_CLR BCMI_TSCF_GEN3_XGXS_SIGDET_STS4r_CLR
#define SIGDET_STS4r_SET BCMI_TSCF_GEN3_XGXS_SIGDET_STS4r_SET
#define SIGDET_STS4r_GET BCMI_TSCF_GEN3_XGXS_SIGDET_STS4r_GET
#define SIGDET_STS4r_AFE_SIGDET_THRESHf_GET BCMI_TSCF_GEN3_XGXS_SIGDET_STS4r_AFE_SIGDET_THRESHf_GET
#define SIGDET_STS4r_AFE_SIGDET_THRESHf_SET BCMI_TSCF_GEN3_XGXS_SIGDET_STS4r_AFE_SIGDET_THRESHf_SET
#define READ_SIGDET_STS4r BCMI_TSCF_GEN3_XGXS_READ_SIGDET_STS4r
#define WRITE_SIGDET_STS4r BCMI_TSCF_GEN3_XGXS_WRITE_SIGDET_STS4r
#define MODIFY_SIGDET_STS4r BCMI_TSCF_GEN3_XGXS_MODIFY_SIGDET_STS4r
#define READLN_SIGDET_STS4r BCMI_TSCF_GEN3_XGXS_READLN_SIGDET_STS4r
#define WRITELN_SIGDET_STS4r BCMI_TSCF_GEN3_XGXS_WRITELN_SIGDET_STS4r
#define WRITEALL_SIGDET_STS4r BCMI_TSCF_GEN3_XGXS_WRITEALL_SIGDET_STS4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_SIGDET_STS4r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DIG_REVID0
 * BLOCKS:   DIG_COM
 * REGADDR:  0xd100
 * DEVAD:    1
 * DESC:     REVID0
 * RESETVAL: 0x2db (731)
 * ACCESS:   R/O
 * FIELDS:
 *     REVID_MODEL      model number
 *     REVID_PROCESS    technology process0 = 90nm1 = 65nm2 = 40nm3 = 28nm4 = 20nm5 = 16nm6-7 = reserved
 *     REVID_BONDING    bonding0 = wire bond1 = flip chip2-3 = reserved
 *     REVID_REV_NUMBER Metal mask revision number
 *     REVID_REV_LETTER All layer revision letter0 = revA1 = revB2 = revC3 = revD
 */
#define BCMI_TSCF_GEN3_XGXS_DIG_REVID0r (0x0001d100 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DIG_REVID0r_SIZE 4

/*
 * This structure should be used to declare and program DIG_REVID0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DIG_REVID0r_s {
	uint32_t v[1];
	uint32_t dig_revid0[1];
	uint32_t _dig_revid0;
} BCMI_TSCF_GEN3_XGXS_DIG_REVID0r_t;

#define BCMI_TSCF_GEN3_XGXS_DIG_REVID0r_CLR(r) (r).dig_revid0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DIG_REVID0r_SET(r,d) (r).dig_revid0[0] = d
#define BCMI_TSCF_GEN3_XGXS_DIG_REVID0r_GET(r) (r).dig_revid0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DIG_REVID0r_REVID_REV_LETTERf_GET(r) ((((r).dig_revid0[0]) >> 14) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_DIG_REVID0r_REVID_REV_LETTERf_SET(r,f) (r).dig_revid0[0]=(((r).dig_revid0[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_DIG_REVID0r_REVID_REV_NUMBERf_GET(r) ((((r).dig_revid0[0]) >> 11) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_DIG_REVID0r_REVID_REV_NUMBERf_SET(r,f) (r).dig_revid0[0]=(((r).dig_revid0[0] & ~((uint32_t)0x7 << 11)) | ((((uint32_t)f) & 0x7) << 11)) | (7 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_DIG_REVID0r_REVID_BONDINGf_GET(r) ((((r).dig_revid0[0]) >> 9) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_DIG_REVID0r_REVID_BONDINGf_SET(r,f) (r).dig_revid0[0]=(((r).dig_revid0[0] & ~((uint32_t)0x3 << 9)) | ((((uint32_t)f) & 0x3) << 9)) | (3 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_DIG_REVID0r_REVID_PROCESSf_GET(r) ((((r).dig_revid0[0]) >> 6) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_DIG_REVID0r_REVID_PROCESSf_SET(r,f) (r).dig_revid0[0]=(((r).dig_revid0[0] & ~((uint32_t)0x7 << 6)) | ((((uint32_t)f) & 0x7) << 6)) | (7 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_DIG_REVID0r_REVID_MODELf_GET(r) (((r).dig_revid0[0]) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_DIG_REVID0r_REVID_MODELf_SET(r,f) (r).dig_revid0[0]=(((r).dig_revid0[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access DIG_REVID0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DIG_REVID0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DIG_REVID0r,(_r._dig_revid0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DIG_REVID0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DIG_REVID0r,(_r._dig_revid0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DIG_REVID0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DIG_REVID0r,(_r._dig_revid0))
#define BCMI_TSCF_GEN3_XGXS_READLN_DIG_REVID0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DIG_REVID0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_revid0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DIG_REVID0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DIG_REVID0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_revid0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DIG_REVID0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DIG_REVID0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dig_revid0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DIG_REVID0r BCMI_TSCF_GEN3_XGXS_DIG_REVID0r
#define DIG_REVID0r_SIZE BCMI_TSCF_GEN3_XGXS_DIG_REVID0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DIG_REVID0r_t DIG_REVID0r_t;
#define DIG_REVID0r_CLR BCMI_TSCF_GEN3_XGXS_DIG_REVID0r_CLR
#define DIG_REVID0r_SET BCMI_TSCF_GEN3_XGXS_DIG_REVID0r_SET
#define DIG_REVID0r_GET BCMI_TSCF_GEN3_XGXS_DIG_REVID0r_GET
#define DIG_REVID0r_REVID_REV_LETTERf_GET BCMI_TSCF_GEN3_XGXS_DIG_REVID0r_REVID_REV_LETTERf_GET
#define DIG_REVID0r_REVID_REV_LETTERf_SET BCMI_TSCF_GEN3_XGXS_DIG_REVID0r_REVID_REV_LETTERf_SET
#define DIG_REVID0r_REVID_REV_NUMBERf_GET BCMI_TSCF_GEN3_XGXS_DIG_REVID0r_REVID_REV_NUMBERf_GET
#define DIG_REVID0r_REVID_REV_NUMBERf_SET BCMI_TSCF_GEN3_XGXS_DIG_REVID0r_REVID_REV_NUMBERf_SET
#define DIG_REVID0r_REVID_BONDINGf_GET BCMI_TSCF_GEN3_XGXS_DIG_REVID0r_REVID_BONDINGf_GET
#define DIG_REVID0r_REVID_BONDINGf_SET BCMI_TSCF_GEN3_XGXS_DIG_REVID0r_REVID_BONDINGf_SET
#define DIG_REVID0r_REVID_PROCESSf_GET BCMI_TSCF_GEN3_XGXS_DIG_REVID0r_REVID_PROCESSf_GET
#define DIG_REVID0r_REVID_PROCESSf_SET BCMI_TSCF_GEN3_XGXS_DIG_REVID0r_REVID_PROCESSf_SET
#define DIG_REVID0r_REVID_MODELf_GET BCMI_TSCF_GEN3_XGXS_DIG_REVID0r_REVID_MODELf_GET
#define DIG_REVID0r_REVID_MODELf_SET BCMI_TSCF_GEN3_XGXS_DIG_REVID0r_REVID_MODELf_SET
#define READ_DIG_REVID0r BCMI_TSCF_GEN3_XGXS_READ_DIG_REVID0r
#define WRITE_DIG_REVID0r BCMI_TSCF_GEN3_XGXS_WRITE_DIG_REVID0r
#define MODIFY_DIG_REVID0r BCMI_TSCF_GEN3_XGXS_MODIFY_DIG_REVID0r
#define READLN_DIG_REVID0r BCMI_TSCF_GEN3_XGXS_READLN_DIG_REVID0r
#define WRITELN_DIG_REVID0r BCMI_TSCF_GEN3_XGXS_WRITELN_DIG_REVID0r
#define WRITEALL_DIG_REVID0r BCMI_TSCF_GEN3_XGXS_WRITEALL_DIG_REVID0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DIG_REVID0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DIG_RST_CTL_PMD
 * BLOCKS:   DIG_COM
 * REGADDR:  0xd101
 * DEVAD:    1
 * DESC:     RESET_CONTROL_PMD
 * RESETVAL: 0x1 (1)
 * ACCESS:   R/W
 * FIELDS:
 *     CORE_S_RSTB      Active Low Core Level Soft Reset. If asserted by writing to 1'b0 will reset the whole core.This soft reset is equivalent to the hard reset input pin pmd_por_h_rstb. This regiter bit can only bereset by assertion of the hard reset input pin pmd_por_h_rstb
 */
#define BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_PMDr (0x0001d101 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_PMDr_SIZE 4

/*
 * This structure should be used to declare and program DIG_RST_CTL_PMD.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_PMDr_s {
	uint32_t v[1];
	uint32_t dig_rst_ctl_pmd[1];
	uint32_t _dig_rst_ctl_pmd;
} BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_PMDr_t;

#define BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_PMDr_CLR(r) (r).dig_rst_ctl_pmd[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_PMDr_SET(r,d) (r).dig_rst_ctl_pmd[0] = d
#define BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_PMDr_GET(r) (r).dig_rst_ctl_pmd[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_PMDr_CORE_S_RSTBf_GET(r) (((r).dig_rst_ctl_pmd[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_PMDr_CORE_S_RSTBf_SET(r,f) (r).dig_rst_ctl_pmd[0]=(((r).dig_rst_ctl_pmd[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access DIG_RST_CTL_PMD.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DIG_RST_CTL_PMDr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_PMDr,(_r._dig_rst_ctl_pmd))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DIG_RST_CTL_PMDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_PMDr,(_r._dig_rst_ctl_pmd)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DIG_RST_CTL_PMDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_PMDr,(_r._dig_rst_ctl_pmd))
#define BCMI_TSCF_GEN3_XGXS_READLN_DIG_RST_CTL_PMDr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_PMDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_rst_ctl_pmd))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DIG_RST_CTL_PMDr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_PMDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_rst_ctl_pmd))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DIG_RST_CTL_PMDr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_PMDr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dig_rst_ctl_pmd))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DIG_RST_CTL_PMDr BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_PMDr
#define DIG_RST_CTL_PMDr_SIZE BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_PMDr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_PMDr_t DIG_RST_CTL_PMDr_t;
#define DIG_RST_CTL_PMDr_CLR BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_PMDr_CLR
#define DIG_RST_CTL_PMDr_SET BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_PMDr_SET
#define DIG_RST_CTL_PMDr_GET BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_PMDr_GET
#define DIG_RST_CTL_PMDr_CORE_S_RSTBf_GET BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_PMDr_CORE_S_RSTBf_GET
#define DIG_RST_CTL_PMDr_CORE_S_RSTBf_SET BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_PMDr_CORE_S_RSTBf_SET
#define READ_DIG_RST_CTL_PMDr BCMI_TSCF_GEN3_XGXS_READ_DIG_RST_CTL_PMDr
#define WRITE_DIG_RST_CTL_PMDr BCMI_TSCF_GEN3_XGXS_WRITE_DIG_RST_CTL_PMDr
#define MODIFY_DIG_RST_CTL_PMDr BCMI_TSCF_GEN3_XGXS_MODIFY_DIG_RST_CTL_PMDr
#define READLN_DIG_RST_CTL_PMDr BCMI_TSCF_GEN3_XGXS_READLN_DIG_RST_CTL_PMDr
#define WRITELN_DIG_RST_CTL_PMDr BCMI_TSCF_GEN3_XGXS_WRITELN_DIG_RST_CTL_PMDr
#define WRITEALL_DIG_RST_CTL_PMDr BCMI_TSCF_GEN3_XGXS_WRITEALL_DIG_RST_CTL_PMDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_PMDr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DIG_RST_CTL_CORE_DP
 * BLOCKS:   DIG_COM
 * REGADDR:  0xd102
 * DEVAD:    1
 * DESC:     RESET_CONTROL_CORE_DP
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     SUP_RST_SEQ_FRC_VAL Suppress reset sequence force value.
 *     SUP_RST_SEQ_FRC  Suppress reset sequence force.
 *     PMD_MDIO_TRANS_PKILL 1'b1 will disable the pmd_mdio_trans pin.
 *     DISABLE_ACK_TIMEOUT Setting this bit to 1 disables the ack timeout for all ports.
 */
#define BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_CORE_DPr (0x0001d102 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_CORE_DPr_SIZE 4

/*
 * This structure should be used to declare and program DIG_RST_CTL_CORE_DP.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_CORE_DPr_s {
	uint32_t v[1];
	uint32_t dig_rst_ctl_core_dp[1];
	uint32_t _dig_rst_ctl_core_dp;
} BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_CORE_DPr_t;

#define BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_CORE_DPr_CLR(r) (r).dig_rst_ctl_core_dp[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_CORE_DPr_SET(r,d) (r).dig_rst_ctl_core_dp[0] = d
#define BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_CORE_DPr_GET(r) (r).dig_rst_ctl_core_dp[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_CORE_DPr_DISABLE_ACK_TIMEOUTf_GET(r) ((((r).dig_rst_ctl_core_dp[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_CORE_DPr_DISABLE_ACK_TIMEOUTf_SET(r,f) (r).dig_rst_ctl_core_dp[0]=(((r).dig_rst_ctl_core_dp[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_CORE_DPr_PMD_MDIO_TRANS_PKILLf_GET(r) ((((r).dig_rst_ctl_core_dp[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_CORE_DPr_PMD_MDIO_TRANS_PKILLf_SET(r,f) (r).dig_rst_ctl_core_dp[0]=(((r).dig_rst_ctl_core_dp[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_CORE_DPr_SUP_RST_SEQ_FRCf_GET(r) ((((r).dig_rst_ctl_core_dp[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_CORE_DPr_SUP_RST_SEQ_FRCf_SET(r,f) (r).dig_rst_ctl_core_dp[0]=(((r).dig_rst_ctl_core_dp[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_CORE_DPr_SUP_RST_SEQ_FRC_VALf_GET(r) ((((r).dig_rst_ctl_core_dp[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_CORE_DPr_SUP_RST_SEQ_FRC_VALf_SET(r,f) (r).dig_rst_ctl_core_dp[0]=(((r).dig_rst_ctl_core_dp[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))

/*
 * These macros can be used to access DIG_RST_CTL_CORE_DP.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DIG_RST_CTL_CORE_DPr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_CORE_DPr,(_r._dig_rst_ctl_core_dp))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DIG_RST_CTL_CORE_DPr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_CORE_DPr,(_r._dig_rst_ctl_core_dp)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DIG_RST_CTL_CORE_DPr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_CORE_DPr,(_r._dig_rst_ctl_core_dp))
#define BCMI_TSCF_GEN3_XGXS_READLN_DIG_RST_CTL_CORE_DPr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_CORE_DPr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_rst_ctl_core_dp))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DIG_RST_CTL_CORE_DPr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_CORE_DPr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_rst_ctl_core_dp))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DIG_RST_CTL_CORE_DPr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_CORE_DPr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dig_rst_ctl_core_dp))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DIG_RST_CTL_CORE_DPr BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_CORE_DPr
#define DIG_RST_CTL_CORE_DPr_SIZE BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_CORE_DPr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_CORE_DPr_t DIG_RST_CTL_CORE_DPr_t;
#define DIG_RST_CTL_CORE_DPr_CLR BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_CORE_DPr_CLR
#define DIG_RST_CTL_CORE_DPr_SET BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_CORE_DPr_SET
#define DIG_RST_CTL_CORE_DPr_GET BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_CORE_DPr_GET
#define DIG_RST_CTL_CORE_DPr_DISABLE_ACK_TIMEOUTf_GET BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_CORE_DPr_DISABLE_ACK_TIMEOUTf_GET
#define DIG_RST_CTL_CORE_DPr_DISABLE_ACK_TIMEOUTf_SET BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_CORE_DPr_DISABLE_ACK_TIMEOUTf_SET
#define DIG_RST_CTL_CORE_DPr_PMD_MDIO_TRANS_PKILLf_GET BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_CORE_DPr_PMD_MDIO_TRANS_PKILLf_GET
#define DIG_RST_CTL_CORE_DPr_PMD_MDIO_TRANS_PKILLf_SET BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_CORE_DPr_PMD_MDIO_TRANS_PKILLf_SET
#define DIG_RST_CTL_CORE_DPr_SUP_RST_SEQ_FRCf_GET BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_CORE_DPr_SUP_RST_SEQ_FRCf_GET
#define DIG_RST_CTL_CORE_DPr_SUP_RST_SEQ_FRCf_SET BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_CORE_DPr_SUP_RST_SEQ_FRCf_SET
#define DIG_RST_CTL_CORE_DPr_SUP_RST_SEQ_FRC_VALf_GET BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_CORE_DPr_SUP_RST_SEQ_FRC_VALf_GET
#define DIG_RST_CTL_CORE_DPr_SUP_RST_SEQ_FRC_VALf_SET BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_CORE_DPr_SUP_RST_SEQ_FRC_VALf_SET
#define READ_DIG_RST_CTL_CORE_DPr BCMI_TSCF_GEN3_XGXS_READ_DIG_RST_CTL_CORE_DPr
#define WRITE_DIG_RST_CTL_CORE_DPr BCMI_TSCF_GEN3_XGXS_WRITE_DIG_RST_CTL_CORE_DPr
#define MODIFY_DIG_RST_CTL_CORE_DPr BCMI_TSCF_GEN3_XGXS_MODIFY_DIG_RST_CTL_CORE_DPr
#define READLN_DIG_RST_CTL_CORE_DPr BCMI_TSCF_GEN3_XGXS_READLN_DIG_RST_CTL_CORE_DPr
#define WRITELN_DIG_RST_CTL_CORE_DPr BCMI_TSCF_GEN3_XGXS_WRITELN_DIG_RST_CTL_CORE_DPr
#define WRITEALL_DIG_RST_CTL_CORE_DPr BCMI_TSCF_GEN3_XGXS_WRITEALL_DIG_RST_CTL_CORE_DPr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DIG_RST_CTL_CORE_DPr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DIG_MASKDATA
 * BLOCKS:   DIG_COM
 * REGADDR:  0xd103
 * DEVAD:    1
 * DESC:     MASKDATA_REG
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MASKDATA         maskdata for writes that can be used with any PMI port (PMI_HP, PMI_LP or PMI_MDIO). This register will get reset to 0 after each transaction.
 */
#define BCMI_TSCF_GEN3_XGXS_DIG_MASKDATAr (0x0001d103 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DIG_MASKDATAr_SIZE 4

/*
 * This structure should be used to declare and program DIG_MASKDATA.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DIG_MASKDATAr_s {
	uint32_t v[1];
	uint32_t dig_maskdata[1];
	uint32_t _dig_maskdata;
} BCMI_TSCF_GEN3_XGXS_DIG_MASKDATAr_t;

#define BCMI_TSCF_GEN3_XGXS_DIG_MASKDATAr_CLR(r) (r).dig_maskdata[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DIG_MASKDATAr_SET(r,d) (r).dig_maskdata[0] = d
#define BCMI_TSCF_GEN3_XGXS_DIG_MASKDATAr_GET(r) (r).dig_maskdata[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DIG_MASKDATAr_MASKDATAf_GET(r) (((r).dig_maskdata[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_DIG_MASKDATAr_MASKDATAf_SET(r,f) (r).dig_maskdata[0]=(((r).dig_maskdata[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access DIG_MASKDATA.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DIG_MASKDATAr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DIG_MASKDATAr,(_r._dig_maskdata))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DIG_MASKDATAr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DIG_MASKDATAr,(_r._dig_maskdata)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DIG_MASKDATAr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DIG_MASKDATAr,(_r._dig_maskdata))
#define BCMI_TSCF_GEN3_XGXS_READLN_DIG_MASKDATAr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DIG_MASKDATAr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_maskdata))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DIG_MASKDATAr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DIG_MASKDATAr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_maskdata))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DIG_MASKDATAr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DIG_MASKDATAr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dig_maskdata))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DIG_MASKDATAr BCMI_TSCF_GEN3_XGXS_DIG_MASKDATAr
#define DIG_MASKDATAr_SIZE BCMI_TSCF_GEN3_XGXS_DIG_MASKDATAr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DIG_MASKDATAr_t DIG_MASKDATAr_t;
#define DIG_MASKDATAr_CLR BCMI_TSCF_GEN3_XGXS_DIG_MASKDATAr_CLR
#define DIG_MASKDATAr_SET BCMI_TSCF_GEN3_XGXS_DIG_MASKDATAr_SET
#define DIG_MASKDATAr_GET BCMI_TSCF_GEN3_XGXS_DIG_MASKDATAr_GET
#define DIG_MASKDATAr_MASKDATAf_GET BCMI_TSCF_GEN3_XGXS_DIG_MASKDATAr_MASKDATAf_GET
#define DIG_MASKDATAr_MASKDATAf_SET BCMI_TSCF_GEN3_XGXS_DIG_MASKDATAr_MASKDATAf_SET
#define READ_DIG_MASKDATAr BCMI_TSCF_GEN3_XGXS_READ_DIG_MASKDATAr
#define WRITE_DIG_MASKDATAr BCMI_TSCF_GEN3_XGXS_WRITE_DIG_MASKDATAr
#define MODIFY_DIG_MASKDATAr BCMI_TSCF_GEN3_XGXS_MODIFY_DIG_MASKDATAr
#define READLN_DIG_MASKDATAr BCMI_TSCF_GEN3_XGXS_READLN_DIG_MASKDATAr
#define WRITELN_DIG_MASKDATAr BCMI_TSCF_GEN3_XGXS_WRITELN_DIG_MASKDATAr
#define WRITEALL_DIG_MASKDATAr BCMI_TSCF_GEN3_XGXS_WRITEALL_DIG_MASKDATAr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DIG_MASKDATAr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DIG_TOP_USER_CTL0
 * BLOCKS:   DIG_COM
 * REGADDR:  0xd104
 * DEVAD:    1
 * DESC:     TOP_USER_CONTROL_0
 * RESETVAL: 0x271 (625)
 * ACCESS:   R/W
 * FIELDS:
 *     HEARTBEAT_COUNT_1US Heartbeat timer count in comclk cycles to create 1us heartbeat_1us period. It should be programmed to the nearest increment of 0.25Mhz value of the comclk frequency in Mhz.For example, for comclk of 125 Mhz, it should be programmed to 10'd500. For 156.25 Mhz comclk, it should be programmed to 10'd625 and similarly for any other comclk frequency.
 *     MASKDATA_BUS_ASSIGN This 2-bit register is used to assign the maskdata bus to any port .00: maskdata register is assigned to MDIO port01: maskdata register is assigned to PMI_HP port10: maskdata register is assigned to PMI_LP port11: maskdata register is not assigned to any port
 *     UC_ACTIVE        When set to 1'b1 then Hardware should wait for uC handshakes to wake up from datapath resetWhen set to 1'b0 then Hardware can internally assume that uc_ack_* = 1.
 */
#define BCMI_TSCF_GEN3_XGXS_DIG_TOP_USER_CTL0r (0x0001d104 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DIG_TOP_USER_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program DIG_TOP_USER_CTL0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DIG_TOP_USER_CTL0r_s {
	uint32_t v[1];
	uint32_t dig_top_user_ctl0[1];
	uint32_t _dig_top_user_ctl0;
} BCMI_TSCF_GEN3_XGXS_DIG_TOP_USER_CTL0r_t;

#define BCMI_TSCF_GEN3_XGXS_DIG_TOP_USER_CTL0r_CLR(r) (r).dig_top_user_ctl0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DIG_TOP_USER_CTL0r_SET(r,d) (r).dig_top_user_ctl0[0] = d
#define BCMI_TSCF_GEN3_XGXS_DIG_TOP_USER_CTL0r_GET(r) (r).dig_top_user_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DIG_TOP_USER_CTL0r_UC_ACTIVEf_GET(r) ((((r).dig_top_user_ctl0[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DIG_TOP_USER_CTL0r_UC_ACTIVEf_SET(r,f) (r).dig_top_user_ctl0[0]=(((r).dig_top_user_ctl0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_DIG_TOP_USER_CTL0r_MASKDATA_BUS_ASSIGNf_GET(r) ((((r).dig_top_user_ctl0[0]) >> 10) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_DIG_TOP_USER_CTL0r_MASKDATA_BUS_ASSIGNf_SET(r,f) (r).dig_top_user_ctl0[0]=(((r).dig_top_user_ctl0[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10)) | (3 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_DIG_TOP_USER_CTL0r_HEARTBEAT_COUNT_1USf_GET(r) (((r).dig_top_user_ctl0[0]) & 0x3ff)
#define BCMI_TSCF_GEN3_XGXS_DIG_TOP_USER_CTL0r_HEARTBEAT_COUNT_1USf_SET(r,f) (r).dig_top_user_ctl0[0]=(((r).dig_top_user_ctl0[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff)) | (0x3ff << 16)

/*
 * These macros can be used to access DIG_TOP_USER_CTL0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DIG_TOP_USER_CTL0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DIG_TOP_USER_CTL0r,(_r._dig_top_user_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DIG_TOP_USER_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DIG_TOP_USER_CTL0r,(_r._dig_top_user_ctl0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DIG_TOP_USER_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DIG_TOP_USER_CTL0r,(_r._dig_top_user_ctl0))
#define BCMI_TSCF_GEN3_XGXS_READLN_DIG_TOP_USER_CTL0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DIG_TOP_USER_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_top_user_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DIG_TOP_USER_CTL0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DIG_TOP_USER_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_top_user_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DIG_TOP_USER_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DIG_TOP_USER_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dig_top_user_ctl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DIG_TOP_USER_CTL0r BCMI_TSCF_GEN3_XGXS_DIG_TOP_USER_CTL0r
#define DIG_TOP_USER_CTL0r_SIZE BCMI_TSCF_GEN3_XGXS_DIG_TOP_USER_CTL0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DIG_TOP_USER_CTL0r_t DIG_TOP_USER_CTL0r_t;
#define DIG_TOP_USER_CTL0r_CLR BCMI_TSCF_GEN3_XGXS_DIG_TOP_USER_CTL0r_CLR
#define DIG_TOP_USER_CTL0r_SET BCMI_TSCF_GEN3_XGXS_DIG_TOP_USER_CTL0r_SET
#define DIG_TOP_USER_CTL0r_GET BCMI_TSCF_GEN3_XGXS_DIG_TOP_USER_CTL0r_GET
#define DIG_TOP_USER_CTL0r_UC_ACTIVEf_GET BCMI_TSCF_GEN3_XGXS_DIG_TOP_USER_CTL0r_UC_ACTIVEf_GET
#define DIG_TOP_USER_CTL0r_UC_ACTIVEf_SET BCMI_TSCF_GEN3_XGXS_DIG_TOP_USER_CTL0r_UC_ACTIVEf_SET
#define DIG_TOP_USER_CTL0r_MASKDATA_BUS_ASSIGNf_GET BCMI_TSCF_GEN3_XGXS_DIG_TOP_USER_CTL0r_MASKDATA_BUS_ASSIGNf_GET
#define DIG_TOP_USER_CTL0r_MASKDATA_BUS_ASSIGNf_SET BCMI_TSCF_GEN3_XGXS_DIG_TOP_USER_CTL0r_MASKDATA_BUS_ASSIGNf_SET
#define DIG_TOP_USER_CTL0r_HEARTBEAT_COUNT_1USf_GET BCMI_TSCF_GEN3_XGXS_DIG_TOP_USER_CTL0r_HEARTBEAT_COUNT_1USf_GET
#define DIG_TOP_USER_CTL0r_HEARTBEAT_COUNT_1USf_SET BCMI_TSCF_GEN3_XGXS_DIG_TOP_USER_CTL0r_HEARTBEAT_COUNT_1USf_SET
#define READ_DIG_TOP_USER_CTL0r BCMI_TSCF_GEN3_XGXS_READ_DIG_TOP_USER_CTL0r
#define WRITE_DIG_TOP_USER_CTL0r BCMI_TSCF_GEN3_XGXS_WRITE_DIG_TOP_USER_CTL0r
#define MODIFY_DIG_TOP_USER_CTL0r BCMI_TSCF_GEN3_XGXS_MODIFY_DIG_TOP_USER_CTL0r
#define READLN_DIG_TOP_USER_CTL0r BCMI_TSCF_GEN3_XGXS_READLN_DIG_TOP_USER_CTL0r
#define WRITELN_DIG_TOP_USER_CTL0r BCMI_TSCF_GEN3_XGXS_WRITELN_DIG_TOP_USER_CTL0r
#define WRITEALL_DIG_TOP_USER_CTL0r BCMI_TSCF_GEN3_XGXS_WRITEALL_DIG_TOP_USER_CTL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DIG_TOP_USER_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DIG_CORE_RST_OCC_CTL
 * BLOCKS:   DIG_COM
 * REGADDR:  0xd106
 * DEVAD:    1
 * DESC:     CORE_REG_RESET_OCCURRED_CONTROL
 * RESETVAL: 0x1 (1)
 * ACCESS:   R/W
 * FIELDS:
 *     CORE_REG_RESET_OCCURRED Set to 1'b1 upon core level register reset and remains so until cleared by register write from uC.
 */
#define BCMI_TSCF_GEN3_XGXS_DIG_CORE_RST_OCC_CTLr (0x0001d106 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DIG_CORE_RST_OCC_CTLr_SIZE 4

/*
 * This structure should be used to declare and program DIG_CORE_RST_OCC_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DIG_CORE_RST_OCC_CTLr_s {
	uint32_t v[1];
	uint32_t dig_core_rst_occ_ctl[1];
	uint32_t _dig_core_rst_occ_ctl;
} BCMI_TSCF_GEN3_XGXS_DIG_CORE_RST_OCC_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_DIG_CORE_RST_OCC_CTLr_CLR(r) (r).dig_core_rst_occ_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DIG_CORE_RST_OCC_CTLr_SET(r,d) (r).dig_core_rst_occ_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_DIG_CORE_RST_OCC_CTLr_GET(r) (r).dig_core_rst_occ_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DIG_CORE_RST_OCC_CTLr_CORE_REG_RESET_OCCURREDf_GET(r) (((r).dig_core_rst_occ_ctl[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DIG_CORE_RST_OCC_CTLr_CORE_REG_RESET_OCCURREDf_SET(r,f) (r).dig_core_rst_occ_ctl[0]=(((r).dig_core_rst_occ_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access DIG_CORE_RST_OCC_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DIG_CORE_RST_OCC_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DIG_CORE_RST_OCC_CTLr,(_r._dig_core_rst_occ_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DIG_CORE_RST_OCC_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DIG_CORE_RST_OCC_CTLr,(_r._dig_core_rst_occ_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DIG_CORE_RST_OCC_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DIG_CORE_RST_OCC_CTLr,(_r._dig_core_rst_occ_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_DIG_CORE_RST_OCC_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DIG_CORE_RST_OCC_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_core_rst_occ_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DIG_CORE_RST_OCC_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DIG_CORE_RST_OCC_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_core_rst_occ_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DIG_CORE_RST_OCC_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DIG_CORE_RST_OCC_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dig_core_rst_occ_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DIG_CORE_RST_OCC_CTLr BCMI_TSCF_GEN3_XGXS_DIG_CORE_RST_OCC_CTLr
#define DIG_CORE_RST_OCC_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_DIG_CORE_RST_OCC_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DIG_CORE_RST_OCC_CTLr_t DIG_CORE_RST_OCC_CTLr_t;
#define DIG_CORE_RST_OCC_CTLr_CLR BCMI_TSCF_GEN3_XGXS_DIG_CORE_RST_OCC_CTLr_CLR
#define DIG_CORE_RST_OCC_CTLr_SET BCMI_TSCF_GEN3_XGXS_DIG_CORE_RST_OCC_CTLr_SET
#define DIG_CORE_RST_OCC_CTLr_GET BCMI_TSCF_GEN3_XGXS_DIG_CORE_RST_OCC_CTLr_GET
#define DIG_CORE_RST_OCC_CTLr_CORE_REG_RESET_OCCURREDf_GET BCMI_TSCF_GEN3_XGXS_DIG_CORE_RST_OCC_CTLr_CORE_REG_RESET_OCCURREDf_GET
#define DIG_CORE_RST_OCC_CTLr_CORE_REG_RESET_OCCURREDf_SET BCMI_TSCF_GEN3_XGXS_DIG_CORE_RST_OCC_CTLr_CORE_REG_RESET_OCCURREDf_SET
#define READ_DIG_CORE_RST_OCC_CTLr BCMI_TSCF_GEN3_XGXS_READ_DIG_CORE_RST_OCC_CTLr
#define WRITE_DIG_CORE_RST_OCC_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_DIG_CORE_RST_OCC_CTLr
#define MODIFY_DIG_CORE_RST_OCC_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_DIG_CORE_RST_OCC_CTLr
#define READLN_DIG_CORE_RST_OCC_CTLr BCMI_TSCF_GEN3_XGXS_READLN_DIG_CORE_RST_OCC_CTLr
#define WRITELN_DIG_CORE_RST_OCC_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_DIG_CORE_RST_OCC_CTLr
#define WRITEALL_DIG_CORE_RST_OCC_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_DIG_CORE_RST_OCC_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DIG_CORE_RST_OCC_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DIG_RST_SEQ_TMR_CTL
 * BLOCKS:   DIG_COM
 * REGADDR:  0xd107
 * DEVAD:    1
 * DESC:     RST_SEQ_TIMER_CONTROL
 * RESETVAL: 0x8304 (33540)
 * ACCESS:   R/W
 * FIELDS:
 *     RST_SEQ_TIMER    Defines the number of comclk cycles between de-assertion of AFE RX/TX lane reset and clock muxing from comclk to lane clock.Valid value range is from 0 to 7 which will provide from 2 to 16 clock cycles between de-assertion of AFE RX/TX lane resetand clock muxing from comclk to lane clock. Wait_time = 2 * (rst_seq_timer + 1).
 *     PWRDN_SEQ_TIMER  Defines the number of comclk cycles between de-assertion of AFE RX/TX lane pwrdn and clock muxing from comclk to lane clock.Valid value range is from 0 to 7 which will provide from 8 to 64 clock cycles between de-assertion of AFE RX/TX lane pwrdnand clock muxing from comclk to lane clock. Wait_time = 8 * (pwrdn_seq_timer + 1).
 *     RST_SEQ_DIS_FLT_MODE Defines the filter mode for rst_seq_dis/pmd_mdio_trans pin.2'd0 - filter is bypassed where input is passed to output untouched.2'd1 - filter output is 16 comclk cycles if input is > 16 comclk cycles else output is same as input signal.2'd2 - filter output is 20 comclk cycles if input is > 20 comclk cycles else output is same as input signal.2'd3 - filter output is 24 comclk cycles if input is > 24 comclk cycles else output is same as input signal.
 */
#define BCMI_TSCF_GEN3_XGXS_DIG_RST_SEQ_TMR_CTLr (0x0001d107 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DIG_RST_SEQ_TMR_CTLr_SIZE 4

/*
 * This structure should be used to declare and program DIG_RST_SEQ_TMR_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DIG_RST_SEQ_TMR_CTLr_s {
	uint32_t v[1];
	uint32_t dig_rst_seq_tmr_ctl[1];
	uint32_t _dig_rst_seq_tmr_ctl;
} BCMI_TSCF_GEN3_XGXS_DIG_RST_SEQ_TMR_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_DIG_RST_SEQ_TMR_CTLr_CLR(r) (r).dig_rst_seq_tmr_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DIG_RST_SEQ_TMR_CTLr_SET(r,d) (r).dig_rst_seq_tmr_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_DIG_RST_SEQ_TMR_CTLr_GET(r) (r).dig_rst_seq_tmr_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DIG_RST_SEQ_TMR_CTLr_RST_SEQ_DIS_FLT_MODEf_GET(r) ((((r).dig_rst_seq_tmr_ctl[0]) >> 14) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_DIG_RST_SEQ_TMR_CTLr_RST_SEQ_DIS_FLT_MODEf_SET(r,f) (r).dig_rst_seq_tmr_ctl[0]=(((r).dig_rst_seq_tmr_ctl[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_DIG_RST_SEQ_TMR_CTLr_PWRDN_SEQ_TIMERf_GET(r) ((((r).dig_rst_seq_tmr_ctl[0]) >> 8) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_DIG_RST_SEQ_TMR_CTLr_PWRDN_SEQ_TIMERf_SET(r,f) (r).dig_rst_seq_tmr_ctl[0]=(((r).dig_rst_seq_tmr_ctl[0] & ~((uint32_t)0x7 << 8)) | ((((uint32_t)f) & 0x7) << 8)) | (7 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_DIG_RST_SEQ_TMR_CTLr_RST_SEQ_TIMERf_GET(r) (((r).dig_rst_seq_tmr_ctl[0]) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_DIG_RST_SEQ_TMR_CTLr_RST_SEQ_TIMERf_SET(r,f) (r).dig_rst_seq_tmr_ctl[0]=(((r).dig_rst_seq_tmr_ctl[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access DIG_RST_SEQ_TMR_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DIG_RST_SEQ_TMR_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DIG_RST_SEQ_TMR_CTLr,(_r._dig_rst_seq_tmr_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DIG_RST_SEQ_TMR_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DIG_RST_SEQ_TMR_CTLr,(_r._dig_rst_seq_tmr_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DIG_RST_SEQ_TMR_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DIG_RST_SEQ_TMR_CTLr,(_r._dig_rst_seq_tmr_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_DIG_RST_SEQ_TMR_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DIG_RST_SEQ_TMR_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_rst_seq_tmr_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DIG_RST_SEQ_TMR_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DIG_RST_SEQ_TMR_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_rst_seq_tmr_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DIG_RST_SEQ_TMR_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DIG_RST_SEQ_TMR_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dig_rst_seq_tmr_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DIG_RST_SEQ_TMR_CTLr BCMI_TSCF_GEN3_XGXS_DIG_RST_SEQ_TMR_CTLr
#define DIG_RST_SEQ_TMR_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_DIG_RST_SEQ_TMR_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DIG_RST_SEQ_TMR_CTLr_t DIG_RST_SEQ_TMR_CTLr_t;
#define DIG_RST_SEQ_TMR_CTLr_CLR BCMI_TSCF_GEN3_XGXS_DIG_RST_SEQ_TMR_CTLr_CLR
#define DIG_RST_SEQ_TMR_CTLr_SET BCMI_TSCF_GEN3_XGXS_DIG_RST_SEQ_TMR_CTLr_SET
#define DIG_RST_SEQ_TMR_CTLr_GET BCMI_TSCF_GEN3_XGXS_DIG_RST_SEQ_TMR_CTLr_GET
#define DIG_RST_SEQ_TMR_CTLr_RST_SEQ_DIS_FLT_MODEf_GET BCMI_TSCF_GEN3_XGXS_DIG_RST_SEQ_TMR_CTLr_RST_SEQ_DIS_FLT_MODEf_GET
#define DIG_RST_SEQ_TMR_CTLr_RST_SEQ_DIS_FLT_MODEf_SET BCMI_TSCF_GEN3_XGXS_DIG_RST_SEQ_TMR_CTLr_RST_SEQ_DIS_FLT_MODEf_SET
#define DIG_RST_SEQ_TMR_CTLr_PWRDN_SEQ_TIMERf_GET BCMI_TSCF_GEN3_XGXS_DIG_RST_SEQ_TMR_CTLr_PWRDN_SEQ_TIMERf_GET
#define DIG_RST_SEQ_TMR_CTLr_PWRDN_SEQ_TIMERf_SET BCMI_TSCF_GEN3_XGXS_DIG_RST_SEQ_TMR_CTLr_PWRDN_SEQ_TIMERf_SET
#define DIG_RST_SEQ_TMR_CTLr_RST_SEQ_TIMERf_GET BCMI_TSCF_GEN3_XGXS_DIG_RST_SEQ_TMR_CTLr_RST_SEQ_TIMERf_GET
#define DIG_RST_SEQ_TMR_CTLr_RST_SEQ_TIMERf_SET BCMI_TSCF_GEN3_XGXS_DIG_RST_SEQ_TMR_CTLr_RST_SEQ_TIMERf_SET
#define READ_DIG_RST_SEQ_TMR_CTLr BCMI_TSCF_GEN3_XGXS_READ_DIG_RST_SEQ_TMR_CTLr
#define WRITE_DIG_RST_SEQ_TMR_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_DIG_RST_SEQ_TMR_CTLr
#define MODIFY_DIG_RST_SEQ_TMR_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_DIG_RST_SEQ_TMR_CTLr
#define READLN_DIG_RST_SEQ_TMR_CTLr BCMI_TSCF_GEN3_XGXS_READLN_DIG_RST_SEQ_TMR_CTLr
#define WRITELN_DIG_RST_SEQ_TMR_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_DIG_RST_SEQ_TMR_CTLr
#define WRITEALL_DIG_RST_SEQ_TMR_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_DIG_RST_SEQ_TMR_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DIG_RST_SEQ_TMR_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DIG_CORE_DP_RST_ST_STS
 * BLOCKS:   DIG_COM
 * REGADDR:  0xd108
 * DEVAD:    1
 * DESC:     CORE_DP_RESET_STATE_STATUS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TX_LANE_RESET_RELEASED_INDEX Index of the lane number of the first TX lane in lane_reset_released state.
 *     LANE_RESET_RELEASED_INDEX Index of the lane number of the first RX lane in lane_reset_released state.
 *     LANE_RESET_RELEASED indicates if a lane is currently at {rx_lane_dp_reset_active, rx_lane_dp_reset_occurred} = 01.
 *     TX_LANE_RESET_RELEASED indicates if a lane is currently at {tx_lane_dp_reset_active, tx_lane_dp_reset_occurred} = 01.
 */
#define BCMI_TSCF_GEN3_XGXS_DIG_CORE_DP_RST_ST_STSr (0x0001d108 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DIG_CORE_DP_RST_ST_STSr_SIZE 4

/*
 * This structure should be used to declare and program DIG_CORE_DP_RST_ST_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DIG_CORE_DP_RST_ST_STSr_s {
	uint32_t v[1];
	uint32_t dig_core_dp_rst_st_sts[1];
	uint32_t _dig_core_dp_rst_st_sts;
} BCMI_TSCF_GEN3_XGXS_DIG_CORE_DP_RST_ST_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_DIG_CORE_DP_RST_ST_STSr_CLR(r) (r).dig_core_dp_rst_st_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DIG_CORE_DP_RST_ST_STSr_SET(r,d) (r).dig_core_dp_rst_st_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_DIG_CORE_DP_RST_ST_STSr_GET(r) (r).dig_core_dp_rst_st_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DIG_CORE_DP_RST_ST_STSr_TX_LANE_RESET_RELEASEDf_GET(r) ((((r).dig_core_dp_rst_st_sts[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DIG_CORE_DP_RST_ST_STSr_TX_LANE_RESET_RELEASEDf_SET(r,f) (r).dig_core_dp_rst_st_sts[0]=(((r).dig_core_dp_rst_st_sts[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_DIG_CORE_DP_RST_ST_STSr_LANE_RESET_RELEASEDf_GET(r) ((((r).dig_core_dp_rst_st_sts[0]) >> 14) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DIG_CORE_DP_RST_ST_STSr_LANE_RESET_RELEASEDf_SET(r,f) (r).dig_core_dp_rst_st_sts[0]=(((r).dig_core_dp_rst_st_sts[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_DIG_CORE_DP_RST_ST_STSr_LANE_RESET_RELEASED_INDEXf_GET(r) ((((r).dig_core_dp_rst_st_sts[0]) >> 8) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_DIG_CORE_DP_RST_ST_STSr_LANE_RESET_RELEASED_INDEXf_SET(r,f) (r).dig_core_dp_rst_st_sts[0]=(((r).dig_core_dp_rst_st_sts[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8)) | (31 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_DIG_CORE_DP_RST_ST_STSr_TX_LANE_RESET_RELEASED_INDEXf_GET(r) ((((r).dig_core_dp_rst_st_sts[0]) >> 3) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_DIG_CORE_DP_RST_ST_STSr_TX_LANE_RESET_RELEASED_INDEXf_SET(r,f) (r).dig_core_dp_rst_st_sts[0]=(((r).dig_core_dp_rst_st_sts[0] & ~((uint32_t)0x1f << 3)) | ((((uint32_t)f) & 0x1f) << 3)) | (31 << (16 + 3))

/*
 * These macros can be used to access DIG_CORE_DP_RST_ST_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DIG_CORE_DP_RST_ST_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DIG_CORE_DP_RST_ST_STSr,(_r._dig_core_dp_rst_st_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DIG_CORE_DP_RST_ST_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DIG_CORE_DP_RST_ST_STSr,(_r._dig_core_dp_rst_st_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DIG_CORE_DP_RST_ST_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DIG_CORE_DP_RST_ST_STSr,(_r._dig_core_dp_rst_st_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_DIG_CORE_DP_RST_ST_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DIG_CORE_DP_RST_ST_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_core_dp_rst_st_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DIG_CORE_DP_RST_ST_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DIG_CORE_DP_RST_ST_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_core_dp_rst_st_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DIG_CORE_DP_RST_ST_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DIG_CORE_DP_RST_ST_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dig_core_dp_rst_st_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DIG_CORE_DP_RST_ST_STSr BCMI_TSCF_GEN3_XGXS_DIG_CORE_DP_RST_ST_STSr
#define DIG_CORE_DP_RST_ST_STSr_SIZE BCMI_TSCF_GEN3_XGXS_DIG_CORE_DP_RST_ST_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DIG_CORE_DP_RST_ST_STSr_t DIG_CORE_DP_RST_ST_STSr_t;
#define DIG_CORE_DP_RST_ST_STSr_CLR BCMI_TSCF_GEN3_XGXS_DIG_CORE_DP_RST_ST_STSr_CLR
#define DIG_CORE_DP_RST_ST_STSr_SET BCMI_TSCF_GEN3_XGXS_DIG_CORE_DP_RST_ST_STSr_SET
#define DIG_CORE_DP_RST_ST_STSr_GET BCMI_TSCF_GEN3_XGXS_DIG_CORE_DP_RST_ST_STSr_GET
#define DIG_CORE_DP_RST_ST_STSr_TX_LANE_RESET_RELEASEDf_GET BCMI_TSCF_GEN3_XGXS_DIG_CORE_DP_RST_ST_STSr_TX_LANE_RESET_RELEASEDf_GET
#define DIG_CORE_DP_RST_ST_STSr_TX_LANE_RESET_RELEASEDf_SET BCMI_TSCF_GEN3_XGXS_DIG_CORE_DP_RST_ST_STSr_TX_LANE_RESET_RELEASEDf_SET
#define DIG_CORE_DP_RST_ST_STSr_LANE_RESET_RELEASEDf_GET BCMI_TSCF_GEN3_XGXS_DIG_CORE_DP_RST_ST_STSr_LANE_RESET_RELEASEDf_GET
#define DIG_CORE_DP_RST_ST_STSr_LANE_RESET_RELEASEDf_SET BCMI_TSCF_GEN3_XGXS_DIG_CORE_DP_RST_ST_STSr_LANE_RESET_RELEASEDf_SET
#define DIG_CORE_DP_RST_ST_STSr_LANE_RESET_RELEASED_INDEXf_GET BCMI_TSCF_GEN3_XGXS_DIG_CORE_DP_RST_ST_STSr_LANE_RESET_RELEASED_INDEXf_GET
#define DIG_CORE_DP_RST_ST_STSr_LANE_RESET_RELEASED_INDEXf_SET BCMI_TSCF_GEN3_XGXS_DIG_CORE_DP_RST_ST_STSr_LANE_RESET_RELEASED_INDEXf_SET
#define DIG_CORE_DP_RST_ST_STSr_TX_LANE_RESET_RELEASED_INDEXf_GET BCMI_TSCF_GEN3_XGXS_DIG_CORE_DP_RST_ST_STSr_TX_LANE_RESET_RELEASED_INDEXf_GET
#define DIG_CORE_DP_RST_ST_STSr_TX_LANE_RESET_RELEASED_INDEXf_SET BCMI_TSCF_GEN3_XGXS_DIG_CORE_DP_RST_ST_STSr_TX_LANE_RESET_RELEASED_INDEXf_SET
#define READ_DIG_CORE_DP_RST_ST_STSr BCMI_TSCF_GEN3_XGXS_READ_DIG_CORE_DP_RST_ST_STSr
#define WRITE_DIG_CORE_DP_RST_ST_STSr BCMI_TSCF_GEN3_XGXS_WRITE_DIG_CORE_DP_RST_ST_STSr
#define MODIFY_DIG_CORE_DP_RST_ST_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_DIG_CORE_DP_RST_ST_STSr
#define READLN_DIG_CORE_DP_RST_ST_STSr BCMI_TSCF_GEN3_XGXS_READLN_DIG_CORE_DP_RST_ST_STSr
#define WRITELN_DIG_CORE_DP_RST_ST_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_DIG_CORE_DP_RST_ST_STSr
#define WRITEALL_DIG_CORE_DP_RST_ST_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_DIG_CORE_DP_RST_ST_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DIG_CORE_DP_RST_ST_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DIG_REVID1
 * BLOCKS:   DIG_COM
 * REGADDR:  0xd10a
 * DEVAD:    1
 * DESC:     REVID1
 * RESETVAL: 0x403e (16446)
 * ACCESS:   R/O
 * FIELDS:
 *     REVID_EEE        EEE support present in core
 *     REVID_LLP        Ultra low latency path present in core
 *     REVID_PIR        PCS interface retiming flops present in core
 *     REVID_CL72       Clause 72 present in core
 *     REVID_MICRO      Microcontroller present in core
 *     REVID_MDIO       MDIO interface present in core
 *     REVID_MULTIPLICITY Number of lanes
 */
#define BCMI_TSCF_GEN3_XGXS_DIG_REVID1r (0x0001d10a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DIG_REVID1r_SIZE 4

/*
 * This structure should be used to declare and program DIG_REVID1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DIG_REVID1r_s {
	uint32_t v[1];
	uint32_t dig_revid1[1];
	uint32_t _dig_revid1;
} BCMI_TSCF_GEN3_XGXS_DIG_REVID1r_t;

#define BCMI_TSCF_GEN3_XGXS_DIG_REVID1r_CLR(r) (r).dig_revid1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DIG_REVID1r_SET(r,d) (r).dig_revid1[0] = d
#define BCMI_TSCF_GEN3_XGXS_DIG_REVID1r_GET(r) (r).dig_revid1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DIG_REVID1r_REVID_MULTIPLICITYf_GET(r) ((((r).dig_revid1[0]) >> 12) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DIG_REVID1r_REVID_MULTIPLICITYf_SET(r,f) (r).dig_revid1[0]=(((r).dig_revid1[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_DIG_REVID1r_REVID_MDIOf_GET(r) ((((r).dig_revid1[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DIG_REVID1r_REVID_MDIOf_SET(r,f) (r).dig_revid1[0]=(((r).dig_revid1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_DIG_REVID1r_REVID_MICROf_GET(r) ((((r).dig_revid1[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DIG_REVID1r_REVID_MICROf_SET(r,f) (r).dig_revid1[0]=(((r).dig_revid1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_DIG_REVID1r_REVID_CL72f_GET(r) ((((r).dig_revid1[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DIG_REVID1r_REVID_CL72f_SET(r,f) (r).dig_revid1[0]=(((r).dig_revid1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_DIG_REVID1r_REVID_PIRf_GET(r) ((((r).dig_revid1[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DIG_REVID1r_REVID_PIRf_SET(r,f) (r).dig_revid1[0]=(((r).dig_revid1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_DIG_REVID1r_REVID_LLPf_GET(r) ((((r).dig_revid1[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DIG_REVID1r_REVID_LLPf_SET(r,f) (r).dig_revid1[0]=(((r).dig_revid1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_DIG_REVID1r_REVID_EEEf_GET(r) (((r).dig_revid1[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_DIG_REVID1r_REVID_EEEf_SET(r,f) (r).dig_revid1[0]=(((r).dig_revid1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access DIG_REVID1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DIG_REVID1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DIG_REVID1r,(_r._dig_revid1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DIG_REVID1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DIG_REVID1r,(_r._dig_revid1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DIG_REVID1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DIG_REVID1r,(_r._dig_revid1))
#define BCMI_TSCF_GEN3_XGXS_READLN_DIG_REVID1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DIG_REVID1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_revid1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DIG_REVID1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DIG_REVID1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_revid1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DIG_REVID1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DIG_REVID1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dig_revid1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DIG_REVID1r BCMI_TSCF_GEN3_XGXS_DIG_REVID1r
#define DIG_REVID1r_SIZE BCMI_TSCF_GEN3_XGXS_DIG_REVID1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DIG_REVID1r_t DIG_REVID1r_t;
#define DIG_REVID1r_CLR BCMI_TSCF_GEN3_XGXS_DIG_REVID1r_CLR
#define DIG_REVID1r_SET BCMI_TSCF_GEN3_XGXS_DIG_REVID1r_SET
#define DIG_REVID1r_GET BCMI_TSCF_GEN3_XGXS_DIG_REVID1r_GET
#define DIG_REVID1r_REVID_MULTIPLICITYf_GET BCMI_TSCF_GEN3_XGXS_DIG_REVID1r_REVID_MULTIPLICITYf_GET
#define DIG_REVID1r_REVID_MULTIPLICITYf_SET BCMI_TSCF_GEN3_XGXS_DIG_REVID1r_REVID_MULTIPLICITYf_SET
#define DIG_REVID1r_REVID_MDIOf_GET BCMI_TSCF_GEN3_XGXS_DIG_REVID1r_REVID_MDIOf_GET
#define DIG_REVID1r_REVID_MDIOf_SET BCMI_TSCF_GEN3_XGXS_DIG_REVID1r_REVID_MDIOf_SET
#define DIG_REVID1r_REVID_MICROf_GET BCMI_TSCF_GEN3_XGXS_DIG_REVID1r_REVID_MICROf_GET
#define DIG_REVID1r_REVID_MICROf_SET BCMI_TSCF_GEN3_XGXS_DIG_REVID1r_REVID_MICROf_SET
#define DIG_REVID1r_REVID_CL72f_GET BCMI_TSCF_GEN3_XGXS_DIG_REVID1r_REVID_CL72f_GET
#define DIG_REVID1r_REVID_CL72f_SET BCMI_TSCF_GEN3_XGXS_DIG_REVID1r_REVID_CL72f_SET
#define DIG_REVID1r_REVID_PIRf_GET BCMI_TSCF_GEN3_XGXS_DIG_REVID1r_REVID_PIRf_GET
#define DIG_REVID1r_REVID_PIRf_SET BCMI_TSCF_GEN3_XGXS_DIG_REVID1r_REVID_PIRf_SET
#define DIG_REVID1r_REVID_LLPf_GET BCMI_TSCF_GEN3_XGXS_DIG_REVID1r_REVID_LLPf_GET
#define DIG_REVID1r_REVID_LLPf_SET BCMI_TSCF_GEN3_XGXS_DIG_REVID1r_REVID_LLPf_SET
#define DIG_REVID1r_REVID_EEEf_GET BCMI_TSCF_GEN3_XGXS_DIG_REVID1r_REVID_EEEf_GET
#define DIG_REVID1r_REVID_EEEf_SET BCMI_TSCF_GEN3_XGXS_DIG_REVID1r_REVID_EEEf_SET
#define READ_DIG_REVID1r BCMI_TSCF_GEN3_XGXS_READ_DIG_REVID1r
#define WRITE_DIG_REVID1r BCMI_TSCF_GEN3_XGXS_WRITE_DIG_REVID1r
#define MODIFY_DIG_REVID1r BCMI_TSCF_GEN3_XGXS_MODIFY_DIG_REVID1r
#define READLN_DIG_REVID1r BCMI_TSCF_GEN3_XGXS_READLN_DIG_REVID1r
#define WRITELN_DIG_REVID1r BCMI_TSCF_GEN3_XGXS_WRITELN_DIG_REVID1r
#define WRITEALL_DIG_REVID1r BCMI_TSCF_GEN3_XGXS_WRITEALL_DIG_REVID1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DIG_REVID1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  DIG_REVID2
 * BLOCKS:   DIG_COM
 * REGADDR:  0xd10e
 * DEVAD:    1
 * DESC:     REVID2
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     REVID2           Revision ID2 code
 */
#define BCMI_TSCF_GEN3_XGXS_DIG_REVID2r (0x0001d10e | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_DIG_REVID2r_SIZE 4

/*
 * This structure should be used to declare and program DIG_REVID2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_DIG_REVID2r_s {
	uint32_t v[1];
	uint32_t dig_revid2[1];
	uint32_t _dig_revid2;
} BCMI_TSCF_GEN3_XGXS_DIG_REVID2r_t;

#define BCMI_TSCF_GEN3_XGXS_DIG_REVID2r_CLR(r) (r).dig_revid2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_DIG_REVID2r_SET(r,d) (r).dig_revid2[0] = d
#define BCMI_TSCF_GEN3_XGXS_DIG_REVID2r_GET(r) (r).dig_revid2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_DIG_REVID2r_REVID2f_GET(r) (((r).dig_revid2[0]) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_DIG_REVID2r_REVID2f_SET(r,f) (r).dig_revid2[0]=(((r).dig_revid2[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access DIG_REVID2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_DIG_REVID2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DIG_REVID2r,(_r._dig_revid2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_DIG_REVID2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DIG_REVID2r,(_r._dig_revid2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_DIG_REVID2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DIG_REVID2r,(_r._dig_revid2))
#define BCMI_TSCF_GEN3_XGXS_READLN_DIG_REVID2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_DIG_REVID2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_revid2))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_DIG_REVID2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DIG_REVID2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_revid2))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_DIG_REVID2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_DIG_REVID2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dig_revid2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DIG_REVID2r BCMI_TSCF_GEN3_XGXS_DIG_REVID2r
#define DIG_REVID2r_SIZE BCMI_TSCF_GEN3_XGXS_DIG_REVID2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_DIG_REVID2r_t DIG_REVID2r_t;
#define DIG_REVID2r_CLR BCMI_TSCF_GEN3_XGXS_DIG_REVID2r_CLR
#define DIG_REVID2r_SET BCMI_TSCF_GEN3_XGXS_DIG_REVID2r_SET
#define DIG_REVID2r_GET BCMI_TSCF_GEN3_XGXS_DIG_REVID2r_GET
#define DIG_REVID2r_REVID2f_GET BCMI_TSCF_GEN3_XGXS_DIG_REVID2r_REVID2f_GET
#define DIG_REVID2r_REVID2f_SET BCMI_TSCF_GEN3_XGXS_DIG_REVID2r_REVID2f_SET
#define READ_DIG_REVID2r BCMI_TSCF_GEN3_XGXS_READ_DIG_REVID2r
#define WRITE_DIG_REVID2r BCMI_TSCF_GEN3_XGXS_WRITE_DIG_REVID2r
#define MODIFY_DIG_REVID2r BCMI_TSCF_GEN3_XGXS_MODIFY_DIG_REVID2r
#define READLN_DIG_REVID2r BCMI_TSCF_GEN3_XGXS_READLN_DIG_REVID2r
#define WRITELN_DIG_REVID2r BCMI_TSCF_GEN3_XGXS_WRITELN_DIG_REVID2r
#define WRITEALL_DIG_REVID2r BCMI_TSCF_GEN3_XGXS_WRITEALL_DIG_REVID2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_DIG_REVID2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AMS_PLL_PLL_CTL0
 * BLOCKS:   AMS_PLL_COM
 * REGADDR:  0xd110
 * DEVAD:    1
 * DESC:     AMS PLL CONTROL_0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_PLL_SET_CLK4PCS program clk freq for clk4pcs amsbus ctrl_out  1:0DFT_MUX
 *     AMS_PLL_CLK8T_EN Enable VCO/8 (pll_clk8T) clock output amsbus ctrl_out  2:2DFT_MUX
 *     AMS_PLL_SPARE_7_3 AMS reserved[7:3] amsbus ctrl_out  7:3DFT_MUX
 *     AMS_PLL_IMIN_ICLKIDRV1 see AMS amsbus ctrl_out  8:8DFT_MUX
 *     AMS_PLL_IMAX_ICLKIDRV1 see AMS amsbus ctrl_out  9:9DFT_MUX
 *     AMS_PLL_IMODE_ICLKIDRV1 Current control for input CML amsbus ctrl_out  10:10DFT_MUX
 *     AMS_PLL_CAL_OFF  Turns off ResCal, turns on cal_aux[3:0] amsbus ctrl_out  11:11DFT_MUX
 *     AMS_PLL_CAL_AUX  see AMS amsbus ctrl_out  15:12DFT_MUX
 */
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL0r (0x0001d110 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program AMS_PLL_PLL_CTL0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL0r_s {
	uint32_t v[1];
	uint32_t ams_pll_pll_ctl0[1];
	uint32_t _ams_pll_pll_ctl0;
} BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL0r_t;

#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL0r_CLR(r) (r).ams_pll_pll_ctl0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL0r_SET(r,d) (r).ams_pll_pll_ctl0[0] = d
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL0r_GET(r) (r).ams_pll_pll_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_CAL_AUXf_GET(r) ((((r).ams_pll_pll_ctl0[0]) >> 12) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_CAL_AUXf_SET(r,f) (r).ams_pll_pll_ctl0[0]=(((r).ams_pll_pll_ctl0[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_CAL_OFFf_GET(r) ((((r).ams_pll_pll_ctl0[0]) >> 11) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_CAL_OFFf_SET(r,f) (r).ams_pll_pll_ctl0[0]=(((r).ams_pll_pll_ctl0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_IMODE_ICLKIDRV1f_GET(r) ((((r).ams_pll_pll_ctl0[0]) >> 10) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_IMODE_ICLKIDRV1f_SET(r,f) (r).ams_pll_pll_ctl0[0]=(((r).ams_pll_pll_ctl0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_IMAX_ICLKIDRV1f_GET(r) ((((r).ams_pll_pll_ctl0[0]) >> 9) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_IMAX_ICLKIDRV1f_SET(r,f) (r).ams_pll_pll_ctl0[0]=(((r).ams_pll_pll_ctl0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_IMIN_ICLKIDRV1f_GET(r) ((((r).ams_pll_pll_ctl0[0]) >> 8) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_IMIN_ICLKIDRV1f_SET(r,f) (r).ams_pll_pll_ctl0[0]=(((r).ams_pll_pll_ctl0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_SPARE_7_3f_GET(r) ((((r).ams_pll_pll_ctl0[0]) >> 3) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_SPARE_7_3f_SET(r,f) (r).ams_pll_pll_ctl0[0]=(((r).ams_pll_pll_ctl0[0] & ~((uint32_t)0x1f << 3)) | ((((uint32_t)f) & 0x1f) << 3)) | (31 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_CLK8T_ENf_GET(r) ((((r).ams_pll_pll_ctl0[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_CLK8T_ENf_SET(r,f) (r).ams_pll_pll_ctl0[0]=(((r).ams_pll_pll_ctl0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_SET_CLK4PCSf_GET(r) (((r).ams_pll_pll_ctl0[0]) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_SET_CLK4PCSf_SET(r,f) (r).ams_pll_pll_ctl0[0]=(((r).ams_pll_pll_ctl0[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access AMS_PLL_PLL_CTL0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AMS_PLL_PLL_CTL0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL0r,(_r._ams_pll_pll_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AMS_PLL_PLL_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL0r,(_r._ams_pll_pll_ctl0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AMS_PLL_PLL_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL0r,(_r._ams_pll_pll_ctl0))
#define BCMI_TSCF_GEN3_XGXS_READLN_AMS_PLL_PLL_CTL0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AMS_PLL_PLL_CTL0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AMS_PLL_PLL_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_pll_pll_ctl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AMS_PLL_PLL_CTL0r BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL0r
#define AMS_PLL_PLL_CTL0r_SIZE BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL0r_t AMS_PLL_PLL_CTL0r_t;
#define AMS_PLL_PLL_CTL0r_CLR BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL0r_CLR
#define AMS_PLL_PLL_CTL0r_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL0r_SET
#define AMS_PLL_PLL_CTL0r_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL0r_GET
#define AMS_PLL_PLL_CTL0r_AMS_PLL_CAL_AUXf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_CAL_AUXf_GET
#define AMS_PLL_PLL_CTL0r_AMS_PLL_CAL_AUXf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_CAL_AUXf_SET
#define AMS_PLL_PLL_CTL0r_AMS_PLL_CAL_OFFf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_CAL_OFFf_GET
#define AMS_PLL_PLL_CTL0r_AMS_PLL_CAL_OFFf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_CAL_OFFf_SET
#define AMS_PLL_PLL_CTL0r_AMS_PLL_IMODE_ICLKIDRV1f_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_IMODE_ICLKIDRV1f_GET
#define AMS_PLL_PLL_CTL0r_AMS_PLL_IMODE_ICLKIDRV1f_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_IMODE_ICLKIDRV1f_SET
#define AMS_PLL_PLL_CTL0r_AMS_PLL_IMAX_ICLKIDRV1f_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_IMAX_ICLKIDRV1f_GET
#define AMS_PLL_PLL_CTL0r_AMS_PLL_IMAX_ICLKIDRV1f_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_IMAX_ICLKIDRV1f_SET
#define AMS_PLL_PLL_CTL0r_AMS_PLL_IMIN_ICLKIDRV1f_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_IMIN_ICLKIDRV1f_GET
#define AMS_PLL_PLL_CTL0r_AMS_PLL_IMIN_ICLKIDRV1f_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_IMIN_ICLKIDRV1f_SET
#define AMS_PLL_PLL_CTL0r_AMS_PLL_SPARE_7_3f_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_SPARE_7_3f_GET
#define AMS_PLL_PLL_CTL0r_AMS_PLL_SPARE_7_3f_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_SPARE_7_3f_SET
#define AMS_PLL_PLL_CTL0r_AMS_PLL_CLK8T_ENf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_CLK8T_ENf_GET
#define AMS_PLL_PLL_CTL0r_AMS_PLL_CLK8T_ENf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_CLK8T_ENf_SET
#define AMS_PLL_PLL_CTL0r_AMS_PLL_SET_CLK4PCSf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_SET_CLK4PCSf_GET
#define AMS_PLL_PLL_CTL0r_AMS_PLL_SET_CLK4PCSf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_SET_CLK4PCSf_SET
#define READ_AMS_PLL_PLL_CTL0r BCMI_TSCF_GEN3_XGXS_READ_AMS_PLL_PLL_CTL0r
#define WRITE_AMS_PLL_PLL_CTL0r BCMI_TSCF_GEN3_XGXS_WRITE_AMS_PLL_PLL_CTL0r
#define MODIFY_AMS_PLL_PLL_CTL0r BCMI_TSCF_GEN3_XGXS_MODIFY_AMS_PLL_PLL_CTL0r
#define READLN_AMS_PLL_PLL_CTL0r BCMI_TSCF_GEN3_XGXS_READLN_AMS_PLL_PLL_CTL0r
#define WRITELN_AMS_PLL_PLL_CTL0r BCMI_TSCF_GEN3_XGXS_WRITELN_AMS_PLL_PLL_CTL0r
#define WRITEALL_AMS_PLL_PLL_CTL0r BCMI_TSCF_GEN3_XGXS_WRITEALL_AMS_PLL_PLL_CTL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AMS_PLL_PLL_CTL1
 * BLOCKS:   AMS_PLL_COM
 * REGADDR:  0xd111
 * DEVAD:    1
 * DESC:     AMS PLL CONTROL_1
 * RESETVAL: 0x8000 (32768)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_PLL_IMIN_ICKGEN see AMS amsbus ctrl_out  16:16DFT_MUX
 *     AMS_PLL_IMAX_ICKGEN see AMS amsbus ctrl_out  17:17DFT_MUX
 *     AMS_PLL_IMODE_ICKGEN Master current mirror control amsbus ctrl_out  18:18DFT_MUX
 *     AMS_PLL_DRV_HV_DISABLE see AMS amsbus ctrl_out  19:19DFT_MUX
 *     AMS_PLL_TEST_BG_OPAMP_BIAS test BG opamp bias amsbus ctrl_out  21:20DFT_MUX
 *     AMS_PLL_SPARE_22 AMS reserved[22] amsbus ctrl_out  22:22DFT_MUX
 *     AMS_PLL_VCO2_15G enable and select the 15-18G VCO amsbus ctrl_out  23:23DFT_MUX
 *     AMS_PLL_VCOICTRL adjusts VCO bias current amsbus ctrl_out  25:24DFT_MUX
 *     AMS_PLL_VCO_INDICATOR enables transformer mode amsbus ctrl_out  26:26DFT_MUX
 *     AMS_PLL_IVCO     see AMS amsbus ctrl_out  29:27DFT_MUX
 *     AMS_PLL_RESET    active high amsbus ctrl_out  30:30DFT_MUX
 *     AMS_PLL_ENABLE_FTUNE see AMS amsbus ctrl_out  31:31DFT_MUX
 */
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r (0x0001d111 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_SIZE 4

/*
 * This structure should be used to declare and program AMS_PLL_PLL_CTL1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_s {
	uint32_t v[1];
	uint32_t ams_pll_pll_ctl1[1];
	uint32_t _ams_pll_pll_ctl1;
} BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_t;

#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_CLR(r) (r).ams_pll_pll_ctl1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_SET(r,d) (r).ams_pll_pll_ctl1[0] = d
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_GET(r) (r).ams_pll_pll_ctl1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_ENABLE_FTUNEf_GET(r) ((((r).ams_pll_pll_ctl1[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_ENABLE_FTUNEf_SET(r,f) (r).ams_pll_pll_ctl1[0]=(((r).ams_pll_pll_ctl1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_RESETf_GET(r) ((((r).ams_pll_pll_ctl1[0]) >> 14) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_RESETf_SET(r,f) (r).ams_pll_pll_ctl1[0]=(((r).ams_pll_pll_ctl1[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_IVCOf_GET(r) ((((r).ams_pll_pll_ctl1[0]) >> 11) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_IVCOf_SET(r,f) (r).ams_pll_pll_ctl1[0]=(((r).ams_pll_pll_ctl1[0] & ~((uint32_t)0x7 << 11)) | ((((uint32_t)f) & 0x7) << 11)) | (7 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_VCO_INDICATORf_GET(r) ((((r).ams_pll_pll_ctl1[0]) >> 10) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_VCO_INDICATORf_SET(r,f) (r).ams_pll_pll_ctl1[0]=(((r).ams_pll_pll_ctl1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_VCOICTRLf_GET(r) ((((r).ams_pll_pll_ctl1[0]) >> 8) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_VCOICTRLf_SET(r,f) (r).ams_pll_pll_ctl1[0]=(((r).ams_pll_pll_ctl1[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_VCO2_15Gf_GET(r) ((((r).ams_pll_pll_ctl1[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_VCO2_15Gf_SET(r,f) (r).ams_pll_pll_ctl1[0]=(((r).ams_pll_pll_ctl1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_SPARE_22f_GET(r) ((((r).ams_pll_pll_ctl1[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_SPARE_22f_SET(r,f) (r).ams_pll_pll_ctl1[0]=(((r).ams_pll_pll_ctl1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_TEST_BG_OPAMP_BIASf_GET(r) ((((r).ams_pll_pll_ctl1[0]) >> 4) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_TEST_BG_OPAMP_BIASf_SET(r,f) (r).ams_pll_pll_ctl1[0]=(((r).ams_pll_pll_ctl1[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_DRV_HV_DISABLEf_GET(r) ((((r).ams_pll_pll_ctl1[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_DRV_HV_DISABLEf_SET(r,f) (r).ams_pll_pll_ctl1[0]=(((r).ams_pll_pll_ctl1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_IMODE_ICKGENf_GET(r) ((((r).ams_pll_pll_ctl1[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_IMODE_ICKGENf_SET(r,f) (r).ams_pll_pll_ctl1[0]=(((r).ams_pll_pll_ctl1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_IMAX_ICKGENf_GET(r) ((((r).ams_pll_pll_ctl1[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_IMAX_ICKGENf_SET(r,f) (r).ams_pll_pll_ctl1[0]=(((r).ams_pll_pll_ctl1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_IMIN_ICKGENf_GET(r) (((r).ams_pll_pll_ctl1[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_IMIN_ICKGENf_SET(r,f) (r).ams_pll_pll_ctl1[0]=(((r).ams_pll_pll_ctl1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AMS_PLL_PLL_CTL1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AMS_PLL_PLL_CTL1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r,(_r._ams_pll_pll_ctl1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AMS_PLL_PLL_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r,(_r._ams_pll_pll_ctl1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AMS_PLL_PLL_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r,(_r._ams_pll_pll_ctl1))
#define BCMI_TSCF_GEN3_XGXS_READLN_AMS_PLL_PLL_CTL1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_ctl1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AMS_PLL_PLL_CTL1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_ctl1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AMS_PLL_PLL_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_pll_pll_ctl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AMS_PLL_PLL_CTL1r BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r
#define AMS_PLL_PLL_CTL1r_SIZE BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_t AMS_PLL_PLL_CTL1r_t;
#define AMS_PLL_PLL_CTL1r_CLR BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_CLR
#define AMS_PLL_PLL_CTL1r_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_SET
#define AMS_PLL_PLL_CTL1r_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_GET
#define AMS_PLL_PLL_CTL1r_AMS_PLL_ENABLE_FTUNEf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_ENABLE_FTUNEf_GET
#define AMS_PLL_PLL_CTL1r_AMS_PLL_ENABLE_FTUNEf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_ENABLE_FTUNEf_SET
#define AMS_PLL_PLL_CTL1r_AMS_PLL_RESETf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_RESETf_GET
#define AMS_PLL_PLL_CTL1r_AMS_PLL_RESETf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_RESETf_SET
#define AMS_PLL_PLL_CTL1r_AMS_PLL_IVCOf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_IVCOf_GET
#define AMS_PLL_PLL_CTL1r_AMS_PLL_IVCOf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_IVCOf_SET
#define AMS_PLL_PLL_CTL1r_AMS_PLL_VCO_INDICATORf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_VCO_INDICATORf_GET
#define AMS_PLL_PLL_CTL1r_AMS_PLL_VCO_INDICATORf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_VCO_INDICATORf_SET
#define AMS_PLL_PLL_CTL1r_AMS_PLL_VCOICTRLf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_VCOICTRLf_GET
#define AMS_PLL_PLL_CTL1r_AMS_PLL_VCOICTRLf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_VCOICTRLf_SET
#define AMS_PLL_PLL_CTL1r_AMS_PLL_VCO2_15Gf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_VCO2_15Gf_GET
#define AMS_PLL_PLL_CTL1r_AMS_PLL_VCO2_15Gf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_VCO2_15Gf_SET
#define AMS_PLL_PLL_CTL1r_AMS_PLL_SPARE_22f_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_SPARE_22f_GET
#define AMS_PLL_PLL_CTL1r_AMS_PLL_SPARE_22f_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_SPARE_22f_SET
#define AMS_PLL_PLL_CTL1r_AMS_PLL_TEST_BG_OPAMP_BIASf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_TEST_BG_OPAMP_BIASf_GET
#define AMS_PLL_PLL_CTL1r_AMS_PLL_TEST_BG_OPAMP_BIASf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_TEST_BG_OPAMP_BIASf_SET
#define AMS_PLL_PLL_CTL1r_AMS_PLL_DRV_HV_DISABLEf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_DRV_HV_DISABLEf_GET
#define AMS_PLL_PLL_CTL1r_AMS_PLL_DRV_HV_DISABLEf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_DRV_HV_DISABLEf_SET
#define AMS_PLL_PLL_CTL1r_AMS_PLL_IMODE_ICKGENf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_IMODE_ICKGENf_GET
#define AMS_PLL_PLL_CTL1r_AMS_PLL_IMODE_ICKGENf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_IMODE_ICKGENf_SET
#define AMS_PLL_PLL_CTL1r_AMS_PLL_IMAX_ICKGENf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_IMAX_ICKGENf_GET
#define AMS_PLL_PLL_CTL1r_AMS_PLL_IMAX_ICKGENf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_IMAX_ICKGENf_SET
#define AMS_PLL_PLL_CTL1r_AMS_PLL_IMIN_ICKGENf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_IMIN_ICKGENf_GET
#define AMS_PLL_PLL_CTL1r_AMS_PLL_IMIN_ICKGENf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_IMIN_ICKGENf_SET
#define READ_AMS_PLL_PLL_CTL1r BCMI_TSCF_GEN3_XGXS_READ_AMS_PLL_PLL_CTL1r
#define WRITE_AMS_PLL_PLL_CTL1r BCMI_TSCF_GEN3_XGXS_WRITE_AMS_PLL_PLL_CTL1r
#define MODIFY_AMS_PLL_PLL_CTL1r BCMI_TSCF_GEN3_XGXS_MODIFY_AMS_PLL_PLL_CTL1r
#define READLN_AMS_PLL_PLL_CTL1r BCMI_TSCF_GEN3_XGXS_READLN_AMS_PLL_PLL_CTL1r
#define WRITELN_AMS_PLL_PLL_CTL1r BCMI_TSCF_GEN3_XGXS_WRITELN_AMS_PLL_PLL_CTL1r
#define WRITEALL_AMS_PLL_PLL_CTL1r BCMI_TSCF_GEN3_XGXS_WRITEALL_AMS_PLL_PLL_CTL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AMS_PLL_PLL_CTL2
 * BLOCKS:   AMS_PLL_COM
 * REGADDR:  0xd112
 * DEVAD:    1
 * DESC:     AMS PLL CONTROL_2
 * RESETVAL: 0x1e (30)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_PLL_EN_HRZ   increases Rz, 2.4K ==> 4.8K amsbus ctrl_out  32:32DFT_MUX
 *     AMS_PLL_IQP      charge pump current, 50,100,150,..800uA amsbus ctrl_out  36:33DFT_MUX
 *     AMS_PLL_REFL_PLL see AMS amsbus ctrl_out  37:37DFT_MUX
 *     AMS_PLL_REFH_PLL see AMS amsbus ctrl_out  38:38DFT_MUX
 *     AMS_PLL_IMIN_IBIAS see AMS amsbus ctrl_out  39:39DFT_MUX
 *     AMS_PLL_IMODE_IBIAS see AMS amsbus ctrl_out  40:40DFT_MUX
 *     AMS_PLL_IMAX_IBIAS ibias all 6 above amsbus ctrl_out  41:41DFT_MUX
 *     AMS_PLL_IMIN_ICP see AMS amsbus ctrl_out  42:42DFT_MUX
 *     AMS_PLL_IMODE_ICP see AMS amsbus ctrl_out  43:43DFT_MUX
 *     AMS_PLL_IMAX_ICP charge pump amsbus ctrl_out  44:44DFT_MUX
 *     AMS_PLL_IMIN_ICK see AMS amsbus ctrl_out  45:45DFT_MUX
 *     AMS_PLL_IMODE_ICK see AMS amsbus ctrl_out  46:46DFT_MUX
 *     AMS_PLL_IMAX_ICK fref buffer amsbus ctrl_out  47:47DFT_MUX
 */
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r (0x0001d112 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_SIZE 4

/*
 * This structure should be used to declare and program AMS_PLL_PLL_CTL2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_s {
	uint32_t v[1];
	uint32_t ams_pll_pll_ctl2[1];
	uint32_t _ams_pll_pll_ctl2;
} BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_t;

#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_CLR(r) (r).ams_pll_pll_ctl2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_SET(r,d) (r).ams_pll_pll_ctl2[0] = d
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_GET(r) (r).ams_pll_pll_ctl2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_IMAX_ICKf_GET(r) ((((r).ams_pll_pll_ctl2[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_IMAX_ICKf_SET(r,f) (r).ams_pll_pll_ctl2[0]=(((r).ams_pll_pll_ctl2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_IMODE_ICKf_GET(r) ((((r).ams_pll_pll_ctl2[0]) >> 14) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_IMODE_ICKf_SET(r,f) (r).ams_pll_pll_ctl2[0]=(((r).ams_pll_pll_ctl2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_IMIN_ICKf_GET(r) ((((r).ams_pll_pll_ctl2[0]) >> 13) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_IMIN_ICKf_SET(r,f) (r).ams_pll_pll_ctl2[0]=(((r).ams_pll_pll_ctl2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_IMAX_ICPf_GET(r) ((((r).ams_pll_pll_ctl2[0]) >> 12) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_IMAX_ICPf_SET(r,f) (r).ams_pll_pll_ctl2[0]=(((r).ams_pll_pll_ctl2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_IMODE_ICPf_GET(r) ((((r).ams_pll_pll_ctl2[0]) >> 11) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_IMODE_ICPf_SET(r,f) (r).ams_pll_pll_ctl2[0]=(((r).ams_pll_pll_ctl2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_IMIN_ICPf_GET(r) ((((r).ams_pll_pll_ctl2[0]) >> 10) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_IMIN_ICPf_SET(r,f) (r).ams_pll_pll_ctl2[0]=(((r).ams_pll_pll_ctl2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_IMAX_IBIASf_GET(r) ((((r).ams_pll_pll_ctl2[0]) >> 9) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_IMAX_IBIASf_SET(r,f) (r).ams_pll_pll_ctl2[0]=(((r).ams_pll_pll_ctl2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_IMODE_IBIASf_GET(r) ((((r).ams_pll_pll_ctl2[0]) >> 8) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_IMODE_IBIASf_SET(r,f) (r).ams_pll_pll_ctl2[0]=(((r).ams_pll_pll_ctl2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_IMIN_IBIASf_GET(r) ((((r).ams_pll_pll_ctl2[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_IMIN_IBIASf_SET(r,f) (r).ams_pll_pll_ctl2[0]=(((r).ams_pll_pll_ctl2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_REFH_PLLf_GET(r) ((((r).ams_pll_pll_ctl2[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_REFH_PLLf_SET(r,f) (r).ams_pll_pll_ctl2[0]=(((r).ams_pll_pll_ctl2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_REFL_PLLf_GET(r) ((((r).ams_pll_pll_ctl2[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_REFL_PLLf_SET(r,f) (r).ams_pll_pll_ctl2[0]=(((r).ams_pll_pll_ctl2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_IQPf_GET(r) ((((r).ams_pll_pll_ctl2[0]) >> 1) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_IQPf_SET(r,f) (r).ams_pll_pll_ctl2[0]=(((r).ams_pll_pll_ctl2[0] & ~((uint32_t)0xf << 1)) | ((((uint32_t)f) & 0xf) << 1)) | (15 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_EN_HRZf_GET(r) (((r).ams_pll_pll_ctl2[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_EN_HRZf_SET(r,f) (r).ams_pll_pll_ctl2[0]=(((r).ams_pll_pll_ctl2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AMS_PLL_PLL_CTL2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AMS_PLL_PLL_CTL2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r,(_r._ams_pll_pll_ctl2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AMS_PLL_PLL_CTL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r,(_r._ams_pll_pll_ctl2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AMS_PLL_PLL_CTL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r,(_r._ams_pll_pll_ctl2))
#define BCMI_TSCF_GEN3_XGXS_READLN_AMS_PLL_PLL_CTL2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_ctl2))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AMS_PLL_PLL_CTL2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_ctl2))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AMS_PLL_PLL_CTL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_pll_pll_ctl2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AMS_PLL_PLL_CTL2r BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r
#define AMS_PLL_PLL_CTL2r_SIZE BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_t AMS_PLL_PLL_CTL2r_t;
#define AMS_PLL_PLL_CTL2r_CLR BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_CLR
#define AMS_PLL_PLL_CTL2r_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_SET
#define AMS_PLL_PLL_CTL2r_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_GET
#define AMS_PLL_PLL_CTL2r_AMS_PLL_IMAX_ICKf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_IMAX_ICKf_GET
#define AMS_PLL_PLL_CTL2r_AMS_PLL_IMAX_ICKf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_IMAX_ICKf_SET
#define AMS_PLL_PLL_CTL2r_AMS_PLL_IMODE_ICKf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_IMODE_ICKf_GET
#define AMS_PLL_PLL_CTL2r_AMS_PLL_IMODE_ICKf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_IMODE_ICKf_SET
#define AMS_PLL_PLL_CTL2r_AMS_PLL_IMIN_ICKf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_IMIN_ICKf_GET
#define AMS_PLL_PLL_CTL2r_AMS_PLL_IMIN_ICKf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_IMIN_ICKf_SET
#define AMS_PLL_PLL_CTL2r_AMS_PLL_IMAX_ICPf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_IMAX_ICPf_GET
#define AMS_PLL_PLL_CTL2r_AMS_PLL_IMAX_ICPf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_IMAX_ICPf_SET
#define AMS_PLL_PLL_CTL2r_AMS_PLL_IMODE_ICPf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_IMODE_ICPf_GET
#define AMS_PLL_PLL_CTL2r_AMS_PLL_IMODE_ICPf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_IMODE_ICPf_SET
#define AMS_PLL_PLL_CTL2r_AMS_PLL_IMIN_ICPf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_IMIN_ICPf_GET
#define AMS_PLL_PLL_CTL2r_AMS_PLL_IMIN_ICPf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_IMIN_ICPf_SET
#define AMS_PLL_PLL_CTL2r_AMS_PLL_IMAX_IBIASf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_IMAX_IBIASf_GET
#define AMS_PLL_PLL_CTL2r_AMS_PLL_IMAX_IBIASf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_IMAX_IBIASf_SET
#define AMS_PLL_PLL_CTL2r_AMS_PLL_IMODE_IBIASf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_IMODE_IBIASf_GET
#define AMS_PLL_PLL_CTL2r_AMS_PLL_IMODE_IBIASf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_IMODE_IBIASf_SET
#define AMS_PLL_PLL_CTL2r_AMS_PLL_IMIN_IBIASf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_IMIN_IBIASf_GET
#define AMS_PLL_PLL_CTL2r_AMS_PLL_IMIN_IBIASf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_IMIN_IBIASf_SET
#define AMS_PLL_PLL_CTL2r_AMS_PLL_REFH_PLLf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_REFH_PLLf_GET
#define AMS_PLL_PLL_CTL2r_AMS_PLL_REFH_PLLf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_REFH_PLLf_SET
#define AMS_PLL_PLL_CTL2r_AMS_PLL_REFL_PLLf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_REFL_PLLf_GET
#define AMS_PLL_PLL_CTL2r_AMS_PLL_REFL_PLLf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_REFL_PLLf_SET
#define AMS_PLL_PLL_CTL2r_AMS_PLL_IQPf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_IQPf_GET
#define AMS_PLL_PLL_CTL2r_AMS_PLL_IQPf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_IQPf_SET
#define AMS_PLL_PLL_CTL2r_AMS_PLL_EN_HRZf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_EN_HRZf_GET
#define AMS_PLL_PLL_CTL2r_AMS_PLL_EN_HRZf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_EN_HRZf_SET
#define READ_AMS_PLL_PLL_CTL2r BCMI_TSCF_GEN3_XGXS_READ_AMS_PLL_PLL_CTL2r
#define WRITE_AMS_PLL_PLL_CTL2r BCMI_TSCF_GEN3_XGXS_WRITE_AMS_PLL_PLL_CTL2r
#define MODIFY_AMS_PLL_PLL_CTL2r BCMI_TSCF_GEN3_XGXS_MODIFY_AMS_PLL_PLL_CTL2r
#define READLN_AMS_PLL_PLL_CTL2r BCMI_TSCF_GEN3_XGXS_READLN_AMS_PLL_PLL_CTL2r
#define WRITELN_AMS_PLL_PLL_CTL2r BCMI_TSCF_GEN3_XGXS_WRITELN_AMS_PLL_PLL_CTL2r
#define WRITEALL_AMS_PLL_PLL_CTL2r BCMI_TSCF_GEN3_XGXS_WRITEALL_AMS_PLL_PLL_CTL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AMS_PLL_PLL_CTL3
 * BLOCKS:   AMS_PLL_COM
 * REGADDR:  0xd113
 * DEVAD:    1
 * DESC:     AMS PLL CONTROL_3
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_PLL_IMIN_IRXCLKBUF see AMS amsbus ctrl_out  48:48DFT_MUX
 *     AMS_PLL_IMODE_IRXCLKBUF see AMS amsbus ctrl_out  49:49DFT_MUX
 *     AMS_PLL_IMAX_IRXCLKBUF rxclkbuf amsbus ctrl_out  50:50DFT_MUX
 *     AMS_PLL_IMIN_ICMLDIV see AMS amsbus ctrl_out  51:51DFT_MUX
 *     AMS_PLL_IMODE_ICMLDIV see AMS amsbus ctrl_out  52:52DFT_MUX
 *     AMS_PLL_IMAX_ICMLDIV VCO divider/buffer amsbus ctrl_out  53:53DFT_MUX
 *     AMS_PLL_IMIN_ICOMP see AMS amsbus ctrl_out  54:54DFT_MUX
 *     AMS_PLL_IMODE_ICOMP see AMS amsbus ctrl_out  55:55DFT_MUX
 *     AMS_PLL_IMAX_ICOMP VCO comparator amsbus ctrl_out  56:56DFT_MUX
 *     AMS_PLL_IMIN_IOP see AMS amsbus ctrl_out  57:57DFT_MUX
 *     AMS_PLL_IMODE_IOP see AMS amsbus ctrl_out  58:58DFT_MUX
 *     AMS_PLL_IMAX_IOP test current amsbus ctrl_out  59:59DFT_MUX
 *     AMS_PLL_TEST_VREF see AMS amsbus ctrl_out  60:60DFT_MUX
 *     AMS_PLL_TEST_VC  test Vcontrol amsbus ctrl_out  61:61DFT_MUX
 *     AMS_PLL_TEST_PLL test LC amsbus ctrl_out  62:62DFT_MUX
 *     AMS_PLL_TEST_RX  send RX word ck to PLL test port amsbus ctrl_out  63:63DFT_MUX
 */
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r (0x0001d113 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_SIZE 4

/*
 * This structure should be used to declare and program AMS_PLL_PLL_CTL3.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_s {
	uint32_t v[1];
	uint32_t ams_pll_pll_ctl3[1];
	uint32_t _ams_pll_pll_ctl3;
} BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_t;

#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_CLR(r) (r).ams_pll_pll_ctl3[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_SET(r,d) (r).ams_pll_pll_ctl3[0] = d
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_GET(r) (r).ams_pll_pll_ctl3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_TEST_RXf_GET(r) ((((r).ams_pll_pll_ctl3[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_TEST_RXf_SET(r,f) (r).ams_pll_pll_ctl3[0]=(((r).ams_pll_pll_ctl3[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_TEST_PLLf_GET(r) ((((r).ams_pll_pll_ctl3[0]) >> 14) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_TEST_PLLf_SET(r,f) (r).ams_pll_pll_ctl3[0]=(((r).ams_pll_pll_ctl3[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_TEST_VCf_GET(r) ((((r).ams_pll_pll_ctl3[0]) >> 13) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_TEST_VCf_SET(r,f) (r).ams_pll_pll_ctl3[0]=(((r).ams_pll_pll_ctl3[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_TEST_VREFf_GET(r) ((((r).ams_pll_pll_ctl3[0]) >> 12) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_TEST_VREFf_SET(r,f) (r).ams_pll_pll_ctl3[0]=(((r).ams_pll_pll_ctl3[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_IMAX_IOPf_GET(r) ((((r).ams_pll_pll_ctl3[0]) >> 11) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_IMAX_IOPf_SET(r,f) (r).ams_pll_pll_ctl3[0]=(((r).ams_pll_pll_ctl3[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_IMODE_IOPf_GET(r) ((((r).ams_pll_pll_ctl3[0]) >> 10) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_IMODE_IOPf_SET(r,f) (r).ams_pll_pll_ctl3[0]=(((r).ams_pll_pll_ctl3[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_IMIN_IOPf_GET(r) ((((r).ams_pll_pll_ctl3[0]) >> 9) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_IMIN_IOPf_SET(r,f) (r).ams_pll_pll_ctl3[0]=(((r).ams_pll_pll_ctl3[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_IMAX_ICOMPf_GET(r) ((((r).ams_pll_pll_ctl3[0]) >> 8) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_IMAX_ICOMPf_SET(r,f) (r).ams_pll_pll_ctl3[0]=(((r).ams_pll_pll_ctl3[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_IMODE_ICOMPf_GET(r) ((((r).ams_pll_pll_ctl3[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_IMODE_ICOMPf_SET(r,f) (r).ams_pll_pll_ctl3[0]=(((r).ams_pll_pll_ctl3[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_IMIN_ICOMPf_GET(r) ((((r).ams_pll_pll_ctl3[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_IMIN_ICOMPf_SET(r,f) (r).ams_pll_pll_ctl3[0]=(((r).ams_pll_pll_ctl3[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_IMAX_ICMLDIVf_GET(r) ((((r).ams_pll_pll_ctl3[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_IMAX_ICMLDIVf_SET(r,f) (r).ams_pll_pll_ctl3[0]=(((r).ams_pll_pll_ctl3[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_IMODE_ICMLDIVf_GET(r) ((((r).ams_pll_pll_ctl3[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_IMODE_ICMLDIVf_SET(r,f) (r).ams_pll_pll_ctl3[0]=(((r).ams_pll_pll_ctl3[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_IMIN_ICMLDIVf_GET(r) ((((r).ams_pll_pll_ctl3[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_IMIN_ICMLDIVf_SET(r,f) (r).ams_pll_pll_ctl3[0]=(((r).ams_pll_pll_ctl3[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_IMAX_IRXCLKBUFf_GET(r) ((((r).ams_pll_pll_ctl3[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_IMAX_IRXCLKBUFf_SET(r,f) (r).ams_pll_pll_ctl3[0]=(((r).ams_pll_pll_ctl3[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_IMODE_IRXCLKBUFf_GET(r) ((((r).ams_pll_pll_ctl3[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_IMODE_IRXCLKBUFf_SET(r,f) (r).ams_pll_pll_ctl3[0]=(((r).ams_pll_pll_ctl3[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_IMIN_IRXCLKBUFf_GET(r) (((r).ams_pll_pll_ctl3[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_IMIN_IRXCLKBUFf_SET(r,f) (r).ams_pll_pll_ctl3[0]=(((r).ams_pll_pll_ctl3[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AMS_PLL_PLL_CTL3.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AMS_PLL_PLL_CTL3r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r,(_r._ams_pll_pll_ctl3))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AMS_PLL_PLL_CTL3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r,(_r._ams_pll_pll_ctl3)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AMS_PLL_PLL_CTL3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r,(_r._ams_pll_pll_ctl3))
#define BCMI_TSCF_GEN3_XGXS_READLN_AMS_PLL_PLL_CTL3r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_ctl3))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AMS_PLL_PLL_CTL3r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_ctl3))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AMS_PLL_PLL_CTL3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_pll_pll_ctl3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AMS_PLL_PLL_CTL3r BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r
#define AMS_PLL_PLL_CTL3r_SIZE BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_t AMS_PLL_PLL_CTL3r_t;
#define AMS_PLL_PLL_CTL3r_CLR BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_CLR
#define AMS_PLL_PLL_CTL3r_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_SET
#define AMS_PLL_PLL_CTL3r_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_GET
#define AMS_PLL_PLL_CTL3r_AMS_PLL_TEST_RXf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_TEST_RXf_GET
#define AMS_PLL_PLL_CTL3r_AMS_PLL_TEST_RXf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_TEST_RXf_SET
#define AMS_PLL_PLL_CTL3r_AMS_PLL_TEST_PLLf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_TEST_PLLf_GET
#define AMS_PLL_PLL_CTL3r_AMS_PLL_TEST_PLLf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_TEST_PLLf_SET
#define AMS_PLL_PLL_CTL3r_AMS_PLL_TEST_VCf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_TEST_VCf_GET
#define AMS_PLL_PLL_CTL3r_AMS_PLL_TEST_VCf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_TEST_VCf_SET
#define AMS_PLL_PLL_CTL3r_AMS_PLL_TEST_VREFf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_TEST_VREFf_GET
#define AMS_PLL_PLL_CTL3r_AMS_PLL_TEST_VREFf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_TEST_VREFf_SET
#define AMS_PLL_PLL_CTL3r_AMS_PLL_IMAX_IOPf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_IMAX_IOPf_GET
#define AMS_PLL_PLL_CTL3r_AMS_PLL_IMAX_IOPf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_IMAX_IOPf_SET
#define AMS_PLL_PLL_CTL3r_AMS_PLL_IMODE_IOPf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_IMODE_IOPf_GET
#define AMS_PLL_PLL_CTL3r_AMS_PLL_IMODE_IOPf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_IMODE_IOPf_SET
#define AMS_PLL_PLL_CTL3r_AMS_PLL_IMIN_IOPf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_IMIN_IOPf_GET
#define AMS_PLL_PLL_CTL3r_AMS_PLL_IMIN_IOPf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_IMIN_IOPf_SET
#define AMS_PLL_PLL_CTL3r_AMS_PLL_IMAX_ICOMPf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_IMAX_ICOMPf_GET
#define AMS_PLL_PLL_CTL3r_AMS_PLL_IMAX_ICOMPf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_IMAX_ICOMPf_SET
#define AMS_PLL_PLL_CTL3r_AMS_PLL_IMODE_ICOMPf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_IMODE_ICOMPf_GET
#define AMS_PLL_PLL_CTL3r_AMS_PLL_IMODE_ICOMPf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_IMODE_ICOMPf_SET
#define AMS_PLL_PLL_CTL3r_AMS_PLL_IMIN_ICOMPf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_IMIN_ICOMPf_GET
#define AMS_PLL_PLL_CTL3r_AMS_PLL_IMIN_ICOMPf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_IMIN_ICOMPf_SET
#define AMS_PLL_PLL_CTL3r_AMS_PLL_IMAX_ICMLDIVf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_IMAX_ICMLDIVf_GET
#define AMS_PLL_PLL_CTL3r_AMS_PLL_IMAX_ICMLDIVf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_IMAX_ICMLDIVf_SET
#define AMS_PLL_PLL_CTL3r_AMS_PLL_IMODE_ICMLDIVf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_IMODE_ICMLDIVf_GET
#define AMS_PLL_PLL_CTL3r_AMS_PLL_IMODE_ICMLDIVf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_IMODE_ICMLDIVf_SET
#define AMS_PLL_PLL_CTL3r_AMS_PLL_IMIN_ICMLDIVf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_IMIN_ICMLDIVf_GET
#define AMS_PLL_PLL_CTL3r_AMS_PLL_IMIN_ICMLDIVf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_IMIN_ICMLDIVf_SET
#define AMS_PLL_PLL_CTL3r_AMS_PLL_IMAX_IRXCLKBUFf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_IMAX_IRXCLKBUFf_GET
#define AMS_PLL_PLL_CTL3r_AMS_PLL_IMAX_IRXCLKBUFf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_IMAX_IRXCLKBUFf_SET
#define AMS_PLL_PLL_CTL3r_AMS_PLL_IMODE_IRXCLKBUFf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_IMODE_IRXCLKBUFf_GET
#define AMS_PLL_PLL_CTL3r_AMS_PLL_IMODE_IRXCLKBUFf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_IMODE_IRXCLKBUFf_SET
#define AMS_PLL_PLL_CTL3r_AMS_PLL_IMIN_IRXCLKBUFf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_IMIN_IRXCLKBUFf_GET
#define AMS_PLL_PLL_CTL3r_AMS_PLL_IMIN_IRXCLKBUFf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r_AMS_PLL_IMIN_IRXCLKBUFf_SET
#define READ_AMS_PLL_PLL_CTL3r BCMI_TSCF_GEN3_XGXS_READ_AMS_PLL_PLL_CTL3r
#define WRITE_AMS_PLL_PLL_CTL3r BCMI_TSCF_GEN3_XGXS_WRITE_AMS_PLL_PLL_CTL3r
#define MODIFY_AMS_PLL_PLL_CTL3r BCMI_TSCF_GEN3_XGXS_MODIFY_AMS_PLL_PLL_CTL3r
#define READLN_AMS_PLL_PLL_CTL3r BCMI_TSCF_GEN3_XGXS_READLN_AMS_PLL_PLL_CTL3r
#define WRITELN_AMS_PLL_PLL_CTL3r BCMI_TSCF_GEN3_XGXS_WRITELN_AMS_PLL_PLL_CTL3r
#define WRITEALL_AMS_PLL_PLL_CTL3r BCMI_TSCF_GEN3_XGXS_WRITEALL_AMS_PLL_PLL_CTL3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AMS_PLL_PLL_CTL4
 * BLOCKS:   AMS_PLL_COM
 * REGADDR:  0xd114
 * DEVAD:    1
 * DESC:     AMS PLL CONTROL_4
 * RESETVAL: 0x77 (119)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_PLL_BGR_PTATADJ BG bias, same decoder as CTAT amsbus ctrl_out  67:64DFT_MUX
 *     AMS_PLL_BGR_CTATADJ BG CTAT bias control amsbus ctrl_out  71:68DFT_MUX
 *     AMS_PLL_PLL2RX_CLKBW controls BW of interpolator input amsbus ctrl_out  73:72DFT_MUX
 *     AMS_PLL_COMP_VTH tuning comparator threshold amsbus ctrl_out  74:74DFT_MUX
 *     AMS_PLL_VDDR_BGB select between PVDD or BG Vbias amsbus ctrl_out  75:75DFT_MUX
 *     AMS_PLL_KVH_FORCE force Kvco, override tuning control amsbus ctrl_out  77:76DFT_MUX
 *     AMS_PLL_FORCE_KVH_BW enable force kvh and bw modes amsbus ctrl_out  78:78DFT_MUX
 *     AMS_PLL_FORCE_RESCAL force_rescal with pll_ctrl<15:12> amsbus ctrl_out  79:79DFT_MUX
 */
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL4r (0x0001d114 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL4r_SIZE 4

/*
 * This structure should be used to declare and program AMS_PLL_PLL_CTL4.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL4r_s {
	uint32_t v[1];
	uint32_t ams_pll_pll_ctl4[1];
	uint32_t _ams_pll_pll_ctl4;
} BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL4r_t;

#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL4r_CLR(r) (r).ams_pll_pll_ctl4[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL4r_SET(r,d) (r).ams_pll_pll_ctl4[0] = d
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL4r_GET(r) (r).ams_pll_pll_ctl4[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_FORCE_RESCALf_GET(r) ((((r).ams_pll_pll_ctl4[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_FORCE_RESCALf_SET(r,f) (r).ams_pll_pll_ctl4[0]=(((r).ams_pll_pll_ctl4[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_FORCE_KVH_BWf_GET(r) ((((r).ams_pll_pll_ctl4[0]) >> 14) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_FORCE_KVH_BWf_SET(r,f) (r).ams_pll_pll_ctl4[0]=(((r).ams_pll_pll_ctl4[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_KVH_FORCEf_GET(r) ((((r).ams_pll_pll_ctl4[0]) >> 12) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_KVH_FORCEf_SET(r,f) (r).ams_pll_pll_ctl4[0]=(((r).ams_pll_pll_ctl4[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12)) | (3 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_VDDR_BGBf_GET(r) ((((r).ams_pll_pll_ctl4[0]) >> 11) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_VDDR_BGBf_SET(r,f) (r).ams_pll_pll_ctl4[0]=(((r).ams_pll_pll_ctl4[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_COMP_VTHf_GET(r) ((((r).ams_pll_pll_ctl4[0]) >> 10) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_COMP_VTHf_SET(r,f) (r).ams_pll_pll_ctl4[0]=(((r).ams_pll_pll_ctl4[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_PLL2RX_CLKBWf_GET(r) ((((r).ams_pll_pll_ctl4[0]) >> 8) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_PLL2RX_CLKBWf_SET(r,f) (r).ams_pll_pll_ctl4[0]=(((r).ams_pll_pll_ctl4[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_BGR_CTATADJf_GET(r) ((((r).ams_pll_pll_ctl4[0]) >> 4) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_BGR_CTATADJf_SET(r,f) (r).ams_pll_pll_ctl4[0]=(((r).ams_pll_pll_ctl4[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4)) | (15 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_BGR_PTATADJf_GET(r) (((r).ams_pll_pll_ctl4[0]) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_BGR_PTATADJf_SET(r,f) (r).ams_pll_pll_ctl4[0]=(((r).ams_pll_pll_ctl4[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access AMS_PLL_PLL_CTL4.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AMS_PLL_PLL_CTL4r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL4r,(_r._ams_pll_pll_ctl4))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AMS_PLL_PLL_CTL4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL4r,(_r._ams_pll_pll_ctl4)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AMS_PLL_PLL_CTL4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL4r,(_r._ams_pll_pll_ctl4))
#define BCMI_TSCF_GEN3_XGXS_READLN_AMS_PLL_PLL_CTL4r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_ctl4))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AMS_PLL_PLL_CTL4r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_ctl4))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AMS_PLL_PLL_CTL4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL4r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_pll_pll_ctl4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AMS_PLL_PLL_CTL4r BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL4r
#define AMS_PLL_PLL_CTL4r_SIZE BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL4r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL4r_t AMS_PLL_PLL_CTL4r_t;
#define AMS_PLL_PLL_CTL4r_CLR BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL4r_CLR
#define AMS_PLL_PLL_CTL4r_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL4r_SET
#define AMS_PLL_PLL_CTL4r_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL4r_GET
#define AMS_PLL_PLL_CTL4r_AMS_PLL_FORCE_RESCALf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_FORCE_RESCALf_GET
#define AMS_PLL_PLL_CTL4r_AMS_PLL_FORCE_RESCALf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_FORCE_RESCALf_SET
#define AMS_PLL_PLL_CTL4r_AMS_PLL_FORCE_KVH_BWf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_FORCE_KVH_BWf_GET
#define AMS_PLL_PLL_CTL4r_AMS_PLL_FORCE_KVH_BWf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_FORCE_KVH_BWf_SET
#define AMS_PLL_PLL_CTL4r_AMS_PLL_KVH_FORCEf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_KVH_FORCEf_GET
#define AMS_PLL_PLL_CTL4r_AMS_PLL_KVH_FORCEf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_KVH_FORCEf_SET
#define AMS_PLL_PLL_CTL4r_AMS_PLL_VDDR_BGBf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_VDDR_BGBf_GET
#define AMS_PLL_PLL_CTL4r_AMS_PLL_VDDR_BGBf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_VDDR_BGBf_SET
#define AMS_PLL_PLL_CTL4r_AMS_PLL_COMP_VTHf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_COMP_VTHf_GET
#define AMS_PLL_PLL_CTL4r_AMS_PLL_COMP_VTHf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_COMP_VTHf_SET
#define AMS_PLL_PLL_CTL4r_AMS_PLL_PLL2RX_CLKBWf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_PLL2RX_CLKBWf_GET
#define AMS_PLL_PLL_CTL4r_AMS_PLL_PLL2RX_CLKBWf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_PLL2RX_CLKBWf_SET
#define AMS_PLL_PLL_CTL4r_AMS_PLL_BGR_CTATADJf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_BGR_CTATADJf_GET
#define AMS_PLL_PLL_CTL4r_AMS_PLL_BGR_CTATADJf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_BGR_CTATADJf_SET
#define AMS_PLL_PLL_CTL4r_AMS_PLL_BGR_PTATADJf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_BGR_PTATADJf_GET
#define AMS_PLL_PLL_CTL4r_AMS_PLL_BGR_PTATADJf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_BGR_PTATADJf_SET
#define READ_AMS_PLL_PLL_CTL4r BCMI_TSCF_GEN3_XGXS_READ_AMS_PLL_PLL_CTL4r
#define WRITE_AMS_PLL_PLL_CTL4r BCMI_TSCF_GEN3_XGXS_WRITE_AMS_PLL_PLL_CTL4r
#define MODIFY_AMS_PLL_PLL_CTL4r BCMI_TSCF_GEN3_XGXS_MODIFY_AMS_PLL_PLL_CTL4r
#define READLN_AMS_PLL_PLL_CTL4r BCMI_TSCF_GEN3_XGXS_READLN_AMS_PLL_PLL_CTL4r
#define WRITELN_AMS_PLL_PLL_CTL4r BCMI_TSCF_GEN3_XGXS_WRITELN_AMS_PLL_PLL_CTL4r
#define WRITEALL_AMS_PLL_PLL_CTL4r BCMI_TSCF_GEN3_XGXS_WRITEALL_AMS_PLL_PLL_CTL4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL4r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AMS_PLL_PLL_CTL5
 * BLOCKS:   AMS_PLL_COM
 * REGADDR:  0xd115
 * DEVAD:    1
 * DESC:     AMS PLL CONTROL_5
 * RESETVAL: 0x1f00 (7936)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_PLL_TEST_PORT_MAX_AMPLITUDE test port max amplitude amsbus ctrl_out  80:80DFT_MUX
 *     AMS_PLL_BGIP     test, measure Ibg internal PMOS current amsbus ctrl_out  81:81DFT_MUX
 *     AMS_PLL_BGINT    test, measure Vbg internal amsbus ctrl_out  82:82DFT_MUX
 *     AMS_PLL_VBYPASS  test, bypass test port opamp buffer amsbus ctrl_out  83:83DFT_MUX
 *     AMS_PLL_TEST_PNP see AMS amsbus ctrl_out  85:84DFT_MUX
 *     AMS_PLL_MIX3P1C_CALR_CTATADJ bias control for Mix3P1C/calR amsbus ctrl_out  90:86DFT_MUX
 *     AMS_PLL_MIX3P1C_CALR_PTATADJ bias control for Mix3P1C/calR amsbus ctrl_out  95:91DFT_MUX
 */
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL5r (0x0001d115 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL5r_SIZE 4

/*
 * This structure should be used to declare and program AMS_PLL_PLL_CTL5.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL5r_s {
	uint32_t v[1];
	uint32_t ams_pll_pll_ctl5[1];
	uint32_t _ams_pll_pll_ctl5;
} BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL5r_t;

#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL5r_CLR(r) (r).ams_pll_pll_ctl5[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL5r_SET(r,d) (r).ams_pll_pll_ctl5[0] = d
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL5r_GET(r) (r).ams_pll_pll_ctl5[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL5r_AMS_PLL_MIX3P1C_CALR_PTATADJf_GET(r) ((((r).ams_pll_pll_ctl5[0]) >> 11) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL5r_AMS_PLL_MIX3P1C_CALR_PTATADJf_SET(r,f) (r).ams_pll_pll_ctl5[0]=(((r).ams_pll_pll_ctl5[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11)) | (31 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL5r_AMS_PLL_MIX3P1C_CALR_CTATADJf_GET(r) ((((r).ams_pll_pll_ctl5[0]) >> 6) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL5r_AMS_PLL_MIX3P1C_CALR_CTATADJf_SET(r,f) (r).ams_pll_pll_ctl5[0]=(((r).ams_pll_pll_ctl5[0] & ~((uint32_t)0x1f << 6)) | ((((uint32_t)f) & 0x1f) << 6)) | (31 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL5r_AMS_PLL_TEST_PNPf_GET(r) ((((r).ams_pll_pll_ctl5[0]) >> 4) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL5r_AMS_PLL_TEST_PNPf_SET(r,f) (r).ams_pll_pll_ctl5[0]=(((r).ams_pll_pll_ctl5[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL5r_AMS_PLL_VBYPASSf_GET(r) ((((r).ams_pll_pll_ctl5[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL5r_AMS_PLL_VBYPASSf_SET(r,f) (r).ams_pll_pll_ctl5[0]=(((r).ams_pll_pll_ctl5[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL5r_AMS_PLL_BGINTf_GET(r) ((((r).ams_pll_pll_ctl5[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL5r_AMS_PLL_BGINTf_SET(r,f) (r).ams_pll_pll_ctl5[0]=(((r).ams_pll_pll_ctl5[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL5r_AMS_PLL_BGIPf_GET(r) ((((r).ams_pll_pll_ctl5[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL5r_AMS_PLL_BGIPf_SET(r,f) (r).ams_pll_pll_ctl5[0]=(((r).ams_pll_pll_ctl5[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL5r_AMS_PLL_TEST_PORT_MAX_AMPLITUDEf_GET(r) (((r).ams_pll_pll_ctl5[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL5r_AMS_PLL_TEST_PORT_MAX_AMPLITUDEf_SET(r,f) (r).ams_pll_pll_ctl5[0]=(((r).ams_pll_pll_ctl5[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AMS_PLL_PLL_CTL5.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AMS_PLL_PLL_CTL5r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL5r,(_r._ams_pll_pll_ctl5))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AMS_PLL_PLL_CTL5r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL5r,(_r._ams_pll_pll_ctl5)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AMS_PLL_PLL_CTL5r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL5r,(_r._ams_pll_pll_ctl5))
#define BCMI_TSCF_GEN3_XGXS_READLN_AMS_PLL_PLL_CTL5r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL5r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_ctl5))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AMS_PLL_PLL_CTL5r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL5r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_ctl5))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AMS_PLL_PLL_CTL5r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL5r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_pll_pll_ctl5))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AMS_PLL_PLL_CTL5r BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL5r
#define AMS_PLL_PLL_CTL5r_SIZE BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL5r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL5r_t AMS_PLL_PLL_CTL5r_t;
#define AMS_PLL_PLL_CTL5r_CLR BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL5r_CLR
#define AMS_PLL_PLL_CTL5r_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL5r_SET
#define AMS_PLL_PLL_CTL5r_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL5r_GET
#define AMS_PLL_PLL_CTL5r_AMS_PLL_MIX3P1C_CALR_PTATADJf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL5r_AMS_PLL_MIX3P1C_CALR_PTATADJf_GET
#define AMS_PLL_PLL_CTL5r_AMS_PLL_MIX3P1C_CALR_PTATADJf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL5r_AMS_PLL_MIX3P1C_CALR_PTATADJf_SET
#define AMS_PLL_PLL_CTL5r_AMS_PLL_MIX3P1C_CALR_CTATADJf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL5r_AMS_PLL_MIX3P1C_CALR_CTATADJf_GET
#define AMS_PLL_PLL_CTL5r_AMS_PLL_MIX3P1C_CALR_CTATADJf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL5r_AMS_PLL_MIX3P1C_CALR_CTATADJf_SET
#define AMS_PLL_PLL_CTL5r_AMS_PLL_TEST_PNPf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL5r_AMS_PLL_TEST_PNPf_GET
#define AMS_PLL_PLL_CTL5r_AMS_PLL_TEST_PNPf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL5r_AMS_PLL_TEST_PNPf_SET
#define AMS_PLL_PLL_CTL5r_AMS_PLL_VBYPASSf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL5r_AMS_PLL_VBYPASSf_GET
#define AMS_PLL_PLL_CTL5r_AMS_PLL_VBYPASSf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL5r_AMS_PLL_VBYPASSf_SET
#define AMS_PLL_PLL_CTL5r_AMS_PLL_BGINTf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL5r_AMS_PLL_BGINTf_GET
#define AMS_PLL_PLL_CTL5r_AMS_PLL_BGINTf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL5r_AMS_PLL_BGINTf_SET
#define AMS_PLL_PLL_CTL5r_AMS_PLL_BGIPf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL5r_AMS_PLL_BGIPf_GET
#define AMS_PLL_PLL_CTL5r_AMS_PLL_BGIPf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL5r_AMS_PLL_BGIPf_SET
#define AMS_PLL_PLL_CTL5r_AMS_PLL_TEST_PORT_MAX_AMPLITUDEf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL5r_AMS_PLL_TEST_PORT_MAX_AMPLITUDEf_GET
#define AMS_PLL_PLL_CTL5r_AMS_PLL_TEST_PORT_MAX_AMPLITUDEf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL5r_AMS_PLL_TEST_PORT_MAX_AMPLITUDEf_SET
#define READ_AMS_PLL_PLL_CTL5r BCMI_TSCF_GEN3_XGXS_READ_AMS_PLL_PLL_CTL5r
#define WRITE_AMS_PLL_PLL_CTL5r BCMI_TSCF_GEN3_XGXS_WRITE_AMS_PLL_PLL_CTL5r
#define MODIFY_AMS_PLL_PLL_CTL5r BCMI_TSCF_GEN3_XGXS_MODIFY_AMS_PLL_PLL_CTL5r
#define READLN_AMS_PLL_PLL_CTL5r BCMI_TSCF_GEN3_XGXS_READLN_AMS_PLL_PLL_CTL5r
#define WRITELN_AMS_PLL_PLL_CTL5r BCMI_TSCF_GEN3_XGXS_WRITELN_AMS_PLL_PLL_CTL5r
#define WRITEALL_AMS_PLL_PLL_CTL5r BCMI_TSCF_GEN3_XGXS_WRITEALL_AMS_PLL_PLL_CTL5r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL5r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AMS_PLL_PLL_CTL6
 * BLOCKS:   AMS_PLL_COM
 * REGADDR:  0xd116
 * DEVAD:    1
 * DESC:     AMS PLL CONTROL_6
 * RESETVAL: 0xc1c0 (49600)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_PLL_RTERM200 set refclk termination impedance to 200 ohm amsbus ctrl_out  96:96DFT_MUX
 *     AMS_PLL_DIV2     divided 2 amsbus ctrl_out  97:97
 *     AMS_PLL_DIV4     divided 4 amsbus ctrl_out  98:98
 *     AMS_PLL_RTERM400 set refclk termination impedance to 400 ohm amsbus ctrl_out  99:99DFT_MUX
 *     AMS_PLL_RTERM600 set refclk termination impedance to 600 ohm amsbus ctrl_out  100:100DFT_MUX
 *     AMS_PLL_RTERMHIZ set refclk termination impedance to very high impedance amsbus ctrl_out  101:101DFT_MUX
 *     AMS_PLL_MIX1P2CR_CTATADJ CTAT bias control for Mix1P2C/R (see AMS) amsbus ctrl_out  106:102DFT_MUX
 *     AMS_PLL_MIX1P2CR_PTATADJ PTAT bias control for Mix1P2C/R, 20uA (See AMS) amsbus ctrl_out  111:107DFT_MUX
 */
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL6r (0x0001d116 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL6r_SIZE 4

/*
 * This structure should be used to declare and program AMS_PLL_PLL_CTL6.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL6r_s {
	uint32_t v[1];
	uint32_t ams_pll_pll_ctl6[1];
	uint32_t _ams_pll_pll_ctl6;
} BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL6r_t;

#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL6r_CLR(r) (r).ams_pll_pll_ctl6[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL6r_SET(r,d) (r).ams_pll_pll_ctl6[0] = d
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL6r_GET(r) (r).ams_pll_pll_ctl6[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL6r_AMS_PLL_MIX1P2CR_PTATADJf_GET(r) ((((r).ams_pll_pll_ctl6[0]) >> 11) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL6r_AMS_PLL_MIX1P2CR_PTATADJf_SET(r,f) (r).ams_pll_pll_ctl6[0]=(((r).ams_pll_pll_ctl6[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11)) | (31 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL6r_AMS_PLL_MIX1P2CR_CTATADJf_GET(r) ((((r).ams_pll_pll_ctl6[0]) >> 6) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL6r_AMS_PLL_MIX1P2CR_CTATADJf_SET(r,f) (r).ams_pll_pll_ctl6[0]=(((r).ams_pll_pll_ctl6[0] & ~((uint32_t)0x1f << 6)) | ((((uint32_t)f) & 0x1f) << 6)) | (31 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL6r_AMS_PLL_RTERMHIZf_GET(r) ((((r).ams_pll_pll_ctl6[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL6r_AMS_PLL_RTERMHIZf_SET(r,f) (r).ams_pll_pll_ctl6[0]=(((r).ams_pll_pll_ctl6[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL6r_AMS_PLL_RTERM600f_GET(r) ((((r).ams_pll_pll_ctl6[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL6r_AMS_PLL_RTERM600f_SET(r,f) (r).ams_pll_pll_ctl6[0]=(((r).ams_pll_pll_ctl6[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL6r_AMS_PLL_RTERM400f_GET(r) ((((r).ams_pll_pll_ctl6[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL6r_AMS_PLL_RTERM400f_SET(r,f) (r).ams_pll_pll_ctl6[0]=(((r).ams_pll_pll_ctl6[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL6r_AMS_PLL_DIV4f_GET(r) ((((r).ams_pll_pll_ctl6[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL6r_AMS_PLL_DIV4f_SET(r,f) (r).ams_pll_pll_ctl6[0]=(((r).ams_pll_pll_ctl6[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL6r_AMS_PLL_DIV2f_GET(r) ((((r).ams_pll_pll_ctl6[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL6r_AMS_PLL_DIV2f_SET(r,f) (r).ams_pll_pll_ctl6[0]=(((r).ams_pll_pll_ctl6[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL6r_AMS_PLL_RTERM200f_GET(r) (((r).ams_pll_pll_ctl6[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL6r_AMS_PLL_RTERM200f_SET(r,f) (r).ams_pll_pll_ctl6[0]=(((r).ams_pll_pll_ctl6[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AMS_PLL_PLL_CTL6.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AMS_PLL_PLL_CTL6r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL6r,(_r._ams_pll_pll_ctl6))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AMS_PLL_PLL_CTL6r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL6r,(_r._ams_pll_pll_ctl6)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AMS_PLL_PLL_CTL6r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL6r,(_r._ams_pll_pll_ctl6))
#define BCMI_TSCF_GEN3_XGXS_READLN_AMS_PLL_PLL_CTL6r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL6r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_ctl6))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AMS_PLL_PLL_CTL6r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL6r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_ctl6))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AMS_PLL_PLL_CTL6r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL6r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_pll_pll_ctl6))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AMS_PLL_PLL_CTL6r BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL6r
#define AMS_PLL_PLL_CTL6r_SIZE BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL6r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL6r_t AMS_PLL_PLL_CTL6r_t;
#define AMS_PLL_PLL_CTL6r_CLR BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL6r_CLR
#define AMS_PLL_PLL_CTL6r_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL6r_SET
#define AMS_PLL_PLL_CTL6r_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL6r_GET
#define AMS_PLL_PLL_CTL6r_AMS_PLL_MIX1P2CR_PTATADJf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL6r_AMS_PLL_MIX1P2CR_PTATADJf_GET
#define AMS_PLL_PLL_CTL6r_AMS_PLL_MIX1P2CR_PTATADJf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL6r_AMS_PLL_MIX1P2CR_PTATADJf_SET
#define AMS_PLL_PLL_CTL6r_AMS_PLL_MIX1P2CR_CTATADJf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL6r_AMS_PLL_MIX1P2CR_CTATADJf_GET
#define AMS_PLL_PLL_CTL6r_AMS_PLL_MIX1P2CR_CTATADJf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL6r_AMS_PLL_MIX1P2CR_CTATADJf_SET
#define AMS_PLL_PLL_CTL6r_AMS_PLL_RTERMHIZf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL6r_AMS_PLL_RTERMHIZf_GET
#define AMS_PLL_PLL_CTL6r_AMS_PLL_RTERMHIZf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL6r_AMS_PLL_RTERMHIZf_SET
#define AMS_PLL_PLL_CTL6r_AMS_PLL_RTERM600f_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL6r_AMS_PLL_RTERM600f_GET
#define AMS_PLL_PLL_CTL6r_AMS_PLL_RTERM600f_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL6r_AMS_PLL_RTERM600f_SET
#define AMS_PLL_PLL_CTL6r_AMS_PLL_RTERM400f_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL6r_AMS_PLL_RTERM400f_GET
#define AMS_PLL_PLL_CTL6r_AMS_PLL_RTERM400f_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL6r_AMS_PLL_RTERM400f_SET
#define AMS_PLL_PLL_CTL6r_AMS_PLL_DIV4f_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL6r_AMS_PLL_DIV4f_GET
#define AMS_PLL_PLL_CTL6r_AMS_PLL_DIV4f_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL6r_AMS_PLL_DIV4f_SET
#define AMS_PLL_PLL_CTL6r_AMS_PLL_DIV2f_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL6r_AMS_PLL_DIV2f_GET
#define AMS_PLL_PLL_CTL6r_AMS_PLL_DIV2f_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL6r_AMS_PLL_DIV2f_SET
#define AMS_PLL_PLL_CTL6r_AMS_PLL_RTERM200f_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL6r_AMS_PLL_RTERM200f_GET
#define AMS_PLL_PLL_CTL6r_AMS_PLL_RTERM200f_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL6r_AMS_PLL_RTERM200f_SET
#define READ_AMS_PLL_PLL_CTL6r BCMI_TSCF_GEN3_XGXS_READ_AMS_PLL_PLL_CTL6r
#define WRITE_AMS_PLL_PLL_CTL6r BCMI_TSCF_GEN3_XGXS_WRITE_AMS_PLL_PLL_CTL6r
#define MODIFY_AMS_PLL_PLL_CTL6r BCMI_TSCF_GEN3_XGXS_MODIFY_AMS_PLL_PLL_CTL6r
#define READLN_AMS_PLL_PLL_CTL6r BCMI_TSCF_GEN3_XGXS_READLN_AMS_PLL_PLL_CTL6r
#define WRITELN_AMS_PLL_PLL_CTL6r BCMI_TSCF_GEN3_XGXS_WRITELN_AMS_PLL_PLL_CTL6r
#define WRITEALL_AMS_PLL_PLL_CTL6r BCMI_TSCF_GEN3_XGXS_WRITEALL_AMS_PLL_PLL_CTL6r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL6r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AMS_PLL_PLL_CTL7
 * BLOCKS:   AMS_PLL_COM
 * REGADDR:  0xd117
 * DEVAD:    1
 * DESC:     AMS PLL CONTROL_7
 * RESETVAL: 0x1f00 (7936)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_PLL_REFCLK4COM_DIV2 divide the PLL input refclk by 2 to generate refclk4com output amsbus ctrl_out  112:112
 *     AMS_PLL_REFCLK4COM_DIV4 divide the PLL input refclk by 4 to generate refclk4com output amsbus ctrl_out  113:113
 *     AMS_PLL_SPARE_117_114 AMS reserved[117:114] amsbus ctrl_out  117:114DFT_MUX
 *     AMS_PLL_MIX3P1CR_CTATADJ CTAT bias control for Mix3P1C/R amsbus ctrl_out  122:118DFT_MUX
 *     AMS_PLL_MIX3P1CR_PTATADJ PTAT bias control for Mix3P1C/R which is used in RX amsbus ctrl_out  127:123DFT_MUX
 */
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL7r (0x0001d117 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL7r_SIZE 4

/*
 * This structure should be used to declare and program AMS_PLL_PLL_CTL7.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL7r_s {
	uint32_t v[1];
	uint32_t ams_pll_pll_ctl7[1];
	uint32_t _ams_pll_pll_ctl7;
} BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL7r_t;

#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL7r_CLR(r) (r).ams_pll_pll_ctl7[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL7r_SET(r,d) (r).ams_pll_pll_ctl7[0] = d
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL7r_GET(r) (r).ams_pll_pll_ctl7[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL7r_AMS_PLL_MIX3P1CR_PTATADJf_GET(r) ((((r).ams_pll_pll_ctl7[0]) >> 11) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL7r_AMS_PLL_MIX3P1CR_PTATADJf_SET(r,f) (r).ams_pll_pll_ctl7[0]=(((r).ams_pll_pll_ctl7[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11)) | (31 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL7r_AMS_PLL_MIX3P1CR_CTATADJf_GET(r) ((((r).ams_pll_pll_ctl7[0]) >> 6) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL7r_AMS_PLL_MIX3P1CR_CTATADJf_SET(r,f) (r).ams_pll_pll_ctl7[0]=(((r).ams_pll_pll_ctl7[0] & ~((uint32_t)0x1f << 6)) | ((((uint32_t)f) & 0x1f) << 6)) | (31 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL7r_AMS_PLL_SPARE_117_114f_GET(r) ((((r).ams_pll_pll_ctl7[0]) >> 2) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL7r_AMS_PLL_SPARE_117_114f_SET(r,f) (r).ams_pll_pll_ctl7[0]=(((r).ams_pll_pll_ctl7[0] & ~((uint32_t)0xf << 2)) | ((((uint32_t)f) & 0xf) << 2)) | (15 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL7r_AMS_PLL_REFCLK4COM_DIV4f_GET(r) ((((r).ams_pll_pll_ctl7[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL7r_AMS_PLL_REFCLK4COM_DIV4f_SET(r,f) (r).ams_pll_pll_ctl7[0]=(((r).ams_pll_pll_ctl7[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL7r_AMS_PLL_REFCLK4COM_DIV2f_GET(r) (((r).ams_pll_pll_ctl7[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL7r_AMS_PLL_REFCLK4COM_DIV2f_SET(r,f) (r).ams_pll_pll_ctl7[0]=(((r).ams_pll_pll_ctl7[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AMS_PLL_PLL_CTL7.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AMS_PLL_PLL_CTL7r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL7r,(_r._ams_pll_pll_ctl7))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AMS_PLL_PLL_CTL7r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL7r,(_r._ams_pll_pll_ctl7)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AMS_PLL_PLL_CTL7r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL7r,(_r._ams_pll_pll_ctl7))
#define BCMI_TSCF_GEN3_XGXS_READLN_AMS_PLL_PLL_CTL7r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL7r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_ctl7))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AMS_PLL_PLL_CTL7r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL7r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_ctl7))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AMS_PLL_PLL_CTL7r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL7r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_pll_pll_ctl7))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AMS_PLL_PLL_CTL7r BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL7r
#define AMS_PLL_PLL_CTL7r_SIZE BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL7r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL7r_t AMS_PLL_PLL_CTL7r_t;
#define AMS_PLL_PLL_CTL7r_CLR BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL7r_CLR
#define AMS_PLL_PLL_CTL7r_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL7r_SET
#define AMS_PLL_PLL_CTL7r_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL7r_GET
#define AMS_PLL_PLL_CTL7r_AMS_PLL_MIX3P1CR_PTATADJf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL7r_AMS_PLL_MIX3P1CR_PTATADJf_GET
#define AMS_PLL_PLL_CTL7r_AMS_PLL_MIX3P1CR_PTATADJf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL7r_AMS_PLL_MIX3P1CR_PTATADJf_SET
#define AMS_PLL_PLL_CTL7r_AMS_PLL_MIX3P1CR_CTATADJf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL7r_AMS_PLL_MIX3P1CR_CTATADJf_GET
#define AMS_PLL_PLL_CTL7r_AMS_PLL_MIX3P1CR_CTATADJf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL7r_AMS_PLL_MIX3P1CR_CTATADJf_SET
#define AMS_PLL_PLL_CTL7r_AMS_PLL_SPARE_117_114f_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL7r_AMS_PLL_SPARE_117_114f_GET
#define AMS_PLL_PLL_CTL7r_AMS_PLL_SPARE_117_114f_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL7r_AMS_PLL_SPARE_117_114f_SET
#define AMS_PLL_PLL_CTL7r_AMS_PLL_REFCLK4COM_DIV4f_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL7r_AMS_PLL_REFCLK4COM_DIV4f_GET
#define AMS_PLL_PLL_CTL7r_AMS_PLL_REFCLK4COM_DIV4f_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL7r_AMS_PLL_REFCLK4COM_DIV4f_SET
#define AMS_PLL_PLL_CTL7r_AMS_PLL_REFCLK4COM_DIV2f_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL7r_AMS_PLL_REFCLK4COM_DIV2f_GET
#define AMS_PLL_PLL_CTL7r_AMS_PLL_REFCLK4COM_DIV2f_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL7r_AMS_PLL_REFCLK4COM_DIV2f_SET
#define READ_AMS_PLL_PLL_CTL7r BCMI_TSCF_GEN3_XGXS_READ_AMS_PLL_PLL_CTL7r
#define WRITE_AMS_PLL_PLL_CTL7r BCMI_TSCF_GEN3_XGXS_WRITE_AMS_PLL_PLL_CTL7r
#define MODIFY_AMS_PLL_PLL_CTL7r BCMI_TSCF_GEN3_XGXS_MODIFY_AMS_PLL_PLL_CTL7r
#define READLN_AMS_PLL_PLL_CTL7r BCMI_TSCF_GEN3_XGXS_READLN_AMS_PLL_PLL_CTL7r
#define WRITELN_AMS_PLL_PLL_CTL7r BCMI_TSCF_GEN3_XGXS_WRITELN_AMS_PLL_PLL_CTL7r
#define WRITEALL_AMS_PLL_PLL_CTL7r BCMI_TSCF_GEN3_XGXS_WRITEALL_AMS_PLL_PLL_CTL7r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL7r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AMS_PLL_PLL_CTL8
 * BLOCKS:   AMS_PLL_COM
 * REGADDR:  0xd118
 * DEVAD:    1
 * DESC:     AMS PLL CONTROL_8
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_PLL_SPARE_143_128 AMS reserved[143:128] amsbus ctrl_out  143:128DFT_DFS=16'd0
 */
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL8r (0x0001d118 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL8r_SIZE 4

/*
 * This structure should be used to declare and program AMS_PLL_PLL_CTL8.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL8r_s {
	uint32_t v[1];
	uint32_t ams_pll_pll_ctl8[1];
	uint32_t _ams_pll_pll_ctl8;
} BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL8r_t;

#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL8r_CLR(r) (r).ams_pll_pll_ctl8[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL8r_SET(r,d) (r).ams_pll_pll_ctl8[0] = d
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL8r_GET(r) (r).ams_pll_pll_ctl8[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL8r_AMS_PLL_SPARE_143_128f_GET(r) (((r).ams_pll_pll_ctl8[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL8r_AMS_PLL_SPARE_143_128f_SET(r,f) (r).ams_pll_pll_ctl8[0]=(((r).ams_pll_pll_ctl8[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AMS_PLL_PLL_CTL8.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AMS_PLL_PLL_CTL8r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL8r,(_r._ams_pll_pll_ctl8))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AMS_PLL_PLL_CTL8r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL8r,(_r._ams_pll_pll_ctl8)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AMS_PLL_PLL_CTL8r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL8r,(_r._ams_pll_pll_ctl8))
#define BCMI_TSCF_GEN3_XGXS_READLN_AMS_PLL_PLL_CTL8r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL8r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_ctl8))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AMS_PLL_PLL_CTL8r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL8r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_ctl8))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AMS_PLL_PLL_CTL8r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL8r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_pll_pll_ctl8))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AMS_PLL_PLL_CTL8r BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL8r
#define AMS_PLL_PLL_CTL8r_SIZE BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL8r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL8r_t AMS_PLL_PLL_CTL8r_t;
#define AMS_PLL_PLL_CTL8r_CLR BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL8r_CLR
#define AMS_PLL_PLL_CTL8r_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL8r_SET
#define AMS_PLL_PLL_CTL8r_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL8r_GET
#define AMS_PLL_PLL_CTL8r_AMS_PLL_SPARE_143_128f_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL8r_AMS_PLL_SPARE_143_128f_GET
#define AMS_PLL_PLL_CTL8r_AMS_PLL_SPARE_143_128f_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL8r_AMS_PLL_SPARE_143_128f_SET
#define READ_AMS_PLL_PLL_CTL8r BCMI_TSCF_GEN3_XGXS_READ_AMS_PLL_PLL_CTL8r
#define WRITE_AMS_PLL_PLL_CTL8r BCMI_TSCF_GEN3_XGXS_WRITE_AMS_PLL_PLL_CTL8r
#define MODIFY_AMS_PLL_PLL_CTL8r BCMI_TSCF_GEN3_XGXS_MODIFY_AMS_PLL_PLL_CTL8r
#define READLN_AMS_PLL_PLL_CTL8r BCMI_TSCF_GEN3_XGXS_READLN_AMS_PLL_PLL_CTL8r
#define WRITELN_AMS_PLL_PLL_CTL8r BCMI_TSCF_GEN3_XGXS_WRITELN_AMS_PLL_PLL_CTL8r
#define WRITEALL_AMS_PLL_PLL_CTL8r BCMI_TSCF_GEN3_XGXS_WRITEALL_AMS_PLL_PLL_CTL8r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL8r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AMS_PLL_PLL_CTL9
 * BLOCKS:   AMS_PLL_COM
 * REGADDR:  0xd119
 * DEVAD:    1
 * DESC:     AMS PLL CONTROL_9
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_PLL_SPARE_159_144 AMS reserved[159:144] amsbus ctrl_out  159:144DFT_DFS=16'd0
 */
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL9r (0x0001d119 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL9r_SIZE 4

/*
 * This structure should be used to declare and program AMS_PLL_PLL_CTL9.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL9r_s {
	uint32_t v[1];
	uint32_t ams_pll_pll_ctl9[1];
	uint32_t _ams_pll_pll_ctl9;
} BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL9r_t;

#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL9r_CLR(r) (r).ams_pll_pll_ctl9[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL9r_SET(r,d) (r).ams_pll_pll_ctl9[0] = d
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL9r_GET(r) (r).ams_pll_pll_ctl9[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL9r_AMS_PLL_SPARE_159_144f_GET(r) (((r).ams_pll_pll_ctl9[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL9r_AMS_PLL_SPARE_159_144f_SET(r,f) (r).ams_pll_pll_ctl9[0]=(((r).ams_pll_pll_ctl9[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AMS_PLL_PLL_CTL9.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AMS_PLL_PLL_CTL9r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL9r,(_r._ams_pll_pll_ctl9))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AMS_PLL_PLL_CTL9r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL9r,(_r._ams_pll_pll_ctl9)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AMS_PLL_PLL_CTL9r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL9r,(_r._ams_pll_pll_ctl9))
#define BCMI_TSCF_GEN3_XGXS_READLN_AMS_PLL_PLL_CTL9r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL9r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_ctl9))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AMS_PLL_PLL_CTL9r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL9r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_ctl9))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AMS_PLL_PLL_CTL9r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL9r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_pll_pll_ctl9))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AMS_PLL_PLL_CTL9r BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL9r
#define AMS_PLL_PLL_CTL9r_SIZE BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL9r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL9r_t AMS_PLL_PLL_CTL9r_t;
#define AMS_PLL_PLL_CTL9r_CLR BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL9r_CLR
#define AMS_PLL_PLL_CTL9r_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL9r_SET
#define AMS_PLL_PLL_CTL9r_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL9r_GET
#define AMS_PLL_PLL_CTL9r_AMS_PLL_SPARE_159_144f_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL9r_AMS_PLL_SPARE_159_144f_GET
#define AMS_PLL_PLL_CTL9r_AMS_PLL_SPARE_159_144f_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL9r_AMS_PLL_SPARE_159_144f_SET
#define READ_AMS_PLL_PLL_CTL9r BCMI_TSCF_GEN3_XGXS_READ_AMS_PLL_PLL_CTL9r
#define WRITE_AMS_PLL_PLL_CTL9r BCMI_TSCF_GEN3_XGXS_WRITE_AMS_PLL_PLL_CTL9r
#define MODIFY_AMS_PLL_PLL_CTL9r BCMI_TSCF_GEN3_XGXS_MODIFY_AMS_PLL_PLL_CTL9r
#define READLN_AMS_PLL_PLL_CTL9r BCMI_TSCF_GEN3_XGXS_READLN_AMS_PLL_PLL_CTL9r
#define WRITELN_AMS_PLL_PLL_CTL9r BCMI_TSCF_GEN3_XGXS_WRITELN_AMS_PLL_PLL_CTL9r
#define WRITEALL_AMS_PLL_PLL_CTL9r BCMI_TSCF_GEN3_XGXS_WRITEALL_AMS_PLL_PLL_CTL9r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_CTL9r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AMS_PLL_PLL_INTCTL
 * BLOCKS:   AMS_PLL_COM
 * REGADDR:  0xd11b
 * DEVAD:    1
 * DESC:     INTERNAL PLL CONTROL
 * RESETVAL: 0x4 (4)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_PLL_RTERM_SEL when 0, sel rterm input pins, when 1 sel pll AMS ctrl
 *     AMS_PLL_DIV4_2_SEL when 0, sel div4/2 and refclk4com_div4/2 input pins, when 1 sel pll AMS ctrl
 *     AMS_PLL_PWRDN    when1, power down pll
 */
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_INTCTLr (0x0001d11b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_INTCTLr_SIZE 4

/*
 * This structure should be used to declare and program AMS_PLL_PLL_INTCTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_INTCTLr_s {
	uint32_t v[1];
	uint32_t ams_pll_pll_intctl[1];
	uint32_t _ams_pll_pll_intctl;
} BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_INTCTLr_t;

#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_INTCTLr_CLR(r) (r).ams_pll_pll_intctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_INTCTLr_SET(r,d) (r).ams_pll_pll_intctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_INTCTLr_GET(r) (r).ams_pll_pll_intctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_INTCTLr_AMS_PLL_PWRDNf_GET(r) ((((r).ams_pll_pll_intctl[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_INTCTLr_AMS_PLL_PWRDNf_SET(r,f) (r).ams_pll_pll_intctl[0]=(((r).ams_pll_pll_intctl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_INTCTLr_AMS_PLL_DIV4_2_SELf_GET(r) ((((r).ams_pll_pll_intctl[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_INTCTLr_AMS_PLL_DIV4_2_SELf_SET(r,f) (r).ams_pll_pll_intctl[0]=(((r).ams_pll_pll_intctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_INTCTLr_AMS_PLL_RTERM_SELf_GET(r) (((r).ams_pll_pll_intctl[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_INTCTLr_AMS_PLL_RTERM_SELf_SET(r,f) (r).ams_pll_pll_intctl[0]=(((r).ams_pll_pll_intctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AMS_PLL_PLL_INTCTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AMS_PLL_PLL_INTCTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_INTCTLr,(_r._ams_pll_pll_intctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AMS_PLL_PLL_INTCTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_INTCTLr,(_r._ams_pll_pll_intctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AMS_PLL_PLL_INTCTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_INTCTLr,(_r._ams_pll_pll_intctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_AMS_PLL_PLL_INTCTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_INTCTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_intctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AMS_PLL_PLL_INTCTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_INTCTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_intctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AMS_PLL_PLL_INTCTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_INTCTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_pll_pll_intctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AMS_PLL_PLL_INTCTLr BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_INTCTLr
#define AMS_PLL_PLL_INTCTLr_SIZE BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_INTCTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_INTCTLr_t AMS_PLL_PLL_INTCTLr_t;
#define AMS_PLL_PLL_INTCTLr_CLR BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_INTCTLr_CLR
#define AMS_PLL_PLL_INTCTLr_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_INTCTLr_SET
#define AMS_PLL_PLL_INTCTLr_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_INTCTLr_GET
#define AMS_PLL_PLL_INTCTLr_AMS_PLL_PWRDNf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_INTCTLr_AMS_PLL_PWRDNf_GET
#define AMS_PLL_PLL_INTCTLr_AMS_PLL_PWRDNf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_INTCTLr_AMS_PLL_PWRDNf_SET
#define AMS_PLL_PLL_INTCTLr_AMS_PLL_DIV4_2_SELf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_INTCTLr_AMS_PLL_DIV4_2_SELf_GET
#define AMS_PLL_PLL_INTCTLr_AMS_PLL_DIV4_2_SELf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_INTCTLr_AMS_PLL_DIV4_2_SELf_SET
#define AMS_PLL_PLL_INTCTLr_AMS_PLL_RTERM_SELf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_INTCTLr_AMS_PLL_RTERM_SELf_GET
#define AMS_PLL_PLL_INTCTLr_AMS_PLL_RTERM_SELf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_INTCTLr_AMS_PLL_RTERM_SELf_SET
#define READ_AMS_PLL_PLL_INTCTLr BCMI_TSCF_GEN3_XGXS_READ_AMS_PLL_PLL_INTCTLr
#define WRITE_AMS_PLL_PLL_INTCTLr BCMI_TSCF_GEN3_XGXS_WRITE_AMS_PLL_PLL_INTCTLr
#define MODIFY_AMS_PLL_PLL_INTCTLr BCMI_TSCF_GEN3_XGXS_MODIFY_AMS_PLL_PLL_INTCTLr
#define READLN_AMS_PLL_PLL_INTCTLr BCMI_TSCF_GEN3_XGXS_READLN_AMS_PLL_PLL_INTCTLr
#define WRITELN_AMS_PLL_PLL_INTCTLr BCMI_TSCF_GEN3_XGXS_WRITELN_AMS_PLL_PLL_INTCTLr
#define WRITEALL_AMS_PLL_PLL_INTCTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_AMS_PLL_PLL_INTCTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_INTCTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  AMS_PLL_PLL_STS
 * BLOCKS:   AMS_PLL_COM
 * REGADDR:  0xd11c
 * DEVAD:    1
 * DESC:     AMS PLL STATUS
 * RESETVAL: 0x7 (7)
 * ACCESS:   R/O
 * FIELDS:
 *     AMS_PLL_NDIV     Copy of pll_mode[4:0] bits
 *     AMS_PLL_LOW      VCO tuning output, HIGH when VCO Vctrl is low or PLL frequency is too low
 *     AMS_PLL_RANGE    VCO frequency range control (8 bits)
 *     AMS_PLL_KVH      KVH[1:0]
 */
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_STSr (0x0001d11c | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_STSr_SIZE 4

/*
 * This structure should be used to declare and program AMS_PLL_PLL_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_STSr_s {
	uint32_t v[1];
	uint32_t ams_pll_pll_sts[1];
	uint32_t _ams_pll_pll_sts;
} BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_STSr_CLR(r) (r).ams_pll_pll_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_STSr_SET(r,d) (r).ams_pll_pll_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_STSr_GET(r) (r).ams_pll_pll_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_STSr_AMS_PLL_KVHf_GET(r) ((((r).ams_pll_pll_sts[0]) >> 14) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_STSr_AMS_PLL_KVHf_SET(r,f) (r).ams_pll_pll_sts[0]=(((r).ams_pll_pll_sts[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_STSr_AMS_PLL_RANGEf_GET(r) ((((r).ams_pll_pll_sts[0]) >> 6) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_STSr_AMS_PLL_RANGEf_SET(r,f) (r).ams_pll_pll_sts[0]=(((r).ams_pll_pll_sts[0] & ~((uint32_t)0xff << 6)) | ((((uint32_t)f) & 0xff) << 6)) | (255 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_STSr_AMS_PLL_LOWf_GET(r) ((((r).ams_pll_pll_sts[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_STSr_AMS_PLL_LOWf_SET(r,f) (r).ams_pll_pll_sts[0]=(((r).ams_pll_pll_sts[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_STSr_AMS_PLL_NDIVf_GET(r) (((r).ams_pll_pll_sts[0]) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_STSr_AMS_PLL_NDIVf_SET(r,f) (r).ams_pll_pll_sts[0]=(((r).ams_pll_pll_sts[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access AMS_PLL_PLL_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_AMS_PLL_PLL_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_STSr,(_r._ams_pll_pll_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_AMS_PLL_PLL_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_STSr,(_r._ams_pll_pll_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_AMS_PLL_PLL_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_STSr,(_r._ams_pll_pll_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_AMS_PLL_PLL_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_AMS_PLL_PLL_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_AMS_PLL_PLL_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_pll_pll_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AMS_PLL_PLL_STSr BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_STSr
#define AMS_PLL_PLL_STSr_SIZE BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_STSr_t AMS_PLL_PLL_STSr_t;
#define AMS_PLL_PLL_STSr_CLR BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_STSr_CLR
#define AMS_PLL_PLL_STSr_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_STSr_SET
#define AMS_PLL_PLL_STSr_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_STSr_GET
#define AMS_PLL_PLL_STSr_AMS_PLL_KVHf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_STSr_AMS_PLL_KVHf_GET
#define AMS_PLL_PLL_STSr_AMS_PLL_KVHf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_STSr_AMS_PLL_KVHf_SET
#define AMS_PLL_PLL_STSr_AMS_PLL_RANGEf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_STSr_AMS_PLL_RANGEf_GET
#define AMS_PLL_PLL_STSr_AMS_PLL_RANGEf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_STSr_AMS_PLL_RANGEf_SET
#define AMS_PLL_PLL_STSr_AMS_PLL_LOWf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_STSr_AMS_PLL_LOWf_GET
#define AMS_PLL_PLL_STSr_AMS_PLL_LOWf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_STSr_AMS_PLL_LOWf_SET
#define AMS_PLL_PLL_STSr_AMS_PLL_NDIVf_GET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_STSr_AMS_PLL_NDIVf_GET
#define AMS_PLL_PLL_STSr_AMS_PLL_NDIVf_SET BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_STSr_AMS_PLL_NDIVf_SET
#define READ_AMS_PLL_PLL_STSr BCMI_TSCF_GEN3_XGXS_READ_AMS_PLL_PLL_STSr
#define WRITE_AMS_PLL_PLL_STSr BCMI_TSCF_GEN3_XGXS_WRITE_AMS_PLL_PLL_STSr
#define MODIFY_AMS_PLL_PLL_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_AMS_PLL_PLL_STSr
#define READLN_AMS_PLL_PLL_STSr BCMI_TSCF_GEN3_XGXS_READLN_AMS_PLL_PLL_STSr
#define WRITELN_AMS_PLL_PLL_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_AMS_PLL_PLL_STSr
#define WRITEALL_AMS_PLL_PLL_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_AMS_PLL_PLL_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_AMS_PLL_PLL_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PATT_GEN_PATT_GEN_SEQ0
 * BLOCKS:   PATT_GEN_COM
 * REGADDR:  0xd120
 * DEVAD:    1
 * DESC:     Pattern Generator Sequence Word 0
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/W
 * FIELDS:
 *     PATT_GEN_SEQ_0   Fixed Pattern Generator Sequence Word 0. MSB bits will be transmitted first on serial transmit lane in both shared and slice mode. This word will be transmitted last.
 */
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ0r (0x0001d120 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ0r_SIZE 4

/*
 * This structure should be used to declare and program PATT_GEN_PATT_GEN_SEQ0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ0r_s {
	uint32_t v[1];
	uint32_t patt_gen_patt_gen_seq0[1];
	uint32_t _patt_gen_patt_gen_seq0;
} BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ0r_t;

#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ0r_CLR(r) (r).patt_gen_patt_gen_seq0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ0r_SET(r,d) (r).patt_gen_patt_gen_seq0[0] = d
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ0r_GET(r) (r).patt_gen_patt_gen_seq0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ0r_PATT_GEN_SEQ_0f_GET(r) (((r).patt_gen_patt_gen_seq0[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ0r_PATT_GEN_SEQ_0f_SET(r,f) (r).patt_gen_patt_gen_seq0[0]=(((r).patt_gen_patt_gen_seq0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PATT_GEN_PATT_GEN_SEQ0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PATT_GEN_PATT_GEN_SEQ0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ0r,(_r._patt_gen_patt_gen_seq0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PATT_GEN_PATT_GEN_SEQ0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ0r,(_r._patt_gen_patt_gen_seq0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PATT_GEN_PATT_GEN_SEQ0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ0r,(_r._patt_gen_patt_gen_seq0))
#define BCMI_TSCF_GEN3_XGXS_READLN_PATT_GEN_PATT_GEN_SEQ0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_patt_gen_seq0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_PATT_GEN_PATT_GEN_SEQ0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_patt_gen_seq0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_PATT_GEN_PATT_GEN_SEQ0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._patt_gen_patt_gen_seq0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PATT_GEN_PATT_GEN_SEQ0r BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ0r
#define PATT_GEN_PATT_GEN_SEQ0r_SIZE BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ0r_t PATT_GEN_PATT_GEN_SEQ0r_t;
#define PATT_GEN_PATT_GEN_SEQ0r_CLR BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ0r_CLR
#define PATT_GEN_PATT_GEN_SEQ0r_SET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ0r_SET
#define PATT_GEN_PATT_GEN_SEQ0r_GET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ0r_GET
#define PATT_GEN_PATT_GEN_SEQ0r_PATT_GEN_SEQ_0f_GET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ0r_PATT_GEN_SEQ_0f_GET
#define PATT_GEN_PATT_GEN_SEQ0r_PATT_GEN_SEQ_0f_SET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ0r_PATT_GEN_SEQ_0f_SET
#define READ_PATT_GEN_PATT_GEN_SEQ0r BCMI_TSCF_GEN3_XGXS_READ_PATT_GEN_PATT_GEN_SEQ0r
#define WRITE_PATT_GEN_PATT_GEN_SEQ0r BCMI_TSCF_GEN3_XGXS_WRITE_PATT_GEN_PATT_GEN_SEQ0r
#define MODIFY_PATT_GEN_PATT_GEN_SEQ0r BCMI_TSCF_GEN3_XGXS_MODIFY_PATT_GEN_PATT_GEN_SEQ0r
#define READLN_PATT_GEN_PATT_GEN_SEQ0r BCMI_TSCF_GEN3_XGXS_READLN_PATT_GEN_PATT_GEN_SEQ0r
#define WRITELN_PATT_GEN_PATT_GEN_SEQ0r BCMI_TSCF_GEN3_XGXS_WRITELN_PATT_GEN_PATT_GEN_SEQ0r
#define WRITEALL_PATT_GEN_PATT_GEN_SEQ0r BCMI_TSCF_GEN3_XGXS_WRITEALL_PATT_GEN_PATT_GEN_SEQ0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PATT_GEN_PATT_GEN_SEQ1
 * BLOCKS:   PATT_GEN_COM
 * REGADDR:  0xd121
 * DEVAD:    1
 * DESC:     Pattern Generator Sequence Word 1
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/W
 * FIELDS:
 *     PATT_GEN_SEQ_1   Fixed Pattern Generator Sequence Word 1. MSB bits will be transmitted first on serial transmit lane in both shared and slice mode.
 */
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ1r (0x0001d121 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ1r_SIZE 4

/*
 * This structure should be used to declare and program PATT_GEN_PATT_GEN_SEQ1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ1r_s {
	uint32_t v[1];
	uint32_t patt_gen_patt_gen_seq1[1];
	uint32_t _patt_gen_patt_gen_seq1;
} BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ1r_t;

#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ1r_CLR(r) (r).patt_gen_patt_gen_seq1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ1r_SET(r,d) (r).patt_gen_patt_gen_seq1[0] = d
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ1r_GET(r) (r).patt_gen_patt_gen_seq1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ1r_PATT_GEN_SEQ_1f_GET(r) (((r).patt_gen_patt_gen_seq1[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ1r_PATT_GEN_SEQ_1f_SET(r,f) (r).patt_gen_patt_gen_seq1[0]=(((r).patt_gen_patt_gen_seq1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PATT_GEN_PATT_GEN_SEQ1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PATT_GEN_PATT_GEN_SEQ1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ1r,(_r._patt_gen_patt_gen_seq1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PATT_GEN_PATT_GEN_SEQ1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ1r,(_r._patt_gen_patt_gen_seq1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PATT_GEN_PATT_GEN_SEQ1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ1r,(_r._patt_gen_patt_gen_seq1))
#define BCMI_TSCF_GEN3_XGXS_READLN_PATT_GEN_PATT_GEN_SEQ1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_patt_gen_seq1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_PATT_GEN_PATT_GEN_SEQ1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_patt_gen_seq1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_PATT_GEN_PATT_GEN_SEQ1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._patt_gen_patt_gen_seq1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PATT_GEN_PATT_GEN_SEQ1r BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ1r
#define PATT_GEN_PATT_GEN_SEQ1r_SIZE BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ1r_t PATT_GEN_PATT_GEN_SEQ1r_t;
#define PATT_GEN_PATT_GEN_SEQ1r_CLR BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ1r_CLR
#define PATT_GEN_PATT_GEN_SEQ1r_SET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ1r_SET
#define PATT_GEN_PATT_GEN_SEQ1r_GET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ1r_GET
#define PATT_GEN_PATT_GEN_SEQ1r_PATT_GEN_SEQ_1f_GET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ1r_PATT_GEN_SEQ_1f_GET
#define PATT_GEN_PATT_GEN_SEQ1r_PATT_GEN_SEQ_1f_SET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ1r_PATT_GEN_SEQ_1f_SET
#define READ_PATT_GEN_PATT_GEN_SEQ1r BCMI_TSCF_GEN3_XGXS_READ_PATT_GEN_PATT_GEN_SEQ1r
#define WRITE_PATT_GEN_PATT_GEN_SEQ1r BCMI_TSCF_GEN3_XGXS_WRITE_PATT_GEN_PATT_GEN_SEQ1r
#define MODIFY_PATT_GEN_PATT_GEN_SEQ1r BCMI_TSCF_GEN3_XGXS_MODIFY_PATT_GEN_PATT_GEN_SEQ1r
#define READLN_PATT_GEN_PATT_GEN_SEQ1r BCMI_TSCF_GEN3_XGXS_READLN_PATT_GEN_PATT_GEN_SEQ1r
#define WRITELN_PATT_GEN_PATT_GEN_SEQ1r BCMI_TSCF_GEN3_XGXS_WRITELN_PATT_GEN_PATT_GEN_SEQ1r
#define WRITEALL_PATT_GEN_PATT_GEN_SEQ1r BCMI_TSCF_GEN3_XGXS_WRITEALL_PATT_GEN_PATT_GEN_SEQ1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PATT_GEN_PATT_GEN_SEQ2
 * BLOCKS:   PATT_GEN_COM
 * REGADDR:  0xd122
 * DEVAD:    1
 * DESC:     Pattern Generator Sequence Word 2
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/W
 * FIELDS:
 *     PATT_GEN_SEQ_2   Fixed Pattern Generator Sequence Word 2. MSB bits will be transmitted first on serial transmit lane in both shared and slice mode.
 */
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ2r (0x0001d122 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ2r_SIZE 4

/*
 * This structure should be used to declare and program PATT_GEN_PATT_GEN_SEQ2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ2r_s {
	uint32_t v[1];
	uint32_t patt_gen_patt_gen_seq2[1];
	uint32_t _patt_gen_patt_gen_seq2;
} BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ2r_t;

#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ2r_CLR(r) (r).patt_gen_patt_gen_seq2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ2r_SET(r,d) (r).patt_gen_patt_gen_seq2[0] = d
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ2r_GET(r) (r).patt_gen_patt_gen_seq2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ2r_PATT_GEN_SEQ_2f_GET(r) (((r).patt_gen_patt_gen_seq2[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ2r_PATT_GEN_SEQ_2f_SET(r,f) (r).patt_gen_patt_gen_seq2[0]=(((r).patt_gen_patt_gen_seq2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PATT_GEN_PATT_GEN_SEQ2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PATT_GEN_PATT_GEN_SEQ2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ2r,(_r._patt_gen_patt_gen_seq2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PATT_GEN_PATT_GEN_SEQ2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ2r,(_r._patt_gen_patt_gen_seq2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PATT_GEN_PATT_GEN_SEQ2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ2r,(_r._patt_gen_patt_gen_seq2))
#define BCMI_TSCF_GEN3_XGXS_READLN_PATT_GEN_PATT_GEN_SEQ2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_patt_gen_seq2))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_PATT_GEN_PATT_GEN_SEQ2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_patt_gen_seq2))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_PATT_GEN_PATT_GEN_SEQ2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._patt_gen_patt_gen_seq2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PATT_GEN_PATT_GEN_SEQ2r BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ2r
#define PATT_GEN_PATT_GEN_SEQ2r_SIZE BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ2r_t PATT_GEN_PATT_GEN_SEQ2r_t;
#define PATT_GEN_PATT_GEN_SEQ2r_CLR BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ2r_CLR
#define PATT_GEN_PATT_GEN_SEQ2r_SET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ2r_SET
#define PATT_GEN_PATT_GEN_SEQ2r_GET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ2r_GET
#define PATT_GEN_PATT_GEN_SEQ2r_PATT_GEN_SEQ_2f_GET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ2r_PATT_GEN_SEQ_2f_GET
#define PATT_GEN_PATT_GEN_SEQ2r_PATT_GEN_SEQ_2f_SET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ2r_PATT_GEN_SEQ_2f_SET
#define READ_PATT_GEN_PATT_GEN_SEQ2r BCMI_TSCF_GEN3_XGXS_READ_PATT_GEN_PATT_GEN_SEQ2r
#define WRITE_PATT_GEN_PATT_GEN_SEQ2r BCMI_TSCF_GEN3_XGXS_WRITE_PATT_GEN_PATT_GEN_SEQ2r
#define MODIFY_PATT_GEN_PATT_GEN_SEQ2r BCMI_TSCF_GEN3_XGXS_MODIFY_PATT_GEN_PATT_GEN_SEQ2r
#define READLN_PATT_GEN_PATT_GEN_SEQ2r BCMI_TSCF_GEN3_XGXS_READLN_PATT_GEN_PATT_GEN_SEQ2r
#define WRITELN_PATT_GEN_PATT_GEN_SEQ2r BCMI_TSCF_GEN3_XGXS_WRITELN_PATT_GEN_PATT_GEN_SEQ2r
#define WRITEALL_PATT_GEN_PATT_GEN_SEQ2r BCMI_TSCF_GEN3_XGXS_WRITEALL_PATT_GEN_PATT_GEN_SEQ2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PATT_GEN_PATT_GEN_SEQ3
 * BLOCKS:   PATT_GEN_COM
 * REGADDR:  0xd123
 * DEVAD:    1
 * DESC:     Pattern Generator Sequence Word 3
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/W
 * FIELDS:
 *     PATT_GEN_SEQ_3   Fixed Pattern Generator Sequence Word 3. MSB bits will be transmitted first on serial transmit lane in both shared and slice mode.
 */
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ3r (0x0001d123 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ3r_SIZE 4

/*
 * This structure should be used to declare and program PATT_GEN_PATT_GEN_SEQ3.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ3r_s {
	uint32_t v[1];
	uint32_t patt_gen_patt_gen_seq3[1];
	uint32_t _patt_gen_patt_gen_seq3;
} BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ3r_t;

#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ3r_CLR(r) (r).patt_gen_patt_gen_seq3[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ3r_SET(r,d) (r).patt_gen_patt_gen_seq3[0] = d
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ3r_GET(r) (r).patt_gen_patt_gen_seq3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ3r_PATT_GEN_SEQ_3f_GET(r) (((r).patt_gen_patt_gen_seq3[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ3r_PATT_GEN_SEQ_3f_SET(r,f) (r).patt_gen_patt_gen_seq3[0]=(((r).patt_gen_patt_gen_seq3[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PATT_GEN_PATT_GEN_SEQ3.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PATT_GEN_PATT_GEN_SEQ3r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ3r,(_r._patt_gen_patt_gen_seq3))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PATT_GEN_PATT_GEN_SEQ3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ3r,(_r._patt_gen_patt_gen_seq3)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PATT_GEN_PATT_GEN_SEQ3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ3r,(_r._patt_gen_patt_gen_seq3))
#define BCMI_TSCF_GEN3_XGXS_READLN_PATT_GEN_PATT_GEN_SEQ3r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_patt_gen_seq3))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_PATT_GEN_PATT_GEN_SEQ3r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_patt_gen_seq3))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_PATT_GEN_PATT_GEN_SEQ3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ3r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._patt_gen_patt_gen_seq3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PATT_GEN_PATT_GEN_SEQ3r BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ3r
#define PATT_GEN_PATT_GEN_SEQ3r_SIZE BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ3r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ3r_t PATT_GEN_PATT_GEN_SEQ3r_t;
#define PATT_GEN_PATT_GEN_SEQ3r_CLR BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ3r_CLR
#define PATT_GEN_PATT_GEN_SEQ3r_SET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ3r_SET
#define PATT_GEN_PATT_GEN_SEQ3r_GET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ3r_GET
#define PATT_GEN_PATT_GEN_SEQ3r_PATT_GEN_SEQ_3f_GET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ3r_PATT_GEN_SEQ_3f_GET
#define PATT_GEN_PATT_GEN_SEQ3r_PATT_GEN_SEQ_3f_SET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ3r_PATT_GEN_SEQ_3f_SET
#define READ_PATT_GEN_PATT_GEN_SEQ3r BCMI_TSCF_GEN3_XGXS_READ_PATT_GEN_PATT_GEN_SEQ3r
#define WRITE_PATT_GEN_PATT_GEN_SEQ3r BCMI_TSCF_GEN3_XGXS_WRITE_PATT_GEN_PATT_GEN_SEQ3r
#define MODIFY_PATT_GEN_PATT_GEN_SEQ3r BCMI_TSCF_GEN3_XGXS_MODIFY_PATT_GEN_PATT_GEN_SEQ3r
#define READLN_PATT_GEN_PATT_GEN_SEQ3r BCMI_TSCF_GEN3_XGXS_READLN_PATT_GEN_PATT_GEN_SEQ3r
#define WRITELN_PATT_GEN_PATT_GEN_SEQ3r BCMI_TSCF_GEN3_XGXS_WRITELN_PATT_GEN_PATT_GEN_SEQ3r
#define WRITEALL_PATT_GEN_PATT_GEN_SEQ3r BCMI_TSCF_GEN3_XGXS_WRITEALL_PATT_GEN_PATT_GEN_SEQ3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PATT_GEN_PATT_GEN_SEQ4
 * BLOCKS:   PATT_GEN_COM
 * REGADDR:  0xd124
 * DEVAD:    1
 * DESC:     Pattern Generator Sequence Word 4
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/W
 * FIELDS:
 *     PATT_GEN_SEQ_4   Fixed Pattern Generator Sequence Word 4. MSB bits will be transmitted first on serial transmit lane in both shared and slice mode.
 */
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ4r (0x0001d124 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ4r_SIZE 4

/*
 * This structure should be used to declare and program PATT_GEN_PATT_GEN_SEQ4.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ4r_s {
	uint32_t v[1];
	uint32_t patt_gen_patt_gen_seq4[1];
	uint32_t _patt_gen_patt_gen_seq4;
} BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ4r_t;

#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ4r_CLR(r) (r).patt_gen_patt_gen_seq4[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ4r_SET(r,d) (r).patt_gen_patt_gen_seq4[0] = d
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ4r_GET(r) (r).patt_gen_patt_gen_seq4[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ4r_PATT_GEN_SEQ_4f_GET(r) (((r).patt_gen_patt_gen_seq4[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ4r_PATT_GEN_SEQ_4f_SET(r,f) (r).patt_gen_patt_gen_seq4[0]=(((r).patt_gen_patt_gen_seq4[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PATT_GEN_PATT_GEN_SEQ4.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PATT_GEN_PATT_GEN_SEQ4r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ4r,(_r._patt_gen_patt_gen_seq4))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PATT_GEN_PATT_GEN_SEQ4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ4r,(_r._patt_gen_patt_gen_seq4)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PATT_GEN_PATT_GEN_SEQ4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ4r,(_r._patt_gen_patt_gen_seq4))
#define BCMI_TSCF_GEN3_XGXS_READLN_PATT_GEN_PATT_GEN_SEQ4r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_patt_gen_seq4))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_PATT_GEN_PATT_GEN_SEQ4r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_patt_gen_seq4))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_PATT_GEN_PATT_GEN_SEQ4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ4r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._patt_gen_patt_gen_seq4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PATT_GEN_PATT_GEN_SEQ4r BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ4r
#define PATT_GEN_PATT_GEN_SEQ4r_SIZE BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ4r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ4r_t PATT_GEN_PATT_GEN_SEQ4r_t;
#define PATT_GEN_PATT_GEN_SEQ4r_CLR BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ4r_CLR
#define PATT_GEN_PATT_GEN_SEQ4r_SET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ4r_SET
#define PATT_GEN_PATT_GEN_SEQ4r_GET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ4r_GET
#define PATT_GEN_PATT_GEN_SEQ4r_PATT_GEN_SEQ_4f_GET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ4r_PATT_GEN_SEQ_4f_GET
#define PATT_GEN_PATT_GEN_SEQ4r_PATT_GEN_SEQ_4f_SET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ4r_PATT_GEN_SEQ_4f_SET
#define READ_PATT_GEN_PATT_GEN_SEQ4r BCMI_TSCF_GEN3_XGXS_READ_PATT_GEN_PATT_GEN_SEQ4r
#define WRITE_PATT_GEN_PATT_GEN_SEQ4r BCMI_TSCF_GEN3_XGXS_WRITE_PATT_GEN_PATT_GEN_SEQ4r
#define MODIFY_PATT_GEN_PATT_GEN_SEQ4r BCMI_TSCF_GEN3_XGXS_MODIFY_PATT_GEN_PATT_GEN_SEQ4r
#define READLN_PATT_GEN_PATT_GEN_SEQ4r BCMI_TSCF_GEN3_XGXS_READLN_PATT_GEN_PATT_GEN_SEQ4r
#define WRITELN_PATT_GEN_PATT_GEN_SEQ4r BCMI_TSCF_GEN3_XGXS_WRITELN_PATT_GEN_PATT_GEN_SEQ4r
#define WRITEALL_PATT_GEN_PATT_GEN_SEQ4r BCMI_TSCF_GEN3_XGXS_WRITEALL_PATT_GEN_PATT_GEN_SEQ4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ4r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PATT_GEN_PATT_GEN_SEQ5
 * BLOCKS:   PATT_GEN_COM
 * REGADDR:  0xd125
 * DEVAD:    1
 * DESC:     Pattern Generator Sequence Word 5
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/W
 * FIELDS:
 *     PATT_GEN_SEQ_5   Fixed Pattern Generator Sequence Word 5. MSB bits will be transmitted first on serial transmit lane in both shared and slice mode.
 */
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ5r (0x0001d125 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ5r_SIZE 4

/*
 * This structure should be used to declare and program PATT_GEN_PATT_GEN_SEQ5.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ5r_s {
	uint32_t v[1];
	uint32_t patt_gen_patt_gen_seq5[1];
	uint32_t _patt_gen_patt_gen_seq5;
} BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ5r_t;

#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ5r_CLR(r) (r).patt_gen_patt_gen_seq5[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ5r_SET(r,d) (r).patt_gen_patt_gen_seq5[0] = d
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ5r_GET(r) (r).patt_gen_patt_gen_seq5[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ5r_PATT_GEN_SEQ_5f_GET(r) (((r).patt_gen_patt_gen_seq5[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ5r_PATT_GEN_SEQ_5f_SET(r,f) (r).patt_gen_patt_gen_seq5[0]=(((r).patt_gen_patt_gen_seq5[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PATT_GEN_PATT_GEN_SEQ5.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PATT_GEN_PATT_GEN_SEQ5r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ5r,(_r._patt_gen_patt_gen_seq5))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PATT_GEN_PATT_GEN_SEQ5r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ5r,(_r._patt_gen_patt_gen_seq5)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PATT_GEN_PATT_GEN_SEQ5r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ5r,(_r._patt_gen_patt_gen_seq5))
#define BCMI_TSCF_GEN3_XGXS_READLN_PATT_GEN_PATT_GEN_SEQ5r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ5r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_patt_gen_seq5))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_PATT_GEN_PATT_GEN_SEQ5r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ5r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_patt_gen_seq5))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_PATT_GEN_PATT_GEN_SEQ5r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ5r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._patt_gen_patt_gen_seq5))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PATT_GEN_PATT_GEN_SEQ5r BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ5r
#define PATT_GEN_PATT_GEN_SEQ5r_SIZE BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ5r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ5r_t PATT_GEN_PATT_GEN_SEQ5r_t;
#define PATT_GEN_PATT_GEN_SEQ5r_CLR BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ5r_CLR
#define PATT_GEN_PATT_GEN_SEQ5r_SET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ5r_SET
#define PATT_GEN_PATT_GEN_SEQ5r_GET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ5r_GET
#define PATT_GEN_PATT_GEN_SEQ5r_PATT_GEN_SEQ_5f_GET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ5r_PATT_GEN_SEQ_5f_GET
#define PATT_GEN_PATT_GEN_SEQ5r_PATT_GEN_SEQ_5f_SET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ5r_PATT_GEN_SEQ_5f_SET
#define READ_PATT_GEN_PATT_GEN_SEQ5r BCMI_TSCF_GEN3_XGXS_READ_PATT_GEN_PATT_GEN_SEQ5r
#define WRITE_PATT_GEN_PATT_GEN_SEQ5r BCMI_TSCF_GEN3_XGXS_WRITE_PATT_GEN_PATT_GEN_SEQ5r
#define MODIFY_PATT_GEN_PATT_GEN_SEQ5r BCMI_TSCF_GEN3_XGXS_MODIFY_PATT_GEN_PATT_GEN_SEQ5r
#define READLN_PATT_GEN_PATT_GEN_SEQ5r BCMI_TSCF_GEN3_XGXS_READLN_PATT_GEN_PATT_GEN_SEQ5r
#define WRITELN_PATT_GEN_PATT_GEN_SEQ5r BCMI_TSCF_GEN3_XGXS_WRITELN_PATT_GEN_PATT_GEN_SEQ5r
#define WRITEALL_PATT_GEN_PATT_GEN_SEQ5r BCMI_TSCF_GEN3_XGXS_WRITEALL_PATT_GEN_PATT_GEN_SEQ5r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ5r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PATT_GEN_PATT_GEN_SEQ6
 * BLOCKS:   PATT_GEN_COM
 * REGADDR:  0xd126
 * DEVAD:    1
 * DESC:     Pattern Generator Sequence Word 6
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/W
 * FIELDS:
 *     PATT_GEN_SEQ_6   Fixed Pattern Generator Sequence Word 6. MSB bits will be transmitted first on serial transmit lane in both shared and slice mode.
 */
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ6r (0x0001d126 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ6r_SIZE 4

/*
 * This structure should be used to declare and program PATT_GEN_PATT_GEN_SEQ6.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ6r_s {
	uint32_t v[1];
	uint32_t patt_gen_patt_gen_seq6[1];
	uint32_t _patt_gen_patt_gen_seq6;
} BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ6r_t;

#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ6r_CLR(r) (r).patt_gen_patt_gen_seq6[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ6r_SET(r,d) (r).patt_gen_patt_gen_seq6[0] = d
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ6r_GET(r) (r).patt_gen_patt_gen_seq6[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ6r_PATT_GEN_SEQ_6f_GET(r) (((r).patt_gen_patt_gen_seq6[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ6r_PATT_GEN_SEQ_6f_SET(r,f) (r).patt_gen_patt_gen_seq6[0]=(((r).patt_gen_patt_gen_seq6[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PATT_GEN_PATT_GEN_SEQ6.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PATT_GEN_PATT_GEN_SEQ6r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ6r,(_r._patt_gen_patt_gen_seq6))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PATT_GEN_PATT_GEN_SEQ6r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ6r,(_r._patt_gen_patt_gen_seq6)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PATT_GEN_PATT_GEN_SEQ6r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ6r,(_r._patt_gen_patt_gen_seq6))
#define BCMI_TSCF_GEN3_XGXS_READLN_PATT_GEN_PATT_GEN_SEQ6r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ6r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_patt_gen_seq6))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_PATT_GEN_PATT_GEN_SEQ6r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ6r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_patt_gen_seq6))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_PATT_GEN_PATT_GEN_SEQ6r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ6r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._patt_gen_patt_gen_seq6))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PATT_GEN_PATT_GEN_SEQ6r BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ6r
#define PATT_GEN_PATT_GEN_SEQ6r_SIZE BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ6r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ6r_t PATT_GEN_PATT_GEN_SEQ6r_t;
#define PATT_GEN_PATT_GEN_SEQ6r_CLR BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ6r_CLR
#define PATT_GEN_PATT_GEN_SEQ6r_SET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ6r_SET
#define PATT_GEN_PATT_GEN_SEQ6r_GET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ6r_GET
#define PATT_GEN_PATT_GEN_SEQ6r_PATT_GEN_SEQ_6f_GET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ6r_PATT_GEN_SEQ_6f_GET
#define PATT_GEN_PATT_GEN_SEQ6r_PATT_GEN_SEQ_6f_SET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ6r_PATT_GEN_SEQ_6f_SET
#define READ_PATT_GEN_PATT_GEN_SEQ6r BCMI_TSCF_GEN3_XGXS_READ_PATT_GEN_PATT_GEN_SEQ6r
#define WRITE_PATT_GEN_PATT_GEN_SEQ6r BCMI_TSCF_GEN3_XGXS_WRITE_PATT_GEN_PATT_GEN_SEQ6r
#define MODIFY_PATT_GEN_PATT_GEN_SEQ6r BCMI_TSCF_GEN3_XGXS_MODIFY_PATT_GEN_PATT_GEN_SEQ6r
#define READLN_PATT_GEN_PATT_GEN_SEQ6r BCMI_TSCF_GEN3_XGXS_READLN_PATT_GEN_PATT_GEN_SEQ6r
#define WRITELN_PATT_GEN_PATT_GEN_SEQ6r BCMI_TSCF_GEN3_XGXS_WRITELN_PATT_GEN_PATT_GEN_SEQ6r
#define WRITEALL_PATT_GEN_PATT_GEN_SEQ6r BCMI_TSCF_GEN3_XGXS_WRITEALL_PATT_GEN_PATT_GEN_SEQ6r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ6r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PATT_GEN_PATT_GEN_SEQ7
 * BLOCKS:   PATT_GEN_COM
 * REGADDR:  0xd127
 * DEVAD:    1
 * DESC:     Pattern Generator Sequence Word 7
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/W
 * FIELDS:
 *     PATT_GEN_SEQ_7   Fixed Pattern Generator Sequence Word 7. MSB bits will be transmitted first on serial transmit lane in both shared and slice mode.
 */
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ7r (0x0001d127 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ7r_SIZE 4

/*
 * This structure should be used to declare and program PATT_GEN_PATT_GEN_SEQ7.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ7r_s {
	uint32_t v[1];
	uint32_t patt_gen_patt_gen_seq7[1];
	uint32_t _patt_gen_patt_gen_seq7;
} BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ7r_t;

#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ7r_CLR(r) (r).patt_gen_patt_gen_seq7[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ7r_SET(r,d) (r).patt_gen_patt_gen_seq7[0] = d
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ7r_GET(r) (r).patt_gen_patt_gen_seq7[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ7r_PATT_GEN_SEQ_7f_GET(r) (((r).patt_gen_patt_gen_seq7[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ7r_PATT_GEN_SEQ_7f_SET(r,f) (r).patt_gen_patt_gen_seq7[0]=(((r).patt_gen_patt_gen_seq7[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PATT_GEN_PATT_GEN_SEQ7.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PATT_GEN_PATT_GEN_SEQ7r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ7r,(_r._patt_gen_patt_gen_seq7))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PATT_GEN_PATT_GEN_SEQ7r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ7r,(_r._patt_gen_patt_gen_seq7)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PATT_GEN_PATT_GEN_SEQ7r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ7r,(_r._patt_gen_patt_gen_seq7))
#define BCMI_TSCF_GEN3_XGXS_READLN_PATT_GEN_PATT_GEN_SEQ7r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ7r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_patt_gen_seq7))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_PATT_GEN_PATT_GEN_SEQ7r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ7r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_patt_gen_seq7))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_PATT_GEN_PATT_GEN_SEQ7r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ7r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._patt_gen_patt_gen_seq7))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PATT_GEN_PATT_GEN_SEQ7r BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ7r
#define PATT_GEN_PATT_GEN_SEQ7r_SIZE BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ7r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ7r_t PATT_GEN_PATT_GEN_SEQ7r_t;
#define PATT_GEN_PATT_GEN_SEQ7r_CLR BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ7r_CLR
#define PATT_GEN_PATT_GEN_SEQ7r_SET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ7r_SET
#define PATT_GEN_PATT_GEN_SEQ7r_GET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ7r_GET
#define PATT_GEN_PATT_GEN_SEQ7r_PATT_GEN_SEQ_7f_GET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ7r_PATT_GEN_SEQ_7f_GET
#define PATT_GEN_PATT_GEN_SEQ7r_PATT_GEN_SEQ_7f_SET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ7r_PATT_GEN_SEQ_7f_SET
#define READ_PATT_GEN_PATT_GEN_SEQ7r BCMI_TSCF_GEN3_XGXS_READ_PATT_GEN_PATT_GEN_SEQ7r
#define WRITE_PATT_GEN_PATT_GEN_SEQ7r BCMI_TSCF_GEN3_XGXS_WRITE_PATT_GEN_PATT_GEN_SEQ7r
#define MODIFY_PATT_GEN_PATT_GEN_SEQ7r BCMI_TSCF_GEN3_XGXS_MODIFY_PATT_GEN_PATT_GEN_SEQ7r
#define READLN_PATT_GEN_PATT_GEN_SEQ7r BCMI_TSCF_GEN3_XGXS_READLN_PATT_GEN_PATT_GEN_SEQ7r
#define WRITELN_PATT_GEN_PATT_GEN_SEQ7r BCMI_TSCF_GEN3_XGXS_WRITELN_PATT_GEN_PATT_GEN_SEQ7r
#define WRITEALL_PATT_GEN_PATT_GEN_SEQ7r BCMI_TSCF_GEN3_XGXS_WRITEALL_PATT_GEN_PATT_GEN_SEQ7r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ7r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PATT_GEN_PATT_GEN_SEQ8
 * BLOCKS:   PATT_GEN_COM
 * REGADDR:  0xd128
 * DEVAD:    1
 * DESC:     Pattern Generator Sequence Word 8
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/W
 * FIELDS:
 *     PATT_GEN_SEQ_8   Fixed Pattern Generator Sequence Word 8. MSB bits will be transmitted first on serial transmit lane in both shared and slice mode.
 */
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ8r (0x0001d128 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ8r_SIZE 4

/*
 * This structure should be used to declare and program PATT_GEN_PATT_GEN_SEQ8.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ8r_s {
	uint32_t v[1];
	uint32_t patt_gen_patt_gen_seq8[1];
	uint32_t _patt_gen_patt_gen_seq8;
} BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ8r_t;

#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ8r_CLR(r) (r).patt_gen_patt_gen_seq8[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ8r_SET(r,d) (r).patt_gen_patt_gen_seq8[0] = d
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ8r_GET(r) (r).patt_gen_patt_gen_seq8[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ8r_PATT_GEN_SEQ_8f_GET(r) (((r).patt_gen_patt_gen_seq8[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ8r_PATT_GEN_SEQ_8f_SET(r,f) (r).patt_gen_patt_gen_seq8[0]=(((r).patt_gen_patt_gen_seq8[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PATT_GEN_PATT_GEN_SEQ8.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PATT_GEN_PATT_GEN_SEQ8r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ8r,(_r._patt_gen_patt_gen_seq8))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PATT_GEN_PATT_GEN_SEQ8r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ8r,(_r._patt_gen_patt_gen_seq8)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PATT_GEN_PATT_GEN_SEQ8r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ8r,(_r._patt_gen_patt_gen_seq8))
#define BCMI_TSCF_GEN3_XGXS_READLN_PATT_GEN_PATT_GEN_SEQ8r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ8r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_patt_gen_seq8))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_PATT_GEN_PATT_GEN_SEQ8r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ8r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_patt_gen_seq8))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_PATT_GEN_PATT_GEN_SEQ8r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ8r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._patt_gen_patt_gen_seq8))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PATT_GEN_PATT_GEN_SEQ8r BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ8r
#define PATT_GEN_PATT_GEN_SEQ8r_SIZE BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ8r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ8r_t PATT_GEN_PATT_GEN_SEQ8r_t;
#define PATT_GEN_PATT_GEN_SEQ8r_CLR BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ8r_CLR
#define PATT_GEN_PATT_GEN_SEQ8r_SET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ8r_SET
#define PATT_GEN_PATT_GEN_SEQ8r_GET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ8r_GET
#define PATT_GEN_PATT_GEN_SEQ8r_PATT_GEN_SEQ_8f_GET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ8r_PATT_GEN_SEQ_8f_GET
#define PATT_GEN_PATT_GEN_SEQ8r_PATT_GEN_SEQ_8f_SET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ8r_PATT_GEN_SEQ_8f_SET
#define READ_PATT_GEN_PATT_GEN_SEQ8r BCMI_TSCF_GEN3_XGXS_READ_PATT_GEN_PATT_GEN_SEQ8r
#define WRITE_PATT_GEN_PATT_GEN_SEQ8r BCMI_TSCF_GEN3_XGXS_WRITE_PATT_GEN_PATT_GEN_SEQ8r
#define MODIFY_PATT_GEN_PATT_GEN_SEQ8r BCMI_TSCF_GEN3_XGXS_MODIFY_PATT_GEN_PATT_GEN_SEQ8r
#define READLN_PATT_GEN_PATT_GEN_SEQ8r BCMI_TSCF_GEN3_XGXS_READLN_PATT_GEN_PATT_GEN_SEQ8r
#define WRITELN_PATT_GEN_PATT_GEN_SEQ8r BCMI_TSCF_GEN3_XGXS_WRITELN_PATT_GEN_PATT_GEN_SEQ8r
#define WRITEALL_PATT_GEN_PATT_GEN_SEQ8r BCMI_TSCF_GEN3_XGXS_WRITEALL_PATT_GEN_PATT_GEN_SEQ8r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ8r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PATT_GEN_PATT_GEN_SEQ9
 * BLOCKS:   PATT_GEN_COM
 * REGADDR:  0xd129
 * DEVAD:    1
 * DESC:     Pattern Generator Sequence Word 9
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/W
 * FIELDS:
 *     PATT_GEN_SEQ_9   Fixed Pattern Generator Sequence Word 9. MSB bits will be transmitted first on serial transmit lane in both shared and slice mode.
 */
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ9r (0x0001d129 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ9r_SIZE 4

/*
 * This structure should be used to declare and program PATT_GEN_PATT_GEN_SEQ9.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ9r_s {
	uint32_t v[1];
	uint32_t patt_gen_patt_gen_seq9[1];
	uint32_t _patt_gen_patt_gen_seq9;
} BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ9r_t;

#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ9r_CLR(r) (r).patt_gen_patt_gen_seq9[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ9r_SET(r,d) (r).patt_gen_patt_gen_seq9[0] = d
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ9r_GET(r) (r).patt_gen_patt_gen_seq9[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ9r_PATT_GEN_SEQ_9f_GET(r) (((r).patt_gen_patt_gen_seq9[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ9r_PATT_GEN_SEQ_9f_SET(r,f) (r).patt_gen_patt_gen_seq9[0]=(((r).patt_gen_patt_gen_seq9[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PATT_GEN_PATT_GEN_SEQ9.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PATT_GEN_PATT_GEN_SEQ9r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ9r,(_r._patt_gen_patt_gen_seq9))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PATT_GEN_PATT_GEN_SEQ9r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ9r,(_r._patt_gen_patt_gen_seq9)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PATT_GEN_PATT_GEN_SEQ9r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ9r,(_r._patt_gen_patt_gen_seq9))
#define BCMI_TSCF_GEN3_XGXS_READLN_PATT_GEN_PATT_GEN_SEQ9r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ9r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_patt_gen_seq9))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_PATT_GEN_PATT_GEN_SEQ9r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ9r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_patt_gen_seq9))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_PATT_GEN_PATT_GEN_SEQ9r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ9r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._patt_gen_patt_gen_seq9))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PATT_GEN_PATT_GEN_SEQ9r BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ9r
#define PATT_GEN_PATT_GEN_SEQ9r_SIZE BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ9r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ9r_t PATT_GEN_PATT_GEN_SEQ9r_t;
#define PATT_GEN_PATT_GEN_SEQ9r_CLR BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ9r_CLR
#define PATT_GEN_PATT_GEN_SEQ9r_SET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ9r_SET
#define PATT_GEN_PATT_GEN_SEQ9r_GET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ9r_GET
#define PATT_GEN_PATT_GEN_SEQ9r_PATT_GEN_SEQ_9f_GET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ9r_PATT_GEN_SEQ_9f_GET
#define PATT_GEN_PATT_GEN_SEQ9r_PATT_GEN_SEQ_9f_SET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ9r_PATT_GEN_SEQ_9f_SET
#define READ_PATT_GEN_PATT_GEN_SEQ9r BCMI_TSCF_GEN3_XGXS_READ_PATT_GEN_PATT_GEN_SEQ9r
#define WRITE_PATT_GEN_PATT_GEN_SEQ9r BCMI_TSCF_GEN3_XGXS_WRITE_PATT_GEN_PATT_GEN_SEQ9r
#define MODIFY_PATT_GEN_PATT_GEN_SEQ9r BCMI_TSCF_GEN3_XGXS_MODIFY_PATT_GEN_PATT_GEN_SEQ9r
#define READLN_PATT_GEN_PATT_GEN_SEQ9r BCMI_TSCF_GEN3_XGXS_READLN_PATT_GEN_PATT_GEN_SEQ9r
#define WRITELN_PATT_GEN_PATT_GEN_SEQ9r BCMI_TSCF_GEN3_XGXS_WRITELN_PATT_GEN_PATT_GEN_SEQ9r
#define WRITEALL_PATT_GEN_PATT_GEN_SEQ9r BCMI_TSCF_GEN3_XGXS_WRITEALL_PATT_GEN_PATT_GEN_SEQ9r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ9r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PATT_GEN_PATT_GEN_SEQ_10
 * BLOCKS:   PATT_GEN_COM
 * REGADDR:  0xd12a
 * DEVAD:    1
 * DESC:     Pattern Generator Sequence Word 10
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/W
 * FIELDS:
 *     PATT_GEN_SEQ_10  Fixed Pattern Generator Sequence Word 10. MSB bits will be transmitted first on serial transmit lane in both shared and slice mode.
 */
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_10r (0x0001d12a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_10r_SIZE 4

/*
 * This structure should be used to declare and program PATT_GEN_PATT_GEN_SEQ_10.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_10r_s {
	uint32_t v[1];
	uint32_t patt_gen_patt_gen_seq_10[1];
	uint32_t _patt_gen_patt_gen_seq_10;
} BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_10r_t;

#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_10r_CLR(r) (r).patt_gen_patt_gen_seq_10[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_10r_SET(r,d) (r).patt_gen_patt_gen_seq_10[0] = d
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_10r_GET(r) (r).patt_gen_patt_gen_seq_10[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_10r_PATT_GEN_SEQ_10f_GET(r) (((r).patt_gen_patt_gen_seq_10[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_10r_PATT_GEN_SEQ_10f_SET(r,f) (r).patt_gen_patt_gen_seq_10[0]=(((r).patt_gen_patt_gen_seq_10[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PATT_GEN_PATT_GEN_SEQ_10.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PATT_GEN_PATT_GEN_SEQ_10r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_10r,(_r._patt_gen_patt_gen_seq_10))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PATT_GEN_PATT_GEN_SEQ_10r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_10r,(_r._patt_gen_patt_gen_seq_10)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PATT_GEN_PATT_GEN_SEQ_10r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_10r,(_r._patt_gen_patt_gen_seq_10))
#define BCMI_TSCF_GEN3_XGXS_READLN_PATT_GEN_PATT_GEN_SEQ_10r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_10r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_patt_gen_seq_10))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_PATT_GEN_PATT_GEN_SEQ_10r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_10r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_patt_gen_seq_10))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_PATT_GEN_PATT_GEN_SEQ_10r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_10r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._patt_gen_patt_gen_seq_10))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PATT_GEN_PATT_GEN_SEQ_10r BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_10r
#define PATT_GEN_PATT_GEN_SEQ_10r_SIZE BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_10r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_10r_t PATT_GEN_PATT_GEN_SEQ_10r_t;
#define PATT_GEN_PATT_GEN_SEQ_10r_CLR BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_10r_CLR
#define PATT_GEN_PATT_GEN_SEQ_10r_SET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_10r_SET
#define PATT_GEN_PATT_GEN_SEQ_10r_GET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_10r_GET
#define PATT_GEN_PATT_GEN_SEQ_10r_PATT_GEN_SEQ_10f_GET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_10r_PATT_GEN_SEQ_10f_GET
#define PATT_GEN_PATT_GEN_SEQ_10r_PATT_GEN_SEQ_10f_SET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_10r_PATT_GEN_SEQ_10f_SET
#define READ_PATT_GEN_PATT_GEN_SEQ_10r BCMI_TSCF_GEN3_XGXS_READ_PATT_GEN_PATT_GEN_SEQ_10r
#define WRITE_PATT_GEN_PATT_GEN_SEQ_10r BCMI_TSCF_GEN3_XGXS_WRITE_PATT_GEN_PATT_GEN_SEQ_10r
#define MODIFY_PATT_GEN_PATT_GEN_SEQ_10r BCMI_TSCF_GEN3_XGXS_MODIFY_PATT_GEN_PATT_GEN_SEQ_10r
#define READLN_PATT_GEN_PATT_GEN_SEQ_10r BCMI_TSCF_GEN3_XGXS_READLN_PATT_GEN_PATT_GEN_SEQ_10r
#define WRITELN_PATT_GEN_PATT_GEN_SEQ_10r BCMI_TSCF_GEN3_XGXS_WRITELN_PATT_GEN_PATT_GEN_SEQ_10r
#define WRITEALL_PATT_GEN_PATT_GEN_SEQ_10r BCMI_TSCF_GEN3_XGXS_WRITEALL_PATT_GEN_PATT_GEN_SEQ_10r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_10r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PATT_GEN_PATT_GEN_SEQ_11
 * BLOCKS:   PATT_GEN_COM
 * REGADDR:  0xd12b
 * DEVAD:    1
 * DESC:     Pattern Generator Sequence Word 11
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/W
 * FIELDS:
 *     PATT_GEN_SEQ_11  Fixed Pattern Generator Sequence Word 11. MSB bits will be transmitted first on serial transmit lane in both shared and slice mode.
 */
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_11r (0x0001d12b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_11r_SIZE 4

/*
 * This structure should be used to declare and program PATT_GEN_PATT_GEN_SEQ_11.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_11r_s {
	uint32_t v[1];
	uint32_t patt_gen_patt_gen_seq_11[1];
	uint32_t _patt_gen_patt_gen_seq_11;
} BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_11r_t;

#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_11r_CLR(r) (r).patt_gen_patt_gen_seq_11[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_11r_SET(r,d) (r).patt_gen_patt_gen_seq_11[0] = d
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_11r_GET(r) (r).patt_gen_patt_gen_seq_11[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_11r_PATT_GEN_SEQ_11f_GET(r) (((r).patt_gen_patt_gen_seq_11[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_11r_PATT_GEN_SEQ_11f_SET(r,f) (r).patt_gen_patt_gen_seq_11[0]=(((r).patt_gen_patt_gen_seq_11[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PATT_GEN_PATT_GEN_SEQ_11.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PATT_GEN_PATT_GEN_SEQ_11r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_11r,(_r._patt_gen_patt_gen_seq_11))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PATT_GEN_PATT_GEN_SEQ_11r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_11r,(_r._patt_gen_patt_gen_seq_11)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PATT_GEN_PATT_GEN_SEQ_11r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_11r,(_r._patt_gen_patt_gen_seq_11))
#define BCMI_TSCF_GEN3_XGXS_READLN_PATT_GEN_PATT_GEN_SEQ_11r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_11r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_patt_gen_seq_11))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_PATT_GEN_PATT_GEN_SEQ_11r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_11r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_patt_gen_seq_11))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_PATT_GEN_PATT_GEN_SEQ_11r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_11r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._patt_gen_patt_gen_seq_11))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PATT_GEN_PATT_GEN_SEQ_11r BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_11r
#define PATT_GEN_PATT_GEN_SEQ_11r_SIZE BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_11r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_11r_t PATT_GEN_PATT_GEN_SEQ_11r_t;
#define PATT_GEN_PATT_GEN_SEQ_11r_CLR BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_11r_CLR
#define PATT_GEN_PATT_GEN_SEQ_11r_SET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_11r_SET
#define PATT_GEN_PATT_GEN_SEQ_11r_GET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_11r_GET
#define PATT_GEN_PATT_GEN_SEQ_11r_PATT_GEN_SEQ_11f_GET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_11r_PATT_GEN_SEQ_11f_GET
#define PATT_GEN_PATT_GEN_SEQ_11r_PATT_GEN_SEQ_11f_SET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_11r_PATT_GEN_SEQ_11f_SET
#define READ_PATT_GEN_PATT_GEN_SEQ_11r BCMI_TSCF_GEN3_XGXS_READ_PATT_GEN_PATT_GEN_SEQ_11r
#define WRITE_PATT_GEN_PATT_GEN_SEQ_11r BCMI_TSCF_GEN3_XGXS_WRITE_PATT_GEN_PATT_GEN_SEQ_11r
#define MODIFY_PATT_GEN_PATT_GEN_SEQ_11r BCMI_TSCF_GEN3_XGXS_MODIFY_PATT_GEN_PATT_GEN_SEQ_11r
#define READLN_PATT_GEN_PATT_GEN_SEQ_11r BCMI_TSCF_GEN3_XGXS_READLN_PATT_GEN_PATT_GEN_SEQ_11r
#define WRITELN_PATT_GEN_PATT_GEN_SEQ_11r BCMI_TSCF_GEN3_XGXS_WRITELN_PATT_GEN_PATT_GEN_SEQ_11r
#define WRITEALL_PATT_GEN_PATT_GEN_SEQ_11r BCMI_TSCF_GEN3_XGXS_WRITEALL_PATT_GEN_PATT_GEN_SEQ_11r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_11r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PATT_GEN_PATT_GEN_SEQ_12
 * BLOCKS:   PATT_GEN_COM
 * REGADDR:  0xd12c
 * DEVAD:    1
 * DESC:     Pattern Generator Sequence Word 12
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/W
 * FIELDS:
 *     PATT_GEN_SEQ_12  Fixed Pattern Generator Sequence Word 12. MSB bits will be transmitted first on serial transmit lane in both shared and slice mode.
 */
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_12r (0x0001d12c | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_12r_SIZE 4

/*
 * This structure should be used to declare and program PATT_GEN_PATT_GEN_SEQ_12.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_12r_s {
	uint32_t v[1];
	uint32_t patt_gen_patt_gen_seq_12[1];
	uint32_t _patt_gen_patt_gen_seq_12;
} BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_12r_t;

#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_12r_CLR(r) (r).patt_gen_patt_gen_seq_12[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_12r_SET(r,d) (r).patt_gen_patt_gen_seq_12[0] = d
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_12r_GET(r) (r).patt_gen_patt_gen_seq_12[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_12r_PATT_GEN_SEQ_12f_GET(r) (((r).patt_gen_patt_gen_seq_12[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_12r_PATT_GEN_SEQ_12f_SET(r,f) (r).patt_gen_patt_gen_seq_12[0]=(((r).patt_gen_patt_gen_seq_12[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PATT_GEN_PATT_GEN_SEQ_12.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PATT_GEN_PATT_GEN_SEQ_12r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_12r,(_r._patt_gen_patt_gen_seq_12))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PATT_GEN_PATT_GEN_SEQ_12r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_12r,(_r._patt_gen_patt_gen_seq_12)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PATT_GEN_PATT_GEN_SEQ_12r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_12r,(_r._patt_gen_patt_gen_seq_12))
#define BCMI_TSCF_GEN3_XGXS_READLN_PATT_GEN_PATT_GEN_SEQ_12r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_12r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_patt_gen_seq_12))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_PATT_GEN_PATT_GEN_SEQ_12r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_12r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_patt_gen_seq_12))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_PATT_GEN_PATT_GEN_SEQ_12r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_12r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._patt_gen_patt_gen_seq_12))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PATT_GEN_PATT_GEN_SEQ_12r BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_12r
#define PATT_GEN_PATT_GEN_SEQ_12r_SIZE BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_12r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_12r_t PATT_GEN_PATT_GEN_SEQ_12r_t;
#define PATT_GEN_PATT_GEN_SEQ_12r_CLR BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_12r_CLR
#define PATT_GEN_PATT_GEN_SEQ_12r_SET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_12r_SET
#define PATT_GEN_PATT_GEN_SEQ_12r_GET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_12r_GET
#define PATT_GEN_PATT_GEN_SEQ_12r_PATT_GEN_SEQ_12f_GET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_12r_PATT_GEN_SEQ_12f_GET
#define PATT_GEN_PATT_GEN_SEQ_12r_PATT_GEN_SEQ_12f_SET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_12r_PATT_GEN_SEQ_12f_SET
#define READ_PATT_GEN_PATT_GEN_SEQ_12r BCMI_TSCF_GEN3_XGXS_READ_PATT_GEN_PATT_GEN_SEQ_12r
#define WRITE_PATT_GEN_PATT_GEN_SEQ_12r BCMI_TSCF_GEN3_XGXS_WRITE_PATT_GEN_PATT_GEN_SEQ_12r
#define MODIFY_PATT_GEN_PATT_GEN_SEQ_12r BCMI_TSCF_GEN3_XGXS_MODIFY_PATT_GEN_PATT_GEN_SEQ_12r
#define READLN_PATT_GEN_PATT_GEN_SEQ_12r BCMI_TSCF_GEN3_XGXS_READLN_PATT_GEN_PATT_GEN_SEQ_12r
#define WRITELN_PATT_GEN_PATT_GEN_SEQ_12r BCMI_TSCF_GEN3_XGXS_WRITELN_PATT_GEN_PATT_GEN_SEQ_12r
#define WRITEALL_PATT_GEN_PATT_GEN_SEQ_12r BCMI_TSCF_GEN3_XGXS_WRITEALL_PATT_GEN_PATT_GEN_SEQ_12r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_12r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PATT_GEN_PATT_GEN_SEQ_13
 * BLOCKS:   PATT_GEN_COM
 * REGADDR:  0xd12d
 * DEVAD:    1
 * DESC:     Pattern Generator Sequence Word 13
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/W
 * FIELDS:
 *     PATT_GEN_SEQ_13  Fixed Pattern Generator Sequence Word 13. MSB bits will be transmitted first on serial transmit lane in both shared and slice mode.
 */
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_13r (0x0001d12d | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_13r_SIZE 4

/*
 * This structure should be used to declare and program PATT_GEN_PATT_GEN_SEQ_13.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_13r_s {
	uint32_t v[1];
	uint32_t patt_gen_patt_gen_seq_13[1];
	uint32_t _patt_gen_patt_gen_seq_13;
} BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_13r_t;

#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_13r_CLR(r) (r).patt_gen_patt_gen_seq_13[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_13r_SET(r,d) (r).patt_gen_patt_gen_seq_13[0] = d
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_13r_GET(r) (r).patt_gen_patt_gen_seq_13[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_13r_PATT_GEN_SEQ_13f_GET(r) (((r).patt_gen_patt_gen_seq_13[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_13r_PATT_GEN_SEQ_13f_SET(r,f) (r).patt_gen_patt_gen_seq_13[0]=(((r).patt_gen_patt_gen_seq_13[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PATT_GEN_PATT_GEN_SEQ_13.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PATT_GEN_PATT_GEN_SEQ_13r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_13r,(_r._patt_gen_patt_gen_seq_13))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PATT_GEN_PATT_GEN_SEQ_13r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_13r,(_r._patt_gen_patt_gen_seq_13)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PATT_GEN_PATT_GEN_SEQ_13r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_13r,(_r._patt_gen_patt_gen_seq_13))
#define BCMI_TSCF_GEN3_XGXS_READLN_PATT_GEN_PATT_GEN_SEQ_13r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_13r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_patt_gen_seq_13))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_PATT_GEN_PATT_GEN_SEQ_13r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_13r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_patt_gen_seq_13))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_PATT_GEN_PATT_GEN_SEQ_13r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_13r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._patt_gen_patt_gen_seq_13))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PATT_GEN_PATT_GEN_SEQ_13r BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_13r
#define PATT_GEN_PATT_GEN_SEQ_13r_SIZE BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_13r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_13r_t PATT_GEN_PATT_GEN_SEQ_13r_t;
#define PATT_GEN_PATT_GEN_SEQ_13r_CLR BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_13r_CLR
#define PATT_GEN_PATT_GEN_SEQ_13r_SET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_13r_SET
#define PATT_GEN_PATT_GEN_SEQ_13r_GET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_13r_GET
#define PATT_GEN_PATT_GEN_SEQ_13r_PATT_GEN_SEQ_13f_GET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_13r_PATT_GEN_SEQ_13f_GET
#define PATT_GEN_PATT_GEN_SEQ_13r_PATT_GEN_SEQ_13f_SET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_13r_PATT_GEN_SEQ_13f_SET
#define READ_PATT_GEN_PATT_GEN_SEQ_13r BCMI_TSCF_GEN3_XGXS_READ_PATT_GEN_PATT_GEN_SEQ_13r
#define WRITE_PATT_GEN_PATT_GEN_SEQ_13r BCMI_TSCF_GEN3_XGXS_WRITE_PATT_GEN_PATT_GEN_SEQ_13r
#define MODIFY_PATT_GEN_PATT_GEN_SEQ_13r BCMI_TSCF_GEN3_XGXS_MODIFY_PATT_GEN_PATT_GEN_SEQ_13r
#define READLN_PATT_GEN_PATT_GEN_SEQ_13r BCMI_TSCF_GEN3_XGXS_READLN_PATT_GEN_PATT_GEN_SEQ_13r
#define WRITELN_PATT_GEN_PATT_GEN_SEQ_13r BCMI_TSCF_GEN3_XGXS_WRITELN_PATT_GEN_PATT_GEN_SEQ_13r
#define WRITEALL_PATT_GEN_PATT_GEN_SEQ_13r BCMI_TSCF_GEN3_XGXS_WRITEALL_PATT_GEN_PATT_GEN_SEQ_13r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_13r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PATT_GEN_PATT_GEN_SEQ_14
 * BLOCKS:   PATT_GEN_COM
 * REGADDR:  0xd12e
 * DEVAD:    1
 * DESC:     Pattern Generator Sequence Word 14
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/W
 * FIELDS:
 *     PATT_GEN_SEQ_14  Fixed Pattern Generator Sequence Word 14. MSB bits will be transmitted first on serial transmit lane in both shared and slice mode. This word will be transmitted first.
 */
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_14r (0x0001d12e | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_14r_SIZE 4

/*
 * This structure should be used to declare and program PATT_GEN_PATT_GEN_SEQ_14.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_14r_s {
	uint32_t v[1];
	uint32_t patt_gen_patt_gen_seq_14[1];
	uint32_t _patt_gen_patt_gen_seq_14;
} BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_14r_t;

#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_14r_CLR(r) (r).patt_gen_patt_gen_seq_14[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_14r_SET(r,d) (r).patt_gen_patt_gen_seq_14[0] = d
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_14r_GET(r) (r).patt_gen_patt_gen_seq_14[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_14r_PATT_GEN_SEQ_14f_GET(r) (((r).patt_gen_patt_gen_seq_14[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_14r_PATT_GEN_SEQ_14f_SET(r,f) (r).patt_gen_patt_gen_seq_14[0]=(((r).patt_gen_patt_gen_seq_14[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PATT_GEN_PATT_GEN_SEQ_14.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PATT_GEN_PATT_GEN_SEQ_14r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_14r,(_r._patt_gen_patt_gen_seq_14))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PATT_GEN_PATT_GEN_SEQ_14r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_14r,(_r._patt_gen_patt_gen_seq_14)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PATT_GEN_PATT_GEN_SEQ_14r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_14r,(_r._patt_gen_patt_gen_seq_14))
#define BCMI_TSCF_GEN3_XGXS_READLN_PATT_GEN_PATT_GEN_SEQ_14r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_14r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_patt_gen_seq_14))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_PATT_GEN_PATT_GEN_SEQ_14r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_14r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_patt_gen_seq_14))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_PATT_GEN_PATT_GEN_SEQ_14r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_14r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._patt_gen_patt_gen_seq_14))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PATT_GEN_PATT_GEN_SEQ_14r BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_14r
#define PATT_GEN_PATT_GEN_SEQ_14r_SIZE BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_14r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_14r_t PATT_GEN_PATT_GEN_SEQ_14r_t;
#define PATT_GEN_PATT_GEN_SEQ_14r_CLR BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_14r_CLR
#define PATT_GEN_PATT_GEN_SEQ_14r_SET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_14r_SET
#define PATT_GEN_PATT_GEN_SEQ_14r_GET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_14r_GET
#define PATT_GEN_PATT_GEN_SEQ_14r_PATT_GEN_SEQ_14f_GET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_14r_PATT_GEN_SEQ_14f_GET
#define PATT_GEN_PATT_GEN_SEQ_14r_PATT_GEN_SEQ_14f_SET BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_14r_PATT_GEN_SEQ_14f_SET
#define READ_PATT_GEN_PATT_GEN_SEQ_14r BCMI_TSCF_GEN3_XGXS_READ_PATT_GEN_PATT_GEN_SEQ_14r
#define WRITE_PATT_GEN_PATT_GEN_SEQ_14r BCMI_TSCF_GEN3_XGXS_WRITE_PATT_GEN_PATT_GEN_SEQ_14r
#define MODIFY_PATT_GEN_PATT_GEN_SEQ_14r BCMI_TSCF_GEN3_XGXS_MODIFY_PATT_GEN_PATT_GEN_SEQ_14r
#define READLN_PATT_GEN_PATT_GEN_SEQ_14r BCMI_TSCF_GEN3_XGXS_READLN_PATT_GEN_PATT_GEN_SEQ_14r
#define WRITELN_PATT_GEN_PATT_GEN_SEQ_14r BCMI_TSCF_GEN3_XGXS_WRITELN_PATT_GEN_PATT_GEN_SEQ_14r
#define WRITEALL_PATT_GEN_PATT_GEN_SEQ_14r BCMI_TSCF_GEN3_XGXS_WRITEALL_PATT_GEN_PATT_GEN_SEQ_14r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PATT_GEN_PATT_GEN_SEQ_14r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TXFIR_CTL0
 * BLOCKS:   TX_FED
 * REGADDR:  0xd130
 * DEVAD:    1
 * DESC:     TX FIR Control0 Register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TXFIR_PRE_OFFSET tx fir pre tap offset values -8 to +7 (2's complement formati.e. 0=0, 1=+1,..7=+7, 8=-8, 9=-7,..15=-1 )This field is used to adjust the Pre tap values
 *     TXFIR_MAIN_OFFSET tx fir main tap offset value -8 to +7 (2's complement formati.e. 0=0, 1=+1,..7=+7, 8=-8, 9=-7,..15=-1 )This field is used to adjust the Main tap values
 *     TXFIR_POST_OFFSET tx fir post tap offset value -8 to +7 (2's complement formati.e. 0=0, 1=+1,..7=+7, 8=-8, 9=-7,..15=-1 )This field is used to adjust the Post tap values
 */
#define BCMI_TSCF_GEN3_XGXS_TXFIR_CTL0r (0x0001d130 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TXFIR_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program TXFIR_CTL0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TXFIR_CTL0r_s {
	uint32_t v[1];
	uint32_t txfir_ctl0[1];
	uint32_t _txfir_ctl0;
} BCMI_TSCF_GEN3_XGXS_TXFIR_CTL0r_t;

#define BCMI_TSCF_GEN3_XGXS_TXFIR_CTL0r_CLR(r) (r).txfir_ctl0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TXFIR_CTL0r_SET(r,d) (r).txfir_ctl0[0] = d
#define BCMI_TSCF_GEN3_XGXS_TXFIR_CTL0r_GET(r) (r).txfir_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TXFIR_CTL0r_TXFIR_POST_OFFSETf_GET(r) ((((r).txfir_ctl0[0]) >> 8) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_TXFIR_CTL0r_TXFIR_POST_OFFSETf_SET(r,f) (r).txfir_ctl0[0]=(((r).txfir_ctl0[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_TXFIR_CTL0r_TXFIR_MAIN_OFFSETf_GET(r) ((((r).txfir_ctl0[0]) >> 4) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_TXFIR_CTL0r_TXFIR_MAIN_OFFSETf_SET(r,f) (r).txfir_ctl0[0]=(((r).txfir_ctl0[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4)) | (15 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_TXFIR_CTL0r_TXFIR_PRE_OFFSETf_GET(r) (((r).txfir_ctl0[0]) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_TXFIR_CTL0r_TXFIR_PRE_OFFSETf_SET(r,f) (r).txfir_ctl0[0]=(((r).txfir_ctl0[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access TXFIR_CTL0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TXFIR_CTL0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_CTL0r,(_r._txfir_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TXFIR_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_CTL0r,(_r._txfir_ctl0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TXFIR_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_CTL0r,(_r._txfir_ctl0))
#define BCMI_TSCF_GEN3_XGXS_READLN_TXFIR_CTL0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TXFIR_CTL0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TXFIR_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txfir_ctl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXFIR_CTL0r BCMI_TSCF_GEN3_XGXS_TXFIR_CTL0r
#define TXFIR_CTL0r_SIZE BCMI_TSCF_GEN3_XGXS_TXFIR_CTL0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TXFIR_CTL0r_t TXFIR_CTL0r_t;
#define TXFIR_CTL0r_CLR BCMI_TSCF_GEN3_XGXS_TXFIR_CTL0r_CLR
#define TXFIR_CTL0r_SET BCMI_TSCF_GEN3_XGXS_TXFIR_CTL0r_SET
#define TXFIR_CTL0r_GET BCMI_TSCF_GEN3_XGXS_TXFIR_CTL0r_GET
#define TXFIR_CTL0r_TXFIR_POST_OFFSETf_GET BCMI_TSCF_GEN3_XGXS_TXFIR_CTL0r_TXFIR_POST_OFFSETf_GET
#define TXFIR_CTL0r_TXFIR_POST_OFFSETf_SET BCMI_TSCF_GEN3_XGXS_TXFIR_CTL0r_TXFIR_POST_OFFSETf_SET
#define TXFIR_CTL0r_TXFIR_MAIN_OFFSETf_GET BCMI_TSCF_GEN3_XGXS_TXFIR_CTL0r_TXFIR_MAIN_OFFSETf_GET
#define TXFIR_CTL0r_TXFIR_MAIN_OFFSETf_SET BCMI_TSCF_GEN3_XGXS_TXFIR_CTL0r_TXFIR_MAIN_OFFSETf_SET
#define TXFIR_CTL0r_TXFIR_PRE_OFFSETf_GET BCMI_TSCF_GEN3_XGXS_TXFIR_CTL0r_TXFIR_PRE_OFFSETf_GET
#define TXFIR_CTL0r_TXFIR_PRE_OFFSETf_SET BCMI_TSCF_GEN3_XGXS_TXFIR_CTL0r_TXFIR_PRE_OFFSETf_SET
#define READ_TXFIR_CTL0r BCMI_TSCF_GEN3_XGXS_READ_TXFIR_CTL0r
#define WRITE_TXFIR_CTL0r BCMI_TSCF_GEN3_XGXS_WRITE_TXFIR_CTL0r
#define MODIFY_TXFIR_CTL0r BCMI_TSCF_GEN3_XGXS_MODIFY_TXFIR_CTL0r
#define READLN_TXFIR_CTL0r BCMI_TSCF_GEN3_XGXS_READLN_TXFIR_CTL0r
#define WRITELN_TXFIR_CTL0r BCMI_TSCF_GEN3_XGXS_WRITELN_TXFIR_CTL0r
#define WRITEALL_TXFIR_CTL0r BCMI_TSCF_GEN3_XGXS_WRITEALL_TXFIR_CTL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TXFIR_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TXFIR_CTL1
 * BLOCKS:   TX_FED
 * REGADDR:  0xd131
 * DEVAD:    1
 * DESC:     TX FIR Control1 Register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TXFIR_POST2_OFFSET tx fir post2 tap offset value -8 to +7 (2's complement formati.e. 0=0, 1=+1,..7=+7, 8=-8, 9=-7,..15=-1 )This field is used to adjust the Post2 tap values
 *     TXFIR_POST3_OFFSET tx fir post3 tap offset value -8 to +7 (2's complement formati.e. 0=0, 1=+1,..7=+7, 8=-8, 9=-7,..15=-1 )This field is used to adjust the Post3 tap values
 */
#define BCMI_TSCF_GEN3_XGXS_TXFIR_CTL1r (0x0001d131 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TXFIR_CTL1r_SIZE 4

/*
 * This structure should be used to declare and program TXFIR_CTL1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TXFIR_CTL1r_s {
	uint32_t v[1];
	uint32_t txfir_ctl1[1];
	uint32_t _txfir_ctl1;
} BCMI_TSCF_GEN3_XGXS_TXFIR_CTL1r_t;

#define BCMI_TSCF_GEN3_XGXS_TXFIR_CTL1r_CLR(r) (r).txfir_ctl1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TXFIR_CTL1r_SET(r,d) (r).txfir_ctl1[0] = d
#define BCMI_TSCF_GEN3_XGXS_TXFIR_CTL1r_GET(r) (r).txfir_ctl1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TXFIR_CTL1r_TXFIR_POST3_OFFSETf_GET(r) ((((r).txfir_ctl1[0]) >> 4) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_TXFIR_CTL1r_TXFIR_POST3_OFFSETf_SET(r,f) (r).txfir_ctl1[0]=(((r).txfir_ctl1[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4)) | (15 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_TXFIR_CTL1r_TXFIR_POST2_OFFSETf_GET(r) (((r).txfir_ctl1[0]) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_TXFIR_CTL1r_TXFIR_POST2_OFFSETf_SET(r,f) (r).txfir_ctl1[0]=(((r).txfir_ctl1[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access TXFIR_CTL1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TXFIR_CTL1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_CTL1r,(_r._txfir_ctl1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TXFIR_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_CTL1r,(_r._txfir_ctl1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TXFIR_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_CTL1r,(_r._txfir_ctl1))
#define BCMI_TSCF_GEN3_XGXS_READLN_TXFIR_CTL1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_ctl1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TXFIR_CTL1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_ctl1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TXFIR_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txfir_ctl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXFIR_CTL1r BCMI_TSCF_GEN3_XGXS_TXFIR_CTL1r
#define TXFIR_CTL1r_SIZE BCMI_TSCF_GEN3_XGXS_TXFIR_CTL1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TXFIR_CTL1r_t TXFIR_CTL1r_t;
#define TXFIR_CTL1r_CLR BCMI_TSCF_GEN3_XGXS_TXFIR_CTL1r_CLR
#define TXFIR_CTL1r_SET BCMI_TSCF_GEN3_XGXS_TXFIR_CTL1r_SET
#define TXFIR_CTL1r_GET BCMI_TSCF_GEN3_XGXS_TXFIR_CTL1r_GET
#define TXFIR_CTL1r_TXFIR_POST3_OFFSETf_GET BCMI_TSCF_GEN3_XGXS_TXFIR_CTL1r_TXFIR_POST3_OFFSETf_GET
#define TXFIR_CTL1r_TXFIR_POST3_OFFSETf_SET BCMI_TSCF_GEN3_XGXS_TXFIR_CTL1r_TXFIR_POST3_OFFSETf_SET
#define TXFIR_CTL1r_TXFIR_POST2_OFFSETf_GET BCMI_TSCF_GEN3_XGXS_TXFIR_CTL1r_TXFIR_POST2_OFFSETf_GET
#define TXFIR_CTL1r_TXFIR_POST2_OFFSETf_SET BCMI_TSCF_GEN3_XGXS_TXFIR_CTL1r_TXFIR_POST2_OFFSETf_SET
#define READ_TXFIR_CTL1r BCMI_TSCF_GEN3_XGXS_READ_TXFIR_CTL1r
#define WRITE_TXFIR_CTL1r BCMI_TSCF_GEN3_XGXS_WRITE_TXFIR_CTL1r
#define MODIFY_TXFIR_CTL1r BCMI_TSCF_GEN3_XGXS_MODIFY_TXFIR_CTL1r
#define READLN_TXFIR_CTL1r BCMI_TSCF_GEN3_XGXS_READLN_TXFIR_CTL1r
#define WRITELN_TXFIR_CTL1r BCMI_TSCF_GEN3_XGXS_WRITELN_TXFIR_CTL1r
#define WRITEALL_TXFIR_CTL1r BCMI_TSCF_GEN3_XGXS_WRITEALL_TXFIR_CTL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TXFIR_CTL1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TXFIR_CTL2
 * BLOCKS:   TX_FED
 * REGADDR:  0xd132
 * DEVAD:    1
 * DESC:     TX FIR Control2 Register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TXFIR_POST2      tx fir post2 tap value -16 ..+15 (2's complement formati.e. 0=0, 1=+1,..15=+15, 16=-16, 17=-15,..31=-1 )Post2 tap range -15..+15Post2 tap value only driven from a register
 *     TXFIR_POST3      tx fir post3 tap value -8 ..+7 (2's complement formati.e. 0=0, 1=+1,..7=+7, 8=-8, 9=-7,..15=-1 )Post3 tap range -7..+7Post3 tap value only driven from a register
 */
#define BCMI_TSCF_GEN3_XGXS_TXFIR_CTL2r (0x0001d132 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TXFIR_CTL2r_SIZE 4

/*
 * This structure should be used to declare and program TXFIR_CTL2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TXFIR_CTL2r_s {
	uint32_t v[1];
	uint32_t txfir_ctl2[1];
	uint32_t _txfir_ctl2;
} BCMI_TSCF_GEN3_XGXS_TXFIR_CTL2r_t;

#define BCMI_TSCF_GEN3_XGXS_TXFIR_CTL2r_CLR(r) (r).txfir_ctl2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TXFIR_CTL2r_SET(r,d) (r).txfir_ctl2[0] = d
#define BCMI_TSCF_GEN3_XGXS_TXFIR_CTL2r_GET(r) (r).txfir_ctl2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TXFIR_CTL2r_TXFIR_POST3f_GET(r) ((((r).txfir_ctl2[0]) >> 8) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_TXFIR_CTL2r_TXFIR_POST3f_SET(r,f) (r).txfir_ctl2[0]=(((r).txfir_ctl2[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_TXFIR_CTL2r_TXFIR_POST2f_GET(r) (((r).txfir_ctl2[0]) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_TXFIR_CTL2r_TXFIR_POST2f_SET(r,f) (r).txfir_ctl2[0]=(((r).txfir_ctl2[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access TXFIR_CTL2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TXFIR_CTL2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_CTL2r,(_r._txfir_ctl2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TXFIR_CTL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_CTL2r,(_r._txfir_ctl2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TXFIR_CTL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_CTL2r,(_r._txfir_ctl2))
#define BCMI_TSCF_GEN3_XGXS_READLN_TXFIR_CTL2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_ctl2))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TXFIR_CTL2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_ctl2))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TXFIR_CTL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txfir_ctl2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXFIR_CTL2r BCMI_TSCF_GEN3_XGXS_TXFIR_CTL2r
#define TXFIR_CTL2r_SIZE BCMI_TSCF_GEN3_XGXS_TXFIR_CTL2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TXFIR_CTL2r_t TXFIR_CTL2r_t;
#define TXFIR_CTL2r_CLR BCMI_TSCF_GEN3_XGXS_TXFIR_CTL2r_CLR
#define TXFIR_CTL2r_SET BCMI_TSCF_GEN3_XGXS_TXFIR_CTL2r_SET
#define TXFIR_CTL2r_GET BCMI_TSCF_GEN3_XGXS_TXFIR_CTL2r_GET
#define TXFIR_CTL2r_TXFIR_POST3f_GET BCMI_TSCF_GEN3_XGXS_TXFIR_CTL2r_TXFIR_POST3f_GET
#define TXFIR_CTL2r_TXFIR_POST3f_SET BCMI_TSCF_GEN3_XGXS_TXFIR_CTL2r_TXFIR_POST3f_SET
#define TXFIR_CTL2r_TXFIR_POST2f_GET BCMI_TSCF_GEN3_XGXS_TXFIR_CTL2r_TXFIR_POST2f_GET
#define TXFIR_CTL2r_TXFIR_POST2f_SET BCMI_TSCF_GEN3_XGXS_TXFIR_CTL2r_TXFIR_POST2f_SET
#define READ_TXFIR_CTL2r BCMI_TSCF_GEN3_XGXS_READ_TXFIR_CTL2r
#define WRITE_TXFIR_CTL2r BCMI_TSCF_GEN3_XGXS_WRITE_TXFIR_CTL2r
#define MODIFY_TXFIR_CTL2r BCMI_TSCF_GEN3_XGXS_MODIFY_TXFIR_CTL2r
#define READLN_TXFIR_CTL2r BCMI_TSCF_GEN3_XGXS_READLN_TXFIR_CTL2r
#define WRITELN_TXFIR_CTL2r BCMI_TSCF_GEN3_XGXS_WRITELN_TXFIR_CTL2r
#define WRITEALL_TXFIR_CTL2r BCMI_TSCF_GEN3_XGXS_WRITEALL_TXFIR_CTL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TXFIR_CTL2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TXFIR_STS0
 * BLOCKS:   TX_FED
 * REGADDR:  0xd133
 * DEVAD:    1
 * DESC:     TX FIR Status0 Register
 * RESETVAL: 0x1808 (6152)
 * ACCESS:   R/O
 * FIELDS:
 *     TXFIR_PRE_AFTER_OVR tx fir pre tap value after override mux. status
 *     TXFIR_POST_AFTER_OVR tx fir post tap value after override mux. status
 */
#define BCMI_TSCF_GEN3_XGXS_TXFIR_STS0r (0x0001d133 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TXFIR_STS0r_SIZE 4

/*
 * This structure should be used to declare and program TXFIR_STS0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TXFIR_STS0r_s {
	uint32_t v[1];
	uint32_t txfir_sts0[1];
	uint32_t _txfir_sts0;
} BCMI_TSCF_GEN3_XGXS_TXFIR_STS0r_t;

#define BCMI_TSCF_GEN3_XGXS_TXFIR_STS0r_CLR(r) (r).txfir_sts0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TXFIR_STS0r_SET(r,d) (r).txfir_sts0[0] = d
#define BCMI_TSCF_GEN3_XGXS_TXFIR_STS0r_GET(r) (r).txfir_sts0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TXFIR_STS0r_TXFIR_POST_AFTER_OVRf_GET(r) ((((r).txfir_sts0[0]) >> 8) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_TXFIR_STS0r_TXFIR_POST_AFTER_OVRf_SET(r,f) (r).txfir_sts0[0]=(((r).txfir_sts0[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8)) | (63 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_TXFIR_STS0r_TXFIR_PRE_AFTER_OVRf_GET(r) (((r).txfir_sts0[0]) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_TXFIR_STS0r_TXFIR_PRE_AFTER_OVRf_SET(r,f) (r).txfir_sts0[0]=(((r).txfir_sts0[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access TXFIR_STS0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TXFIR_STS0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_STS0r,(_r._txfir_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TXFIR_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_STS0r,(_r._txfir_sts0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TXFIR_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_STS0r,(_r._txfir_sts0))
#define BCMI_TSCF_GEN3_XGXS_READLN_TXFIR_STS0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TXFIR_STS0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TXFIR_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_STS0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txfir_sts0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXFIR_STS0r BCMI_TSCF_GEN3_XGXS_TXFIR_STS0r
#define TXFIR_STS0r_SIZE BCMI_TSCF_GEN3_XGXS_TXFIR_STS0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TXFIR_STS0r_t TXFIR_STS0r_t;
#define TXFIR_STS0r_CLR BCMI_TSCF_GEN3_XGXS_TXFIR_STS0r_CLR
#define TXFIR_STS0r_SET BCMI_TSCF_GEN3_XGXS_TXFIR_STS0r_SET
#define TXFIR_STS0r_GET BCMI_TSCF_GEN3_XGXS_TXFIR_STS0r_GET
#define TXFIR_STS0r_TXFIR_POST_AFTER_OVRf_GET BCMI_TSCF_GEN3_XGXS_TXFIR_STS0r_TXFIR_POST_AFTER_OVRf_GET
#define TXFIR_STS0r_TXFIR_POST_AFTER_OVRf_SET BCMI_TSCF_GEN3_XGXS_TXFIR_STS0r_TXFIR_POST_AFTER_OVRf_SET
#define TXFIR_STS0r_TXFIR_PRE_AFTER_OVRf_GET BCMI_TSCF_GEN3_XGXS_TXFIR_STS0r_TXFIR_PRE_AFTER_OVRf_GET
#define TXFIR_STS0r_TXFIR_PRE_AFTER_OVRf_SET BCMI_TSCF_GEN3_XGXS_TXFIR_STS0r_TXFIR_PRE_AFTER_OVRf_SET
#define READ_TXFIR_STS0r BCMI_TSCF_GEN3_XGXS_READ_TXFIR_STS0r
#define WRITE_TXFIR_STS0r BCMI_TSCF_GEN3_XGXS_WRITE_TXFIR_STS0r
#define MODIFY_TXFIR_STS0r BCMI_TSCF_GEN3_XGXS_MODIFY_TXFIR_STS0r
#define READLN_TXFIR_STS0r BCMI_TSCF_GEN3_XGXS_READLN_TXFIR_STS0r
#define WRITELN_TXFIR_STS0r BCMI_TSCF_GEN3_XGXS_WRITELN_TXFIR_STS0r
#define WRITEALL_TXFIR_STS0r BCMI_TSCF_GEN3_XGXS_WRITEALL_TXFIR_STS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TXFIR_STS0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TXFIR_STS1
 * BLOCKS:   TX_FED
 * REGADDR:  0xd134
 * DEVAD:    1
 * DESC:     TX FIR Status1 Register
 * RESETVAL: 0x50 (80)
 * ACCESS:   R/O
 * FIELDS:
 *     TXFIR_MAIN_AFTER_OVR tx fir main tap value after override mux. status
 */
#define BCMI_TSCF_GEN3_XGXS_TXFIR_STS1r (0x0001d134 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TXFIR_STS1r_SIZE 4

/*
 * This structure should be used to declare and program TXFIR_STS1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TXFIR_STS1r_s {
	uint32_t v[1];
	uint32_t txfir_sts1[1];
	uint32_t _txfir_sts1;
} BCMI_TSCF_GEN3_XGXS_TXFIR_STS1r_t;

#define BCMI_TSCF_GEN3_XGXS_TXFIR_STS1r_CLR(r) (r).txfir_sts1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TXFIR_STS1r_SET(r,d) (r).txfir_sts1[0] = d
#define BCMI_TSCF_GEN3_XGXS_TXFIR_STS1r_GET(r) (r).txfir_sts1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TXFIR_STS1r_TXFIR_MAIN_AFTER_OVRf_GET(r) (((r).txfir_sts1[0]) & 0x7f)
#define BCMI_TSCF_GEN3_XGXS_TXFIR_STS1r_TXFIR_MAIN_AFTER_OVRf_SET(r,f) (r).txfir_sts1[0]=(((r).txfir_sts1[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f)) | (0x7f << 16)

/*
 * These macros can be used to access TXFIR_STS1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TXFIR_STS1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_STS1r,(_r._txfir_sts1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TXFIR_STS1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_STS1r,(_r._txfir_sts1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TXFIR_STS1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_STS1r,(_r._txfir_sts1))
#define BCMI_TSCF_GEN3_XGXS_READLN_TXFIR_STS1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_STS1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_sts1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TXFIR_STS1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_STS1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_sts1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TXFIR_STS1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_STS1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txfir_sts1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXFIR_STS1r BCMI_TSCF_GEN3_XGXS_TXFIR_STS1r
#define TXFIR_STS1r_SIZE BCMI_TSCF_GEN3_XGXS_TXFIR_STS1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TXFIR_STS1r_t TXFIR_STS1r_t;
#define TXFIR_STS1r_CLR BCMI_TSCF_GEN3_XGXS_TXFIR_STS1r_CLR
#define TXFIR_STS1r_SET BCMI_TSCF_GEN3_XGXS_TXFIR_STS1r_SET
#define TXFIR_STS1r_GET BCMI_TSCF_GEN3_XGXS_TXFIR_STS1r_GET
#define TXFIR_STS1r_TXFIR_MAIN_AFTER_OVRf_GET BCMI_TSCF_GEN3_XGXS_TXFIR_STS1r_TXFIR_MAIN_AFTER_OVRf_GET
#define TXFIR_STS1r_TXFIR_MAIN_AFTER_OVRf_SET BCMI_TSCF_GEN3_XGXS_TXFIR_STS1r_TXFIR_MAIN_AFTER_OVRf_SET
#define READ_TXFIR_STS1r BCMI_TSCF_GEN3_XGXS_READ_TXFIR_STS1r
#define WRITE_TXFIR_STS1r BCMI_TSCF_GEN3_XGXS_WRITE_TXFIR_STS1r
#define MODIFY_TXFIR_STS1r BCMI_TSCF_GEN3_XGXS_MODIFY_TXFIR_STS1r
#define READLN_TXFIR_STS1r BCMI_TSCF_GEN3_XGXS_READLN_TXFIR_STS1r
#define WRITELN_TXFIR_STS1r BCMI_TSCF_GEN3_XGXS_WRITELN_TXFIR_STS1r
#define WRITEALL_TXFIR_STS1r BCMI_TSCF_GEN3_XGXS_WRITEALL_TXFIR_STS1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TXFIR_STS1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TXFIR_STS2
 * BLOCKS:   TX_FED
 * REGADDR:  0xd135
 * DEVAD:    1
 * DESC:     TX FIR Status2 Register
 * RESETVAL: 0x1808 (6152)
 * ACCESS:   R/O
 * FIELDS:
 *     TXFIR_PRE_ADJUSTED tx fir pre tap value after offset adjustment. status
 *     TXFIR_POST_ADJUSTED tx fir post tap value after offset adjustment. status
 */
#define BCMI_TSCF_GEN3_XGXS_TXFIR_STS2r (0x0001d135 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TXFIR_STS2r_SIZE 4

/*
 * This structure should be used to declare and program TXFIR_STS2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TXFIR_STS2r_s {
	uint32_t v[1];
	uint32_t txfir_sts2[1];
	uint32_t _txfir_sts2;
} BCMI_TSCF_GEN3_XGXS_TXFIR_STS2r_t;

#define BCMI_TSCF_GEN3_XGXS_TXFIR_STS2r_CLR(r) (r).txfir_sts2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TXFIR_STS2r_SET(r,d) (r).txfir_sts2[0] = d
#define BCMI_TSCF_GEN3_XGXS_TXFIR_STS2r_GET(r) (r).txfir_sts2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TXFIR_STS2r_TXFIR_POST_ADJUSTEDf_GET(r) ((((r).txfir_sts2[0]) >> 8) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_TXFIR_STS2r_TXFIR_POST_ADJUSTEDf_SET(r,f) (r).txfir_sts2[0]=(((r).txfir_sts2[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8)) | (63 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_TXFIR_STS2r_TXFIR_PRE_ADJUSTEDf_GET(r) (((r).txfir_sts2[0]) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_TXFIR_STS2r_TXFIR_PRE_ADJUSTEDf_SET(r,f) (r).txfir_sts2[0]=(((r).txfir_sts2[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access TXFIR_STS2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TXFIR_STS2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_STS2r,(_r._txfir_sts2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TXFIR_STS2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_STS2r,(_r._txfir_sts2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TXFIR_STS2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_STS2r,(_r._txfir_sts2))
#define BCMI_TSCF_GEN3_XGXS_READLN_TXFIR_STS2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_STS2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_sts2))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TXFIR_STS2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_STS2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_sts2))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TXFIR_STS2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_STS2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txfir_sts2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXFIR_STS2r BCMI_TSCF_GEN3_XGXS_TXFIR_STS2r
#define TXFIR_STS2r_SIZE BCMI_TSCF_GEN3_XGXS_TXFIR_STS2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TXFIR_STS2r_t TXFIR_STS2r_t;
#define TXFIR_STS2r_CLR BCMI_TSCF_GEN3_XGXS_TXFIR_STS2r_CLR
#define TXFIR_STS2r_SET BCMI_TSCF_GEN3_XGXS_TXFIR_STS2r_SET
#define TXFIR_STS2r_GET BCMI_TSCF_GEN3_XGXS_TXFIR_STS2r_GET
#define TXFIR_STS2r_TXFIR_POST_ADJUSTEDf_GET BCMI_TSCF_GEN3_XGXS_TXFIR_STS2r_TXFIR_POST_ADJUSTEDf_GET
#define TXFIR_STS2r_TXFIR_POST_ADJUSTEDf_SET BCMI_TSCF_GEN3_XGXS_TXFIR_STS2r_TXFIR_POST_ADJUSTEDf_SET
#define TXFIR_STS2r_TXFIR_PRE_ADJUSTEDf_GET BCMI_TSCF_GEN3_XGXS_TXFIR_STS2r_TXFIR_PRE_ADJUSTEDf_GET
#define TXFIR_STS2r_TXFIR_PRE_ADJUSTEDf_SET BCMI_TSCF_GEN3_XGXS_TXFIR_STS2r_TXFIR_PRE_ADJUSTEDf_SET
#define READ_TXFIR_STS2r BCMI_TSCF_GEN3_XGXS_READ_TXFIR_STS2r
#define WRITE_TXFIR_STS2r BCMI_TSCF_GEN3_XGXS_WRITE_TXFIR_STS2r
#define MODIFY_TXFIR_STS2r BCMI_TSCF_GEN3_XGXS_MODIFY_TXFIR_STS2r
#define READLN_TXFIR_STS2r BCMI_TSCF_GEN3_XGXS_READLN_TXFIR_STS2r
#define WRITELN_TXFIR_STS2r BCMI_TSCF_GEN3_XGXS_WRITELN_TXFIR_STS2r
#define WRITEALL_TXFIR_STS2r BCMI_TSCF_GEN3_XGXS_WRITEALL_TXFIR_STS2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TXFIR_STS2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TXFIR_STS3
 * BLOCKS:   TX_FED
 * REGADDR:  0xd136
 * DEVAD:    1
 * DESC:     TX FIR Status3 Register
 * RESETVAL: 0x50 (80)
 * ACCESS:   R/O
 * FIELDS:
 *     TXFIR_MAIN_ADJUSTED tx fir main tap value after offset adjustment. status
 *     TXFIR_POST2_ADJUSTED tx fir post2 tap value after offset adjustment. statusThe value range is -15 ..+15 and it is in 2's complement formati.e. 0=0, 1=+1,..15=+15, 16=-16, 17=-15,..31=-1
 */
#define BCMI_TSCF_GEN3_XGXS_TXFIR_STS3r (0x0001d136 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TXFIR_STS3r_SIZE 4

/*
 * This structure should be used to declare and program TXFIR_STS3.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TXFIR_STS3r_s {
	uint32_t v[1];
	uint32_t txfir_sts3[1];
	uint32_t _txfir_sts3;
} BCMI_TSCF_GEN3_XGXS_TXFIR_STS3r_t;

#define BCMI_TSCF_GEN3_XGXS_TXFIR_STS3r_CLR(r) (r).txfir_sts3[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TXFIR_STS3r_SET(r,d) (r).txfir_sts3[0] = d
#define BCMI_TSCF_GEN3_XGXS_TXFIR_STS3r_GET(r) (r).txfir_sts3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TXFIR_STS3r_TXFIR_POST2_ADJUSTEDf_GET(r) ((((r).txfir_sts3[0]) >> 8) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_TXFIR_STS3r_TXFIR_POST2_ADJUSTEDf_SET(r,f) (r).txfir_sts3[0]=(((r).txfir_sts3[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8)) | (31 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_TXFIR_STS3r_TXFIR_MAIN_ADJUSTEDf_GET(r) (((r).txfir_sts3[0]) & 0x7f)
#define BCMI_TSCF_GEN3_XGXS_TXFIR_STS3r_TXFIR_MAIN_ADJUSTEDf_SET(r,f) (r).txfir_sts3[0]=(((r).txfir_sts3[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f)) | (0x7f << 16)

/*
 * These macros can be used to access TXFIR_STS3.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TXFIR_STS3r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_STS3r,(_r._txfir_sts3))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TXFIR_STS3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_STS3r,(_r._txfir_sts3)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TXFIR_STS3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_STS3r,(_r._txfir_sts3))
#define BCMI_TSCF_GEN3_XGXS_READLN_TXFIR_STS3r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_STS3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_sts3))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TXFIR_STS3r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_STS3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_sts3))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TXFIR_STS3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_STS3r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txfir_sts3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXFIR_STS3r BCMI_TSCF_GEN3_XGXS_TXFIR_STS3r
#define TXFIR_STS3r_SIZE BCMI_TSCF_GEN3_XGXS_TXFIR_STS3r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TXFIR_STS3r_t TXFIR_STS3r_t;
#define TXFIR_STS3r_CLR BCMI_TSCF_GEN3_XGXS_TXFIR_STS3r_CLR
#define TXFIR_STS3r_SET BCMI_TSCF_GEN3_XGXS_TXFIR_STS3r_SET
#define TXFIR_STS3r_GET BCMI_TSCF_GEN3_XGXS_TXFIR_STS3r_GET
#define TXFIR_STS3r_TXFIR_POST2_ADJUSTEDf_GET BCMI_TSCF_GEN3_XGXS_TXFIR_STS3r_TXFIR_POST2_ADJUSTEDf_GET
#define TXFIR_STS3r_TXFIR_POST2_ADJUSTEDf_SET BCMI_TSCF_GEN3_XGXS_TXFIR_STS3r_TXFIR_POST2_ADJUSTEDf_SET
#define TXFIR_STS3r_TXFIR_MAIN_ADJUSTEDf_GET BCMI_TSCF_GEN3_XGXS_TXFIR_STS3r_TXFIR_MAIN_ADJUSTEDf_GET
#define TXFIR_STS3r_TXFIR_MAIN_ADJUSTEDf_SET BCMI_TSCF_GEN3_XGXS_TXFIR_STS3r_TXFIR_MAIN_ADJUSTEDf_SET
#define READ_TXFIR_STS3r BCMI_TSCF_GEN3_XGXS_READ_TXFIR_STS3r
#define WRITE_TXFIR_STS3r BCMI_TSCF_GEN3_XGXS_WRITE_TXFIR_STS3r
#define MODIFY_TXFIR_STS3r BCMI_TSCF_GEN3_XGXS_MODIFY_TXFIR_STS3r
#define READLN_TXFIR_STS3r BCMI_TSCF_GEN3_XGXS_READLN_TXFIR_STS3r
#define WRITELN_TXFIR_STS3r BCMI_TSCF_GEN3_XGXS_WRITELN_TXFIR_STS3r
#define WRITEALL_TXFIR_STS3r BCMI_TSCF_GEN3_XGXS_WRITEALL_TXFIR_STS3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TXFIR_STS3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TXFIR_STS4
 * BLOCKS:   TX_FED
 * REGADDR:  0xd137
 * DEVAD:    1
 * DESC:     TX FIR Status4 Register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TXFIR_POST3_ADJUSTED tx fir post3 tap value after offset adjustment. statusThe value range is -7..+7 and it is in 2's complement formati.e. 0=0, 1=+1,..7=+7, 8=-8, 9=-7,..15=-1
 */
#define BCMI_TSCF_GEN3_XGXS_TXFIR_STS4r (0x0001d137 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TXFIR_STS4r_SIZE 4

/*
 * This structure should be used to declare and program TXFIR_STS4.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TXFIR_STS4r_s {
	uint32_t v[1];
	uint32_t txfir_sts4[1];
	uint32_t _txfir_sts4;
} BCMI_TSCF_GEN3_XGXS_TXFIR_STS4r_t;

#define BCMI_TSCF_GEN3_XGXS_TXFIR_STS4r_CLR(r) (r).txfir_sts4[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TXFIR_STS4r_SET(r,d) (r).txfir_sts4[0] = d
#define BCMI_TSCF_GEN3_XGXS_TXFIR_STS4r_GET(r) (r).txfir_sts4[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TXFIR_STS4r_TXFIR_POST3_ADJUSTEDf_GET(r) (((r).txfir_sts4[0]) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_TXFIR_STS4r_TXFIR_POST3_ADJUSTEDf_SET(r,f) (r).txfir_sts4[0]=(((r).txfir_sts4[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access TXFIR_STS4.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TXFIR_STS4r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_STS4r,(_r._txfir_sts4))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TXFIR_STS4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_STS4r,(_r._txfir_sts4)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TXFIR_STS4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_STS4r,(_r._txfir_sts4))
#define BCMI_TSCF_GEN3_XGXS_READLN_TXFIR_STS4r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_STS4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_sts4))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TXFIR_STS4r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_STS4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_sts4))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TXFIR_STS4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_STS4r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txfir_sts4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXFIR_STS4r BCMI_TSCF_GEN3_XGXS_TXFIR_STS4r
#define TXFIR_STS4r_SIZE BCMI_TSCF_GEN3_XGXS_TXFIR_STS4r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TXFIR_STS4r_t TXFIR_STS4r_t;
#define TXFIR_STS4r_CLR BCMI_TSCF_GEN3_XGXS_TXFIR_STS4r_CLR
#define TXFIR_STS4r_SET BCMI_TSCF_GEN3_XGXS_TXFIR_STS4r_SET
#define TXFIR_STS4r_GET BCMI_TSCF_GEN3_XGXS_TXFIR_STS4r_GET
#define TXFIR_STS4r_TXFIR_POST3_ADJUSTEDf_GET BCMI_TSCF_GEN3_XGXS_TXFIR_STS4r_TXFIR_POST3_ADJUSTEDf_GET
#define TXFIR_STS4r_TXFIR_POST3_ADJUSTEDf_SET BCMI_TSCF_GEN3_XGXS_TXFIR_STS4r_TXFIR_POST3_ADJUSTEDf_SET
#define READ_TXFIR_STS4r BCMI_TSCF_GEN3_XGXS_READ_TXFIR_STS4r
#define WRITE_TXFIR_STS4r BCMI_TSCF_GEN3_XGXS_WRITE_TXFIR_STS4r
#define MODIFY_TXFIR_STS4r BCMI_TSCF_GEN3_XGXS_MODIFY_TXFIR_STS4r
#define READLN_TXFIR_STS4r BCMI_TSCF_GEN3_XGXS_READLN_TXFIR_STS4r
#define WRITELN_TXFIR_STS4r BCMI_TSCF_GEN3_XGXS_WRITELN_TXFIR_STS4r
#define WRITEALL_TXFIR_STS4r BCMI_TSCF_GEN3_XGXS_WRITEALL_TXFIR_STS4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TXFIR_STS4r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TXFIR_UC_CTL0
 * BLOCKS:   TX_FED
 * REGADDR:  0xd13a
 * DEVAD:    1
 * DESC:     Micro Control 0 Register
 * RESETVAL: 0xc160 (49504)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_TX_DISABLE micro tx disableThis field is used by the Microcontroller for tx disable control during CL93N72 forced modePlease see Falcon PMD Internal Functional Specification for details
 *     TX_DISABLE_TRIGGER Tx disable triggerWhen this bit is set to 1, it triggers a TX disable with timer starting at 0.No matter where the TX disable state is, it start a new timer and apply TX disable.This bit is self clearing
 *     DP_RESET_TX_DISABLE_DIS Tx disable based on data path reset0 - Enable tx disable based on data path reset1 - Disable tx disable based on data path resetNeed to set this bit to 1 if tx_disable_output_sel = 2'b01 (send TX power down).
 *     PMD_TX_DISABLE_PKILL Tx disable using the pmd_tx_disable pin disable control0 - enable tx disable from pmd_tx_disable pin1 - disable tx disable from pmd_tx_disable pin
 *     TX_DISABLE_TIMER_CTRL tx_disable timer value controlstx_disable_timer_ctrl[5] (MSB) selects the timer units0 - 2us units1 - 1ms unitstx_disable_timer_ctrl[4:0] (LSB[4:0]) = controls the number of units perthe list below0                 0 units1                 1 units2                 2 units3                 3 units4                 4 units5                 5 units6                 6 units7                 7 units8                 8 units9                10 units10               12 units11               14 units12               16 units13               20 units14               24 units15               28 units16               32 units17               40 units18               48 units19               56 units20               64 units21               80 units22               96 units23              112 units24              128 units25              160 units26              192 units27              224 units28              256 units29              320 units30              384 units31              448 units
 *     TX_EEE_QUIET_EN  Tx eee quiet mode control1 - Enable eee quiet mode when pmd_tx_mode (input pins) == 2'b010 - Disable eee quiet mode
 *     TX_EEE_ALERT_EN  Tx eee alert mode control1 - Enable eee alert mode when pmd_tx_mode (input pins) == 2'b100 - Disable eee alert mode
 */
#define BCMI_TSCF_GEN3_XGXS_TXFIR_UC_CTL0r (0x0001d13a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TXFIR_UC_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program TXFIR_UC_CTL0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TXFIR_UC_CTL0r_s {
	uint32_t v[1];
	uint32_t txfir_uc_ctl0[1];
	uint32_t _txfir_uc_ctl0;
} BCMI_TSCF_GEN3_XGXS_TXFIR_UC_CTL0r_t;

#define BCMI_TSCF_GEN3_XGXS_TXFIR_UC_CTL0r_CLR(r) (r).txfir_uc_ctl0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TXFIR_UC_CTL0r_SET(r,d) (r).txfir_uc_ctl0[0] = d
#define BCMI_TSCF_GEN3_XGXS_TXFIR_UC_CTL0r_GET(r) (r).txfir_uc_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TXFIR_UC_CTL0r_TX_EEE_ALERT_ENf_GET(r) ((((r).txfir_uc_ctl0[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TXFIR_UC_CTL0r_TX_EEE_ALERT_ENf_SET(r,f) (r).txfir_uc_ctl0[0]=(((r).txfir_uc_ctl0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_TXFIR_UC_CTL0r_TX_EEE_QUIET_ENf_GET(r) ((((r).txfir_uc_ctl0[0]) >> 14) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TXFIR_UC_CTL0r_TX_EEE_QUIET_ENf_SET(r,f) (r).txfir_uc_ctl0[0]=(((r).txfir_uc_ctl0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_TXFIR_UC_CTL0r_TX_DISABLE_TIMER_CTRLf_GET(r) ((((r).txfir_uc_ctl0[0]) >> 4) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_TXFIR_UC_CTL0r_TX_DISABLE_TIMER_CTRLf_SET(r,f) (r).txfir_uc_ctl0[0]=(((r).txfir_uc_ctl0[0] & ~((uint32_t)0x3f << 4)) | ((((uint32_t)f) & 0x3f) << 4)) | (63 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_TXFIR_UC_CTL0r_PMD_TX_DISABLE_PKILLf_GET(r) ((((r).txfir_uc_ctl0[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TXFIR_UC_CTL0r_PMD_TX_DISABLE_PKILLf_SET(r,f) (r).txfir_uc_ctl0[0]=(((r).txfir_uc_ctl0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_TXFIR_UC_CTL0r_DP_RESET_TX_DISABLE_DISf_GET(r) ((((r).txfir_uc_ctl0[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TXFIR_UC_CTL0r_DP_RESET_TX_DISABLE_DISf_SET(r,f) (r).txfir_uc_ctl0[0]=(((r).txfir_uc_ctl0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_TXFIR_UC_CTL0r_TX_DISABLE_TRIGGERf_GET(r) ((((r).txfir_uc_ctl0[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TXFIR_UC_CTL0r_TX_DISABLE_TRIGGERf_SET(r,f) (r).txfir_uc_ctl0[0]=(((r).txfir_uc_ctl0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_TXFIR_UC_CTL0r_MICRO_TX_DISABLEf_GET(r) (((r).txfir_uc_ctl0[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TXFIR_UC_CTL0r_MICRO_TX_DISABLEf_SET(r,f) (r).txfir_uc_ctl0[0]=(((r).txfir_uc_ctl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TXFIR_UC_CTL0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TXFIR_UC_CTL0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_UC_CTL0r,(_r._txfir_uc_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TXFIR_UC_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_UC_CTL0r,(_r._txfir_uc_ctl0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TXFIR_UC_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_UC_CTL0r,(_r._txfir_uc_ctl0))
#define BCMI_TSCF_GEN3_XGXS_READLN_TXFIR_UC_CTL0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_UC_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_uc_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TXFIR_UC_CTL0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_UC_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_uc_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TXFIR_UC_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_UC_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txfir_uc_ctl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXFIR_UC_CTL0r BCMI_TSCF_GEN3_XGXS_TXFIR_UC_CTL0r
#define TXFIR_UC_CTL0r_SIZE BCMI_TSCF_GEN3_XGXS_TXFIR_UC_CTL0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TXFIR_UC_CTL0r_t TXFIR_UC_CTL0r_t;
#define TXFIR_UC_CTL0r_CLR BCMI_TSCF_GEN3_XGXS_TXFIR_UC_CTL0r_CLR
#define TXFIR_UC_CTL0r_SET BCMI_TSCF_GEN3_XGXS_TXFIR_UC_CTL0r_SET
#define TXFIR_UC_CTL0r_GET BCMI_TSCF_GEN3_XGXS_TXFIR_UC_CTL0r_GET
#define TXFIR_UC_CTL0r_TX_EEE_ALERT_ENf_GET BCMI_TSCF_GEN3_XGXS_TXFIR_UC_CTL0r_TX_EEE_ALERT_ENf_GET
#define TXFIR_UC_CTL0r_TX_EEE_ALERT_ENf_SET BCMI_TSCF_GEN3_XGXS_TXFIR_UC_CTL0r_TX_EEE_ALERT_ENf_SET
#define TXFIR_UC_CTL0r_TX_EEE_QUIET_ENf_GET BCMI_TSCF_GEN3_XGXS_TXFIR_UC_CTL0r_TX_EEE_QUIET_ENf_GET
#define TXFIR_UC_CTL0r_TX_EEE_QUIET_ENf_SET BCMI_TSCF_GEN3_XGXS_TXFIR_UC_CTL0r_TX_EEE_QUIET_ENf_SET
#define TXFIR_UC_CTL0r_TX_DISABLE_TIMER_CTRLf_GET BCMI_TSCF_GEN3_XGXS_TXFIR_UC_CTL0r_TX_DISABLE_TIMER_CTRLf_GET
#define TXFIR_UC_CTL0r_TX_DISABLE_TIMER_CTRLf_SET BCMI_TSCF_GEN3_XGXS_TXFIR_UC_CTL0r_TX_DISABLE_TIMER_CTRLf_SET
#define TXFIR_UC_CTL0r_PMD_TX_DISABLE_PKILLf_GET BCMI_TSCF_GEN3_XGXS_TXFIR_UC_CTL0r_PMD_TX_DISABLE_PKILLf_GET
#define TXFIR_UC_CTL0r_PMD_TX_DISABLE_PKILLf_SET BCMI_TSCF_GEN3_XGXS_TXFIR_UC_CTL0r_PMD_TX_DISABLE_PKILLf_SET
#define TXFIR_UC_CTL0r_DP_RESET_TX_DISABLE_DISf_GET BCMI_TSCF_GEN3_XGXS_TXFIR_UC_CTL0r_DP_RESET_TX_DISABLE_DISf_GET
#define TXFIR_UC_CTL0r_DP_RESET_TX_DISABLE_DISf_SET BCMI_TSCF_GEN3_XGXS_TXFIR_UC_CTL0r_DP_RESET_TX_DISABLE_DISf_SET
#define TXFIR_UC_CTL0r_TX_DISABLE_TRIGGERf_GET BCMI_TSCF_GEN3_XGXS_TXFIR_UC_CTL0r_TX_DISABLE_TRIGGERf_GET
#define TXFIR_UC_CTL0r_TX_DISABLE_TRIGGERf_SET BCMI_TSCF_GEN3_XGXS_TXFIR_UC_CTL0r_TX_DISABLE_TRIGGERf_SET
#define TXFIR_UC_CTL0r_MICRO_TX_DISABLEf_GET BCMI_TSCF_GEN3_XGXS_TXFIR_UC_CTL0r_MICRO_TX_DISABLEf_GET
#define TXFIR_UC_CTL0r_MICRO_TX_DISABLEf_SET BCMI_TSCF_GEN3_XGXS_TXFIR_UC_CTL0r_MICRO_TX_DISABLEf_SET
#define READ_TXFIR_UC_CTL0r BCMI_TSCF_GEN3_XGXS_READ_TXFIR_UC_CTL0r
#define WRITE_TXFIR_UC_CTL0r BCMI_TSCF_GEN3_XGXS_WRITE_TXFIR_UC_CTL0r
#define MODIFY_TXFIR_UC_CTL0r BCMI_TSCF_GEN3_XGXS_MODIFY_TXFIR_UC_CTL0r
#define READLN_TXFIR_UC_CTL0r BCMI_TSCF_GEN3_XGXS_READLN_TXFIR_UC_CTL0r
#define WRITELN_TXFIR_UC_CTL0r BCMI_TSCF_GEN3_XGXS_WRITELN_TXFIR_UC_CTL0r
#define WRITEALL_TXFIR_UC_CTL0r BCMI_TSCF_GEN3_XGXS_WRITEALL_TXFIR_UC_CTL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TXFIR_UC_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TXFIR_MISC_CTL0
 * BLOCKS:   TX_FED
 * REGADDR:  0xd13b
 * DEVAD:    1
 * DESC:     Misc Control 0 Register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     SDK_TX_DISABLE   sdk tx disableThis tx disable control field is for SDK use during TX programmingPlease see Eagle & Merlin PMD Internal Functional Specification for details
 *     TX_DISABLE_OUTPUT_SEL These bits select tx disable output function2'b00 - send electrical idles2'b01 - send power down2'b10 - send ones2'b11 - send zeroes
 */
#define BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_CTL0r (0x0001d13b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program TXFIR_MISC_CTL0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_CTL0r_s {
	uint32_t v[1];
	uint32_t txfir_misc_ctl0[1];
	uint32_t _txfir_misc_ctl0;
} BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_CTL0r_t;

#define BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_CTL0r_CLR(r) (r).txfir_misc_ctl0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_CTL0r_SET(r,d) (r).txfir_misc_ctl0[0] = d
#define BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_CTL0r_GET(r) (r).txfir_misc_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_CTL0r_TX_DISABLE_OUTPUT_SELf_GET(r) ((((r).txfir_misc_ctl0[0]) >> 2) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_CTL0r_TX_DISABLE_OUTPUT_SELf_SET(r,f) (r).txfir_misc_ctl0[0]=(((r).txfir_misc_ctl0[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2)) | (3 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_CTL0r_SDK_TX_DISABLEf_GET(r) (((r).txfir_misc_ctl0[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_CTL0r_SDK_TX_DISABLEf_SET(r,f) (r).txfir_misc_ctl0[0]=(((r).txfir_misc_ctl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TXFIR_MISC_CTL0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TXFIR_MISC_CTL0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_CTL0r,(_r._txfir_misc_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TXFIR_MISC_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_CTL0r,(_r._txfir_misc_ctl0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TXFIR_MISC_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_CTL0r,(_r._txfir_misc_ctl0))
#define BCMI_TSCF_GEN3_XGXS_READLN_TXFIR_MISC_CTL0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_misc_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TXFIR_MISC_CTL0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_misc_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TXFIR_MISC_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txfir_misc_ctl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXFIR_MISC_CTL0r BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_CTL0r
#define TXFIR_MISC_CTL0r_SIZE BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_CTL0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_CTL0r_t TXFIR_MISC_CTL0r_t;
#define TXFIR_MISC_CTL0r_CLR BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_CTL0r_CLR
#define TXFIR_MISC_CTL0r_SET BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_CTL0r_SET
#define TXFIR_MISC_CTL0r_GET BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_CTL0r_GET
#define TXFIR_MISC_CTL0r_TX_DISABLE_OUTPUT_SELf_GET BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_CTL0r_TX_DISABLE_OUTPUT_SELf_GET
#define TXFIR_MISC_CTL0r_TX_DISABLE_OUTPUT_SELf_SET BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_CTL0r_TX_DISABLE_OUTPUT_SELf_SET
#define TXFIR_MISC_CTL0r_SDK_TX_DISABLEf_GET BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_CTL0r_SDK_TX_DISABLEf_GET
#define TXFIR_MISC_CTL0r_SDK_TX_DISABLEf_SET BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_CTL0r_SDK_TX_DISABLEf_SET
#define READ_TXFIR_MISC_CTL0r BCMI_TSCF_GEN3_XGXS_READ_TXFIR_MISC_CTL0r
#define WRITE_TXFIR_MISC_CTL0r BCMI_TSCF_GEN3_XGXS_WRITE_TXFIR_MISC_CTL0r
#define MODIFY_TXFIR_MISC_CTL0r BCMI_TSCF_GEN3_XGXS_MODIFY_TXFIR_MISC_CTL0r
#define READLN_TXFIR_MISC_CTL0r BCMI_TSCF_GEN3_XGXS_READLN_TXFIR_MISC_CTL0r
#define WRITELN_TXFIR_MISC_CTL0r BCMI_TSCF_GEN3_XGXS_WRITELN_TXFIR_MISC_CTL0r
#define WRITEALL_TXFIR_MISC_CTL0r BCMI_TSCF_GEN3_XGXS_WRITEALL_TXFIR_MISC_CTL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TXFIR_MISC_STS0
 * BLOCKS:   TX_FED
 * REGADDR:  0xd13c
 * DEVAD:    1
 * DESC:     Misc Status 0 Register
 * RESETVAL: 0x3 (3)
 * ACCESS:   R/O
 * FIELDS:
 *     TX_DISABLE_STATUS tx disable statusWhen this bit is set it indicates the tx_disable is active due to:1) pin at AN/PCS to PMD Interface OR2) dp_reset being asserted3) register bit dedicated to micro use4) register bit dedicated to SDK use5) tx disable timer that guarntees minimum assertion time has not expired
 *     TX_ELEC_IDLE_STATUS tx electrical idle statusWhen this bit is set it indicates the tx elecrticl idle active due to:1) tx disable being programmed to send electrical idles or2) An internal logic signal derived from PMD interface pins for EEE TX MODE
 */
#define BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_STS0r (0x0001d13c | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_STS0r_SIZE 4

/*
 * This structure should be used to declare and program TXFIR_MISC_STS0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_STS0r_s {
	uint32_t v[1];
	uint32_t txfir_misc_sts0[1];
	uint32_t _txfir_misc_sts0;
} BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_STS0r_t;

#define BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_STS0r_CLR(r) (r).txfir_misc_sts0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_STS0r_SET(r,d) (r).txfir_misc_sts0[0] = d
#define BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_STS0r_GET(r) (r).txfir_misc_sts0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_STS0r_TX_ELEC_IDLE_STATUSf_GET(r) ((((r).txfir_misc_sts0[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_STS0r_TX_ELEC_IDLE_STATUSf_SET(r,f) (r).txfir_misc_sts0[0]=(((r).txfir_misc_sts0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_STS0r_TX_DISABLE_STATUSf_GET(r) (((r).txfir_misc_sts0[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_STS0r_TX_DISABLE_STATUSf_SET(r,f) (r).txfir_misc_sts0[0]=(((r).txfir_misc_sts0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TXFIR_MISC_STS0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TXFIR_MISC_STS0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_STS0r,(_r._txfir_misc_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TXFIR_MISC_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_STS0r,(_r._txfir_misc_sts0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TXFIR_MISC_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_STS0r,(_r._txfir_misc_sts0))
#define BCMI_TSCF_GEN3_XGXS_READLN_TXFIR_MISC_STS0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_misc_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TXFIR_MISC_STS0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_misc_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TXFIR_MISC_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_STS0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txfir_misc_sts0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXFIR_MISC_STS0r BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_STS0r
#define TXFIR_MISC_STS0r_SIZE BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_STS0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_STS0r_t TXFIR_MISC_STS0r_t;
#define TXFIR_MISC_STS0r_CLR BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_STS0r_CLR
#define TXFIR_MISC_STS0r_SET BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_STS0r_SET
#define TXFIR_MISC_STS0r_GET BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_STS0r_GET
#define TXFIR_MISC_STS0r_TX_ELEC_IDLE_STATUSf_GET BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_STS0r_TX_ELEC_IDLE_STATUSf_GET
#define TXFIR_MISC_STS0r_TX_ELEC_IDLE_STATUSf_SET BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_STS0r_TX_ELEC_IDLE_STATUSf_SET
#define TXFIR_MISC_STS0r_TX_DISABLE_STATUSf_GET BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_STS0r_TX_DISABLE_STATUSf_GET
#define TXFIR_MISC_STS0r_TX_DISABLE_STATUSf_SET BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_STS0r_TX_DISABLE_STATUSf_SET
#define READ_TXFIR_MISC_STS0r BCMI_TSCF_GEN3_XGXS_READ_TXFIR_MISC_STS0r
#define WRITE_TXFIR_MISC_STS0r BCMI_TSCF_GEN3_XGXS_WRITE_TXFIR_MISC_STS0r
#define MODIFY_TXFIR_MISC_STS0r BCMI_TSCF_GEN3_XGXS_MODIFY_TXFIR_MISC_STS0r
#define READLN_TXFIR_MISC_STS0r BCMI_TSCF_GEN3_XGXS_READLN_TXFIR_MISC_STS0r
#define WRITELN_TXFIR_MISC_STS0r BCMI_TSCF_GEN3_XGXS_WRITELN_TXFIR_MISC_STS0r
#define WRITEALL_TXFIR_MISC_STS0r BCMI_TSCF_GEN3_XGXS_WRITEALL_TXFIR_MISC_STS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TXFIR_MISC_STS0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PLL_CAL_CTL0
 * BLOCKS:   PLL_CAL_COM
 * REGADDR:  0xd140
 * DEVAD:    1
 * DESC:     PLL CAL Configuration Registers 0.
 * RESETVAL: 0xc803 (51203)
 * ACCESS:   R/W
 * FIELDS:
 *     VCO_STEP_TIME    VCO time between iterations
 *     VCO_START_TIME   VCO powerup wait time
 */
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL0r (0x0001d140 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program PLL_CAL_CTL0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL0r_s {
	uint32_t v[1];
	uint32_t pll_cal_ctl0[1];
	uint32_t _pll_cal_ctl0;
} BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL0r_t;

#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL0r_CLR(r) (r).pll_cal_ctl0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL0r_SET(r,d) (r).pll_cal_ctl0[0] = d
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL0r_GET(r) (r).pll_cal_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL0r_VCO_START_TIMEf_GET(r) ((((r).pll_cal_ctl0[0]) >> 8) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL0r_VCO_START_TIMEf_SET(r,f) (r).pll_cal_ctl0[0]=(((r).pll_cal_ctl0[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL0r_VCO_STEP_TIMEf_GET(r) (((r).pll_cal_ctl0[0]) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL0r_VCO_STEP_TIMEf_SET(r,f) (r).pll_cal_ctl0[0]=(((r).pll_cal_ctl0[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access PLL_CAL_CTL0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PLL_CAL_CTL0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL0r,(_r._pll_cal_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PLL_CAL_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL0r,(_r._pll_cal_ctl0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PLL_CAL_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL0r,(_r._pll_cal_ctl0))
#define BCMI_TSCF_GEN3_XGXS_READLN_PLL_CAL_CTL0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_cal_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_PLL_CAL_CTL0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_cal_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_PLL_CAL_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._pll_cal_ctl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PLL_CAL_CTL0r BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL0r
#define PLL_CAL_CTL0r_SIZE BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL0r_t PLL_CAL_CTL0r_t;
#define PLL_CAL_CTL0r_CLR BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL0r_CLR
#define PLL_CAL_CTL0r_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL0r_SET
#define PLL_CAL_CTL0r_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL0r_GET
#define PLL_CAL_CTL0r_VCO_START_TIMEf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL0r_VCO_START_TIMEf_GET
#define PLL_CAL_CTL0r_VCO_START_TIMEf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL0r_VCO_START_TIMEf_SET
#define PLL_CAL_CTL0r_VCO_STEP_TIMEf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL0r_VCO_STEP_TIMEf_GET
#define PLL_CAL_CTL0r_VCO_STEP_TIMEf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL0r_VCO_STEP_TIMEf_SET
#define READ_PLL_CAL_CTL0r BCMI_TSCF_GEN3_XGXS_READ_PLL_CAL_CTL0r
#define WRITE_PLL_CAL_CTL0r BCMI_TSCF_GEN3_XGXS_WRITE_PLL_CAL_CTL0r
#define MODIFY_PLL_CAL_CTL0r BCMI_TSCF_GEN3_XGXS_MODIFY_PLL_CAL_CTL0r
#define READLN_PLL_CAL_CTL0r BCMI_TSCF_GEN3_XGXS_READLN_PLL_CAL_CTL0r
#define WRITELN_PLL_CAL_CTL0r BCMI_TSCF_GEN3_XGXS_WRITELN_PLL_CAL_CTL0r
#define WRITEALL_PLL_CAL_CTL0r BCMI_TSCF_GEN3_XGXS_WRITEALL_PLL_CAL_CTL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PLL_CAL_CTL1
 * BLOCKS:   PLL_CAL_COM
 * REGADDR:  0xd141
 * DEVAD:    1
 * DESC:     PLL CAL Configuration Registers 1.
 * RESETVAL: 0xc8ff (51455)
 * ACCESS:   R/W
 * FIELDS:
 *     RETRY_TIME       retry wait time
 *     PRE_FREQ_DET_TIME wait time prior to freq det
 */
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL1r (0x0001d141 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL1r_SIZE 4

/*
 * This structure should be used to declare and program PLL_CAL_CTL1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL1r_s {
	uint32_t v[1];
	uint32_t pll_cal_ctl1[1];
	uint32_t _pll_cal_ctl1;
} BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL1r_t;

#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL1r_CLR(r) (r).pll_cal_ctl1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL1r_SET(r,d) (r).pll_cal_ctl1[0] = d
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL1r_GET(r) (r).pll_cal_ctl1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL1r_PRE_FREQ_DET_TIMEf_GET(r) ((((r).pll_cal_ctl1[0]) >> 8) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL1r_PRE_FREQ_DET_TIMEf_SET(r,f) (r).pll_cal_ctl1[0]=(((r).pll_cal_ctl1[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL1r_RETRY_TIMEf_GET(r) (((r).pll_cal_ctl1[0]) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL1r_RETRY_TIMEf_SET(r,f) (r).pll_cal_ctl1[0]=(((r).pll_cal_ctl1[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access PLL_CAL_CTL1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PLL_CAL_CTL1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL1r,(_r._pll_cal_ctl1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PLL_CAL_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL1r,(_r._pll_cal_ctl1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PLL_CAL_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL1r,(_r._pll_cal_ctl1))
#define BCMI_TSCF_GEN3_XGXS_READLN_PLL_CAL_CTL1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_cal_ctl1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_PLL_CAL_CTL1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_cal_ctl1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_PLL_CAL_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._pll_cal_ctl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PLL_CAL_CTL1r BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL1r
#define PLL_CAL_CTL1r_SIZE BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL1r_t PLL_CAL_CTL1r_t;
#define PLL_CAL_CTL1r_CLR BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL1r_CLR
#define PLL_CAL_CTL1r_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL1r_SET
#define PLL_CAL_CTL1r_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL1r_GET
#define PLL_CAL_CTL1r_PRE_FREQ_DET_TIMEf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL1r_PRE_FREQ_DET_TIMEf_GET
#define PLL_CAL_CTL1r_PRE_FREQ_DET_TIMEf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL1r_PRE_FREQ_DET_TIMEf_SET
#define PLL_CAL_CTL1r_RETRY_TIMEf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL1r_RETRY_TIMEf_GET
#define PLL_CAL_CTL1r_RETRY_TIMEf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL1r_RETRY_TIMEf_SET
#define READ_PLL_CAL_CTL1r BCMI_TSCF_GEN3_XGXS_READ_PLL_CAL_CTL1r
#define WRITE_PLL_CAL_CTL1r BCMI_TSCF_GEN3_XGXS_WRITE_PLL_CAL_CTL1r
#define MODIFY_PLL_CAL_CTL1r BCMI_TSCF_GEN3_XGXS_MODIFY_PLL_CAL_CTL1r
#define READLN_PLL_CAL_CTL1r BCMI_TSCF_GEN3_XGXS_READLN_PLL_CAL_CTL1r
#define WRITELN_PLL_CAL_CTL1r BCMI_TSCF_GEN3_XGXS_WRITELN_PLL_CAL_CTL1r
#define WRITEALL_PLL_CAL_CTL1r BCMI_TSCF_GEN3_XGXS_WRITEALL_PLL_CAL_CTL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PLL_CAL_CTL2
 * BLOCKS:   PLL_CAL_COM
 * REGADDR:  0xd142
 * DEVAD:    1
 * DESC:     PLL CAL Configuration Registers 2.
 * RESETVAL: 0xff01 (65281)
 * ACCESS:   R/W
 * FIELDS:
 *     WIN_CAL_CNTR     freq. counter's 8-lsbits stoping value
 *     RES_CAL_CNTR     freq. counter's 8-msbits starting value
 */
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL2r (0x0001d142 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL2r_SIZE 4

/*
 * This structure should be used to declare and program PLL_CAL_CTL2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL2r_s {
	uint32_t v[1];
	uint32_t pll_cal_ctl2[1];
	uint32_t _pll_cal_ctl2;
} BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL2r_t;

#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL2r_CLR(r) (r).pll_cal_ctl2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL2r_SET(r,d) (r).pll_cal_ctl2[0] = d
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL2r_GET(r) (r).pll_cal_ctl2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL2r_RES_CAL_CNTRf_GET(r) ((((r).pll_cal_ctl2[0]) >> 8) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL2r_RES_CAL_CNTRf_SET(r,f) (r).pll_cal_ctl2[0]=(((r).pll_cal_ctl2[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL2r_WIN_CAL_CNTRf_GET(r) (((r).pll_cal_ctl2[0]) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL2r_WIN_CAL_CNTRf_SET(r,f) (r).pll_cal_ctl2[0]=(((r).pll_cal_ctl2[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access PLL_CAL_CTL2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PLL_CAL_CTL2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL2r,(_r._pll_cal_ctl2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PLL_CAL_CTL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL2r,(_r._pll_cal_ctl2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PLL_CAL_CTL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL2r,(_r._pll_cal_ctl2))
#define BCMI_TSCF_GEN3_XGXS_READLN_PLL_CAL_CTL2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_cal_ctl2))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_PLL_CAL_CTL2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_cal_ctl2))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_PLL_CAL_CTL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._pll_cal_ctl2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PLL_CAL_CTL2r BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL2r
#define PLL_CAL_CTL2r_SIZE BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL2r_t PLL_CAL_CTL2r_t;
#define PLL_CAL_CTL2r_CLR BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL2r_CLR
#define PLL_CAL_CTL2r_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL2r_SET
#define PLL_CAL_CTL2r_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL2r_GET
#define PLL_CAL_CTL2r_RES_CAL_CNTRf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL2r_RES_CAL_CNTRf_GET
#define PLL_CAL_CTL2r_RES_CAL_CNTRf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL2r_RES_CAL_CNTRf_SET
#define PLL_CAL_CTL2r_WIN_CAL_CNTRf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL2r_WIN_CAL_CNTRf_GET
#define PLL_CAL_CTL2r_WIN_CAL_CNTRf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL2r_WIN_CAL_CNTRf_SET
#define READ_PLL_CAL_CTL2r BCMI_TSCF_GEN3_XGXS_READ_PLL_CAL_CTL2r
#define WRITE_PLL_CAL_CTL2r BCMI_TSCF_GEN3_XGXS_WRITE_PLL_CAL_CTL2r
#define MODIFY_PLL_CAL_CTL2r BCMI_TSCF_GEN3_XGXS_MODIFY_PLL_CAL_CTL2r
#define READLN_PLL_CAL_CTL2r BCMI_TSCF_GEN3_XGXS_READLN_PLL_CAL_CTL2r
#define WRITELN_PLL_CAL_CTL2r BCMI_TSCF_GEN3_XGXS_WRITELN_PLL_CAL_CTL2r
#define WRITEALL_PLL_CAL_CTL2r BCMI_TSCF_GEN3_XGXS_WRITEALL_PLL_CAL_CTL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PLL_CAL_CTL3
 * BLOCKS:   PLL_CAL_COM
 * REGADDR:  0xd143
 * DEVAD:    1
 * DESC:     PLL CAL Configuration Registers 3.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     FAST_SEARCH_MODE force cap sequencer using select_m value for fast searching
 *     CAP_CNT_MASK_EN  masks cap count to allow control of max value
 *     CAP_SEQ_CYA      cya bit to revert cap sequencer back to original hyper/xaui sequence
 *     CAP_RESTART      force cap sequencer to restart, set to high then low
 *     CAP_RETRY_EN     enable retry on cap search failure
 *     CAP_FORCE_SLOWDOWN slowdown force value
 *     CAP_FORCE_SLOWDOWN_EN slowdown force enable
 *     CAP_SELECT_M_EN  Manual vco cap value mode, force using pll_range force value
 *     CAP_SELECT_M     Manual vco cap value (i.e pll_range[7:0])
 */
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r (0x0001d143 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r_SIZE 4

/*
 * This structure should be used to declare and program PLL_CAL_CTL3.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r_s {
	uint32_t v[1];
	uint32_t pll_cal_ctl3[1];
	uint32_t _pll_cal_ctl3;
} BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r_t;

#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r_CLR(r) (r).pll_cal_ctl3[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r_SET(r,d) (r).pll_cal_ctl3[0] = d
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r_GET(r) (r).pll_cal_ctl3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r_CAP_SELECT_Mf_GET(r) ((((r).pll_cal_ctl3[0]) >> 8) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r_CAP_SELECT_Mf_SET(r,f) (r).pll_cal_ctl3[0]=(((r).pll_cal_ctl3[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r_CAP_SELECT_M_ENf_GET(r) ((((r).pll_cal_ctl3[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r_CAP_SELECT_M_ENf_SET(r,f) (r).pll_cal_ctl3[0]=(((r).pll_cal_ctl3[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r_CAP_FORCE_SLOWDOWN_ENf_GET(r) ((((r).pll_cal_ctl3[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r_CAP_FORCE_SLOWDOWN_ENf_SET(r,f) (r).pll_cal_ctl3[0]=(((r).pll_cal_ctl3[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r_CAP_FORCE_SLOWDOWNf_GET(r) ((((r).pll_cal_ctl3[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r_CAP_FORCE_SLOWDOWNf_SET(r,f) (r).pll_cal_ctl3[0]=(((r).pll_cal_ctl3[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r_CAP_RETRY_ENf_GET(r) ((((r).pll_cal_ctl3[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r_CAP_RETRY_ENf_SET(r,f) (r).pll_cal_ctl3[0]=(((r).pll_cal_ctl3[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r_CAP_RESTARTf_GET(r) ((((r).pll_cal_ctl3[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r_CAP_RESTARTf_SET(r,f) (r).pll_cal_ctl3[0]=(((r).pll_cal_ctl3[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r_CAP_SEQ_CYAf_GET(r) ((((r).pll_cal_ctl3[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r_CAP_SEQ_CYAf_SET(r,f) (r).pll_cal_ctl3[0]=(((r).pll_cal_ctl3[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r_CAP_CNT_MASK_ENf_GET(r) ((((r).pll_cal_ctl3[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r_CAP_CNT_MASK_ENf_SET(r,f) (r).pll_cal_ctl3[0]=(((r).pll_cal_ctl3[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r_FAST_SEARCH_MODEf_GET(r) (((r).pll_cal_ctl3[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r_FAST_SEARCH_MODEf_SET(r,f) (r).pll_cal_ctl3[0]=(((r).pll_cal_ctl3[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access PLL_CAL_CTL3.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PLL_CAL_CTL3r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r,(_r._pll_cal_ctl3))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PLL_CAL_CTL3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r,(_r._pll_cal_ctl3)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PLL_CAL_CTL3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r,(_r._pll_cal_ctl3))
#define BCMI_TSCF_GEN3_XGXS_READLN_PLL_CAL_CTL3r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_cal_ctl3))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_PLL_CAL_CTL3r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_cal_ctl3))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_PLL_CAL_CTL3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._pll_cal_ctl3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PLL_CAL_CTL3r BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r
#define PLL_CAL_CTL3r_SIZE BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r_t PLL_CAL_CTL3r_t;
#define PLL_CAL_CTL3r_CLR BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r_CLR
#define PLL_CAL_CTL3r_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r_SET
#define PLL_CAL_CTL3r_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r_GET
#define PLL_CAL_CTL3r_CAP_SELECT_Mf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r_CAP_SELECT_Mf_GET
#define PLL_CAL_CTL3r_CAP_SELECT_Mf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r_CAP_SELECT_Mf_SET
#define PLL_CAL_CTL3r_CAP_SELECT_M_ENf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r_CAP_SELECT_M_ENf_GET
#define PLL_CAL_CTL3r_CAP_SELECT_M_ENf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r_CAP_SELECT_M_ENf_SET
#define PLL_CAL_CTL3r_CAP_FORCE_SLOWDOWN_ENf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r_CAP_FORCE_SLOWDOWN_ENf_GET
#define PLL_CAL_CTL3r_CAP_FORCE_SLOWDOWN_ENf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r_CAP_FORCE_SLOWDOWN_ENf_SET
#define PLL_CAL_CTL3r_CAP_FORCE_SLOWDOWNf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r_CAP_FORCE_SLOWDOWNf_GET
#define PLL_CAL_CTL3r_CAP_FORCE_SLOWDOWNf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r_CAP_FORCE_SLOWDOWNf_SET
#define PLL_CAL_CTL3r_CAP_RETRY_ENf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r_CAP_RETRY_ENf_GET
#define PLL_CAL_CTL3r_CAP_RETRY_ENf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r_CAP_RETRY_ENf_SET
#define PLL_CAL_CTL3r_CAP_RESTARTf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r_CAP_RESTARTf_GET
#define PLL_CAL_CTL3r_CAP_RESTARTf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r_CAP_RESTARTf_SET
#define PLL_CAL_CTL3r_CAP_SEQ_CYAf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r_CAP_SEQ_CYAf_GET
#define PLL_CAL_CTL3r_CAP_SEQ_CYAf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r_CAP_SEQ_CYAf_SET
#define PLL_CAL_CTL3r_CAP_CNT_MASK_ENf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r_CAP_CNT_MASK_ENf_GET
#define PLL_CAL_CTL3r_CAP_CNT_MASK_ENf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r_CAP_CNT_MASK_ENf_SET
#define PLL_CAL_CTL3r_FAST_SEARCH_MODEf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r_FAST_SEARCH_MODEf_GET
#define PLL_CAL_CTL3r_FAST_SEARCH_MODEf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r_FAST_SEARCH_MODEf_SET
#define READ_PLL_CAL_CTL3r BCMI_TSCF_GEN3_XGXS_READ_PLL_CAL_CTL3r
#define WRITE_PLL_CAL_CTL3r BCMI_TSCF_GEN3_XGXS_WRITE_PLL_CAL_CTL3r
#define MODIFY_PLL_CAL_CTL3r BCMI_TSCF_GEN3_XGXS_MODIFY_PLL_CAL_CTL3r
#define READLN_PLL_CAL_CTL3r BCMI_TSCF_GEN3_XGXS_READLN_PLL_CAL_CTL3r
#define WRITELN_PLL_CAL_CTL3r BCMI_TSCF_GEN3_XGXS_WRITELN_PLL_CAL_CTL3r
#define WRITEALL_PLL_CAL_CTL3r BCMI_TSCF_GEN3_XGXS_WRITEALL_PLL_CAL_CTL3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PLL_CAL_CTL4
 * BLOCKS:   PLL_CAL_COM
 * REGADDR:  0xd144
 * DEVAD:    1
 * DESC:     PLL CAL Configuration Registers 4.
 * RESETVAL: 0xa80d (43021)
 * ACCESS:   R/W
 * FIELDS:
 *     PLL_LOCK_FRC_VAL force pll lock value
 *     PLL_LOCK_FRC     force pll lock
 *     PLL_FORCE_CAP_PASS force cappass
 *     PLL_FORCE_CAP_PASS_EN enable pllforcecappass
 *     PLL_FORCE_CAP_DONE force capdone
 *     PLL_FORCE_CAP_DONE_EN enable pllforcecapdone
 *     PLL_FORCE_FPASS  force freqpass
 *     PLL_FORCE_FDONE  force freqdone
 *     PLL_FORCE_FDONE_EN enable pllforcefdone & pllforcefpass into pllseq
 *     VCO_RST_EN       enable pll reset when state machine is in start state. For debug only, use core_dp_s/h_rstb to restart PLL calibration
 *     SLOWDN_XOR       invert sense of the slowdn/pll_low input from AFE
 *     FREQ_MONITOR_EN  continuously monitor vco freq
 *     FREQ_DET_RESTART_EN enable restart when not freq locked
 *     FREQ_DET_RETRY_EN enable retry on freq det failure
 *     VCO_DONE_EN      enable vco_done status bit
 *     PLL_SEQ_START    start pll sequencer by writing to 1'b0 followed by writing to 1'b1. For debug only, use core_dp_s/h_rstb to restart PLL calibration
 */
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r (0x0001d144 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_SIZE 4

/*
 * This structure should be used to declare and program PLL_CAL_CTL4.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_s {
	uint32_t v[1];
	uint32_t pll_cal_ctl4[1];
	uint32_t _pll_cal_ctl4;
} BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_t;

#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_CLR(r) (r).pll_cal_ctl4[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_SET(r,d) (r).pll_cal_ctl4[0] = d
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_GET(r) (r).pll_cal_ctl4[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_PLL_SEQ_STARTf_GET(r) ((((r).pll_cal_ctl4[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_PLL_SEQ_STARTf_SET(r,f) (r).pll_cal_ctl4[0]=(((r).pll_cal_ctl4[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_VCO_DONE_ENf_GET(r) ((((r).pll_cal_ctl4[0]) >> 14) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_VCO_DONE_ENf_SET(r,f) (r).pll_cal_ctl4[0]=(((r).pll_cal_ctl4[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_FREQ_DET_RETRY_ENf_GET(r) ((((r).pll_cal_ctl4[0]) >> 13) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_FREQ_DET_RETRY_ENf_SET(r,f) (r).pll_cal_ctl4[0]=(((r).pll_cal_ctl4[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_FREQ_DET_RESTART_ENf_GET(r) ((((r).pll_cal_ctl4[0]) >> 12) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_FREQ_DET_RESTART_ENf_SET(r,f) (r).pll_cal_ctl4[0]=(((r).pll_cal_ctl4[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_FREQ_MONITOR_ENf_GET(r) ((((r).pll_cal_ctl4[0]) >> 11) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_FREQ_MONITOR_ENf_SET(r,f) (r).pll_cal_ctl4[0]=(((r).pll_cal_ctl4[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_SLOWDN_XORf_GET(r) ((((r).pll_cal_ctl4[0]) >> 10) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_SLOWDN_XORf_SET(r,f) (r).pll_cal_ctl4[0]=(((r).pll_cal_ctl4[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_VCO_RST_ENf_GET(r) ((((r).pll_cal_ctl4[0]) >> 9) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_VCO_RST_ENf_SET(r,f) (r).pll_cal_ctl4[0]=(((r).pll_cal_ctl4[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_PLL_FORCE_FDONE_ENf_GET(r) ((((r).pll_cal_ctl4[0]) >> 8) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_PLL_FORCE_FDONE_ENf_SET(r,f) (r).pll_cal_ctl4[0]=(((r).pll_cal_ctl4[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_PLL_FORCE_FDONEf_GET(r) ((((r).pll_cal_ctl4[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_PLL_FORCE_FDONEf_SET(r,f) (r).pll_cal_ctl4[0]=(((r).pll_cal_ctl4[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_PLL_FORCE_FPASSf_GET(r) ((((r).pll_cal_ctl4[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_PLL_FORCE_FPASSf_SET(r,f) (r).pll_cal_ctl4[0]=(((r).pll_cal_ctl4[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_PLL_FORCE_CAP_DONE_ENf_GET(r) ((((r).pll_cal_ctl4[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_PLL_FORCE_CAP_DONE_ENf_SET(r,f) (r).pll_cal_ctl4[0]=(((r).pll_cal_ctl4[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_PLL_FORCE_CAP_DONEf_GET(r) ((((r).pll_cal_ctl4[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_PLL_FORCE_CAP_DONEf_SET(r,f) (r).pll_cal_ctl4[0]=(((r).pll_cal_ctl4[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_PLL_FORCE_CAP_PASS_ENf_GET(r) ((((r).pll_cal_ctl4[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_PLL_FORCE_CAP_PASS_ENf_SET(r,f) (r).pll_cal_ctl4[0]=(((r).pll_cal_ctl4[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_PLL_FORCE_CAP_PASSf_GET(r) ((((r).pll_cal_ctl4[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_PLL_FORCE_CAP_PASSf_SET(r,f) (r).pll_cal_ctl4[0]=(((r).pll_cal_ctl4[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_PLL_LOCK_FRCf_GET(r) ((((r).pll_cal_ctl4[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_PLL_LOCK_FRCf_SET(r,f) (r).pll_cal_ctl4[0]=(((r).pll_cal_ctl4[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_PLL_LOCK_FRC_VALf_GET(r) (((r).pll_cal_ctl4[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_PLL_LOCK_FRC_VALf_SET(r,f) (r).pll_cal_ctl4[0]=(((r).pll_cal_ctl4[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access PLL_CAL_CTL4.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PLL_CAL_CTL4r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r,(_r._pll_cal_ctl4))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PLL_CAL_CTL4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r,(_r._pll_cal_ctl4)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PLL_CAL_CTL4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r,(_r._pll_cal_ctl4))
#define BCMI_TSCF_GEN3_XGXS_READLN_PLL_CAL_CTL4r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_cal_ctl4))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_PLL_CAL_CTL4r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_cal_ctl4))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_PLL_CAL_CTL4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._pll_cal_ctl4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PLL_CAL_CTL4r BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r
#define PLL_CAL_CTL4r_SIZE BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_t PLL_CAL_CTL4r_t;
#define PLL_CAL_CTL4r_CLR BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_CLR
#define PLL_CAL_CTL4r_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_SET
#define PLL_CAL_CTL4r_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_GET
#define PLL_CAL_CTL4r_PLL_SEQ_STARTf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_PLL_SEQ_STARTf_GET
#define PLL_CAL_CTL4r_PLL_SEQ_STARTf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_PLL_SEQ_STARTf_SET
#define PLL_CAL_CTL4r_VCO_DONE_ENf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_VCO_DONE_ENf_GET
#define PLL_CAL_CTL4r_VCO_DONE_ENf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_VCO_DONE_ENf_SET
#define PLL_CAL_CTL4r_FREQ_DET_RETRY_ENf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_FREQ_DET_RETRY_ENf_GET
#define PLL_CAL_CTL4r_FREQ_DET_RETRY_ENf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_FREQ_DET_RETRY_ENf_SET
#define PLL_CAL_CTL4r_FREQ_DET_RESTART_ENf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_FREQ_DET_RESTART_ENf_GET
#define PLL_CAL_CTL4r_FREQ_DET_RESTART_ENf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_FREQ_DET_RESTART_ENf_SET
#define PLL_CAL_CTL4r_FREQ_MONITOR_ENf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_FREQ_MONITOR_ENf_GET
#define PLL_CAL_CTL4r_FREQ_MONITOR_ENf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_FREQ_MONITOR_ENf_SET
#define PLL_CAL_CTL4r_SLOWDN_XORf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_SLOWDN_XORf_GET
#define PLL_CAL_CTL4r_SLOWDN_XORf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_SLOWDN_XORf_SET
#define PLL_CAL_CTL4r_VCO_RST_ENf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_VCO_RST_ENf_GET
#define PLL_CAL_CTL4r_VCO_RST_ENf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_VCO_RST_ENf_SET
#define PLL_CAL_CTL4r_PLL_FORCE_FDONE_ENf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_PLL_FORCE_FDONE_ENf_GET
#define PLL_CAL_CTL4r_PLL_FORCE_FDONE_ENf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_PLL_FORCE_FDONE_ENf_SET
#define PLL_CAL_CTL4r_PLL_FORCE_FDONEf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_PLL_FORCE_FDONEf_GET
#define PLL_CAL_CTL4r_PLL_FORCE_FDONEf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_PLL_FORCE_FDONEf_SET
#define PLL_CAL_CTL4r_PLL_FORCE_FPASSf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_PLL_FORCE_FPASSf_GET
#define PLL_CAL_CTL4r_PLL_FORCE_FPASSf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_PLL_FORCE_FPASSf_SET
#define PLL_CAL_CTL4r_PLL_FORCE_CAP_DONE_ENf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_PLL_FORCE_CAP_DONE_ENf_GET
#define PLL_CAL_CTL4r_PLL_FORCE_CAP_DONE_ENf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_PLL_FORCE_CAP_DONE_ENf_SET
#define PLL_CAL_CTL4r_PLL_FORCE_CAP_DONEf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_PLL_FORCE_CAP_DONEf_GET
#define PLL_CAL_CTL4r_PLL_FORCE_CAP_DONEf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_PLL_FORCE_CAP_DONEf_SET
#define PLL_CAL_CTL4r_PLL_FORCE_CAP_PASS_ENf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_PLL_FORCE_CAP_PASS_ENf_GET
#define PLL_CAL_CTL4r_PLL_FORCE_CAP_PASS_ENf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_PLL_FORCE_CAP_PASS_ENf_SET
#define PLL_CAL_CTL4r_PLL_FORCE_CAP_PASSf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_PLL_FORCE_CAP_PASSf_GET
#define PLL_CAL_CTL4r_PLL_FORCE_CAP_PASSf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_PLL_FORCE_CAP_PASSf_SET
#define PLL_CAL_CTL4r_PLL_LOCK_FRCf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_PLL_LOCK_FRCf_GET
#define PLL_CAL_CTL4r_PLL_LOCK_FRCf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_PLL_LOCK_FRCf_SET
#define PLL_CAL_CTL4r_PLL_LOCK_FRC_VALf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_PLL_LOCK_FRC_VALf_GET
#define PLL_CAL_CTL4r_PLL_LOCK_FRC_VALf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r_PLL_LOCK_FRC_VALf_SET
#define READ_PLL_CAL_CTL4r BCMI_TSCF_GEN3_XGXS_READ_PLL_CAL_CTL4r
#define WRITE_PLL_CAL_CTL4r BCMI_TSCF_GEN3_XGXS_WRITE_PLL_CAL_CTL4r
#define MODIFY_PLL_CAL_CTL4r BCMI_TSCF_GEN3_XGXS_MODIFY_PLL_CAL_CTL4r
#define READLN_PLL_CAL_CTL4r BCMI_TSCF_GEN3_XGXS_READLN_PLL_CAL_CTL4r
#define WRITELN_PLL_CAL_CTL4r BCMI_TSCF_GEN3_XGXS_WRITELN_PLL_CAL_CTL4r
#define WRITEALL_PLL_CAL_CTL4r BCMI_TSCF_GEN3_XGXS_WRITEALL_PLL_CAL_CTL4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL4r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PLL_CAL_CTL5
 * BLOCKS:   PLL_CAL_COM
 * REGADDR:  0xd145
 * DEVAD:    1
 * DESC:     PLL CAL Configuration Registers 5.
 * RESETVAL: 0x27 (39)
 * ACCESS:   R/W
 * FIELDS:
 *     REFCLK_DIVCNT    Refclk Divider Count to generate a slower divided refclk enable pulse for the PLL calibration logic.Most of the PLL calibration logic including PLL calibration state machines uses this divided version of the refclk clock signal.PLL calibration time is proportional to this register value.
 *     DEC_SEARCH_EN    VCO range decremental search enable control.
 */
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL5r (0x0001d145 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL5r_SIZE 4

/*
 * This structure should be used to declare and program PLL_CAL_CTL5.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL5r_s {
	uint32_t v[1];
	uint32_t pll_cal_ctl5[1];
	uint32_t _pll_cal_ctl5;
} BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL5r_t;

#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL5r_CLR(r) (r).pll_cal_ctl5[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL5r_SET(r,d) (r).pll_cal_ctl5[0] = d
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL5r_GET(r) (r).pll_cal_ctl5[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL5r_DEC_SEARCH_ENf_GET(r) ((((r).pll_cal_ctl5[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL5r_DEC_SEARCH_ENf_SET(r,f) (r).pll_cal_ctl5[0]=(((r).pll_cal_ctl5[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL5r_REFCLK_DIVCNTf_GET(r) (((r).pll_cal_ctl5[0]) & 0x3fff)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL5r_REFCLK_DIVCNTf_SET(r,f) (r).pll_cal_ctl5[0]=(((r).pll_cal_ctl5[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff)) | (0x3fff << 16)

/*
 * These macros can be used to access PLL_CAL_CTL5.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PLL_CAL_CTL5r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL5r,(_r._pll_cal_ctl5))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PLL_CAL_CTL5r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL5r,(_r._pll_cal_ctl5)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PLL_CAL_CTL5r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL5r,(_r._pll_cal_ctl5))
#define BCMI_TSCF_GEN3_XGXS_READLN_PLL_CAL_CTL5r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL5r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_cal_ctl5))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_PLL_CAL_CTL5r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL5r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_cal_ctl5))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_PLL_CAL_CTL5r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL5r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._pll_cal_ctl5))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PLL_CAL_CTL5r BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL5r
#define PLL_CAL_CTL5r_SIZE BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL5r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL5r_t PLL_CAL_CTL5r_t;
#define PLL_CAL_CTL5r_CLR BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL5r_CLR
#define PLL_CAL_CTL5r_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL5r_SET
#define PLL_CAL_CTL5r_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL5r_GET
#define PLL_CAL_CTL5r_DEC_SEARCH_ENf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL5r_DEC_SEARCH_ENf_GET
#define PLL_CAL_CTL5r_DEC_SEARCH_ENf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL5r_DEC_SEARCH_ENf_SET
#define PLL_CAL_CTL5r_REFCLK_DIVCNTf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL5r_REFCLK_DIVCNTf_GET
#define PLL_CAL_CTL5r_REFCLK_DIVCNTf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL5r_REFCLK_DIVCNTf_SET
#define READ_PLL_CAL_CTL5r BCMI_TSCF_GEN3_XGXS_READ_PLL_CAL_CTL5r
#define WRITE_PLL_CAL_CTL5r BCMI_TSCF_GEN3_XGXS_WRITE_PLL_CAL_CTL5r
#define MODIFY_PLL_CAL_CTL5r BCMI_TSCF_GEN3_XGXS_MODIFY_PLL_CAL_CTL5r
#define READLN_PLL_CAL_CTL5r BCMI_TSCF_GEN3_XGXS_READLN_PLL_CAL_CTL5r
#define WRITELN_PLL_CAL_CTL5r BCMI_TSCF_GEN3_XGXS_WRITELN_PLL_CAL_CTL5r
#define WRITEALL_PLL_CAL_CTL5r BCMI_TSCF_GEN3_XGXS_WRITEALL_PLL_CAL_CTL5r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL5r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PLL_CAL_CTL6
 * BLOCKS:   PLL_CAL_COM
 * REGADDR:  0xd146
 * DEVAD:    1
 * DESC:     PLL CAL Configuration Registers 6.
 * RESETVAL: 0x7 (7)
 * ACCESS:   R/W
 * FIELDS:
 *     REFCLK_DIVCNT_SEL Refclk Divider Mode Select.Value 7: will select refclk_divcnt[13:0] as refclk divider value which has max value of 16383.Value 0 to 6 are reserved for future use and should not be selected.
 *     VCO_RANGE_ADJUST signed 2's complement vco_range_offset value to be added to vco_range to AFE.
 *     VCO_RANGE_ADJUST_EN enable vco_range_adjust by hardware when set to 1
 */
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL6r (0x0001d146 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL6r_SIZE 4

/*
 * This structure should be used to declare and program PLL_CAL_CTL6.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL6r_s {
	uint32_t v[1];
	uint32_t pll_cal_ctl6[1];
	uint32_t _pll_cal_ctl6;
} BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL6r_t;

#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL6r_CLR(r) (r).pll_cal_ctl6[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL6r_SET(r,d) (r).pll_cal_ctl6[0] = d
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL6r_GET(r) (r).pll_cal_ctl6[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL6r_VCO_RANGE_ADJUST_ENf_GET(r) ((((r).pll_cal_ctl6[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL6r_VCO_RANGE_ADJUST_ENf_SET(r,f) (r).pll_cal_ctl6[0]=(((r).pll_cal_ctl6[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL6r_VCO_RANGE_ADJUSTf_GET(r) ((((r).pll_cal_ctl6[0]) >> 8) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL6r_VCO_RANGE_ADJUSTf_SET(r,f) (r).pll_cal_ctl6[0]=(((r).pll_cal_ctl6[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8)) | (63 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL6r_REFCLK_DIVCNT_SELf_GET(r) (((r).pll_cal_ctl6[0]) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL6r_REFCLK_DIVCNT_SELf_SET(r,f) (r).pll_cal_ctl6[0]=(((r).pll_cal_ctl6[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access PLL_CAL_CTL6.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PLL_CAL_CTL6r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL6r,(_r._pll_cal_ctl6))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PLL_CAL_CTL6r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL6r,(_r._pll_cal_ctl6)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PLL_CAL_CTL6r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL6r,(_r._pll_cal_ctl6))
#define BCMI_TSCF_GEN3_XGXS_READLN_PLL_CAL_CTL6r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL6r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_cal_ctl6))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_PLL_CAL_CTL6r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL6r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_cal_ctl6))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_PLL_CAL_CTL6r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL6r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._pll_cal_ctl6))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PLL_CAL_CTL6r BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL6r
#define PLL_CAL_CTL6r_SIZE BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL6r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL6r_t PLL_CAL_CTL6r_t;
#define PLL_CAL_CTL6r_CLR BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL6r_CLR
#define PLL_CAL_CTL6r_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL6r_SET
#define PLL_CAL_CTL6r_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL6r_GET
#define PLL_CAL_CTL6r_VCO_RANGE_ADJUST_ENf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL6r_VCO_RANGE_ADJUST_ENf_GET
#define PLL_CAL_CTL6r_VCO_RANGE_ADJUST_ENf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL6r_VCO_RANGE_ADJUST_ENf_SET
#define PLL_CAL_CTL6r_VCO_RANGE_ADJUSTf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL6r_VCO_RANGE_ADJUSTf_GET
#define PLL_CAL_CTL6r_VCO_RANGE_ADJUSTf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL6r_VCO_RANGE_ADJUSTf_SET
#define PLL_CAL_CTL6r_REFCLK_DIVCNT_SELf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL6r_REFCLK_DIVCNT_SELf_GET
#define PLL_CAL_CTL6r_REFCLK_DIVCNT_SELf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL6r_REFCLK_DIVCNT_SELf_SET
#define READ_PLL_CAL_CTL6r BCMI_TSCF_GEN3_XGXS_READ_PLL_CAL_CTL6r
#define WRITE_PLL_CAL_CTL6r BCMI_TSCF_GEN3_XGXS_WRITE_PLL_CAL_CTL6r
#define MODIFY_PLL_CAL_CTL6r BCMI_TSCF_GEN3_XGXS_MODIFY_PLL_CAL_CTL6r
#define READLN_PLL_CAL_CTL6r BCMI_TSCF_GEN3_XGXS_READLN_PLL_CAL_CTL6r
#define WRITELN_PLL_CAL_CTL6r BCMI_TSCF_GEN3_XGXS_WRITELN_PLL_CAL_CTL6r
#define WRITEALL_PLL_CAL_CTL6r BCMI_TSCF_GEN3_XGXS_WRITEALL_PLL_CAL_CTL6r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL6r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PLL_CAL_CTL7
 * BLOCKS:   PLL_CAL_COM
 * REGADDR:  0xd147
 * DEVAD:    1
 * DESC:     PLL CAL Configuration Registers 7.
 * RESETVAL: 0x7 (7)
 * ACCESS:   R/W
 * FIELDS:
 *     PLL_MODE         PLL Multiplier.00000  = 64;00001  = 66;00010  = 80;00011  = 128;00100  = 132;00101  = 140;00110  = 160;00111  = 165;01000  = 168;01001  = 170;01010  = 175;01011  = 180;01100  = 184;01101  = 200;01110  = 224;01111  = 264;10000  = 96;10001  = 120;10010  = 144;10011  = 198'
 *     RESCAL_FRC_VAL   rescal force value.
 *     RESCAL_FRC       rescal force to use rescal force value.
 */
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL7r (0x0001d147 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL7r_SIZE 4

/*
 * This structure should be used to declare and program PLL_CAL_CTL7.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL7r_s {
	uint32_t v[1];
	uint32_t pll_cal_ctl7[1];
	uint32_t _pll_cal_ctl7;
} BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL7r_t;

#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL7r_CLR(r) (r).pll_cal_ctl7[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL7r_SET(r,d) (r).pll_cal_ctl7[0] = d
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL7r_GET(r) (r).pll_cal_ctl7[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL7r_RESCAL_FRCf_GET(r) ((((r).pll_cal_ctl7[0]) >> 10) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL7r_RESCAL_FRCf_SET(r,f) (r).pll_cal_ctl7[0]=(((r).pll_cal_ctl7[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL7r_RESCAL_FRC_VALf_GET(r) ((((r).pll_cal_ctl7[0]) >> 6) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL7r_RESCAL_FRC_VALf_SET(r,f) (r).pll_cal_ctl7[0]=(((r).pll_cal_ctl7[0] & ~((uint32_t)0xf << 6)) | ((((uint32_t)f) & 0xf) << 6)) | (15 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL7r_PLL_MODEf_GET(r) (((r).pll_cal_ctl7[0]) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL7r_PLL_MODEf_SET(r,f) (r).pll_cal_ctl7[0]=(((r).pll_cal_ctl7[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access PLL_CAL_CTL7.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PLL_CAL_CTL7r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL7r,(_r._pll_cal_ctl7))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PLL_CAL_CTL7r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL7r,(_r._pll_cal_ctl7)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PLL_CAL_CTL7r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL7r,(_r._pll_cal_ctl7))
#define BCMI_TSCF_GEN3_XGXS_READLN_PLL_CAL_CTL7r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL7r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_cal_ctl7))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_PLL_CAL_CTL7r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL7r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_cal_ctl7))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_PLL_CAL_CTL7r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL7r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._pll_cal_ctl7))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PLL_CAL_CTL7r BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL7r
#define PLL_CAL_CTL7r_SIZE BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL7r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL7r_t PLL_CAL_CTL7r_t;
#define PLL_CAL_CTL7r_CLR BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL7r_CLR
#define PLL_CAL_CTL7r_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL7r_SET
#define PLL_CAL_CTL7r_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL7r_GET
#define PLL_CAL_CTL7r_RESCAL_FRCf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL7r_RESCAL_FRCf_GET
#define PLL_CAL_CTL7r_RESCAL_FRCf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL7r_RESCAL_FRCf_SET
#define PLL_CAL_CTL7r_RESCAL_FRC_VALf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL7r_RESCAL_FRC_VALf_GET
#define PLL_CAL_CTL7r_RESCAL_FRC_VALf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL7r_RESCAL_FRC_VALf_SET
#define PLL_CAL_CTL7r_PLL_MODEf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL7r_PLL_MODEf_GET
#define PLL_CAL_CTL7r_PLL_MODEf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL7r_PLL_MODEf_SET
#define READ_PLL_CAL_CTL7r BCMI_TSCF_GEN3_XGXS_READ_PLL_CAL_CTL7r
#define WRITE_PLL_CAL_CTL7r BCMI_TSCF_GEN3_XGXS_WRITE_PLL_CAL_CTL7r
#define MODIFY_PLL_CAL_CTL7r BCMI_TSCF_GEN3_XGXS_MODIFY_PLL_CAL_CTL7r
#define READLN_PLL_CAL_CTL7r BCMI_TSCF_GEN3_XGXS_READLN_PLL_CAL_CTL7r
#define WRITELN_PLL_CAL_CTL7r BCMI_TSCF_GEN3_XGXS_WRITELN_PLL_CAL_CTL7r
#define WRITEALL_PLL_CAL_CTL7r BCMI_TSCF_GEN3_XGXS_WRITEALL_PLL_CAL_CTL7r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL7r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PLL_CAL_CTL_STS0
 * BLOCKS:   PLL_CAL_COM
 * REGADDR:  0xd148
 * DEVAD:    1
 * DESC:     PLL CAL status registers register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     PLL_LOCK_LH_LL   indicates change on pll_lock status bit. It is clear on read status register
 *     PLL_SEQ_PASS_LH_LL indicates change on pll_seq_pass status bit. It is clear on read status register
 *     PLL_SEQ_DONE_LH_LL indicates change on pll_seq_done status bit. It is clear on read status register
 *     FREQ_PASS_SM_LH_LL indicates change on freq_pass_sm status bit. It is clear on read status register
 *     FREQ_DONE_SM_LH_LL indicates change on freq_done_sm status bit. It is clear on read status register
 *     CAP_PASS_LH_LL   indicates change on cap_pass status bit. It is clear on read status register
 *     CAP_DONE_LH_LL   indicates change on cap_done status bit. It is clear on read status register
 *     PLL_LOCK         status bit indicating PLL is locked
 *     PLL_SEQ_PASS     status bit indicating pll sequencer finised successfully
 *     PLL_SEQ_DONE     status bit indicating pll sequencer is done
 *     FREQ_PASS_SM     status bit indicating frequency lock
 *     FREQ_DONE_SM     status bit indicating freq det is done
 *     CAP_PASS         status indicating cap value was found
 *     CAP_DONE         status indicating cap sequencer is done
 *     LOST_PLL_LOCK_SM status bit indicating pll_lock was lost, clear on read
 */
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r (0x0001d148 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_SIZE 4

/*
 * This structure should be used to declare and program PLL_CAL_CTL_STS0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_s {
	uint32_t v[1];
	uint32_t pll_cal_ctl_sts0[1];
	uint32_t _pll_cal_ctl_sts0;
} BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_t;

#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_CLR(r) (r).pll_cal_ctl_sts0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_SET(r,d) (r).pll_cal_ctl_sts0[0] = d
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_GET(r) (r).pll_cal_ctl_sts0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_LOST_PLL_LOCK_SMf_GET(r) ((((r).pll_cal_ctl_sts0[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_LOST_PLL_LOCK_SMf_SET(r,f) (r).pll_cal_ctl_sts0[0]=(((r).pll_cal_ctl_sts0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_CAP_DONEf_GET(r) ((((r).pll_cal_ctl_sts0[0]) >> 14) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_CAP_DONEf_SET(r,f) (r).pll_cal_ctl_sts0[0]=(((r).pll_cal_ctl_sts0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_CAP_PASSf_GET(r) ((((r).pll_cal_ctl_sts0[0]) >> 13) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_CAP_PASSf_SET(r,f) (r).pll_cal_ctl_sts0[0]=(((r).pll_cal_ctl_sts0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_FREQ_DONE_SMf_GET(r) ((((r).pll_cal_ctl_sts0[0]) >> 12) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_FREQ_DONE_SMf_SET(r,f) (r).pll_cal_ctl_sts0[0]=(((r).pll_cal_ctl_sts0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_FREQ_PASS_SMf_GET(r) ((((r).pll_cal_ctl_sts0[0]) >> 11) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_FREQ_PASS_SMf_SET(r,f) (r).pll_cal_ctl_sts0[0]=(((r).pll_cal_ctl_sts0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_PLL_SEQ_DONEf_GET(r) ((((r).pll_cal_ctl_sts0[0]) >> 10) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_PLL_SEQ_DONEf_SET(r,f) (r).pll_cal_ctl_sts0[0]=(((r).pll_cal_ctl_sts0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_PLL_SEQ_PASSf_GET(r) ((((r).pll_cal_ctl_sts0[0]) >> 9) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_PLL_SEQ_PASSf_SET(r,f) (r).pll_cal_ctl_sts0[0]=(((r).pll_cal_ctl_sts0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_PLL_LOCKf_GET(r) ((((r).pll_cal_ctl_sts0[0]) >> 8) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_PLL_LOCKf_SET(r,f) (r).pll_cal_ctl_sts0[0]=(((r).pll_cal_ctl_sts0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_CAP_DONE_LH_LLf_GET(r) ((((r).pll_cal_ctl_sts0[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_CAP_DONE_LH_LLf_SET(r,f) (r).pll_cal_ctl_sts0[0]=(((r).pll_cal_ctl_sts0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_CAP_PASS_LH_LLf_GET(r) ((((r).pll_cal_ctl_sts0[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_CAP_PASS_LH_LLf_SET(r,f) (r).pll_cal_ctl_sts0[0]=(((r).pll_cal_ctl_sts0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_FREQ_DONE_SM_LH_LLf_GET(r) ((((r).pll_cal_ctl_sts0[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_FREQ_DONE_SM_LH_LLf_SET(r,f) (r).pll_cal_ctl_sts0[0]=(((r).pll_cal_ctl_sts0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_FREQ_PASS_SM_LH_LLf_GET(r) ((((r).pll_cal_ctl_sts0[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_FREQ_PASS_SM_LH_LLf_SET(r,f) (r).pll_cal_ctl_sts0[0]=(((r).pll_cal_ctl_sts0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_PLL_SEQ_DONE_LH_LLf_GET(r) ((((r).pll_cal_ctl_sts0[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_PLL_SEQ_DONE_LH_LLf_SET(r,f) (r).pll_cal_ctl_sts0[0]=(((r).pll_cal_ctl_sts0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_PLL_SEQ_PASS_LH_LLf_GET(r) ((((r).pll_cal_ctl_sts0[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_PLL_SEQ_PASS_LH_LLf_SET(r,f) (r).pll_cal_ctl_sts0[0]=(((r).pll_cal_ctl_sts0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_PLL_LOCK_LH_LLf_GET(r) (((r).pll_cal_ctl_sts0[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_PLL_LOCK_LH_LLf_SET(r,f) (r).pll_cal_ctl_sts0[0]=(((r).pll_cal_ctl_sts0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access PLL_CAL_CTL_STS0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PLL_CAL_CTL_STS0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r,(_r._pll_cal_ctl_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PLL_CAL_CTL_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r,(_r._pll_cal_ctl_sts0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PLL_CAL_CTL_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r,(_r._pll_cal_ctl_sts0))
#define BCMI_TSCF_GEN3_XGXS_READLN_PLL_CAL_CTL_STS0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_cal_ctl_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_PLL_CAL_CTL_STS0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_cal_ctl_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_PLL_CAL_CTL_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._pll_cal_ctl_sts0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PLL_CAL_CTL_STS0r BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r
#define PLL_CAL_CTL_STS0r_SIZE BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_t PLL_CAL_CTL_STS0r_t;
#define PLL_CAL_CTL_STS0r_CLR BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_CLR
#define PLL_CAL_CTL_STS0r_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_SET
#define PLL_CAL_CTL_STS0r_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_GET
#define PLL_CAL_CTL_STS0r_LOST_PLL_LOCK_SMf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_LOST_PLL_LOCK_SMf_GET
#define PLL_CAL_CTL_STS0r_LOST_PLL_LOCK_SMf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_LOST_PLL_LOCK_SMf_SET
#define PLL_CAL_CTL_STS0r_CAP_DONEf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_CAP_DONEf_GET
#define PLL_CAL_CTL_STS0r_CAP_DONEf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_CAP_DONEf_SET
#define PLL_CAL_CTL_STS0r_CAP_PASSf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_CAP_PASSf_GET
#define PLL_CAL_CTL_STS0r_CAP_PASSf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_CAP_PASSf_SET
#define PLL_CAL_CTL_STS0r_FREQ_DONE_SMf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_FREQ_DONE_SMf_GET
#define PLL_CAL_CTL_STS0r_FREQ_DONE_SMf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_FREQ_DONE_SMf_SET
#define PLL_CAL_CTL_STS0r_FREQ_PASS_SMf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_FREQ_PASS_SMf_GET
#define PLL_CAL_CTL_STS0r_FREQ_PASS_SMf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_FREQ_PASS_SMf_SET
#define PLL_CAL_CTL_STS0r_PLL_SEQ_DONEf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_PLL_SEQ_DONEf_GET
#define PLL_CAL_CTL_STS0r_PLL_SEQ_DONEf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_PLL_SEQ_DONEf_SET
#define PLL_CAL_CTL_STS0r_PLL_SEQ_PASSf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_PLL_SEQ_PASSf_GET
#define PLL_CAL_CTL_STS0r_PLL_SEQ_PASSf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_PLL_SEQ_PASSf_SET
#define PLL_CAL_CTL_STS0r_PLL_LOCKf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_PLL_LOCKf_GET
#define PLL_CAL_CTL_STS0r_PLL_LOCKf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_PLL_LOCKf_SET
#define PLL_CAL_CTL_STS0r_CAP_DONE_LH_LLf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_CAP_DONE_LH_LLf_GET
#define PLL_CAL_CTL_STS0r_CAP_DONE_LH_LLf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_CAP_DONE_LH_LLf_SET
#define PLL_CAL_CTL_STS0r_CAP_PASS_LH_LLf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_CAP_PASS_LH_LLf_GET
#define PLL_CAL_CTL_STS0r_CAP_PASS_LH_LLf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_CAP_PASS_LH_LLf_SET
#define PLL_CAL_CTL_STS0r_FREQ_DONE_SM_LH_LLf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_FREQ_DONE_SM_LH_LLf_GET
#define PLL_CAL_CTL_STS0r_FREQ_DONE_SM_LH_LLf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_FREQ_DONE_SM_LH_LLf_SET
#define PLL_CAL_CTL_STS0r_FREQ_PASS_SM_LH_LLf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_FREQ_PASS_SM_LH_LLf_GET
#define PLL_CAL_CTL_STS0r_FREQ_PASS_SM_LH_LLf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_FREQ_PASS_SM_LH_LLf_SET
#define PLL_CAL_CTL_STS0r_PLL_SEQ_DONE_LH_LLf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_PLL_SEQ_DONE_LH_LLf_GET
#define PLL_CAL_CTL_STS0r_PLL_SEQ_DONE_LH_LLf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_PLL_SEQ_DONE_LH_LLf_SET
#define PLL_CAL_CTL_STS0r_PLL_SEQ_PASS_LH_LLf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_PLL_SEQ_PASS_LH_LLf_GET
#define PLL_CAL_CTL_STS0r_PLL_SEQ_PASS_LH_LLf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_PLL_SEQ_PASS_LH_LLf_SET
#define PLL_CAL_CTL_STS0r_PLL_LOCK_LH_LLf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_PLL_LOCK_LH_LLf_GET
#define PLL_CAL_CTL_STS0r_PLL_LOCK_LH_LLf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r_PLL_LOCK_LH_LLf_SET
#define READ_PLL_CAL_CTL_STS0r BCMI_TSCF_GEN3_XGXS_READ_PLL_CAL_CTL_STS0r
#define WRITE_PLL_CAL_CTL_STS0r BCMI_TSCF_GEN3_XGXS_WRITE_PLL_CAL_CTL_STS0r
#define MODIFY_PLL_CAL_CTL_STS0r BCMI_TSCF_GEN3_XGXS_MODIFY_PLL_CAL_CTL_STS0r
#define READLN_PLL_CAL_CTL_STS0r BCMI_TSCF_GEN3_XGXS_READLN_PLL_CAL_CTL_STS0r
#define WRITELN_PLL_CAL_CTL_STS0r BCMI_TSCF_GEN3_XGXS_WRITELN_PLL_CAL_CTL_STS0r
#define WRITEALL_PLL_CAL_CTL_STS0r BCMI_TSCF_GEN3_XGXS_WRITEALL_PLL_CAL_CTL_STS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PLL_CAL_CTL_STS1
 * BLOCKS:   PLL_CAL_COM
 * REGADDR:  0xd149
 * DEVAD:    1
 * DESC:     PLL CAL status registers register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CAP_SELECT       status bit indicating the selected cap value (i.e. pll_range[7:0])
 *     RESCAL_IN        rescal input value
 */
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS1r (0x0001d149 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS1r_SIZE 4

/*
 * This structure should be used to declare and program PLL_CAL_CTL_STS1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS1r_s {
	uint32_t v[1];
	uint32_t pll_cal_ctl_sts1[1];
	uint32_t _pll_cal_ctl_sts1;
} BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS1r_t;

#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS1r_CLR(r) (r).pll_cal_ctl_sts1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS1r_SET(r,d) (r).pll_cal_ctl_sts1[0] = d
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS1r_GET(r) (r).pll_cal_ctl_sts1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS1r_RESCAL_INf_GET(r) ((((r).pll_cal_ctl_sts1[0]) >> 8) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS1r_RESCAL_INf_SET(r,f) (r).pll_cal_ctl_sts1[0]=(((r).pll_cal_ctl_sts1[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS1r_CAP_SELECTf_GET(r) (((r).pll_cal_ctl_sts1[0]) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS1r_CAP_SELECTf_SET(r,f) (r).pll_cal_ctl_sts1[0]=(((r).pll_cal_ctl_sts1[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access PLL_CAL_CTL_STS1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PLL_CAL_CTL_STS1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS1r,(_r._pll_cal_ctl_sts1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PLL_CAL_CTL_STS1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS1r,(_r._pll_cal_ctl_sts1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PLL_CAL_CTL_STS1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS1r,(_r._pll_cal_ctl_sts1))
#define BCMI_TSCF_GEN3_XGXS_READLN_PLL_CAL_CTL_STS1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_cal_ctl_sts1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_PLL_CAL_CTL_STS1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_cal_ctl_sts1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_PLL_CAL_CTL_STS1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._pll_cal_ctl_sts1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PLL_CAL_CTL_STS1r BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS1r
#define PLL_CAL_CTL_STS1r_SIZE BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS1r_t PLL_CAL_CTL_STS1r_t;
#define PLL_CAL_CTL_STS1r_CLR BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS1r_CLR
#define PLL_CAL_CTL_STS1r_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS1r_SET
#define PLL_CAL_CTL_STS1r_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS1r_GET
#define PLL_CAL_CTL_STS1r_RESCAL_INf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS1r_RESCAL_INf_GET
#define PLL_CAL_CTL_STS1r_RESCAL_INf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS1r_RESCAL_INf_SET
#define PLL_CAL_CTL_STS1r_CAP_SELECTf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS1r_CAP_SELECTf_GET
#define PLL_CAL_CTL_STS1r_CAP_SELECTf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS1r_CAP_SELECTf_SET
#define READ_PLL_CAL_CTL_STS1r BCMI_TSCF_GEN3_XGXS_READ_PLL_CAL_CTL_STS1r
#define WRITE_PLL_CAL_CTL_STS1r BCMI_TSCF_GEN3_XGXS_WRITE_PLL_CAL_CTL_STS1r
#define MODIFY_PLL_CAL_CTL_STS1r BCMI_TSCF_GEN3_XGXS_MODIFY_PLL_CAL_CTL_STS1r
#define READLN_PLL_CAL_CTL_STS1r BCMI_TSCF_GEN3_XGXS_READLN_PLL_CAL_CTL_STS1r
#define WRITELN_PLL_CAL_CTL_STS1r BCMI_TSCF_GEN3_XGXS_WRITELN_PLL_CAL_CTL_STS1r
#define WRITEALL_PLL_CAL_CTL_STS1r BCMI_TSCF_GEN3_XGXS_WRITEALL_PLL_CAL_CTL_STS1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  PLL_CAL_CTL_STS_DBG
 * BLOCKS:   PLL_CAL_COM
 * REGADDR:  0xd14a
 * DEVAD:    1
 * DESC:     PLL CAL debug status registers register.
 * RESETVAL: 0x1 (1)
 * ACCESS:   R/O
 * FIELDS:
 *     DBG_SLOWDN       Indicates AFE pll_low/slowdn output signal status.
 *     DBG_SLOWDN_CHANGE Indicates change on AFE pll_low/slowdn output signal. It is clear on read status register
 *     DBG_FDBCK        Indicates change on AFE fdbck output signal. clear on read status register.Will be used to see if fdbck clock from AFE is toggling and alive
 *     DBG_CAP_STATE_ONE_HOT Indicates one hot encoded Cap Sequence State Machines states. clear on read register.Following are the one-hot state assignments.State    dbg_cap_state_one_hot[x] where x is :==================================================Start          0WaitAmpL       1WaitSpeedL     2IncCapL        3Finish         4
 *     DBG_PLL_STATE_ONE_HOT Indicates one hot encoded PLL Sequence State Machines states. clear on read register.Following are the one-hot state assignments.State   dbg_pll_state_one_hot[x] where x is :==============================================Start          0WaitVco        1VcoAdjust      2WaitFreq       3FreqDet        4Fail           5FreqMon        6Finish         7
 */
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS_DBGr (0x0001d14a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS_DBGr_SIZE 4

/*
 * This structure should be used to declare and program PLL_CAL_CTL_STS_DBG.
 */
typedef union BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS_DBGr_s {
	uint32_t v[1];
	uint32_t pll_cal_ctl_sts_dbg[1];
	uint32_t _pll_cal_ctl_sts_dbg;
} BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS_DBGr_t;

#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS_DBGr_CLR(r) (r).pll_cal_ctl_sts_dbg[0] = 0
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS_DBGr_SET(r,d) (r).pll_cal_ctl_sts_dbg[0] = d
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS_DBGr_GET(r) (r).pll_cal_ctl_sts_dbg[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS_DBGr_DBG_PLL_STATE_ONE_HOTf_GET(r) ((((r).pll_cal_ctl_sts_dbg[0]) >> 8) & 0xff)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS_DBGr_DBG_PLL_STATE_ONE_HOTf_SET(r,f) (r).pll_cal_ctl_sts_dbg[0]=(((r).pll_cal_ctl_sts_dbg[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS_DBGr_DBG_CAP_STATE_ONE_HOTf_GET(r) ((((r).pll_cal_ctl_sts_dbg[0]) >> 3) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS_DBGr_DBG_CAP_STATE_ONE_HOTf_SET(r,f) (r).pll_cal_ctl_sts_dbg[0]=(((r).pll_cal_ctl_sts_dbg[0] & ~((uint32_t)0x1f << 3)) | ((((uint32_t)f) & 0x1f) << 3)) | (31 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS_DBGr_DBG_FDBCKf_GET(r) ((((r).pll_cal_ctl_sts_dbg[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS_DBGr_DBG_FDBCKf_SET(r,f) (r).pll_cal_ctl_sts_dbg[0]=(((r).pll_cal_ctl_sts_dbg[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS_DBGr_DBG_SLOWDN_CHANGEf_GET(r) ((((r).pll_cal_ctl_sts_dbg[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS_DBGr_DBG_SLOWDN_CHANGEf_SET(r,f) (r).pll_cal_ctl_sts_dbg[0]=(((r).pll_cal_ctl_sts_dbg[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS_DBGr_DBG_SLOWDNf_GET(r) (((r).pll_cal_ctl_sts_dbg[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS_DBGr_DBG_SLOWDNf_SET(r,f) (r).pll_cal_ctl_sts_dbg[0]=(((r).pll_cal_ctl_sts_dbg[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access PLL_CAL_CTL_STS_DBG.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_PLL_CAL_CTL_STS_DBGr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS_DBGr,(_r._pll_cal_ctl_sts_dbg))
#define BCMI_TSCF_GEN3_XGXS_WRITE_PLL_CAL_CTL_STS_DBGr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS_DBGr,(_r._pll_cal_ctl_sts_dbg)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_PLL_CAL_CTL_STS_DBGr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS_DBGr,(_r._pll_cal_ctl_sts_dbg))
#define BCMI_TSCF_GEN3_XGXS_READLN_PLL_CAL_CTL_STS_DBGr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS_DBGr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_cal_ctl_sts_dbg))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_PLL_CAL_CTL_STS_DBGr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS_DBGr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_cal_ctl_sts_dbg))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_PLL_CAL_CTL_STS_DBGr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS_DBGr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._pll_cal_ctl_sts_dbg))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PLL_CAL_CTL_STS_DBGr BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS_DBGr
#define PLL_CAL_CTL_STS_DBGr_SIZE BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS_DBGr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS_DBGr_t PLL_CAL_CTL_STS_DBGr_t;
#define PLL_CAL_CTL_STS_DBGr_CLR BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS_DBGr_CLR
#define PLL_CAL_CTL_STS_DBGr_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS_DBGr_SET
#define PLL_CAL_CTL_STS_DBGr_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS_DBGr_GET
#define PLL_CAL_CTL_STS_DBGr_DBG_PLL_STATE_ONE_HOTf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS_DBGr_DBG_PLL_STATE_ONE_HOTf_GET
#define PLL_CAL_CTL_STS_DBGr_DBG_PLL_STATE_ONE_HOTf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS_DBGr_DBG_PLL_STATE_ONE_HOTf_SET
#define PLL_CAL_CTL_STS_DBGr_DBG_CAP_STATE_ONE_HOTf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS_DBGr_DBG_CAP_STATE_ONE_HOTf_GET
#define PLL_CAL_CTL_STS_DBGr_DBG_CAP_STATE_ONE_HOTf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS_DBGr_DBG_CAP_STATE_ONE_HOTf_SET
#define PLL_CAL_CTL_STS_DBGr_DBG_FDBCKf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS_DBGr_DBG_FDBCKf_GET
#define PLL_CAL_CTL_STS_DBGr_DBG_FDBCKf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS_DBGr_DBG_FDBCKf_SET
#define PLL_CAL_CTL_STS_DBGr_DBG_SLOWDN_CHANGEf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS_DBGr_DBG_SLOWDN_CHANGEf_GET
#define PLL_CAL_CTL_STS_DBGr_DBG_SLOWDN_CHANGEf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS_DBGr_DBG_SLOWDN_CHANGEf_SET
#define PLL_CAL_CTL_STS_DBGr_DBG_SLOWDNf_GET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS_DBGr_DBG_SLOWDNf_GET
#define PLL_CAL_CTL_STS_DBGr_DBG_SLOWDNf_SET BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS_DBGr_DBG_SLOWDNf_SET
#define READ_PLL_CAL_CTL_STS_DBGr BCMI_TSCF_GEN3_XGXS_READ_PLL_CAL_CTL_STS_DBGr
#define WRITE_PLL_CAL_CTL_STS_DBGr BCMI_TSCF_GEN3_XGXS_WRITE_PLL_CAL_CTL_STS_DBGr
#define MODIFY_PLL_CAL_CTL_STS_DBGr BCMI_TSCF_GEN3_XGXS_MODIFY_PLL_CAL_CTL_STS_DBGr
#define READLN_PLL_CAL_CTL_STS_DBGr BCMI_TSCF_GEN3_XGXS_READLN_PLL_CAL_CTL_STS_DBGr
#define WRITELN_PLL_CAL_CTL_STS_DBGr BCMI_TSCF_GEN3_XGXS_WRITELN_PLL_CAL_CTL_STS_DBGr
#define WRITEALL_PLL_CAL_CTL_STS_DBGr BCMI_TSCF_GEN3_XGXS_WRITEALL_PLL_CAL_CTL_STS_DBGr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_PLL_CAL_CTL_STS_DBGr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TXCOM_CTL0
 * BLOCKS:   TXCOM
 * REGADDR:  0xd150
 * DEVAD:    1
 * DESC:     TX common control 0 register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TXCOM_POST_TAP_ALERT_VAL txfir post tap value during EEE alert mode
 *     TXCOM_PRE_TAP_ALERT_VAL txfir pre tap value during EEE alert mode
 */
#define BCMI_TSCF_GEN3_XGXS_TXCOM_CTL0r (0x0001d150 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TXCOM_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program TXCOM_CTL0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TXCOM_CTL0r_s {
	uint32_t v[1];
	uint32_t txcom_ctl0[1];
	uint32_t _txcom_ctl0;
} BCMI_TSCF_GEN3_XGXS_TXCOM_CTL0r_t;

#define BCMI_TSCF_GEN3_XGXS_TXCOM_CTL0r_CLR(r) (r).txcom_ctl0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TXCOM_CTL0r_SET(r,d) (r).txcom_ctl0[0] = d
#define BCMI_TSCF_GEN3_XGXS_TXCOM_CTL0r_GET(r) (r).txcom_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TXCOM_CTL0r_TXCOM_PRE_TAP_ALERT_VALf_GET(r) ((((r).txcom_ctl0[0]) >> 8) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_TXCOM_CTL0r_TXCOM_PRE_TAP_ALERT_VALf_SET(r,f) (r).txcom_ctl0[0]=(((r).txcom_ctl0[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8)) | (31 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_TXCOM_CTL0r_TXCOM_POST_TAP_ALERT_VALf_GET(r) (((r).txcom_ctl0[0]) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_TXCOM_CTL0r_TXCOM_POST_TAP_ALERT_VALf_SET(r,f) (r).txcom_ctl0[0]=(((r).txcom_ctl0[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access TXCOM_CTL0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TXCOM_CTL0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_CTL0r,(_r._txcom_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TXCOM_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_CTL0r,(_r._txcom_ctl0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TXCOM_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_CTL0r,(_r._txcom_ctl0))
#define BCMI_TSCF_GEN3_XGXS_READLN_TXCOM_CTL0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TXCOM_CTL0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TXCOM_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txcom_ctl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXCOM_CTL0r BCMI_TSCF_GEN3_XGXS_TXCOM_CTL0r
#define TXCOM_CTL0r_SIZE BCMI_TSCF_GEN3_XGXS_TXCOM_CTL0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TXCOM_CTL0r_t TXCOM_CTL0r_t;
#define TXCOM_CTL0r_CLR BCMI_TSCF_GEN3_XGXS_TXCOM_CTL0r_CLR
#define TXCOM_CTL0r_SET BCMI_TSCF_GEN3_XGXS_TXCOM_CTL0r_SET
#define TXCOM_CTL0r_GET BCMI_TSCF_GEN3_XGXS_TXCOM_CTL0r_GET
#define TXCOM_CTL0r_TXCOM_PRE_TAP_ALERT_VALf_GET BCMI_TSCF_GEN3_XGXS_TXCOM_CTL0r_TXCOM_PRE_TAP_ALERT_VALf_GET
#define TXCOM_CTL0r_TXCOM_PRE_TAP_ALERT_VALf_SET BCMI_TSCF_GEN3_XGXS_TXCOM_CTL0r_TXCOM_PRE_TAP_ALERT_VALf_SET
#define TXCOM_CTL0r_TXCOM_POST_TAP_ALERT_VALf_GET BCMI_TSCF_GEN3_XGXS_TXCOM_CTL0r_TXCOM_POST_TAP_ALERT_VALf_GET
#define TXCOM_CTL0r_TXCOM_POST_TAP_ALERT_VALf_SET BCMI_TSCF_GEN3_XGXS_TXCOM_CTL0r_TXCOM_POST_TAP_ALERT_VALf_SET
#define READ_TXCOM_CTL0r BCMI_TSCF_GEN3_XGXS_READ_TXCOM_CTL0r
#define WRITE_TXCOM_CTL0r BCMI_TSCF_GEN3_XGXS_WRITE_TXCOM_CTL0r
#define MODIFY_TXCOM_CTL0r BCMI_TSCF_GEN3_XGXS_MODIFY_TXCOM_CTL0r
#define READLN_TXCOM_CTL0r BCMI_TSCF_GEN3_XGXS_READLN_TXCOM_CTL0r
#define WRITELN_TXCOM_CTL0r BCMI_TSCF_GEN3_XGXS_WRITELN_TXCOM_CTL0r
#define WRITEALL_TXCOM_CTL0r BCMI_TSCF_GEN3_XGXS_WRITEALL_TXCOM_CTL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TXCOM_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TXCOM_CTL1
 * BLOCKS:   TXCOM
 * REGADDR:  0xd151
 * DEVAD:    1
 * DESC:     TX common control 1 register
 * RESETVAL: 0x70 (112)
 * ACCESS:   R/W
 * FIELDS:
 *     TXCOM_MAIN_TAP_ALERT_VAL txfir main tap value during EEE alert mode
 */
#define BCMI_TSCF_GEN3_XGXS_TXCOM_CTL1r (0x0001d151 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TXCOM_CTL1r_SIZE 4

/*
 * This structure should be used to declare and program TXCOM_CTL1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TXCOM_CTL1r_s {
	uint32_t v[1];
	uint32_t txcom_ctl1[1];
	uint32_t _txcom_ctl1;
} BCMI_TSCF_GEN3_XGXS_TXCOM_CTL1r_t;

#define BCMI_TSCF_GEN3_XGXS_TXCOM_CTL1r_CLR(r) (r).txcom_ctl1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TXCOM_CTL1r_SET(r,d) (r).txcom_ctl1[0] = d
#define BCMI_TSCF_GEN3_XGXS_TXCOM_CTL1r_GET(r) (r).txcom_ctl1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TXCOM_CTL1r_TXCOM_MAIN_TAP_ALERT_VALf_GET(r) (((r).txcom_ctl1[0]) & 0x7f)
#define BCMI_TSCF_GEN3_XGXS_TXCOM_CTL1r_TXCOM_MAIN_TAP_ALERT_VALf_SET(r,f) (r).txcom_ctl1[0]=(((r).txcom_ctl1[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f)) | (0x7f << 16)

/*
 * These macros can be used to access TXCOM_CTL1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TXCOM_CTL1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_CTL1r,(_r._txcom_ctl1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TXCOM_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_CTL1r,(_r._txcom_ctl1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TXCOM_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_CTL1r,(_r._txcom_ctl1))
#define BCMI_TSCF_GEN3_XGXS_READLN_TXCOM_CTL1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_ctl1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TXCOM_CTL1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_ctl1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TXCOM_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txcom_ctl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXCOM_CTL1r BCMI_TSCF_GEN3_XGXS_TXCOM_CTL1r
#define TXCOM_CTL1r_SIZE BCMI_TSCF_GEN3_XGXS_TXCOM_CTL1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TXCOM_CTL1r_t TXCOM_CTL1r_t;
#define TXCOM_CTL1r_CLR BCMI_TSCF_GEN3_XGXS_TXCOM_CTL1r_CLR
#define TXCOM_CTL1r_SET BCMI_TSCF_GEN3_XGXS_TXCOM_CTL1r_SET
#define TXCOM_CTL1r_GET BCMI_TSCF_GEN3_XGXS_TXCOM_CTL1r_GET
#define TXCOM_CTL1r_TXCOM_MAIN_TAP_ALERT_VALf_GET BCMI_TSCF_GEN3_XGXS_TXCOM_CTL1r_TXCOM_MAIN_TAP_ALERT_VALf_GET
#define TXCOM_CTL1r_TXCOM_MAIN_TAP_ALERT_VALf_SET BCMI_TSCF_GEN3_XGXS_TXCOM_CTL1r_TXCOM_MAIN_TAP_ALERT_VALf_SET
#define READ_TXCOM_CTL1r BCMI_TSCF_GEN3_XGXS_READ_TXCOM_CTL1r
#define WRITE_TXCOM_CTL1r BCMI_TSCF_GEN3_XGXS_WRITE_TXCOM_CTL1r
#define MODIFY_TXCOM_CTL1r BCMI_TSCF_GEN3_XGXS_MODIFY_TXCOM_CTL1r
#define READLN_TXCOM_CTL1r BCMI_TSCF_GEN3_XGXS_READLN_TXCOM_CTL1r
#define WRITELN_TXCOM_CTL1r BCMI_TSCF_GEN3_XGXS_WRITELN_TXCOM_CTL1r
#define WRITEALL_TXCOM_CTL1r BCMI_TSCF_GEN3_XGXS_WRITEALL_TXCOM_CTL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TXCOM_CTL1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TXCOM_CTL2
 * BLOCKS:   TXCOM
 * REGADDR:  0xd152
 * DEVAD:    1
 * DESC:     TX common control 2 register
 * RESETVAL: 0x1f4 (500)
 * ACCESS:   R/W
 * FIELDS:
 *     TXCOM_CL93N72_MAX_WAIT_TIMER_PERIOD Maximum Training Time in msPeriod/range is 500 ms
 */
#define BCMI_TSCF_GEN3_XGXS_TXCOM_CTL2r (0x0001d152 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TXCOM_CTL2r_SIZE 4

/*
 * This structure should be used to declare and program TXCOM_CTL2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TXCOM_CTL2r_s {
	uint32_t v[1];
	uint32_t txcom_ctl2[1];
	uint32_t _txcom_ctl2;
} BCMI_TSCF_GEN3_XGXS_TXCOM_CTL2r_t;

#define BCMI_TSCF_GEN3_XGXS_TXCOM_CTL2r_CLR(r) (r).txcom_ctl2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TXCOM_CTL2r_SET(r,d) (r).txcom_ctl2[0] = d
#define BCMI_TSCF_GEN3_XGXS_TXCOM_CTL2r_GET(r) (r).txcom_ctl2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TXCOM_CTL2r_TXCOM_CL93N72_MAX_WAIT_TIMER_PERIODf_GET(r) (((r).txcom_ctl2[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_TXCOM_CTL2r_TXCOM_CL93N72_MAX_WAIT_TIMER_PERIODf_SET(r,f) (r).txcom_ctl2[0]=(((r).txcom_ctl2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access TXCOM_CTL2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TXCOM_CTL2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_CTL2r,(_r._txcom_ctl2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TXCOM_CTL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_CTL2r,(_r._txcom_ctl2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TXCOM_CTL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_CTL2r,(_r._txcom_ctl2))
#define BCMI_TSCF_GEN3_XGXS_READLN_TXCOM_CTL2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_ctl2))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TXCOM_CTL2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_ctl2))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TXCOM_CTL2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txcom_ctl2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXCOM_CTL2r BCMI_TSCF_GEN3_XGXS_TXCOM_CTL2r
#define TXCOM_CTL2r_SIZE BCMI_TSCF_GEN3_XGXS_TXCOM_CTL2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TXCOM_CTL2r_t TXCOM_CTL2r_t;
#define TXCOM_CTL2r_CLR BCMI_TSCF_GEN3_XGXS_TXCOM_CTL2r_CLR
#define TXCOM_CTL2r_SET BCMI_TSCF_GEN3_XGXS_TXCOM_CTL2r_SET
#define TXCOM_CTL2r_GET BCMI_TSCF_GEN3_XGXS_TXCOM_CTL2r_GET
#define TXCOM_CTL2r_TXCOM_CL93N72_MAX_WAIT_TIMER_PERIODf_GET BCMI_TSCF_GEN3_XGXS_TXCOM_CTL2r_TXCOM_CL93N72_MAX_WAIT_TIMER_PERIODf_GET
#define TXCOM_CTL2r_TXCOM_CL93N72_MAX_WAIT_TIMER_PERIODf_SET BCMI_TSCF_GEN3_XGXS_TXCOM_CTL2r_TXCOM_CL93N72_MAX_WAIT_TIMER_PERIODf_SET
#define READ_TXCOM_CTL2r BCMI_TSCF_GEN3_XGXS_READ_TXCOM_CTL2r
#define WRITE_TXCOM_CTL2r BCMI_TSCF_GEN3_XGXS_WRITE_TXCOM_CTL2r
#define MODIFY_TXCOM_CTL2r BCMI_TSCF_GEN3_XGXS_MODIFY_TXCOM_CTL2r
#define READLN_TXCOM_CTL2r BCMI_TSCF_GEN3_XGXS_READLN_TXCOM_CTL2r
#define WRITELN_TXCOM_CTL2r BCMI_TSCF_GEN3_XGXS_WRITELN_TXCOM_CTL2r
#define WRITEALL_TXCOM_CTL2r BCMI_TSCF_GEN3_XGXS_WRITEALL_TXCOM_CTL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TXCOM_CTL2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TXCOM_CTL3
 * BLOCKS:   TXCOM
 * REGADDR:  0xd153
 * DEVAD:    1
 * DESC:     TX common control 3 register
 * RESETVAL: 0xc8 (200)
 * ACCESS:   R/W
 * FIELDS:
 *     TXCOM_CL93N72_WAIT_CNTR_LIMIT Period/range is 100-300 framesPeriod to keep transiming frames after the local device has completed trainingThe units are training pages.
 */
#define BCMI_TSCF_GEN3_XGXS_TXCOM_CTL3r (0x0001d153 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TXCOM_CTL3r_SIZE 4

/*
 * This structure should be used to declare and program TXCOM_CTL3.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TXCOM_CTL3r_s {
	uint32_t v[1];
	uint32_t txcom_ctl3[1];
	uint32_t _txcom_ctl3;
} BCMI_TSCF_GEN3_XGXS_TXCOM_CTL3r_t;

#define BCMI_TSCF_GEN3_XGXS_TXCOM_CTL3r_CLR(r) (r).txcom_ctl3[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TXCOM_CTL3r_SET(r,d) (r).txcom_ctl3[0] = d
#define BCMI_TSCF_GEN3_XGXS_TXCOM_CTL3r_GET(r) (r).txcom_ctl3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TXCOM_CTL3r_TXCOM_CL93N72_WAIT_CNTR_LIMITf_GET(r) (((r).txcom_ctl3[0]) & 0x3ff)
#define BCMI_TSCF_GEN3_XGXS_TXCOM_CTL3r_TXCOM_CL93N72_WAIT_CNTR_LIMITf_SET(r,f) (r).txcom_ctl3[0]=(((r).txcom_ctl3[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff)) | (0x3ff << 16)

/*
 * These macros can be used to access TXCOM_CTL3.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TXCOM_CTL3r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_CTL3r,(_r._txcom_ctl3))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TXCOM_CTL3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_CTL3r,(_r._txcom_ctl3)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TXCOM_CTL3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_CTL3r,(_r._txcom_ctl3))
#define BCMI_TSCF_GEN3_XGXS_READLN_TXCOM_CTL3r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_CTL3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_ctl3))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TXCOM_CTL3r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_CTL3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_ctl3))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TXCOM_CTL3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_CTL3r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txcom_ctl3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXCOM_CTL3r BCMI_TSCF_GEN3_XGXS_TXCOM_CTL3r
#define TXCOM_CTL3r_SIZE BCMI_TSCF_GEN3_XGXS_TXCOM_CTL3r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TXCOM_CTL3r_t TXCOM_CTL3r_t;
#define TXCOM_CTL3r_CLR BCMI_TSCF_GEN3_XGXS_TXCOM_CTL3r_CLR
#define TXCOM_CTL3r_SET BCMI_TSCF_GEN3_XGXS_TXCOM_CTL3r_SET
#define TXCOM_CTL3r_GET BCMI_TSCF_GEN3_XGXS_TXCOM_CTL3r_GET
#define TXCOM_CTL3r_TXCOM_CL93N72_WAIT_CNTR_LIMITf_GET BCMI_TSCF_GEN3_XGXS_TXCOM_CTL3r_TXCOM_CL93N72_WAIT_CNTR_LIMITf_GET
#define TXCOM_CTL3r_TXCOM_CL93N72_WAIT_CNTR_LIMITf_SET BCMI_TSCF_GEN3_XGXS_TXCOM_CTL3r_TXCOM_CL93N72_WAIT_CNTR_LIMITf_SET
#define READ_TXCOM_CTL3r BCMI_TSCF_GEN3_XGXS_READ_TXCOM_CTL3r
#define WRITE_TXCOM_CTL3r BCMI_TSCF_GEN3_XGXS_WRITE_TXCOM_CTL3r
#define MODIFY_TXCOM_CTL3r BCMI_TSCF_GEN3_XGXS_MODIFY_TXCOM_CTL3r
#define READLN_TXCOM_CTL3r BCMI_TSCF_GEN3_XGXS_READLN_TXCOM_CTL3r
#define WRITELN_TXCOM_CTL3r BCMI_TSCF_GEN3_XGXS_WRITELN_TXCOM_CTL3r
#define WRITEALL_TXCOM_CTL3r BCMI_TSCF_GEN3_XGXS_WRITEALL_TXCOM_CTL3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TXCOM_CTL3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TXCOM_CTL4
 * BLOCKS:   TXCOM
 * REGADDR:  0xd154
 * DEVAD:    1
 * DESC:     TX common control 4 register
 * RESETVAL: 0x5dc (1500)
 * ACCESS:   R/W
 * FIELDS:
 *     TXCOM_CL93N72_MAX_WAIT_TIMER_PERIOD_2NDSET Maximum Training Time in msPeriod/range is 500 ms for EternetPeriod/range is 1.5s for Fibre ChannelSecond copy to allow for different training times for 10G,25G and Fibre channel linksThe defaults are set to for Fibre channel
 */
#define BCMI_TSCF_GEN3_XGXS_TXCOM_CTL4r (0x0001d154 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TXCOM_CTL4r_SIZE 4

/*
 * This structure should be used to declare and program TXCOM_CTL4.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TXCOM_CTL4r_s {
	uint32_t v[1];
	uint32_t txcom_ctl4[1];
	uint32_t _txcom_ctl4;
} BCMI_TSCF_GEN3_XGXS_TXCOM_CTL4r_t;

#define BCMI_TSCF_GEN3_XGXS_TXCOM_CTL4r_CLR(r) (r).txcom_ctl4[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TXCOM_CTL4r_SET(r,d) (r).txcom_ctl4[0] = d
#define BCMI_TSCF_GEN3_XGXS_TXCOM_CTL4r_GET(r) (r).txcom_ctl4[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TXCOM_CTL4r_TXCOM_CL93N72_MAX_WAIT_TIMER_PERIOD_2NDSETf_GET(r) (((r).txcom_ctl4[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_TXCOM_CTL4r_TXCOM_CL93N72_MAX_WAIT_TIMER_PERIOD_2NDSETf_SET(r,f) (r).txcom_ctl4[0]=(((r).txcom_ctl4[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access TXCOM_CTL4.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TXCOM_CTL4r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_CTL4r,(_r._txcom_ctl4))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TXCOM_CTL4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_CTL4r,(_r._txcom_ctl4)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TXCOM_CTL4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_CTL4r,(_r._txcom_ctl4))
#define BCMI_TSCF_GEN3_XGXS_READLN_TXCOM_CTL4r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_CTL4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_ctl4))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TXCOM_CTL4r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_CTL4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_ctl4))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TXCOM_CTL4r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_CTL4r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txcom_ctl4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXCOM_CTL4r BCMI_TSCF_GEN3_XGXS_TXCOM_CTL4r
#define TXCOM_CTL4r_SIZE BCMI_TSCF_GEN3_XGXS_TXCOM_CTL4r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TXCOM_CTL4r_t TXCOM_CTL4r_t;
#define TXCOM_CTL4r_CLR BCMI_TSCF_GEN3_XGXS_TXCOM_CTL4r_CLR
#define TXCOM_CTL4r_SET BCMI_TSCF_GEN3_XGXS_TXCOM_CTL4r_SET
#define TXCOM_CTL4r_GET BCMI_TSCF_GEN3_XGXS_TXCOM_CTL4r_GET
#define TXCOM_CTL4r_TXCOM_CL93N72_MAX_WAIT_TIMER_PERIOD_2NDSETf_GET BCMI_TSCF_GEN3_XGXS_TXCOM_CTL4r_TXCOM_CL93N72_MAX_WAIT_TIMER_PERIOD_2NDSETf_GET
#define TXCOM_CTL4r_TXCOM_CL93N72_MAX_WAIT_TIMER_PERIOD_2NDSETf_SET BCMI_TSCF_GEN3_XGXS_TXCOM_CTL4r_TXCOM_CL93N72_MAX_WAIT_TIMER_PERIOD_2NDSETf_SET
#define READ_TXCOM_CTL4r BCMI_TSCF_GEN3_XGXS_READ_TXCOM_CTL4r
#define WRITE_TXCOM_CTL4r BCMI_TSCF_GEN3_XGXS_WRITE_TXCOM_CTL4r
#define MODIFY_TXCOM_CTL4r BCMI_TSCF_GEN3_XGXS_MODIFY_TXCOM_CTL4r
#define READLN_TXCOM_CTL4r BCMI_TSCF_GEN3_XGXS_READLN_TXCOM_CTL4r
#define WRITELN_TXCOM_CTL4r BCMI_TSCF_GEN3_XGXS_WRITELN_TXCOM_CTL4r
#define WRITEALL_TXCOM_CTL4r BCMI_TSCF_GEN3_XGXS_WRITEALL_TXCOM_CTL4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TXCOM_CTL4r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TXCOM_CTL5
 * BLOCKS:   TXCOM
 * REGADDR:  0xd155
 * DEVAD:    1
 * DESC:     TX common control 5 register
 * RESETVAL: 0x1b8 (440)
 * ACCESS:   R/W
 * FIELDS:
 *     TXCOM_CL93N72_WAIT_CNTR_LIMIT_2NDSET Period/range is 32us-96us (220-660 frames) for Fiber channelPeriod/range is 100-300 frames for EthernetPeriod to keep transmiting frames after the local device has completed trainingThe units are training pages. Second copy to allow for different training times for 10G, 25G and fibre channel linksThe defaults are set to for Fibre channel
 */
#define BCMI_TSCF_GEN3_XGXS_TXCOM_CTL5r (0x0001d155 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TXCOM_CTL5r_SIZE 4

/*
 * This structure should be used to declare and program TXCOM_CTL5.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TXCOM_CTL5r_s {
	uint32_t v[1];
	uint32_t txcom_ctl5[1];
	uint32_t _txcom_ctl5;
} BCMI_TSCF_GEN3_XGXS_TXCOM_CTL5r_t;

#define BCMI_TSCF_GEN3_XGXS_TXCOM_CTL5r_CLR(r) (r).txcom_ctl5[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TXCOM_CTL5r_SET(r,d) (r).txcom_ctl5[0] = d
#define BCMI_TSCF_GEN3_XGXS_TXCOM_CTL5r_GET(r) (r).txcom_ctl5[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TXCOM_CTL5r_TXCOM_CL93N72_WAIT_CNTR_LIMIT_2NDSETf_GET(r) (((r).txcom_ctl5[0]) & 0x3ff)
#define BCMI_TSCF_GEN3_XGXS_TXCOM_CTL5r_TXCOM_CL93N72_WAIT_CNTR_LIMIT_2NDSETf_SET(r,f) (r).txcom_ctl5[0]=(((r).txcom_ctl5[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff)) | (0x3ff << 16)

/*
 * These macros can be used to access TXCOM_CTL5.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TXCOM_CTL5r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_CTL5r,(_r._txcom_ctl5))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TXCOM_CTL5r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_CTL5r,(_r._txcom_ctl5)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TXCOM_CTL5r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_CTL5r,(_r._txcom_ctl5))
#define BCMI_TSCF_GEN3_XGXS_READLN_TXCOM_CTL5r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_CTL5r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_ctl5))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TXCOM_CTL5r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_CTL5r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_ctl5))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TXCOM_CTL5r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_CTL5r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txcom_ctl5))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXCOM_CTL5r BCMI_TSCF_GEN3_XGXS_TXCOM_CTL5r
#define TXCOM_CTL5r_SIZE BCMI_TSCF_GEN3_XGXS_TXCOM_CTL5r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TXCOM_CTL5r_t TXCOM_CTL5r_t;
#define TXCOM_CTL5r_CLR BCMI_TSCF_GEN3_XGXS_TXCOM_CTL5r_CLR
#define TXCOM_CTL5r_SET BCMI_TSCF_GEN3_XGXS_TXCOM_CTL5r_SET
#define TXCOM_CTL5r_GET BCMI_TSCF_GEN3_XGXS_TXCOM_CTL5r_GET
#define TXCOM_CTL5r_TXCOM_CL93N72_WAIT_CNTR_LIMIT_2NDSETf_GET BCMI_TSCF_GEN3_XGXS_TXCOM_CTL5r_TXCOM_CL93N72_WAIT_CNTR_LIMIT_2NDSETf_GET
#define TXCOM_CTL5r_TXCOM_CL93N72_WAIT_CNTR_LIMIT_2NDSETf_SET BCMI_TSCF_GEN3_XGXS_TXCOM_CTL5r_TXCOM_CL93N72_WAIT_CNTR_LIMIT_2NDSETf_SET
#define READ_TXCOM_CTL5r BCMI_TSCF_GEN3_XGXS_READ_TXCOM_CTL5r
#define WRITE_TXCOM_CTL5r BCMI_TSCF_GEN3_XGXS_WRITE_TXCOM_CTL5r
#define MODIFY_TXCOM_CTL5r BCMI_TSCF_GEN3_XGXS_MODIFY_TXCOM_CTL5r
#define READLN_TXCOM_CTL5r BCMI_TSCF_GEN3_XGXS_READLN_TXCOM_CTL5r
#define WRITELN_TXCOM_CTL5r BCMI_TSCF_GEN3_XGXS_WRITELN_TXCOM_CTL5r
#define WRITEALL_TXCOM_CTL5r BCMI_TSCF_GEN3_XGXS_WRITEALL_TXCOM_CTL5r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TXCOM_CTL5r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TLB_RX_PRBS_CHK_CNT_CFG
 * BLOCKS:   TLB_RX
 * REGADDR:  0xd160
 * DEVAD:    1
 * DESC:     PRBS Checker Count Control
 * RESETVAL: 0x602 (1538)
 * ACCESS:   R/W
 * FIELDS:
 *     PRBS_CHK_LOCK_CNT specifies the number of consecutive valid clock cycles without any bit errorfor PRBS checker to go into PRBS lock state. Valid values are 0 to 31 where0 indicate that PRBS will lock as soon as it gets the first clock cycle with no bit error.likewise 31 indicates that PRBS will lock as soon as it gets the 32 consecutive clocks with no error.
 *     PRBS_CHK_OOL_CNT specifies the number of consecutive valid clock cycles with 1 or more bit errorsfor PRBS checker to go out of PRBS lock state. Valid values are 0 to 31 where0 indicate that PRBS will go out of lock as soon as it gets the first clock cycle with 1 or more bit errors.likewise 31 indicates that PRBS will go out of lock as soon as it gets the 32 consecutive clocks with 1 or more errors.
 */
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr (0x0001d160 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr_SIZE 4

/*
 * This structure should be used to declare and program TLB_RX_PRBS_CHK_CNT_CFG.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr_s {
	uint32_t v[1];
	uint32_t tlb_rx_prbs_chk_cnt_cfg[1];
	uint32_t _tlb_rx_prbs_chk_cnt_cfg;
} BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr_t;

#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr_CLR(r) (r).tlb_rx_prbs_chk_cnt_cfg[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr_SET(r,d) (r).tlb_rx_prbs_chk_cnt_cfg[0] = d
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr_GET(r) (r).tlb_rx_prbs_chk_cnt_cfg[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr_PRBS_CHK_OOL_CNTf_GET(r) ((((r).tlb_rx_prbs_chk_cnt_cfg[0]) >> 8) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr_PRBS_CHK_OOL_CNTf_SET(r,f) (r).tlb_rx_prbs_chk_cnt_cfg[0]=(((r).tlb_rx_prbs_chk_cnt_cfg[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8)) | (31 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr_PRBS_CHK_LOCK_CNTf_GET(r) (((r).tlb_rx_prbs_chk_cnt_cfg[0]) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr_PRBS_CHK_LOCK_CNTf_SET(r,f) (r).tlb_rx_prbs_chk_cnt_cfg[0]=(((r).tlb_rx_prbs_chk_cnt_cfg[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access TLB_RX_PRBS_CHK_CNT_CFG.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TLB_RX_PRBS_CHK_CNT_CFGr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr,(_r._tlb_rx_prbs_chk_cnt_cfg))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TLB_RX_PRBS_CHK_CNT_CFGr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr,(_r._tlb_rx_prbs_chk_cnt_cfg)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TLB_RX_PRBS_CHK_CNT_CFGr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr,(_r._tlb_rx_prbs_chk_cnt_cfg))
#define BCMI_TSCF_GEN3_XGXS_READLN_TLB_RX_PRBS_CHK_CNT_CFGr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_prbs_chk_cnt_cfg))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TLB_RX_PRBS_CHK_CNT_CFGr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_prbs_chk_cnt_cfg))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TLB_RX_PRBS_CHK_CNT_CFGr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_rx_prbs_chk_cnt_cfg))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TLB_RX_PRBS_CHK_CNT_CFGr BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr
#define TLB_RX_PRBS_CHK_CNT_CFGr_SIZE BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr_t TLB_RX_PRBS_CHK_CNT_CFGr_t;
#define TLB_RX_PRBS_CHK_CNT_CFGr_CLR BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr_CLR
#define TLB_RX_PRBS_CHK_CNT_CFGr_SET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr_SET
#define TLB_RX_PRBS_CHK_CNT_CFGr_GET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr_GET
#define TLB_RX_PRBS_CHK_CNT_CFGr_PRBS_CHK_OOL_CNTf_GET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr_PRBS_CHK_OOL_CNTf_GET
#define TLB_RX_PRBS_CHK_CNT_CFGr_PRBS_CHK_OOL_CNTf_SET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr_PRBS_CHK_OOL_CNTf_SET
#define TLB_RX_PRBS_CHK_CNT_CFGr_PRBS_CHK_LOCK_CNTf_GET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr_PRBS_CHK_LOCK_CNTf_GET
#define TLB_RX_PRBS_CHK_CNT_CFGr_PRBS_CHK_LOCK_CNTf_SET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr_PRBS_CHK_LOCK_CNTf_SET
#define READ_TLB_RX_PRBS_CHK_CNT_CFGr BCMI_TSCF_GEN3_XGXS_READ_TLB_RX_PRBS_CHK_CNT_CFGr
#define WRITE_TLB_RX_PRBS_CHK_CNT_CFGr BCMI_TSCF_GEN3_XGXS_WRITE_TLB_RX_PRBS_CHK_CNT_CFGr
#define MODIFY_TLB_RX_PRBS_CHK_CNT_CFGr BCMI_TSCF_GEN3_XGXS_MODIFY_TLB_RX_PRBS_CHK_CNT_CFGr
#define READLN_TLB_RX_PRBS_CHK_CNT_CFGr BCMI_TSCF_GEN3_XGXS_READLN_TLB_RX_PRBS_CHK_CNT_CFGr
#define WRITELN_TLB_RX_PRBS_CHK_CNT_CFGr BCMI_TSCF_GEN3_XGXS_WRITELN_TLB_RX_PRBS_CHK_CNT_CFGr
#define WRITEALL_TLB_RX_PRBS_CHK_CNT_CFGr BCMI_TSCF_GEN3_XGXS_WRITEALL_TLB_RX_PRBS_CHK_CNT_CFGr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TLB_RX_PRBS_CHK_CFG
 * BLOCKS:   TLB_RX
 * REGADDR:  0xd161
 * DEVAD:    1
 * DESC:     PRBS Checker Control
 * RESETVAL: 0x12a (298)
 * ACCESS:   R/W
 * FIELDS:
 *     PRBS_CHK_EN      PRBS checker enable.1 => enable  the PRBS checker.0 => disable the PRBS checker.
 *     PRBS_CHK_MODE_SEL PRBS checker mode select. Selects the PRBS polynomial as shown below3'd0 -> PRBS 73'd1 -> PRBS 93'd2 -> PRBS 113'd3 -> PRBS 153'd4 -> PRBS 233'd5 -> PRBS 313'd6 -> PRBS 58 (1 + x^39 + x^58)3'd7 -> reserved for future use.
 *     PRBS_CHK_INV     PRBS Invert enable.1 => will invert all the data bits to the PRBS checker.0 => will send normal data to the PRBS checker.
 *     PRBS_CHK_MODE    PRBS LOCK state machine select.2'd0 -> Self-sync mode w/ hysteresis. PRBS seed register is continuously seeded with previous received bits.This mode results in faster locking, but bit errors are counted multiple times (often by 3x).2'd1 -> Initial seed mode w/ hysteresis. PRBS seed registers is seeded with previous received bits only till PRBS lock isacquired and then they run locally independently from the received data until the checker goes out of PRBS lock.2'd2 -> Initial seed mode w/o hysteresis. Similar to mode 1 above except once locked it stays locked until PRBS is disabled.2'd3 -> reserved for future use.
 *     PRBS_CHK_EN_AUTO_MODE PRBS Checker Enable Mode Control.1 => select (rx_dsc_lock & prbs_chk_en) as PRBS checker enable control.0 => select                prbs_chk_en  as PRBS checker enable control.
 *     PRBS_BURST_LEN_CHK_EN 0 => disbale, 1=> enable (default)
 *     PRBS_CHK_ERR_CNT_BURST_MODE PRBS Error Counter Mode.1 => Each busrt of error will be counted as 1 error in the error counter. Each error busrt must be separated by 1 error-free cycle of data which in worst case should be 39 bits.0 => Each bit error will be counted.
 *     TRNSUM_ERROR_COUNT_EN Training sum error counter Mode enable.1 => will make the PRBS error counter used as trnsum_error counter. PRBS checker can not be used during this mode.0 => PRBS checker mode.
 *     PRBS_CHK_CLK_EN_FRC_ON PRBS checker clock enable.1'b1 will enable the PRBS checker clock. Recommended to be enabled before enabling the prbs_chk_en.
 *     PRBS_CHK_MODE_SEL_MSB Extending PRBS polynomial select by using this bit as bit[3] alongwith prbs_chk_mode_sel[2:0].1'b0 will select old PRBS polynomials for PRBS 7, 9, 11, 15, 23, 31 and 58 based on prbs_chk_mode_sel[2:0].1'b1 will select new PRBS polynomials for PRBS 10 and 20 based on prbs_chk_mode_sel[2:0].1'b1 & prbs_chk_mode_sel[2:0] == 0 will select PRBS 10.1'b1 & prbs_chk_mode_sel[2:0] == 1 will select PRBS 20.
 *     PRBS_CHK_BURST_ERR_CNT_EN PRBS checker burst error count mode enable.1'b1 will enable the PRBS checker burst error count mode. It should be enabled for prbs_chk_burst_err_cnt counter .Make sure that only one of the 2 register settings ((prbs_chk_en_timer_mode >=2 & prbs_chk_en_timeout > 0) and prbs_chk_burst_err_cnt_en) are TRUE at any given time and not simultaneously TRUE.
 */
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr (0x0001d161 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_SIZE 4

/*
 * This structure should be used to declare and program TLB_RX_PRBS_CHK_CFG.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_s {
	uint32_t v[1];
	uint32_t tlb_rx_prbs_chk_cfg[1];
	uint32_t _tlb_rx_prbs_chk_cfg;
} BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_t;

#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_CLR(r) (r).tlb_rx_prbs_chk_cfg[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_SET(r,d) (r).tlb_rx_prbs_chk_cfg[0] = d
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_GET(r) (r).tlb_rx_prbs_chk_cfg[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_BURST_ERR_CNT_ENf_GET(r) ((((r).tlb_rx_prbs_chk_cfg[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_BURST_ERR_CNT_ENf_SET(r,f) (r).tlb_rx_prbs_chk_cfg[0]=(((r).tlb_rx_prbs_chk_cfg[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_MODE_SEL_MSBf_GET(r) ((((r).tlb_rx_prbs_chk_cfg[0]) >> 12) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_MODE_SEL_MSBf_SET(r,f) (r).tlb_rx_prbs_chk_cfg[0]=(((r).tlb_rx_prbs_chk_cfg[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_CLK_EN_FRC_ONf_GET(r) ((((r).tlb_rx_prbs_chk_cfg[0]) >> 11) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_CLK_EN_FRC_ONf_SET(r,f) (r).tlb_rx_prbs_chk_cfg[0]=(((r).tlb_rx_prbs_chk_cfg[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_TRNSUM_ERROR_COUNT_ENf_GET(r) ((((r).tlb_rx_prbs_chk_cfg[0]) >> 10) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_TRNSUM_ERROR_COUNT_ENf_SET(r,f) (r).tlb_rx_prbs_chk_cfg[0]=(((r).tlb_rx_prbs_chk_cfg[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_ERR_CNT_BURST_MODEf_GET(r) ((((r).tlb_rx_prbs_chk_cfg[0]) >> 9) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_ERR_CNT_BURST_MODEf_SET(r,f) (r).tlb_rx_prbs_chk_cfg[0]=(((r).tlb_rx_prbs_chk_cfg[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_BURST_LEN_CHK_ENf_GET(r) ((((r).tlb_rx_prbs_chk_cfg[0]) >> 8) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_BURST_LEN_CHK_ENf_SET(r,f) (r).tlb_rx_prbs_chk_cfg[0]=(((r).tlb_rx_prbs_chk_cfg[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_EN_AUTO_MODEf_GET(r) ((((r).tlb_rx_prbs_chk_cfg[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_EN_AUTO_MODEf_SET(r,f) (r).tlb_rx_prbs_chk_cfg[0]=(((r).tlb_rx_prbs_chk_cfg[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_MODEf_GET(r) ((((r).tlb_rx_prbs_chk_cfg[0]) >> 5) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_MODEf_SET(r,f) (r).tlb_rx_prbs_chk_cfg[0]=(((r).tlb_rx_prbs_chk_cfg[0] & ~((uint32_t)0x3 << 5)) | ((((uint32_t)f) & 0x3) << 5)) | (3 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_INVf_GET(r) ((((r).tlb_rx_prbs_chk_cfg[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_INVf_SET(r,f) (r).tlb_rx_prbs_chk_cfg[0]=(((r).tlb_rx_prbs_chk_cfg[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_MODE_SELf_GET(r) ((((r).tlb_rx_prbs_chk_cfg[0]) >> 1) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_MODE_SELf_SET(r,f) (r).tlb_rx_prbs_chk_cfg[0]=(((r).tlb_rx_prbs_chk_cfg[0] & ~((uint32_t)0x7 << 1)) | ((((uint32_t)f) & 0x7) << 1)) | (7 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_ENf_GET(r) (((r).tlb_rx_prbs_chk_cfg[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_ENf_SET(r,f) (r).tlb_rx_prbs_chk_cfg[0]=(((r).tlb_rx_prbs_chk_cfg[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TLB_RX_PRBS_CHK_CFG.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TLB_RX_PRBS_CHK_CFGr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr,(_r._tlb_rx_prbs_chk_cfg))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TLB_RX_PRBS_CHK_CFGr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr,(_r._tlb_rx_prbs_chk_cfg)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TLB_RX_PRBS_CHK_CFGr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr,(_r._tlb_rx_prbs_chk_cfg))
#define BCMI_TSCF_GEN3_XGXS_READLN_TLB_RX_PRBS_CHK_CFGr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_prbs_chk_cfg))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TLB_RX_PRBS_CHK_CFGr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_prbs_chk_cfg))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TLB_RX_PRBS_CHK_CFGr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_rx_prbs_chk_cfg))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TLB_RX_PRBS_CHK_CFGr BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr
#define TLB_RX_PRBS_CHK_CFGr_SIZE BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_t TLB_RX_PRBS_CHK_CFGr_t;
#define TLB_RX_PRBS_CHK_CFGr_CLR BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_CLR
#define TLB_RX_PRBS_CHK_CFGr_SET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_SET
#define TLB_RX_PRBS_CHK_CFGr_GET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_GET
#define TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_BURST_ERR_CNT_ENf_GET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_BURST_ERR_CNT_ENf_GET
#define TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_BURST_ERR_CNT_ENf_SET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_BURST_ERR_CNT_ENf_SET
#define TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_MODE_SEL_MSBf_GET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_MODE_SEL_MSBf_GET
#define TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_MODE_SEL_MSBf_SET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_MODE_SEL_MSBf_SET
#define TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_CLK_EN_FRC_ONf_GET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_CLK_EN_FRC_ONf_GET
#define TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_CLK_EN_FRC_ONf_SET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_CLK_EN_FRC_ONf_SET
#define TLB_RX_PRBS_CHK_CFGr_TRNSUM_ERROR_COUNT_ENf_GET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_TRNSUM_ERROR_COUNT_ENf_GET
#define TLB_RX_PRBS_CHK_CFGr_TRNSUM_ERROR_COUNT_ENf_SET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_TRNSUM_ERROR_COUNT_ENf_SET
#define TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_ERR_CNT_BURST_MODEf_GET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_ERR_CNT_BURST_MODEf_GET
#define TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_ERR_CNT_BURST_MODEf_SET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_ERR_CNT_BURST_MODEf_SET
#define TLB_RX_PRBS_CHK_CFGr_PRBS_BURST_LEN_CHK_ENf_GET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_BURST_LEN_CHK_ENf_GET
#define TLB_RX_PRBS_CHK_CFGr_PRBS_BURST_LEN_CHK_ENf_SET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_BURST_LEN_CHK_ENf_SET
#define TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_EN_AUTO_MODEf_GET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_EN_AUTO_MODEf_GET
#define TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_EN_AUTO_MODEf_SET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_EN_AUTO_MODEf_SET
#define TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_MODEf_GET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_MODEf_GET
#define TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_MODEf_SET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_MODEf_SET
#define TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_INVf_GET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_INVf_GET
#define TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_INVf_SET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_INVf_SET
#define TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_MODE_SELf_GET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_MODE_SELf_GET
#define TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_MODE_SELf_SET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_MODE_SELf_SET
#define TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_ENf_GET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_ENf_GET
#define TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_ENf_SET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_ENf_SET
#define READ_TLB_RX_PRBS_CHK_CFGr BCMI_TSCF_GEN3_XGXS_READ_TLB_RX_PRBS_CHK_CFGr
#define WRITE_TLB_RX_PRBS_CHK_CFGr BCMI_TSCF_GEN3_XGXS_WRITE_TLB_RX_PRBS_CHK_CFGr
#define MODIFY_TLB_RX_PRBS_CHK_CFGr BCMI_TSCF_GEN3_XGXS_MODIFY_TLB_RX_PRBS_CHK_CFGr
#define READLN_TLB_RX_PRBS_CHK_CFGr BCMI_TSCF_GEN3_XGXS_READLN_TLB_RX_PRBS_CHK_CFGr
#define WRITELN_TLB_RX_PRBS_CHK_CFGr BCMI_TSCF_GEN3_XGXS_WRITELN_TLB_RX_PRBS_CHK_CFGr
#define WRITEALL_TLB_RX_PRBS_CHK_CFGr BCMI_TSCF_GEN3_XGXS_WRITEALL_TLB_RX_PRBS_CHK_CFGr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_CFGr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TLB_RX_DIG_LPBK_CFG
 * BLOCKS:   TLB_RX
 * REGADDR:  0xd162
 * DEVAD:    1
 * DESC:     Digital Loopback Control
 * RESETVAL: 0xa (10)
 * ACCESS:   R/W
 * FIELDS:
 *     DIG_LPBK_EN      TX to RX Parallel Loopback (Digital Loopback) Enable.1 => Loopback is Enabled.0 => Loopback is Disabled.
 *     DIG_LPBK_PD_MODE Digital Loopback Phase Detector Mode. For normal operating conditions keep it at the default value of 1'b1.1'b0 - swap inc/dec. 1'b1 - normal mode.
 *     DIG_LPBK_PD_BIAS_EN 1'b1 will enable PD inc bias mode where there will be inc generated every 16th clock cycle..1'b0 will disable the PD bias mode so inc/dec will be generated based on the PD output.
 */
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_CFGr (0x0001d162 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_CFGr_SIZE 4

/*
 * This structure should be used to declare and program TLB_RX_DIG_LPBK_CFG.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_CFGr_s {
	uint32_t v[1];
	uint32_t tlb_rx_dig_lpbk_cfg[1];
	uint32_t _tlb_rx_dig_lpbk_cfg;
} BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_CFGr_t;

#define BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_CFGr_CLR(r) (r).tlb_rx_dig_lpbk_cfg[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_CFGr_SET(r,d) (r).tlb_rx_dig_lpbk_cfg[0] = d
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_CFGr_GET(r) (r).tlb_rx_dig_lpbk_cfg[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_CFGr_DIG_LPBK_PD_BIAS_ENf_GET(r) ((((r).tlb_rx_dig_lpbk_cfg[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_CFGr_DIG_LPBK_PD_BIAS_ENf_SET(r,f) (r).tlb_rx_dig_lpbk_cfg[0]=(((r).tlb_rx_dig_lpbk_cfg[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_CFGr_DIG_LPBK_PD_MODEf_GET(r) ((((r).tlb_rx_dig_lpbk_cfg[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_CFGr_DIG_LPBK_PD_MODEf_SET(r,f) (r).tlb_rx_dig_lpbk_cfg[0]=(((r).tlb_rx_dig_lpbk_cfg[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_CFGr_DIG_LPBK_ENf_GET(r) (((r).tlb_rx_dig_lpbk_cfg[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_CFGr_DIG_LPBK_ENf_SET(r,f) (r).tlb_rx_dig_lpbk_cfg[0]=(((r).tlb_rx_dig_lpbk_cfg[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TLB_RX_DIG_LPBK_CFG.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TLB_RX_DIG_LPBK_CFGr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_CFGr,(_r._tlb_rx_dig_lpbk_cfg))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TLB_RX_DIG_LPBK_CFGr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_CFGr,(_r._tlb_rx_dig_lpbk_cfg)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TLB_RX_DIG_LPBK_CFGr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_CFGr,(_r._tlb_rx_dig_lpbk_cfg))
#define BCMI_TSCF_GEN3_XGXS_READLN_TLB_RX_DIG_LPBK_CFGr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_CFGr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_dig_lpbk_cfg))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TLB_RX_DIG_LPBK_CFGr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_CFGr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_dig_lpbk_cfg))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TLB_RX_DIG_LPBK_CFGr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_CFGr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_rx_dig_lpbk_cfg))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TLB_RX_DIG_LPBK_CFGr BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_CFGr
#define TLB_RX_DIG_LPBK_CFGr_SIZE BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_CFGr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_CFGr_t TLB_RX_DIG_LPBK_CFGr_t;
#define TLB_RX_DIG_LPBK_CFGr_CLR BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_CFGr_CLR
#define TLB_RX_DIG_LPBK_CFGr_SET BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_CFGr_SET
#define TLB_RX_DIG_LPBK_CFGr_GET BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_CFGr_GET
#define TLB_RX_DIG_LPBK_CFGr_DIG_LPBK_PD_BIAS_ENf_GET BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_CFGr_DIG_LPBK_PD_BIAS_ENf_GET
#define TLB_RX_DIG_LPBK_CFGr_DIG_LPBK_PD_BIAS_ENf_SET BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_CFGr_DIG_LPBK_PD_BIAS_ENf_SET
#define TLB_RX_DIG_LPBK_CFGr_DIG_LPBK_PD_MODEf_GET BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_CFGr_DIG_LPBK_PD_MODEf_GET
#define TLB_RX_DIG_LPBK_CFGr_DIG_LPBK_PD_MODEf_SET BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_CFGr_DIG_LPBK_PD_MODEf_SET
#define TLB_RX_DIG_LPBK_CFGr_DIG_LPBK_ENf_GET BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_CFGr_DIG_LPBK_ENf_GET
#define TLB_RX_DIG_LPBK_CFGr_DIG_LPBK_ENf_SET BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_CFGr_DIG_LPBK_ENf_SET
#define READ_TLB_RX_DIG_LPBK_CFGr BCMI_TSCF_GEN3_XGXS_READ_TLB_RX_DIG_LPBK_CFGr
#define WRITE_TLB_RX_DIG_LPBK_CFGr BCMI_TSCF_GEN3_XGXS_WRITE_TLB_RX_DIG_LPBK_CFGr
#define MODIFY_TLB_RX_DIG_LPBK_CFGr BCMI_TSCF_GEN3_XGXS_MODIFY_TLB_RX_DIG_LPBK_CFGr
#define READLN_TLB_RX_DIG_LPBK_CFGr BCMI_TSCF_GEN3_XGXS_READLN_TLB_RX_DIG_LPBK_CFGr
#define WRITELN_TLB_RX_DIG_LPBK_CFGr BCMI_TSCF_GEN3_XGXS_WRITELN_TLB_RX_DIG_LPBK_CFGr
#define WRITEALL_TLB_RX_DIG_LPBK_CFGr BCMI_TSCF_GEN3_XGXS_WRITEALL_TLB_RX_DIG_LPBK_CFGr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_CFGr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TLB_RX_TLB_RX_MISC_CFG
 * BLOCKS:   TLB_RX
 * REGADDR:  0xd163
 * DEVAD:    1
 * DESC:     TLB RX Misc. Control
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RX_PMD_DP_INVERT RX PMD Datapath Invert Control.When Enabled by writing to 1'b1, it will invert all the datapath bits of the logical lane.Recommended for use in case P and N pads are swapped on the PCB board.
 *     DBG_MASK_DIG_LPBK_EN Mask bit for dig_lpbk_en in the pmd_rx_lock equation. This is a debug register.1 => pmd_rx_lock will be forced to 1'b0 during digital loopback.0 => pmd_rx_lock will be forced to 1'b1 during digital loopback.
 *     TLB_RX_DIFF_DEC_EN 1'b1 will enable the Differential Decoder for pmd_rx_data. Only applicable to PCS RX data in OS1, 2 and 4 modes.Write it to 1'b0 for 1G OSR modes 16P5 and 20P625.
 */
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_TLB_RX_MISC_CFGr (0x0001d163 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TLB_RX_TLB_RX_MISC_CFGr_SIZE 4

/*
 * This structure should be used to declare and program TLB_RX_TLB_RX_MISC_CFG.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TLB_RX_TLB_RX_MISC_CFGr_s {
	uint32_t v[1];
	uint32_t tlb_rx_tlb_rx_misc_cfg[1];
	uint32_t _tlb_rx_tlb_rx_misc_cfg;
} BCMI_TSCF_GEN3_XGXS_TLB_RX_TLB_RX_MISC_CFGr_t;

#define BCMI_TSCF_GEN3_XGXS_TLB_RX_TLB_RX_MISC_CFGr_CLR(r) (r).tlb_rx_tlb_rx_misc_cfg[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_TLB_RX_MISC_CFGr_SET(r,d) (r).tlb_rx_tlb_rx_misc_cfg[0] = d
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_TLB_RX_MISC_CFGr_GET(r) (r).tlb_rx_tlb_rx_misc_cfg[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_TLB_RX_MISC_CFGr_TLB_RX_DIFF_DEC_ENf_GET(r) ((((r).tlb_rx_tlb_rx_misc_cfg[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_TLB_RX_MISC_CFGr_TLB_RX_DIFF_DEC_ENf_SET(r,f) (r).tlb_rx_tlb_rx_misc_cfg[0]=(((r).tlb_rx_tlb_rx_misc_cfg[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_TLB_RX_MISC_CFGr_DBG_MASK_DIG_LPBK_ENf_GET(r) ((((r).tlb_rx_tlb_rx_misc_cfg[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_TLB_RX_MISC_CFGr_DBG_MASK_DIG_LPBK_ENf_SET(r,f) (r).tlb_rx_tlb_rx_misc_cfg[0]=(((r).tlb_rx_tlb_rx_misc_cfg[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_TLB_RX_MISC_CFGr_RX_PMD_DP_INVERTf_GET(r) (((r).tlb_rx_tlb_rx_misc_cfg[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_TLB_RX_MISC_CFGr_RX_PMD_DP_INVERTf_SET(r,f) (r).tlb_rx_tlb_rx_misc_cfg[0]=(((r).tlb_rx_tlb_rx_misc_cfg[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TLB_RX_TLB_RX_MISC_CFG.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TLB_RX_TLB_RX_MISC_CFGr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_TLB_RX_MISC_CFGr,(_r._tlb_rx_tlb_rx_misc_cfg))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TLB_RX_TLB_RX_MISC_CFGr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_TLB_RX_MISC_CFGr,(_r._tlb_rx_tlb_rx_misc_cfg)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TLB_RX_TLB_RX_MISC_CFGr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_TLB_RX_MISC_CFGr,(_r._tlb_rx_tlb_rx_misc_cfg))
#define BCMI_TSCF_GEN3_XGXS_READLN_TLB_RX_TLB_RX_MISC_CFGr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_TLB_RX_MISC_CFGr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_tlb_rx_misc_cfg))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TLB_RX_TLB_RX_MISC_CFGr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_TLB_RX_MISC_CFGr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_tlb_rx_misc_cfg))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TLB_RX_TLB_RX_MISC_CFGr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_TLB_RX_MISC_CFGr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_rx_tlb_rx_misc_cfg))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TLB_RX_TLB_RX_MISC_CFGr BCMI_TSCF_GEN3_XGXS_TLB_RX_TLB_RX_MISC_CFGr
#define TLB_RX_TLB_RX_MISC_CFGr_SIZE BCMI_TSCF_GEN3_XGXS_TLB_RX_TLB_RX_MISC_CFGr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TLB_RX_TLB_RX_MISC_CFGr_t TLB_RX_TLB_RX_MISC_CFGr_t;
#define TLB_RX_TLB_RX_MISC_CFGr_CLR BCMI_TSCF_GEN3_XGXS_TLB_RX_TLB_RX_MISC_CFGr_CLR
#define TLB_RX_TLB_RX_MISC_CFGr_SET BCMI_TSCF_GEN3_XGXS_TLB_RX_TLB_RX_MISC_CFGr_SET
#define TLB_RX_TLB_RX_MISC_CFGr_GET BCMI_TSCF_GEN3_XGXS_TLB_RX_TLB_RX_MISC_CFGr_GET
#define TLB_RX_TLB_RX_MISC_CFGr_TLB_RX_DIFF_DEC_ENf_GET BCMI_TSCF_GEN3_XGXS_TLB_RX_TLB_RX_MISC_CFGr_TLB_RX_DIFF_DEC_ENf_GET
#define TLB_RX_TLB_RX_MISC_CFGr_TLB_RX_DIFF_DEC_ENf_SET BCMI_TSCF_GEN3_XGXS_TLB_RX_TLB_RX_MISC_CFGr_TLB_RX_DIFF_DEC_ENf_SET
#define TLB_RX_TLB_RX_MISC_CFGr_DBG_MASK_DIG_LPBK_ENf_GET BCMI_TSCF_GEN3_XGXS_TLB_RX_TLB_RX_MISC_CFGr_DBG_MASK_DIG_LPBK_ENf_GET
#define TLB_RX_TLB_RX_MISC_CFGr_DBG_MASK_DIG_LPBK_ENf_SET BCMI_TSCF_GEN3_XGXS_TLB_RX_TLB_RX_MISC_CFGr_DBG_MASK_DIG_LPBK_ENf_SET
#define TLB_RX_TLB_RX_MISC_CFGr_RX_PMD_DP_INVERTf_GET BCMI_TSCF_GEN3_XGXS_TLB_RX_TLB_RX_MISC_CFGr_RX_PMD_DP_INVERTf_GET
#define TLB_RX_TLB_RX_MISC_CFGr_RX_PMD_DP_INVERTf_SET BCMI_TSCF_GEN3_XGXS_TLB_RX_TLB_RX_MISC_CFGr_RX_PMD_DP_INVERTf_SET
#define READ_TLB_RX_TLB_RX_MISC_CFGr BCMI_TSCF_GEN3_XGXS_READ_TLB_RX_TLB_RX_MISC_CFGr
#define WRITE_TLB_RX_TLB_RX_MISC_CFGr BCMI_TSCF_GEN3_XGXS_WRITE_TLB_RX_TLB_RX_MISC_CFGr
#define MODIFY_TLB_RX_TLB_RX_MISC_CFGr BCMI_TSCF_GEN3_XGXS_MODIFY_TLB_RX_TLB_RX_MISC_CFGr
#define READLN_TLB_RX_TLB_RX_MISC_CFGr BCMI_TSCF_GEN3_XGXS_READLN_TLB_RX_TLB_RX_MISC_CFGr
#define WRITELN_TLB_RX_TLB_RX_MISC_CFGr BCMI_TSCF_GEN3_XGXS_WRITELN_TLB_RX_TLB_RX_MISC_CFGr
#define WRITEALL_TLB_RX_TLB_RX_MISC_CFGr BCMI_TSCF_GEN3_XGXS_WRITEALL_TLB_RX_TLB_RX_MISC_CFGr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TLB_RX_TLB_RX_MISC_CFGr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TLB_RX_PRBS_CHK_EN_TMR_CTL
 * BLOCKS:   TLB_RX
 * REGADDR:  0xd164
 * DEVAD:    1
 * DESC:     TLB RX PRBS Checker Enable Timer Control
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     PRBS_CHK_EN_TIMER_MODE prbs_chk_en timer mode.2'b0x => prbs_chk_en timer is disabled and PRBS checker mode is enabled as per prbs_chk_en register.2'b10 => use heartbeat_toggle_1us for the timer.2'b11 => use heartbeat_toggle_1ms for the timer.Make sure that only one of the 2 register settings ((prbs_chk_en_timer_mode >=2 & prbs_chk_en_timeout > 0) and prbs_chk_burst_err_cnt_en) are TRUE at any given time and not simultaneously TRUE.
 *     PRBS_CHK_EN_TIMEOUT PRBS timer timeout value.Valid range 0 to 31 which maps to 0 to 448. Should be programmed before enabling the PRBS checker in timer mode.
 */
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr (0x0001d164 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr_SIZE 4

/*
 * This structure should be used to declare and program TLB_RX_PRBS_CHK_EN_TMR_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr_s {
	uint32_t v[1];
	uint32_t tlb_rx_prbs_chk_en_tmr_ctl[1];
	uint32_t _tlb_rx_prbs_chk_en_tmr_ctl;
} BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr_CLR(r) (r).tlb_rx_prbs_chk_en_tmr_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr_SET(r,d) (r).tlb_rx_prbs_chk_en_tmr_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr_GET(r) (r).tlb_rx_prbs_chk_en_tmr_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr_PRBS_CHK_EN_TIMEOUTf_GET(r) ((((r).tlb_rx_prbs_chk_en_tmr_ctl[0]) >> 8) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr_PRBS_CHK_EN_TIMEOUTf_SET(r,f) (r).tlb_rx_prbs_chk_en_tmr_ctl[0]=(((r).tlb_rx_prbs_chk_en_tmr_ctl[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8)) | (31 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr_PRBS_CHK_EN_TIMER_MODEf_GET(r) (((r).tlb_rx_prbs_chk_en_tmr_ctl[0]) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr_PRBS_CHK_EN_TIMER_MODEf_SET(r,f) (r).tlb_rx_prbs_chk_en_tmr_ctl[0]=(((r).tlb_rx_prbs_chk_en_tmr_ctl[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access TLB_RX_PRBS_CHK_EN_TMR_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TLB_RX_PRBS_CHK_EN_TMR_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr,(_r._tlb_rx_prbs_chk_en_tmr_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TLB_RX_PRBS_CHK_EN_TMR_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr,(_r._tlb_rx_prbs_chk_en_tmr_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TLB_RX_PRBS_CHK_EN_TMR_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr,(_r._tlb_rx_prbs_chk_en_tmr_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_TLB_RX_PRBS_CHK_EN_TMR_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_prbs_chk_en_tmr_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TLB_RX_PRBS_CHK_EN_TMR_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_prbs_chk_en_tmr_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TLB_RX_PRBS_CHK_EN_TMR_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_rx_prbs_chk_en_tmr_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TLB_RX_PRBS_CHK_EN_TMR_CTLr BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr
#define TLB_RX_PRBS_CHK_EN_TMR_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr_t TLB_RX_PRBS_CHK_EN_TMR_CTLr_t;
#define TLB_RX_PRBS_CHK_EN_TMR_CTLr_CLR BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr_CLR
#define TLB_RX_PRBS_CHK_EN_TMR_CTLr_SET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr_SET
#define TLB_RX_PRBS_CHK_EN_TMR_CTLr_GET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr_GET
#define TLB_RX_PRBS_CHK_EN_TMR_CTLr_PRBS_CHK_EN_TIMEOUTf_GET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr_PRBS_CHK_EN_TIMEOUTf_GET
#define TLB_RX_PRBS_CHK_EN_TMR_CTLr_PRBS_CHK_EN_TIMEOUTf_SET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr_PRBS_CHK_EN_TIMEOUTf_SET
#define TLB_RX_PRBS_CHK_EN_TMR_CTLr_PRBS_CHK_EN_TIMER_MODEf_GET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr_PRBS_CHK_EN_TIMER_MODEf_GET
#define TLB_RX_PRBS_CHK_EN_TMR_CTLr_PRBS_CHK_EN_TIMER_MODEf_SET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr_PRBS_CHK_EN_TIMER_MODEf_SET
#define READ_TLB_RX_PRBS_CHK_EN_TMR_CTLr BCMI_TSCF_GEN3_XGXS_READ_TLB_RX_PRBS_CHK_EN_TMR_CTLr
#define WRITE_TLB_RX_PRBS_CHK_EN_TMR_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_TLB_RX_PRBS_CHK_EN_TMR_CTLr
#define MODIFY_TLB_RX_PRBS_CHK_EN_TMR_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_TLB_RX_PRBS_CHK_EN_TMR_CTLr
#define READLN_TLB_RX_PRBS_CHK_EN_TMR_CTLr BCMI_TSCF_GEN3_XGXS_READLN_TLB_RX_PRBS_CHK_EN_TMR_CTLr
#define WRITELN_TLB_RX_PRBS_CHK_EN_TMR_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_TLB_RX_PRBS_CHK_EN_TMR_CTLr
#define WRITEALL_TLB_RX_PRBS_CHK_EN_TMR_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_TLB_RX_PRBS_CHK_EN_TMR_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TLB_RX_PRBS_CHK_BURST_ERR_CNT_STS
 * BLOCKS:   TLB_RX
 * REGADDR:  0xd165
 * DEVAD:    1
 * DESC:     PRBS Checker Burst Error Counter Status
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     PRBS_CHK_BURST_ERR_CNT PRBS Checker Burst Error Counter Status Register. It is a clear on read register. This register countsthe number of Burst in errors separated by atleast 1 clock cycle worth of data without any bit in error.prbs_chk_burst_err_cnt_en should be set to 1'b1 for this counter to work.
 */
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr (0x0001d165 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr_SIZE 4

/*
 * This structure should be used to declare and program TLB_RX_PRBS_CHK_BURST_ERR_CNT_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr_s {
	uint32_t v[1];
	uint32_t tlb_rx_prbs_chk_burst_err_cnt_sts[1];
	uint32_t _tlb_rx_prbs_chk_burst_err_cnt_sts;
} BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr_CLR(r) (r).tlb_rx_prbs_chk_burst_err_cnt_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr_SET(r,d) (r).tlb_rx_prbs_chk_burst_err_cnt_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr_GET(r) (r).tlb_rx_prbs_chk_burst_err_cnt_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr_PRBS_CHK_BURST_ERR_CNTf_GET(r) (((r).tlb_rx_prbs_chk_burst_err_cnt_sts[0]) & 0x3ff)
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr_PRBS_CHK_BURST_ERR_CNTf_SET(r,f) (r).tlb_rx_prbs_chk_burst_err_cnt_sts[0]=(((r).tlb_rx_prbs_chk_burst_err_cnt_sts[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff)) | (0x3ff << 16)

/*
 * These macros can be used to access TLB_RX_PRBS_CHK_BURST_ERR_CNT_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr,(_r._tlb_rx_prbs_chk_burst_err_cnt_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr,(_r._tlb_rx_prbs_chk_burst_err_cnt_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr,(_r._tlb_rx_prbs_chk_burst_err_cnt_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_prbs_chk_burst_err_cnt_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_prbs_chk_burst_err_cnt_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_rx_prbs_chk_burst_err_cnt_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr
#define TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr_SIZE BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr_t TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr_t;
#define TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr_CLR BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr_CLR
#define TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr_SET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr_SET
#define TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr_GET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr_GET
#define TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr_PRBS_CHK_BURST_ERR_CNTf_GET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr_PRBS_CHK_BURST_ERR_CNTf_GET
#define TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr_PRBS_CHK_BURST_ERR_CNTf_SET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr_PRBS_CHK_BURST_ERR_CNTf_SET
#define READ_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr BCMI_TSCF_GEN3_XGXS_READ_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr
#define WRITE_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr BCMI_TSCF_GEN3_XGXS_WRITE_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr
#define MODIFY_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr
#define READLN_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr BCMI_TSCF_GEN3_XGXS_READLN_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr
#define WRITELN_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr
#define WRITEALL_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TLB_RX_DBG_PMD_RX_LOCK_STS
 * BLOCKS:   TLB_RX
 * REGADDR:  0xd166
 * DEVAD:    1
 * DESC:     Debug PMD RX LOCK Status
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     DBG_PMD_RX_LOCK  Debug PMD RX LOCK Indication. This is a live indication of the status of the pmd_rx_lock output port.1 => PMD is in LOCKED state and RX PCS data should have acceptable BER.0 => PMD is not LOCKED yet.
 *     DBG_PMD_RX_LOCK_CHANGE Set to 1'b1 when change/transition on PMD RX LOCK. This is a sticky bit and cleared upon read. This is a debug register.
 */
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr (0x0001d166 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr_SIZE 4

/*
 * This structure should be used to declare and program TLB_RX_DBG_PMD_RX_LOCK_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr_s {
	uint32_t v[1];
	uint32_t tlb_rx_dbg_pmd_rx_lock_sts[1];
	uint32_t _tlb_rx_dbg_pmd_rx_lock_sts;
} BCMI_TSCF_GEN3_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr_CLR(r) (r).tlb_rx_dbg_pmd_rx_lock_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr_SET(r,d) (r).tlb_rx_dbg_pmd_rx_lock_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr_GET(r) (r).tlb_rx_dbg_pmd_rx_lock_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr_DBG_PMD_RX_LOCK_CHANGEf_GET(r) ((((r).tlb_rx_dbg_pmd_rx_lock_sts[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr_DBG_PMD_RX_LOCK_CHANGEf_SET(r,f) (r).tlb_rx_dbg_pmd_rx_lock_sts[0]=(((r).tlb_rx_dbg_pmd_rx_lock_sts[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr_DBG_PMD_RX_LOCKf_GET(r) (((r).tlb_rx_dbg_pmd_rx_lock_sts[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr_DBG_PMD_RX_LOCKf_SET(r,f) (r).tlb_rx_dbg_pmd_rx_lock_sts[0]=(((r).tlb_rx_dbg_pmd_rx_lock_sts[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TLB_RX_DBG_PMD_RX_LOCK_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TLB_RX_DBG_PMD_RX_LOCK_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr,(_r._tlb_rx_dbg_pmd_rx_lock_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TLB_RX_DBG_PMD_RX_LOCK_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr,(_r._tlb_rx_dbg_pmd_rx_lock_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TLB_RX_DBG_PMD_RX_LOCK_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr,(_r._tlb_rx_dbg_pmd_rx_lock_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_TLB_RX_DBG_PMD_RX_LOCK_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_dbg_pmd_rx_lock_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TLB_RX_DBG_PMD_RX_LOCK_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_dbg_pmd_rx_lock_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TLB_RX_DBG_PMD_RX_LOCK_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_rx_dbg_pmd_rx_lock_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TLB_RX_DBG_PMD_RX_LOCK_STSr BCMI_TSCF_GEN3_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr
#define TLB_RX_DBG_PMD_RX_LOCK_STSr_SIZE BCMI_TSCF_GEN3_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr_t TLB_RX_DBG_PMD_RX_LOCK_STSr_t;
#define TLB_RX_DBG_PMD_RX_LOCK_STSr_CLR BCMI_TSCF_GEN3_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr_CLR
#define TLB_RX_DBG_PMD_RX_LOCK_STSr_SET BCMI_TSCF_GEN3_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr_SET
#define TLB_RX_DBG_PMD_RX_LOCK_STSr_GET BCMI_TSCF_GEN3_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr_GET
#define TLB_RX_DBG_PMD_RX_LOCK_STSr_DBG_PMD_RX_LOCK_CHANGEf_GET BCMI_TSCF_GEN3_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr_DBG_PMD_RX_LOCK_CHANGEf_GET
#define TLB_RX_DBG_PMD_RX_LOCK_STSr_DBG_PMD_RX_LOCK_CHANGEf_SET BCMI_TSCF_GEN3_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr_DBG_PMD_RX_LOCK_CHANGEf_SET
#define TLB_RX_DBG_PMD_RX_LOCK_STSr_DBG_PMD_RX_LOCKf_GET BCMI_TSCF_GEN3_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr_DBG_PMD_RX_LOCKf_GET
#define TLB_RX_DBG_PMD_RX_LOCK_STSr_DBG_PMD_RX_LOCKf_SET BCMI_TSCF_GEN3_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr_DBG_PMD_RX_LOCKf_SET
#define READ_TLB_RX_DBG_PMD_RX_LOCK_STSr BCMI_TSCF_GEN3_XGXS_READ_TLB_RX_DBG_PMD_RX_LOCK_STSr
#define WRITE_TLB_RX_DBG_PMD_RX_LOCK_STSr BCMI_TSCF_GEN3_XGXS_WRITE_TLB_RX_DBG_PMD_RX_LOCK_STSr
#define MODIFY_TLB_RX_DBG_PMD_RX_LOCK_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_TLB_RX_DBG_PMD_RX_LOCK_STSr
#define READLN_TLB_RX_DBG_PMD_RX_LOCK_STSr BCMI_TSCF_GEN3_XGXS_READLN_TLB_RX_DBG_PMD_RX_LOCK_STSr
#define WRITELN_TLB_RX_DBG_PMD_RX_LOCK_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_TLB_RX_DBG_PMD_RX_LOCK_STSr
#define WRITEALL_TLB_RX_DBG_PMD_RX_LOCK_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_TLB_RX_DBG_PMD_RX_LOCK_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TLB_RX_UC_PMD_RX_LOCK_STS
 * BLOCKS:   TLB_RX
 * REGADDR:  0xd167
 * DEVAD:    1
 * DESC:     Debug PMD RX LOCK Status
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     UC_PMD_RX_LOCK   Debug PMD RX LOCK Indication. This is a live indication of the status of the pmd_rx_lock output port.1 => PMD is in LOCKED state and RX PCS data should have acceptable BER.0 => PMD is not LOCKED yet.
 *     UC_PMD_RX_LOCK_CHANGE Set to 1'b1 when change/transition on PMD RX LOCK. This is a sticky bit and cleared upon read. This is a debug register.
 */
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr (0x0001d167 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr_SIZE 4

/*
 * This structure should be used to declare and program TLB_RX_UC_PMD_RX_LOCK_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr_s {
	uint32_t v[1];
	uint32_t tlb_rx_uc_pmd_rx_lock_sts[1];
	uint32_t _tlb_rx_uc_pmd_rx_lock_sts;
} BCMI_TSCF_GEN3_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr_CLR(r) (r).tlb_rx_uc_pmd_rx_lock_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr_SET(r,d) (r).tlb_rx_uc_pmd_rx_lock_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr_GET(r) (r).tlb_rx_uc_pmd_rx_lock_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr_UC_PMD_RX_LOCK_CHANGEf_GET(r) ((((r).tlb_rx_uc_pmd_rx_lock_sts[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr_UC_PMD_RX_LOCK_CHANGEf_SET(r,f) (r).tlb_rx_uc_pmd_rx_lock_sts[0]=(((r).tlb_rx_uc_pmd_rx_lock_sts[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr_UC_PMD_RX_LOCKf_GET(r) (((r).tlb_rx_uc_pmd_rx_lock_sts[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr_UC_PMD_RX_LOCKf_SET(r,f) (r).tlb_rx_uc_pmd_rx_lock_sts[0]=(((r).tlb_rx_uc_pmd_rx_lock_sts[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TLB_RX_UC_PMD_RX_LOCK_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TLB_RX_UC_PMD_RX_LOCK_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr,(_r._tlb_rx_uc_pmd_rx_lock_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TLB_RX_UC_PMD_RX_LOCK_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr,(_r._tlb_rx_uc_pmd_rx_lock_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TLB_RX_UC_PMD_RX_LOCK_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr,(_r._tlb_rx_uc_pmd_rx_lock_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_TLB_RX_UC_PMD_RX_LOCK_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_uc_pmd_rx_lock_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TLB_RX_UC_PMD_RX_LOCK_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_uc_pmd_rx_lock_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TLB_RX_UC_PMD_RX_LOCK_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_rx_uc_pmd_rx_lock_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TLB_RX_UC_PMD_RX_LOCK_STSr BCMI_TSCF_GEN3_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr
#define TLB_RX_UC_PMD_RX_LOCK_STSr_SIZE BCMI_TSCF_GEN3_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr_t TLB_RX_UC_PMD_RX_LOCK_STSr_t;
#define TLB_RX_UC_PMD_RX_LOCK_STSr_CLR BCMI_TSCF_GEN3_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr_CLR
#define TLB_RX_UC_PMD_RX_LOCK_STSr_SET BCMI_TSCF_GEN3_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr_SET
#define TLB_RX_UC_PMD_RX_LOCK_STSr_GET BCMI_TSCF_GEN3_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr_GET
#define TLB_RX_UC_PMD_RX_LOCK_STSr_UC_PMD_RX_LOCK_CHANGEf_GET BCMI_TSCF_GEN3_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr_UC_PMD_RX_LOCK_CHANGEf_GET
#define TLB_RX_UC_PMD_RX_LOCK_STSr_UC_PMD_RX_LOCK_CHANGEf_SET BCMI_TSCF_GEN3_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr_UC_PMD_RX_LOCK_CHANGEf_SET
#define TLB_RX_UC_PMD_RX_LOCK_STSr_UC_PMD_RX_LOCKf_GET BCMI_TSCF_GEN3_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr_UC_PMD_RX_LOCKf_GET
#define TLB_RX_UC_PMD_RX_LOCK_STSr_UC_PMD_RX_LOCKf_SET BCMI_TSCF_GEN3_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr_UC_PMD_RX_LOCKf_SET
#define READ_TLB_RX_UC_PMD_RX_LOCK_STSr BCMI_TSCF_GEN3_XGXS_READ_TLB_RX_UC_PMD_RX_LOCK_STSr
#define WRITE_TLB_RX_UC_PMD_RX_LOCK_STSr BCMI_TSCF_GEN3_XGXS_WRITE_TLB_RX_UC_PMD_RX_LOCK_STSr
#define MODIFY_TLB_RX_UC_PMD_RX_LOCK_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_TLB_RX_UC_PMD_RX_LOCK_STSr
#define READLN_TLB_RX_UC_PMD_RX_LOCK_STSr BCMI_TSCF_GEN3_XGXS_READLN_TLB_RX_UC_PMD_RX_LOCK_STSr
#define WRITELN_TLB_RX_UC_PMD_RX_LOCK_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_TLB_RX_UC_PMD_RX_LOCK_STSr
#define WRITEALL_TLB_RX_UC_PMD_RX_LOCK_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_TLB_RX_UC_PMD_RX_LOCK_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TLB_RX_DIG_LPBK_PD_STS
 * BLOCKS:   TLB_RX
 * REGADDR:  0xd168
 * DEVAD:    1
 * DESC:     Digital Loopback Status
 * RESETVAL: 0x2 (2)
 * ACCESS:   R/O
 * FIELDS:
 *     DIG_LPBK_PD_LATE_IND 1 means dp_rclk20 is sampling data late so reduce the delay of the dp_rclk20 clock phase. This will result in RX PI phase step decrement.
 *     DIG_LPBK_PD_EARLY_IND 1 means dp_rclk20 is sampling data earlier so delay the dp_rclk20 clock phase. This will result in RX PI phase step increment.
 */
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_PD_STSr (0x0001d168 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_PD_STSr_SIZE 4

/*
 * This structure should be used to declare and program TLB_RX_DIG_LPBK_PD_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_PD_STSr_s {
	uint32_t v[1];
	uint32_t tlb_rx_dig_lpbk_pd_sts[1];
	uint32_t _tlb_rx_dig_lpbk_pd_sts;
} BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_PD_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_PD_STSr_CLR(r) (r).tlb_rx_dig_lpbk_pd_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_PD_STSr_SET(r,d) (r).tlb_rx_dig_lpbk_pd_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_PD_STSr_GET(r) (r).tlb_rx_dig_lpbk_pd_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_PD_STSr_DIG_LPBK_PD_EARLY_INDf_GET(r) ((((r).tlb_rx_dig_lpbk_pd_sts[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_PD_STSr_DIG_LPBK_PD_EARLY_INDf_SET(r,f) (r).tlb_rx_dig_lpbk_pd_sts[0]=(((r).tlb_rx_dig_lpbk_pd_sts[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_PD_STSr_DIG_LPBK_PD_LATE_INDf_GET(r) (((r).tlb_rx_dig_lpbk_pd_sts[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_PD_STSr_DIG_LPBK_PD_LATE_INDf_SET(r,f) (r).tlb_rx_dig_lpbk_pd_sts[0]=(((r).tlb_rx_dig_lpbk_pd_sts[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TLB_RX_DIG_LPBK_PD_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TLB_RX_DIG_LPBK_PD_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_PD_STSr,(_r._tlb_rx_dig_lpbk_pd_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TLB_RX_DIG_LPBK_PD_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_PD_STSr,(_r._tlb_rx_dig_lpbk_pd_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TLB_RX_DIG_LPBK_PD_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_PD_STSr,(_r._tlb_rx_dig_lpbk_pd_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_TLB_RX_DIG_LPBK_PD_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_PD_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_dig_lpbk_pd_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TLB_RX_DIG_LPBK_PD_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_PD_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_dig_lpbk_pd_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TLB_RX_DIG_LPBK_PD_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_PD_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_rx_dig_lpbk_pd_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TLB_RX_DIG_LPBK_PD_STSr BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_PD_STSr
#define TLB_RX_DIG_LPBK_PD_STSr_SIZE BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_PD_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_PD_STSr_t TLB_RX_DIG_LPBK_PD_STSr_t;
#define TLB_RX_DIG_LPBK_PD_STSr_CLR BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_PD_STSr_CLR
#define TLB_RX_DIG_LPBK_PD_STSr_SET BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_PD_STSr_SET
#define TLB_RX_DIG_LPBK_PD_STSr_GET BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_PD_STSr_GET
#define TLB_RX_DIG_LPBK_PD_STSr_DIG_LPBK_PD_EARLY_INDf_GET BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_PD_STSr_DIG_LPBK_PD_EARLY_INDf_GET
#define TLB_RX_DIG_LPBK_PD_STSr_DIG_LPBK_PD_EARLY_INDf_SET BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_PD_STSr_DIG_LPBK_PD_EARLY_INDf_SET
#define TLB_RX_DIG_LPBK_PD_STSr_DIG_LPBK_PD_LATE_INDf_GET BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_PD_STSr_DIG_LPBK_PD_LATE_INDf_GET
#define TLB_RX_DIG_LPBK_PD_STSr_DIG_LPBK_PD_LATE_INDf_SET BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_PD_STSr_DIG_LPBK_PD_LATE_INDf_SET
#define READ_TLB_RX_DIG_LPBK_PD_STSr BCMI_TSCF_GEN3_XGXS_READ_TLB_RX_DIG_LPBK_PD_STSr
#define WRITE_TLB_RX_DIG_LPBK_PD_STSr BCMI_TSCF_GEN3_XGXS_WRITE_TLB_RX_DIG_LPBK_PD_STSr
#define MODIFY_TLB_RX_DIG_LPBK_PD_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_TLB_RX_DIG_LPBK_PD_STSr
#define READLN_TLB_RX_DIG_LPBK_PD_STSr BCMI_TSCF_GEN3_XGXS_READLN_TLB_RX_DIG_LPBK_PD_STSr
#define WRITELN_TLB_RX_DIG_LPBK_PD_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_TLB_RX_DIG_LPBK_PD_STSr
#define WRITEALL_TLB_RX_DIG_LPBK_PD_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_TLB_RX_DIG_LPBK_PD_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TLB_RX_DIG_LPBK_PD_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TLB_RX_PRBS_CHK_LOCK_STS
 * BLOCKS:   TLB_RX
 * REGADDR:  0xd169
 * DEVAD:    1
 * DESC:     PRBS Checker LOCK Status
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     PRBS_CHK_LOCK    PRBS Checker LOCK Indication. This is a live indication of the status of the PRBS Checker state machine.1 => PRBS Checker is in LOCKED state.0 => PRBS Checker is out of LOCK state and state machine is searching for a LOCK.
 *     PRBS_CHK_ERR_CNT_NO_CLR PRBS Checker Error Counter which does not get cleared upon read.MSB bit 14 is OR of the MSB bits [30:14] of the internal error counter.LSB bits [13:0] are assigned to LSB bits [13:0] of the internal error counter.It can be cleared by reading the status register prbs_chk_err_cnt_msb.
 */
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr (0x0001d169 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr_SIZE 4

/*
 * This structure should be used to declare and program TLB_RX_PRBS_CHK_LOCK_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr_s {
	uint32_t v[1];
	uint32_t tlb_rx_prbs_chk_lock_sts[1];
	uint32_t _tlb_rx_prbs_chk_lock_sts;
} BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr_CLR(r) (r).tlb_rx_prbs_chk_lock_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr_SET(r,d) (r).tlb_rx_prbs_chk_lock_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr_GET(r) (r).tlb_rx_prbs_chk_lock_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr_PRBS_CHK_ERR_CNT_NO_CLRf_GET(r) ((((r).tlb_rx_prbs_chk_lock_sts[0]) >> 1) & 0x7fff)
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr_PRBS_CHK_ERR_CNT_NO_CLRf_SET(r,f) (r).tlb_rx_prbs_chk_lock_sts[0]=(((r).tlb_rx_prbs_chk_lock_sts[0] & ~((uint32_t)0x7fff << 1)) | ((((uint32_t)f) & 0x7fff) << 1)) | (32767 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr_PRBS_CHK_LOCKf_GET(r) (((r).tlb_rx_prbs_chk_lock_sts[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr_PRBS_CHK_LOCKf_SET(r,f) (r).tlb_rx_prbs_chk_lock_sts[0]=(((r).tlb_rx_prbs_chk_lock_sts[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TLB_RX_PRBS_CHK_LOCK_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TLB_RX_PRBS_CHK_LOCK_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr,(_r._tlb_rx_prbs_chk_lock_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TLB_RX_PRBS_CHK_LOCK_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr,(_r._tlb_rx_prbs_chk_lock_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TLB_RX_PRBS_CHK_LOCK_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr,(_r._tlb_rx_prbs_chk_lock_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_TLB_RX_PRBS_CHK_LOCK_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_prbs_chk_lock_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TLB_RX_PRBS_CHK_LOCK_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_prbs_chk_lock_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TLB_RX_PRBS_CHK_LOCK_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_rx_prbs_chk_lock_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TLB_RX_PRBS_CHK_LOCK_STSr BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr
#define TLB_RX_PRBS_CHK_LOCK_STSr_SIZE BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr_t TLB_RX_PRBS_CHK_LOCK_STSr_t;
#define TLB_RX_PRBS_CHK_LOCK_STSr_CLR BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr_CLR
#define TLB_RX_PRBS_CHK_LOCK_STSr_SET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr_SET
#define TLB_RX_PRBS_CHK_LOCK_STSr_GET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr_GET
#define TLB_RX_PRBS_CHK_LOCK_STSr_PRBS_CHK_ERR_CNT_NO_CLRf_GET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr_PRBS_CHK_ERR_CNT_NO_CLRf_GET
#define TLB_RX_PRBS_CHK_LOCK_STSr_PRBS_CHK_ERR_CNT_NO_CLRf_SET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr_PRBS_CHK_ERR_CNT_NO_CLRf_SET
#define TLB_RX_PRBS_CHK_LOCK_STSr_PRBS_CHK_LOCKf_GET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr_PRBS_CHK_LOCKf_GET
#define TLB_RX_PRBS_CHK_LOCK_STSr_PRBS_CHK_LOCKf_SET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr_PRBS_CHK_LOCKf_SET
#define READ_TLB_RX_PRBS_CHK_LOCK_STSr BCMI_TSCF_GEN3_XGXS_READ_TLB_RX_PRBS_CHK_LOCK_STSr
#define WRITE_TLB_RX_PRBS_CHK_LOCK_STSr BCMI_TSCF_GEN3_XGXS_WRITE_TLB_RX_PRBS_CHK_LOCK_STSr
#define MODIFY_TLB_RX_PRBS_CHK_LOCK_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_TLB_RX_PRBS_CHK_LOCK_STSr
#define READLN_TLB_RX_PRBS_CHK_LOCK_STSr BCMI_TSCF_GEN3_XGXS_READLN_TLB_RX_PRBS_CHK_LOCK_STSr
#define WRITELN_TLB_RX_PRBS_CHK_LOCK_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_TLB_RX_PRBS_CHK_LOCK_STSr
#define WRITEALL_TLB_RX_PRBS_CHK_LOCK_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_TLB_RX_PRBS_CHK_LOCK_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS
 * BLOCKS:   TLB_RX
 * REGADDR:  0xd16a
 * DEVAD:    1
 * DESC:     PRBS Checker Error Counter MSB Status
 * RESETVAL: 0x8000 (32768)
 * ACCESS:   R/O
 * FIELDS:
 *     PRBS_CHK_ERR_CNT_MSB 15 bits MSB portion of PRBS Checker Error Counter Status Register. It is a clear on read register.Once MSB bits [30:16] of the counter are read then LSB bits [15:0] of the error counter is loadedinto a holding register and internal PRBS error counter's all bits are cleared to 0s(or if there are any error in that particular clock cycle then that will be loaded).MSB portion must be read first before reading the LSB portion of the error counter.
 *     PRBS_CHK_LOCK_LOST_LH PRBS Checker LOCK_LOST Latch High Indication. This register captures the 1->0 transition on theprbs_chk_lock live status register and keep it latched until read. This is a clear on read status register.prbs_chk_lock_lost_lh status bit also indicate other PRBS checker states as below.- PRBS Checker is currently not enabled ||- PRBS Checker is currently not locked ||- PRBS_LOCK was lost when checker was enabled since the last read
 */
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr (0x0001d16a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_SIZE 4

/*
 * This structure should be used to declare and program TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_s {
	uint32_t v[1];
	uint32_t tlb_rx_prbs_chk_err_cnt_msb_sts[1];
	uint32_t _tlb_rx_prbs_chk_err_cnt_msb_sts;
} BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_CLR(r) (r).tlb_rx_prbs_chk_err_cnt_msb_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_SET(r,d) (r).tlb_rx_prbs_chk_err_cnt_msb_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_GET(r) (r).tlb_rx_prbs_chk_err_cnt_msb_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_PRBS_CHK_LOCK_LOST_LHf_GET(r) ((((r).tlb_rx_prbs_chk_err_cnt_msb_sts[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_PRBS_CHK_LOCK_LOST_LHf_SET(r,f) (r).tlb_rx_prbs_chk_err_cnt_msb_sts[0]=(((r).tlb_rx_prbs_chk_err_cnt_msb_sts[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_PRBS_CHK_ERR_CNT_MSBf_GET(r) (((r).tlb_rx_prbs_chk_err_cnt_msb_sts[0]) & 0x7fff)
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_PRBS_CHK_ERR_CNT_MSBf_SET(r,f) (r).tlb_rx_prbs_chk_err_cnt_msb_sts[0]=(((r).tlb_rx_prbs_chk_err_cnt_msb_sts[0] & ~((uint32_t)0x7fff)) | (((uint32_t)f) & 0x7fff)) | (0x7fff << 16)

/*
 * These macros can be used to access TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr,(_r._tlb_rx_prbs_chk_err_cnt_msb_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr,(_r._tlb_rx_prbs_chk_err_cnt_msb_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr,(_r._tlb_rx_prbs_chk_err_cnt_msb_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_prbs_chk_err_cnt_msb_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_prbs_chk_err_cnt_msb_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_rx_prbs_chk_err_cnt_msb_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr
#define TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_SIZE BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_t TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_t;
#define TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_CLR BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_CLR
#define TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_SET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_SET
#define TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_GET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_GET
#define TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_PRBS_CHK_LOCK_LOST_LHf_GET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_PRBS_CHK_LOCK_LOST_LHf_GET
#define TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_PRBS_CHK_LOCK_LOST_LHf_SET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_PRBS_CHK_LOCK_LOST_LHf_SET
#define TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_PRBS_CHK_ERR_CNT_MSBf_GET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_PRBS_CHK_ERR_CNT_MSBf_GET
#define TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_PRBS_CHK_ERR_CNT_MSBf_SET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_PRBS_CHK_ERR_CNT_MSBf_SET
#define READ_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr BCMI_TSCF_GEN3_XGXS_READ_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr
#define WRITE_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr BCMI_TSCF_GEN3_XGXS_WRITE_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr
#define MODIFY_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr
#define READLN_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr BCMI_TSCF_GEN3_XGXS_READLN_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr
#define WRITELN_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr
#define WRITEALL_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS
 * BLOCKS:   TLB_RX
 * REGADDR:  0xd16b
 * DEVAD:    1
 * DESC:     PRBS Checker Error Counter LSB Status
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     PRBS_CHK_ERR_CNT_LSB 16 bits LSB portion of PRBS Checker Error Counter Status Register. This register indicatesthe value in the holding register when MSB portion [30:16] of the error counter are read.MSB portion must be read first before reading the LSB portion of the error counter.
 */
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr (0x0001d16b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr_SIZE 4

/*
 * This structure should be used to declare and program TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr_s {
	uint32_t v[1];
	uint32_t tlb_rx_prbs_chk_err_cnt_lsb_sts[1];
	uint32_t _tlb_rx_prbs_chk_err_cnt_lsb_sts;
} BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr_CLR(r) (r).tlb_rx_prbs_chk_err_cnt_lsb_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr_SET(r,d) (r).tlb_rx_prbs_chk_err_cnt_lsb_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr_GET(r) (r).tlb_rx_prbs_chk_err_cnt_lsb_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr_PRBS_CHK_ERR_CNT_LSBf_GET(r) (((r).tlb_rx_prbs_chk_err_cnt_lsb_sts[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr_PRBS_CHK_ERR_CNT_LSBf_SET(r,f) (r).tlb_rx_prbs_chk_err_cnt_lsb_sts[0]=(((r).tlb_rx_prbs_chk_err_cnt_lsb_sts[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr,(_r._tlb_rx_prbs_chk_err_cnt_lsb_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr,(_r._tlb_rx_prbs_chk_err_cnt_lsb_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr,(_r._tlb_rx_prbs_chk_err_cnt_lsb_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_prbs_chk_err_cnt_lsb_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_prbs_chk_err_cnt_lsb_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_rx_prbs_chk_err_cnt_lsb_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr
#define TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr_SIZE BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr_t TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr_t;
#define TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr_CLR BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr_CLR
#define TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr_SET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr_SET
#define TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr_GET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr_GET
#define TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr_PRBS_CHK_ERR_CNT_LSBf_GET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr_PRBS_CHK_ERR_CNT_LSBf_GET
#define TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr_PRBS_CHK_ERR_CNT_LSBf_SET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr_PRBS_CHK_ERR_CNT_LSBf_SET
#define READ_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr BCMI_TSCF_GEN3_XGXS_READ_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr
#define WRITE_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr BCMI_TSCF_GEN3_XGXS_WRITE_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr
#define MODIFY_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr
#define READLN_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr BCMI_TSCF_GEN3_XGXS_READLN_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr
#define WRITELN_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr
#define WRITEALL_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TLB_RX_PMD_RX_LOCK_STS
 * BLOCKS:   TLB_RX
 * REGADDR:  0xd16c
 * DEVAD:    1
 * DESC:     PMD RX LOCK Status
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     PMD_RX_LOCK      PMD RX LOCK Indication. This is a live indication of the status of the pmd_rx_lock output port.1 => PMD is in LOCKED state and RX PCS data should have acceptable BER.0 => PMD is not LOCKED yet.
 *     PMD_RX_LOCK_CHANGE Set to 1'b1 when change/transition on PMD RX LOCK. This is a sticky bit and cleared upon read.
 */
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PMD_RX_LOCK_STSr (0x0001d16c | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PMD_RX_LOCK_STSr_SIZE 4

/*
 * This structure should be used to declare and program TLB_RX_PMD_RX_LOCK_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TLB_RX_PMD_RX_LOCK_STSr_s {
	uint32_t v[1];
	uint32_t tlb_rx_pmd_rx_lock_sts[1];
	uint32_t _tlb_rx_pmd_rx_lock_sts;
} BCMI_TSCF_GEN3_XGXS_TLB_RX_PMD_RX_LOCK_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PMD_RX_LOCK_STSr_CLR(r) (r).tlb_rx_pmd_rx_lock_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PMD_RX_LOCK_STSr_SET(r,d) (r).tlb_rx_pmd_rx_lock_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PMD_RX_LOCK_STSr_GET(r) (r).tlb_rx_pmd_rx_lock_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PMD_RX_LOCK_STSr_PMD_RX_LOCK_CHANGEf_GET(r) ((((r).tlb_rx_pmd_rx_lock_sts[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PMD_RX_LOCK_STSr_PMD_RX_LOCK_CHANGEf_SET(r,f) (r).tlb_rx_pmd_rx_lock_sts[0]=(((r).tlb_rx_pmd_rx_lock_sts[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PMD_RX_LOCK_STSr_PMD_RX_LOCKf_GET(r) (((r).tlb_rx_pmd_rx_lock_sts[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PMD_RX_LOCK_STSr_PMD_RX_LOCKf_SET(r,f) (r).tlb_rx_pmd_rx_lock_sts[0]=(((r).tlb_rx_pmd_rx_lock_sts[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TLB_RX_PMD_RX_LOCK_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TLB_RX_PMD_RX_LOCK_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PMD_RX_LOCK_STSr,(_r._tlb_rx_pmd_rx_lock_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TLB_RX_PMD_RX_LOCK_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PMD_RX_LOCK_STSr,(_r._tlb_rx_pmd_rx_lock_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TLB_RX_PMD_RX_LOCK_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PMD_RX_LOCK_STSr,(_r._tlb_rx_pmd_rx_lock_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_TLB_RX_PMD_RX_LOCK_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PMD_RX_LOCK_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_pmd_rx_lock_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TLB_RX_PMD_RX_LOCK_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PMD_RX_LOCK_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_pmd_rx_lock_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TLB_RX_PMD_RX_LOCK_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PMD_RX_LOCK_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_rx_pmd_rx_lock_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TLB_RX_PMD_RX_LOCK_STSr BCMI_TSCF_GEN3_XGXS_TLB_RX_PMD_RX_LOCK_STSr
#define TLB_RX_PMD_RX_LOCK_STSr_SIZE BCMI_TSCF_GEN3_XGXS_TLB_RX_PMD_RX_LOCK_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TLB_RX_PMD_RX_LOCK_STSr_t TLB_RX_PMD_RX_LOCK_STSr_t;
#define TLB_RX_PMD_RX_LOCK_STSr_CLR BCMI_TSCF_GEN3_XGXS_TLB_RX_PMD_RX_LOCK_STSr_CLR
#define TLB_RX_PMD_RX_LOCK_STSr_SET BCMI_TSCF_GEN3_XGXS_TLB_RX_PMD_RX_LOCK_STSr_SET
#define TLB_RX_PMD_RX_LOCK_STSr_GET BCMI_TSCF_GEN3_XGXS_TLB_RX_PMD_RX_LOCK_STSr_GET
#define TLB_RX_PMD_RX_LOCK_STSr_PMD_RX_LOCK_CHANGEf_GET BCMI_TSCF_GEN3_XGXS_TLB_RX_PMD_RX_LOCK_STSr_PMD_RX_LOCK_CHANGEf_GET
#define TLB_RX_PMD_RX_LOCK_STSr_PMD_RX_LOCK_CHANGEf_SET BCMI_TSCF_GEN3_XGXS_TLB_RX_PMD_RX_LOCK_STSr_PMD_RX_LOCK_CHANGEf_SET
#define TLB_RX_PMD_RX_LOCK_STSr_PMD_RX_LOCKf_GET BCMI_TSCF_GEN3_XGXS_TLB_RX_PMD_RX_LOCK_STSr_PMD_RX_LOCKf_GET
#define TLB_RX_PMD_RX_LOCK_STSr_PMD_RX_LOCKf_SET BCMI_TSCF_GEN3_XGXS_TLB_RX_PMD_RX_LOCK_STSr_PMD_RX_LOCKf_SET
#define READ_TLB_RX_PMD_RX_LOCK_STSr BCMI_TSCF_GEN3_XGXS_READ_TLB_RX_PMD_RX_LOCK_STSr
#define WRITE_TLB_RX_PMD_RX_LOCK_STSr BCMI_TSCF_GEN3_XGXS_WRITE_TLB_RX_PMD_RX_LOCK_STSr
#define MODIFY_TLB_RX_PMD_RX_LOCK_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_TLB_RX_PMD_RX_LOCK_STSr
#define READLN_TLB_RX_PMD_RX_LOCK_STSr BCMI_TSCF_GEN3_XGXS_READLN_TLB_RX_PMD_RX_LOCK_STSr
#define WRITELN_TLB_RX_PMD_RX_LOCK_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_TLB_RX_PMD_RX_LOCK_STSr
#define WRITEALL_TLB_RX_PMD_RX_LOCK_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_TLB_RX_PMD_RX_LOCK_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TLB_RX_PMD_RX_LOCK_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TLB_RX_PRBS_BURST_ERR_LEN_STS
 * BLOCKS:   TLB_RX
 * REGADDR:  0xd16d
 * DEVAD:    1
 * DESC:     PRBS Burst Error Length Status
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     PRBS_BURST_ERR_LENGTH_STATUS PRBS burst error length count. This the live indication of the live status of the PRBS burst error length and max at 6'd63. This register is cleared upon read.This register is only supported for OSR modes OS1, OS2 and OS4.
 */
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STSr (0x0001d16d | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STSr_SIZE 4

/*
 * This structure should be used to declare and program TLB_RX_PRBS_BURST_ERR_LEN_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STSr_s {
	uint32_t v[1];
	uint32_t tlb_rx_prbs_burst_err_len_sts[1];
	uint32_t _tlb_rx_prbs_burst_err_len_sts;
} BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STSr_CLR(r) (r).tlb_rx_prbs_burst_err_len_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STSr_SET(r,d) (r).tlb_rx_prbs_burst_err_len_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STSr_GET(r) (r).tlb_rx_prbs_burst_err_len_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STSr_PRBS_BURST_ERR_LENGTH_STATUSf_GET(r) (((r).tlb_rx_prbs_burst_err_len_sts[0]) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STSr_PRBS_BURST_ERR_LENGTH_STATUSf_SET(r,f) (r).tlb_rx_prbs_burst_err_len_sts[0]=(((r).tlb_rx_prbs_burst_err_len_sts[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access TLB_RX_PRBS_BURST_ERR_LEN_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TLB_RX_PRBS_BURST_ERR_LEN_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STSr,(_r._tlb_rx_prbs_burst_err_len_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TLB_RX_PRBS_BURST_ERR_LEN_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STSr,(_r._tlb_rx_prbs_burst_err_len_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TLB_RX_PRBS_BURST_ERR_LEN_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STSr,(_r._tlb_rx_prbs_burst_err_len_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_TLB_RX_PRBS_BURST_ERR_LEN_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_prbs_burst_err_len_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TLB_RX_PRBS_BURST_ERR_LEN_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_prbs_burst_err_len_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TLB_RX_PRBS_BURST_ERR_LEN_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_rx_prbs_burst_err_len_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TLB_RX_PRBS_BURST_ERR_LEN_STSr BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STSr
#define TLB_RX_PRBS_BURST_ERR_LEN_STSr_SIZE BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STSr_t TLB_RX_PRBS_BURST_ERR_LEN_STSr_t;
#define TLB_RX_PRBS_BURST_ERR_LEN_STSr_CLR BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STSr_CLR
#define TLB_RX_PRBS_BURST_ERR_LEN_STSr_SET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STSr_SET
#define TLB_RX_PRBS_BURST_ERR_LEN_STSr_GET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STSr_GET
#define TLB_RX_PRBS_BURST_ERR_LEN_STSr_PRBS_BURST_ERR_LENGTH_STATUSf_GET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STSr_PRBS_BURST_ERR_LENGTH_STATUSf_GET
#define TLB_RX_PRBS_BURST_ERR_LEN_STSr_PRBS_BURST_ERR_LENGTH_STATUSf_SET BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STSr_PRBS_BURST_ERR_LENGTH_STATUSf_SET
#define READ_TLB_RX_PRBS_BURST_ERR_LEN_STSr BCMI_TSCF_GEN3_XGXS_READ_TLB_RX_PRBS_BURST_ERR_LEN_STSr
#define WRITE_TLB_RX_PRBS_BURST_ERR_LEN_STSr BCMI_TSCF_GEN3_XGXS_WRITE_TLB_RX_PRBS_BURST_ERR_LEN_STSr
#define MODIFY_TLB_RX_PRBS_BURST_ERR_LEN_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_TLB_RX_PRBS_BURST_ERR_LEN_STSr
#define READLN_TLB_RX_PRBS_BURST_ERR_LEN_STSr BCMI_TSCF_GEN3_XGXS_READLN_TLB_RX_PRBS_BURST_ERR_LEN_STSr
#define WRITELN_TLB_RX_PRBS_BURST_ERR_LEN_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_TLB_RX_PRBS_BURST_ERR_LEN_STSr
#define WRITEALL_TLB_RX_PRBS_BURST_ERR_LEN_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_TLB_RX_PRBS_BURST_ERR_LEN_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS
 * BLOCKS:   TLB_RX
 * REGADDR:  0xd16e
 * DEVAD:    1
 * DESC:     PRBS Burst Error Maximum Length Status
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MAX_PRBS_BURST_ERR_LENGTH_STATUS PRBS burst error max length count. This the status of the PRBS burst error max length and max at 6'd63. This register is cleared upon read.This register is only supported for OSR modes OS1, OS2 and OS4.
 */
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr (0x0001d16e | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr_SIZE 4

/*
 * This structure should be used to declare and program TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr_s {
	uint32_t v[1];
	uint32_t tlb_rx_max_prbs_burst_err_len_sts[1];
	uint32_t _tlb_rx_max_prbs_burst_err_len_sts;
} BCMI_TSCF_GEN3_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr_CLR(r) (r).tlb_rx_max_prbs_burst_err_len_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr_SET(r,d) (r).tlb_rx_max_prbs_burst_err_len_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr_GET(r) (r).tlb_rx_max_prbs_burst_err_len_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr_MAX_PRBS_BURST_ERR_LENGTH_STATUSf_GET(r) (((r).tlb_rx_max_prbs_burst_err_len_sts[0]) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr_MAX_PRBS_BURST_ERR_LENGTH_STATUSf_SET(r,f) (r).tlb_rx_max_prbs_burst_err_len_sts[0]=(((r).tlb_rx_max_prbs_burst_err_len_sts[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr,(_r._tlb_rx_max_prbs_burst_err_len_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr,(_r._tlb_rx_max_prbs_burst_err_len_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr,(_r._tlb_rx_max_prbs_burst_err_len_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_max_prbs_burst_err_len_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_max_prbs_burst_err_len_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_rx_max_prbs_burst_err_len_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr BCMI_TSCF_GEN3_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr
#define TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr_SIZE BCMI_TSCF_GEN3_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr_t TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr_t;
#define TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr_CLR BCMI_TSCF_GEN3_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr_CLR
#define TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr_SET BCMI_TSCF_GEN3_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr_SET
#define TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr_GET BCMI_TSCF_GEN3_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr_GET
#define TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr_MAX_PRBS_BURST_ERR_LENGTH_STATUSf_GET BCMI_TSCF_GEN3_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr_MAX_PRBS_BURST_ERR_LENGTH_STATUSf_GET
#define TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr_MAX_PRBS_BURST_ERR_LENGTH_STATUSf_SET BCMI_TSCF_GEN3_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr_MAX_PRBS_BURST_ERR_LENGTH_STATUSf_SET
#define READ_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr BCMI_TSCF_GEN3_XGXS_READ_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr
#define WRITE_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr BCMI_TSCF_GEN3_XGXS_WRITE_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr
#define MODIFY_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr
#define READLN_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr BCMI_TSCF_GEN3_XGXS_READLN_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr
#define WRITELN_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr
#define WRITEALL_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TLB_TX_PATT_GEN_CFG
 * BLOCKS:   TLB_TX
 * REGADDR:  0xd170
 * DEVAD:    1
 * DESC:     Pattern Generator Control
 * RESETVAL: 0xb000 (45056)
 * ACCESS:   R/W
 * FIELDS:
 *     PATT_GEN_EN      Fixed pattern generator enable.1 => enable  the fixed pattern generator.0 => disable the fixed pattern generator.
 *     PATT_GEN_STOP_POS Valid values are 11 to 0. Defines the stop  position of the pattern in 20 bit chunks.This register value should be less than or equal to rg_patt_gen_start_pos.11 means stop at bit  220,10 means stop at bit  200, ...,0 means stop at bit    0so stop  bit is (rg_patt_gen_stop_pos*20).
 *     PATT_GEN_START_POS Valid values are 11 to 0. Defines the start position of the pattern in 20 bit chunks.11 means start at bit 239,10 means start at bit 219, ...,0 means start at bit  19so start bit is (rg_patt_gen_start_pos*20 + 19).
 */
#define BCMI_TSCF_GEN3_XGXS_TLB_TX_PATT_GEN_CFGr (0x0001d170 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TLB_TX_PATT_GEN_CFGr_SIZE 4

/*
 * This structure should be used to declare and program TLB_TX_PATT_GEN_CFG.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TLB_TX_PATT_GEN_CFGr_s {
	uint32_t v[1];
	uint32_t tlb_tx_patt_gen_cfg[1];
	uint32_t _tlb_tx_patt_gen_cfg;
} BCMI_TSCF_GEN3_XGXS_TLB_TX_PATT_GEN_CFGr_t;

#define BCMI_TSCF_GEN3_XGXS_TLB_TX_PATT_GEN_CFGr_CLR(r) (r).tlb_tx_patt_gen_cfg[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TLB_TX_PATT_GEN_CFGr_SET(r,d) (r).tlb_tx_patt_gen_cfg[0] = d
#define BCMI_TSCF_GEN3_XGXS_TLB_TX_PATT_GEN_CFGr_GET(r) (r).tlb_tx_patt_gen_cfg[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TLB_TX_PATT_GEN_CFGr_PATT_GEN_START_POSf_GET(r) ((((r).tlb_tx_patt_gen_cfg[0]) >> 12) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_TLB_TX_PATT_GEN_CFGr_PATT_GEN_START_POSf_SET(r,f) (r).tlb_tx_patt_gen_cfg[0]=(((r).tlb_tx_patt_gen_cfg[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_TLB_TX_PATT_GEN_CFGr_PATT_GEN_STOP_POSf_GET(r) ((((r).tlb_tx_patt_gen_cfg[0]) >> 8) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_TLB_TX_PATT_GEN_CFGr_PATT_GEN_STOP_POSf_SET(r,f) (r).tlb_tx_patt_gen_cfg[0]=(((r).tlb_tx_patt_gen_cfg[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_TLB_TX_PATT_GEN_CFGr_PATT_GEN_ENf_GET(r) (((r).tlb_tx_patt_gen_cfg[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TLB_TX_PATT_GEN_CFGr_PATT_GEN_ENf_SET(r,f) (r).tlb_tx_patt_gen_cfg[0]=(((r).tlb_tx_patt_gen_cfg[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TLB_TX_PATT_GEN_CFG.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TLB_TX_PATT_GEN_CFGr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TLB_TX_PATT_GEN_CFGr,(_r._tlb_tx_patt_gen_cfg))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TLB_TX_PATT_GEN_CFGr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_TX_PATT_GEN_CFGr,(_r._tlb_tx_patt_gen_cfg)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TLB_TX_PATT_GEN_CFGr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_TX_PATT_GEN_CFGr,(_r._tlb_tx_patt_gen_cfg))
#define BCMI_TSCF_GEN3_XGXS_READLN_TLB_TX_PATT_GEN_CFGr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TLB_TX_PATT_GEN_CFGr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_tx_patt_gen_cfg))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TLB_TX_PATT_GEN_CFGr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_TX_PATT_GEN_CFGr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_tx_patt_gen_cfg))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TLB_TX_PATT_GEN_CFGr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_TX_PATT_GEN_CFGr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_tx_patt_gen_cfg))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TLB_TX_PATT_GEN_CFGr BCMI_TSCF_GEN3_XGXS_TLB_TX_PATT_GEN_CFGr
#define TLB_TX_PATT_GEN_CFGr_SIZE BCMI_TSCF_GEN3_XGXS_TLB_TX_PATT_GEN_CFGr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TLB_TX_PATT_GEN_CFGr_t TLB_TX_PATT_GEN_CFGr_t;
#define TLB_TX_PATT_GEN_CFGr_CLR BCMI_TSCF_GEN3_XGXS_TLB_TX_PATT_GEN_CFGr_CLR
#define TLB_TX_PATT_GEN_CFGr_SET BCMI_TSCF_GEN3_XGXS_TLB_TX_PATT_GEN_CFGr_SET
#define TLB_TX_PATT_GEN_CFGr_GET BCMI_TSCF_GEN3_XGXS_TLB_TX_PATT_GEN_CFGr_GET
#define TLB_TX_PATT_GEN_CFGr_PATT_GEN_START_POSf_GET BCMI_TSCF_GEN3_XGXS_TLB_TX_PATT_GEN_CFGr_PATT_GEN_START_POSf_GET
#define TLB_TX_PATT_GEN_CFGr_PATT_GEN_START_POSf_SET BCMI_TSCF_GEN3_XGXS_TLB_TX_PATT_GEN_CFGr_PATT_GEN_START_POSf_SET
#define TLB_TX_PATT_GEN_CFGr_PATT_GEN_STOP_POSf_GET BCMI_TSCF_GEN3_XGXS_TLB_TX_PATT_GEN_CFGr_PATT_GEN_STOP_POSf_GET
#define TLB_TX_PATT_GEN_CFGr_PATT_GEN_STOP_POSf_SET BCMI_TSCF_GEN3_XGXS_TLB_TX_PATT_GEN_CFGr_PATT_GEN_STOP_POSf_SET
#define TLB_TX_PATT_GEN_CFGr_PATT_GEN_ENf_GET BCMI_TSCF_GEN3_XGXS_TLB_TX_PATT_GEN_CFGr_PATT_GEN_ENf_GET
#define TLB_TX_PATT_GEN_CFGr_PATT_GEN_ENf_SET BCMI_TSCF_GEN3_XGXS_TLB_TX_PATT_GEN_CFGr_PATT_GEN_ENf_SET
#define READ_TLB_TX_PATT_GEN_CFGr BCMI_TSCF_GEN3_XGXS_READ_TLB_TX_PATT_GEN_CFGr
#define WRITE_TLB_TX_PATT_GEN_CFGr BCMI_TSCF_GEN3_XGXS_WRITE_TLB_TX_PATT_GEN_CFGr
#define MODIFY_TLB_TX_PATT_GEN_CFGr BCMI_TSCF_GEN3_XGXS_MODIFY_TLB_TX_PATT_GEN_CFGr
#define READLN_TLB_TX_PATT_GEN_CFGr BCMI_TSCF_GEN3_XGXS_READLN_TLB_TX_PATT_GEN_CFGr
#define WRITELN_TLB_TX_PATT_GEN_CFGr BCMI_TSCF_GEN3_XGXS_WRITELN_TLB_TX_PATT_GEN_CFGr
#define WRITEALL_TLB_TX_PATT_GEN_CFGr BCMI_TSCF_GEN3_XGXS_WRITEALL_TLB_TX_PATT_GEN_CFGr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TLB_TX_PATT_GEN_CFGr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TLB_TX_PRBS_GEN_CFG
 * BLOCKS:   TLB_TX
 * REGADDR:  0xd171
 * DEVAD:    1
 * DESC:     PRBS Generator Control
 * RESETVAL: 0xa (10)
 * ACCESS:   R/W
 * FIELDS:
 *     PRBS_GEN_EN      PRBS generator enable.1 => enable  the PRBS generator.0 => disable the PRBS generator.
 *     PRBS_GEN_MODE_SEL PRBS generator mode select. Selects the PRBS polynomial as shown below3'd0 -> PRBS 73'd1 -> PRBS 93'd2 -> PRBS 113'd3 -> PRBS 153'd4 -> PRBS 233'd5 -> PRBS 313'd6 -> PRBS 58 (1 + x^39 + x^58)3'd7 -> reserved for future use.
 *     PRBS_GEN_INV     PRBS Invert enable.1 => will invert all the data bits from the PRBS generator.0 => will send normal data from the PRBS generator.
 *     PRBS_GEN_ERR_INS PRBS Error Insert.0 to 1 transition on this signal will insert single bit error in the MSB bit of the data bus.
 *     PRBS_GEN_MODE_SEL_MSB Extending PRBS polynomial select by using this bit as bit[3] alongwith prbs_gen_mode_sel[2:0].1'b0 will select old PRBS polynomials for PRBS 7, 9, 11, 15, 23, 31 and 58 based on prbs_gen_mode_sel[2:0].1'b1 will select new PRBS polynomials for PRBS 10 and 20 based on prbs_gen_mode_sel[2:0].1'b1 & prbs_gen_mode_sel[2:0] == 0 will select PRBS 10.1'b1 & prbs_gen_mode_sel[2:0] == 1 will select PRBS 20.
 */
#define BCMI_TSCF_GEN3_XGXS_TLB_TX_PRBS_GEN_CFGr (0x0001d171 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TLB_TX_PRBS_GEN_CFGr_SIZE 4

/*
 * This structure should be used to declare and program TLB_TX_PRBS_GEN_CFG.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TLB_TX_PRBS_GEN_CFGr_s {
	uint32_t v[1];
	uint32_t tlb_tx_prbs_gen_cfg[1];
	uint32_t _tlb_tx_prbs_gen_cfg;
} BCMI_TSCF_GEN3_XGXS_TLB_TX_PRBS_GEN_CFGr_t;

#define BCMI_TSCF_GEN3_XGXS_TLB_TX_PRBS_GEN_CFGr_CLR(r) (r).tlb_tx_prbs_gen_cfg[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TLB_TX_PRBS_GEN_CFGr_SET(r,d) (r).tlb_tx_prbs_gen_cfg[0] = d
#define BCMI_TSCF_GEN3_XGXS_TLB_TX_PRBS_GEN_CFGr_GET(r) (r).tlb_tx_prbs_gen_cfg[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_MODE_SEL_MSBf_GET(r) ((((r).tlb_tx_prbs_gen_cfg[0]) >> 12) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_MODE_SEL_MSBf_SET(r,f) (r).tlb_tx_prbs_gen_cfg[0]=(((r).tlb_tx_prbs_gen_cfg[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_ERR_INSf_GET(r) ((((r).tlb_tx_prbs_gen_cfg[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_ERR_INSf_SET(r,f) (r).tlb_tx_prbs_gen_cfg[0]=(((r).tlb_tx_prbs_gen_cfg[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_INVf_GET(r) ((((r).tlb_tx_prbs_gen_cfg[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_INVf_SET(r,f) (r).tlb_tx_prbs_gen_cfg[0]=(((r).tlb_tx_prbs_gen_cfg[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_MODE_SELf_GET(r) ((((r).tlb_tx_prbs_gen_cfg[0]) >> 1) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_MODE_SELf_SET(r,f) (r).tlb_tx_prbs_gen_cfg[0]=(((r).tlb_tx_prbs_gen_cfg[0] & ~((uint32_t)0x7 << 1)) | ((((uint32_t)f) & 0x7) << 1)) | (7 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_ENf_GET(r) (((r).tlb_tx_prbs_gen_cfg[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_ENf_SET(r,f) (r).tlb_tx_prbs_gen_cfg[0]=(((r).tlb_tx_prbs_gen_cfg[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TLB_TX_PRBS_GEN_CFG.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TLB_TX_PRBS_GEN_CFGr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TLB_TX_PRBS_GEN_CFGr,(_r._tlb_tx_prbs_gen_cfg))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TLB_TX_PRBS_GEN_CFGr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_TX_PRBS_GEN_CFGr,(_r._tlb_tx_prbs_gen_cfg)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TLB_TX_PRBS_GEN_CFGr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_TX_PRBS_GEN_CFGr,(_r._tlb_tx_prbs_gen_cfg))
#define BCMI_TSCF_GEN3_XGXS_READLN_TLB_TX_PRBS_GEN_CFGr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TLB_TX_PRBS_GEN_CFGr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_tx_prbs_gen_cfg))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TLB_TX_PRBS_GEN_CFGr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_TX_PRBS_GEN_CFGr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_tx_prbs_gen_cfg))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TLB_TX_PRBS_GEN_CFGr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_TX_PRBS_GEN_CFGr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_tx_prbs_gen_cfg))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TLB_TX_PRBS_GEN_CFGr BCMI_TSCF_GEN3_XGXS_TLB_TX_PRBS_GEN_CFGr
#define TLB_TX_PRBS_GEN_CFGr_SIZE BCMI_TSCF_GEN3_XGXS_TLB_TX_PRBS_GEN_CFGr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TLB_TX_PRBS_GEN_CFGr_t TLB_TX_PRBS_GEN_CFGr_t;
#define TLB_TX_PRBS_GEN_CFGr_CLR BCMI_TSCF_GEN3_XGXS_TLB_TX_PRBS_GEN_CFGr_CLR
#define TLB_TX_PRBS_GEN_CFGr_SET BCMI_TSCF_GEN3_XGXS_TLB_TX_PRBS_GEN_CFGr_SET
#define TLB_TX_PRBS_GEN_CFGr_GET BCMI_TSCF_GEN3_XGXS_TLB_TX_PRBS_GEN_CFGr_GET
#define TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_MODE_SEL_MSBf_GET BCMI_TSCF_GEN3_XGXS_TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_MODE_SEL_MSBf_GET
#define TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_MODE_SEL_MSBf_SET BCMI_TSCF_GEN3_XGXS_TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_MODE_SEL_MSBf_SET
#define TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_ERR_INSf_GET BCMI_TSCF_GEN3_XGXS_TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_ERR_INSf_GET
#define TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_ERR_INSf_SET BCMI_TSCF_GEN3_XGXS_TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_ERR_INSf_SET
#define TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_INVf_GET BCMI_TSCF_GEN3_XGXS_TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_INVf_GET
#define TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_INVf_SET BCMI_TSCF_GEN3_XGXS_TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_INVf_SET
#define TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_MODE_SELf_GET BCMI_TSCF_GEN3_XGXS_TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_MODE_SELf_GET
#define TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_MODE_SELf_SET BCMI_TSCF_GEN3_XGXS_TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_MODE_SELf_SET
#define TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_ENf_GET BCMI_TSCF_GEN3_XGXS_TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_ENf_GET
#define TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_ENf_SET BCMI_TSCF_GEN3_XGXS_TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_ENf_SET
#define READ_TLB_TX_PRBS_GEN_CFGr BCMI_TSCF_GEN3_XGXS_READ_TLB_TX_PRBS_GEN_CFGr
#define WRITE_TLB_TX_PRBS_GEN_CFGr BCMI_TSCF_GEN3_XGXS_WRITE_TLB_TX_PRBS_GEN_CFGr
#define MODIFY_TLB_TX_PRBS_GEN_CFGr BCMI_TSCF_GEN3_XGXS_MODIFY_TLB_TX_PRBS_GEN_CFGr
#define READLN_TLB_TX_PRBS_GEN_CFGr BCMI_TSCF_GEN3_XGXS_READLN_TLB_TX_PRBS_GEN_CFGr
#define WRITELN_TLB_TX_PRBS_GEN_CFGr BCMI_TSCF_GEN3_XGXS_WRITELN_TLB_TX_PRBS_GEN_CFGr
#define WRITEALL_TLB_TX_PRBS_GEN_CFGr BCMI_TSCF_GEN3_XGXS_WRITEALL_TLB_TX_PRBS_GEN_CFGr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TLB_TX_PRBS_GEN_CFGr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TLB_TX_RMT_LPBK_CFG
 * BLOCKS:   TLB_TX
 * REGADDR:  0xd172
 * DEVAD:    1
 * DESC:     Remote Loopback Control
 * RESETVAL: 0x2 (2)
 * ACCESS:   R/W
 * FIELDS:
 *     RMT_LPBK_EN      RX to TX Parallel Loopback (Remote Loopback) Enable.1 => Loopback is Enabled.0 => Loopback is Disabled.
 *     RMT_LPBK_PD_MODE Remote Loopback Phase Detector Mode. For normal operating conditions keep it at the default value of 1'b1.1'b0 - swap inc/dec. 1'b1 - normal mode.
 *     RMT_LPBK_PD_FRC_ON Remote loopback PD enable by force irrespective of rg_rmt_lpbk_en.1'b1 - enable the phase detector without the remote loopback enable. Can be used to lock RX and TXclock phases when there is a remote loopback outside PMD
 */
#define BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_CFGr (0x0001d172 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_CFGr_SIZE 4

/*
 * This structure should be used to declare and program TLB_TX_RMT_LPBK_CFG.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_CFGr_s {
	uint32_t v[1];
	uint32_t tlb_tx_rmt_lpbk_cfg[1];
	uint32_t _tlb_tx_rmt_lpbk_cfg;
} BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_CFGr_t;

#define BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_CFGr_CLR(r) (r).tlb_tx_rmt_lpbk_cfg[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_CFGr_SET(r,d) (r).tlb_tx_rmt_lpbk_cfg[0] = d
#define BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_CFGr_GET(r) (r).tlb_tx_rmt_lpbk_cfg[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_CFGr_RMT_LPBK_PD_FRC_ONf_GET(r) ((((r).tlb_tx_rmt_lpbk_cfg[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_CFGr_RMT_LPBK_PD_FRC_ONf_SET(r,f) (r).tlb_tx_rmt_lpbk_cfg[0]=(((r).tlb_tx_rmt_lpbk_cfg[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_CFGr_RMT_LPBK_PD_MODEf_GET(r) ((((r).tlb_tx_rmt_lpbk_cfg[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_CFGr_RMT_LPBK_PD_MODEf_SET(r,f) (r).tlb_tx_rmt_lpbk_cfg[0]=(((r).tlb_tx_rmt_lpbk_cfg[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_CFGr_RMT_LPBK_ENf_GET(r) (((r).tlb_tx_rmt_lpbk_cfg[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_CFGr_RMT_LPBK_ENf_SET(r,f) (r).tlb_tx_rmt_lpbk_cfg[0]=(((r).tlb_tx_rmt_lpbk_cfg[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TLB_TX_RMT_LPBK_CFG.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TLB_TX_RMT_LPBK_CFGr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_CFGr,(_r._tlb_tx_rmt_lpbk_cfg))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TLB_TX_RMT_LPBK_CFGr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_CFGr,(_r._tlb_tx_rmt_lpbk_cfg)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TLB_TX_RMT_LPBK_CFGr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_CFGr,(_r._tlb_tx_rmt_lpbk_cfg))
#define BCMI_TSCF_GEN3_XGXS_READLN_TLB_TX_RMT_LPBK_CFGr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_CFGr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_tx_rmt_lpbk_cfg))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TLB_TX_RMT_LPBK_CFGr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_CFGr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_tx_rmt_lpbk_cfg))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TLB_TX_RMT_LPBK_CFGr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_CFGr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_tx_rmt_lpbk_cfg))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TLB_TX_RMT_LPBK_CFGr BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_CFGr
#define TLB_TX_RMT_LPBK_CFGr_SIZE BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_CFGr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_CFGr_t TLB_TX_RMT_LPBK_CFGr_t;
#define TLB_TX_RMT_LPBK_CFGr_CLR BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_CFGr_CLR
#define TLB_TX_RMT_LPBK_CFGr_SET BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_CFGr_SET
#define TLB_TX_RMT_LPBK_CFGr_GET BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_CFGr_GET
#define TLB_TX_RMT_LPBK_CFGr_RMT_LPBK_PD_FRC_ONf_GET BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_CFGr_RMT_LPBK_PD_FRC_ONf_GET
#define TLB_TX_RMT_LPBK_CFGr_RMT_LPBK_PD_FRC_ONf_SET BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_CFGr_RMT_LPBK_PD_FRC_ONf_SET
#define TLB_TX_RMT_LPBK_CFGr_RMT_LPBK_PD_MODEf_GET BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_CFGr_RMT_LPBK_PD_MODEf_GET
#define TLB_TX_RMT_LPBK_CFGr_RMT_LPBK_PD_MODEf_SET BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_CFGr_RMT_LPBK_PD_MODEf_SET
#define TLB_TX_RMT_LPBK_CFGr_RMT_LPBK_ENf_GET BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_CFGr_RMT_LPBK_ENf_GET
#define TLB_TX_RMT_LPBK_CFGr_RMT_LPBK_ENf_SET BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_CFGr_RMT_LPBK_ENf_SET
#define READ_TLB_TX_RMT_LPBK_CFGr BCMI_TSCF_GEN3_XGXS_READ_TLB_TX_RMT_LPBK_CFGr
#define WRITE_TLB_TX_RMT_LPBK_CFGr BCMI_TSCF_GEN3_XGXS_WRITE_TLB_TX_RMT_LPBK_CFGr
#define MODIFY_TLB_TX_RMT_LPBK_CFGr BCMI_TSCF_GEN3_XGXS_MODIFY_TLB_TX_RMT_LPBK_CFGr
#define READLN_TLB_TX_RMT_LPBK_CFGr BCMI_TSCF_GEN3_XGXS_READLN_TLB_TX_RMT_LPBK_CFGr
#define WRITELN_TLB_TX_RMT_LPBK_CFGr BCMI_TSCF_GEN3_XGXS_WRITELN_TLB_TX_RMT_LPBK_CFGr
#define WRITEALL_TLB_TX_RMT_LPBK_CFGr BCMI_TSCF_GEN3_XGXS_WRITEALL_TLB_TX_RMT_LPBK_CFGr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_CFGr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TLB_TX_TLB_TX_MISC_CFG
 * BLOCKS:   TLB_TX
 * REGADDR:  0xd173
 * DEVAD:    1
 * DESC:     TLB TX Misc. Control
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TX_PMD_DP_INVERT TX PMD Datapath Invert Control.When Enabled by writing to 1'b1, it will invert all the datapath bits of the logical lane.Recommended for use in case P and N pads are swapped on the PCB board.
 *     TX_PCS_NATIVE_ANA_FRMT_EN TX PCS Interface Native Analog Format Enable.1 => TX PCS Interface is enabled in the Native Analog Format mode. TX PCS sends the over-sampled data in this mode which is sent directly to AFE.0 => Raw Data Mode where for every data request TX PCS will send 20 bits of valid data.
 *     TX_MUX_SEL_ORDER TX Data MUX Select Priority Order. When 1'b1 then priority of Pattern and PRBS generators are swapped w.r.t. CL72.0 => TX Data Mux select order from higher to lower priority is {rmt_lpbk, patt_gen, cl72_tx, prbs_gen, tx_pcs}.1 => TX Data Mux select order from higher to lower priority is {rmt_lpbk, prbs_gen, cl72_tx, patt_gen, tx_pcs}.
 *     TLB_TX_DIFF_ENC_EN 1'b1 will enable the Differential Encoder for pmd_tx_data. Only applicable to PCS TX data in OS1, 2 and 4 modes.Write it to 1'b0 for 1G OSR modes 16P5 and 20P625.
 */
#define BCMI_TSCF_GEN3_XGXS_TLB_TX_TLB_TX_MISC_CFGr (0x0001d173 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TLB_TX_TLB_TX_MISC_CFGr_SIZE 4

/*
 * This structure should be used to declare and program TLB_TX_TLB_TX_MISC_CFG.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TLB_TX_TLB_TX_MISC_CFGr_s {
	uint32_t v[1];
	uint32_t tlb_tx_tlb_tx_misc_cfg[1];
	uint32_t _tlb_tx_tlb_tx_misc_cfg;
} BCMI_TSCF_GEN3_XGXS_TLB_TX_TLB_TX_MISC_CFGr_t;

#define BCMI_TSCF_GEN3_XGXS_TLB_TX_TLB_TX_MISC_CFGr_CLR(r) (r).tlb_tx_tlb_tx_misc_cfg[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TLB_TX_TLB_TX_MISC_CFGr_SET(r,d) (r).tlb_tx_tlb_tx_misc_cfg[0] = d
#define BCMI_TSCF_GEN3_XGXS_TLB_TX_TLB_TX_MISC_CFGr_GET(r) (r).tlb_tx_tlb_tx_misc_cfg[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TLB_TX_TLB_TX_MISC_CFGr_TLB_TX_DIFF_ENC_ENf_GET(r) ((((r).tlb_tx_tlb_tx_misc_cfg[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TLB_TX_TLB_TX_MISC_CFGr_TLB_TX_DIFF_ENC_ENf_SET(r,f) (r).tlb_tx_tlb_tx_misc_cfg[0]=(((r).tlb_tx_tlb_tx_misc_cfg[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_TLB_TX_TLB_TX_MISC_CFGr_TX_MUX_SEL_ORDERf_GET(r) ((((r).tlb_tx_tlb_tx_misc_cfg[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TLB_TX_TLB_TX_MISC_CFGr_TX_MUX_SEL_ORDERf_SET(r,f) (r).tlb_tx_tlb_tx_misc_cfg[0]=(((r).tlb_tx_tlb_tx_misc_cfg[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_TLB_TX_TLB_TX_MISC_CFGr_TX_PCS_NATIVE_ANA_FRMT_ENf_GET(r) ((((r).tlb_tx_tlb_tx_misc_cfg[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TLB_TX_TLB_TX_MISC_CFGr_TX_PCS_NATIVE_ANA_FRMT_ENf_SET(r,f) (r).tlb_tx_tlb_tx_misc_cfg[0]=(((r).tlb_tx_tlb_tx_misc_cfg[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_TLB_TX_TLB_TX_MISC_CFGr_TX_PMD_DP_INVERTf_GET(r) (((r).tlb_tx_tlb_tx_misc_cfg[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TLB_TX_TLB_TX_MISC_CFGr_TX_PMD_DP_INVERTf_SET(r,f) (r).tlb_tx_tlb_tx_misc_cfg[0]=(((r).tlb_tx_tlb_tx_misc_cfg[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TLB_TX_TLB_TX_MISC_CFG.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TLB_TX_TLB_TX_MISC_CFGr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TLB_TX_TLB_TX_MISC_CFGr,(_r._tlb_tx_tlb_tx_misc_cfg))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TLB_TX_TLB_TX_MISC_CFGr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_TX_TLB_TX_MISC_CFGr,(_r._tlb_tx_tlb_tx_misc_cfg)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TLB_TX_TLB_TX_MISC_CFGr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_TX_TLB_TX_MISC_CFGr,(_r._tlb_tx_tlb_tx_misc_cfg))
#define BCMI_TSCF_GEN3_XGXS_READLN_TLB_TX_TLB_TX_MISC_CFGr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TLB_TX_TLB_TX_MISC_CFGr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_tx_tlb_tx_misc_cfg))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TLB_TX_TLB_TX_MISC_CFGr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_TX_TLB_TX_MISC_CFGr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_tx_tlb_tx_misc_cfg))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TLB_TX_TLB_TX_MISC_CFGr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_TX_TLB_TX_MISC_CFGr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_tx_tlb_tx_misc_cfg))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TLB_TX_TLB_TX_MISC_CFGr BCMI_TSCF_GEN3_XGXS_TLB_TX_TLB_TX_MISC_CFGr
#define TLB_TX_TLB_TX_MISC_CFGr_SIZE BCMI_TSCF_GEN3_XGXS_TLB_TX_TLB_TX_MISC_CFGr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TLB_TX_TLB_TX_MISC_CFGr_t TLB_TX_TLB_TX_MISC_CFGr_t;
#define TLB_TX_TLB_TX_MISC_CFGr_CLR BCMI_TSCF_GEN3_XGXS_TLB_TX_TLB_TX_MISC_CFGr_CLR
#define TLB_TX_TLB_TX_MISC_CFGr_SET BCMI_TSCF_GEN3_XGXS_TLB_TX_TLB_TX_MISC_CFGr_SET
#define TLB_TX_TLB_TX_MISC_CFGr_GET BCMI_TSCF_GEN3_XGXS_TLB_TX_TLB_TX_MISC_CFGr_GET
#define TLB_TX_TLB_TX_MISC_CFGr_TLB_TX_DIFF_ENC_ENf_GET BCMI_TSCF_GEN3_XGXS_TLB_TX_TLB_TX_MISC_CFGr_TLB_TX_DIFF_ENC_ENf_GET
#define TLB_TX_TLB_TX_MISC_CFGr_TLB_TX_DIFF_ENC_ENf_SET BCMI_TSCF_GEN3_XGXS_TLB_TX_TLB_TX_MISC_CFGr_TLB_TX_DIFF_ENC_ENf_SET
#define TLB_TX_TLB_TX_MISC_CFGr_TX_MUX_SEL_ORDERf_GET BCMI_TSCF_GEN3_XGXS_TLB_TX_TLB_TX_MISC_CFGr_TX_MUX_SEL_ORDERf_GET
#define TLB_TX_TLB_TX_MISC_CFGr_TX_MUX_SEL_ORDERf_SET BCMI_TSCF_GEN3_XGXS_TLB_TX_TLB_TX_MISC_CFGr_TX_MUX_SEL_ORDERf_SET
#define TLB_TX_TLB_TX_MISC_CFGr_TX_PCS_NATIVE_ANA_FRMT_ENf_GET BCMI_TSCF_GEN3_XGXS_TLB_TX_TLB_TX_MISC_CFGr_TX_PCS_NATIVE_ANA_FRMT_ENf_GET
#define TLB_TX_TLB_TX_MISC_CFGr_TX_PCS_NATIVE_ANA_FRMT_ENf_SET BCMI_TSCF_GEN3_XGXS_TLB_TX_TLB_TX_MISC_CFGr_TX_PCS_NATIVE_ANA_FRMT_ENf_SET
#define TLB_TX_TLB_TX_MISC_CFGr_TX_PMD_DP_INVERTf_GET BCMI_TSCF_GEN3_XGXS_TLB_TX_TLB_TX_MISC_CFGr_TX_PMD_DP_INVERTf_GET
#define TLB_TX_TLB_TX_MISC_CFGr_TX_PMD_DP_INVERTf_SET BCMI_TSCF_GEN3_XGXS_TLB_TX_TLB_TX_MISC_CFGr_TX_PMD_DP_INVERTf_SET
#define READ_TLB_TX_TLB_TX_MISC_CFGr BCMI_TSCF_GEN3_XGXS_READ_TLB_TX_TLB_TX_MISC_CFGr
#define WRITE_TLB_TX_TLB_TX_MISC_CFGr BCMI_TSCF_GEN3_XGXS_WRITE_TLB_TX_TLB_TX_MISC_CFGr
#define MODIFY_TLB_TX_TLB_TX_MISC_CFGr BCMI_TSCF_GEN3_XGXS_MODIFY_TLB_TX_TLB_TX_MISC_CFGr
#define READLN_TLB_TX_TLB_TX_MISC_CFGr BCMI_TSCF_GEN3_XGXS_READLN_TLB_TX_TLB_TX_MISC_CFGr
#define WRITELN_TLB_TX_TLB_TX_MISC_CFGr BCMI_TSCF_GEN3_XGXS_WRITELN_TLB_TX_TLB_TX_MISC_CFGr
#define WRITEALL_TLB_TX_TLB_TX_MISC_CFGr BCMI_TSCF_GEN3_XGXS_WRITEALL_TLB_TX_TLB_TX_MISC_CFGr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TLB_TX_TLB_TX_MISC_CFGr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TLB_TX_RMT_LPBK_PD_STS
 * BLOCKS:   TLB_TX
 * REGADDR:  0xd178
 * DEVAD:    1
 * DESC:     Remote Loopback Status
 * RESETVAL: 0x2 (2)
 * ACCESS:   R/O
 * FIELDS:
 *     RMT_LPBK_PD_LATE_IND 1 means dp_tclk20 is sampling data late so reduce the delay of the dp_tclk20 clock phase. This will result in TX PI phase step decrement.
 *     RMT_LPBK_PD_EARLY_IND 1 means dp_tclk20 is sampling data earlier so delay the dp_tclk20 clock phase. This will result in TX PI phase step increment.
 */
#define BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_PD_STSr (0x0001d178 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_PD_STSr_SIZE 4

/*
 * This structure should be used to declare and program TLB_TX_RMT_LPBK_PD_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_PD_STSr_s {
	uint32_t v[1];
	uint32_t tlb_tx_rmt_lpbk_pd_sts[1];
	uint32_t _tlb_tx_rmt_lpbk_pd_sts;
} BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_PD_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_PD_STSr_CLR(r) (r).tlb_tx_rmt_lpbk_pd_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_PD_STSr_SET(r,d) (r).tlb_tx_rmt_lpbk_pd_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_PD_STSr_GET(r) (r).tlb_tx_rmt_lpbk_pd_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_PD_STSr_RMT_LPBK_PD_EARLY_INDf_GET(r) ((((r).tlb_tx_rmt_lpbk_pd_sts[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_PD_STSr_RMT_LPBK_PD_EARLY_INDf_SET(r,f) (r).tlb_tx_rmt_lpbk_pd_sts[0]=(((r).tlb_tx_rmt_lpbk_pd_sts[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_PD_STSr_RMT_LPBK_PD_LATE_INDf_GET(r) (((r).tlb_tx_rmt_lpbk_pd_sts[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_PD_STSr_RMT_LPBK_PD_LATE_INDf_SET(r,f) (r).tlb_tx_rmt_lpbk_pd_sts[0]=(((r).tlb_tx_rmt_lpbk_pd_sts[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TLB_TX_RMT_LPBK_PD_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TLB_TX_RMT_LPBK_PD_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_PD_STSr,(_r._tlb_tx_rmt_lpbk_pd_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TLB_TX_RMT_LPBK_PD_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_PD_STSr,(_r._tlb_tx_rmt_lpbk_pd_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TLB_TX_RMT_LPBK_PD_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_PD_STSr,(_r._tlb_tx_rmt_lpbk_pd_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_TLB_TX_RMT_LPBK_PD_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_PD_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_tx_rmt_lpbk_pd_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TLB_TX_RMT_LPBK_PD_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_PD_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_tx_rmt_lpbk_pd_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TLB_TX_RMT_LPBK_PD_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_PD_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_tx_rmt_lpbk_pd_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TLB_TX_RMT_LPBK_PD_STSr BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_PD_STSr
#define TLB_TX_RMT_LPBK_PD_STSr_SIZE BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_PD_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_PD_STSr_t TLB_TX_RMT_LPBK_PD_STSr_t;
#define TLB_TX_RMT_LPBK_PD_STSr_CLR BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_PD_STSr_CLR
#define TLB_TX_RMT_LPBK_PD_STSr_SET BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_PD_STSr_SET
#define TLB_TX_RMT_LPBK_PD_STSr_GET BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_PD_STSr_GET
#define TLB_TX_RMT_LPBK_PD_STSr_RMT_LPBK_PD_EARLY_INDf_GET BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_PD_STSr_RMT_LPBK_PD_EARLY_INDf_GET
#define TLB_TX_RMT_LPBK_PD_STSr_RMT_LPBK_PD_EARLY_INDf_SET BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_PD_STSr_RMT_LPBK_PD_EARLY_INDf_SET
#define TLB_TX_RMT_LPBK_PD_STSr_RMT_LPBK_PD_LATE_INDf_GET BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_PD_STSr_RMT_LPBK_PD_LATE_INDf_GET
#define TLB_TX_RMT_LPBK_PD_STSr_RMT_LPBK_PD_LATE_INDf_SET BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_PD_STSr_RMT_LPBK_PD_LATE_INDf_SET
#define READ_TLB_TX_RMT_LPBK_PD_STSr BCMI_TSCF_GEN3_XGXS_READ_TLB_TX_RMT_LPBK_PD_STSr
#define WRITE_TLB_TX_RMT_LPBK_PD_STSr BCMI_TSCF_GEN3_XGXS_WRITE_TLB_TX_RMT_LPBK_PD_STSr
#define MODIFY_TLB_TX_RMT_LPBK_PD_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_TLB_TX_RMT_LPBK_PD_STSr
#define READLN_TLB_TX_RMT_LPBK_PD_STSr BCMI_TSCF_GEN3_XGXS_READLN_TLB_TX_RMT_LPBK_PD_STSr
#define WRITELN_TLB_TX_RMT_LPBK_PD_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_TLB_TX_RMT_LPBK_PD_STSr
#define WRITEALL_TLB_TX_RMT_LPBK_PD_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_TLB_TX_RMT_LPBK_PD_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TLB_TX_RMT_LPBK_PD_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  CORE_PLL_PMD_CORE_MODE_STS
 * BLOCKS:   CORE_PLL_COM
 * REGADDR:  0xd180
 * DEVAD:    1
 * DESC:     PMD_CORE_MODE_STATUS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     PMD_CORE_MODE    This indicates the status of the core input bus pmd_core_mode[15:0].This is driven from PCS and used for communication between PCS and PMD Micro code.
 */
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_PMD_CORE_MODE_STSr (0x0001d180 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_PMD_CORE_MODE_STSr_SIZE 4

/*
 * This structure should be used to declare and program CORE_PLL_PMD_CORE_MODE_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_CORE_PLL_PMD_CORE_MODE_STSr_s {
	uint32_t v[1];
	uint32_t core_pll_pmd_core_mode_sts[1];
	uint32_t _core_pll_pmd_core_mode_sts;
} BCMI_TSCF_GEN3_XGXS_CORE_PLL_PMD_CORE_MODE_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_PMD_CORE_MODE_STSr_CLR(r) (r).core_pll_pmd_core_mode_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_PMD_CORE_MODE_STSr_SET(r,d) (r).core_pll_pmd_core_mode_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_PMD_CORE_MODE_STSr_GET(r) (r).core_pll_pmd_core_mode_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_PMD_CORE_MODE_STSr_PMD_CORE_MODEf_GET(r) (((r).core_pll_pmd_core_mode_sts[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_PMD_CORE_MODE_STSr_PMD_CORE_MODEf_SET(r,f) (r).core_pll_pmd_core_mode_sts[0]=(((r).core_pll_pmd_core_mode_sts[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access CORE_PLL_PMD_CORE_MODE_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_CORE_PLL_PMD_CORE_MODE_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CORE_PLL_PMD_CORE_MODE_STSr,(_r._core_pll_pmd_core_mode_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_CORE_PLL_PMD_CORE_MODE_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CORE_PLL_PMD_CORE_MODE_STSr,(_r._core_pll_pmd_core_mode_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_CORE_PLL_PMD_CORE_MODE_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CORE_PLL_PMD_CORE_MODE_STSr,(_r._core_pll_pmd_core_mode_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_CORE_PLL_PMD_CORE_MODE_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CORE_PLL_PMD_CORE_MODE_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._core_pll_pmd_core_mode_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_CORE_PLL_PMD_CORE_MODE_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CORE_PLL_PMD_CORE_MODE_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._core_pll_pmd_core_mode_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_CORE_PLL_PMD_CORE_MODE_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CORE_PLL_PMD_CORE_MODE_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._core_pll_pmd_core_mode_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CORE_PLL_PMD_CORE_MODE_STSr BCMI_TSCF_GEN3_XGXS_CORE_PLL_PMD_CORE_MODE_STSr
#define CORE_PLL_PMD_CORE_MODE_STSr_SIZE BCMI_TSCF_GEN3_XGXS_CORE_PLL_PMD_CORE_MODE_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_CORE_PLL_PMD_CORE_MODE_STSr_t CORE_PLL_PMD_CORE_MODE_STSr_t;
#define CORE_PLL_PMD_CORE_MODE_STSr_CLR BCMI_TSCF_GEN3_XGXS_CORE_PLL_PMD_CORE_MODE_STSr_CLR
#define CORE_PLL_PMD_CORE_MODE_STSr_SET BCMI_TSCF_GEN3_XGXS_CORE_PLL_PMD_CORE_MODE_STSr_SET
#define CORE_PLL_PMD_CORE_MODE_STSr_GET BCMI_TSCF_GEN3_XGXS_CORE_PLL_PMD_CORE_MODE_STSr_GET
#define CORE_PLL_PMD_CORE_MODE_STSr_PMD_CORE_MODEf_GET BCMI_TSCF_GEN3_XGXS_CORE_PLL_PMD_CORE_MODE_STSr_PMD_CORE_MODEf_GET
#define CORE_PLL_PMD_CORE_MODE_STSr_PMD_CORE_MODEf_SET BCMI_TSCF_GEN3_XGXS_CORE_PLL_PMD_CORE_MODE_STSr_PMD_CORE_MODEf_SET
#define READ_CORE_PLL_PMD_CORE_MODE_STSr BCMI_TSCF_GEN3_XGXS_READ_CORE_PLL_PMD_CORE_MODE_STSr
#define WRITE_CORE_PLL_PMD_CORE_MODE_STSr BCMI_TSCF_GEN3_XGXS_WRITE_CORE_PLL_PMD_CORE_MODE_STSr
#define MODIFY_CORE_PLL_PMD_CORE_MODE_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_CORE_PLL_PMD_CORE_MODE_STSr
#define READLN_CORE_PLL_PMD_CORE_MODE_STSr BCMI_TSCF_GEN3_XGXS_READLN_CORE_PLL_PMD_CORE_MODE_STSr
#define WRITELN_CORE_PLL_PMD_CORE_MODE_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_CORE_PLL_PMD_CORE_MODE_STSr
#define WRITEALL_CORE_PLL_PMD_CORE_MODE_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_CORE_PLL_PMD_CORE_MODE_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_CORE_PLL_PMD_CORE_MODE_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  CORE_PLL_RST_CTL_PLL_DP
 * BLOCKS:   CORE_PLL_COM
 * REGADDR:  0xd182
 * DEVAD:    1
 * DESC:     RESET_CONTROL_PLL_DP
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     PMD_CORE_DP_H_RSTB_PKILL 1'b1 will disable the pmd_core_dp_h_rstb pin.
 *     REFCLK_LOC_MON_EN 1 - use the refclk_loc status to switch the refclk to comclk used in RMIC and PLL_CAL register block forecfully through the glitchless mux as refclk is already lost.
 *     REFCLK_S_COMCLK_SEL Mux control for selection of comclk for the refclk clock used in RMIC and PLL_CAL register block.If asserted by writing to 1'b1 will select the comclk for the refclk clock. This register bit will enable the glitchless switching of the refclk to comclk for the refclk used in RMIC and PLL_CAL register block.
 *     REFCLK_S_COMCLK_FRC_ON Mux control for selection of comclk for refclk by force.If asserted by writing to 1'b1 will select the comclk for the refclk clock. This is a debug bit and should be only used if refclk from AFE is unavailable or dead for unforeseen reasons.
 *     VCOCLK4PCS_S_COMCLK_SEL Mux control for selection of comclk for pmd_vcoclk4pcs clock.If asserted by writing to 1'b1 will select the comclk for the pmd_vcoclk4pcs clock.It is recommended for user to force pmd_vcoclk4pcs_vld to 1'b0 while vcoclk4pcs_s_comclk_sel is asserted to 1'b1by using pmd_vcoclk4pcs_vld_frc/frc_val registers.
 *     VCOCLK4PCS_S_COMCLK_FRC_ON Mux control for selection of comclk for pmd_vcoclk4pcs by force.If asserted by writing to 1'b1 will select the comclk for the pmd_vcoclk4pcs clock. This is a debug bit and should be only used if vcoclk4pcs from AFE is dead for unforeseen reasons.It is recommended for user to force pmd_vcoclk4pcs_vld to 1'b0 while vcoclk4pcs_s_comclk_frc_on is asserted to 1'b1by using pmd_vcoclk4pcs_vld_frc/frc_val registers.
 *     PMD_VCOCLK4PCS_VLD_FRC pmd_vcoclk4pcs_vld pin force.
 *     PMD_VCOCLK4PCS_VLD_FRC_VAL pmd_vcoclk4pcs_vld pin force value.
 *     AFE_S_PLL_RESET_FRC_VAL Active High PLL Reset force value control.
 *     AFE_S_PLL_RESET_FRC Active High PLL Reset force control.
 */
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr (0x0001d182 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr_SIZE 4

/*
 * This structure should be used to declare and program CORE_PLL_RST_CTL_PLL_DP.
 */
typedef union BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr_s {
	uint32_t v[1];
	uint32_t core_pll_rst_ctl_pll_dp[1];
	uint32_t _core_pll_rst_ctl_pll_dp;
} BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr_t;

#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr_CLR(r) (r).core_pll_rst_ctl_pll_dp[0] = 0
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr_SET(r,d) (r).core_pll_rst_ctl_pll_dp[0] = d
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr_GET(r) (r).core_pll_rst_ctl_pll_dp[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr_AFE_S_PLL_RESET_FRCf_GET(r) ((((r).core_pll_rst_ctl_pll_dp[0]) >> 13) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr_AFE_S_PLL_RESET_FRCf_SET(r,f) (r).core_pll_rst_ctl_pll_dp[0]=(((r).core_pll_rst_ctl_pll_dp[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr_AFE_S_PLL_RESET_FRC_VALf_GET(r) ((((r).core_pll_rst_ctl_pll_dp[0]) >> 12) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr_AFE_S_PLL_RESET_FRC_VALf_SET(r,f) (r).core_pll_rst_ctl_pll_dp[0]=(((r).core_pll_rst_ctl_pll_dp[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr_PMD_VCOCLK4PCS_VLD_FRC_VALf_GET(r) ((((r).core_pll_rst_ctl_pll_dp[0]) >> 10) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr_PMD_VCOCLK4PCS_VLD_FRC_VALf_SET(r,f) (r).core_pll_rst_ctl_pll_dp[0]=(((r).core_pll_rst_ctl_pll_dp[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr_PMD_VCOCLK4PCS_VLD_FRCf_GET(r) ((((r).core_pll_rst_ctl_pll_dp[0]) >> 9) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr_PMD_VCOCLK4PCS_VLD_FRCf_SET(r,f) (r).core_pll_rst_ctl_pll_dp[0]=(((r).core_pll_rst_ctl_pll_dp[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr_VCOCLK4PCS_S_COMCLK_FRC_ONf_GET(r) ((((r).core_pll_rst_ctl_pll_dp[0]) >> 8) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr_VCOCLK4PCS_S_COMCLK_FRC_ONf_SET(r,f) (r).core_pll_rst_ctl_pll_dp[0]=(((r).core_pll_rst_ctl_pll_dp[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr_VCOCLK4PCS_S_COMCLK_SELf_GET(r) ((((r).core_pll_rst_ctl_pll_dp[0]) >> 7) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr_VCOCLK4PCS_S_COMCLK_SELf_SET(r,f) (r).core_pll_rst_ctl_pll_dp[0]=(((r).core_pll_rst_ctl_pll_dp[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr_REFCLK_S_COMCLK_FRC_ONf_GET(r) ((((r).core_pll_rst_ctl_pll_dp[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr_REFCLK_S_COMCLK_FRC_ONf_SET(r,f) (r).core_pll_rst_ctl_pll_dp[0]=(((r).core_pll_rst_ctl_pll_dp[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr_REFCLK_S_COMCLK_SELf_GET(r) ((((r).core_pll_rst_ctl_pll_dp[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr_REFCLK_S_COMCLK_SELf_SET(r,f) (r).core_pll_rst_ctl_pll_dp[0]=(((r).core_pll_rst_ctl_pll_dp[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr_REFCLK_LOC_MON_ENf_GET(r) ((((r).core_pll_rst_ctl_pll_dp[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr_REFCLK_LOC_MON_ENf_SET(r,f) (r).core_pll_rst_ctl_pll_dp[0]=(((r).core_pll_rst_ctl_pll_dp[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr_PMD_CORE_DP_H_RSTB_PKILLf_GET(r) ((((r).core_pll_rst_ctl_pll_dp[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr_PMD_CORE_DP_H_RSTB_PKILLf_SET(r,f) (r).core_pll_rst_ctl_pll_dp[0]=(((r).core_pll_rst_ctl_pll_dp[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))

/*
 * These macros can be used to access CORE_PLL_RST_CTL_PLL_DP.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_CORE_PLL_RST_CTL_PLL_DPr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr,(_r._core_pll_rst_ctl_pll_dp))
#define BCMI_TSCF_GEN3_XGXS_WRITE_CORE_PLL_RST_CTL_PLL_DPr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr,(_r._core_pll_rst_ctl_pll_dp)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_CORE_PLL_RST_CTL_PLL_DPr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr,(_r._core_pll_rst_ctl_pll_dp))
#define BCMI_TSCF_GEN3_XGXS_READLN_CORE_PLL_RST_CTL_PLL_DPr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._core_pll_rst_ctl_pll_dp))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_CORE_PLL_RST_CTL_PLL_DPr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._core_pll_rst_ctl_pll_dp))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_CORE_PLL_RST_CTL_PLL_DPr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._core_pll_rst_ctl_pll_dp))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CORE_PLL_RST_CTL_PLL_DPr BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr
#define CORE_PLL_RST_CTL_PLL_DPr_SIZE BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr_t CORE_PLL_RST_CTL_PLL_DPr_t;
#define CORE_PLL_RST_CTL_PLL_DPr_CLR BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr_CLR
#define CORE_PLL_RST_CTL_PLL_DPr_SET BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr_SET
#define CORE_PLL_RST_CTL_PLL_DPr_GET BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr_GET
#define CORE_PLL_RST_CTL_PLL_DPr_AFE_S_PLL_RESET_FRCf_GET BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr_AFE_S_PLL_RESET_FRCf_GET
#define CORE_PLL_RST_CTL_PLL_DPr_AFE_S_PLL_RESET_FRCf_SET BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr_AFE_S_PLL_RESET_FRCf_SET
#define CORE_PLL_RST_CTL_PLL_DPr_AFE_S_PLL_RESET_FRC_VALf_GET BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr_AFE_S_PLL_RESET_FRC_VALf_GET
#define CORE_PLL_RST_CTL_PLL_DPr_AFE_S_PLL_RESET_FRC_VALf_SET BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr_AFE_S_PLL_RESET_FRC_VALf_SET
#define CORE_PLL_RST_CTL_PLL_DPr_PMD_VCOCLK4PCS_VLD_FRC_VALf_GET BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr_PMD_VCOCLK4PCS_VLD_FRC_VALf_GET
#define CORE_PLL_RST_CTL_PLL_DPr_PMD_VCOCLK4PCS_VLD_FRC_VALf_SET BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr_PMD_VCOCLK4PCS_VLD_FRC_VALf_SET
#define CORE_PLL_RST_CTL_PLL_DPr_PMD_VCOCLK4PCS_VLD_FRCf_GET BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr_PMD_VCOCLK4PCS_VLD_FRCf_GET
#define CORE_PLL_RST_CTL_PLL_DPr_PMD_VCOCLK4PCS_VLD_FRCf_SET BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr_PMD_VCOCLK4PCS_VLD_FRCf_SET
#define CORE_PLL_RST_CTL_PLL_DPr_VCOCLK4PCS_S_COMCLK_FRC_ONf_GET BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr_VCOCLK4PCS_S_COMCLK_FRC_ONf_GET
#define CORE_PLL_RST_CTL_PLL_DPr_VCOCLK4PCS_S_COMCLK_FRC_ONf_SET BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr_VCOCLK4PCS_S_COMCLK_FRC_ONf_SET
#define CORE_PLL_RST_CTL_PLL_DPr_VCOCLK4PCS_S_COMCLK_SELf_GET BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr_VCOCLK4PCS_S_COMCLK_SELf_GET
#define CORE_PLL_RST_CTL_PLL_DPr_VCOCLK4PCS_S_COMCLK_SELf_SET BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr_VCOCLK4PCS_S_COMCLK_SELf_SET
#define CORE_PLL_RST_CTL_PLL_DPr_REFCLK_S_COMCLK_FRC_ONf_GET BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr_REFCLK_S_COMCLK_FRC_ONf_GET
#define CORE_PLL_RST_CTL_PLL_DPr_REFCLK_S_COMCLK_FRC_ONf_SET BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr_REFCLK_S_COMCLK_FRC_ONf_SET
#define CORE_PLL_RST_CTL_PLL_DPr_REFCLK_S_COMCLK_SELf_GET BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr_REFCLK_S_COMCLK_SELf_GET
#define CORE_PLL_RST_CTL_PLL_DPr_REFCLK_S_COMCLK_SELf_SET BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr_REFCLK_S_COMCLK_SELf_SET
#define CORE_PLL_RST_CTL_PLL_DPr_REFCLK_LOC_MON_ENf_GET BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr_REFCLK_LOC_MON_ENf_GET
#define CORE_PLL_RST_CTL_PLL_DPr_REFCLK_LOC_MON_ENf_SET BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr_REFCLK_LOC_MON_ENf_SET
#define CORE_PLL_RST_CTL_PLL_DPr_PMD_CORE_DP_H_RSTB_PKILLf_GET BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr_PMD_CORE_DP_H_RSTB_PKILLf_GET
#define CORE_PLL_RST_CTL_PLL_DPr_PMD_CORE_DP_H_RSTB_PKILLf_SET BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr_PMD_CORE_DP_H_RSTB_PKILLf_SET
#define READ_CORE_PLL_RST_CTL_PLL_DPr BCMI_TSCF_GEN3_XGXS_READ_CORE_PLL_RST_CTL_PLL_DPr
#define WRITE_CORE_PLL_RST_CTL_PLL_DPr BCMI_TSCF_GEN3_XGXS_WRITE_CORE_PLL_RST_CTL_PLL_DPr
#define MODIFY_CORE_PLL_RST_CTL_PLL_DPr BCMI_TSCF_GEN3_XGXS_MODIFY_CORE_PLL_RST_CTL_PLL_DPr
#define READLN_CORE_PLL_RST_CTL_PLL_DPr BCMI_TSCF_GEN3_XGXS_READLN_CORE_PLL_RST_CTL_PLL_DPr
#define WRITELN_CORE_PLL_RST_CTL_PLL_DPr BCMI_TSCF_GEN3_XGXS_WRITELN_CORE_PLL_RST_CTL_PLL_DPr
#define WRITEALL_CORE_PLL_RST_CTL_PLL_DPr BCMI_TSCF_GEN3_XGXS_WRITEALL_CORE_PLL_RST_CTL_PLL_DPr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_CORE_PLL_RST_CTL_PLL_DPr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  CORE_PLL_TOP_USER_CTL
 * BLOCKS:   CORE_PLL_COM
 * REGADDR:  0xd184
 * DEVAD:    1
 * DESC:     TOP_USER_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CORE_DP_S_RSTB   Active Low Core Level Datapath Soft Reset. If asserted by writingto 1'b0 will reset datapath logic of all the lanes. This soft resetis equivalent to the hard reset input pin core_dp_h_rstb.Minimum assertion time is 50 comclk cycles.
 *     AFE_S_PLL_PWRDN  Active High PLL Power Down control.Minimum assertion time is 50 comclk cycles.
 *     CORE_HW_FW_HANDSHAKE_DISABLE 1: disables the HW-FW handshake logic for the core which means there is no acknowledgement required from uC and core dp reset will be de-asserted once core reset register/pin conditions are de-asserted.
 */
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_TOP_USER_CTLr (0x0001d184 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_TOP_USER_CTLr_SIZE 4

/*
 * This structure should be used to declare and program CORE_PLL_TOP_USER_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_CORE_PLL_TOP_USER_CTLr_s {
	uint32_t v[1];
	uint32_t core_pll_top_user_ctl[1];
	uint32_t _core_pll_top_user_ctl;
} BCMI_TSCF_GEN3_XGXS_CORE_PLL_TOP_USER_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_TOP_USER_CTLr_CLR(r) (r).core_pll_top_user_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_TOP_USER_CTLr_SET(r,d) (r).core_pll_top_user_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_TOP_USER_CTLr_GET(r) (r).core_pll_top_user_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_TOP_USER_CTLr_CORE_HW_FW_HANDSHAKE_DISABLEf_GET(r) ((((r).core_pll_top_user_ctl[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_TOP_USER_CTLr_CORE_HW_FW_HANDSHAKE_DISABLEf_SET(r,f) (r).core_pll_top_user_ctl[0]=(((r).core_pll_top_user_ctl[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_TOP_USER_CTLr_AFE_S_PLL_PWRDNf_GET(r) ((((r).core_pll_top_user_ctl[0]) >> 14) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_TOP_USER_CTLr_AFE_S_PLL_PWRDNf_SET(r,f) (r).core_pll_top_user_ctl[0]=(((r).core_pll_top_user_ctl[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_TOP_USER_CTLr_CORE_DP_S_RSTBf_GET(r) ((((r).core_pll_top_user_ctl[0]) >> 13) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_TOP_USER_CTLr_CORE_DP_S_RSTBf_SET(r,f) (r).core_pll_top_user_ctl[0]=(((r).core_pll_top_user_ctl[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))

/*
 * These macros can be used to access CORE_PLL_TOP_USER_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_CORE_PLL_TOP_USER_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CORE_PLL_TOP_USER_CTLr,(_r._core_pll_top_user_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_CORE_PLL_TOP_USER_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CORE_PLL_TOP_USER_CTLr,(_r._core_pll_top_user_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_CORE_PLL_TOP_USER_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CORE_PLL_TOP_USER_CTLr,(_r._core_pll_top_user_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_CORE_PLL_TOP_USER_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CORE_PLL_TOP_USER_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._core_pll_top_user_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_CORE_PLL_TOP_USER_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CORE_PLL_TOP_USER_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._core_pll_top_user_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_CORE_PLL_TOP_USER_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CORE_PLL_TOP_USER_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._core_pll_top_user_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CORE_PLL_TOP_USER_CTLr BCMI_TSCF_GEN3_XGXS_CORE_PLL_TOP_USER_CTLr
#define CORE_PLL_TOP_USER_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_CORE_PLL_TOP_USER_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_CORE_PLL_TOP_USER_CTLr_t CORE_PLL_TOP_USER_CTLr_t;
#define CORE_PLL_TOP_USER_CTLr_CLR BCMI_TSCF_GEN3_XGXS_CORE_PLL_TOP_USER_CTLr_CLR
#define CORE_PLL_TOP_USER_CTLr_SET BCMI_TSCF_GEN3_XGXS_CORE_PLL_TOP_USER_CTLr_SET
#define CORE_PLL_TOP_USER_CTLr_GET BCMI_TSCF_GEN3_XGXS_CORE_PLL_TOP_USER_CTLr_GET
#define CORE_PLL_TOP_USER_CTLr_CORE_HW_FW_HANDSHAKE_DISABLEf_GET BCMI_TSCF_GEN3_XGXS_CORE_PLL_TOP_USER_CTLr_CORE_HW_FW_HANDSHAKE_DISABLEf_GET
#define CORE_PLL_TOP_USER_CTLr_CORE_HW_FW_HANDSHAKE_DISABLEf_SET BCMI_TSCF_GEN3_XGXS_CORE_PLL_TOP_USER_CTLr_CORE_HW_FW_HANDSHAKE_DISABLEf_SET
#define CORE_PLL_TOP_USER_CTLr_AFE_S_PLL_PWRDNf_GET BCMI_TSCF_GEN3_XGXS_CORE_PLL_TOP_USER_CTLr_AFE_S_PLL_PWRDNf_GET
#define CORE_PLL_TOP_USER_CTLr_AFE_S_PLL_PWRDNf_SET BCMI_TSCF_GEN3_XGXS_CORE_PLL_TOP_USER_CTLr_AFE_S_PLL_PWRDNf_SET
#define CORE_PLL_TOP_USER_CTLr_CORE_DP_S_RSTBf_GET BCMI_TSCF_GEN3_XGXS_CORE_PLL_TOP_USER_CTLr_CORE_DP_S_RSTBf_GET
#define CORE_PLL_TOP_USER_CTLr_CORE_DP_S_RSTBf_SET BCMI_TSCF_GEN3_XGXS_CORE_PLL_TOP_USER_CTLr_CORE_DP_S_RSTBf_SET
#define READ_CORE_PLL_TOP_USER_CTLr BCMI_TSCF_GEN3_XGXS_READ_CORE_PLL_TOP_USER_CTLr
#define WRITE_CORE_PLL_TOP_USER_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_CORE_PLL_TOP_USER_CTLr
#define MODIFY_CORE_PLL_TOP_USER_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_CORE_PLL_TOP_USER_CTLr
#define READLN_CORE_PLL_TOP_USER_CTLr BCMI_TSCF_GEN3_XGXS_READLN_CORE_PLL_TOP_USER_CTLr
#define WRITELN_CORE_PLL_TOP_USER_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_CORE_PLL_TOP_USER_CTLr
#define WRITEALL_CORE_PLL_TOP_USER_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_CORE_PLL_TOP_USER_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_CORE_PLL_TOP_USER_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  CORE_PLL_UC_ACK_CORE_CTL
 * BLOCKS:   CORE_PLL_COM
 * REGADDR:  0xd185
 * DEVAD:    1
 * DESC:     UC_ACK_CORE_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     UC_ACK_CORE_CFG_DONE uC will write this to 1 to indicate it's configuration of the core is complete. Writing to 1'b1 willshould release internal hold on core_dp_reset, only if core_dp_reset_state is 3'b001.
 *     UC_ACK_CORE_DP_RESET uC will write this to 1 to acknowledge a reset event after seeing "core_dp_reset_coccured".
 */
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_UC_ACK_CORE_CTLr (0x0001d185 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_UC_ACK_CORE_CTLr_SIZE 4

/*
 * This structure should be used to declare and program CORE_PLL_UC_ACK_CORE_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_CORE_PLL_UC_ACK_CORE_CTLr_s {
	uint32_t v[1];
	uint32_t core_pll_uc_ack_core_ctl[1];
	uint32_t _core_pll_uc_ack_core_ctl;
} BCMI_TSCF_GEN3_XGXS_CORE_PLL_UC_ACK_CORE_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_UC_ACK_CORE_CTLr_CLR(r) (r).core_pll_uc_ack_core_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_UC_ACK_CORE_CTLr_SET(r,d) (r).core_pll_uc_ack_core_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_UC_ACK_CORE_CTLr_GET(r) (r).core_pll_uc_ack_core_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_UC_ACK_CORE_CTLr_UC_ACK_CORE_DP_RESETf_GET(r) ((((r).core_pll_uc_ack_core_ctl[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_UC_ACK_CORE_CTLr_UC_ACK_CORE_DP_RESETf_SET(r,f) (r).core_pll_uc_ack_core_ctl[0]=(((r).core_pll_uc_ack_core_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_UC_ACK_CORE_CTLr_UC_ACK_CORE_CFG_DONEf_GET(r) (((r).core_pll_uc_ack_core_ctl[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_UC_ACK_CORE_CTLr_UC_ACK_CORE_CFG_DONEf_SET(r,f) (r).core_pll_uc_ack_core_ctl[0]=(((r).core_pll_uc_ack_core_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access CORE_PLL_UC_ACK_CORE_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_CORE_PLL_UC_ACK_CORE_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CORE_PLL_UC_ACK_CORE_CTLr,(_r._core_pll_uc_ack_core_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_CORE_PLL_UC_ACK_CORE_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CORE_PLL_UC_ACK_CORE_CTLr,(_r._core_pll_uc_ack_core_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_CORE_PLL_UC_ACK_CORE_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CORE_PLL_UC_ACK_CORE_CTLr,(_r._core_pll_uc_ack_core_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_CORE_PLL_UC_ACK_CORE_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CORE_PLL_UC_ACK_CORE_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._core_pll_uc_ack_core_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_CORE_PLL_UC_ACK_CORE_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CORE_PLL_UC_ACK_CORE_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._core_pll_uc_ack_core_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_CORE_PLL_UC_ACK_CORE_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CORE_PLL_UC_ACK_CORE_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._core_pll_uc_ack_core_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CORE_PLL_UC_ACK_CORE_CTLr BCMI_TSCF_GEN3_XGXS_CORE_PLL_UC_ACK_CORE_CTLr
#define CORE_PLL_UC_ACK_CORE_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_CORE_PLL_UC_ACK_CORE_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_CORE_PLL_UC_ACK_CORE_CTLr_t CORE_PLL_UC_ACK_CORE_CTLr_t;
#define CORE_PLL_UC_ACK_CORE_CTLr_CLR BCMI_TSCF_GEN3_XGXS_CORE_PLL_UC_ACK_CORE_CTLr_CLR
#define CORE_PLL_UC_ACK_CORE_CTLr_SET BCMI_TSCF_GEN3_XGXS_CORE_PLL_UC_ACK_CORE_CTLr_SET
#define CORE_PLL_UC_ACK_CORE_CTLr_GET BCMI_TSCF_GEN3_XGXS_CORE_PLL_UC_ACK_CORE_CTLr_GET
#define CORE_PLL_UC_ACK_CORE_CTLr_UC_ACK_CORE_DP_RESETf_GET BCMI_TSCF_GEN3_XGXS_CORE_PLL_UC_ACK_CORE_CTLr_UC_ACK_CORE_DP_RESETf_GET
#define CORE_PLL_UC_ACK_CORE_CTLr_UC_ACK_CORE_DP_RESETf_SET BCMI_TSCF_GEN3_XGXS_CORE_PLL_UC_ACK_CORE_CTLr_UC_ACK_CORE_DP_RESETf_SET
#define CORE_PLL_UC_ACK_CORE_CTLr_UC_ACK_CORE_CFG_DONEf_GET BCMI_TSCF_GEN3_XGXS_CORE_PLL_UC_ACK_CORE_CTLr_UC_ACK_CORE_CFG_DONEf_GET
#define CORE_PLL_UC_ACK_CORE_CTLr_UC_ACK_CORE_CFG_DONEf_SET BCMI_TSCF_GEN3_XGXS_CORE_PLL_UC_ACK_CORE_CTLr_UC_ACK_CORE_CFG_DONEf_SET
#define READ_CORE_PLL_UC_ACK_CORE_CTLr BCMI_TSCF_GEN3_XGXS_READ_CORE_PLL_UC_ACK_CORE_CTLr
#define WRITE_CORE_PLL_UC_ACK_CORE_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_CORE_PLL_UC_ACK_CORE_CTLr
#define MODIFY_CORE_PLL_UC_ACK_CORE_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_CORE_PLL_UC_ACK_CORE_CTLr
#define READLN_CORE_PLL_UC_ACK_CORE_CTLr BCMI_TSCF_GEN3_XGXS_READLN_CORE_PLL_UC_ACK_CORE_CTLr
#define WRITELN_CORE_PLL_UC_ACK_CORE_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_CORE_PLL_UC_ACK_CORE_CTLr
#define WRITEALL_CORE_PLL_UC_ACK_CORE_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_CORE_PLL_UC_ACK_CORE_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_CORE_PLL_UC_ACK_CORE_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  CORE_PLL_PLL_DP_RST_ST_STS
 * BLOCKS:   CORE_PLL_COM
 * REGADDR:  0xd188
 * DEVAD:    1
 * DESC:     PLL_DP_RESET_STATE_STATUS
 * RESETVAL: 0x7 (7)
 * ACCESS:   R/O
 * FIELDS:
 *     CORE_DP_RESET_STATE Bit 2: core_dp_reset_active   : Set to 1'b1 whenenver core_dp_reset is currently requested through any register or pin controls.Bit 1: core_dp_reset_occurred : Set to 1'b1 whenenver core_dp_reset is currently requested through any register or pin controls and is latched high.Bit 0: core_dp_reset_held     : Set to 1'b1 whenenver core_dp_reset is internally held. Cleared to 1'b0, only if core_dp_reset_state==001 and uc_ack_core_cfg_done == 1.
 */
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_PLL_DP_RST_ST_STSr (0x0001d188 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_PLL_DP_RST_ST_STSr_SIZE 4

/*
 * This structure should be used to declare and program CORE_PLL_PLL_DP_RST_ST_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_CORE_PLL_PLL_DP_RST_ST_STSr_s {
	uint32_t v[1];
	uint32_t core_pll_pll_dp_rst_st_sts[1];
	uint32_t _core_pll_pll_dp_rst_st_sts;
} BCMI_TSCF_GEN3_XGXS_CORE_PLL_PLL_DP_RST_ST_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_PLL_DP_RST_ST_STSr_CLR(r) (r).core_pll_pll_dp_rst_st_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_PLL_DP_RST_ST_STSr_SET(r,d) (r).core_pll_pll_dp_rst_st_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_PLL_DP_RST_ST_STSr_GET(r) (r).core_pll_pll_dp_rst_st_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_PLL_DP_RST_ST_STSr_CORE_DP_RESET_STATEf_GET(r) (((r).core_pll_pll_dp_rst_st_sts[0]) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_PLL_DP_RST_ST_STSr_CORE_DP_RESET_STATEf_SET(r,f) (r).core_pll_pll_dp_rst_st_sts[0]=(((r).core_pll_pll_dp_rst_st_sts[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access CORE_PLL_PLL_DP_RST_ST_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_CORE_PLL_PLL_DP_RST_ST_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CORE_PLL_PLL_DP_RST_ST_STSr,(_r._core_pll_pll_dp_rst_st_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_CORE_PLL_PLL_DP_RST_ST_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CORE_PLL_PLL_DP_RST_ST_STSr,(_r._core_pll_pll_dp_rst_st_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_CORE_PLL_PLL_DP_RST_ST_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CORE_PLL_PLL_DP_RST_ST_STSr,(_r._core_pll_pll_dp_rst_st_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_CORE_PLL_PLL_DP_RST_ST_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CORE_PLL_PLL_DP_RST_ST_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._core_pll_pll_dp_rst_st_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_CORE_PLL_PLL_DP_RST_ST_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CORE_PLL_PLL_DP_RST_ST_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._core_pll_pll_dp_rst_st_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_CORE_PLL_PLL_DP_RST_ST_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CORE_PLL_PLL_DP_RST_ST_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._core_pll_pll_dp_rst_st_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CORE_PLL_PLL_DP_RST_ST_STSr BCMI_TSCF_GEN3_XGXS_CORE_PLL_PLL_DP_RST_ST_STSr
#define CORE_PLL_PLL_DP_RST_ST_STSr_SIZE BCMI_TSCF_GEN3_XGXS_CORE_PLL_PLL_DP_RST_ST_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_CORE_PLL_PLL_DP_RST_ST_STSr_t CORE_PLL_PLL_DP_RST_ST_STSr_t;
#define CORE_PLL_PLL_DP_RST_ST_STSr_CLR BCMI_TSCF_GEN3_XGXS_CORE_PLL_PLL_DP_RST_ST_STSr_CLR
#define CORE_PLL_PLL_DP_RST_ST_STSr_SET BCMI_TSCF_GEN3_XGXS_CORE_PLL_PLL_DP_RST_ST_STSr_SET
#define CORE_PLL_PLL_DP_RST_ST_STSr_GET BCMI_TSCF_GEN3_XGXS_CORE_PLL_PLL_DP_RST_ST_STSr_GET
#define CORE_PLL_PLL_DP_RST_ST_STSr_CORE_DP_RESET_STATEf_GET BCMI_TSCF_GEN3_XGXS_CORE_PLL_PLL_DP_RST_ST_STSr_CORE_DP_RESET_STATEf_GET
#define CORE_PLL_PLL_DP_RST_ST_STSr_CORE_DP_RESET_STATEf_SET BCMI_TSCF_GEN3_XGXS_CORE_PLL_PLL_DP_RST_ST_STSr_CORE_DP_RESET_STATEf_SET
#define READ_CORE_PLL_PLL_DP_RST_ST_STSr BCMI_TSCF_GEN3_XGXS_READ_CORE_PLL_PLL_DP_RST_ST_STSr
#define WRITE_CORE_PLL_PLL_DP_RST_ST_STSr BCMI_TSCF_GEN3_XGXS_WRITE_CORE_PLL_PLL_DP_RST_ST_STSr
#define MODIFY_CORE_PLL_PLL_DP_RST_ST_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_CORE_PLL_PLL_DP_RST_ST_STSr
#define READLN_CORE_PLL_PLL_DP_RST_ST_STSr BCMI_TSCF_GEN3_XGXS_READLN_CORE_PLL_PLL_DP_RST_ST_STSr
#define WRITELN_CORE_PLL_PLL_DP_RST_ST_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_CORE_PLL_PLL_DP_RST_ST_STSr
#define WRITEALL_CORE_PLL_PLL_DP_RST_ST_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_CORE_PLL_PLL_DP_RST_ST_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_CORE_PLL_PLL_DP_RST_ST_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  CORE_PLL_CORE_PLL_COM_STS2
 * BLOCKS:   CORE_PLL_COM
 * REGADDR:  0xd189
 * DEVAD:    1
 * DESC:     CORE_PLL_COM_STATUS_2
 * RESETVAL: 0x1 (1)
 * ACCESS:   R/O
 * FIELDS:
 *     PLL_PWRDN_OR     pll_pwrdn after dft muxing
 *     REFCLK_LOC       Indicates the Loss of Clock indication for refclk. Loss of refclk monitor uses the comclk as the measuring clock so for this monitoring status to work properly comclk has to be there.If ratio of the (comclk freq/refclk freq) <= 4 then LOC monitor should not report it as LOC but any slower refclk than that will result into LOC even though refclk is toggling. So assuming mac comclk is 175 Mhz,then slowest refclk which will not result into LOC is 175/4 = 43.75 Mhz.
 */
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_CORE_PLL_COM_STS2r (0x0001d189 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_CORE_PLL_COM_STS2r_SIZE 4

/*
 * This structure should be used to declare and program CORE_PLL_CORE_PLL_COM_STS2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_CORE_PLL_CORE_PLL_COM_STS2r_s {
	uint32_t v[1];
	uint32_t core_pll_core_pll_com_sts2[1];
	uint32_t _core_pll_core_pll_com_sts2;
} BCMI_TSCF_GEN3_XGXS_CORE_PLL_CORE_PLL_COM_STS2r_t;

#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_CORE_PLL_COM_STS2r_CLR(r) (r).core_pll_core_pll_com_sts2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_CORE_PLL_COM_STS2r_SET(r,d) (r).core_pll_core_pll_com_sts2[0] = d
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_CORE_PLL_COM_STS2r_GET(r) (r).core_pll_core_pll_com_sts2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_CORE_PLL_COM_STS2r_REFCLK_LOCf_GET(r) ((((r).core_pll_core_pll_com_sts2[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_CORE_PLL_COM_STS2r_REFCLK_LOCf_SET(r,f) (r).core_pll_core_pll_com_sts2[0]=(((r).core_pll_core_pll_com_sts2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_CORE_PLL_COM_STS2r_PLL_PWRDN_ORf_GET(r) (((r).core_pll_core_pll_com_sts2[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_CORE_PLL_CORE_PLL_COM_STS2r_PLL_PWRDN_ORf_SET(r,f) (r).core_pll_core_pll_com_sts2[0]=(((r).core_pll_core_pll_com_sts2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access CORE_PLL_CORE_PLL_COM_STS2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_CORE_PLL_CORE_PLL_COM_STS2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CORE_PLL_CORE_PLL_COM_STS2r,(_r._core_pll_core_pll_com_sts2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_CORE_PLL_CORE_PLL_COM_STS2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CORE_PLL_CORE_PLL_COM_STS2r,(_r._core_pll_core_pll_com_sts2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_CORE_PLL_CORE_PLL_COM_STS2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CORE_PLL_CORE_PLL_COM_STS2r,(_r._core_pll_core_pll_com_sts2))
#define BCMI_TSCF_GEN3_XGXS_READLN_CORE_PLL_CORE_PLL_COM_STS2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_CORE_PLL_CORE_PLL_COM_STS2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._core_pll_core_pll_com_sts2))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_CORE_PLL_CORE_PLL_COM_STS2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CORE_PLL_CORE_PLL_COM_STS2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._core_pll_core_pll_com_sts2))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_CORE_PLL_CORE_PLL_COM_STS2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_CORE_PLL_CORE_PLL_COM_STS2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._core_pll_core_pll_com_sts2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CORE_PLL_CORE_PLL_COM_STS2r BCMI_TSCF_GEN3_XGXS_CORE_PLL_CORE_PLL_COM_STS2r
#define CORE_PLL_CORE_PLL_COM_STS2r_SIZE BCMI_TSCF_GEN3_XGXS_CORE_PLL_CORE_PLL_COM_STS2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_CORE_PLL_CORE_PLL_COM_STS2r_t CORE_PLL_CORE_PLL_COM_STS2r_t;
#define CORE_PLL_CORE_PLL_COM_STS2r_CLR BCMI_TSCF_GEN3_XGXS_CORE_PLL_CORE_PLL_COM_STS2r_CLR
#define CORE_PLL_CORE_PLL_COM_STS2r_SET BCMI_TSCF_GEN3_XGXS_CORE_PLL_CORE_PLL_COM_STS2r_SET
#define CORE_PLL_CORE_PLL_COM_STS2r_GET BCMI_TSCF_GEN3_XGXS_CORE_PLL_CORE_PLL_COM_STS2r_GET
#define CORE_PLL_CORE_PLL_COM_STS2r_REFCLK_LOCf_GET BCMI_TSCF_GEN3_XGXS_CORE_PLL_CORE_PLL_COM_STS2r_REFCLK_LOCf_GET
#define CORE_PLL_CORE_PLL_COM_STS2r_REFCLK_LOCf_SET BCMI_TSCF_GEN3_XGXS_CORE_PLL_CORE_PLL_COM_STS2r_REFCLK_LOCf_SET
#define CORE_PLL_CORE_PLL_COM_STS2r_PLL_PWRDN_ORf_GET BCMI_TSCF_GEN3_XGXS_CORE_PLL_CORE_PLL_COM_STS2r_PLL_PWRDN_ORf_GET
#define CORE_PLL_CORE_PLL_COM_STS2r_PLL_PWRDN_ORf_SET BCMI_TSCF_GEN3_XGXS_CORE_PLL_CORE_PLL_COM_STS2r_PLL_PWRDN_ORf_SET
#define READ_CORE_PLL_CORE_PLL_COM_STS2r BCMI_TSCF_GEN3_XGXS_READ_CORE_PLL_CORE_PLL_COM_STS2r
#define WRITE_CORE_PLL_CORE_PLL_COM_STS2r BCMI_TSCF_GEN3_XGXS_WRITE_CORE_PLL_CORE_PLL_COM_STS2r
#define MODIFY_CORE_PLL_CORE_PLL_COM_STS2r BCMI_TSCF_GEN3_XGXS_MODIFY_CORE_PLL_CORE_PLL_COM_STS2r
#define READLN_CORE_PLL_CORE_PLL_COM_STS2r BCMI_TSCF_GEN3_XGXS_READLN_CORE_PLL_CORE_PLL_COM_STS2r
#define WRITELN_CORE_PLL_CORE_PLL_COM_STS2r BCMI_TSCF_GEN3_XGXS_WRITELN_CORE_PLL_CORE_PLL_COM_STS2r
#define WRITEALL_CORE_PLL_CORE_PLL_COM_STS2r BCMI_TSCF_GEN3_XGXS_WRITEALL_CORE_PLL_CORE_PLL_COM_STS2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_CORE_PLL_CORE_PLL_COM_STS2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  LN_ADDR0
 * BLOCKS:   DIG_COM_B
 * REGADDR:  0xd190
 * DEVAD:    1
 * DESC:     LANE_ADDR_0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RX_LANE_ADDR_0   Determines the logical address associated with the PMD RX lane with physical index  "_0" at the PCS interface.rx_lane_addr_0 is the logical address of the lane with pins at the PCS interface labeled "_0".
 *     TX_LANE_ADDR_0   Determines the logical address associated with the PMD TX lane with physical index  "_0" at the PCS interface.tx_lane_addr_0 is the logical address of the TX lane with pins at the PCS interface labeled "_0".
 */
#define BCMI_TSCF_GEN3_XGXS_LN_ADDR0r (0x0001d190 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_LN_ADDR0r_SIZE 4

/*
 * This structure should be used to declare and program LN_ADDR0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_LN_ADDR0r_s {
	uint32_t v[1];
	uint32_t ln_addr0[1];
	uint32_t _ln_addr0;
} BCMI_TSCF_GEN3_XGXS_LN_ADDR0r_t;

#define BCMI_TSCF_GEN3_XGXS_LN_ADDR0r_CLR(r) (r).ln_addr0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_LN_ADDR0r_SET(r,d) (r).ln_addr0[0] = d
#define BCMI_TSCF_GEN3_XGXS_LN_ADDR0r_GET(r) (r).ln_addr0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_LN_ADDR0r_TX_LANE_ADDR_0f_GET(r) ((((r).ln_addr0[0]) >> 8) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_LN_ADDR0r_TX_LANE_ADDR_0f_SET(r,f) (r).ln_addr0[0]=(((r).ln_addr0[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8)) | (31 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_LN_ADDR0r_RX_LANE_ADDR_0f_GET(r) (((r).ln_addr0[0]) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_LN_ADDR0r_RX_LANE_ADDR_0f_SET(r,f) (r).ln_addr0[0]=(((r).ln_addr0[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access LN_ADDR0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_LN_ADDR0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_LN_ADDR0r,(_r._ln_addr0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_LN_ADDR0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_LN_ADDR0r,(_r._ln_addr0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_LN_ADDR0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_LN_ADDR0r,(_r._ln_addr0))
#define BCMI_TSCF_GEN3_XGXS_READLN_LN_ADDR0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_LN_ADDR0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ln_addr0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_LN_ADDR0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_LN_ADDR0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ln_addr0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_LN_ADDR0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_LN_ADDR0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ln_addr0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LN_ADDR0r BCMI_TSCF_GEN3_XGXS_LN_ADDR0r
#define LN_ADDR0r_SIZE BCMI_TSCF_GEN3_XGXS_LN_ADDR0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_LN_ADDR0r_t LN_ADDR0r_t;
#define LN_ADDR0r_CLR BCMI_TSCF_GEN3_XGXS_LN_ADDR0r_CLR
#define LN_ADDR0r_SET BCMI_TSCF_GEN3_XGXS_LN_ADDR0r_SET
#define LN_ADDR0r_GET BCMI_TSCF_GEN3_XGXS_LN_ADDR0r_GET
#define LN_ADDR0r_TX_LANE_ADDR_0f_GET BCMI_TSCF_GEN3_XGXS_LN_ADDR0r_TX_LANE_ADDR_0f_GET
#define LN_ADDR0r_TX_LANE_ADDR_0f_SET BCMI_TSCF_GEN3_XGXS_LN_ADDR0r_TX_LANE_ADDR_0f_SET
#define LN_ADDR0r_RX_LANE_ADDR_0f_GET BCMI_TSCF_GEN3_XGXS_LN_ADDR0r_RX_LANE_ADDR_0f_GET
#define LN_ADDR0r_RX_LANE_ADDR_0f_SET BCMI_TSCF_GEN3_XGXS_LN_ADDR0r_RX_LANE_ADDR_0f_SET
#define READ_LN_ADDR0r BCMI_TSCF_GEN3_XGXS_READ_LN_ADDR0r
#define WRITE_LN_ADDR0r BCMI_TSCF_GEN3_XGXS_WRITE_LN_ADDR0r
#define MODIFY_LN_ADDR0r BCMI_TSCF_GEN3_XGXS_MODIFY_LN_ADDR0r
#define READLN_LN_ADDR0r BCMI_TSCF_GEN3_XGXS_READLN_LN_ADDR0r
#define WRITELN_LN_ADDR0r BCMI_TSCF_GEN3_XGXS_WRITELN_LN_ADDR0r
#define WRITEALL_LN_ADDR0r BCMI_TSCF_GEN3_XGXS_WRITEALL_LN_ADDR0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_LN_ADDR0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  LN_ADDR1
 * BLOCKS:   DIG_COM_B
 * REGADDR:  0xd191
 * DEVAD:    1
 * DESC:     LANE_ADDR_1
 * RESETVAL: 0x101 (257)
 * ACCESS:   R/W
 * FIELDS:
 *     RX_LANE_ADDR_1   Determines the logical address associated with the PMD RX lane with physical index  "_1" at the PCS interface.rx_lane_addr_1 is the logical address of the lane with pins at the PCS interface labeled "_1".
 *     TX_LANE_ADDR_1   Determines the logical address associated with the PMD TX lane with physical index  "_1" at the PCS interface.tx_lane_addr_1 is the logical address of the TX lane with pins at the PCS interface labeled "_1".
 */
#define BCMI_TSCF_GEN3_XGXS_LN_ADDR1r (0x0001d191 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_LN_ADDR1r_SIZE 4

/*
 * This structure should be used to declare and program LN_ADDR1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_LN_ADDR1r_s {
	uint32_t v[1];
	uint32_t ln_addr1[1];
	uint32_t _ln_addr1;
} BCMI_TSCF_GEN3_XGXS_LN_ADDR1r_t;

#define BCMI_TSCF_GEN3_XGXS_LN_ADDR1r_CLR(r) (r).ln_addr1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_LN_ADDR1r_SET(r,d) (r).ln_addr1[0] = d
#define BCMI_TSCF_GEN3_XGXS_LN_ADDR1r_GET(r) (r).ln_addr1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_LN_ADDR1r_TX_LANE_ADDR_1f_GET(r) ((((r).ln_addr1[0]) >> 8) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_LN_ADDR1r_TX_LANE_ADDR_1f_SET(r,f) (r).ln_addr1[0]=(((r).ln_addr1[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8)) | (31 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_LN_ADDR1r_RX_LANE_ADDR_1f_GET(r) (((r).ln_addr1[0]) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_LN_ADDR1r_RX_LANE_ADDR_1f_SET(r,f) (r).ln_addr1[0]=(((r).ln_addr1[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access LN_ADDR1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_LN_ADDR1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_LN_ADDR1r,(_r._ln_addr1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_LN_ADDR1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_LN_ADDR1r,(_r._ln_addr1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_LN_ADDR1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_LN_ADDR1r,(_r._ln_addr1))
#define BCMI_TSCF_GEN3_XGXS_READLN_LN_ADDR1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_LN_ADDR1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ln_addr1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_LN_ADDR1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_LN_ADDR1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ln_addr1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_LN_ADDR1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_LN_ADDR1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ln_addr1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LN_ADDR1r BCMI_TSCF_GEN3_XGXS_LN_ADDR1r
#define LN_ADDR1r_SIZE BCMI_TSCF_GEN3_XGXS_LN_ADDR1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_LN_ADDR1r_t LN_ADDR1r_t;
#define LN_ADDR1r_CLR BCMI_TSCF_GEN3_XGXS_LN_ADDR1r_CLR
#define LN_ADDR1r_SET BCMI_TSCF_GEN3_XGXS_LN_ADDR1r_SET
#define LN_ADDR1r_GET BCMI_TSCF_GEN3_XGXS_LN_ADDR1r_GET
#define LN_ADDR1r_TX_LANE_ADDR_1f_GET BCMI_TSCF_GEN3_XGXS_LN_ADDR1r_TX_LANE_ADDR_1f_GET
#define LN_ADDR1r_TX_LANE_ADDR_1f_SET BCMI_TSCF_GEN3_XGXS_LN_ADDR1r_TX_LANE_ADDR_1f_SET
#define LN_ADDR1r_RX_LANE_ADDR_1f_GET BCMI_TSCF_GEN3_XGXS_LN_ADDR1r_RX_LANE_ADDR_1f_GET
#define LN_ADDR1r_RX_LANE_ADDR_1f_SET BCMI_TSCF_GEN3_XGXS_LN_ADDR1r_RX_LANE_ADDR_1f_SET
#define READ_LN_ADDR1r BCMI_TSCF_GEN3_XGXS_READ_LN_ADDR1r
#define WRITE_LN_ADDR1r BCMI_TSCF_GEN3_XGXS_WRITE_LN_ADDR1r
#define MODIFY_LN_ADDR1r BCMI_TSCF_GEN3_XGXS_MODIFY_LN_ADDR1r
#define READLN_LN_ADDR1r BCMI_TSCF_GEN3_XGXS_READLN_LN_ADDR1r
#define WRITELN_LN_ADDR1r BCMI_TSCF_GEN3_XGXS_WRITELN_LN_ADDR1r
#define WRITEALL_LN_ADDR1r BCMI_TSCF_GEN3_XGXS_WRITEALL_LN_ADDR1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_LN_ADDR1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  LN_ADDR2
 * BLOCKS:   DIG_COM_B
 * REGADDR:  0xd192
 * DEVAD:    1
 * DESC:     LANE_ADDR_2
 * RESETVAL: 0x202 (514)
 * ACCESS:   R/W
 * FIELDS:
 *     RX_LANE_ADDR_2   Determines the logical address associated with the PMD RX lane with physical index  "_2" at the PCS interface.rx_lane_addr_2 is the logical address of the lane with pins at the PCS interface labeled "_2".
 *     TX_LANE_ADDR_2   Determines the logical address associated with the PMD TX lane with physical index  "_2" at the PCS interface.tx_lane_addr_2 is the logical address of the TX lane with pins at the PCS interface labeled "_2".
 */
#define BCMI_TSCF_GEN3_XGXS_LN_ADDR2r (0x0001d192 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_LN_ADDR2r_SIZE 4

/*
 * This structure should be used to declare and program LN_ADDR2.
 */
typedef union BCMI_TSCF_GEN3_XGXS_LN_ADDR2r_s {
	uint32_t v[1];
	uint32_t ln_addr2[1];
	uint32_t _ln_addr2;
} BCMI_TSCF_GEN3_XGXS_LN_ADDR2r_t;

#define BCMI_TSCF_GEN3_XGXS_LN_ADDR2r_CLR(r) (r).ln_addr2[0] = 0
#define BCMI_TSCF_GEN3_XGXS_LN_ADDR2r_SET(r,d) (r).ln_addr2[0] = d
#define BCMI_TSCF_GEN3_XGXS_LN_ADDR2r_GET(r) (r).ln_addr2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_LN_ADDR2r_TX_LANE_ADDR_2f_GET(r) ((((r).ln_addr2[0]) >> 8) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_LN_ADDR2r_TX_LANE_ADDR_2f_SET(r,f) (r).ln_addr2[0]=(((r).ln_addr2[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8)) | (31 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_LN_ADDR2r_RX_LANE_ADDR_2f_GET(r) (((r).ln_addr2[0]) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_LN_ADDR2r_RX_LANE_ADDR_2f_SET(r,f) (r).ln_addr2[0]=(((r).ln_addr2[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access LN_ADDR2.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_LN_ADDR2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_LN_ADDR2r,(_r._ln_addr2))
#define BCMI_TSCF_GEN3_XGXS_WRITE_LN_ADDR2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_LN_ADDR2r,(_r._ln_addr2)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_LN_ADDR2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_LN_ADDR2r,(_r._ln_addr2))
#define BCMI_TSCF_GEN3_XGXS_READLN_LN_ADDR2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_LN_ADDR2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ln_addr2))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_LN_ADDR2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_LN_ADDR2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ln_addr2))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_LN_ADDR2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_LN_ADDR2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ln_addr2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LN_ADDR2r BCMI_TSCF_GEN3_XGXS_LN_ADDR2r
#define LN_ADDR2r_SIZE BCMI_TSCF_GEN3_XGXS_LN_ADDR2r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_LN_ADDR2r_t LN_ADDR2r_t;
#define LN_ADDR2r_CLR BCMI_TSCF_GEN3_XGXS_LN_ADDR2r_CLR
#define LN_ADDR2r_SET BCMI_TSCF_GEN3_XGXS_LN_ADDR2r_SET
#define LN_ADDR2r_GET BCMI_TSCF_GEN3_XGXS_LN_ADDR2r_GET
#define LN_ADDR2r_TX_LANE_ADDR_2f_GET BCMI_TSCF_GEN3_XGXS_LN_ADDR2r_TX_LANE_ADDR_2f_GET
#define LN_ADDR2r_TX_LANE_ADDR_2f_SET BCMI_TSCF_GEN3_XGXS_LN_ADDR2r_TX_LANE_ADDR_2f_SET
#define LN_ADDR2r_RX_LANE_ADDR_2f_GET BCMI_TSCF_GEN3_XGXS_LN_ADDR2r_RX_LANE_ADDR_2f_GET
#define LN_ADDR2r_RX_LANE_ADDR_2f_SET BCMI_TSCF_GEN3_XGXS_LN_ADDR2r_RX_LANE_ADDR_2f_SET
#define READ_LN_ADDR2r BCMI_TSCF_GEN3_XGXS_READ_LN_ADDR2r
#define WRITE_LN_ADDR2r BCMI_TSCF_GEN3_XGXS_WRITE_LN_ADDR2r
#define MODIFY_LN_ADDR2r BCMI_TSCF_GEN3_XGXS_MODIFY_LN_ADDR2r
#define READLN_LN_ADDR2r BCMI_TSCF_GEN3_XGXS_READLN_LN_ADDR2r
#define WRITELN_LN_ADDR2r BCMI_TSCF_GEN3_XGXS_WRITELN_LN_ADDR2r
#define WRITEALL_LN_ADDR2r BCMI_TSCF_GEN3_XGXS_WRITEALL_LN_ADDR2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_LN_ADDR2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  LN_ADDR3
 * BLOCKS:   DIG_COM_B
 * REGADDR:  0xd193
 * DEVAD:    1
 * DESC:     LANE_ADDR_3
 * RESETVAL: 0x303 (771)
 * ACCESS:   R/W
 * FIELDS:
 *     RX_LANE_ADDR_3   Determines the logical address associated with the PMD RX lane with physical index  "_3" at the PCS interface.rx_lane_addr_3 is the logical address of the lane with pins at the PCS interface labeled "_3".
 *     TX_LANE_ADDR_3   Determines the logical address associated with the PMD TX lane with physical index  "_3" at the PCS interface.tx_lane_addr_3 is the logical address of the TX lane with pins at the PCS interface labeled "_3".
 */
#define BCMI_TSCF_GEN3_XGXS_LN_ADDR3r (0x0001d193 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_LN_ADDR3r_SIZE 4

/*
 * This structure should be used to declare and program LN_ADDR3.
 */
typedef union BCMI_TSCF_GEN3_XGXS_LN_ADDR3r_s {
	uint32_t v[1];
	uint32_t ln_addr3[1];
	uint32_t _ln_addr3;
} BCMI_TSCF_GEN3_XGXS_LN_ADDR3r_t;

#define BCMI_TSCF_GEN3_XGXS_LN_ADDR3r_CLR(r) (r).ln_addr3[0] = 0
#define BCMI_TSCF_GEN3_XGXS_LN_ADDR3r_SET(r,d) (r).ln_addr3[0] = d
#define BCMI_TSCF_GEN3_XGXS_LN_ADDR3r_GET(r) (r).ln_addr3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_LN_ADDR3r_TX_LANE_ADDR_3f_GET(r) ((((r).ln_addr3[0]) >> 8) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_LN_ADDR3r_TX_LANE_ADDR_3f_SET(r,f) (r).ln_addr3[0]=(((r).ln_addr3[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8)) | (31 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_LN_ADDR3r_RX_LANE_ADDR_3f_GET(r) (((r).ln_addr3[0]) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_LN_ADDR3r_RX_LANE_ADDR_3f_SET(r,f) (r).ln_addr3[0]=(((r).ln_addr3[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access LN_ADDR3.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_LN_ADDR3r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_LN_ADDR3r,(_r._ln_addr3))
#define BCMI_TSCF_GEN3_XGXS_WRITE_LN_ADDR3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_LN_ADDR3r,(_r._ln_addr3)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_LN_ADDR3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_LN_ADDR3r,(_r._ln_addr3))
#define BCMI_TSCF_GEN3_XGXS_READLN_LN_ADDR3r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_LN_ADDR3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ln_addr3))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_LN_ADDR3r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_LN_ADDR3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ln_addr3))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_LN_ADDR3r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_LN_ADDR3r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ln_addr3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LN_ADDR3r BCMI_TSCF_GEN3_XGXS_LN_ADDR3r
#define LN_ADDR3r_SIZE BCMI_TSCF_GEN3_XGXS_LN_ADDR3r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_LN_ADDR3r_t LN_ADDR3r_t;
#define LN_ADDR3r_CLR BCMI_TSCF_GEN3_XGXS_LN_ADDR3r_CLR
#define LN_ADDR3r_SET BCMI_TSCF_GEN3_XGXS_LN_ADDR3r_SET
#define LN_ADDR3r_GET BCMI_TSCF_GEN3_XGXS_LN_ADDR3r_GET
#define LN_ADDR3r_TX_LANE_ADDR_3f_GET BCMI_TSCF_GEN3_XGXS_LN_ADDR3r_TX_LANE_ADDR_3f_GET
#define LN_ADDR3r_TX_LANE_ADDR_3f_SET BCMI_TSCF_GEN3_XGXS_LN_ADDR3r_TX_LANE_ADDR_3f_SET
#define LN_ADDR3r_RX_LANE_ADDR_3f_GET BCMI_TSCF_GEN3_XGXS_LN_ADDR3r_RX_LANE_ADDR_3f_GET
#define LN_ADDR3r_RX_LANE_ADDR_3f_SET BCMI_TSCF_GEN3_XGXS_LN_ADDR3r_RX_LANE_ADDR_3f_SET
#define READ_LN_ADDR3r BCMI_TSCF_GEN3_XGXS_READ_LN_ADDR3r
#define WRITE_LN_ADDR3r BCMI_TSCF_GEN3_XGXS_WRITE_LN_ADDR3r
#define MODIFY_LN_ADDR3r BCMI_TSCF_GEN3_XGXS_MODIFY_LN_ADDR3r
#define READLN_LN_ADDR3r BCMI_TSCF_GEN3_XGXS_READLN_LN_ADDR3r
#define WRITELN_LN_ADDR3r BCMI_TSCF_GEN3_XGXS_WRITELN_LN_ADDR3r
#define WRITEALL_LN_ADDR3r BCMI_TSCF_GEN3_XGXS_WRITEALL_LN_ADDR3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_LN_ADDR3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_LN_CLK_RST_N_PWRDWN_CTL
 * BLOCKS:   RX_CKRST_CTRL_MONTEREY
 * REGADDR:  0xd1a1
 * DEVAD:    1
 * DESC:     LANE_CLK_RESET_N_POWERDOWN_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LN_RX_S_PWRDN    Active High Power Down control for RX Lane.If asserted by writing to 1'b1 will power down the RX Lane.
 *     AFE_SIGDET_PWRDN Power Down for Signal Detect. 1=power down
 */
#define BCMI_TSCF_GEN3_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr (0x0001d1a1 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr_SIZE 4

/*
 * This structure should be used to declare and program RX_LN_CLK_RST_N_PWRDWN_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr_s {
	uint32_t v[1];
	uint32_t rx_ln_clk_rst_n_pwrdwn_ctl[1];
	uint32_t _rx_ln_clk_rst_n_pwrdwn_ctl;
} BCMI_TSCF_GEN3_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr_CLR(r) (r).rx_ln_clk_rst_n_pwrdwn_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr_SET(r,d) (r).rx_ln_clk_rst_n_pwrdwn_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr_GET(r) (r).rx_ln_clk_rst_n_pwrdwn_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr_AFE_SIGDET_PWRDNf_GET(r) ((((r).rx_ln_clk_rst_n_pwrdwn_ctl[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr_AFE_SIGDET_PWRDNf_SET(r,f) (r).rx_ln_clk_rst_n_pwrdwn_ctl[0]=(((r).rx_ln_clk_rst_n_pwrdwn_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr_LN_RX_S_PWRDNf_GET(r) (((r).rx_ln_clk_rst_n_pwrdwn_ctl[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr_LN_RX_S_PWRDNf_SET(r,f) (r).rx_ln_clk_rst_n_pwrdwn_ctl[0]=(((r).rx_ln_clk_rst_n_pwrdwn_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_LN_CLK_RST_N_PWRDWN_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr,(_r._rx_ln_clk_rst_n_pwrdwn_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr,(_r._rx_ln_clk_rst_n_pwrdwn_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr,(_r._rx_ln_clk_rst_n_pwrdwn_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_ln_clk_rst_n_pwrdwn_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_ln_clk_rst_n_pwrdwn_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_ln_clk_rst_n_pwrdwn_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_LN_CLK_RST_N_PWRDWN_CTLr BCMI_TSCF_GEN3_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr
#define RX_LN_CLK_RST_N_PWRDWN_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr_t RX_LN_CLK_RST_N_PWRDWN_CTLr_t;
#define RX_LN_CLK_RST_N_PWRDWN_CTLr_CLR BCMI_TSCF_GEN3_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr_CLR
#define RX_LN_CLK_RST_N_PWRDWN_CTLr_SET BCMI_TSCF_GEN3_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr_SET
#define RX_LN_CLK_RST_N_PWRDWN_CTLr_GET BCMI_TSCF_GEN3_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr_GET
#define RX_LN_CLK_RST_N_PWRDWN_CTLr_AFE_SIGDET_PWRDNf_GET BCMI_TSCF_GEN3_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr_AFE_SIGDET_PWRDNf_GET
#define RX_LN_CLK_RST_N_PWRDWN_CTLr_AFE_SIGDET_PWRDNf_SET BCMI_TSCF_GEN3_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr_AFE_SIGDET_PWRDNf_SET
#define RX_LN_CLK_RST_N_PWRDWN_CTLr_LN_RX_S_PWRDNf_GET BCMI_TSCF_GEN3_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr_LN_RX_S_PWRDNf_GET
#define RX_LN_CLK_RST_N_PWRDWN_CTLr_LN_RX_S_PWRDNf_SET BCMI_TSCF_GEN3_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr_LN_RX_S_PWRDNf_SET
#define READ_RX_LN_CLK_RST_N_PWRDWN_CTLr BCMI_TSCF_GEN3_XGXS_READ_RX_LN_CLK_RST_N_PWRDWN_CTLr
#define WRITE_RX_LN_CLK_RST_N_PWRDWN_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_RX_LN_CLK_RST_N_PWRDWN_CTLr
#define MODIFY_RX_LN_CLK_RST_N_PWRDWN_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_RX_LN_CLK_RST_N_PWRDWN_CTLr
#define READLN_RX_LN_CLK_RST_N_PWRDWN_CTLr BCMI_TSCF_GEN3_XGXS_READLN_RX_LN_CLK_RST_N_PWRDWN_CTLr
#define WRITELN_RX_LN_CLK_RST_N_PWRDWN_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_RX_LN_CLK_RST_N_PWRDWN_CTLr
#define WRITEALL_RX_LN_CLK_RST_N_PWRDWN_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_LN_CLK_RST_N_PWRDWN_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_LN_AFE_RST_PWRDWN_CTL_CTL
 * BLOCKS:   RX_CKRST_CTRL_MONTEREY
 * REGADDR:  0xd1a2
 * DEVAD:    1
 * DESC:     LANE_AFE_RESET_PWRDWN_CONTROL_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AFE_RX_PWRDN_FRC AFE RX Lane powerdown force.
 *     AFE_RX_PWRDN_FRC_VAL AFE RX Lane powerdown force value.
 *     AFE_RX_RESET_FRC AFE RX Lane reset force.
 *     AFE_RX_RESET_FRC_VAL AFE RX Lane reset force value.
 *     AFE_RX_RCLK20_PWRDN_FRC AFE RX Lane rx_rclk20_pwrdwn force.
 *     AFE_RX_RCLK20_PWRDN_FRC_VAL AFE RX Lane rx_rclk20_pwrdwn force value.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr (0x0001d1a2 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_SIZE 4

/*
 * This structure should be used to declare and program RX_LN_AFE_RST_PWRDWN_CTL_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_s {
	uint32_t v[1];
	uint32_t rx_ln_afe_rst_pwrdwn_ctl_ctl[1];
	uint32_t _rx_ln_afe_rst_pwrdwn_ctl_ctl;
} BCMI_TSCF_GEN3_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_CLR(r) (r).rx_ln_afe_rst_pwrdwn_ctl_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_SET(r,d) (r).rx_ln_afe_rst_pwrdwn_ctl_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_GET(r) (r).rx_ln_afe_rst_pwrdwn_ctl_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_RCLK20_PWRDN_FRC_VALf_GET(r) ((((r).rx_ln_afe_rst_pwrdwn_ctl_ctl[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_RCLK20_PWRDN_FRC_VALf_SET(r,f) (r).rx_ln_afe_rst_pwrdwn_ctl_ctl[0]=(((r).rx_ln_afe_rst_pwrdwn_ctl_ctl[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_RCLK20_PWRDN_FRCf_GET(r) ((((r).rx_ln_afe_rst_pwrdwn_ctl_ctl[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_RCLK20_PWRDN_FRCf_SET(r,f) (r).rx_ln_afe_rst_pwrdwn_ctl_ctl[0]=(((r).rx_ln_afe_rst_pwrdwn_ctl_ctl[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_RESET_FRC_VALf_GET(r) ((((r).rx_ln_afe_rst_pwrdwn_ctl_ctl[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_RESET_FRC_VALf_SET(r,f) (r).rx_ln_afe_rst_pwrdwn_ctl_ctl[0]=(((r).rx_ln_afe_rst_pwrdwn_ctl_ctl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_RESET_FRCf_GET(r) ((((r).rx_ln_afe_rst_pwrdwn_ctl_ctl[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_RESET_FRCf_SET(r,f) (r).rx_ln_afe_rst_pwrdwn_ctl_ctl[0]=(((r).rx_ln_afe_rst_pwrdwn_ctl_ctl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_PWRDN_FRC_VALf_GET(r) ((((r).rx_ln_afe_rst_pwrdwn_ctl_ctl[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_PWRDN_FRC_VALf_SET(r,f) (r).rx_ln_afe_rst_pwrdwn_ctl_ctl[0]=(((r).rx_ln_afe_rst_pwrdwn_ctl_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_PWRDN_FRCf_GET(r) (((r).rx_ln_afe_rst_pwrdwn_ctl_ctl[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_PWRDN_FRCf_SET(r,f) (r).rx_ln_afe_rst_pwrdwn_ctl_ctl[0]=(((r).rx_ln_afe_rst_pwrdwn_ctl_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_LN_AFE_RST_PWRDWN_CTL_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_LN_AFE_RST_PWRDWN_CTL_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr,(_r._rx_ln_afe_rst_pwrdwn_ctl_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_LN_AFE_RST_PWRDWN_CTL_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr,(_r._rx_ln_afe_rst_pwrdwn_ctl_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_LN_AFE_RST_PWRDWN_CTL_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr,(_r._rx_ln_afe_rst_pwrdwn_ctl_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_LN_AFE_RST_PWRDWN_CTL_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_ln_afe_rst_pwrdwn_ctl_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_LN_AFE_RST_PWRDWN_CTL_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_ln_afe_rst_pwrdwn_ctl_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_LN_AFE_RST_PWRDWN_CTL_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_ln_afe_rst_pwrdwn_ctl_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_LN_AFE_RST_PWRDWN_CTL_CTLr BCMI_TSCF_GEN3_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr
#define RX_LN_AFE_RST_PWRDWN_CTL_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_t RX_LN_AFE_RST_PWRDWN_CTL_CTLr_t;
#define RX_LN_AFE_RST_PWRDWN_CTL_CTLr_CLR BCMI_TSCF_GEN3_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_CLR
#define RX_LN_AFE_RST_PWRDWN_CTL_CTLr_SET BCMI_TSCF_GEN3_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_SET
#define RX_LN_AFE_RST_PWRDWN_CTL_CTLr_GET BCMI_TSCF_GEN3_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_GET
#define RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_RCLK20_PWRDN_FRC_VALf_GET BCMI_TSCF_GEN3_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_RCLK20_PWRDN_FRC_VALf_GET
#define RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_RCLK20_PWRDN_FRC_VALf_SET BCMI_TSCF_GEN3_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_RCLK20_PWRDN_FRC_VALf_SET
#define RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_RCLK20_PWRDN_FRCf_GET BCMI_TSCF_GEN3_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_RCLK20_PWRDN_FRCf_GET
#define RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_RCLK20_PWRDN_FRCf_SET BCMI_TSCF_GEN3_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_RCLK20_PWRDN_FRCf_SET
#define RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_RESET_FRC_VALf_GET BCMI_TSCF_GEN3_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_RESET_FRC_VALf_GET
#define RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_RESET_FRC_VALf_SET BCMI_TSCF_GEN3_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_RESET_FRC_VALf_SET
#define RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_RESET_FRCf_GET BCMI_TSCF_GEN3_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_RESET_FRCf_GET
#define RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_RESET_FRCf_SET BCMI_TSCF_GEN3_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_RESET_FRCf_SET
#define RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_PWRDN_FRC_VALf_GET BCMI_TSCF_GEN3_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_PWRDN_FRC_VALf_GET
#define RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_PWRDN_FRC_VALf_SET BCMI_TSCF_GEN3_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_PWRDN_FRC_VALf_SET
#define RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_PWRDN_FRCf_GET BCMI_TSCF_GEN3_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_PWRDN_FRCf_GET
#define RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_PWRDN_FRCf_SET BCMI_TSCF_GEN3_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_PWRDN_FRCf_SET
#define READ_RX_LN_AFE_RST_PWRDWN_CTL_CTLr BCMI_TSCF_GEN3_XGXS_READ_RX_LN_AFE_RST_PWRDWN_CTL_CTLr
#define WRITE_RX_LN_AFE_RST_PWRDWN_CTL_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_RX_LN_AFE_RST_PWRDWN_CTL_CTLr
#define MODIFY_RX_LN_AFE_RST_PWRDWN_CTL_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_RX_LN_AFE_RST_PWRDWN_CTL_CTLr
#define READLN_RX_LN_AFE_RST_PWRDWN_CTL_CTLr BCMI_TSCF_GEN3_XGXS_READLN_RX_LN_AFE_RST_PWRDWN_CTL_CTLr
#define WRITELN_RX_LN_AFE_RST_PWRDWN_CTL_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_RX_LN_AFE_RST_PWRDWN_CTL_CTLr
#define WRITEALL_RX_LN_AFE_RST_PWRDWN_CTL_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_LN_AFE_RST_PWRDWN_CTL_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_LN_RST_N_PWRDN_PIN_KILL_CTL
 * BLOCKS:   RX_CKRST_CTRL_MONTEREY
 * REGADDR:  0xd1a3
 * DEVAD:    1
 * DESC:     LANE_RESET_N_PWRDN_PIN_KILL_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     PMD_LN_RX_H_PWRDN_PKILL 1'b1 will disable the pmd_ln_rx_h_pwrdn input pin.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr (0x0001d1a3 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr_SIZE 4

/*
 * This structure should be used to declare and program RX_LN_RST_N_PWRDN_PIN_KILL_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr_s {
	uint32_t v[1];
	uint32_t rx_ln_rst_n_pwrdn_pin_kill_ctl[1];
	uint32_t _rx_ln_rst_n_pwrdn_pin_kill_ctl;
} BCMI_TSCF_GEN3_XGXS_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr_CLR(r) (r).rx_ln_rst_n_pwrdn_pin_kill_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr_SET(r,d) (r).rx_ln_rst_n_pwrdn_pin_kill_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr_GET(r) (r).rx_ln_rst_n_pwrdn_pin_kill_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_RX_H_PWRDN_PKILLf_GET(r) (((r).rx_ln_rst_n_pwrdn_pin_kill_ctl[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_RX_H_PWRDN_PKILLf_SET(r,f) (r).rx_ln_rst_n_pwrdn_pin_kill_ctl[0]=(((r).rx_ln_rst_n_pwrdn_pin_kill_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_LN_RST_N_PWRDN_PIN_KILL_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr,(_r._rx_ln_rst_n_pwrdn_pin_kill_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr,(_r._rx_ln_rst_n_pwrdn_pin_kill_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr,(_r._rx_ln_rst_n_pwrdn_pin_kill_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_ln_rst_n_pwrdn_pin_kill_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_ln_rst_n_pwrdn_pin_kill_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_ln_rst_n_pwrdn_pin_kill_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_TSCF_GEN3_XGXS_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define RX_LN_RST_N_PWRDN_PIN_KILL_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr_t RX_LN_RST_N_PWRDN_PIN_KILL_CTLr_t;
#define RX_LN_RST_N_PWRDN_PIN_KILL_CTLr_CLR BCMI_TSCF_GEN3_XGXS_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr_CLR
#define RX_LN_RST_N_PWRDN_PIN_KILL_CTLr_SET BCMI_TSCF_GEN3_XGXS_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr_SET
#define RX_LN_RST_N_PWRDN_PIN_KILL_CTLr_GET BCMI_TSCF_GEN3_XGXS_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr_GET
#define RX_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_RX_H_PWRDN_PKILLf_GET BCMI_TSCF_GEN3_XGXS_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_RX_H_PWRDN_PKILLf_GET
#define RX_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_RX_H_PWRDN_PKILLf_SET BCMI_TSCF_GEN3_XGXS_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_RX_H_PWRDN_PKILLf_SET
#define READ_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_TSCF_GEN3_XGXS_READ_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define WRITE_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define MODIFY_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define READLN_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_TSCF_GEN3_XGXS_READLN_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define WRITELN_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define WRITEALL_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_LN_DBG_RST_CTL
 * BLOCKS:   RX_CKRST_CTRL_MONTEREY
 * REGADDR:  0xd1a4
 * DEVAD:    1
 * DESC:     LANE_DEBUG_RESET_CONTROL
 * RESETVAL: 0x3 (3)
 * ACCESS:   R/W
 * FIELDS:
 *     LN_RX_S_RSTB     Active Low Lane Soft Reset for RX datapath and registers. If asserted by writing to 1'b0 will reset the RX registers and datapath for a lane.This is a debug only register and it is not handled by FW-HW handshake
 *     LN_RX_DP_S_RSTB  Active Low Lane Soft Reset for RX datapath. If asserted by writing to 1'b0 will reset the RX datapath for a lane.This is a debug only register and it is not handled by FW-HW handshake
 *     SIGDET_DP_RSTB_EN If asserted by writing to 1'b1 then lane datapath reset will also reset the sigdet filetr logic alomg with lane register reset.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_LN_DBG_RST_CTLr (0x0001d1a4 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_LN_DBG_RST_CTLr_SIZE 4

/*
 * This structure should be used to declare and program RX_LN_DBG_RST_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_LN_DBG_RST_CTLr_s {
	uint32_t v[1];
	uint32_t rx_ln_dbg_rst_ctl[1];
	uint32_t _rx_ln_dbg_rst_ctl;
} BCMI_TSCF_GEN3_XGXS_RX_LN_DBG_RST_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_RX_LN_DBG_RST_CTLr_CLR(r) (r).rx_ln_dbg_rst_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_LN_DBG_RST_CTLr_SET(r,d) (r).rx_ln_dbg_rst_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_LN_DBG_RST_CTLr_GET(r) (r).rx_ln_dbg_rst_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_LN_DBG_RST_CTLr_SIGDET_DP_RSTB_ENf_GET(r) ((((r).rx_ln_dbg_rst_ctl[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_LN_DBG_RST_CTLr_SIGDET_DP_RSTB_ENf_SET(r,f) (r).rx_ln_dbg_rst_ctl[0]=(((r).rx_ln_dbg_rst_ctl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_RX_LN_DBG_RST_CTLr_LN_RX_DP_S_RSTBf_GET(r) ((((r).rx_ln_dbg_rst_ctl[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_LN_DBG_RST_CTLr_LN_RX_DP_S_RSTBf_SET(r,f) (r).rx_ln_dbg_rst_ctl[0]=(((r).rx_ln_dbg_rst_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_RX_LN_DBG_RST_CTLr_LN_RX_S_RSTBf_GET(r) (((r).rx_ln_dbg_rst_ctl[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_LN_DBG_RST_CTLr_LN_RX_S_RSTBf_SET(r,f) (r).rx_ln_dbg_rst_ctl[0]=(((r).rx_ln_dbg_rst_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_LN_DBG_RST_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_LN_DBG_RST_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_LN_DBG_RST_CTLr,(_r._rx_ln_dbg_rst_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_LN_DBG_RST_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_LN_DBG_RST_CTLr,(_r._rx_ln_dbg_rst_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_LN_DBG_RST_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_LN_DBG_RST_CTLr,(_r._rx_ln_dbg_rst_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_LN_DBG_RST_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_LN_DBG_RST_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_ln_dbg_rst_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_LN_DBG_RST_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_LN_DBG_RST_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_ln_dbg_rst_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_LN_DBG_RST_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_LN_DBG_RST_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_ln_dbg_rst_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_LN_DBG_RST_CTLr BCMI_TSCF_GEN3_XGXS_RX_LN_DBG_RST_CTLr
#define RX_LN_DBG_RST_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_RX_LN_DBG_RST_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_LN_DBG_RST_CTLr_t RX_LN_DBG_RST_CTLr_t;
#define RX_LN_DBG_RST_CTLr_CLR BCMI_TSCF_GEN3_XGXS_RX_LN_DBG_RST_CTLr_CLR
#define RX_LN_DBG_RST_CTLr_SET BCMI_TSCF_GEN3_XGXS_RX_LN_DBG_RST_CTLr_SET
#define RX_LN_DBG_RST_CTLr_GET BCMI_TSCF_GEN3_XGXS_RX_LN_DBG_RST_CTLr_GET
#define RX_LN_DBG_RST_CTLr_SIGDET_DP_RSTB_ENf_GET BCMI_TSCF_GEN3_XGXS_RX_LN_DBG_RST_CTLr_SIGDET_DP_RSTB_ENf_GET
#define RX_LN_DBG_RST_CTLr_SIGDET_DP_RSTB_ENf_SET BCMI_TSCF_GEN3_XGXS_RX_LN_DBG_RST_CTLr_SIGDET_DP_RSTB_ENf_SET
#define RX_LN_DBG_RST_CTLr_LN_RX_DP_S_RSTBf_GET BCMI_TSCF_GEN3_XGXS_RX_LN_DBG_RST_CTLr_LN_RX_DP_S_RSTBf_GET
#define RX_LN_DBG_RST_CTLr_LN_RX_DP_S_RSTBf_SET BCMI_TSCF_GEN3_XGXS_RX_LN_DBG_RST_CTLr_LN_RX_DP_S_RSTBf_SET
#define RX_LN_DBG_RST_CTLr_LN_RX_S_RSTBf_GET BCMI_TSCF_GEN3_XGXS_RX_LN_DBG_RST_CTLr_LN_RX_S_RSTBf_GET
#define RX_LN_DBG_RST_CTLr_LN_RX_S_RSTBf_SET BCMI_TSCF_GEN3_XGXS_RX_LN_DBG_RST_CTLr_LN_RX_S_RSTBf_SET
#define READ_RX_LN_DBG_RST_CTLr BCMI_TSCF_GEN3_XGXS_READ_RX_LN_DBG_RST_CTLr
#define WRITE_RX_LN_DBG_RST_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_RX_LN_DBG_RST_CTLr
#define MODIFY_RX_LN_DBG_RST_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_RX_LN_DBG_RST_CTLr
#define READLN_RX_LN_DBG_RST_CTLr BCMI_TSCF_GEN3_XGXS_READLN_RX_LN_DBG_RST_CTLr
#define WRITELN_RX_LN_DBG_RST_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_RX_LN_DBG_RST_CTLr
#define WRITEALL_RX_LN_DBG_RST_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_LN_DBG_RST_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_LN_DBG_RST_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_CLK_N_RST_DBG_CTL
 * BLOCKS:   RX_CKRST_CTRL_MONTEREY
 * REGADDR:  0xd1a7
 * DEVAD:    1
 * DESC:     CLOCK_N_RESET_DEBUG_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LN_RX_S_CLKGATE_FRC_ON RX Active High Lane clock gator enable. If 1'1b1 then rx lane clock will be gated off. It does not affect the rclk goingto RMIC block so rx lane based registers can still be readable but not writable.It is recommended for user to force pmd_rx_clk_vld to 1'b0 while rx_s_clkgate_frc_on is asserted to 1'b1by using pmd_rx_clk_vld_frc/frc_val registers.
 *     LN_RX_S_COMCLK_SEL Mux control for selection of comclk for RX Lane clocks.If asserted by writing to 1'b1 will select the comclk for the lane clocks.It is recommended for user to force pmd_rx_clk_vld to 1'b0 while ln_rx_s_comclk_sel is asserted to 1'b1by using pmd_rx_clk_vld_frc/frc_val registers.
 *     LN_RX_S_COMCLK_FRC_ON Mux control for selection of comclk for RX Lane clocks by force.If asserted by writing to 1'b1 will select the comclk for the lane clocks. This is a debug bit and should be only used if lane clock from AFE is dead.It is recommended for user to force pmd_rx_clk_vld to 1'b0 while ln_rx_s_comclk_frc_on is asserted to 1'b1by using pmd_rx_clk_vld_frc/frc_val registers.
 *     PMD_RX_CLK_VLD_FRC pmd_rx_clk_vld core output pin force.
 *     PMD_RX_CLK_VLD_FRC_VAL pmd_rx_clk_vld core output pin force value.
 *     LN_RCLK20_S_CLKGATE_FRC_ON Active High Lane clock gate control for RX rclk20 clock gator.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_CLK_N_RST_DBG_CTLr (0x0001d1a7 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_CLK_N_RST_DBG_CTLr_SIZE 4

/*
 * This structure should be used to declare and program RX_CLK_N_RST_DBG_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_CLK_N_RST_DBG_CTLr_s {
	uint32_t v[1];
	uint32_t rx_clk_n_rst_dbg_ctl[1];
	uint32_t _rx_clk_n_rst_dbg_ctl;
} BCMI_TSCF_GEN3_XGXS_RX_CLK_N_RST_DBG_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_RX_CLK_N_RST_DBG_CTLr_CLR(r) (r).rx_clk_n_rst_dbg_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_CLK_N_RST_DBG_CTLr_SET(r,d) (r).rx_clk_n_rst_dbg_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_CLK_N_RST_DBG_CTLr_GET(r) (r).rx_clk_n_rst_dbg_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_CLK_N_RST_DBG_CTLr_LN_RCLK20_S_CLKGATE_FRC_ONf_GET(r) ((((r).rx_clk_n_rst_dbg_ctl[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_CLK_N_RST_DBG_CTLr_LN_RCLK20_S_CLKGATE_FRC_ONf_SET(r,f) (r).rx_clk_n_rst_dbg_ctl[0]=(((r).rx_clk_n_rst_dbg_ctl[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_RX_CLK_N_RST_DBG_CTLr_PMD_RX_CLK_VLD_FRC_VALf_GET(r) ((((r).rx_clk_n_rst_dbg_ctl[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_CLK_N_RST_DBG_CTLr_PMD_RX_CLK_VLD_FRC_VALf_SET(r,f) (r).rx_clk_n_rst_dbg_ctl[0]=(((r).rx_clk_n_rst_dbg_ctl[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_RX_CLK_N_RST_DBG_CTLr_PMD_RX_CLK_VLD_FRCf_GET(r) ((((r).rx_clk_n_rst_dbg_ctl[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_CLK_N_RST_DBG_CTLr_PMD_RX_CLK_VLD_FRCf_SET(r,f) (r).rx_clk_n_rst_dbg_ctl[0]=(((r).rx_clk_n_rst_dbg_ctl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_RX_CLK_N_RST_DBG_CTLr_LN_RX_S_COMCLK_FRC_ONf_GET(r) ((((r).rx_clk_n_rst_dbg_ctl[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_CLK_N_RST_DBG_CTLr_LN_RX_S_COMCLK_FRC_ONf_SET(r,f) (r).rx_clk_n_rst_dbg_ctl[0]=(((r).rx_clk_n_rst_dbg_ctl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_RX_CLK_N_RST_DBG_CTLr_LN_RX_S_COMCLK_SELf_GET(r) ((((r).rx_clk_n_rst_dbg_ctl[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_CLK_N_RST_DBG_CTLr_LN_RX_S_COMCLK_SELf_SET(r,f) (r).rx_clk_n_rst_dbg_ctl[0]=(((r).rx_clk_n_rst_dbg_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_RX_CLK_N_RST_DBG_CTLr_LN_RX_S_CLKGATE_FRC_ONf_GET(r) (((r).rx_clk_n_rst_dbg_ctl[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_CLK_N_RST_DBG_CTLr_LN_RX_S_CLKGATE_FRC_ONf_SET(r,f) (r).rx_clk_n_rst_dbg_ctl[0]=(((r).rx_clk_n_rst_dbg_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_CLK_N_RST_DBG_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_CLK_N_RST_DBG_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_CLK_N_RST_DBG_CTLr,(_r._rx_clk_n_rst_dbg_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_CLK_N_RST_DBG_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_CLK_N_RST_DBG_CTLr,(_r._rx_clk_n_rst_dbg_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_CLK_N_RST_DBG_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_CLK_N_RST_DBG_CTLr,(_r._rx_clk_n_rst_dbg_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_CLK_N_RST_DBG_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_CLK_N_RST_DBG_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_clk_n_rst_dbg_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_CLK_N_RST_DBG_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_CLK_N_RST_DBG_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_clk_n_rst_dbg_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_CLK_N_RST_DBG_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_CLK_N_RST_DBG_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_clk_n_rst_dbg_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_CLK_N_RST_DBG_CTLr BCMI_TSCF_GEN3_XGXS_RX_CLK_N_RST_DBG_CTLr
#define RX_CLK_N_RST_DBG_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_RX_CLK_N_RST_DBG_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_CLK_N_RST_DBG_CTLr_t RX_CLK_N_RST_DBG_CTLr_t;
#define RX_CLK_N_RST_DBG_CTLr_CLR BCMI_TSCF_GEN3_XGXS_RX_CLK_N_RST_DBG_CTLr_CLR
#define RX_CLK_N_RST_DBG_CTLr_SET BCMI_TSCF_GEN3_XGXS_RX_CLK_N_RST_DBG_CTLr_SET
#define RX_CLK_N_RST_DBG_CTLr_GET BCMI_TSCF_GEN3_XGXS_RX_CLK_N_RST_DBG_CTLr_GET
#define RX_CLK_N_RST_DBG_CTLr_LN_RCLK20_S_CLKGATE_FRC_ONf_GET BCMI_TSCF_GEN3_XGXS_RX_CLK_N_RST_DBG_CTLr_LN_RCLK20_S_CLKGATE_FRC_ONf_GET
#define RX_CLK_N_RST_DBG_CTLr_LN_RCLK20_S_CLKGATE_FRC_ONf_SET BCMI_TSCF_GEN3_XGXS_RX_CLK_N_RST_DBG_CTLr_LN_RCLK20_S_CLKGATE_FRC_ONf_SET
#define RX_CLK_N_RST_DBG_CTLr_PMD_RX_CLK_VLD_FRC_VALf_GET BCMI_TSCF_GEN3_XGXS_RX_CLK_N_RST_DBG_CTLr_PMD_RX_CLK_VLD_FRC_VALf_GET
#define RX_CLK_N_RST_DBG_CTLr_PMD_RX_CLK_VLD_FRC_VALf_SET BCMI_TSCF_GEN3_XGXS_RX_CLK_N_RST_DBG_CTLr_PMD_RX_CLK_VLD_FRC_VALf_SET
#define RX_CLK_N_RST_DBG_CTLr_PMD_RX_CLK_VLD_FRCf_GET BCMI_TSCF_GEN3_XGXS_RX_CLK_N_RST_DBG_CTLr_PMD_RX_CLK_VLD_FRCf_GET
#define RX_CLK_N_RST_DBG_CTLr_PMD_RX_CLK_VLD_FRCf_SET BCMI_TSCF_GEN3_XGXS_RX_CLK_N_RST_DBG_CTLr_PMD_RX_CLK_VLD_FRCf_SET
#define RX_CLK_N_RST_DBG_CTLr_LN_RX_S_COMCLK_FRC_ONf_GET BCMI_TSCF_GEN3_XGXS_RX_CLK_N_RST_DBG_CTLr_LN_RX_S_COMCLK_FRC_ONf_GET
#define RX_CLK_N_RST_DBG_CTLr_LN_RX_S_COMCLK_FRC_ONf_SET BCMI_TSCF_GEN3_XGXS_RX_CLK_N_RST_DBG_CTLr_LN_RX_S_COMCLK_FRC_ONf_SET
#define RX_CLK_N_RST_DBG_CTLr_LN_RX_S_COMCLK_SELf_GET BCMI_TSCF_GEN3_XGXS_RX_CLK_N_RST_DBG_CTLr_LN_RX_S_COMCLK_SELf_GET
#define RX_CLK_N_RST_DBG_CTLr_LN_RX_S_COMCLK_SELf_SET BCMI_TSCF_GEN3_XGXS_RX_CLK_N_RST_DBG_CTLr_LN_RX_S_COMCLK_SELf_SET
#define RX_CLK_N_RST_DBG_CTLr_LN_RX_S_CLKGATE_FRC_ONf_GET BCMI_TSCF_GEN3_XGXS_RX_CLK_N_RST_DBG_CTLr_LN_RX_S_CLKGATE_FRC_ONf_GET
#define RX_CLK_N_RST_DBG_CTLr_LN_RX_S_CLKGATE_FRC_ONf_SET BCMI_TSCF_GEN3_XGXS_RX_CLK_N_RST_DBG_CTLr_LN_RX_S_CLKGATE_FRC_ONf_SET
#define READ_RX_CLK_N_RST_DBG_CTLr BCMI_TSCF_GEN3_XGXS_READ_RX_CLK_N_RST_DBG_CTLr
#define WRITE_RX_CLK_N_RST_DBG_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_RX_CLK_N_RST_DBG_CTLr
#define MODIFY_RX_CLK_N_RST_DBG_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_RX_CLK_N_RST_DBG_CTLr
#define READLN_RX_CLK_N_RST_DBG_CTLr BCMI_TSCF_GEN3_XGXS_READLN_RX_CLK_N_RST_DBG_CTLr
#define WRITELN_RX_CLK_N_RST_DBG_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_RX_CLK_N_RST_DBG_CTLr
#define WRITEALL_RX_CLK_N_RST_DBG_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_CLK_N_RST_DBG_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_CLK_N_RST_DBG_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_PMD_LN_MODE_STS
 * BLOCKS:   RX_CKRST_CTRL_MONTEREY
 * REGADDR:  0xd1a8
 * DEVAD:    1
 * DESC:     PMD_LANE_MODE_STATUS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     PMD_RX_LANE_MODE This indicates the status of the core input pin pmd_rx_lane_mode.This is driven from PCS and used for communication between PCS and PMD Micro code.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_PMD_LN_MODE_STSr (0x0001d1a8 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_PMD_LN_MODE_STSr_SIZE 4

/*
 * This structure should be used to declare and program RX_PMD_LN_MODE_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_PMD_LN_MODE_STSr_s {
	uint32_t v[1];
	uint32_t rx_pmd_ln_mode_sts[1];
	uint32_t _rx_pmd_ln_mode_sts;
} BCMI_TSCF_GEN3_XGXS_RX_PMD_LN_MODE_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_RX_PMD_LN_MODE_STSr_CLR(r) (r).rx_pmd_ln_mode_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_PMD_LN_MODE_STSr_SET(r,d) (r).rx_pmd_ln_mode_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_PMD_LN_MODE_STSr_GET(r) (r).rx_pmd_ln_mode_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_PMD_LN_MODE_STSr_PMD_RX_LANE_MODEf_GET(r) (((r).rx_pmd_ln_mode_sts[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_RX_PMD_LN_MODE_STSr_PMD_RX_LANE_MODEf_SET(r,f) (r).rx_pmd_ln_mode_sts[0]=(((r).rx_pmd_ln_mode_sts[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_PMD_LN_MODE_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_PMD_LN_MODE_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_PMD_LN_MODE_STSr,(_r._rx_pmd_ln_mode_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_PMD_LN_MODE_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_PMD_LN_MODE_STSr,(_r._rx_pmd_ln_mode_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_PMD_LN_MODE_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_PMD_LN_MODE_STSr,(_r._rx_pmd_ln_mode_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_PMD_LN_MODE_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_PMD_LN_MODE_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_pmd_ln_mode_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_PMD_LN_MODE_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_PMD_LN_MODE_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_pmd_ln_mode_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_PMD_LN_MODE_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_PMD_LN_MODE_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_pmd_ln_mode_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_PMD_LN_MODE_STSr BCMI_TSCF_GEN3_XGXS_RX_PMD_LN_MODE_STSr
#define RX_PMD_LN_MODE_STSr_SIZE BCMI_TSCF_GEN3_XGXS_RX_PMD_LN_MODE_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_PMD_LN_MODE_STSr_t RX_PMD_LN_MODE_STSr_t;
#define RX_PMD_LN_MODE_STSr_CLR BCMI_TSCF_GEN3_XGXS_RX_PMD_LN_MODE_STSr_CLR
#define RX_PMD_LN_MODE_STSr_SET BCMI_TSCF_GEN3_XGXS_RX_PMD_LN_MODE_STSr_SET
#define RX_PMD_LN_MODE_STSr_GET BCMI_TSCF_GEN3_XGXS_RX_PMD_LN_MODE_STSr_GET
#define RX_PMD_LN_MODE_STSr_PMD_RX_LANE_MODEf_GET BCMI_TSCF_GEN3_XGXS_RX_PMD_LN_MODE_STSr_PMD_RX_LANE_MODEf_GET
#define RX_PMD_LN_MODE_STSr_PMD_RX_LANE_MODEf_SET BCMI_TSCF_GEN3_XGXS_RX_PMD_LN_MODE_STSr_PMD_RX_LANE_MODEf_SET
#define READ_RX_PMD_LN_MODE_STSr BCMI_TSCF_GEN3_XGXS_READ_RX_PMD_LN_MODE_STSr
#define WRITE_RX_PMD_LN_MODE_STSr BCMI_TSCF_GEN3_XGXS_WRITE_RX_PMD_LN_MODE_STSr
#define MODIFY_RX_PMD_LN_MODE_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_RX_PMD_LN_MODE_STSr
#define READLN_RX_PMD_LN_MODE_STSr BCMI_TSCF_GEN3_XGXS_READLN_RX_PMD_LN_MODE_STSr
#define WRITELN_RX_PMD_LN_MODE_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_RX_PMD_LN_MODE_STSr
#define WRITEALL_RX_PMD_LN_MODE_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_PMD_LN_MODE_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_PMD_LN_MODE_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RX_AFE_RST_PWRDN_OSR_MODE_PIN_STS
 * BLOCKS:   RX_CKRST_CTRL_MONTEREY
 * REGADDR:  0xd1ac
 * DEVAD:    1
 * DESC:     AFE_RESET_PWRDN_OSR_MODE_PIN_STATUS
 * RESETVAL: 0x7 (7)
 * ACCESS:   R/O
 * FIELDS:
 *     AFE_RX_PWRDN     Indicates the status of the afe_rx_pwrdn signal to the AFE after frc/frc_val mux.
 *     AFE_RX_RESET     Indicates the status of the afe_rx_reset signal to the AFE after frc/frc_val mux.
 *     AFE_RX_RCLK20_PWRDN Indicates the status of the afe_rx_rclk20_pwrdn signal to the AFE after frc/frc_val mux.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr (0x0001d1ac | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_SIZE 4

/*
 * This structure should be used to declare and program RX_AFE_RST_PWRDN_OSR_MODE_PIN_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_s {
	uint32_t v[1];
	uint32_t rx_afe_rst_pwrdn_osr_mode_pin_sts[1];
	uint32_t _rx_afe_rst_pwrdn_osr_mode_pin_sts;
} BCMI_TSCF_GEN3_XGXS_RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_CLR(r) (r).rx_afe_rst_pwrdn_osr_mode_pin_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_SET(r,d) (r).rx_afe_rst_pwrdn_osr_mode_pin_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_GET(r) (r).rx_afe_rst_pwrdn_osr_mode_pin_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_AFE_RX_RCLK20_PWRDNf_GET(r) ((((r).rx_afe_rst_pwrdn_osr_mode_pin_sts[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_AFE_RX_RCLK20_PWRDNf_SET(r,f) (r).rx_afe_rst_pwrdn_osr_mode_pin_sts[0]=(((r).rx_afe_rst_pwrdn_osr_mode_pin_sts[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_AFE_RX_RESETf_GET(r) ((((r).rx_afe_rst_pwrdn_osr_mode_pin_sts[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_AFE_RX_RESETf_SET(r,f) (r).rx_afe_rst_pwrdn_osr_mode_pin_sts[0]=(((r).rx_afe_rst_pwrdn_osr_mode_pin_sts[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_AFE_RX_PWRDNf_GET(r) (((r).rx_afe_rst_pwrdn_osr_mode_pin_sts[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_AFE_RX_PWRDNf_SET(r,f) (r).rx_afe_rst_pwrdn_osr_mode_pin_sts[0]=(((r).rx_afe_rst_pwrdn_osr_mode_pin_sts[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_AFE_RST_PWRDN_OSR_MODE_PIN_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr,(_r._rx_afe_rst_pwrdn_osr_mode_pin_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr,(_r._rx_afe_rst_pwrdn_osr_mode_pin_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr,(_r._rx_afe_rst_pwrdn_osr_mode_pin_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_afe_rst_pwrdn_osr_mode_pin_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_afe_rst_pwrdn_osr_mode_pin_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_afe_rst_pwrdn_osr_mode_pin_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_TSCF_GEN3_XGXS_RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr
#define RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_SIZE BCMI_TSCF_GEN3_XGXS_RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_t RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_t;
#define RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_CLR BCMI_TSCF_GEN3_XGXS_RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_CLR
#define RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_SET BCMI_TSCF_GEN3_XGXS_RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_SET
#define RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_GET BCMI_TSCF_GEN3_XGXS_RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_GET
#define RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_AFE_RX_RCLK20_PWRDNf_GET BCMI_TSCF_GEN3_XGXS_RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_AFE_RX_RCLK20_PWRDNf_GET
#define RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_AFE_RX_RCLK20_PWRDNf_SET BCMI_TSCF_GEN3_XGXS_RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_AFE_RX_RCLK20_PWRDNf_SET
#define RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_AFE_RX_RESETf_GET BCMI_TSCF_GEN3_XGXS_RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_AFE_RX_RESETf_GET
#define RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_AFE_RX_RESETf_SET BCMI_TSCF_GEN3_XGXS_RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_AFE_RX_RESETf_SET
#define RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_AFE_RX_PWRDNf_GET BCMI_TSCF_GEN3_XGXS_RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_AFE_RX_PWRDNf_GET
#define RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_AFE_RX_PWRDNf_SET BCMI_TSCF_GEN3_XGXS_RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_AFE_RX_PWRDNf_SET
#define READ_RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_TSCF_GEN3_XGXS_READ_RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr
#define WRITE_RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_TSCF_GEN3_XGXS_WRITE_RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr
#define MODIFY_RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr
#define READLN_RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_TSCF_GEN3_XGXS_READLN_RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr
#define WRITELN_RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr
#define WRITEALL_RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TX_LN_CLK_RST_N_PWRDWN_CTL
 * BLOCKS:   TX_CKRST_CTRL_MONTEREY
 * REGADDR:  0xd1b1
 * DEVAD:    1
 * DESC:     LANE_CLK_RESET_N_POWERDOWN_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LN_TX_S_PWRDN    Active High Power Down control for TX Lane.If asserted by writing to 1'b1 will power down the TX Lane.
 *     AFE_TX_RESET_DEASSERT AFE TX Lane reset control. This register will be reset upon POR reg/pin or lane reset reg/pin. Lower priority than the afe_tx_reset_frc/frc_val option.1 - AFE TX Lane tx_reset pin will be forcefully de-asserted irrespective of core/lane datapath pin/reg resets asserted.This bit must be set to 1'b1 for TX_Disable all 1s/0s mode to allow TX AFE to transmit the all 1s/0s data.0 - AFE TX Lane tx_reset pin will be asserted if core/lane pin/reg resets are asserted.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr (0x0001d1b1 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr_SIZE 4

/*
 * This structure should be used to declare and program TX_LN_CLK_RST_N_PWRDWN_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr_s {
	uint32_t v[1];
	uint32_t tx_ln_clk_rst_n_pwrdwn_ctl[1];
	uint32_t _tx_ln_clk_rst_n_pwrdwn_ctl;
} BCMI_TSCF_GEN3_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr_CLR(r) (r).tx_ln_clk_rst_n_pwrdwn_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr_SET(r,d) (r).tx_ln_clk_rst_n_pwrdwn_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr_GET(r) (r).tx_ln_clk_rst_n_pwrdwn_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr_AFE_TX_RESET_DEASSERTf_GET(r) ((((r).tx_ln_clk_rst_n_pwrdwn_ctl[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr_AFE_TX_RESET_DEASSERTf_SET(r,f) (r).tx_ln_clk_rst_n_pwrdwn_ctl[0]=(((r).tx_ln_clk_rst_n_pwrdwn_ctl[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr_LN_TX_S_PWRDNf_GET(r) (((r).tx_ln_clk_rst_n_pwrdwn_ctl[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr_LN_TX_S_PWRDNf_SET(r,f) (r).tx_ln_clk_rst_n_pwrdwn_ctl[0]=(((r).tx_ln_clk_rst_n_pwrdwn_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TX_LN_CLK_RST_N_PWRDWN_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TX_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr,(_r._tx_ln_clk_rst_n_pwrdwn_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TX_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr,(_r._tx_ln_clk_rst_n_pwrdwn_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TX_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr,(_r._tx_ln_clk_rst_n_pwrdwn_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_TX_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_ln_clk_rst_n_pwrdwn_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TX_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_ln_clk_rst_n_pwrdwn_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_ln_clk_rst_n_pwrdwn_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_LN_CLK_RST_N_PWRDWN_CTLr BCMI_TSCF_GEN3_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr
#define TX_LN_CLK_RST_N_PWRDWN_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr_t TX_LN_CLK_RST_N_PWRDWN_CTLr_t;
#define TX_LN_CLK_RST_N_PWRDWN_CTLr_CLR BCMI_TSCF_GEN3_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr_CLR
#define TX_LN_CLK_RST_N_PWRDWN_CTLr_SET BCMI_TSCF_GEN3_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr_SET
#define TX_LN_CLK_RST_N_PWRDWN_CTLr_GET BCMI_TSCF_GEN3_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr_GET
#define TX_LN_CLK_RST_N_PWRDWN_CTLr_AFE_TX_RESET_DEASSERTf_GET BCMI_TSCF_GEN3_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr_AFE_TX_RESET_DEASSERTf_GET
#define TX_LN_CLK_RST_N_PWRDWN_CTLr_AFE_TX_RESET_DEASSERTf_SET BCMI_TSCF_GEN3_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr_AFE_TX_RESET_DEASSERTf_SET
#define TX_LN_CLK_RST_N_PWRDWN_CTLr_LN_TX_S_PWRDNf_GET BCMI_TSCF_GEN3_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr_LN_TX_S_PWRDNf_GET
#define TX_LN_CLK_RST_N_PWRDWN_CTLr_LN_TX_S_PWRDNf_SET BCMI_TSCF_GEN3_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr_LN_TX_S_PWRDNf_SET
#define READ_TX_LN_CLK_RST_N_PWRDWN_CTLr BCMI_TSCF_GEN3_XGXS_READ_TX_LN_CLK_RST_N_PWRDWN_CTLr
#define WRITE_TX_LN_CLK_RST_N_PWRDWN_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_TX_LN_CLK_RST_N_PWRDWN_CTLr
#define MODIFY_TX_LN_CLK_RST_N_PWRDWN_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_TX_LN_CLK_RST_N_PWRDWN_CTLr
#define READLN_TX_LN_CLK_RST_N_PWRDWN_CTLr BCMI_TSCF_GEN3_XGXS_READLN_TX_LN_CLK_RST_N_PWRDWN_CTLr
#define WRITELN_TX_LN_CLK_RST_N_PWRDWN_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_TX_LN_CLK_RST_N_PWRDWN_CTLr
#define WRITEALL_TX_LN_CLK_RST_N_PWRDWN_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_LN_CLK_RST_N_PWRDWN_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TX_LN_AFE_RST_PWRDWN_CTL_CTL
 * BLOCKS:   TX_CKRST_CTRL_MONTEREY
 * REGADDR:  0xd1b2
 * DEVAD:    1
 * DESC:     LANE_AFE_RESET_PWRDWN_CONTROL_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AFE_TX_PWRDN_FRC AFE TX Lane powerdown force.
 *     AFE_TX_PWRDN_FRC_VAL AFE TX Lane powerdown force value.
 *     AFE_TX_RESET_FRC AFE TX Lane reset force.
 *     AFE_TX_RESET_FRC_VAL AFE TX Lane reset force value.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr (0x0001d1b2 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_SIZE 4

/*
 * This structure should be used to declare and program TX_LN_AFE_RST_PWRDWN_CTL_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_s {
	uint32_t v[1];
	uint32_t tx_ln_afe_rst_pwrdwn_ctl_ctl[1];
	uint32_t _tx_ln_afe_rst_pwrdwn_ctl_ctl;
} BCMI_TSCF_GEN3_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_CLR(r) (r).tx_ln_afe_rst_pwrdwn_ctl_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_SET(r,d) (r).tx_ln_afe_rst_pwrdwn_ctl_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_GET(r) (r).tx_ln_afe_rst_pwrdwn_ctl_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_TX_RESET_FRC_VALf_GET(r) ((((r).tx_ln_afe_rst_pwrdwn_ctl_ctl[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_TX_RESET_FRC_VALf_SET(r,f) (r).tx_ln_afe_rst_pwrdwn_ctl_ctl[0]=(((r).tx_ln_afe_rst_pwrdwn_ctl_ctl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_TX_RESET_FRCf_GET(r) ((((r).tx_ln_afe_rst_pwrdwn_ctl_ctl[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_TX_RESET_FRCf_SET(r,f) (r).tx_ln_afe_rst_pwrdwn_ctl_ctl[0]=(((r).tx_ln_afe_rst_pwrdwn_ctl_ctl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_TX_PWRDN_FRC_VALf_GET(r) ((((r).tx_ln_afe_rst_pwrdwn_ctl_ctl[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_TX_PWRDN_FRC_VALf_SET(r,f) (r).tx_ln_afe_rst_pwrdwn_ctl_ctl[0]=(((r).tx_ln_afe_rst_pwrdwn_ctl_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_TX_PWRDN_FRCf_GET(r) (((r).tx_ln_afe_rst_pwrdwn_ctl_ctl[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_TX_PWRDN_FRCf_SET(r,f) (r).tx_ln_afe_rst_pwrdwn_ctl_ctl[0]=(((r).tx_ln_afe_rst_pwrdwn_ctl_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TX_LN_AFE_RST_PWRDWN_CTL_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TX_LN_AFE_RST_PWRDWN_CTL_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr,(_r._tx_ln_afe_rst_pwrdwn_ctl_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TX_LN_AFE_RST_PWRDWN_CTL_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr,(_r._tx_ln_afe_rst_pwrdwn_ctl_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TX_LN_AFE_RST_PWRDWN_CTL_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr,(_r._tx_ln_afe_rst_pwrdwn_ctl_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_TX_LN_AFE_RST_PWRDWN_CTL_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_ln_afe_rst_pwrdwn_ctl_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TX_LN_AFE_RST_PWRDWN_CTL_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_ln_afe_rst_pwrdwn_ctl_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_LN_AFE_RST_PWRDWN_CTL_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_ln_afe_rst_pwrdwn_ctl_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_LN_AFE_RST_PWRDWN_CTL_CTLr BCMI_TSCF_GEN3_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr
#define TX_LN_AFE_RST_PWRDWN_CTL_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_t TX_LN_AFE_RST_PWRDWN_CTL_CTLr_t;
#define TX_LN_AFE_RST_PWRDWN_CTL_CTLr_CLR BCMI_TSCF_GEN3_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_CLR
#define TX_LN_AFE_RST_PWRDWN_CTL_CTLr_SET BCMI_TSCF_GEN3_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_SET
#define TX_LN_AFE_RST_PWRDWN_CTL_CTLr_GET BCMI_TSCF_GEN3_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_GET
#define TX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_TX_RESET_FRC_VALf_GET BCMI_TSCF_GEN3_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_TX_RESET_FRC_VALf_GET
#define TX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_TX_RESET_FRC_VALf_SET BCMI_TSCF_GEN3_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_TX_RESET_FRC_VALf_SET
#define TX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_TX_RESET_FRCf_GET BCMI_TSCF_GEN3_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_TX_RESET_FRCf_GET
#define TX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_TX_RESET_FRCf_SET BCMI_TSCF_GEN3_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_TX_RESET_FRCf_SET
#define TX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_TX_PWRDN_FRC_VALf_GET BCMI_TSCF_GEN3_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_TX_PWRDN_FRC_VALf_GET
#define TX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_TX_PWRDN_FRC_VALf_SET BCMI_TSCF_GEN3_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_TX_PWRDN_FRC_VALf_SET
#define TX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_TX_PWRDN_FRCf_GET BCMI_TSCF_GEN3_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_TX_PWRDN_FRCf_GET
#define TX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_TX_PWRDN_FRCf_SET BCMI_TSCF_GEN3_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_TX_PWRDN_FRCf_SET
#define READ_TX_LN_AFE_RST_PWRDWN_CTL_CTLr BCMI_TSCF_GEN3_XGXS_READ_TX_LN_AFE_RST_PWRDWN_CTL_CTLr
#define WRITE_TX_LN_AFE_RST_PWRDWN_CTL_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_TX_LN_AFE_RST_PWRDWN_CTL_CTLr
#define MODIFY_TX_LN_AFE_RST_PWRDWN_CTL_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_TX_LN_AFE_RST_PWRDWN_CTL_CTLr
#define READLN_TX_LN_AFE_RST_PWRDWN_CTL_CTLr BCMI_TSCF_GEN3_XGXS_READLN_TX_LN_AFE_RST_PWRDWN_CTL_CTLr
#define WRITELN_TX_LN_AFE_RST_PWRDWN_CTL_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_TX_LN_AFE_RST_PWRDWN_CTL_CTLr
#define WRITEALL_TX_LN_AFE_RST_PWRDWN_CTL_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_LN_AFE_RST_PWRDWN_CTL_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TX_LN_RST_N_PWRDN_PIN_KILL_CTL
 * BLOCKS:   TX_CKRST_CTRL_MONTEREY
 * REGADDR:  0xd1b3
 * DEVAD:    1
 * DESC:     LANE_RESET_N_PWRDN_PIN_KILL_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     PMD_LN_TX_H_PWRDN_PKILL 1'b1 will disable the pmd_ln_tx_h_pwrdn input pin.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr (0x0001d1b3 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr_SIZE 4

/*
 * This structure should be used to declare and program TX_LN_RST_N_PWRDN_PIN_KILL_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr_s {
	uint32_t v[1];
	uint32_t tx_ln_rst_n_pwrdn_pin_kill_ctl[1];
	uint32_t _tx_ln_rst_n_pwrdn_pin_kill_ctl;
} BCMI_TSCF_GEN3_XGXS_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr_CLR(r) (r).tx_ln_rst_n_pwrdn_pin_kill_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr_SET(r,d) (r).tx_ln_rst_n_pwrdn_pin_kill_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr_GET(r) (r).tx_ln_rst_n_pwrdn_pin_kill_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_TX_H_PWRDN_PKILLf_GET(r) (((r).tx_ln_rst_n_pwrdn_pin_kill_ctl[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_TX_H_PWRDN_PKILLf_SET(r,f) (r).tx_ln_rst_n_pwrdn_pin_kill_ctl[0]=(((r).tx_ln_rst_n_pwrdn_pin_kill_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TX_LN_RST_N_PWRDN_PIN_KILL_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr,(_r._tx_ln_rst_n_pwrdn_pin_kill_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr,(_r._tx_ln_rst_n_pwrdn_pin_kill_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr,(_r._tx_ln_rst_n_pwrdn_pin_kill_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_ln_rst_n_pwrdn_pin_kill_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_ln_rst_n_pwrdn_pin_kill_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_ln_rst_n_pwrdn_pin_kill_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_TSCF_GEN3_XGXS_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define TX_LN_RST_N_PWRDN_PIN_KILL_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr_t TX_LN_RST_N_PWRDN_PIN_KILL_CTLr_t;
#define TX_LN_RST_N_PWRDN_PIN_KILL_CTLr_CLR BCMI_TSCF_GEN3_XGXS_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr_CLR
#define TX_LN_RST_N_PWRDN_PIN_KILL_CTLr_SET BCMI_TSCF_GEN3_XGXS_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr_SET
#define TX_LN_RST_N_PWRDN_PIN_KILL_CTLr_GET BCMI_TSCF_GEN3_XGXS_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr_GET
#define TX_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_TX_H_PWRDN_PKILLf_GET BCMI_TSCF_GEN3_XGXS_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_TX_H_PWRDN_PKILLf_GET
#define TX_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_TX_H_PWRDN_PKILLf_SET BCMI_TSCF_GEN3_XGXS_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_TX_H_PWRDN_PKILLf_SET
#define READ_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_TSCF_GEN3_XGXS_READ_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define WRITE_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define MODIFY_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define READLN_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_TSCF_GEN3_XGXS_READLN_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define WRITELN_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define WRITEALL_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TX_LN_DBG_RST_CTL
 * BLOCKS:   TX_CKRST_CTRL_MONTEREY
 * REGADDR:  0xd1b4
 * DEVAD:    1
 * DESC:     LANE_DEBUG_RESET_CONTROL
 * RESETVAL: 0x3 (3)
 * ACCESS:   R/W
 * FIELDS:
 *     LN_TX_S_RSTB     Active Low Lane Soft Reset for TX datapath and registers. If asserted by writing to 1'b0 will reset the TX registers and datapath for a lane.This is a debug only register and it is not handled by FW-HW handshake
 *     LN_TX_DP_S_RSTB  Active Low Lane Soft Reset for TX datapath. If asserted by writing to 1'b0 will reset the TX datapath for a lane.This is a debug only register and it is not handled by FW-HW handshake
 */
#define BCMI_TSCF_GEN3_XGXS_TX_LN_DBG_RST_CTLr (0x0001d1b4 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TX_LN_DBG_RST_CTLr_SIZE 4

/*
 * This structure should be used to declare and program TX_LN_DBG_RST_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TX_LN_DBG_RST_CTLr_s {
	uint32_t v[1];
	uint32_t tx_ln_dbg_rst_ctl[1];
	uint32_t _tx_ln_dbg_rst_ctl;
} BCMI_TSCF_GEN3_XGXS_TX_LN_DBG_RST_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_TX_LN_DBG_RST_CTLr_CLR(r) (r).tx_ln_dbg_rst_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TX_LN_DBG_RST_CTLr_SET(r,d) (r).tx_ln_dbg_rst_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_TX_LN_DBG_RST_CTLr_GET(r) (r).tx_ln_dbg_rst_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_LN_DBG_RST_CTLr_LN_TX_DP_S_RSTBf_GET(r) ((((r).tx_ln_dbg_rst_ctl[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_LN_DBG_RST_CTLr_LN_TX_DP_S_RSTBf_SET(r,f) (r).tx_ln_dbg_rst_ctl[0]=(((r).tx_ln_dbg_rst_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_TX_LN_DBG_RST_CTLr_LN_TX_S_RSTBf_GET(r) (((r).tx_ln_dbg_rst_ctl[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_LN_DBG_RST_CTLr_LN_TX_S_RSTBf_SET(r,f) (r).tx_ln_dbg_rst_ctl[0]=(((r).tx_ln_dbg_rst_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TX_LN_DBG_RST_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TX_LN_DBG_RST_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_LN_DBG_RST_CTLr,(_r._tx_ln_dbg_rst_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TX_LN_DBG_RST_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_LN_DBG_RST_CTLr,(_r._tx_ln_dbg_rst_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TX_LN_DBG_RST_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_LN_DBG_RST_CTLr,(_r._tx_ln_dbg_rst_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_TX_LN_DBG_RST_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_LN_DBG_RST_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_ln_dbg_rst_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TX_LN_DBG_RST_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_LN_DBG_RST_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_ln_dbg_rst_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_LN_DBG_RST_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_LN_DBG_RST_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_ln_dbg_rst_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_LN_DBG_RST_CTLr BCMI_TSCF_GEN3_XGXS_TX_LN_DBG_RST_CTLr
#define TX_LN_DBG_RST_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_TX_LN_DBG_RST_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TX_LN_DBG_RST_CTLr_t TX_LN_DBG_RST_CTLr_t;
#define TX_LN_DBG_RST_CTLr_CLR BCMI_TSCF_GEN3_XGXS_TX_LN_DBG_RST_CTLr_CLR
#define TX_LN_DBG_RST_CTLr_SET BCMI_TSCF_GEN3_XGXS_TX_LN_DBG_RST_CTLr_SET
#define TX_LN_DBG_RST_CTLr_GET BCMI_TSCF_GEN3_XGXS_TX_LN_DBG_RST_CTLr_GET
#define TX_LN_DBG_RST_CTLr_LN_TX_DP_S_RSTBf_GET BCMI_TSCF_GEN3_XGXS_TX_LN_DBG_RST_CTLr_LN_TX_DP_S_RSTBf_GET
#define TX_LN_DBG_RST_CTLr_LN_TX_DP_S_RSTBf_SET BCMI_TSCF_GEN3_XGXS_TX_LN_DBG_RST_CTLr_LN_TX_DP_S_RSTBf_SET
#define TX_LN_DBG_RST_CTLr_LN_TX_S_RSTBf_GET BCMI_TSCF_GEN3_XGXS_TX_LN_DBG_RST_CTLr_LN_TX_S_RSTBf_GET
#define TX_LN_DBG_RST_CTLr_LN_TX_S_RSTBf_SET BCMI_TSCF_GEN3_XGXS_TX_LN_DBG_RST_CTLr_LN_TX_S_RSTBf_SET
#define READ_TX_LN_DBG_RST_CTLr BCMI_TSCF_GEN3_XGXS_READ_TX_LN_DBG_RST_CTLr
#define WRITE_TX_LN_DBG_RST_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_TX_LN_DBG_RST_CTLr
#define MODIFY_TX_LN_DBG_RST_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_TX_LN_DBG_RST_CTLr
#define READLN_TX_LN_DBG_RST_CTLr BCMI_TSCF_GEN3_XGXS_READLN_TX_LN_DBG_RST_CTLr
#define WRITELN_TX_LN_DBG_RST_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_TX_LN_DBG_RST_CTLr
#define WRITEALL_TX_LN_DBG_RST_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_LN_DBG_RST_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TX_LN_DBG_RST_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TX_CLK_N_RST_DBG_CTL
 * BLOCKS:   TX_CKRST_CTRL_MONTEREY
 * REGADDR:  0xd1b7
 * DEVAD:    1
 * DESC:     CLOCK_N_RESET_DEBUG_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LN_TX_S_CLKGATE_FRC_ON TX Active High Lane clock gator enable. If 1'1b1 then tx lane clock will be gated off. It does not affect the tclk goingto RMIC block so tx lane based registers can still be readable but not writable.It is recommended for user to force pmd_tx_clk_vld to 1'b0 while tx_s_clkgate_frc_on is asserted to 1'b1by using pmd_tx_clk_vld_frc/frc_val registers.
 *     LN_TX_S_COMCLK_SEL Mux control for selection of comclk for TX Lane clocks.If asserted by writing to 1'b1 will select the comclk for the lane clocks.It is recommended for user to force pmd_tx_clk_vld to 1'b0 while tx_s_comclk_sel is asserted to 1'b1by using pmd_tx_clk_vld_frc/frc_val registers.
 *     LN_TX_S_COMCLK_FRC_ON Mux control for selection of comclk for TX Lane clocks by force.If asserted by writing to 1'b1 will select the comclk for the TX lane clocks. This is a debug bit and should be only used if lane clock from AFE is dead.It is recommended for user to force pmd_tx_clk_vld to 1'b0 while tx_s_comclk_frc_on is asserted to 1'b1by using pmd_tx_clk_vld_frc/frc_val registers.
 *     PMD_TX_CLK_VLD_FRC pmd_tx_clk_vld core output pin force.
 *     PMD_TX_CLK_VLD_FRC_VAL pmd_tx_clk_vld core output pin force value.
 *     LN_TCLK20_S_CLKGATE_FRC_ON Active High Lane clock gate control for TX tclk20 clock gator.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_DBG_CTLr (0x0001d1b7 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_DBG_CTLr_SIZE 4

/*
 * This structure should be used to declare and program TX_CLK_N_RST_DBG_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_DBG_CTLr_s {
	uint32_t v[1];
	uint32_t tx_clk_n_rst_dbg_ctl[1];
	uint32_t _tx_clk_n_rst_dbg_ctl;
} BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_DBG_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_DBG_CTLr_CLR(r) (r).tx_clk_n_rst_dbg_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_DBG_CTLr_SET(r,d) (r).tx_clk_n_rst_dbg_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_DBG_CTLr_GET(r) (r).tx_clk_n_rst_dbg_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_DBG_CTLr_LN_TCLK20_S_CLKGATE_FRC_ONf_GET(r) ((((r).tx_clk_n_rst_dbg_ctl[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_DBG_CTLr_LN_TCLK20_S_CLKGATE_FRC_ONf_SET(r,f) (r).tx_clk_n_rst_dbg_ctl[0]=(((r).tx_clk_n_rst_dbg_ctl[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_DBG_CTLr_PMD_TX_CLK_VLD_FRC_VALf_GET(r) ((((r).tx_clk_n_rst_dbg_ctl[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_DBG_CTLr_PMD_TX_CLK_VLD_FRC_VALf_SET(r,f) (r).tx_clk_n_rst_dbg_ctl[0]=(((r).tx_clk_n_rst_dbg_ctl[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_DBG_CTLr_PMD_TX_CLK_VLD_FRCf_GET(r) ((((r).tx_clk_n_rst_dbg_ctl[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_DBG_CTLr_PMD_TX_CLK_VLD_FRCf_SET(r,f) (r).tx_clk_n_rst_dbg_ctl[0]=(((r).tx_clk_n_rst_dbg_ctl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_DBG_CTLr_LN_TX_S_COMCLK_FRC_ONf_GET(r) ((((r).tx_clk_n_rst_dbg_ctl[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_DBG_CTLr_LN_TX_S_COMCLK_FRC_ONf_SET(r,f) (r).tx_clk_n_rst_dbg_ctl[0]=(((r).tx_clk_n_rst_dbg_ctl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_DBG_CTLr_LN_TX_S_COMCLK_SELf_GET(r) ((((r).tx_clk_n_rst_dbg_ctl[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_DBG_CTLr_LN_TX_S_COMCLK_SELf_SET(r,f) (r).tx_clk_n_rst_dbg_ctl[0]=(((r).tx_clk_n_rst_dbg_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_DBG_CTLr_LN_TX_S_CLKGATE_FRC_ONf_GET(r) (((r).tx_clk_n_rst_dbg_ctl[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_DBG_CTLr_LN_TX_S_CLKGATE_FRC_ONf_SET(r,f) (r).tx_clk_n_rst_dbg_ctl[0]=(((r).tx_clk_n_rst_dbg_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TX_CLK_N_RST_DBG_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TX_CLK_N_RST_DBG_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_DBG_CTLr,(_r._tx_clk_n_rst_dbg_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TX_CLK_N_RST_DBG_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_DBG_CTLr,(_r._tx_clk_n_rst_dbg_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TX_CLK_N_RST_DBG_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_DBG_CTLr,(_r._tx_clk_n_rst_dbg_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_TX_CLK_N_RST_DBG_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_DBG_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_clk_n_rst_dbg_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TX_CLK_N_RST_DBG_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_DBG_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_clk_n_rst_dbg_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_CLK_N_RST_DBG_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_DBG_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_clk_n_rst_dbg_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_CLK_N_RST_DBG_CTLr BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_DBG_CTLr
#define TX_CLK_N_RST_DBG_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_DBG_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_DBG_CTLr_t TX_CLK_N_RST_DBG_CTLr_t;
#define TX_CLK_N_RST_DBG_CTLr_CLR BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_DBG_CTLr_CLR
#define TX_CLK_N_RST_DBG_CTLr_SET BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_DBG_CTLr_SET
#define TX_CLK_N_RST_DBG_CTLr_GET BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_DBG_CTLr_GET
#define TX_CLK_N_RST_DBG_CTLr_LN_TCLK20_S_CLKGATE_FRC_ONf_GET BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_DBG_CTLr_LN_TCLK20_S_CLKGATE_FRC_ONf_GET
#define TX_CLK_N_RST_DBG_CTLr_LN_TCLK20_S_CLKGATE_FRC_ONf_SET BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_DBG_CTLr_LN_TCLK20_S_CLKGATE_FRC_ONf_SET
#define TX_CLK_N_RST_DBG_CTLr_PMD_TX_CLK_VLD_FRC_VALf_GET BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_DBG_CTLr_PMD_TX_CLK_VLD_FRC_VALf_GET
#define TX_CLK_N_RST_DBG_CTLr_PMD_TX_CLK_VLD_FRC_VALf_SET BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_DBG_CTLr_PMD_TX_CLK_VLD_FRC_VALf_SET
#define TX_CLK_N_RST_DBG_CTLr_PMD_TX_CLK_VLD_FRCf_GET BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_DBG_CTLr_PMD_TX_CLK_VLD_FRCf_GET
#define TX_CLK_N_RST_DBG_CTLr_PMD_TX_CLK_VLD_FRCf_SET BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_DBG_CTLr_PMD_TX_CLK_VLD_FRCf_SET
#define TX_CLK_N_RST_DBG_CTLr_LN_TX_S_COMCLK_FRC_ONf_GET BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_DBG_CTLr_LN_TX_S_COMCLK_FRC_ONf_GET
#define TX_CLK_N_RST_DBG_CTLr_LN_TX_S_COMCLK_FRC_ONf_SET BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_DBG_CTLr_LN_TX_S_COMCLK_FRC_ONf_SET
#define TX_CLK_N_RST_DBG_CTLr_LN_TX_S_COMCLK_SELf_GET BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_DBG_CTLr_LN_TX_S_COMCLK_SELf_GET
#define TX_CLK_N_RST_DBG_CTLr_LN_TX_S_COMCLK_SELf_SET BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_DBG_CTLr_LN_TX_S_COMCLK_SELf_SET
#define TX_CLK_N_RST_DBG_CTLr_LN_TX_S_CLKGATE_FRC_ONf_GET BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_DBG_CTLr_LN_TX_S_CLKGATE_FRC_ONf_GET
#define TX_CLK_N_RST_DBG_CTLr_LN_TX_S_CLKGATE_FRC_ONf_SET BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_DBG_CTLr_LN_TX_S_CLKGATE_FRC_ONf_SET
#define READ_TX_CLK_N_RST_DBG_CTLr BCMI_TSCF_GEN3_XGXS_READ_TX_CLK_N_RST_DBG_CTLr
#define WRITE_TX_CLK_N_RST_DBG_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_TX_CLK_N_RST_DBG_CTLr
#define MODIFY_TX_CLK_N_RST_DBG_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_TX_CLK_N_RST_DBG_CTLr
#define READLN_TX_CLK_N_RST_DBG_CTLr BCMI_TSCF_GEN3_XGXS_READLN_TX_CLK_N_RST_DBG_CTLr
#define WRITELN_TX_CLK_N_RST_DBG_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_TX_CLK_N_RST_DBG_CTLr
#define WRITEALL_TX_CLK_N_RST_DBG_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_CLK_N_RST_DBG_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_DBG_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TX_PMD_LN_MODE_STS
 * BLOCKS:   TX_CKRST_CTRL_MONTEREY
 * REGADDR:  0xd1b8
 * DEVAD:    1
 * DESC:     PMD_LANE_MODE_STATUS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     PMD_TX_LANE_MODE This indicates the status of the core input pin pmd_rx_lane_mode.This is driven from PCS and used for communication between PCS and PMD Micro code.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_PMD_LN_MODE_STSr (0x0001d1b8 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TX_PMD_LN_MODE_STSr_SIZE 4

/*
 * This structure should be used to declare and program TX_PMD_LN_MODE_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TX_PMD_LN_MODE_STSr_s {
	uint32_t v[1];
	uint32_t tx_pmd_ln_mode_sts[1];
	uint32_t _tx_pmd_ln_mode_sts;
} BCMI_TSCF_GEN3_XGXS_TX_PMD_LN_MODE_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_TX_PMD_LN_MODE_STSr_CLR(r) (r).tx_pmd_ln_mode_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TX_PMD_LN_MODE_STSr_SET(r,d) (r).tx_pmd_ln_mode_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_TX_PMD_LN_MODE_STSr_GET(r) (r).tx_pmd_ln_mode_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_PMD_LN_MODE_STSr_PMD_TX_LANE_MODEf_GET(r) (((r).tx_pmd_ln_mode_sts[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_TX_PMD_LN_MODE_STSr_PMD_TX_LANE_MODEf_SET(r,f) (r).tx_pmd_ln_mode_sts[0]=(((r).tx_pmd_ln_mode_sts[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access TX_PMD_LN_MODE_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TX_PMD_LN_MODE_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_PMD_LN_MODE_STSr,(_r._tx_pmd_ln_mode_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TX_PMD_LN_MODE_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_PMD_LN_MODE_STSr,(_r._tx_pmd_ln_mode_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TX_PMD_LN_MODE_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_PMD_LN_MODE_STSr,(_r._tx_pmd_ln_mode_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_TX_PMD_LN_MODE_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_PMD_LN_MODE_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pmd_ln_mode_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TX_PMD_LN_MODE_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_PMD_LN_MODE_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pmd_ln_mode_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_PMD_LN_MODE_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_PMD_LN_MODE_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_pmd_ln_mode_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_PMD_LN_MODE_STSr BCMI_TSCF_GEN3_XGXS_TX_PMD_LN_MODE_STSr
#define TX_PMD_LN_MODE_STSr_SIZE BCMI_TSCF_GEN3_XGXS_TX_PMD_LN_MODE_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TX_PMD_LN_MODE_STSr_t TX_PMD_LN_MODE_STSr_t;
#define TX_PMD_LN_MODE_STSr_CLR BCMI_TSCF_GEN3_XGXS_TX_PMD_LN_MODE_STSr_CLR
#define TX_PMD_LN_MODE_STSr_SET BCMI_TSCF_GEN3_XGXS_TX_PMD_LN_MODE_STSr_SET
#define TX_PMD_LN_MODE_STSr_GET BCMI_TSCF_GEN3_XGXS_TX_PMD_LN_MODE_STSr_GET
#define TX_PMD_LN_MODE_STSr_PMD_TX_LANE_MODEf_GET BCMI_TSCF_GEN3_XGXS_TX_PMD_LN_MODE_STSr_PMD_TX_LANE_MODEf_GET
#define TX_PMD_LN_MODE_STSr_PMD_TX_LANE_MODEf_SET BCMI_TSCF_GEN3_XGXS_TX_PMD_LN_MODE_STSr_PMD_TX_LANE_MODEf_SET
#define READ_TX_PMD_LN_MODE_STSr BCMI_TSCF_GEN3_XGXS_READ_TX_PMD_LN_MODE_STSr
#define WRITE_TX_PMD_LN_MODE_STSr BCMI_TSCF_GEN3_XGXS_WRITE_TX_PMD_LN_MODE_STSr
#define MODIFY_TX_PMD_LN_MODE_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_TX_PMD_LN_MODE_STSr
#define READLN_TX_PMD_LN_MODE_STSr BCMI_TSCF_GEN3_XGXS_READLN_TX_PMD_LN_MODE_STSr
#define WRITELN_TX_PMD_LN_MODE_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_TX_PMD_LN_MODE_STSr
#define WRITEALL_TX_PMD_LN_MODE_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_PMD_LN_MODE_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TX_PMD_LN_MODE_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TX_AFE_RST_PWRDN_OSR_MODE_PIN_STS
 * BLOCKS:   TX_CKRST_CTRL_MONTEREY
 * REGADDR:  0xd1bc
 * DEVAD:    1
 * DESC:     AFE_RESET_PWRDN_OSR_MODE_PIN_STATUS
 * RESETVAL: 0x3 (3)
 * ACCESS:   R/O
 * FIELDS:
 *     AFE_TX_PWRDN     Indicates the status of the afe_tx_pwrdn signal to the AFE after frc/frc_val mux.
 *     AFE_TX_RESET     Indicates the status of the afe_tx_reset signal to the AFE after frc/frc_val mux.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr (0x0001d1bc | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_SIZE 4

/*
 * This structure should be used to declare and program TX_AFE_RST_PWRDN_OSR_MODE_PIN_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_s {
	uint32_t v[1];
	uint32_t tx_afe_rst_pwrdn_osr_mode_pin_sts[1];
	uint32_t _tx_afe_rst_pwrdn_osr_mode_pin_sts;
} BCMI_TSCF_GEN3_XGXS_TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_CLR(r) (r).tx_afe_rst_pwrdn_osr_mode_pin_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_SET(r,d) (r).tx_afe_rst_pwrdn_osr_mode_pin_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_GET(r) (r).tx_afe_rst_pwrdn_osr_mode_pin_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_AFE_TX_RESETf_GET(r) ((((r).tx_afe_rst_pwrdn_osr_mode_pin_sts[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_AFE_TX_RESETf_SET(r,f) (r).tx_afe_rst_pwrdn_osr_mode_pin_sts[0]=(((r).tx_afe_rst_pwrdn_osr_mode_pin_sts[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_AFE_TX_PWRDNf_GET(r) (((r).tx_afe_rst_pwrdn_osr_mode_pin_sts[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_AFE_TX_PWRDNf_SET(r,f) (r).tx_afe_rst_pwrdn_osr_mode_pin_sts[0]=(((r).tx_afe_rst_pwrdn_osr_mode_pin_sts[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TX_AFE_RST_PWRDN_OSR_MODE_PIN_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr,(_r._tx_afe_rst_pwrdn_osr_mode_pin_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr,(_r._tx_afe_rst_pwrdn_osr_mode_pin_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr,(_r._tx_afe_rst_pwrdn_osr_mode_pin_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_afe_rst_pwrdn_osr_mode_pin_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_afe_rst_pwrdn_osr_mode_pin_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_afe_rst_pwrdn_osr_mode_pin_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_TSCF_GEN3_XGXS_TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr
#define TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_SIZE BCMI_TSCF_GEN3_XGXS_TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_t TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_t;
#define TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_CLR BCMI_TSCF_GEN3_XGXS_TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_CLR
#define TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_SET BCMI_TSCF_GEN3_XGXS_TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_SET
#define TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_GET BCMI_TSCF_GEN3_XGXS_TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_GET
#define TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_AFE_TX_RESETf_GET BCMI_TSCF_GEN3_XGXS_TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_AFE_TX_RESETf_GET
#define TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_AFE_TX_RESETf_SET BCMI_TSCF_GEN3_XGXS_TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_AFE_TX_RESETf_SET
#define TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_AFE_TX_PWRDNf_GET BCMI_TSCF_GEN3_XGXS_TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_AFE_TX_PWRDNf_GET
#define TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_AFE_TX_PWRDNf_SET BCMI_TSCF_GEN3_XGXS_TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_AFE_TX_PWRDNf_SET
#define READ_TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_TSCF_GEN3_XGXS_READ_TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr
#define WRITE_TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_TSCF_GEN3_XGXS_WRITE_TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr
#define MODIFY_TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr
#define READLN_TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_TSCF_GEN3_XGXS_READLN_TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr
#define WRITELN_TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr
#define WRITEALL_TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TX_AFE_RST_PWRDN_OSR_MODE_PIN_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TX_CLK_N_RST_MISC_CTL
 * BLOCKS:   TX_CKRST_CTRL_MONTEREY
 * REGADDR:  0xd1bd
 * DEVAD:    1
 * DESC:     CLOCK_N_RESET_MISC_CONTROL
 * RESETVAL: 0x1 (1)
 * ACCESS:   R/W
 * FIELDS:
 *     TX_PI_LOOP_FILTER_STABLE This register bit is ANDed with pmd_tx_clk_vld before frc/frc_val mux. This register will be controlled by the firmware when TX_PI is enabled.When TX_PI is enabled then this register will be written to 1'b0 while TX_PI is acquiring the lock with the source clock and will be written to 1'b1 by firmwareto indicate that clocks are locked. It indicates to chip level via pmd_tx_clk_vld to reset any datapath FIFOs and come out of reset when TX clock is stable.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_MISC_CTLr (0x0001d1bd | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_MISC_CTLr_SIZE 4

/*
 * This structure should be used to declare and program TX_CLK_N_RST_MISC_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_MISC_CTLr_s {
	uint32_t v[1];
	uint32_t tx_clk_n_rst_misc_ctl[1];
	uint32_t _tx_clk_n_rst_misc_ctl;
} BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_MISC_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_MISC_CTLr_CLR(r) (r).tx_clk_n_rst_misc_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_MISC_CTLr_SET(r,d) (r).tx_clk_n_rst_misc_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_MISC_CTLr_GET(r) (r).tx_clk_n_rst_misc_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_MISC_CTLr_TX_PI_LOOP_FILTER_STABLEf_GET(r) (((r).tx_clk_n_rst_misc_ctl[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_MISC_CTLr_TX_PI_LOOP_FILTER_STABLEf_SET(r,f) (r).tx_clk_n_rst_misc_ctl[0]=(((r).tx_clk_n_rst_misc_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TX_CLK_N_RST_MISC_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TX_CLK_N_RST_MISC_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_MISC_CTLr,(_r._tx_clk_n_rst_misc_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TX_CLK_N_RST_MISC_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_MISC_CTLr,(_r._tx_clk_n_rst_misc_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TX_CLK_N_RST_MISC_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_MISC_CTLr,(_r._tx_clk_n_rst_misc_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_TX_CLK_N_RST_MISC_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_MISC_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_clk_n_rst_misc_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TX_CLK_N_RST_MISC_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_MISC_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_clk_n_rst_misc_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_CLK_N_RST_MISC_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_MISC_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_clk_n_rst_misc_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_CLK_N_RST_MISC_CTLr BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_MISC_CTLr
#define TX_CLK_N_RST_MISC_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_MISC_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_MISC_CTLr_t TX_CLK_N_RST_MISC_CTLr_t;
#define TX_CLK_N_RST_MISC_CTLr_CLR BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_MISC_CTLr_CLR
#define TX_CLK_N_RST_MISC_CTLr_SET BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_MISC_CTLr_SET
#define TX_CLK_N_RST_MISC_CTLr_GET BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_MISC_CTLr_GET
#define TX_CLK_N_RST_MISC_CTLr_TX_PI_LOOP_FILTER_STABLEf_GET BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_MISC_CTLr_TX_PI_LOOP_FILTER_STABLEf_GET
#define TX_CLK_N_RST_MISC_CTLr_TX_PI_LOOP_FILTER_STABLEf_SET BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_MISC_CTLr_TX_PI_LOOP_FILTER_STABLEf_SET
#define READ_TX_CLK_N_RST_MISC_CTLr BCMI_TSCF_GEN3_XGXS_READ_TX_CLK_N_RST_MISC_CTLr
#define WRITE_TX_CLK_N_RST_MISC_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_TX_CLK_N_RST_MISC_CTLr
#define MODIFY_TX_CLK_N_RST_MISC_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_TX_CLK_N_RST_MISC_CTLr
#define READLN_TX_CLK_N_RST_MISC_CTLr BCMI_TSCF_GEN3_XGXS_READLN_TX_CLK_N_RST_MISC_CTLr
#define WRITELN_TX_CLK_N_RST_MISC_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_TX_CLK_N_RST_MISC_CTLr
#define WRITEALL_TX_CLK_N_RST_MISC_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_TX_CLK_N_RST_MISC_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TX_CLK_N_RST_MISC_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RXCOM_OSR_MODE_CTL
 * BLOCKS:   RXCOM_CKRST_CTRL_MONTEREY
 * REGADDR:  0xd1c0
 * DEVAD:    1
 * DESC:     OSR_MODE_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RX_OSR_MODE_FRC_VAL oversample (OS) mode Decoding of this register is as follows.OSX1          4'd0OSX2          4'd1OSX4          4'd2OSX16P5       4'd8OSX20P625     4'd12OSX8          4'd5OSX16         4'd9OSX32         4'd13OSX8P25       4'd4
 *     RX_OSR_MODE_FRC  oversample (OS) mode force. Setting this bit will allow the register value to be used for OS mode.Othersise, the pin input values are used for OS mode
 */
#define BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_CTLr (0x0001d1c0 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_CTLr_SIZE 4

/*
 * This structure should be used to declare and program RXCOM_OSR_MODE_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_CTLr_s {
	uint32_t v[1];
	uint32_t rxcom_osr_mode_ctl[1];
	uint32_t _rxcom_osr_mode_ctl;
} BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_CTLr_CLR(r) (r).rxcom_osr_mode_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_CTLr_SET(r,d) (r).rxcom_osr_mode_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_CTLr_GET(r) (r).rxcom_osr_mode_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_CTLr_RX_OSR_MODE_FRCf_GET(r) ((((r).rxcom_osr_mode_ctl[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_CTLr_RX_OSR_MODE_FRCf_SET(r,f) (r).rxcom_osr_mode_ctl[0]=(((r).rxcom_osr_mode_ctl[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_CTLr_RX_OSR_MODE_FRC_VALf_GET(r) (((r).rxcom_osr_mode_ctl[0]) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_CTLr_RX_OSR_MODE_FRC_VALf_SET(r,f) (r).rxcom_osr_mode_ctl[0]=(((r).rxcom_osr_mode_ctl[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access RXCOM_OSR_MODE_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RXCOM_OSR_MODE_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_CTLr,(_r._rxcom_osr_mode_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RXCOM_OSR_MODE_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_CTLr,(_r._rxcom_osr_mode_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RXCOM_OSR_MODE_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_CTLr,(_r._rxcom_osr_mode_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_RXCOM_OSR_MODE_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxcom_osr_mode_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RXCOM_OSR_MODE_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxcom_osr_mode_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RXCOM_OSR_MODE_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rxcom_osr_mode_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RXCOM_OSR_MODE_CTLr BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_CTLr
#define RXCOM_OSR_MODE_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_CTLr_t RXCOM_OSR_MODE_CTLr_t;
#define RXCOM_OSR_MODE_CTLr_CLR BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_CTLr_CLR
#define RXCOM_OSR_MODE_CTLr_SET BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_CTLr_SET
#define RXCOM_OSR_MODE_CTLr_GET BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_CTLr_GET
#define RXCOM_OSR_MODE_CTLr_RX_OSR_MODE_FRCf_GET BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_CTLr_RX_OSR_MODE_FRCf_GET
#define RXCOM_OSR_MODE_CTLr_RX_OSR_MODE_FRCf_SET BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_CTLr_RX_OSR_MODE_FRCf_SET
#define RXCOM_OSR_MODE_CTLr_RX_OSR_MODE_FRC_VALf_GET BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_CTLr_RX_OSR_MODE_FRC_VALf_GET
#define RXCOM_OSR_MODE_CTLr_RX_OSR_MODE_FRC_VALf_SET BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_CTLr_RX_OSR_MODE_FRC_VALf_SET
#define READ_RXCOM_OSR_MODE_CTLr BCMI_TSCF_GEN3_XGXS_READ_RXCOM_OSR_MODE_CTLr
#define WRITE_RXCOM_OSR_MODE_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_RXCOM_OSR_MODE_CTLr
#define MODIFY_RXCOM_OSR_MODE_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_RXCOM_OSR_MODE_CTLr
#define READLN_RXCOM_OSR_MODE_CTLr BCMI_TSCF_GEN3_XGXS_READLN_RXCOM_OSR_MODE_CTLr
#define WRITELN_RXCOM_OSR_MODE_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_RXCOM_OSR_MODE_CTLr
#define WRITEALL_RXCOM_OSR_MODE_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_RXCOM_OSR_MODE_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RXCOM_LN_CLK_RST_N_PWRDWN_CTL
 * BLOCKS:   RXCOM_CKRST_CTRL_MONTEREY
 * REGADDR:  0xd1c1
 * DEVAD:    1
 * DESC:     LANE_CLK_RESET_N_POWERDOWN_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RX_LN_DP_S_RSTB  Active Low Lane Soft Reset for datapath. If asserted by writing to 1'b0 will reset the datapath for a lane.This soft reset is equivalent to the hard reset input pin pmd_ln_dp_h_rstb_i.
 */
#define BCMI_TSCF_GEN3_XGXS_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr (0x0001d1c1 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr_SIZE 4

/*
 * This structure should be used to declare and program RXCOM_LN_CLK_RST_N_PWRDWN_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr_s {
	uint32_t v[1];
	uint32_t rxcom_ln_clk_rst_n_pwrdwn_ctl[1];
	uint32_t _rxcom_ln_clk_rst_n_pwrdwn_ctl;
} BCMI_TSCF_GEN3_XGXS_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr_CLR(r) (r).rxcom_ln_clk_rst_n_pwrdwn_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr_SET(r,d) (r).rxcom_ln_clk_rst_n_pwrdwn_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr_GET(r) (r).rxcom_ln_clk_rst_n_pwrdwn_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr_RX_LN_DP_S_RSTBf_GET(r) (((r).rxcom_ln_clk_rst_n_pwrdwn_ctl[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr_RX_LN_DP_S_RSTBf_SET(r,f) (r).rxcom_ln_clk_rst_n_pwrdwn_ctl[0]=(((r).rxcom_ln_clk_rst_n_pwrdwn_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RXCOM_LN_CLK_RST_N_PWRDWN_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr,(_r._rxcom_ln_clk_rst_n_pwrdwn_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr,(_r._rxcom_ln_clk_rst_n_pwrdwn_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr,(_r._rxcom_ln_clk_rst_n_pwrdwn_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxcom_ln_clk_rst_n_pwrdwn_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxcom_ln_clk_rst_n_pwrdwn_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rxcom_ln_clk_rst_n_pwrdwn_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RXCOM_LN_CLK_RST_N_PWRDWN_CTLr BCMI_TSCF_GEN3_XGXS_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr
#define RXCOM_LN_CLK_RST_N_PWRDWN_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr_t RXCOM_LN_CLK_RST_N_PWRDWN_CTLr_t;
#define RXCOM_LN_CLK_RST_N_PWRDWN_CTLr_CLR BCMI_TSCF_GEN3_XGXS_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr_CLR
#define RXCOM_LN_CLK_RST_N_PWRDWN_CTLr_SET BCMI_TSCF_GEN3_XGXS_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr_SET
#define RXCOM_LN_CLK_RST_N_PWRDWN_CTLr_GET BCMI_TSCF_GEN3_XGXS_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr_GET
#define RXCOM_LN_CLK_RST_N_PWRDWN_CTLr_RX_LN_DP_S_RSTBf_GET BCMI_TSCF_GEN3_XGXS_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr_RX_LN_DP_S_RSTBf_GET
#define RXCOM_LN_CLK_RST_N_PWRDWN_CTLr_RX_LN_DP_S_RSTBf_SET BCMI_TSCF_GEN3_XGXS_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr_RX_LN_DP_S_RSTBf_SET
#define READ_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr BCMI_TSCF_GEN3_XGXS_READ_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr
#define WRITE_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr
#define MODIFY_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr
#define READLN_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr BCMI_TSCF_GEN3_XGXS_READLN_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr
#define WRITELN_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr
#define WRITEALL_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTL
 * BLOCKS:   RXCOM_CKRST_CTRL_MONTEREY
 * REGADDR:  0xd1c3
 * DEVAD:    1
 * DESC:     LANE_RESET_N_PWRDN_PIN_KILL_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     PMD_LN_RX_H_RSTB_PKILL 1'b1 will disable the pmd_ln_h_rstb input pin.
 *     PMD_LN_RX_DP_H_RSTB_PKILL 1'b1 will disable the pmd_ln_dp_h_rstb input pin.
 */
#define BCMI_TSCF_GEN3_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr (0x0001d1c3 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_SIZE 4

/*
 * This structure should be used to declare and program RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_s {
	uint32_t v[1];
	uint32_t rxcom_ln_rst_n_pwrdn_pin_kill_ctl[1];
	uint32_t _rxcom_ln_rst_n_pwrdn_pin_kill_ctl;
} BCMI_TSCF_GEN3_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_CLR(r) (r).rxcom_ln_rst_n_pwrdn_pin_kill_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_SET(r,d) (r).rxcom_ln_rst_n_pwrdn_pin_kill_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_GET(r) (r).rxcom_ln_rst_n_pwrdn_pin_kill_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_RX_DP_H_RSTB_PKILLf_GET(r) ((((r).rxcom_ln_rst_n_pwrdn_pin_kill_ctl[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_RX_DP_H_RSTB_PKILLf_SET(r,f) (r).rxcom_ln_rst_n_pwrdn_pin_kill_ctl[0]=(((r).rxcom_ln_rst_n_pwrdn_pin_kill_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_RX_H_RSTB_PKILLf_GET(r) (((r).rxcom_ln_rst_n_pwrdn_pin_kill_ctl[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_RX_H_RSTB_PKILLf_SET(r,f) (r).rxcom_ln_rst_n_pwrdn_pin_kill_ctl[0]=(((r).rxcom_ln_rst_n_pwrdn_pin_kill_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr,(_r._rxcom_ln_rst_n_pwrdn_pin_kill_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr,(_r._rxcom_ln_rst_n_pwrdn_pin_kill_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr,(_r._rxcom_ln_rst_n_pwrdn_pin_kill_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxcom_ln_rst_n_pwrdn_pin_kill_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxcom_ln_rst_n_pwrdn_pin_kill_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rxcom_ln_rst_n_pwrdn_pin_kill_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_TSCF_GEN3_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_t RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_t;
#define RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_CLR BCMI_TSCF_GEN3_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_CLR
#define RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_SET BCMI_TSCF_GEN3_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_SET
#define RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_GET BCMI_TSCF_GEN3_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_GET
#define RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_RX_DP_H_RSTB_PKILLf_GET BCMI_TSCF_GEN3_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_RX_DP_H_RSTB_PKILLf_GET
#define RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_RX_DP_H_RSTB_PKILLf_SET BCMI_TSCF_GEN3_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_RX_DP_H_RSTB_PKILLf_SET
#define RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_RX_H_RSTB_PKILLf_GET BCMI_TSCF_GEN3_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_RX_H_RSTB_PKILLf_GET
#define RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_RX_H_RSTB_PKILLf_SET BCMI_TSCF_GEN3_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_RX_H_RSTB_PKILLf_SET
#define READ_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_TSCF_GEN3_XGXS_READ_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define WRITE_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define MODIFY_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define READLN_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_TSCF_GEN3_XGXS_READLN_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define WRITELN_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define WRITEALL_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RXCOM_UC_ACK_LN_CTL
 * BLOCKS:   RXCOM_CKRST_CTRL_MONTEREY
 * REGADDR:  0xd1c5
 * DEVAD:    1
 * DESC:     UC_ACK_LANE_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RX_UC_ACK_LANE_CFG_DONE uC will write this to 1 to indicate it's configuration of the lane is complete. Writing to 1'b1 willshould release internal hold on lane_dp_reset, only if lane_dp_reset_state is 3'b001.
 *     RX_UC_ACK_LANE_DP_RESET uC will write this to 1 to acknowledge a reset event after seeing "lane_dp_reset_coccured".
 */
#define BCMI_TSCF_GEN3_XGXS_RXCOM_UC_ACK_LN_CTLr (0x0001d1c5 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RXCOM_UC_ACK_LN_CTLr_SIZE 4

/*
 * This structure should be used to declare and program RXCOM_UC_ACK_LN_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RXCOM_UC_ACK_LN_CTLr_s {
	uint32_t v[1];
	uint32_t rxcom_uc_ack_ln_ctl[1];
	uint32_t _rxcom_uc_ack_ln_ctl;
} BCMI_TSCF_GEN3_XGXS_RXCOM_UC_ACK_LN_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_RXCOM_UC_ACK_LN_CTLr_CLR(r) (r).rxcom_uc_ack_ln_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RXCOM_UC_ACK_LN_CTLr_SET(r,d) (r).rxcom_uc_ack_ln_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_RXCOM_UC_ACK_LN_CTLr_GET(r) (r).rxcom_uc_ack_ln_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RXCOM_UC_ACK_LN_CTLr_RX_UC_ACK_LANE_DP_RESETf_GET(r) ((((r).rxcom_uc_ack_ln_ctl[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RXCOM_UC_ACK_LN_CTLr_RX_UC_ACK_LANE_DP_RESETf_SET(r,f) (r).rxcom_uc_ack_ln_ctl[0]=(((r).rxcom_uc_ack_ln_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_RXCOM_UC_ACK_LN_CTLr_RX_UC_ACK_LANE_CFG_DONEf_GET(r) (((r).rxcom_uc_ack_ln_ctl[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RXCOM_UC_ACK_LN_CTLr_RX_UC_ACK_LANE_CFG_DONEf_SET(r,f) (r).rxcom_uc_ack_ln_ctl[0]=(((r).rxcom_uc_ack_ln_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RXCOM_UC_ACK_LN_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RXCOM_UC_ACK_LN_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_UC_ACK_LN_CTLr,(_r._rxcom_uc_ack_ln_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RXCOM_UC_ACK_LN_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_UC_ACK_LN_CTLr,(_r._rxcom_uc_ack_ln_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RXCOM_UC_ACK_LN_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_UC_ACK_LN_CTLr,(_r._rxcom_uc_ack_ln_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_RXCOM_UC_ACK_LN_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_UC_ACK_LN_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxcom_uc_ack_ln_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RXCOM_UC_ACK_LN_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_UC_ACK_LN_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxcom_uc_ack_ln_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RXCOM_UC_ACK_LN_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_UC_ACK_LN_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rxcom_uc_ack_ln_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RXCOM_UC_ACK_LN_CTLr BCMI_TSCF_GEN3_XGXS_RXCOM_UC_ACK_LN_CTLr
#define RXCOM_UC_ACK_LN_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_RXCOM_UC_ACK_LN_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RXCOM_UC_ACK_LN_CTLr_t RXCOM_UC_ACK_LN_CTLr_t;
#define RXCOM_UC_ACK_LN_CTLr_CLR BCMI_TSCF_GEN3_XGXS_RXCOM_UC_ACK_LN_CTLr_CLR
#define RXCOM_UC_ACK_LN_CTLr_SET BCMI_TSCF_GEN3_XGXS_RXCOM_UC_ACK_LN_CTLr_SET
#define RXCOM_UC_ACK_LN_CTLr_GET BCMI_TSCF_GEN3_XGXS_RXCOM_UC_ACK_LN_CTLr_GET
#define RXCOM_UC_ACK_LN_CTLr_RX_UC_ACK_LANE_DP_RESETf_GET BCMI_TSCF_GEN3_XGXS_RXCOM_UC_ACK_LN_CTLr_RX_UC_ACK_LANE_DP_RESETf_GET
#define RXCOM_UC_ACK_LN_CTLr_RX_UC_ACK_LANE_DP_RESETf_SET BCMI_TSCF_GEN3_XGXS_RXCOM_UC_ACK_LN_CTLr_RX_UC_ACK_LANE_DP_RESETf_SET
#define RXCOM_UC_ACK_LN_CTLr_RX_UC_ACK_LANE_CFG_DONEf_GET BCMI_TSCF_GEN3_XGXS_RXCOM_UC_ACK_LN_CTLr_RX_UC_ACK_LANE_CFG_DONEf_GET
#define RXCOM_UC_ACK_LN_CTLr_RX_UC_ACK_LANE_CFG_DONEf_SET BCMI_TSCF_GEN3_XGXS_RXCOM_UC_ACK_LN_CTLr_RX_UC_ACK_LANE_CFG_DONEf_SET
#define READ_RXCOM_UC_ACK_LN_CTLr BCMI_TSCF_GEN3_XGXS_READ_RXCOM_UC_ACK_LN_CTLr
#define WRITE_RXCOM_UC_ACK_LN_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_RXCOM_UC_ACK_LN_CTLr
#define MODIFY_RXCOM_UC_ACK_LN_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_RXCOM_UC_ACK_LN_CTLr
#define READLN_RXCOM_UC_ACK_LN_CTLr BCMI_TSCF_GEN3_XGXS_READLN_RXCOM_UC_ACK_LN_CTLr
#define WRITELN_RXCOM_UC_ACK_LN_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_RXCOM_UC_ACK_LN_CTLr
#define WRITEALL_RXCOM_UC_ACK_LN_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_RXCOM_UC_ACK_LN_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RXCOM_UC_ACK_LN_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RXCOM_LN_RST_OCC_CTL
 * BLOCKS:   RXCOM_CKRST_CTRL_MONTEREY
 * REGADDR:  0xd1c6
 * DEVAD:    1
 * DESC:     LANE_REG_RESET_OCCURRED_CONTROL
 * RESETVAL: 0x1 (1)
 * ACCESS:   R/W
 * FIELDS:
 *     RX_LANE_REG_RESET_OCCURRED Set to 1'b1 upon lane level register reset and remains so until cleared by register write from uC.
 */
#define BCMI_TSCF_GEN3_XGXS_RXCOM_LN_RST_OCC_CTLr (0x0001d1c6 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RXCOM_LN_RST_OCC_CTLr_SIZE 4

/*
 * This structure should be used to declare and program RXCOM_LN_RST_OCC_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RXCOM_LN_RST_OCC_CTLr_s {
	uint32_t v[1];
	uint32_t rxcom_ln_rst_occ_ctl[1];
	uint32_t _rxcom_ln_rst_occ_ctl;
} BCMI_TSCF_GEN3_XGXS_RXCOM_LN_RST_OCC_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_RXCOM_LN_RST_OCC_CTLr_CLR(r) (r).rxcom_ln_rst_occ_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RXCOM_LN_RST_OCC_CTLr_SET(r,d) (r).rxcom_ln_rst_occ_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_RXCOM_LN_RST_OCC_CTLr_GET(r) (r).rxcom_ln_rst_occ_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RXCOM_LN_RST_OCC_CTLr_RX_LANE_REG_RESET_OCCURREDf_GET(r) (((r).rxcom_ln_rst_occ_ctl[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RXCOM_LN_RST_OCC_CTLr_RX_LANE_REG_RESET_OCCURREDf_SET(r,f) (r).rxcom_ln_rst_occ_ctl[0]=(((r).rxcom_ln_rst_occ_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RXCOM_LN_RST_OCC_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RXCOM_LN_RST_OCC_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_LN_RST_OCC_CTLr,(_r._rxcom_ln_rst_occ_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RXCOM_LN_RST_OCC_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_LN_RST_OCC_CTLr,(_r._rxcom_ln_rst_occ_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RXCOM_LN_RST_OCC_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_LN_RST_OCC_CTLr,(_r._rxcom_ln_rst_occ_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_RXCOM_LN_RST_OCC_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_LN_RST_OCC_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxcom_ln_rst_occ_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RXCOM_LN_RST_OCC_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_LN_RST_OCC_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxcom_ln_rst_occ_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RXCOM_LN_RST_OCC_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_LN_RST_OCC_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rxcom_ln_rst_occ_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RXCOM_LN_RST_OCC_CTLr BCMI_TSCF_GEN3_XGXS_RXCOM_LN_RST_OCC_CTLr
#define RXCOM_LN_RST_OCC_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_RXCOM_LN_RST_OCC_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RXCOM_LN_RST_OCC_CTLr_t RXCOM_LN_RST_OCC_CTLr_t;
#define RXCOM_LN_RST_OCC_CTLr_CLR BCMI_TSCF_GEN3_XGXS_RXCOM_LN_RST_OCC_CTLr_CLR
#define RXCOM_LN_RST_OCC_CTLr_SET BCMI_TSCF_GEN3_XGXS_RXCOM_LN_RST_OCC_CTLr_SET
#define RXCOM_LN_RST_OCC_CTLr_GET BCMI_TSCF_GEN3_XGXS_RXCOM_LN_RST_OCC_CTLr_GET
#define RXCOM_LN_RST_OCC_CTLr_RX_LANE_REG_RESET_OCCURREDf_GET BCMI_TSCF_GEN3_XGXS_RXCOM_LN_RST_OCC_CTLr_RX_LANE_REG_RESET_OCCURREDf_GET
#define RXCOM_LN_RST_OCC_CTLr_RX_LANE_REG_RESET_OCCURREDf_SET BCMI_TSCF_GEN3_XGXS_RXCOM_LN_RST_OCC_CTLr_RX_LANE_REG_RESET_OCCURREDf_SET
#define READ_RXCOM_LN_RST_OCC_CTLr BCMI_TSCF_GEN3_XGXS_READ_RXCOM_LN_RST_OCC_CTLr
#define WRITE_RXCOM_LN_RST_OCC_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_RXCOM_LN_RST_OCC_CTLr
#define MODIFY_RXCOM_LN_RST_OCC_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_RXCOM_LN_RST_OCC_CTLr
#define READLN_RXCOM_LN_RST_OCC_CTLr BCMI_TSCF_GEN3_XGXS_READLN_RXCOM_LN_RST_OCC_CTLr
#define WRITELN_RXCOM_LN_RST_OCC_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_RXCOM_LN_RST_OCC_CTLr
#define WRITEALL_RXCOM_LN_RST_OCC_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_RXCOM_LN_RST_OCC_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RXCOM_LN_RST_OCC_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RXCOM_PLL_SEL_CTL
 * BLOCKS:   RXCOM_CKRST_CTRL_MONTEREY
 * REGADDR:  0xd1c7
 * DEVAD:    1
 * DESC:     PLL_SELECT_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RX_PLL_SELECT    This register controls the selection of the PLL0 or PLL1 as clock source for the rx_ lane. This register will be only reset upon POR hard or POR soft reset.This register is expected to be changed only when rx_ lane datapath is in reset.0 - Select PLL0 as clock for rx_ lane.1 - Select PLL1 as clock for rx_ lane.This register bit also drive the AFE rx_ctrl[95] pin.
 */
#define BCMI_TSCF_GEN3_XGXS_RXCOM_PLL_SEL_CTLr (0x0001d1c7 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RXCOM_PLL_SEL_CTLr_SIZE 4

/*
 * This structure should be used to declare and program RXCOM_PLL_SEL_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RXCOM_PLL_SEL_CTLr_s {
	uint32_t v[1];
	uint32_t rxcom_pll_sel_ctl[1];
	uint32_t _rxcom_pll_sel_ctl;
} BCMI_TSCF_GEN3_XGXS_RXCOM_PLL_SEL_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_RXCOM_PLL_SEL_CTLr_CLR(r) (r).rxcom_pll_sel_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RXCOM_PLL_SEL_CTLr_SET(r,d) (r).rxcom_pll_sel_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_RXCOM_PLL_SEL_CTLr_GET(r) (r).rxcom_pll_sel_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RXCOM_PLL_SEL_CTLr_RX_PLL_SELECTf_GET(r) (((r).rxcom_pll_sel_ctl[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RXCOM_PLL_SEL_CTLr_RX_PLL_SELECTf_SET(r,f) (r).rxcom_pll_sel_ctl[0]=(((r).rxcom_pll_sel_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RXCOM_PLL_SEL_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RXCOM_PLL_SEL_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_PLL_SEL_CTLr,(_r._rxcom_pll_sel_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RXCOM_PLL_SEL_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_PLL_SEL_CTLr,(_r._rxcom_pll_sel_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RXCOM_PLL_SEL_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_PLL_SEL_CTLr,(_r._rxcom_pll_sel_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_RXCOM_PLL_SEL_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_PLL_SEL_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxcom_pll_sel_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RXCOM_PLL_SEL_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_PLL_SEL_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxcom_pll_sel_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RXCOM_PLL_SEL_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_PLL_SEL_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rxcom_pll_sel_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RXCOM_PLL_SEL_CTLr BCMI_TSCF_GEN3_XGXS_RXCOM_PLL_SEL_CTLr
#define RXCOM_PLL_SEL_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_RXCOM_PLL_SEL_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RXCOM_PLL_SEL_CTLr_t RXCOM_PLL_SEL_CTLr_t;
#define RXCOM_PLL_SEL_CTLr_CLR BCMI_TSCF_GEN3_XGXS_RXCOM_PLL_SEL_CTLr_CLR
#define RXCOM_PLL_SEL_CTLr_SET BCMI_TSCF_GEN3_XGXS_RXCOM_PLL_SEL_CTLr_SET
#define RXCOM_PLL_SEL_CTLr_GET BCMI_TSCF_GEN3_XGXS_RXCOM_PLL_SEL_CTLr_GET
#define RXCOM_PLL_SEL_CTLr_RX_PLL_SELECTf_GET BCMI_TSCF_GEN3_XGXS_RXCOM_PLL_SEL_CTLr_RX_PLL_SELECTf_GET
#define RXCOM_PLL_SEL_CTLr_RX_PLL_SELECTf_SET BCMI_TSCF_GEN3_XGXS_RXCOM_PLL_SEL_CTLr_RX_PLL_SELECTf_SET
#define READ_RXCOM_PLL_SEL_CTLr BCMI_TSCF_GEN3_XGXS_READ_RXCOM_PLL_SEL_CTLr
#define WRITE_RXCOM_PLL_SEL_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_RXCOM_PLL_SEL_CTLr
#define MODIFY_RXCOM_PLL_SEL_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_RXCOM_PLL_SEL_CTLr
#define READLN_RXCOM_PLL_SEL_CTLr BCMI_TSCF_GEN3_XGXS_READLN_RXCOM_PLL_SEL_CTLr
#define WRITELN_RXCOM_PLL_SEL_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_RXCOM_PLL_SEL_CTLr
#define WRITEALL_RXCOM_PLL_SEL_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_RXCOM_PLL_SEL_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RXCOM_PLL_SEL_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RXCOM_LN_DP_RST_ST_STS
 * BLOCKS:   RXCOM_CKRST_CTRL_MONTEREY
 * REGADDR:  0xd1c9
 * DEVAD:    1
 * DESC:     LANE_DP_RESET_STATE_STATUS
 * RESETVAL: 0x7 (7)
 * ACCESS:   R/O
 * FIELDS:
 *     RX_LANE_DP_RESET_STATE Bit 2: lane_dp_reset_active   : Set to 1'b1 whenenver lane_dp_reset is currently requested through any register or pin controls.Bit 1: lane_dp_reset_occurred : Set to 1'b1 whenenver lane_dp_reset is currently requested through any register or pin controls and is latched high.Bit 0: lane_dp_reset_held     : Set to 1'b1 whenenver lane_dp_reset is internally held. Cleared to 1'b0, only if lane_dp_reset_state==001 and uc_ack_lane_cfg_done == 1.
 */
#define BCMI_TSCF_GEN3_XGXS_RXCOM_LN_DP_RST_ST_STSr (0x0001d1c9 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RXCOM_LN_DP_RST_ST_STSr_SIZE 4

/*
 * This structure should be used to declare and program RXCOM_LN_DP_RST_ST_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RXCOM_LN_DP_RST_ST_STSr_s {
	uint32_t v[1];
	uint32_t rxcom_ln_dp_rst_st_sts[1];
	uint32_t _rxcom_ln_dp_rst_st_sts;
} BCMI_TSCF_GEN3_XGXS_RXCOM_LN_DP_RST_ST_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_RXCOM_LN_DP_RST_ST_STSr_CLR(r) (r).rxcom_ln_dp_rst_st_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RXCOM_LN_DP_RST_ST_STSr_SET(r,d) (r).rxcom_ln_dp_rst_st_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_RXCOM_LN_DP_RST_ST_STSr_GET(r) (r).rxcom_ln_dp_rst_st_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RXCOM_LN_DP_RST_ST_STSr_RX_LANE_DP_RESET_STATEf_GET(r) (((r).rxcom_ln_dp_rst_st_sts[0]) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_RXCOM_LN_DP_RST_ST_STSr_RX_LANE_DP_RESET_STATEf_SET(r,f) (r).rxcom_ln_dp_rst_st_sts[0]=(((r).rxcom_ln_dp_rst_st_sts[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access RXCOM_LN_DP_RST_ST_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RXCOM_LN_DP_RST_ST_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_LN_DP_RST_ST_STSr,(_r._rxcom_ln_dp_rst_st_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RXCOM_LN_DP_RST_ST_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_LN_DP_RST_ST_STSr,(_r._rxcom_ln_dp_rst_st_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RXCOM_LN_DP_RST_ST_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_LN_DP_RST_ST_STSr,(_r._rxcom_ln_dp_rst_st_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_RXCOM_LN_DP_RST_ST_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_LN_DP_RST_ST_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxcom_ln_dp_rst_st_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RXCOM_LN_DP_RST_ST_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_LN_DP_RST_ST_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxcom_ln_dp_rst_st_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RXCOM_LN_DP_RST_ST_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_LN_DP_RST_ST_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rxcom_ln_dp_rst_st_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RXCOM_LN_DP_RST_ST_STSr BCMI_TSCF_GEN3_XGXS_RXCOM_LN_DP_RST_ST_STSr
#define RXCOM_LN_DP_RST_ST_STSr_SIZE BCMI_TSCF_GEN3_XGXS_RXCOM_LN_DP_RST_ST_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RXCOM_LN_DP_RST_ST_STSr_t RXCOM_LN_DP_RST_ST_STSr_t;
#define RXCOM_LN_DP_RST_ST_STSr_CLR BCMI_TSCF_GEN3_XGXS_RXCOM_LN_DP_RST_ST_STSr_CLR
#define RXCOM_LN_DP_RST_ST_STSr_SET BCMI_TSCF_GEN3_XGXS_RXCOM_LN_DP_RST_ST_STSr_SET
#define RXCOM_LN_DP_RST_ST_STSr_GET BCMI_TSCF_GEN3_XGXS_RXCOM_LN_DP_RST_ST_STSr_GET
#define RXCOM_LN_DP_RST_ST_STSr_RX_LANE_DP_RESET_STATEf_GET BCMI_TSCF_GEN3_XGXS_RXCOM_LN_DP_RST_ST_STSr_RX_LANE_DP_RESET_STATEf_GET
#define RXCOM_LN_DP_RST_ST_STSr_RX_LANE_DP_RESET_STATEf_SET BCMI_TSCF_GEN3_XGXS_RXCOM_LN_DP_RST_ST_STSr_RX_LANE_DP_RESET_STATEf_SET
#define READ_RXCOM_LN_DP_RST_ST_STSr BCMI_TSCF_GEN3_XGXS_READ_RXCOM_LN_DP_RST_ST_STSr
#define WRITE_RXCOM_LN_DP_RST_ST_STSr BCMI_TSCF_GEN3_XGXS_WRITE_RXCOM_LN_DP_RST_ST_STSr
#define MODIFY_RXCOM_LN_DP_RST_ST_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_RXCOM_LN_DP_RST_ST_STSr
#define READLN_RXCOM_LN_DP_RST_ST_STSr BCMI_TSCF_GEN3_XGXS_READLN_RXCOM_LN_DP_RST_ST_STSr
#define WRITELN_RXCOM_LN_DP_RST_ST_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_RXCOM_LN_DP_RST_ST_STSr
#define WRITEALL_RXCOM_LN_DP_RST_ST_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_RXCOM_LN_DP_RST_ST_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RXCOM_LN_DP_RST_ST_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RXCOM_MCST_MASK_CTL
 * BLOCKS:   RXCOM_CKRST_CTRL_MONTEREY
 * REGADDR:  0xd1ca
 * DEVAD:    1
 * DESC:     MULTICAST_MASK_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RX_MULTICAST_MASK_CONTROL This masks the lane from a broadcast or multicast write operation.
 */
#define BCMI_TSCF_GEN3_XGXS_RXCOM_MCST_MASK_CTLr (0x0001d1ca | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RXCOM_MCST_MASK_CTLr_SIZE 4

/*
 * This structure should be used to declare and program RXCOM_MCST_MASK_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RXCOM_MCST_MASK_CTLr_s {
	uint32_t v[1];
	uint32_t rxcom_mcst_mask_ctl[1];
	uint32_t _rxcom_mcst_mask_ctl;
} BCMI_TSCF_GEN3_XGXS_RXCOM_MCST_MASK_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_RXCOM_MCST_MASK_CTLr_CLR(r) (r).rxcom_mcst_mask_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RXCOM_MCST_MASK_CTLr_SET(r,d) (r).rxcom_mcst_mask_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_RXCOM_MCST_MASK_CTLr_GET(r) (r).rxcom_mcst_mask_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RXCOM_MCST_MASK_CTLr_RX_MULTICAST_MASK_CONTROLf_GET(r) (((r).rxcom_mcst_mask_ctl[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RXCOM_MCST_MASK_CTLr_RX_MULTICAST_MASK_CONTROLf_SET(r,f) (r).rxcom_mcst_mask_ctl[0]=(((r).rxcom_mcst_mask_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RXCOM_MCST_MASK_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RXCOM_MCST_MASK_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_MCST_MASK_CTLr,(_r._rxcom_mcst_mask_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RXCOM_MCST_MASK_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_MCST_MASK_CTLr,(_r._rxcom_mcst_mask_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RXCOM_MCST_MASK_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_MCST_MASK_CTLr,(_r._rxcom_mcst_mask_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_RXCOM_MCST_MASK_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_MCST_MASK_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxcom_mcst_mask_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RXCOM_MCST_MASK_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_MCST_MASK_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxcom_mcst_mask_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RXCOM_MCST_MASK_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_MCST_MASK_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rxcom_mcst_mask_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RXCOM_MCST_MASK_CTLr BCMI_TSCF_GEN3_XGXS_RXCOM_MCST_MASK_CTLr
#define RXCOM_MCST_MASK_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_RXCOM_MCST_MASK_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RXCOM_MCST_MASK_CTLr_t RXCOM_MCST_MASK_CTLr_t;
#define RXCOM_MCST_MASK_CTLr_CLR BCMI_TSCF_GEN3_XGXS_RXCOM_MCST_MASK_CTLr_CLR
#define RXCOM_MCST_MASK_CTLr_SET BCMI_TSCF_GEN3_XGXS_RXCOM_MCST_MASK_CTLr_SET
#define RXCOM_MCST_MASK_CTLr_GET BCMI_TSCF_GEN3_XGXS_RXCOM_MCST_MASK_CTLr_GET
#define RXCOM_MCST_MASK_CTLr_RX_MULTICAST_MASK_CONTROLf_GET BCMI_TSCF_GEN3_XGXS_RXCOM_MCST_MASK_CTLr_RX_MULTICAST_MASK_CONTROLf_GET
#define RXCOM_MCST_MASK_CTLr_RX_MULTICAST_MASK_CONTROLf_SET BCMI_TSCF_GEN3_XGXS_RXCOM_MCST_MASK_CTLr_RX_MULTICAST_MASK_CONTROLf_SET
#define READ_RXCOM_MCST_MASK_CTLr BCMI_TSCF_GEN3_XGXS_READ_RXCOM_MCST_MASK_CTLr
#define WRITE_RXCOM_MCST_MASK_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_RXCOM_MCST_MASK_CTLr
#define MODIFY_RXCOM_MCST_MASK_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_RXCOM_MCST_MASK_CTLr
#define READLN_RXCOM_MCST_MASK_CTLr BCMI_TSCF_GEN3_XGXS_READLN_RXCOM_MCST_MASK_CTLr
#define WRITELN_RXCOM_MCST_MASK_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_RXCOM_MCST_MASK_CTLr
#define WRITEALL_RXCOM_MCST_MASK_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_RXCOM_MCST_MASK_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RXCOM_MCST_MASK_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RXCOM_OSR_MODE_STS_MC_MASK
 * BLOCKS:   RXCOM_CKRST_CTRL_MONTEREY
 * REGADDR:  0xd1cb
 * DEVAD:    1
 * DESC:     OSR_MODE_STATUS_MC_MASK
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     RX_OSR_MODE      OSR Mode status after the mux.OSR Mode status after the osr_mode_frc/frc_val mux.OSX1          4'd0OSX2          4'd1OSX4          4'd2OSX16P5       4'd8OSX20P625     4'd12OSX8          4'd5OSX16         4'd9OSX32         4'd13OSX8P25       4'd4
 *     RX_MULTICAST_MASK_CONTROL_STATUS Status of multicast mask control for masking lane from multicast write operation.
 */
#define BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr (0x0001d1cb | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr_SIZE 4

/*
 * This structure should be used to declare and program RXCOM_OSR_MODE_STS_MC_MASK.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr_s {
	uint32_t v[1];
	uint32_t rxcom_osr_mode_sts_mc_mask[1];
	uint32_t _rxcom_osr_mode_sts_mc_mask;
} BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr_t;

#define BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr_CLR(r) (r).rxcom_osr_mode_sts_mc_mask[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr_SET(r,d) (r).rxcom_osr_mode_sts_mc_mask[0] = d
#define BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr_GET(r) (r).rxcom_osr_mode_sts_mc_mask[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr_RX_MULTICAST_MASK_CONTROL_STATUSf_GET(r) ((((r).rxcom_osr_mode_sts_mc_mask[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr_RX_MULTICAST_MASK_CONTROL_STATUSf_SET(r,f) (r).rxcom_osr_mode_sts_mc_mask[0]=(((r).rxcom_osr_mode_sts_mc_mask[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr_RX_OSR_MODEf_GET(r) (((r).rxcom_osr_mode_sts_mc_mask[0]) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr_RX_OSR_MODEf_SET(r,f) (r).rxcom_osr_mode_sts_mc_mask[0]=(((r).rxcom_osr_mode_sts_mc_mask[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access RXCOM_OSR_MODE_STS_MC_MASK.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RXCOM_OSR_MODE_STS_MC_MASKr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr,(_r._rxcom_osr_mode_sts_mc_mask))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RXCOM_OSR_MODE_STS_MC_MASKr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr,(_r._rxcom_osr_mode_sts_mc_mask)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RXCOM_OSR_MODE_STS_MC_MASKr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr,(_r._rxcom_osr_mode_sts_mc_mask))
#define BCMI_TSCF_GEN3_XGXS_READLN_RXCOM_OSR_MODE_STS_MC_MASKr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxcom_osr_mode_sts_mc_mask))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RXCOM_OSR_MODE_STS_MC_MASKr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxcom_osr_mode_sts_mc_mask))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RXCOM_OSR_MODE_STS_MC_MASKr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rxcom_osr_mode_sts_mc_mask))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RXCOM_OSR_MODE_STS_MC_MASKr BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr
#define RXCOM_OSR_MODE_STS_MC_MASKr_SIZE BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr_t RXCOM_OSR_MODE_STS_MC_MASKr_t;
#define RXCOM_OSR_MODE_STS_MC_MASKr_CLR BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr_CLR
#define RXCOM_OSR_MODE_STS_MC_MASKr_SET BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr_SET
#define RXCOM_OSR_MODE_STS_MC_MASKr_GET BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr_GET
#define RXCOM_OSR_MODE_STS_MC_MASKr_RX_MULTICAST_MASK_CONTROL_STATUSf_GET BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr_RX_MULTICAST_MASK_CONTROL_STATUSf_GET
#define RXCOM_OSR_MODE_STS_MC_MASKr_RX_MULTICAST_MASK_CONTROL_STATUSf_SET BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr_RX_MULTICAST_MASK_CONTROL_STATUSf_SET
#define RXCOM_OSR_MODE_STS_MC_MASKr_RX_OSR_MODEf_GET BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr_RX_OSR_MODEf_GET
#define RXCOM_OSR_MODE_STS_MC_MASKr_RX_OSR_MODEf_SET BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr_RX_OSR_MODEf_SET
#define READ_RXCOM_OSR_MODE_STS_MC_MASKr BCMI_TSCF_GEN3_XGXS_READ_RXCOM_OSR_MODE_STS_MC_MASKr
#define WRITE_RXCOM_OSR_MODE_STS_MC_MASKr BCMI_TSCF_GEN3_XGXS_WRITE_RXCOM_OSR_MODE_STS_MC_MASKr
#define MODIFY_RXCOM_OSR_MODE_STS_MC_MASKr BCMI_TSCF_GEN3_XGXS_MODIFY_RXCOM_OSR_MODE_STS_MC_MASKr
#define READLN_RXCOM_OSR_MODE_STS_MC_MASKr BCMI_TSCF_GEN3_XGXS_READLN_RXCOM_OSR_MODE_STS_MC_MASKr
#define WRITELN_RXCOM_OSR_MODE_STS_MC_MASKr BCMI_TSCF_GEN3_XGXS_WRITELN_RXCOM_OSR_MODE_STS_MC_MASKr
#define WRITEALL_RXCOM_OSR_MODE_STS_MC_MASKr BCMI_TSCF_GEN3_XGXS_WRITEALL_RXCOM_OSR_MODE_STS_MC_MASKr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STS
 * BLOCKS:   RXCOM_CKRST_CTRL_MONTEREY
 * REGADDR:  0xd1cc
 * DEVAD:    1
 * DESC:     AFE_RESET_PWRDN_OSR_MODE_PIN_STATUS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     RX_OSR_MODE_PIN  Indicates the status of the pmd_osr_mode input pin.Decoding of pmd_osr_mode[3:0] pin and osr_mode registers are as follows.OSX1          4'd0OSX2          4'd1OSX4          4'd2OSX16P5       4'd8OSX20P625     4'd12OSX8          4'd5OSX16         4'd9OSX32         4'd13OSX8P25       4'd4
 */
#define BCMI_TSCF_GEN3_XGXS_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr (0x0001d1cc | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_SIZE 4

/*
 * This structure should be used to declare and program RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_s {
	uint32_t v[1];
	uint32_t rxcom_afe_rst_pwrdn_osr_mode_pin_sts[1];
	uint32_t _rxcom_afe_rst_pwrdn_osr_mode_pin_sts;
} BCMI_TSCF_GEN3_XGXS_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_CLR(r) (r).rxcom_afe_rst_pwrdn_osr_mode_pin_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_SET(r,d) (r).rxcom_afe_rst_pwrdn_osr_mode_pin_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_GET(r) (r).rxcom_afe_rst_pwrdn_osr_mode_pin_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_RX_OSR_MODE_PINf_GET(r) (((r).rxcom_afe_rst_pwrdn_osr_mode_pin_sts[0]) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_RX_OSR_MODE_PINf_SET(r,f) (r).rxcom_afe_rst_pwrdn_osr_mode_pin_sts[0]=(((r).rxcom_afe_rst_pwrdn_osr_mode_pin_sts[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr,(_r._rxcom_afe_rst_pwrdn_osr_mode_pin_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr,(_r._rxcom_afe_rst_pwrdn_osr_mode_pin_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr,(_r._rxcom_afe_rst_pwrdn_osr_mode_pin_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxcom_afe_rst_pwrdn_osr_mode_pin_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxcom_afe_rst_pwrdn_osr_mode_pin_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rxcom_afe_rst_pwrdn_osr_mode_pin_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_TSCF_GEN3_XGXS_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr
#define RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_SIZE BCMI_TSCF_GEN3_XGXS_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_t RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_t;
#define RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_CLR BCMI_TSCF_GEN3_XGXS_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_CLR
#define RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_SET BCMI_TSCF_GEN3_XGXS_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_SET
#define RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_GET BCMI_TSCF_GEN3_XGXS_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_GET
#define RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_RX_OSR_MODE_PINf_GET BCMI_TSCF_GEN3_XGXS_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_RX_OSR_MODE_PINf_GET
#define RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_RX_OSR_MODE_PINf_SET BCMI_TSCF_GEN3_XGXS_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_RX_OSR_MODE_PINf_SET
#define READ_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_TSCF_GEN3_XGXS_READ_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr
#define WRITE_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_TSCF_GEN3_XGXS_WRITE_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr
#define MODIFY_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr
#define READLN_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_TSCF_GEN3_XGXS_READLN_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr
#define WRITELN_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr
#define WRITEALL_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  RXCOM_LN_S_RSTB_CTL
 * BLOCKS:   RXCOM_CKRST_CTRL_MONTEREY
 * REGADDR:  0xd1ce
 * DEVAD:    1
 * DESC:     LN_S_RSTB_CONTROL
 * RESETVAL: 0x1 (1)
 * ACCESS:   R/W
 * FIELDS:
 *     RX_LN_S_RSTB     Active Low Lane Soft Reset. If asserted by writing to 1'b0 will reset the registers and datapath for a lane.This soft reset is equivalent to the hard reset input pin pmd_ln_h_rstb_i.
 *     RX_HW_FW_HANDSHAKE_DISABLE This register bit is unused in RX lane.
 */
#define BCMI_TSCF_GEN3_XGXS_RXCOM_LN_S_RSTB_CTLr (0x0001d1ce | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_RXCOM_LN_S_RSTB_CTLr_SIZE 4

/*
 * This structure should be used to declare and program RXCOM_LN_S_RSTB_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_RXCOM_LN_S_RSTB_CTLr_s {
	uint32_t v[1];
	uint32_t rxcom_ln_s_rstb_ctl[1];
	uint32_t _rxcom_ln_s_rstb_ctl;
} BCMI_TSCF_GEN3_XGXS_RXCOM_LN_S_RSTB_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_RXCOM_LN_S_RSTB_CTLr_CLR(r) (r).rxcom_ln_s_rstb_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_RXCOM_LN_S_RSTB_CTLr_SET(r,d) (r).rxcom_ln_s_rstb_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_RXCOM_LN_S_RSTB_CTLr_GET(r) (r).rxcom_ln_s_rstb_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_RXCOM_LN_S_RSTB_CTLr_RX_HW_FW_HANDSHAKE_DISABLEf_GET(r) ((((r).rxcom_ln_s_rstb_ctl[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RXCOM_LN_S_RSTB_CTLr_RX_HW_FW_HANDSHAKE_DISABLEf_SET(r,f) (r).rxcom_ln_s_rstb_ctl[0]=(((r).rxcom_ln_s_rstb_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_RXCOM_LN_S_RSTB_CTLr_RX_LN_S_RSTBf_GET(r) (((r).rxcom_ln_s_rstb_ctl[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_RXCOM_LN_S_RSTB_CTLr_RX_LN_S_RSTBf_SET(r,f) (r).rxcom_ln_s_rstb_ctl[0]=(((r).rxcom_ln_s_rstb_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RXCOM_LN_S_RSTB_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_RXCOM_LN_S_RSTB_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_LN_S_RSTB_CTLr,(_r._rxcom_ln_s_rstb_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_RXCOM_LN_S_RSTB_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_LN_S_RSTB_CTLr,(_r._rxcom_ln_s_rstb_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_RXCOM_LN_S_RSTB_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_LN_S_RSTB_CTLr,(_r._rxcom_ln_s_rstb_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_RXCOM_LN_S_RSTB_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_LN_S_RSTB_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxcom_ln_s_rstb_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_RXCOM_LN_S_RSTB_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_LN_S_RSTB_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxcom_ln_s_rstb_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_RXCOM_LN_S_RSTB_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_RXCOM_LN_S_RSTB_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rxcom_ln_s_rstb_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RXCOM_LN_S_RSTB_CTLr BCMI_TSCF_GEN3_XGXS_RXCOM_LN_S_RSTB_CTLr
#define RXCOM_LN_S_RSTB_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_RXCOM_LN_S_RSTB_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_RXCOM_LN_S_RSTB_CTLr_t RXCOM_LN_S_RSTB_CTLr_t;
#define RXCOM_LN_S_RSTB_CTLr_CLR BCMI_TSCF_GEN3_XGXS_RXCOM_LN_S_RSTB_CTLr_CLR
#define RXCOM_LN_S_RSTB_CTLr_SET BCMI_TSCF_GEN3_XGXS_RXCOM_LN_S_RSTB_CTLr_SET
#define RXCOM_LN_S_RSTB_CTLr_GET BCMI_TSCF_GEN3_XGXS_RXCOM_LN_S_RSTB_CTLr_GET
#define RXCOM_LN_S_RSTB_CTLr_RX_HW_FW_HANDSHAKE_DISABLEf_GET BCMI_TSCF_GEN3_XGXS_RXCOM_LN_S_RSTB_CTLr_RX_HW_FW_HANDSHAKE_DISABLEf_GET
#define RXCOM_LN_S_RSTB_CTLr_RX_HW_FW_HANDSHAKE_DISABLEf_SET BCMI_TSCF_GEN3_XGXS_RXCOM_LN_S_RSTB_CTLr_RX_HW_FW_HANDSHAKE_DISABLEf_SET
#define RXCOM_LN_S_RSTB_CTLr_RX_LN_S_RSTBf_GET BCMI_TSCF_GEN3_XGXS_RXCOM_LN_S_RSTB_CTLr_RX_LN_S_RSTBf_GET
#define RXCOM_LN_S_RSTB_CTLr_RX_LN_S_RSTBf_SET BCMI_TSCF_GEN3_XGXS_RXCOM_LN_S_RSTB_CTLr_RX_LN_S_RSTBf_SET
#define READ_RXCOM_LN_S_RSTB_CTLr BCMI_TSCF_GEN3_XGXS_READ_RXCOM_LN_S_RSTB_CTLr
#define WRITE_RXCOM_LN_S_RSTB_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_RXCOM_LN_S_RSTB_CTLr
#define MODIFY_RXCOM_LN_S_RSTB_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_RXCOM_LN_S_RSTB_CTLr
#define READLN_RXCOM_LN_S_RSTB_CTLr BCMI_TSCF_GEN3_XGXS_READLN_RXCOM_LN_S_RSTB_CTLr
#define WRITELN_RXCOM_LN_S_RSTB_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_RXCOM_LN_S_RSTB_CTLr
#define WRITEALL_RXCOM_LN_S_RSTB_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_RXCOM_LN_S_RSTB_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_RXCOM_LN_S_RSTB_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TXCOM_OSR_MODE_CTL
 * BLOCKS:   TXCOM_CKRST_CTRL_MONTEREY
 * REGADDR:  0xd1d0
 * DEVAD:    1
 * DESC:     OSR_MODE_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TX_OSR_MODE_FRC_VAL oversample (OS) mode Decoding of this register is as follows.OSX1          4'd0OSX2          4'd1OSX4          4'd2OSX16P5       4'd8OSX20P625     4'd12OSX8          4'd5OSX16         4'd9OSX32         4'd13OSX8P25       4'd4
 *     TX_OSR_MODE_FRC  oversample (OS) mode force. Setting this bit will allow the register value to be used for OS mode.Othersise, the pin input values are used for OS mode
 */
#define BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_CTLr (0x0001d1d0 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_CTLr_SIZE 4

/*
 * This structure should be used to declare and program TXCOM_OSR_MODE_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_CTLr_s {
	uint32_t v[1];
	uint32_t txcom_osr_mode_ctl[1];
	uint32_t _txcom_osr_mode_ctl;
} BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_CTLr_CLR(r) (r).txcom_osr_mode_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_CTLr_SET(r,d) (r).txcom_osr_mode_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_CTLr_GET(r) (r).txcom_osr_mode_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_CTLr_TX_OSR_MODE_FRCf_GET(r) ((((r).txcom_osr_mode_ctl[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_CTLr_TX_OSR_MODE_FRCf_SET(r,f) (r).txcom_osr_mode_ctl[0]=(((r).txcom_osr_mode_ctl[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_CTLr_TX_OSR_MODE_FRC_VALf_GET(r) (((r).txcom_osr_mode_ctl[0]) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_CTLr_TX_OSR_MODE_FRC_VALf_SET(r,f) (r).txcom_osr_mode_ctl[0]=(((r).txcom_osr_mode_ctl[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access TXCOM_OSR_MODE_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TXCOM_OSR_MODE_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_CTLr,(_r._txcom_osr_mode_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TXCOM_OSR_MODE_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_CTLr,(_r._txcom_osr_mode_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TXCOM_OSR_MODE_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_CTLr,(_r._txcom_osr_mode_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_TXCOM_OSR_MODE_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_osr_mode_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TXCOM_OSR_MODE_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_osr_mode_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TXCOM_OSR_MODE_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txcom_osr_mode_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXCOM_OSR_MODE_CTLr BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_CTLr
#define TXCOM_OSR_MODE_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_CTLr_t TXCOM_OSR_MODE_CTLr_t;
#define TXCOM_OSR_MODE_CTLr_CLR BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_CTLr_CLR
#define TXCOM_OSR_MODE_CTLr_SET BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_CTLr_SET
#define TXCOM_OSR_MODE_CTLr_GET BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_CTLr_GET
#define TXCOM_OSR_MODE_CTLr_TX_OSR_MODE_FRCf_GET BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_CTLr_TX_OSR_MODE_FRCf_GET
#define TXCOM_OSR_MODE_CTLr_TX_OSR_MODE_FRCf_SET BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_CTLr_TX_OSR_MODE_FRCf_SET
#define TXCOM_OSR_MODE_CTLr_TX_OSR_MODE_FRC_VALf_GET BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_CTLr_TX_OSR_MODE_FRC_VALf_GET
#define TXCOM_OSR_MODE_CTLr_TX_OSR_MODE_FRC_VALf_SET BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_CTLr_TX_OSR_MODE_FRC_VALf_SET
#define READ_TXCOM_OSR_MODE_CTLr BCMI_TSCF_GEN3_XGXS_READ_TXCOM_OSR_MODE_CTLr
#define WRITE_TXCOM_OSR_MODE_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_TXCOM_OSR_MODE_CTLr
#define MODIFY_TXCOM_OSR_MODE_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_TXCOM_OSR_MODE_CTLr
#define READLN_TXCOM_OSR_MODE_CTLr BCMI_TSCF_GEN3_XGXS_READLN_TXCOM_OSR_MODE_CTLr
#define WRITELN_TXCOM_OSR_MODE_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_TXCOM_OSR_MODE_CTLr
#define WRITEALL_TXCOM_OSR_MODE_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_TXCOM_OSR_MODE_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TXCOM_LN_CLK_RST_N_PWRDWN_CTL
 * BLOCKS:   TXCOM_CKRST_CTRL_MONTEREY
 * REGADDR:  0xd1d1
 * DEVAD:    1
 * DESC:     LANE_CLK_RESET_N_POWERDOWN_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TX_LN_DP_S_RSTB  Active Low Lane Soft Reset for datapath. If asserted by writing to 1'b0 will reset the datapath for a lane.This soft reset is equivalent to the hard reset input pin pmd_ln_dp_h_rstb_i.
 */
#define BCMI_TSCF_GEN3_XGXS_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr (0x0001d1d1 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr_SIZE 4

/*
 * This structure should be used to declare and program TXCOM_LN_CLK_RST_N_PWRDWN_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr_s {
	uint32_t v[1];
	uint32_t txcom_ln_clk_rst_n_pwrdwn_ctl[1];
	uint32_t _txcom_ln_clk_rst_n_pwrdwn_ctl;
} BCMI_TSCF_GEN3_XGXS_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr_CLR(r) (r).txcom_ln_clk_rst_n_pwrdwn_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr_SET(r,d) (r).txcom_ln_clk_rst_n_pwrdwn_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr_GET(r) (r).txcom_ln_clk_rst_n_pwrdwn_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr_TX_LN_DP_S_RSTBf_GET(r) (((r).txcom_ln_clk_rst_n_pwrdwn_ctl[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr_TX_LN_DP_S_RSTBf_SET(r,f) (r).txcom_ln_clk_rst_n_pwrdwn_ctl[0]=(((r).txcom_ln_clk_rst_n_pwrdwn_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TXCOM_LN_CLK_RST_N_PWRDWN_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr,(_r._txcom_ln_clk_rst_n_pwrdwn_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr,(_r._txcom_ln_clk_rst_n_pwrdwn_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr,(_r._txcom_ln_clk_rst_n_pwrdwn_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_ln_clk_rst_n_pwrdwn_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_ln_clk_rst_n_pwrdwn_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txcom_ln_clk_rst_n_pwrdwn_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXCOM_LN_CLK_RST_N_PWRDWN_CTLr BCMI_TSCF_GEN3_XGXS_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr
#define TXCOM_LN_CLK_RST_N_PWRDWN_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr_t TXCOM_LN_CLK_RST_N_PWRDWN_CTLr_t;
#define TXCOM_LN_CLK_RST_N_PWRDWN_CTLr_CLR BCMI_TSCF_GEN3_XGXS_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr_CLR
#define TXCOM_LN_CLK_RST_N_PWRDWN_CTLr_SET BCMI_TSCF_GEN3_XGXS_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr_SET
#define TXCOM_LN_CLK_RST_N_PWRDWN_CTLr_GET BCMI_TSCF_GEN3_XGXS_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr_GET
#define TXCOM_LN_CLK_RST_N_PWRDWN_CTLr_TX_LN_DP_S_RSTBf_GET BCMI_TSCF_GEN3_XGXS_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr_TX_LN_DP_S_RSTBf_GET
#define TXCOM_LN_CLK_RST_N_PWRDWN_CTLr_TX_LN_DP_S_RSTBf_SET BCMI_TSCF_GEN3_XGXS_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr_TX_LN_DP_S_RSTBf_SET
#define READ_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr BCMI_TSCF_GEN3_XGXS_READ_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr
#define WRITE_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr
#define MODIFY_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr
#define READLN_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr BCMI_TSCF_GEN3_XGXS_READLN_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr
#define WRITELN_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr
#define WRITEALL_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTL
 * BLOCKS:   TXCOM_CKRST_CTRL_MONTEREY
 * REGADDR:  0xd1d3
 * DEVAD:    1
 * DESC:     LANE_RESET_N_PWRDN_PIN_KILL_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     PMD_LN_TX_H_RSTB_PKILL 1'b1 will disable the pmd_ln_h_rstb input pin.
 *     PMD_LN_TX_DP_H_RSTB_PKILL 1'b1 will disable the pmd_ln_dp_h_rstb input pin.
 */
#define BCMI_TSCF_GEN3_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr (0x0001d1d3 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_SIZE 4

/*
 * This structure should be used to declare and program TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_s {
	uint32_t v[1];
	uint32_t txcom_ln_rst_n_pwrdn_pin_kill_ctl[1];
	uint32_t _txcom_ln_rst_n_pwrdn_pin_kill_ctl;
} BCMI_TSCF_GEN3_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_CLR(r) (r).txcom_ln_rst_n_pwrdn_pin_kill_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_SET(r,d) (r).txcom_ln_rst_n_pwrdn_pin_kill_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_GET(r) (r).txcom_ln_rst_n_pwrdn_pin_kill_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_TX_DP_H_RSTB_PKILLf_GET(r) ((((r).txcom_ln_rst_n_pwrdn_pin_kill_ctl[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_TX_DP_H_RSTB_PKILLf_SET(r,f) (r).txcom_ln_rst_n_pwrdn_pin_kill_ctl[0]=(((r).txcom_ln_rst_n_pwrdn_pin_kill_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_TX_H_RSTB_PKILLf_GET(r) (((r).txcom_ln_rst_n_pwrdn_pin_kill_ctl[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_TX_H_RSTB_PKILLf_SET(r,f) (r).txcom_ln_rst_n_pwrdn_pin_kill_ctl[0]=(((r).txcom_ln_rst_n_pwrdn_pin_kill_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr,(_r._txcom_ln_rst_n_pwrdn_pin_kill_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr,(_r._txcom_ln_rst_n_pwrdn_pin_kill_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr,(_r._txcom_ln_rst_n_pwrdn_pin_kill_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_ln_rst_n_pwrdn_pin_kill_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_ln_rst_n_pwrdn_pin_kill_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txcom_ln_rst_n_pwrdn_pin_kill_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_TSCF_GEN3_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_t TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_t;
#define TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_CLR BCMI_TSCF_GEN3_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_CLR
#define TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_SET BCMI_TSCF_GEN3_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_SET
#define TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_GET BCMI_TSCF_GEN3_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_GET
#define TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_TX_DP_H_RSTB_PKILLf_GET BCMI_TSCF_GEN3_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_TX_DP_H_RSTB_PKILLf_GET
#define TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_TX_DP_H_RSTB_PKILLf_SET BCMI_TSCF_GEN3_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_TX_DP_H_RSTB_PKILLf_SET
#define TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_TX_H_RSTB_PKILLf_GET BCMI_TSCF_GEN3_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_TX_H_RSTB_PKILLf_GET
#define TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_TX_H_RSTB_PKILLf_SET BCMI_TSCF_GEN3_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_TX_H_RSTB_PKILLf_SET
#define READ_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_TSCF_GEN3_XGXS_READ_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define WRITE_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define MODIFY_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define READLN_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_TSCF_GEN3_XGXS_READLN_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define WRITELN_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define WRITEALL_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TXCOM_UC_ACK_LN_CTL
 * BLOCKS:   TXCOM_CKRST_CTRL_MONTEREY
 * REGADDR:  0xd1d5
 * DEVAD:    1
 * DESC:     UC_ACK_LANE_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TX_UC_ACK_LANE_CFG_DONE uC will write this to 1 to indicate it's configuration of the lane is complete. Writing to 1'b1 willshould release internal hold on lane_dp_reset, only if lane_dp_reset_state is 3'b001.
 *     TX_UC_ACK_LANE_DP_RESET uC will write this to 1 to acknowledge a reset event after seeing "lane_dp_reset_coccured".
 */
#define BCMI_TSCF_GEN3_XGXS_TXCOM_UC_ACK_LN_CTLr (0x0001d1d5 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TXCOM_UC_ACK_LN_CTLr_SIZE 4

/*
 * This structure should be used to declare and program TXCOM_UC_ACK_LN_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TXCOM_UC_ACK_LN_CTLr_s {
	uint32_t v[1];
	uint32_t txcom_uc_ack_ln_ctl[1];
	uint32_t _txcom_uc_ack_ln_ctl;
} BCMI_TSCF_GEN3_XGXS_TXCOM_UC_ACK_LN_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_TXCOM_UC_ACK_LN_CTLr_CLR(r) (r).txcom_uc_ack_ln_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TXCOM_UC_ACK_LN_CTLr_SET(r,d) (r).txcom_uc_ack_ln_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_TXCOM_UC_ACK_LN_CTLr_GET(r) (r).txcom_uc_ack_ln_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TXCOM_UC_ACK_LN_CTLr_TX_UC_ACK_LANE_DP_RESETf_GET(r) ((((r).txcom_uc_ack_ln_ctl[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TXCOM_UC_ACK_LN_CTLr_TX_UC_ACK_LANE_DP_RESETf_SET(r,f) (r).txcom_uc_ack_ln_ctl[0]=(((r).txcom_uc_ack_ln_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_TXCOM_UC_ACK_LN_CTLr_TX_UC_ACK_LANE_CFG_DONEf_GET(r) (((r).txcom_uc_ack_ln_ctl[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TXCOM_UC_ACK_LN_CTLr_TX_UC_ACK_LANE_CFG_DONEf_SET(r,f) (r).txcom_uc_ack_ln_ctl[0]=(((r).txcom_uc_ack_ln_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TXCOM_UC_ACK_LN_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TXCOM_UC_ACK_LN_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_UC_ACK_LN_CTLr,(_r._txcom_uc_ack_ln_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TXCOM_UC_ACK_LN_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_UC_ACK_LN_CTLr,(_r._txcom_uc_ack_ln_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TXCOM_UC_ACK_LN_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_UC_ACK_LN_CTLr,(_r._txcom_uc_ack_ln_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_TXCOM_UC_ACK_LN_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_UC_ACK_LN_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_uc_ack_ln_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TXCOM_UC_ACK_LN_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_UC_ACK_LN_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_uc_ack_ln_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TXCOM_UC_ACK_LN_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_UC_ACK_LN_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txcom_uc_ack_ln_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXCOM_UC_ACK_LN_CTLr BCMI_TSCF_GEN3_XGXS_TXCOM_UC_ACK_LN_CTLr
#define TXCOM_UC_ACK_LN_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_TXCOM_UC_ACK_LN_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TXCOM_UC_ACK_LN_CTLr_t TXCOM_UC_ACK_LN_CTLr_t;
#define TXCOM_UC_ACK_LN_CTLr_CLR BCMI_TSCF_GEN3_XGXS_TXCOM_UC_ACK_LN_CTLr_CLR
#define TXCOM_UC_ACK_LN_CTLr_SET BCMI_TSCF_GEN3_XGXS_TXCOM_UC_ACK_LN_CTLr_SET
#define TXCOM_UC_ACK_LN_CTLr_GET BCMI_TSCF_GEN3_XGXS_TXCOM_UC_ACK_LN_CTLr_GET
#define TXCOM_UC_ACK_LN_CTLr_TX_UC_ACK_LANE_DP_RESETf_GET BCMI_TSCF_GEN3_XGXS_TXCOM_UC_ACK_LN_CTLr_TX_UC_ACK_LANE_DP_RESETf_GET
#define TXCOM_UC_ACK_LN_CTLr_TX_UC_ACK_LANE_DP_RESETf_SET BCMI_TSCF_GEN3_XGXS_TXCOM_UC_ACK_LN_CTLr_TX_UC_ACK_LANE_DP_RESETf_SET
#define TXCOM_UC_ACK_LN_CTLr_TX_UC_ACK_LANE_CFG_DONEf_GET BCMI_TSCF_GEN3_XGXS_TXCOM_UC_ACK_LN_CTLr_TX_UC_ACK_LANE_CFG_DONEf_GET
#define TXCOM_UC_ACK_LN_CTLr_TX_UC_ACK_LANE_CFG_DONEf_SET BCMI_TSCF_GEN3_XGXS_TXCOM_UC_ACK_LN_CTLr_TX_UC_ACK_LANE_CFG_DONEf_SET
#define READ_TXCOM_UC_ACK_LN_CTLr BCMI_TSCF_GEN3_XGXS_READ_TXCOM_UC_ACK_LN_CTLr
#define WRITE_TXCOM_UC_ACK_LN_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_TXCOM_UC_ACK_LN_CTLr
#define MODIFY_TXCOM_UC_ACK_LN_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_TXCOM_UC_ACK_LN_CTLr
#define READLN_TXCOM_UC_ACK_LN_CTLr BCMI_TSCF_GEN3_XGXS_READLN_TXCOM_UC_ACK_LN_CTLr
#define WRITELN_TXCOM_UC_ACK_LN_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_TXCOM_UC_ACK_LN_CTLr
#define WRITEALL_TXCOM_UC_ACK_LN_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_TXCOM_UC_ACK_LN_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TXCOM_UC_ACK_LN_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TXCOM_LN_RST_OCC_CTL
 * BLOCKS:   TXCOM_CKRST_CTRL_MONTEREY
 * REGADDR:  0xd1d6
 * DEVAD:    1
 * DESC:     LANE_REG_RESET_OCCURRED_CONTROL
 * RESETVAL: 0x1 (1)
 * ACCESS:   R/W
 * FIELDS:
 *     TX_LANE_REG_RESET_OCCURRED Set to 1'b1 upon lane level register reset and remains so until cleared by register write from uC.
 */
#define BCMI_TSCF_GEN3_XGXS_TXCOM_LN_RST_OCC_CTLr (0x0001d1d6 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TXCOM_LN_RST_OCC_CTLr_SIZE 4

/*
 * This structure should be used to declare and program TXCOM_LN_RST_OCC_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TXCOM_LN_RST_OCC_CTLr_s {
	uint32_t v[1];
	uint32_t txcom_ln_rst_occ_ctl[1];
	uint32_t _txcom_ln_rst_occ_ctl;
} BCMI_TSCF_GEN3_XGXS_TXCOM_LN_RST_OCC_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_TXCOM_LN_RST_OCC_CTLr_CLR(r) (r).txcom_ln_rst_occ_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TXCOM_LN_RST_OCC_CTLr_SET(r,d) (r).txcom_ln_rst_occ_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_TXCOM_LN_RST_OCC_CTLr_GET(r) (r).txcom_ln_rst_occ_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TXCOM_LN_RST_OCC_CTLr_TX_LANE_REG_RESET_OCCURREDf_GET(r) (((r).txcom_ln_rst_occ_ctl[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TXCOM_LN_RST_OCC_CTLr_TX_LANE_REG_RESET_OCCURREDf_SET(r,f) (r).txcom_ln_rst_occ_ctl[0]=(((r).txcom_ln_rst_occ_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TXCOM_LN_RST_OCC_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TXCOM_LN_RST_OCC_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_LN_RST_OCC_CTLr,(_r._txcom_ln_rst_occ_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TXCOM_LN_RST_OCC_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_LN_RST_OCC_CTLr,(_r._txcom_ln_rst_occ_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TXCOM_LN_RST_OCC_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_LN_RST_OCC_CTLr,(_r._txcom_ln_rst_occ_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_TXCOM_LN_RST_OCC_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_LN_RST_OCC_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_ln_rst_occ_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TXCOM_LN_RST_OCC_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_LN_RST_OCC_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_ln_rst_occ_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TXCOM_LN_RST_OCC_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_LN_RST_OCC_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txcom_ln_rst_occ_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXCOM_LN_RST_OCC_CTLr BCMI_TSCF_GEN3_XGXS_TXCOM_LN_RST_OCC_CTLr
#define TXCOM_LN_RST_OCC_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_TXCOM_LN_RST_OCC_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TXCOM_LN_RST_OCC_CTLr_t TXCOM_LN_RST_OCC_CTLr_t;
#define TXCOM_LN_RST_OCC_CTLr_CLR BCMI_TSCF_GEN3_XGXS_TXCOM_LN_RST_OCC_CTLr_CLR
#define TXCOM_LN_RST_OCC_CTLr_SET BCMI_TSCF_GEN3_XGXS_TXCOM_LN_RST_OCC_CTLr_SET
#define TXCOM_LN_RST_OCC_CTLr_GET BCMI_TSCF_GEN3_XGXS_TXCOM_LN_RST_OCC_CTLr_GET
#define TXCOM_LN_RST_OCC_CTLr_TX_LANE_REG_RESET_OCCURREDf_GET BCMI_TSCF_GEN3_XGXS_TXCOM_LN_RST_OCC_CTLr_TX_LANE_REG_RESET_OCCURREDf_GET
#define TXCOM_LN_RST_OCC_CTLr_TX_LANE_REG_RESET_OCCURREDf_SET BCMI_TSCF_GEN3_XGXS_TXCOM_LN_RST_OCC_CTLr_TX_LANE_REG_RESET_OCCURREDf_SET
#define READ_TXCOM_LN_RST_OCC_CTLr BCMI_TSCF_GEN3_XGXS_READ_TXCOM_LN_RST_OCC_CTLr
#define WRITE_TXCOM_LN_RST_OCC_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_TXCOM_LN_RST_OCC_CTLr
#define MODIFY_TXCOM_LN_RST_OCC_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_TXCOM_LN_RST_OCC_CTLr
#define READLN_TXCOM_LN_RST_OCC_CTLr BCMI_TSCF_GEN3_XGXS_READLN_TXCOM_LN_RST_OCC_CTLr
#define WRITELN_TXCOM_LN_RST_OCC_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_TXCOM_LN_RST_OCC_CTLr
#define WRITEALL_TXCOM_LN_RST_OCC_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_TXCOM_LN_RST_OCC_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TXCOM_LN_RST_OCC_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TXCOM_PLL_SEL_CTL
 * BLOCKS:   TXCOM_CKRST_CTRL_MONTEREY
 * REGADDR:  0xd1d7
 * DEVAD:    1
 * DESC:     PLL_SELECT_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TX_PLL_SELECT    This register controls the selection of the PLL0 or PLL1 as clock source for the tx_ lane. This register will be only reset upon POR hard or POR soft reset.This register is expected to be changed only when tx_ lane datapath is in reset.0 - Select PLL0 as clock for tx_ lane.1 - Select PLL1 as clock for tx_ lane.This register bit also drive the AFE tx_ctrl[0] pin.
 */
#define BCMI_TSCF_GEN3_XGXS_TXCOM_PLL_SEL_CTLr (0x0001d1d7 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TXCOM_PLL_SEL_CTLr_SIZE 4

/*
 * This structure should be used to declare and program TXCOM_PLL_SEL_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TXCOM_PLL_SEL_CTLr_s {
	uint32_t v[1];
	uint32_t txcom_pll_sel_ctl[1];
	uint32_t _txcom_pll_sel_ctl;
} BCMI_TSCF_GEN3_XGXS_TXCOM_PLL_SEL_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_TXCOM_PLL_SEL_CTLr_CLR(r) (r).txcom_pll_sel_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TXCOM_PLL_SEL_CTLr_SET(r,d) (r).txcom_pll_sel_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_TXCOM_PLL_SEL_CTLr_GET(r) (r).txcom_pll_sel_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TXCOM_PLL_SEL_CTLr_TX_PLL_SELECTf_GET(r) (((r).txcom_pll_sel_ctl[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TXCOM_PLL_SEL_CTLr_TX_PLL_SELECTf_SET(r,f) (r).txcom_pll_sel_ctl[0]=(((r).txcom_pll_sel_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TXCOM_PLL_SEL_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TXCOM_PLL_SEL_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_PLL_SEL_CTLr,(_r._txcom_pll_sel_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TXCOM_PLL_SEL_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_PLL_SEL_CTLr,(_r._txcom_pll_sel_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TXCOM_PLL_SEL_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_PLL_SEL_CTLr,(_r._txcom_pll_sel_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_TXCOM_PLL_SEL_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_PLL_SEL_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_pll_sel_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TXCOM_PLL_SEL_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_PLL_SEL_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_pll_sel_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TXCOM_PLL_SEL_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_PLL_SEL_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txcom_pll_sel_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXCOM_PLL_SEL_CTLr BCMI_TSCF_GEN3_XGXS_TXCOM_PLL_SEL_CTLr
#define TXCOM_PLL_SEL_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_TXCOM_PLL_SEL_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TXCOM_PLL_SEL_CTLr_t TXCOM_PLL_SEL_CTLr_t;
#define TXCOM_PLL_SEL_CTLr_CLR BCMI_TSCF_GEN3_XGXS_TXCOM_PLL_SEL_CTLr_CLR
#define TXCOM_PLL_SEL_CTLr_SET BCMI_TSCF_GEN3_XGXS_TXCOM_PLL_SEL_CTLr_SET
#define TXCOM_PLL_SEL_CTLr_GET BCMI_TSCF_GEN3_XGXS_TXCOM_PLL_SEL_CTLr_GET
#define TXCOM_PLL_SEL_CTLr_TX_PLL_SELECTf_GET BCMI_TSCF_GEN3_XGXS_TXCOM_PLL_SEL_CTLr_TX_PLL_SELECTf_GET
#define TXCOM_PLL_SEL_CTLr_TX_PLL_SELECTf_SET BCMI_TSCF_GEN3_XGXS_TXCOM_PLL_SEL_CTLr_TX_PLL_SELECTf_SET
#define READ_TXCOM_PLL_SEL_CTLr BCMI_TSCF_GEN3_XGXS_READ_TXCOM_PLL_SEL_CTLr
#define WRITE_TXCOM_PLL_SEL_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_TXCOM_PLL_SEL_CTLr
#define MODIFY_TXCOM_PLL_SEL_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_TXCOM_PLL_SEL_CTLr
#define READLN_TXCOM_PLL_SEL_CTLr BCMI_TSCF_GEN3_XGXS_READLN_TXCOM_PLL_SEL_CTLr
#define WRITELN_TXCOM_PLL_SEL_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_TXCOM_PLL_SEL_CTLr
#define WRITEALL_TXCOM_PLL_SEL_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_TXCOM_PLL_SEL_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TXCOM_PLL_SEL_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TXCOM_LN_DP_RST_ST_STS
 * BLOCKS:   TXCOM_CKRST_CTRL_MONTEREY
 * REGADDR:  0xd1d9
 * DEVAD:    1
 * DESC:     LANE_DP_RESET_STATE_STATUS
 * RESETVAL: 0x7 (7)
 * ACCESS:   R/O
 * FIELDS:
 *     TX_LANE_DP_RESET_STATE Bit 2: lane_dp_reset_active   : Set to 1'b1 whenenver lane_dp_reset is currently requested through any register or pin controls.Bit 1: lane_dp_reset_occurred : Set to 1'b1 whenenver lane_dp_reset is currently requested through any register or pin controls and is latched high.Bit 0: lane_dp_reset_held     : Set to 1'b1 whenenver lane_dp_reset is internally held. Cleared to 1'b0, only if lane_dp_reset_state==001 and uc_ack_lane_cfg_done == 1.
 */
#define BCMI_TSCF_GEN3_XGXS_TXCOM_LN_DP_RST_ST_STSr (0x0001d1d9 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TXCOM_LN_DP_RST_ST_STSr_SIZE 4

/*
 * This structure should be used to declare and program TXCOM_LN_DP_RST_ST_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TXCOM_LN_DP_RST_ST_STSr_s {
	uint32_t v[1];
	uint32_t txcom_ln_dp_rst_st_sts[1];
	uint32_t _txcom_ln_dp_rst_st_sts;
} BCMI_TSCF_GEN3_XGXS_TXCOM_LN_DP_RST_ST_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_TXCOM_LN_DP_RST_ST_STSr_CLR(r) (r).txcom_ln_dp_rst_st_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TXCOM_LN_DP_RST_ST_STSr_SET(r,d) (r).txcom_ln_dp_rst_st_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_TXCOM_LN_DP_RST_ST_STSr_GET(r) (r).txcom_ln_dp_rst_st_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TXCOM_LN_DP_RST_ST_STSr_TX_LANE_DP_RESET_STATEf_GET(r) (((r).txcom_ln_dp_rst_st_sts[0]) & 0x7)
#define BCMI_TSCF_GEN3_XGXS_TXCOM_LN_DP_RST_ST_STSr_TX_LANE_DP_RESET_STATEf_SET(r,f) (r).txcom_ln_dp_rst_st_sts[0]=(((r).txcom_ln_dp_rst_st_sts[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access TXCOM_LN_DP_RST_ST_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TXCOM_LN_DP_RST_ST_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_LN_DP_RST_ST_STSr,(_r._txcom_ln_dp_rst_st_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TXCOM_LN_DP_RST_ST_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_LN_DP_RST_ST_STSr,(_r._txcom_ln_dp_rst_st_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TXCOM_LN_DP_RST_ST_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_LN_DP_RST_ST_STSr,(_r._txcom_ln_dp_rst_st_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_TXCOM_LN_DP_RST_ST_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_LN_DP_RST_ST_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_ln_dp_rst_st_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TXCOM_LN_DP_RST_ST_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_LN_DP_RST_ST_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_ln_dp_rst_st_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TXCOM_LN_DP_RST_ST_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_LN_DP_RST_ST_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txcom_ln_dp_rst_st_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXCOM_LN_DP_RST_ST_STSr BCMI_TSCF_GEN3_XGXS_TXCOM_LN_DP_RST_ST_STSr
#define TXCOM_LN_DP_RST_ST_STSr_SIZE BCMI_TSCF_GEN3_XGXS_TXCOM_LN_DP_RST_ST_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TXCOM_LN_DP_RST_ST_STSr_t TXCOM_LN_DP_RST_ST_STSr_t;
#define TXCOM_LN_DP_RST_ST_STSr_CLR BCMI_TSCF_GEN3_XGXS_TXCOM_LN_DP_RST_ST_STSr_CLR
#define TXCOM_LN_DP_RST_ST_STSr_SET BCMI_TSCF_GEN3_XGXS_TXCOM_LN_DP_RST_ST_STSr_SET
#define TXCOM_LN_DP_RST_ST_STSr_GET BCMI_TSCF_GEN3_XGXS_TXCOM_LN_DP_RST_ST_STSr_GET
#define TXCOM_LN_DP_RST_ST_STSr_TX_LANE_DP_RESET_STATEf_GET BCMI_TSCF_GEN3_XGXS_TXCOM_LN_DP_RST_ST_STSr_TX_LANE_DP_RESET_STATEf_GET
#define TXCOM_LN_DP_RST_ST_STSr_TX_LANE_DP_RESET_STATEf_SET BCMI_TSCF_GEN3_XGXS_TXCOM_LN_DP_RST_ST_STSr_TX_LANE_DP_RESET_STATEf_SET
#define READ_TXCOM_LN_DP_RST_ST_STSr BCMI_TSCF_GEN3_XGXS_READ_TXCOM_LN_DP_RST_ST_STSr
#define WRITE_TXCOM_LN_DP_RST_ST_STSr BCMI_TSCF_GEN3_XGXS_WRITE_TXCOM_LN_DP_RST_ST_STSr
#define MODIFY_TXCOM_LN_DP_RST_ST_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_TXCOM_LN_DP_RST_ST_STSr
#define READLN_TXCOM_LN_DP_RST_ST_STSr BCMI_TSCF_GEN3_XGXS_READLN_TXCOM_LN_DP_RST_ST_STSr
#define WRITELN_TXCOM_LN_DP_RST_ST_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_TXCOM_LN_DP_RST_ST_STSr
#define WRITEALL_TXCOM_LN_DP_RST_ST_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_TXCOM_LN_DP_RST_ST_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TXCOM_LN_DP_RST_ST_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TXCOM_MCST_MASK_CTL
 * BLOCKS:   TXCOM_CKRST_CTRL_MONTEREY
 * REGADDR:  0xd1da
 * DEVAD:    1
 * DESC:     MULTICAST_MASK_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TX_MULTICAST_MASK_CONTROL This masks the lane from a broadcast or multicast write operation.
 */
#define BCMI_TSCF_GEN3_XGXS_TXCOM_MCST_MASK_CTLr (0x0001d1da | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TXCOM_MCST_MASK_CTLr_SIZE 4

/*
 * This structure should be used to declare and program TXCOM_MCST_MASK_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TXCOM_MCST_MASK_CTLr_s {
	uint32_t v[1];
	uint32_t txcom_mcst_mask_ctl[1];
	uint32_t _txcom_mcst_mask_ctl;
} BCMI_TSCF_GEN3_XGXS_TXCOM_MCST_MASK_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_TXCOM_MCST_MASK_CTLr_CLR(r) (r).txcom_mcst_mask_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TXCOM_MCST_MASK_CTLr_SET(r,d) (r).txcom_mcst_mask_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_TXCOM_MCST_MASK_CTLr_GET(r) (r).txcom_mcst_mask_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TXCOM_MCST_MASK_CTLr_TX_MULTICAST_MASK_CONTROLf_GET(r) (((r).txcom_mcst_mask_ctl[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TXCOM_MCST_MASK_CTLr_TX_MULTICAST_MASK_CONTROLf_SET(r,f) (r).txcom_mcst_mask_ctl[0]=(((r).txcom_mcst_mask_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TXCOM_MCST_MASK_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TXCOM_MCST_MASK_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_MCST_MASK_CTLr,(_r._txcom_mcst_mask_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TXCOM_MCST_MASK_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_MCST_MASK_CTLr,(_r._txcom_mcst_mask_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TXCOM_MCST_MASK_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_MCST_MASK_CTLr,(_r._txcom_mcst_mask_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_TXCOM_MCST_MASK_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_MCST_MASK_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_mcst_mask_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TXCOM_MCST_MASK_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_MCST_MASK_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_mcst_mask_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TXCOM_MCST_MASK_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_MCST_MASK_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txcom_mcst_mask_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXCOM_MCST_MASK_CTLr BCMI_TSCF_GEN3_XGXS_TXCOM_MCST_MASK_CTLr
#define TXCOM_MCST_MASK_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_TXCOM_MCST_MASK_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TXCOM_MCST_MASK_CTLr_t TXCOM_MCST_MASK_CTLr_t;
#define TXCOM_MCST_MASK_CTLr_CLR BCMI_TSCF_GEN3_XGXS_TXCOM_MCST_MASK_CTLr_CLR
#define TXCOM_MCST_MASK_CTLr_SET BCMI_TSCF_GEN3_XGXS_TXCOM_MCST_MASK_CTLr_SET
#define TXCOM_MCST_MASK_CTLr_GET BCMI_TSCF_GEN3_XGXS_TXCOM_MCST_MASK_CTLr_GET
#define TXCOM_MCST_MASK_CTLr_TX_MULTICAST_MASK_CONTROLf_GET BCMI_TSCF_GEN3_XGXS_TXCOM_MCST_MASK_CTLr_TX_MULTICAST_MASK_CONTROLf_GET
#define TXCOM_MCST_MASK_CTLr_TX_MULTICAST_MASK_CONTROLf_SET BCMI_TSCF_GEN3_XGXS_TXCOM_MCST_MASK_CTLr_TX_MULTICAST_MASK_CONTROLf_SET
#define READ_TXCOM_MCST_MASK_CTLr BCMI_TSCF_GEN3_XGXS_READ_TXCOM_MCST_MASK_CTLr
#define WRITE_TXCOM_MCST_MASK_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_TXCOM_MCST_MASK_CTLr
#define MODIFY_TXCOM_MCST_MASK_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_TXCOM_MCST_MASK_CTLr
#define READLN_TXCOM_MCST_MASK_CTLr BCMI_TSCF_GEN3_XGXS_READLN_TXCOM_MCST_MASK_CTLr
#define WRITELN_TXCOM_MCST_MASK_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_TXCOM_MCST_MASK_CTLr
#define WRITEALL_TXCOM_MCST_MASK_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_TXCOM_MCST_MASK_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TXCOM_MCST_MASK_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TXCOM_OSR_MODE_STS_MC_MASK
 * BLOCKS:   TXCOM_CKRST_CTRL_MONTEREY
 * REGADDR:  0xd1db
 * DEVAD:    1
 * DESC:     OSR_MODE_STATUS_MC_MASK
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TX_OSR_MODE      OSR Mode status after the mux.OSR Mode status after the osr_mode_frc/frc_val mux.OSX1          4'd0OSX2          4'd1OSX4          4'd2OSX16P5       4'd8OSX20P625     4'd12OSX8          4'd5OSX16         4'd9OSX32         4'd13OSX8P25       4'd4
 *     TX_MULTICAST_MASK_CONTROL_STATUS Status of multicast mask control for masking lane from multicast write operation.
 */
#define BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr (0x0001d1db | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr_SIZE 4

/*
 * This structure should be used to declare and program TXCOM_OSR_MODE_STS_MC_MASK.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr_s {
	uint32_t v[1];
	uint32_t txcom_osr_mode_sts_mc_mask[1];
	uint32_t _txcom_osr_mode_sts_mc_mask;
} BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr_t;

#define BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr_CLR(r) (r).txcom_osr_mode_sts_mc_mask[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr_SET(r,d) (r).txcom_osr_mode_sts_mc_mask[0] = d
#define BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr_GET(r) (r).txcom_osr_mode_sts_mc_mask[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr_TX_MULTICAST_MASK_CONTROL_STATUSf_GET(r) ((((r).txcom_osr_mode_sts_mc_mask[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr_TX_MULTICAST_MASK_CONTROL_STATUSf_SET(r,f) (r).txcom_osr_mode_sts_mc_mask[0]=(((r).txcom_osr_mode_sts_mc_mask[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr_TX_OSR_MODEf_GET(r) (((r).txcom_osr_mode_sts_mc_mask[0]) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr_TX_OSR_MODEf_SET(r,f) (r).txcom_osr_mode_sts_mc_mask[0]=(((r).txcom_osr_mode_sts_mc_mask[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access TXCOM_OSR_MODE_STS_MC_MASK.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TXCOM_OSR_MODE_STS_MC_MASKr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr,(_r._txcom_osr_mode_sts_mc_mask))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TXCOM_OSR_MODE_STS_MC_MASKr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr,(_r._txcom_osr_mode_sts_mc_mask)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TXCOM_OSR_MODE_STS_MC_MASKr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr,(_r._txcom_osr_mode_sts_mc_mask))
#define BCMI_TSCF_GEN3_XGXS_READLN_TXCOM_OSR_MODE_STS_MC_MASKr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_osr_mode_sts_mc_mask))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TXCOM_OSR_MODE_STS_MC_MASKr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_osr_mode_sts_mc_mask))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TXCOM_OSR_MODE_STS_MC_MASKr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txcom_osr_mode_sts_mc_mask))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXCOM_OSR_MODE_STS_MC_MASKr BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr
#define TXCOM_OSR_MODE_STS_MC_MASKr_SIZE BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr_t TXCOM_OSR_MODE_STS_MC_MASKr_t;
#define TXCOM_OSR_MODE_STS_MC_MASKr_CLR BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr_CLR
#define TXCOM_OSR_MODE_STS_MC_MASKr_SET BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr_SET
#define TXCOM_OSR_MODE_STS_MC_MASKr_GET BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr_GET
#define TXCOM_OSR_MODE_STS_MC_MASKr_TX_MULTICAST_MASK_CONTROL_STATUSf_GET BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr_TX_MULTICAST_MASK_CONTROL_STATUSf_GET
#define TXCOM_OSR_MODE_STS_MC_MASKr_TX_MULTICAST_MASK_CONTROL_STATUSf_SET BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr_TX_MULTICAST_MASK_CONTROL_STATUSf_SET
#define TXCOM_OSR_MODE_STS_MC_MASKr_TX_OSR_MODEf_GET BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr_TX_OSR_MODEf_GET
#define TXCOM_OSR_MODE_STS_MC_MASKr_TX_OSR_MODEf_SET BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr_TX_OSR_MODEf_SET
#define READ_TXCOM_OSR_MODE_STS_MC_MASKr BCMI_TSCF_GEN3_XGXS_READ_TXCOM_OSR_MODE_STS_MC_MASKr
#define WRITE_TXCOM_OSR_MODE_STS_MC_MASKr BCMI_TSCF_GEN3_XGXS_WRITE_TXCOM_OSR_MODE_STS_MC_MASKr
#define MODIFY_TXCOM_OSR_MODE_STS_MC_MASKr BCMI_TSCF_GEN3_XGXS_MODIFY_TXCOM_OSR_MODE_STS_MC_MASKr
#define READLN_TXCOM_OSR_MODE_STS_MC_MASKr BCMI_TSCF_GEN3_XGXS_READLN_TXCOM_OSR_MODE_STS_MC_MASKr
#define WRITELN_TXCOM_OSR_MODE_STS_MC_MASKr BCMI_TSCF_GEN3_XGXS_WRITELN_TXCOM_OSR_MODE_STS_MC_MASKr
#define WRITEALL_TXCOM_OSR_MODE_STS_MC_MASKr BCMI_TSCF_GEN3_XGXS_WRITEALL_TXCOM_OSR_MODE_STS_MC_MASKr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STS
 * BLOCKS:   TXCOM_CKRST_CTRL_MONTEREY
 * REGADDR:  0xd1dc
 * DEVAD:    1
 * DESC:     AFE_RESET_PWRDN_OSR_MODE_PIN_STATUS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TX_OSR_MODE_PIN  Indicates the status of the pmd_osr_mode input pin.Decoding of pmd_osr_mode[3:0] pin and osr_mode registers are as follows.OSX1          4'd0OSX2          4'd1OSX4          4'd2OSX16P5       4'd8OSX20P625     4'd12OSX8          4'd5OSX16         4'd9OSX32         4'd13OSX8P25       4'd4
 */
#define BCMI_TSCF_GEN3_XGXS_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr (0x0001d1dc | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_SIZE 4

/*
 * This structure should be used to declare and program TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STS.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_s {
	uint32_t v[1];
	uint32_t txcom_afe_rst_pwrdn_osr_mode_pin_sts[1];
	uint32_t _txcom_afe_rst_pwrdn_osr_mode_pin_sts;
} BCMI_TSCF_GEN3_XGXS_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_t;

#define BCMI_TSCF_GEN3_XGXS_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_CLR(r) (r).txcom_afe_rst_pwrdn_osr_mode_pin_sts[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_SET(r,d) (r).txcom_afe_rst_pwrdn_osr_mode_pin_sts[0] = d
#define BCMI_TSCF_GEN3_XGXS_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_GET(r) (r).txcom_afe_rst_pwrdn_osr_mode_pin_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_TX_OSR_MODE_PINf_GET(r) (((r).txcom_afe_rst_pwrdn_osr_mode_pin_sts[0]) & 0xf)
#define BCMI_TSCF_GEN3_XGXS_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_TX_OSR_MODE_PINf_SET(r,f) (r).txcom_afe_rst_pwrdn_osr_mode_pin_sts[0]=(((r).txcom_afe_rst_pwrdn_osr_mode_pin_sts[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STS.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr,(_r._txcom_afe_rst_pwrdn_osr_mode_pin_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr,(_r._txcom_afe_rst_pwrdn_osr_mode_pin_sts)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr,(_r._txcom_afe_rst_pwrdn_osr_mode_pin_sts))
#define BCMI_TSCF_GEN3_XGXS_READLN_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_afe_rst_pwrdn_osr_mode_pin_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_afe_rst_pwrdn_osr_mode_pin_sts))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txcom_afe_rst_pwrdn_osr_mode_pin_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_TSCF_GEN3_XGXS_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr
#define TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_SIZE BCMI_TSCF_GEN3_XGXS_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_t TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_t;
#define TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_CLR BCMI_TSCF_GEN3_XGXS_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_CLR
#define TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_SET BCMI_TSCF_GEN3_XGXS_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_SET
#define TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_GET BCMI_TSCF_GEN3_XGXS_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_GET
#define TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_TX_OSR_MODE_PINf_GET BCMI_TSCF_GEN3_XGXS_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_TX_OSR_MODE_PINf_GET
#define TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_TX_OSR_MODE_PINf_SET BCMI_TSCF_GEN3_XGXS_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_TX_OSR_MODE_PINf_SET
#define READ_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_TSCF_GEN3_XGXS_READ_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr
#define WRITE_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_TSCF_GEN3_XGXS_WRITE_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr
#define MODIFY_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_TSCF_GEN3_XGXS_MODIFY_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr
#define READLN_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_TSCF_GEN3_XGXS_READLN_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr
#define WRITELN_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_TSCF_GEN3_XGXS_WRITELN_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr
#define WRITEALL_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_TSCF_GEN3_XGXS_WRITEALL_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  TXCOM_LN_S_RSTB_CTL
 * BLOCKS:   TXCOM_CKRST_CTRL_MONTEREY
 * REGADDR:  0xd1de
 * DEVAD:    1
 * DESC:     LN_S_RSTB_CONTROL
 * RESETVAL: 0x1 (1)
 * ACCESS:   R/W
 * FIELDS:
 *     TX_LN_S_RSTB     Active Low Lane Soft Reset. If asserted by writing to 1'b0 will reset the registers and datapath for a lane.This soft reset is equivalent to the hard reset input pin pmd_ln_h_rstb_i.
 *     TX_HW_FW_HANDSHAKE_DISABLE 1: disables the HW-FW handshake logic for the TX lane which means there is no acknowledgement required from uC and lane reset will be de-asserted once reset register/pin conditions are de-asserted.
 */
#define BCMI_TSCF_GEN3_XGXS_TXCOM_LN_S_RSTB_CTLr (0x0001d1de | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_TXCOM_LN_S_RSTB_CTLr_SIZE 4

/*
 * This structure should be used to declare and program TXCOM_LN_S_RSTB_CTL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_TXCOM_LN_S_RSTB_CTLr_s {
	uint32_t v[1];
	uint32_t txcom_ln_s_rstb_ctl[1];
	uint32_t _txcom_ln_s_rstb_ctl;
} BCMI_TSCF_GEN3_XGXS_TXCOM_LN_S_RSTB_CTLr_t;

#define BCMI_TSCF_GEN3_XGXS_TXCOM_LN_S_RSTB_CTLr_CLR(r) (r).txcom_ln_s_rstb_ctl[0] = 0
#define BCMI_TSCF_GEN3_XGXS_TXCOM_LN_S_RSTB_CTLr_SET(r,d) (r).txcom_ln_s_rstb_ctl[0] = d
#define BCMI_TSCF_GEN3_XGXS_TXCOM_LN_S_RSTB_CTLr_GET(r) (r).txcom_ln_s_rstb_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_TXCOM_LN_S_RSTB_CTLr_TX_HW_FW_HANDSHAKE_DISABLEf_GET(r) ((((r).txcom_ln_s_rstb_ctl[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TXCOM_LN_S_RSTB_CTLr_TX_HW_FW_HANDSHAKE_DISABLEf_SET(r,f) (r).txcom_ln_s_rstb_ctl[0]=(((r).txcom_ln_s_rstb_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_TXCOM_LN_S_RSTB_CTLr_TX_LN_S_RSTBf_GET(r) (((r).txcom_ln_s_rstb_ctl[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_TXCOM_LN_S_RSTB_CTLr_TX_LN_S_RSTBf_SET(r,f) (r).txcom_ln_s_rstb_ctl[0]=(((r).txcom_ln_s_rstb_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TXCOM_LN_S_RSTB_CTL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_TXCOM_LN_S_RSTB_CTLr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_LN_S_RSTB_CTLr,(_r._txcom_ln_s_rstb_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITE_TXCOM_LN_S_RSTB_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_LN_S_RSTB_CTLr,(_r._txcom_ln_s_rstb_ctl)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_TXCOM_LN_S_RSTB_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_LN_S_RSTB_CTLr,(_r._txcom_ln_s_rstb_ctl))
#define BCMI_TSCF_GEN3_XGXS_READLN_TXCOM_LN_S_RSTB_CTLr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_LN_S_RSTB_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_ln_s_rstb_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_TXCOM_LN_S_RSTB_CTLr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_LN_S_RSTB_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_ln_s_rstb_ctl))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_TXCOM_LN_S_RSTB_CTLr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_TXCOM_LN_S_RSTB_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txcom_ln_s_rstb_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXCOM_LN_S_RSTB_CTLr BCMI_TSCF_GEN3_XGXS_TXCOM_LN_S_RSTB_CTLr
#define TXCOM_LN_S_RSTB_CTLr_SIZE BCMI_TSCF_GEN3_XGXS_TXCOM_LN_S_RSTB_CTLr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_TXCOM_LN_S_RSTB_CTLr_t TXCOM_LN_S_RSTB_CTLr_t;
#define TXCOM_LN_S_RSTB_CTLr_CLR BCMI_TSCF_GEN3_XGXS_TXCOM_LN_S_RSTB_CTLr_CLR
#define TXCOM_LN_S_RSTB_CTLr_SET BCMI_TSCF_GEN3_XGXS_TXCOM_LN_S_RSTB_CTLr_SET
#define TXCOM_LN_S_RSTB_CTLr_GET BCMI_TSCF_GEN3_XGXS_TXCOM_LN_S_RSTB_CTLr_GET
#define TXCOM_LN_S_RSTB_CTLr_TX_HW_FW_HANDSHAKE_DISABLEf_GET BCMI_TSCF_GEN3_XGXS_TXCOM_LN_S_RSTB_CTLr_TX_HW_FW_HANDSHAKE_DISABLEf_GET
#define TXCOM_LN_S_RSTB_CTLr_TX_HW_FW_HANDSHAKE_DISABLEf_SET BCMI_TSCF_GEN3_XGXS_TXCOM_LN_S_RSTB_CTLr_TX_HW_FW_HANDSHAKE_DISABLEf_SET
#define TXCOM_LN_S_RSTB_CTLr_TX_LN_S_RSTBf_GET BCMI_TSCF_GEN3_XGXS_TXCOM_LN_S_RSTB_CTLr_TX_LN_S_RSTBf_GET
#define TXCOM_LN_S_RSTB_CTLr_TX_LN_S_RSTBf_SET BCMI_TSCF_GEN3_XGXS_TXCOM_LN_S_RSTB_CTLr_TX_LN_S_RSTBf_SET
#define READ_TXCOM_LN_S_RSTB_CTLr BCMI_TSCF_GEN3_XGXS_READ_TXCOM_LN_S_RSTB_CTLr
#define WRITE_TXCOM_LN_S_RSTB_CTLr BCMI_TSCF_GEN3_XGXS_WRITE_TXCOM_LN_S_RSTB_CTLr
#define MODIFY_TXCOM_LN_S_RSTB_CTLr BCMI_TSCF_GEN3_XGXS_MODIFY_TXCOM_LN_S_RSTB_CTLr
#define READLN_TXCOM_LN_S_RSTB_CTLr BCMI_TSCF_GEN3_XGXS_READLN_TXCOM_LN_S_RSTB_CTLr
#define WRITELN_TXCOM_LN_S_RSTB_CTLr BCMI_TSCF_GEN3_XGXS_WRITELN_TXCOM_LN_S_RSTB_CTLr
#define WRITEALL_TXCOM_LN_S_RSTB_CTLr BCMI_TSCF_GEN3_XGXS_WRITEALL_TXCOM_LN_S_RSTB_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_TXCOM_LN_S_RSTB_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  UC_CLK_CTL0
 * BLOCKS:   MICRO_A
 * REGADDR:  0xd200
 * DEVAD:    1
 * DESC:     Clock control registers 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_MASTER_CLK_EN master clock enable:By default the clock to micro sub-system is disabled andonly the micro control and status registers can be accessed throughthe RMIC interface. Setting this field to 1'b1 enable the master clock0 - disabled1 - enables
 *     MICRO_CORE_CLK_EN micro core clock enable (m0):While the micro-code is being loaded into the code RAM, the clock tomicro_core (m0) is normally disabled and a reset is asserted0 - disabled1 - enables
 */
#define BCMI_TSCF_GEN3_XGXS_UC_CLK_CTL0r (0x0001d200 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_UC_CLK_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program UC_CLK_CTL0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_UC_CLK_CTL0r_s {
	uint32_t v[1];
	uint32_t uc_clk_ctl0[1];
	uint32_t _uc_clk_ctl0;
} BCMI_TSCF_GEN3_XGXS_UC_CLK_CTL0r_t;

#define BCMI_TSCF_GEN3_XGXS_UC_CLK_CTL0r_CLR(r) (r).uc_clk_ctl0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_UC_CLK_CTL0r_SET(r,d) (r).uc_clk_ctl0[0] = d
#define BCMI_TSCF_GEN3_XGXS_UC_CLK_CTL0r_GET(r) (r).uc_clk_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_UC_CLK_CTL0r_MICRO_CORE_CLK_ENf_GET(r) ((((r).uc_clk_ctl0[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_UC_CLK_CTL0r_MICRO_CORE_CLK_ENf_SET(r,f) (r).uc_clk_ctl0[0]=(((r).uc_clk_ctl0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_UC_CLK_CTL0r_MICRO_MASTER_CLK_ENf_GET(r) (((r).uc_clk_ctl0[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_UC_CLK_CTL0r_MICRO_MASTER_CLK_ENf_SET(r,f) (r).uc_clk_ctl0[0]=(((r).uc_clk_ctl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access UC_CLK_CTL0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_UC_CLK_CTL0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_CLK_CTL0r,(_r._uc_clk_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_UC_CLK_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_CLK_CTL0r,(_r._uc_clk_ctl0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_UC_CLK_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_CLK_CTL0r,(_r._uc_clk_ctl0))
#define BCMI_TSCF_GEN3_XGXS_READLN_UC_CLK_CTL0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_CLK_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_clk_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_UC_CLK_CTL0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_CLK_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_clk_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_CLK_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_CLK_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_clk_ctl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define UC_CLK_CTL0r BCMI_TSCF_GEN3_XGXS_UC_CLK_CTL0r
#define UC_CLK_CTL0r_SIZE BCMI_TSCF_GEN3_XGXS_UC_CLK_CTL0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_UC_CLK_CTL0r_t UC_CLK_CTL0r_t;
#define UC_CLK_CTL0r_CLR BCMI_TSCF_GEN3_XGXS_UC_CLK_CTL0r_CLR
#define UC_CLK_CTL0r_SET BCMI_TSCF_GEN3_XGXS_UC_CLK_CTL0r_SET
#define UC_CLK_CTL0r_GET BCMI_TSCF_GEN3_XGXS_UC_CLK_CTL0r_GET
#define UC_CLK_CTL0r_MICRO_CORE_CLK_ENf_GET BCMI_TSCF_GEN3_XGXS_UC_CLK_CTL0r_MICRO_CORE_CLK_ENf_GET
#define UC_CLK_CTL0r_MICRO_CORE_CLK_ENf_SET BCMI_TSCF_GEN3_XGXS_UC_CLK_CTL0r_MICRO_CORE_CLK_ENf_SET
#define UC_CLK_CTL0r_MICRO_MASTER_CLK_ENf_GET BCMI_TSCF_GEN3_XGXS_UC_CLK_CTL0r_MICRO_MASTER_CLK_ENf_GET
#define UC_CLK_CTL0r_MICRO_MASTER_CLK_ENf_SET BCMI_TSCF_GEN3_XGXS_UC_CLK_CTL0r_MICRO_MASTER_CLK_ENf_SET
#define READ_UC_CLK_CTL0r BCMI_TSCF_GEN3_XGXS_READ_UC_CLK_CTL0r
#define WRITE_UC_CLK_CTL0r BCMI_TSCF_GEN3_XGXS_WRITE_UC_CLK_CTL0r
#define MODIFY_UC_CLK_CTL0r BCMI_TSCF_GEN3_XGXS_MODIFY_UC_CLK_CTL0r
#define READLN_UC_CLK_CTL0r BCMI_TSCF_GEN3_XGXS_READLN_UC_CLK_CTL0r
#define WRITELN_UC_CLK_CTL0r BCMI_TSCF_GEN3_XGXS_WRITELN_UC_CLK_CTL0r
#define WRITEALL_UC_CLK_CTL0r BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_CLK_CTL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_UC_CLK_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  UC_RST_CTL0
 * BLOCKS:   MICRO_A
 * REGADDR:  0xd201
 * DEVAD:    1
 * DESC:     Reset control registers 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_MASTER_RSTB master reset :By default a reset to micro controller sub-system is asserted, andonly the micro control and status registers can be accessed throughthe RMIC interface. Setting this field to 1'b1 de-assert a reset to the micro-subsystem0 - asserted1 - de-asserted
 *     MICRO_CORE_RSTB  micro core reset (m0):While the micro-code is being loaded into the code RAM, the clock tomicro_core (m0) is normally disabled and a reset is asserted.Setting this field to 1'b1 de-asserts a reset to the micro.0 - disabled1 - enables
 *     MICRO_PRAM_IF_RSTB PRAM interface reset :By default a reset to the PRAM interface is asserted, andonly the micro control and status registers can be accessed throughthe RMIC interface. Setting this field to 1'b1 de-assert a reset to the PRAM interface0 - asserted1 - de-asserted
 */
#define BCMI_TSCF_GEN3_XGXS_UC_RST_CTL0r (0x0001d201 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_UC_RST_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program UC_RST_CTL0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_UC_RST_CTL0r_s {
	uint32_t v[1];
	uint32_t uc_rst_ctl0[1];
	uint32_t _uc_rst_ctl0;
} BCMI_TSCF_GEN3_XGXS_UC_RST_CTL0r_t;

#define BCMI_TSCF_GEN3_XGXS_UC_RST_CTL0r_CLR(r) (r).uc_rst_ctl0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_UC_RST_CTL0r_SET(r,d) (r).uc_rst_ctl0[0] = d
#define BCMI_TSCF_GEN3_XGXS_UC_RST_CTL0r_GET(r) (r).uc_rst_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_UC_RST_CTL0r_MICRO_PRAM_IF_RSTBf_GET(r) ((((r).uc_rst_ctl0[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_UC_RST_CTL0r_MICRO_PRAM_IF_RSTBf_SET(r,f) (r).uc_rst_ctl0[0]=(((r).uc_rst_ctl0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_UC_RST_CTL0r_MICRO_CORE_RSTBf_GET(r) ((((r).uc_rst_ctl0[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_UC_RST_CTL0r_MICRO_CORE_RSTBf_SET(r,f) (r).uc_rst_ctl0[0]=(((r).uc_rst_ctl0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_UC_RST_CTL0r_MICRO_MASTER_RSTBf_GET(r) (((r).uc_rst_ctl0[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_UC_RST_CTL0r_MICRO_MASTER_RSTBf_SET(r,f) (r).uc_rst_ctl0[0]=(((r).uc_rst_ctl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access UC_RST_CTL0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_UC_RST_CTL0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_RST_CTL0r,(_r._uc_rst_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_UC_RST_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RST_CTL0r,(_r._uc_rst_ctl0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_UC_RST_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RST_CTL0r,(_r._uc_rst_ctl0))
#define BCMI_TSCF_GEN3_XGXS_READLN_UC_RST_CTL0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_RST_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rst_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_UC_RST_CTL0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RST_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rst_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_RST_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RST_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_rst_ctl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define UC_RST_CTL0r BCMI_TSCF_GEN3_XGXS_UC_RST_CTL0r
#define UC_RST_CTL0r_SIZE BCMI_TSCF_GEN3_XGXS_UC_RST_CTL0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_UC_RST_CTL0r_t UC_RST_CTL0r_t;
#define UC_RST_CTL0r_CLR BCMI_TSCF_GEN3_XGXS_UC_RST_CTL0r_CLR
#define UC_RST_CTL0r_SET BCMI_TSCF_GEN3_XGXS_UC_RST_CTL0r_SET
#define UC_RST_CTL0r_GET BCMI_TSCF_GEN3_XGXS_UC_RST_CTL0r_GET
#define UC_RST_CTL0r_MICRO_PRAM_IF_RSTBf_GET BCMI_TSCF_GEN3_XGXS_UC_RST_CTL0r_MICRO_PRAM_IF_RSTBf_GET
#define UC_RST_CTL0r_MICRO_PRAM_IF_RSTBf_SET BCMI_TSCF_GEN3_XGXS_UC_RST_CTL0r_MICRO_PRAM_IF_RSTBf_SET
#define UC_RST_CTL0r_MICRO_CORE_RSTBf_GET BCMI_TSCF_GEN3_XGXS_UC_RST_CTL0r_MICRO_CORE_RSTBf_GET
#define UC_RST_CTL0r_MICRO_CORE_RSTBf_SET BCMI_TSCF_GEN3_XGXS_UC_RST_CTL0r_MICRO_CORE_RSTBf_SET
#define UC_RST_CTL0r_MICRO_MASTER_RSTBf_GET BCMI_TSCF_GEN3_XGXS_UC_RST_CTL0r_MICRO_MASTER_RSTBf_GET
#define UC_RST_CTL0r_MICRO_MASTER_RSTBf_SET BCMI_TSCF_GEN3_XGXS_UC_RST_CTL0r_MICRO_MASTER_RSTBf_SET
#define READ_UC_RST_CTL0r BCMI_TSCF_GEN3_XGXS_READ_UC_RST_CTL0r
#define WRITE_UC_RST_CTL0r BCMI_TSCF_GEN3_XGXS_WRITE_UC_RST_CTL0r
#define MODIFY_UC_RST_CTL0r BCMI_TSCF_GEN3_XGXS_MODIFY_UC_RST_CTL0r
#define READLN_UC_RST_CTL0r BCMI_TSCF_GEN3_XGXS_READLN_UC_RST_CTL0r
#define WRITELN_UC_RST_CTL0r BCMI_TSCF_GEN3_XGXS_WRITELN_UC_RST_CTL0r
#define WRITEALL_UC_RST_CTL0r BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_RST_CTL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_UC_RST_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  UC_AHB_CTL0
 * BLOCKS:   MICRO_A
 * REGADDR:  0xd202
 * DEVAD:    1
 * DESC:     rmi to ahb control registers 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_RA_WRDATASIZE write data size select'd0 : 8-bit'd1 : 16-bit'd2 : 32-bit'd3 : reserved
 *     MICRO_RA_RDDATASIZE read data size select'd0 : 8-bit'd1 : 16-bit'd2 : 32-bit'd3 : reserved
 *     MICRO_RA_INIT    Intialize code/data RAM2'b01: initailize code RAM - write zeroes to all locations2'b10: initialize data RAM - write zeroes to all loactions2'b00, 2'b11: ignored
 *     MICRO_AUTOINC_WRADDR_EN Automatic increment write address enable0 - disabled, micro_ra_wraddr_lsw and micro_ra_wraddr_msw field specify the constant addresswhere the data from the micro_ra_wrdata_msw and micro_ra_wrdata_lsw is written.1 - enabled, micro_ra_wraddr_lsw and micro_ra_wraddr_msw field specify the start addresswhere the data from the micro_ra_wrdata_msw and micro_ra_wrdata_lsw is written.the address automatically increments based on the micro_ra_wrdatasize field afterthe write has been performed
 *     MICRO_AUTOINC_RDADDR_EN Automatic increment read address enable0 - disabled, micro_ra_rdaddr_lsw and micro_ra_rdaddr_msw field specify the constant addresswhere the data is read via the micro_ra_rddata_msw and micro_ra_rddata_lsw fileds1 - enabled, micro_ra_rdaddr_lsw and micro_ra_rdaddr_msw field specify the start addresswhere the data is read via the micro_ra_rddata_msw and micro_ra_rddata_lsw filedsthe address automatically increments based on the micro_ra_rddatasize field afterthe read has been performed
 */
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_CTL0r (0x0001d202 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_UC_AHB_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program UC_AHB_CTL0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_UC_AHB_CTL0r_s {
	uint32_t v[1];
	uint32_t uc_ahb_ctl0[1];
	uint32_t _uc_ahb_ctl0;
} BCMI_TSCF_GEN3_XGXS_UC_AHB_CTL0r_t;

#define BCMI_TSCF_GEN3_XGXS_UC_AHB_CTL0r_CLR(r) (r).uc_ahb_ctl0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_CTL0r_SET(r,d) (r).uc_ahb_ctl0[0] = d
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_CTL0r_GET(r) (r).uc_ahb_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_CTL0r_MICRO_AUTOINC_RDADDR_ENf_GET(r) ((((r).uc_ahb_ctl0[0]) >> 13) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_CTL0r_MICRO_AUTOINC_RDADDR_ENf_SET(r,f) (r).uc_ahb_ctl0[0]=(((r).uc_ahb_ctl0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_CTL0r_MICRO_AUTOINC_WRADDR_ENf_GET(r) ((((r).uc_ahb_ctl0[0]) >> 12) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_CTL0r_MICRO_AUTOINC_WRADDR_ENf_SET(r,f) (r).uc_ahb_ctl0[0]=(((r).uc_ahb_ctl0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_CTL0r_MICRO_RA_INITf_GET(r) ((((r).uc_ahb_ctl0[0]) >> 8) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_CTL0r_MICRO_RA_INITf_SET(r,f) (r).uc_ahb_ctl0[0]=(((r).uc_ahb_ctl0[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_CTL0r_MICRO_RA_RDDATASIZEf_GET(r) ((((r).uc_ahb_ctl0[0]) >> 4) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_CTL0r_MICRO_RA_RDDATASIZEf_SET(r,f) (r).uc_ahb_ctl0[0]=(((r).uc_ahb_ctl0[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_CTL0r_MICRO_RA_WRDATASIZEf_GET(r) (((r).uc_ahb_ctl0[0]) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_CTL0r_MICRO_RA_WRDATASIZEf_SET(r,f) (r).uc_ahb_ctl0[0]=(((r).uc_ahb_ctl0[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access UC_AHB_CTL0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_UC_AHB_CTL0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_CTL0r,(_r._uc_ahb_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_UC_AHB_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_CTL0r,(_r._uc_ahb_ctl0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_UC_AHB_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_CTL0r,(_r._uc_ahb_ctl0))
#define BCMI_TSCF_GEN3_XGXS_READLN_UC_AHB_CTL0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_UC_AHB_CTL0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_AHB_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_ahb_ctl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define UC_AHB_CTL0r BCMI_TSCF_GEN3_XGXS_UC_AHB_CTL0r
#define UC_AHB_CTL0r_SIZE BCMI_TSCF_GEN3_XGXS_UC_AHB_CTL0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_UC_AHB_CTL0r_t UC_AHB_CTL0r_t;
#define UC_AHB_CTL0r_CLR BCMI_TSCF_GEN3_XGXS_UC_AHB_CTL0r_CLR
#define UC_AHB_CTL0r_SET BCMI_TSCF_GEN3_XGXS_UC_AHB_CTL0r_SET
#define UC_AHB_CTL0r_GET BCMI_TSCF_GEN3_XGXS_UC_AHB_CTL0r_GET
#define UC_AHB_CTL0r_MICRO_AUTOINC_RDADDR_ENf_GET BCMI_TSCF_GEN3_XGXS_UC_AHB_CTL0r_MICRO_AUTOINC_RDADDR_ENf_GET
#define UC_AHB_CTL0r_MICRO_AUTOINC_RDADDR_ENf_SET BCMI_TSCF_GEN3_XGXS_UC_AHB_CTL0r_MICRO_AUTOINC_RDADDR_ENf_SET
#define UC_AHB_CTL0r_MICRO_AUTOINC_WRADDR_ENf_GET BCMI_TSCF_GEN3_XGXS_UC_AHB_CTL0r_MICRO_AUTOINC_WRADDR_ENf_GET
#define UC_AHB_CTL0r_MICRO_AUTOINC_WRADDR_ENf_SET BCMI_TSCF_GEN3_XGXS_UC_AHB_CTL0r_MICRO_AUTOINC_WRADDR_ENf_SET
#define UC_AHB_CTL0r_MICRO_RA_INITf_GET BCMI_TSCF_GEN3_XGXS_UC_AHB_CTL0r_MICRO_RA_INITf_GET
#define UC_AHB_CTL0r_MICRO_RA_INITf_SET BCMI_TSCF_GEN3_XGXS_UC_AHB_CTL0r_MICRO_RA_INITf_SET
#define UC_AHB_CTL0r_MICRO_RA_RDDATASIZEf_GET BCMI_TSCF_GEN3_XGXS_UC_AHB_CTL0r_MICRO_RA_RDDATASIZEf_GET
#define UC_AHB_CTL0r_MICRO_RA_RDDATASIZEf_SET BCMI_TSCF_GEN3_XGXS_UC_AHB_CTL0r_MICRO_RA_RDDATASIZEf_SET
#define UC_AHB_CTL0r_MICRO_RA_WRDATASIZEf_GET BCMI_TSCF_GEN3_XGXS_UC_AHB_CTL0r_MICRO_RA_WRDATASIZEf_GET
#define UC_AHB_CTL0r_MICRO_RA_WRDATASIZEf_SET BCMI_TSCF_GEN3_XGXS_UC_AHB_CTL0r_MICRO_RA_WRDATASIZEf_SET
#define READ_UC_AHB_CTL0r BCMI_TSCF_GEN3_XGXS_READ_UC_AHB_CTL0r
#define WRITE_UC_AHB_CTL0r BCMI_TSCF_GEN3_XGXS_WRITE_UC_AHB_CTL0r
#define MODIFY_UC_AHB_CTL0r BCMI_TSCF_GEN3_XGXS_MODIFY_UC_AHB_CTL0r
#define READLN_UC_AHB_CTL0r BCMI_TSCF_GEN3_XGXS_READLN_UC_AHB_CTL0r
#define WRITELN_UC_AHB_CTL0r BCMI_TSCF_GEN3_XGXS_WRITELN_UC_AHB_CTL0r
#define WRITEALL_UC_AHB_CTL0r BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_AHB_CTL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_UC_AHB_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  UC_AHB_STS0
 * BLOCKS:   MICRO_A
 * REGADDR:  0xd203
 * DEVAD:    1
 * DESC:     rmi to ahb status registers 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MICRO_RA_INITDONE When this bit is set, it indicate that code/data RAM initialization process is completeThis reamins set until
 */
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_STS0r (0x0001d203 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_UC_AHB_STS0r_SIZE 4

/*
 * This structure should be used to declare and program UC_AHB_STS0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_UC_AHB_STS0r_s {
	uint32_t v[1];
	uint32_t uc_ahb_sts0[1];
	uint32_t _uc_ahb_sts0;
} BCMI_TSCF_GEN3_XGXS_UC_AHB_STS0r_t;

#define BCMI_TSCF_GEN3_XGXS_UC_AHB_STS0r_CLR(r) (r).uc_ahb_sts0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_STS0r_SET(r,d) (r).uc_ahb_sts0[0] = d
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_STS0r_GET(r) (r).uc_ahb_sts0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_STS0r_MICRO_RA_INITDONEf_GET(r) (((r).uc_ahb_sts0[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_STS0r_MICRO_RA_INITDONEf_SET(r,f) (r).uc_ahb_sts0[0]=(((r).uc_ahb_sts0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access UC_AHB_STS0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_UC_AHB_STS0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_STS0r,(_r._uc_ahb_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_UC_AHB_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_STS0r,(_r._uc_ahb_sts0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_UC_AHB_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_STS0r,(_r._uc_ahb_sts0))
#define BCMI_TSCF_GEN3_XGXS_READLN_UC_AHB_STS0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_UC_AHB_STS0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_AHB_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_STS0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_ahb_sts0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define UC_AHB_STS0r BCMI_TSCF_GEN3_XGXS_UC_AHB_STS0r
#define UC_AHB_STS0r_SIZE BCMI_TSCF_GEN3_XGXS_UC_AHB_STS0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_UC_AHB_STS0r_t UC_AHB_STS0r_t;
#define UC_AHB_STS0r_CLR BCMI_TSCF_GEN3_XGXS_UC_AHB_STS0r_CLR
#define UC_AHB_STS0r_SET BCMI_TSCF_GEN3_XGXS_UC_AHB_STS0r_SET
#define UC_AHB_STS0r_GET BCMI_TSCF_GEN3_XGXS_UC_AHB_STS0r_GET
#define UC_AHB_STS0r_MICRO_RA_INITDONEf_GET BCMI_TSCF_GEN3_XGXS_UC_AHB_STS0r_MICRO_RA_INITDONEf_GET
#define UC_AHB_STS0r_MICRO_RA_INITDONEf_SET BCMI_TSCF_GEN3_XGXS_UC_AHB_STS0r_MICRO_RA_INITDONEf_SET
#define READ_UC_AHB_STS0r BCMI_TSCF_GEN3_XGXS_READ_UC_AHB_STS0r
#define WRITE_UC_AHB_STS0r BCMI_TSCF_GEN3_XGXS_WRITE_UC_AHB_STS0r
#define MODIFY_UC_AHB_STS0r BCMI_TSCF_GEN3_XGXS_MODIFY_UC_AHB_STS0r
#define READLN_UC_AHB_STS0r BCMI_TSCF_GEN3_XGXS_READLN_UC_AHB_STS0r
#define WRITELN_UC_AHB_STS0r BCMI_TSCF_GEN3_XGXS_WRITELN_UC_AHB_STS0r
#define WRITEALL_UC_AHB_STS0r BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_AHB_STS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_UC_AHB_STS0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  UC_AHB_WRADDR_LSW
 * BLOCKS:   MICRO_A
 * REGADDR:  0xd204
 * DEVAD:    1
 * DESC:     rmi to ahb write address LSW (bits 15:0) register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_RA_WRADDR_LSW These bits are used to generate the lower 16-bits of the address on the AHB-Lite bus during write transactionsbit 0 is not used during 16-bit transactions andbits[1:0] are not used during 32-bit transactions
 */
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_WRADDR_LSWr (0x0001d204 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_UC_AHB_WRADDR_LSWr_SIZE 4

/*
 * This structure should be used to declare and program UC_AHB_WRADDR_LSW.
 */
typedef union BCMI_TSCF_GEN3_XGXS_UC_AHB_WRADDR_LSWr_s {
	uint32_t v[1];
	uint32_t uc_ahb_wraddr_lsw[1];
	uint32_t _uc_ahb_wraddr_lsw;
} BCMI_TSCF_GEN3_XGXS_UC_AHB_WRADDR_LSWr_t;

#define BCMI_TSCF_GEN3_XGXS_UC_AHB_WRADDR_LSWr_CLR(r) (r).uc_ahb_wraddr_lsw[0] = 0
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_WRADDR_LSWr_SET(r,d) (r).uc_ahb_wraddr_lsw[0] = d
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_WRADDR_LSWr_GET(r) (r).uc_ahb_wraddr_lsw[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_WRADDR_LSWr_MICRO_RA_WRADDR_LSWf_GET(r) (((r).uc_ahb_wraddr_lsw[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_WRADDR_LSWr_MICRO_RA_WRADDR_LSWf_SET(r,f) (r).uc_ahb_wraddr_lsw[0]=(((r).uc_ahb_wraddr_lsw[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_AHB_WRADDR_LSW.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_UC_AHB_WRADDR_LSWr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_WRADDR_LSWr,(_r._uc_ahb_wraddr_lsw))
#define BCMI_TSCF_GEN3_XGXS_WRITE_UC_AHB_WRADDR_LSWr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_WRADDR_LSWr,(_r._uc_ahb_wraddr_lsw)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_UC_AHB_WRADDR_LSWr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_WRADDR_LSWr,(_r._uc_ahb_wraddr_lsw))
#define BCMI_TSCF_GEN3_XGXS_READLN_UC_AHB_WRADDR_LSWr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_WRADDR_LSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_wraddr_lsw))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_UC_AHB_WRADDR_LSWr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_WRADDR_LSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_wraddr_lsw))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_AHB_WRADDR_LSWr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_WRADDR_LSWr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_ahb_wraddr_lsw))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define UC_AHB_WRADDR_LSWr BCMI_TSCF_GEN3_XGXS_UC_AHB_WRADDR_LSWr
#define UC_AHB_WRADDR_LSWr_SIZE BCMI_TSCF_GEN3_XGXS_UC_AHB_WRADDR_LSWr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_UC_AHB_WRADDR_LSWr_t UC_AHB_WRADDR_LSWr_t;
#define UC_AHB_WRADDR_LSWr_CLR BCMI_TSCF_GEN3_XGXS_UC_AHB_WRADDR_LSWr_CLR
#define UC_AHB_WRADDR_LSWr_SET BCMI_TSCF_GEN3_XGXS_UC_AHB_WRADDR_LSWr_SET
#define UC_AHB_WRADDR_LSWr_GET BCMI_TSCF_GEN3_XGXS_UC_AHB_WRADDR_LSWr_GET
#define UC_AHB_WRADDR_LSWr_MICRO_RA_WRADDR_LSWf_GET BCMI_TSCF_GEN3_XGXS_UC_AHB_WRADDR_LSWr_MICRO_RA_WRADDR_LSWf_GET
#define UC_AHB_WRADDR_LSWr_MICRO_RA_WRADDR_LSWf_SET BCMI_TSCF_GEN3_XGXS_UC_AHB_WRADDR_LSWr_MICRO_RA_WRADDR_LSWf_SET
#define READ_UC_AHB_WRADDR_LSWr BCMI_TSCF_GEN3_XGXS_READ_UC_AHB_WRADDR_LSWr
#define WRITE_UC_AHB_WRADDR_LSWr BCMI_TSCF_GEN3_XGXS_WRITE_UC_AHB_WRADDR_LSWr
#define MODIFY_UC_AHB_WRADDR_LSWr BCMI_TSCF_GEN3_XGXS_MODIFY_UC_AHB_WRADDR_LSWr
#define READLN_UC_AHB_WRADDR_LSWr BCMI_TSCF_GEN3_XGXS_READLN_UC_AHB_WRADDR_LSWr
#define WRITELN_UC_AHB_WRADDR_LSWr BCMI_TSCF_GEN3_XGXS_WRITELN_UC_AHB_WRADDR_LSWr
#define WRITEALL_UC_AHB_WRADDR_LSWr BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_AHB_WRADDR_LSWr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_UC_AHB_WRADDR_LSWr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  UC_AHB_WRADDR_MSW
 * BLOCKS:   MICRO_A
 * REGADDR:  0xd205
 * DEVAD:    1
 * DESC:     rmi to ahb write address MSW (bits 31:16) register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_RA_WRADDR_MSW These bits are used to generate the upper 16-bits of the address on the AHB-Lite bus during write transactions
 */
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_WRADDR_MSWr (0x0001d205 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_UC_AHB_WRADDR_MSWr_SIZE 4

/*
 * This structure should be used to declare and program UC_AHB_WRADDR_MSW.
 */
typedef union BCMI_TSCF_GEN3_XGXS_UC_AHB_WRADDR_MSWr_s {
	uint32_t v[1];
	uint32_t uc_ahb_wraddr_msw[1];
	uint32_t _uc_ahb_wraddr_msw;
} BCMI_TSCF_GEN3_XGXS_UC_AHB_WRADDR_MSWr_t;

#define BCMI_TSCF_GEN3_XGXS_UC_AHB_WRADDR_MSWr_CLR(r) (r).uc_ahb_wraddr_msw[0] = 0
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_WRADDR_MSWr_SET(r,d) (r).uc_ahb_wraddr_msw[0] = d
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_WRADDR_MSWr_GET(r) (r).uc_ahb_wraddr_msw[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_WRADDR_MSWr_MICRO_RA_WRADDR_MSWf_GET(r) (((r).uc_ahb_wraddr_msw[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_WRADDR_MSWr_MICRO_RA_WRADDR_MSWf_SET(r,f) (r).uc_ahb_wraddr_msw[0]=(((r).uc_ahb_wraddr_msw[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_AHB_WRADDR_MSW.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_UC_AHB_WRADDR_MSWr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_WRADDR_MSWr,(_r._uc_ahb_wraddr_msw))
#define BCMI_TSCF_GEN3_XGXS_WRITE_UC_AHB_WRADDR_MSWr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_WRADDR_MSWr,(_r._uc_ahb_wraddr_msw)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_UC_AHB_WRADDR_MSWr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_WRADDR_MSWr,(_r._uc_ahb_wraddr_msw))
#define BCMI_TSCF_GEN3_XGXS_READLN_UC_AHB_WRADDR_MSWr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_WRADDR_MSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_wraddr_msw))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_UC_AHB_WRADDR_MSWr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_WRADDR_MSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_wraddr_msw))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_AHB_WRADDR_MSWr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_WRADDR_MSWr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_ahb_wraddr_msw))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define UC_AHB_WRADDR_MSWr BCMI_TSCF_GEN3_XGXS_UC_AHB_WRADDR_MSWr
#define UC_AHB_WRADDR_MSWr_SIZE BCMI_TSCF_GEN3_XGXS_UC_AHB_WRADDR_MSWr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_UC_AHB_WRADDR_MSWr_t UC_AHB_WRADDR_MSWr_t;
#define UC_AHB_WRADDR_MSWr_CLR BCMI_TSCF_GEN3_XGXS_UC_AHB_WRADDR_MSWr_CLR
#define UC_AHB_WRADDR_MSWr_SET BCMI_TSCF_GEN3_XGXS_UC_AHB_WRADDR_MSWr_SET
#define UC_AHB_WRADDR_MSWr_GET BCMI_TSCF_GEN3_XGXS_UC_AHB_WRADDR_MSWr_GET
#define UC_AHB_WRADDR_MSWr_MICRO_RA_WRADDR_MSWf_GET BCMI_TSCF_GEN3_XGXS_UC_AHB_WRADDR_MSWr_MICRO_RA_WRADDR_MSWf_GET
#define UC_AHB_WRADDR_MSWr_MICRO_RA_WRADDR_MSWf_SET BCMI_TSCF_GEN3_XGXS_UC_AHB_WRADDR_MSWr_MICRO_RA_WRADDR_MSWf_SET
#define READ_UC_AHB_WRADDR_MSWr BCMI_TSCF_GEN3_XGXS_READ_UC_AHB_WRADDR_MSWr
#define WRITE_UC_AHB_WRADDR_MSWr BCMI_TSCF_GEN3_XGXS_WRITE_UC_AHB_WRADDR_MSWr
#define MODIFY_UC_AHB_WRADDR_MSWr BCMI_TSCF_GEN3_XGXS_MODIFY_UC_AHB_WRADDR_MSWr
#define READLN_UC_AHB_WRADDR_MSWr BCMI_TSCF_GEN3_XGXS_READLN_UC_AHB_WRADDR_MSWr
#define WRITELN_UC_AHB_WRADDR_MSWr BCMI_TSCF_GEN3_XGXS_WRITELN_UC_AHB_WRADDR_MSWr
#define WRITEALL_UC_AHB_WRADDR_MSWr BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_AHB_WRADDR_MSWr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_UC_AHB_WRADDR_MSWr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  UC_AHB_WRDATA_LSW
 * BLOCKS:   MICRO_A
 * REGADDR:  0xd206
 * DEVAD:    1
 * DESC:     rmi to ahb write data LSW (bits 15:0) register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_RA_WRDATA_LSW These bits are used to generate the lower 16-bits of the data on the AHB-Lite bus during write transactionsWrite transaction on the AHB-Lite is initiated when this register is written
 */
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_WRDATA_LSWr (0x0001d206 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_UC_AHB_WRDATA_LSWr_SIZE 4

/*
 * This structure should be used to declare and program UC_AHB_WRDATA_LSW.
 */
typedef union BCMI_TSCF_GEN3_XGXS_UC_AHB_WRDATA_LSWr_s {
	uint32_t v[1];
	uint32_t uc_ahb_wrdata_lsw[1];
	uint32_t _uc_ahb_wrdata_lsw;
} BCMI_TSCF_GEN3_XGXS_UC_AHB_WRDATA_LSWr_t;

#define BCMI_TSCF_GEN3_XGXS_UC_AHB_WRDATA_LSWr_CLR(r) (r).uc_ahb_wrdata_lsw[0] = 0
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_WRDATA_LSWr_SET(r,d) (r).uc_ahb_wrdata_lsw[0] = d
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_WRDATA_LSWr_GET(r) (r).uc_ahb_wrdata_lsw[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_WRDATA_LSWr_MICRO_RA_WRDATA_LSWf_GET(r) (((r).uc_ahb_wrdata_lsw[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_WRDATA_LSWr_MICRO_RA_WRDATA_LSWf_SET(r,f) (r).uc_ahb_wrdata_lsw[0]=(((r).uc_ahb_wrdata_lsw[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_AHB_WRDATA_LSW.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_UC_AHB_WRDATA_LSWr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_WRDATA_LSWr,(_r._uc_ahb_wrdata_lsw))
#define BCMI_TSCF_GEN3_XGXS_WRITE_UC_AHB_WRDATA_LSWr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_WRDATA_LSWr,(_r._uc_ahb_wrdata_lsw)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_UC_AHB_WRDATA_LSWr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_WRDATA_LSWr,(_r._uc_ahb_wrdata_lsw))
#define BCMI_TSCF_GEN3_XGXS_READLN_UC_AHB_WRDATA_LSWr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_WRDATA_LSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_wrdata_lsw))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_UC_AHB_WRDATA_LSWr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_WRDATA_LSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_wrdata_lsw))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_AHB_WRDATA_LSWr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_WRDATA_LSWr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_ahb_wrdata_lsw))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define UC_AHB_WRDATA_LSWr BCMI_TSCF_GEN3_XGXS_UC_AHB_WRDATA_LSWr
#define UC_AHB_WRDATA_LSWr_SIZE BCMI_TSCF_GEN3_XGXS_UC_AHB_WRDATA_LSWr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_UC_AHB_WRDATA_LSWr_t UC_AHB_WRDATA_LSWr_t;
#define UC_AHB_WRDATA_LSWr_CLR BCMI_TSCF_GEN3_XGXS_UC_AHB_WRDATA_LSWr_CLR
#define UC_AHB_WRDATA_LSWr_SET BCMI_TSCF_GEN3_XGXS_UC_AHB_WRDATA_LSWr_SET
#define UC_AHB_WRDATA_LSWr_GET BCMI_TSCF_GEN3_XGXS_UC_AHB_WRDATA_LSWr_GET
#define UC_AHB_WRDATA_LSWr_MICRO_RA_WRDATA_LSWf_GET BCMI_TSCF_GEN3_XGXS_UC_AHB_WRDATA_LSWr_MICRO_RA_WRDATA_LSWf_GET
#define UC_AHB_WRDATA_LSWr_MICRO_RA_WRDATA_LSWf_SET BCMI_TSCF_GEN3_XGXS_UC_AHB_WRDATA_LSWr_MICRO_RA_WRDATA_LSWf_SET
#define READ_UC_AHB_WRDATA_LSWr BCMI_TSCF_GEN3_XGXS_READ_UC_AHB_WRDATA_LSWr
#define WRITE_UC_AHB_WRDATA_LSWr BCMI_TSCF_GEN3_XGXS_WRITE_UC_AHB_WRDATA_LSWr
#define MODIFY_UC_AHB_WRDATA_LSWr BCMI_TSCF_GEN3_XGXS_MODIFY_UC_AHB_WRDATA_LSWr
#define READLN_UC_AHB_WRDATA_LSWr BCMI_TSCF_GEN3_XGXS_READLN_UC_AHB_WRDATA_LSWr
#define WRITELN_UC_AHB_WRDATA_LSWr BCMI_TSCF_GEN3_XGXS_WRITELN_UC_AHB_WRDATA_LSWr
#define WRITEALL_UC_AHB_WRDATA_LSWr BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_AHB_WRDATA_LSWr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_UC_AHB_WRDATA_LSWr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  UC_AHB_WRDATA_MSW
 * BLOCKS:   MICRO_A
 * REGADDR:  0xd207
 * DEVAD:    1
 * DESC:     rmi to ahb write data MSW (bits 31:16) register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_RA_WRDATA_MSW These bits are used  to generate the upper 16-bits of the data on the AHB-Lite bus during write transactions
 */
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_WRDATA_MSWr (0x0001d207 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_UC_AHB_WRDATA_MSWr_SIZE 4

/*
 * This structure should be used to declare and program UC_AHB_WRDATA_MSW.
 */
typedef union BCMI_TSCF_GEN3_XGXS_UC_AHB_WRDATA_MSWr_s {
	uint32_t v[1];
	uint32_t uc_ahb_wrdata_msw[1];
	uint32_t _uc_ahb_wrdata_msw;
} BCMI_TSCF_GEN3_XGXS_UC_AHB_WRDATA_MSWr_t;

#define BCMI_TSCF_GEN3_XGXS_UC_AHB_WRDATA_MSWr_CLR(r) (r).uc_ahb_wrdata_msw[0] = 0
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_WRDATA_MSWr_SET(r,d) (r).uc_ahb_wrdata_msw[0] = d
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_WRDATA_MSWr_GET(r) (r).uc_ahb_wrdata_msw[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_WRDATA_MSWr_MICRO_RA_WRDATA_MSWf_GET(r) (((r).uc_ahb_wrdata_msw[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_WRDATA_MSWr_MICRO_RA_WRDATA_MSWf_SET(r,f) (r).uc_ahb_wrdata_msw[0]=(((r).uc_ahb_wrdata_msw[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_AHB_WRDATA_MSW.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_UC_AHB_WRDATA_MSWr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_WRDATA_MSWr,(_r._uc_ahb_wrdata_msw))
#define BCMI_TSCF_GEN3_XGXS_WRITE_UC_AHB_WRDATA_MSWr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_WRDATA_MSWr,(_r._uc_ahb_wrdata_msw)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_UC_AHB_WRDATA_MSWr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_WRDATA_MSWr,(_r._uc_ahb_wrdata_msw))
#define BCMI_TSCF_GEN3_XGXS_READLN_UC_AHB_WRDATA_MSWr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_WRDATA_MSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_wrdata_msw))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_UC_AHB_WRDATA_MSWr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_WRDATA_MSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_wrdata_msw))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_AHB_WRDATA_MSWr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_WRDATA_MSWr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_ahb_wrdata_msw))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define UC_AHB_WRDATA_MSWr BCMI_TSCF_GEN3_XGXS_UC_AHB_WRDATA_MSWr
#define UC_AHB_WRDATA_MSWr_SIZE BCMI_TSCF_GEN3_XGXS_UC_AHB_WRDATA_MSWr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_UC_AHB_WRDATA_MSWr_t UC_AHB_WRDATA_MSWr_t;
#define UC_AHB_WRDATA_MSWr_CLR BCMI_TSCF_GEN3_XGXS_UC_AHB_WRDATA_MSWr_CLR
#define UC_AHB_WRDATA_MSWr_SET BCMI_TSCF_GEN3_XGXS_UC_AHB_WRDATA_MSWr_SET
#define UC_AHB_WRDATA_MSWr_GET BCMI_TSCF_GEN3_XGXS_UC_AHB_WRDATA_MSWr_GET
#define UC_AHB_WRDATA_MSWr_MICRO_RA_WRDATA_MSWf_GET BCMI_TSCF_GEN3_XGXS_UC_AHB_WRDATA_MSWr_MICRO_RA_WRDATA_MSWf_GET
#define UC_AHB_WRDATA_MSWr_MICRO_RA_WRDATA_MSWf_SET BCMI_TSCF_GEN3_XGXS_UC_AHB_WRDATA_MSWr_MICRO_RA_WRDATA_MSWf_SET
#define READ_UC_AHB_WRDATA_MSWr BCMI_TSCF_GEN3_XGXS_READ_UC_AHB_WRDATA_MSWr
#define WRITE_UC_AHB_WRDATA_MSWr BCMI_TSCF_GEN3_XGXS_WRITE_UC_AHB_WRDATA_MSWr
#define MODIFY_UC_AHB_WRDATA_MSWr BCMI_TSCF_GEN3_XGXS_MODIFY_UC_AHB_WRDATA_MSWr
#define READLN_UC_AHB_WRDATA_MSWr BCMI_TSCF_GEN3_XGXS_READLN_UC_AHB_WRDATA_MSWr
#define WRITELN_UC_AHB_WRDATA_MSWr BCMI_TSCF_GEN3_XGXS_WRITELN_UC_AHB_WRDATA_MSWr
#define WRITEALL_UC_AHB_WRDATA_MSWr BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_AHB_WRDATA_MSWr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_UC_AHB_WRDATA_MSWr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  UC_AHB_RDADDR_LSW
 * BLOCKS:   MICRO_A
 * REGADDR:  0xd208
 * DEVAD:    1
 * DESC:     rmi to ahb read address LSW (bits 15:0) register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_RA_RDADDR_LSW These bits are used to generate the lower 16-bits of the address on the AHB-Lite bus during read transactionsbit 0 is not used during 16-bit transactions andbits[1:0] are not used during 32-bit transactionsRead transaction is initiated on the AHB-Lite when this register is written
 */
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_RDADDR_LSWr (0x0001d208 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_UC_AHB_RDADDR_LSWr_SIZE 4

/*
 * This structure should be used to declare and program UC_AHB_RDADDR_LSW.
 */
typedef union BCMI_TSCF_GEN3_XGXS_UC_AHB_RDADDR_LSWr_s {
	uint32_t v[1];
	uint32_t uc_ahb_rdaddr_lsw[1];
	uint32_t _uc_ahb_rdaddr_lsw;
} BCMI_TSCF_GEN3_XGXS_UC_AHB_RDADDR_LSWr_t;

#define BCMI_TSCF_GEN3_XGXS_UC_AHB_RDADDR_LSWr_CLR(r) (r).uc_ahb_rdaddr_lsw[0] = 0
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_RDADDR_LSWr_SET(r,d) (r).uc_ahb_rdaddr_lsw[0] = d
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_RDADDR_LSWr_GET(r) (r).uc_ahb_rdaddr_lsw[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_RDADDR_LSWr_MICRO_RA_RDADDR_LSWf_GET(r) (((r).uc_ahb_rdaddr_lsw[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_RDADDR_LSWr_MICRO_RA_RDADDR_LSWf_SET(r,f) (r).uc_ahb_rdaddr_lsw[0]=(((r).uc_ahb_rdaddr_lsw[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_AHB_RDADDR_LSW.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_UC_AHB_RDADDR_LSWr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_RDADDR_LSWr,(_r._uc_ahb_rdaddr_lsw))
#define BCMI_TSCF_GEN3_XGXS_WRITE_UC_AHB_RDADDR_LSWr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_RDADDR_LSWr,(_r._uc_ahb_rdaddr_lsw)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_UC_AHB_RDADDR_LSWr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_RDADDR_LSWr,(_r._uc_ahb_rdaddr_lsw))
#define BCMI_TSCF_GEN3_XGXS_READLN_UC_AHB_RDADDR_LSWr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_RDADDR_LSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_rdaddr_lsw))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_UC_AHB_RDADDR_LSWr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_RDADDR_LSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_rdaddr_lsw))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_AHB_RDADDR_LSWr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_RDADDR_LSWr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_ahb_rdaddr_lsw))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define UC_AHB_RDADDR_LSWr BCMI_TSCF_GEN3_XGXS_UC_AHB_RDADDR_LSWr
#define UC_AHB_RDADDR_LSWr_SIZE BCMI_TSCF_GEN3_XGXS_UC_AHB_RDADDR_LSWr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_UC_AHB_RDADDR_LSWr_t UC_AHB_RDADDR_LSWr_t;
#define UC_AHB_RDADDR_LSWr_CLR BCMI_TSCF_GEN3_XGXS_UC_AHB_RDADDR_LSWr_CLR
#define UC_AHB_RDADDR_LSWr_SET BCMI_TSCF_GEN3_XGXS_UC_AHB_RDADDR_LSWr_SET
#define UC_AHB_RDADDR_LSWr_GET BCMI_TSCF_GEN3_XGXS_UC_AHB_RDADDR_LSWr_GET
#define UC_AHB_RDADDR_LSWr_MICRO_RA_RDADDR_LSWf_GET BCMI_TSCF_GEN3_XGXS_UC_AHB_RDADDR_LSWr_MICRO_RA_RDADDR_LSWf_GET
#define UC_AHB_RDADDR_LSWr_MICRO_RA_RDADDR_LSWf_SET BCMI_TSCF_GEN3_XGXS_UC_AHB_RDADDR_LSWr_MICRO_RA_RDADDR_LSWf_SET
#define READ_UC_AHB_RDADDR_LSWr BCMI_TSCF_GEN3_XGXS_READ_UC_AHB_RDADDR_LSWr
#define WRITE_UC_AHB_RDADDR_LSWr BCMI_TSCF_GEN3_XGXS_WRITE_UC_AHB_RDADDR_LSWr
#define MODIFY_UC_AHB_RDADDR_LSWr BCMI_TSCF_GEN3_XGXS_MODIFY_UC_AHB_RDADDR_LSWr
#define READLN_UC_AHB_RDADDR_LSWr BCMI_TSCF_GEN3_XGXS_READLN_UC_AHB_RDADDR_LSWr
#define WRITELN_UC_AHB_RDADDR_LSWr BCMI_TSCF_GEN3_XGXS_WRITELN_UC_AHB_RDADDR_LSWr
#define WRITEALL_UC_AHB_RDADDR_LSWr BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_AHB_RDADDR_LSWr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_UC_AHB_RDADDR_LSWr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  UC_AHB_RDADDR_MSW
 * BLOCKS:   MICRO_A
 * REGADDR:  0xd209
 * DEVAD:    1
 * DESC:     rmi to ahb read address MSW (bits 31:16) register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_RA_RDADDR_MSW These bits are used by to generate the upper 16-bits of the address on the AHB-Lite bus during read transactions
 */
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_RDADDR_MSWr (0x0001d209 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_UC_AHB_RDADDR_MSWr_SIZE 4

/*
 * This structure should be used to declare and program UC_AHB_RDADDR_MSW.
 */
typedef union BCMI_TSCF_GEN3_XGXS_UC_AHB_RDADDR_MSWr_s {
	uint32_t v[1];
	uint32_t uc_ahb_rdaddr_msw[1];
	uint32_t _uc_ahb_rdaddr_msw;
} BCMI_TSCF_GEN3_XGXS_UC_AHB_RDADDR_MSWr_t;

#define BCMI_TSCF_GEN3_XGXS_UC_AHB_RDADDR_MSWr_CLR(r) (r).uc_ahb_rdaddr_msw[0] = 0
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_RDADDR_MSWr_SET(r,d) (r).uc_ahb_rdaddr_msw[0] = d
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_RDADDR_MSWr_GET(r) (r).uc_ahb_rdaddr_msw[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_RDADDR_MSWr_MICRO_RA_RDADDR_MSWf_GET(r) (((r).uc_ahb_rdaddr_msw[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_RDADDR_MSWr_MICRO_RA_RDADDR_MSWf_SET(r,f) (r).uc_ahb_rdaddr_msw[0]=(((r).uc_ahb_rdaddr_msw[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_AHB_RDADDR_MSW.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_UC_AHB_RDADDR_MSWr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_RDADDR_MSWr,(_r._uc_ahb_rdaddr_msw))
#define BCMI_TSCF_GEN3_XGXS_WRITE_UC_AHB_RDADDR_MSWr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_RDADDR_MSWr,(_r._uc_ahb_rdaddr_msw)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_UC_AHB_RDADDR_MSWr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_RDADDR_MSWr,(_r._uc_ahb_rdaddr_msw))
#define BCMI_TSCF_GEN3_XGXS_READLN_UC_AHB_RDADDR_MSWr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_RDADDR_MSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_rdaddr_msw))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_UC_AHB_RDADDR_MSWr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_RDADDR_MSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_rdaddr_msw))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_AHB_RDADDR_MSWr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_RDADDR_MSWr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_ahb_rdaddr_msw))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define UC_AHB_RDADDR_MSWr BCMI_TSCF_GEN3_XGXS_UC_AHB_RDADDR_MSWr
#define UC_AHB_RDADDR_MSWr_SIZE BCMI_TSCF_GEN3_XGXS_UC_AHB_RDADDR_MSWr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_UC_AHB_RDADDR_MSWr_t UC_AHB_RDADDR_MSWr_t;
#define UC_AHB_RDADDR_MSWr_CLR BCMI_TSCF_GEN3_XGXS_UC_AHB_RDADDR_MSWr_CLR
#define UC_AHB_RDADDR_MSWr_SET BCMI_TSCF_GEN3_XGXS_UC_AHB_RDADDR_MSWr_SET
#define UC_AHB_RDADDR_MSWr_GET BCMI_TSCF_GEN3_XGXS_UC_AHB_RDADDR_MSWr_GET
#define UC_AHB_RDADDR_MSWr_MICRO_RA_RDADDR_MSWf_GET BCMI_TSCF_GEN3_XGXS_UC_AHB_RDADDR_MSWr_MICRO_RA_RDADDR_MSWf_GET
#define UC_AHB_RDADDR_MSWr_MICRO_RA_RDADDR_MSWf_SET BCMI_TSCF_GEN3_XGXS_UC_AHB_RDADDR_MSWr_MICRO_RA_RDADDR_MSWf_SET
#define READ_UC_AHB_RDADDR_MSWr BCMI_TSCF_GEN3_XGXS_READ_UC_AHB_RDADDR_MSWr
#define WRITE_UC_AHB_RDADDR_MSWr BCMI_TSCF_GEN3_XGXS_WRITE_UC_AHB_RDADDR_MSWr
#define MODIFY_UC_AHB_RDADDR_MSWr BCMI_TSCF_GEN3_XGXS_MODIFY_UC_AHB_RDADDR_MSWr
#define READLN_UC_AHB_RDADDR_MSWr BCMI_TSCF_GEN3_XGXS_READLN_UC_AHB_RDADDR_MSWr
#define WRITELN_UC_AHB_RDADDR_MSWr BCMI_TSCF_GEN3_XGXS_WRITELN_UC_AHB_RDADDR_MSWr
#define WRITEALL_UC_AHB_RDADDR_MSWr BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_AHB_RDADDR_MSWr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_UC_AHB_RDADDR_MSWr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  UC_AHB_RDDATA_LSW
 * BLOCKS:   MICRO_A
 * REGADDR:  0xd20a
 * DEVAD:    1
 * DESC:     rmi to ahb read data LSW (bits 15:0) register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MICRO_RA_RDDATA_LSW These are the lower 16-bits of the read data from the AHB-Lite slave deviceRead transaction is initiated on the AHB-Lite when this register is read
 */
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_RDDATA_LSWr (0x0001d20a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_UC_AHB_RDDATA_LSWr_SIZE 4

/*
 * This structure should be used to declare and program UC_AHB_RDDATA_LSW.
 */
typedef union BCMI_TSCF_GEN3_XGXS_UC_AHB_RDDATA_LSWr_s {
	uint32_t v[1];
	uint32_t uc_ahb_rddata_lsw[1];
	uint32_t _uc_ahb_rddata_lsw;
} BCMI_TSCF_GEN3_XGXS_UC_AHB_RDDATA_LSWr_t;

#define BCMI_TSCF_GEN3_XGXS_UC_AHB_RDDATA_LSWr_CLR(r) (r).uc_ahb_rddata_lsw[0] = 0
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_RDDATA_LSWr_SET(r,d) (r).uc_ahb_rddata_lsw[0] = d
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_RDDATA_LSWr_GET(r) (r).uc_ahb_rddata_lsw[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_RDDATA_LSWr_MICRO_RA_RDDATA_LSWf_GET(r) (((r).uc_ahb_rddata_lsw[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_RDDATA_LSWr_MICRO_RA_RDDATA_LSWf_SET(r,f) (r).uc_ahb_rddata_lsw[0]=(((r).uc_ahb_rddata_lsw[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_AHB_RDDATA_LSW.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_UC_AHB_RDDATA_LSWr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_RDDATA_LSWr,(_r._uc_ahb_rddata_lsw))
#define BCMI_TSCF_GEN3_XGXS_WRITE_UC_AHB_RDDATA_LSWr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_RDDATA_LSWr,(_r._uc_ahb_rddata_lsw)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_UC_AHB_RDDATA_LSWr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_RDDATA_LSWr,(_r._uc_ahb_rddata_lsw))
#define BCMI_TSCF_GEN3_XGXS_READLN_UC_AHB_RDDATA_LSWr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_RDDATA_LSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_rddata_lsw))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_UC_AHB_RDDATA_LSWr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_RDDATA_LSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_rddata_lsw))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_AHB_RDDATA_LSWr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_RDDATA_LSWr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_ahb_rddata_lsw))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define UC_AHB_RDDATA_LSWr BCMI_TSCF_GEN3_XGXS_UC_AHB_RDDATA_LSWr
#define UC_AHB_RDDATA_LSWr_SIZE BCMI_TSCF_GEN3_XGXS_UC_AHB_RDDATA_LSWr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_UC_AHB_RDDATA_LSWr_t UC_AHB_RDDATA_LSWr_t;
#define UC_AHB_RDDATA_LSWr_CLR BCMI_TSCF_GEN3_XGXS_UC_AHB_RDDATA_LSWr_CLR
#define UC_AHB_RDDATA_LSWr_SET BCMI_TSCF_GEN3_XGXS_UC_AHB_RDDATA_LSWr_SET
#define UC_AHB_RDDATA_LSWr_GET BCMI_TSCF_GEN3_XGXS_UC_AHB_RDDATA_LSWr_GET
#define UC_AHB_RDDATA_LSWr_MICRO_RA_RDDATA_LSWf_GET BCMI_TSCF_GEN3_XGXS_UC_AHB_RDDATA_LSWr_MICRO_RA_RDDATA_LSWf_GET
#define UC_AHB_RDDATA_LSWr_MICRO_RA_RDDATA_LSWf_SET BCMI_TSCF_GEN3_XGXS_UC_AHB_RDDATA_LSWr_MICRO_RA_RDDATA_LSWf_SET
#define READ_UC_AHB_RDDATA_LSWr BCMI_TSCF_GEN3_XGXS_READ_UC_AHB_RDDATA_LSWr
#define WRITE_UC_AHB_RDDATA_LSWr BCMI_TSCF_GEN3_XGXS_WRITE_UC_AHB_RDDATA_LSWr
#define MODIFY_UC_AHB_RDDATA_LSWr BCMI_TSCF_GEN3_XGXS_MODIFY_UC_AHB_RDDATA_LSWr
#define READLN_UC_AHB_RDDATA_LSWr BCMI_TSCF_GEN3_XGXS_READLN_UC_AHB_RDDATA_LSWr
#define WRITELN_UC_AHB_RDDATA_LSWr BCMI_TSCF_GEN3_XGXS_WRITELN_UC_AHB_RDDATA_LSWr
#define WRITEALL_UC_AHB_RDDATA_LSWr BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_AHB_RDDATA_LSWr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_UC_AHB_RDDATA_LSWr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  UC_AHB_RDDATA_MSW
 * BLOCKS:   MICRO_A
 * REGADDR:  0xd20b
 * DEVAD:    1
 * DESC:     rmi to ahb read data MSW (bits 31:16) register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MICRO_RA_RDDATA_MSW These are the upper 16-bits of the read data from the AHB-Lite slave device
 */
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_RDDATA_MSWr (0x0001d20b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_UC_AHB_RDDATA_MSWr_SIZE 4

/*
 * This structure should be used to declare and program UC_AHB_RDDATA_MSW.
 */
typedef union BCMI_TSCF_GEN3_XGXS_UC_AHB_RDDATA_MSWr_s {
	uint32_t v[1];
	uint32_t uc_ahb_rddata_msw[1];
	uint32_t _uc_ahb_rddata_msw;
} BCMI_TSCF_GEN3_XGXS_UC_AHB_RDDATA_MSWr_t;

#define BCMI_TSCF_GEN3_XGXS_UC_AHB_RDDATA_MSWr_CLR(r) (r).uc_ahb_rddata_msw[0] = 0
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_RDDATA_MSWr_SET(r,d) (r).uc_ahb_rddata_msw[0] = d
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_RDDATA_MSWr_GET(r) (r).uc_ahb_rddata_msw[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_RDDATA_MSWr_MICRO_RA_RDDATA_MSWf_GET(r) (((r).uc_ahb_rddata_msw[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_UC_AHB_RDDATA_MSWr_MICRO_RA_RDDATA_MSWf_SET(r,f) (r).uc_ahb_rddata_msw[0]=(((r).uc_ahb_rddata_msw[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_AHB_RDDATA_MSW.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_UC_AHB_RDDATA_MSWr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_RDDATA_MSWr,(_r._uc_ahb_rddata_msw))
#define BCMI_TSCF_GEN3_XGXS_WRITE_UC_AHB_RDDATA_MSWr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_RDDATA_MSWr,(_r._uc_ahb_rddata_msw)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_UC_AHB_RDDATA_MSWr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_RDDATA_MSWr,(_r._uc_ahb_rddata_msw))
#define BCMI_TSCF_GEN3_XGXS_READLN_UC_AHB_RDDATA_MSWr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_RDDATA_MSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_rddata_msw))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_UC_AHB_RDDATA_MSWr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_RDDATA_MSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_rddata_msw))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_AHB_RDDATA_MSWr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_AHB_RDDATA_MSWr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_ahb_rddata_msw))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define UC_AHB_RDDATA_MSWr BCMI_TSCF_GEN3_XGXS_UC_AHB_RDDATA_MSWr
#define UC_AHB_RDDATA_MSWr_SIZE BCMI_TSCF_GEN3_XGXS_UC_AHB_RDDATA_MSWr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_UC_AHB_RDDATA_MSWr_t UC_AHB_RDDATA_MSWr_t;
#define UC_AHB_RDDATA_MSWr_CLR BCMI_TSCF_GEN3_XGXS_UC_AHB_RDDATA_MSWr_CLR
#define UC_AHB_RDDATA_MSWr_SET BCMI_TSCF_GEN3_XGXS_UC_AHB_RDDATA_MSWr_SET
#define UC_AHB_RDDATA_MSWr_GET BCMI_TSCF_GEN3_XGXS_UC_AHB_RDDATA_MSWr_GET
#define UC_AHB_RDDATA_MSWr_MICRO_RA_RDDATA_MSWf_GET BCMI_TSCF_GEN3_XGXS_UC_AHB_RDDATA_MSWr_MICRO_RA_RDDATA_MSWf_GET
#define UC_AHB_RDDATA_MSWr_MICRO_RA_RDDATA_MSWf_SET BCMI_TSCF_GEN3_XGXS_UC_AHB_RDDATA_MSWr_MICRO_RA_RDDATA_MSWf_SET
#define READ_UC_AHB_RDDATA_MSWr BCMI_TSCF_GEN3_XGXS_READ_UC_AHB_RDDATA_MSWr
#define WRITE_UC_AHB_RDDATA_MSWr BCMI_TSCF_GEN3_XGXS_WRITE_UC_AHB_RDDATA_MSWr
#define MODIFY_UC_AHB_RDDATA_MSWr BCMI_TSCF_GEN3_XGXS_MODIFY_UC_AHB_RDDATA_MSWr
#define READLN_UC_AHB_RDDATA_MSWr BCMI_TSCF_GEN3_XGXS_READLN_UC_AHB_RDDATA_MSWr
#define WRITELN_UC_AHB_RDDATA_MSWr BCMI_TSCF_GEN3_XGXS_WRITELN_UC_AHB_RDDATA_MSWr
#define WRITEALL_UC_AHB_RDDATA_MSWr BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_AHB_RDDATA_MSWr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_UC_AHB_RDDATA_MSWr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  UC_PRAMIF_CTL0
 * BLOCKS:   MICRO_A
 * REGADDR:  0xd20c
 * DEVAD:    1
 * DESC:     pram i/f to ahb control registers 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_PRAMIF_EN  When this bit is set, pram if interface can generate write transactions on theAHB-Lite bus, the start address of the transaction is specifieldin the pramif_ahb_wraddr_lsw and pramif_ahb_wraddr_msw fields
 */
#define BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_CTL0r (0x0001d20c | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program UC_PRAMIF_CTL0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_CTL0r_s {
	uint32_t v[1];
	uint32_t uc_pramif_ctl0[1];
	uint32_t _uc_pramif_ctl0;
} BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_CTL0r_t;

#define BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_CTL0r_CLR(r) (r).uc_pramif_ctl0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_CTL0r_SET(r,d) (r).uc_pramif_ctl0[0] = d
#define BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_CTL0r_GET(r) (r).uc_pramif_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_CTL0r_MICRO_PRAMIF_ENf_GET(r) (((r).uc_pramif_ctl0[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_CTL0r_MICRO_PRAMIF_ENf_SET(r,f) (r).uc_pramif_ctl0[0]=(((r).uc_pramif_ctl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access UC_PRAMIF_CTL0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_UC_PRAMIF_CTL0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_CTL0r,(_r._uc_pramif_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_UC_PRAMIF_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_CTL0r,(_r._uc_pramif_ctl0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_UC_PRAMIF_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_CTL0r,(_r._uc_pramif_ctl0))
#define BCMI_TSCF_GEN3_XGXS_READLN_UC_PRAMIF_CTL0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_pramif_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_UC_PRAMIF_CTL0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_pramif_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_PRAMIF_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_pramif_ctl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define UC_PRAMIF_CTL0r BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_CTL0r
#define UC_PRAMIF_CTL0r_SIZE BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_CTL0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_CTL0r_t UC_PRAMIF_CTL0r_t;
#define UC_PRAMIF_CTL0r_CLR BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_CTL0r_CLR
#define UC_PRAMIF_CTL0r_SET BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_CTL0r_SET
#define UC_PRAMIF_CTL0r_GET BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_CTL0r_GET
#define UC_PRAMIF_CTL0r_MICRO_PRAMIF_ENf_GET BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_CTL0r_MICRO_PRAMIF_ENf_GET
#define UC_PRAMIF_CTL0r_MICRO_PRAMIF_ENf_SET BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_CTL0r_MICRO_PRAMIF_ENf_SET
#define READ_UC_PRAMIF_CTL0r BCMI_TSCF_GEN3_XGXS_READ_UC_PRAMIF_CTL0r
#define WRITE_UC_PRAMIF_CTL0r BCMI_TSCF_GEN3_XGXS_WRITE_UC_PRAMIF_CTL0r
#define MODIFY_UC_PRAMIF_CTL0r BCMI_TSCF_GEN3_XGXS_MODIFY_UC_PRAMIF_CTL0r
#define READLN_UC_PRAMIF_CTL0r BCMI_TSCF_GEN3_XGXS_READLN_UC_PRAMIF_CTL0r
#define WRITELN_UC_PRAMIF_CTL0r BCMI_TSCF_GEN3_XGXS_WRITELN_UC_PRAMIF_CTL0r
#define WRITEALL_UC_PRAMIF_CTL0r BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_PRAMIF_CTL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  UC_PRAMIF_AHB_WRADDR_LSW
 * BLOCKS:   MICRO_A
 * REGADDR:  0xd20d
 * DEVAD:    1
 * DESC:     pram i/f to ahb write address LSW (bits 15:0) register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_PRAMIF_AHB_WRADDR_LSW These bits are used to generate the lower 14-bits of the address on the AHB-Lite bus during pram interface write transactionsbits[1:0] are not used for 32 transactions
 */
#define BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_AHB_WRADDR_LSWr (0x0001d20d | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_AHB_WRADDR_LSWr_SIZE 4

/*
 * This structure should be used to declare and program UC_PRAMIF_AHB_WRADDR_LSW.
 */
typedef union BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_AHB_WRADDR_LSWr_s {
	uint32_t v[1];
	uint32_t uc_pramif_ahb_wraddr_lsw[1];
	uint32_t _uc_pramif_ahb_wraddr_lsw;
} BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_AHB_WRADDR_LSWr_t;

#define BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_AHB_WRADDR_LSWr_CLR(r) (r).uc_pramif_ahb_wraddr_lsw[0] = 0
#define BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_AHB_WRADDR_LSWr_SET(r,d) (r).uc_pramif_ahb_wraddr_lsw[0] = d
#define BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_AHB_WRADDR_LSWr_GET(r) (r).uc_pramif_ahb_wraddr_lsw[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_AHB_WRADDR_LSWr_MICRO_PRAMIF_AHB_WRADDR_LSWf_GET(r) ((((r).uc_pramif_ahb_wraddr_lsw[0]) >> 2) & 0x3fff)
#define BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_AHB_WRADDR_LSWr_MICRO_PRAMIF_AHB_WRADDR_LSWf_SET(r,f) (r).uc_pramif_ahb_wraddr_lsw[0]=(((r).uc_pramif_ahb_wraddr_lsw[0] & ~((uint32_t)0x3fff << 2)) | ((((uint32_t)f) & 0x3fff) << 2)) | (16383 << (16 + 2))

/*
 * These macros can be used to access UC_PRAMIF_AHB_WRADDR_LSW.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_UC_PRAMIF_AHB_WRADDR_LSWr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_AHB_WRADDR_LSWr,(_r._uc_pramif_ahb_wraddr_lsw))
#define BCMI_TSCF_GEN3_XGXS_WRITE_UC_PRAMIF_AHB_WRADDR_LSWr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_AHB_WRADDR_LSWr,(_r._uc_pramif_ahb_wraddr_lsw)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_UC_PRAMIF_AHB_WRADDR_LSWr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_AHB_WRADDR_LSWr,(_r._uc_pramif_ahb_wraddr_lsw))
#define BCMI_TSCF_GEN3_XGXS_READLN_UC_PRAMIF_AHB_WRADDR_LSWr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_AHB_WRADDR_LSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_pramif_ahb_wraddr_lsw))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_UC_PRAMIF_AHB_WRADDR_LSWr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_AHB_WRADDR_LSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_pramif_ahb_wraddr_lsw))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_PRAMIF_AHB_WRADDR_LSWr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_AHB_WRADDR_LSWr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_pramif_ahb_wraddr_lsw))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define UC_PRAMIF_AHB_WRADDR_LSWr BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_AHB_WRADDR_LSWr
#define UC_PRAMIF_AHB_WRADDR_LSWr_SIZE BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_AHB_WRADDR_LSWr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_AHB_WRADDR_LSWr_t UC_PRAMIF_AHB_WRADDR_LSWr_t;
#define UC_PRAMIF_AHB_WRADDR_LSWr_CLR BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_AHB_WRADDR_LSWr_CLR
#define UC_PRAMIF_AHB_WRADDR_LSWr_SET BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_AHB_WRADDR_LSWr_SET
#define UC_PRAMIF_AHB_WRADDR_LSWr_GET BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_AHB_WRADDR_LSWr_GET
#define UC_PRAMIF_AHB_WRADDR_LSWr_MICRO_PRAMIF_AHB_WRADDR_LSWf_GET BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_AHB_WRADDR_LSWr_MICRO_PRAMIF_AHB_WRADDR_LSWf_GET
#define UC_PRAMIF_AHB_WRADDR_LSWr_MICRO_PRAMIF_AHB_WRADDR_LSWf_SET BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_AHB_WRADDR_LSWr_MICRO_PRAMIF_AHB_WRADDR_LSWf_SET
#define READ_UC_PRAMIF_AHB_WRADDR_LSWr BCMI_TSCF_GEN3_XGXS_READ_UC_PRAMIF_AHB_WRADDR_LSWr
#define WRITE_UC_PRAMIF_AHB_WRADDR_LSWr BCMI_TSCF_GEN3_XGXS_WRITE_UC_PRAMIF_AHB_WRADDR_LSWr
#define MODIFY_UC_PRAMIF_AHB_WRADDR_LSWr BCMI_TSCF_GEN3_XGXS_MODIFY_UC_PRAMIF_AHB_WRADDR_LSWr
#define READLN_UC_PRAMIF_AHB_WRADDR_LSWr BCMI_TSCF_GEN3_XGXS_READLN_UC_PRAMIF_AHB_WRADDR_LSWr
#define WRITELN_UC_PRAMIF_AHB_WRADDR_LSWr BCMI_TSCF_GEN3_XGXS_WRITELN_UC_PRAMIF_AHB_WRADDR_LSWr
#define WRITEALL_UC_PRAMIF_AHB_WRADDR_LSWr BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_PRAMIF_AHB_WRADDR_LSWr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_AHB_WRADDR_LSWr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  UC_PRAMIF_AHB_WRADDR_MSW
 * BLOCKS:   MICRO_A
 * REGADDR:  0xd20e
 * DEVAD:    1
 * DESC:     pram i/f to ahb write address MSW (bits 31:16) register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_PRAMIF_AHB_WRADDR_MSW These bits are used to generate the upper 16-bits of the address on the AHB-Lite bus during pram interface write transactions
 */
#define BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_AHB_WRADDR_MSWr (0x0001d20e | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_AHB_WRADDR_MSWr_SIZE 4

/*
 * This structure should be used to declare and program UC_PRAMIF_AHB_WRADDR_MSW.
 */
typedef union BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_AHB_WRADDR_MSWr_s {
	uint32_t v[1];
	uint32_t uc_pramif_ahb_wraddr_msw[1];
	uint32_t _uc_pramif_ahb_wraddr_msw;
} BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_AHB_WRADDR_MSWr_t;

#define BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_AHB_WRADDR_MSWr_CLR(r) (r).uc_pramif_ahb_wraddr_msw[0] = 0
#define BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_AHB_WRADDR_MSWr_SET(r,d) (r).uc_pramif_ahb_wraddr_msw[0] = d
#define BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_AHB_WRADDR_MSWr_GET(r) (r).uc_pramif_ahb_wraddr_msw[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_AHB_WRADDR_MSWr_MICRO_PRAMIF_AHB_WRADDR_MSWf_GET(r) (((r).uc_pramif_ahb_wraddr_msw[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_AHB_WRADDR_MSWr_MICRO_PRAMIF_AHB_WRADDR_MSWf_SET(r,f) (r).uc_pramif_ahb_wraddr_msw[0]=(((r).uc_pramif_ahb_wraddr_msw[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_PRAMIF_AHB_WRADDR_MSW.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_UC_PRAMIF_AHB_WRADDR_MSWr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_AHB_WRADDR_MSWr,(_r._uc_pramif_ahb_wraddr_msw))
#define BCMI_TSCF_GEN3_XGXS_WRITE_UC_PRAMIF_AHB_WRADDR_MSWr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_AHB_WRADDR_MSWr,(_r._uc_pramif_ahb_wraddr_msw)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_UC_PRAMIF_AHB_WRADDR_MSWr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_AHB_WRADDR_MSWr,(_r._uc_pramif_ahb_wraddr_msw))
#define BCMI_TSCF_GEN3_XGXS_READLN_UC_PRAMIF_AHB_WRADDR_MSWr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_AHB_WRADDR_MSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_pramif_ahb_wraddr_msw))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_UC_PRAMIF_AHB_WRADDR_MSWr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_AHB_WRADDR_MSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_pramif_ahb_wraddr_msw))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_PRAMIF_AHB_WRADDR_MSWr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_AHB_WRADDR_MSWr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_pramif_ahb_wraddr_msw))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define UC_PRAMIF_AHB_WRADDR_MSWr BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_AHB_WRADDR_MSWr
#define UC_PRAMIF_AHB_WRADDR_MSWr_SIZE BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_AHB_WRADDR_MSWr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_AHB_WRADDR_MSWr_t UC_PRAMIF_AHB_WRADDR_MSWr_t;
#define UC_PRAMIF_AHB_WRADDR_MSWr_CLR BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_AHB_WRADDR_MSWr_CLR
#define UC_PRAMIF_AHB_WRADDR_MSWr_SET BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_AHB_WRADDR_MSWr_SET
#define UC_PRAMIF_AHB_WRADDR_MSWr_GET BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_AHB_WRADDR_MSWr_GET
#define UC_PRAMIF_AHB_WRADDR_MSWr_MICRO_PRAMIF_AHB_WRADDR_MSWf_GET BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_AHB_WRADDR_MSWr_MICRO_PRAMIF_AHB_WRADDR_MSWf_GET
#define UC_PRAMIF_AHB_WRADDR_MSWr_MICRO_PRAMIF_AHB_WRADDR_MSWf_SET BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_AHB_WRADDR_MSWr_MICRO_PRAMIF_AHB_WRADDR_MSWf_SET
#define READ_UC_PRAMIF_AHB_WRADDR_MSWr BCMI_TSCF_GEN3_XGXS_READ_UC_PRAMIF_AHB_WRADDR_MSWr
#define WRITE_UC_PRAMIF_AHB_WRADDR_MSWr BCMI_TSCF_GEN3_XGXS_WRITE_UC_PRAMIF_AHB_WRADDR_MSWr
#define MODIFY_UC_PRAMIF_AHB_WRADDR_MSWr BCMI_TSCF_GEN3_XGXS_MODIFY_UC_PRAMIF_AHB_WRADDR_MSWr
#define READLN_UC_PRAMIF_AHB_WRADDR_MSWr BCMI_TSCF_GEN3_XGXS_READLN_UC_PRAMIF_AHB_WRADDR_MSWr
#define WRITELN_UC_PRAMIF_AHB_WRADDR_MSWr BCMI_TSCF_GEN3_XGXS_WRITELN_UC_PRAMIF_AHB_WRADDR_MSWr
#define WRITEALL_UC_PRAMIF_AHB_WRADDR_MSWr BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_PRAMIF_AHB_WRADDR_MSWr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_UC_PRAMIF_AHB_WRADDR_MSWr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  UC_PVT_STS0
 * BLOCKS:   MICRO_B
 * REGADDR:  0xd210
 * DEVAD:    1
 * DESC:     pvt temperature status register 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MICRO_PVT_TEMPDATA_RMI temperature data{6'd0,tempearture_data[9:0]}reads the current value of the temperature data capatured
 */
#define BCMI_TSCF_GEN3_XGXS_UC_PVT_STS0r (0x0001d210 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_UC_PVT_STS0r_SIZE 4

/*
 * This structure should be used to declare and program UC_PVT_STS0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_UC_PVT_STS0r_s {
	uint32_t v[1];
	uint32_t uc_pvt_sts0[1];
	uint32_t _uc_pvt_sts0;
} BCMI_TSCF_GEN3_XGXS_UC_PVT_STS0r_t;

#define BCMI_TSCF_GEN3_XGXS_UC_PVT_STS0r_CLR(r) (r).uc_pvt_sts0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_UC_PVT_STS0r_SET(r,d) (r).uc_pvt_sts0[0] = d
#define BCMI_TSCF_GEN3_XGXS_UC_PVT_STS0r_GET(r) (r).uc_pvt_sts0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_UC_PVT_STS0r_MICRO_PVT_TEMPDATA_RMIf_GET(r) (((r).uc_pvt_sts0[0]) & 0x3ff)
#define BCMI_TSCF_GEN3_XGXS_UC_PVT_STS0r_MICRO_PVT_TEMPDATA_RMIf_SET(r,f) (r).uc_pvt_sts0[0]=(((r).uc_pvt_sts0[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff)) | (0x3ff << 16)

/*
 * These macros can be used to access UC_PVT_STS0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_UC_PVT_STS0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_PVT_STS0r,(_r._uc_pvt_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_UC_PVT_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_PVT_STS0r,(_r._uc_pvt_sts0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_UC_PVT_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_PVT_STS0r,(_r._uc_pvt_sts0))
#define BCMI_TSCF_GEN3_XGXS_READLN_UC_PVT_STS0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_PVT_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_pvt_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_UC_PVT_STS0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_PVT_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_pvt_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_PVT_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_PVT_STS0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_pvt_sts0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define UC_PVT_STS0r BCMI_TSCF_GEN3_XGXS_UC_PVT_STS0r
#define UC_PVT_STS0r_SIZE BCMI_TSCF_GEN3_XGXS_UC_PVT_STS0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_UC_PVT_STS0r_t UC_PVT_STS0r_t;
#define UC_PVT_STS0r_CLR BCMI_TSCF_GEN3_XGXS_UC_PVT_STS0r_CLR
#define UC_PVT_STS0r_SET BCMI_TSCF_GEN3_XGXS_UC_PVT_STS0r_SET
#define UC_PVT_STS0r_GET BCMI_TSCF_GEN3_XGXS_UC_PVT_STS0r_GET
#define UC_PVT_STS0r_MICRO_PVT_TEMPDATA_RMIf_GET BCMI_TSCF_GEN3_XGXS_UC_PVT_STS0r_MICRO_PVT_TEMPDATA_RMIf_GET
#define UC_PVT_STS0r_MICRO_PVT_TEMPDATA_RMIf_SET BCMI_TSCF_GEN3_XGXS_UC_PVT_STS0r_MICRO_PVT_TEMPDATA_RMIf_SET
#define READ_UC_PVT_STS0r BCMI_TSCF_GEN3_XGXS_READ_UC_PVT_STS0r
#define WRITE_UC_PVT_STS0r BCMI_TSCF_GEN3_XGXS_WRITE_UC_PVT_STS0r
#define MODIFY_UC_PVT_STS0r BCMI_TSCF_GEN3_XGXS_MODIFY_UC_PVT_STS0r
#define READLN_UC_PVT_STS0r BCMI_TSCF_GEN3_XGXS_READLN_UC_PVT_STS0r
#define WRITELN_UC_PVT_STS0r BCMI_TSCF_GEN3_XGXS_WRITELN_UC_PVT_STS0r
#define WRITEALL_UC_PVT_STS0r BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_PVT_STS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_UC_PVT_STS0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  UC_RMI_TO_UC_MBOX0
 * BLOCKS:   MICRO_B
 * REGADDR:  0xd211
 * DEVAD:    1
 * DESC:     rmi to micro mailbox register 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_RMI_TO_MICRO_MBOX0 There bits represents bits [15:0] of the message from rmi to microWrite to this registers can optionaly generate an interrupt to the micro
 */
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_TO_UC_MBOX0r (0x0001d211 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_UC_RMI_TO_UC_MBOX0r_SIZE 4

/*
 * This structure should be used to declare and program UC_RMI_TO_UC_MBOX0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_UC_RMI_TO_UC_MBOX0r_s {
	uint32_t v[1];
	uint32_t uc_rmi_to_uc_mbox0[1];
	uint32_t _uc_rmi_to_uc_mbox0;
} BCMI_TSCF_GEN3_XGXS_UC_RMI_TO_UC_MBOX0r_t;

#define BCMI_TSCF_GEN3_XGXS_UC_RMI_TO_UC_MBOX0r_CLR(r) (r).uc_rmi_to_uc_mbox0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_TO_UC_MBOX0r_SET(r,d) (r).uc_rmi_to_uc_mbox0[0] = d
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_TO_UC_MBOX0r_GET(r) (r).uc_rmi_to_uc_mbox0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_TO_UC_MBOX0r_MICRO_RMI_TO_MICRO_MBOX0f_GET(r) (((r).uc_rmi_to_uc_mbox0[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_TO_UC_MBOX0r_MICRO_RMI_TO_MICRO_MBOX0f_SET(r,f) (r).uc_rmi_to_uc_mbox0[0]=(((r).uc_rmi_to_uc_mbox0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_RMI_TO_UC_MBOX0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_UC_RMI_TO_UC_MBOX0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_TO_UC_MBOX0r,(_r._uc_rmi_to_uc_mbox0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_UC_RMI_TO_UC_MBOX0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_TO_UC_MBOX0r,(_r._uc_rmi_to_uc_mbox0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_UC_RMI_TO_UC_MBOX0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_TO_UC_MBOX0r,(_r._uc_rmi_to_uc_mbox0))
#define BCMI_TSCF_GEN3_XGXS_READLN_UC_RMI_TO_UC_MBOX0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_TO_UC_MBOX0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_to_uc_mbox0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_UC_RMI_TO_UC_MBOX0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_TO_UC_MBOX0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_to_uc_mbox0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_RMI_TO_UC_MBOX0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_TO_UC_MBOX0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_rmi_to_uc_mbox0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define UC_RMI_TO_UC_MBOX0r BCMI_TSCF_GEN3_XGXS_UC_RMI_TO_UC_MBOX0r
#define UC_RMI_TO_UC_MBOX0r_SIZE BCMI_TSCF_GEN3_XGXS_UC_RMI_TO_UC_MBOX0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_UC_RMI_TO_UC_MBOX0r_t UC_RMI_TO_UC_MBOX0r_t;
#define UC_RMI_TO_UC_MBOX0r_CLR BCMI_TSCF_GEN3_XGXS_UC_RMI_TO_UC_MBOX0r_CLR
#define UC_RMI_TO_UC_MBOX0r_SET BCMI_TSCF_GEN3_XGXS_UC_RMI_TO_UC_MBOX0r_SET
#define UC_RMI_TO_UC_MBOX0r_GET BCMI_TSCF_GEN3_XGXS_UC_RMI_TO_UC_MBOX0r_GET
#define UC_RMI_TO_UC_MBOX0r_MICRO_RMI_TO_MICRO_MBOX0f_GET BCMI_TSCF_GEN3_XGXS_UC_RMI_TO_UC_MBOX0r_MICRO_RMI_TO_MICRO_MBOX0f_GET
#define UC_RMI_TO_UC_MBOX0r_MICRO_RMI_TO_MICRO_MBOX0f_SET BCMI_TSCF_GEN3_XGXS_UC_RMI_TO_UC_MBOX0r_MICRO_RMI_TO_MICRO_MBOX0f_SET
#define READ_UC_RMI_TO_UC_MBOX0r BCMI_TSCF_GEN3_XGXS_READ_UC_RMI_TO_UC_MBOX0r
#define WRITE_UC_RMI_TO_UC_MBOX0r BCMI_TSCF_GEN3_XGXS_WRITE_UC_RMI_TO_UC_MBOX0r
#define MODIFY_UC_RMI_TO_UC_MBOX0r BCMI_TSCF_GEN3_XGXS_MODIFY_UC_RMI_TO_UC_MBOX0r
#define READLN_UC_RMI_TO_UC_MBOX0r BCMI_TSCF_GEN3_XGXS_READLN_UC_RMI_TO_UC_MBOX0r
#define WRITELN_UC_RMI_TO_UC_MBOX0r BCMI_TSCF_GEN3_XGXS_WRITELN_UC_RMI_TO_UC_MBOX0r
#define WRITEALL_UC_RMI_TO_UC_MBOX0r BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_RMI_TO_UC_MBOX0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_UC_RMI_TO_UC_MBOX0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  UC_RMI_TO_UC_MBOX1
 * BLOCKS:   MICRO_B
 * REGADDR:  0xd212
 * DEVAD:    1
 * DESC:     rmi to micro mailbox register 1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_RMI_TO_MICRO_MBOX1 There bits represents bits [31:16] of the message from rmi to micro
 */
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_TO_UC_MBOX1r (0x0001d212 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_UC_RMI_TO_UC_MBOX1r_SIZE 4

/*
 * This structure should be used to declare and program UC_RMI_TO_UC_MBOX1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_UC_RMI_TO_UC_MBOX1r_s {
	uint32_t v[1];
	uint32_t uc_rmi_to_uc_mbox1[1];
	uint32_t _uc_rmi_to_uc_mbox1;
} BCMI_TSCF_GEN3_XGXS_UC_RMI_TO_UC_MBOX1r_t;

#define BCMI_TSCF_GEN3_XGXS_UC_RMI_TO_UC_MBOX1r_CLR(r) (r).uc_rmi_to_uc_mbox1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_TO_UC_MBOX1r_SET(r,d) (r).uc_rmi_to_uc_mbox1[0] = d
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_TO_UC_MBOX1r_GET(r) (r).uc_rmi_to_uc_mbox1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_TO_UC_MBOX1r_MICRO_RMI_TO_MICRO_MBOX1f_GET(r) (((r).uc_rmi_to_uc_mbox1[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_TO_UC_MBOX1r_MICRO_RMI_TO_MICRO_MBOX1f_SET(r,f) (r).uc_rmi_to_uc_mbox1[0]=(((r).uc_rmi_to_uc_mbox1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_RMI_TO_UC_MBOX1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_UC_RMI_TO_UC_MBOX1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_TO_UC_MBOX1r,(_r._uc_rmi_to_uc_mbox1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_UC_RMI_TO_UC_MBOX1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_TO_UC_MBOX1r,(_r._uc_rmi_to_uc_mbox1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_UC_RMI_TO_UC_MBOX1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_TO_UC_MBOX1r,(_r._uc_rmi_to_uc_mbox1))
#define BCMI_TSCF_GEN3_XGXS_READLN_UC_RMI_TO_UC_MBOX1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_TO_UC_MBOX1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_to_uc_mbox1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_UC_RMI_TO_UC_MBOX1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_TO_UC_MBOX1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_to_uc_mbox1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_RMI_TO_UC_MBOX1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_TO_UC_MBOX1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_rmi_to_uc_mbox1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define UC_RMI_TO_UC_MBOX1r BCMI_TSCF_GEN3_XGXS_UC_RMI_TO_UC_MBOX1r
#define UC_RMI_TO_UC_MBOX1r_SIZE BCMI_TSCF_GEN3_XGXS_UC_RMI_TO_UC_MBOX1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_UC_RMI_TO_UC_MBOX1r_t UC_RMI_TO_UC_MBOX1r_t;
#define UC_RMI_TO_UC_MBOX1r_CLR BCMI_TSCF_GEN3_XGXS_UC_RMI_TO_UC_MBOX1r_CLR
#define UC_RMI_TO_UC_MBOX1r_SET BCMI_TSCF_GEN3_XGXS_UC_RMI_TO_UC_MBOX1r_SET
#define UC_RMI_TO_UC_MBOX1r_GET BCMI_TSCF_GEN3_XGXS_UC_RMI_TO_UC_MBOX1r_GET
#define UC_RMI_TO_UC_MBOX1r_MICRO_RMI_TO_MICRO_MBOX1f_GET BCMI_TSCF_GEN3_XGXS_UC_RMI_TO_UC_MBOX1r_MICRO_RMI_TO_MICRO_MBOX1f_GET
#define UC_RMI_TO_UC_MBOX1r_MICRO_RMI_TO_MICRO_MBOX1f_SET BCMI_TSCF_GEN3_XGXS_UC_RMI_TO_UC_MBOX1r_MICRO_RMI_TO_MICRO_MBOX1f_SET
#define READ_UC_RMI_TO_UC_MBOX1r BCMI_TSCF_GEN3_XGXS_READ_UC_RMI_TO_UC_MBOX1r
#define WRITE_UC_RMI_TO_UC_MBOX1r BCMI_TSCF_GEN3_XGXS_WRITE_UC_RMI_TO_UC_MBOX1r
#define MODIFY_UC_RMI_TO_UC_MBOX1r BCMI_TSCF_GEN3_XGXS_MODIFY_UC_RMI_TO_UC_MBOX1r
#define READLN_UC_RMI_TO_UC_MBOX1r BCMI_TSCF_GEN3_XGXS_READLN_UC_RMI_TO_UC_MBOX1r
#define WRITELN_UC_RMI_TO_UC_MBOX1r BCMI_TSCF_GEN3_XGXS_WRITELN_UC_RMI_TO_UC_MBOX1r
#define WRITEALL_UC_RMI_TO_UC_MBOX1r BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_RMI_TO_UC_MBOX1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_UC_RMI_TO_UC_MBOX1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  UC_UC_TO_RMI_MBOX0
 * BLOCKS:   MICRO_B
 * REGADDR:  0xd213
 * DEVAD:    1
 * DESC:     micro to rmi mailbox register 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MICRO_TO_RMI_MBOX0 There bits represents bits [15:0] of the message from rmi to micro
 */
#define BCMI_TSCF_GEN3_XGXS_UC_UC_TO_RMI_MBOX0r (0x0001d213 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_UC_UC_TO_RMI_MBOX0r_SIZE 4

/*
 * This structure should be used to declare and program UC_UC_TO_RMI_MBOX0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_UC_UC_TO_RMI_MBOX0r_s {
	uint32_t v[1];
	uint32_t uc_uc_to_rmi_mbox0[1];
	uint32_t _uc_uc_to_rmi_mbox0;
} BCMI_TSCF_GEN3_XGXS_UC_UC_TO_RMI_MBOX0r_t;

#define BCMI_TSCF_GEN3_XGXS_UC_UC_TO_RMI_MBOX0r_CLR(r) (r).uc_uc_to_rmi_mbox0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_UC_UC_TO_RMI_MBOX0r_SET(r,d) (r).uc_uc_to_rmi_mbox0[0] = d
#define BCMI_TSCF_GEN3_XGXS_UC_UC_TO_RMI_MBOX0r_GET(r) (r).uc_uc_to_rmi_mbox0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_UC_UC_TO_RMI_MBOX0r_MICRO_TO_RMI_MBOX0f_GET(r) (((r).uc_uc_to_rmi_mbox0[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_UC_UC_TO_RMI_MBOX0r_MICRO_TO_RMI_MBOX0f_SET(r,f) (r).uc_uc_to_rmi_mbox0[0]=(((r).uc_uc_to_rmi_mbox0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_UC_TO_RMI_MBOX0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_UC_UC_TO_RMI_MBOX0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_UC_TO_RMI_MBOX0r,(_r._uc_uc_to_rmi_mbox0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_UC_UC_TO_RMI_MBOX0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_UC_TO_RMI_MBOX0r,(_r._uc_uc_to_rmi_mbox0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_UC_UC_TO_RMI_MBOX0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_UC_TO_RMI_MBOX0r,(_r._uc_uc_to_rmi_mbox0))
#define BCMI_TSCF_GEN3_XGXS_READLN_UC_UC_TO_RMI_MBOX0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_UC_TO_RMI_MBOX0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_uc_to_rmi_mbox0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_UC_UC_TO_RMI_MBOX0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_UC_TO_RMI_MBOX0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_uc_to_rmi_mbox0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_UC_TO_RMI_MBOX0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_UC_TO_RMI_MBOX0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_uc_to_rmi_mbox0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define UC_UC_TO_RMI_MBOX0r BCMI_TSCF_GEN3_XGXS_UC_UC_TO_RMI_MBOX0r
#define UC_UC_TO_RMI_MBOX0r_SIZE BCMI_TSCF_GEN3_XGXS_UC_UC_TO_RMI_MBOX0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_UC_UC_TO_RMI_MBOX0r_t UC_UC_TO_RMI_MBOX0r_t;
#define UC_UC_TO_RMI_MBOX0r_CLR BCMI_TSCF_GEN3_XGXS_UC_UC_TO_RMI_MBOX0r_CLR
#define UC_UC_TO_RMI_MBOX0r_SET BCMI_TSCF_GEN3_XGXS_UC_UC_TO_RMI_MBOX0r_SET
#define UC_UC_TO_RMI_MBOX0r_GET BCMI_TSCF_GEN3_XGXS_UC_UC_TO_RMI_MBOX0r_GET
#define UC_UC_TO_RMI_MBOX0r_MICRO_TO_RMI_MBOX0f_GET BCMI_TSCF_GEN3_XGXS_UC_UC_TO_RMI_MBOX0r_MICRO_TO_RMI_MBOX0f_GET
#define UC_UC_TO_RMI_MBOX0r_MICRO_TO_RMI_MBOX0f_SET BCMI_TSCF_GEN3_XGXS_UC_UC_TO_RMI_MBOX0r_MICRO_TO_RMI_MBOX0f_SET
#define READ_UC_UC_TO_RMI_MBOX0r BCMI_TSCF_GEN3_XGXS_READ_UC_UC_TO_RMI_MBOX0r
#define WRITE_UC_UC_TO_RMI_MBOX0r BCMI_TSCF_GEN3_XGXS_WRITE_UC_UC_TO_RMI_MBOX0r
#define MODIFY_UC_UC_TO_RMI_MBOX0r BCMI_TSCF_GEN3_XGXS_MODIFY_UC_UC_TO_RMI_MBOX0r
#define READLN_UC_UC_TO_RMI_MBOX0r BCMI_TSCF_GEN3_XGXS_READLN_UC_UC_TO_RMI_MBOX0r
#define WRITELN_UC_UC_TO_RMI_MBOX0r BCMI_TSCF_GEN3_XGXS_WRITELN_UC_UC_TO_RMI_MBOX0r
#define WRITEALL_UC_UC_TO_RMI_MBOX0r BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_UC_TO_RMI_MBOX0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_UC_UC_TO_RMI_MBOX0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  UC_UC_TO_RMI_MBOX1
 * BLOCKS:   MICRO_B
 * REGADDR:  0xd214
 * DEVAD:    1
 * DESC:     micro to rmi mailbox register 1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MICRO_TO_RMI_MBOX1 There bits represents bits [31:16] of the message from rmi to micro
 */
#define BCMI_TSCF_GEN3_XGXS_UC_UC_TO_RMI_MBOX1r (0x0001d214 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_UC_UC_TO_RMI_MBOX1r_SIZE 4

/*
 * This structure should be used to declare and program UC_UC_TO_RMI_MBOX1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_UC_UC_TO_RMI_MBOX1r_s {
	uint32_t v[1];
	uint32_t uc_uc_to_rmi_mbox1[1];
	uint32_t _uc_uc_to_rmi_mbox1;
} BCMI_TSCF_GEN3_XGXS_UC_UC_TO_RMI_MBOX1r_t;

#define BCMI_TSCF_GEN3_XGXS_UC_UC_TO_RMI_MBOX1r_CLR(r) (r).uc_uc_to_rmi_mbox1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_UC_UC_TO_RMI_MBOX1r_SET(r,d) (r).uc_uc_to_rmi_mbox1[0] = d
#define BCMI_TSCF_GEN3_XGXS_UC_UC_TO_RMI_MBOX1r_GET(r) (r).uc_uc_to_rmi_mbox1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_UC_UC_TO_RMI_MBOX1r_MICRO_TO_RMI_MBOX1f_GET(r) (((r).uc_uc_to_rmi_mbox1[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_UC_UC_TO_RMI_MBOX1r_MICRO_TO_RMI_MBOX1f_SET(r,f) (r).uc_uc_to_rmi_mbox1[0]=(((r).uc_uc_to_rmi_mbox1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_UC_TO_RMI_MBOX1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_UC_UC_TO_RMI_MBOX1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_UC_TO_RMI_MBOX1r,(_r._uc_uc_to_rmi_mbox1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_UC_UC_TO_RMI_MBOX1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_UC_TO_RMI_MBOX1r,(_r._uc_uc_to_rmi_mbox1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_UC_UC_TO_RMI_MBOX1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_UC_TO_RMI_MBOX1r,(_r._uc_uc_to_rmi_mbox1))
#define BCMI_TSCF_GEN3_XGXS_READLN_UC_UC_TO_RMI_MBOX1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_UC_TO_RMI_MBOX1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_uc_to_rmi_mbox1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_UC_UC_TO_RMI_MBOX1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_UC_TO_RMI_MBOX1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_uc_to_rmi_mbox1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_UC_TO_RMI_MBOX1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_UC_TO_RMI_MBOX1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_uc_to_rmi_mbox1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define UC_UC_TO_RMI_MBOX1r BCMI_TSCF_GEN3_XGXS_UC_UC_TO_RMI_MBOX1r
#define UC_UC_TO_RMI_MBOX1r_SIZE BCMI_TSCF_GEN3_XGXS_UC_UC_TO_RMI_MBOX1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_UC_UC_TO_RMI_MBOX1r_t UC_UC_TO_RMI_MBOX1r_t;
#define UC_UC_TO_RMI_MBOX1r_CLR BCMI_TSCF_GEN3_XGXS_UC_UC_TO_RMI_MBOX1r_CLR
#define UC_UC_TO_RMI_MBOX1r_SET BCMI_TSCF_GEN3_XGXS_UC_UC_TO_RMI_MBOX1r_SET
#define UC_UC_TO_RMI_MBOX1r_GET BCMI_TSCF_GEN3_XGXS_UC_UC_TO_RMI_MBOX1r_GET
#define UC_UC_TO_RMI_MBOX1r_MICRO_TO_RMI_MBOX1f_GET BCMI_TSCF_GEN3_XGXS_UC_UC_TO_RMI_MBOX1r_MICRO_TO_RMI_MBOX1f_GET
#define UC_UC_TO_RMI_MBOX1r_MICRO_TO_RMI_MBOX1f_SET BCMI_TSCF_GEN3_XGXS_UC_UC_TO_RMI_MBOX1r_MICRO_TO_RMI_MBOX1f_SET
#define READ_UC_UC_TO_RMI_MBOX1r BCMI_TSCF_GEN3_XGXS_READ_UC_UC_TO_RMI_MBOX1r
#define WRITE_UC_UC_TO_RMI_MBOX1r BCMI_TSCF_GEN3_XGXS_WRITE_UC_UC_TO_RMI_MBOX1r
#define MODIFY_UC_UC_TO_RMI_MBOX1r BCMI_TSCF_GEN3_XGXS_MODIFY_UC_UC_TO_RMI_MBOX1r
#define READLN_UC_UC_TO_RMI_MBOX1r BCMI_TSCF_GEN3_XGXS_READLN_UC_UC_TO_RMI_MBOX1r
#define WRITELN_UC_UC_TO_RMI_MBOX1r BCMI_TSCF_GEN3_XGXS_WRITELN_UC_UC_TO_RMI_MBOX1r
#define WRITEALL_UC_UC_TO_RMI_MBOX1r BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_UC_TO_RMI_MBOX1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_UC_UC_TO_RMI_MBOX1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  UC_RMI_MBOX_CTL0
 * BLOCKS:   MICRO_B
 * REGADDR:  0xd215
 * DEVAD:    1
 * DESC:     rmi mailbox control register 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_RMI_MBOX_SEND_MSGIN Send message in (to the micro)This field is set by the RMIC to indicate to the Micro that the message in thermi_to_micro_mbox1, and rmi_to_micro_mbox0 regiters is valid.
 *     MICRO_GEN_INTR_RMI_MBOX0WR Generate interrupt when micro_rmi_to_micro_mbox0 field is written0 - disabled1 - enbled
 *     MICRO_GEN_INTR_RMI_MBOX1WR Generate interrupt when micro_rmi_to_micro_mbox1 field is written0 - disabled1 - enbled
 */
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_MBOX_CTL0r (0x0001d215 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_UC_RMI_MBOX_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program UC_RMI_MBOX_CTL0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_UC_RMI_MBOX_CTL0r_s {
	uint32_t v[1];
	uint32_t uc_rmi_mbox_ctl0[1];
	uint32_t _uc_rmi_mbox_ctl0;
} BCMI_TSCF_GEN3_XGXS_UC_RMI_MBOX_CTL0r_t;

#define BCMI_TSCF_GEN3_XGXS_UC_RMI_MBOX_CTL0r_CLR(r) (r).uc_rmi_mbox_ctl0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_MBOX_CTL0r_SET(r,d) (r).uc_rmi_mbox_ctl0[0] = d
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_MBOX_CTL0r_GET(r) (r).uc_rmi_mbox_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_MBOX_CTL0r_MICRO_GEN_INTR_RMI_MBOX1WRf_GET(r) ((((r).uc_rmi_mbox_ctl0[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_MBOX_CTL0r_MICRO_GEN_INTR_RMI_MBOX1WRf_SET(r,f) (r).uc_rmi_mbox_ctl0[0]=(((r).uc_rmi_mbox_ctl0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_MBOX_CTL0r_MICRO_GEN_INTR_RMI_MBOX0WRf_GET(r) ((((r).uc_rmi_mbox_ctl0[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_MBOX_CTL0r_MICRO_GEN_INTR_RMI_MBOX0WRf_SET(r,f) (r).uc_rmi_mbox_ctl0[0]=(((r).uc_rmi_mbox_ctl0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_MBOX_CTL0r_MICRO_RMI_MBOX_SEND_MSGINf_GET(r) (((r).uc_rmi_mbox_ctl0[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_MBOX_CTL0r_MICRO_RMI_MBOX_SEND_MSGINf_SET(r,f) (r).uc_rmi_mbox_ctl0[0]=(((r).uc_rmi_mbox_ctl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access UC_RMI_MBOX_CTL0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_UC_RMI_MBOX_CTL0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_MBOX_CTL0r,(_r._uc_rmi_mbox_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_UC_RMI_MBOX_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_MBOX_CTL0r,(_r._uc_rmi_mbox_ctl0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_UC_RMI_MBOX_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_MBOX_CTL0r,(_r._uc_rmi_mbox_ctl0))
#define BCMI_TSCF_GEN3_XGXS_READLN_UC_RMI_MBOX_CTL0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_MBOX_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_mbox_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_UC_RMI_MBOX_CTL0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_MBOX_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_mbox_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_RMI_MBOX_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_MBOX_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_rmi_mbox_ctl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define UC_RMI_MBOX_CTL0r BCMI_TSCF_GEN3_XGXS_UC_RMI_MBOX_CTL0r
#define UC_RMI_MBOX_CTL0r_SIZE BCMI_TSCF_GEN3_XGXS_UC_RMI_MBOX_CTL0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_UC_RMI_MBOX_CTL0r_t UC_RMI_MBOX_CTL0r_t;
#define UC_RMI_MBOX_CTL0r_CLR BCMI_TSCF_GEN3_XGXS_UC_RMI_MBOX_CTL0r_CLR
#define UC_RMI_MBOX_CTL0r_SET BCMI_TSCF_GEN3_XGXS_UC_RMI_MBOX_CTL0r_SET
#define UC_RMI_MBOX_CTL0r_GET BCMI_TSCF_GEN3_XGXS_UC_RMI_MBOX_CTL0r_GET
#define UC_RMI_MBOX_CTL0r_MICRO_GEN_INTR_RMI_MBOX1WRf_GET BCMI_TSCF_GEN3_XGXS_UC_RMI_MBOX_CTL0r_MICRO_GEN_INTR_RMI_MBOX1WRf_GET
#define UC_RMI_MBOX_CTL0r_MICRO_GEN_INTR_RMI_MBOX1WRf_SET BCMI_TSCF_GEN3_XGXS_UC_RMI_MBOX_CTL0r_MICRO_GEN_INTR_RMI_MBOX1WRf_SET
#define UC_RMI_MBOX_CTL0r_MICRO_GEN_INTR_RMI_MBOX0WRf_GET BCMI_TSCF_GEN3_XGXS_UC_RMI_MBOX_CTL0r_MICRO_GEN_INTR_RMI_MBOX0WRf_GET
#define UC_RMI_MBOX_CTL0r_MICRO_GEN_INTR_RMI_MBOX0WRf_SET BCMI_TSCF_GEN3_XGXS_UC_RMI_MBOX_CTL0r_MICRO_GEN_INTR_RMI_MBOX0WRf_SET
#define UC_RMI_MBOX_CTL0r_MICRO_RMI_MBOX_SEND_MSGINf_GET BCMI_TSCF_GEN3_XGXS_UC_RMI_MBOX_CTL0r_MICRO_RMI_MBOX_SEND_MSGINf_GET
#define UC_RMI_MBOX_CTL0r_MICRO_RMI_MBOX_SEND_MSGINf_SET BCMI_TSCF_GEN3_XGXS_UC_RMI_MBOX_CTL0r_MICRO_RMI_MBOX_SEND_MSGINf_SET
#define READ_UC_RMI_MBOX_CTL0r BCMI_TSCF_GEN3_XGXS_READ_UC_RMI_MBOX_CTL0r
#define WRITE_UC_RMI_MBOX_CTL0r BCMI_TSCF_GEN3_XGXS_WRITE_UC_RMI_MBOX_CTL0r
#define MODIFY_UC_RMI_MBOX_CTL0r BCMI_TSCF_GEN3_XGXS_MODIFY_UC_RMI_MBOX_CTL0r
#define READLN_UC_RMI_MBOX_CTL0r BCMI_TSCF_GEN3_XGXS_READLN_UC_RMI_MBOX_CTL0r
#define WRITELN_UC_RMI_MBOX_CTL0r BCMI_TSCF_GEN3_XGXS_WRITELN_UC_RMI_MBOX_CTL0r
#define WRITEALL_UC_RMI_MBOX_CTL0r BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_RMI_MBOX_CTL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_UC_RMI_MBOX_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  UC_RMI_AHB_CTL1
 * BLOCKS:   MICRO_B
 * REGADDR:  0xd216
 * DEVAD:    1
 * DESC:     ahb control register 1
 * RESETVAL: 0x7 (7)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_M0_HRESP_EN m0 response error signaling enable0 - disabled1 - enabled
 *     MICRO_SW_PMI_HP_RSTB Software reset pmi_hp interface logicThis bit is to initialize the pmi_hp block0 - reset asserted1 - reset de-asserted
 *     MICRO_SW_PMI_HP_EXT_RSTB Software reset pmi_hp_ext interface logicThis bit is to initialize the pmi_hp_ext block0 - reset asserted1 - reset de-asserted
 *     MICRO_PMI_HP_ACK_TIMEOUT_DIS pmi_hp_ack_* timeout disableWhen micro initates a read/write transctions on the pmi_hp busit allows upto 256 clock cycles for pmi_hp_ack_mc/pmi_hp_ack_uc to be assertedIf pmi_hp_ack_* is not received within this time, then it1. terminates the current transactions on the pmi_hp bus2. set the pmi_hp_ack_timeout_status field of the ahbcommon_pmi_hp_status0 register.3. performs the response error signaling on the micro AHB bus when micro_m0_hresp_en field is set to 1'b1This timeout period/error reporting/reponse error signaling can be disabled by setting this field i.e.0: enabled1: disabled
 *     MICRO_PMI_HP_EXT_ACK_TIMEOUT_DIS pmi_hp_ext_ack_* timeout disableWhen micro initates a read/write transctions on the pmi_hp_ext busit allows upto 256 clock cycles for pmi_hp_ext_ack_mc/pmi_hp_ext_ack_uc to be assertedIf pmi_hp_ext_ack_* is not received within this time, then it1. terminates the current transactions on the pmi_hp_ext bus2. set the pmi_hp_ext_ack_timeout_status field of the ahbcommon_pmi_hp_status0 register.3. performs the response error signaling on the micro AHB bus if micro_m0_hresp_en field is set to 1'b1This timeout period/error reporting/reponse error signaling can be disabled by setting this field i.e.0: enabled1: disabled
 */
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_CTL1r (0x0001d216 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_CTL1r_SIZE 4

/*
 * This structure should be used to declare and program UC_RMI_AHB_CTL1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_CTL1r_s {
	uint32_t v[1];
	uint32_t uc_rmi_ahb_ctl1[1];
	uint32_t _uc_rmi_ahb_ctl1;
} BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_CTL1r_t;

#define BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_CTL1r_CLR(r) (r).uc_rmi_ahb_ctl1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_CTL1r_SET(r,d) (r).uc_rmi_ahb_ctl1[0] = d
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_CTL1r_GET(r) (r).uc_rmi_ahb_ctl1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_CTL1r_MICRO_PMI_HP_EXT_ACK_TIMEOUT_DISf_GET(r) ((((r).uc_rmi_ahb_ctl1[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_CTL1r_MICRO_PMI_HP_EXT_ACK_TIMEOUT_DISf_SET(r,f) (r).uc_rmi_ahb_ctl1[0]=(((r).uc_rmi_ahb_ctl1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_CTL1r_MICRO_PMI_HP_ACK_TIMEOUT_DISf_GET(r) ((((r).uc_rmi_ahb_ctl1[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_CTL1r_MICRO_PMI_HP_ACK_TIMEOUT_DISf_SET(r,f) (r).uc_rmi_ahb_ctl1[0]=(((r).uc_rmi_ahb_ctl1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_CTL1r_MICRO_SW_PMI_HP_EXT_RSTBf_GET(r) ((((r).uc_rmi_ahb_ctl1[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_CTL1r_MICRO_SW_PMI_HP_EXT_RSTBf_SET(r,f) (r).uc_rmi_ahb_ctl1[0]=(((r).uc_rmi_ahb_ctl1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_CTL1r_MICRO_SW_PMI_HP_RSTBf_GET(r) ((((r).uc_rmi_ahb_ctl1[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_CTL1r_MICRO_SW_PMI_HP_RSTBf_SET(r,f) (r).uc_rmi_ahb_ctl1[0]=(((r).uc_rmi_ahb_ctl1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_CTL1r_MICRO_M0_HRESP_ENf_GET(r) (((r).uc_rmi_ahb_ctl1[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_CTL1r_MICRO_M0_HRESP_ENf_SET(r,f) (r).uc_rmi_ahb_ctl1[0]=(((r).uc_rmi_ahb_ctl1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access UC_RMI_AHB_CTL1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_UC_RMI_AHB_CTL1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_CTL1r,(_r._uc_rmi_ahb_ctl1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_UC_RMI_AHB_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_CTL1r,(_r._uc_rmi_ahb_ctl1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_UC_RMI_AHB_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_CTL1r,(_r._uc_rmi_ahb_ctl1))
#define BCMI_TSCF_GEN3_XGXS_READLN_UC_RMI_AHB_CTL1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_ahb_ctl1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_UC_RMI_AHB_CTL1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_ahb_ctl1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_RMI_AHB_CTL1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_rmi_ahb_ctl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define UC_RMI_AHB_CTL1r BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_CTL1r
#define UC_RMI_AHB_CTL1r_SIZE BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_CTL1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_CTL1r_t UC_RMI_AHB_CTL1r_t;
#define UC_RMI_AHB_CTL1r_CLR BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_CTL1r_CLR
#define UC_RMI_AHB_CTL1r_SET BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_CTL1r_SET
#define UC_RMI_AHB_CTL1r_GET BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_CTL1r_GET
#define UC_RMI_AHB_CTL1r_MICRO_PMI_HP_EXT_ACK_TIMEOUT_DISf_GET BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_CTL1r_MICRO_PMI_HP_EXT_ACK_TIMEOUT_DISf_GET
#define UC_RMI_AHB_CTL1r_MICRO_PMI_HP_EXT_ACK_TIMEOUT_DISf_SET BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_CTL1r_MICRO_PMI_HP_EXT_ACK_TIMEOUT_DISf_SET
#define UC_RMI_AHB_CTL1r_MICRO_PMI_HP_ACK_TIMEOUT_DISf_GET BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_CTL1r_MICRO_PMI_HP_ACK_TIMEOUT_DISf_GET
#define UC_RMI_AHB_CTL1r_MICRO_PMI_HP_ACK_TIMEOUT_DISf_SET BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_CTL1r_MICRO_PMI_HP_ACK_TIMEOUT_DISf_SET
#define UC_RMI_AHB_CTL1r_MICRO_SW_PMI_HP_EXT_RSTBf_GET BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_CTL1r_MICRO_SW_PMI_HP_EXT_RSTBf_GET
#define UC_RMI_AHB_CTL1r_MICRO_SW_PMI_HP_EXT_RSTBf_SET BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_CTL1r_MICRO_SW_PMI_HP_EXT_RSTBf_SET
#define UC_RMI_AHB_CTL1r_MICRO_SW_PMI_HP_RSTBf_GET BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_CTL1r_MICRO_SW_PMI_HP_RSTBf_GET
#define UC_RMI_AHB_CTL1r_MICRO_SW_PMI_HP_RSTBf_SET BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_CTL1r_MICRO_SW_PMI_HP_RSTBf_SET
#define UC_RMI_AHB_CTL1r_MICRO_M0_HRESP_ENf_GET BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_CTL1r_MICRO_M0_HRESP_ENf_GET
#define UC_RMI_AHB_CTL1r_MICRO_M0_HRESP_ENf_SET BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_CTL1r_MICRO_M0_HRESP_ENf_SET
#define READ_UC_RMI_AHB_CTL1r BCMI_TSCF_GEN3_XGXS_READ_UC_RMI_AHB_CTL1r
#define WRITE_UC_RMI_AHB_CTL1r BCMI_TSCF_GEN3_XGXS_WRITE_UC_RMI_AHB_CTL1r
#define MODIFY_UC_RMI_AHB_CTL1r BCMI_TSCF_GEN3_XGXS_MODIFY_UC_RMI_AHB_CTL1r
#define READLN_UC_RMI_AHB_CTL1r BCMI_TSCF_GEN3_XGXS_READLN_UC_RMI_AHB_CTL1r
#define WRITELN_UC_RMI_AHB_CTL1r BCMI_TSCF_GEN3_XGXS_WRITELN_UC_RMI_AHB_CTL1r
#define WRITEALL_UC_RMI_AHB_CTL1r BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_RMI_AHB_CTL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_CTL1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  UC_RMI_AHB_STS1
 * BLOCKS:   MICRO_B
 * REGADDR:  0xd217
 * DEVAD:    1
 * DESC:     ahb status register 1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MICRO_M0_DEFAULT_SLAVE_ERROR m0 default slave error detected. M0 attempted to access un-used address1 - error detected - latched high clear on read0 - no error
 *     MICRO_RMI_DEFAULT_SLAVE_ERROR register interface default slave error detected. Register interface attempted to access un-used address1 - error detected - latched high clear on read0 - no error
 *     MICRO_PR_DEFAULT_SLAVE_ERROR PRAM interface default slave error detected. PRAM interface attempted to access un-used address1 - error detected - latched high clear on read0 - no error
 */
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_STS1r (0x0001d217 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_STS1r_SIZE 4

/*
 * This structure should be used to declare and program UC_RMI_AHB_STS1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_STS1r_s {
	uint32_t v[1];
	uint32_t uc_rmi_ahb_sts1[1];
	uint32_t _uc_rmi_ahb_sts1;
} BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_STS1r_t;

#define BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_STS1r_CLR(r) (r).uc_rmi_ahb_sts1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_STS1r_SET(r,d) (r).uc_rmi_ahb_sts1[0] = d
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_STS1r_GET(r) (r).uc_rmi_ahb_sts1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_STS1r_MICRO_PR_DEFAULT_SLAVE_ERRORf_GET(r) ((((r).uc_rmi_ahb_sts1[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_STS1r_MICRO_PR_DEFAULT_SLAVE_ERRORf_SET(r,f) (r).uc_rmi_ahb_sts1[0]=(((r).uc_rmi_ahb_sts1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_STS1r_MICRO_RMI_DEFAULT_SLAVE_ERRORf_GET(r) ((((r).uc_rmi_ahb_sts1[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_STS1r_MICRO_RMI_DEFAULT_SLAVE_ERRORf_SET(r,f) (r).uc_rmi_ahb_sts1[0]=(((r).uc_rmi_ahb_sts1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_STS1r_MICRO_M0_DEFAULT_SLAVE_ERRORf_GET(r) (((r).uc_rmi_ahb_sts1[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_STS1r_MICRO_M0_DEFAULT_SLAVE_ERRORf_SET(r,f) (r).uc_rmi_ahb_sts1[0]=(((r).uc_rmi_ahb_sts1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access UC_RMI_AHB_STS1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_UC_RMI_AHB_STS1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_STS1r,(_r._uc_rmi_ahb_sts1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_UC_RMI_AHB_STS1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_STS1r,(_r._uc_rmi_ahb_sts1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_UC_RMI_AHB_STS1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_STS1r,(_r._uc_rmi_ahb_sts1))
#define BCMI_TSCF_GEN3_XGXS_READLN_UC_RMI_AHB_STS1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_STS1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_ahb_sts1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_UC_RMI_AHB_STS1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_STS1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_ahb_sts1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_RMI_AHB_STS1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_STS1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_rmi_ahb_sts1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define UC_RMI_AHB_STS1r BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_STS1r
#define UC_RMI_AHB_STS1r_SIZE BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_STS1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_STS1r_t UC_RMI_AHB_STS1r_t;
#define UC_RMI_AHB_STS1r_CLR BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_STS1r_CLR
#define UC_RMI_AHB_STS1r_SET BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_STS1r_SET
#define UC_RMI_AHB_STS1r_GET BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_STS1r_GET
#define UC_RMI_AHB_STS1r_MICRO_PR_DEFAULT_SLAVE_ERRORf_GET BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_STS1r_MICRO_PR_DEFAULT_SLAVE_ERRORf_GET
#define UC_RMI_AHB_STS1r_MICRO_PR_DEFAULT_SLAVE_ERRORf_SET BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_STS1r_MICRO_PR_DEFAULT_SLAVE_ERRORf_SET
#define UC_RMI_AHB_STS1r_MICRO_RMI_DEFAULT_SLAVE_ERRORf_GET BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_STS1r_MICRO_RMI_DEFAULT_SLAVE_ERRORf_GET
#define UC_RMI_AHB_STS1r_MICRO_RMI_DEFAULT_SLAVE_ERRORf_SET BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_STS1r_MICRO_RMI_DEFAULT_SLAVE_ERRORf_SET
#define UC_RMI_AHB_STS1r_MICRO_M0_DEFAULT_SLAVE_ERRORf_GET BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_STS1r_MICRO_M0_DEFAULT_SLAVE_ERRORf_GET
#define UC_RMI_AHB_STS1r_MICRO_M0_DEFAULT_SLAVE_ERRORf_SET BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_STS1r_MICRO_M0_DEFAULT_SLAVE_ERRORf_SET
#define READ_UC_RMI_AHB_STS1r BCMI_TSCF_GEN3_XGXS_READ_UC_RMI_AHB_STS1r
#define WRITE_UC_RMI_AHB_STS1r BCMI_TSCF_GEN3_XGXS_WRITE_UC_RMI_AHB_STS1r
#define MODIFY_UC_RMI_AHB_STS1r BCMI_TSCF_GEN3_XGXS_MODIFY_UC_RMI_AHB_STS1r
#define READLN_UC_RMI_AHB_STS1r BCMI_TSCF_GEN3_XGXS_READLN_UC_RMI_AHB_STS1r
#define WRITELN_UC_RMI_AHB_STS1r BCMI_TSCF_GEN3_XGXS_WRITELN_UC_RMI_AHB_STS1r
#define WRITEALL_UC_RMI_AHB_STS1r BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_RMI_AHB_STS1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_UC_RMI_AHB_STS1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  UC_RMI_RA_AINC_NXT_WRADDR_LSW
 * BLOCKS:   MICRO_B
 * REGADDR:  0xd218
 * DEVAD:    1
 * DESC:     rmi to ahb auto-incremented write address LSW (bits 15:0) register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MICRO_RA_AUTOINC_NXT_WRADDR_LSW When the micro_autoinc_wraddr_en is set, then these bitsindicate the lower 16-bits of the address that will be usedduring the next write transaction.These bits allow address tracking when rmi interface auto addressincrement mode is used
 */
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSWr (0x0001d218 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSWr_SIZE 4

/*
 * This structure should be used to declare and program UC_RMI_RA_AINC_NXT_WRADDR_LSW.
 */
typedef union BCMI_TSCF_GEN3_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSWr_s {
	uint32_t v[1];
	uint32_t uc_rmi_ra_ainc_nxt_wraddr_lsw[1];
	uint32_t _uc_rmi_ra_ainc_nxt_wraddr_lsw;
} BCMI_TSCF_GEN3_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSWr_t;

#define BCMI_TSCF_GEN3_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSWr_CLR(r) (r).uc_rmi_ra_ainc_nxt_wraddr_lsw[0] = 0
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSWr_SET(r,d) (r).uc_rmi_ra_ainc_nxt_wraddr_lsw[0] = d
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSWr_GET(r) (r).uc_rmi_ra_ainc_nxt_wraddr_lsw[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSWr_MICRO_RA_AUTOINC_NXT_WRADDR_LSWf_GET(r) (((r).uc_rmi_ra_ainc_nxt_wraddr_lsw[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSWr_MICRO_RA_AUTOINC_NXT_WRADDR_LSWf_SET(r,f) (r).uc_rmi_ra_ainc_nxt_wraddr_lsw[0]=(((r).uc_rmi_ra_ainc_nxt_wraddr_lsw[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_RMI_RA_AINC_NXT_WRADDR_LSW.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_UC_RMI_RA_AINC_NXT_WRADDR_LSWr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSWr,(_r._uc_rmi_ra_ainc_nxt_wraddr_lsw))
#define BCMI_TSCF_GEN3_XGXS_WRITE_UC_RMI_RA_AINC_NXT_WRADDR_LSWr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSWr,(_r._uc_rmi_ra_ainc_nxt_wraddr_lsw)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_UC_RMI_RA_AINC_NXT_WRADDR_LSWr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSWr,(_r._uc_rmi_ra_ainc_nxt_wraddr_lsw))
#define BCMI_TSCF_GEN3_XGXS_READLN_UC_RMI_RA_AINC_NXT_WRADDR_LSWr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_ra_ainc_nxt_wraddr_lsw))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_UC_RMI_RA_AINC_NXT_WRADDR_LSWr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_ra_ainc_nxt_wraddr_lsw))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_RMI_RA_AINC_NXT_WRADDR_LSWr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSWr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_rmi_ra_ainc_nxt_wraddr_lsw))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define UC_RMI_RA_AINC_NXT_WRADDR_LSWr BCMI_TSCF_GEN3_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSWr
#define UC_RMI_RA_AINC_NXT_WRADDR_LSWr_SIZE BCMI_TSCF_GEN3_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSWr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSWr_t UC_RMI_RA_AINC_NXT_WRADDR_LSWr_t;
#define UC_RMI_RA_AINC_NXT_WRADDR_LSWr_CLR BCMI_TSCF_GEN3_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSWr_CLR
#define UC_RMI_RA_AINC_NXT_WRADDR_LSWr_SET BCMI_TSCF_GEN3_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSWr_SET
#define UC_RMI_RA_AINC_NXT_WRADDR_LSWr_GET BCMI_TSCF_GEN3_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSWr_GET
#define UC_RMI_RA_AINC_NXT_WRADDR_LSWr_MICRO_RA_AUTOINC_NXT_WRADDR_LSWf_GET BCMI_TSCF_GEN3_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSWr_MICRO_RA_AUTOINC_NXT_WRADDR_LSWf_GET
#define UC_RMI_RA_AINC_NXT_WRADDR_LSWr_MICRO_RA_AUTOINC_NXT_WRADDR_LSWf_SET BCMI_TSCF_GEN3_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSWr_MICRO_RA_AUTOINC_NXT_WRADDR_LSWf_SET
#define READ_UC_RMI_RA_AINC_NXT_WRADDR_LSWr BCMI_TSCF_GEN3_XGXS_READ_UC_RMI_RA_AINC_NXT_WRADDR_LSWr
#define WRITE_UC_RMI_RA_AINC_NXT_WRADDR_LSWr BCMI_TSCF_GEN3_XGXS_WRITE_UC_RMI_RA_AINC_NXT_WRADDR_LSWr
#define MODIFY_UC_RMI_RA_AINC_NXT_WRADDR_LSWr BCMI_TSCF_GEN3_XGXS_MODIFY_UC_RMI_RA_AINC_NXT_WRADDR_LSWr
#define READLN_UC_RMI_RA_AINC_NXT_WRADDR_LSWr BCMI_TSCF_GEN3_XGXS_READLN_UC_RMI_RA_AINC_NXT_WRADDR_LSWr
#define WRITELN_UC_RMI_RA_AINC_NXT_WRADDR_LSWr BCMI_TSCF_GEN3_XGXS_WRITELN_UC_RMI_RA_AINC_NXT_WRADDR_LSWr
#define WRITEALL_UC_RMI_RA_AINC_NXT_WRADDR_LSWr BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_RMI_RA_AINC_NXT_WRADDR_LSWr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSWr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  UC_RMI_RA_AINC_NXT_RDADDR_LSW
 * BLOCKS:   MICRO_B
 * REGADDR:  0xd219
 * DEVAD:    1
 * DESC:     rmi to ahb auto-incremented read address LSW (bits 15:0) register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MICRO_RA_AUTOINC_NXT_RDADDR_LSW When the micro_autoinc_rdaddr_en is set, then these bitsindicate the lower 16-bits of the address that will be usedduring the next read transaction.These bits allow address tracking when rmi interface auto addressincrement mode is used
 */
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSWr (0x0001d219 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSWr_SIZE 4

/*
 * This structure should be used to declare and program UC_RMI_RA_AINC_NXT_RDADDR_LSW.
 */
typedef union BCMI_TSCF_GEN3_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSWr_s {
	uint32_t v[1];
	uint32_t uc_rmi_ra_ainc_nxt_rdaddr_lsw[1];
	uint32_t _uc_rmi_ra_ainc_nxt_rdaddr_lsw;
} BCMI_TSCF_GEN3_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSWr_t;

#define BCMI_TSCF_GEN3_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSWr_CLR(r) (r).uc_rmi_ra_ainc_nxt_rdaddr_lsw[0] = 0
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSWr_SET(r,d) (r).uc_rmi_ra_ainc_nxt_rdaddr_lsw[0] = d
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSWr_GET(r) (r).uc_rmi_ra_ainc_nxt_rdaddr_lsw[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSWr_MICRO_RA_AUTOINC_NXT_RDADDR_LSWf_GET(r) (((r).uc_rmi_ra_ainc_nxt_rdaddr_lsw[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSWr_MICRO_RA_AUTOINC_NXT_RDADDR_LSWf_SET(r,f) (r).uc_rmi_ra_ainc_nxt_rdaddr_lsw[0]=(((r).uc_rmi_ra_ainc_nxt_rdaddr_lsw[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_RMI_RA_AINC_NXT_RDADDR_LSW.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_UC_RMI_RA_AINC_NXT_RDADDR_LSWr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSWr,(_r._uc_rmi_ra_ainc_nxt_rdaddr_lsw))
#define BCMI_TSCF_GEN3_XGXS_WRITE_UC_RMI_RA_AINC_NXT_RDADDR_LSWr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSWr,(_r._uc_rmi_ra_ainc_nxt_rdaddr_lsw)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_UC_RMI_RA_AINC_NXT_RDADDR_LSWr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSWr,(_r._uc_rmi_ra_ainc_nxt_rdaddr_lsw))
#define BCMI_TSCF_GEN3_XGXS_READLN_UC_RMI_RA_AINC_NXT_RDADDR_LSWr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_ra_ainc_nxt_rdaddr_lsw))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_UC_RMI_RA_AINC_NXT_RDADDR_LSWr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_ra_ainc_nxt_rdaddr_lsw))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_RMI_RA_AINC_NXT_RDADDR_LSWr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSWr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_rmi_ra_ainc_nxt_rdaddr_lsw))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define UC_RMI_RA_AINC_NXT_RDADDR_LSWr BCMI_TSCF_GEN3_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSWr
#define UC_RMI_RA_AINC_NXT_RDADDR_LSWr_SIZE BCMI_TSCF_GEN3_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSWr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSWr_t UC_RMI_RA_AINC_NXT_RDADDR_LSWr_t;
#define UC_RMI_RA_AINC_NXT_RDADDR_LSWr_CLR BCMI_TSCF_GEN3_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSWr_CLR
#define UC_RMI_RA_AINC_NXT_RDADDR_LSWr_SET BCMI_TSCF_GEN3_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSWr_SET
#define UC_RMI_RA_AINC_NXT_RDADDR_LSWr_GET BCMI_TSCF_GEN3_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSWr_GET
#define UC_RMI_RA_AINC_NXT_RDADDR_LSWr_MICRO_RA_AUTOINC_NXT_RDADDR_LSWf_GET BCMI_TSCF_GEN3_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSWr_MICRO_RA_AUTOINC_NXT_RDADDR_LSWf_GET
#define UC_RMI_RA_AINC_NXT_RDADDR_LSWr_MICRO_RA_AUTOINC_NXT_RDADDR_LSWf_SET BCMI_TSCF_GEN3_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSWr_MICRO_RA_AUTOINC_NXT_RDADDR_LSWf_SET
#define READ_UC_RMI_RA_AINC_NXT_RDADDR_LSWr BCMI_TSCF_GEN3_XGXS_READ_UC_RMI_RA_AINC_NXT_RDADDR_LSWr
#define WRITE_UC_RMI_RA_AINC_NXT_RDADDR_LSWr BCMI_TSCF_GEN3_XGXS_WRITE_UC_RMI_RA_AINC_NXT_RDADDR_LSWr
#define MODIFY_UC_RMI_RA_AINC_NXT_RDADDR_LSWr BCMI_TSCF_GEN3_XGXS_MODIFY_UC_RMI_RA_AINC_NXT_RDADDR_LSWr
#define READLN_UC_RMI_RA_AINC_NXT_RDADDR_LSWr BCMI_TSCF_GEN3_XGXS_READLN_UC_RMI_RA_AINC_NXT_RDADDR_LSWr
#define WRITELN_UC_RMI_RA_AINC_NXT_RDADDR_LSWr BCMI_TSCF_GEN3_XGXS_WRITELN_UC_RMI_RA_AINC_NXT_RDADDR_LSWr
#define WRITEALL_UC_RMI_RA_AINC_NXT_RDADDR_LSWr BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_RMI_RA_AINC_NXT_RDADDR_LSWr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSWr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  UC_RMI_PR_AINC_NXT_WRADDR_LSW
 * BLOCKS:   MICRO_B
 * REGADDR:  0xd21a
 * DEVAD:    1
 * DESC:     pram i/f to ahb auto-incremented write address LSW (bits 15:0) register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MICRO_PR_AUTOINC_NXT_WRADDR_LSW When pram interface is used to write to the code/data RAMthen these bits indicate the lower 16-bits of the address that will be usedduring the next write transaction.These bits allow address tracking
 */
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSWr (0x0001d21a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSWr_SIZE 4

/*
 * This structure should be used to declare and program UC_RMI_PR_AINC_NXT_WRADDR_LSW.
 */
typedef union BCMI_TSCF_GEN3_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSWr_s {
	uint32_t v[1];
	uint32_t uc_rmi_pr_ainc_nxt_wraddr_lsw[1];
	uint32_t _uc_rmi_pr_ainc_nxt_wraddr_lsw;
} BCMI_TSCF_GEN3_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSWr_t;

#define BCMI_TSCF_GEN3_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSWr_CLR(r) (r).uc_rmi_pr_ainc_nxt_wraddr_lsw[0] = 0
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSWr_SET(r,d) (r).uc_rmi_pr_ainc_nxt_wraddr_lsw[0] = d
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSWr_GET(r) (r).uc_rmi_pr_ainc_nxt_wraddr_lsw[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSWr_MICRO_PR_AUTOINC_NXT_WRADDR_LSWf_GET(r) (((r).uc_rmi_pr_ainc_nxt_wraddr_lsw[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSWr_MICRO_PR_AUTOINC_NXT_WRADDR_LSWf_SET(r,f) (r).uc_rmi_pr_ainc_nxt_wraddr_lsw[0]=(((r).uc_rmi_pr_ainc_nxt_wraddr_lsw[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_RMI_PR_AINC_NXT_WRADDR_LSW.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_UC_RMI_PR_AINC_NXT_WRADDR_LSWr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSWr,(_r._uc_rmi_pr_ainc_nxt_wraddr_lsw))
#define BCMI_TSCF_GEN3_XGXS_WRITE_UC_RMI_PR_AINC_NXT_WRADDR_LSWr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSWr,(_r._uc_rmi_pr_ainc_nxt_wraddr_lsw)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_UC_RMI_PR_AINC_NXT_WRADDR_LSWr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSWr,(_r._uc_rmi_pr_ainc_nxt_wraddr_lsw))
#define BCMI_TSCF_GEN3_XGXS_READLN_UC_RMI_PR_AINC_NXT_WRADDR_LSWr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_pr_ainc_nxt_wraddr_lsw))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_UC_RMI_PR_AINC_NXT_WRADDR_LSWr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_pr_ainc_nxt_wraddr_lsw))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_RMI_PR_AINC_NXT_WRADDR_LSWr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSWr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_rmi_pr_ainc_nxt_wraddr_lsw))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define UC_RMI_PR_AINC_NXT_WRADDR_LSWr BCMI_TSCF_GEN3_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSWr
#define UC_RMI_PR_AINC_NXT_WRADDR_LSWr_SIZE BCMI_TSCF_GEN3_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSWr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSWr_t UC_RMI_PR_AINC_NXT_WRADDR_LSWr_t;
#define UC_RMI_PR_AINC_NXT_WRADDR_LSWr_CLR BCMI_TSCF_GEN3_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSWr_CLR
#define UC_RMI_PR_AINC_NXT_WRADDR_LSWr_SET BCMI_TSCF_GEN3_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSWr_SET
#define UC_RMI_PR_AINC_NXT_WRADDR_LSWr_GET BCMI_TSCF_GEN3_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSWr_GET
#define UC_RMI_PR_AINC_NXT_WRADDR_LSWr_MICRO_PR_AUTOINC_NXT_WRADDR_LSWf_GET BCMI_TSCF_GEN3_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSWr_MICRO_PR_AUTOINC_NXT_WRADDR_LSWf_GET
#define UC_RMI_PR_AINC_NXT_WRADDR_LSWr_MICRO_PR_AUTOINC_NXT_WRADDR_LSWf_SET BCMI_TSCF_GEN3_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSWr_MICRO_PR_AUTOINC_NXT_WRADDR_LSWf_SET
#define READ_UC_RMI_PR_AINC_NXT_WRADDR_LSWr BCMI_TSCF_GEN3_XGXS_READ_UC_RMI_PR_AINC_NXT_WRADDR_LSWr
#define WRITE_UC_RMI_PR_AINC_NXT_WRADDR_LSWr BCMI_TSCF_GEN3_XGXS_WRITE_UC_RMI_PR_AINC_NXT_WRADDR_LSWr
#define MODIFY_UC_RMI_PR_AINC_NXT_WRADDR_LSWr BCMI_TSCF_GEN3_XGXS_MODIFY_UC_RMI_PR_AINC_NXT_WRADDR_LSWr
#define READLN_UC_RMI_PR_AINC_NXT_WRADDR_LSWr BCMI_TSCF_GEN3_XGXS_READLN_UC_RMI_PR_AINC_NXT_WRADDR_LSWr
#define WRITELN_UC_RMI_PR_AINC_NXT_WRADDR_LSWr BCMI_TSCF_GEN3_XGXS_WRITELN_UC_RMI_PR_AINC_NXT_WRADDR_LSWr
#define WRITEALL_UC_RMI_PR_AINC_NXT_WRADDR_LSWr BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_RMI_PR_AINC_NXT_WRADDR_LSWr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSWr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  UC_RMI_PVT_CTL0
 * BLOCKS:   MICRO_B
 * REGADDR:  0xd21b
 * DEVAD:    1
 * DESC:     rmi pvt temperature control register 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_PVT_TEMPDATA_FRCVAL temperature data force valueWhen micro_pvt_tempdata_frc field is set to 1'b1 then micro_pvt_tempdata_frcvalfield is used to set the temperature value. The temperature value can be readvia micro_pvt_tempdata_rmi field of the pvt_status0 register orvia ahbcommon_pvt_tempdata filed of the ahbcommon_pvt_tempdata register
 *     MICRO_PVT_TEMPDATA_FRC temperature dat force enableWhen micro_pvt_tempdata_frc field is set to 1'b1 then micro_pvt_tempdata_frcvalfield is used to set the temperature value. The temperature value can be readvia micro_pvt_tempdata_rmi field of the pvt_status0 register orvia ahbcommon_pvt_tempdata filed of the ahbcommon_pvt_tempdata register
 */
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_PVT_CTL0r (0x0001d21b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_UC_RMI_PVT_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program UC_RMI_PVT_CTL0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_UC_RMI_PVT_CTL0r_s {
	uint32_t v[1];
	uint32_t uc_rmi_pvt_ctl0[1];
	uint32_t _uc_rmi_pvt_ctl0;
} BCMI_TSCF_GEN3_XGXS_UC_RMI_PVT_CTL0r_t;

#define BCMI_TSCF_GEN3_XGXS_UC_RMI_PVT_CTL0r_CLR(r) (r).uc_rmi_pvt_ctl0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_PVT_CTL0r_SET(r,d) (r).uc_rmi_pvt_ctl0[0] = d
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_PVT_CTL0r_GET(r) (r).uc_rmi_pvt_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_PVT_CTL0r_MICRO_PVT_TEMPDATA_FRCf_GET(r) ((((r).uc_rmi_pvt_ctl0[0]) >> 12) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_PVT_CTL0r_MICRO_PVT_TEMPDATA_FRCf_SET(r,f) (r).uc_rmi_pvt_ctl0[0]=(((r).uc_rmi_pvt_ctl0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_PVT_CTL0r_MICRO_PVT_TEMPDATA_FRCVALf_GET(r) (((r).uc_rmi_pvt_ctl0[0]) & 0x3ff)
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_PVT_CTL0r_MICRO_PVT_TEMPDATA_FRCVALf_SET(r,f) (r).uc_rmi_pvt_ctl0[0]=(((r).uc_rmi_pvt_ctl0[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff)) | (0x3ff << 16)

/*
 * These macros can be used to access UC_RMI_PVT_CTL0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_UC_RMI_PVT_CTL0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_PVT_CTL0r,(_r._uc_rmi_pvt_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_UC_RMI_PVT_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_PVT_CTL0r,(_r._uc_rmi_pvt_ctl0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_UC_RMI_PVT_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_PVT_CTL0r,(_r._uc_rmi_pvt_ctl0))
#define BCMI_TSCF_GEN3_XGXS_READLN_UC_RMI_PVT_CTL0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_PVT_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_pvt_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_UC_RMI_PVT_CTL0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_PVT_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_pvt_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_RMI_PVT_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_PVT_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_rmi_pvt_ctl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define UC_RMI_PVT_CTL0r BCMI_TSCF_GEN3_XGXS_UC_RMI_PVT_CTL0r
#define UC_RMI_PVT_CTL0r_SIZE BCMI_TSCF_GEN3_XGXS_UC_RMI_PVT_CTL0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_UC_RMI_PVT_CTL0r_t UC_RMI_PVT_CTL0r_t;
#define UC_RMI_PVT_CTL0r_CLR BCMI_TSCF_GEN3_XGXS_UC_RMI_PVT_CTL0r_CLR
#define UC_RMI_PVT_CTL0r_SET BCMI_TSCF_GEN3_XGXS_UC_RMI_PVT_CTL0r_SET
#define UC_RMI_PVT_CTL0r_GET BCMI_TSCF_GEN3_XGXS_UC_RMI_PVT_CTL0r_GET
#define UC_RMI_PVT_CTL0r_MICRO_PVT_TEMPDATA_FRCf_GET BCMI_TSCF_GEN3_XGXS_UC_RMI_PVT_CTL0r_MICRO_PVT_TEMPDATA_FRCf_GET
#define UC_RMI_PVT_CTL0r_MICRO_PVT_TEMPDATA_FRCf_SET BCMI_TSCF_GEN3_XGXS_UC_RMI_PVT_CTL0r_MICRO_PVT_TEMPDATA_FRCf_SET
#define UC_RMI_PVT_CTL0r_MICRO_PVT_TEMPDATA_FRCVALf_GET BCMI_TSCF_GEN3_XGXS_UC_RMI_PVT_CTL0r_MICRO_PVT_TEMPDATA_FRCVALf_GET
#define UC_RMI_PVT_CTL0r_MICRO_PVT_TEMPDATA_FRCVALf_SET BCMI_TSCF_GEN3_XGXS_UC_RMI_PVT_CTL0r_MICRO_PVT_TEMPDATA_FRCVALf_SET
#define READ_UC_RMI_PVT_CTL0r BCMI_TSCF_GEN3_XGXS_READ_UC_RMI_PVT_CTL0r
#define WRITE_UC_RMI_PVT_CTL0r BCMI_TSCF_GEN3_XGXS_WRITE_UC_RMI_PVT_CTL0r
#define MODIFY_UC_RMI_PVT_CTL0r BCMI_TSCF_GEN3_XGXS_MODIFY_UC_RMI_PVT_CTL0r
#define READLN_UC_RMI_PVT_CTL0r BCMI_TSCF_GEN3_XGXS_READLN_UC_RMI_PVT_CTL0r
#define WRITELN_UC_RMI_PVT_CTL0r BCMI_TSCF_GEN3_XGXS_WRITELN_UC_RMI_PVT_CTL0r
#define WRITEALL_UC_RMI_PVT_CTL0r BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_RMI_PVT_CTL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_UC_RMI_PVT_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  UC_CODE_RAM_ECCCTL0
 * BLOCKS:   MICRO_C
 * REGADDR:  0xd220
 * DEVAD:    1
 * DESC:     code ram ecc control 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_ECCG_MODE  ecc code generation mode0: Hardware mode - ECC code generated by hardware, ECC error checking enabled1: Software mode - ECC code from the rg_ra_ecc_wrdata field are written into code/data RAMECC error checking disabled. This mode is only supportedwhen register interface is used
 *     MICRO_ECC_FRC_DISABLE ecc force disable0: ECC Enabled  - ECC error code generation determine by the micro_eccg_mode fieldECC error checking enabled in hardware mode only1: ECC Disabled - ECC error codes values written into the RAM set to zeroECC error checking disabled
 *     MICRO_ECC_CORRUPT This field allows the ecc codes to be corrupted for testing.2'b00 - normal mode2'b01 - corrupt the ECC code written into the code/data RAM2'b10 - corrupt data - add 1 bit data error on the RX side2'b11 - corrupt data - add 2 bit data error on the RA side
 */
#define BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCTL0r (0x0001d220 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCTL0r_SIZE 4

/*
 * This structure should be used to declare and program UC_CODE_RAM_ECCCTL0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCTL0r_s {
	uint32_t v[1];
	uint32_t uc_code_ram_eccctl0[1];
	uint32_t _uc_code_ram_eccctl0;
} BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCTL0r_t;

#define BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCTL0r_CLR(r) (r).uc_code_ram_eccctl0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCTL0r_SET(r,d) (r).uc_code_ram_eccctl0[0] = d
#define BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCTL0r_GET(r) (r).uc_code_ram_eccctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCTL0r_MICRO_ECC_CORRUPTf_GET(r) ((((r).uc_code_ram_eccctl0[0]) >> 4) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCTL0r_MICRO_ECC_CORRUPTf_SET(r,f) (r).uc_code_ram_eccctl0[0]=(((r).uc_code_ram_eccctl0[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCTL0r_MICRO_ECC_FRC_DISABLEf_GET(r) ((((r).uc_code_ram_eccctl0[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCTL0r_MICRO_ECC_FRC_DISABLEf_SET(r,f) (r).uc_code_ram_eccctl0[0]=(((r).uc_code_ram_eccctl0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCTL0r_MICRO_ECCG_MODEf_GET(r) (((r).uc_code_ram_eccctl0[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCTL0r_MICRO_ECCG_MODEf_SET(r,f) (r).uc_code_ram_eccctl0[0]=(((r).uc_code_ram_eccctl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access UC_CODE_RAM_ECCCTL0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_UC_CODE_RAM_ECCCTL0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCTL0r,(_r._uc_code_ram_eccctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_UC_CODE_RAM_ECCCTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCTL0r,(_r._uc_code_ram_eccctl0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_UC_CODE_RAM_ECCCTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCTL0r,(_r._uc_code_ram_eccctl0))
#define BCMI_TSCF_GEN3_XGXS_READLN_UC_CODE_RAM_ECCCTL0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_code_ram_eccctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_UC_CODE_RAM_ECCCTL0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_code_ram_eccctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_CODE_RAM_ECCCTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_code_ram_eccctl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define UC_CODE_RAM_ECCCTL0r BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCTL0r
#define UC_CODE_RAM_ECCCTL0r_SIZE BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCTL0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCTL0r_t UC_CODE_RAM_ECCCTL0r_t;
#define UC_CODE_RAM_ECCCTL0r_CLR BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCTL0r_CLR
#define UC_CODE_RAM_ECCCTL0r_SET BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCTL0r_SET
#define UC_CODE_RAM_ECCCTL0r_GET BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCTL0r_GET
#define UC_CODE_RAM_ECCCTL0r_MICRO_ECC_CORRUPTf_GET BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCTL0r_MICRO_ECC_CORRUPTf_GET
#define UC_CODE_RAM_ECCCTL0r_MICRO_ECC_CORRUPTf_SET BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCTL0r_MICRO_ECC_CORRUPTf_SET
#define UC_CODE_RAM_ECCCTL0r_MICRO_ECC_FRC_DISABLEf_GET BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCTL0r_MICRO_ECC_FRC_DISABLEf_GET
#define UC_CODE_RAM_ECCCTL0r_MICRO_ECC_FRC_DISABLEf_SET BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCTL0r_MICRO_ECC_FRC_DISABLEf_SET
#define UC_CODE_RAM_ECCCTL0r_MICRO_ECCG_MODEf_GET BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCTL0r_MICRO_ECCG_MODEf_GET
#define UC_CODE_RAM_ECCCTL0r_MICRO_ECCG_MODEf_SET BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCTL0r_MICRO_ECCG_MODEf_SET
#define READ_UC_CODE_RAM_ECCCTL0r BCMI_TSCF_GEN3_XGXS_READ_UC_CODE_RAM_ECCCTL0r
#define WRITE_UC_CODE_RAM_ECCCTL0r BCMI_TSCF_GEN3_XGXS_WRITE_UC_CODE_RAM_ECCCTL0r
#define MODIFY_UC_CODE_RAM_ECCCTL0r BCMI_TSCF_GEN3_XGXS_MODIFY_UC_CODE_RAM_ECCCTL0r
#define READLN_UC_CODE_RAM_ECCCTL0r BCMI_TSCF_GEN3_XGXS_READLN_UC_CODE_RAM_ECCCTL0r
#define WRITELN_UC_CODE_RAM_ECCCTL0r BCMI_TSCF_GEN3_XGXS_WRITELN_UC_CODE_RAM_ECCCTL0r
#define WRITEALL_UC_CODE_RAM_ECCCTL0r BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_CODE_RAM_ECCCTL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  UC_CODE_RAM_ECCCONTRO1
 * BLOCKS:   MICRO_C
 * REGADDR:  0xd221
 * DEVAD:    1
 * DESC:     code ram ecc control 1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_RA_ECC_WRDATA This foield is used to write the ECC codes into the code/data when ECC software modes is enabled
 */
#define BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCONTRO1r (0x0001d221 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCONTRO1r_SIZE 4

/*
 * This structure should be used to declare and program UC_CODE_RAM_ECCCONTRO1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCONTRO1r_s {
	uint32_t v[1];
	uint32_t uc_code_ram_ecccontro1[1];
	uint32_t _uc_code_ram_ecccontro1;
} BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCONTRO1r_t;

#define BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCONTRO1r_CLR(r) (r).uc_code_ram_ecccontro1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCONTRO1r_SET(r,d) (r).uc_code_ram_ecccontro1[0] = d
#define BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCONTRO1r_GET(r) (r).uc_code_ram_ecccontro1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCONTRO1r_MICRO_RA_ECC_WRDATAf_GET(r) (((r).uc_code_ram_ecccontro1[0]) & 0x7f)
#define BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCONTRO1r_MICRO_RA_ECC_WRDATAf_SET(r,f) (r).uc_code_ram_ecccontro1[0]=(((r).uc_code_ram_ecccontro1[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f)) | (0x7f << 16)

/*
 * These macros can be used to access UC_CODE_RAM_ECCCONTRO1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_UC_CODE_RAM_ECCCONTRO1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCONTRO1r,(_r._uc_code_ram_ecccontro1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_UC_CODE_RAM_ECCCONTRO1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCONTRO1r,(_r._uc_code_ram_ecccontro1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_UC_CODE_RAM_ECCCONTRO1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCONTRO1r,(_r._uc_code_ram_ecccontro1))
#define BCMI_TSCF_GEN3_XGXS_READLN_UC_CODE_RAM_ECCCONTRO1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCONTRO1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_code_ram_ecccontro1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_UC_CODE_RAM_ECCCONTRO1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCONTRO1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_code_ram_ecccontro1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_CODE_RAM_ECCCONTRO1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCONTRO1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_code_ram_ecccontro1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define UC_CODE_RAM_ECCCONTRO1r BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCONTRO1r
#define UC_CODE_RAM_ECCCONTRO1r_SIZE BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCONTRO1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCONTRO1r_t UC_CODE_RAM_ECCCONTRO1r_t;
#define UC_CODE_RAM_ECCCONTRO1r_CLR BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCONTRO1r_CLR
#define UC_CODE_RAM_ECCCONTRO1r_SET BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCONTRO1r_SET
#define UC_CODE_RAM_ECCCONTRO1r_GET BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCONTRO1r_GET
#define UC_CODE_RAM_ECCCONTRO1r_MICRO_RA_ECC_WRDATAf_GET BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCONTRO1r_MICRO_RA_ECC_WRDATAf_GET
#define UC_CODE_RAM_ECCCONTRO1r_MICRO_RA_ECC_WRDATAf_SET BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCONTRO1r_MICRO_RA_ECC_WRDATAf_SET
#define READ_UC_CODE_RAM_ECCCONTRO1r BCMI_TSCF_GEN3_XGXS_READ_UC_CODE_RAM_ECCCONTRO1r
#define WRITE_UC_CODE_RAM_ECCCONTRO1r BCMI_TSCF_GEN3_XGXS_WRITE_UC_CODE_RAM_ECCCONTRO1r
#define MODIFY_UC_CODE_RAM_ECCCONTRO1r BCMI_TSCF_GEN3_XGXS_MODIFY_UC_CODE_RAM_ECCCONTRO1r
#define READLN_UC_CODE_RAM_ECCCONTRO1r BCMI_TSCF_GEN3_XGXS_READLN_UC_CODE_RAM_ECCCONTRO1r
#define WRITELN_UC_CODE_RAM_ECCCONTRO1r BCMI_TSCF_GEN3_XGXS_WRITELN_UC_CODE_RAM_ECCCONTRO1r
#define WRITEALL_UC_CODE_RAM_ECCCONTRO1r BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_CODE_RAM_ECCCONTRO1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCCONTRO1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  UC_CODE_RAM_ECCSTS0
 * BLOCKS:   MICRO_C
 * REGADDR:  0xd222
 * DEVAD:    1
 * DESC:     code ram ecc status 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MICRO_CODE_RAM_ECC_ADDRESS First ecc error address
 */
#define BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCSTS0r (0x0001d222 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCSTS0r_SIZE 4

/*
 * This structure should be used to declare and program UC_CODE_RAM_ECCSTS0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCSTS0r_s {
	uint32_t v[1];
	uint32_t uc_code_ram_eccsts0[1];
	uint32_t _uc_code_ram_eccsts0;
} BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCSTS0r_t;

#define BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCSTS0r_CLR(r) (r).uc_code_ram_eccsts0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCSTS0r_SET(r,d) (r).uc_code_ram_eccsts0[0] = d
#define BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCSTS0r_GET(r) (r).uc_code_ram_eccsts0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCSTS0r_MICRO_CODE_RAM_ECC_ADDRESSf_GET(r) (((r).uc_code_ram_eccsts0[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCSTS0r_MICRO_CODE_RAM_ECC_ADDRESSf_SET(r,f) (r).uc_code_ram_eccsts0[0]=(((r).uc_code_ram_eccsts0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_CODE_RAM_ECCSTS0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_UC_CODE_RAM_ECCSTS0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCSTS0r,(_r._uc_code_ram_eccsts0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_UC_CODE_RAM_ECCSTS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCSTS0r,(_r._uc_code_ram_eccsts0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_UC_CODE_RAM_ECCSTS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCSTS0r,(_r._uc_code_ram_eccsts0))
#define BCMI_TSCF_GEN3_XGXS_READLN_UC_CODE_RAM_ECCSTS0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCSTS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_code_ram_eccsts0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_UC_CODE_RAM_ECCSTS0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCSTS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_code_ram_eccsts0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_CODE_RAM_ECCSTS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCSTS0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_code_ram_eccsts0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define UC_CODE_RAM_ECCSTS0r BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCSTS0r
#define UC_CODE_RAM_ECCSTS0r_SIZE BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCSTS0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCSTS0r_t UC_CODE_RAM_ECCSTS0r_t;
#define UC_CODE_RAM_ECCSTS0r_CLR BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCSTS0r_CLR
#define UC_CODE_RAM_ECCSTS0r_SET BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCSTS0r_SET
#define UC_CODE_RAM_ECCSTS0r_GET BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCSTS0r_GET
#define UC_CODE_RAM_ECCSTS0r_MICRO_CODE_RAM_ECC_ADDRESSf_GET BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCSTS0r_MICRO_CODE_RAM_ECC_ADDRESSf_GET
#define UC_CODE_RAM_ECCSTS0r_MICRO_CODE_RAM_ECC_ADDRESSf_SET BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCSTS0r_MICRO_CODE_RAM_ECC_ADDRESSf_SET
#define READ_UC_CODE_RAM_ECCSTS0r BCMI_TSCF_GEN3_XGXS_READ_UC_CODE_RAM_ECCSTS0r
#define WRITE_UC_CODE_RAM_ECCSTS0r BCMI_TSCF_GEN3_XGXS_WRITE_UC_CODE_RAM_ECCSTS0r
#define MODIFY_UC_CODE_RAM_ECCSTS0r BCMI_TSCF_GEN3_XGXS_MODIFY_UC_CODE_RAM_ECCSTS0r
#define READLN_UC_CODE_RAM_ECCSTS0r BCMI_TSCF_GEN3_XGXS_READLN_UC_CODE_RAM_ECCSTS0r
#define WRITELN_UC_CODE_RAM_ECCSTS0r BCMI_TSCF_GEN3_XGXS_WRITELN_UC_CODE_RAM_ECCSTS0r
#define WRITEALL_UC_CODE_RAM_ECCSTS0r BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_CODE_RAM_ECCSTS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCSTS0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  UC_CODE_RAM_ECCSTS1
 * BLOCKS:   MICRO_C
 * REGADDR:  0xd223
 * DEVAD:    1
 * DESC:     code ram ecc status 1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MICRO_RA_ECC_RDDATA When the register interface is used to read code/data RAM, then this field can be usedread the ECC codes currently stored in the code/data RAM
 */
#define BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCSTS1r (0x0001d223 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCSTS1r_SIZE 4

/*
 * This structure should be used to declare and program UC_CODE_RAM_ECCSTS1.
 */
typedef union BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCSTS1r_s {
	uint32_t v[1];
	uint32_t uc_code_ram_eccsts1[1];
	uint32_t _uc_code_ram_eccsts1;
} BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCSTS1r_t;

#define BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCSTS1r_CLR(r) (r).uc_code_ram_eccsts1[0] = 0
#define BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCSTS1r_SET(r,d) (r).uc_code_ram_eccsts1[0] = d
#define BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCSTS1r_GET(r) (r).uc_code_ram_eccsts1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCSTS1r_MICRO_RA_ECC_RDDATAf_GET(r) (((r).uc_code_ram_eccsts1[0]) & 0x7f)
#define BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCSTS1r_MICRO_RA_ECC_RDDATAf_SET(r,f) (r).uc_code_ram_eccsts1[0]=(((r).uc_code_ram_eccsts1[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f)) | (0x7f << 16)

/*
 * These macros can be used to access UC_CODE_RAM_ECCSTS1.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_UC_CODE_RAM_ECCSTS1r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCSTS1r,(_r._uc_code_ram_eccsts1))
#define BCMI_TSCF_GEN3_XGXS_WRITE_UC_CODE_RAM_ECCSTS1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCSTS1r,(_r._uc_code_ram_eccsts1)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_UC_CODE_RAM_ECCSTS1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCSTS1r,(_r._uc_code_ram_eccsts1))
#define BCMI_TSCF_GEN3_XGXS_READLN_UC_CODE_RAM_ECCSTS1r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCSTS1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_code_ram_eccsts1))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_UC_CODE_RAM_ECCSTS1r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCSTS1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_code_ram_eccsts1))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_CODE_RAM_ECCSTS1r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCSTS1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_code_ram_eccsts1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define UC_CODE_RAM_ECCSTS1r BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCSTS1r
#define UC_CODE_RAM_ECCSTS1r_SIZE BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCSTS1r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCSTS1r_t UC_CODE_RAM_ECCSTS1r_t;
#define UC_CODE_RAM_ECCSTS1r_CLR BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCSTS1r_CLR
#define UC_CODE_RAM_ECCSTS1r_SET BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCSTS1r_SET
#define UC_CODE_RAM_ECCSTS1r_GET BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCSTS1r_GET
#define UC_CODE_RAM_ECCSTS1r_MICRO_RA_ECC_RDDATAf_GET BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCSTS1r_MICRO_RA_ECC_RDDATAf_GET
#define UC_CODE_RAM_ECCSTS1r_MICRO_RA_ECC_RDDATAf_SET BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCSTS1r_MICRO_RA_ECC_RDDATAf_SET
#define READ_UC_CODE_RAM_ECCSTS1r BCMI_TSCF_GEN3_XGXS_READ_UC_CODE_RAM_ECCSTS1r
#define WRITE_UC_CODE_RAM_ECCSTS1r BCMI_TSCF_GEN3_XGXS_WRITE_UC_CODE_RAM_ECCSTS1r
#define MODIFY_UC_CODE_RAM_ECCSTS1r BCMI_TSCF_GEN3_XGXS_MODIFY_UC_CODE_RAM_ECCSTS1r
#define READLN_UC_CODE_RAM_ECCSTS1r BCMI_TSCF_GEN3_XGXS_READLN_UC_CODE_RAM_ECCSTS1r
#define WRITELN_UC_CODE_RAM_ECCSTS1r BCMI_TSCF_GEN3_XGXS_WRITELN_UC_CODE_RAM_ECCSTS1r
#define WRITEALL_UC_CODE_RAM_ECCSTS1r BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_CODE_RAM_ECCSTS1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_ECCSTS1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  UC_CODE_RAM_TESTIFCTL0
 * BLOCKS:   MICRO_C
 * REGADDR:  0xd224
 * DEVAD:    1
 * DESC:     code ram test interface control 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_CODE_RAM_TM Test Mode.These pins are used to put the instance into various testmodes that can be used for a number of different purposesincluding extended screening, yield improvement and debug.The default mode of the instance is tm<?:0>='d0. It ishighly recommended that the user has control over all thetm<?:0> inputs. All tm<?:0> inputs are asynchronous. Seethe Test Modes section of the on line M16SP WebSpecification for further details.
 */
#define BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_TESTIFCTL0r (0x0001d224 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_TESTIFCTL0r_SIZE 4

/*
 * This structure should be used to declare and program UC_CODE_RAM_TESTIFCTL0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_TESTIFCTL0r_s {
	uint32_t v[1];
	uint32_t uc_code_ram_testifctl0[1];
	uint32_t _uc_code_ram_testifctl0;
} BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_TESTIFCTL0r_t;

#define BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_TESTIFCTL0r_CLR(r) (r).uc_code_ram_testifctl0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_TESTIFCTL0r_SET(r,d) (r).uc_code_ram_testifctl0[0] = d
#define BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_TESTIFCTL0r_GET(r) (r).uc_code_ram_testifctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_TESTIFCTL0r_MICRO_CODE_RAM_TMf_GET(r) (((r).uc_code_ram_testifctl0[0]) & 0x3fff)
#define BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_TESTIFCTL0r_MICRO_CODE_RAM_TMf_SET(r,f) (r).uc_code_ram_testifctl0[0]=(((r).uc_code_ram_testifctl0[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff)) | (0x3fff << 16)

/*
 * These macros can be used to access UC_CODE_RAM_TESTIFCTL0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_UC_CODE_RAM_TESTIFCTL0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_TESTIFCTL0r,(_r._uc_code_ram_testifctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_UC_CODE_RAM_TESTIFCTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_TESTIFCTL0r,(_r._uc_code_ram_testifctl0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_UC_CODE_RAM_TESTIFCTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_TESTIFCTL0r,(_r._uc_code_ram_testifctl0))
#define BCMI_TSCF_GEN3_XGXS_READLN_UC_CODE_RAM_TESTIFCTL0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_TESTIFCTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_code_ram_testifctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_UC_CODE_RAM_TESTIFCTL0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_TESTIFCTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_code_ram_testifctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_CODE_RAM_TESTIFCTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_TESTIFCTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_code_ram_testifctl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define UC_CODE_RAM_TESTIFCTL0r BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_TESTIFCTL0r
#define UC_CODE_RAM_TESTIFCTL0r_SIZE BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_TESTIFCTL0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_TESTIFCTL0r_t UC_CODE_RAM_TESTIFCTL0r_t;
#define UC_CODE_RAM_TESTIFCTL0r_CLR BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_TESTIFCTL0r_CLR
#define UC_CODE_RAM_TESTIFCTL0r_SET BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_TESTIFCTL0r_SET
#define UC_CODE_RAM_TESTIFCTL0r_GET BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_TESTIFCTL0r_GET
#define UC_CODE_RAM_TESTIFCTL0r_MICRO_CODE_RAM_TMf_GET BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_TESTIFCTL0r_MICRO_CODE_RAM_TMf_GET
#define UC_CODE_RAM_TESTIFCTL0r_MICRO_CODE_RAM_TMf_SET BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_TESTIFCTL0r_MICRO_CODE_RAM_TMf_SET
#define READ_UC_CODE_RAM_TESTIFCTL0r BCMI_TSCF_GEN3_XGXS_READ_UC_CODE_RAM_TESTIFCTL0r
#define WRITE_UC_CODE_RAM_TESTIFCTL0r BCMI_TSCF_GEN3_XGXS_WRITE_UC_CODE_RAM_TESTIFCTL0r
#define MODIFY_UC_CODE_RAM_TESTIFCTL0r BCMI_TSCF_GEN3_XGXS_MODIFY_UC_CODE_RAM_TESTIFCTL0r
#define READLN_UC_CODE_RAM_TESTIFCTL0r BCMI_TSCF_GEN3_XGXS_READLN_UC_CODE_RAM_TESTIFCTL0r
#define WRITELN_UC_CODE_RAM_TESTIFCTL0r BCMI_TSCF_GEN3_XGXS_WRITELN_UC_CODE_RAM_TESTIFCTL0r
#define WRITEALL_UC_CODE_RAM_TESTIFCTL0r BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_CODE_RAM_TESTIFCTL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_UC_CODE_RAM_TESTIFCTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  UC_RAM_CTL0
 * BLOCKS:   MICRO_C
 * REGADDR:  0xd225
 * DEVAD:    1
 * DESC:     ram configuration register 0
 * RESETVAL: 0x8803 (34819)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_DR_LOOKTAB_EN Data RAM lookup table enable1 - Data RAM mapped in the data region by hardwarestarting at address 0x2000_0000 (for software compatibilty)0 - Data RAM not mapped by hardwareFirmware defines code/data regiions
 *     MICRO_PROTECT_FWCODE protect firmware code during micro master reset1 - Enabled. RAM address, data, chip select and write enable are set to inactive stateto prevent timing violations from corrupting the contents of the RAMThe API software should clear this field before loading the firmware and also re-starting the micro0 - Disabled.
 *     MICRO_DR_SIZE    Data/Code RAM allocation when the micro_dr_looktab_en field is set to 1'b1The RAM_SIZE=48KB and this field can be used to allocate data/code RAM on a 1KB granualarity6'd0  : Data RAM = 0KB,  Code RAM = RAM_SIZE - Data RAM6'd1  : Data RAM = 1KB,  Code RAM = RAM_SIZE - Data RAM6'd2  : Data RAM = 2KB,  Code RAM = RAM_SIZE - Data RAM...   : Data RAM = .. ,  Code RAM = .....   : Data RAM = .. ,  Code RAM = ..6'd47 : Data RAM = 47KB, Code RAM = RAM_SIZE - Data RAM6'd48 : Data RAM = 48KB, Code RAM = RAM_SIZE - Data RAMPLEASE NOTE: the micro in the PMD core does not have any additional RAM to store Code/Datatherfore a value of 0 and RAM_SIZE=48KB should not be used
 *     MICRO_RAMCLK_NONINV Code/Data RAM clock non-inverted0 - inverted1 - non-invertedWhen non-inverted clock to RAM is used, then a wait state to be inserted during read access.However, it eliminates the use of both edges of the clock (duty cycle) and makes the timing closer easier
 *     MICRO_IGNORE_M0_CODE_WRITES Ignore Micro writes to the code portion of the RAM0 - Allow writes1 - Ignore writes
 */
#define BCMI_TSCF_GEN3_XGXS_UC_RAM_CTL0r (0x0001d225 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_UC_RAM_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program UC_RAM_CTL0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_UC_RAM_CTL0r_s {
	uint32_t v[1];
	uint32_t uc_ram_ctl0[1];
	uint32_t _uc_ram_ctl0;
} BCMI_TSCF_GEN3_XGXS_UC_RAM_CTL0r_t;

#define BCMI_TSCF_GEN3_XGXS_UC_RAM_CTL0r_CLR(r) (r).uc_ram_ctl0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_UC_RAM_CTL0r_SET(r,d) (r).uc_ram_ctl0[0] = d
#define BCMI_TSCF_GEN3_XGXS_UC_RAM_CTL0r_GET(r) (r).uc_ram_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_UC_RAM_CTL0r_MICRO_IGNORE_M0_CODE_WRITESf_GET(r) ((((r).uc_ram_ctl0[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_UC_RAM_CTL0r_MICRO_IGNORE_M0_CODE_WRITESf_SET(r,f) (r).uc_ram_ctl0[0]=(((r).uc_ram_ctl0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_UC_RAM_CTL0r_MICRO_RAMCLK_NONINVf_GET(r) ((((r).uc_ram_ctl0[0]) >> 14) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_UC_RAM_CTL0r_MICRO_RAMCLK_NONINVf_SET(r,f) (r).uc_ram_ctl0[0]=(((r).uc_ram_ctl0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_UC_RAM_CTL0r_MICRO_DR_SIZEf_GET(r) ((((r).uc_ram_ctl0[0]) >> 8) & 0x3f)
#define BCMI_TSCF_GEN3_XGXS_UC_RAM_CTL0r_MICRO_DR_SIZEf_SET(r,f) (r).uc_ram_ctl0[0]=(((r).uc_ram_ctl0[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8)) | (63 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_UC_RAM_CTL0r_MICRO_PROTECT_FWCODEf_GET(r) ((((r).uc_ram_ctl0[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_UC_RAM_CTL0r_MICRO_PROTECT_FWCODEf_SET(r,f) (r).uc_ram_ctl0[0]=(((r).uc_ram_ctl0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_UC_RAM_CTL0r_MICRO_DR_LOOKTAB_ENf_GET(r) (((r).uc_ram_ctl0[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_UC_RAM_CTL0r_MICRO_DR_LOOKTAB_ENf_SET(r,f) (r).uc_ram_ctl0[0]=(((r).uc_ram_ctl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access UC_RAM_CTL0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_UC_RAM_CTL0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_RAM_CTL0r,(_r._uc_ram_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_UC_RAM_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RAM_CTL0r,(_r._uc_ram_ctl0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_UC_RAM_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RAM_CTL0r,(_r._uc_ram_ctl0))
#define BCMI_TSCF_GEN3_XGXS_READLN_UC_RAM_CTL0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_RAM_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ram_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_UC_RAM_CTL0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RAM_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ram_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_RAM_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RAM_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_ram_ctl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define UC_RAM_CTL0r BCMI_TSCF_GEN3_XGXS_UC_RAM_CTL0r
#define UC_RAM_CTL0r_SIZE BCMI_TSCF_GEN3_XGXS_UC_RAM_CTL0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_UC_RAM_CTL0r_t UC_RAM_CTL0r_t;
#define UC_RAM_CTL0r_CLR BCMI_TSCF_GEN3_XGXS_UC_RAM_CTL0r_CLR
#define UC_RAM_CTL0r_SET BCMI_TSCF_GEN3_XGXS_UC_RAM_CTL0r_SET
#define UC_RAM_CTL0r_GET BCMI_TSCF_GEN3_XGXS_UC_RAM_CTL0r_GET
#define UC_RAM_CTL0r_MICRO_IGNORE_M0_CODE_WRITESf_GET BCMI_TSCF_GEN3_XGXS_UC_RAM_CTL0r_MICRO_IGNORE_M0_CODE_WRITESf_GET
#define UC_RAM_CTL0r_MICRO_IGNORE_M0_CODE_WRITESf_SET BCMI_TSCF_GEN3_XGXS_UC_RAM_CTL0r_MICRO_IGNORE_M0_CODE_WRITESf_SET
#define UC_RAM_CTL0r_MICRO_RAMCLK_NONINVf_GET BCMI_TSCF_GEN3_XGXS_UC_RAM_CTL0r_MICRO_RAMCLK_NONINVf_GET
#define UC_RAM_CTL0r_MICRO_RAMCLK_NONINVf_SET BCMI_TSCF_GEN3_XGXS_UC_RAM_CTL0r_MICRO_RAMCLK_NONINVf_SET
#define UC_RAM_CTL0r_MICRO_DR_SIZEf_GET BCMI_TSCF_GEN3_XGXS_UC_RAM_CTL0r_MICRO_DR_SIZEf_GET
#define UC_RAM_CTL0r_MICRO_DR_SIZEf_SET BCMI_TSCF_GEN3_XGXS_UC_RAM_CTL0r_MICRO_DR_SIZEf_SET
#define UC_RAM_CTL0r_MICRO_PROTECT_FWCODEf_GET BCMI_TSCF_GEN3_XGXS_UC_RAM_CTL0r_MICRO_PROTECT_FWCODEf_GET
#define UC_RAM_CTL0r_MICRO_PROTECT_FWCODEf_SET BCMI_TSCF_GEN3_XGXS_UC_RAM_CTL0r_MICRO_PROTECT_FWCODEf_SET
#define UC_RAM_CTL0r_MICRO_DR_LOOKTAB_ENf_GET BCMI_TSCF_GEN3_XGXS_UC_RAM_CTL0r_MICRO_DR_LOOKTAB_ENf_GET
#define UC_RAM_CTL0r_MICRO_DR_LOOKTAB_ENf_SET BCMI_TSCF_GEN3_XGXS_UC_RAM_CTL0r_MICRO_DR_LOOKTAB_ENf_SET
#define READ_UC_RAM_CTL0r BCMI_TSCF_GEN3_XGXS_READ_UC_RAM_CTL0r
#define WRITE_UC_RAM_CTL0r BCMI_TSCF_GEN3_XGXS_WRITE_UC_RAM_CTL0r
#define MODIFY_UC_RAM_CTL0r BCMI_TSCF_GEN3_XGXS_MODIFY_UC_RAM_CTL0r
#define READLN_UC_RAM_CTL0r BCMI_TSCF_GEN3_XGXS_READLN_UC_RAM_CTL0r
#define WRITELN_UC_RAM_CTL0r BCMI_TSCF_GEN3_XGXS_WRITELN_UC_RAM_CTL0r
#define WRITEALL_UC_RAM_CTL0r BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_RAM_CTL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_UC_RAM_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  UC_RMI_EXT_INTR_CTL0
 * BLOCKS:   MICRO_C
 * REGADDR:  0xd226
 * DEVAD:    1
 * DESC:     rmi external interrupt control register 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_RMI_MBOX_MSGOUT_INTR_EN Message out (from Micro) interrupt enableWhen this field is set to 1'b1 then the micro_rmi_mbox_msgout_status field of the rmi_ext_intr_status0registers generate an interrupt on the micro_ext_intr pin
 *     MICRO_RMI_ECC_CORR_ERR_INTR_EN ECC 1 bit correctable error detect interrupt enableWhen this field is set to 1'b1 then the micro_rmi_ecc_corr_err_status field of the rmi_ext_intr_status0registers generate an interrupt on the micro_ext_intr pin
 *     MICRO_RMI_ECC_UNCORR_ERR_INTR_EN ECC 2 bit un-correctable error detect interrupt enableWhen this field is set to 1'b1 then the micro_rmi_ecc_uncorr_err_status field of the rmi_ext_intr_status0registers generate an interrupt on the micro_ext_intr pin
 *     MICRO_RMI_ECC_MULTIROW_ERR_INTR_EN ECC error on multiple row detect interrupt enableWhen this field is set to 1'b1 then the micro_rmi_ecc_multirow_err_status field of the rmi_ext_intr_status0registers generate an interrupt on the micro_ext_intr pin
 *     MICRO_RMI_M0_LOCKUP_INTR_EN M0 lockup interrupt enableWhen this field is set to 1'b1 then the micro_rmi_m0_lockup_status field of the rmi_ext_intr_status0registers generate an interrupt on the micro_ext_intr pin
 *     MICRO_RMI_M0_SYSTEMRESETREQ_INTR_EN M0 systemresetreq interrupt enableWhen this field is set to 1'b1 then the micro_rmi_m0_systemresetreq_status field of the rmi_ext_intr_status0registers generate an interrupt on the micro_ext_intr pin
 */
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_CTL0r (0x0001d226 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program UC_RMI_EXT_INTR_CTL0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_CTL0r_s {
	uint32_t v[1];
	uint32_t uc_rmi_ext_intr_ctl0[1];
	uint32_t _uc_rmi_ext_intr_ctl0;
} BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_CTL0r_t;

#define BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_CTL0r_CLR(r) (r).uc_rmi_ext_intr_ctl0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_CTL0r_SET(r,d) (r).uc_rmi_ext_intr_ctl0[0] = d
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_CTL0r_GET(r) (r).uc_rmi_ext_intr_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_M0_SYSTEMRESETREQ_INTR_ENf_GET(r) ((((r).uc_rmi_ext_intr_ctl0[0]) >> 9) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_M0_SYSTEMRESETREQ_INTR_ENf_SET(r,f) (r).uc_rmi_ext_intr_ctl0[0]=(((r).uc_rmi_ext_intr_ctl0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_M0_LOCKUP_INTR_ENf_GET(r) ((((r).uc_rmi_ext_intr_ctl0[0]) >> 8) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_M0_LOCKUP_INTR_ENf_SET(r,f) (r).uc_rmi_ext_intr_ctl0[0]=(((r).uc_rmi_ext_intr_ctl0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_ECC_MULTIROW_ERR_INTR_ENf_GET(r) ((((r).uc_rmi_ext_intr_ctl0[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_ECC_MULTIROW_ERR_INTR_ENf_SET(r,f) (r).uc_rmi_ext_intr_ctl0[0]=(((r).uc_rmi_ext_intr_ctl0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_ECC_UNCORR_ERR_INTR_ENf_GET(r) ((((r).uc_rmi_ext_intr_ctl0[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_ECC_UNCORR_ERR_INTR_ENf_SET(r,f) (r).uc_rmi_ext_intr_ctl0[0]=(((r).uc_rmi_ext_intr_ctl0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_ECC_CORR_ERR_INTR_ENf_GET(r) ((((r).uc_rmi_ext_intr_ctl0[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_ECC_CORR_ERR_INTR_ENf_SET(r,f) (r).uc_rmi_ext_intr_ctl0[0]=(((r).uc_rmi_ext_intr_ctl0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_MBOX_MSGOUT_INTR_ENf_GET(r) (((r).uc_rmi_ext_intr_ctl0[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_MBOX_MSGOUT_INTR_ENf_SET(r,f) (r).uc_rmi_ext_intr_ctl0[0]=(((r).uc_rmi_ext_intr_ctl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access UC_RMI_EXT_INTR_CTL0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_UC_RMI_EXT_INTR_CTL0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_CTL0r,(_r._uc_rmi_ext_intr_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_UC_RMI_EXT_INTR_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_CTL0r,(_r._uc_rmi_ext_intr_ctl0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_UC_RMI_EXT_INTR_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_CTL0r,(_r._uc_rmi_ext_intr_ctl0))
#define BCMI_TSCF_GEN3_XGXS_READLN_UC_RMI_EXT_INTR_CTL0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_ext_intr_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_UC_RMI_EXT_INTR_CTL0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_ext_intr_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_RMI_EXT_INTR_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_rmi_ext_intr_ctl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define UC_RMI_EXT_INTR_CTL0r BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_CTL0r
#define UC_RMI_EXT_INTR_CTL0r_SIZE BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_CTL0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_CTL0r_t UC_RMI_EXT_INTR_CTL0r_t;
#define UC_RMI_EXT_INTR_CTL0r_CLR BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_CTL0r_CLR
#define UC_RMI_EXT_INTR_CTL0r_SET BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_CTL0r_SET
#define UC_RMI_EXT_INTR_CTL0r_GET BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_CTL0r_GET
#define UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_M0_SYSTEMRESETREQ_INTR_ENf_GET BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_M0_SYSTEMRESETREQ_INTR_ENf_GET
#define UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_M0_SYSTEMRESETREQ_INTR_ENf_SET BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_M0_SYSTEMRESETREQ_INTR_ENf_SET
#define UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_M0_LOCKUP_INTR_ENf_GET BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_M0_LOCKUP_INTR_ENf_GET
#define UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_M0_LOCKUP_INTR_ENf_SET BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_M0_LOCKUP_INTR_ENf_SET
#define UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_ECC_MULTIROW_ERR_INTR_ENf_GET BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_ECC_MULTIROW_ERR_INTR_ENf_GET
#define UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_ECC_MULTIROW_ERR_INTR_ENf_SET BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_ECC_MULTIROW_ERR_INTR_ENf_SET
#define UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_ECC_UNCORR_ERR_INTR_ENf_GET BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_ECC_UNCORR_ERR_INTR_ENf_GET
#define UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_ECC_UNCORR_ERR_INTR_ENf_SET BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_ECC_UNCORR_ERR_INTR_ENf_SET
#define UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_ECC_CORR_ERR_INTR_ENf_GET BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_ECC_CORR_ERR_INTR_ENf_GET
#define UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_ECC_CORR_ERR_INTR_ENf_SET BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_ECC_CORR_ERR_INTR_ENf_SET
#define UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_MBOX_MSGOUT_INTR_ENf_GET BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_MBOX_MSGOUT_INTR_ENf_GET
#define UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_MBOX_MSGOUT_INTR_ENf_SET BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_MBOX_MSGOUT_INTR_ENf_SET
#define READ_UC_RMI_EXT_INTR_CTL0r BCMI_TSCF_GEN3_XGXS_READ_UC_RMI_EXT_INTR_CTL0r
#define WRITE_UC_RMI_EXT_INTR_CTL0r BCMI_TSCF_GEN3_XGXS_WRITE_UC_RMI_EXT_INTR_CTL0r
#define MODIFY_UC_RMI_EXT_INTR_CTL0r BCMI_TSCF_GEN3_XGXS_MODIFY_UC_RMI_EXT_INTR_CTL0r
#define READLN_UC_RMI_EXT_INTR_CTL0r BCMI_TSCF_GEN3_XGXS_READLN_UC_RMI_EXT_INTR_CTL0r
#define WRITELN_UC_RMI_EXT_INTR_CTL0r BCMI_TSCF_GEN3_XGXS_WRITELN_UC_RMI_EXT_INTR_CTL0r
#define WRITEALL_UC_RMI_EXT_INTR_CTL0r BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_RMI_EXT_INTR_CTL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  UC_RMI_EXT_INTR_STS0
 * BLOCKS:   MICRO_C
 * REGADDR:  0xd227
 * DEVAD:    1
 * DESC:     rmi external interrupt status register 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MICRO_RMI_MBOX_MSGOUT_STATUS Message out (from Micro) statusThis field is set to 1'b1 when the RMIC receives a message from the Micro.It indicates to the RMIC that the message on the micro_to_rmi_mbox3,micro_to_rmi_mbox2, micro_to_rmi_mbox1 and micro_to_rmi_mbox0 registers is validThis bits remain remains set until this register is read
 *     MICRO_RMI_ECC_CORR_ERR_STATUS ECC 1 bit correctable error detected statusThis field is set to 1'b1 when the ECC logic detects one bit correctable error.This bits remain remains set until this register is read
 *     MICRO_RMI_ECC_UNCORR_ERR_STATUS ECC 2 bit un-correctable error detected statusThis field is set to 1'b1 when the ECC logic detects one bit un-correctable error.This bits remain remains set until this register is read
 *     MICRO_RMI_ECC_MULTIROW_ERR_STATUS ECC error on multiple row detected  statusThis field is set to 1'b1 when the ECC logic detects correctable or uncorrecatble errors on multiple rows.This bits remain remains set until this register is read
 *     MICRO_RMI_M0_LOCKUP_STATUS M0 lockup statusThis field indicates the status of the M0 "lockup" signal
 *     MICRO_RMI_M0_SYSTEMRESETREQ_STATUS M0 systemresetreq statusThis field indicates the status of the M0 "systemresetreq" signal
 */
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_STS0r (0x0001d227 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_STS0r_SIZE 4

/*
 * This structure should be used to declare and program UC_RMI_EXT_INTR_STS0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_STS0r_s {
	uint32_t v[1];
	uint32_t uc_rmi_ext_intr_sts0[1];
	uint32_t _uc_rmi_ext_intr_sts0;
} BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_STS0r_t;

#define BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_STS0r_CLR(r) (r).uc_rmi_ext_intr_sts0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_STS0r_SET(r,d) (r).uc_rmi_ext_intr_sts0[0] = d
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_STS0r_GET(r) (r).uc_rmi_ext_intr_sts0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_STS0r_MICRO_RMI_M0_SYSTEMRESETREQ_STATUSf_GET(r) ((((r).uc_rmi_ext_intr_sts0[0]) >> 9) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_STS0r_MICRO_RMI_M0_SYSTEMRESETREQ_STATUSf_SET(r,f) (r).uc_rmi_ext_intr_sts0[0]=(((r).uc_rmi_ext_intr_sts0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_STS0r_MICRO_RMI_M0_LOCKUP_STATUSf_GET(r) ((((r).uc_rmi_ext_intr_sts0[0]) >> 8) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_STS0r_MICRO_RMI_M0_LOCKUP_STATUSf_SET(r,f) (r).uc_rmi_ext_intr_sts0[0]=(((r).uc_rmi_ext_intr_sts0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_STS0r_MICRO_RMI_ECC_MULTIROW_ERR_STATUSf_GET(r) ((((r).uc_rmi_ext_intr_sts0[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_STS0r_MICRO_RMI_ECC_MULTIROW_ERR_STATUSf_SET(r,f) (r).uc_rmi_ext_intr_sts0[0]=(((r).uc_rmi_ext_intr_sts0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_STS0r_MICRO_RMI_ECC_UNCORR_ERR_STATUSf_GET(r) ((((r).uc_rmi_ext_intr_sts0[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_STS0r_MICRO_RMI_ECC_UNCORR_ERR_STATUSf_SET(r,f) (r).uc_rmi_ext_intr_sts0[0]=(((r).uc_rmi_ext_intr_sts0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_STS0r_MICRO_RMI_ECC_CORR_ERR_STATUSf_GET(r) ((((r).uc_rmi_ext_intr_sts0[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_STS0r_MICRO_RMI_ECC_CORR_ERR_STATUSf_SET(r,f) (r).uc_rmi_ext_intr_sts0[0]=(((r).uc_rmi_ext_intr_sts0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_STS0r_MICRO_RMI_MBOX_MSGOUT_STATUSf_GET(r) (((r).uc_rmi_ext_intr_sts0[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_STS0r_MICRO_RMI_MBOX_MSGOUT_STATUSf_SET(r,f) (r).uc_rmi_ext_intr_sts0[0]=(((r).uc_rmi_ext_intr_sts0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access UC_RMI_EXT_INTR_STS0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_UC_RMI_EXT_INTR_STS0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_STS0r,(_r._uc_rmi_ext_intr_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_UC_RMI_EXT_INTR_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_STS0r,(_r._uc_rmi_ext_intr_sts0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_UC_RMI_EXT_INTR_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_STS0r,(_r._uc_rmi_ext_intr_sts0))
#define BCMI_TSCF_GEN3_XGXS_READLN_UC_RMI_EXT_INTR_STS0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_ext_intr_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_UC_RMI_EXT_INTR_STS0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_ext_intr_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_RMI_EXT_INTR_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_STS0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_rmi_ext_intr_sts0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define UC_RMI_EXT_INTR_STS0r BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_STS0r
#define UC_RMI_EXT_INTR_STS0r_SIZE BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_STS0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_STS0r_t UC_RMI_EXT_INTR_STS0r_t;
#define UC_RMI_EXT_INTR_STS0r_CLR BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_STS0r_CLR
#define UC_RMI_EXT_INTR_STS0r_SET BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_STS0r_SET
#define UC_RMI_EXT_INTR_STS0r_GET BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_STS0r_GET
#define UC_RMI_EXT_INTR_STS0r_MICRO_RMI_M0_SYSTEMRESETREQ_STATUSf_GET BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_STS0r_MICRO_RMI_M0_SYSTEMRESETREQ_STATUSf_GET
#define UC_RMI_EXT_INTR_STS0r_MICRO_RMI_M0_SYSTEMRESETREQ_STATUSf_SET BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_STS0r_MICRO_RMI_M0_SYSTEMRESETREQ_STATUSf_SET
#define UC_RMI_EXT_INTR_STS0r_MICRO_RMI_M0_LOCKUP_STATUSf_GET BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_STS0r_MICRO_RMI_M0_LOCKUP_STATUSf_GET
#define UC_RMI_EXT_INTR_STS0r_MICRO_RMI_M0_LOCKUP_STATUSf_SET BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_STS0r_MICRO_RMI_M0_LOCKUP_STATUSf_SET
#define UC_RMI_EXT_INTR_STS0r_MICRO_RMI_ECC_MULTIROW_ERR_STATUSf_GET BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_STS0r_MICRO_RMI_ECC_MULTIROW_ERR_STATUSf_GET
#define UC_RMI_EXT_INTR_STS0r_MICRO_RMI_ECC_MULTIROW_ERR_STATUSf_SET BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_STS0r_MICRO_RMI_ECC_MULTIROW_ERR_STATUSf_SET
#define UC_RMI_EXT_INTR_STS0r_MICRO_RMI_ECC_UNCORR_ERR_STATUSf_GET BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_STS0r_MICRO_RMI_ECC_UNCORR_ERR_STATUSf_GET
#define UC_RMI_EXT_INTR_STS0r_MICRO_RMI_ECC_UNCORR_ERR_STATUSf_SET BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_STS0r_MICRO_RMI_ECC_UNCORR_ERR_STATUSf_SET
#define UC_RMI_EXT_INTR_STS0r_MICRO_RMI_ECC_CORR_ERR_STATUSf_GET BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_STS0r_MICRO_RMI_ECC_CORR_ERR_STATUSf_GET
#define UC_RMI_EXT_INTR_STS0r_MICRO_RMI_ECC_CORR_ERR_STATUSf_SET BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_STS0r_MICRO_RMI_ECC_CORR_ERR_STATUSf_SET
#define UC_RMI_EXT_INTR_STS0r_MICRO_RMI_MBOX_MSGOUT_STATUSf_GET BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_STS0r_MICRO_RMI_MBOX_MSGOUT_STATUSf_GET
#define UC_RMI_EXT_INTR_STS0r_MICRO_RMI_MBOX_MSGOUT_STATUSf_SET BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_STS0r_MICRO_RMI_MBOX_MSGOUT_STATUSf_SET
#define READ_UC_RMI_EXT_INTR_STS0r BCMI_TSCF_GEN3_XGXS_READ_UC_RMI_EXT_INTR_STS0r
#define WRITE_UC_RMI_EXT_INTR_STS0r BCMI_TSCF_GEN3_XGXS_WRITE_UC_RMI_EXT_INTR_STS0r
#define MODIFY_UC_RMI_EXT_INTR_STS0r BCMI_TSCF_GEN3_XGXS_MODIFY_UC_RMI_EXT_INTR_STS0r
#define READLN_UC_RMI_EXT_INTR_STS0r BCMI_TSCF_GEN3_XGXS_READLN_UC_RMI_EXT_INTR_STS0r
#define WRITELN_UC_RMI_EXT_INTR_STS0r BCMI_TSCF_GEN3_XGXS_WRITELN_UC_RMI_EXT_INTR_STS0r
#define WRITEALL_UC_RMI_EXT_INTR_STS0r BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_RMI_EXT_INTR_STS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_UC_RMI_EXT_INTR_STS0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  UC_RMI_PMI_IF_CTL0
 * BLOCKS:   MICRO_C
 * REGADDR:  0xd228
 * DEVAD:    1
 * DESC:     pmi interface control register 0
 * RESETVAL: 0x101 (257)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_PMI_HP_FAST_READ_EN pmi hp interface fast read enable1 - use pmi_hp_read_vld during read0 - use pmi_hp_ack during read
 *     MICRO_PMI_HP_FAST_DUAL_META_FF_EN pmi hp interface fast dual meta flops enable1 - use both the rising and falling edges of the clock for dual meta flops0 - use only the rising edges of the clock for dual meta flops
 *     MICRO_PMI_HP_FAST_BKTOBK_EN pmi hp interface fast back to back enable1 - skip over some of the states in the fsm during back to back transition0 - state transitions as in f28
 *     MICRO_PMI_HP_EXT_FAST_READ_EN pmi hp ext interface fast read enable1 - use pmi_hp_ext_read_vld during read0 - use pmi_hp_ext_ack during read
 *     MICRO_PMI_HP_EXT_FAST_DUAL_META_FF_EN pmi_hp_ext interface fast dual meta flops enable1 - use both the rising and falling edges of the clock for dual meta flops0 - use only the rising edges of the clock for dual meta flops
 *     MICRO_PMI_HP_EXT_FAST_BKTOBK_EN pmi_hp_ext interface fast back to back enable1 - skip over some of the states in the fsm during back to back transition0 - state transitions as in f28
 */
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_PMI_IF_CTL0r (0x0001d228 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_UC_RMI_PMI_IF_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program UC_RMI_PMI_IF_CTL0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_UC_RMI_PMI_IF_CTL0r_s {
	uint32_t v[1];
	uint32_t uc_rmi_pmi_if_ctl0[1];
	uint32_t _uc_rmi_pmi_if_ctl0;
} BCMI_TSCF_GEN3_XGXS_UC_RMI_PMI_IF_CTL0r_t;

#define BCMI_TSCF_GEN3_XGXS_UC_RMI_PMI_IF_CTL0r_CLR(r) (r).uc_rmi_pmi_if_ctl0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_PMI_IF_CTL0r_SET(r,d) (r).uc_rmi_pmi_if_ctl0[0] = d
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_PMI_IF_CTL0r_GET(r) (r).uc_rmi_pmi_if_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_PMI_IF_CTL0r_MICRO_PMI_HP_EXT_FAST_BKTOBK_ENf_GET(r) ((((r).uc_rmi_pmi_if_ctl0[0]) >> 10) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_PMI_IF_CTL0r_MICRO_PMI_HP_EXT_FAST_BKTOBK_ENf_SET(r,f) (r).uc_rmi_pmi_if_ctl0[0]=(((r).uc_rmi_pmi_if_ctl0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_PMI_IF_CTL0r_MICRO_PMI_HP_EXT_FAST_DUAL_META_FF_ENf_GET(r) ((((r).uc_rmi_pmi_if_ctl0[0]) >> 9) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_PMI_IF_CTL0r_MICRO_PMI_HP_EXT_FAST_DUAL_META_FF_ENf_SET(r,f) (r).uc_rmi_pmi_if_ctl0[0]=(((r).uc_rmi_pmi_if_ctl0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_PMI_IF_CTL0r_MICRO_PMI_HP_EXT_FAST_READ_ENf_GET(r) ((((r).uc_rmi_pmi_if_ctl0[0]) >> 8) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_PMI_IF_CTL0r_MICRO_PMI_HP_EXT_FAST_READ_ENf_SET(r,f) (r).uc_rmi_pmi_if_ctl0[0]=(((r).uc_rmi_pmi_if_ctl0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_PMI_IF_CTL0r_MICRO_PMI_HP_FAST_BKTOBK_ENf_GET(r) ((((r).uc_rmi_pmi_if_ctl0[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_PMI_IF_CTL0r_MICRO_PMI_HP_FAST_BKTOBK_ENf_SET(r,f) (r).uc_rmi_pmi_if_ctl0[0]=(((r).uc_rmi_pmi_if_ctl0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_PMI_IF_CTL0r_MICRO_PMI_HP_FAST_DUAL_META_FF_ENf_GET(r) ((((r).uc_rmi_pmi_if_ctl0[0]) >> 1) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_PMI_IF_CTL0r_MICRO_PMI_HP_FAST_DUAL_META_FF_ENf_SET(r,f) (r).uc_rmi_pmi_if_ctl0[0]=(((r).uc_rmi_pmi_if_ctl0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_PMI_IF_CTL0r_MICRO_PMI_HP_FAST_READ_ENf_GET(r) (((r).uc_rmi_pmi_if_ctl0[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_PMI_IF_CTL0r_MICRO_PMI_HP_FAST_READ_ENf_SET(r,f) (r).uc_rmi_pmi_if_ctl0[0]=(((r).uc_rmi_pmi_if_ctl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access UC_RMI_PMI_IF_CTL0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_UC_RMI_PMI_IF_CTL0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_PMI_IF_CTL0r,(_r._uc_rmi_pmi_if_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_UC_RMI_PMI_IF_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_PMI_IF_CTL0r,(_r._uc_rmi_pmi_if_ctl0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_UC_RMI_PMI_IF_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_PMI_IF_CTL0r,(_r._uc_rmi_pmi_if_ctl0))
#define BCMI_TSCF_GEN3_XGXS_READLN_UC_RMI_PMI_IF_CTL0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_PMI_IF_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_pmi_if_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_UC_RMI_PMI_IF_CTL0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_PMI_IF_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_pmi_if_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_RMI_PMI_IF_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_PMI_IF_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_rmi_pmi_if_ctl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define UC_RMI_PMI_IF_CTL0r BCMI_TSCF_GEN3_XGXS_UC_RMI_PMI_IF_CTL0r
#define UC_RMI_PMI_IF_CTL0r_SIZE BCMI_TSCF_GEN3_XGXS_UC_RMI_PMI_IF_CTL0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_UC_RMI_PMI_IF_CTL0r_t UC_RMI_PMI_IF_CTL0r_t;
#define UC_RMI_PMI_IF_CTL0r_CLR BCMI_TSCF_GEN3_XGXS_UC_RMI_PMI_IF_CTL0r_CLR
#define UC_RMI_PMI_IF_CTL0r_SET BCMI_TSCF_GEN3_XGXS_UC_RMI_PMI_IF_CTL0r_SET
#define UC_RMI_PMI_IF_CTL0r_GET BCMI_TSCF_GEN3_XGXS_UC_RMI_PMI_IF_CTL0r_GET
#define UC_RMI_PMI_IF_CTL0r_MICRO_PMI_HP_EXT_FAST_BKTOBK_ENf_GET BCMI_TSCF_GEN3_XGXS_UC_RMI_PMI_IF_CTL0r_MICRO_PMI_HP_EXT_FAST_BKTOBK_ENf_GET
#define UC_RMI_PMI_IF_CTL0r_MICRO_PMI_HP_EXT_FAST_BKTOBK_ENf_SET BCMI_TSCF_GEN3_XGXS_UC_RMI_PMI_IF_CTL0r_MICRO_PMI_HP_EXT_FAST_BKTOBK_ENf_SET
#define UC_RMI_PMI_IF_CTL0r_MICRO_PMI_HP_EXT_FAST_DUAL_META_FF_ENf_GET BCMI_TSCF_GEN3_XGXS_UC_RMI_PMI_IF_CTL0r_MICRO_PMI_HP_EXT_FAST_DUAL_META_FF_ENf_GET
#define UC_RMI_PMI_IF_CTL0r_MICRO_PMI_HP_EXT_FAST_DUAL_META_FF_ENf_SET BCMI_TSCF_GEN3_XGXS_UC_RMI_PMI_IF_CTL0r_MICRO_PMI_HP_EXT_FAST_DUAL_META_FF_ENf_SET
#define UC_RMI_PMI_IF_CTL0r_MICRO_PMI_HP_EXT_FAST_READ_ENf_GET BCMI_TSCF_GEN3_XGXS_UC_RMI_PMI_IF_CTL0r_MICRO_PMI_HP_EXT_FAST_READ_ENf_GET
#define UC_RMI_PMI_IF_CTL0r_MICRO_PMI_HP_EXT_FAST_READ_ENf_SET BCMI_TSCF_GEN3_XGXS_UC_RMI_PMI_IF_CTL0r_MICRO_PMI_HP_EXT_FAST_READ_ENf_SET
#define UC_RMI_PMI_IF_CTL0r_MICRO_PMI_HP_FAST_BKTOBK_ENf_GET BCMI_TSCF_GEN3_XGXS_UC_RMI_PMI_IF_CTL0r_MICRO_PMI_HP_FAST_BKTOBK_ENf_GET
#define UC_RMI_PMI_IF_CTL0r_MICRO_PMI_HP_FAST_BKTOBK_ENf_SET BCMI_TSCF_GEN3_XGXS_UC_RMI_PMI_IF_CTL0r_MICRO_PMI_HP_FAST_BKTOBK_ENf_SET
#define UC_RMI_PMI_IF_CTL0r_MICRO_PMI_HP_FAST_DUAL_META_FF_ENf_GET BCMI_TSCF_GEN3_XGXS_UC_RMI_PMI_IF_CTL0r_MICRO_PMI_HP_FAST_DUAL_META_FF_ENf_GET
#define UC_RMI_PMI_IF_CTL0r_MICRO_PMI_HP_FAST_DUAL_META_FF_ENf_SET BCMI_TSCF_GEN3_XGXS_UC_RMI_PMI_IF_CTL0r_MICRO_PMI_HP_FAST_DUAL_META_FF_ENf_SET
#define UC_RMI_PMI_IF_CTL0r_MICRO_PMI_HP_FAST_READ_ENf_GET BCMI_TSCF_GEN3_XGXS_UC_RMI_PMI_IF_CTL0r_MICRO_PMI_HP_FAST_READ_ENf_GET
#define UC_RMI_PMI_IF_CTL0r_MICRO_PMI_HP_FAST_READ_ENf_SET BCMI_TSCF_GEN3_XGXS_UC_RMI_PMI_IF_CTL0r_MICRO_PMI_HP_FAST_READ_ENf_SET
#define READ_UC_RMI_PMI_IF_CTL0r BCMI_TSCF_GEN3_XGXS_READ_UC_RMI_PMI_IF_CTL0r
#define WRITE_UC_RMI_PMI_IF_CTL0r BCMI_TSCF_GEN3_XGXS_WRITE_UC_RMI_PMI_IF_CTL0r
#define MODIFY_UC_RMI_PMI_IF_CTL0r BCMI_TSCF_GEN3_XGXS_MODIFY_UC_RMI_PMI_IF_CTL0r
#define READLN_UC_RMI_PMI_IF_CTL0r BCMI_TSCF_GEN3_XGXS_READLN_UC_RMI_PMI_IF_CTL0r
#define WRITELN_UC_RMI_PMI_IF_CTL0r BCMI_TSCF_GEN3_XGXS_WRITELN_UC_RMI_PMI_IF_CTL0r
#define WRITEALL_UC_RMI_PMI_IF_CTL0r BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_RMI_PMI_IF_CTL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_UC_RMI_PMI_IF_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  UC_RMI_SILICON_DBG_CTL0
 * BLOCKS:   MICRO_C
 * REGADDR:  0xd229
 * DEVAD:    1
 * DESC:     Silicon debug control register 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_SILICON_DEBUG_STATUS_MUX_SEL This field is used to select the data to be muxed to rmi_silicon_debug_status0 registers0 - register interface - {5'd0, init_req,  wraddr_changed,  write_req,rdaddr_changed, read_req, ra_state[1:0],1'b0, ra_his_state[2:0]}1 - pram interface     - {2'b00, pif_state_status[1:0], pif_his_state_status[3:0],pr_hready, pr_cr_chipsel, pr_state[1:0], 1'b0,pr_his_state[2:0]};2 - pmi_hp interface   - {1'b0, pmi_state[2:0], 4'h0, pmi_his_state[7:0]}3 - pmi_hp_ext interface   - {1'b0, pmi_state[2:0], 4'h0, pmi_his_state[7:0]}
 */
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_SILICON_DBG_CTL0r (0x0001d229 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_UC_RMI_SILICON_DBG_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program UC_RMI_SILICON_DBG_CTL0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_UC_RMI_SILICON_DBG_CTL0r_s {
	uint32_t v[1];
	uint32_t uc_rmi_silicon_dbg_ctl0[1];
	uint32_t _uc_rmi_silicon_dbg_ctl0;
} BCMI_TSCF_GEN3_XGXS_UC_RMI_SILICON_DBG_CTL0r_t;

#define BCMI_TSCF_GEN3_XGXS_UC_RMI_SILICON_DBG_CTL0r_CLR(r) (r).uc_rmi_silicon_dbg_ctl0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_SILICON_DBG_CTL0r_SET(r,d) (r).uc_rmi_silicon_dbg_ctl0[0] = d
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_SILICON_DBG_CTL0r_GET(r) (r).uc_rmi_silicon_dbg_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_SILICON_DBG_CTL0r_MICRO_SILICON_DEBUG_STATUS_MUX_SELf_GET(r) (((r).uc_rmi_silicon_dbg_ctl0[0]) & 0x3)
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_SILICON_DBG_CTL0r_MICRO_SILICON_DEBUG_STATUS_MUX_SELf_SET(r,f) (r).uc_rmi_silicon_dbg_ctl0[0]=(((r).uc_rmi_silicon_dbg_ctl0[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access UC_RMI_SILICON_DBG_CTL0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_UC_RMI_SILICON_DBG_CTL0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_SILICON_DBG_CTL0r,(_r._uc_rmi_silicon_dbg_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_UC_RMI_SILICON_DBG_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_SILICON_DBG_CTL0r,(_r._uc_rmi_silicon_dbg_ctl0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_UC_RMI_SILICON_DBG_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_SILICON_DBG_CTL0r,(_r._uc_rmi_silicon_dbg_ctl0))
#define BCMI_TSCF_GEN3_XGXS_READLN_UC_RMI_SILICON_DBG_CTL0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_SILICON_DBG_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_silicon_dbg_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_UC_RMI_SILICON_DBG_CTL0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_SILICON_DBG_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_silicon_dbg_ctl0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_RMI_SILICON_DBG_CTL0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_SILICON_DBG_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_rmi_silicon_dbg_ctl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define UC_RMI_SILICON_DBG_CTL0r BCMI_TSCF_GEN3_XGXS_UC_RMI_SILICON_DBG_CTL0r
#define UC_RMI_SILICON_DBG_CTL0r_SIZE BCMI_TSCF_GEN3_XGXS_UC_RMI_SILICON_DBG_CTL0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_UC_RMI_SILICON_DBG_CTL0r_t UC_RMI_SILICON_DBG_CTL0r_t;
#define UC_RMI_SILICON_DBG_CTL0r_CLR BCMI_TSCF_GEN3_XGXS_UC_RMI_SILICON_DBG_CTL0r_CLR
#define UC_RMI_SILICON_DBG_CTL0r_SET BCMI_TSCF_GEN3_XGXS_UC_RMI_SILICON_DBG_CTL0r_SET
#define UC_RMI_SILICON_DBG_CTL0r_GET BCMI_TSCF_GEN3_XGXS_UC_RMI_SILICON_DBG_CTL0r_GET
#define UC_RMI_SILICON_DBG_CTL0r_MICRO_SILICON_DEBUG_STATUS_MUX_SELf_GET BCMI_TSCF_GEN3_XGXS_UC_RMI_SILICON_DBG_CTL0r_MICRO_SILICON_DEBUG_STATUS_MUX_SELf_GET
#define UC_RMI_SILICON_DBG_CTL0r_MICRO_SILICON_DEBUG_STATUS_MUX_SELf_SET BCMI_TSCF_GEN3_XGXS_UC_RMI_SILICON_DBG_CTL0r_MICRO_SILICON_DEBUG_STATUS_MUX_SELf_SET
#define READ_UC_RMI_SILICON_DBG_CTL0r BCMI_TSCF_GEN3_XGXS_READ_UC_RMI_SILICON_DBG_CTL0r
#define WRITE_UC_RMI_SILICON_DBG_CTL0r BCMI_TSCF_GEN3_XGXS_WRITE_UC_RMI_SILICON_DBG_CTL0r
#define MODIFY_UC_RMI_SILICON_DBG_CTL0r BCMI_TSCF_GEN3_XGXS_MODIFY_UC_RMI_SILICON_DBG_CTL0r
#define READLN_UC_RMI_SILICON_DBG_CTL0r BCMI_TSCF_GEN3_XGXS_READLN_UC_RMI_SILICON_DBG_CTL0r
#define WRITELN_UC_RMI_SILICON_DBG_CTL0r BCMI_TSCF_GEN3_XGXS_WRITELN_UC_RMI_SILICON_DBG_CTL0r
#define WRITEALL_UC_RMI_SILICON_DBG_CTL0r BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_RMI_SILICON_DBG_CTL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_UC_RMI_SILICON_DBG_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  UC_RMI_SILICON_DBG_STS0
 * BLOCKS:   MICRO_C
 * REGADDR:  0xd22a
 * DEVAD:    1
 * DESC:     Silicon debug status register 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MICRO_SILICON_DEBUG_STATUS_MUXED_DATA Muxed status data is made avaialable on this field.micro_silicon_debug_status_mux_sel is used to select the data source
 */
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_SILICON_DBG_STS0r (0x0001d22a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_UC_RMI_SILICON_DBG_STS0r_SIZE 4

/*
 * This structure should be used to declare and program UC_RMI_SILICON_DBG_STS0.
 */
typedef union BCMI_TSCF_GEN3_XGXS_UC_RMI_SILICON_DBG_STS0r_s {
	uint32_t v[1];
	uint32_t uc_rmi_silicon_dbg_sts0[1];
	uint32_t _uc_rmi_silicon_dbg_sts0;
} BCMI_TSCF_GEN3_XGXS_UC_RMI_SILICON_DBG_STS0r_t;

#define BCMI_TSCF_GEN3_XGXS_UC_RMI_SILICON_DBG_STS0r_CLR(r) (r).uc_rmi_silicon_dbg_sts0[0] = 0
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_SILICON_DBG_STS0r_SET(r,d) (r).uc_rmi_silicon_dbg_sts0[0] = d
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_SILICON_DBG_STS0r_GET(r) (r).uc_rmi_silicon_dbg_sts0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_SILICON_DBG_STS0r_MICRO_SILICON_DEBUG_STATUS_MUXED_DATAf_GET(r) (((r).uc_rmi_silicon_dbg_sts0[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_UC_RMI_SILICON_DBG_STS0r_MICRO_SILICON_DEBUG_STATUS_MUXED_DATAf_SET(r,f) (r).uc_rmi_silicon_dbg_sts0[0]=(((r).uc_rmi_silicon_dbg_sts0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_RMI_SILICON_DBG_STS0.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_UC_RMI_SILICON_DBG_STS0r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_SILICON_DBG_STS0r,(_r._uc_rmi_silicon_dbg_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITE_UC_RMI_SILICON_DBG_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_SILICON_DBG_STS0r,(_r._uc_rmi_silicon_dbg_sts0)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_UC_RMI_SILICON_DBG_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_SILICON_DBG_STS0r,(_r._uc_rmi_silicon_dbg_sts0))
#define BCMI_TSCF_GEN3_XGXS_READLN_UC_RMI_SILICON_DBG_STS0r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_SILICON_DBG_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_silicon_dbg_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_UC_RMI_SILICON_DBG_STS0r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_SILICON_DBG_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_silicon_dbg_sts0))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_RMI_SILICON_DBG_STS0r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_UC_RMI_SILICON_DBG_STS0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_rmi_silicon_dbg_sts0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define UC_RMI_SILICON_DBG_STS0r BCMI_TSCF_GEN3_XGXS_UC_RMI_SILICON_DBG_STS0r
#define UC_RMI_SILICON_DBG_STS0r_SIZE BCMI_TSCF_GEN3_XGXS_UC_RMI_SILICON_DBG_STS0r_SIZE
typedef BCMI_TSCF_GEN3_XGXS_UC_RMI_SILICON_DBG_STS0r_t UC_RMI_SILICON_DBG_STS0r_t;
#define UC_RMI_SILICON_DBG_STS0r_CLR BCMI_TSCF_GEN3_XGXS_UC_RMI_SILICON_DBG_STS0r_CLR
#define UC_RMI_SILICON_DBG_STS0r_SET BCMI_TSCF_GEN3_XGXS_UC_RMI_SILICON_DBG_STS0r_SET
#define UC_RMI_SILICON_DBG_STS0r_GET BCMI_TSCF_GEN3_XGXS_UC_RMI_SILICON_DBG_STS0r_GET
#define UC_RMI_SILICON_DBG_STS0r_MICRO_SILICON_DEBUG_STATUS_MUXED_DATAf_GET BCMI_TSCF_GEN3_XGXS_UC_RMI_SILICON_DBG_STS0r_MICRO_SILICON_DEBUG_STATUS_MUXED_DATAf_GET
#define UC_RMI_SILICON_DBG_STS0r_MICRO_SILICON_DEBUG_STATUS_MUXED_DATAf_SET BCMI_TSCF_GEN3_XGXS_UC_RMI_SILICON_DBG_STS0r_MICRO_SILICON_DEBUG_STATUS_MUXED_DATAf_SET
#define READ_UC_RMI_SILICON_DBG_STS0r BCMI_TSCF_GEN3_XGXS_READ_UC_RMI_SILICON_DBG_STS0r
#define WRITE_UC_RMI_SILICON_DBG_STS0r BCMI_TSCF_GEN3_XGXS_WRITE_UC_RMI_SILICON_DBG_STS0r
#define MODIFY_UC_RMI_SILICON_DBG_STS0r BCMI_TSCF_GEN3_XGXS_MODIFY_UC_RMI_SILICON_DBG_STS0r
#define READLN_UC_RMI_SILICON_DBG_STS0r BCMI_TSCF_GEN3_XGXS_READLN_UC_RMI_SILICON_DBG_STS0r
#define WRITELN_UC_RMI_SILICON_DBG_STS0r BCMI_TSCF_GEN3_XGXS_WRITELN_UC_RMI_SILICON_DBG_STS0r
#define WRITEALL_UC_RMI_SILICON_DBG_STS0r BCMI_TSCF_GEN3_XGXS_WRITEALL_UC_RMI_SILICON_DBG_STS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_UC_RMI_SILICON_DBG_STS0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  MDIO_BCST_PORT_ADDR
 * BLOCKS:   MDIO_MMDSEL_AER_COM
 * REGADDR:  0xffdc
 * DEVAD:    1
 * DESC:     Broadcast Port Address
 * RESETVAL: 0x1f (31)
 * ACCESS:   R/W
 * FIELDS:
 *     MDIO_BRCST_PORT_ADDR Braodcast port address that can be used to broadcast mdio commandsto multiple controllers connected to the same mdio station manager
 *     MDIO_DRV_COMCLK  Debug control bit to select between mdio_clk and comclk to drive out mdio_out and mdio_oeb signals.0=mdio_clk, 1=comclk
 */
#define BCMI_TSCF_GEN3_XGXS_MDIO_BCST_PORT_ADDRr (0x0001ffdc | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_MDIO_BCST_PORT_ADDRr_SIZE 4

/*
 * This structure should be used to declare and program MDIO_BCST_PORT_ADDR.
 */
typedef union BCMI_TSCF_GEN3_XGXS_MDIO_BCST_PORT_ADDRr_s {
	uint32_t v[1];
	uint32_t mdio_bcst_port_addr[1];
	uint32_t _mdio_bcst_port_addr;
} BCMI_TSCF_GEN3_XGXS_MDIO_BCST_PORT_ADDRr_t;

#define BCMI_TSCF_GEN3_XGXS_MDIO_BCST_PORT_ADDRr_CLR(r) (r).mdio_bcst_port_addr[0] = 0
#define BCMI_TSCF_GEN3_XGXS_MDIO_BCST_PORT_ADDRr_SET(r,d) (r).mdio_bcst_port_addr[0] = d
#define BCMI_TSCF_GEN3_XGXS_MDIO_BCST_PORT_ADDRr_GET(r) (r).mdio_bcst_port_addr[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_MDIO_BCST_PORT_ADDRr_MDIO_DRV_COMCLKf_GET(r) ((((r).mdio_bcst_port_addr[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_MDIO_BCST_PORT_ADDRr_MDIO_DRV_COMCLKf_SET(r,f) (r).mdio_bcst_port_addr[0]=(((r).mdio_bcst_port_addr[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_MDIO_BCST_PORT_ADDRr_MDIO_BRCST_PORT_ADDRf_GET(r) (((r).mdio_bcst_port_addr[0]) & 0x1f)
#define BCMI_TSCF_GEN3_XGXS_MDIO_BCST_PORT_ADDRr_MDIO_BRCST_PORT_ADDRf_SET(r,f) (r).mdio_bcst_port_addr[0]=(((r).mdio_bcst_port_addr[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access MDIO_BCST_PORT_ADDR.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_MDIO_BCST_PORT_ADDRr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_MDIO_BCST_PORT_ADDRr,(_r._mdio_bcst_port_addr))
#define BCMI_TSCF_GEN3_XGXS_WRITE_MDIO_BCST_PORT_ADDRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_MDIO_BCST_PORT_ADDRr,(_r._mdio_bcst_port_addr)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_MDIO_BCST_PORT_ADDRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_MDIO_BCST_PORT_ADDRr,(_r._mdio_bcst_port_addr))
#define BCMI_TSCF_GEN3_XGXS_READLN_MDIO_BCST_PORT_ADDRr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_MDIO_BCST_PORT_ADDRr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._mdio_bcst_port_addr))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_MDIO_BCST_PORT_ADDRr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_MDIO_BCST_PORT_ADDRr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._mdio_bcst_port_addr))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_MDIO_BCST_PORT_ADDRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_MDIO_BCST_PORT_ADDRr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._mdio_bcst_port_addr))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MDIO_BCST_PORT_ADDRr BCMI_TSCF_GEN3_XGXS_MDIO_BCST_PORT_ADDRr
#define MDIO_BCST_PORT_ADDRr_SIZE BCMI_TSCF_GEN3_XGXS_MDIO_BCST_PORT_ADDRr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_MDIO_BCST_PORT_ADDRr_t MDIO_BCST_PORT_ADDRr_t;
#define MDIO_BCST_PORT_ADDRr_CLR BCMI_TSCF_GEN3_XGXS_MDIO_BCST_PORT_ADDRr_CLR
#define MDIO_BCST_PORT_ADDRr_SET BCMI_TSCF_GEN3_XGXS_MDIO_BCST_PORT_ADDRr_SET
#define MDIO_BCST_PORT_ADDRr_GET BCMI_TSCF_GEN3_XGXS_MDIO_BCST_PORT_ADDRr_GET
#define MDIO_BCST_PORT_ADDRr_MDIO_DRV_COMCLKf_GET BCMI_TSCF_GEN3_XGXS_MDIO_BCST_PORT_ADDRr_MDIO_DRV_COMCLKf_GET
#define MDIO_BCST_PORT_ADDRr_MDIO_DRV_COMCLKf_SET BCMI_TSCF_GEN3_XGXS_MDIO_BCST_PORT_ADDRr_MDIO_DRV_COMCLKf_SET
#define MDIO_BCST_PORT_ADDRr_MDIO_BRCST_PORT_ADDRf_GET BCMI_TSCF_GEN3_XGXS_MDIO_BCST_PORT_ADDRr_MDIO_BRCST_PORT_ADDRf_GET
#define MDIO_BCST_PORT_ADDRr_MDIO_BRCST_PORT_ADDRf_SET BCMI_TSCF_GEN3_XGXS_MDIO_BCST_PORT_ADDRr_MDIO_BRCST_PORT_ADDRf_SET
#define READ_MDIO_BCST_PORT_ADDRr BCMI_TSCF_GEN3_XGXS_READ_MDIO_BCST_PORT_ADDRr
#define WRITE_MDIO_BCST_PORT_ADDRr BCMI_TSCF_GEN3_XGXS_WRITE_MDIO_BCST_PORT_ADDRr
#define MODIFY_MDIO_BCST_PORT_ADDRr BCMI_TSCF_GEN3_XGXS_MODIFY_MDIO_BCST_PORT_ADDRr
#define READLN_MDIO_BCST_PORT_ADDRr BCMI_TSCF_GEN3_XGXS_READLN_MDIO_BCST_PORT_ADDRr
#define WRITELN_MDIO_BCST_PORT_ADDRr BCMI_TSCF_GEN3_XGXS_WRITELN_MDIO_BCST_PORT_ADDRr
#define WRITEALL_MDIO_BCST_PORT_ADDRr BCMI_TSCF_GEN3_XGXS_WRITEALL_MDIO_BCST_PORT_ADDRr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_MDIO_BCST_PORT_ADDRr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  MDIO_MMD_SEL
 * BLOCKS:   MDIO_MMDSEL_AER_COM
 * REGADDR:  0xffdd
 * DEVAD:    1
 * DESC:     MMD Select
 * RESETVAL: 0x404d (16461)
 * ACCESS:   R/W
 * FIELDS:
 *     MDIO_DEV_CL22_EN When set and mdio_multi_mmds_en=1 then CL22 registers can be directlyaccessed through the MDIO serial data stream.
 *     MDIO_DEV_PMD_EN  When set and mdio_multi_mmds_en=1 then the PMD device=1 registers can be directlyaccessed through the MDIO serial data stream.
 *     MDIO_DEV_AN_EN   When set and mdio_multi_mmds_en=1 then the AN device=7 registers can be directlyaccessed through the MDIO serial data stream.
 *     MDIO_DEV_PHY_EN  When set and mdio_multi_mmds_en=1 then the PHY device=4 registers can be directlyaccessed through the MDIO serial data stream.
 *     MDIO_DEV_DTE_EN  When set and mdio_multi_mmds_en=1 then the DTE device=5 registers can be directlyaccessed through the MDIO serial data stream.
 *     MDIO_DEV_PCS_EN  When set and mdio_multi_mmds_en=1 then the PCS device=3 registers can be directlyaccessed through the MDIO serial data stream.
 *     MDIO_MULTI_MMDS_EN When set enables the multiple MMD functionality.  MD_ST is ignored andeach device can be accessed directly with the appropriate CL22 or CL45protocol.
 *     MDIO_MULTI_PRTS_EN When set enables multiple prtad functionality.  Each of the lanes'mmds can be accessed with consecutive PRTADs.  Lane 0 is accessedwith PRTAD_STRAP, lane 1 with PRTAD_STRAP+1, lane 2 with PRTAD_STRAP+2and lane 3 with PRTAD_STRAP+3.
 */
#define BCMI_TSCF_GEN3_XGXS_MDIO_MMD_SELr (0x0001ffdd | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_MDIO_MMD_SELr_SIZE 4

/*
 * This structure should be used to declare and program MDIO_MMD_SEL.
 */
typedef union BCMI_TSCF_GEN3_XGXS_MDIO_MMD_SELr_s {
	uint32_t v[1];
	uint32_t mdio_mmd_sel[1];
	uint32_t _mdio_mmd_sel;
} BCMI_TSCF_GEN3_XGXS_MDIO_MMD_SELr_t;

#define BCMI_TSCF_GEN3_XGXS_MDIO_MMD_SELr_CLR(r) (r).mdio_mmd_sel[0] = 0
#define BCMI_TSCF_GEN3_XGXS_MDIO_MMD_SELr_SET(r,d) (r).mdio_mmd_sel[0] = d
#define BCMI_TSCF_GEN3_XGXS_MDIO_MMD_SELr_GET(r) (r).mdio_mmd_sel[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_MDIO_MMD_SELr_MDIO_MULTI_PRTS_ENf_GET(r) ((((r).mdio_mmd_sel[0]) >> 15) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_MDIO_MMD_SELr_MDIO_MULTI_PRTS_ENf_SET(r,f) (r).mdio_mmd_sel[0]=(((r).mdio_mmd_sel[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_GEN3_XGXS_MDIO_MMD_SELr_MDIO_MULTI_MMDS_ENf_GET(r) ((((r).mdio_mmd_sel[0]) >> 14) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_MDIO_MMD_SELr_MDIO_MULTI_MMDS_ENf_SET(r,f) (r).mdio_mmd_sel[0]=(((r).mdio_mmd_sel[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_GEN3_XGXS_MDIO_MMD_SELr_MDIO_DEV_PCS_ENf_GET(r) ((((r).mdio_mmd_sel[0]) >> 6) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_MDIO_MMD_SELr_MDIO_DEV_PCS_ENf_SET(r,f) (r).mdio_mmd_sel[0]=(((r).mdio_mmd_sel[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_GEN3_XGXS_MDIO_MMD_SELr_MDIO_DEV_DTE_ENf_GET(r) ((((r).mdio_mmd_sel[0]) >> 5) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_MDIO_MMD_SELr_MDIO_DEV_DTE_ENf_SET(r,f) (r).mdio_mmd_sel[0]=(((r).mdio_mmd_sel[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_GEN3_XGXS_MDIO_MMD_SELr_MDIO_DEV_PHY_ENf_GET(r) ((((r).mdio_mmd_sel[0]) >> 4) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_MDIO_MMD_SELr_MDIO_DEV_PHY_ENf_SET(r,f) (r).mdio_mmd_sel[0]=(((r).mdio_mmd_sel[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_GEN3_XGXS_MDIO_MMD_SELr_MDIO_DEV_AN_ENf_GET(r) ((((r).mdio_mmd_sel[0]) >> 3) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_MDIO_MMD_SELr_MDIO_DEV_AN_ENf_SET(r,f) (r).mdio_mmd_sel[0]=(((r).mdio_mmd_sel[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_GEN3_XGXS_MDIO_MMD_SELr_MDIO_DEV_PMD_ENf_GET(r) ((((r).mdio_mmd_sel[0]) >> 2) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_MDIO_MMD_SELr_MDIO_DEV_PMD_ENf_SET(r,f) (r).mdio_mmd_sel[0]=(((r).mdio_mmd_sel[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_GEN3_XGXS_MDIO_MMD_SELr_MDIO_DEV_CL22_ENf_GET(r) (((r).mdio_mmd_sel[0]) & 0x1)
#define BCMI_TSCF_GEN3_XGXS_MDIO_MMD_SELr_MDIO_DEV_CL22_ENf_SET(r,f) (r).mdio_mmd_sel[0]=(((r).mdio_mmd_sel[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access MDIO_MMD_SEL.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_MDIO_MMD_SELr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_MDIO_MMD_SELr,(_r._mdio_mmd_sel))
#define BCMI_TSCF_GEN3_XGXS_WRITE_MDIO_MMD_SELr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_MDIO_MMD_SELr,(_r._mdio_mmd_sel)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_MDIO_MMD_SELr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_MDIO_MMD_SELr,(_r._mdio_mmd_sel))
#define BCMI_TSCF_GEN3_XGXS_READLN_MDIO_MMD_SELr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_MDIO_MMD_SELr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._mdio_mmd_sel))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_MDIO_MMD_SELr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_MDIO_MMD_SELr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._mdio_mmd_sel))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_MDIO_MMD_SELr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_MDIO_MMD_SELr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._mdio_mmd_sel))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MDIO_MMD_SELr BCMI_TSCF_GEN3_XGXS_MDIO_MMD_SELr
#define MDIO_MMD_SELr_SIZE BCMI_TSCF_GEN3_XGXS_MDIO_MMD_SELr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_MDIO_MMD_SELr_t MDIO_MMD_SELr_t;
#define MDIO_MMD_SELr_CLR BCMI_TSCF_GEN3_XGXS_MDIO_MMD_SELr_CLR
#define MDIO_MMD_SELr_SET BCMI_TSCF_GEN3_XGXS_MDIO_MMD_SELr_SET
#define MDIO_MMD_SELr_GET BCMI_TSCF_GEN3_XGXS_MDIO_MMD_SELr_GET
#define MDIO_MMD_SELr_MDIO_MULTI_PRTS_ENf_GET BCMI_TSCF_GEN3_XGXS_MDIO_MMD_SELr_MDIO_MULTI_PRTS_ENf_GET
#define MDIO_MMD_SELr_MDIO_MULTI_PRTS_ENf_SET BCMI_TSCF_GEN3_XGXS_MDIO_MMD_SELr_MDIO_MULTI_PRTS_ENf_SET
#define MDIO_MMD_SELr_MDIO_MULTI_MMDS_ENf_GET BCMI_TSCF_GEN3_XGXS_MDIO_MMD_SELr_MDIO_MULTI_MMDS_ENf_GET
#define MDIO_MMD_SELr_MDIO_MULTI_MMDS_ENf_SET BCMI_TSCF_GEN3_XGXS_MDIO_MMD_SELr_MDIO_MULTI_MMDS_ENf_SET
#define MDIO_MMD_SELr_MDIO_DEV_PCS_ENf_GET BCMI_TSCF_GEN3_XGXS_MDIO_MMD_SELr_MDIO_DEV_PCS_ENf_GET
#define MDIO_MMD_SELr_MDIO_DEV_PCS_ENf_SET BCMI_TSCF_GEN3_XGXS_MDIO_MMD_SELr_MDIO_DEV_PCS_ENf_SET
#define MDIO_MMD_SELr_MDIO_DEV_DTE_ENf_GET BCMI_TSCF_GEN3_XGXS_MDIO_MMD_SELr_MDIO_DEV_DTE_ENf_GET
#define MDIO_MMD_SELr_MDIO_DEV_DTE_ENf_SET BCMI_TSCF_GEN3_XGXS_MDIO_MMD_SELr_MDIO_DEV_DTE_ENf_SET
#define MDIO_MMD_SELr_MDIO_DEV_PHY_ENf_GET BCMI_TSCF_GEN3_XGXS_MDIO_MMD_SELr_MDIO_DEV_PHY_ENf_GET
#define MDIO_MMD_SELr_MDIO_DEV_PHY_ENf_SET BCMI_TSCF_GEN3_XGXS_MDIO_MMD_SELr_MDIO_DEV_PHY_ENf_SET
#define MDIO_MMD_SELr_MDIO_DEV_AN_ENf_GET BCMI_TSCF_GEN3_XGXS_MDIO_MMD_SELr_MDIO_DEV_AN_ENf_GET
#define MDIO_MMD_SELr_MDIO_DEV_AN_ENf_SET BCMI_TSCF_GEN3_XGXS_MDIO_MMD_SELr_MDIO_DEV_AN_ENf_SET
#define MDIO_MMD_SELr_MDIO_DEV_PMD_ENf_GET BCMI_TSCF_GEN3_XGXS_MDIO_MMD_SELr_MDIO_DEV_PMD_ENf_GET
#define MDIO_MMD_SELr_MDIO_DEV_PMD_ENf_SET BCMI_TSCF_GEN3_XGXS_MDIO_MMD_SELr_MDIO_DEV_PMD_ENf_SET
#define MDIO_MMD_SELr_MDIO_DEV_CL22_ENf_GET BCMI_TSCF_GEN3_XGXS_MDIO_MMD_SELr_MDIO_DEV_CL22_ENf_GET
#define MDIO_MMD_SELr_MDIO_DEV_CL22_ENf_SET BCMI_TSCF_GEN3_XGXS_MDIO_MMD_SELr_MDIO_DEV_CL22_ENf_SET
#define READ_MDIO_MMD_SELr BCMI_TSCF_GEN3_XGXS_READ_MDIO_MMD_SELr
#define WRITE_MDIO_MMD_SELr BCMI_TSCF_GEN3_XGXS_WRITE_MDIO_MMD_SELr
#define MODIFY_MDIO_MMD_SELr BCMI_TSCF_GEN3_XGXS_MODIFY_MDIO_MMD_SELr
#define READLN_MDIO_MMD_SELr BCMI_TSCF_GEN3_XGXS_READLN_MDIO_MMD_SELr
#define WRITELN_MDIO_MMD_SELr BCMI_TSCF_GEN3_XGXS_WRITELN_MDIO_MMD_SELr
#define WRITEALL_MDIO_MMD_SELr BCMI_TSCF_GEN3_XGXS_WRITEALL_MDIO_MMD_SELr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_MDIO_MMD_SELr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  MDIO_AER
 * BLOCKS:   MDIO_MMDSEL_AER_COM
 * REGADDR:  0xffde
 * DEVAD:    1
 * DESC:     AER
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MDIO_AER         Provides upper 16-bits of 32-bit address for mdio transactions
 */
#define BCMI_TSCF_GEN3_XGXS_MDIO_AERr (0x0001ffde | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_MDIO_AERr_SIZE 4

/*
 * This structure should be used to declare and program MDIO_AER.
 */
typedef union BCMI_TSCF_GEN3_XGXS_MDIO_AERr_s {
	uint32_t v[1];
	uint32_t mdio_aer[1];
	uint32_t _mdio_aer;
} BCMI_TSCF_GEN3_XGXS_MDIO_AERr_t;

#define BCMI_TSCF_GEN3_XGXS_MDIO_AERr_CLR(r) (r).mdio_aer[0] = 0
#define BCMI_TSCF_GEN3_XGXS_MDIO_AERr_SET(r,d) (r).mdio_aer[0] = d
#define BCMI_TSCF_GEN3_XGXS_MDIO_AERr_GET(r) (r).mdio_aer[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_MDIO_AERr_MDIO_AERf_GET(r) (((r).mdio_aer[0]) & 0xffff)
#define BCMI_TSCF_GEN3_XGXS_MDIO_AERr_MDIO_AERf_SET(r,f) (r).mdio_aer[0]=(((r).mdio_aer[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access MDIO_AER.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_MDIO_AERr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_MDIO_AERr,(_r._mdio_aer))
#define BCMI_TSCF_GEN3_XGXS_WRITE_MDIO_AERr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_MDIO_AERr,(_r._mdio_aer)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_MDIO_AERr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_MDIO_AERr,(_r._mdio_aer))
#define BCMI_TSCF_GEN3_XGXS_READLN_MDIO_AERr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_MDIO_AERr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._mdio_aer))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_MDIO_AERr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_MDIO_AERr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._mdio_aer))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_MDIO_AERr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_MDIO_AERr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._mdio_aer))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MDIO_AERr BCMI_TSCF_GEN3_XGXS_MDIO_AERr
#define MDIO_AERr_SIZE BCMI_TSCF_GEN3_XGXS_MDIO_AERr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_MDIO_AERr_t MDIO_AERr_t;
#define MDIO_AERr_CLR BCMI_TSCF_GEN3_XGXS_MDIO_AERr_CLR
#define MDIO_AERr_SET BCMI_TSCF_GEN3_XGXS_MDIO_AERr_SET
#define MDIO_AERr_GET BCMI_TSCF_GEN3_XGXS_MDIO_AERr_GET
#define MDIO_AERr_MDIO_AERf_GET BCMI_TSCF_GEN3_XGXS_MDIO_AERr_MDIO_AERf_GET
#define MDIO_AERr_MDIO_AERf_SET BCMI_TSCF_GEN3_XGXS_MDIO_AERr_MDIO_AERf_SET
#define READ_MDIO_AERr BCMI_TSCF_GEN3_XGXS_READ_MDIO_AERr
#define WRITE_MDIO_AERr BCMI_TSCF_GEN3_XGXS_WRITE_MDIO_AERr
#define MODIFY_MDIO_AERr BCMI_TSCF_GEN3_XGXS_MODIFY_MDIO_AERr
#define READLN_MDIO_AERr BCMI_TSCF_GEN3_XGXS_READLN_MDIO_AERr
#define WRITELN_MDIO_AERr BCMI_TSCF_GEN3_XGXS_WRITELN_MDIO_AERr
#define WRITEALL_MDIO_AERr BCMI_TSCF_GEN3_XGXS_WRITEALL_MDIO_AERr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_MDIO_AERr'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_GEN3_XGXS
 * REGISTER:  BLK_ADDR
 * BLOCKS:   MDIO_BLK_ADDR
 * REGADDR:  0xffdf
 * DEVAD:    1
 * DESC:     BLK_ADDR
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MDIO_BLK_ADDR    Block address (used for clause 22 transactions to get the address bits 14:4)
 */
#define BCMI_TSCF_GEN3_XGXS_BLK_ADDRr (0x0001ffdf | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_GEN3_XGXS_BLK_ADDRr_SIZE 4

/*
 * This structure should be used to declare and program BLK_ADDR.
 */
typedef union BCMI_TSCF_GEN3_XGXS_BLK_ADDRr_s {
	uint32_t v[1];
	uint32_t blk_addr[1];
	uint32_t _blk_addr;
} BCMI_TSCF_GEN3_XGXS_BLK_ADDRr_t;

#define BCMI_TSCF_GEN3_XGXS_BLK_ADDRr_CLR(r) (r).blk_addr[0] = 0
#define BCMI_TSCF_GEN3_XGXS_BLK_ADDRr_SET(r,d) (r).blk_addr[0] = d
#define BCMI_TSCF_GEN3_XGXS_BLK_ADDRr_GET(r) (r).blk_addr[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_GEN3_XGXS_BLK_ADDRr_MDIO_BLK_ADDRf_GET(r) ((((r).blk_addr[0]) >> 4) & 0x7ff)
#define BCMI_TSCF_GEN3_XGXS_BLK_ADDRr_MDIO_BLK_ADDRf_SET(r,f) (r).blk_addr[0]=(((r).blk_addr[0] & ~((uint32_t)0x7ff << 4)) | ((((uint32_t)f) & 0x7ff) << 4)) | (2047 << (16 + 4))

/*
 * These macros can be used to access BLK_ADDR.
 */
#define BCMI_TSCF_GEN3_XGXS_READ_BLK_ADDRr(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_BLK_ADDRr,(_r._blk_addr))
#define BCMI_TSCF_GEN3_XGXS_WRITE_BLK_ADDRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_BLK_ADDRr,(_r._blk_addr)&0xffff)
#define BCMI_TSCF_GEN3_XGXS_MODIFY_BLK_ADDRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_BLK_ADDRr,(_r._blk_addr))
#define BCMI_TSCF_GEN3_XGXS_READLN_BLK_ADDRr(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_GEN3_XGXS_BLK_ADDRr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._blk_addr))
#define BCMI_TSCF_GEN3_XGXS_WRITELN_BLK_ADDRr(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_BLK_ADDRr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._blk_addr))
#define BCMI_TSCF_GEN3_XGXS_WRITEALL_BLK_ADDRr(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_GEN3_XGXS_BLK_ADDRr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._blk_addr))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define BLK_ADDRr BCMI_TSCF_GEN3_XGXS_BLK_ADDRr
#define BLK_ADDRr_SIZE BCMI_TSCF_GEN3_XGXS_BLK_ADDRr_SIZE
typedef BCMI_TSCF_GEN3_XGXS_BLK_ADDRr_t BLK_ADDRr_t;
#define BLK_ADDRr_CLR BCMI_TSCF_GEN3_XGXS_BLK_ADDRr_CLR
#define BLK_ADDRr_SET BCMI_TSCF_GEN3_XGXS_BLK_ADDRr_SET
#define BLK_ADDRr_GET BCMI_TSCF_GEN3_XGXS_BLK_ADDRr_GET
#define BLK_ADDRr_MDIO_BLK_ADDRf_GET BCMI_TSCF_GEN3_XGXS_BLK_ADDRr_MDIO_BLK_ADDRf_GET
#define BLK_ADDRr_MDIO_BLK_ADDRf_SET BCMI_TSCF_GEN3_XGXS_BLK_ADDRr_MDIO_BLK_ADDRf_SET
#define READ_BLK_ADDRr BCMI_TSCF_GEN3_XGXS_READ_BLK_ADDRr
#define WRITE_BLK_ADDRr BCMI_TSCF_GEN3_XGXS_WRITE_BLK_ADDRr
#define MODIFY_BLK_ADDRr BCMI_TSCF_GEN3_XGXS_MODIFY_BLK_ADDRr
#define READLN_BLK_ADDRr BCMI_TSCF_GEN3_XGXS_READLN_BLK_ADDRr
#define WRITELN_BLK_ADDRr BCMI_TSCF_GEN3_XGXS_WRITELN_BLK_ADDRr
#define WRITEALL_BLK_ADDRr BCMI_TSCF_GEN3_XGXS_WRITEALL_BLK_ADDRr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_GEN3_XGXS_BLK_ADDRr'
 */




#endif /* __BCMI_TSCF_GEN3_XGXS_DEFS_H__ */
