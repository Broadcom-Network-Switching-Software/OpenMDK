/*----------------------------------------------------------------------
 * This software is governed by the Broadcom Switch APIs license.
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenMDK/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 *
 *  Broadcom Corporation
 *  Proprietary and Confidential information
 *  All rights reserved
 *  This source file is the property of Broadcom Corporation, and
 *  may not be copied or distributed in any isomorphic form without the
 *  prior written consent of Broadcom Corporation.
 *----------------------------------------------------------------------
 *  Description: Externization of all DPI functions needed by TEMod.
 *---------------------------------------------------------------------*/

/*!
\file qmod_phyreg.h Declares verilog interface functions.
This file contains declarations of functions that are necessary to 
hook up TEMod to various verilog platforms. The drivers of TSCMod are
hooked to verilog tasks as a first level interface to the actual drivers in the 
verilog testbench. These 'C' functions and verilog tasks are attached via 
a mechanism called 'DPI' (direct programming interface) supported by all
verilog simulators.  Note that C platforms need no special attachments.
*/

#ifndef   _QMOD_PHYREG_H_
#define   _QMOD_PHYREG_H_

#include "qmod_main.h"  
#include "qmod_defines.h"

#if defined (_MDK_TEMOD_)
extern int cdk_xgs_miim_read(int u, uint32_t pa, uint32_t ra, uint32_t *val);
extern int cdk_xgs_miim_write(int u, uint32_t pa, uint32_t ra, uint32_t val);
#endif

#ifdef _DV_TB_
/* normally the externs are generated by irun/vcs -dpiheader. */
/* Manually typing this in to reduce header files. */
#ifdef CADENCE
/* svdpi.h to be conditional to cadence (or irun). vcs does not have this. */
#include "svdpi.h"
#endif /* CADENCE */
#include "svdpi.h"

extern void qtc_dv_wait (int delay);

extern void dv_slam_read_reg  (int core, int addr, int *data);
extern void dv_slam_write_reg (int core, int addr, int  data);
extern void dv_slam_modify_reg(int core, int addr, int  data, int m);

extern void qtc_dv_read_reg  (int unit, int core, int addr, int *data);
extern void qtc_dv_write_reg (int unit, int core, int addr, int  data);
extern void qtc_dv_modify_reg(int unit, int core, int addr, int  data, int m);

#endif /* _DV_TB_ */

extern int  qmod_reg_aer_read  (uint32_t u,qmod_st* w,uint32_t a,uint16_t *d);
extern int  qmod_reg_aer_write (uint32_t u,qmod_st* w,uint32_t a,uint16_t  d);
extern int  qmod_reg_aer_modify(uint32_t u,qmod_st* w,uint32_t a,uint16_t d,uint16_t m);
extern int qmod_tsc_iblk_read(qmod_st *pc, uint32_t addr, uint32_t *data);
extern int qmod_tsc_iblk_write(qmod_st *pc, uint32_t addr, uint32_t data); 

/*
extern int  qmod_cl22_read  (qmod_st* ws,uint32_t addr,uint16_t *data);
extern int  qmod_cl22_write (qmod_st* ws,uint32_t addr,uint16_t data);
extern int  qmod_cl45_read  (qmod_st* ws,uint32_t addr,uint16_t *data);
extern int  qmod_cl45_write (qmod_st* ws,uint32_t addr,uint16_t data);
*/

extern void qmod_timeout_init(soc_timeout_t *to, uint32_t usec, int min_polls);  
extern int  qmod_timeout_check(qmod_st* ws,soc_timeout_t *to);  
extern int  qmod_regbit_set_wait_check(qmod_st* w,int r,int b,int bt,int to); 
#endif   /*  _QMOD_PHYREG_H_ */
