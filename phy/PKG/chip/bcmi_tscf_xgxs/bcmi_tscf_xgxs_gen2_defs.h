#ifndef __BCMI_TSCF_XGXS_GEN2_DEFS_H__
#define __BCMI_TSCF_XGXS_GEN2_DEFS_H__
/*******************************************************************************
 *
 * This software is governed by the Broadcom Switch APIs license.
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenMDK/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated from the registers file.
 * Edits to this file will be lost when it is regenerated.
 *
 * Definition file for the BCMI_TSCF_XGXS.
 * This file provides all basic definitions required to program the BCMI_TSCF_XGXS.
 *
 * This file is autogenerated. Please do not edit.
 */

#ifndef _DV_TB_
#include <phymod/acc/phymod_tsc_iblk.h>
#endif /* _DV_TB_ */

/*******************************************************************************
 *
 *                    CHIP DEFINITIONS BEGIN HERE
 */



/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PHYID2_GEN2
 * BLOCKS:   CL22_B0
 * REGADDR:  0x0002
 * DESC:     IEEE phyID2 Register
 * RESETVAL: 0x600d (24589)
 * ACCESS:   R/O
 * FIELDS:
 *     REGID1           PHYID2 register
 */
#define BCMI_TSCF_XGXS_PHYID2_GEN2r (0x00000002 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PHYID2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PHYID2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PHYID2_GEN2r_s {
	uint32_t v[1];
	uint32_t phyid2_gen2[1];
	uint32_t _phyid2_gen2;
} BCMI_TSCF_XGXS_PHYID2_GEN2r_t;

#define BCMI_TSCF_XGXS_PHYID2_GEN2r_CLR(r) (r).phyid2_gen2[0] = 0
#define BCMI_TSCF_XGXS_PHYID2_GEN2r_SET(r,d) (r).phyid2_gen2[0] = d
#define BCMI_TSCF_XGXS_PHYID2_GEN2r_GET(r) (r).phyid2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PHYID2_GEN2r_REGID1f_GET(r) (((r).phyid2_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_PHYID2_GEN2r_REGID1f_SET(r,f) (r).phyid2_gen2[0]=(((r).phyid2_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PHYID2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PHYID2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PHYID2_GEN2r,(_r._phyid2_gen2))
#define BCMI_TSCF_XGXS_WRITE_PHYID2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PHYID2_GEN2r,(_r._phyid2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PHYID2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PHYID2_GEN2r,(_r._phyid2_gen2))
#define BCMI_TSCF_XGXS_READLN_PHYID2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PHYID2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._phyid2_gen2))
#define BCMI_TSCF_XGXS_WRITELN_PHYID2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PHYID2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._phyid2_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_PHYID2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PHYID2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._phyid2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PHYID2_GEN2r BCMI_TSCF_XGXS_PHYID2_GEN2r
#define PHYID2_GEN2r_SIZE BCMI_TSCF_XGXS_PHYID2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PHYID2_GEN2r_t PHYID2_GEN2r_t;
#define PHYID2_GEN2r_CLR BCMI_TSCF_XGXS_PHYID2_GEN2r_CLR
#define PHYID2_GEN2r_SET BCMI_TSCF_XGXS_PHYID2_GEN2r_SET
#define PHYID2_GEN2r_GET BCMI_TSCF_XGXS_PHYID2_GEN2r_GET
#define PHYID2_GEN2r_REGID1f_GET BCMI_TSCF_XGXS_PHYID2_GEN2r_REGID1f_GET
#define PHYID2_GEN2r_REGID1f_SET BCMI_TSCF_XGXS_PHYID2_GEN2r_REGID1f_SET
#define READ_PHYID2_GEN2r BCMI_TSCF_XGXS_READ_PHYID2_GEN2r
#define WRITE_PHYID2_GEN2r BCMI_TSCF_XGXS_WRITE_PHYID2_GEN2r
#define MODIFY_PHYID2_GEN2r BCMI_TSCF_XGXS_MODIFY_PHYID2_GEN2r
#define READLN_PHYID2_GEN2r BCMI_TSCF_XGXS_READLN_PHYID2_GEN2r
#define WRITELN_PHYID2_GEN2r BCMI_TSCF_XGXS_WRITELN_PHYID2_GEN2r
#define WRITEALL_PHYID2_GEN2r BCMI_TSCF_XGXS_WRITEALL_PHYID2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PHYID2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PHYID3_GEN2
 * BLOCKS:   CL22_B0
 * REGADDR:  0x0003
 * DESC:     IEEE phyID3 Register
 * RESETVAL: 0x8770 (34672)
 * ACCESS:   R/O
 * FIELDS:
 *     REGID2           PHYID3 register
 */
#define BCMI_TSCF_XGXS_PHYID3_GEN2r (0x00000003 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PHYID3_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PHYID3_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PHYID3_GEN2r_s {
	uint32_t v[1];
	uint32_t phyid3_gen2[1];
	uint32_t _phyid3_gen2;
} BCMI_TSCF_XGXS_PHYID3_GEN2r_t;

#define BCMI_TSCF_XGXS_PHYID3_GEN2r_CLR(r) (r).phyid3_gen2[0] = 0
#define BCMI_TSCF_XGXS_PHYID3_GEN2r_SET(r,d) (r).phyid3_gen2[0] = d
#define BCMI_TSCF_XGXS_PHYID3_GEN2r_GET(r) (r).phyid3_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PHYID3_GEN2r_REGID2f_GET(r) (((r).phyid3_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_PHYID3_GEN2r_REGID2f_SET(r,f) (r).phyid3_gen2[0]=(((r).phyid3_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PHYID3_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PHYID3_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PHYID3_GEN2r,(_r._phyid3_gen2))
#define BCMI_TSCF_XGXS_WRITE_PHYID3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PHYID3_GEN2r,(_r._phyid3_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PHYID3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PHYID3_GEN2r,(_r._phyid3_gen2))
#define BCMI_TSCF_XGXS_READLN_PHYID3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PHYID3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._phyid3_gen2))
#define BCMI_TSCF_XGXS_WRITELN_PHYID3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PHYID3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._phyid3_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_PHYID3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PHYID3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._phyid3_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PHYID3_GEN2r BCMI_TSCF_XGXS_PHYID3_GEN2r
#define PHYID3_GEN2r_SIZE BCMI_TSCF_XGXS_PHYID3_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PHYID3_GEN2r_t PHYID3_GEN2r_t;
#define PHYID3_GEN2r_CLR BCMI_TSCF_XGXS_PHYID3_GEN2r_CLR
#define PHYID3_GEN2r_SET BCMI_TSCF_XGXS_PHYID3_GEN2r_SET
#define PHYID3_GEN2r_GET BCMI_TSCF_XGXS_PHYID3_GEN2r_GET
#define PHYID3_GEN2r_REGID2f_GET BCMI_TSCF_XGXS_PHYID3_GEN2r_REGID2f_GET
#define PHYID3_GEN2r_REGID2f_SET BCMI_TSCF_XGXS_PHYID3_GEN2r_REGID2f_SET
#define READ_PHYID3_GEN2r BCMI_TSCF_XGXS_READ_PHYID3_GEN2r
#define WRITE_PHYID3_GEN2r BCMI_TSCF_XGXS_WRITE_PHYID3_GEN2r
#define MODIFY_PHYID3_GEN2r BCMI_TSCF_XGXS_MODIFY_PHYID3_GEN2r
#define READLN_PHYID3_GEN2r BCMI_TSCF_XGXS_READLN_PHYID3_GEN2r
#define WRITELN_PHYID3_GEN2r BCMI_TSCF_XGXS_WRITELN_PHYID3_GEN2r
#define WRITEALL_PHYID3_GEN2r BCMI_TSCF_XGXS_WRITEALL_PHYID3_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PHYID3_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  MAIN0_SETUP_GEN2
 * BLOCKS:   MAIN0
 * REGADDR:  0x9000
 * DESC:     main control register
 * RESETVAL: 0x180 (384)
 * ACCESS:   R/W
 * FIELDS:
 *     TSC_CLK_CTRL     1'b0 - tsc_clk frequency : PLL/401'b1 - tsc_clk frequency : PLL/48
 *     CL73_VCO         1'b0 - VCO frequency : 20.625G1'b1 - VCO frequency : 25.78125
 *     STAND_ALONE_MODE This mode is used for testing without a MAC.The credits from the TSC and loopbed back into the TSC as DVs.The same is true for the PORT and TDM fields
 *     SINGLE_PORT_MODE Indicates TSC is in single port mode.  Used by AN logic to determine whether to reset the PLL after AN completes.If set, when AN completes, the PLL will be reset to operate consistent with the resolved AN speed.If not set, the PLL will not change once AN completes.
 *     PORT_MODE_SEL    port configuration selectsTRI_1_PORT - lanes 2,3 aggregated and 0,1 as 3 portsTRI_2_PORT - lanes 1,0 aggregated and 3,2 as 3 ports
 *     REFCLK_SEL       Specifies refclk frequency
 *     CL72_EN          Per LOGICAL LANE control to enable cl72
 *     MASTER_PORT_NUM  Port that will control PMD core logic and PLL reset0 : port 0 is master1 : port 1 is master2 : port 2 is master3 : port 3 is master
 */
#define BCMI_TSCF_XGXS_MAIN0_SETUP_GEN2r (0x00109000 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_MAIN0_SETUP_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program MAIN0_SETUP_GEN2.
 */
typedef union BCMI_TSCF_XGXS_MAIN0_SETUP_GEN2r_s {
	uint32_t v[1];
	uint32_t main0_setup_gen2[1];
	uint32_t _main0_setup_gen2;
} BCMI_TSCF_XGXS_MAIN0_SETUP_GEN2r_t;

#define BCMI_TSCF_XGXS_MAIN0_SETUP_GEN2r_CLR(r) (r).main0_setup_gen2[0] = 0
#define BCMI_TSCF_XGXS_MAIN0_SETUP_GEN2r_SET(r,d) (r).main0_setup_gen2[0] = d
#define BCMI_TSCF_XGXS_MAIN0_SETUP_GEN2r_GET(r) (r).main0_setup_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_MAIN0_SETUP_GEN2r_MASTER_PORT_NUMf_GET(r) ((((r).main0_setup_gen2[0]) >> 14) & 0x3)
#define BCMI_TSCF_XGXS_MAIN0_SETUP_GEN2r_MASTER_PORT_NUMf_SET(r,f) (r).main0_setup_gen2[0]=(((r).main0_setup_gen2[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_TSCF_XGXS_MAIN0_SETUP_GEN2r_CL72_ENf_GET(r) ((((r).main0_setup_gen2[0]) >> 10) & 0xf)
#define BCMI_TSCF_XGXS_MAIN0_SETUP_GEN2r_CL72_ENf_SET(r,f) (r).main0_setup_gen2[0]=(((r).main0_setup_gen2[0] & ~((uint32_t)0xf << 10)) | ((((uint32_t)f) & 0xf) << 10)) | (15 << (16 + 10))
#define BCMI_TSCF_XGXS_MAIN0_SETUP_GEN2r_REFCLK_SELf_GET(r) ((((r).main0_setup_gen2[0]) >> 7) & 0x7)
#define BCMI_TSCF_XGXS_MAIN0_SETUP_GEN2r_REFCLK_SELf_SET(r,f) (r).main0_setup_gen2[0]=(((r).main0_setup_gen2[0] & ~((uint32_t)0x7 << 7)) | ((((uint32_t)f) & 0x7) << 7)) | (7 << (16 + 7))
#define BCMI_TSCF_XGXS_MAIN0_SETUP_GEN2r_PORT_MODE_SELf_GET(r) ((((r).main0_setup_gen2[0]) >> 4) & 0x7)
#define BCMI_TSCF_XGXS_MAIN0_SETUP_GEN2r_PORT_MODE_SELf_SET(r,f) (r).main0_setup_gen2[0]=(((r).main0_setup_gen2[0] & ~((uint32_t)0x7 << 4)) | ((((uint32_t)f) & 0x7) << 4)) | (7 << (16 + 4))
#define BCMI_TSCF_XGXS_MAIN0_SETUP_GEN2r_SINGLE_PORT_MODEf_GET(r) ((((r).main0_setup_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_MAIN0_SETUP_GEN2r_SINGLE_PORT_MODEf_SET(r,f) (r).main0_setup_gen2[0]=(((r).main0_setup_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_MAIN0_SETUP_GEN2r_STAND_ALONE_MODEf_GET(r) ((((r).main0_setup_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_MAIN0_SETUP_GEN2r_STAND_ALONE_MODEf_SET(r,f) (r).main0_setup_gen2[0]=(((r).main0_setup_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_MAIN0_SETUP_GEN2r_CL73_VCOf_GET(r) ((((r).main0_setup_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_MAIN0_SETUP_GEN2r_CL73_VCOf_SET(r,f) (r).main0_setup_gen2[0]=(((r).main0_setup_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_MAIN0_SETUP_GEN2r_TSC_CLK_CTRLf_GET(r) (((r).main0_setup_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_MAIN0_SETUP_GEN2r_TSC_CLK_CTRLf_SET(r,f) (r).main0_setup_gen2[0]=(((r).main0_setup_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access MAIN0_SETUP_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_MAIN0_SETUP_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_MAIN0_SETUP_GEN2r,(_r._main0_setup_gen2))
#define BCMI_TSCF_XGXS_WRITE_MAIN0_SETUP_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_MAIN0_SETUP_GEN2r,(_r._main0_setup_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_MAIN0_SETUP_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_MAIN0_SETUP_GEN2r,(_r._main0_setup_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define MAIN0_SETUP_GEN2r BCMI_TSCF_XGXS_MAIN0_SETUP_GEN2r
#define MAIN0_SETUP_GEN2r_SIZE BCMI_TSCF_XGXS_MAIN0_SETUP_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_MAIN0_SETUP_GEN2r_t MAIN0_SETUP_GEN2r_t;
#define MAIN0_SETUP_GEN2r_CLR BCMI_TSCF_XGXS_MAIN0_SETUP_GEN2r_CLR
#define MAIN0_SETUP_GEN2r_SET BCMI_TSCF_XGXS_MAIN0_SETUP_GEN2r_SET
#define MAIN0_SETUP_GEN2r_GET BCMI_TSCF_XGXS_MAIN0_SETUP_GEN2r_GET
#define MAIN0_SETUP_GEN2r_MASTER_PORT_NUMf_GET BCMI_TSCF_XGXS_MAIN0_SETUP_GEN2r_MASTER_PORT_NUMf_GET
#define MAIN0_SETUP_GEN2r_MASTER_PORT_NUMf_SET BCMI_TSCF_XGXS_MAIN0_SETUP_GEN2r_MASTER_PORT_NUMf_SET
#define MAIN0_SETUP_GEN2r_CL72_ENf_GET BCMI_TSCF_XGXS_MAIN0_SETUP_GEN2r_CL72_ENf_GET
#define MAIN0_SETUP_GEN2r_CL72_ENf_SET BCMI_TSCF_XGXS_MAIN0_SETUP_GEN2r_CL72_ENf_SET
#define MAIN0_SETUP_GEN2r_REFCLK_SELf_GET BCMI_TSCF_XGXS_MAIN0_SETUP_GEN2r_REFCLK_SELf_GET
#define MAIN0_SETUP_GEN2r_REFCLK_SELf_SET BCMI_TSCF_XGXS_MAIN0_SETUP_GEN2r_REFCLK_SELf_SET
#define MAIN0_SETUP_GEN2r_PORT_MODE_SELf_GET BCMI_TSCF_XGXS_MAIN0_SETUP_GEN2r_PORT_MODE_SELf_GET
#define MAIN0_SETUP_GEN2r_PORT_MODE_SELf_SET BCMI_TSCF_XGXS_MAIN0_SETUP_GEN2r_PORT_MODE_SELf_SET
#define MAIN0_SETUP_GEN2r_SINGLE_PORT_MODEf_GET BCMI_TSCF_XGXS_MAIN0_SETUP_GEN2r_SINGLE_PORT_MODEf_GET
#define MAIN0_SETUP_GEN2r_SINGLE_PORT_MODEf_SET BCMI_TSCF_XGXS_MAIN0_SETUP_GEN2r_SINGLE_PORT_MODEf_SET
#define MAIN0_SETUP_GEN2r_STAND_ALONE_MODEf_GET BCMI_TSCF_XGXS_MAIN0_SETUP_GEN2r_STAND_ALONE_MODEf_GET
#define MAIN0_SETUP_GEN2r_STAND_ALONE_MODEf_SET BCMI_TSCF_XGXS_MAIN0_SETUP_GEN2r_STAND_ALONE_MODEf_SET
#define MAIN0_SETUP_GEN2r_CL73_VCOf_GET BCMI_TSCF_XGXS_MAIN0_SETUP_GEN2r_CL73_VCOf_GET
#define MAIN0_SETUP_GEN2r_CL73_VCOf_SET BCMI_TSCF_XGXS_MAIN0_SETUP_GEN2r_CL73_VCOf_SET
#define MAIN0_SETUP_GEN2r_TSC_CLK_CTRLf_GET BCMI_TSCF_XGXS_MAIN0_SETUP_GEN2r_TSC_CLK_CTRLf_GET
#define MAIN0_SETUP_GEN2r_TSC_CLK_CTRLf_SET BCMI_TSCF_XGXS_MAIN0_SETUP_GEN2r_TSC_CLK_CTRLf_SET
#define READ_MAIN0_SETUP_GEN2r BCMI_TSCF_XGXS_READ_MAIN0_SETUP_GEN2r
#define WRITE_MAIN0_SETUP_GEN2r BCMI_TSCF_XGXS_WRITE_MAIN0_SETUP_GEN2r
#define MODIFY_MAIN0_SETUP_GEN2r BCMI_TSCF_XGXS_MODIFY_MAIN0_SETUP_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_MAIN0_SETUP_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  MAIN0_SYNCE_CTL_GEN2
 * BLOCKS:   MAIN0
 * REGADDR:  0x9001
 * DESC:     SyncE mode register
 * RESETVAL: 0xaa (170)
 * ACCESS:   R/W
 * FIELDS:
 *     SYNCE_MODE_PHY_LANE0 this is for syncE stage1 mode control
 *     SYNCE_MODE_PHY_LANE1 this is for syncE stage1 mode control
 *     SYNCE_MODE_PHY_LANE2 this is for syncE stage1 mode control
 *     SYNCE_MODE_PHY_LANE3 this is for syncE stage1 mode control
 */
#define BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_GEN2r (0x00109001 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program MAIN0_SYNCE_CTL_GEN2.
 */
typedef union BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_GEN2r_s {
	uint32_t v[1];
	uint32_t main0_synce_ctl_gen2[1];
	uint32_t _main0_synce_ctl_gen2;
} BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_GEN2r_t;

#define BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_GEN2r_CLR(r) (r).main0_synce_ctl_gen2[0] = 0
#define BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_GEN2r_SET(r,d) (r).main0_synce_ctl_gen2[0] = d
#define BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_GEN2r_GET(r) (r).main0_synce_ctl_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_GEN2r_SYNCE_MODE_PHY_LANE3f_GET(r) ((((r).main0_synce_ctl_gen2[0]) >> 6) & 0x3)
#define BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_GEN2r_SYNCE_MODE_PHY_LANE3f_SET(r,f) (r).main0_synce_ctl_gen2[0]=(((r).main0_synce_ctl_gen2[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6)) | (3 << (16 + 6))
#define BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_GEN2r_SYNCE_MODE_PHY_LANE2f_GET(r) ((((r).main0_synce_ctl_gen2[0]) >> 4) & 0x3)
#define BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_GEN2r_SYNCE_MODE_PHY_LANE2f_SET(r,f) (r).main0_synce_ctl_gen2[0]=(((r).main0_synce_ctl_gen2[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_GEN2r_SYNCE_MODE_PHY_LANE1f_GET(r) ((((r).main0_synce_ctl_gen2[0]) >> 2) & 0x3)
#define BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_GEN2r_SYNCE_MODE_PHY_LANE1f_SET(r,f) (r).main0_synce_ctl_gen2[0]=(((r).main0_synce_ctl_gen2[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2)) | (3 << (16 + 2))
#define BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_GEN2r_SYNCE_MODE_PHY_LANE0f_GET(r) (((r).main0_synce_ctl_gen2[0]) & 0x3)
#define BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_GEN2r_SYNCE_MODE_PHY_LANE0f_SET(r,f) (r).main0_synce_ctl_gen2[0]=(((r).main0_synce_ctl_gen2[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access MAIN0_SYNCE_CTL_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_MAIN0_SYNCE_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_GEN2r,(_r._main0_synce_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITE_MAIN0_SYNCE_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_GEN2r,(_r._main0_synce_ctl_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_MAIN0_SYNCE_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_GEN2r,(_r._main0_synce_ctl_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define MAIN0_SYNCE_CTL_GEN2r BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_GEN2r
#define MAIN0_SYNCE_CTL_GEN2r_SIZE BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_GEN2r_t MAIN0_SYNCE_CTL_GEN2r_t;
#define MAIN0_SYNCE_CTL_GEN2r_CLR BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_GEN2r_CLR
#define MAIN0_SYNCE_CTL_GEN2r_SET BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_GEN2r_SET
#define MAIN0_SYNCE_CTL_GEN2r_GET BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_GEN2r_GET
#define MAIN0_SYNCE_CTL_GEN2r_SYNCE_MODE_PHY_LANE3f_GET BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_GEN2r_SYNCE_MODE_PHY_LANE3f_GET
#define MAIN0_SYNCE_CTL_GEN2r_SYNCE_MODE_PHY_LANE3f_SET BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_GEN2r_SYNCE_MODE_PHY_LANE3f_SET
#define MAIN0_SYNCE_CTL_GEN2r_SYNCE_MODE_PHY_LANE2f_GET BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_GEN2r_SYNCE_MODE_PHY_LANE2f_GET
#define MAIN0_SYNCE_CTL_GEN2r_SYNCE_MODE_PHY_LANE2f_SET BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_GEN2r_SYNCE_MODE_PHY_LANE2f_SET
#define MAIN0_SYNCE_CTL_GEN2r_SYNCE_MODE_PHY_LANE1f_GET BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_GEN2r_SYNCE_MODE_PHY_LANE1f_GET
#define MAIN0_SYNCE_CTL_GEN2r_SYNCE_MODE_PHY_LANE1f_SET BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_GEN2r_SYNCE_MODE_PHY_LANE1f_SET
#define MAIN0_SYNCE_CTL_GEN2r_SYNCE_MODE_PHY_LANE0f_GET BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_GEN2r_SYNCE_MODE_PHY_LANE0f_GET
#define MAIN0_SYNCE_CTL_GEN2r_SYNCE_MODE_PHY_LANE0f_SET BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_GEN2r_SYNCE_MODE_PHY_LANE0f_SET
#define READ_MAIN0_SYNCE_CTL_GEN2r BCMI_TSCF_XGXS_READ_MAIN0_SYNCE_CTL_GEN2r
#define WRITE_MAIN0_SYNCE_CTL_GEN2r BCMI_TSCF_XGXS_WRITE_MAIN0_SYNCE_CTL_GEN2r
#define MODIFY_MAIN0_SYNCE_CTL_GEN2r BCMI_TSCF_XGXS_MODIFY_MAIN0_SYNCE_CTL_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  MAIN0_SYNCE_CTL_STAGE0_GEN2
 * BLOCKS:   MAIN0
 * REGADDR:  0x9002
 * DESC:     SyncE mode register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     SYNCE_STAGE0_MODE_PHY_LANE0 this is for syncE stage0 mode control
 *     SYNCE_STAGE0_MODE_PHY_LANE1 this is for syncE stage0 mode control
 *     SYNCE_STAGE0_MODE_PHY_LANE2 this is for syncE stage0 mode control
 *     SYNCE_STAGE0_MODE_PHY_LANE3 this is for syncE stage0 mode control
 */
#define BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_STAGE0_GEN2r (0x00109002 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_STAGE0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program MAIN0_SYNCE_CTL_STAGE0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_STAGE0_GEN2r_s {
	uint32_t v[1];
	uint32_t main0_synce_ctl_stage0_gen2[1];
	uint32_t _main0_synce_ctl_stage0_gen2;
} BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_STAGE0_GEN2r_t;

#define BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_STAGE0_GEN2r_CLR(r) (r).main0_synce_ctl_stage0_gen2[0] = 0
#define BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_STAGE0_GEN2r_SET(r,d) (r).main0_synce_ctl_stage0_gen2[0] = d
#define BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_STAGE0_GEN2r_GET(r) (r).main0_synce_ctl_stage0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_STAGE0_GEN2r_SYNCE_STAGE0_MODE_PHY_LANE3f_GET(r) ((((r).main0_synce_ctl_stage0_gen2[0]) >> 6) & 0x3)
#define BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_STAGE0_GEN2r_SYNCE_STAGE0_MODE_PHY_LANE3f_SET(r,f) (r).main0_synce_ctl_stage0_gen2[0]=(((r).main0_synce_ctl_stage0_gen2[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6)) | (3 << (16 + 6))
#define BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_STAGE0_GEN2r_SYNCE_STAGE0_MODE_PHY_LANE2f_GET(r) ((((r).main0_synce_ctl_stage0_gen2[0]) >> 4) & 0x3)
#define BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_STAGE0_GEN2r_SYNCE_STAGE0_MODE_PHY_LANE2f_SET(r,f) (r).main0_synce_ctl_stage0_gen2[0]=(((r).main0_synce_ctl_stage0_gen2[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_STAGE0_GEN2r_SYNCE_STAGE0_MODE_PHY_LANE1f_GET(r) ((((r).main0_synce_ctl_stage0_gen2[0]) >> 2) & 0x3)
#define BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_STAGE0_GEN2r_SYNCE_STAGE0_MODE_PHY_LANE1f_SET(r,f) (r).main0_synce_ctl_stage0_gen2[0]=(((r).main0_synce_ctl_stage0_gen2[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2)) | (3 << (16 + 2))
#define BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_STAGE0_GEN2r_SYNCE_STAGE0_MODE_PHY_LANE0f_GET(r) (((r).main0_synce_ctl_stage0_gen2[0]) & 0x3)
#define BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_STAGE0_GEN2r_SYNCE_STAGE0_MODE_PHY_LANE0f_SET(r,f) (r).main0_synce_ctl_stage0_gen2[0]=(((r).main0_synce_ctl_stage0_gen2[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access MAIN0_SYNCE_CTL_STAGE0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_MAIN0_SYNCE_CTL_STAGE0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_STAGE0_GEN2r,(_r._main0_synce_ctl_stage0_gen2))
#define BCMI_TSCF_XGXS_WRITE_MAIN0_SYNCE_CTL_STAGE0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_STAGE0_GEN2r,(_r._main0_synce_ctl_stage0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_MAIN0_SYNCE_CTL_STAGE0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_STAGE0_GEN2r,(_r._main0_synce_ctl_stage0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define MAIN0_SYNCE_CTL_STAGE0_GEN2r BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_STAGE0_GEN2r
#define MAIN0_SYNCE_CTL_STAGE0_GEN2r_SIZE BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_STAGE0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_STAGE0_GEN2r_t MAIN0_SYNCE_CTL_STAGE0_GEN2r_t;
#define MAIN0_SYNCE_CTL_STAGE0_GEN2r_CLR BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_STAGE0_GEN2r_CLR
#define MAIN0_SYNCE_CTL_STAGE0_GEN2r_SET BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_STAGE0_GEN2r_SET
#define MAIN0_SYNCE_CTL_STAGE0_GEN2r_GET BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_STAGE0_GEN2r_GET
#define MAIN0_SYNCE_CTL_STAGE0_GEN2r_SYNCE_STAGE0_MODE_PHY_LANE3f_GET BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_STAGE0_GEN2r_SYNCE_STAGE0_MODE_PHY_LANE3f_GET
#define MAIN0_SYNCE_CTL_STAGE0_GEN2r_SYNCE_STAGE0_MODE_PHY_LANE3f_SET BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_STAGE0_GEN2r_SYNCE_STAGE0_MODE_PHY_LANE3f_SET
#define MAIN0_SYNCE_CTL_STAGE0_GEN2r_SYNCE_STAGE0_MODE_PHY_LANE2f_GET BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_STAGE0_GEN2r_SYNCE_STAGE0_MODE_PHY_LANE2f_GET
#define MAIN0_SYNCE_CTL_STAGE0_GEN2r_SYNCE_STAGE0_MODE_PHY_LANE2f_SET BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_STAGE0_GEN2r_SYNCE_STAGE0_MODE_PHY_LANE2f_SET
#define MAIN0_SYNCE_CTL_STAGE0_GEN2r_SYNCE_STAGE0_MODE_PHY_LANE1f_GET BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_STAGE0_GEN2r_SYNCE_STAGE0_MODE_PHY_LANE1f_GET
#define MAIN0_SYNCE_CTL_STAGE0_GEN2r_SYNCE_STAGE0_MODE_PHY_LANE1f_SET BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_STAGE0_GEN2r_SYNCE_STAGE0_MODE_PHY_LANE1f_SET
#define MAIN0_SYNCE_CTL_STAGE0_GEN2r_SYNCE_STAGE0_MODE_PHY_LANE0f_GET BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_STAGE0_GEN2r_SYNCE_STAGE0_MODE_PHY_LANE0f_GET
#define MAIN0_SYNCE_CTL_STAGE0_GEN2r_SYNCE_STAGE0_MODE_PHY_LANE0f_SET BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_STAGE0_GEN2r_SYNCE_STAGE0_MODE_PHY_LANE0f_SET
#define READ_MAIN0_SYNCE_CTL_STAGE0_GEN2r BCMI_TSCF_XGXS_READ_MAIN0_SYNCE_CTL_STAGE0_GEN2r
#define WRITE_MAIN0_SYNCE_CTL_STAGE0_GEN2r BCMI_TSCF_XGXS_WRITE_MAIN0_SYNCE_CTL_STAGE0_GEN2r
#define MODIFY_MAIN0_SYNCE_CTL_STAGE0_GEN2r BCMI_TSCF_XGXS_MODIFY_MAIN0_SYNCE_CTL_STAGE0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_MAIN0_SYNCE_CTL_STAGE0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  MAIN0_SPD_CTL_GEN2
 * BLOCKS:   MAIN0
 * REGADDR:  0x9003
 * DESC:     Speed Control Register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     PLL_RESET_EN     Enable reseting PMD core logic and PLL by Speed control. The port that will reset the pll is selected by master_port_number
 *     TSC_CREDIT_SEL   Selects between pmd_tx_clk credit and tsc_clk credit.
 */
#define BCMI_TSCF_XGXS_MAIN0_SPD_CTL_GEN2r (0x00109003 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_MAIN0_SPD_CTL_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program MAIN0_SPD_CTL_GEN2.
 */
typedef union BCMI_TSCF_XGXS_MAIN0_SPD_CTL_GEN2r_s {
	uint32_t v[1];
	uint32_t main0_spd_ctl_gen2[1];
	uint32_t _main0_spd_ctl_gen2;
} BCMI_TSCF_XGXS_MAIN0_SPD_CTL_GEN2r_t;

#define BCMI_TSCF_XGXS_MAIN0_SPD_CTL_GEN2r_CLR(r) (r).main0_spd_ctl_gen2[0] = 0
#define BCMI_TSCF_XGXS_MAIN0_SPD_CTL_GEN2r_SET(r,d) (r).main0_spd_ctl_gen2[0] = d
#define BCMI_TSCF_XGXS_MAIN0_SPD_CTL_GEN2r_GET(r) (r).main0_spd_ctl_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_MAIN0_SPD_CTL_GEN2r_TSC_CREDIT_SELf_GET(r) ((((r).main0_spd_ctl_gen2[0]) >> 11) & 0x1)
#define BCMI_TSCF_XGXS_MAIN0_SPD_CTL_GEN2r_TSC_CREDIT_SELf_SET(r,f) (r).main0_spd_ctl_gen2[0]=(((r).main0_spd_ctl_gen2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_XGXS_MAIN0_SPD_CTL_GEN2r_PLL_RESET_ENf_GET(r) ((((r).main0_spd_ctl_gen2[0]) >> 8) & 0x1)
#define BCMI_TSCF_XGXS_MAIN0_SPD_CTL_GEN2r_PLL_RESET_ENf_SET(r,f) (r).main0_spd_ctl_gen2[0]=(((r).main0_spd_ctl_gen2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))

/*
 * These macros can be used to access MAIN0_SPD_CTL_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_MAIN0_SPD_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_MAIN0_SPD_CTL_GEN2r,(_r._main0_spd_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITE_MAIN0_SPD_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_MAIN0_SPD_CTL_GEN2r,(_r._main0_spd_ctl_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_MAIN0_SPD_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_MAIN0_SPD_CTL_GEN2r,(_r._main0_spd_ctl_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define MAIN0_SPD_CTL_GEN2r BCMI_TSCF_XGXS_MAIN0_SPD_CTL_GEN2r
#define MAIN0_SPD_CTL_GEN2r_SIZE BCMI_TSCF_XGXS_MAIN0_SPD_CTL_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_MAIN0_SPD_CTL_GEN2r_t MAIN0_SPD_CTL_GEN2r_t;
#define MAIN0_SPD_CTL_GEN2r_CLR BCMI_TSCF_XGXS_MAIN0_SPD_CTL_GEN2r_CLR
#define MAIN0_SPD_CTL_GEN2r_SET BCMI_TSCF_XGXS_MAIN0_SPD_CTL_GEN2r_SET
#define MAIN0_SPD_CTL_GEN2r_GET BCMI_TSCF_XGXS_MAIN0_SPD_CTL_GEN2r_GET
#define MAIN0_SPD_CTL_GEN2r_TSC_CREDIT_SELf_GET BCMI_TSCF_XGXS_MAIN0_SPD_CTL_GEN2r_TSC_CREDIT_SELf_GET
#define MAIN0_SPD_CTL_GEN2r_TSC_CREDIT_SELf_SET BCMI_TSCF_XGXS_MAIN0_SPD_CTL_GEN2r_TSC_CREDIT_SELf_SET
#define MAIN0_SPD_CTL_GEN2r_PLL_RESET_ENf_GET BCMI_TSCF_XGXS_MAIN0_SPD_CTL_GEN2r_PLL_RESET_ENf_GET
#define MAIN0_SPD_CTL_GEN2r_PLL_RESET_ENf_SET BCMI_TSCF_XGXS_MAIN0_SPD_CTL_GEN2r_PLL_RESET_ENf_SET
#define READ_MAIN0_SPD_CTL_GEN2r BCMI_TSCF_XGXS_READ_MAIN0_SPD_CTL_GEN2r
#define WRITE_MAIN0_SPD_CTL_GEN2r BCMI_TSCF_XGXS_WRITE_MAIN0_SPD_CTL_GEN2r
#define MODIFY_MAIN0_SPD_CTL_GEN2r BCMI_TSCF_XGXS_MODIFY_MAIN0_SPD_CTL_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_MAIN0_SPD_CTL_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  MAIN0_DEVINPKG5_GEN2
 * BLOCKS:   MAIN0
 * REGADDR:  0x9004
 * DESC:     Devices in Package5
 * RESETVAL: 0x83 (131)
 * ACCESS:   R/O
 * FIELDS:
 *     CLAUSE22         1 = Clause 22 registers present in package0 = Clause 22 registers not present in package
 *     PMA_PMD          1 = PMA/PMD present in package0 = PMA/PMD not present in package
 *     WIS              1 = WIS present in package0 = WIS not present in package
 *     PCS_XS           1 = PCS present in package0 = PCS not present in package
 *     PHY_XS           1 = PHY XS present in package0 = PHY XS not present in package
 *     DTE_XS           1 = DTE XS present in package0 = DTE XS not present in package
 *     TC               1 = TC present in package0 = TC not present in package
 *     AN               1 = Auto-Negotiation present in package0 = Auto-Negotiation not present in package
 */
#define BCMI_TSCF_XGXS_MAIN0_DEVINPKG5_GEN2r (0x00109004 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_MAIN0_DEVINPKG5_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program MAIN0_DEVINPKG5_GEN2.
 */
typedef union BCMI_TSCF_XGXS_MAIN0_DEVINPKG5_GEN2r_s {
	uint32_t v[1];
	uint32_t main0_devinpkg5_gen2[1];
	uint32_t _main0_devinpkg5_gen2;
} BCMI_TSCF_XGXS_MAIN0_DEVINPKG5_GEN2r_t;

#define BCMI_TSCF_XGXS_MAIN0_DEVINPKG5_GEN2r_CLR(r) (r).main0_devinpkg5_gen2[0] = 0
#define BCMI_TSCF_XGXS_MAIN0_DEVINPKG5_GEN2r_SET(r,d) (r).main0_devinpkg5_gen2[0] = d
#define BCMI_TSCF_XGXS_MAIN0_DEVINPKG5_GEN2r_GET(r) (r).main0_devinpkg5_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_MAIN0_DEVINPKG5_GEN2r_ANf_GET(r) ((((r).main0_devinpkg5_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_MAIN0_DEVINPKG5_GEN2r_ANf_SET(r,f) (r).main0_devinpkg5_gen2[0]=(((r).main0_devinpkg5_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_MAIN0_DEVINPKG5_GEN2r_TCf_GET(r) ((((r).main0_devinpkg5_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_MAIN0_DEVINPKG5_GEN2r_TCf_SET(r,f) (r).main0_devinpkg5_gen2[0]=(((r).main0_devinpkg5_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_MAIN0_DEVINPKG5_GEN2r_DTE_XSf_GET(r) ((((r).main0_devinpkg5_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_MAIN0_DEVINPKG5_GEN2r_DTE_XSf_SET(r,f) (r).main0_devinpkg5_gen2[0]=(((r).main0_devinpkg5_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_MAIN0_DEVINPKG5_GEN2r_PHY_XSf_GET(r) ((((r).main0_devinpkg5_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_MAIN0_DEVINPKG5_GEN2r_PHY_XSf_SET(r,f) (r).main0_devinpkg5_gen2[0]=(((r).main0_devinpkg5_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_MAIN0_DEVINPKG5_GEN2r_PCS_XSf_GET(r) ((((r).main0_devinpkg5_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_MAIN0_DEVINPKG5_GEN2r_PCS_XSf_SET(r,f) (r).main0_devinpkg5_gen2[0]=(((r).main0_devinpkg5_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_MAIN0_DEVINPKG5_GEN2r_WISf_GET(r) ((((r).main0_devinpkg5_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_MAIN0_DEVINPKG5_GEN2r_WISf_SET(r,f) (r).main0_devinpkg5_gen2[0]=(((r).main0_devinpkg5_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_MAIN0_DEVINPKG5_GEN2r_PMA_PMDf_GET(r) ((((r).main0_devinpkg5_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_MAIN0_DEVINPKG5_GEN2r_PMA_PMDf_SET(r,f) (r).main0_devinpkg5_gen2[0]=(((r).main0_devinpkg5_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_MAIN0_DEVINPKG5_GEN2r_CLAUSE22f_GET(r) (((r).main0_devinpkg5_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_MAIN0_DEVINPKG5_GEN2r_CLAUSE22f_SET(r,f) (r).main0_devinpkg5_gen2[0]=(((r).main0_devinpkg5_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access MAIN0_DEVINPKG5_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_MAIN0_DEVINPKG5_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_MAIN0_DEVINPKG5_GEN2r,(_r._main0_devinpkg5_gen2))
#define BCMI_TSCF_XGXS_WRITE_MAIN0_DEVINPKG5_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_MAIN0_DEVINPKG5_GEN2r,(_r._main0_devinpkg5_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_MAIN0_DEVINPKG5_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_MAIN0_DEVINPKG5_GEN2r,(_r._main0_devinpkg5_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define MAIN0_DEVINPKG5_GEN2r BCMI_TSCF_XGXS_MAIN0_DEVINPKG5_GEN2r
#define MAIN0_DEVINPKG5_GEN2r_SIZE BCMI_TSCF_XGXS_MAIN0_DEVINPKG5_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_MAIN0_DEVINPKG5_GEN2r_t MAIN0_DEVINPKG5_GEN2r_t;
#define MAIN0_DEVINPKG5_GEN2r_CLR BCMI_TSCF_XGXS_MAIN0_DEVINPKG5_GEN2r_CLR
#define MAIN0_DEVINPKG5_GEN2r_SET BCMI_TSCF_XGXS_MAIN0_DEVINPKG5_GEN2r_SET
#define MAIN0_DEVINPKG5_GEN2r_GET BCMI_TSCF_XGXS_MAIN0_DEVINPKG5_GEN2r_GET
#define MAIN0_DEVINPKG5_GEN2r_ANf_GET BCMI_TSCF_XGXS_MAIN0_DEVINPKG5_GEN2r_ANf_GET
#define MAIN0_DEVINPKG5_GEN2r_ANf_SET BCMI_TSCF_XGXS_MAIN0_DEVINPKG5_GEN2r_ANf_SET
#define MAIN0_DEVINPKG5_GEN2r_TCf_GET BCMI_TSCF_XGXS_MAIN0_DEVINPKG5_GEN2r_TCf_GET
#define MAIN0_DEVINPKG5_GEN2r_TCf_SET BCMI_TSCF_XGXS_MAIN0_DEVINPKG5_GEN2r_TCf_SET
#define MAIN0_DEVINPKG5_GEN2r_DTE_XSf_GET BCMI_TSCF_XGXS_MAIN0_DEVINPKG5_GEN2r_DTE_XSf_GET
#define MAIN0_DEVINPKG5_GEN2r_DTE_XSf_SET BCMI_TSCF_XGXS_MAIN0_DEVINPKG5_GEN2r_DTE_XSf_SET
#define MAIN0_DEVINPKG5_GEN2r_PHY_XSf_GET BCMI_TSCF_XGXS_MAIN0_DEVINPKG5_GEN2r_PHY_XSf_GET
#define MAIN0_DEVINPKG5_GEN2r_PHY_XSf_SET BCMI_TSCF_XGXS_MAIN0_DEVINPKG5_GEN2r_PHY_XSf_SET
#define MAIN0_DEVINPKG5_GEN2r_PCS_XSf_GET BCMI_TSCF_XGXS_MAIN0_DEVINPKG5_GEN2r_PCS_XSf_GET
#define MAIN0_DEVINPKG5_GEN2r_PCS_XSf_SET BCMI_TSCF_XGXS_MAIN0_DEVINPKG5_GEN2r_PCS_XSf_SET
#define MAIN0_DEVINPKG5_GEN2r_WISf_GET BCMI_TSCF_XGXS_MAIN0_DEVINPKG5_GEN2r_WISf_GET
#define MAIN0_DEVINPKG5_GEN2r_WISf_SET BCMI_TSCF_XGXS_MAIN0_DEVINPKG5_GEN2r_WISf_SET
#define MAIN0_DEVINPKG5_GEN2r_PMA_PMDf_GET BCMI_TSCF_XGXS_MAIN0_DEVINPKG5_GEN2r_PMA_PMDf_GET
#define MAIN0_DEVINPKG5_GEN2r_PMA_PMDf_SET BCMI_TSCF_XGXS_MAIN0_DEVINPKG5_GEN2r_PMA_PMDf_SET
#define MAIN0_DEVINPKG5_GEN2r_CLAUSE22f_GET BCMI_TSCF_XGXS_MAIN0_DEVINPKG5_GEN2r_CLAUSE22f_GET
#define MAIN0_DEVINPKG5_GEN2r_CLAUSE22f_SET BCMI_TSCF_XGXS_MAIN0_DEVINPKG5_GEN2r_CLAUSE22f_SET
#define READ_MAIN0_DEVINPKG5_GEN2r BCMI_TSCF_XGXS_READ_MAIN0_DEVINPKG5_GEN2r
#define WRITE_MAIN0_DEVINPKG5_GEN2r BCMI_TSCF_XGXS_WRITE_MAIN0_DEVINPKG5_GEN2r
#define MODIFY_MAIN0_DEVINPKG5_GEN2r BCMI_TSCF_XGXS_MODIFY_MAIN0_DEVINPKG5_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_MAIN0_DEVINPKG5_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  MAIN0_TICK_CTL_1_GEN2
 * BLOCKS:   MAIN0
 * REGADDR:  0x9007
 * DESC:     TICK GENERATION CONTROL REGISTER 1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TICK_NUMERATOR_UPPER Bits [18:4] of the tick numerator.  Used when tick_override is true
 *     TICK_OVERRIDE    Enables override of tick counts instead of using refclk_sel
 */
#define BCMI_TSCF_XGXS_MAIN0_TICK_CTL_1_GEN2r (0x00109007 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_MAIN0_TICK_CTL_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program MAIN0_TICK_CTL_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_MAIN0_TICK_CTL_1_GEN2r_s {
	uint32_t v[1];
	uint32_t main0_tick_ctl_1_gen2[1];
	uint32_t _main0_tick_ctl_1_gen2;
} BCMI_TSCF_XGXS_MAIN0_TICK_CTL_1_GEN2r_t;

#define BCMI_TSCF_XGXS_MAIN0_TICK_CTL_1_GEN2r_CLR(r) (r).main0_tick_ctl_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_MAIN0_TICK_CTL_1_GEN2r_SET(r,d) (r).main0_tick_ctl_1_gen2[0] = d
#define BCMI_TSCF_XGXS_MAIN0_TICK_CTL_1_GEN2r_GET(r) (r).main0_tick_ctl_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_MAIN0_TICK_CTL_1_GEN2r_TICK_OVERRIDEf_GET(r) ((((r).main0_tick_ctl_1_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_MAIN0_TICK_CTL_1_GEN2r_TICK_OVERRIDEf_SET(r,f) (r).main0_tick_ctl_1_gen2[0]=(((r).main0_tick_ctl_1_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_MAIN0_TICK_CTL_1_GEN2r_TICK_NUMERATOR_UPPERf_GET(r) (((r).main0_tick_ctl_1_gen2[0]) & 0x7fff)
#define BCMI_TSCF_XGXS_MAIN0_TICK_CTL_1_GEN2r_TICK_NUMERATOR_UPPERf_SET(r,f) (r).main0_tick_ctl_1_gen2[0]=(((r).main0_tick_ctl_1_gen2[0] & ~((uint32_t)0x7fff)) | (((uint32_t)f) & 0x7fff)) | (0x7fff << 16)

/*
 * These macros can be used to access MAIN0_TICK_CTL_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_MAIN0_TICK_CTL_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_MAIN0_TICK_CTL_1_GEN2r,(_r._main0_tick_ctl_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_MAIN0_TICK_CTL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_MAIN0_TICK_CTL_1_GEN2r,(_r._main0_tick_ctl_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_MAIN0_TICK_CTL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_MAIN0_TICK_CTL_1_GEN2r,(_r._main0_tick_ctl_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define MAIN0_TICK_CTL_1_GEN2r BCMI_TSCF_XGXS_MAIN0_TICK_CTL_1_GEN2r
#define MAIN0_TICK_CTL_1_GEN2r_SIZE BCMI_TSCF_XGXS_MAIN0_TICK_CTL_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_MAIN0_TICK_CTL_1_GEN2r_t MAIN0_TICK_CTL_1_GEN2r_t;
#define MAIN0_TICK_CTL_1_GEN2r_CLR BCMI_TSCF_XGXS_MAIN0_TICK_CTL_1_GEN2r_CLR
#define MAIN0_TICK_CTL_1_GEN2r_SET BCMI_TSCF_XGXS_MAIN0_TICK_CTL_1_GEN2r_SET
#define MAIN0_TICK_CTL_1_GEN2r_GET BCMI_TSCF_XGXS_MAIN0_TICK_CTL_1_GEN2r_GET
#define MAIN0_TICK_CTL_1_GEN2r_TICK_OVERRIDEf_GET BCMI_TSCF_XGXS_MAIN0_TICK_CTL_1_GEN2r_TICK_OVERRIDEf_GET
#define MAIN0_TICK_CTL_1_GEN2r_TICK_OVERRIDEf_SET BCMI_TSCF_XGXS_MAIN0_TICK_CTL_1_GEN2r_TICK_OVERRIDEf_SET
#define MAIN0_TICK_CTL_1_GEN2r_TICK_NUMERATOR_UPPERf_GET BCMI_TSCF_XGXS_MAIN0_TICK_CTL_1_GEN2r_TICK_NUMERATOR_UPPERf_GET
#define MAIN0_TICK_CTL_1_GEN2r_TICK_NUMERATOR_UPPERf_SET BCMI_TSCF_XGXS_MAIN0_TICK_CTL_1_GEN2r_TICK_NUMERATOR_UPPERf_SET
#define READ_MAIN0_TICK_CTL_1_GEN2r BCMI_TSCF_XGXS_READ_MAIN0_TICK_CTL_1_GEN2r
#define WRITE_MAIN0_TICK_CTL_1_GEN2r BCMI_TSCF_XGXS_WRITE_MAIN0_TICK_CTL_1_GEN2r
#define MODIFY_MAIN0_TICK_CTL_1_GEN2r BCMI_TSCF_XGXS_MODIFY_MAIN0_TICK_CTL_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_MAIN0_TICK_CTL_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  MAIN0_TICK_CTL_0_GEN2
 * BLOCKS:   MAIN0
 * REGADDR:  0x9008
 * DESC:     TICK GENERATION CONTROL REGISTER 1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TICK_DENOMINATOR Tick denominator.  Used when tick_override is true
 *     TICK_NUMERATOR_LOWER Bits [3:0] of the tick numerator.  Used when tick_override is true
 */
#define BCMI_TSCF_XGXS_MAIN0_TICK_CTL_0_GEN2r (0x00109008 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_MAIN0_TICK_CTL_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program MAIN0_TICK_CTL_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_MAIN0_TICK_CTL_0_GEN2r_s {
	uint32_t v[1];
	uint32_t main0_tick_ctl_0_gen2[1];
	uint32_t _main0_tick_ctl_0_gen2;
} BCMI_TSCF_XGXS_MAIN0_TICK_CTL_0_GEN2r_t;

#define BCMI_TSCF_XGXS_MAIN0_TICK_CTL_0_GEN2r_CLR(r) (r).main0_tick_ctl_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_MAIN0_TICK_CTL_0_GEN2r_SET(r,d) (r).main0_tick_ctl_0_gen2[0] = d
#define BCMI_TSCF_XGXS_MAIN0_TICK_CTL_0_GEN2r_GET(r) (r).main0_tick_ctl_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_MAIN0_TICK_CTL_0_GEN2r_TICK_NUMERATOR_LOWERf_GET(r) ((((r).main0_tick_ctl_0_gen2[0]) >> 12) & 0xf)
#define BCMI_TSCF_XGXS_MAIN0_TICK_CTL_0_GEN2r_TICK_NUMERATOR_LOWERf_SET(r,f) (r).main0_tick_ctl_0_gen2[0]=(((r).main0_tick_ctl_0_gen2[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_TSCF_XGXS_MAIN0_TICK_CTL_0_GEN2r_TICK_DENOMINATORf_GET(r) ((((r).main0_tick_ctl_0_gen2[0]) >> 2) & 0x3ff)
#define BCMI_TSCF_XGXS_MAIN0_TICK_CTL_0_GEN2r_TICK_DENOMINATORf_SET(r,f) (r).main0_tick_ctl_0_gen2[0]=(((r).main0_tick_ctl_0_gen2[0] & ~((uint32_t)0x3ff << 2)) | ((((uint32_t)f) & 0x3ff) << 2)) | (1023 << (16 + 2))

/*
 * These macros can be used to access MAIN0_TICK_CTL_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_MAIN0_TICK_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_MAIN0_TICK_CTL_0_GEN2r,(_r._main0_tick_ctl_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_MAIN0_TICK_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_MAIN0_TICK_CTL_0_GEN2r,(_r._main0_tick_ctl_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_MAIN0_TICK_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_MAIN0_TICK_CTL_0_GEN2r,(_r._main0_tick_ctl_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define MAIN0_TICK_CTL_0_GEN2r BCMI_TSCF_XGXS_MAIN0_TICK_CTL_0_GEN2r
#define MAIN0_TICK_CTL_0_GEN2r_SIZE BCMI_TSCF_XGXS_MAIN0_TICK_CTL_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_MAIN0_TICK_CTL_0_GEN2r_t MAIN0_TICK_CTL_0_GEN2r_t;
#define MAIN0_TICK_CTL_0_GEN2r_CLR BCMI_TSCF_XGXS_MAIN0_TICK_CTL_0_GEN2r_CLR
#define MAIN0_TICK_CTL_0_GEN2r_SET BCMI_TSCF_XGXS_MAIN0_TICK_CTL_0_GEN2r_SET
#define MAIN0_TICK_CTL_0_GEN2r_GET BCMI_TSCF_XGXS_MAIN0_TICK_CTL_0_GEN2r_GET
#define MAIN0_TICK_CTL_0_GEN2r_TICK_NUMERATOR_LOWERf_GET BCMI_TSCF_XGXS_MAIN0_TICK_CTL_0_GEN2r_TICK_NUMERATOR_LOWERf_GET
#define MAIN0_TICK_CTL_0_GEN2r_TICK_NUMERATOR_LOWERf_SET BCMI_TSCF_XGXS_MAIN0_TICK_CTL_0_GEN2r_TICK_NUMERATOR_LOWERf_SET
#define MAIN0_TICK_CTL_0_GEN2r_TICK_DENOMINATORf_GET BCMI_TSCF_XGXS_MAIN0_TICK_CTL_0_GEN2r_TICK_DENOMINATORf_GET
#define MAIN0_TICK_CTL_0_GEN2r_TICK_DENOMINATORf_SET BCMI_TSCF_XGXS_MAIN0_TICK_CTL_0_GEN2r_TICK_DENOMINATORf_SET
#define READ_MAIN0_TICK_CTL_0_GEN2r BCMI_TSCF_XGXS_READ_MAIN0_TICK_CTL_0_GEN2r
#define WRITE_MAIN0_TICK_CTL_0_GEN2r BCMI_TSCF_XGXS_WRITE_MAIN0_TICK_CTL_0_GEN2r
#define MODIFY_MAIN0_TICK_CTL_0_GEN2r BCMI_TSCF_XGXS_MODIFY_MAIN0_TICK_CTL_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_MAIN0_TICK_CTL_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  MAIN0_LPBK_CTL_GEN2
 * BLOCKS:   MAIN0
 * REGADDR:  0x9009
 * DESC:     LOOPBACK CONTROL REGISTER
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LOCAL_PCS_LOOPBACK_ENABLE Per LOGICAL LANE control to enable PCS based local (TX to RX) loopback
 *     REMOTE_PCS_LOOPBACK_ENABLE Per LOGICAL LANE control to enable PCS based remote (RX to TX) loopback
 */
#define BCMI_TSCF_XGXS_MAIN0_LPBK_CTL_GEN2r (0x00109009 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_MAIN0_LPBK_CTL_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program MAIN0_LPBK_CTL_GEN2.
 */
typedef union BCMI_TSCF_XGXS_MAIN0_LPBK_CTL_GEN2r_s {
	uint32_t v[1];
	uint32_t main0_lpbk_ctl_gen2[1];
	uint32_t _main0_lpbk_ctl_gen2;
} BCMI_TSCF_XGXS_MAIN0_LPBK_CTL_GEN2r_t;

#define BCMI_TSCF_XGXS_MAIN0_LPBK_CTL_GEN2r_CLR(r) (r).main0_lpbk_ctl_gen2[0] = 0
#define BCMI_TSCF_XGXS_MAIN0_LPBK_CTL_GEN2r_SET(r,d) (r).main0_lpbk_ctl_gen2[0] = d
#define BCMI_TSCF_XGXS_MAIN0_LPBK_CTL_GEN2r_GET(r) (r).main0_lpbk_ctl_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_MAIN0_LPBK_CTL_GEN2r_REMOTE_PCS_LOOPBACK_ENABLEf_GET(r) ((((r).main0_lpbk_ctl_gen2[0]) >> 4) & 0xf)
#define BCMI_TSCF_XGXS_MAIN0_LPBK_CTL_GEN2r_REMOTE_PCS_LOOPBACK_ENABLEf_SET(r,f) (r).main0_lpbk_ctl_gen2[0]=(((r).main0_lpbk_ctl_gen2[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4)) | (15 << (16 + 4))
#define BCMI_TSCF_XGXS_MAIN0_LPBK_CTL_GEN2r_LOCAL_PCS_LOOPBACK_ENABLEf_GET(r) (((r).main0_lpbk_ctl_gen2[0]) & 0xf)
#define BCMI_TSCF_XGXS_MAIN0_LPBK_CTL_GEN2r_LOCAL_PCS_LOOPBACK_ENABLEf_SET(r,f) (r).main0_lpbk_ctl_gen2[0]=(((r).main0_lpbk_ctl_gen2[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access MAIN0_LPBK_CTL_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_MAIN0_LPBK_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_MAIN0_LPBK_CTL_GEN2r,(_r._main0_lpbk_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITE_MAIN0_LPBK_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_MAIN0_LPBK_CTL_GEN2r,(_r._main0_lpbk_ctl_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_MAIN0_LPBK_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_MAIN0_LPBK_CTL_GEN2r,(_r._main0_lpbk_ctl_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define MAIN0_LPBK_CTL_GEN2r BCMI_TSCF_XGXS_MAIN0_LPBK_CTL_GEN2r
#define MAIN0_LPBK_CTL_GEN2r_SIZE BCMI_TSCF_XGXS_MAIN0_LPBK_CTL_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_MAIN0_LPBK_CTL_GEN2r_t MAIN0_LPBK_CTL_GEN2r_t;
#define MAIN0_LPBK_CTL_GEN2r_CLR BCMI_TSCF_XGXS_MAIN0_LPBK_CTL_GEN2r_CLR
#define MAIN0_LPBK_CTL_GEN2r_SET BCMI_TSCF_XGXS_MAIN0_LPBK_CTL_GEN2r_SET
#define MAIN0_LPBK_CTL_GEN2r_GET BCMI_TSCF_XGXS_MAIN0_LPBK_CTL_GEN2r_GET
#define MAIN0_LPBK_CTL_GEN2r_REMOTE_PCS_LOOPBACK_ENABLEf_GET BCMI_TSCF_XGXS_MAIN0_LPBK_CTL_GEN2r_REMOTE_PCS_LOOPBACK_ENABLEf_GET
#define MAIN0_LPBK_CTL_GEN2r_REMOTE_PCS_LOOPBACK_ENABLEf_SET BCMI_TSCF_XGXS_MAIN0_LPBK_CTL_GEN2r_REMOTE_PCS_LOOPBACK_ENABLEf_SET
#define MAIN0_LPBK_CTL_GEN2r_LOCAL_PCS_LOOPBACK_ENABLEf_GET BCMI_TSCF_XGXS_MAIN0_LPBK_CTL_GEN2r_LOCAL_PCS_LOOPBACK_ENABLEf_GET
#define MAIN0_LPBK_CTL_GEN2r_LOCAL_PCS_LOOPBACK_ENABLEf_SET BCMI_TSCF_XGXS_MAIN0_LPBK_CTL_GEN2r_LOCAL_PCS_LOOPBACK_ENABLEf_SET
#define READ_MAIN0_LPBK_CTL_GEN2r BCMI_TSCF_XGXS_READ_MAIN0_LPBK_CTL_GEN2r
#define WRITE_MAIN0_LPBK_CTL_GEN2r BCMI_TSCF_XGXS_WRITE_MAIN0_LPBK_CTL_GEN2r
#define MODIFY_MAIN0_LPBK_CTL_GEN2r BCMI_TSCF_XGXS_MODIFY_MAIN0_LPBK_CTL_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_MAIN0_LPBK_CTL_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  MAIN0_MDIO_BCST_GEN2
 * BLOCKS:   MAIN0
 * REGADDR:  0x900a
 * DESC:     PRTAD Broadcast Values
 * RESETVAL: 0xf800 (63488)
 * ACCESS:   R/W
 * FIELDS:
 *     MULTIPRTS_EN     per port Broadcast enable
 *     PRTAD_BCST       PORT VALUE FOR BROADCASTING TO MULTIPLE PORTS
 */
#define BCMI_TSCF_XGXS_MAIN0_MDIO_BCST_GEN2r (0x0010900a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_MAIN0_MDIO_BCST_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program MAIN0_MDIO_BCST_GEN2.
 */
typedef union BCMI_TSCF_XGXS_MAIN0_MDIO_BCST_GEN2r_s {
	uint32_t v[1];
	uint32_t main0_mdio_bcst_gen2[1];
	uint32_t _main0_mdio_bcst_gen2;
} BCMI_TSCF_XGXS_MAIN0_MDIO_BCST_GEN2r_t;

#define BCMI_TSCF_XGXS_MAIN0_MDIO_BCST_GEN2r_CLR(r) (r).main0_mdio_bcst_gen2[0] = 0
#define BCMI_TSCF_XGXS_MAIN0_MDIO_BCST_GEN2r_SET(r,d) (r).main0_mdio_bcst_gen2[0] = d
#define BCMI_TSCF_XGXS_MAIN0_MDIO_BCST_GEN2r_GET(r) (r).main0_mdio_bcst_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_MAIN0_MDIO_BCST_GEN2r_PRTAD_BCSTf_GET(r) ((((r).main0_mdio_bcst_gen2[0]) >> 11) & 0x1f)
#define BCMI_TSCF_XGXS_MAIN0_MDIO_BCST_GEN2r_PRTAD_BCSTf_SET(r,f) (r).main0_mdio_bcst_gen2[0]=(((r).main0_mdio_bcst_gen2[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11)) | (31 << (16 + 11))
#define BCMI_TSCF_XGXS_MAIN0_MDIO_BCST_GEN2r_MULTIPRTS_ENf_GET(r) ((((r).main0_mdio_bcst_gen2[0]) >> 7) & 0xf)
#define BCMI_TSCF_XGXS_MAIN0_MDIO_BCST_GEN2r_MULTIPRTS_ENf_SET(r,f) (r).main0_mdio_bcst_gen2[0]=(((r).main0_mdio_bcst_gen2[0] & ~((uint32_t)0xf << 7)) | ((((uint32_t)f) & 0xf) << 7)) | (15 << (16 + 7))

/*
 * These macros can be used to access MAIN0_MDIO_BCST_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_MAIN0_MDIO_BCST_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_MAIN0_MDIO_BCST_GEN2r,(_r._main0_mdio_bcst_gen2))
#define BCMI_TSCF_XGXS_WRITE_MAIN0_MDIO_BCST_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_MAIN0_MDIO_BCST_GEN2r,(_r._main0_mdio_bcst_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_MAIN0_MDIO_BCST_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_MAIN0_MDIO_BCST_GEN2r,(_r._main0_mdio_bcst_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define MAIN0_MDIO_BCST_GEN2r BCMI_TSCF_XGXS_MAIN0_MDIO_BCST_GEN2r
#define MAIN0_MDIO_BCST_GEN2r_SIZE BCMI_TSCF_XGXS_MAIN0_MDIO_BCST_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_MAIN0_MDIO_BCST_GEN2r_t MAIN0_MDIO_BCST_GEN2r_t;
#define MAIN0_MDIO_BCST_GEN2r_CLR BCMI_TSCF_XGXS_MAIN0_MDIO_BCST_GEN2r_CLR
#define MAIN0_MDIO_BCST_GEN2r_SET BCMI_TSCF_XGXS_MAIN0_MDIO_BCST_GEN2r_SET
#define MAIN0_MDIO_BCST_GEN2r_GET BCMI_TSCF_XGXS_MAIN0_MDIO_BCST_GEN2r_GET
#define MAIN0_MDIO_BCST_GEN2r_PRTAD_BCSTf_GET BCMI_TSCF_XGXS_MAIN0_MDIO_BCST_GEN2r_PRTAD_BCSTf_GET
#define MAIN0_MDIO_BCST_GEN2r_PRTAD_BCSTf_SET BCMI_TSCF_XGXS_MAIN0_MDIO_BCST_GEN2r_PRTAD_BCSTf_SET
#define MAIN0_MDIO_BCST_GEN2r_MULTIPRTS_ENf_GET BCMI_TSCF_XGXS_MAIN0_MDIO_BCST_GEN2r_MULTIPRTS_ENf_GET
#define MAIN0_MDIO_BCST_GEN2r_MULTIPRTS_ENf_SET BCMI_TSCF_XGXS_MAIN0_MDIO_BCST_GEN2r_MULTIPRTS_ENf_SET
#define READ_MAIN0_MDIO_BCST_GEN2r BCMI_TSCF_XGXS_READ_MAIN0_MDIO_BCST_GEN2r
#define WRITE_MAIN0_MDIO_BCST_GEN2r BCMI_TSCF_XGXS_WRITE_MAIN0_MDIO_BCST_GEN2r
#define MODIFY_MAIN0_MDIO_BCST_GEN2r BCMI_TSCF_XGXS_MODIFY_MAIN0_MDIO_BCST_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_MAIN0_MDIO_BCST_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  MAIN0ACC_TMOUT_GEN2
 * BLOCKS:   MAIN0
 * REGADDR:  0x900b
 * DESC:     External Access timeout register
 * RESETVAL: 0x50 (80)
 * ACCESS:   R/W
 * FIELDS:
 *     TIMEOUT_COUNT    Timeout count for external access statemachine.
 */
#define BCMI_TSCF_XGXS_MAIN0ACC_TMOUT_GEN2r (0x0010900b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_MAIN0ACC_TMOUT_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program MAIN0ACC_TMOUT_GEN2.
 */
typedef union BCMI_TSCF_XGXS_MAIN0ACC_TMOUT_GEN2r_s {
	uint32_t v[1];
	uint32_t main0acc_tmout_gen2[1];
	uint32_t _main0acc_tmout_gen2;
} BCMI_TSCF_XGXS_MAIN0ACC_TMOUT_GEN2r_t;

#define BCMI_TSCF_XGXS_MAIN0ACC_TMOUT_GEN2r_CLR(r) (r).main0acc_tmout_gen2[0] = 0
#define BCMI_TSCF_XGXS_MAIN0ACC_TMOUT_GEN2r_SET(r,d) (r).main0acc_tmout_gen2[0] = d
#define BCMI_TSCF_XGXS_MAIN0ACC_TMOUT_GEN2r_GET(r) (r).main0acc_tmout_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_MAIN0ACC_TMOUT_GEN2r_TIMEOUT_COUNTf_GET(r) (((r).main0acc_tmout_gen2[0]) & 0xff)
#define BCMI_TSCF_XGXS_MAIN0ACC_TMOUT_GEN2r_TIMEOUT_COUNTf_SET(r,f) (r).main0acc_tmout_gen2[0]=(((r).main0acc_tmout_gen2[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access MAIN0ACC_TMOUT_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_MAIN0ACC_TMOUT_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_MAIN0ACC_TMOUT_GEN2r,(_r._main0acc_tmout_gen2))
#define BCMI_TSCF_XGXS_WRITE_MAIN0ACC_TMOUT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_MAIN0ACC_TMOUT_GEN2r,(_r._main0acc_tmout_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_MAIN0ACC_TMOUT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_MAIN0ACC_TMOUT_GEN2r,(_r._main0acc_tmout_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define MAIN0ACC_TMOUT_GEN2r BCMI_TSCF_XGXS_MAIN0ACC_TMOUT_GEN2r
#define MAIN0ACC_TMOUT_GEN2r_SIZE BCMI_TSCF_XGXS_MAIN0ACC_TMOUT_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_MAIN0ACC_TMOUT_GEN2r_t MAIN0ACC_TMOUT_GEN2r_t;
#define MAIN0ACC_TMOUT_GEN2r_CLR BCMI_TSCF_XGXS_MAIN0ACC_TMOUT_GEN2r_CLR
#define MAIN0ACC_TMOUT_GEN2r_SET BCMI_TSCF_XGXS_MAIN0ACC_TMOUT_GEN2r_SET
#define MAIN0ACC_TMOUT_GEN2r_GET BCMI_TSCF_XGXS_MAIN0ACC_TMOUT_GEN2r_GET
#define MAIN0ACC_TMOUT_GEN2r_TIMEOUT_COUNTf_GET BCMI_TSCF_XGXS_MAIN0ACC_TMOUT_GEN2r_TIMEOUT_COUNTf_GET
#define MAIN0ACC_TMOUT_GEN2r_TIMEOUT_COUNTf_SET BCMI_TSCF_XGXS_MAIN0ACC_TMOUT_GEN2r_TIMEOUT_COUNTf_SET
#define READ_MAIN0ACC_TMOUT_GEN2r BCMI_TSCF_XGXS_READ_MAIN0ACC_TMOUT_GEN2r
#define WRITE_MAIN0ACC_TMOUT_GEN2r BCMI_TSCF_XGXS_WRITE_MAIN0ACC_TMOUT_GEN2r
#define MODIFY_MAIN0ACC_TMOUT_GEN2r BCMI_TSCF_XGXS_MODIFY_MAIN0ACC_TMOUT_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_MAIN0ACC_TMOUT_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  MAIN0ACC_TMOUT_STS_GEN2
 * BLOCKS:   MAIN0
 * REGADDR:  0x900c
 * DESC:     External Access timeout status register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TIMEOUT_ERROR    Status indicating the external access state machine did not receive an ack within the timeout_count duration.
 */
#define BCMI_TSCF_XGXS_MAIN0ACC_TMOUT_STS_GEN2r (0x0010900c | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_MAIN0ACC_TMOUT_STS_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program MAIN0ACC_TMOUT_STS_GEN2.
 */
typedef union BCMI_TSCF_XGXS_MAIN0ACC_TMOUT_STS_GEN2r_s {
	uint32_t v[1];
	uint32_t main0acc_tmout_sts_gen2[1];
	uint32_t _main0acc_tmout_sts_gen2;
} BCMI_TSCF_XGXS_MAIN0ACC_TMOUT_STS_GEN2r_t;

#define BCMI_TSCF_XGXS_MAIN0ACC_TMOUT_STS_GEN2r_CLR(r) (r).main0acc_tmout_sts_gen2[0] = 0
#define BCMI_TSCF_XGXS_MAIN0ACC_TMOUT_STS_GEN2r_SET(r,d) (r).main0acc_tmout_sts_gen2[0] = d
#define BCMI_TSCF_XGXS_MAIN0ACC_TMOUT_STS_GEN2r_GET(r) (r).main0acc_tmout_sts_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_MAIN0ACC_TMOUT_STS_GEN2r_TIMEOUT_ERRORf_GET(r) (((r).main0acc_tmout_sts_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_MAIN0ACC_TMOUT_STS_GEN2r_TIMEOUT_ERRORf_SET(r,f) (r).main0acc_tmout_sts_gen2[0]=(((r).main0acc_tmout_sts_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access MAIN0ACC_TMOUT_STS_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_MAIN0ACC_TMOUT_STS_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_MAIN0ACC_TMOUT_STS_GEN2r,(_r._main0acc_tmout_sts_gen2))
#define BCMI_TSCF_XGXS_WRITE_MAIN0ACC_TMOUT_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_MAIN0ACC_TMOUT_STS_GEN2r,(_r._main0acc_tmout_sts_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_MAIN0ACC_TMOUT_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_MAIN0ACC_TMOUT_STS_GEN2r,(_r._main0acc_tmout_sts_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define MAIN0ACC_TMOUT_STS_GEN2r BCMI_TSCF_XGXS_MAIN0ACC_TMOUT_STS_GEN2r
#define MAIN0ACC_TMOUT_STS_GEN2r_SIZE BCMI_TSCF_XGXS_MAIN0ACC_TMOUT_STS_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_MAIN0ACC_TMOUT_STS_GEN2r_t MAIN0ACC_TMOUT_STS_GEN2r_t;
#define MAIN0ACC_TMOUT_STS_GEN2r_CLR BCMI_TSCF_XGXS_MAIN0ACC_TMOUT_STS_GEN2r_CLR
#define MAIN0ACC_TMOUT_STS_GEN2r_SET BCMI_TSCF_XGXS_MAIN0ACC_TMOUT_STS_GEN2r_SET
#define MAIN0ACC_TMOUT_STS_GEN2r_GET BCMI_TSCF_XGXS_MAIN0ACC_TMOUT_STS_GEN2r_GET
#define MAIN0ACC_TMOUT_STS_GEN2r_TIMEOUT_ERRORf_GET BCMI_TSCF_XGXS_MAIN0ACC_TMOUT_STS_GEN2r_TIMEOUT_ERRORf_GET
#define MAIN0ACC_TMOUT_STS_GEN2r_TIMEOUT_ERRORf_SET BCMI_TSCF_XGXS_MAIN0ACC_TMOUT_STS_GEN2r_TIMEOUT_ERRORf_SET
#define READ_MAIN0ACC_TMOUT_STS_GEN2r BCMI_TSCF_XGXS_READ_MAIN0ACC_TMOUT_STS_GEN2r
#define WRITE_MAIN0ACC_TMOUT_STS_GEN2r BCMI_TSCF_XGXS_WRITE_MAIN0ACC_TMOUT_STS_GEN2r
#define MODIFY_MAIN0ACC_TMOUT_STS_GEN2r BCMI_TSCF_XGXS_MODIFY_MAIN0ACC_TMOUT_STS_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_MAIN0ACC_TMOUT_STS_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  MAIN0_SERDESID_GEN2
 * BLOCKS:   MAIN0
 * REGADDR:  0x900e
 * DESC:     Serdes ID Register
 * RESETVAL: 0x2d5 (725)
 * ACCESS:   R/O
 * FIELDS:
 *     MODEL_NUMBER     Same as phyID model number
 *     TECH_PROC        
 *     BONDING          
 *     REV_NUMBER       
 *     REV_LETTER       
 */
#define BCMI_TSCF_XGXS_MAIN0_SERDESID_GEN2r (0x0010900e | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_MAIN0_SERDESID_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program MAIN0_SERDESID_GEN2.
 */
typedef union BCMI_TSCF_XGXS_MAIN0_SERDESID_GEN2r_s {
	uint32_t v[1];
	uint32_t main0_serdesid_gen2[1];
	uint32_t _main0_serdesid_gen2;
} BCMI_TSCF_XGXS_MAIN0_SERDESID_GEN2r_t;

#define BCMI_TSCF_XGXS_MAIN0_SERDESID_GEN2r_CLR(r) (r).main0_serdesid_gen2[0] = 0
#define BCMI_TSCF_XGXS_MAIN0_SERDESID_GEN2r_SET(r,d) (r).main0_serdesid_gen2[0] = d
#define BCMI_TSCF_XGXS_MAIN0_SERDESID_GEN2r_GET(r) (r).main0_serdesid_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_MAIN0_SERDESID_GEN2r_REV_LETTERf_GET(r) ((((r).main0_serdesid_gen2[0]) >> 14) & 0x3)
#define BCMI_TSCF_XGXS_MAIN0_SERDESID_GEN2r_REV_LETTERf_SET(r,f) (r).main0_serdesid_gen2[0]=(((r).main0_serdesid_gen2[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_TSCF_XGXS_MAIN0_SERDESID_GEN2r_REV_NUMBERf_GET(r) ((((r).main0_serdesid_gen2[0]) >> 11) & 0x7)
#define BCMI_TSCF_XGXS_MAIN0_SERDESID_GEN2r_REV_NUMBERf_SET(r,f) (r).main0_serdesid_gen2[0]=(((r).main0_serdesid_gen2[0] & ~((uint32_t)0x7 << 11)) | ((((uint32_t)f) & 0x7) << 11)) | (7 << (16 + 11))
#define BCMI_TSCF_XGXS_MAIN0_SERDESID_GEN2r_BONDINGf_GET(r) ((((r).main0_serdesid_gen2[0]) >> 9) & 0x3)
#define BCMI_TSCF_XGXS_MAIN0_SERDESID_GEN2r_BONDINGf_SET(r,f) (r).main0_serdesid_gen2[0]=(((r).main0_serdesid_gen2[0] & ~((uint32_t)0x3 << 9)) | ((((uint32_t)f) & 0x3) << 9)) | (3 << (16 + 9))
#define BCMI_TSCF_XGXS_MAIN0_SERDESID_GEN2r_TECH_PROCf_GET(r) ((((r).main0_serdesid_gen2[0]) >> 6) & 0x7)
#define BCMI_TSCF_XGXS_MAIN0_SERDESID_GEN2r_TECH_PROCf_SET(r,f) (r).main0_serdesid_gen2[0]=(((r).main0_serdesid_gen2[0] & ~((uint32_t)0x7 << 6)) | ((((uint32_t)f) & 0x7) << 6)) | (7 << (16 + 6))
#define BCMI_TSCF_XGXS_MAIN0_SERDESID_GEN2r_MODEL_NUMBERf_GET(r) (((r).main0_serdesid_gen2[0]) & 0x3f)
#define BCMI_TSCF_XGXS_MAIN0_SERDESID_GEN2r_MODEL_NUMBERf_SET(r,f) (r).main0_serdesid_gen2[0]=(((r).main0_serdesid_gen2[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access MAIN0_SERDESID_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_MAIN0_SERDESID_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_MAIN0_SERDESID_GEN2r,(_r._main0_serdesid_gen2))
#define BCMI_TSCF_XGXS_WRITE_MAIN0_SERDESID_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_MAIN0_SERDESID_GEN2r,(_r._main0_serdesid_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_MAIN0_SERDESID_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_MAIN0_SERDESID_GEN2r,(_r._main0_serdesid_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define MAIN0_SERDESID_GEN2r BCMI_TSCF_XGXS_MAIN0_SERDESID_GEN2r
#define MAIN0_SERDESID_GEN2r_SIZE BCMI_TSCF_XGXS_MAIN0_SERDESID_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_MAIN0_SERDESID_GEN2r_t MAIN0_SERDESID_GEN2r_t;
#define MAIN0_SERDESID_GEN2r_CLR BCMI_TSCF_XGXS_MAIN0_SERDESID_GEN2r_CLR
#define MAIN0_SERDESID_GEN2r_SET BCMI_TSCF_XGXS_MAIN0_SERDESID_GEN2r_SET
#define MAIN0_SERDESID_GEN2r_GET BCMI_TSCF_XGXS_MAIN0_SERDESID_GEN2r_GET
#define MAIN0_SERDESID_GEN2r_REV_LETTERf_GET BCMI_TSCF_XGXS_MAIN0_SERDESID_GEN2r_REV_LETTERf_GET
#define MAIN0_SERDESID_GEN2r_REV_LETTERf_SET BCMI_TSCF_XGXS_MAIN0_SERDESID_GEN2r_REV_LETTERf_SET
#define MAIN0_SERDESID_GEN2r_REV_NUMBERf_GET BCMI_TSCF_XGXS_MAIN0_SERDESID_GEN2r_REV_NUMBERf_GET
#define MAIN0_SERDESID_GEN2r_REV_NUMBERf_SET BCMI_TSCF_XGXS_MAIN0_SERDESID_GEN2r_REV_NUMBERf_SET
#define MAIN0_SERDESID_GEN2r_BONDINGf_GET BCMI_TSCF_XGXS_MAIN0_SERDESID_GEN2r_BONDINGf_GET
#define MAIN0_SERDESID_GEN2r_BONDINGf_SET BCMI_TSCF_XGXS_MAIN0_SERDESID_GEN2r_BONDINGf_SET
#define MAIN0_SERDESID_GEN2r_TECH_PROCf_GET BCMI_TSCF_XGXS_MAIN0_SERDESID_GEN2r_TECH_PROCf_GET
#define MAIN0_SERDESID_GEN2r_TECH_PROCf_SET BCMI_TSCF_XGXS_MAIN0_SERDESID_GEN2r_TECH_PROCf_SET
#define MAIN0_SERDESID_GEN2r_MODEL_NUMBERf_GET BCMI_TSCF_XGXS_MAIN0_SERDESID_GEN2r_MODEL_NUMBERf_GET
#define MAIN0_SERDESID_GEN2r_MODEL_NUMBERf_SET BCMI_TSCF_XGXS_MAIN0_SERDESID_GEN2r_MODEL_NUMBERf_SET
#define READ_MAIN0_SERDESID_GEN2r BCMI_TSCF_XGXS_READ_MAIN0_SERDESID_GEN2r
#define WRITE_MAIN0_SERDESID_GEN2r BCMI_TSCF_XGXS_WRITE_MAIN0_SERDESID_GEN2r
#define MODIFY_MAIN0_SERDESID_GEN2r BCMI_TSCF_XGXS_MODIFY_MAIN0_SERDESID_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_MAIN0_SERDESID_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PMD_X1_CTL_GEN2
 * BLOCKS:   PMD_X1
 * REGADDR:  0x9010
 * DESC:     Global PMD reset controls
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CORE_DP_H_RSTB   PMD Core data path reset override valueOnly used for Speed Control bypass operationby default is zero to keep PMD in reset till enabled
 *     POR_H_RSTB       PMD Core power on resetby default is zero too keep PMD in reset till enabled
 */
#define BCMI_TSCF_XGXS_PMD_X1_CTL_GEN2r (0x00109010 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PMD_X1_CTL_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PMD_X1_CTL_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PMD_X1_CTL_GEN2r_s {
	uint32_t v[1];
	uint32_t pmd_x1_ctl_gen2[1];
	uint32_t _pmd_x1_ctl_gen2;
} BCMI_TSCF_XGXS_PMD_X1_CTL_GEN2r_t;

#define BCMI_TSCF_XGXS_PMD_X1_CTL_GEN2r_CLR(r) (r).pmd_x1_ctl_gen2[0] = 0
#define BCMI_TSCF_XGXS_PMD_X1_CTL_GEN2r_SET(r,d) (r).pmd_x1_ctl_gen2[0] = d
#define BCMI_TSCF_XGXS_PMD_X1_CTL_GEN2r_GET(r) (r).pmd_x1_ctl_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PMD_X1_CTL_GEN2r_POR_H_RSTBf_GET(r) ((((r).pmd_x1_ctl_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_PMD_X1_CTL_GEN2r_POR_H_RSTBf_SET(r,f) (r).pmd_x1_ctl_gen2[0]=(((r).pmd_x1_ctl_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_PMD_X1_CTL_GEN2r_CORE_DP_H_RSTBf_GET(r) (((r).pmd_x1_ctl_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_PMD_X1_CTL_GEN2r_CORE_DP_H_RSTBf_SET(r,f) (r).pmd_x1_ctl_gen2[0]=(((r).pmd_x1_ctl_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access PMD_X1_CTL_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PMD_X1_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PMD_X1_CTL_GEN2r,(_r._pmd_x1_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITE_PMD_X1_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PMD_X1_CTL_GEN2r,(_r._pmd_x1_ctl_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PMD_X1_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PMD_X1_CTL_GEN2r,(_r._pmd_x1_ctl_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PMD_X1_CTL_GEN2r BCMI_TSCF_XGXS_PMD_X1_CTL_GEN2r
#define PMD_X1_CTL_GEN2r_SIZE BCMI_TSCF_XGXS_PMD_X1_CTL_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PMD_X1_CTL_GEN2r_t PMD_X1_CTL_GEN2r_t;
#define PMD_X1_CTL_GEN2r_CLR BCMI_TSCF_XGXS_PMD_X1_CTL_GEN2r_CLR
#define PMD_X1_CTL_GEN2r_SET BCMI_TSCF_XGXS_PMD_X1_CTL_GEN2r_SET
#define PMD_X1_CTL_GEN2r_GET BCMI_TSCF_XGXS_PMD_X1_CTL_GEN2r_GET
#define PMD_X1_CTL_GEN2r_POR_H_RSTBf_GET BCMI_TSCF_XGXS_PMD_X1_CTL_GEN2r_POR_H_RSTBf_GET
#define PMD_X1_CTL_GEN2r_POR_H_RSTBf_SET BCMI_TSCF_XGXS_PMD_X1_CTL_GEN2r_POR_H_RSTBf_SET
#define PMD_X1_CTL_GEN2r_CORE_DP_H_RSTBf_GET BCMI_TSCF_XGXS_PMD_X1_CTL_GEN2r_CORE_DP_H_RSTBf_GET
#define PMD_X1_CTL_GEN2r_CORE_DP_H_RSTBf_SET BCMI_TSCF_XGXS_PMD_X1_CTL_GEN2r_CORE_DP_H_RSTBf_SET
#define READ_PMD_X1_CTL_GEN2r BCMI_TSCF_XGXS_READ_PMD_X1_CTL_GEN2r
#define WRITE_PMD_X1_CTL_GEN2r BCMI_TSCF_XGXS_WRITE_PMD_X1_CTL_GEN2r
#define MODIFY_PMD_X1_CTL_GEN2r BCMI_TSCF_XGXS_MODIFY_PMD_X1_CTL_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PMD_X1_CTL_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PMD_X1_MODE_GEN2
 * BLOCKS:   PMD_X1
 * REGADDR:  0x9011
 * DESC:     Global PMD mode configuration
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CORE_MODE        PMD code mode. Only used when Speed Control logic is bypassedBits 15:12 - Reserved.Bit  11:8  - otp_options.Bits  7:0  - speed_id.
 */
#define BCMI_TSCF_XGXS_PMD_X1_MODE_GEN2r (0x00109011 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PMD_X1_MODE_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PMD_X1_MODE_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PMD_X1_MODE_GEN2r_s {
	uint32_t v[1];
	uint32_t pmd_x1_mode_gen2[1];
	uint32_t _pmd_x1_mode_gen2;
} BCMI_TSCF_XGXS_PMD_X1_MODE_GEN2r_t;

#define BCMI_TSCF_XGXS_PMD_X1_MODE_GEN2r_CLR(r) (r).pmd_x1_mode_gen2[0] = 0
#define BCMI_TSCF_XGXS_PMD_X1_MODE_GEN2r_SET(r,d) (r).pmd_x1_mode_gen2[0] = d
#define BCMI_TSCF_XGXS_PMD_X1_MODE_GEN2r_GET(r) (r).pmd_x1_mode_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PMD_X1_MODE_GEN2r_CORE_MODEf_GET(r) (((r).pmd_x1_mode_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_PMD_X1_MODE_GEN2r_CORE_MODEf_SET(r,f) (r).pmd_x1_mode_gen2[0]=(((r).pmd_x1_mode_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PMD_X1_MODE_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PMD_X1_MODE_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PMD_X1_MODE_GEN2r,(_r._pmd_x1_mode_gen2))
#define BCMI_TSCF_XGXS_WRITE_PMD_X1_MODE_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PMD_X1_MODE_GEN2r,(_r._pmd_x1_mode_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PMD_X1_MODE_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PMD_X1_MODE_GEN2r,(_r._pmd_x1_mode_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PMD_X1_MODE_GEN2r BCMI_TSCF_XGXS_PMD_X1_MODE_GEN2r
#define PMD_X1_MODE_GEN2r_SIZE BCMI_TSCF_XGXS_PMD_X1_MODE_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PMD_X1_MODE_GEN2r_t PMD_X1_MODE_GEN2r_t;
#define PMD_X1_MODE_GEN2r_CLR BCMI_TSCF_XGXS_PMD_X1_MODE_GEN2r_CLR
#define PMD_X1_MODE_GEN2r_SET BCMI_TSCF_XGXS_PMD_X1_MODE_GEN2r_SET
#define PMD_X1_MODE_GEN2r_GET BCMI_TSCF_XGXS_PMD_X1_MODE_GEN2r_GET
#define PMD_X1_MODE_GEN2r_CORE_MODEf_GET BCMI_TSCF_XGXS_PMD_X1_MODE_GEN2r_CORE_MODEf_GET
#define PMD_X1_MODE_GEN2r_CORE_MODEf_SET BCMI_TSCF_XGXS_PMD_X1_MODE_GEN2r_CORE_MODEf_SET
#define READ_PMD_X1_MODE_GEN2r BCMI_TSCF_XGXS_READ_PMD_X1_MODE_GEN2r
#define WRITE_PMD_X1_MODE_GEN2r BCMI_TSCF_XGXS_WRITE_PMD_X1_MODE_GEN2r
#define MODIFY_PMD_X1_MODE_GEN2r BCMI_TSCF_XGXS_MODIFY_PMD_X1_MODE_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PMD_X1_MODE_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PMD_X1_STS_GEN2
 * BLOCKS:   PMD_X1
 * REGADDR:  0x9012
 * DESC:     Global PMD status
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     PLL_LOCK_STS     PMD PLL lock indication
 */
#define BCMI_TSCF_XGXS_PMD_X1_STS_GEN2r (0x00109012 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PMD_X1_STS_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PMD_X1_STS_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PMD_X1_STS_GEN2r_s {
	uint32_t v[1];
	uint32_t pmd_x1_sts_gen2[1];
	uint32_t _pmd_x1_sts_gen2;
} BCMI_TSCF_XGXS_PMD_X1_STS_GEN2r_t;

#define BCMI_TSCF_XGXS_PMD_X1_STS_GEN2r_CLR(r) (r).pmd_x1_sts_gen2[0] = 0
#define BCMI_TSCF_XGXS_PMD_X1_STS_GEN2r_SET(r,d) (r).pmd_x1_sts_gen2[0] = d
#define BCMI_TSCF_XGXS_PMD_X1_STS_GEN2r_GET(r) (r).pmd_x1_sts_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PMD_X1_STS_GEN2r_PLL_LOCK_STSf_GET(r) (((r).pmd_x1_sts_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_PMD_X1_STS_GEN2r_PLL_LOCK_STSf_SET(r,f) (r).pmd_x1_sts_gen2[0]=(((r).pmd_x1_sts_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access PMD_X1_STS_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PMD_X1_STS_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PMD_X1_STS_GEN2r,(_r._pmd_x1_sts_gen2))
#define BCMI_TSCF_XGXS_WRITE_PMD_X1_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PMD_X1_STS_GEN2r,(_r._pmd_x1_sts_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PMD_X1_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PMD_X1_STS_GEN2r,(_r._pmd_x1_sts_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PMD_X1_STS_GEN2r BCMI_TSCF_XGXS_PMD_X1_STS_GEN2r
#define PMD_X1_STS_GEN2r_SIZE BCMI_TSCF_XGXS_PMD_X1_STS_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PMD_X1_STS_GEN2r_t PMD_X1_STS_GEN2r_t;
#define PMD_X1_STS_GEN2r_CLR BCMI_TSCF_XGXS_PMD_X1_STS_GEN2r_CLR
#define PMD_X1_STS_GEN2r_SET BCMI_TSCF_XGXS_PMD_X1_STS_GEN2r_SET
#define PMD_X1_STS_GEN2r_GET BCMI_TSCF_XGXS_PMD_X1_STS_GEN2r_GET
#define PMD_X1_STS_GEN2r_PLL_LOCK_STSf_GET BCMI_TSCF_XGXS_PMD_X1_STS_GEN2r_PLL_LOCK_STSf_GET
#define PMD_X1_STS_GEN2r_PLL_LOCK_STSf_SET BCMI_TSCF_XGXS_PMD_X1_STS_GEN2r_PLL_LOCK_STSf_SET
#define READ_PMD_X1_STS_GEN2r BCMI_TSCF_XGXS_READ_PMD_X1_STS_GEN2r
#define WRITE_PMD_X1_STS_GEN2r BCMI_TSCF_XGXS_WRITE_PMD_X1_STS_GEN2r
#define MODIFY_PMD_X1_STS_GEN2r BCMI_TSCF_XGXS_MODIFY_PMD_X1_STS_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PMD_X1_STS_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PMD_X1_OVRR_GEN2
 * BLOCKS:   PMD_X1
 * REGADDR:  0x9013
 * DESC:     Global PMD override
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     PLL_LOCK_OVRD    PMD PLL lock indicationOnly used for Speed Control bypass operation
 *     CORE_MODE_OEN    Override enable for core modeOnly used for Speed Control bypass operation
 *     CORE_DP_H_RSTB_OEN Override enable for PMD Core data path resetOnly used for Speed Control bypass operation
 */
#define BCMI_TSCF_XGXS_PMD_X1_OVRR_GEN2r (0x00109013 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PMD_X1_OVRR_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PMD_X1_OVRR_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PMD_X1_OVRR_GEN2r_s {
	uint32_t v[1];
	uint32_t pmd_x1_ovrr_gen2[1];
	uint32_t _pmd_x1_ovrr_gen2;
} BCMI_TSCF_XGXS_PMD_X1_OVRR_GEN2r_t;

#define BCMI_TSCF_XGXS_PMD_X1_OVRR_GEN2r_CLR(r) (r).pmd_x1_ovrr_gen2[0] = 0
#define BCMI_TSCF_XGXS_PMD_X1_OVRR_GEN2r_SET(r,d) (r).pmd_x1_ovrr_gen2[0] = d
#define BCMI_TSCF_XGXS_PMD_X1_OVRR_GEN2r_GET(r) (r).pmd_x1_ovrr_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PMD_X1_OVRR_GEN2r_CORE_DP_H_RSTB_OENf_GET(r) ((((r).pmd_x1_ovrr_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_PMD_X1_OVRR_GEN2r_CORE_DP_H_RSTB_OENf_SET(r,f) (r).pmd_x1_ovrr_gen2[0]=(((r).pmd_x1_ovrr_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_PMD_X1_OVRR_GEN2r_CORE_MODE_OENf_GET(r) ((((r).pmd_x1_ovrr_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_PMD_X1_OVRR_GEN2r_CORE_MODE_OENf_SET(r,f) (r).pmd_x1_ovrr_gen2[0]=(((r).pmd_x1_ovrr_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_PMD_X1_OVRR_GEN2r_PLL_LOCK_OVRDf_GET(r) (((r).pmd_x1_ovrr_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_PMD_X1_OVRR_GEN2r_PLL_LOCK_OVRDf_SET(r,f) (r).pmd_x1_ovrr_gen2[0]=(((r).pmd_x1_ovrr_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access PMD_X1_OVRR_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PMD_X1_OVRR_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PMD_X1_OVRR_GEN2r,(_r._pmd_x1_ovrr_gen2))
#define BCMI_TSCF_XGXS_WRITE_PMD_X1_OVRR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PMD_X1_OVRR_GEN2r,(_r._pmd_x1_ovrr_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PMD_X1_OVRR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PMD_X1_OVRR_GEN2r,(_r._pmd_x1_ovrr_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PMD_X1_OVRR_GEN2r BCMI_TSCF_XGXS_PMD_X1_OVRR_GEN2r
#define PMD_X1_OVRR_GEN2r_SIZE BCMI_TSCF_XGXS_PMD_X1_OVRR_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PMD_X1_OVRR_GEN2r_t PMD_X1_OVRR_GEN2r_t;
#define PMD_X1_OVRR_GEN2r_CLR BCMI_TSCF_XGXS_PMD_X1_OVRR_GEN2r_CLR
#define PMD_X1_OVRR_GEN2r_SET BCMI_TSCF_XGXS_PMD_X1_OVRR_GEN2r_SET
#define PMD_X1_OVRR_GEN2r_GET BCMI_TSCF_XGXS_PMD_X1_OVRR_GEN2r_GET
#define PMD_X1_OVRR_GEN2r_CORE_DP_H_RSTB_OENf_GET BCMI_TSCF_XGXS_PMD_X1_OVRR_GEN2r_CORE_DP_H_RSTB_OENf_GET
#define PMD_X1_OVRR_GEN2r_CORE_DP_H_RSTB_OENf_SET BCMI_TSCF_XGXS_PMD_X1_OVRR_GEN2r_CORE_DP_H_RSTB_OENf_SET
#define PMD_X1_OVRR_GEN2r_CORE_MODE_OENf_GET BCMI_TSCF_XGXS_PMD_X1_OVRR_GEN2r_CORE_MODE_OENf_GET
#define PMD_X1_OVRR_GEN2r_CORE_MODE_OENf_SET BCMI_TSCF_XGXS_PMD_X1_OVRR_GEN2r_CORE_MODE_OENf_SET
#define PMD_X1_OVRR_GEN2r_PLL_LOCK_OVRDf_GET BCMI_TSCF_XGXS_PMD_X1_OVRR_GEN2r_PLL_LOCK_OVRDf_GET
#define PMD_X1_OVRR_GEN2r_PLL_LOCK_OVRDf_SET BCMI_TSCF_XGXS_PMD_X1_OVRR_GEN2r_PLL_LOCK_OVRDf_SET
#define READ_PMD_X1_OVRR_GEN2r BCMI_TSCF_XGXS_READ_PMD_X1_OVRR_GEN2r
#define WRITE_PMD_X1_OVRR_GEN2r BCMI_TSCF_XGXS_WRITE_PMD_X1_OVRR_GEN2r
#define MODIFY_PMD_X1_OVRR_GEN2r BCMI_TSCF_XGXS_MODIFY_PMD_X1_OVRR_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PMD_X1_OVRR_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PKTGEN_CTL1_GEN2
 * BLOCKS:   PKTGEN0
 * REGADDR:  0x9030
 * DESC:     Packet Gen Control 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TX_TEST_PORT_SEL Port for which Packet generator or PRTP generator should be enabledPacket generator and PRTP generator are shared across all port, so only one port can have either of them enabledThis register is not used
 *     LPI_EN           replace idles with lpi (eee)This register is not used
 *     PRTP_DATA_PATTERN_SEL 0: Local Fault Pattern, 1: Zeros Data PatternPer lane control
 *     RX_PORT_SEL      Port for which Packet checker or PRTP checker should be enabledPacket checker and PRTP checker are shared across all port, so only one port can have either of them enabled
 *     CLR_CRCCNT       Clear CRC error count in Packet Checker
 *     RX_MSBUS_TYPE    1: MII/GMII type octet, 0: XGMII/XLGMII type octet
 *     RX_PKT_CHECK_EN  Eanble Rx Packet CRC checker
 *     NUMBER_PKT       number of packets0: Idles1: single packet2: unlimited packets3-15 (RESERVED)This register is not used
 */
#define BCMI_TSCF_XGXS_PKTGEN_CTL1_GEN2r (0x00109030 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PKTGEN_CTL1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PKTGEN_CTL1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PKTGEN_CTL1_GEN2r_s {
	uint32_t v[1];
	uint32_t pktgen_ctl1_gen2[1];
	uint32_t _pktgen_ctl1_gen2;
} BCMI_TSCF_XGXS_PKTGEN_CTL1_GEN2r_t;

#define BCMI_TSCF_XGXS_PKTGEN_CTL1_GEN2r_CLR(r) (r).pktgen_ctl1_gen2[0] = 0
#define BCMI_TSCF_XGXS_PKTGEN_CTL1_GEN2r_SET(r,d) (r).pktgen_ctl1_gen2[0] = d
#define BCMI_TSCF_XGXS_PKTGEN_CTL1_GEN2r_GET(r) (r).pktgen_ctl1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PKTGEN_CTL1_GEN2r_NUMBER_PKTf_GET(r) ((((r).pktgen_ctl1_gen2[0]) >> 12) & 0xf)
#define BCMI_TSCF_XGXS_PKTGEN_CTL1_GEN2r_NUMBER_PKTf_SET(r,f) (r).pktgen_ctl1_gen2[0]=(((r).pktgen_ctl1_gen2[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_TSCF_XGXS_PKTGEN_CTL1_GEN2r_RX_PKT_CHECK_ENf_GET(r) ((((r).pktgen_ctl1_gen2[0]) >> 11) & 0x1)
#define BCMI_TSCF_XGXS_PKTGEN_CTL1_GEN2r_RX_PKT_CHECK_ENf_SET(r,f) (r).pktgen_ctl1_gen2[0]=(((r).pktgen_ctl1_gen2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_XGXS_PKTGEN_CTL1_GEN2r_RX_MSBUS_TYPEf_GET(r) ((((r).pktgen_ctl1_gen2[0]) >> 10) & 0x1)
#define BCMI_TSCF_XGXS_PKTGEN_CTL1_GEN2r_RX_MSBUS_TYPEf_SET(r,f) (r).pktgen_ctl1_gen2[0]=(((r).pktgen_ctl1_gen2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_XGXS_PKTGEN_CTL1_GEN2r_CLR_CRCCNTf_GET(r) ((((r).pktgen_ctl1_gen2[0]) >> 9) & 0x1)
#define BCMI_TSCF_XGXS_PKTGEN_CTL1_GEN2r_CLR_CRCCNTf_SET(r,f) (r).pktgen_ctl1_gen2[0]=(((r).pktgen_ctl1_gen2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_XGXS_PKTGEN_CTL1_GEN2r_RX_PORT_SELf_GET(r) ((((r).pktgen_ctl1_gen2[0]) >> 7) & 0x3)
#define BCMI_TSCF_XGXS_PKTGEN_CTL1_GEN2r_RX_PORT_SELf_SET(r,f) (r).pktgen_ctl1_gen2[0]=(((r).pktgen_ctl1_gen2[0] & ~((uint32_t)0x3 << 7)) | ((((uint32_t)f) & 0x3) << 7)) | (3 << (16 + 7))
#define BCMI_TSCF_XGXS_PKTGEN_CTL1_GEN2r_PRTP_DATA_PATTERN_SELf_GET(r) ((((r).pktgen_ctl1_gen2[0]) >> 3) & 0xf)
#define BCMI_TSCF_XGXS_PKTGEN_CTL1_GEN2r_PRTP_DATA_PATTERN_SELf_SET(r,f) (r).pktgen_ctl1_gen2[0]=(((r).pktgen_ctl1_gen2[0] & ~((uint32_t)0xf << 3)) | ((((uint32_t)f) & 0xf) << 3)) | (15 << (16 + 3))
#define BCMI_TSCF_XGXS_PKTGEN_CTL1_GEN2r_LPI_ENf_GET(r) ((((r).pktgen_ctl1_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_PKTGEN_CTL1_GEN2r_LPI_ENf_SET(r,f) (r).pktgen_ctl1_gen2[0]=(((r).pktgen_ctl1_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_PKTGEN_CTL1_GEN2r_TX_TEST_PORT_SELf_GET(r) (((r).pktgen_ctl1_gen2[0]) & 0x3)
#define BCMI_TSCF_XGXS_PKTGEN_CTL1_GEN2r_TX_TEST_PORT_SELf_SET(r,f) (r).pktgen_ctl1_gen2[0]=(((r).pktgen_ctl1_gen2[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access PKTGEN_CTL1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PKTGEN_CTL1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PKTGEN_CTL1_GEN2r,(_r._pktgen_ctl1_gen2))
#define BCMI_TSCF_XGXS_WRITE_PKTGEN_CTL1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PKTGEN_CTL1_GEN2r,(_r._pktgen_ctl1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PKTGEN_CTL1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PKTGEN_CTL1_GEN2r,(_r._pktgen_ctl1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PKTGEN_CTL1_GEN2r BCMI_TSCF_XGXS_PKTGEN_CTL1_GEN2r
#define PKTGEN_CTL1_GEN2r_SIZE BCMI_TSCF_XGXS_PKTGEN_CTL1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PKTGEN_CTL1_GEN2r_t PKTGEN_CTL1_GEN2r_t;
#define PKTGEN_CTL1_GEN2r_CLR BCMI_TSCF_XGXS_PKTGEN_CTL1_GEN2r_CLR
#define PKTGEN_CTL1_GEN2r_SET BCMI_TSCF_XGXS_PKTGEN_CTL1_GEN2r_SET
#define PKTGEN_CTL1_GEN2r_GET BCMI_TSCF_XGXS_PKTGEN_CTL1_GEN2r_GET
#define PKTGEN_CTL1_GEN2r_NUMBER_PKTf_GET BCMI_TSCF_XGXS_PKTGEN_CTL1_GEN2r_NUMBER_PKTf_GET
#define PKTGEN_CTL1_GEN2r_NUMBER_PKTf_SET BCMI_TSCF_XGXS_PKTGEN_CTL1_GEN2r_NUMBER_PKTf_SET
#define PKTGEN_CTL1_GEN2r_RX_PKT_CHECK_ENf_GET BCMI_TSCF_XGXS_PKTGEN_CTL1_GEN2r_RX_PKT_CHECK_ENf_GET
#define PKTGEN_CTL1_GEN2r_RX_PKT_CHECK_ENf_SET BCMI_TSCF_XGXS_PKTGEN_CTL1_GEN2r_RX_PKT_CHECK_ENf_SET
#define PKTGEN_CTL1_GEN2r_RX_MSBUS_TYPEf_GET BCMI_TSCF_XGXS_PKTGEN_CTL1_GEN2r_RX_MSBUS_TYPEf_GET
#define PKTGEN_CTL1_GEN2r_RX_MSBUS_TYPEf_SET BCMI_TSCF_XGXS_PKTGEN_CTL1_GEN2r_RX_MSBUS_TYPEf_SET
#define PKTGEN_CTL1_GEN2r_CLR_CRCCNTf_GET BCMI_TSCF_XGXS_PKTGEN_CTL1_GEN2r_CLR_CRCCNTf_GET
#define PKTGEN_CTL1_GEN2r_CLR_CRCCNTf_SET BCMI_TSCF_XGXS_PKTGEN_CTL1_GEN2r_CLR_CRCCNTf_SET
#define PKTGEN_CTL1_GEN2r_RX_PORT_SELf_GET BCMI_TSCF_XGXS_PKTGEN_CTL1_GEN2r_RX_PORT_SELf_GET
#define PKTGEN_CTL1_GEN2r_RX_PORT_SELf_SET BCMI_TSCF_XGXS_PKTGEN_CTL1_GEN2r_RX_PORT_SELf_SET
#define PKTGEN_CTL1_GEN2r_PRTP_DATA_PATTERN_SELf_GET BCMI_TSCF_XGXS_PKTGEN_CTL1_GEN2r_PRTP_DATA_PATTERN_SELf_GET
#define PKTGEN_CTL1_GEN2r_PRTP_DATA_PATTERN_SELf_SET BCMI_TSCF_XGXS_PKTGEN_CTL1_GEN2r_PRTP_DATA_PATTERN_SELf_SET
#define PKTGEN_CTL1_GEN2r_LPI_ENf_GET BCMI_TSCF_XGXS_PKTGEN_CTL1_GEN2r_LPI_ENf_GET
#define PKTGEN_CTL1_GEN2r_LPI_ENf_SET BCMI_TSCF_XGXS_PKTGEN_CTL1_GEN2r_LPI_ENf_SET
#define PKTGEN_CTL1_GEN2r_TX_TEST_PORT_SELf_GET BCMI_TSCF_XGXS_PKTGEN_CTL1_GEN2r_TX_TEST_PORT_SELf_GET
#define PKTGEN_CTL1_GEN2r_TX_TEST_PORT_SELf_SET BCMI_TSCF_XGXS_PKTGEN_CTL1_GEN2r_TX_TEST_PORT_SELf_SET
#define READ_PKTGEN_CTL1_GEN2r BCMI_TSCF_XGXS_READ_PKTGEN_CTL1_GEN2r
#define WRITE_PKTGEN_CTL1_GEN2r BCMI_TSCF_XGXS_WRITE_PKTGEN_CTL1_GEN2r
#define MODIFY_PKTGEN_CTL1_GEN2r BCMI_TSCF_XGXS_MODIFY_PKTGEN_CTL1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PKTGEN_CTL1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PKTGEN_CTL2_GEN2
 * BLOCKS:   PKTGEN0
 * REGADDR:  0x9031
 * DESC:     Packet Gen Control 1
 * RESETVAL: 0x28 (40)
 * ACCESS:   R/W
 * FIELDS:
 *     IPG_SIZE         number of bytesrange is 0 to 32 bytesThis register is not used
 *     PKT_SIZE         number of 256 bytesrange is 256 to 16384 bytesthere is a dependency with respect to ipg_size programming in non GMII mode because of SOP alignmentneed to meet this requirement: (pkt_size+ipg_size) / 8 = 4This register is not used
 *     PAYLOAD_TYPE     payload typeThis register is not used
 *     TX_MSBUS_TYPE    1: MII/GMII type octet, 0: XGMII/XLGMII type octetThis register is not used
 *     PKTGEN_EN        packet gen enableThis register is not used
 */
#define BCMI_TSCF_XGXS_PKTGEN_CTL2_GEN2r (0x00109031 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PKTGEN_CTL2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PKTGEN_CTL2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PKTGEN_CTL2_GEN2r_s {
	uint32_t v[1];
	uint32_t pktgen_ctl2_gen2[1];
	uint32_t _pktgen_ctl2_gen2;
} BCMI_TSCF_XGXS_PKTGEN_CTL2_GEN2r_t;

#define BCMI_TSCF_XGXS_PKTGEN_CTL2_GEN2r_CLR(r) (r).pktgen_ctl2_gen2[0] = 0
#define BCMI_TSCF_XGXS_PKTGEN_CTL2_GEN2r_SET(r,d) (r).pktgen_ctl2_gen2[0] = d
#define BCMI_TSCF_XGXS_PKTGEN_CTL2_GEN2r_GET(r) (r).pktgen_ctl2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PKTGEN_CTL2_GEN2r_PKTGEN_ENf_GET(r) ((((r).pktgen_ctl2_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_PKTGEN_CTL2_GEN2r_PKTGEN_ENf_SET(r,f) (r).pktgen_ctl2_gen2[0]=(((r).pktgen_ctl2_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_PKTGEN_CTL2_GEN2r_TX_MSBUS_TYPEf_GET(r) ((((r).pktgen_ctl2_gen2[0]) >> 14) & 0x1)
#define BCMI_TSCF_XGXS_PKTGEN_CTL2_GEN2r_TX_MSBUS_TYPEf_SET(r,f) (r).pktgen_ctl2_gen2[0]=(((r).pktgen_ctl2_gen2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_XGXS_PKTGEN_CTL2_GEN2r_PAYLOAD_TYPEf_GET(r) ((((r).pktgen_ctl2_gen2[0]) >> 11) & 0x7)
#define BCMI_TSCF_XGXS_PKTGEN_CTL2_GEN2r_PAYLOAD_TYPEf_SET(r,f) (r).pktgen_ctl2_gen2[0]=(((r).pktgen_ctl2_gen2[0] & ~((uint32_t)0x7 << 11)) | ((((uint32_t)f) & 0x7) << 11)) | (7 << (16 + 11))
#define BCMI_TSCF_XGXS_PKTGEN_CTL2_GEN2r_PKT_SIZEf_GET(r) ((((r).pktgen_ctl2_gen2[0]) >> 5) & 0x3f)
#define BCMI_TSCF_XGXS_PKTGEN_CTL2_GEN2r_PKT_SIZEf_SET(r,f) (r).pktgen_ctl2_gen2[0]=(((r).pktgen_ctl2_gen2[0] & ~((uint32_t)0x3f << 5)) | ((((uint32_t)f) & 0x3f) << 5)) | (63 << (16 + 5))
#define BCMI_TSCF_XGXS_PKTGEN_CTL2_GEN2r_IPG_SIZEf_GET(r) (((r).pktgen_ctl2_gen2[0]) & 0x1f)
#define BCMI_TSCF_XGXS_PKTGEN_CTL2_GEN2r_IPG_SIZEf_SET(r,f) (r).pktgen_ctl2_gen2[0]=(((r).pktgen_ctl2_gen2[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access PKTGEN_CTL2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PKTGEN_CTL2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PKTGEN_CTL2_GEN2r,(_r._pktgen_ctl2_gen2))
#define BCMI_TSCF_XGXS_WRITE_PKTGEN_CTL2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PKTGEN_CTL2_GEN2r,(_r._pktgen_ctl2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PKTGEN_CTL2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PKTGEN_CTL2_GEN2r,(_r._pktgen_ctl2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PKTGEN_CTL2_GEN2r BCMI_TSCF_XGXS_PKTGEN_CTL2_GEN2r
#define PKTGEN_CTL2_GEN2r_SIZE BCMI_TSCF_XGXS_PKTGEN_CTL2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PKTGEN_CTL2_GEN2r_t PKTGEN_CTL2_GEN2r_t;
#define PKTGEN_CTL2_GEN2r_CLR BCMI_TSCF_XGXS_PKTGEN_CTL2_GEN2r_CLR
#define PKTGEN_CTL2_GEN2r_SET BCMI_TSCF_XGXS_PKTGEN_CTL2_GEN2r_SET
#define PKTGEN_CTL2_GEN2r_GET BCMI_TSCF_XGXS_PKTGEN_CTL2_GEN2r_GET
#define PKTGEN_CTL2_GEN2r_PKTGEN_ENf_GET BCMI_TSCF_XGXS_PKTGEN_CTL2_GEN2r_PKTGEN_ENf_GET
#define PKTGEN_CTL2_GEN2r_PKTGEN_ENf_SET BCMI_TSCF_XGXS_PKTGEN_CTL2_GEN2r_PKTGEN_ENf_SET
#define PKTGEN_CTL2_GEN2r_TX_MSBUS_TYPEf_GET BCMI_TSCF_XGXS_PKTGEN_CTL2_GEN2r_TX_MSBUS_TYPEf_GET
#define PKTGEN_CTL2_GEN2r_TX_MSBUS_TYPEf_SET BCMI_TSCF_XGXS_PKTGEN_CTL2_GEN2r_TX_MSBUS_TYPEf_SET
#define PKTGEN_CTL2_GEN2r_PAYLOAD_TYPEf_GET BCMI_TSCF_XGXS_PKTGEN_CTL2_GEN2r_PAYLOAD_TYPEf_GET
#define PKTGEN_CTL2_GEN2r_PAYLOAD_TYPEf_SET BCMI_TSCF_XGXS_PKTGEN_CTL2_GEN2r_PAYLOAD_TYPEf_SET
#define PKTGEN_CTL2_GEN2r_PKT_SIZEf_GET BCMI_TSCF_XGXS_PKTGEN_CTL2_GEN2r_PKT_SIZEf_GET
#define PKTGEN_CTL2_GEN2r_PKT_SIZEf_SET BCMI_TSCF_XGXS_PKTGEN_CTL2_GEN2r_PKT_SIZEf_SET
#define PKTGEN_CTL2_GEN2r_IPG_SIZEf_GET BCMI_TSCF_XGXS_PKTGEN_CTL2_GEN2r_IPG_SIZEf_GET
#define PKTGEN_CTL2_GEN2r_IPG_SIZEf_SET BCMI_TSCF_XGXS_PKTGEN_CTL2_GEN2r_IPG_SIZEf_SET
#define READ_PKTGEN_CTL2_GEN2r BCMI_TSCF_XGXS_READ_PKTGEN_CTL2_GEN2r
#define WRITE_PKTGEN_CTL2_GEN2r BCMI_TSCF_XGXS_WRITE_PKTGEN_CTL2_GEN2r
#define MODIFY_PKTGEN_CTL2_GEN2r BCMI_TSCF_XGXS_MODIFY_PKTGEN_CTL2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PKTGEN_CTL2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PKTGEN_CTL3_GEN2
 * BLOCKS:   PKTGEN0
 * REGADDR:  0x9032
 * DESC:     Packet Gen Control 2
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CLR_TXCNT        clear tx counters
 *     CLR_RXCNT        clear rx counters
 */
#define BCMI_TSCF_XGXS_PKTGEN_CTL3_GEN2r (0x00109032 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PKTGEN_CTL3_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PKTGEN_CTL3_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PKTGEN_CTL3_GEN2r_s {
	uint32_t v[1];
	uint32_t pktgen_ctl3_gen2[1];
	uint32_t _pktgen_ctl3_gen2;
} BCMI_TSCF_XGXS_PKTGEN_CTL3_GEN2r_t;

#define BCMI_TSCF_XGXS_PKTGEN_CTL3_GEN2r_CLR(r) (r).pktgen_ctl3_gen2[0] = 0
#define BCMI_TSCF_XGXS_PKTGEN_CTL3_GEN2r_SET(r,d) (r).pktgen_ctl3_gen2[0] = d
#define BCMI_TSCF_XGXS_PKTGEN_CTL3_GEN2r_GET(r) (r).pktgen_ctl3_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PKTGEN_CTL3_GEN2r_CLR_RXCNTf_GET(r) ((((r).pktgen_ctl3_gen2[0]) >> 5) & 0xf)
#define BCMI_TSCF_XGXS_PKTGEN_CTL3_GEN2r_CLR_RXCNTf_SET(r,f) (r).pktgen_ctl3_gen2[0]=(((r).pktgen_ctl3_gen2[0] & ~((uint32_t)0xf << 5)) | ((((uint32_t)f) & 0xf) << 5)) | (15 << (16 + 5))
#define BCMI_TSCF_XGXS_PKTGEN_CTL3_GEN2r_CLR_TXCNTf_GET(r) ((((r).pktgen_ctl3_gen2[0]) >> 1) & 0xf)
#define BCMI_TSCF_XGXS_PKTGEN_CTL3_GEN2r_CLR_TXCNTf_SET(r,f) (r).pktgen_ctl3_gen2[0]=(((r).pktgen_ctl3_gen2[0] & ~((uint32_t)0xf << 1)) | ((((uint32_t)f) & 0xf) << 1)) | (15 << (16 + 1))

/*
 * These macros can be used to access PKTGEN_CTL3_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PKTGEN_CTL3_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PKTGEN_CTL3_GEN2r,(_r._pktgen_ctl3_gen2))
#define BCMI_TSCF_XGXS_WRITE_PKTGEN_CTL3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PKTGEN_CTL3_GEN2r,(_r._pktgen_ctl3_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PKTGEN_CTL3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PKTGEN_CTL3_GEN2r,(_r._pktgen_ctl3_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PKTGEN_CTL3_GEN2r BCMI_TSCF_XGXS_PKTGEN_CTL3_GEN2r
#define PKTGEN_CTL3_GEN2r_SIZE BCMI_TSCF_XGXS_PKTGEN_CTL3_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PKTGEN_CTL3_GEN2r_t PKTGEN_CTL3_GEN2r_t;
#define PKTGEN_CTL3_GEN2r_CLR BCMI_TSCF_XGXS_PKTGEN_CTL3_GEN2r_CLR
#define PKTGEN_CTL3_GEN2r_SET BCMI_TSCF_XGXS_PKTGEN_CTL3_GEN2r_SET
#define PKTGEN_CTL3_GEN2r_GET BCMI_TSCF_XGXS_PKTGEN_CTL3_GEN2r_GET
#define PKTGEN_CTL3_GEN2r_CLR_RXCNTf_GET BCMI_TSCF_XGXS_PKTGEN_CTL3_GEN2r_CLR_RXCNTf_GET
#define PKTGEN_CTL3_GEN2r_CLR_RXCNTf_SET BCMI_TSCF_XGXS_PKTGEN_CTL3_GEN2r_CLR_RXCNTf_SET
#define PKTGEN_CTL3_GEN2r_CLR_TXCNTf_GET BCMI_TSCF_XGXS_PKTGEN_CTL3_GEN2r_CLR_TXCNTf_GET
#define PKTGEN_CTL3_GEN2r_CLR_TXCNTf_SET BCMI_TSCF_XGXS_PKTGEN_CTL3_GEN2r_CLR_TXCNTf_SET
#define READ_PKTGEN_CTL3_GEN2r BCMI_TSCF_XGXS_READ_PKTGEN_CTL3_GEN2r
#define WRITE_PKTGEN_CTL3_GEN2r BCMI_TSCF_XGXS_WRITE_PKTGEN_CTL3_GEN2r
#define MODIFY_PKTGEN_CTL3_GEN2r BCMI_TSCF_XGXS_MODIFY_PKTGEN_CTL3_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PKTGEN_CTL3_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PKTGEN_PRTPCTL_GEN2
 * BLOCKS:   PKTGEN0
 * REGADDR:  0x9033
 * DESC:     PRTP CONTROLS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RX_PRTP_EN       Enable Pseudo Random Test Pattern(PRTP) checker
 *     TX_PRTP_EN       Enable Pseudo Random Test Pattern(PRTP) Generator
 */
#define BCMI_TSCF_XGXS_PKTGEN_PRTPCTL_GEN2r (0x00109033 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PKTGEN_PRTPCTL_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PKTGEN_PRTPCTL_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PKTGEN_PRTPCTL_GEN2r_s {
	uint32_t v[1];
	uint32_t pktgen_prtpctl_gen2[1];
	uint32_t _pktgen_prtpctl_gen2;
} BCMI_TSCF_XGXS_PKTGEN_PRTPCTL_GEN2r_t;

#define BCMI_TSCF_XGXS_PKTGEN_PRTPCTL_GEN2r_CLR(r) (r).pktgen_prtpctl_gen2[0] = 0
#define BCMI_TSCF_XGXS_PKTGEN_PRTPCTL_GEN2r_SET(r,d) (r).pktgen_prtpctl_gen2[0] = d
#define BCMI_TSCF_XGXS_PKTGEN_PRTPCTL_GEN2r_GET(r) (r).pktgen_prtpctl_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PKTGEN_PRTPCTL_GEN2r_TX_PRTP_ENf_GET(r) ((((r).pktgen_prtpctl_gen2[0]) >> 12) & 0xf)
#define BCMI_TSCF_XGXS_PKTGEN_PRTPCTL_GEN2r_TX_PRTP_ENf_SET(r,f) (r).pktgen_prtpctl_gen2[0]=(((r).pktgen_prtpctl_gen2[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_TSCF_XGXS_PKTGEN_PRTPCTL_GEN2r_RX_PRTP_ENf_GET(r) ((((r).pktgen_prtpctl_gen2[0]) >> 8) & 0xf)
#define BCMI_TSCF_XGXS_PKTGEN_PRTPCTL_GEN2r_RX_PRTP_ENf_SET(r,f) (r).pktgen_prtpctl_gen2[0]=(((r).pktgen_prtpctl_gen2[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))

/*
 * These macros can be used to access PKTGEN_PRTPCTL_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PKTGEN_PRTPCTL_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PKTGEN_PRTPCTL_GEN2r,(_r._pktgen_prtpctl_gen2))
#define BCMI_TSCF_XGXS_WRITE_PKTGEN_PRTPCTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PKTGEN_PRTPCTL_GEN2r,(_r._pktgen_prtpctl_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PKTGEN_PRTPCTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PKTGEN_PRTPCTL_GEN2r,(_r._pktgen_prtpctl_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PKTGEN_PRTPCTL_GEN2r BCMI_TSCF_XGXS_PKTGEN_PRTPCTL_GEN2r
#define PKTGEN_PRTPCTL_GEN2r_SIZE BCMI_TSCF_XGXS_PKTGEN_PRTPCTL_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PKTGEN_PRTPCTL_GEN2r_t PKTGEN_PRTPCTL_GEN2r_t;
#define PKTGEN_PRTPCTL_GEN2r_CLR BCMI_TSCF_XGXS_PKTGEN_PRTPCTL_GEN2r_CLR
#define PKTGEN_PRTPCTL_GEN2r_SET BCMI_TSCF_XGXS_PKTGEN_PRTPCTL_GEN2r_SET
#define PKTGEN_PRTPCTL_GEN2r_GET BCMI_TSCF_XGXS_PKTGEN_PRTPCTL_GEN2r_GET
#define PKTGEN_PRTPCTL_GEN2r_TX_PRTP_ENf_GET BCMI_TSCF_XGXS_PKTGEN_PRTPCTL_GEN2r_TX_PRTP_ENf_GET
#define PKTGEN_PRTPCTL_GEN2r_TX_PRTP_ENf_SET BCMI_TSCF_XGXS_PKTGEN_PRTPCTL_GEN2r_TX_PRTP_ENf_SET
#define PKTGEN_PRTPCTL_GEN2r_RX_PRTP_ENf_GET BCMI_TSCF_XGXS_PKTGEN_PRTPCTL_GEN2r_RX_PRTP_ENf_GET
#define PKTGEN_PRTPCTL_GEN2r_RX_PRTP_ENf_SET BCMI_TSCF_XGXS_PKTGEN_PRTPCTL_GEN2r_RX_PRTP_ENf_SET
#define READ_PKTGEN_PRTPCTL_GEN2r BCMI_TSCF_XGXS_READ_PKTGEN_PRTPCTL_GEN2r
#define WRITE_PKTGEN_PRTPCTL_GEN2r BCMI_TSCF_XGXS_WRITE_PKTGEN_PRTPCTL_GEN2r
#define MODIFY_PKTGEN_PRTPCTL_GEN2r BCMI_TSCF_XGXS_MODIFY_PKTGEN_PRTPCTL_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PKTGEN_PRTPCTL_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PKTGEN_CRCERRCNT_GEN2
 * BLOCKS:   PKTGEN0
 * REGADDR:  0x9034
 * DESC:     CRC Error Count Register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CRCERRCNT        Count of received packet with bad crc.
 */
#define BCMI_TSCF_XGXS_PKTGEN_CRCERRCNT_GEN2r (0x00109034 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PKTGEN_CRCERRCNT_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PKTGEN_CRCERRCNT_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PKTGEN_CRCERRCNT_GEN2r_s {
	uint32_t v[1];
	uint32_t pktgen_crcerrcnt_gen2[1];
	uint32_t _pktgen_crcerrcnt_gen2;
} BCMI_TSCF_XGXS_PKTGEN_CRCERRCNT_GEN2r_t;

#define BCMI_TSCF_XGXS_PKTGEN_CRCERRCNT_GEN2r_CLR(r) (r).pktgen_crcerrcnt_gen2[0] = 0
#define BCMI_TSCF_XGXS_PKTGEN_CRCERRCNT_GEN2r_SET(r,d) (r).pktgen_crcerrcnt_gen2[0] = d
#define BCMI_TSCF_XGXS_PKTGEN_CRCERRCNT_GEN2r_GET(r) (r).pktgen_crcerrcnt_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PKTGEN_CRCERRCNT_GEN2r_CRCERRCNTf_GET(r) (((r).pktgen_crcerrcnt_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_PKTGEN_CRCERRCNT_GEN2r_CRCERRCNTf_SET(r,f) (r).pktgen_crcerrcnt_gen2[0]=(((r).pktgen_crcerrcnt_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PKTGEN_CRCERRCNT_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PKTGEN_CRCERRCNT_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PKTGEN_CRCERRCNT_GEN2r,(_r._pktgen_crcerrcnt_gen2))
#define BCMI_TSCF_XGXS_WRITE_PKTGEN_CRCERRCNT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PKTGEN_CRCERRCNT_GEN2r,(_r._pktgen_crcerrcnt_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PKTGEN_CRCERRCNT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PKTGEN_CRCERRCNT_GEN2r,(_r._pktgen_crcerrcnt_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PKTGEN_CRCERRCNT_GEN2r BCMI_TSCF_XGXS_PKTGEN_CRCERRCNT_GEN2r
#define PKTGEN_CRCERRCNT_GEN2r_SIZE BCMI_TSCF_XGXS_PKTGEN_CRCERRCNT_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PKTGEN_CRCERRCNT_GEN2r_t PKTGEN_CRCERRCNT_GEN2r_t;
#define PKTGEN_CRCERRCNT_GEN2r_CLR BCMI_TSCF_XGXS_PKTGEN_CRCERRCNT_GEN2r_CLR
#define PKTGEN_CRCERRCNT_GEN2r_SET BCMI_TSCF_XGXS_PKTGEN_CRCERRCNT_GEN2r_SET
#define PKTGEN_CRCERRCNT_GEN2r_GET BCMI_TSCF_XGXS_PKTGEN_CRCERRCNT_GEN2r_GET
#define PKTGEN_CRCERRCNT_GEN2r_CRCERRCNTf_GET BCMI_TSCF_XGXS_PKTGEN_CRCERRCNT_GEN2r_CRCERRCNTf_GET
#define PKTGEN_CRCERRCNT_GEN2r_CRCERRCNTf_SET BCMI_TSCF_XGXS_PKTGEN_CRCERRCNT_GEN2r_CRCERRCNTf_SET
#define READ_PKTGEN_CRCERRCNT_GEN2r BCMI_TSCF_XGXS_READ_PKTGEN_CRCERRCNT_GEN2r
#define WRITE_PKTGEN_CRCERRCNT_GEN2r BCMI_TSCF_XGXS_WRITE_PKTGEN_CRCERRCNT_GEN2r
#define MODIFY_PKTGEN_CRCERRCNT_GEN2r BCMI_TSCF_XGXS_MODIFY_PKTGEN_CRCERRCNT_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PKTGEN_CRCERRCNT_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PKTGEN_PCS_SEEDA0_GEN2
 * BLOCKS:   PKTGEN0
 * REGADDR:  0x9037
 * DESC:     10GBASE-R PCS 0022 test pattern seed A word bits 15:00
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     SEEDA0           10GBASE-R PCS test pattern seed A bits 0-15, seedA0[15:0]
 */
#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA0_GEN2r (0x00109037 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PKTGEN_PCS_SEEDA0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA0_GEN2r_s {
	uint32_t v[1];
	uint32_t pktgen_pcs_seeda0_gen2[1];
	uint32_t _pktgen_pcs_seeda0_gen2;
} BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA0_GEN2r_t;

#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA0_GEN2r_CLR(r) (r).pktgen_pcs_seeda0_gen2[0] = 0
#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA0_GEN2r_SET(r,d) (r).pktgen_pcs_seeda0_gen2[0] = d
#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA0_GEN2r_GET(r) (r).pktgen_pcs_seeda0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA0_GEN2r_SEEDA0f_GET(r) (((r).pktgen_pcs_seeda0_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA0_GEN2r_SEEDA0f_SET(r,f) (r).pktgen_pcs_seeda0_gen2[0]=(((r).pktgen_pcs_seeda0_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PKTGEN_PCS_SEEDA0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PKTGEN_PCS_SEEDA0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA0_GEN2r,(_r._pktgen_pcs_seeda0_gen2))
#define BCMI_TSCF_XGXS_WRITE_PKTGEN_PCS_SEEDA0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA0_GEN2r,(_r._pktgen_pcs_seeda0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PKTGEN_PCS_SEEDA0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA0_GEN2r,(_r._pktgen_pcs_seeda0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PKTGEN_PCS_SEEDA0_GEN2r BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA0_GEN2r
#define PKTGEN_PCS_SEEDA0_GEN2r_SIZE BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA0_GEN2r_t PKTGEN_PCS_SEEDA0_GEN2r_t;
#define PKTGEN_PCS_SEEDA0_GEN2r_CLR BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA0_GEN2r_CLR
#define PKTGEN_PCS_SEEDA0_GEN2r_SET BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA0_GEN2r_SET
#define PKTGEN_PCS_SEEDA0_GEN2r_GET BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA0_GEN2r_GET
#define PKTGEN_PCS_SEEDA0_GEN2r_SEEDA0f_GET BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA0_GEN2r_SEEDA0f_GET
#define PKTGEN_PCS_SEEDA0_GEN2r_SEEDA0f_SET BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA0_GEN2r_SEEDA0f_SET
#define READ_PKTGEN_PCS_SEEDA0_GEN2r BCMI_TSCF_XGXS_READ_PKTGEN_PCS_SEEDA0_GEN2r
#define WRITE_PKTGEN_PCS_SEEDA0_GEN2r BCMI_TSCF_XGXS_WRITE_PKTGEN_PCS_SEEDA0_GEN2r
#define MODIFY_PKTGEN_PCS_SEEDA0_GEN2r BCMI_TSCF_XGXS_MODIFY_PKTGEN_PCS_SEEDA0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PKTGEN_PCS_SEEDA1_GEN2
 * BLOCKS:   PKTGEN0
 * REGADDR:  0x9038
 * DESC:     10GBASE-R PCS 0023 test pattern seed A word bits 31:16
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     SEEDA1           10GBASE-R PCS test pattern seed A bits 16-31, seedA1[15:0]
 */
#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA1_GEN2r (0x00109038 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PKTGEN_PCS_SEEDA1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA1_GEN2r_s {
	uint32_t v[1];
	uint32_t pktgen_pcs_seeda1_gen2[1];
	uint32_t _pktgen_pcs_seeda1_gen2;
} BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA1_GEN2r_t;

#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA1_GEN2r_CLR(r) (r).pktgen_pcs_seeda1_gen2[0] = 0
#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA1_GEN2r_SET(r,d) (r).pktgen_pcs_seeda1_gen2[0] = d
#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA1_GEN2r_GET(r) (r).pktgen_pcs_seeda1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA1_GEN2r_SEEDA1f_GET(r) (((r).pktgen_pcs_seeda1_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA1_GEN2r_SEEDA1f_SET(r,f) (r).pktgen_pcs_seeda1_gen2[0]=(((r).pktgen_pcs_seeda1_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PKTGEN_PCS_SEEDA1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PKTGEN_PCS_SEEDA1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA1_GEN2r,(_r._pktgen_pcs_seeda1_gen2))
#define BCMI_TSCF_XGXS_WRITE_PKTGEN_PCS_SEEDA1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA1_GEN2r,(_r._pktgen_pcs_seeda1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PKTGEN_PCS_SEEDA1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA1_GEN2r,(_r._pktgen_pcs_seeda1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PKTGEN_PCS_SEEDA1_GEN2r BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA1_GEN2r
#define PKTGEN_PCS_SEEDA1_GEN2r_SIZE BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA1_GEN2r_t PKTGEN_PCS_SEEDA1_GEN2r_t;
#define PKTGEN_PCS_SEEDA1_GEN2r_CLR BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA1_GEN2r_CLR
#define PKTGEN_PCS_SEEDA1_GEN2r_SET BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA1_GEN2r_SET
#define PKTGEN_PCS_SEEDA1_GEN2r_GET BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA1_GEN2r_GET
#define PKTGEN_PCS_SEEDA1_GEN2r_SEEDA1f_GET BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA1_GEN2r_SEEDA1f_GET
#define PKTGEN_PCS_SEEDA1_GEN2r_SEEDA1f_SET BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA1_GEN2r_SEEDA1f_SET
#define READ_PKTGEN_PCS_SEEDA1_GEN2r BCMI_TSCF_XGXS_READ_PKTGEN_PCS_SEEDA1_GEN2r
#define WRITE_PKTGEN_PCS_SEEDA1_GEN2r BCMI_TSCF_XGXS_WRITE_PKTGEN_PCS_SEEDA1_GEN2r
#define MODIFY_PKTGEN_PCS_SEEDA1_GEN2r BCMI_TSCF_XGXS_MODIFY_PKTGEN_PCS_SEEDA1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PKTGEN_PCS_SEEDA2_GEN2
 * BLOCKS:   PKTGEN0
 * REGADDR:  0x9039
 * DESC:     10GBASE-R PCS 0024 test pattern seed A word bits 47:32
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     SEEDA2           10GBASE-R PCS test pattern seed A bits 32-47, seedA2[15:0]
 */
#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA2_GEN2r (0x00109039 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PKTGEN_PCS_SEEDA2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA2_GEN2r_s {
	uint32_t v[1];
	uint32_t pktgen_pcs_seeda2_gen2[1];
	uint32_t _pktgen_pcs_seeda2_gen2;
} BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA2_GEN2r_t;

#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA2_GEN2r_CLR(r) (r).pktgen_pcs_seeda2_gen2[0] = 0
#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA2_GEN2r_SET(r,d) (r).pktgen_pcs_seeda2_gen2[0] = d
#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA2_GEN2r_GET(r) (r).pktgen_pcs_seeda2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA2_GEN2r_SEEDA2f_GET(r) (((r).pktgen_pcs_seeda2_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA2_GEN2r_SEEDA2f_SET(r,f) (r).pktgen_pcs_seeda2_gen2[0]=(((r).pktgen_pcs_seeda2_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PKTGEN_PCS_SEEDA2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PKTGEN_PCS_SEEDA2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA2_GEN2r,(_r._pktgen_pcs_seeda2_gen2))
#define BCMI_TSCF_XGXS_WRITE_PKTGEN_PCS_SEEDA2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA2_GEN2r,(_r._pktgen_pcs_seeda2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PKTGEN_PCS_SEEDA2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA2_GEN2r,(_r._pktgen_pcs_seeda2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PKTGEN_PCS_SEEDA2_GEN2r BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA2_GEN2r
#define PKTGEN_PCS_SEEDA2_GEN2r_SIZE BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA2_GEN2r_t PKTGEN_PCS_SEEDA2_GEN2r_t;
#define PKTGEN_PCS_SEEDA2_GEN2r_CLR BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA2_GEN2r_CLR
#define PKTGEN_PCS_SEEDA2_GEN2r_SET BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA2_GEN2r_SET
#define PKTGEN_PCS_SEEDA2_GEN2r_GET BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA2_GEN2r_GET
#define PKTGEN_PCS_SEEDA2_GEN2r_SEEDA2f_GET BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA2_GEN2r_SEEDA2f_GET
#define PKTGEN_PCS_SEEDA2_GEN2r_SEEDA2f_SET BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA2_GEN2r_SEEDA2f_SET
#define READ_PKTGEN_PCS_SEEDA2_GEN2r BCMI_TSCF_XGXS_READ_PKTGEN_PCS_SEEDA2_GEN2r
#define WRITE_PKTGEN_PCS_SEEDA2_GEN2r BCMI_TSCF_XGXS_WRITE_PKTGEN_PCS_SEEDA2_GEN2r
#define MODIFY_PKTGEN_PCS_SEEDA2_GEN2r BCMI_TSCF_XGXS_MODIFY_PKTGEN_PCS_SEEDA2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PKTGEN_PCS_SEEDA3_GEN2
 * BLOCKS:   PKTGEN0
 * REGADDR:  0x903a
 * DESC:     10GBASE-R PCS 0025 test pattern seed A word bits 57:48
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     SEEDA3           10GBASE-R PCS test pattern seed A bits 48-57, seedA3[9:0]
 */
#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA3_GEN2r (0x0010903a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA3_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PKTGEN_PCS_SEEDA3_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA3_GEN2r_s {
	uint32_t v[1];
	uint32_t pktgen_pcs_seeda3_gen2[1];
	uint32_t _pktgen_pcs_seeda3_gen2;
} BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA3_GEN2r_t;

#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA3_GEN2r_CLR(r) (r).pktgen_pcs_seeda3_gen2[0] = 0
#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA3_GEN2r_SET(r,d) (r).pktgen_pcs_seeda3_gen2[0] = d
#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA3_GEN2r_GET(r) (r).pktgen_pcs_seeda3_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA3_GEN2r_SEEDA3f_GET(r) (((r).pktgen_pcs_seeda3_gen2[0]) & 0x3ff)
#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA3_GEN2r_SEEDA3f_SET(r,f) (r).pktgen_pcs_seeda3_gen2[0]=(((r).pktgen_pcs_seeda3_gen2[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff)) | (0x3ff << 16)

/*
 * These macros can be used to access PKTGEN_PCS_SEEDA3_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PKTGEN_PCS_SEEDA3_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA3_GEN2r,(_r._pktgen_pcs_seeda3_gen2))
#define BCMI_TSCF_XGXS_WRITE_PKTGEN_PCS_SEEDA3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA3_GEN2r,(_r._pktgen_pcs_seeda3_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PKTGEN_PCS_SEEDA3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA3_GEN2r,(_r._pktgen_pcs_seeda3_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PKTGEN_PCS_SEEDA3_GEN2r BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA3_GEN2r
#define PKTGEN_PCS_SEEDA3_GEN2r_SIZE BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA3_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA3_GEN2r_t PKTGEN_PCS_SEEDA3_GEN2r_t;
#define PKTGEN_PCS_SEEDA3_GEN2r_CLR BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA3_GEN2r_CLR
#define PKTGEN_PCS_SEEDA3_GEN2r_SET BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA3_GEN2r_SET
#define PKTGEN_PCS_SEEDA3_GEN2r_GET BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA3_GEN2r_GET
#define PKTGEN_PCS_SEEDA3_GEN2r_SEEDA3f_GET BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA3_GEN2r_SEEDA3f_GET
#define PKTGEN_PCS_SEEDA3_GEN2r_SEEDA3f_SET BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA3_GEN2r_SEEDA3f_SET
#define READ_PKTGEN_PCS_SEEDA3_GEN2r BCMI_TSCF_XGXS_READ_PKTGEN_PCS_SEEDA3_GEN2r
#define WRITE_PKTGEN_PCS_SEEDA3_GEN2r BCMI_TSCF_XGXS_WRITE_PKTGEN_PCS_SEEDA3_GEN2r
#define MODIFY_PKTGEN_PCS_SEEDA3_GEN2r BCMI_TSCF_XGXS_MODIFY_PKTGEN_PCS_SEEDA3_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDA3_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PKTGEN_PCS_SEEDB0_GEN2
 * BLOCKS:   PKTGEN0
 * REGADDR:  0x903b
 * DESC:     10GBASE-R PCS 0026 test pattern seed B word bits 15:00
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     SEEDB0           10GBASE-R PCS test pattern seed B bits 0-15, seedB0[15:0]
 */
#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB0_GEN2r (0x0010903b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PKTGEN_PCS_SEEDB0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB0_GEN2r_s {
	uint32_t v[1];
	uint32_t pktgen_pcs_seedb0_gen2[1];
	uint32_t _pktgen_pcs_seedb0_gen2;
} BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB0_GEN2r_t;

#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB0_GEN2r_CLR(r) (r).pktgen_pcs_seedb0_gen2[0] = 0
#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB0_GEN2r_SET(r,d) (r).pktgen_pcs_seedb0_gen2[0] = d
#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB0_GEN2r_GET(r) (r).pktgen_pcs_seedb0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB0_GEN2r_SEEDB0f_GET(r) (((r).pktgen_pcs_seedb0_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB0_GEN2r_SEEDB0f_SET(r,f) (r).pktgen_pcs_seedb0_gen2[0]=(((r).pktgen_pcs_seedb0_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PKTGEN_PCS_SEEDB0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PKTGEN_PCS_SEEDB0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB0_GEN2r,(_r._pktgen_pcs_seedb0_gen2))
#define BCMI_TSCF_XGXS_WRITE_PKTGEN_PCS_SEEDB0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB0_GEN2r,(_r._pktgen_pcs_seedb0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PKTGEN_PCS_SEEDB0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB0_GEN2r,(_r._pktgen_pcs_seedb0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PKTGEN_PCS_SEEDB0_GEN2r BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB0_GEN2r
#define PKTGEN_PCS_SEEDB0_GEN2r_SIZE BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB0_GEN2r_t PKTGEN_PCS_SEEDB0_GEN2r_t;
#define PKTGEN_PCS_SEEDB0_GEN2r_CLR BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB0_GEN2r_CLR
#define PKTGEN_PCS_SEEDB0_GEN2r_SET BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB0_GEN2r_SET
#define PKTGEN_PCS_SEEDB0_GEN2r_GET BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB0_GEN2r_GET
#define PKTGEN_PCS_SEEDB0_GEN2r_SEEDB0f_GET BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB0_GEN2r_SEEDB0f_GET
#define PKTGEN_PCS_SEEDB0_GEN2r_SEEDB0f_SET BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB0_GEN2r_SEEDB0f_SET
#define READ_PKTGEN_PCS_SEEDB0_GEN2r BCMI_TSCF_XGXS_READ_PKTGEN_PCS_SEEDB0_GEN2r
#define WRITE_PKTGEN_PCS_SEEDB0_GEN2r BCMI_TSCF_XGXS_WRITE_PKTGEN_PCS_SEEDB0_GEN2r
#define MODIFY_PKTGEN_PCS_SEEDB0_GEN2r BCMI_TSCF_XGXS_MODIFY_PKTGEN_PCS_SEEDB0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PKTGEN_PCS_SEEDB1_GEN2
 * BLOCKS:   PKTGEN0
 * REGADDR:  0x903c
 * DESC:     10GBASE-R PCS 0027 test pattern seed B word bits 31:16
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     SEEDB1           10GBASE-R PCS test pattern seed B bits 16-31, seedB1[15:0]
 */
#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB1_GEN2r (0x0010903c | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PKTGEN_PCS_SEEDB1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB1_GEN2r_s {
	uint32_t v[1];
	uint32_t pktgen_pcs_seedb1_gen2[1];
	uint32_t _pktgen_pcs_seedb1_gen2;
} BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB1_GEN2r_t;

#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB1_GEN2r_CLR(r) (r).pktgen_pcs_seedb1_gen2[0] = 0
#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB1_GEN2r_SET(r,d) (r).pktgen_pcs_seedb1_gen2[0] = d
#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB1_GEN2r_GET(r) (r).pktgen_pcs_seedb1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB1_GEN2r_SEEDB1f_GET(r) (((r).pktgen_pcs_seedb1_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB1_GEN2r_SEEDB1f_SET(r,f) (r).pktgen_pcs_seedb1_gen2[0]=(((r).pktgen_pcs_seedb1_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PKTGEN_PCS_SEEDB1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PKTGEN_PCS_SEEDB1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB1_GEN2r,(_r._pktgen_pcs_seedb1_gen2))
#define BCMI_TSCF_XGXS_WRITE_PKTGEN_PCS_SEEDB1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB1_GEN2r,(_r._pktgen_pcs_seedb1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PKTGEN_PCS_SEEDB1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB1_GEN2r,(_r._pktgen_pcs_seedb1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PKTGEN_PCS_SEEDB1_GEN2r BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB1_GEN2r
#define PKTGEN_PCS_SEEDB1_GEN2r_SIZE BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB1_GEN2r_t PKTGEN_PCS_SEEDB1_GEN2r_t;
#define PKTGEN_PCS_SEEDB1_GEN2r_CLR BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB1_GEN2r_CLR
#define PKTGEN_PCS_SEEDB1_GEN2r_SET BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB1_GEN2r_SET
#define PKTGEN_PCS_SEEDB1_GEN2r_GET BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB1_GEN2r_GET
#define PKTGEN_PCS_SEEDB1_GEN2r_SEEDB1f_GET BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB1_GEN2r_SEEDB1f_GET
#define PKTGEN_PCS_SEEDB1_GEN2r_SEEDB1f_SET BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB1_GEN2r_SEEDB1f_SET
#define READ_PKTGEN_PCS_SEEDB1_GEN2r BCMI_TSCF_XGXS_READ_PKTGEN_PCS_SEEDB1_GEN2r
#define WRITE_PKTGEN_PCS_SEEDB1_GEN2r BCMI_TSCF_XGXS_WRITE_PKTGEN_PCS_SEEDB1_GEN2r
#define MODIFY_PKTGEN_PCS_SEEDB1_GEN2r BCMI_TSCF_XGXS_MODIFY_PKTGEN_PCS_SEEDB1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PKTGEN_PCS_SEEDB2_GEN2
 * BLOCKS:   PKTGEN0
 * REGADDR:  0x903d
 * DESC:     10GBASE-R PCS 0028 test pattern seed B word bits 47:32
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     SEEDB2           10GBASE-R PCS test pattern seed B bits 32-47, seedB2[15:0]
 */
#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB2_GEN2r (0x0010903d | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PKTGEN_PCS_SEEDB2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB2_GEN2r_s {
	uint32_t v[1];
	uint32_t pktgen_pcs_seedb2_gen2[1];
	uint32_t _pktgen_pcs_seedb2_gen2;
} BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB2_GEN2r_t;

#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB2_GEN2r_CLR(r) (r).pktgen_pcs_seedb2_gen2[0] = 0
#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB2_GEN2r_SET(r,d) (r).pktgen_pcs_seedb2_gen2[0] = d
#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB2_GEN2r_GET(r) (r).pktgen_pcs_seedb2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB2_GEN2r_SEEDB2f_GET(r) (((r).pktgen_pcs_seedb2_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB2_GEN2r_SEEDB2f_SET(r,f) (r).pktgen_pcs_seedb2_gen2[0]=(((r).pktgen_pcs_seedb2_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PKTGEN_PCS_SEEDB2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PKTGEN_PCS_SEEDB2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB2_GEN2r,(_r._pktgen_pcs_seedb2_gen2))
#define BCMI_TSCF_XGXS_WRITE_PKTGEN_PCS_SEEDB2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB2_GEN2r,(_r._pktgen_pcs_seedb2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PKTGEN_PCS_SEEDB2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB2_GEN2r,(_r._pktgen_pcs_seedb2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PKTGEN_PCS_SEEDB2_GEN2r BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB2_GEN2r
#define PKTGEN_PCS_SEEDB2_GEN2r_SIZE BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB2_GEN2r_t PKTGEN_PCS_SEEDB2_GEN2r_t;
#define PKTGEN_PCS_SEEDB2_GEN2r_CLR BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB2_GEN2r_CLR
#define PKTGEN_PCS_SEEDB2_GEN2r_SET BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB2_GEN2r_SET
#define PKTGEN_PCS_SEEDB2_GEN2r_GET BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB2_GEN2r_GET
#define PKTGEN_PCS_SEEDB2_GEN2r_SEEDB2f_GET BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB2_GEN2r_SEEDB2f_GET
#define PKTGEN_PCS_SEEDB2_GEN2r_SEEDB2f_SET BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB2_GEN2r_SEEDB2f_SET
#define READ_PKTGEN_PCS_SEEDB2_GEN2r BCMI_TSCF_XGXS_READ_PKTGEN_PCS_SEEDB2_GEN2r
#define WRITE_PKTGEN_PCS_SEEDB2_GEN2r BCMI_TSCF_XGXS_WRITE_PKTGEN_PCS_SEEDB2_GEN2r
#define MODIFY_PKTGEN_PCS_SEEDB2_GEN2r BCMI_TSCF_XGXS_MODIFY_PKTGEN_PCS_SEEDB2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PKTGEN_PCS_SEEDB3_GEN2
 * BLOCKS:   PKTGEN0
 * REGADDR:  0x903e
 * DESC:     10GBASE-R PCS 0029 test pattern seed B word bits 57:48
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     SEEDB3           10GBASE-R PCS test pattern seed B bits 48-57, seedB3[9:0]
 */
#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB3_GEN2r (0x0010903e | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB3_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PKTGEN_PCS_SEEDB3_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB3_GEN2r_s {
	uint32_t v[1];
	uint32_t pktgen_pcs_seedb3_gen2[1];
	uint32_t _pktgen_pcs_seedb3_gen2;
} BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB3_GEN2r_t;

#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB3_GEN2r_CLR(r) (r).pktgen_pcs_seedb3_gen2[0] = 0
#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB3_GEN2r_SET(r,d) (r).pktgen_pcs_seedb3_gen2[0] = d
#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB3_GEN2r_GET(r) (r).pktgen_pcs_seedb3_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB3_GEN2r_SEEDB3f_GET(r) (((r).pktgen_pcs_seedb3_gen2[0]) & 0x3ff)
#define BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB3_GEN2r_SEEDB3f_SET(r,f) (r).pktgen_pcs_seedb3_gen2[0]=(((r).pktgen_pcs_seedb3_gen2[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff)) | (0x3ff << 16)

/*
 * These macros can be used to access PKTGEN_PCS_SEEDB3_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PKTGEN_PCS_SEEDB3_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB3_GEN2r,(_r._pktgen_pcs_seedb3_gen2))
#define BCMI_TSCF_XGXS_WRITE_PKTGEN_PCS_SEEDB3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB3_GEN2r,(_r._pktgen_pcs_seedb3_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PKTGEN_PCS_SEEDB3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB3_GEN2r,(_r._pktgen_pcs_seedb3_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PKTGEN_PCS_SEEDB3_GEN2r BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB3_GEN2r
#define PKTGEN_PCS_SEEDB3_GEN2r_SIZE BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB3_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB3_GEN2r_t PKTGEN_PCS_SEEDB3_GEN2r_t;
#define PKTGEN_PCS_SEEDB3_GEN2r_CLR BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB3_GEN2r_CLR
#define PKTGEN_PCS_SEEDB3_GEN2r_SET BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB3_GEN2r_SET
#define PKTGEN_PCS_SEEDB3_GEN2r_GET BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB3_GEN2r_GET
#define PKTGEN_PCS_SEEDB3_GEN2r_SEEDB3f_GET BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB3_GEN2r_SEEDB3f_GET
#define PKTGEN_PCS_SEEDB3_GEN2r_SEEDB3f_SET BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB3_GEN2r_SEEDB3f_SET
#define READ_PKTGEN_PCS_SEEDB3_GEN2r BCMI_TSCF_XGXS_READ_PKTGEN_PCS_SEEDB3_GEN2r
#define WRITE_PKTGEN_PCS_SEEDB3_GEN2r BCMI_TSCF_XGXS_WRITE_PKTGEN_PCS_SEEDB3_GEN2r
#define MODIFY_PKTGEN_PCS_SEEDB3_GEN2r BCMI_TSCF_XGXS_MODIFY_PKTGEN_PCS_SEEDB3_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PKTGEN_PCS_SEEDB3_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PKTGEN_PAYLOADBYTES_GEN2
 * BLOCKS:   PKTGEN1
 * REGADDR:  0x9040
 * DESC:     Repeated Payload Bytes
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BYTE0            repeated payload byte0This register is not used
 *     BYTE1            repeated payload byte1
 */
#define BCMI_TSCF_XGXS_PKTGEN_PAYLOADBYTES_GEN2r (0x00109040 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PKTGEN_PAYLOADBYTES_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PKTGEN_PAYLOADBYTES_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PKTGEN_PAYLOADBYTES_GEN2r_s {
	uint32_t v[1];
	uint32_t pktgen_payloadbytes_gen2[1];
	uint32_t _pktgen_payloadbytes_gen2;
} BCMI_TSCF_XGXS_PKTGEN_PAYLOADBYTES_GEN2r_t;

#define BCMI_TSCF_XGXS_PKTGEN_PAYLOADBYTES_GEN2r_CLR(r) (r).pktgen_payloadbytes_gen2[0] = 0
#define BCMI_TSCF_XGXS_PKTGEN_PAYLOADBYTES_GEN2r_SET(r,d) (r).pktgen_payloadbytes_gen2[0] = d
#define BCMI_TSCF_XGXS_PKTGEN_PAYLOADBYTES_GEN2r_GET(r) (r).pktgen_payloadbytes_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PKTGEN_PAYLOADBYTES_GEN2r_BYTE1f_GET(r) ((((r).pktgen_payloadbytes_gen2[0]) >> 8) & 0xff)
#define BCMI_TSCF_XGXS_PKTGEN_PAYLOADBYTES_GEN2r_BYTE1f_SET(r,f) (r).pktgen_payloadbytes_gen2[0]=(((r).pktgen_payloadbytes_gen2[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_TSCF_XGXS_PKTGEN_PAYLOADBYTES_GEN2r_BYTE0f_GET(r) (((r).pktgen_payloadbytes_gen2[0]) & 0xff)
#define BCMI_TSCF_XGXS_PKTGEN_PAYLOADBYTES_GEN2r_BYTE0f_SET(r,f) (r).pktgen_payloadbytes_gen2[0]=(((r).pktgen_payloadbytes_gen2[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access PKTGEN_PAYLOADBYTES_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PKTGEN_PAYLOADBYTES_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PKTGEN_PAYLOADBYTES_GEN2r,(_r._pktgen_payloadbytes_gen2))
#define BCMI_TSCF_XGXS_WRITE_PKTGEN_PAYLOADBYTES_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PKTGEN_PAYLOADBYTES_GEN2r,(_r._pktgen_payloadbytes_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PKTGEN_PAYLOADBYTES_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PKTGEN_PAYLOADBYTES_GEN2r,(_r._pktgen_payloadbytes_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PKTGEN_PAYLOADBYTES_GEN2r BCMI_TSCF_XGXS_PKTGEN_PAYLOADBYTES_GEN2r
#define PKTGEN_PAYLOADBYTES_GEN2r_SIZE BCMI_TSCF_XGXS_PKTGEN_PAYLOADBYTES_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PKTGEN_PAYLOADBYTES_GEN2r_t PKTGEN_PAYLOADBYTES_GEN2r_t;
#define PKTGEN_PAYLOADBYTES_GEN2r_CLR BCMI_TSCF_XGXS_PKTGEN_PAYLOADBYTES_GEN2r_CLR
#define PKTGEN_PAYLOADBYTES_GEN2r_SET BCMI_TSCF_XGXS_PKTGEN_PAYLOADBYTES_GEN2r_SET
#define PKTGEN_PAYLOADBYTES_GEN2r_GET BCMI_TSCF_XGXS_PKTGEN_PAYLOADBYTES_GEN2r_GET
#define PKTGEN_PAYLOADBYTES_GEN2r_BYTE1f_GET BCMI_TSCF_XGXS_PKTGEN_PAYLOADBYTES_GEN2r_BYTE1f_GET
#define PKTGEN_PAYLOADBYTES_GEN2r_BYTE1f_SET BCMI_TSCF_XGXS_PKTGEN_PAYLOADBYTES_GEN2r_BYTE1f_SET
#define PKTGEN_PAYLOADBYTES_GEN2r_BYTE0f_GET BCMI_TSCF_XGXS_PKTGEN_PAYLOADBYTES_GEN2r_BYTE0f_GET
#define PKTGEN_PAYLOADBYTES_GEN2r_BYTE0f_SET BCMI_TSCF_XGXS_PKTGEN_PAYLOADBYTES_GEN2r_BYTE0f_SET
#define READ_PKTGEN_PAYLOADBYTES_GEN2r BCMI_TSCF_XGXS_READ_PKTGEN_PAYLOADBYTES_GEN2r
#define WRITE_PKTGEN_PAYLOADBYTES_GEN2r BCMI_TSCF_XGXS_WRITE_PKTGEN_PAYLOADBYTES_GEN2r
#define MODIFY_PKTGEN_PAYLOADBYTES_GEN2r BCMI_TSCF_XGXS_MODIFY_PKTGEN_PAYLOADBYTES_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PKTGEN_PAYLOADBYTES_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PKTGEN_ERRMASK4_GEN2
 * BLOCKS:   PKTGEN1
 * REGADDR:  0x9041
 * DESC:     Error mask bits 79:64
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     ERROR_MASK_65_64 Error Mask used to generate errors
 */
#define BCMI_TSCF_XGXS_PKTGEN_ERRMASK4_GEN2r (0x00109041 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PKTGEN_ERRMASK4_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PKTGEN_ERRMASK4_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PKTGEN_ERRMASK4_GEN2r_s {
	uint32_t v[1];
	uint32_t pktgen_errmask4_gen2[1];
	uint32_t _pktgen_errmask4_gen2;
} BCMI_TSCF_XGXS_PKTGEN_ERRMASK4_GEN2r_t;

#define BCMI_TSCF_XGXS_PKTGEN_ERRMASK4_GEN2r_CLR(r) (r).pktgen_errmask4_gen2[0] = 0
#define BCMI_TSCF_XGXS_PKTGEN_ERRMASK4_GEN2r_SET(r,d) (r).pktgen_errmask4_gen2[0] = d
#define BCMI_TSCF_XGXS_PKTGEN_ERRMASK4_GEN2r_GET(r) (r).pktgen_errmask4_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PKTGEN_ERRMASK4_GEN2r_ERROR_MASK_65_64f_GET(r) (((r).pktgen_errmask4_gen2[0]) & 0x3)
#define BCMI_TSCF_XGXS_PKTGEN_ERRMASK4_GEN2r_ERROR_MASK_65_64f_SET(r,f) (r).pktgen_errmask4_gen2[0]=(((r).pktgen_errmask4_gen2[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access PKTGEN_ERRMASK4_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PKTGEN_ERRMASK4_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PKTGEN_ERRMASK4_GEN2r,(_r._pktgen_errmask4_gen2))
#define BCMI_TSCF_XGXS_WRITE_PKTGEN_ERRMASK4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PKTGEN_ERRMASK4_GEN2r,(_r._pktgen_errmask4_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PKTGEN_ERRMASK4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PKTGEN_ERRMASK4_GEN2r,(_r._pktgen_errmask4_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PKTGEN_ERRMASK4_GEN2r BCMI_TSCF_XGXS_PKTGEN_ERRMASK4_GEN2r
#define PKTGEN_ERRMASK4_GEN2r_SIZE BCMI_TSCF_XGXS_PKTGEN_ERRMASK4_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PKTGEN_ERRMASK4_GEN2r_t PKTGEN_ERRMASK4_GEN2r_t;
#define PKTGEN_ERRMASK4_GEN2r_CLR BCMI_TSCF_XGXS_PKTGEN_ERRMASK4_GEN2r_CLR
#define PKTGEN_ERRMASK4_GEN2r_SET BCMI_TSCF_XGXS_PKTGEN_ERRMASK4_GEN2r_SET
#define PKTGEN_ERRMASK4_GEN2r_GET BCMI_TSCF_XGXS_PKTGEN_ERRMASK4_GEN2r_GET
#define PKTGEN_ERRMASK4_GEN2r_ERROR_MASK_65_64f_GET BCMI_TSCF_XGXS_PKTGEN_ERRMASK4_GEN2r_ERROR_MASK_65_64f_GET
#define PKTGEN_ERRMASK4_GEN2r_ERROR_MASK_65_64f_SET BCMI_TSCF_XGXS_PKTGEN_ERRMASK4_GEN2r_ERROR_MASK_65_64f_SET
#define READ_PKTGEN_ERRMASK4_GEN2r BCMI_TSCF_XGXS_READ_PKTGEN_ERRMASK4_GEN2r
#define WRITE_PKTGEN_ERRMASK4_GEN2r BCMI_TSCF_XGXS_WRITE_PKTGEN_ERRMASK4_GEN2r
#define MODIFY_PKTGEN_ERRMASK4_GEN2r BCMI_TSCF_XGXS_MODIFY_PKTGEN_ERRMASK4_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PKTGEN_ERRMASK4_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PKTGEN_ERRMASK3_GEN2
 * BLOCKS:   PKTGEN1
 * REGADDR:  0x9042
 * DESC:     Error mask bits 63:48
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     ERROR_MASK_63_48 Error Mask used to generate errors
 */
#define BCMI_TSCF_XGXS_PKTGEN_ERRMASK3_GEN2r (0x00109042 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PKTGEN_ERRMASK3_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PKTGEN_ERRMASK3_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PKTGEN_ERRMASK3_GEN2r_s {
	uint32_t v[1];
	uint32_t pktgen_errmask3_gen2[1];
	uint32_t _pktgen_errmask3_gen2;
} BCMI_TSCF_XGXS_PKTGEN_ERRMASK3_GEN2r_t;

#define BCMI_TSCF_XGXS_PKTGEN_ERRMASK3_GEN2r_CLR(r) (r).pktgen_errmask3_gen2[0] = 0
#define BCMI_TSCF_XGXS_PKTGEN_ERRMASK3_GEN2r_SET(r,d) (r).pktgen_errmask3_gen2[0] = d
#define BCMI_TSCF_XGXS_PKTGEN_ERRMASK3_GEN2r_GET(r) (r).pktgen_errmask3_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PKTGEN_ERRMASK3_GEN2r_ERROR_MASK_63_48f_GET(r) (((r).pktgen_errmask3_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_PKTGEN_ERRMASK3_GEN2r_ERROR_MASK_63_48f_SET(r,f) (r).pktgen_errmask3_gen2[0]=(((r).pktgen_errmask3_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PKTGEN_ERRMASK3_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PKTGEN_ERRMASK3_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PKTGEN_ERRMASK3_GEN2r,(_r._pktgen_errmask3_gen2))
#define BCMI_TSCF_XGXS_WRITE_PKTGEN_ERRMASK3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PKTGEN_ERRMASK3_GEN2r,(_r._pktgen_errmask3_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PKTGEN_ERRMASK3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PKTGEN_ERRMASK3_GEN2r,(_r._pktgen_errmask3_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PKTGEN_ERRMASK3_GEN2r BCMI_TSCF_XGXS_PKTGEN_ERRMASK3_GEN2r
#define PKTGEN_ERRMASK3_GEN2r_SIZE BCMI_TSCF_XGXS_PKTGEN_ERRMASK3_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PKTGEN_ERRMASK3_GEN2r_t PKTGEN_ERRMASK3_GEN2r_t;
#define PKTGEN_ERRMASK3_GEN2r_CLR BCMI_TSCF_XGXS_PKTGEN_ERRMASK3_GEN2r_CLR
#define PKTGEN_ERRMASK3_GEN2r_SET BCMI_TSCF_XGXS_PKTGEN_ERRMASK3_GEN2r_SET
#define PKTGEN_ERRMASK3_GEN2r_GET BCMI_TSCF_XGXS_PKTGEN_ERRMASK3_GEN2r_GET
#define PKTGEN_ERRMASK3_GEN2r_ERROR_MASK_63_48f_GET BCMI_TSCF_XGXS_PKTGEN_ERRMASK3_GEN2r_ERROR_MASK_63_48f_GET
#define PKTGEN_ERRMASK3_GEN2r_ERROR_MASK_63_48f_SET BCMI_TSCF_XGXS_PKTGEN_ERRMASK3_GEN2r_ERROR_MASK_63_48f_SET
#define READ_PKTGEN_ERRMASK3_GEN2r BCMI_TSCF_XGXS_READ_PKTGEN_ERRMASK3_GEN2r
#define WRITE_PKTGEN_ERRMASK3_GEN2r BCMI_TSCF_XGXS_WRITE_PKTGEN_ERRMASK3_GEN2r
#define MODIFY_PKTGEN_ERRMASK3_GEN2r BCMI_TSCF_XGXS_MODIFY_PKTGEN_ERRMASK3_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PKTGEN_ERRMASK3_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PKTGEN_ERRMASK2_GEN2
 * BLOCKS:   PKTGEN1
 * REGADDR:  0x9043
 * DESC:     Error mask bits 47:32
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     ERROR_MASK_47_32 Error Mask used to generate errors
 */
#define BCMI_TSCF_XGXS_PKTGEN_ERRMASK2_GEN2r (0x00109043 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PKTGEN_ERRMASK2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PKTGEN_ERRMASK2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PKTGEN_ERRMASK2_GEN2r_s {
	uint32_t v[1];
	uint32_t pktgen_errmask2_gen2[1];
	uint32_t _pktgen_errmask2_gen2;
} BCMI_TSCF_XGXS_PKTGEN_ERRMASK2_GEN2r_t;

#define BCMI_TSCF_XGXS_PKTGEN_ERRMASK2_GEN2r_CLR(r) (r).pktgen_errmask2_gen2[0] = 0
#define BCMI_TSCF_XGXS_PKTGEN_ERRMASK2_GEN2r_SET(r,d) (r).pktgen_errmask2_gen2[0] = d
#define BCMI_TSCF_XGXS_PKTGEN_ERRMASK2_GEN2r_GET(r) (r).pktgen_errmask2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PKTGEN_ERRMASK2_GEN2r_ERROR_MASK_47_32f_GET(r) (((r).pktgen_errmask2_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_PKTGEN_ERRMASK2_GEN2r_ERROR_MASK_47_32f_SET(r,f) (r).pktgen_errmask2_gen2[0]=(((r).pktgen_errmask2_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PKTGEN_ERRMASK2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PKTGEN_ERRMASK2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PKTGEN_ERRMASK2_GEN2r,(_r._pktgen_errmask2_gen2))
#define BCMI_TSCF_XGXS_WRITE_PKTGEN_ERRMASK2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PKTGEN_ERRMASK2_GEN2r,(_r._pktgen_errmask2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PKTGEN_ERRMASK2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PKTGEN_ERRMASK2_GEN2r,(_r._pktgen_errmask2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PKTGEN_ERRMASK2_GEN2r BCMI_TSCF_XGXS_PKTGEN_ERRMASK2_GEN2r
#define PKTGEN_ERRMASK2_GEN2r_SIZE BCMI_TSCF_XGXS_PKTGEN_ERRMASK2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PKTGEN_ERRMASK2_GEN2r_t PKTGEN_ERRMASK2_GEN2r_t;
#define PKTGEN_ERRMASK2_GEN2r_CLR BCMI_TSCF_XGXS_PKTGEN_ERRMASK2_GEN2r_CLR
#define PKTGEN_ERRMASK2_GEN2r_SET BCMI_TSCF_XGXS_PKTGEN_ERRMASK2_GEN2r_SET
#define PKTGEN_ERRMASK2_GEN2r_GET BCMI_TSCF_XGXS_PKTGEN_ERRMASK2_GEN2r_GET
#define PKTGEN_ERRMASK2_GEN2r_ERROR_MASK_47_32f_GET BCMI_TSCF_XGXS_PKTGEN_ERRMASK2_GEN2r_ERROR_MASK_47_32f_GET
#define PKTGEN_ERRMASK2_GEN2r_ERROR_MASK_47_32f_SET BCMI_TSCF_XGXS_PKTGEN_ERRMASK2_GEN2r_ERROR_MASK_47_32f_SET
#define READ_PKTGEN_ERRMASK2_GEN2r BCMI_TSCF_XGXS_READ_PKTGEN_ERRMASK2_GEN2r
#define WRITE_PKTGEN_ERRMASK2_GEN2r BCMI_TSCF_XGXS_WRITE_PKTGEN_ERRMASK2_GEN2r
#define MODIFY_PKTGEN_ERRMASK2_GEN2r BCMI_TSCF_XGXS_MODIFY_PKTGEN_ERRMASK2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PKTGEN_ERRMASK2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PKTGEN_ERRMASK1_GEN2
 * BLOCKS:   PKTGEN1
 * REGADDR:  0x9044
 * DESC:     Error mask bits 31:16
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     ERROR_MASK_31_16 Error Mask used to generate errors
 */
#define BCMI_TSCF_XGXS_PKTGEN_ERRMASK1_GEN2r (0x00109044 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PKTGEN_ERRMASK1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PKTGEN_ERRMASK1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PKTGEN_ERRMASK1_GEN2r_s {
	uint32_t v[1];
	uint32_t pktgen_errmask1_gen2[1];
	uint32_t _pktgen_errmask1_gen2;
} BCMI_TSCF_XGXS_PKTGEN_ERRMASK1_GEN2r_t;

#define BCMI_TSCF_XGXS_PKTGEN_ERRMASK1_GEN2r_CLR(r) (r).pktgen_errmask1_gen2[0] = 0
#define BCMI_TSCF_XGXS_PKTGEN_ERRMASK1_GEN2r_SET(r,d) (r).pktgen_errmask1_gen2[0] = d
#define BCMI_TSCF_XGXS_PKTGEN_ERRMASK1_GEN2r_GET(r) (r).pktgen_errmask1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PKTGEN_ERRMASK1_GEN2r_ERROR_MASK_31_16f_GET(r) (((r).pktgen_errmask1_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_PKTGEN_ERRMASK1_GEN2r_ERROR_MASK_31_16f_SET(r,f) (r).pktgen_errmask1_gen2[0]=(((r).pktgen_errmask1_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PKTGEN_ERRMASK1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PKTGEN_ERRMASK1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PKTGEN_ERRMASK1_GEN2r,(_r._pktgen_errmask1_gen2))
#define BCMI_TSCF_XGXS_WRITE_PKTGEN_ERRMASK1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PKTGEN_ERRMASK1_GEN2r,(_r._pktgen_errmask1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PKTGEN_ERRMASK1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PKTGEN_ERRMASK1_GEN2r,(_r._pktgen_errmask1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PKTGEN_ERRMASK1_GEN2r BCMI_TSCF_XGXS_PKTGEN_ERRMASK1_GEN2r
#define PKTGEN_ERRMASK1_GEN2r_SIZE BCMI_TSCF_XGXS_PKTGEN_ERRMASK1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PKTGEN_ERRMASK1_GEN2r_t PKTGEN_ERRMASK1_GEN2r_t;
#define PKTGEN_ERRMASK1_GEN2r_CLR BCMI_TSCF_XGXS_PKTGEN_ERRMASK1_GEN2r_CLR
#define PKTGEN_ERRMASK1_GEN2r_SET BCMI_TSCF_XGXS_PKTGEN_ERRMASK1_GEN2r_SET
#define PKTGEN_ERRMASK1_GEN2r_GET BCMI_TSCF_XGXS_PKTGEN_ERRMASK1_GEN2r_GET
#define PKTGEN_ERRMASK1_GEN2r_ERROR_MASK_31_16f_GET BCMI_TSCF_XGXS_PKTGEN_ERRMASK1_GEN2r_ERROR_MASK_31_16f_GET
#define PKTGEN_ERRMASK1_GEN2r_ERROR_MASK_31_16f_SET BCMI_TSCF_XGXS_PKTGEN_ERRMASK1_GEN2r_ERROR_MASK_31_16f_SET
#define READ_PKTGEN_ERRMASK1_GEN2r BCMI_TSCF_XGXS_READ_PKTGEN_ERRMASK1_GEN2r
#define WRITE_PKTGEN_ERRMASK1_GEN2r BCMI_TSCF_XGXS_WRITE_PKTGEN_ERRMASK1_GEN2r
#define MODIFY_PKTGEN_ERRMASK1_GEN2r BCMI_TSCF_XGXS_MODIFY_PKTGEN_ERRMASK1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PKTGEN_ERRMASK1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PKTGEN_ERRMASK0_GEN2
 * BLOCKS:   PKTGEN1
 * REGADDR:  0x9045
 * DESC:     Error mask bits 15:0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     ERROR_MASK_15_0  Error Mask used to generate errors
 */
#define BCMI_TSCF_XGXS_PKTGEN_ERRMASK0_GEN2r (0x00109045 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PKTGEN_ERRMASK0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PKTGEN_ERRMASK0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PKTGEN_ERRMASK0_GEN2r_s {
	uint32_t v[1];
	uint32_t pktgen_errmask0_gen2[1];
	uint32_t _pktgen_errmask0_gen2;
} BCMI_TSCF_XGXS_PKTGEN_ERRMASK0_GEN2r_t;

#define BCMI_TSCF_XGXS_PKTGEN_ERRMASK0_GEN2r_CLR(r) (r).pktgen_errmask0_gen2[0] = 0
#define BCMI_TSCF_XGXS_PKTGEN_ERRMASK0_GEN2r_SET(r,d) (r).pktgen_errmask0_gen2[0] = d
#define BCMI_TSCF_XGXS_PKTGEN_ERRMASK0_GEN2r_GET(r) (r).pktgen_errmask0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PKTGEN_ERRMASK0_GEN2r_ERROR_MASK_15_0f_GET(r) (((r).pktgen_errmask0_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_PKTGEN_ERRMASK0_GEN2r_ERROR_MASK_15_0f_SET(r,f) (r).pktgen_errmask0_gen2[0]=(((r).pktgen_errmask0_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PKTGEN_ERRMASK0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PKTGEN_ERRMASK0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PKTGEN_ERRMASK0_GEN2r,(_r._pktgen_errmask0_gen2))
#define BCMI_TSCF_XGXS_WRITE_PKTGEN_ERRMASK0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PKTGEN_ERRMASK0_GEN2r,(_r._pktgen_errmask0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PKTGEN_ERRMASK0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PKTGEN_ERRMASK0_GEN2r,(_r._pktgen_errmask0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PKTGEN_ERRMASK0_GEN2r BCMI_TSCF_XGXS_PKTGEN_ERRMASK0_GEN2r
#define PKTGEN_ERRMASK0_GEN2r_SIZE BCMI_TSCF_XGXS_PKTGEN_ERRMASK0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PKTGEN_ERRMASK0_GEN2r_t PKTGEN_ERRMASK0_GEN2r_t;
#define PKTGEN_ERRMASK0_GEN2r_CLR BCMI_TSCF_XGXS_PKTGEN_ERRMASK0_GEN2r_CLR
#define PKTGEN_ERRMASK0_GEN2r_SET BCMI_TSCF_XGXS_PKTGEN_ERRMASK0_GEN2r_SET
#define PKTGEN_ERRMASK0_GEN2r_GET BCMI_TSCF_XGXS_PKTGEN_ERRMASK0_GEN2r_GET
#define PKTGEN_ERRMASK0_GEN2r_ERROR_MASK_15_0f_GET BCMI_TSCF_XGXS_PKTGEN_ERRMASK0_GEN2r_ERROR_MASK_15_0f_GET
#define PKTGEN_ERRMASK0_GEN2r_ERROR_MASK_15_0f_SET BCMI_TSCF_XGXS_PKTGEN_ERRMASK0_GEN2r_ERROR_MASK_15_0f_SET
#define READ_PKTGEN_ERRMASK0_GEN2r BCMI_TSCF_XGXS_READ_PKTGEN_ERRMASK0_GEN2r
#define WRITE_PKTGEN_ERRMASK0_GEN2r BCMI_TSCF_XGXS_WRITE_PKTGEN_ERRMASK0_GEN2r
#define MODIFY_PKTGEN_ERRMASK0_GEN2r BCMI_TSCF_XGXS_MODIFY_PKTGEN_ERRMASK0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PKTGEN_ERRMASK0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PKTGEN_ERR_INJ_EN0_GEN2
 * BLOCKS:   PKTGEN1
 * REGADDR:  0x9046
 * DESC:     Error injection enable control
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     ERRGEN_EN_PH0    PER stream control to enable 66-bit error gen maskNote: Setting this bit results in a one time application of the error mask
 *     ERRGEN_EN_PH1    PER stream control to enable 66-bit error gen maskNote: Setting this bit results in a one time application of the error mask
 *     ERRGEN_EN_PH2    PER stream control to enable 66-bit error gen maskNote: Setting this bit results in a one time application of the error mask
 */
#define BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN0_GEN2r (0x00109046 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PKTGEN_ERR_INJ_EN0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN0_GEN2r_s {
	uint32_t v[1];
	uint32_t pktgen_err_inj_en0_gen2[1];
	uint32_t _pktgen_err_inj_en0_gen2;
} BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN0_GEN2r_t;

#define BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN0_GEN2r_CLR(r) (r).pktgen_err_inj_en0_gen2[0] = 0
#define BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN0_GEN2r_SET(r,d) (r).pktgen_err_inj_en0_gen2[0] = d
#define BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN0_GEN2r_GET(r) (r).pktgen_err_inj_en0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN0_GEN2r_ERRGEN_EN_PH2f_GET(r) ((((r).pktgen_err_inj_en0_gen2[0]) >> 10) & 0x1f)
#define BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN0_GEN2r_ERRGEN_EN_PH2f_SET(r,f) (r).pktgen_err_inj_en0_gen2[0]=(((r).pktgen_err_inj_en0_gen2[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10)) | (31 << (16 + 10))
#define BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN0_GEN2r_ERRGEN_EN_PH1f_GET(r) ((((r).pktgen_err_inj_en0_gen2[0]) >> 5) & 0x1f)
#define BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN0_GEN2r_ERRGEN_EN_PH1f_SET(r,f) (r).pktgen_err_inj_en0_gen2[0]=(((r).pktgen_err_inj_en0_gen2[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5)) | (31 << (16 + 5))
#define BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN0_GEN2r_ERRGEN_EN_PH0f_GET(r) (((r).pktgen_err_inj_en0_gen2[0]) & 0x1f)
#define BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN0_GEN2r_ERRGEN_EN_PH0f_SET(r,f) (r).pktgen_err_inj_en0_gen2[0]=(((r).pktgen_err_inj_en0_gen2[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access PKTGEN_ERR_INJ_EN0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PKTGEN_ERR_INJ_EN0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN0_GEN2r,(_r._pktgen_err_inj_en0_gen2))
#define BCMI_TSCF_XGXS_WRITE_PKTGEN_ERR_INJ_EN0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN0_GEN2r,(_r._pktgen_err_inj_en0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PKTGEN_ERR_INJ_EN0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN0_GEN2r,(_r._pktgen_err_inj_en0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PKTGEN_ERR_INJ_EN0_GEN2r BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN0_GEN2r
#define PKTGEN_ERR_INJ_EN0_GEN2r_SIZE BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN0_GEN2r_t PKTGEN_ERR_INJ_EN0_GEN2r_t;
#define PKTGEN_ERR_INJ_EN0_GEN2r_CLR BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN0_GEN2r_CLR
#define PKTGEN_ERR_INJ_EN0_GEN2r_SET BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN0_GEN2r_SET
#define PKTGEN_ERR_INJ_EN0_GEN2r_GET BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN0_GEN2r_GET
#define PKTGEN_ERR_INJ_EN0_GEN2r_ERRGEN_EN_PH2f_GET BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN0_GEN2r_ERRGEN_EN_PH2f_GET
#define PKTGEN_ERR_INJ_EN0_GEN2r_ERRGEN_EN_PH2f_SET BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN0_GEN2r_ERRGEN_EN_PH2f_SET
#define PKTGEN_ERR_INJ_EN0_GEN2r_ERRGEN_EN_PH1f_GET BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN0_GEN2r_ERRGEN_EN_PH1f_GET
#define PKTGEN_ERR_INJ_EN0_GEN2r_ERRGEN_EN_PH1f_SET BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN0_GEN2r_ERRGEN_EN_PH1f_SET
#define PKTGEN_ERR_INJ_EN0_GEN2r_ERRGEN_EN_PH0f_GET BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN0_GEN2r_ERRGEN_EN_PH0f_GET
#define PKTGEN_ERR_INJ_EN0_GEN2r_ERRGEN_EN_PH0f_SET BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN0_GEN2r_ERRGEN_EN_PH0f_SET
#define READ_PKTGEN_ERR_INJ_EN0_GEN2r BCMI_TSCF_XGXS_READ_PKTGEN_ERR_INJ_EN0_GEN2r
#define WRITE_PKTGEN_ERR_INJ_EN0_GEN2r BCMI_TSCF_XGXS_WRITE_PKTGEN_ERR_INJ_EN0_GEN2r
#define MODIFY_PKTGEN_ERR_INJ_EN0_GEN2r BCMI_TSCF_XGXS_MODIFY_PKTGEN_ERR_INJ_EN0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PKTGEN_ERR_INJ_EN1_GEN2
 * BLOCKS:   PKTGEN1
 * REGADDR:  0x9047
 * DESC:     Error injection enable control
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     ERRGEN_EN_PH3    PER stream control to enable 66-bit error gen maskNote: Setting this bit results in a one time application of the error mask
 *     CL91_40B_ERRGEN_EN_P0 PER lane control to enable 40-bit error gen maskNote: Setting this bit results in a one time application of the error mask
 *     CL91_40B_ERRGEN_EN_P1 PER lane control to enable 40-bit error gen maskNote: Setting this bit results in a one time application of the error mask
 *     CL91_40B_ERRGEN_EN_P2 PER lane control to enable 40-bit error gen maskNote: Setting this bit results in a one time application of the error mask
 *     CL91_40B_ERRGEN_EN_P3 PER lane control to enable 40-bit error gen maskNote: Setting this bit results in a one time application of the error mask
 *     CL91_80B_ERRGEN_EN_P0 PER lane control to enable 80-bit error gen maskNote: Setting this bit results in a one time application of the error mask
 *     CL91_80B_ERRGEN_EN_P1 PER lane control to enable 80-bit error gen maskNote: Setting this bit results in a one time application of the error mask
 *     CL91_80B_ERRGEN_EN_P2 PER lane control to enable 80-bit error gen maskNote: Setting this bit results in a one time application of the error mask
 *     CL91_80B_ERRGEN_EN_P3 PER lane control to enable 80-bit error gen maskNote: Setting this bit results in a one time application of the error mask
 */
#define BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN1_GEN2r (0x00109047 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PKTGEN_ERR_INJ_EN1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN1_GEN2r_s {
	uint32_t v[1];
	uint32_t pktgen_err_inj_en1_gen2[1];
	uint32_t _pktgen_err_inj_en1_gen2;
} BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN1_GEN2r_t;

#define BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN1_GEN2r_CLR(r) (r).pktgen_err_inj_en1_gen2[0] = 0
#define BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN1_GEN2r_SET(r,d) (r).pktgen_err_inj_en1_gen2[0] = d
#define BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN1_GEN2r_GET(r) (r).pktgen_err_inj_en1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN1_GEN2r_CL91_80B_ERRGEN_EN_P3f_GET(r) ((((r).pktgen_err_inj_en1_gen2[0]) >> 12) & 0x1)
#define BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN1_GEN2r_CL91_80B_ERRGEN_EN_P3f_SET(r,f) (r).pktgen_err_inj_en1_gen2[0]=(((r).pktgen_err_inj_en1_gen2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN1_GEN2r_CL91_80B_ERRGEN_EN_P2f_GET(r) ((((r).pktgen_err_inj_en1_gen2[0]) >> 11) & 0x1)
#define BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN1_GEN2r_CL91_80B_ERRGEN_EN_P2f_SET(r,f) (r).pktgen_err_inj_en1_gen2[0]=(((r).pktgen_err_inj_en1_gen2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN1_GEN2r_CL91_80B_ERRGEN_EN_P1f_GET(r) ((((r).pktgen_err_inj_en1_gen2[0]) >> 10) & 0x1)
#define BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN1_GEN2r_CL91_80B_ERRGEN_EN_P1f_SET(r,f) (r).pktgen_err_inj_en1_gen2[0]=(((r).pktgen_err_inj_en1_gen2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN1_GEN2r_CL91_80B_ERRGEN_EN_P0f_GET(r) ((((r).pktgen_err_inj_en1_gen2[0]) >> 9) & 0x1)
#define BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN1_GEN2r_CL91_80B_ERRGEN_EN_P0f_SET(r,f) (r).pktgen_err_inj_en1_gen2[0]=(((r).pktgen_err_inj_en1_gen2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN1_GEN2r_CL91_40B_ERRGEN_EN_P3f_GET(r) ((((r).pktgen_err_inj_en1_gen2[0]) >> 8) & 0x1)
#define BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN1_GEN2r_CL91_40B_ERRGEN_EN_P3f_SET(r,f) (r).pktgen_err_inj_en1_gen2[0]=(((r).pktgen_err_inj_en1_gen2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN1_GEN2r_CL91_40B_ERRGEN_EN_P2f_GET(r) ((((r).pktgen_err_inj_en1_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN1_GEN2r_CL91_40B_ERRGEN_EN_P2f_SET(r,f) (r).pktgen_err_inj_en1_gen2[0]=(((r).pktgen_err_inj_en1_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN1_GEN2r_CL91_40B_ERRGEN_EN_P1f_GET(r) ((((r).pktgen_err_inj_en1_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN1_GEN2r_CL91_40B_ERRGEN_EN_P1f_SET(r,f) (r).pktgen_err_inj_en1_gen2[0]=(((r).pktgen_err_inj_en1_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN1_GEN2r_CL91_40B_ERRGEN_EN_P0f_GET(r) ((((r).pktgen_err_inj_en1_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN1_GEN2r_CL91_40B_ERRGEN_EN_P0f_SET(r,f) (r).pktgen_err_inj_en1_gen2[0]=(((r).pktgen_err_inj_en1_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN1_GEN2r_ERRGEN_EN_PH3f_GET(r) (((r).pktgen_err_inj_en1_gen2[0]) & 0x1f)
#define BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN1_GEN2r_ERRGEN_EN_PH3f_SET(r,f) (r).pktgen_err_inj_en1_gen2[0]=(((r).pktgen_err_inj_en1_gen2[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access PKTGEN_ERR_INJ_EN1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PKTGEN_ERR_INJ_EN1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN1_GEN2r,(_r._pktgen_err_inj_en1_gen2))
#define BCMI_TSCF_XGXS_WRITE_PKTGEN_ERR_INJ_EN1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN1_GEN2r,(_r._pktgen_err_inj_en1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PKTGEN_ERR_INJ_EN1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN1_GEN2r,(_r._pktgen_err_inj_en1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PKTGEN_ERR_INJ_EN1_GEN2r BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN1_GEN2r
#define PKTGEN_ERR_INJ_EN1_GEN2r_SIZE BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN1_GEN2r_t PKTGEN_ERR_INJ_EN1_GEN2r_t;
#define PKTGEN_ERR_INJ_EN1_GEN2r_CLR BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN1_GEN2r_CLR
#define PKTGEN_ERR_INJ_EN1_GEN2r_SET BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN1_GEN2r_SET
#define PKTGEN_ERR_INJ_EN1_GEN2r_GET BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN1_GEN2r_GET
#define PKTGEN_ERR_INJ_EN1_GEN2r_CL91_80B_ERRGEN_EN_P3f_GET BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN1_GEN2r_CL91_80B_ERRGEN_EN_P3f_GET
#define PKTGEN_ERR_INJ_EN1_GEN2r_CL91_80B_ERRGEN_EN_P3f_SET BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN1_GEN2r_CL91_80B_ERRGEN_EN_P3f_SET
#define PKTGEN_ERR_INJ_EN1_GEN2r_CL91_80B_ERRGEN_EN_P2f_GET BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN1_GEN2r_CL91_80B_ERRGEN_EN_P2f_GET
#define PKTGEN_ERR_INJ_EN1_GEN2r_CL91_80B_ERRGEN_EN_P2f_SET BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN1_GEN2r_CL91_80B_ERRGEN_EN_P2f_SET
#define PKTGEN_ERR_INJ_EN1_GEN2r_CL91_80B_ERRGEN_EN_P1f_GET BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN1_GEN2r_CL91_80B_ERRGEN_EN_P1f_GET
#define PKTGEN_ERR_INJ_EN1_GEN2r_CL91_80B_ERRGEN_EN_P1f_SET BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN1_GEN2r_CL91_80B_ERRGEN_EN_P1f_SET
#define PKTGEN_ERR_INJ_EN1_GEN2r_CL91_80B_ERRGEN_EN_P0f_GET BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN1_GEN2r_CL91_80B_ERRGEN_EN_P0f_GET
#define PKTGEN_ERR_INJ_EN1_GEN2r_CL91_80B_ERRGEN_EN_P0f_SET BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN1_GEN2r_CL91_80B_ERRGEN_EN_P0f_SET
#define PKTGEN_ERR_INJ_EN1_GEN2r_CL91_40B_ERRGEN_EN_P3f_GET BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN1_GEN2r_CL91_40B_ERRGEN_EN_P3f_GET
#define PKTGEN_ERR_INJ_EN1_GEN2r_CL91_40B_ERRGEN_EN_P3f_SET BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN1_GEN2r_CL91_40B_ERRGEN_EN_P3f_SET
#define PKTGEN_ERR_INJ_EN1_GEN2r_CL91_40B_ERRGEN_EN_P2f_GET BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN1_GEN2r_CL91_40B_ERRGEN_EN_P2f_GET
#define PKTGEN_ERR_INJ_EN1_GEN2r_CL91_40B_ERRGEN_EN_P2f_SET BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN1_GEN2r_CL91_40B_ERRGEN_EN_P2f_SET
#define PKTGEN_ERR_INJ_EN1_GEN2r_CL91_40B_ERRGEN_EN_P1f_GET BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN1_GEN2r_CL91_40B_ERRGEN_EN_P1f_GET
#define PKTGEN_ERR_INJ_EN1_GEN2r_CL91_40B_ERRGEN_EN_P1f_SET BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN1_GEN2r_CL91_40B_ERRGEN_EN_P1f_SET
#define PKTGEN_ERR_INJ_EN1_GEN2r_CL91_40B_ERRGEN_EN_P0f_GET BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN1_GEN2r_CL91_40B_ERRGEN_EN_P0f_GET
#define PKTGEN_ERR_INJ_EN1_GEN2r_CL91_40B_ERRGEN_EN_P0f_SET BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN1_GEN2r_CL91_40B_ERRGEN_EN_P0f_SET
#define PKTGEN_ERR_INJ_EN1_GEN2r_ERRGEN_EN_PH3f_GET BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN1_GEN2r_ERRGEN_EN_PH3f_GET
#define PKTGEN_ERR_INJ_EN1_GEN2r_ERRGEN_EN_PH3f_SET BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN1_GEN2r_ERRGEN_EN_PH3f_SET
#define READ_PKTGEN_ERR_INJ_EN1_GEN2r BCMI_TSCF_XGXS_READ_PKTGEN_ERR_INJ_EN1_GEN2r
#define WRITE_PKTGEN_ERR_INJ_EN1_GEN2r BCMI_TSCF_XGXS_WRITE_PKTGEN_ERR_INJ_EN1_GEN2r
#define MODIFY_PKTGEN_ERR_INJ_EN1_GEN2r BCMI_TSCF_XGXS_MODIFY_PKTGEN_ERR_INJ_EN1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PKTGEN_ERR_INJ_EN1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  CL82_AM_TMR_GEN2
 * BLOCKS:   CL82_SHARED
 * REGADDR:  0x9123
 * DESC:     cl82 AM timer register
 * RESETVAL: 0x4000 (16384)
 * ACCESS:   R/W
 * FIELDS:
 *     AM_TIMER_INIT_VAL Alignment marker initial timer valueUsed by both the TX and RX pipelines
 */
#define BCMI_TSCF_XGXS_CL82_AM_TMR_GEN2r (0x00109123 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_CL82_AM_TMR_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program CL82_AM_TMR_GEN2.
 */
typedef union BCMI_TSCF_XGXS_CL82_AM_TMR_GEN2r_s {
	uint32_t v[1];
	uint32_t cl82_am_tmr_gen2[1];
	uint32_t _cl82_am_tmr_gen2;
} BCMI_TSCF_XGXS_CL82_AM_TMR_GEN2r_t;

#define BCMI_TSCF_XGXS_CL82_AM_TMR_GEN2r_CLR(r) (r).cl82_am_tmr_gen2[0] = 0
#define BCMI_TSCF_XGXS_CL82_AM_TMR_GEN2r_SET(r,d) (r).cl82_am_tmr_gen2[0] = d
#define BCMI_TSCF_XGXS_CL82_AM_TMR_GEN2r_GET(r) (r).cl82_am_tmr_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_CL82_AM_TMR_GEN2r_AM_TIMER_INIT_VALf_GET(r) (((r).cl82_am_tmr_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_CL82_AM_TMR_GEN2r_AM_TIMER_INIT_VALf_SET(r,f) (r).cl82_am_tmr_gen2[0]=(((r).cl82_am_tmr_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access CL82_AM_TMR_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_CL82_AM_TMR_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL82_AM_TMR_GEN2r,(_r._cl82_am_tmr_gen2))
#define BCMI_TSCF_XGXS_WRITE_CL82_AM_TMR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL82_AM_TMR_GEN2r,(_r._cl82_am_tmr_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_CL82_AM_TMR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL82_AM_TMR_GEN2r,(_r._cl82_am_tmr_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define CL82_AM_TMR_GEN2r BCMI_TSCF_XGXS_CL82_AM_TMR_GEN2r
#define CL82_AM_TMR_GEN2r_SIZE BCMI_TSCF_XGXS_CL82_AM_TMR_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_CL82_AM_TMR_GEN2r_t CL82_AM_TMR_GEN2r_t;
#define CL82_AM_TMR_GEN2r_CLR BCMI_TSCF_XGXS_CL82_AM_TMR_GEN2r_CLR
#define CL82_AM_TMR_GEN2r_SET BCMI_TSCF_XGXS_CL82_AM_TMR_GEN2r_SET
#define CL82_AM_TMR_GEN2r_GET BCMI_TSCF_XGXS_CL82_AM_TMR_GEN2r_GET
#define CL82_AM_TMR_GEN2r_AM_TIMER_INIT_VALf_GET BCMI_TSCF_XGXS_CL82_AM_TMR_GEN2r_AM_TIMER_INIT_VALf_GET
#define CL82_AM_TMR_GEN2r_AM_TIMER_INIT_VALf_SET BCMI_TSCF_XGXS_CL82_AM_TMR_GEN2r_AM_TIMER_INIT_VALf_SET
#define READ_CL82_AM_TMR_GEN2r BCMI_TSCF_XGXS_READ_CL82_AM_TMR_GEN2r
#define WRITE_CL82_AM_TMR_GEN2r BCMI_TSCF_XGXS_WRITE_CL82_AM_TMR_GEN2r
#define MODIFY_CL82_AM_TMR_GEN2r BCMI_TSCF_XGXS_MODIFY_CL82_AM_TMR_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_CL82_AM_TMR_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  CL82_LN_0_AM_BYTE10_GEN2
 * BLOCKS:   CL82_AM_REGS
 * REGADDR:  0x9130
 * DESC:     cl82 LANE 0 AM BYTES 1 AND 0 register
 * RESETVAL: 0x7690 (30352)
 * ACCESS:   R/W
 * FIELDS:
 *     LANE_0_AM_1_0    MLD Alignment Market Bytes 1 and 0 for LANE 0.  Used in MLD20G and MLD120G modes only
 */
#define BCMI_TSCF_XGXS_CL82_LN_0_AM_BYTE10_GEN2r (0x00109130 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_CL82_LN_0_AM_BYTE10_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program CL82_LN_0_AM_BYTE10_GEN2.
 */
typedef union BCMI_TSCF_XGXS_CL82_LN_0_AM_BYTE10_GEN2r_s {
	uint32_t v[1];
	uint32_t cl82_ln_0_am_byte10_gen2[1];
	uint32_t _cl82_ln_0_am_byte10_gen2;
} BCMI_TSCF_XGXS_CL82_LN_0_AM_BYTE10_GEN2r_t;

#define BCMI_TSCF_XGXS_CL82_LN_0_AM_BYTE10_GEN2r_CLR(r) (r).cl82_ln_0_am_byte10_gen2[0] = 0
#define BCMI_TSCF_XGXS_CL82_LN_0_AM_BYTE10_GEN2r_SET(r,d) (r).cl82_ln_0_am_byte10_gen2[0] = d
#define BCMI_TSCF_XGXS_CL82_LN_0_AM_BYTE10_GEN2r_GET(r) (r).cl82_ln_0_am_byte10_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_CL82_LN_0_AM_BYTE10_GEN2r_LANE_0_AM_1_0f_GET(r) (((r).cl82_ln_0_am_byte10_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_CL82_LN_0_AM_BYTE10_GEN2r_LANE_0_AM_1_0f_SET(r,f) (r).cl82_ln_0_am_byte10_gen2[0]=(((r).cl82_ln_0_am_byte10_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access CL82_LN_0_AM_BYTE10_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_CL82_LN_0_AM_BYTE10_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL82_LN_0_AM_BYTE10_GEN2r,(_r._cl82_ln_0_am_byte10_gen2))
#define BCMI_TSCF_XGXS_WRITE_CL82_LN_0_AM_BYTE10_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL82_LN_0_AM_BYTE10_GEN2r,(_r._cl82_ln_0_am_byte10_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_CL82_LN_0_AM_BYTE10_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL82_LN_0_AM_BYTE10_GEN2r,(_r._cl82_ln_0_am_byte10_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define CL82_LN_0_AM_BYTE10_GEN2r BCMI_TSCF_XGXS_CL82_LN_0_AM_BYTE10_GEN2r
#define CL82_LN_0_AM_BYTE10_GEN2r_SIZE BCMI_TSCF_XGXS_CL82_LN_0_AM_BYTE10_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_CL82_LN_0_AM_BYTE10_GEN2r_t CL82_LN_0_AM_BYTE10_GEN2r_t;
#define CL82_LN_0_AM_BYTE10_GEN2r_CLR BCMI_TSCF_XGXS_CL82_LN_0_AM_BYTE10_GEN2r_CLR
#define CL82_LN_0_AM_BYTE10_GEN2r_SET BCMI_TSCF_XGXS_CL82_LN_0_AM_BYTE10_GEN2r_SET
#define CL82_LN_0_AM_BYTE10_GEN2r_GET BCMI_TSCF_XGXS_CL82_LN_0_AM_BYTE10_GEN2r_GET
#define CL82_LN_0_AM_BYTE10_GEN2r_LANE_0_AM_1_0f_GET BCMI_TSCF_XGXS_CL82_LN_0_AM_BYTE10_GEN2r_LANE_0_AM_1_0f_GET
#define CL82_LN_0_AM_BYTE10_GEN2r_LANE_0_AM_1_0f_SET BCMI_TSCF_XGXS_CL82_LN_0_AM_BYTE10_GEN2r_LANE_0_AM_1_0f_SET
#define READ_CL82_LN_0_AM_BYTE10_GEN2r BCMI_TSCF_XGXS_READ_CL82_LN_0_AM_BYTE10_GEN2r
#define WRITE_CL82_LN_0_AM_BYTE10_GEN2r BCMI_TSCF_XGXS_WRITE_CL82_LN_0_AM_BYTE10_GEN2r
#define MODIFY_CL82_LN_0_AM_BYTE10_GEN2r BCMI_TSCF_XGXS_MODIFY_CL82_LN_0_AM_BYTE10_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_CL82_LN_0_AM_BYTE10_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  CL82_LN_1_AM_BYTE10_GEN2
 * BLOCKS:   CL82_AM_REGS
 * REGADDR:  0x9131
 * DESC:     cl82 LANE 1 AM BYTES 1 AND 0 register
 * RESETVAL: 0xc4f0 (50416)
 * ACCESS:   R/W
 * FIELDS:
 *     LANE_1_AM_1_0    MLD Alignment Market Bytes 1 and 0 for LANE 1.  Used in MLD20G and MLD120G modes only
 */
#define BCMI_TSCF_XGXS_CL82_LN_1_AM_BYTE10_GEN2r (0x00109131 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_CL82_LN_1_AM_BYTE10_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program CL82_LN_1_AM_BYTE10_GEN2.
 */
typedef union BCMI_TSCF_XGXS_CL82_LN_1_AM_BYTE10_GEN2r_s {
	uint32_t v[1];
	uint32_t cl82_ln_1_am_byte10_gen2[1];
	uint32_t _cl82_ln_1_am_byte10_gen2;
} BCMI_TSCF_XGXS_CL82_LN_1_AM_BYTE10_GEN2r_t;

#define BCMI_TSCF_XGXS_CL82_LN_1_AM_BYTE10_GEN2r_CLR(r) (r).cl82_ln_1_am_byte10_gen2[0] = 0
#define BCMI_TSCF_XGXS_CL82_LN_1_AM_BYTE10_GEN2r_SET(r,d) (r).cl82_ln_1_am_byte10_gen2[0] = d
#define BCMI_TSCF_XGXS_CL82_LN_1_AM_BYTE10_GEN2r_GET(r) (r).cl82_ln_1_am_byte10_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_CL82_LN_1_AM_BYTE10_GEN2r_LANE_1_AM_1_0f_GET(r) (((r).cl82_ln_1_am_byte10_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_CL82_LN_1_AM_BYTE10_GEN2r_LANE_1_AM_1_0f_SET(r,f) (r).cl82_ln_1_am_byte10_gen2[0]=(((r).cl82_ln_1_am_byte10_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access CL82_LN_1_AM_BYTE10_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_CL82_LN_1_AM_BYTE10_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL82_LN_1_AM_BYTE10_GEN2r,(_r._cl82_ln_1_am_byte10_gen2))
#define BCMI_TSCF_XGXS_WRITE_CL82_LN_1_AM_BYTE10_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL82_LN_1_AM_BYTE10_GEN2r,(_r._cl82_ln_1_am_byte10_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_CL82_LN_1_AM_BYTE10_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL82_LN_1_AM_BYTE10_GEN2r,(_r._cl82_ln_1_am_byte10_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define CL82_LN_1_AM_BYTE10_GEN2r BCMI_TSCF_XGXS_CL82_LN_1_AM_BYTE10_GEN2r
#define CL82_LN_1_AM_BYTE10_GEN2r_SIZE BCMI_TSCF_XGXS_CL82_LN_1_AM_BYTE10_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_CL82_LN_1_AM_BYTE10_GEN2r_t CL82_LN_1_AM_BYTE10_GEN2r_t;
#define CL82_LN_1_AM_BYTE10_GEN2r_CLR BCMI_TSCF_XGXS_CL82_LN_1_AM_BYTE10_GEN2r_CLR
#define CL82_LN_1_AM_BYTE10_GEN2r_SET BCMI_TSCF_XGXS_CL82_LN_1_AM_BYTE10_GEN2r_SET
#define CL82_LN_1_AM_BYTE10_GEN2r_GET BCMI_TSCF_XGXS_CL82_LN_1_AM_BYTE10_GEN2r_GET
#define CL82_LN_1_AM_BYTE10_GEN2r_LANE_1_AM_1_0f_GET BCMI_TSCF_XGXS_CL82_LN_1_AM_BYTE10_GEN2r_LANE_1_AM_1_0f_GET
#define CL82_LN_1_AM_BYTE10_GEN2r_LANE_1_AM_1_0f_SET BCMI_TSCF_XGXS_CL82_LN_1_AM_BYTE10_GEN2r_LANE_1_AM_1_0f_SET
#define READ_CL82_LN_1_AM_BYTE10_GEN2r BCMI_TSCF_XGXS_READ_CL82_LN_1_AM_BYTE10_GEN2r
#define WRITE_CL82_LN_1_AM_BYTE10_GEN2r BCMI_TSCF_XGXS_WRITE_CL82_LN_1_AM_BYTE10_GEN2r
#define MODIFY_CL82_LN_1_AM_BYTE10_GEN2r BCMI_TSCF_XGXS_MODIFY_CL82_LN_1_AM_BYTE10_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_CL82_LN_1_AM_BYTE10_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  CL82_LANES_1_0_AM_BYTE2_GEN2
 * BLOCKS:   CL82_AM_REGS
 * REGADDR:  0x9132
 * DESC:     cl82 LANES 1 and 0 AM BYTE 2 register
 * RESETVAL: 0xe647 (58951)
 * ACCESS:   R/W
 * FIELDS:
 *     LANE_0_AM_2      MLD Alignment Market Byte 2 for LANE 0.  Used in MLD20G and MLD120G modes only
 *     LANE_1_AM_2      MLD Alignment Market Byte 2 for LANE 1.  Used in MLD20G and MLD120G modes only
 */
#define BCMI_TSCF_XGXS_CL82_LANES_1_0_AM_BYTE2_GEN2r (0x00109132 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_CL82_LANES_1_0_AM_BYTE2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program CL82_LANES_1_0_AM_BYTE2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_CL82_LANES_1_0_AM_BYTE2_GEN2r_s {
	uint32_t v[1];
	uint32_t cl82_lanes_1_0_am_byte2_gen2[1];
	uint32_t _cl82_lanes_1_0_am_byte2_gen2;
} BCMI_TSCF_XGXS_CL82_LANES_1_0_AM_BYTE2_GEN2r_t;

#define BCMI_TSCF_XGXS_CL82_LANES_1_0_AM_BYTE2_GEN2r_CLR(r) (r).cl82_lanes_1_0_am_byte2_gen2[0] = 0
#define BCMI_TSCF_XGXS_CL82_LANES_1_0_AM_BYTE2_GEN2r_SET(r,d) (r).cl82_lanes_1_0_am_byte2_gen2[0] = d
#define BCMI_TSCF_XGXS_CL82_LANES_1_0_AM_BYTE2_GEN2r_GET(r) (r).cl82_lanes_1_0_am_byte2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_CL82_LANES_1_0_AM_BYTE2_GEN2r_LANE_1_AM_2f_GET(r) ((((r).cl82_lanes_1_0_am_byte2_gen2[0]) >> 8) & 0xff)
#define BCMI_TSCF_XGXS_CL82_LANES_1_0_AM_BYTE2_GEN2r_LANE_1_AM_2f_SET(r,f) (r).cl82_lanes_1_0_am_byte2_gen2[0]=(((r).cl82_lanes_1_0_am_byte2_gen2[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_TSCF_XGXS_CL82_LANES_1_0_AM_BYTE2_GEN2r_LANE_0_AM_2f_GET(r) (((r).cl82_lanes_1_0_am_byte2_gen2[0]) & 0xff)
#define BCMI_TSCF_XGXS_CL82_LANES_1_0_AM_BYTE2_GEN2r_LANE_0_AM_2f_SET(r,f) (r).cl82_lanes_1_0_am_byte2_gen2[0]=(((r).cl82_lanes_1_0_am_byte2_gen2[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access CL82_LANES_1_0_AM_BYTE2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_CL82_LANES_1_0_AM_BYTE2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL82_LANES_1_0_AM_BYTE2_GEN2r,(_r._cl82_lanes_1_0_am_byte2_gen2))
#define BCMI_TSCF_XGXS_WRITE_CL82_LANES_1_0_AM_BYTE2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL82_LANES_1_0_AM_BYTE2_GEN2r,(_r._cl82_lanes_1_0_am_byte2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_CL82_LANES_1_0_AM_BYTE2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL82_LANES_1_0_AM_BYTE2_GEN2r,(_r._cl82_lanes_1_0_am_byte2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define CL82_LANES_1_0_AM_BYTE2_GEN2r BCMI_TSCF_XGXS_CL82_LANES_1_0_AM_BYTE2_GEN2r
#define CL82_LANES_1_0_AM_BYTE2_GEN2r_SIZE BCMI_TSCF_XGXS_CL82_LANES_1_0_AM_BYTE2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_CL82_LANES_1_0_AM_BYTE2_GEN2r_t CL82_LANES_1_0_AM_BYTE2_GEN2r_t;
#define CL82_LANES_1_0_AM_BYTE2_GEN2r_CLR BCMI_TSCF_XGXS_CL82_LANES_1_0_AM_BYTE2_GEN2r_CLR
#define CL82_LANES_1_0_AM_BYTE2_GEN2r_SET BCMI_TSCF_XGXS_CL82_LANES_1_0_AM_BYTE2_GEN2r_SET
#define CL82_LANES_1_0_AM_BYTE2_GEN2r_GET BCMI_TSCF_XGXS_CL82_LANES_1_0_AM_BYTE2_GEN2r_GET
#define CL82_LANES_1_0_AM_BYTE2_GEN2r_LANE_1_AM_2f_GET BCMI_TSCF_XGXS_CL82_LANES_1_0_AM_BYTE2_GEN2r_LANE_1_AM_2f_GET
#define CL82_LANES_1_0_AM_BYTE2_GEN2r_LANE_1_AM_2f_SET BCMI_TSCF_XGXS_CL82_LANES_1_0_AM_BYTE2_GEN2r_LANE_1_AM_2f_SET
#define CL82_LANES_1_0_AM_BYTE2_GEN2r_LANE_0_AM_2f_GET BCMI_TSCF_XGXS_CL82_LANES_1_0_AM_BYTE2_GEN2r_LANE_0_AM_2f_GET
#define CL82_LANES_1_0_AM_BYTE2_GEN2r_LANE_0_AM_2f_SET BCMI_TSCF_XGXS_CL82_LANES_1_0_AM_BYTE2_GEN2r_LANE_0_AM_2f_SET
#define READ_CL82_LANES_1_0_AM_BYTE2_GEN2r BCMI_TSCF_XGXS_READ_CL82_LANES_1_0_AM_BYTE2_GEN2r
#define WRITE_CL82_LANES_1_0_AM_BYTE2_GEN2r BCMI_TSCF_XGXS_WRITE_CL82_LANES_1_0_AM_BYTE2_GEN2r
#define MODIFY_CL82_LANES_1_0_AM_BYTE2_GEN2r BCMI_TSCF_XGXS_MODIFY_CL82_LANES_1_0_AM_BYTE2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_CL82_LANES_1_0_AM_BYTE2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TX_X1_TX_LN_SWP_GEN2
 * BLOCKS:   TX_X1_CONTROL0
 * REGADDR:  0x9200
 * DESC:     TX lane swap register
 * RESETVAL: 0xe4 (228)
 * ACCESS:   R/W
 * FIELDS:
 *     LOGICAL0_TO_PHY_SEL This is a LOGICAL to PHYSICAL mapping control.logical0_to_phy_sel indicates for LOGICAL lane 0 which lane to PHYSICAL send the data to
 *     LOGICAL1_TO_PHY_SEL This is a LOGICAL to PHYSICAL mapping control.logical1_to_phy_sel indicates for LOGICAL lane 1 which lane to PHYSICAL send the data to
 *     LOGICAL2_TO_PHY_SEL This is a LOGICAL to PHYSICAL mapping control.logical2_to_phy_sel indicates for LOGICAL lane 2 which lane to PHYSICAL send the data to
 *     LOGICAL3_TO_PHY_SEL This is a LOGICAL to PHYSICAL mapping control.logical3_to_phy_sel indicates for LOGICAL lane 3 which lane to PHYSICAL send the data to
 */
#define BCMI_TSCF_XGXS_TX_X1_TX_LN_SWP_GEN2r (0x00109200 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TX_X1_TX_LN_SWP_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TX_X1_TX_LN_SWP_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TX_X1_TX_LN_SWP_GEN2r_s {
	uint32_t v[1];
	uint32_t tx_x1_tx_ln_swp_gen2[1];
	uint32_t _tx_x1_tx_ln_swp_gen2;
} BCMI_TSCF_XGXS_TX_X1_TX_LN_SWP_GEN2r_t;

#define BCMI_TSCF_XGXS_TX_X1_TX_LN_SWP_GEN2r_CLR(r) (r).tx_x1_tx_ln_swp_gen2[0] = 0
#define BCMI_TSCF_XGXS_TX_X1_TX_LN_SWP_GEN2r_SET(r,d) (r).tx_x1_tx_ln_swp_gen2[0] = d
#define BCMI_TSCF_XGXS_TX_X1_TX_LN_SWP_GEN2r_GET(r) (r).tx_x1_tx_ln_swp_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TX_X1_TX_LN_SWP_GEN2r_LOGICAL3_TO_PHY_SELf_GET(r) ((((r).tx_x1_tx_ln_swp_gen2[0]) >> 6) & 0x3)
#define BCMI_TSCF_XGXS_TX_X1_TX_LN_SWP_GEN2r_LOGICAL3_TO_PHY_SELf_SET(r,f) (r).tx_x1_tx_ln_swp_gen2[0]=(((r).tx_x1_tx_ln_swp_gen2[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6)) | (3 << (16 + 6))
#define BCMI_TSCF_XGXS_TX_X1_TX_LN_SWP_GEN2r_LOGICAL2_TO_PHY_SELf_GET(r) ((((r).tx_x1_tx_ln_swp_gen2[0]) >> 4) & 0x3)
#define BCMI_TSCF_XGXS_TX_X1_TX_LN_SWP_GEN2r_LOGICAL2_TO_PHY_SELf_SET(r,f) (r).tx_x1_tx_ln_swp_gen2[0]=(((r).tx_x1_tx_ln_swp_gen2[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_XGXS_TX_X1_TX_LN_SWP_GEN2r_LOGICAL1_TO_PHY_SELf_GET(r) ((((r).tx_x1_tx_ln_swp_gen2[0]) >> 2) & 0x3)
#define BCMI_TSCF_XGXS_TX_X1_TX_LN_SWP_GEN2r_LOGICAL1_TO_PHY_SELf_SET(r,f) (r).tx_x1_tx_ln_swp_gen2[0]=(((r).tx_x1_tx_ln_swp_gen2[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2)) | (3 << (16 + 2))
#define BCMI_TSCF_XGXS_TX_X1_TX_LN_SWP_GEN2r_LOGICAL0_TO_PHY_SELf_GET(r) (((r).tx_x1_tx_ln_swp_gen2[0]) & 0x3)
#define BCMI_TSCF_XGXS_TX_X1_TX_LN_SWP_GEN2r_LOGICAL0_TO_PHY_SELf_SET(r,f) (r).tx_x1_tx_ln_swp_gen2[0]=(((r).tx_x1_tx_ln_swp_gen2[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access TX_X1_TX_LN_SWP_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TX_X1_TX_LN_SWP_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_X1_TX_LN_SWP_GEN2r,(_r._tx_x1_tx_ln_swp_gen2))
#define BCMI_TSCF_XGXS_WRITE_TX_X1_TX_LN_SWP_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X1_TX_LN_SWP_GEN2r,(_r._tx_x1_tx_ln_swp_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TX_X1_TX_LN_SWP_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X1_TX_LN_SWP_GEN2r,(_r._tx_x1_tx_ln_swp_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TX_X1_TX_LN_SWP_GEN2r BCMI_TSCF_XGXS_TX_X1_TX_LN_SWP_GEN2r
#define TX_X1_TX_LN_SWP_GEN2r_SIZE BCMI_TSCF_XGXS_TX_X1_TX_LN_SWP_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TX_X1_TX_LN_SWP_GEN2r_t TX_X1_TX_LN_SWP_GEN2r_t;
#define TX_X1_TX_LN_SWP_GEN2r_CLR BCMI_TSCF_XGXS_TX_X1_TX_LN_SWP_GEN2r_CLR
#define TX_X1_TX_LN_SWP_GEN2r_SET BCMI_TSCF_XGXS_TX_X1_TX_LN_SWP_GEN2r_SET
#define TX_X1_TX_LN_SWP_GEN2r_GET BCMI_TSCF_XGXS_TX_X1_TX_LN_SWP_GEN2r_GET
#define TX_X1_TX_LN_SWP_GEN2r_LOGICAL3_TO_PHY_SELf_GET BCMI_TSCF_XGXS_TX_X1_TX_LN_SWP_GEN2r_LOGICAL3_TO_PHY_SELf_GET
#define TX_X1_TX_LN_SWP_GEN2r_LOGICAL3_TO_PHY_SELf_SET BCMI_TSCF_XGXS_TX_X1_TX_LN_SWP_GEN2r_LOGICAL3_TO_PHY_SELf_SET
#define TX_X1_TX_LN_SWP_GEN2r_LOGICAL2_TO_PHY_SELf_GET BCMI_TSCF_XGXS_TX_X1_TX_LN_SWP_GEN2r_LOGICAL2_TO_PHY_SELf_GET
#define TX_X1_TX_LN_SWP_GEN2r_LOGICAL2_TO_PHY_SELf_SET BCMI_TSCF_XGXS_TX_X1_TX_LN_SWP_GEN2r_LOGICAL2_TO_PHY_SELf_SET
#define TX_X1_TX_LN_SWP_GEN2r_LOGICAL1_TO_PHY_SELf_GET BCMI_TSCF_XGXS_TX_X1_TX_LN_SWP_GEN2r_LOGICAL1_TO_PHY_SELf_GET
#define TX_X1_TX_LN_SWP_GEN2r_LOGICAL1_TO_PHY_SELf_SET BCMI_TSCF_XGXS_TX_X1_TX_LN_SWP_GEN2r_LOGICAL1_TO_PHY_SELf_SET
#define TX_X1_TX_LN_SWP_GEN2r_LOGICAL0_TO_PHY_SELf_GET BCMI_TSCF_XGXS_TX_X1_TX_LN_SWP_GEN2r_LOGICAL0_TO_PHY_SELf_GET
#define TX_X1_TX_LN_SWP_GEN2r_LOGICAL0_TO_PHY_SELf_SET BCMI_TSCF_XGXS_TX_X1_TX_LN_SWP_GEN2r_LOGICAL0_TO_PHY_SELf_SET
#define READ_TX_X1_TX_LN_SWP_GEN2r BCMI_TSCF_XGXS_READ_TX_X1_TX_LN_SWP_GEN2r
#define WRITE_TX_X1_TX_LN_SWP_GEN2r BCMI_TSCF_XGXS_WRITE_TX_X1_TX_LN_SWP_GEN2r
#define MODIFY_TX_X1_TX_LN_SWP_GEN2r BCMI_TSCF_XGXS_MODIFY_TX_X1_TX_LN_SWP_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TX_X1_TX_LN_SWP_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X1_DEC_CTL_1_GEN2
 * BLOCKS:   RX_X1_CONTROL0
 * REGADDR:  0x9221
 * DESC:     decode_control_1 register
 * RESETVAL: 0x6140 (24896)
 * ACCESS:   R/W
 * FIELDS:
 *     CL49_BER_LIMIT   Number of Error Blocks before HI_BER is determined for CL49
 *     CL82_BER_LIMIT   Number of Error Blocks before HI_BER is determined for CL82
 *     SET_BER_WINDOW_512 Sets the BER measurement window to 512 blocks instead of the IEEE definition.
 */
#define BCMI_TSCF_XGXS_RX_X1_DEC_CTL_1_GEN2r (0x00109221 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X1_DEC_CTL_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X1_DEC_CTL_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X1_DEC_CTL_1_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x1_dec_ctl_1_gen2[1];
	uint32_t _rx_x1_dec_ctl_1_gen2;
} BCMI_TSCF_XGXS_RX_X1_DEC_CTL_1_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X1_DEC_CTL_1_GEN2r_CLR(r) (r).rx_x1_dec_ctl_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X1_DEC_CTL_1_GEN2r_SET(r,d) (r).rx_x1_dec_ctl_1_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X1_DEC_CTL_1_GEN2r_GET(r) (r).rx_x1_dec_ctl_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X1_DEC_CTL_1_GEN2r_SET_BER_WINDOW_512f_GET(r) ((((r).rx_x1_dec_ctl_1_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_DEC_CTL_1_GEN2r_SET_BER_WINDOW_512f_SET(r,f) (r).rx_x1_dec_ctl_1_gen2[0]=(((r).rx_x1_dec_ctl_1_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_RX_X1_DEC_CTL_1_GEN2r_CL82_BER_LIMITf_GET(r) ((((r).rx_x1_dec_ctl_1_gen2[0]) >> 8) & 0x7f)
#define BCMI_TSCF_XGXS_RX_X1_DEC_CTL_1_GEN2r_CL82_BER_LIMITf_SET(r,f) (r).rx_x1_dec_ctl_1_gen2[0]=(((r).rx_x1_dec_ctl_1_gen2[0] & ~((uint32_t)0x7f << 8)) | ((((uint32_t)f) & 0x7f) << 8)) | (127 << (16 + 8))
#define BCMI_TSCF_XGXS_RX_X1_DEC_CTL_1_GEN2r_CL49_BER_LIMITf_GET(r) ((((r).rx_x1_dec_ctl_1_gen2[0]) >> 2) & 0x3f)
#define BCMI_TSCF_XGXS_RX_X1_DEC_CTL_1_GEN2r_CL49_BER_LIMITf_SET(r,f) (r).rx_x1_dec_ctl_1_gen2[0]=(((r).rx_x1_dec_ctl_1_gen2[0] & ~((uint32_t)0x3f << 2)) | ((((uint32_t)f) & 0x3f) << 2)) | (63 << (16 + 2))

/*
 * These macros can be used to access RX_X1_DEC_CTL_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X1_DEC_CTL_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X1_DEC_CTL_1_GEN2r,(_r._rx_x1_dec_ctl_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X1_DEC_CTL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X1_DEC_CTL_1_GEN2r,(_r._rx_x1_dec_ctl_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X1_DEC_CTL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X1_DEC_CTL_1_GEN2r,(_r._rx_x1_dec_ctl_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X1_DEC_CTL_1_GEN2r BCMI_TSCF_XGXS_RX_X1_DEC_CTL_1_GEN2r
#define RX_X1_DEC_CTL_1_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X1_DEC_CTL_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X1_DEC_CTL_1_GEN2r_t RX_X1_DEC_CTL_1_GEN2r_t;
#define RX_X1_DEC_CTL_1_GEN2r_CLR BCMI_TSCF_XGXS_RX_X1_DEC_CTL_1_GEN2r_CLR
#define RX_X1_DEC_CTL_1_GEN2r_SET BCMI_TSCF_XGXS_RX_X1_DEC_CTL_1_GEN2r_SET
#define RX_X1_DEC_CTL_1_GEN2r_GET BCMI_TSCF_XGXS_RX_X1_DEC_CTL_1_GEN2r_GET
#define RX_X1_DEC_CTL_1_GEN2r_SET_BER_WINDOW_512f_GET BCMI_TSCF_XGXS_RX_X1_DEC_CTL_1_GEN2r_SET_BER_WINDOW_512f_GET
#define RX_X1_DEC_CTL_1_GEN2r_SET_BER_WINDOW_512f_SET BCMI_TSCF_XGXS_RX_X1_DEC_CTL_1_GEN2r_SET_BER_WINDOW_512f_SET
#define RX_X1_DEC_CTL_1_GEN2r_CL82_BER_LIMITf_GET BCMI_TSCF_XGXS_RX_X1_DEC_CTL_1_GEN2r_CL82_BER_LIMITf_GET
#define RX_X1_DEC_CTL_1_GEN2r_CL82_BER_LIMITf_SET BCMI_TSCF_XGXS_RX_X1_DEC_CTL_1_GEN2r_CL82_BER_LIMITf_SET
#define RX_X1_DEC_CTL_1_GEN2r_CL49_BER_LIMITf_GET BCMI_TSCF_XGXS_RX_X1_DEC_CTL_1_GEN2r_CL49_BER_LIMITf_GET
#define RX_X1_DEC_CTL_1_GEN2r_CL49_BER_LIMITf_SET BCMI_TSCF_XGXS_RX_X1_DEC_CTL_1_GEN2r_CL49_BER_LIMITf_SET
#define READ_RX_X1_DEC_CTL_1_GEN2r BCMI_TSCF_XGXS_READ_RX_X1_DEC_CTL_1_GEN2r
#define WRITE_RX_X1_DEC_CTL_1_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X1_DEC_CTL_1_GEN2r
#define MODIFY_RX_X1_DEC_CTL_1_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X1_DEC_CTL_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X1_DEC_CTL_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X1_DESKEW_WINS_0_GEN2
 * BLOCKS:   RX_X1_CONTROL0
 * REGADDR:  0x9222
 * DESC:     deskew_windows_0 register
 * RESETVAL: 0x4a6 (1190)
 * ACCESS:   R/W
 * FIELDS:
 *     CL82_DSWIN       CL82 Block based deskew window size for 20g and 40g configurationsdeskew_window = (cl82_dswin+1)blocks
 *     CL82_DSWIN_100G  CL82 Block based deskew window size for 100g and higher configurationsdeskew_window = (cl82_dswin_100g+1)blocks
 */
#define BCMI_TSCF_XGXS_RX_X1_DESKEW_WINS_0_GEN2r (0x00109222 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X1_DESKEW_WINS_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X1_DESKEW_WINS_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X1_DESKEW_WINS_0_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x1_deskew_wins_0_gen2[1];
	uint32_t _rx_x1_deskew_wins_0_gen2;
} BCMI_TSCF_XGXS_RX_X1_DESKEW_WINS_0_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X1_DESKEW_WINS_0_GEN2r_CLR(r) (r).rx_x1_deskew_wins_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X1_DESKEW_WINS_0_GEN2r_SET(r,d) (r).rx_x1_deskew_wins_0_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X1_DESKEW_WINS_0_GEN2r_GET(r) (r).rx_x1_deskew_wins_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X1_DESKEW_WINS_0_GEN2r_CL82_DSWIN_100Gf_GET(r) ((((r).rx_x1_deskew_wins_0_gen2[0]) >> 6) & 0x1f)
#define BCMI_TSCF_XGXS_RX_X1_DESKEW_WINS_0_GEN2r_CL82_DSWIN_100Gf_SET(r,f) (r).rx_x1_deskew_wins_0_gen2[0]=(((r).rx_x1_deskew_wins_0_gen2[0] & ~((uint32_t)0x1f << 6)) | ((((uint32_t)f) & 0x1f) << 6)) | (31 << (16 + 6))
#define BCMI_TSCF_XGXS_RX_X1_DESKEW_WINS_0_GEN2r_CL82_DSWINf_GET(r) (((r).rx_x1_deskew_wins_0_gen2[0]) & 0x3f)
#define BCMI_TSCF_XGXS_RX_X1_DESKEW_WINS_0_GEN2r_CL82_DSWINf_SET(r,f) (r).rx_x1_deskew_wins_0_gen2[0]=(((r).rx_x1_deskew_wins_0_gen2[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access RX_X1_DESKEW_WINS_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X1_DESKEW_WINS_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X1_DESKEW_WINS_0_GEN2r,(_r._rx_x1_deskew_wins_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X1_DESKEW_WINS_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X1_DESKEW_WINS_0_GEN2r,(_r._rx_x1_deskew_wins_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X1_DESKEW_WINS_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X1_DESKEW_WINS_0_GEN2r,(_r._rx_x1_deskew_wins_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X1_DESKEW_WINS_0_GEN2r BCMI_TSCF_XGXS_RX_X1_DESKEW_WINS_0_GEN2r
#define RX_X1_DESKEW_WINS_0_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X1_DESKEW_WINS_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X1_DESKEW_WINS_0_GEN2r_t RX_X1_DESKEW_WINS_0_GEN2r_t;
#define RX_X1_DESKEW_WINS_0_GEN2r_CLR BCMI_TSCF_XGXS_RX_X1_DESKEW_WINS_0_GEN2r_CLR
#define RX_X1_DESKEW_WINS_0_GEN2r_SET BCMI_TSCF_XGXS_RX_X1_DESKEW_WINS_0_GEN2r_SET
#define RX_X1_DESKEW_WINS_0_GEN2r_GET BCMI_TSCF_XGXS_RX_X1_DESKEW_WINS_0_GEN2r_GET
#define RX_X1_DESKEW_WINS_0_GEN2r_CL82_DSWIN_100Gf_GET BCMI_TSCF_XGXS_RX_X1_DESKEW_WINS_0_GEN2r_CL82_DSWIN_100Gf_GET
#define RX_X1_DESKEW_WINS_0_GEN2r_CL82_DSWIN_100Gf_SET BCMI_TSCF_XGXS_RX_X1_DESKEW_WINS_0_GEN2r_CL82_DSWIN_100Gf_SET
#define RX_X1_DESKEW_WINS_0_GEN2r_CL82_DSWINf_GET BCMI_TSCF_XGXS_RX_X1_DESKEW_WINS_0_GEN2r_CL82_DSWINf_GET
#define RX_X1_DESKEW_WINS_0_GEN2r_CL82_DSWINf_SET BCMI_TSCF_XGXS_RX_X1_DESKEW_WINS_0_GEN2r_CL82_DSWINf_SET
#define READ_RX_X1_DESKEW_WINS_0_GEN2r BCMI_TSCF_XGXS_READ_RX_X1_DESKEW_WINS_0_GEN2r
#define WRITE_RX_X1_DESKEW_WINS_0_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X1_DESKEW_WINS_0_GEN2r
#define MODIFY_RX_X1_DESKEW_WINS_0_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X1_DESKEW_WINS_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X1_DESKEW_WINS_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X1_CL91_CFG_GEN2
 * BLOCKS:   RX_X1_CONTROL0
 * REGADDR:  0x9223
 * DESC:     cl91 configuration register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     SET_SYMB_ERR_WINDOW_128 1'b0 - Check for symbol errors over 8192 codeword window.1'b1 - Check for symbol errors over 128 codeword window.
 *     FEC_BYP_CORR_EN  It decides the latency of all the frames. The actual mode of operation depends on the per port fec_byp_corr_en config.
 *     FEC_BYP_IND_EN   It decides the latency of all the frames. The actual mode of operation depends on the per port fec_byp_ind_en config.
 *     FEC_DBG_BYP_CORR 1'b0 - Normal operation.1'b1 - Disable data correction independent of the datapath (which is determined by fec_byp_corr_en and fec_byp_ind_en.
 *     CL91_AM_SPACING_1024 1'b0 - AM spacing per virtual lane = 163841'b1 - AM spacing per virtual lane = 1024
 *     CL91_FC_LOCK_CORR_CW 1'b0 - lock on a codeword boundary only if the first CW contains syndrome equal to 0.1'b1 - lock on a codeword boundary even if the first CW contains syndrome not equal to 0, but the codeword is correctable.
 */
#define BCMI_TSCF_XGXS_RX_X1_CL91_CFG_GEN2r (0x00109223 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X1_CL91_CFG_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X1_CL91_CFG_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X1_CL91_CFG_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x1_cl91_cfg_gen2[1];
	uint32_t _rx_x1_cl91_cfg_gen2;
} BCMI_TSCF_XGXS_RX_X1_CL91_CFG_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X1_CL91_CFG_GEN2r_CLR(r) (r).rx_x1_cl91_cfg_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X1_CL91_CFG_GEN2r_SET(r,d) (r).rx_x1_cl91_cfg_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X1_CL91_CFG_GEN2r_GET(r) (r).rx_x1_cl91_cfg_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X1_CL91_CFG_GEN2r_CL91_FC_LOCK_CORR_CWf_GET(r) ((((r).rx_x1_cl91_cfg_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_CL91_CFG_GEN2r_CL91_FC_LOCK_CORR_CWf_SET(r,f) (r).rx_x1_cl91_cfg_gen2[0]=(((r).rx_x1_cl91_cfg_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_RX_X1_CL91_CFG_GEN2r_CL91_AM_SPACING_1024f_GET(r) ((((r).rx_x1_cl91_cfg_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_CL91_CFG_GEN2r_CL91_AM_SPACING_1024f_SET(r,f) (r).rx_x1_cl91_cfg_gen2[0]=(((r).rx_x1_cl91_cfg_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_RX_X1_CL91_CFG_GEN2r_FEC_DBG_BYP_CORRf_GET(r) ((((r).rx_x1_cl91_cfg_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_CL91_CFG_GEN2r_FEC_DBG_BYP_CORRf_SET(r,f) (r).rx_x1_cl91_cfg_gen2[0]=(((r).rx_x1_cl91_cfg_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_RX_X1_CL91_CFG_GEN2r_FEC_BYP_IND_ENf_GET(r) ((((r).rx_x1_cl91_cfg_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_CL91_CFG_GEN2r_FEC_BYP_IND_ENf_SET(r,f) (r).rx_x1_cl91_cfg_gen2[0]=(((r).rx_x1_cl91_cfg_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_RX_X1_CL91_CFG_GEN2r_FEC_BYP_CORR_ENf_GET(r) ((((r).rx_x1_cl91_cfg_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_CL91_CFG_GEN2r_FEC_BYP_CORR_ENf_SET(r,f) (r).rx_x1_cl91_cfg_gen2[0]=(((r).rx_x1_cl91_cfg_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_RX_X1_CL91_CFG_GEN2r_SET_SYMB_ERR_WINDOW_128f_GET(r) ((((r).rx_x1_cl91_cfg_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_CL91_CFG_GEN2r_SET_SYMB_ERR_WINDOW_128f_SET(r,f) (r).rx_x1_cl91_cfg_gen2[0]=(((r).rx_x1_cl91_cfg_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))

/*
 * These macros can be used to access RX_X1_CL91_CFG_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X1_CL91_CFG_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X1_CL91_CFG_GEN2r,(_r._rx_x1_cl91_cfg_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X1_CL91_CFG_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X1_CL91_CFG_GEN2r,(_r._rx_x1_cl91_cfg_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X1_CL91_CFG_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X1_CL91_CFG_GEN2r,(_r._rx_x1_cl91_cfg_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X1_CL91_CFG_GEN2r BCMI_TSCF_XGXS_RX_X1_CL91_CFG_GEN2r
#define RX_X1_CL91_CFG_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X1_CL91_CFG_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X1_CL91_CFG_GEN2r_t RX_X1_CL91_CFG_GEN2r_t;
#define RX_X1_CL91_CFG_GEN2r_CLR BCMI_TSCF_XGXS_RX_X1_CL91_CFG_GEN2r_CLR
#define RX_X1_CL91_CFG_GEN2r_SET BCMI_TSCF_XGXS_RX_X1_CL91_CFG_GEN2r_SET
#define RX_X1_CL91_CFG_GEN2r_GET BCMI_TSCF_XGXS_RX_X1_CL91_CFG_GEN2r_GET
#define RX_X1_CL91_CFG_GEN2r_CL91_FC_LOCK_CORR_CWf_GET BCMI_TSCF_XGXS_RX_X1_CL91_CFG_GEN2r_CL91_FC_LOCK_CORR_CWf_GET
#define RX_X1_CL91_CFG_GEN2r_CL91_FC_LOCK_CORR_CWf_SET BCMI_TSCF_XGXS_RX_X1_CL91_CFG_GEN2r_CL91_FC_LOCK_CORR_CWf_SET
#define RX_X1_CL91_CFG_GEN2r_CL91_AM_SPACING_1024f_GET BCMI_TSCF_XGXS_RX_X1_CL91_CFG_GEN2r_CL91_AM_SPACING_1024f_GET
#define RX_X1_CL91_CFG_GEN2r_CL91_AM_SPACING_1024f_SET BCMI_TSCF_XGXS_RX_X1_CL91_CFG_GEN2r_CL91_AM_SPACING_1024f_SET
#define RX_X1_CL91_CFG_GEN2r_FEC_DBG_BYP_CORRf_GET BCMI_TSCF_XGXS_RX_X1_CL91_CFG_GEN2r_FEC_DBG_BYP_CORRf_GET
#define RX_X1_CL91_CFG_GEN2r_FEC_DBG_BYP_CORRf_SET BCMI_TSCF_XGXS_RX_X1_CL91_CFG_GEN2r_FEC_DBG_BYP_CORRf_SET
#define RX_X1_CL91_CFG_GEN2r_FEC_BYP_IND_ENf_GET BCMI_TSCF_XGXS_RX_X1_CL91_CFG_GEN2r_FEC_BYP_IND_ENf_GET
#define RX_X1_CL91_CFG_GEN2r_FEC_BYP_IND_ENf_SET BCMI_TSCF_XGXS_RX_X1_CL91_CFG_GEN2r_FEC_BYP_IND_ENf_SET
#define RX_X1_CL91_CFG_GEN2r_FEC_BYP_CORR_ENf_GET BCMI_TSCF_XGXS_RX_X1_CL91_CFG_GEN2r_FEC_BYP_CORR_ENf_GET
#define RX_X1_CL91_CFG_GEN2r_FEC_BYP_CORR_ENf_SET BCMI_TSCF_XGXS_RX_X1_CL91_CFG_GEN2r_FEC_BYP_CORR_ENf_SET
#define RX_X1_CL91_CFG_GEN2r_SET_SYMB_ERR_WINDOW_128f_GET BCMI_TSCF_XGXS_RX_X1_CL91_CFG_GEN2r_SET_SYMB_ERR_WINDOW_128f_GET
#define RX_X1_CL91_CFG_GEN2r_SET_SYMB_ERR_WINDOW_128f_SET BCMI_TSCF_XGXS_RX_X1_CL91_CFG_GEN2r_SET_SYMB_ERR_WINDOW_128f_SET
#define READ_RX_X1_CL91_CFG_GEN2r BCMI_TSCF_XGXS_READ_RX_X1_CL91_CFG_GEN2r
#define WRITE_RX_X1_CL91_CFG_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X1_CL91_CFG_GEN2r
#define MODIFY_RX_X1_CL91_CFG_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X1_CL91_CFG_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X1_CL91_CFG_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X1_DESKEW_WINS_1_GEN2
 * BLOCKS:   RX_X1_CONTROL0
 * REGADDR:  0x9224
 * DESC:     deskew_windows_1 register
 * RESETVAL: 0x54 (84)
 * ACCESS:   R/W
 * FIELDS:
 *     CL82_DSWIN_CL91  CL82 Block based deskew window size for CL91 modedeskew_window = (cl82_dswin_cl91+1)blocksSupports skew of upto 96 blocks
 */
#define BCMI_TSCF_XGXS_RX_X1_DESKEW_WINS_1_GEN2r (0x00109224 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X1_DESKEW_WINS_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X1_DESKEW_WINS_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X1_DESKEW_WINS_1_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x1_deskew_wins_1_gen2[1];
	uint32_t _rx_x1_deskew_wins_1_gen2;
} BCMI_TSCF_XGXS_RX_X1_DESKEW_WINS_1_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X1_DESKEW_WINS_1_GEN2r_CLR(r) (r).rx_x1_deskew_wins_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X1_DESKEW_WINS_1_GEN2r_SET(r,d) (r).rx_x1_deskew_wins_1_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X1_DESKEW_WINS_1_GEN2r_GET(r) (r).rx_x1_deskew_wins_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X1_DESKEW_WINS_1_GEN2r_CL82_DSWIN_CL91f_GET(r) (((r).rx_x1_deskew_wins_1_gen2[0]) & 0x7f)
#define BCMI_TSCF_XGXS_RX_X1_DESKEW_WINS_1_GEN2r_CL82_DSWIN_CL91f_SET(r,f) (r).rx_x1_deskew_wins_1_gen2[0]=(((r).rx_x1_deskew_wins_1_gen2[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f)) | (0x7f << 16)

/*
 * These macros can be used to access RX_X1_DESKEW_WINS_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X1_DESKEW_WINS_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X1_DESKEW_WINS_1_GEN2r,(_r._rx_x1_deskew_wins_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X1_DESKEW_WINS_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X1_DESKEW_WINS_1_GEN2r,(_r._rx_x1_deskew_wins_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X1_DESKEW_WINS_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X1_DESKEW_WINS_1_GEN2r,(_r._rx_x1_deskew_wins_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X1_DESKEW_WINS_1_GEN2r BCMI_TSCF_XGXS_RX_X1_DESKEW_WINS_1_GEN2r
#define RX_X1_DESKEW_WINS_1_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X1_DESKEW_WINS_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X1_DESKEW_WINS_1_GEN2r_t RX_X1_DESKEW_WINS_1_GEN2r_t;
#define RX_X1_DESKEW_WINS_1_GEN2r_CLR BCMI_TSCF_XGXS_RX_X1_DESKEW_WINS_1_GEN2r_CLR
#define RX_X1_DESKEW_WINS_1_GEN2r_SET BCMI_TSCF_XGXS_RX_X1_DESKEW_WINS_1_GEN2r_SET
#define RX_X1_DESKEW_WINS_1_GEN2r_GET BCMI_TSCF_XGXS_RX_X1_DESKEW_WINS_1_GEN2r_GET
#define RX_X1_DESKEW_WINS_1_GEN2r_CL82_DSWIN_CL91f_GET BCMI_TSCF_XGXS_RX_X1_DESKEW_WINS_1_GEN2r_CL82_DSWIN_CL91f_GET
#define RX_X1_DESKEW_WINS_1_GEN2r_CL82_DSWIN_CL91f_SET BCMI_TSCF_XGXS_RX_X1_DESKEW_WINS_1_GEN2r_CL82_DSWIN_CL91f_SET
#define READ_RX_X1_DESKEW_WINS_1_GEN2r BCMI_TSCF_XGXS_READ_RX_X1_DESKEW_WINS_1_GEN2r
#define WRITE_RX_X1_DESKEW_WINS_1_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X1_DESKEW_WINS_1_GEN2r
#define MODIFY_RX_X1_DESKEW_WINS_1_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X1_DESKEW_WINS_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X1_DESKEW_WINS_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X1_RX_LN_SWP_GEN2
 * BLOCKS:   RX_X1_CONTROL0
 * REGADDR:  0x9225
 * DESC:     RX lane swap register
 * RESETVAL: 0xe4 (228)
 * ACCESS:   R/W
 * FIELDS:
 *     LOGICAL0_TO_PHY_SEL This is a LOGICAL to PHYSICAL mapping control.logical0_to_phy_sel indicates for LOGICAL lane 0 which lane to PHYSICAL send the data to
 *     LOGICAL1_TO_PHY_SEL This is a LOGICAL to PHYSICAL mapping control.logical1_to_phy_sel indicates for LOGICAL lane 1 which lane to PHYSICAL send the data to
 *     LOGICAL2_TO_PHY_SEL This is a LOGICAL to PHYSICAL mapping control.logical2_to_phy_sel indicates for LOGICAL lane 2 which lane to PHYSICAL send the data to
 *     LOGICAL3_TO_PHY_SEL This is a LOGICAL to PHYSICAL mapping control.logical3_to_phy_sel indicates for LOGICAL lane 3 which lane to PHYSICAL send the data to
 */
#define BCMI_TSCF_XGXS_RX_X1_RX_LN_SWP_GEN2r (0x00109225 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X1_RX_LN_SWP_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X1_RX_LN_SWP_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X1_RX_LN_SWP_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x1_rx_ln_swp_gen2[1];
	uint32_t _rx_x1_rx_ln_swp_gen2;
} BCMI_TSCF_XGXS_RX_X1_RX_LN_SWP_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X1_RX_LN_SWP_GEN2r_CLR(r) (r).rx_x1_rx_ln_swp_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X1_RX_LN_SWP_GEN2r_SET(r,d) (r).rx_x1_rx_ln_swp_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X1_RX_LN_SWP_GEN2r_GET(r) (r).rx_x1_rx_ln_swp_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X1_RX_LN_SWP_GEN2r_LOGICAL3_TO_PHY_SELf_GET(r) ((((r).rx_x1_rx_ln_swp_gen2[0]) >> 6) & 0x3)
#define BCMI_TSCF_XGXS_RX_X1_RX_LN_SWP_GEN2r_LOGICAL3_TO_PHY_SELf_SET(r,f) (r).rx_x1_rx_ln_swp_gen2[0]=(((r).rx_x1_rx_ln_swp_gen2[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6)) | (3 << (16 + 6))
#define BCMI_TSCF_XGXS_RX_X1_RX_LN_SWP_GEN2r_LOGICAL2_TO_PHY_SELf_GET(r) ((((r).rx_x1_rx_ln_swp_gen2[0]) >> 4) & 0x3)
#define BCMI_TSCF_XGXS_RX_X1_RX_LN_SWP_GEN2r_LOGICAL2_TO_PHY_SELf_SET(r,f) (r).rx_x1_rx_ln_swp_gen2[0]=(((r).rx_x1_rx_ln_swp_gen2[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_XGXS_RX_X1_RX_LN_SWP_GEN2r_LOGICAL1_TO_PHY_SELf_GET(r) ((((r).rx_x1_rx_ln_swp_gen2[0]) >> 2) & 0x3)
#define BCMI_TSCF_XGXS_RX_X1_RX_LN_SWP_GEN2r_LOGICAL1_TO_PHY_SELf_SET(r,f) (r).rx_x1_rx_ln_swp_gen2[0]=(((r).rx_x1_rx_ln_swp_gen2[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2)) | (3 << (16 + 2))
#define BCMI_TSCF_XGXS_RX_X1_RX_LN_SWP_GEN2r_LOGICAL0_TO_PHY_SELf_GET(r) (((r).rx_x1_rx_ln_swp_gen2[0]) & 0x3)
#define BCMI_TSCF_XGXS_RX_X1_RX_LN_SWP_GEN2r_LOGICAL0_TO_PHY_SELf_SET(r,f) (r).rx_x1_rx_ln_swp_gen2[0]=(((r).rx_x1_rx_ln_swp_gen2[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access RX_X1_RX_LN_SWP_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X1_RX_LN_SWP_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X1_RX_LN_SWP_GEN2r,(_r._rx_x1_rx_ln_swp_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X1_RX_LN_SWP_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X1_RX_LN_SWP_GEN2r,(_r._rx_x1_rx_ln_swp_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X1_RX_LN_SWP_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X1_RX_LN_SWP_GEN2r,(_r._rx_x1_rx_ln_swp_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X1_RX_LN_SWP_GEN2r BCMI_TSCF_XGXS_RX_X1_RX_LN_SWP_GEN2r
#define RX_X1_RX_LN_SWP_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X1_RX_LN_SWP_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X1_RX_LN_SWP_GEN2r_t RX_X1_RX_LN_SWP_GEN2r_t;
#define RX_X1_RX_LN_SWP_GEN2r_CLR BCMI_TSCF_XGXS_RX_X1_RX_LN_SWP_GEN2r_CLR
#define RX_X1_RX_LN_SWP_GEN2r_SET BCMI_TSCF_XGXS_RX_X1_RX_LN_SWP_GEN2r_SET
#define RX_X1_RX_LN_SWP_GEN2r_GET BCMI_TSCF_XGXS_RX_X1_RX_LN_SWP_GEN2r_GET
#define RX_X1_RX_LN_SWP_GEN2r_LOGICAL3_TO_PHY_SELf_GET BCMI_TSCF_XGXS_RX_X1_RX_LN_SWP_GEN2r_LOGICAL3_TO_PHY_SELf_GET
#define RX_X1_RX_LN_SWP_GEN2r_LOGICAL3_TO_PHY_SELf_SET BCMI_TSCF_XGXS_RX_X1_RX_LN_SWP_GEN2r_LOGICAL3_TO_PHY_SELf_SET
#define RX_X1_RX_LN_SWP_GEN2r_LOGICAL2_TO_PHY_SELf_GET BCMI_TSCF_XGXS_RX_X1_RX_LN_SWP_GEN2r_LOGICAL2_TO_PHY_SELf_GET
#define RX_X1_RX_LN_SWP_GEN2r_LOGICAL2_TO_PHY_SELf_SET BCMI_TSCF_XGXS_RX_X1_RX_LN_SWP_GEN2r_LOGICAL2_TO_PHY_SELf_SET
#define RX_X1_RX_LN_SWP_GEN2r_LOGICAL1_TO_PHY_SELf_GET BCMI_TSCF_XGXS_RX_X1_RX_LN_SWP_GEN2r_LOGICAL1_TO_PHY_SELf_GET
#define RX_X1_RX_LN_SWP_GEN2r_LOGICAL1_TO_PHY_SELf_SET BCMI_TSCF_XGXS_RX_X1_RX_LN_SWP_GEN2r_LOGICAL1_TO_PHY_SELf_SET
#define RX_X1_RX_LN_SWP_GEN2r_LOGICAL0_TO_PHY_SELf_GET BCMI_TSCF_XGXS_RX_X1_RX_LN_SWP_GEN2r_LOGICAL0_TO_PHY_SELf_GET
#define RX_X1_RX_LN_SWP_GEN2r_LOGICAL0_TO_PHY_SELf_SET BCMI_TSCF_XGXS_RX_X1_RX_LN_SWP_GEN2r_LOGICAL0_TO_PHY_SELf_SET
#define READ_RX_X1_RX_LN_SWP_GEN2r BCMI_TSCF_XGXS_READ_RX_X1_RX_LN_SWP_GEN2r
#define WRITE_RX_X1_RX_LN_SWP_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X1_RX_LN_SWP_GEN2r
#define MODIFY_RX_X1_RX_LN_SWP_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X1_RX_LN_SWP_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X1_RX_LN_SWP_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X1_SRF_MEM_CTL_GEN2
 * BLOCKS:   RX_X1_CONTROL0
 * REGADDR:  0x9226
 * DESC:     SRF memory DFT controls
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     SRF_MEM_TM       TM control for all the SRF memories in the TSCF
 */
#define BCMI_TSCF_XGXS_RX_X1_SRF_MEM_CTL_GEN2r (0x00109226 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X1_SRF_MEM_CTL_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X1_SRF_MEM_CTL_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X1_SRF_MEM_CTL_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x1_srf_mem_ctl_gen2[1];
	uint32_t _rx_x1_srf_mem_ctl_gen2;
} BCMI_TSCF_XGXS_RX_X1_SRF_MEM_CTL_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X1_SRF_MEM_CTL_GEN2r_CLR(r) (r).rx_x1_srf_mem_ctl_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X1_SRF_MEM_CTL_GEN2r_SET(r,d) (r).rx_x1_srf_mem_ctl_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X1_SRF_MEM_CTL_GEN2r_GET(r) (r).rx_x1_srf_mem_ctl_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X1_SRF_MEM_CTL_GEN2r_SRF_MEM_TMf_GET(r) (((r).rx_x1_srf_mem_ctl_gen2[0]) & 0xfff)
#define BCMI_TSCF_XGXS_RX_X1_SRF_MEM_CTL_GEN2r_SRF_MEM_TMf_SET(r,f) (r).rx_x1_srf_mem_ctl_gen2[0]=(((r).rx_x1_srf_mem_ctl_gen2[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff)) | (0xfff << 16)

/*
 * These macros can be used to access RX_X1_SRF_MEM_CTL_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X1_SRF_MEM_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X1_SRF_MEM_CTL_GEN2r,(_r._rx_x1_srf_mem_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X1_SRF_MEM_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X1_SRF_MEM_CTL_GEN2r,(_r._rx_x1_srf_mem_ctl_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X1_SRF_MEM_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X1_SRF_MEM_CTL_GEN2r,(_r._rx_x1_srf_mem_ctl_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X1_SRF_MEM_CTL_GEN2r BCMI_TSCF_XGXS_RX_X1_SRF_MEM_CTL_GEN2r
#define RX_X1_SRF_MEM_CTL_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X1_SRF_MEM_CTL_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X1_SRF_MEM_CTL_GEN2r_t RX_X1_SRF_MEM_CTL_GEN2r_t;
#define RX_X1_SRF_MEM_CTL_GEN2r_CLR BCMI_TSCF_XGXS_RX_X1_SRF_MEM_CTL_GEN2r_CLR
#define RX_X1_SRF_MEM_CTL_GEN2r_SET BCMI_TSCF_XGXS_RX_X1_SRF_MEM_CTL_GEN2r_SET
#define RX_X1_SRF_MEM_CTL_GEN2r_GET BCMI_TSCF_XGXS_RX_X1_SRF_MEM_CTL_GEN2r_GET
#define RX_X1_SRF_MEM_CTL_GEN2r_SRF_MEM_TMf_GET BCMI_TSCF_XGXS_RX_X1_SRF_MEM_CTL_GEN2r_SRF_MEM_TMf_GET
#define RX_X1_SRF_MEM_CTL_GEN2r_SRF_MEM_TMf_SET BCMI_TSCF_XGXS_RX_X1_SRF_MEM_CTL_GEN2r_SRF_MEM_TMf_SET
#define READ_RX_X1_SRF_MEM_CTL_GEN2r BCMI_TSCF_XGXS_READ_RX_X1_SRF_MEM_CTL_GEN2r
#define WRITE_RX_X1_SRF_MEM_CTL_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X1_SRF_MEM_CTL_GEN2r
#define MODIFY_RX_X1_SRF_MEM_CTL_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X1_SRF_MEM_CTL_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X1_SRF_MEM_CTL_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X1_RF_MEM_CTL_GEN2
 * BLOCKS:   RX_X1_CONTROL0
 * REGADDR:  0x9227
 * DESC:     RF memory DFT controls
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RF_MEM_TM        TM control for all the RF memories in the TSCF
 */
#define BCMI_TSCF_XGXS_RX_X1_RF_MEM_CTL_GEN2r (0x00109227 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X1_RF_MEM_CTL_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X1_RF_MEM_CTL_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X1_RF_MEM_CTL_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x1_rf_mem_ctl_gen2[1];
	uint32_t _rx_x1_rf_mem_ctl_gen2;
} BCMI_TSCF_XGXS_RX_X1_RF_MEM_CTL_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X1_RF_MEM_CTL_GEN2r_CLR(r) (r).rx_x1_rf_mem_ctl_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X1_RF_MEM_CTL_GEN2r_SET(r,d) (r).rx_x1_rf_mem_ctl_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X1_RF_MEM_CTL_GEN2r_GET(r) (r).rx_x1_rf_mem_ctl_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X1_RF_MEM_CTL_GEN2r_RF_MEM_TMf_GET(r) (((r).rx_x1_rf_mem_ctl_gen2[0]) & 0x3ff)
#define BCMI_TSCF_XGXS_RX_X1_RF_MEM_CTL_GEN2r_RF_MEM_TMf_SET(r,f) (r).rx_x1_rf_mem_ctl_gen2[0]=(((r).rx_x1_rf_mem_ctl_gen2[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff)) | (0x3ff << 16)

/*
 * These macros can be used to access RX_X1_RF_MEM_CTL_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X1_RF_MEM_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X1_RF_MEM_CTL_GEN2r,(_r._rx_x1_rf_mem_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X1_RF_MEM_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X1_RF_MEM_CTL_GEN2r,(_r._rx_x1_rf_mem_ctl_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X1_RF_MEM_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X1_RF_MEM_CTL_GEN2r,(_r._rx_x1_rf_mem_ctl_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X1_RF_MEM_CTL_GEN2r BCMI_TSCF_XGXS_RX_X1_RF_MEM_CTL_GEN2r
#define RX_X1_RF_MEM_CTL_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X1_RF_MEM_CTL_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X1_RF_MEM_CTL_GEN2r_t RX_X1_RF_MEM_CTL_GEN2r_t;
#define RX_X1_RF_MEM_CTL_GEN2r_CLR BCMI_TSCF_XGXS_RX_X1_RF_MEM_CTL_GEN2r_CLR
#define RX_X1_RF_MEM_CTL_GEN2r_SET BCMI_TSCF_XGXS_RX_X1_RF_MEM_CTL_GEN2r_SET
#define RX_X1_RF_MEM_CTL_GEN2r_GET BCMI_TSCF_XGXS_RX_X1_RF_MEM_CTL_GEN2r_GET
#define RX_X1_RF_MEM_CTL_GEN2r_RF_MEM_TMf_GET BCMI_TSCF_XGXS_RX_X1_RF_MEM_CTL_GEN2r_RF_MEM_TMf_GET
#define RX_X1_RF_MEM_CTL_GEN2r_RF_MEM_TMf_SET BCMI_TSCF_XGXS_RX_X1_RF_MEM_CTL_GEN2r_RF_MEM_TMf_SET
#define READ_RX_X1_RF_MEM_CTL_GEN2r BCMI_TSCF_XGXS_READ_RX_X1_RF_MEM_CTL_GEN2r
#define WRITE_RX_X1_RF_MEM_CTL_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X1_RF_MEM_CTL_GEN2r
#define MODIFY_RX_X1_RF_MEM_CTL_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X1_RF_MEM_CTL_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X1_RF_MEM_CTL_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X1_ECC_STS_FEC_MEM_0_GEN2
 * BLOCKS:   RX_X1_ECC
 * REGADDR:  0x9230
 * DESC:     ECC status register for FEC physical lane 0 memory
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     ERR_EVENT_ADDRESS_FEC_0 ECC error location, valid only if 1-bit or 2-bit error bit is set
 *     ONE_BIT_ERR_EVENT_FEC_0 1-bit ECC error detected
 *     TWO_BIT_ERR_EVENT_FEC_0 2-bit ECC error detected
 */
#define BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_0_GEN2r (0x00109230 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X1_ECC_STS_FEC_MEM_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_0_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x1_ecc_sts_fec_mem_0_gen2[1];
	uint32_t _rx_x1_ecc_sts_fec_mem_0_gen2;
} BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_0_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_0_GEN2r_CLR(r) (r).rx_x1_ecc_sts_fec_mem_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_0_GEN2r_SET(r,d) (r).rx_x1_ecc_sts_fec_mem_0_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_0_GEN2r_GET(r) (r).rx_x1_ecc_sts_fec_mem_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_0_GEN2r_TWO_BIT_ERR_EVENT_FEC_0f_GET(r) ((((r).rx_x1_ecc_sts_fec_mem_0_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_0_GEN2r_TWO_BIT_ERR_EVENT_FEC_0f_SET(r,f) (r).rx_x1_ecc_sts_fec_mem_0_gen2[0]=(((r).rx_x1_ecc_sts_fec_mem_0_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_0_GEN2r_ONE_BIT_ERR_EVENT_FEC_0f_GET(r) ((((r).rx_x1_ecc_sts_fec_mem_0_gen2[0]) >> 14) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_0_GEN2r_ONE_BIT_ERR_EVENT_FEC_0f_SET(r,f) (r).rx_x1_ecc_sts_fec_mem_0_gen2[0]=(((r).rx_x1_ecc_sts_fec_mem_0_gen2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_0_GEN2r_ERR_EVENT_ADDRESS_FEC_0f_GET(r) (((r).rx_x1_ecc_sts_fec_mem_0_gen2[0]) & 0x3fff)
#define BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_0_GEN2r_ERR_EVENT_ADDRESS_FEC_0f_SET(r,f) (r).rx_x1_ecc_sts_fec_mem_0_gen2[0]=(((r).rx_x1_ecc_sts_fec_mem_0_gen2[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff)) | (0x3fff << 16)

/*
 * These macros can be used to access RX_X1_ECC_STS_FEC_MEM_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X1_ECC_STS_FEC_MEM_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_0_GEN2r,(_r._rx_x1_ecc_sts_fec_mem_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X1_ECC_STS_FEC_MEM_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_0_GEN2r,(_r._rx_x1_ecc_sts_fec_mem_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X1_ECC_STS_FEC_MEM_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_0_GEN2r,(_r._rx_x1_ecc_sts_fec_mem_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X1_ECC_STS_FEC_MEM_0_GEN2r BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_0_GEN2r
#define RX_X1_ECC_STS_FEC_MEM_0_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_0_GEN2r_t RX_X1_ECC_STS_FEC_MEM_0_GEN2r_t;
#define RX_X1_ECC_STS_FEC_MEM_0_GEN2r_CLR BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_0_GEN2r_CLR
#define RX_X1_ECC_STS_FEC_MEM_0_GEN2r_SET BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_0_GEN2r_SET
#define RX_X1_ECC_STS_FEC_MEM_0_GEN2r_GET BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_0_GEN2r_GET
#define RX_X1_ECC_STS_FEC_MEM_0_GEN2r_TWO_BIT_ERR_EVENT_FEC_0f_GET BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_0_GEN2r_TWO_BIT_ERR_EVENT_FEC_0f_GET
#define RX_X1_ECC_STS_FEC_MEM_0_GEN2r_TWO_BIT_ERR_EVENT_FEC_0f_SET BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_0_GEN2r_TWO_BIT_ERR_EVENT_FEC_0f_SET
#define RX_X1_ECC_STS_FEC_MEM_0_GEN2r_ONE_BIT_ERR_EVENT_FEC_0f_GET BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_0_GEN2r_ONE_BIT_ERR_EVENT_FEC_0f_GET
#define RX_X1_ECC_STS_FEC_MEM_0_GEN2r_ONE_BIT_ERR_EVENT_FEC_0f_SET BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_0_GEN2r_ONE_BIT_ERR_EVENT_FEC_0f_SET
#define RX_X1_ECC_STS_FEC_MEM_0_GEN2r_ERR_EVENT_ADDRESS_FEC_0f_GET BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_0_GEN2r_ERR_EVENT_ADDRESS_FEC_0f_GET
#define RX_X1_ECC_STS_FEC_MEM_0_GEN2r_ERR_EVENT_ADDRESS_FEC_0f_SET BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_0_GEN2r_ERR_EVENT_ADDRESS_FEC_0f_SET
#define READ_RX_X1_ECC_STS_FEC_MEM_0_GEN2r BCMI_TSCF_XGXS_READ_RX_X1_ECC_STS_FEC_MEM_0_GEN2r
#define WRITE_RX_X1_ECC_STS_FEC_MEM_0_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X1_ECC_STS_FEC_MEM_0_GEN2r
#define MODIFY_RX_X1_ECC_STS_FEC_MEM_0_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X1_ECC_STS_FEC_MEM_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X1_ECC_STS_FEC_MEM_1_GEN2
 * BLOCKS:   RX_X1_ECC
 * REGADDR:  0x9231
 * DESC:     ECC status register for FEC physical lane 1 memory
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     ERR_EVENT_ADDRESS_FEC_1 ECC error location, valid only if 1-bit or 2-bit error bit is set
 *     ONE_BIT_ERR_EVENT_FEC_1 1-bit ECC error detected
 *     TWO_BIT_ERR_EVENT_FEC_1 2-bit ECC error detected
 */
#define BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_1_GEN2r (0x00109231 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X1_ECC_STS_FEC_MEM_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_1_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x1_ecc_sts_fec_mem_1_gen2[1];
	uint32_t _rx_x1_ecc_sts_fec_mem_1_gen2;
} BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_1_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_1_GEN2r_CLR(r) (r).rx_x1_ecc_sts_fec_mem_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_1_GEN2r_SET(r,d) (r).rx_x1_ecc_sts_fec_mem_1_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_1_GEN2r_GET(r) (r).rx_x1_ecc_sts_fec_mem_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_1_GEN2r_TWO_BIT_ERR_EVENT_FEC_1f_GET(r) ((((r).rx_x1_ecc_sts_fec_mem_1_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_1_GEN2r_TWO_BIT_ERR_EVENT_FEC_1f_SET(r,f) (r).rx_x1_ecc_sts_fec_mem_1_gen2[0]=(((r).rx_x1_ecc_sts_fec_mem_1_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_1_GEN2r_ONE_BIT_ERR_EVENT_FEC_1f_GET(r) ((((r).rx_x1_ecc_sts_fec_mem_1_gen2[0]) >> 14) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_1_GEN2r_ONE_BIT_ERR_EVENT_FEC_1f_SET(r,f) (r).rx_x1_ecc_sts_fec_mem_1_gen2[0]=(((r).rx_x1_ecc_sts_fec_mem_1_gen2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_1_GEN2r_ERR_EVENT_ADDRESS_FEC_1f_GET(r) (((r).rx_x1_ecc_sts_fec_mem_1_gen2[0]) & 0x3fff)
#define BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_1_GEN2r_ERR_EVENT_ADDRESS_FEC_1f_SET(r,f) (r).rx_x1_ecc_sts_fec_mem_1_gen2[0]=(((r).rx_x1_ecc_sts_fec_mem_1_gen2[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff)) | (0x3fff << 16)

/*
 * These macros can be used to access RX_X1_ECC_STS_FEC_MEM_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X1_ECC_STS_FEC_MEM_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_1_GEN2r,(_r._rx_x1_ecc_sts_fec_mem_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X1_ECC_STS_FEC_MEM_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_1_GEN2r,(_r._rx_x1_ecc_sts_fec_mem_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X1_ECC_STS_FEC_MEM_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_1_GEN2r,(_r._rx_x1_ecc_sts_fec_mem_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X1_ECC_STS_FEC_MEM_1_GEN2r BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_1_GEN2r
#define RX_X1_ECC_STS_FEC_MEM_1_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_1_GEN2r_t RX_X1_ECC_STS_FEC_MEM_1_GEN2r_t;
#define RX_X1_ECC_STS_FEC_MEM_1_GEN2r_CLR BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_1_GEN2r_CLR
#define RX_X1_ECC_STS_FEC_MEM_1_GEN2r_SET BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_1_GEN2r_SET
#define RX_X1_ECC_STS_FEC_MEM_1_GEN2r_GET BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_1_GEN2r_GET
#define RX_X1_ECC_STS_FEC_MEM_1_GEN2r_TWO_BIT_ERR_EVENT_FEC_1f_GET BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_1_GEN2r_TWO_BIT_ERR_EVENT_FEC_1f_GET
#define RX_X1_ECC_STS_FEC_MEM_1_GEN2r_TWO_BIT_ERR_EVENT_FEC_1f_SET BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_1_GEN2r_TWO_BIT_ERR_EVENT_FEC_1f_SET
#define RX_X1_ECC_STS_FEC_MEM_1_GEN2r_ONE_BIT_ERR_EVENT_FEC_1f_GET BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_1_GEN2r_ONE_BIT_ERR_EVENT_FEC_1f_GET
#define RX_X1_ECC_STS_FEC_MEM_1_GEN2r_ONE_BIT_ERR_EVENT_FEC_1f_SET BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_1_GEN2r_ONE_BIT_ERR_EVENT_FEC_1f_SET
#define RX_X1_ECC_STS_FEC_MEM_1_GEN2r_ERR_EVENT_ADDRESS_FEC_1f_GET BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_1_GEN2r_ERR_EVENT_ADDRESS_FEC_1f_GET
#define RX_X1_ECC_STS_FEC_MEM_1_GEN2r_ERR_EVENT_ADDRESS_FEC_1f_SET BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_1_GEN2r_ERR_EVENT_ADDRESS_FEC_1f_SET
#define READ_RX_X1_ECC_STS_FEC_MEM_1_GEN2r BCMI_TSCF_XGXS_READ_RX_X1_ECC_STS_FEC_MEM_1_GEN2r
#define WRITE_RX_X1_ECC_STS_FEC_MEM_1_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X1_ECC_STS_FEC_MEM_1_GEN2r
#define MODIFY_RX_X1_ECC_STS_FEC_MEM_1_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X1_ECC_STS_FEC_MEM_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X1_ECC_STS_FEC_MEM_2_GEN2
 * BLOCKS:   RX_X1_ECC
 * REGADDR:  0x9232
 * DESC:     ECC status register for FEC physical lane 2 memory
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     ERR_EVENT_ADDRESS_FEC_2 ECC error location, valid only if 1-bit or 2-bit error bit is set
 *     ONE_BIT_ERR_EVENT_FEC_2 1-bit ECC error detected
 *     TWO_BIT_ERR_EVENT_FEC_2 2-bit ECC error detected
 */
#define BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_2_GEN2r (0x00109232 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X1_ECC_STS_FEC_MEM_2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_2_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x1_ecc_sts_fec_mem_2_gen2[1];
	uint32_t _rx_x1_ecc_sts_fec_mem_2_gen2;
} BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_2_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_2_GEN2r_CLR(r) (r).rx_x1_ecc_sts_fec_mem_2_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_2_GEN2r_SET(r,d) (r).rx_x1_ecc_sts_fec_mem_2_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_2_GEN2r_GET(r) (r).rx_x1_ecc_sts_fec_mem_2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_2_GEN2r_TWO_BIT_ERR_EVENT_FEC_2f_GET(r) ((((r).rx_x1_ecc_sts_fec_mem_2_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_2_GEN2r_TWO_BIT_ERR_EVENT_FEC_2f_SET(r,f) (r).rx_x1_ecc_sts_fec_mem_2_gen2[0]=(((r).rx_x1_ecc_sts_fec_mem_2_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_2_GEN2r_ONE_BIT_ERR_EVENT_FEC_2f_GET(r) ((((r).rx_x1_ecc_sts_fec_mem_2_gen2[0]) >> 14) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_2_GEN2r_ONE_BIT_ERR_EVENT_FEC_2f_SET(r,f) (r).rx_x1_ecc_sts_fec_mem_2_gen2[0]=(((r).rx_x1_ecc_sts_fec_mem_2_gen2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_2_GEN2r_ERR_EVENT_ADDRESS_FEC_2f_GET(r) (((r).rx_x1_ecc_sts_fec_mem_2_gen2[0]) & 0x3fff)
#define BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_2_GEN2r_ERR_EVENT_ADDRESS_FEC_2f_SET(r,f) (r).rx_x1_ecc_sts_fec_mem_2_gen2[0]=(((r).rx_x1_ecc_sts_fec_mem_2_gen2[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff)) | (0x3fff << 16)

/*
 * These macros can be used to access RX_X1_ECC_STS_FEC_MEM_2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X1_ECC_STS_FEC_MEM_2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_2_GEN2r,(_r._rx_x1_ecc_sts_fec_mem_2_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X1_ECC_STS_FEC_MEM_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_2_GEN2r,(_r._rx_x1_ecc_sts_fec_mem_2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X1_ECC_STS_FEC_MEM_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_2_GEN2r,(_r._rx_x1_ecc_sts_fec_mem_2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X1_ECC_STS_FEC_MEM_2_GEN2r BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_2_GEN2r
#define RX_X1_ECC_STS_FEC_MEM_2_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_2_GEN2r_t RX_X1_ECC_STS_FEC_MEM_2_GEN2r_t;
#define RX_X1_ECC_STS_FEC_MEM_2_GEN2r_CLR BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_2_GEN2r_CLR
#define RX_X1_ECC_STS_FEC_MEM_2_GEN2r_SET BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_2_GEN2r_SET
#define RX_X1_ECC_STS_FEC_MEM_2_GEN2r_GET BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_2_GEN2r_GET
#define RX_X1_ECC_STS_FEC_MEM_2_GEN2r_TWO_BIT_ERR_EVENT_FEC_2f_GET BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_2_GEN2r_TWO_BIT_ERR_EVENT_FEC_2f_GET
#define RX_X1_ECC_STS_FEC_MEM_2_GEN2r_TWO_BIT_ERR_EVENT_FEC_2f_SET BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_2_GEN2r_TWO_BIT_ERR_EVENT_FEC_2f_SET
#define RX_X1_ECC_STS_FEC_MEM_2_GEN2r_ONE_BIT_ERR_EVENT_FEC_2f_GET BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_2_GEN2r_ONE_BIT_ERR_EVENT_FEC_2f_GET
#define RX_X1_ECC_STS_FEC_MEM_2_GEN2r_ONE_BIT_ERR_EVENT_FEC_2f_SET BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_2_GEN2r_ONE_BIT_ERR_EVENT_FEC_2f_SET
#define RX_X1_ECC_STS_FEC_MEM_2_GEN2r_ERR_EVENT_ADDRESS_FEC_2f_GET BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_2_GEN2r_ERR_EVENT_ADDRESS_FEC_2f_GET
#define RX_X1_ECC_STS_FEC_MEM_2_GEN2r_ERR_EVENT_ADDRESS_FEC_2f_SET BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_2_GEN2r_ERR_EVENT_ADDRESS_FEC_2f_SET
#define READ_RX_X1_ECC_STS_FEC_MEM_2_GEN2r BCMI_TSCF_XGXS_READ_RX_X1_ECC_STS_FEC_MEM_2_GEN2r
#define WRITE_RX_X1_ECC_STS_FEC_MEM_2_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X1_ECC_STS_FEC_MEM_2_GEN2r
#define MODIFY_RX_X1_ECC_STS_FEC_MEM_2_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X1_ECC_STS_FEC_MEM_2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X1_ECC_STS_FEC_MEM_3_GEN2
 * BLOCKS:   RX_X1_ECC
 * REGADDR:  0x9233
 * DESC:     ECC status register for FEC physical lane 3 memory
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     ERR_EVENT_ADDRESS_FEC_3 ECC error location, valid only if 1-bit or 2-bit error bit is set
 *     ONE_BIT_ERR_EVENT_FEC_3 1-bit ECC error detected
 *     TWO_BIT_ERR_EVENT_FEC_3 2-bit ECC error detected
 */
#define BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_3_GEN2r (0x00109233 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_3_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X1_ECC_STS_FEC_MEM_3_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_3_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x1_ecc_sts_fec_mem_3_gen2[1];
	uint32_t _rx_x1_ecc_sts_fec_mem_3_gen2;
} BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_3_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_3_GEN2r_CLR(r) (r).rx_x1_ecc_sts_fec_mem_3_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_3_GEN2r_SET(r,d) (r).rx_x1_ecc_sts_fec_mem_3_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_3_GEN2r_GET(r) (r).rx_x1_ecc_sts_fec_mem_3_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_3_GEN2r_TWO_BIT_ERR_EVENT_FEC_3f_GET(r) ((((r).rx_x1_ecc_sts_fec_mem_3_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_3_GEN2r_TWO_BIT_ERR_EVENT_FEC_3f_SET(r,f) (r).rx_x1_ecc_sts_fec_mem_3_gen2[0]=(((r).rx_x1_ecc_sts_fec_mem_3_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_3_GEN2r_ONE_BIT_ERR_EVENT_FEC_3f_GET(r) ((((r).rx_x1_ecc_sts_fec_mem_3_gen2[0]) >> 14) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_3_GEN2r_ONE_BIT_ERR_EVENT_FEC_3f_SET(r,f) (r).rx_x1_ecc_sts_fec_mem_3_gen2[0]=(((r).rx_x1_ecc_sts_fec_mem_3_gen2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_3_GEN2r_ERR_EVENT_ADDRESS_FEC_3f_GET(r) (((r).rx_x1_ecc_sts_fec_mem_3_gen2[0]) & 0x3fff)
#define BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_3_GEN2r_ERR_EVENT_ADDRESS_FEC_3f_SET(r,f) (r).rx_x1_ecc_sts_fec_mem_3_gen2[0]=(((r).rx_x1_ecc_sts_fec_mem_3_gen2[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff)) | (0x3fff << 16)

/*
 * These macros can be used to access RX_X1_ECC_STS_FEC_MEM_3_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X1_ECC_STS_FEC_MEM_3_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_3_GEN2r,(_r._rx_x1_ecc_sts_fec_mem_3_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X1_ECC_STS_FEC_MEM_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_3_GEN2r,(_r._rx_x1_ecc_sts_fec_mem_3_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X1_ECC_STS_FEC_MEM_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_3_GEN2r,(_r._rx_x1_ecc_sts_fec_mem_3_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X1_ECC_STS_FEC_MEM_3_GEN2r BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_3_GEN2r
#define RX_X1_ECC_STS_FEC_MEM_3_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_3_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_3_GEN2r_t RX_X1_ECC_STS_FEC_MEM_3_GEN2r_t;
#define RX_X1_ECC_STS_FEC_MEM_3_GEN2r_CLR BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_3_GEN2r_CLR
#define RX_X1_ECC_STS_FEC_MEM_3_GEN2r_SET BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_3_GEN2r_SET
#define RX_X1_ECC_STS_FEC_MEM_3_GEN2r_GET BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_3_GEN2r_GET
#define RX_X1_ECC_STS_FEC_MEM_3_GEN2r_TWO_BIT_ERR_EVENT_FEC_3f_GET BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_3_GEN2r_TWO_BIT_ERR_EVENT_FEC_3f_GET
#define RX_X1_ECC_STS_FEC_MEM_3_GEN2r_TWO_BIT_ERR_EVENT_FEC_3f_SET BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_3_GEN2r_TWO_BIT_ERR_EVENT_FEC_3f_SET
#define RX_X1_ECC_STS_FEC_MEM_3_GEN2r_ONE_BIT_ERR_EVENT_FEC_3f_GET BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_3_GEN2r_ONE_BIT_ERR_EVENT_FEC_3f_GET
#define RX_X1_ECC_STS_FEC_MEM_3_GEN2r_ONE_BIT_ERR_EVENT_FEC_3f_SET BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_3_GEN2r_ONE_BIT_ERR_EVENT_FEC_3f_SET
#define RX_X1_ECC_STS_FEC_MEM_3_GEN2r_ERR_EVENT_ADDRESS_FEC_3f_GET BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_3_GEN2r_ERR_EVENT_ADDRESS_FEC_3f_GET
#define RX_X1_ECC_STS_FEC_MEM_3_GEN2r_ERR_EVENT_ADDRESS_FEC_3f_SET BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_3_GEN2r_ERR_EVENT_ADDRESS_FEC_3f_SET
#define READ_RX_X1_ECC_STS_FEC_MEM_3_GEN2r BCMI_TSCF_XGXS_READ_RX_X1_ECC_STS_FEC_MEM_3_GEN2r
#define WRITE_RX_X1_ECC_STS_FEC_MEM_3_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X1_ECC_STS_FEC_MEM_3_GEN2r
#define MODIFY_RX_X1_ECC_STS_FEC_MEM_3_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X1_ECC_STS_FEC_MEM_3_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X1_ECC_STS_FEC_MEM_3_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X1_ECC_INTR_STS_1BIT_GEN2
 * BLOCKS:   RX_X1_ECC
 * REGADDR:  0x9238
 * DESC:     ECC 1-bit interrupt status register (Physical lane based)
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     FEC_MEM_0_1BIT_INT_STATUS Single bit, correctable error detected
 *     FEC_MEM_1_1BIT_INT_STATUS Single bit, correctable error detected
 *     FEC_MEM_2_1BIT_INT_STATUS Single bit, correctable error detected
 *     FEC_MEM_3_1BIT_INT_STATUS Single bit, correctable error detected
 *     CL91_FEC_RAM1_LO_1BIT_INT_STATUS Single bit, correctable error detected
 *     CL91_FEC_RAM1_HI_1BIT_INT_STATUS Single bit, correctable error detected
 *     CL91_FEC_RAM2_LO_1BIT_INT_STATUS Single bit, correctable error detected
 *     CL91_FEC_RAM2_HI_1BIT_INT_STATUS Single bit, correctable error detected
 */
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_1BIT_GEN2r (0x00109238 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_1BIT_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X1_ECC_INTR_STS_1BIT_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_1BIT_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x1_ecc_intr_sts_1bit_gen2[1];
	uint32_t _rx_x1_ecc_intr_sts_1bit_gen2;
} BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_1BIT_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_1BIT_GEN2r_CLR(r) (r).rx_x1_ecc_intr_sts_1bit_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_1BIT_GEN2r_SET(r,d) (r).rx_x1_ecc_intr_sts_1bit_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_1BIT_GEN2r_GET(r) (r).rx_x1_ecc_intr_sts_1bit_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_1BIT_GEN2r_CL91_FEC_RAM2_HI_1BIT_INT_STATUSf_GET(r) ((((r).rx_x1_ecc_intr_sts_1bit_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_1BIT_GEN2r_CL91_FEC_RAM2_HI_1BIT_INT_STATUSf_SET(r,f) (r).rx_x1_ecc_intr_sts_1bit_gen2[0]=(((r).rx_x1_ecc_intr_sts_1bit_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_1BIT_GEN2r_CL91_FEC_RAM2_LO_1BIT_INT_STATUSf_GET(r) ((((r).rx_x1_ecc_intr_sts_1bit_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_1BIT_GEN2r_CL91_FEC_RAM2_LO_1BIT_INT_STATUSf_SET(r,f) (r).rx_x1_ecc_intr_sts_1bit_gen2[0]=(((r).rx_x1_ecc_intr_sts_1bit_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_1BIT_GEN2r_CL91_FEC_RAM1_HI_1BIT_INT_STATUSf_GET(r) ((((r).rx_x1_ecc_intr_sts_1bit_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_1BIT_GEN2r_CL91_FEC_RAM1_HI_1BIT_INT_STATUSf_SET(r,f) (r).rx_x1_ecc_intr_sts_1bit_gen2[0]=(((r).rx_x1_ecc_intr_sts_1bit_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_1BIT_GEN2r_CL91_FEC_RAM1_LO_1BIT_INT_STATUSf_GET(r) ((((r).rx_x1_ecc_intr_sts_1bit_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_1BIT_GEN2r_CL91_FEC_RAM1_LO_1BIT_INT_STATUSf_SET(r,f) (r).rx_x1_ecc_intr_sts_1bit_gen2[0]=(((r).rx_x1_ecc_intr_sts_1bit_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_1BIT_GEN2r_FEC_MEM_3_1BIT_INT_STATUSf_GET(r) ((((r).rx_x1_ecc_intr_sts_1bit_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_1BIT_GEN2r_FEC_MEM_3_1BIT_INT_STATUSf_SET(r,f) (r).rx_x1_ecc_intr_sts_1bit_gen2[0]=(((r).rx_x1_ecc_intr_sts_1bit_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_1BIT_GEN2r_FEC_MEM_2_1BIT_INT_STATUSf_GET(r) ((((r).rx_x1_ecc_intr_sts_1bit_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_1BIT_GEN2r_FEC_MEM_2_1BIT_INT_STATUSf_SET(r,f) (r).rx_x1_ecc_intr_sts_1bit_gen2[0]=(((r).rx_x1_ecc_intr_sts_1bit_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_1BIT_GEN2r_FEC_MEM_1_1BIT_INT_STATUSf_GET(r) ((((r).rx_x1_ecc_intr_sts_1bit_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_1BIT_GEN2r_FEC_MEM_1_1BIT_INT_STATUSf_SET(r,f) (r).rx_x1_ecc_intr_sts_1bit_gen2[0]=(((r).rx_x1_ecc_intr_sts_1bit_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_1BIT_GEN2r_FEC_MEM_0_1BIT_INT_STATUSf_GET(r) (((r).rx_x1_ecc_intr_sts_1bit_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_1BIT_GEN2r_FEC_MEM_0_1BIT_INT_STATUSf_SET(r,f) (r).rx_x1_ecc_intr_sts_1bit_gen2[0]=(((r).rx_x1_ecc_intr_sts_1bit_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_X1_ECC_INTR_STS_1BIT_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X1_ECC_INTR_STS_1BIT_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_1BIT_GEN2r,(_r._rx_x1_ecc_intr_sts_1bit_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X1_ECC_INTR_STS_1BIT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_1BIT_GEN2r,(_r._rx_x1_ecc_intr_sts_1bit_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X1_ECC_INTR_STS_1BIT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_1BIT_GEN2r,(_r._rx_x1_ecc_intr_sts_1bit_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X1_ECC_INTR_STS_1BIT_GEN2r BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_1BIT_GEN2r
#define RX_X1_ECC_INTR_STS_1BIT_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_1BIT_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_1BIT_GEN2r_t RX_X1_ECC_INTR_STS_1BIT_GEN2r_t;
#define RX_X1_ECC_INTR_STS_1BIT_GEN2r_CLR BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_1BIT_GEN2r_CLR
#define RX_X1_ECC_INTR_STS_1BIT_GEN2r_SET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_1BIT_GEN2r_SET
#define RX_X1_ECC_INTR_STS_1BIT_GEN2r_GET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_1BIT_GEN2r_GET
#define RX_X1_ECC_INTR_STS_1BIT_GEN2r_CL91_FEC_RAM2_HI_1BIT_INT_STATUSf_GET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_1BIT_GEN2r_CL91_FEC_RAM2_HI_1BIT_INT_STATUSf_GET
#define RX_X1_ECC_INTR_STS_1BIT_GEN2r_CL91_FEC_RAM2_HI_1BIT_INT_STATUSf_SET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_1BIT_GEN2r_CL91_FEC_RAM2_HI_1BIT_INT_STATUSf_SET
#define RX_X1_ECC_INTR_STS_1BIT_GEN2r_CL91_FEC_RAM2_LO_1BIT_INT_STATUSf_GET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_1BIT_GEN2r_CL91_FEC_RAM2_LO_1BIT_INT_STATUSf_GET
#define RX_X1_ECC_INTR_STS_1BIT_GEN2r_CL91_FEC_RAM2_LO_1BIT_INT_STATUSf_SET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_1BIT_GEN2r_CL91_FEC_RAM2_LO_1BIT_INT_STATUSf_SET
#define RX_X1_ECC_INTR_STS_1BIT_GEN2r_CL91_FEC_RAM1_HI_1BIT_INT_STATUSf_GET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_1BIT_GEN2r_CL91_FEC_RAM1_HI_1BIT_INT_STATUSf_GET
#define RX_X1_ECC_INTR_STS_1BIT_GEN2r_CL91_FEC_RAM1_HI_1BIT_INT_STATUSf_SET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_1BIT_GEN2r_CL91_FEC_RAM1_HI_1BIT_INT_STATUSf_SET
#define RX_X1_ECC_INTR_STS_1BIT_GEN2r_CL91_FEC_RAM1_LO_1BIT_INT_STATUSf_GET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_1BIT_GEN2r_CL91_FEC_RAM1_LO_1BIT_INT_STATUSf_GET
#define RX_X1_ECC_INTR_STS_1BIT_GEN2r_CL91_FEC_RAM1_LO_1BIT_INT_STATUSf_SET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_1BIT_GEN2r_CL91_FEC_RAM1_LO_1BIT_INT_STATUSf_SET
#define RX_X1_ECC_INTR_STS_1BIT_GEN2r_FEC_MEM_3_1BIT_INT_STATUSf_GET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_1BIT_GEN2r_FEC_MEM_3_1BIT_INT_STATUSf_GET
#define RX_X1_ECC_INTR_STS_1BIT_GEN2r_FEC_MEM_3_1BIT_INT_STATUSf_SET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_1BIT_GEN2r_FEC_MEM_3_1BIT_INT_STATUSf_SET
#define RX_X1_ECC_INTR_STS_1BIT_GEN2r_FEC_MEM_2_1BIT_INT_STATUSf_GET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_1BIT_GEN2r_FEC_MEM_2_1BIT_INT_STATUSf_GET
#define RX_X1_ECC_INTR_STS_1BIT_GEN2r_FEC_MEM_2_1BIT_INT_STATUSf_SET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_1BIT_GEN2r_FEC_MEM_2_1BIT_INT_STATUSf_SET
#define RX_X1_ECC_INTR_STS_1BIT_GEN2r_FEC_MEM_1_1BIT_INT_STATUSf_GET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_1BIT_GEN2r_FEC_MEM_1_1BIT_INT_STATUSf_GET
#define RX_X1_ECC_INTR_STS_1BIT_GEN2r_FEC_MEM_1_1BIT_INT_STATUSf_SET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_1BIT_GEN2r_FEC_MEM_1_1BIT_INT_STATUSf_SET
#define RX_X1_ECC_INTR_STS_1BIT_GEN2r_FEC_MEM_0_1BIT_INT_STATUSf_GET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_1BIT_GEN2r_FEC_MEM_0_1BIT_INT_STATUSf_GET
#define RX_X1_ECC_INTR_STS_1BIT_GEN2r_FEC_MEM_0_1BIT_INT_STATUSf_SET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_1BIT_GEN2r_FEC_MEM_0_1BIT_INT_STATUSf_SET
#define READ_RX_X1_ECC_INTR_STS_1BIT_GEN2r BCMI_TSCF_XGXS_READ_RX_X1_ECC_INTR_STS_1BIT_GEN2r
#define WRITE_RX_X1_ECC_INTR_STS_1BIT_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X1_ECC_INTR_STS_1BIT_GEN2r
#define MODIFY_RX_X1_ECC_INTR_STS_1BIT_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X1_ECC_INTR_STS_1BIT_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_1BIT_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X1_ECC_INTR_STS_2BIT_GEN2
 * BLOCKS:   RX_X1_ECC
 * REGADDR:  0x9239
 * DESC:     ECC 2-bit interrupt status register (Physical lane based)
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     FEC_MEM_0_2BIT_INT_STATUS Two bit, uncorrectable error detected
 *     FEC_MEM_1_2BIT_INT_STATUS Two bit, uncorrectable error detected
 *     FEC_MEM_2_2BIT_INT_STATUS Two bit, uncorrectable error detected
 *     FEC_MEM_3_2BIT_INT_STATUS Two bit, uncorrectable error detected
 *     CL91_FEC_RAM1_LO_2BIT_INT_STATUS Two bit, uncorrectable error detected
 *     CL91_FEC_RAM1_HI_2BIT_INT_STATUS Two bit, uncorrectable error detected
 *     CL91_FEC_RAM2_LO_2BIT_INT_STATUS Two bit, uncorrectable error detected
 *     CL91_FEC_RAM2_HI_2BIT_INT_STATUS Two bit, uncorrectable error detected
 */
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_2BIT_GEN2r (0x00109239 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_2BIT_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X1_ECC_INTR_STS_2BIT_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_2BIT_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x1_ecc_intr_sts_2bit_gen2[1];
	uint32_t _rx_x1_ecc_intr_sts_2bit_gen2;
} BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_2BIT_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_2BIT_GEN2r_CLR(r) (r).rx_x1_ecc_intr_sts_2bit_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_2BIT_GEN2r_SET(r,d) (r).rx_x1_ecc_intr_sts_2bit_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_2BIT_GEN2r_GET(r) (r).rx_x1_ecc_intr_sts_2bit_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_2BIT_GEN2r_CL91_FEC_RAM2_HI_2BIT_INT_STATUSf_GET(r) ((((r).rx_x1_ecc_intr_sts_2bit_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_2BIT_GEN2r_CL91_FEC_RAM2_HI_2BIT_INT_STATUSf_SET(r,f) (r).rx_x1_ecc_intr_sts_2bit_gen2[0]=(((r).rx_x1_ecc_intr_sts_2bit_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_2BIT_GEN2r_CL91_FEC_RAM2_LO_2BIT_INT_STATUSf_GET(r) ((((r).rx_x1_ecc_intr_sts_2bit_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_2BIT_GEN2r_CL91_FEC_RAM2_LO_2BIT_INT_STATUSf_SET(r,f) (r).rx_x1_ecc_intr_sts_2bit_gen2[0]=(((r).rx_x1_ecc_intr_sts_2bit_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_2BIT_GEN2r_CL91_FEC_RAM1_HI_2BIT_INT_STATUSf_GET(r) ((((r).rx_x1_ecc_intr_sts_2bit_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_2BIT_GEN2r_CL91_FEC_RAM1_HI_2BIT_INT_STATUSf_SET(r,f) (r).rx_x1_ecc_intr_sts_2bit_gen2[0]=(((r).rx_x1_ecc_intr_sts_2bit_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_2BIT_GEN2r_CL91_FEC_RAM1_LO_2BIT_INT_STATUSf_GET(r) ((((r).rx_x1_ecc_intr_sts_2bit_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_2BIT_GEN2r_CL91_FEC_RAM1_LO_2BIT_INT_STATUSf_SET(r,f) (r).rx_x1_ecc_intr_sts_2bit_gen2[0]=(((r).rx_x1_ecc_intr_sts_2bit_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_2BIT_GEN2r_FEC_MEM_3_2BIT_INT_STATUSf_GET(r) ((((r).rx_x1_ecc_intr_sts_2bit_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_2BIT_GEN2r_FEC_MEM_3_2BIT_INT_STATUSf_SET(r,f) (r).rx_x1_ecc_intr_sts_2bit_gen2[0]=(((r).rx_x1_ecc_intr_sts_2bit_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_2BIT_GEN2r_FEC_MEM_2_2BIT_INT_STATUSf_GET(r) ((((r).rx_x1_ecc_intr_sts_2bit_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_2BIT_GEN2r_FEC_MEM_2_2BIT_INT_STATUSf_SET(r,f) (r).rx_x1_ecc_intr_sts_2bit_gen2[0]=(((r).rx_x1_ecc_intr_sts_2bit_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_2BIT_GEN2r_FEC_MEM_1_2BIT_INT_STATUSf_GET(r) ((((r).rx_x1_ecc_intr_sts_2bit_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_2BIT_GEN2r_FEC_MEM_1_2BIT_INT_STATUSf_SET(r,f) (r).rx_x1_ecc_intr_sts_2bit_gen2[0]=(((r).rx_x1_ecc_intr_sts_2bit_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_2BIT_GEN2r_FEC_MEM_0_2BIT_INT_STATUSf_GET(r) (((r).rx_x1_ecc_intr_sts_2bit_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_2BIT_GEN2r_FEC_MEM_0_2BIT_INT_STATUSf_SET(r,f) (r).rx_x1_ecc_intr_sts_2bit_gen2[0]=(((r).rx_x1_ecc_intr_sts_2bit_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_X1_ECC_INTR_STS_2BIT_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X1_ECC_INTR_STS_2BIT_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_2BIT_GEN2r,(_r._rx_x1_ecc_intr_sts_2bit_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X1_ECC_INTR_STS_2BIT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_2BIT_GEN2r,(_r._rx_x1_ecc_intr_sts_2bit_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X1_ECC_INTR_STS_2BIT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_2BIT_GEN2r,(_r._rx_x1_ecc_intr_sts_2bit_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X1_ECC_INTR_STS_2BIT_GEN2r BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_2BIT_GEN2r
#define RX_X1_ECC_INTR_STS_2BIT_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_2BIT_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_2BIT_GEN2r_t RX_X1_ECC_INTR_STS_2BIT_GEN2r_t;
#define RX_X1_ECC_INTR_STS_2BIT_GEN2r_CLR BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_2BIT_GEN2r_CLR
#define RX_X1_ECC_INTR_STS_2BIT_GEN2r_SET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_2BIT_GEN2r_SET
#define RX_X1_ECC_INTR_STS_2BIT_GEN2r_GET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_2BIT_GEN2r_GET
#define RX_X1_ECC_INTR_STS_2BIT_GEN2r_CL91_FEC_RAM2_HI_2BIT_INT_STATUSf_GET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_2BIT_GEN2r_CL91_FEC_RAM2_HI_2BIT_INT_STATUSf_GET
#define RX_X1_ECC_INTR_STS_2BIT_GEN2r_CL91_FEC_RAM2_HI_2BIT_INT_STATUSf_SET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_2BIT_GEN2r_CL91_FEC_RAM2_HI_2BIT_INT_STATUSf_SET
#define RX_X1_ECC_INTR_STS_2BIT_GEN2r_CL91_FEC_RAM2_LO_2BIT_INT_STATUSf_GET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_2BIT_GEN2r_CL91_FEC_RAM2_LO_2BIT_INT_STATUSf_GET
#define RX_X1_ECC_INTR_STS_2BIT_GEN2r_CL91_FEC_RAM2_LO_2BIT_INT_STATUSf_SET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_2BIT_GEN2r_CL91_FEC_RAM2_LO_2BIT_INT_STATUSf_SET
#define RX_X1_ECC_INTR_STS_2BIT_GEN2r_CL91_FEC_RAM1_HI_2BIT_INT_STATUSf_GET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_2BIT_GEN2r_CL91_FEC_RAM1_HI_2BIT_INT_STATUSf_GET
#define RX_X1_ECC_INTR_STS_2BIT_GEN2r_CL91_FEC_RAM1_HI_2BIT_INT_STATUSf_SET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_2BIT_GEN2r_CL91_FEC_RAM1_HI_2BIT_INT_STATUSf_SET
#define RX_X1_ECC_INTR_STS_2BIT_GEN2r_CL91_FEC_RAM1_LO_2BIT_INT_STATUSf_GET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_2BIT_GEN2r_CL91_FEC_RAM1_LO_2BIT_INT_STATUSf_GET
#define RX_X1_ECC_INTR_STS_2BIT_GEN2r_CL91_FEC_RAM1_LO_2BIT_INT_STATUSf_SET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_2BIT_GEN2r_CL91_FEC_RAM1_LO_2BIT_INT_STATUSf_SET
#define RX_X1_ECC_INTR_STS_2BIT_GEN2r_FEC_MEM_3_2BIT_INT_STATUSf_GET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_2BIT_GEN2r_FEC_MEM_3_2BIT_INT_STATUSf_GET
#define RX_X1_ECC_INTR_STS_2BIT_GEN2r_FEC_MEM_3_2BIT_INT_STATUSf_SET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_2BIT_GEN2r_FEC_MEM_3_2BIT_INT_STATUSf_SET
#define RX_X1_ECC_INTR_STS_2BIT_GEN2r_FEC_MEM_2_2BIT_INT_STATUSf_GET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_2BIT_GEN2r_FEC_MEM_2_2BIT_INT_STATUSf_GET
#define RX_X1_ECC_INTR_STS_2BIT_GEN2r_FEC_MEM_2_2BIT_INT_STATUSf_SET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_2BIT_GEN2r_FEC_MEM_2_2BIT_INT_STATUSf_SET
#define RX_X1_ECC_INTR_STS_2BIT_GEN2r_FEC_MEM_1_2BIT_INT_STATUSf_GET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_2BIT_GEN2r_FEC_MEM_1_2BIT_INT_STATUSf_GET
#define RX_X1_ECC_INTR_STS_2BIT_GEN2r_FEC_MEM_1_2BIT_INT_STATUSf_SET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_2BIT_GEN2r_FEC_MEM_1_2BIT_INT_STATUSf_SET
#define RX_X1_ECC_INTR_STS_2BIT_GEN2r_FEC_MEM_0_2BIT_INT_STATUSf_GET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_2BIT_GEN2r_FEC_MEM_0_2BIT_INT_STATUSf_GET
#define RX_X1_ECC_INTR_STS_2BIT_GEN2r_FEC_MEM_0_2BIT_INT_STATUSf_SET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_2BIT_GEN2r_FEC_MEM_0_2BIT_INT_STATUSf_SET
#define READ_RX_X1_ECC_INTR_STS_2BIT_GEN2r BCMI_TSCF_XGXS_READ_RX_X1_ECC_INTR_STS_2BIT_GEN2r
#define WRITE_RX_X1_ECC_INTR_STS_2BIT_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X1_ECC_INTR_STS_2BIT_GEN2r
#define MODIFY_RX_X1_ECC_INTR_STS_2BIT_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X1_ECC_INTR_STS_2BIT_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X1_ECC_INTR_STS_2BIT_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X1_ECC_INTR_EN_1BIT_GEN2
 * BLOCKS:   RX_X1_ECC
 * REGADDR:  0x923a
 * DESC:     ECC 1-bit interrupt enable register (Physical lane based)
 * RESETVAL: 0xff (255)
 * ACCESS:   R/W
 * FIELDS:
 *     FEC_MEM_0_1BIT_INT_EN Enable for correctable error interrupt
 *     FEC_MEM_1_1BIT_INT_EN Enable for correctable error interrupt
 *     FEC_MEM_2_1BIT_INT_EN Enable for correctable error interrupt
 *     FEC_MEM_3_1BIT_INT_EN Enable for correctable error interrupt
 *     CL91_FEC_RAM1_LO_1BIT_INT_EN Enable for correctable error interrupt
 *     CL91_FEC_RAM1_HI_1BIT_INT_EN Enable for correctable error interrupt
 *     CL91_FEC_RAM2_LO_1BIT_INT_EN Enable for correctable error interrupt
 *     CL91_FEC_RAM2_HI_1BIT_INT_EN Enable for correctable error interrupt
 */
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_1BIT_GEN2r (0x0010923a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_1BIT_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X1_ECC_INTR_EN_1BIT_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_1BIT_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x1_ecc_intr_en_1bit_gen2[1];
	uint32_t _rx_x1_ecc_intr_en_1bit_gen2;
} BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_1BIT_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_1BIT_GEN2r_CLR(r) (r).rx_x1_ecc_intr_en_1bit_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_1BIT_GEN2r_SET(r,d) (r).rx_x1_ecc_intr_en_1bit_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_1BIT_GEN2r_GET(r) (r).rx_x1_ecc_intr_en_1bit_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_1BIT_GEN2r_CL91_FEC_RAM2_HI_1BIT_INT_ENf_GET(r) ((((r).rx_x1_ecc_intr_en_1bit_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_1BIT_GEN2r_CL91_FEC_RAM2_HI_1BIT_INT_ENf_SET(r,f) (r).rx_x1_ecc_intr_en_1bit_gen2[0]=(((r).rx_x1_ecc_intr_en_1bit_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_1BIT_GEN2r_CL91_FEC_RAM2_LO_1BIT_INT_ENf_GET(r) ((((r).rx_x1_ecc_intr_en_1bit_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_1BIT_GEN2r_CL91_FEC_RAM2_LO_1BIT_INT_ENf_SET(r,f) (r).rx_x1_ecc_intr_en_1bit_gen2[0]=(((r).rx_x1_ecc_intr_en_1bit_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_1BIT_GEN2r_CL91_FEC_RAM1_HI_1BIT_INT_ENf_GET(r) ((((r).rx_x1_ecc_intr_en_1bit_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_1BIT_GEN2r_CL91_FEC_RAM1_HI_1BIT_INT_ENf_SET(r,f) (r).rx_x1_ecc_intr_en_1bit_gen2[0]=(((r).rx_x1_ecc_intr_en_1bit_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_1BIT_GEN2r_CL91_FEC_RAM1_LO_1BIT_INT_ENf_GET(r) ((((r).rx_x1_ecc_intr_en_1bit_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_1BIT_GEN2r_CL91_FEC_RAM1_LO_1BIT_INT_ENf_SET(r,f) (r).rx_x1_ecc_intr_en_1bit_gen2[0]=(((r).rx_x1_ecc_intr_en_1bit_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_1BIT_GEN2r_FEC_MEM_3_1BIT_INT_ENf_GET(r) ((((r).rx_x1_ecc_intr_en_1bit_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_1BIT_GEN2r_FEC_MEM_3_1BIT_INT_ENf_SET(r,f) (r).rx_x1_ecc_intr_en_1bit_gen2[0]=(((r).rx_x1_ecc_intr_en_1bit_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_1BIT_GEN2r_FEC_MEM_2_1BIT_INT_ENf_GET(r) ((((r).rx_x1_ecc_intr_en_1bit_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_1BIT_GEN2r_FEC_MEM_2_1BIT_INT_ENf_SET(r,f) (r).rx_x1_ecc_intr_en_1bit_gen2[0]=(((r).rx_x1_ecc_intr_en_1bit_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_1BIT_GEN2r_FEC_MEM_1_1BIT_INT_ENf_GET(r) ((((r).rx_x1_ecc_intr_en_1bit_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_1BIT_GEN2r_FEC_MEM_1_1BIT_INT_ENf_SET(r,f) (r).rx_x1_ecc_intr_en_1bit_gen2[0]=(((r).rx_x1_ecc_intr_en_1bit_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_1BIT_GEN2r_FEC_MEM_0_1BIT_INT_ENf_GET(r) (((r).rx_x1_ecc_intr_en_1bit_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_1BIT_GEN2r_FEC_MEM_0_1BIT_INT_ENf_SET(r,f) (r).rx_x1_ecc_intr_en_1bit_gen2[0]=(((r).rx_x1_ecc_intr_en_1bit_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_X1_ECC_INTR_EN_1BIT_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X1_ECC_INTR_EN_1BIT_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_1BIT_GEN2r,(_r._rx_x1_ecc_intr_en_1bit_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X1_ECC_INTR_EN_1BIT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_1BIT_GEN2r,(_r._rx_x1_ecc_intr_en_1bit_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X1_ECC_INTR_EN_1BIT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_1BIT_GEN2r,(_r._rx_x1_ecc_intr_en_1bit_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X1_ECC_INTR_EN_1BIT_GEN2r BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_1BIT_GEN2r
#define RX_X1_ECC_INTR_EN_1BIT_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_1BIT_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_1BIT_GEN2r_t RX_X1_ECC_INTR_EN_1BIT_GEN2r_t;
#define RX_X1_ECC_INTR_EN_1BIT_GEN2r_CLR BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_1BIT_GEN2r_CLR
#define RX_X1_ECC_INTR_EN_1BIT_GEN2r_SET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_1BIT_GEN2r_SET
#define RX_X1_ECC_INTR_EN_1BIT_GEN2r_GET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_1BIT_GEN2r_GET
#define RX_X1_ECC_INTR_EN_1BIT_GEN2r_CL91_FEC_RAM2_HI_1BIT_INT_ENf_GET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_1BIT_GEN2r_CL91_FEC_RAM2_HI_1BIT_INT_ENf_GET
#define RX_X1_ECC_INTR_EN_1BIT_GEN2r_CL91_FEC_RAM2_HI_1BIT_INT_ENf_SET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_1BIT_GEN2r_CL91_FEC_RAM2_HI_1BIT_INT_ENf_SET
#define RX_X1_ECC_INTR_EN_1BIT_GEN2r_CL91_FEC_RAM2_LO_1BIT_INT_ENf_GET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_1BIT_GEN2r_CL91_FEC_RAM2_LO_1BIT_INT_ENf_GET
#define RX_X1_ECC_INTR_EN_1BIT_GEN2r_CL91_FEC_RAM2_LO_1BIT_INT_ENf_SET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_1BIT_GEN2r_CL91_FEC_RAM2_LO_1BIT_INT_ENf_SET
#define RX_X1_ECC_INTR_EN_1BIT_GEN2r_CL91_FEC_RAM1_HI_1BIT_INT_ENf_GET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_1BIT_GEN2r_CL91_FEC_RAM1_HI_1BIT_INT_ENf_GET
#define RX_X1_ECC_INTR_EN_1BIT_GEN2r_CL91_FEC_RAM1_HI_1BIT_INT_ENf_SET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_1BIT_GEN2r_CL91_FEC_RAM1_HI_1BIT_INT_ENf_SET
#define RX_X1_ECC_INTR_EN_1BIT_GEN2r_CL91_FEC_RAM1_LO_1BIT_INT_ENf_GET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_1BIT_GEN2r_CL91_FEC_RAM1_LO_1BIT_INT_ENf_GET
#define RX_X1_ECC_INTR_EN_1BIT_GEN2r_CL91_FEC_RAM1_LO_1BIT_INT_ENf_SET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_1BIT_GEN2r_CL91_FEC_RAM1_LO_1BIT_INT_ENf_SET
#define RX_X1_ECC_INTR_EN_1BIT_GEN2r_FEC_MEM_3_1BIT_INT_ENf_GET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_1BIT_GEN2r_FEC_MEM_3_1BIT_INT_ENf_GET
#define RX_X1_ECC_INTR_EN_1BIT_GEN2r_FEC_MEM_3_1BIT_INT_ENf_SET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_1BIT_GEN2r_FEC_MEM_3_1BIT_INT_ENf_SET
#define RX_X1_ECC_INTR_EN_1BIT_GEN2r_FEC_MEM_2_1BIT_INT_ENf_GET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_1BIT_GEN2r_FEC_MEM_2_1BIT_INT_ENf_GET
#define RX_X1_ECC_INTR_EN_1BIT_GEN2r_FEC_MEM_2_1BIT_INT_ENf_SET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_1BIT_GEN2r_FEC_MEM_2_1BIT_INT_ENf_SET
#define RX_X1_ECC_INTR_EN_1BIT_GEN2r_FEC_MEM_1_1BIT_INT_ENf_GET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_1BIT_GEN2r_FEC_MEM_1_1BIT_INT_ENf_GET
#define RX_X1_ECC_INTR_EN_1BIT_GEN2r_FEC_MEM_1_1BIT_INT_ENf_SET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_1BIT_GEN2r_FEC_MEM_1_1BIT_INT_ENf_SET
#define RX_X1_ECC_INTR_EN_1BIT_GEN2r_FEC_MEM_0_1BIT_INT_ENf_GET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_1BIT_GEN2r_FEC_MEM_0_1BIT_INT_ENf_GET
#define RX_X1_ECC_INTR_EN_1BIT_GEN2r_FEC_MEM_0_1BIT_INT_ENf_SET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_1BIT_GEN2r_FEC_MEM_0_1BIT_INT_ENf_SET
#define READ_RX_X1_ECC_INTR_EN_1BIT_GEN2r BCMI_TSCF_XGXS_READ_RX_X1_ECC_INTR_EN_1BIT_GEN2r
#define WRITE_RX_X1_ECC_INTR_EN_1BIT_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X1_ECC_INTR_EN_1BIT_GEN2r
#define MODIFY_RX_X1_ECC_INTR_EN_1BIT_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X1_ECC_INTR_EN_1BIT_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_1BIT_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X1_ECC_INTR_EN_2BIT_GEN2
 * BLOCKS:   RX_X1_ECC
 * REGADDR:  0x923b
 * DESC:     ECC 2-bit interrupt enable register (Physical lane based)
 * RESETVAL: 0xff (255)
 * ACCESS:   R/W
 * FIELDS:
 *     FEC_MEM_0_2BIT_INT_EN Enable for uncorrectable error interrupt
 *     FEC_MEM_1_2BIT_INT_EN Enable for uncorrectable error interrupt
 *     FEC_MEM_2_2BIT_INT_EN Enable for uncorrectable error interrupt
 *     FEC_MEM_3_2BIT_INT_EN Enable for uncorrectable error interrupt
 *     CL91_FEC_RAM1_LO_2BIT_INT_EN Enable for uncorrectable error interrupt
 *     CL91_FEC_RAM1_HI_2BIT_INT_EN Enable for uncorrectable error interrupt
 *     CL91_FEC_RAM2_LO_2BIT_INT_EN Enable for uncorrectable error interrupt
 *     CL91_FEC_RAM2_HI_2BIT_INT_EN Enable for uncorrectable error interrupt
 */
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_2BIT_GEN2r (0x0010923b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_2BIT_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X1_ECC_INTR_EN_2BIT_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_2BIT_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x1_ecc_intr_en_2bit_gen2[1];
	uint32_t _rx_x1_ecc_intr_en_2bit_gen2;
} BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_2BIT_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_2BIT_GEN2r_CLR(r) (r).rx_x1_ecc_intr_en_2bit_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_2BIT_GEN2r_SET(r,d) (r).rx_x1_ecc_intr_en_2bit_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_2BIT_GEN2r_GET(r) (r).rx_x1_ecc_intr_en_2bit_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_2BIT_GEN2r_CL91_FEC_RAM2_HI_2BIT_INT_ENf_GET(r) ((((r).rx_x1_ecc_intr_en_2bit_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_2BIT_GEN2r_CL91_FEC_RAM2_HI_2BIT_INT_ENf_SET(r,f) (r).rx_x1_ecc_intr_en_2bit_gen2[0]=(((r).rx_x1_ecc_intr_en_2bit_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_2BIT_GEN2r_CL91_FEC_RAM2_LO_2BIT_INT_ENf_GET(r) ((((r).rx_x1_ecc_intr_en_2bit_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_2BIT_GEN2r_CL91_FEC_RAM2_LO_2BIT_INT_ENf_SET(r,f) (r).rx_x1_ecc_intr_en_2bit_gen2[0]=(((r).rx_x1_ecc_intr_en_2bit_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_2BIT_GEN2r_CL91_FEC_RAM1_HI_2BIT_INT_ENf_GET(r) ((((r).rx_x1_ecc_intr_en_2bit_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_2BIT_GEN2r_CL91_FEC_RAM1_HI_2BIT_INT_ENf_SET(r,f) (r).rx_x1_ecc_intr_en_2bit_gen2[0]=(((r).rx_x1_ecc_intr_en_2bit_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_2BIT_GEN2r_CL91_FEC_RAM1_LO_2BIT_INT_ENf_GET(r) ((((r).rx_x1_ecc_intr_en_2bit_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_2BIT_GEN2r_CL91_FEC_RAM1_LO_2BIT_INT_ENf_SET(r,f) (r).rx_x1_ecc_intr_en_2bit_gen2[0]=(((r).rx_x1_ecc_intr_en_2bit_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_2BIT_GEN2r_FEC_MEM_3_2BIT_INT_ENf_GET(r) ((((r).rx_x1_ecc_intr_en_2bit_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_2BIT_GEN2r_FEC_MEM_3_2BIT_INT_ENf_SET(r,f) (r).rx_x1_ecc_intr_en_2bit_gen2[0]=(((r).rx_x1_ecc_intr_en_2bit_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_2BIT_GEN2r_FEC_MEM_2_2BIT_INT_ENf_GET(r) ((((r).rx_x1_ecc_intr_en_2bit_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_2BIT_GEN2r_FEC_MEM_2_2BIT_INT_ENf_SET(r,f) (r).rx_x1_ecc_intr_en_2bit_gen2[0]=(((r).rx_x1_ecc_intr_en_2bit_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_2BIT_GEN2r_FEC_MEM_1_2BIT_INT_ENf_GET(r) ((((r).rx_x1_ecc_intr_en_2bit_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_2BIT_GEN2r_FEC_MEM_1_2BIT_INT_ENf_SET(r,f) (r).rx_x1_ecc_intr_en_2bit_gen2[0]=(((r).rx_x1_ecc_intr_en_2bit_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_2BIT_GEN2r_FEC_MEM_0_2BIT_INT_ENf_GET(r) (((r).rx_x1_ecc_intr_en_2bit_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_2BIT_GEN2r_FEC_MEM_0_2BIT_INT_ENf_SET(r,f) (r).rx_x1_ecc_intr_en_2bit_gen2[0]=(((r).rx_x1_ecc_intr_en_2bit_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_X1_ECC_INTR_EN_2BIT_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X1_ECC_INTR_EN_2BIT_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_2BIT_GEN2r,(_r._rx_x1_ecc_intr_en_2bit_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X1_ECC_INTR_EN_2BIT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_2BIT_GEN2r,(_r._rx_x1_ecc_intr_en_2bit_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X1_ECC_INTR_EN_2BIT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_2BIT_GEN2r,(_r._rx_x1_ecc_intr_en_2bit_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X1_ECC_INTR_EN_2BIT_GEN2r BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_2BIT_GEN2r
#define RX_X1_ECC_INTR_EN_2BIT_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_2BIT_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_2BIT_GEN2r_t RX_X1_ECC_INTR_EN_2BIT_GEN2r_t;
#define RX_X1_ECC_INTR_EN_2BIT_GEN2r_CLR BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_2BIT_GEN2r_CLR
#define RX_X1_ECC_INTR_EN_2BIT_GEN2r_SET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_2BIT_GEN2r_SET
#define RX_X1_ECC_INTR_EN_2BIT_GEN2r_GET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_2BIT_GEN2r_GET
#define RX_X1_ECC_INTR_EN_2BIT_GEN2r_CL91_FEC_RAM2_HI_2BIT_INT_ENf_GET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_2BIT_GEN2r_CL91_FEC_RAM2_HI_2BIT_INT_ENf_GET
#define RX_X1_ECC_INTR_EN_2BIT_GEN2r_CL91_FEC_RAM2_HI_2BIT_INT_ENf_SET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_2BIT_GEN2r_CL91_FEC_RAM2_HI_2BIT_INT_ENf_SET
#define RX_X1_ECC_INTR_EN_2BIT_GEN2r_CL91_FEC_RAM2_LO_2BIT_INT_ENf_GET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_2BIT_GEN2r_CL91_FEC_RAM2_LO_2BIT_INT_ENf_GET
#define RX_X1_ECC_INTR_EN_2BIT_GEN2r_CL91_FEC_RAM2_LO_2BIT_INT_ENf_SET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_2BIT_GEN2r_CL91_FEC_RAM2_LO_2BIT_INT_ENf_SET
#define RX_X1_ECC_INTR_EN_2BIT_GEN2r_CL91_FEC_RAM1_HI_2BIT_INT_ENf_GET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_2BIT_GEN2r_CL91_FEC_RAM1_HI_2BIT_INT_ENf_GET
#define RX_X1_ECC_INTR_EN_2BIT_GEN2r_CL91_FEC_RAM1_HI_2BIT_INT_ENf_SET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_2BIT_GEN2r_CL91_FEC_RAM1_HI_2BIT_INT_ENf_SET
#define RX_X1_ECC_INTR_EN_2BIT_GEN2r_CL91_FEC_RAM1_LO_2BIT_INT_ENf_GET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_2BIT_GEN2r_CL91_FEC_RAM1_LO_2BIT_INT_ENf_GET
#define RX_X1_ECC_INTR_EN_2BIT_GEN2r_CL91_FEC_RAM1_LO_2BIT_INT_ENf_SET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_2BIT_GEN2r_CL91_FEC_RAM1_LO_2BIT_INT_ENf_SET
#define RX_X1_ECC_INTR_EN_2BIT_GEN2r_FEC_MEM_3_2BIT_INT_ENf_GET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_2BIT_GEN2r_FEC_MEM_3_2BIT_INT_ENf_GET
#define RX_X1_ECC_INTR_EN_2BIT_GEN2r_FEC_MEM_3_2BIT_INT_ENf_SET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_2BIT_GEN2r_FEC_MEM_3_2BIT_INT_ENf_SET
#define RX_X1_ECC_INTR_EN_2BIT_GEN2r_FEC_MEM_2_2BIT_INT_ENf_GET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_2BIT_GEN2r_FEC_MEM_2_2BIT_INT_ENf_GET
#define RX_X1_ECC_INTR_EN_2BIT_GEN2r_FEC_MEM_2_2BIT_INT_ENf_SET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_2BIT_GEN2r_FEC_MEM_2_2BIT_INT_ENf_SET
#define RX_X1_ECC_INTR_EN_2BIT_GEN2r_FEC_MEM_1_2BIT_INT_ENf_GET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_2BIT_GEN2r_FEC_MEM_1_2BIT_INT_ENf_GET
#define RX_X1_ECC_INTR_EN_2BIT_GEN2r_FEC_MEM_1_2BIT_INT_ENf_SET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_2BIT_GEN2r_FEC_MEM_1_2BIT_INT_ENf_SET
#define RX_X1_ECC_INTR_EN_2BIT_GEN2r_FEC_MEM_0_2BIT_INT_ENf_GET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_2BIT_GEN2r_FEC_MEM_0_2BIT_INT_ENf_GET
#define RX_X1_ECC_INTR_EN_2BIT_GEN2r_FEC_MEM_0_2BIT_INT_ENf_SET BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_2BIT_GEN2r_FEC_MEM_0_2BIT_INT_ENf_SET
#define READ_RX_X1_ECC_INTR_EN_2BIT_GEN2r BCMI_TSCF_XGXS_READ_RX_X1_ECC_INTR_EN_2BIT_GEN2r
#define WRITE_RX_X1_ECC_INTR_EN_2BIT_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X1_ECC_INTR_EN_2BIT_GEN2r
#define MODIFY_RX_X1_ECC_INTR_EN_2BIT_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X1_ECC_INTR_EN_2BIT_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X1_ECC_INTR_EN_2BIT_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X1_ECC_DIS_ECC_MEM_GEN2
 * BLOCKS:   RX_X1_ECC
 * REGADDR:  0x923c
 * DESC:     Disable ECC register (Physical lane based)
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     DISABLE_ECC_FEC_MEM_0 disable ECC check/generationThis bit should not be changed from 1 to 0 in the middle of the test
 *     DISABLE_ECC_FEC_MEM_1 disable ECC check/generationThis bit should not be changed from 1 to 0 in the middle of the test
 *     DISABLE_ECC_FEC_MEM_2 disable ECC check/generationThis bit should not be changed from 1 to 0 in the middle of the test
 *     DISABLE_ECC_FEC_MEM_3 disable ECC check/generationThis bit should not be changed from 1 to 0 in the middle of the test
 *     DISABLE_ECC_CL91_FEC_RAM1_LO disable ECC check/generationThis bit should not be changed from 1 to 0 in the middle of the test
 *     DISABLE_ECC_CL91_FEC_RAM1_HI disable ECC check/generationThis bit should not be changed from 1 to 0 in the middle of the test
 *     DISABLE_ECC_CL91_FEC_RAM2_LO disable ECC check/generationThis bit should not be changed from 1 to 0 in the middle of the test
 *     DISABLE_ECC_CL91_FEC_RAM2_HI disable ECC check/generationThis bit should not be changed from 1 to 0 in the middle of the test
 */
#define BCMI_TSCF_XGXS_RX_X1_ECC_DIS_ECC_MEM_GEN2r (0x0010923c | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X1_ECC_DIS_ECC_MEM_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X1_ECC_DIS_ECC_MEM_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X1_ECC_DIS_ECC_MEM_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x1_ecc_dis_ecc_mem_gen2[1];
	uint32_t _rx_x1_ecc_dis_ecc_mem_gen2;
} BCMI_TSCF_XGXS_RX_X1_ECC_DIS_ECC_MEM_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X1_ECC_DIS_ECC_MEM_GEN2r_CLR(r) (r).rx_x1_ecc_dis_ecc_mem_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X1_ECC_DIS_ECC_MEM_GEN2r_SET(r,d) (r).rx_x1_ecc_dis_ecc_mem_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X1_ECC_DIS_ECC_MEM_GEN2r_GET(r) (r).rx_x1_ecc_dis_ecc_mem_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X1_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_CL91_FEC_RAM2_HIf_GET(r) ((((r).rx_x1_ecc_dis_ecc_mem_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_CL91_FEC_RAM2_HIf_SET(r,f) (r).rx_x1_ecc_dis_ecc_mem_gen2[0]=(((r).rx_x1_ecc_dis_ecc_mem_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_RX_X1_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_CL91_FEC_RAM2_LOf_GET(r) ((((r).rx_x1_ecc_dis_ecc_mem_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_CL91_FEC_RAM2_LOf_SET(r,f) (r).rx_x1_ecc_dis_ecc_mem_gen2[0]=(((r).rx_x1_ecc_dis_ecc_mem_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_RX_X1_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_CL91_FEC_RAM1_HIf_GET(r) ((((r).rx_x1_ecc_dis_ecc_mem_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_CL91_FEC_RAM1_HIf_SET(r,f) (r).rx_x1_ecc_dis_ecc_mem_gen2[0]=(((r).rx_x1_ecc_dis_ecc_mem_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_RX_X1_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_CL91_FEC_RAM1_LOf_GET(r) ((((r).rx_x1_ecc_dis_ecc_mem_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_CL91_FEC_RAM1_LOf_SET(r,f) (r).rx_x1_ecc_dis_ecc_mem_gen2[0]=(((r).rx_x1_ecc_dis_ecc_mem_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_RX_X1_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_FEC_MEM_3f_GET(r) ((((r).rx_x1_ecc_dis_ecc_mem_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_FEC_MEM_3f_SET(r,f) (r).rx_x1_ecc_dis_ecc_mem_gen2[0]=(((r).rx_x1_ecc_dis_ecc_mem_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_RX_X1_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_FEC_MEM_2f_GET(r) ((((r).rx_x1_ecc_dis_ecc_mem_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_FEC_MEM_2f_SET(r,f) (r).rx_x1_ecc_dis_ecc_mem_gen2[0]=(((r).rx_x1_ecc_dis_ecc_mem_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_RX_X1_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_FEC_MEM_1f_GET(r) ((((r).rx_x1_ecc_dis_ecc_mem_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_FEC_MEM_1f_SET(r,f) (r).rx_x1_ecc_dis_ecc_mem_gen2[0]=(((r).rx_x1_ecc_dis_ecc_mem_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_RX_X1_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_FEC_MEM_0f_GET(r) (((r).rx_x1_ecc_dis_ecc_mem_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_FEC_MEM_0f_SET(r,f) (r).rx_x1_ecc_dis_ecc_mem_gen2[0]=(((r).rx_x1_ecc_dis_ecc_mem_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_X1_ECC_DIS_ECC_MEM_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X1_ECC_DIS_ECC_MEM_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X1_ECC_DIS_ECC_MEM_GEN2r,(_r._rx_x1_ecc_dis_ecc_mem_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X1_ECC_DIS_ECC_MEM_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X1_ECC_DIS_ECC_MEM_GEN2r,(_r._rx_x1_ecc_dis_ecc_mem_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X1_ECC_DIS_ECC_MEM_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X1_ECC_DIS_ECC_MEM_GEN2r,(_r._rx_x1_ecc_dis_ecc_mem_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X1_ECC_DIS_ECC_MEM_GEN2r BCMI_TSCF_XGXS_RX_X1_ECC_DIS_ECC_MEM_GEN2r
#define RX_X1_ECC_DIS_ECC_MEM_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X1_ECC_DIS_ECC_MEM_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X1_ECC_DIS_ECC_MEM_GEN2r_t RX_X1_ECC_DIS_ECC_MEM_GEN2r_t;
#define RX_X1_ECC_DIS_ECC_MEM_GEN2r_CLR BCMI_TSCF_XGXS_RX_X1_ECC_DIS_ECC_MEM_GEN2r_CLR
#define RX_X1_ECC_DIS_ECC_MEM_GEN2r_SET BCMI_TSCF_XGXS_RX_X1_ECC_DIS_ECC_MEM_GEN2r_SET
#define RX_X1_ECC_DIS_ECC_MEM_GEN2r_GET BCMI_TSCF_XGXS_RX_X1_ECC_DIS_ECC_MEM_GEN2r_GET
#define RX_X1_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_CL91_FEC_RAM2_HIf_GET BCMI_TSCF_XGXS_RX_X1_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_CL91_FEC_RAM2_HIf_GET
#define RX_X1_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_CL91_FEC_RAM2_HIf_SET BCMI_TSCF_XGXS_RX_X1_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_CL91_FEC_RAM2_HIf_SET
#define RX_X1_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_CL91_FEC_RAM2_LOf_GET BCMI_TSCF_XGXS_RX_X1_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_CL91_FEC_RAM2_LOf_GET
#define RX_X1_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_CL91_FEC_RAM2_LOf_SET BCMI_TSCF_XGXS_RX_X1_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_CL91_FEC_RAM2_LOf_SET
#define RX_X1_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_CL91_FEC_RAM1_HIf_GET BCMI_TSCF_XGXS_RX_X1_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_CL91_FEC_RAM1_HIf_GET
#define RX_X1_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_CL91_FEC_RAM1_HIf_SET BCMI_TSCF_XGXS_RX_X1_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_CL91_FEC_RAM1_HIf_SET
#define RX_X1_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_CL91_FEC_RAM1_LOf_GET BCMI_TSCF_XGXS_RX_X1_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_CL91_FEC_RAM1_LOf_GET
#define RX_X1_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_CL91_FEC_RAM1_LOf_SET BCMI_TSCF_XGXS_RX_X1_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_CL91_FEC_RAM1_LOf_SET
#define RX_X1_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_FEC_MEM_3f_GET BCMI_TSCF_XGXS_RX_X1_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_FEC_MEM_3f_GET
#define RX_X1_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_FEC_MEM_3f_SET BCMI_TSCF_XGXS_RX_X1_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_FEC_MEM_3f_SET
#define RX_X1_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_FEC_MEM_2f_GET BCMI_TSCF_XGXS_RX_X1_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_FEC_MEM_2f_GET
#define RX_X1_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_FEC_MEM_2f_SET BCMI_TSCF_XGXS_RX_X1_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_FEC_MEM_2f_SET
#define RX_X1_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_FEC_MEM_1f_GET BCMI_TSCF_XGXS_RX_X1_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_FEC_MEM_1f_GET
#define RX_X1_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_FEC_MEM_1f_SET BCMI_TSCF_XGXS_RX_X1_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_FEC_MEM_1f_SET
#define RX_X1_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_FEC_MEM_0f_GET BCMI_TSCF_XGXS_RX_X1_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_FEC_MEM_0f_GET
#define RX_X1_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_FEC_MEM_0f_SET BCMI_TSCF_XGXS_RX_X1_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_FEC_MEM_0f_SET
#define READ_RX_X1_ECC_DIS_ECC_MEM_GEN2r BCMI_TSCF_XGXS_READ_RX_X1_ECC_DIS_ECC_MEM_GEN2r
#define WRITE_RX_X1_ECC_DIS_ECC_MEM_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X1_ECC_DIS_ECC_MEM_GEN2r
#define MODIFY_RX_X1_ECC_DIS_ECC_MEM_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X1_ECC_DIS_ECC_MEM_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X1_ECC_DIS_ECC_MEM_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X1_ECC_CORRUPT_0_GEN2
 * BLOCKS:   RX_X1_ECC
 * REGADDR:  0x923d
 * DESC:     Corrupt ECC register (Physical lane based)
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CORRUPT_ECC_FEC_MEM_0 ECC error injection2'b01 - Inject 2-bit error on write data2'b10 - Inject 1-bit error on read data2'b11 - Inject 2-bit error on read data
 *     CORRUPT_ECC_FEC_MEM_1 ECC error injection2'b01 - Inject 2-bit error on write data2'b10 - Inject 1-bit error on read data2'b11 - Inject 2-bit error on read data
 *     CORRUPT_ECC_FEC_MEM_2 ECC error injection2'b01 - Inject 2-bit error on write data2'b10 - Inject 1-bit error on read data2'b11 - Inject 2-bit error on read data
 *     CORRUPT_ECC_FEC_MEM_3 ECC error injection2'b01 - Inject 2-bit error on write data2'b10 - Inject 1-bit error on read data2'b11 - Inject 2-bit error on read data
 *     CORRUPT_ECC_CL91_FEC_RAM1_LO ECC error injection2'b01 - Inject 2-bit error on write data2'b10 - Inject 1-bit error on read data2'b11 - Inject 2-bit error on read data
 *     CORRUPT_ECC_CL91_FEC_RAM1_HI ECC error injection2'b01 - Inject 2-bit error on write data2'b10 - Inject 1-bit error on read data2'b11 - Inject 2-bit error on read data
 *     CORRUPT_ECC_CL91_FEC_RAM2_LO ECC error injection2'b01 - Inject 2-bit error on write data2'b10 - Inject 1-bit error on read data2'b11 - Inject 2-bit error on read data
 *     CORRUPT_ECC_CL91_FEC_RAM2_HI ECC error injection2'b01 - Inject 2-bit error on write data2'b10 - Inject 1-bit error on read data2'b11 - Inject 2-bit error on read data
 */
#define BCMI_TSCF_XGXS_RX_X1_ECC_CORRUPT_0_GEN2r (0x0010923d | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X1_ECC_CORRUPT_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X1_ECC_CORRUPT_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X1_ECC_CORRUPT_0_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x1_ecc_corrupt_0_gen2[1];
	uint32_t _rx_x1_ecc_corrupt_0_gen2;
} BCMI_TSCF_XGXS_RX_X1_ECC_CORRUPT_0_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X1_ECC_CORRUPT_0_GEN2r_CLR(r) (r).rx_x1_ecc_corrupt_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X1_ECC_CORRUPT_0_GEN2r_SET(r,d) (r).rx_x1_ecc_corrupt_0_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X1_ECC_CORRUPT_0_GEN2r_GET(r) (r).rx_x1_ecc_corrupt_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X1_ECC_CORRUPT_0_GEN2r_CORRUPT_ECC_CL91_FEC_RAM2_HIf_GET(r) ((((r).rx_x1_ecc_corrupt_0_gen2[0]) >> 14) & 0x3)
#define BCMI_TSCF_XGXS_RX_X1_ECC_CORRUPT_0_GEN2r_CORRUPT_ECC_CL91_FEC_RAM2_HIf_SET(r,f) (r).rx_x1_ecc_corrupt_0_gen2[0]=(((r).rx_x1_ecc_corrupt_0_gen2[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_TSCF_XGXS_RX_X1_ECC_CORRUPT_0_GEN2r_CORRUPT_ECC_CL91_FEC_RAM2_LOf_GET(r) ((((r).rx_x1_ecc_corrupt_0_gen2[0]) >> 12) & 0x3)
#define BCMI_TSCF_XGXS_RX_X1_ECC_CORRUPT_0_GEN2r_CORRUPT_ECC_CL91_FEC_RAM2_LOf_SET(r,f) (r).rx_x1_ecc_corrupt_0_gen2[0]=(((r).rx_x1_ecc_corrupt_0_gen2[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12)) | (3 << (16 + 12))
#define BCMI_TSCF_XGXS_RX_X1_ECC_CORRUPT_0_GEN2r_CORRUPT_ECC_CL91_FEC_RAM1_HIf_GET(r) ((((r).rx_x1_ecc_corrupt_0_gen2[0]) >> 10) & 0x3)
#define BCMI_TSCF_XGXS_RX_X1_ECC_CORRUPT_0_GEN2r_CORRUPT_ECC_CL91_FEC_RAM1_HIf_SET(r,f) (r).rx_x1_ecc_corrupt_0_gen2[0]=(((r).rx_x1_ecc_corrupt_0_gen2[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10)) | (3 << (16 + 10))
#define BCMI_TSCF_XGXS_RX_X1_ECC_CORRUPT_0_GEN2r_CORRUPT_ECC_CL91_FEC_RAM1_LOf_GET(r) ((((r).rx_x1_ecc_corrupt_0_gen2[0]) >> 8) & 0x3)
#define BCMI_TSCF_XGXS_RX_X1_ECC_CORRUPT_0_GEN2r_CORRUPT_ECC_CL91_FEC_RAM1_LOf_SET(r,f) (r).rx_x1_ecc_corrupt_0_gen2[0]=(((r).rx_x1_ecc_corrupt_0_gen2[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))
#define BCMI_TSCF_XGXS_RX_X1_ECC_CORRUPT_0_GEN2r_CORRUPT_ECC_FEC_MEM_3f_GET(r) ((((r).rx_x1_ecc_corrupt_0_gen2[0]) >> 6) & 0x3)
#define BCMI_TSCF_XGXS_RX_X1_ECC_CORRUPT_0_GEN2r_CORRUPT_ECC_FEC_MEM_3f_SET(r,f) (r).rx_x1_ecc_corrupt_0_gen2[0]=(((r).rx_x1_ecc_corrupt_0_gen2[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6)) | (3 << (16 + 6))
#define BCMI_TSCF_XGXS_RX_X1_ECC_CORRUPT_0_GEN2r_CORRUPT_ECC_FEC_MEM_2f_GET(r) ((((r).rx_x1_ecc_corrupt_0_gen2[0]) >> 4) & 0x3)
#define BCMI_TSCF_XGXS_RX_X1_ECC_CORRUPT_0_GEN2r_CORRUPT_ECC_FEC_MEM_2f_SET(r,f) (r).rx_x1_ecc_corrupt_0_gen2[0]=(((r).rx_x1_ecc_corrupt_0_gen2[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_XGXS_RX_X1_ECC_CORRUPT_0_GEN2r_CORRUPT_ECC_FEC_MEM_1f_GET(r) ((((r).rx_x1_ecc_corrupt_0_gen2[0]) >> 2) & 0x3)
#define BCMI_TSCF_XGXS_RX_X1_ECC_CORRUPT_0_GEN2r_CORRUPT_ECC_FEC_MEM_1f_SET(r,f) (r).rx_x1_ecc_corrupt_0_gen2[0]=(((r).rx_x1_ecc_corrupt_0_gen2[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2)) | (3 << (16 + 2))
#define BCMI_TSCF_XGXS_RX_X1_ECC_CORRUPT_0_GEN2r_CORRUPT_ECC_FEC_MEM_0f_GET(r) (((r).rx_x1_ecc_corrupt_0_gen2[0]) & 0x3)
#define BCMI_TSCF_XGXS_RX_X1_ECC_CORRUPT_0_GEN2r_CORRUPT_ECC_FEC_MEM_0f_SET(r,f) (r).rx_x1_ecc_corrupt_0_gen2[0]=(((r).rx_x1_ecc_corrupt_0_gen2[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access RX_X1_ECC_CORRUPT_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X1_ECC_CORRUPT_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X1_ECC_CORRUPT_0_GEN2r,(_r._rx_x1_ecc_corrupt_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X1_ECC_CORRUPT_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X1_ECC_CORRUPT_0_GEN2r,(_r._rx_x1_ecc_corrupt_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X1_ECC_CORRUPT_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X1_ECC_CORRUPT_0_GEN2r,(_r._rx_x1_ecc_corrupt_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X1_ECC_CORRUPT_0_GEN2r BCMI_TSCF_XGXS_RX_X1_ECC_CORRUPT_0_GEN2r
#define RX_X1_ECC_CORRUPT_0_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X1_ECC_CORRUPT_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X1_ECC_CORRUPT_0_GEN2r_t RX_X1_ECC_CORRUPT_0_GEN2r_t;
#define RX_X1_ECC_CORRUPT_0_GEN2r_CLR BCMI_TSCF_XGXS_RX_X1_ECC_CORRUPT_0_GEN2r_CLR
#define RX_X1_ECC_CORRUPT_0_GEN2r_SET BCMI_TSCF_XGXS_RX_X1_ECC_CORRUPT_0_GEN2r_SET
#define RX_X1_ECC_CORRUPT_0_GEN2r_GET BCMI_TSCF_XGXS_RX_X1_ECC_CORRUPT_0_GEN2r_GET
#define RX_X1_ECC_CORRUPT_0_GEN2r_CORRUPT_ECC_CL91_FEC_RAM2_HIf_GET BCMI_TSCF_XGXS_RX_X1_ECC_CORRUPT_0_GEN2r_CORRUPT_ECC_CL91_FEC_RAM2_HIf_GET
#define RX_X1_ECC_CORRUPT_0_GEN2r_CORRUPT_ECC_CL91_FEC_RAM2_HIf_SET BCMI_TSCF_XGXS_RX_X1_ECC_CORRUPT_0_GEN2r_CORRUPT_ECC_CL91_FEC_RAM2_HIf_SET
#define RX_X1_ECC_CORRUPT_0_GEN2r_CORRUPT_ECC_CL91_FEC_RAM2_LOf_GET BCMI_TSCF_XGXS_RX_X1_ECC_CORRUPT_0_GEN2r_CORRUPT_ECC_CL91_FEC_RAM2_LOf_GET
#define RX_X1_ECC_CORRUPT_0_GEN2r_CORRUPT_ECC_CL91_FEC_RAM2_LOf_SET BCMI_TSCF_XGXS_RX_X1_ECC_CORRUPT_0_GEN2r_CORRUPT_ECC_CL91_FEC_RAM2_LOf_SET
#define RX_X1_ECC_CORRUPT_0_GEN2r_CORRUPT_ECC_CL91_FEC_RAM1_HIf_GET BCMI_TSCF_XGXS_RX_X1_ECC_CORRUPT_0_GEN2r_CORRUPT_ECC_CL91_FEC_RAM1_HIf_GET
#define RX_X1_ECC_CORRUPT_0_GEN2r_CORRUPT_ECC_CL91_FEC_RAM1_HIf_SET BCMI_TSCF_XGXS_RX_X1_ECC_CORRUPT_0_GEN2r_CORRUPT_ECC_CL91_FEC_RAM1_HIf_SET
#define RX_X1_ECC_CORRUPT_0_GEN2r_CORRUPT_ECC_CL91_FEC_RAM1_LOf_GET BCMI_TSCF_XGXS_RX_X1_ECC_CORRUPT_0_GEN2r_CORRUPT_ECC_CL91_FEC_RAM1_LOf_GET
#define RX_X1_ECC_CORRUPT_0_GEN2r_CORRUPT_ECC_CL91_FEC_RAM1_LOf_SET BCMI_TSCF_XGXS_RX_X1_ECC_CORRUPT_0_GEN2r_CORRUPT_ECC_CL91_FEC_RAM1_LOf_SET
#define RX_X1_ECC_CORRUPT_0_GEN2r_CORRUPT_ECC_FEC_MEM_3f_GET BCMI_TSCF_XGXS_RX_X1_ECC_CORRUPT_0_GEN2r_CORRUPT_ECC_FEC_MEM_3f_GET
#define RX_X1_ECC_CORRUPT_0_GEN2r_CORRUPT_ECC_FEC_MEM_3f_SET BCMI_TSCF_XGXS_RX_X1_ECC_CORRUPT_0_GEN2r_CORRUPT_ECC_FEC_MEM_3f_SET
#define RX_X1_ECC_CORRUPT_0_GEN2r_CORRUPT_ECC_FEC_MEM_2f_GET BCMI_TSCF_XGXS_RX_X1_ECC_CORRUPT_0_GEN2r_CORRUPT_ECC_FEC_MEM_2f_GET
#define RX_X1_ECC_CORRUPT_0_GEN2r_CORRUPT_ECC_FEC_MEM_2f_SET BCMI_TSCF_XGXS_RX_X1_ECC_CORRUPT_0_GEN2r_CORRUPT_ECC_FEC_MEM_2f_SET
#define RX_X1_ECC_CORRUPT_0_GEN2r_CORRUPT_ECC_FEC_MEM_1f_GET BCMI_TSCF_XGXS_RX_X1_ECC_CORRUPT_0_GEN2r_CORRUPT_ECC_FEC_MEM_1f_GET
#define RX_X1_ECC_CORRUPT_0_GEN2r_CORRUPT_ECC_FEC_MEM_1f_SET BCMI_TSCF_XGXS_RX_X1_ECC_CORRUPT_0_GEN2r_CORRUPT_ECC_FEC_MEM_1f_SET
#define RX_X1_ECC_CORRUPT_0_GEN2r_CORRUPT_ECC_FEC_MEM_0f_GET BCMI_TSCF_XGXS_RX_X1_ECC_CORRUPT_0_GEN2r_CORRUPT_ECC_FEC_MEM_0f_GET
#define RX_X1_ECC_CORRUPT_0_GEN2r_CORRUPT_ECC_FEC_MEM_0f_SET BCMI_TSCF_XGXS_RX_X1_ECC_CORRUPT_0_GEN2r_CORRUPT_ECC_FEC_MEM_0f_SET
#define READ_RX_X1_ECC_CORRUPT_0_GEN2r BCMI_TSCF_XGXS_READ_RX_X1_ECC_CORRUPT_0_GEN2r
#define WRITE_RX_X1_ECC_CORRUPT_0_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X1_ECC_CORRUPT_0_GEN2r
#define MODIFY_RX_X1_ECC_CORRUPT_0_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X1_ECC_CORRUPT_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X1_ECC_CORRUPT_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X1_OUI_UPR_GEN2
 * BLOCKS:   AN_X1_CONTROL
 * REGADDR:  0x9240
 * DESC:     OUI UPPER BITS REGISTER
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     OUI_UPPER_DATA   UPPER 8 BITS OF OUI FIELD
 */
#define BCMI_TSCF_XGXS_AN_X1_OUI_UPR_GEN2r (0x00109240 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X1_OUI_UPR_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X1_OUI_UPR_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X1_OUI_UPR_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x1_oui_upr_gen2[1];
	uint32_t _an_x1_oui_upr_gen2;
} BCMI_TSCF_XGXS_AN_X1_OUI_UPR_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X1_OUI_UPR_GEN2r_CLR(r) (r).an_x1_oui_upr_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X1_OUI_UPR_GEN2r_SET(r,d) (r).an_x1_oui_upr_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X1_OUI_UPR_GEN2r_GET(r) (r).an_x1_oui_upr_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X1_OUI_UPR_GEN2r_OUI_UPPER_DATAf_GET(r) (((r).an_x1_oui_upr_gen2[0]) & 0xff)
#define BCMI_TSCF_XGXS_AN_X1_OUI_UPR_GEN2r_OUI_UPPER_DATAf_SET(r,f) (r).an_x1_oui_upr_gen2[0]=(((r).an_x1_oui_upr_gen2[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access AN_X1_OUI_UPR_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X1_OUI_UPR_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X1_OUI_UPR_GEN2r,(_r._an_x1_oui_upr_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X1_OUI_UPR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X1_OUI_UPR_GEN2r,(_r._an_x1_oui_upr_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X1_OUI_UPR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X1_OUI_UPR_GEN2r,(_r._an_x1_oui_upr_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X1_OUI_UPR_GEN2r BCMI_TSCF_XGXS_AN_X1_OUI_UPR_GEN2r
#define AN_X1_OUI_UPR_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X1_OUI_UPR_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X1_OUI_UPR_GEN2r_t AN_X1_OUI_UPR_GEN2r_t;
#define AN_X1_OUI_UPR_GEN2r_CLR BCMI_TSCF_XGXS_AN_X1_OUI_UPR_GEN2r_CLR
#define AN_X1_OUI_UPR_GEN2r_SET BCMI_TSCF_XGXS_AN_X1_OUI_UPR_GEN2r_SET
#define AN_X1_OUI_UPR_GEN2r_GET BCMI_TSCF_XGXS_AN_X1_OUI_UPR_GEN2r_GET
#define AN_X1_OUI_UPR_GEN2r_OUI_UPPER_DATAf_GET BCMI_TSCF_XGXS_AN_X1_OUI_UPR_GEN2r_OUI_UPPER_DATAf_GET
#define AN_X1_OUI_UPR_GEN2r_OUI_UPPER_DATAf_SET BCMI_TSCF_XGXS_AN_X1_OUI_UPR_GEN2r_OUI_UPPER_DATAf_SET
#define READ_AN_X1_OUI_UPR_GEN2r BCMI_TSCF_XGXS_READ_AN_X1_OUI_UPR_GEN2r
#define WRITE_AN_X1_OUI_UPR_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X1_OUI_UPR_GEN2r
#define MODIFY_AN_X1_OUI_UPR_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X1_OUI_UPR_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X1_OUI_UPR_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X1_OUI_LWR_GEN2
 * BLOCKS:   AN_X1_CONTROL
 * REGADDR:  0x9241
 * DESC:     OUI LOWEr BITS REGISTER
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     OUI_LOWER_DATA   LOWER 16 BITS OF OUI FIELD
 */
#define BCMI_TSCF_XGXS_AN_X1_OUI_LWR_GEN2r (0x00109241 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X1_OUI_LWR_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X1_OUI_LWR_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X1_OUI_LWR_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x1_oui_lwr_gen2[1];
	uint32_t _an_x1_oui_lwr_gen2;
} BCMI_TSCF_XGXS_AN_X1_OUI_LWR_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X1_OUI_LWR_GEN2r_CLR(r) (r).an_x1_oui_lwr_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X1_OUI_LWR_GEN2r_SET(r,d) (r).an_x1_oui_lwr_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X1_OUI_LWR_GEN2r_GET(r) (r).an_x1_oui_lwr_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X1_OUI_LWR_GEN2r_OUI_LOWER_DATAf_GET(r) (((r).an_x1_oui_lwr_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_AN_X1_OUI_LWR_GEN2r_OUI_LOWER_DATAf_SET(r,f) (r).an_x1_oui_lwr_gen2[0]=(((r).an_x1_oui_lwr_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AN_X1_OUI_LWR_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X1_OUI_LWR_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X1_OUI_LWR_GEN2r,(_r._an_x1_oui_lwr_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X1_OUI_LWR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X1_OUI_LWR_GEN2r,(_r._an_x1_oui_lwr_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X1_OUI_LWR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X1_OUI_LWR_GEN2r,(_r._an_x1_oui_lwr_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X1_OUI_LWR_GEN2r BCMI_TSCF_XGXS_AN_X1_OUI_LWR_GEN2r
#define AN_X1_OUI_LWR_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X1_OUI_LWR_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X1_OUI_LWR_GEN2r_t AN_X1_OUI_LWR_GEN2r_t;
#define AN_X1_OUI_LWR_GEN2r_CLR BCMI_TSCF_XGXS_AN_X1_OUI_LWR_GEN2r_CLR
#define AN_X1_OUI_LWR_GEN2r_SET BCMI_TSCF_XGXS_AN_X1_OUI_LWR_GEN2r_SET
#define AN_X1_OUI_LWR_GEN2r_GET BCMI_TSCF_XGXS_AN_X1_OUI_LWR_GEN2r_GET
#define AN_X1_OUI_LWR_GEN2r_OUI_LOWER_DATAf_GET BCMI_TSCF_XGXS_AN_X1_OUI_LWR_GEN2r_OUI_LOWER_DATAf_GET
#define AN_X1_OUI_LWR_GEN2r_OUI_LOWER_DATAf_SET BCMI_TSCF_XGXS_AN_X1_OUI_LWR_GEN2r_OUI_LOWER_DATAf_SET
#define READ_AN_X1_OUI_LWR_GEN2r BCMI_TSCF_XGXS_READ_AN_X1_OUI_LWR_GEN2r
#define WRITE_AN_X1_OUI_LWR_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X1_OUI_LWR_GEN2r
#define MODIFY_AN_X1_OUI_LWR_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X1_OUI_LWR_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X1_OUI_LWR_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X1_BAM_SPD_PRI_0_GEN2
 * BLOCKS:   AN_X1_CONTROL
 * REGADDR:  0x9242
 * DESC:     REMAP PRIORITY REGISTER
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AN_PRIORITY_100G_CR4 HCD PRIORITY OVERRIDE FOR PRIORITY 100G_CR4 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_100G_HG2_CR4 HCD PRIORITY OVERRIDE FOR PRIORITY 100G_HG2_CR4 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_100G_KR4 HCD PRIORITY OVERRIDE FOR PRIORITY 100G_KR4 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_100G_HG2_KR4 HCD PRIORITY OVERRIDE FOR PRIORITY 100G_HG2_KR4 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_40G_CR4 HCD PRIORITY OVERRIDE FOR PRIORITY 40G_CR4 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_40G_HG2_CR4 HCD PRIORITY OVERRIDE FOR PRIORITY 40G_HG2_CR4 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_40G_KR4 HCD PRIORITY OVERRIDE FOR PRIORITY 40G_KR4 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_40G_HG2_KR4 HCD PRIORITY OVERRIDE FOR PRIORITY 40G_HG2_KR4 SPEED.  ZERO MEANS USE HW PRIORITY
 */
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_0_GEN2r (0x00109242 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X1_BAM_SPD_PRI_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_0_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x1_bam_spd_pri_0_gen2[1];
	uint32_t _an_x1_bam_spd_pri_0_gen2;
} BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_0_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_0_GEN2r_CLR(r) (r).an_x1_bam_spd_pri_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_0_GEN2r_SET(r,d) (r).an_x1_bam_spd_pri_0_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_0_GEN2r_GET(r) (r).an_x1_bam_spd_pri_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_0_GEN2r_AN_PRIORITY_40G_HG2_KR4f_GET(r) ((((r).an_x1_bam_spd_pri_0_gen2[0]) >> 14) & 0x3)
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_0_GEN2r_AN_PRIORITY_40G_HG2_KR4f_SET(r,f) (r).an_x1_bam_spd_pri_0_gen2[0]=(((r).an_x1_bam_spd_pri_0_gen2[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_0_GEN2r_AN_PRIORITY_40G_KR4f_GET(r) ((((r).an_x1_bam_spd_pri_0_gen2[0]) >> 12) & 0x3)
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_0_GEN2r_AN_PRIORITY_40G_KR4f_SET(r,f) (r).an_x1_bam_spd_pri_0_gen2[0]=(((r).an_x1_bam_spd_pri_0_gen2[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12)) | (3 << (16 + 12))
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_0_GEN2r_AN_PRIORITY_40G_HG2_CR4f_GET(r) ((((r).an_x1_bam_spd_pri_0_gen2[0]) >> 10) & 0x3)
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_0_GEN2r_AN_PRIORITY_40G_HG2_CR4f_SET(r,f) (r).an_x1_bam_spd_pri_0_gen2[0]=(((r).an_x1_bam_spd_pri_0_gen2[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10)) | (3 << (16 + 10))
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_0_GEN2r_AN_PRIORITY_40G_CR4f_GET(r) ((((r).an_x1_bam_spd_pri_0_gen2[0]) >> 8) & 0x3)
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_0_GEN2r_AN_PRIORITY_40G_CR4f_SET(r,f) (r).an_x1_bam_spd_pri_0_gen2[0]=(((r).an_x1_bam_spd_pri_0_gen2[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_0_GEN2r_AN_PRIORITY_100G_HG2_KR4f_GET(r) ((((r).an_x1_bam_spd_pri_0_gen2[0]) >> 6) & 0x3)
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_0_GEN2r_AN_PRIORITY_100G_HG2_KR4f_SET(r,f) (r).an_x1_bam_spd_pri_0_gen2[0]=(((r).an_x1_bam_spd_pri_0_gen2[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6)) | (3 << (16 + 6))
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_0_GEN2r_AN_PRIORITY_100G_KR4f_GET(r) ((((r).an_x1_bam_spd_pri_0_gen2[0]) >> 4) & 0x3)
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_0_GEN2r_AN_PRIORITY_100G_KR4f_SET(r,f) (r).an_x1_bam_spd_pri_0_gen2[0]=(((r).an_x1_bam_spd_pri_0_gen2[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_0_GEN2r_AN_PRIORITY_100G_HG2_CR4f_GET(r) ((((r).an_x1_bam_spd_pri_0_gen2[0]) >> 2) & 0x3)
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_0_GEN2r_AN_PRIORITY_100G_HG2_CR4f_SET(r,f) (r).an_x1_bam_spd_pri_0_gen2[0]=(((r).an_x1_bam_spd_pri_0_gen2[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2)) | (3 << (16 + 2))
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_0_GEN2r_AN_PRIORITY_100G_CR4f_GET(r) (((r).an_x1_bam_spd_pri_0_gen2[0]) & 0x3)
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_0_GEN2r_AN_PRIORITY_100G_CR4f_SET(r,f) (r).an_x1_bam_spd_pri_0_gen2[0]=(((r).an_x1_bam_spd_pri_0_gen2[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access AN_X1_BAM_SPD_PRI_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X1_BAM_SPD_PRI_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_0_GEN2r,(_r._an_x1_bam_spd_pri_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X1_BAM_SPD_PRI_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_0_GEN2r,(_r._an_x1_bam_spd_pri_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X1_BAM_SPD_PRI_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_0_GEN2r,(_r._an_x1_bam_spd_pri_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X1_BAM_SPD_PRI_0_GEN2r BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_0_GEN2r
#define AN_X1_BAM_SPD_PRI_0_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_0_GEN2r_t AN_X1_BAM_SPD_PRI_0_GEN2r_t;
#define AN_X1_BAM_SPD_PRI_0_GEN2r_CLR BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_0_GEN2r_CLR
#define AN_X1_BAM_SPD_PRI_0_GEN2r_SET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_0_GEN2r_SET
#define AN_X1_BAM_SPD_PRI_0_GEN2r_GET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_0_GEN2r_GET
#define AN_X1_BAM_SPD_PRI_0_GEN2r_AN_PRIORITY_40G_HG2_KR4f_GET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_0_GEN2r_AN_PRIORITY_40G_HG2_KR4f_GET
#define AN_X1_BAM_SPD_PRI_0_GEN2r_AN_PRIORITY_40G_HG2_KR4f_SET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_0_GEN2r_AN_PRIORITY_40G_HG2_KR4f_SET
#define AN_X1_BAM_SPD_PRI_0_GEN2r_AN_PRIORITY_40G_KR4f_GET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_0_GEN2r_AN_PRIORITY_40G_KR4f_GET
#define AN_X1_BAM_SPD_PRI_0_GEN2r_AN_PRIORITY_40G_KR4f_SET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_0_GEN2r_AN_PRIORITY_40G_KR4f_SET
#define AN_X1_BAM_SPD_PRI_0_GEN2r_AN_PRIORITY_40G_HG2_CR4f_GET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_0_GEN2r_AN_PRIORITY_40G_HG2_CR4f_GET
#define AN_X1_BAM_SPD_PRI_0_GEN2r_AN_PRIORITY_40G_HG2_CR4f_SET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_0_GEN2r_AN_PRIORITY_40G_HG2_CR4f_SET
#define AN_X1_BAM_SPD_PRI_0_GEN2r_AN_PRIORITY_40G_CR4f_GET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_0_GEN2r_AN_PRIORITY_40G_CR4f_GET
#define AN_X1_BAM_SPD_PRI_0_GEN2r_AN_PRIORITY_40G_CR4f_SET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_0_GEN2r_AN_PRIORITY_40G_CR4f_SET
#define AN_X1_BAM_SPD_PRI_0_GEN2r_AN_PRIORITY_100G_HG2_KR4f_GET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_0_GEN2r_AN_PRIORITY_100G_HG2_KR4f_GET
#define AN_X1_BAM_SPD_PRI_0_GEN2r_AN_PRIORITY_100G_HG2_KR4f_SET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_0_GEN2r_AN_PRIORITY_100G_HG2_KR4f_SET
#define AN_X1_BAM_SPD_PRI_0_GEN2r_AN_PRIORITY_100G_KR4f_GET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_0_GEN2r_AN_PRIORITY_100G_KR4f_GET
#define AN_X1_BAM_SPD_PRI_0_GEN2r_AN_PRIORITY_100G_KR4f_SET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_0_GEN2r_AN_PRIORITY_100G_KR4f_SET
#define AN_X1_BAM_SPD_PRI_0_GEN2r_AN_PRIORITY_100G_HG2_CR4f_GET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_0_GEN2r_AN_PRIORITY_100G_HG2_CR4f_GET
#define AN_X1_BAM_SPD_PRI_0_GEN2r_AN_PRIORITY_100G_HG2_CR4f_SET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_0_GEN2r_AN_PRIORITY_100G_HG2_CR4f_SET
#define AN_X1_BAM_SPD_PRI_0_GEN2r_AN_PRIORITY_100G_CR4f_GET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_0_GEN2r_AN_PRIORITY_100G_CR4f_GET
#define AN_X1_BAM_SPD_PRI_0_GEN2r_AN_PRIORITY_100G_CR4f_SET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_0_GEN2r_AN_PRIORITY_100G_CR4f_SET
#define READ_AN_X1_BAM_SPD_PRI_0_GEN2r BCMI_TSCF_XGXS_READ_AN_X1_BAM_SPD_PRI_0_GEN2r
#define WRITE_AN_X1_BAM_SPD_PRI_0_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X1_BAM_SPD_PRI_0_GEN2r
#define MODIFY_AN_X1_BAM_SPD_PRI_0_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X1_BAM_SPD_PRI_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X1_BAM_SPD_PRI_1_GEN2
 * BLOCKS:   AN_X1_CONTROL
 * REGADDR:  0x9243
 * DESC:     REMAP PRIORITY REGISTER
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AN_PRIORITY_50G_CR4 HCD PRIORITY OVERRIDE FOR PRIORITY 50G_CR4 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_50G_HG2_CR4 HCD PRIORITY OVERRIDE FOR PRIORITY 50G_HG2_CR4 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_50G_KR4 HCD PRIORITY OVERRIDE FOR PRIORITY 50G_KR4 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_50G_HG2_KR4 HCD PRIORITY OVERRIDE FOR PRIORITY 50G_HG2_KR4 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_50G_CR2 HCD PRIORITY OVERRIDE FOR PRIORITY 50G_CR2 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_50G_HG2_CR2 HCD PRIORITY OVERRIDE FOR PRIORITY 50G_HG2_CR2 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_50G_KR2 HCD PRIORITY OVERRIDE FOR PRIORITY 50G_KR2 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_50G_HG2_KR2 HCD PRIORITY OVERRIDE FOR PRIORITY 50G_HG2_KR2 SPEED.  ZERO MEANS USE HW PRIORITY
 */
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_1_GEN2r (0x00109243 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X1_BAM_SPD_PRI_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_1_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x1_bam_spd_pri_1_gen2[1];
	uint32_t _an_x1_bam_spd_pri_1_gen2;
} BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_1_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_1_GEN2r_CLR(r) (r).an_x1_bam_spd_pri_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_1_GEN2r_SET(r,d) (r).an_x1_bam_spd_pri_1_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_1_GEN2r_GET(r) (r).an_x1_bam_spd_pri_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_1_GEN2r_AN_PRIORITY_50G_HG2_KR2f_GET(r) ((((r).an_x1_bam_spd_pri_1_gen2[0]) >> 14) & 0x3)
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_1_GEN2r_AN_PRIORITY_50G_HG2_KR2f_SET(r,f) (r).an_x1_bam_spd_pri_1_gen2[0]=(((r).an_x1_bam_spd_pri_1_gen2[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_1_GEN2r_AN_PRIORITY_50G_KR2f_GET(r) ((((r).an_x1_bam_spd_pri_1_gen2[0]) >> 12) & 0x3)
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_1_GEN2r_AN_PRIORITY_50G_KR2f_SET(r,f) (r).an_x1_bam_spd_pri_1_gen2[0]=(((r).an_x1_bam_spd_pri_1_gen2[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12)) | (3 << (16 + 12))
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_1_GEN2r_AN_PRIORITY_50G_HG2_CR2f_GET(r) ((((r).an_x1_bam_spd_pri_1_gen2[0]) >> 10) & 0x3)
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_1_GEN2r_AN_PRIORITY_50G_HG2_CR2f_SET(r,f) (r).an_x1_bam_spd_pri_1_gen2[0]=(((r).an_x1_bam_spd_pri_1_gen2[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10)) | (3 << (16 + 10))
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_1_GEN2r_AN_PRIORITY_50G_CR2f_GET(r) ((((r).an_x1_bam_spd_pri_1_gen2[0]) >> 8) & 0x3)
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_1_GEN2r_AN_PRIORITY_50G_CR2f_SET(r,f) (r).an_x1_bam_spd_pri_1_gen2[0]=(((r).an_x1_bam_spd_pri_1_gen2[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_1_GEN2r_AN_PRIORITY_50G_HG2_KR4f_GET(r) ((((r).an_x1_bam_spd_pri_1_gen2[0]) >> 6) & 0x3)
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_1_GEN2r_AN_PRIORITY_50G_HG2_KR4f_SET(r,f) (r).an_x1_bam_spd_pri_1_gen2[0]=(((r).an_x1_bam_spd_pri_1_gen2[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6)) | (3 << (16 + 6))
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_1_GEN2r_AN_PRIORITY_50G_KR4f_GET(r) ((((r).an_x1_bam_spd_pri_1_gen2[0]) >> 4) & 0x3)
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_1_GEN2r_AN_PRIORITY_50G_KR4f_SET(r,f) (r).an_x1_bam_spd_pri_1_gen2[0]=(((r).an_x1_bam_spd_pri_1_gen2[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_1_GEN2r_AN_PRIORITY_50G_HG2_CR4f_GET(r) ((((r).an_x1_bam_spd_pri_1_gen2[0]) >> 2) & 0x3)
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_1_GEN2r_AN_PRIORITY_50G_HG2_CR4f_SET(r,f) (r).an_x1_bam_spd_pri_1_gen2[0]=(((r).an_x1_bam_spd_pri_1_gen2[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2)) | (3 << (16 + 2))
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_1_GEN2r_AN_PRIORITY_50G_CR4f_GET(r) (((r).an_x1_bam_spd_pri_1_gen2[0]) & 0x3)
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_1_GEN2r_AN_PRIORITY_50G_CR4f_SET(r,f) (r).an_x1_bam_spd_pri_1_gen2[0]=(((r).an_x1_bam_spd_pri_1_gen2[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access AN_X1_BAM_SPD_PRI_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X1_BAM_SPD_PRI_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_1_GEN2r,(_r._an_x1_bam_spd_pri_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X1_BAM_SPD_PRI_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_1_GEN2r,(_r._an_x1_bam_spd_pri_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X1_BAM_SPD_PRI_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_1_GEN2r,(_r._an_x1_bam_spd_pri_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X1_BAM_SPD_PRI_1_GEN2r BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_1_GEN2r
#define AN_X1_BAM_SPD_PRI_1_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_1_GEN2r_t AN_X1_BAM_SPD_PRI_1_GEN2r_t;
#define AN_X1_BAM_SPD_PRI_1_GEN2r_CLR BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_1_GEN2r_CLR
#define AN_X1_BAM_SPD_PRI_1_GEN2r_SET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_1_GEN2r_SET
#define AN_X1_BAM_SPD_PRI_1_GEN2r_GET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_1_GEN2r_GET
#define AN_X1_BAM_SPD_PRI_1_GEN2r_AN_PRIORITY_50G_HG2_KR2f_GET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_1_GEN2r_AN_PRIORITY_50G_HG2_KR2f_GET
#define AN_X1_BAM_SPD_PRI_1_GEN2r_AN_PRIORITY_50G_HG2_KR2f_SET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_1_GEN2r_AN_PRIORITY_50G_HG2_KR2f_SET
#define AN_X1_BAM_SPD_PRI_1_GEN2r_AN_PRIORITY_50G_KR2f_GET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_1_GEN2r_AN_PRIORITY_50G_KR2f_GET
#define AN_X1_BAM_SPD_PRI_1_GEN2r_AN_PRIORITY_50G_KR2f_SET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_1_GEN2r_AN_PRIORITY_50G_KR2f_SET
#define AN_X1_BAM_SPD_PRI_1_GEN2r_AN_PRIORITY_50G_HG2_CR2f_GET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_1_GEN2r_AN_PRIORITY_50G_HG2_CR2f_GET
#define AN_X1_BAM_SPD_PRI_1_GEN2r_AN_PRIORITY_50G_HG2_CR2f_SET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_1_GEN2r_AN_PRIORITY_50G_HG2_CR2f_SET
#define AN_X1_BAM_SPD_PRI_1_GEN2r_AN_PRIORITY_50G_CR2f_GET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_1_GEN2r_AN_PRIORITY_50G_CR2f_GET
#define AN_X1_BAM_SPD_PRI_1_GEN2r_AN_PRIORITY_50G_CR2f_SET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_1_GEN2r_AN_PRIORITY_50G_CR2f_SET
#define AN_X1_BAM_SPD_PRI_1_GEN2r_AN_PRIORITY_50G_HG2_KR4f_GET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_1_GEN2r_AN_PRIORITY_50G_HG2_KR4f_GET
#define AN_X1_BAM_SPD_PRI_1_GEN2r_AN_PRIORITY_50G_HG2_KR4f_SET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_1_GEN2r_AN_PRIORITY_50G_HG2_KR4f_SET
#define AN_X1_BAM_SPD_PRI_1_GEN2r_AN_PRIORITY_50G_KR4f_GET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_1_GEN2r_AN_PRIORITY_50G_KR4f_GET
#define AN_X1_BAM_SPD_PRI_1_GEN2r_AN_PRIORITY_50G_KR4f_SET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_1_GEN2r_AN_PRIORITY_50G_KR4f_SET
#define AN_X1_BAM_SPD_PRI_1_GEN2r_AN_PRIORITY_50G_HG2_CR4f_GET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_1_GEN2r_AN_PRIORITY_50G_HG2_CR4f_GET
#define AN_X1_BAM_SPD_PRI_1_GEN2r_AN_PRIORITY_50G_HG2_CR4f_SET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_1_GEN2r_AN_PRIORITY_50G_HG2_CR4f_SET
#define AN_X1_BAM_SPD_PRI_1_GEN2r_AN_PRIORITY_50G_CR4f_GET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_1_GEN2r_AN_PRIORITY_50G_CR4f_GET
#define AN_X1_BAM_SPD_PRI_1_GEN2r_AN_PRIORITY_50G_CR4f_SET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_1_GEN2r_AN_PRIORITY_50G_CR4f_SET
#define READ_AN_X1_BAM_SPD_PRI_1_GEN2r BCMI_TSCF_XGXS_READ_AN_X1_BAM_SPD_PRI_1_GEN2r
#define WRITE_AN_X1_BAM_SPD_PRI_1_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X1_BAM_SPD_PRI_1_GEN2r
#define MODIFY_AN_X1_BAM_SPD_PRI_1_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X1_BAM_SPD_PRI_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X1_BAM_SPD_PRI_2_GEN2
 * BLOCKS:   AN_X1_CONTROL
 * REGADDR:  0x9244
 * DESC:     REMAP PRIORITY REGISTER
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AN_PRIORITY_40G_CR2 HCD PRIORITY OVERRIDE FOR PRIORITY 40G_CR2 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_40G_HG2_CR2 HCD PRIORITY OVERRIDE FOR PRIORITY 40G_HG2_CR2 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_40G_KR2 HCD PRIORITY OVERRIDE FOR PRIORITY 40G_KR2 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_40G_HG2_KR2 HCD PRIORITY OVERRIDE FOR PRIORITY 40G_HG2_KR2 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_25G_CR1 HCD PRIORITY OVERRIDE FOR PRIORITY 25G_CR1 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_25G_HG2_CR1 HCD PRIORITY OVERRIDE FOR PRIORITY 25G_HG2_CR1 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_25G_KR1 HCD PRIORITY OVERRIDE FOR PRIORITY 25G_KR1 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_25G_HG2_KR1 HCD PRIORITY OVERRIDE FOR PRIORITY 25G_HG2_KR1 SPEED.  ZERO MEANS USE HW PRIORITY
 */
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_2_GEN2r (0x00109244 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X1_BAM_SPD_PRI_2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_2_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x1_bam_spd_pri_2_gen2[1];
	uint32_t _an_x1_bam_spd_pri_2_gen2;
} BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_2_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_2_GEN2r_CLR(r) (r).an_x1_bam_spd_pri_2_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_2_GEN2r_SET(r,d) (r).an_x1_bam_spd_pri_2_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_2_GEN2r_GET(r) (r).an_x1_bam_spd_pri_2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_2_GEN2r_AN_PRIORITY_25G_HG2_KR1f_GET(r) ((((r).an_x1_bam_spd_pri_2_gen2[0]) >> 14) & 0x3)
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_2_GEN2r_AN_PRIORITY_25G_HG2_KR1f_SET(r,f) (r).an_x1_bam_spd_pri_2_gen2[0]=(((r).an_x1_bam_spd_pri_2_gen2[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_2_GEN2r_AN_PRIORITY_25G_KR1f_GET(r) ((((r).an_x1_bam_spd_pri_2_gen2[0]) >> 12) & 0x3)
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_2_GEN2r_AN_PRIORITY_25G_KR1f_SET(r,f) (r).an_x1_bam_spd_pri_2_gen2[0]=(((r).an_x1_bam_spd_pri_2_gen2[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12)) | (3 << (16 + 12))
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_2_GEN2r_AN_PRIORITY_25G_HG2_CR1f_GET(r) ((((r).an_x1_bam_spd_pri_2_gen2[0]) >> 10) & 0x3)
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_2_GEN2r_AN_PRIORITY_25G_HG2_CR1f_SET(r,f) (r).an_x1_bam_spd_pri_2_gen2[0]=(((r).an_x1_bam_spd_pri_2_gen2[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10)) | (3 << (16 + 10))
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_2_GEN2r_AN_PRIORITY_25G_CR1f_GET(r) ((((r).an_x1_bam_spd_pri_2_gen2[0]) >> 8) & 0x3)
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_2_GEN2r_AN_PRIORITY_25G_CR1f_SET(r,f) (r).an_x1_bam_spd_pri_2_gen2[0]=(((r).an_x1_bam_spd_pri_2_gen2[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_2_GEN2r_AN_PRIORITY_40G_HG2_KR2f_GET(r) ((((r).an_x1_bam_spd_pri_2_gen2[0]) >> 6) & 0x3)
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_2_GEN2r_AN_PRIORITY_40G_HG2_KR2f_SET(r,f) (r).an_x1_bam_spd_pri_2_gen2[0]=(((r).an_x1_bam_spd_pri_2_gen2[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6)) | (3 << (16 + 6))
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_2_GEN2r_AN_PRIORITY_40G_KR2f_GET(r) ((((r).an_x1_bam_spd_pri_2_gen2[0]) >> 4) & 0x3)
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_2_GEN2r_AN_PRIORITY_40G_KR2f_SET(r,f) (r).an_x1_bam_spd_pri_2_gen2[0]=(((r).an_x1_bam_spd_pri_2_gen2[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_2_GEN2r_AN_PRIORITY_40G_HG2_CR2f_GET(r) ((((r).an_x1_bam_spd_pri_2_gen2[0]) >> 2) & 0x3)
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_2_GEN2r_AN_PRIORITY_40G_HG2_CR2f_SET(r,f) (r).an_x1_bam_spd_pri_2_gen2[0]=(((r).an_x1_bam_spd_pri_2_gen2[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2)) | (3 << (16 + 2))
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_2_GEN2r_AN_PRIORITY_40G_CR2f_GET(r) (((r).an_x1_bam_spd_pri_2_gen2[0]) & 0x3)
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_2_GEN2r_AN_PRIORITY_40G_CR2f_SET(r,f) (r).an_x1_bam_spd_pri_2_gen2[0]=(((r).an_x1_bam_spd_pri_2_gen2[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access AN_X1_BAM_SPD_PRI_2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X1_BAM_SPD_PRI_2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_2_GEN2r,(_r._an_x1_bam_spd_pri_2_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X1_BAM_SPD_PRI_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_2_GEN2r,(_r._an_x1_bam_spd_pri_2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X1_BAM_SPD_PRI_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_2_GEN2r,(_r._an_x1_bam_spd_pri_2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X1_BAM_SPD_PRI_2_GEN2r BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_2_GEN2r
#define AN_X1_BAM_SPD_PRI_2_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_2_GEN2r_t AN_X1_BAM_SPD_PRI_2_GEN2r_t;
#define AN_X1_BAM_SPD_PRI_2_GEN2r_CLR BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_2_GEN2r_CLR
#define AN_X1_BAM_SPD_PRI_2_GEN2r_SET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_2_GEN2r_SET
#define AN_X1_BAM_SPD_PRI_2_GEN2r_GET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_2_GEN2r_GET
#define AN_X1_BAM_SPD_PRI_2_GEN2r_AN_PRIORITY_25G_HG2_KR1f_GET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_2_GEN2r_AN_PRIORITY_25G_HG2_KR1f_GET
#define AN_X1_BAM_SPD_PRI_2_GEN2r_AN_PRIORITY_25G_HG2_KR1f_SET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_2_GEN2r_AN_PRIORITY_25G_HG2_KR1f_SET
#define AN_X1_BAM_SPD_PRI_2_GEN2r_AN_PRIORITY_25G_KR1f_GET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_2_GEN2r_AN_PRIORITY_25G_KR1f_GET
#define AN_X1_BAM_SPD_PRI_2_GEN2r_AN_PRIORITY_25G_KR1f_SET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_2_GEN2r_AN_PRIORITY_25G_KR1f_SET
#define AN_X1_BAM_SPD_PRI_2_GEN2r_AN_PRIORITY_25G_HG2_CR1f_GET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_2_GEN2r_AN_PRIORITY_25G_HG2_CR1f_GET
#define AN_X1_BAM_SPD_PRI_2_GEN2r_AN_PRIORITY_25G_HG2_CR1f_SET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_2_GEN2r_AN_PRIORITY_25G_HG2_CR1f_SET
#define AN_X1_BAM_SPD_PRI_2_GEN2r_AN_PRIORITY_25G_CR1f_GET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_2_GEN2r_AN_PRIORITY_25G_CR1f_GET
#define AN_X1_BAM_SPD_PRI_2_GEN2r_AN_PRIORITY_25G_CR1f_SET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_2_GEN2r_AN_PRIORITY_25G_CR1f_SET
#define AN_X1_BAM_SPD_PRI_2_GEN2r_AN_PRIORITY_40G_HG2_KR2f_GET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_2_GEN2r_AN_PRIORITY_40G_HG2_KR2f_GET
#define AN_X1_BAM_SPD_PRI_2_GEN2r_AN_PRIORITY_40G_HG2_KR2f_SET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_2_GEN2r_AN_PRIORITY_40G_HG2_KR2f_SET
#define AN_X1_BAM_SPD_PRI_2_GEN2r_AN_PRIORITY_40G_KR2f_GET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_2_GEN2r_AN_PRIORITY_40G_KR2f_GET
#define AN_X1_BAM_SPD_PRI_2_GEN2r_AN_PRIORITY_40G_KR2f_SET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_2_GEN2r_AN_PRIORITY_40G_KR2f_SET
#define AN_X1_BAM_SPD_PRI_2_GEN2r_AN_PRIORITY_40G_HG2_CR2f_GET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_2_GEN2r_AN_PRIORITY_40G_HG2_CR2f_GET
#define AN_X1_BAM_SPD_PRI_2_GEN2r_AN_PRIORITY_40G_HG2_CR2f_SET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_2_GEN2r_AN_PRIORITY_40G_HG2_CR2f_SET
#define AN_X1_BAM_SPD_PRI_2_GEN2r_AN_PRIORITY_40G_CR2f_GET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_2_GEN2r_AN_PRIORITY_40G_CR2f_GET
#define AN_X1_BAM_SPD_PRI_2_GEN2r_AN_PRIORITY_40G_CR2f_SET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_2_GEN2r_AN_PRIORITY_40G_CR2f_SET
#define READ_AN_X1_BAM_SPD_PRI_2_GEN2r BCMI_TSCF_XGXS_READ_AN_X1_BAM_SPD_PRI_2_GEN2r
#define WRITE_AN_X1_BAM_SPD_PRI_2_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X1_BAM_SPD_PRI_2_GEN2r
#define MODIFY_AN_X1_BAM_SPD_PRI_2_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X1_BAM_SPD_PRI_2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X1_BAM_SPD_PRI_3_GEN2
 * BLOCKS:   AN_X1_CONTROL
 * REGADDR:  0x9245
 * DESC:     REMAP PRIORITY REGISTER
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AN_PRIORITY_20G_CR1 HCD PRIORITY OVERRIDE FOR PRIORITY 20G_CR1 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_20G_HG2_CR1 HCD PRIORITY OVERRIDE FOR PRIORITY 20G_HG2_CR1 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_20G_KR1 HCD PRIORITY OVERRIDE FOR PRIORITY 20G_KR1 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_20G_HG2_KR1 HCD PRIORITY OVERRIDE FOR PRIORITY 20G_HG2_KR1 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_20G_CR2 HCD PRIORITY OVERRIDE FOR PRIORITY 20G_CR2 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_20G_HG2_CR2 HCD PRIORITY OVERRIDE FOR PRIORITY 20G_HG2_CR2 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_20G_KR2 HCD PRIORITY OVERRIDE FOR PRIORITY 20G_KR2 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_20G_HG2_KR2 HCD PRIORITY OVERRIDE FOR PRIORITY 20G_HG2_KR2 SPEED.  ZERO MEANS USE HW PRIORITY
 */
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_3_GEN2r (0x00109245 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_3_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X1_BAM_SPD_PRI_3_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_3_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x1_bam_spd_pri_3_gen2[1];
	uint32_t _an_x1_bam_spd_pri_3_gen2;
} BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_3_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_3_GEN2r_CLR(r) (r).an_x1_bam_spd_pri_3_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_3_GEN2r_SET(r,d) (r).an_x1_bam_spd_pri_3_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_3_GEN2r_GET(r) (r).an_x1_bam_spd_pri_3_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_3_GEN2r_AN_PRIORITY_20G_HG2_KR2f_GET(r) ((((r).an_x1_bam_spd_pri_3_gen2[0]) >> 14) & 0x3)
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_3_GEN2r_AN_PRIORITY_20G_HG2_KR2f_SET(r,f) (r).an_x1_bam_spd_pri_3_gen2[0]=(((r).an_x1_bam_spd_pri_3_gen2[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_3_GEN2r_AN_PRIORITY_20G_KR2f_GET(r) ((((r).an_x1_bam_spd_pri_3_gen2[0]) >> 12) & 0x3)
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_3_GEN2r_AN_PRIORITY_20G_KR2f_SET(r,f) (r).an_x1_bam_spd_pri_3_gen2[0]=(((r).an_x1_bam_spd_pri_3_gen2[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12)) | (3 << (16 + 12))
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_3_GEN2r_AN_PRIORITY_20G_HG2_CR2f_GET(r) ((((r).an_x1_bam_spd_pri_3_gen2[0]) >> 10) & 0x3)
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_3_GEN2r_AN_PRIORITY_20G_HG2_CR2f_SET(r,f) (r).an_x1_bam_spd_pri_3_gen2[0]=(((r).an_x1_bam_spd_pri_3_gen2[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10)) | (3 << (16 + 10))
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_3_GEN2r_AN_PRIORITY_20G_CR2f_GET(r) ((((r).an_x1_bam_spd_pri_3_gen2[0]) >> 8) & 0x3)
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_3_GEN2r_AN_PRIORITY_20G_CR2f_SET(r,f) (r).an_x1_bam_spd_pri_3_gen2[0]=(((r).an_x1_bam_spd_pri_3_gen2[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_3_GEN2r_AN_PRIORITY_20G_HG2_KR1f_GET(r) ((((r).an_x1_bam_spd_pri_3_gen2[0]) >> 6) & 0x3)
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_3_GEN2r_AN_PRIORITY_20G_HG2_KR1f_SET(r,f) (r).an_x1_bam_spd_pri_3_gen2[0]=(((r).an_x1_bam_spd_pri_3_gen2[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6)) | (3 << (16 + 6))
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_3_GEN2r_AN_PRIORITY_20G_KR1f_GET(r) ((((r).an_x1_bam_spd_pri_3_gen2[0]) >> 4) & 0x3)
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_3_GEN2r_AN_PRIORITY_20G_KR1f_SET(r,f) (r).an_x1_bam_spd_pri_3_gen2[0]=(((r).an_x1_bam_spd_pri_3_gen2[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_3_GEN2r_AN_PRIORITY_20G_HG2_CR1f_GET(r) ((((r).an_x1_bam_spd_pri_3_gen2[0]) >> 2) & 0x3)
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_3_GEN2r_AN_PRIORITY_20G_HG2_CR1f_SET(r,f) (r).an_x1_bam_spd_pri_3_gen2[0]=(((r).an_x1_bam_spd_pri_3_gen2[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2)) | (3 << (16 + 2))
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_3_GEN2r_AN_PRIORITY_20G_CR1f_GET(r) (((r).an_x1_bam_spd_pri_3_gen2[0]) & 0x3)
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_3_GEN2r_AN_PRIORITY_20G_CR1f_SET(r,f) (r).an_x1_bam_spd_pri_3_gen2[0]=(((r).an_x1_bam_spd_pri_3_gen2[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access AN_X1_BAM_SPD_PRI_3_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X1_BAM_SPD_PRI_3_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_3_GEN2r,(_r._an_x1_bam_spd_pri_3_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X1_BAM_SPD_PRI_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_3_GEN2r,(_r._an_x1_bam_spd_pri_3_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X1_BAM_SPD_PRI_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_3_GEN2r,(_r._an_x1_bam_spd_pri_3_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X1_BAM_SPD_PRI_3_GEN2r BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_3_GEN2r
#define AN_X1_BAM_SPD_PRI_3_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_3_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_3_GEN2r_t AN_X1_BAM_SPD_PRI_3_GEN2r_t;
#define AN_X1_BAM_SPD_PRI_3_GEN2r_CLR BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_3_GEN2r_CLR
#define AN_X1_BAM_SPD_PRI_3_GEN2r_SET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_3_GEN2r_SET
#define AN_X1_BAM_SPD_PRI_3_GEN2r_GET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_3_GEN2r_GET
#define AN_X1_BAM_SPD_PRI_3_GEN2r_AN_PRIORITY_20G_HG2_KR2f_GET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_3_GEN2r_AN_PRIORITY_20G_HG2_KR2f_GET
#define AN_X1_BAM_SPD_PRI_3_GEN2r_AN_PRIORITY_20G_HG2_KR2f_SET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_3_GEN2r_AN_PRIORITY_20G_HG2_KR2f_SET
#define AN_X1_BAM_SPD_PRI_3_GEN2r_AN_PRIORITY_20G_KR2f_GET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_3_GEN2r_AN_PRIORITY_20G_KR2f_GET
#define AN_X1_BAM_SPD_PRI_3_GEN2r_AN_PRIORITY_20G_KR2f_SET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_3_GEN2r_AN_PRIORITY_20G_KR2f_SET
#define AN_X1_BAM_SPD_PRI_3_GEN2r_AN_PRIORITY_20G_HG2_CR2f_GET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_3_GEN2r_AN_PRIORITY_20G_HG2_CR2f_GET
#define AN_X1_BAM_SPD_PRI_3_GEN2r_AN_PRIORITY_20G_HG2_CR2f_SET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_3_GEN2r_AN_PRIORITY_20G_HG2_CR2f_SET
#define AN_X1_BAM_SPD_PRI_3_GEN2r_AN_PRIORITY_20G_CR2f_GET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_3_GEN2r_AN_PRIORITY_20G_CR2f_GET
#define AN_X1_BAM_SPD_PRI_3_GEN2r_AN_PRIORITY_20G_CR2f_SET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_3_GEN2r_AN_PRIORITY_20G_CR2f_SET
#define AN_X1_BAM_SPD_PRI_3_GEN2r_AN_PRIORITY_20G_HG2_KR1f_GET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_3_GEN2r_AN_PRIORITY_20G_HG2_KR1f_GET
#define AN_X1_BAM_SPD_PRI_3_GEN2r_AN_PRIORITY_20G_HG2_KR1f_SET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_3_GEN2r_AN_PRIORITY_20G_HG2_KR1f_SET
#define AN_X1_BAM_SPD_PRI_3_GEN2r_AN_PRIORITY_20G_KR1f_GET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_3_GEN2r_AN_PRIORITY_20G_KR1f_GET
#define AN_X1_BAM_SPD_PRI_3_GEN2r_AN_PRIORITY_20G_KR1f_SET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_3_GEN2r_AN_PRIORITY_20G_KR1f_SET
#define AN_X1_BAM_SPD_PRI_3_GEN2r_AN_PRIORITY_20G_HG2_CR1f_GET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_3_GEN2r_AN_PRIORITY_20G_HG2_CR1f_GET
#define AN_X1_BAM_SPD_PRI_3_GEN2r_AN_PRIORITY_20G_HG2_CR1f_SET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_3_GEN2r_AN_PRIORITY_20G_HG2_CR1f_SET
#define AN_X1_BAM_SPD_PRI_3_GEN2r_AN_PRIORITY_20G_CR1f_GET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_3_GEN2r_AN_PRIORITY_20G_CR1f_GET
#define AN_X1_BAM_SPD_PRI_3_GEN2r_AN_PRIORITY_20G_CR1f_SET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_3_GEN2r_AN_PRIORITY_20G_CR1f_SET
#define READ_AN_X1_BAM_SPD_PRI_3_GEN2r BCMI_TSCF_XGXS_READ_AN_X1_BAM_SPD_PRI_3_GEN2r
#define WRITE_AN_X1_BAM_SPD_PRI_3_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X1_BAM_SPD_PRI_3_GEN2r
#define MODIFY_AN_X1_BAM_SPD_PRI_3_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X1_BAM_SPD_PRI_3_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_3_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X1_BAM_SPD_PRI_4_GEN2
 * BLOCKS:   AN_X1_CONTROL
 * REGADDR:  0x9246
 * DESC:     REMAP PRIORITY REGISTER
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AN_PRIORITY_10G_KR1 HCD PRIORITY OVERRIDE FOR PRIORITY 10G_KR1 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_10G_HG2_KR1 HCD PRIORITY OVERRIDE FOR PRIORITY 10G_HG2_KR1 SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_1G_KX1 HCD PRIORITY OVERRIDE FOR PRIORITY 1G_KX1 SPEED.  ZERO MEANS USE HW PRIORITY
 */
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_4_GEN2r (0x00109246 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_4_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X1_BAM_SPD_PRI_4_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_4_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x1_bam_spd_pri_4_gen2[1];
	uint32_t _an_x1_bam_spd_pri_4_gen2;
} BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_4_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_4_GEN2r_CLR(r) (r).an_x1_bam_spd_pri_4_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_4_GEN2r_SET(r,d) (r).an_x1_bam_spd_pri_4_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_4_GEN2r_GET(r) (r).an_x1_bam_spd_pri_4_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_4_GEN2r_AN_PRIORITY_1G_KX1f_GET(r) ((((r).an_x1_bam_spd_pri_4_gen2[0]) >> 4) & 0x3)
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_4_GEN2r_AN_PRIORITY_1G_KX1f_SET(r,f) (r).an_x1_bam_spd_pri_4_gen2[0]=(((r).an_x1_bam_spd_pri_4_gen2[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_4_GEN2r_AN_PRIORITY_10G_HG2_KR1f_GET(r) ((((r).an_x1_bam_spd_pri_4_gen2[0]) >> 2) & 0x3)
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_4_GEN2r_AN_PRIORITY_10G_HG2_KR1f_SET(r,f) (r).an_x1_bam_spd_pri_4_gen2[0]=(((r).an_x1_bam_spd_pri_4_gen2[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2)) | (3 << (16 + 2))
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_4_GEN2r_AN_PRIORITY_10G_KR1f_GET(r) (((r).an_x1_bam_spd_pri_4_gen2[0]) & 0x3)
#define BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_4_GEN2r_AN_PRIORITY_10G_KR1f_SET(r,f) (r).an_x1_bam_spd_pri_4_gen2[0]=(((r).an_x1_bam_spd_pri_4_gen2[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access AN_X1_BAM_SPD_PRI_4_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X1_BAM_SPD_PRI_4_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_4_GEN2r,(_r._an_x1_bam_spd_pri_4_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X1_BAM_SPD_PRI_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_4_GEN2r,(_r._an_x1_bam_spd_pri_4_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X1_BAM_SPD_PRI_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_4_GEN2r,(_r._an_x1_bam_spd_pri_4_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X1_BAM_SPD_PRI_4_GEN2r BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_4_GEN2r
#define AN_X1_BAM_SPD_PRI_4_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_4_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_4_GEN2r_t AN_X1_BAM_SPD_PRI_4_GEN2r_t;
#define AN_X1_BAM_SPD_PRI_4_GEN2r_CLR BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_4_GEN2r_CLR
#define AN_X1_BAM_SPD_PRI_4_GEN2r_SET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_4_GEN2r_SET
#define AN_X1_BAM_SPD_PRI_4_GEN2r_GET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_4_GEN2r_GET
#define AN_X1_BAM_SPD_PRI_4_GEN2r_AN_PRIORITY_1G_KX1f_GET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_4_GEN2r_AN_PRIORITY_1G_KX1f_GET
#define AN_X1_BAM_SPD_PRI_4_GEN2r_AN_PRIORITY_1G_KX1f_SET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_4_GEN2r_AN_PRIORITY_1G_KX1f_SET
#define AN_X1_BAM_SPD_PRI_4_GEN2r_AN_PRIORITY_10G_HG2_KR1f_GET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_4_GEN2r_AN_PRIORITY_10G_HG2_KR1f_GET
#define AN_X1_BAM_SPD_PRI_4_GEN2r_AN_PRIORITY_10G_HG2_KR1f_SET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_4_GEN2r_AN_PRIORITY_10G_HG2_KR1f_SET
#define AN_X1_BAM_SPD_PRI_4_GEN2r_AN_PRIORITY_10G_KR1f_GET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_4_GEN2r_AN_PRIORITY_10G_KR1f_GET
#define AN_X1_BAM_SPD_PRI_4_GEN2r_AN_PRIORITY_10G_KR1f_SET BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_4_GEN2r_AN_PRIORITY_10G_KR1f_SET
#define READ_AN_X1_BAM_SPD_PRI_4_GEN2r BCMI_TSCF_XGXS_READ_AN_X1_BAM_SPD_PRI_4_GEN2r
#define WRITE_AN_X1_BAM_SPD_PRI_4_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X1_BAM_SPD_PRI_4_GEN2r
#define MODIFY_AN_X1_BAM_SPD_PRI_4_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X1_BAM_SPD_PRI_4_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X1_BAM_SPD_PRI_4_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X1_IEEE_SPD_PRI_1_GEN2
 * BLOCKS:   AN_X1_CONTROL
 * REGADDR:  0x9247
 * DESC:     IEEE Speed PRIORITY REGISTER
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AN_PRIORITY_25G_CR1_IEEE HCD PRIORITY OVERRIDE FOR PRIORITY 25G_CR1_IEEE SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_25G_CRS1_IEEE HCD PRIORITY OVERRIDE FOR PRIORITY 25G_CRS1_IEEE SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_25G_KR1_IEEE HCD PRIORITY OVERRIDE FOR PRIORITY 25G_KR1_IEEE SPEED.  ZERO MEANS USE HW PRIORITY
 *     AN_PRIORITY_25G_KRS1_IEEE HCD PRIORITY OVERRIDE FOR PRIORITY 25G_KRS1_IEEE SPEED.  ZERO MEANS USE HW PRIORITY
 */
#define BCMI_TSCF_XGXS_AN_X1_IEEE_SPD_PRI_1_GEN2r (0x00109247 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X1_IEEE_SPD_PRI_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X1_IEEE_SPD_PRI_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X1_IEEE_SPD_PRI_1_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x1_ieee_spd_pri_1_gen2[1];
	uint32_t _an_x1_ieee_spd_pri_1_gen2;
} BCMI_TSCF_XGXS_AN_X1_IEEE_SPD_PRI_1_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X1_IEEE_SPD_PRI_1_GEN2r_CLR(r) (r).an_x1_ieee_spd_pri_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X1_IEEE_SPD_PRI_1_GEN2r_SET(r,d) (r).an_x1_ieee_spd_pri_1_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X1_IEEE_SPD_PRI_1_GEN2r_GET(r) (r).an_x1_ieee_spd_pri_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X1_IEEE_SPD_PRI_1_GEN2r_AN_PRIORITY_25G_KRS1_IEEEf_GET(r) ((((r).an_x1_ieee_spd_pri_1_gen2[0]) >> 6) & 0x3)
#define BCMI_TSCF_XGXS_AN_X1_IEEE_SPD_PRI_1_GEN2r_AN_PRIORITY_25G_KRS1_IEEEf_SET(r,f) (r).an_x1_ieee_spd_pri_1_gen2[0]=(((r).an_x1_ieee_spd_pri_1_gen2[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6)) | (3 << (16 + 6))
#define BCMI_TSCF_XGXS_AN_X1_IEEE_SPD_PRI_1_GEN2r_AN_PRIORITY_25G_KR1_IEEEf_GET(r) ((((r).an_x1_ieee_spd_pri_1_gen2[0]) >> 4) & 0x3)
#define BCMI_TSCF_XGXS_AN_X1_IEEE_SPD_PRI_1_GEN2r_AN_PRIORITY_25G_KR1_IEEEf_SET(r,f) (r).an_x1_ieee_spd_pri_1_gen2[0]=(((r).an_x1_ieee_spd_pri_1_gen2[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_XGXS_AN_X1_IEEE_SPD_PRI_1_GEN2r_AN_PRIORITY_25G_CRS1_IEEEf_GET(r) ((((r).an_x1_ieee_spd_pri_1_gen2[0]) >> 2) & 0x3)
#define BCMI_TSCF_XGXS_AN_X1_IEEE_SPD_PRI_1_GEN2r_AN_PRIORITY_25G_CRS1_IEEEf_SET(r,f) (r).an_x1_ieee_spd_pri_1_gen2[0]=(((r).an_x1_ieee_spd_pri_1_gen2[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2)) | (3 << (16 + 2))
#define BCMI_TSCF_XGXS_AN_X1_IEEE_SPD_PRI_1_GEN2r_AN_PRIORITY_25G_CR1_IEEEf_GET(r) (((r).an_x1_ieee_spd_pri_1_gen2[0]) & 0x3)
#define BCMI_TSCF_XGXS_AN_X1_IEEE_SPD_PRI_1_GEN2r_AN_PRIORITY_25G_CR1_IEEEf_SET(r,f) (r).an_x1_ieee_spd_pri_1_gen2[0]=(((r).an_x1_ieee_spd_pri_1_gen2[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access AN_X1_IEEE_SPD_PRI_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X1_IEEE_SPD_PRI_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X1_IEEE_SPD_PRI_1_GEN2r,(_r._an_x1_ieee_spd_pri_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X1_IEEE_SPD_PRI_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X1_IEEE_SPD_PRI_1_GEN2r,(_r._an_x1_ieee_spd_pri_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X1_IEEE_SPD_PRI_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X1_IEEE_SPD_PRI_1_GEN2r,(_r._an_x1_ieee_spd_pri_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X1_IEEE_SPD_PRI_1_GEN2r BCMI_TSCF_XGXS_AN_X1_IEEE_SPD_PRI_1_GEN2r
#define AN_X1_IEEE_SPD_PRI_1_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X1_IEEE_SPD_PRI_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X1_IEEE_SPD_PRI_1_GEN2r_t AN_X1_IEEE_SPD_PRI_1_GEN2r_t;
#define AN_X1_IEEE_SPD_PRI_1_GEN2r_CLR BCMI_TSCF_XGXS_AN_X1_IEEE_SPD_PRI_1_GEN2r_CLR
#define AN_X1_IEEE_SPD_PRI_1_GEN2r_SET BCMI_TSCF_XGXS_AN_X1_IEEE_SPD_PRI_1_GEN2r_SET
#define AN_X1_IEEE_SPD_PRI_1_GEN2r_GET BCMI_TSCF_XGXS_AN_X1_IEEE_SPD_PRI_1_GEN2r_GET
#define AN_X1_IEEE_SPD_PRI_1_GEN2r_AN_PRIORITY_25G_KRS1_IEEEf_GET BCMI_TSCF_XGXS_AN_X1_IEEE_SPD_PRI_1_GEN2r_AN_PRIORITY_25G_KRS1_IEEEf_GET
#define AN_X1_IEEE_SPD_PRI_1_GEN2r_AN_PRIORITY_25G_KRS1_IEEEf_SET BCMI_TSCF_XGXS_AN_X1_IEEE_SPD_PRI_1_GEN2r_AN_PRIORITY_25G_KRS1_IEEEf_SET
#define AN_X1_IEEE_SPD_PRI_1_GEN2r_AN_PRIORITY_25G_KR1_IEEEf_GET BCMI_TSCF_XGXS_AN_X1_IEEE_SPD_PRI_1_GEN2r_AN_PRIORITY_25G_KR1_IEEEf_GET
#define AN_X1_IEEE_SPD_PRI_1_GEN2r_AN_PRIORITY_25G_KR1_IEEEf_SET BCMI_TSCF_XGXS_AN_X1_IEEE_SPD_PRI_1_GEN2r_AN_PRIORITY_25G_KR1_IEEEf_SET
#define AN_X1_IEEE_SPD_PRI_1_GEN2r_AN_PRIORITY_25G_CRS1_IEEEf_GET BCMI_TSCF_XGXS_AN_X1_IEEE_SPD_PRI_1_GEN2r_AN_PRIORITY_25G_CRS1_IEEEf_GET
#define AN_X1_IEEE_SPD_PRI_1_GEN2r_AN_PRIORITY_25G_CRS1_IEEEf_SET BCMI_TSCF_XGXS_AN_X1_IEEE_SPD_PRI_1_GEN2r_AN_PRIORITY_25G_CRS1_IEEEf_SET
#define AN_X1_IEEE_SPD_PRI_1_GEN2r_AN_PRIORITY_25G_CR1_IEEEf_GET BCMI_TSCF_XGXS_AN_X1_IEEE_SPD_PRI_1_GEN2r_AN_PRIORITY_25G_CR1_IEEEf_GET
#define AN_X1_IEEE_SPD_PRI_1_GEN2r_AN_PRIORITY_25G_CR1_IEEEf_SET BCMI_TSCF_XGXS_AN_X1_IEEE_SPD_PRI_1_GEN2r_AN_PRIORITY_25G_CR1_IEEEf_SET
#define READ_AN_X1_IEEE_SPD_PRI_1_GEN2r BCMI_TSCF_XGXS_READ_AN_X1_IEEE_SPD_PRI_1_GEN2r
#define WRITE_AN_X1_IEEE_SPD_PRI_1_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X1_IEEE_SPD_PRI_1_GEN2r
#define MODIFY_AN_X1_IEEE_SPD_PRI_1_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X1_IEEE_SPD_PRI_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X1_IEEE_SPD_PRI_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X1_CL73_BRK_LNK_GEN2
 * BLOCKS:   AN_X1_TIMERS
 * REGADDR:  0x9250
 * DESC:     CL73 AUTO-NEG BREAK-LINK TIMER
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL73_BREAK_TIMER_PERIOD Period/range is 60 tosingle copyCL73 auto-neg break-link timer.  Timer for the amount of time to disable transmission in order to assure that the link parner enters a Link Fail state.
 */
#define BCMI_TSCF_XGXS_AN_X1_CL73_BRK_LNK_GEN2r (0x00109250 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X1_CL73_BRK_LNK_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X1_CL73_BRK_LNK_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X1_CL73_BRK_LNK_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x1_cl73_brk_lnk_gen2[1];
	uint32_t _an_x1_cl73_brk_lnk_gen2;
} BCMI_TSCF_XGXS_AN_X1_CL73_BRK_LNK_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X1_CL73_BRK_LNK_GEN2r_CLR(r) (r).an_x1_cl73_brk_lnk_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X1_CL73_BRK_LNK_GEN2r_SET(r,d) (r).an_x1_cl73_brk_lnk_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X1_CL73_BRK_LNK_GEN2r_GET(r) (r).an_x1_cl73_brk_lnk_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X1_CL73_BRK_LNK_GEN2r_CL73_BREAK_TIMER_PERIODf_GET(r) (((r).an_x1_cl73_brk_lnk_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_AN_X1_CL73_BRK_LNK_GEN2r_CL73_BREAK_TIMER_PERIODf_SET(r,f) (r).an_x1_cl73_brk_lnk_gen2[0]=(((r).an_x1_cl73_brk_lnk_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AN_X1_CL73_BRK_LNK_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X1_CL73_BRK_LNK_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X1_CL73_BRK_LNK_GEN2r,(_r._an_x1_cl73_brk_lnk_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X1_CL73_BRK_LNK_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X1_CL73_BRK_LNK_GEN2r,(_r._an_x1_cl73_brk_lnk_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X1_CL73_BRK_LNK_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X1_CL73_BRK_LNK_GEN2r,(_r._an_x1_cl73_brk_lnk_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X1_CL73_BRK_LNK_GEN2r BCMI_TSCF_XGXS_AN_X1_CL73_BRK_LNK_GEN2r
#define AN_X1_CL73_BRK_LNK_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X1_CL73_BRK_LNK_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X1_CL73_BRK_LNK_GEN2r_t AN_X1_CL73_BRK_LNK_GEN2r_t;
#define AN_X1_CL73_BRK_LNK_GEN2r_CLR BCMI_TSCF_XGXS_AN_X1_CL73_BRK_LNK_GEN2r_CLR
#define AN_X1_CL73_BRK_LNK_GEN2r_SET BCMI_TSCF_XGXS_AN_X1_CL73_BRK_LNK_GEN2r_SET
#define AN_X1_CL73_BRK_LNK_GEN2r_GET BCMI_TSCF_XGXS_AN_X1_CL73_BRK_LNK_GEN2r_GET
#define AN_X1_CL73_BRK_LNK_GEN2r_CL73_BREAK_TIMER_PERIODf_GET BCMI_TSCF_XGXS_AN_X1_CL73_BRK_LNK_GEN2r_CL73_BREAK_TIMER_PERIODf_GET
#define AN_X1_CL73_BRK_LNK_GEN2r_CL73_BREAK_TIMER_PERIODf_SET BCMI_TSCF_XGXS_AN_X1_CL73_BRK_LNK_GEN2r_CL73_BREAK_TIMER_PERIODf_SET
#define READ_AN_X1_CL73_BRK_LNK_GEN2r BCMI_TSCF_XGXS_READ_AN_X1_CL73_BRK_LNK_GEN2r
#define WRITE_AN_X1_CL73_BRK_LNK_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X1_CL73_BRK_LNK_GEN2r
#define MODIFY_AN_X1_CL73_BRK_LNK_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X1_CL73_BRK_LNK_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X1_CL73_BRK_LNK_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X1_CL73_ERR_GEN2
 * BLOCKS:   AN_X1_TIMERS
 * REGADDR:  0x9251
 * DESC:     CL73 AUTO-NEG TIMEOUT-ERROR TIMER
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL73_ERROR_TIMER_PERIOD Period/range is 20.6 mssingle copyCL73 auto-neg timeout-error timer Timer for the amout ot time to wait to receive a page from the link partner.
 */
#define BCMI_TSCF_XGXS_AN_X1_CL73_ERR_GEN2r (0x00109251 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X1_CL73_ERR_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X1_CL73_ERR_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X1_CL73_ERR_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x1_cl73_err_gen2[1];
	uint32_t _an_x1_cl73_err_gen2;
} BCMI_TSCF_XGXS_AN_X1_CL73_ERR_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X1_CL73_ERR_GEN2r_CLR(r) (r).an_x1_cl73_err_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X1_CL73_ERR_GEN2r_SET(r,d) (r).an_x1_cl73_err_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X1_CL73_ERR_GEN2r_GET(r) (r).an_x1_cl73_err_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X1_CL73_ERR_GEN2r_CL73_ERROR_TIMER_PERIODf_GET(r) (((r).an_x1_cl73_err_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_AN_X1_CL73_ERR_GEN2r_CL73_ERROR_TIMER_PERIODf_SET(r,f) (r).an_x1_cl73_err_gen2[0]=(((r).an_x1_cl73_err_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AN_X1_CL73_ERR_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X1_CL73_ERR_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X1_CL73_ERR_GEN2r,(_r._an_x1_cl73_err_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X1_CL73_ERR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X1_CL73_ERR_GEN2r,(_r._an_x1_cl73_err_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X1_CL73_ERR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X1_CL73_ERR_GEN2r,(_r._an_x1_cl73_err_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X1_CL73_ERR_GEN2r BCMI_TSCF_XGXS_AN_X1_CL73_ERR_GEN2r
#define AN_X1_CL73_ERR_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X1_CL73_ERR_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X1_CL73_ERR_GEN2r_t AN_X1_CL73_ERR_GEN2r_t;
#define AN_X1_CL73_ERR_GEN2r_CLR BCMI_TSCF_XGXS_AN_X1_CL73_ERR_GEN2r_CLR
#define AN_X1_CL73_ERR_GEN2r_SET BCMI_TSCF_XGXS_AN_X1_CL73_ERR_GEN2r_SET
#define AN_X1_CL73_ERR_GEN2r_GET BCMI_TSCF_XGXS_AN_X1_CL73_ERR_GEN2r_GET
#define AN_X1_CL73_ERR_GEN2r_CL73_ERROR_TIMER_PERIODf_GET BCMI_TSCF_XGXS_AN_X1_CL73_ERR_GEN2r_CL73_ERROR_TIMER_PERIODf_GET
#define AN_X1_CL73_ERR_GEN2r_CL73_ERROR_TIMER_PERIODf_SET BCMI_TSCF_XGXS_AN_X1_CL73_ERR_GEN2r_CL73_ERROR_TIMER_PERIODf_SET
#define READ_AN_X1_CL73_ERR_GEN2r BCMI_TSCF_XGXS_READ_AN_X1_CL73_ERR_GEN2r
#define WRITE_AN_X1_CL73_ERR_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X1_CL73_ERR_GEN2r
#define MODIFY_AN_X1_CL73_ERR_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X1_CL73_ERR_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X1_CL73_ERR_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X1_CL73_DME_LOCK_GEN2
 * BLOCKS:   AN_X1_TIMERS
 * REGADDR:  0x9252
 * DESC:     CL73 PARALLEL-DETECT DME-CLOCK TIMER
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     PD_DME_LOCK_TIMER_PERIOD Period/range is 25 tosingle copyCL73 parallel-detect DME-clock timer Timer for the amount of time to wait before evaluating the DME_locked signal.
 */
#define BCMI_TSCF_XGXS_AN_X1_CL73_DME_LOCK_GEN2r (0x00109252 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X1_CL73_DME_LOCK_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X1_CL73_DME_LOCK_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X1_CL73_DME_LOCK_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x1_cl73_dme_lock_gen2[1];
	uint32_t _an_x1_cl73_dme_lock_gen2;
} BCMI_TSCF_XGXS_AN_X1_CL73_DME_LOCK_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X1_CL73_DME_LOCK_GEN2r_CLR(r) (r).an_x1_cl73_dme_lock_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X1_CL73_DME_LOCK_GEN2r_SET(r,d) (r).an_x1_cl73_dme_lock_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X1_CL73_DME_LOCK_GEN2r_GET(r) (r).an_x1_cl73_dme_lock_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X1_CL73_DME_LOCK_GEN2r_PD_DME_LOCK_TIMER_PERIODf_GET(r) (((r).an_x1_cl73_dme_lock_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_AN_X1_CL73_DME_LOCK_GEN2r_PD_DME_LOCK_TIMER_PERIODf_SET(r,f) (r).an_x1_cl73_dme_lock_gen2[0]=(((r).an_x1_cl73_dme_lock_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AN_X1_CL73_DME_LOCK_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X1_CL73_DME_LOCK_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X1_CL73_DME_LOCK_GEN2r,(_r._an_x1_cl73_dme_lock_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X1_CL73_DME_LOCK_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X1_CL73_DME_LOCK_GEN2r,(_r._an_x1_cl73_dme_lock_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X1_CL73_DME_LOCK_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X1_CL73_DME_LOCK_GEN2r,(_r._an_x1_cl73_dme_lock_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X1_CL73_DME_LOCK_GEN2r BCMI_TSCF_XGXS_AN_X1_CL73_DME_LOCK_GEN2r
#define AN_X1_CL73_DME_LOCK_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X1_CL73_DME_LOCK_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X1_CL73_DME_LOCK_GEN2r_t AN_X1_CL73_DME_LOCK_GEN2r_t;
#define AN_X1_CL73_DME_LOCK_GEN2r_CLR BCMI_TSCF_XGXS_AN_X1_CL73_DME_LOCK_GEN2r_CLR
#define AN_X1_CL73_DME_LOCK_GEN2r_SET BCMI_TSCF_XGXS_AN_X1_CL73_DME_LOCK_GEN2r_SET
#define AN_X1_CL73_DME_LOCK_GEN2r_GET BCMI_TSCF_XGXS_AN_X1_CL73_DME_LOCK_GEN2r_GET
#define AN_X1_CL73_DME_LOCK_GEN2r_PD_DME_LOCK_TIMER_PERIODf_GET BCMI_TSCF_XGXS_AN_X1_CL73_DME_LOCK_GEN2r_PD_DME_LOCK_TIMER_PERIODf_GET
#define AN_X1_CL73_DME_LOCK_GEN2r_PD_DME_LOCK_TIMER_PERIODf_SET BCMI_TSCF_XGXS_AN_X1_CL73_DME_LOCK_GEN2r_PD_DME_LOCK_TIMER_PERIODf_SET
#define READ_AN_X1_CL73_DME_LOCK_GEN2r BCMI_TSCF_XGXS_READ_AN_X1_CL73_DME_LOCK_GEN2r
#define WRITE_AN_X1_CL73_DME_LOCK_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X1_CL73_DME_LOCK_GEN2r
#define MODIFY_AN_X1_CL73_DME_LOCK_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X1_CL73_DME_LOCK_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X1_CL73_DME_LOCK_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X1_PD_SD_TMR_GEN2
 * BLOCKS:   AN_X1_TIMERS
 * REGADDR:  0x9253
 * DESC:     PARALLEL-DETECT SIGNAL DETECT TIMER
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     PD_SD_TIMER_PERIOD single copyParallel-Detect Signal Detect timer.
 */
#define BCMI_TSCF_XGXS_AN_X1_PD_SD_TMR_GEN2r (0x00109253 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X1_PD_SD_TMR_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X1_PD_SD_TMR_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X1_PD_SD_TMR_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x1_pd_sd_tmr_gen2[1];
	uint32_t _an_x1_pd_sd_tmr_gen2;
} BCMI_TSCF_XGXS_AN_X1_PD_SD_TMR_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X1_PD_SD_TMR_GEN2r_CLR(r) (r).an_x1_pd_sd_tmr_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X1_PD_SD_TMR_GEN2r_SET(r,d) (r).an_x1_pd_sd_tmr_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X1_PD_SD_TMR_GEN2r_GET(r) (r).an_x1_pd_sd_tmr_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X1_PD_SD_TMR_GEN2r_PD_SD_TIMER_PERIODf_GET(r) (((r).an_x1_pd_sd_tmr_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_AN_X1_PD_SD_TMR_GEN2r_PD_SD_TIMER_PERIODf_SET(r,f) (r).an_x1_pd_sd_tmr_gen2[0]=(((r).an_x1_pd_sd_tmr_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AN_X1_PD_SD_TMR_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X1_PD_SD_TMR_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X1_PD_SD_TMR_GEN2r,(_r._an_x1_pd_sd_tmr_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X1_PD_SD_TMR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X1_PD_SD_TMR_GEN2r,(_r._an_x1_pd_sd_tmr_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X1_PD_SD_TMR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X1_PD_SD_TMR_GEN2r,(_r._an_x1_pd_sd_tmr_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X1_PD_SD_TMR_GEN2r BCMI_TSCF_XGXS_AN_X1_PD_SD_TMR_GEN2r
#define AN_X1_PD_SD_TMR_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X1_PD_SD_TMR_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X1_PD_SD_TMR_GEN2r_t AN_X1_PD_SD_TMR_GEN2r_t;
#define AN_X1_PD_SD_TMR_GEN2r_CLR BCMI_TSCF_XGXS_AN_X1_PD_SD_TMR_GEN2r_CLR
#define AN_X1_PD_SD_TMR_GEN2r_SET BCMI_TSCF_XGXS_AN_X1_PD_SD_TMR_GEN2r_SET
#define AN_X1_PD_SD_TMR_GEN2r_GET BCMI_TSCF_XGXS_AN_X1_PD_SD_TMR_GEN2r_GET
#define AN_X1_PD_SD_TMR_GEN2r_PD_SD_TIMER_PERIODf_GET BCMI_TSCF_XGXS_AN_X1_PD_SD_TMR_GEN2r_PD_SD_TIMER_PERIODf_GET
#define AN_X1_PD_SD_TMR_GEN2r_PD_SD_TIMER_PERIODf_SET BCMI_TSCF_XGXS_AN_X1_PD_SD_TMR_GEN2r_PD_SD_TIMER_PERIODf_SET
#define READ_AN_X1_PD_SD_TMR_GEN2r BCMI_TSCF_XGXS_READ_AN_X1_PD_SD_TMR_GEN2r
#define WRITE_AN_X1_PD_SD_TMR_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X1_PD_SD_TMR_GEN2r
#define MODIFY_AN_X1_PD_SD_TMR_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X1_PD_SD_TMR_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X1_PD_SD_TMR_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X1_IGNORE_LNK_TMR_GEN2
 * BLOCKS:   AN_X1_TIMERS
 * REGADDR:  0x9254
 * DESC:     PERIOD TO IGNORE THE LINK
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     IGNORE_LINK_TIMER_PERIOD Period is in tickssingle copyPeriod to ignore the link while CL73 and possibly CL72 are running
 */
#define BCMI_TSCF_XGXS_AN_X1_IGNORE_LNK_TMR_GEN2r (0x00109254 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X1_IGNORE_LNK_TMR_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X1_IGNORE_LNK_TMR_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X1_IGNORE_LNK_TMR_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x1_ignore_lnk_tmr_gen2[1];
	uint32_t _an_x1_ignore_lnk_tmr_gen2;
} BCMI_TSCF_XGXS_AN_X1_IGNORE_LNK_TMR_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X1_IGNORE_LNK_TMR_GEN2r_CLR(r) (r).an_x1_ignore_lnk_tmr_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X1_IGNORE_LNK_TMR_GEN2r_SET(r,d) (r).an_x1_ignore_lnk_tmr_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X1_IGNORE_LNK_TMR_GEN2r_GET(r) (r).an_x1_ignore_lnk_tmr_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X1_IGNORE_LNK_TMR_GEN2r_IGNORE_LINK_TIMER_PERIODf_GET(r) (((r).an_x1_ignore_lnk_tmr_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_AN_X1_IGNORE_LNK_TMR_GEN2r_IGNORE_LINK_TIMER_PERIODf_SET(r,f) (r).an_x1_ignore_lnk_tmr_gen2[0]=(((r).an_x1_ignore_lnk_tmr_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AN_X1_IGNORE_LNK_TMR_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X1_IGNORE_LNK_TMR_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X1_IGNORE_LNK_TMR_GEN2r,(_r._an_x1_ignore_lnk_tmr_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X1_IGNORE_LNK_TMR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X1_IGNORE_LNK_TMR_GEN2r,(_r._an_x1_ignore_lnk_tmr_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X1_IGNORE_LNK_TMR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X1_IGNORE_LNK_TMR_GEN2r,(_r._an_x1_ignore_lnk_tmr_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X1_IGNORE_LNK_TMR_GEN2r BCMI_TSCF_XGXS_AN_X1_IGNORE_LNK_TMR_GEN2r
#define AN_X1_IGNORE_LNK_TMR_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X1_IGNORE_LNK_TMR_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X1_IGNORE_LNK_TMR_GEN2r_t AN_X1_IGNORE_LNK_TMR_GEN2r_t;
#define AN_X1_IGNORE_LNK_TMR_GEN2r_CLR BCMI_TSCF_XGXS_AN_X1_IGNORE_LNK_TMR_GEN2r_CLR
#define AN_X1_IGNORE_LNK_TMR_GEN2r_SET BCMI_TSCF_XGXS_AN_X1_IGNORE_LNK_TMR_GEN2r_SET
#define AN_X1_IGNORE_LNK_TMR_GEN2r_GET BCMI_TSCF_XGXS_AN_X1_IGNORE_LNK_TMR_GEN2r_GET
#define AN_X1_IGNORE_LNK_TMR_GEN2r_IGNORE_LINK_TIMER_PERIODf_GET BCMI_TSCF_XGXS_AN_X1_IGNORE_LNK_TMR_GEN2r_IGNORE_LINK_TIMER_PERIODf_GET
#define AN_X1_IGNORE_LNK_TMR_GEN2r_IGNORE_LINK_TIMER_PERIODf_SET BCMI_TSCF_XGXS_AN_X1_IGNORE_LNK_TMR_GEN2r_IGNORE_LINK_TIMER_PERIODf_SET
#define READ_AN_X1_IGNORE_LNK_TMR_GEN2r BCMI_TSCF_XGXS_READ_AN_X1_IGNORE_LNK_TMR_GEN2r
#define WRITE_AN_X1_IGNORE_LNK_TMR_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X1_IGNORE_LNK_TMR_GEN2r
#define MODIFY_AN_X1_IGNORE_LNK_TMR_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X1_IGNORE_LNK_TMR_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X1_IGNORE_LNK_TMR_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X1_LNK_FAIL_INHBT_TMR_CL72_GEN2
 * BLOCKS:   AN_X1_TIMERS
 * REGADDR:  0x9255
 * DESC:     TIMER FOR QUALIFYING A LINK_STATUS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LINK_FAIL_INHIBIT_TIMER_CL72_PERIOD Period/range is typically 500mssingle copyTimer for qualifying a link_status==FAIL indication or a link_status==OK indication when a link is first being established and cl72 training is being run.
 */
#define BCMI_TSCF_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_CL72_GEN2r (0x00109255 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_CL72_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X1_LNK_FAIL_INHBT_TMR_CL72_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_CL72_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x1_lnk_fail_inhbt_tmr_cl72_gen2[1];
	uint32_t _an_x1_lnk_fail_inhbt_tmr_cl72_gen2;
} BCMI_TSCF_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_CL72_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_CL72_GEN2r_CLR(r) (r).an_x1_lnk_fail_inhbt_tmr_cl72_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_CL72_GEN2r_SET(r,d) (r).an_x1_lnk_fail_inhbt_tmr_cl72_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_CL72_GEN2r_GET(r) (r).an_x1_lnk_fail_inhbt_tmr_cl72_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_CL72_GEN2r_LINK_FAIL_INHIBIT_TIMER_CL72_PERIODf_GET(r) (((r).an_x1_lnk_fail_inhbt_tmr_cl72_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_CL72_GEN2r_LINK_FAIL_INHIBIT_TIMER_CL72_PERIODf_SET(r,f) (r).an_x1_lnk_fail_inhbt_tmr_cl72_gen2[0]=(((r).an_x1_lnk_fail_inhbt_tmr_cl72_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AN_X1_LNK_FAIL_INHBT_TMR_CL72_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X1_LNK_FAIL_INHBT_TMR_CL72_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_CL72_GEN2r,(_r._an_x1_lnk_fail_inhbt_tmr_cl72_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X1_LNK_FAIL_INHBT_TMR_CL72_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_CL72_GEN2r,(_r._an_x1_lnk_fail_inhbt_tmr_cl72_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X1_LNK_FAIL_INHBT_TMR_CL72_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_CL72_GEN2r,(_r._an_x1_lnk_fail_inhbt_tmr_cl72_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X1_LNK_FAIL_INHBT_TMR_CL72_GEN2r BCMI_TSCF_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_CL72_GEN2r
#define AN_X1_LNK_FAIL_INHBT_TMR_CL72_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_CL72_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_CL72_GEN2r_t AN_X1_LNK_FAIL_INHBT_TMR_CL72_GEN2r_t;
#define AN_X1_LNK_FAIL_INHBT_TMR_CL72_GEN2r_CLR BCMI_TSCF_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_CL72_GEN2r_CLR
#define AN_X1_LNK_FAIL_INHBT_TMR_CL72_GEN2r_SET BCMI_TSCF_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_CL72_GEN2r_SET
#define AN_X1_LNK_FAIL_INHBT_TMR_CL72_GEN2r_GET BCMI_TSCF_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_CL72_GEN2r_GET
#define AN_X1_LNK_FAIL_INHBT_TMR_CL72_GEN2r_LINK_FAIL_INHIBIT_TIMER_CL72_PERIODf_GET BCMI_TSCF_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_CL72_GEN2r_LINK_FAIL_INHIBIT_TIMER_CL72_PERIODf_GET
#define AN_X1_LNK_FAIL_INHBT_TMR_CL72_GEN2r_LINK_FAIL_INHIBIT_TIMER_CL72_PERIODf_SET BCMI_TSCF_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_CL72_GEN2r_LINK_FAIL_INHIBIT_TIMER_CL72_PERIODf_SET
#define READ_AN_X1_LNK_FAIL_INHBT_TMR_CL72_GEN2r BCMI_TSCF_XGXS_READ_AN_X1_LNK_FAIL_INHBT_TMR_CL72_GEN2r
#define WRITE_AN_X1_LNK_FAIL_INHBT_TMR_CL72_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X1_LNK_FAIL_INHBT_TMR_CL72_GEN2r
#define MODIFY_AN_X1_LNK_FAIL_INHBT_TMR_CL72_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X1_LNK_FAIL_INHBT_TMR_CL72_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_CL72_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72_GEN2
 * BLOCKS:   AN_X1_TIMERS
 * REGADDR:  0x9256
 * DESC:     Timer FOR QUALIFYING A LINK_STATUS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LINK_FAIL_INHIBIT_TIMER_NCL72_PERIOD Period/range is typically 40mssingle copyTimer for qualifying a link_status==FAIL indication or a link_status==OK indication when a link is first being established and cl72 training is not being run.
 */
#define BCMI_TSCF_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72_GEN2r (0x00109256 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x1_lnk_fail_inhbt_tmr_not_cl72_gen2[1];
	uint32_t _an_x1_lnk_fail_inhbt_tmr_not_cl72_gen2;
} BCMI_TSCF_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72_GEN2r_CLR(r) (r).an_x1_lnk_fail_inhbt_tmr_not_cl72_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72_GEN2r_SET(r,d) (r).an_x1_lnk_fail_inhbt_tmr_not_cl72_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72_GEN2r_GET(r) (r).an_x1_lnk_fail_inhbt_tmr_not_cl72_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72_GEN2r_LINK_FAIL_INHIBIT_TIMER_NCL72_PERIODf_GET(r) (((r).an_x1_lnk_fail_inhbt_tmr_not_cl72_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72_GEN2r_LINK_FAIL_INHIBIT_TIMER_NCL72_PERIODf_SET(r,f) (r).an_x1_lnk_fail_inhbt_tmr_not_cl72_gen2[0]=(((r).an_x1_lnk_fail_inhbt_tmr_not_cl72_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72_GEN2r,(_r._an_x1_lnk_fail_inhbt_tmr_not_cl72_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72_GEN2r,(_r._an_x1_lnk_fail_inhbt_tmr_not_cl72_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72_GEN2r,(_r._an_x1_lnk_fail_inhbt_tmr_not_cl72_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72_GEN2r BCMI_TSCF_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72_GEN2r
#define AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72_GEN2r_t AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72_GEN2r_t;
#define AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72_GEN2r_CLR BCMI_TSCF_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72_GEN2r_CLR
#define AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72_GEN2r_SET BCMI_TSCF_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72_GEN2r_SET
#define AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72_GEN2r_GET BCMI_TSCF_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72_GEN2r_GET
#define AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72_GEN2r_LINK_FAIL_INHIBIT_TIMER_NCL72_PERIODf_GET BCMI_TSCF_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72_GEN2r_LINK_FAIL_INHIBIT_TIMER_NCL72_PERIODf_GET
#define AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72_GEN2r_LINK_FAIL_INHIBIT_TIMER_NCL72_PERIODf_SET BCMI_TSCF_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72_GEN2r_LINK_FAIL_INHIBIT_TIMER_NCL72_PERIODf_SET
#define READ_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72_GEN2r BCMI_TSCF_XGXS_READ_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72_GEN2r
#define WRITE_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72_GEN2r
#define MODIFY_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X1_LNK_FAIL_INHBT_TMR_NOT_CL72_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X1_DME_PAGE_TMR_TYPE_GEN2
 * BLOCKS:   AN_X1_TIMERS
 * REGADDR:  0x9257
 * DESC:     DME PAGE TIMERS
 * RESETVAL: 0x3b5f (15199)
 * ACCESS:   R/W
 * FIELDS:
 *     CL73_PAGE_TEST_MIN_TIMER Specifies the minimum length of a CL73 DME page.  Units are 8 samples.  Each sample represents 0.4 ns
 *     CL73_PAGE_TEST_MAX_TIMER Specifies the maximum length of a CL73 DME page.  Units are 8 samples.  Each sample represents 0.4 ns
 */
#define BCMI_TSCF_XGXS_AN_X1_DME_PAGE_TMR_TYPE_GEN2r (0x00109257 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X1_DME_PAGE_TMR_TYPE_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X1_DME_PAGE_TMR_TYPE_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X1_DME_PAGE_TMR_TYPE_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x1_dme_page_tmr_type_gen2[1];
	uint32_t _an_x1_dme_page_tmr_type_gen2;
} BCMI_TSCF_XGXS_AN_X1_DME_PAGE_TMR_TYPE_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X1_DME_PAGE_TMR_TYPE_GEN2r_CLR(r) (r).an_x1_dme_page_tmr_type_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X1_DME_PAGE_TMR_TYPE_GEN2r_SET(r,d) (r).an_x1_dme_page_tmr_type_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X1_DME_PAGE_TMR_TYPE_GEN2r_GET(r) (r).an_x1_dme_page_tmr_type_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X1_DME_PAGE_TMR_TYPE_GEN2r_CL73_PAGE_TEST_MAX_TIMERf_GET(r) ((((r).an_x1_dme_page_tmr_type_gen2[0]) >> 7) & 0x7f)
#define BCMI_TSCF_XGXS_AN_X1_DME_PAGE_TMR_TYPE_GEN2r_CL73_PAGE_TEST_MAX_TIMERf_SET(r,f) (r).an_x1_dme_page_tmr_type_gen2[0]=(((r).an_x1_dme_page_tmr_type_gen2[0] & ~((uint32_t)0x7f << 7)) | ((((uint32_t)f) & 0x7f) << 7)) | (127 << (16 + 7))
#define BCMI_TSCF_XGXS_AN_X1_DME_PAGE_TMR_TYPE_GEN2r_CL73_PAGE_TEST_MIN_TIMERf_GET(r) (((r).an_x1_dme_page_tmr_type_gen2[0]) & 0x7f)
#define BCMI_TSCF_XGXS_AN_X1_DME_PAGE_TMR_TYPE_GEN2r_CL73_PAGE_TEST_MIN_TIMERf_SET(r,f) (r).an_x1_dme_page_tmr_type_gen2[0]=(((r).an_x1_dme_page_tmr_type_gen2[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f)) | (0x7f << 16)

/*
 * These macros can be used to access AN_X1_DME_PAGE_TMR_TYPE_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X1_DME_PAGE_TMR_TYPE_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X1_DME_PAGE_TMR_TYPE_GEN2r,(_r._an_x1_dme_page_tmr_type_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X1_DME_PAGE_TMR_TYPE_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X1_DME_PAGE_TMR_TYPE_GEN2r,(_r._an_x1_dme_page_tmr_type_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X1_DME_PAGE_TMR_TYPE_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X1_DME_PAGE_TMR_TYPE_GEN2r,(_r._an_x1_dme_page_tmr_type_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X1_DME_PAGE_TMR_TYPE_GEN2r BCMI_TSCF_XGXS_AN_X1_DME_PAGE_TMR_TYPE_GEN2r
#define AN_X1_DME_PAGE_TMR_TYPE_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X1_DME_PAGE_TMR_TYPE_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X1_DME_PAGE_TMR_TYPE_GEN2r_t AN_X1_DME_PAGE_TMR_TYPE_GEN2r_t;
#define AN_X1_DME_PAGE_TMR_TYPE_GEN2r_CLR BCMI_TSCF_XGXS_AN_X1_DME_PAGE_TMR_TYPE_GEN2r_CLR
#define AN_X1_DME_PAGE_TMR_TYPE_GEN2r_SET BCMI_TSCF_XGXS_AN_X1_DME_PAGE_TMR_TYPE_GEN2r_SET
#define AN_X1_DME_PAGE_TMR_TYPE_GEN2r_GET BCMI_TSCF_XGXS_AN_X1_DME_PAGE_TMR_TYPE_GEN2r_GET
#define AN_X1_DME_PAGE_TMR_TYPE_GEN2r_CL73_PAGE_TEST_MAX_TIMERf_GET BCMI_TSCF_XGXS_AN_X1_DME_PAGE_TMR_TYPE_GEN2r_CL73_PAGE_TEST_MAX_TIMERf_GET
#define AN_X1_DME_PAGE_TMR_TYPE_GEN2r_CL73_PAGE_TEST_MAX_TIMERf_SET BCMI_TSCF_XGXS_AN_X1_DME_PAGE_TMR_TYPE_GEN2r_CL73_PAGE_TEST_MAX_TIMERf_SET
#define AN_X1_DME_PAGE_TMR_TYPE_GEN2r_CL73_PAGE_TEST_MIN_TIMERf_GET BCMI_TSCF_XGXS_AN_X1_DME_PAGE_TMR_TYPE_GEN2r_CL73_PAGE_TEST_MIN_TIMERf_GET
#define AN_X1_DME_PAGE_TMR_TYPE_GEN2r_CL73_PAGE_TEST_MIN_TIMERf_SET BCMI_TSCF_XGXS_AN_X1_DME_PAGE_TMR_TYPE_GEN2r_CL73_PAGE_TEST_MIN_TIMERf_SET
#define READ_AN_X1_DME_PAGE_TMR_TYPE_GEN2r BCMI_TSCF_XGXS_READ_AN_X1_DME_PAGE_TMR_TYPE_GEN2r
#define WRITE_AN_X1_DME_PAGE_TMR_TYPE_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X1_DME_PAGE_TMR_TYPE_GEN2r
#define MODIFY_AN_X1_DME_PAGE_TMR_TYPE_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X1_DME_PAGE_TMR_TYPE_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X1_DME_PAGE_TMR_TYPE_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X1_PLL_LOCK_TMR_GEN2
 * BLOCKS:   SC_X1_CONTROL
 * REGADDR:  0x9260
 * DESC:     PLL lock timeout period
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     PLL_LOCK_TIMER_PERIOD Period/range is XXX msTimer for the maximin amount of time required for PLL to lockIf PLL is not locked during this period of time,the Speed Control logic will report an error and go to Initial state.The Speed Control logic can be restarted after that by SW or AN.
 */
#define BCMI_TSCF_XGXS_SC_X1_PLL_LOCK_TMR_GEN2r (0x00109260 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X1_PLL_LOCK_TMR_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_PLL_LOCK_TMR_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X1_PLL_LOCK_TMR_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x1_pll_lock_tmr_gen2[1];
	uint32_t _sc_x1_pll_lock_tmr_gen2;
} BCMI_TSCF_XGXS_SC_X1_PLL_LOCK_TMR_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X1_PLL_LOCK_TMR_GEN2r_CLR(r) (r).sc_x1_pll_lock_tmr_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X1_PLL_LOCK_TMR_GEN2r_SET(r,d) (r).sc_x1_pll_lock_tmr_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X1_PLL_LOCK_TMR_GEN2r_GET(r) (r).sc_x1_pll_lock_tmr_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X1_PLL_LOCK_TMR_GEN2r_PLL_LOCK_TIMER_PERIODf_GET(r) (((r).sc_x1_pll_lock_tmr_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_SC_X1_PLL_LOCK_TMR_GEN2r_PLL_LOCK_TIMER_PERIODf_SET(r,f) (r).sc_x1_pll_lock_tmr_gen2[0]=(((r).sc_x1_pll_lock_tmr_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access SC_X1_PLL_LOCK_TMR_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X1_PLL_LOCK_TMR_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X1_PLL_LOCK_TMR_GEN2r,(_r._sc_x1_pll_lock_tmr_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X1_PLL_LOCK_TMR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_PLL_LOCK_TMR_GEN2r,(_r._sc_x1_pll_lock_tmr_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X1_PLL_LOCK_TMR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_PLL_LOCK_TMR_GEN2r,(_r._sc_x1_pll_lock_tmr_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_PLL_LOCK_TMR_GEN2r BCMI_TSCF_XGXS_SC_X1_PLL_LOCK_TMR_GEN2r
#define SC_X1_PLL_LOCK_TMR_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X1_PLL_LOCK_TMR_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X1_PLL_LOCK_TMR_GEN2r_t SC_X1_PLL_LOCK_TMR_GEN2r_t;
#define SC_X1_PLL_LOCK_TMR_GEN2r_CLR BCMI_TSCF_XGXS_SC_X1_PLL_LOCK_TMR_GEN2r_CLR
#define SC_X1_PLL_LOCK_TMR_GEN2r_SET BCMI_TSCF_XGXS_SC_X1_PLL_LOCK_TMR_GEN2r_SET
#define SC_X1_PLL_LOCK_TMR_GEN2r_GET BCMI_TSCF_XGXS_SC_X1_PLL_LOCK_TMR_GEN2r_GET
#define SC_X1_PLL_LOCK_TMR_GEN2r_PLL_LOCK_TIMER_PERIODf_GET BCMI_TSCF_XGXS_SC_X1_PLL_LOCK_TMR_GEN2r_PLL_LOCK_TIMER_PERIODf_GET
#define SC_X1_PLL_LOCK_TMR_GEN2r_PLL_LOCK_TIMER_PERIODf_SET BCMI_TSCF_XGXS_SC_X1_PLL_LOCK_TMR_GEN2r_PLL_LOCK_TIMER_PERIODf_SET
#define READ_SC_X1_PLL_LOCK_TMR_GEN2r BCMI_TSCF_XGXS_READ_SC_X1_PLL_LOCK_TMR_GEN2r
#define WRITE_SC_X1_PLL_LOCK_TMR_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X1_PLL_LOCK_TMR_GEN2r
#define MODIFY_SC_X1_PLL_LOCK_TMR_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X1_PLL_LOCK_TMR_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X1_PLL_LOCK_TMR_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X1_PMD_LOCK_TMR_GEN2
 * BLOCKS:   SC_X1_CONTROL
 * REGADDR:  0x9261
 * DESC:     PMD lock timeout period
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     PMD_LOCK_TIMER_PERIOD Period/range is XXX msTimer for the maximin amount of time required for PMD RX to lockIf PMD RX is not locked during this period of time,the Speed Control logic will report an error and go to Initial state.The Speed Control logic can be restarted after that by SW or AN.
 */
#define BCMI_TSCF_XGXS_SC_X1_PMD_LOCK_TMR_GEN2r (0x00109261 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X1_PMD_LOCK_TMR_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_PMD_LOCK_TMR_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X1_PMD_LOCK_TMR_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x1_pmd_lock_tmr_gen2[1];
	uint32_t _sc_x1_pmd_lock_tmr_gen2;
} BCMI_TSCF_XGXS_SC_X1_PMD_LOCK_TMR_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X1_PMD_LOCK_TMR_GEN2r_CLR(r) (r).sc_x1_pmd_lock_tmr_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X1_PMD_LOCK_TMR_GEN2r_SET(r,d) (r).sc_x1_pmd_lock_tmr_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X1_PMD_LOCK_TMR_GEN2r_GET(r) (r).sc_x1_pmd_lock_tmr_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X1_PMD_LOCK_TMR_GEN2r_PMD_LOCK_TIMER_PERIODf_GET(r) (((r).sc_x1_pmd_lock_tmr_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_SC_X1_PMD_LOCK_TMR_GEN2r_PMD_LOCK_TIMER_PERIODf_SET(r,f) (r).sc_x1_pmd_lock_tmr_gen2[0]=(((r).sc_x1_pmd_lock_tmr_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access SC_X1_PMD_LOCK_TMR_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X1_PMD_LOCK_TMR_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X1_PMD_LOCK_TMR_GEN2r,(_r._sc_x1_pmd_lock_tmr_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X1_PMD_LOCK_TMR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_PMD_LOCK_TMR_GEN2r,(_r._sc_x1_pmd_lock_tmr_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X1_PMD_LOCK_TMR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_PMD_LOCK_TMR_GEN2r,(_r._sc_x1_pmd_lock_tmr_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_PMD_LOCK_TMR_GEN2r BCMI_TSCF_XGXS_SC_X1_PMD_LOCK_TMR_GEN2r
#define SC_X1_PMD_LOCK_TMR_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X1_PMD_LOCK_TMR_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X1_PMD_LOCK_TMR_GEN2r_t SC_X1_PMD_LOCK_TMR_GEN2r_t;
#define SC_X1_PMD_LOCK_TMR_GEN2r_CLR BCMI_TSCF_XGXS_SC_X1_PMD_LOCK_TMR_GEN2r_CLR
#define SC_X1_PMD_LOCK_TMR_GEN2r_SET BCMI_TSCF_XGXS_SC_X1_PMD_LOCK_TMR_GEN2r_SET
#define SC_X1_PMD_LOCK_TMR_GEN2r_GET BCMI_TSCF_XGXS_SC_X1_PMD_LOCK_TMR_GEN2r_GET
#define SC_X1_PMD_LOCK_TMR_GEN2r_PMD_LOCK_TIMER_PERIODf_GET BCMI_TSCF_XGXS_SC_X1_PMD_LOCK_TMR_GEN2r_PMD_LOCK_TIMER_PERIODf_GET
#define SC_X1_PMD_LOCK_TMR_GEN2r_PMD_LOCK_TIMER_PERIODf_SET BCMI_TSCF_XGXS_SC_X1_PMD_LOCK_TMR_GEN2r_PMD_LOCK_TIMER_PERIODf_SET
#define READ_SC_X1_PMD_LOCK_TMR_GEN2r BCMI_TSCF_XGXS_READ_SC_X1_PMD_LOCK_TMR_GEN2r
#define WRITE_SC_X1_PMD_LOCK_TMR_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X1_PMD_LOCK_TMR_GEN2r
#define MODIFY_SC_X1_PMD_LOCK_TMR_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X1_PMD_LOCK_TMR_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X1_PMD_LOCK_TMR_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X1_PIPE_RST_CNT_GEN2
 * BLOCKS:   SC_X1_CONTROL
 * REGADDR:  0x9262
 * DESC:     Pipeline reset count
 * RESETVAL: 0xff (255)
 * ACCESS:   R/W
 * FIELDS:
 *     PIPELINE_RESET_COUNT period in clock cyclesCounter for amount of time to keep pipeline in resetduring speed change process
 */
#define BCMI_TSCF_XGXS_SC_X1_PIPE_RST_CNT_GEN2r (0x00109262 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X1_PIPE_RST_CNT_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_PIPE_RST_CNT_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X1_PIPE_RST_CNT_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x1_pipe_rst_cnt_gen2[1];
	uint32_t _sc_x1_pipe_rst_cnt_gen2;
} BCMI_TSCF_XGXS_SC_X1_PIPE_RST_CNT_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X1_PIPE_RST_CNT_GEN2r_CLR(r) (r).sc_x1_pipe_rst_cnt_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X1_PIPE_RST_CNT_GEN2r_SET(r,d) (r).sc_x1_pipe_rst_cnt_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X1_PIPE_RST_CNT_GEN2r_GET(r) (r).sc_x1_pipe_rst_cnt_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X1_PIPE_RST_CNT_GEN2r_PIPELINE_RESET_COUNTf_GET(r) (((r).sc_x1_pipe_rst_cnt_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_SC_X1_PIPE_RST_CNT_GEN2r_PIPELINE_RESET_COUNTf_SET(r,f) (r).sc_x1_pipe_rst_cnt_gen2[0]=(((r).sc_x1_pipe_rst_cnt_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access SC_X1_PIPE_RST_CNT_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X1_PIPE_RST_CNT_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X1_PIPE_RST_CNT_GEN2r,(_r._sc_x1_pipe_rst_cnt_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X1_PIPE_RST_CNT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_PIPE_RST_CNT_GEN2r,(_r._sc_x1_pipe_rst_cnt_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X1_PIPE_RST_CNT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_PIPE_RST_CNT_GEN2r,(_r._sc_x1_pipe_rst_cnt_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_PIPE_RST_CNT_GEN2r BCMI_TSCF_XGXS_SC_X1_PIPE_RST_CNT_GEN2r
#define SC_X1_PIPE_RST_CNT_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X1_PIPE_RST_CNT_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X1_PIPE_RST_CNT_GEN2r_t SC_X1_PIPE_RST_CNT_GEN2r_t;
#define SC_X1_PIPE_RST_CNT_GEN2r_CLR BCMI_TSCF_XGXS_SC_X1_PIPE_RST_CNT_GEN2r_CLR
#define SC_X1_PIPE_RST_CNT_GEN2r_SET BCMI_TSCF_XGXS_SC_X1_PIPE_RST_CNT_GEN2r_SET
#define SC_X1_PIPE_RST_CNT_GEN2r_GET BCMI_TSCF_XGXS_SC_X1_PIPE_RST_CNT_GEN2r_GET
#define SC_X1_PIPE_RST_CNT_GEN2r_PIPELINE_RESET_COUNTf_GET BCMI_TSCF_XGXS_SC_X1_PIPE_RST_CNT_GEN2r_PIPELINE_RESET_COUNTf_GET
#define SC_X1_PIPE_RST_CNT_GEN2r_PIPELINE_RESET_COUNTf_SET BCMI_TSCF_XGXS_SC_X1_PIPE_RST_CNT_GEN2r_PIPELINE_RESET_COUNTf_SET
#define READ_SC_X1_PIPE_RST_CNT_GEN2r BCMI_TSCF_XGXS_READ_SC_X1_PIPE_RST_CNT_GEN2r
#define WRITE_SC_X1_PIPE_RST_CNT_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X1_PIPE_RST_CNT_GEN2r
#define MODIFY_SC_X1_PIPE_RST_CNT_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X1_PIPE_RST_CNT_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X1_PIPE_RST_CNT_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X1_TX_RST_CNT_GEN2
 * BLOCKS:   SC_X1_CONTROL
 * REGADDR:  0x9263
 * DESC:     TX pipeline reset count
 * RESETVAL: 0x2 (2)
 * ACCESS:   R/W
 * FIELDS:
 *     TX_RESET_COUNT   period in clock cyclesCounter for amount of time to keep txp in reset after pll is lockedduring speed change process
 */
#define BCMI_TSCF_XGXS_SC_X1_TX_RST_CNT_GEN2r (0x00109263 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X1_TX_RST_CNT_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_TX_RST_CNT_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X1_TX_RST_CNT_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x1_tx_rst_cnt_gen2[1];
	uint32_t _sc_x1_tx_rst_cnt_gen2;
} BCMI_TSCF_XGXS_SC_X1_TX_RST_CNT_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X1_TX_RST_CNT_GEN2r_CLR(r) (r).sc_x1_tx_rst_cnt_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X1_TX_RST_CNT_GEN2r_SET(r,d) (r).sc_x1_tx_rst_cnt_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X1_TX_RST_CNT_GEN2r_GET(r) (r).sc_x1_tx_rst_cnt_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X1_TX_RST_CNT_GEN2r_TX_RESET_COUNTf_GET(r) (((r).sc_x1_tx_rst_cnt_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_SC_X1_TX_RST_CNT_GEN2r_TX_RESET_COUNTf_SET(r,f) (r).sc_x1_tx_rst_cnt_gen2[0]=(((r).sc_x1_tx_rst_cnt_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access SC_X1_TX_RST_CNT_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X1_TX_RST_CNT_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X1_TX_RST_CNT_GEN2r,(_r._sc_x1_tx_rst_cnt_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X1_TX_RST_CNT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_TX_RST_CNT_GEN2r,(_r._sc_x1_tx_rst_cnt_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X1_TX_RST_CNT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_TX_RST_CNT_GEN2r,(_r._sc_x1_tx_rst_cnt_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_TX_RST_CNT_GEN2r BCMI_TSCF_XGXS_SC_X1_TX_RST_CNT_GEN2r
#define SC_X1_TX_RST_CNT_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X1_TX_RST_CNT_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X1_TX_RST_CNT_GEN2r_t SC_X1_TX_RST_CNT_GEN2r_t;
#define SC_X1_TX_RST_CNT_GEN2r_CLR BCMI_TSCF_XGXS_SC_X1_TX_RST_CNT_GEN2r_CLR
#define SC_X1_TX_RST_CNT_GEN2r_SET BCMI_TSCF_XGXS_SC_X1_TX_RST_CNT_GEN2r_SET
#define SC_X1_TX_RST_CNT_GEN2r_GET BCMI_TSCF_XGXS_SC_X1_TX_RST_CNT_GEN2r_GET
#define SC_X1_TX_RST_CNT_GEN2r_TX_RESET_COUNTf_GET BCMI_TSCF_XGXS_SC_X1_TX_RST_CNT_GEN2r_TX_RESET_COUNTf_GET
#define SC_X1_TX_RST_CNT_GEN2r_TX_RESET_COUNTf_SET BCMI_TSCF_XGXS_SC_X1_TX_RST_CNT_GEN2r_TX_RESET_COUNTf_SET
#define READ_SC_X1_TX_RST_CNT_GEN2r BCMI_TSCF_XGXS_READ_SC_X1_TX_RST_CNT_GEN2r
#define WRITE_SC_X1_TX_RST_CNT_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X1_TX_RST_CNT_GEN2r
#define MODIFY_SC_X1_TX_RST_CNT_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X1_TX_RST_CNT_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X1_TX_RST_CNT_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X1_STS_GEN2
 * BLOCKS:   SC_X1_CONTROL
 * REGADDR:  0x9264
 * DESC:     Status register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     RESOLVED_PORT_MODE resolved port mode
 */
#define BCMI_TSCF_XGXS_SC_X1_STS_GEN2r (0x00109264 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X1_STS_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_STS_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X1_STS_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x1_sts_gen2[1];
	uint32_t _sc_x1_sts_gen2;
} BCMI_TSCF_XGXS_SC_X1_STS_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X1_STS_GEN2r_CLR(r) (r).sc_x1_sts_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X1_STS_GEN2r_SET(r,d) (r).sc_x1_sts_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X1_STS_GEN2r_GET(r) (r).sc_x1_sts_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X1_STS_GEN2r_RESOLVED_PORT_MODEf_GET(r) (((r).sc_x1_sts_gen2[0]) & 0x7)
#define BCMI_TSCF_XGXS_SC_X1_STS_GEN2r_RESOLVED_PORT_MODEf_SET(r,f) (r).sc_x1_sts_gen2[0]=(((r).sc_x1_sts_gen2[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access SC_X1_STS_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X1_STS_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X1_STS_GEN2r,(_r._sc_x1_sts_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X1_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_STS_GEN2r,(_r._sc_x1_sts_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X1_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_STS_GEN2r,(_r._sc_x1_sts_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_STS_GEN2r BCMI_TSCF_XGXS_SC_X1_STS_GEN2r
#define SC_X1_STS_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X1_STS_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X1_STS_GEN2r_t SC_X1_STS_GEN2r_t;
#define SC_X1_STS_GEN2r_CLR BCMI_TSCF_XGXS_SC_X1_STS_GEN2r_CLR
#define SC_X1_STS_GEN2r_SET BCMI_TSCF_XGXS_SC_X1_STS_GEN2r_SET
#define SC_X1_STS_GEN2r_GET BCMI_TSCF_XGXS_SC_X1_STS_GEN2r_GET
#define SC_X1_STS_GEN2r_RESOLVED_PORT_MODEf_GET BCMI_TSCF_XGXS_SC_X1_STS_GEN2r_RESOLVED_PORT_MODEf_GET
#define SC_X1_STS_GEN2r_RESOLVED_PORT_MODEf_SET BCMI_TSCF_XGXS_SC_X1_STS_GEN2r_RESOLVED_PORT_MODEf_SET
#define READ_SC_X1_STS_GEN2r BCMI_TSCF_XGXS_READ_SC_X1_STS_GEN2r
#define WRITE_SC_X1_STS_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X1_STS_GEN2r
#define MODIFY_SC_X1_STS_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X1_STS_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X1_STS_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X1_SPD_OVRR0_SPD_GEN2
 * BLOCKS:   SC_X1_SPEED_OVERRIDE0
 * REGADDR:  0x9270
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/W
 * FIELDS:
 *     NUM_LANES        Number of lanes for override configuration0   : NUM_LANES_01 - use 1 lane1   : NUM_LANES_02 - use 2 lanes2   : NUM_LANES_04 - use 4 lanes
 *     T_PMA_40B_MODE   1'b0 - 66-bit data write in t_pma.1'b1 - 40-bit data write in t_pma.
 *     CL36TX_EN        Per logical lane: cl36 TX pipeline: 1=enabled , 0=disabled
 *     CL36RX_EN        Per logical lane: cl36 RX pipeline: 1=enabled , 0=disabled
 *     SPEED            Actual speed set by SW
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_SPD_GEN2r (0x00109270 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_SPD_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR0_SPD_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_SPD_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr0_spd_gen2[1];
	uint32_t _sc_x1_spd_ovrr0_spd_gen2;
} BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_SPD_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_SPD_GEN2r_CLR(r) (r).sc_x1_spd_ovrr0_spd_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_SPD_GEN2r_SET(r,d) (r).sc_x1_spd_ovrr0_spd_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_SPD_GEN2r_GET(r) (r).sc_x1_spd_ovrr0_spd_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_SPD_GEN2r_SPEEDf_GET(r) ((((r).sc_x1_spd_ovrr0_spd_gen2[0]) >> 8) & 0xff)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_SPD_GEN2r_SPEEDf_SET(r,f) (r).sc_x1_spd_ovrr0_spd_gen2[0]=(((r).sc_x1_spd_ovrr0_spd_gen2[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_SPD_GEN2r_CL36RX_ENf_GET(r) ((((r).sc_x1_spd_ovrr0_spd_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_SPD_GEN2r_CL36RX_ENf_SET(r,f) (r).sc_x1_spd_ovrr0_spd_gen2[0]=(((r).sc_x1_spd_ovrr0_spd_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_SPD_GEN2r_CL36TX_ENf_GET(r) ((((r).sc_x1_spd_ovrr0_spd_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_SPD_GEN2r_CL36TX_ENf_SET(r,f) (r).sc_x1_spd_ovrr0_spd_gen2[0]=(((r).sc_x1_spd_ovrr0_spd_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_SPD_GEN2r_T_PMA_40B_MODEf_GET(r) ((((r).sc_x1_spd_ovrr0_spd_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_SPD_GEN2r_T_PMA_40B_MODEf_SET(r,f) (r).sc_x1_spd_ovrr0_spd_gen2[0]=(((r).sc_x1_spd_ovrr0_spd_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_SPD_GEN2r_NUM_LANESf_GET(r) (((r).sc_x1_spd_ovrr0_spd_gen2[0]) & 0x7)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_SPD_GEN2r_NUM_LANESf_SET(r,f) (r).sc_x1_spd_ovrr0_spd_gen2[0]=(((r).sc_x1_spd_ovrr0_spd_gen2[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR0_SPD_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR0_SPD_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_SPD_GEN2r,(_r._sc_x1_spd_ovrr0_spd_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR0_SPD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_SPD_GEN2r,(_r._sc_x1_spd_ovrr0_spd_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR0_SPD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_SPD_GEN2r,(_r._sc_x1_spd_ovrr0_spd_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR0_SPD_GEN2r BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_SPD_GEN2r
#define SC_X1_SPD_OVRR0_SPD_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_SPD_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_SPD_GEN2r_t SC_X1_SPD_OVRR0_SPD_GEN2r_t;
#define SC_X1_SPD_OVRR0_SPD_GEN2r_CLR BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_SPD_GEN2r_CLR
#define SC_X1_SPD_OVRR0_SPD_GEN2r_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_SPD_GEN2r_SET
#define SC_X1_SPD_OVRR0_SPD_GEN2r_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_SPD_GEN2r_GET
#define SC_X1_SPD_OVRR0_SPD_GEN2r_SPEEDf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_SPD_GEN2r_SPEEDf_GET
#define SC_X1_SPD_OVRR0_SPD_GEN2r_SPEEDf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_SPD_GEN2r_SPEEDf_SET
#define SC_X1_SPD_OVRR0_SPD_GEN2r_CL36RX_ENf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_SPD_GEN2r_CL36RX_ENf_GET
#define SC_X1_SPD_OVRR0_SPD_GEN2r_CL36RX_ENf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_SPD_GEN2r_CL36RX_ENf_SET
#define SC_X1_SPD_OVRR0_SPD_GEN2r_CL36TX_ENf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_SPD_GEN2r_CL36TX_ENf_GET
#define SC_X1_SPD_OVRR0_SPD_GEN2r_CL36TX_ENf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_SPD_GEN2r_CL36TX_ENf_SET
#define SC_X1_SPD_OVRR0_SPD_GEN2r_T_PMA_40B_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_SPD_GEN2r_T_PMA_40B_MODEf_GET
#define SC_X1_SPD_OVRR0_SPD_GEN2r_T_PMA_40B_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_SPD_GEN2r_T_PMA_40B_MODEf_SET
#define SC_X1_SPD_OVRR0_SPD_GEN2r_NUM_LANESf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_SPD_GEN2r_NUM_LANESf_GET
#define SC_X1_SPD_OVRR0_SPD_GEN2r_NUM_LANESf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_SPD_GEN2r_NUM_LANESf_SET
#define READ_SC_X1_SPD_OVRR0_SPD_GEN2r BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR0_SPD_GEN2r
#define WRITE_SC_X1_SPD_OVRR0_SPD_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR0_SPD_GEN2r
#define MODIFY_SC_X1_SPD_OVRR0_SPD_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR0_SPD_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_SPD_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X1_SPD_OVRR0_0_GEN2
 * BLOCKS:   SC_X1_SPEED_OVERRIDE0
 * REGADDR:  0x9272
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     SCR_MODE         
 *     T_PMA_BTMX_MODE  Number of PCS lanes bitmuxed
 *     T_HG2_ENABLE     Enables HG2 support for PCS
 *     T_ENC_MODE       
 *     T_FIFO_MODE      T_FIFO stage control field
 *     OS_MODE          
 *     CL72_EN          Enables cl72
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_0_GEN2r (0x00109272 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR0_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_0_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr0_0_gen2[1];
	uint32_t _sc_x1_spd_ovrr0_0_gen2;
} BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_0_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_0_GEN2r_CLR(r) (r).sc_x1_spd_ovrr0_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_0_GEN2r_SET(r,d) (r).sc_x1_spd_ovrr0_0_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_0_GEN2r_GET(r) (r).sc_x1_spd_ovrr0_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_0_GEN2r_CL72_ENf_GET(r) ((((r).sc_x1_spd_ovrr0_0_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_0_GEN2r_CL72_ENf_SET(r,f) (r).sc_x1_spd_ovrr0_0_gen2[0]=(((r).sc_x1_spd_ovrr0_0_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_0_GEN2r_OS_MODEf_GET(r) ((((r).sc_x1_spd_ovrr0_0_gen2[0]) >> 11) & 0xf)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_0_GEN2r_OS_MODEf_SET(r,f) (r).sc_x1_spd_ovrr0_0_gen2[0]=(((r).sc_x1_spd_ovrr0_0_gen2[0] & ~((uint32_t)0xf << 11)) | ((((uint32_t)f) & 0xf) << 11)) | (15 << (16 + 11))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_0_GEN2r_T_FIFO_MODEf_GET(r) ((((r).sc_x1_spd_ovrr0_0_gen2[0]) >> 9) & 0x3)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_0_GEN2r_T_FIFO_MODEf_SET(r,f) (r).sc_x1_spd_ovrr0_0_gen2[0]=(((r).sc_x1_spd_ovrr0_0_gen2[0] & ~((uint32_t)0x3 << 9)) | ((((uint32_t)f) & 0x3) << 9)) | (3 << (16 + 9))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_0_GEN2r_T_ENC_MODEf_GET(r) ((((r).sc_x1_spd_ovrr0_0_gen2[0]) >> 7) & 0x3)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_0_GEN2r_T_ENC_MODEf_SET(r,f) (r).sc_x1_spd_ovrr0_0_gen2[0]=(((r).sc_x1_spd_ovrr0_0_gen2[0] & ~((uint32_t)0x3 << 7)) | ((((uint32_t)f) & 0x3) << 7)) | (3 << (16 + 7))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_0_GEN2r_T_HG2_ENABLEf_GET(r) ((((r).sc_x1_spd_ovrr0_0_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_0_GEN2r_T_HG2_ENABLEf_SET(r,f) (r).sc_x1_spd_ovrr0_0_gen2[0]=(((r).sc_x1_spd_ovrr0_0_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_0_GEN2r_T_PMA_BTMX_MODEf_GET(r) ((((r).sc_x1_spd_ovrr0_0_gen2[0]) >> 4) & 0x3)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_0_GEN2r_T_PMA_BTMX_MODEf_SET(r,f) (r).sc_x1_spd_ovrr0_0_gen2[0]=(((r).sc_x1_spd_ovrr0_0_gen2[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_0_GEN2r_SCR_MODEf_GET(r) ((((r).sc_x1_spd_ovrr0_0_gen2[0]) >> 1) & 0x7)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_0_GEN2r_SCR_MODEf_SET(r,f) (r).sc_x1_spd_ovrr0_0_gen2[0]=(((r).sc_x1_spd_ovrr0_0_gen2[0] & ~((uint32_t)0x7 << 1)) | ((((uint32_t)f) & 0x7) << 1)) | (7 << (16 + 1))

/*
 * These macros can be used to access SC_X1_SPD_OVRR0_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR0_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_0_GEN2r,(_r._sc_x1_spd_ovrr0_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR0_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_0_GEN2r,(_r._sc_x1_spd_ovrr0_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR0_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_0_GEN2r,(_r._sc_x1_spd_ovrr0_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR0_0_GEN2r BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_0_GEN2r
#define SC_X1_SPD_OVRR0_0_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_0_GEN2r_t SC_X1_SPD_OVRR0_0_GEN2r_t;
#define SC_X1_SPD_OVRR0_0_GEN2r_CLR BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_0_GEN2r_CLR
#define SC_X1_SPD_OVRR0_0_GEN2r_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_0_GEN2r_SET
#define SC_X1_SPD_OVRR0_0_GEN2r_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_0_GEN2r_GET
#define SC_X1_SPD_OVRR0_0_GEN2r_CL72_ENf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_0_GEN2r_CL72_ENf_GET
#define SC_X1_SPD_OVRR0_0_GEN2r_CL72_ENf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_0_GEN2r_CL72_ENf_SET
#define SC_X1_SPD_OVRR0_0_GEN2r_OS_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_0_GEN2r_OS_MODEf_GET
#define SC_X1_SPD_OVRR0_0_GEN2r_OS_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_0_GEN2r_OS_MODEf_SET
#define SC_X1_SPD_OVRR0_0_GEN2r_T_FIFO_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_0_GEN2r_T_FIFO_MODEf_GET
#define SC_X1_SPD_OVRR0_0_GEN2r_T_FIFO_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_0_GEN2r_T_FIFO_MODEf_SET
#define SC_X1_SPD_OVRR0_0_GEN2r_T_ENC_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_0_GEN2r_T_ENC_MODEf_GET
#define SC_X1_SPD_OVRR0_0_GEN2r_T_ENC_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_0_GEN2r_T_ENC_MODEf_SET
#define SC_X1_SPD_OVRR0_0_GEN2r_T_HG2_ENABLEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_0_GEN2r_T_HG2_ENABLEf_GET
#define SC_X1_SPD_OVRR0_0_GEN2r_T_HG2_ENABLEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_0_GEN2r_T_HG2_ENABLEf_SET
#define SC_X1_SPD_OVRR0_0_GEN2r_T_PMA_BTMX_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_0_GEN2r_T_PMA_BTMX_MODEf_GET
#define SC_X1_SPD_OVRR0_0_GEN2r_T_PMA_BTMX_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_0_GEN2r_T_PMA_BTMX_MODEf_SET
#define SC_X1_SPD_OVRR0_0_GEN2r_SCR_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_0_GEN2r_SCR_MODEf_GET
#define SC_X1_SPD_OVRR0_0_GEN2r_SCR_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_0_GEN2r_SCR_MODEf_SET
#define READ_SC_X1_SPD_OVRR0_0_GEN2r BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR0_0_GEN2r
#define WRITE_SC_X1_SPD_OVRR0_0_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR0_0_GEN2r
#define MODIFY_SC_X1_SPD_OVRR0_0_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR0_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X1_SPD_OVRR0_1_GEN2
 * BLOCKS:   SC_X1_SPEED_OVERRIDE0
 * REGADDR:  0x9273
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BS_BTMX_MODE     Bit-mux mode: Indicates the format of incoming data on a physical lane.
 *     BS_DIST_MODE     Block to lane distribution mode.BS_DIST_MODE_5_LANE_TDM - 5 lane TDM. Each block distributed in turn over output pseudo-logical lanes 0-4BS_DIST_MODE_2_LANE_TDM_2_VLANE - 2 lane TDM for 2 virtual lanes.Virtual Lane 0 output is ping-ponged over pseudo-logical lanes 0,2.Virtual Lane 1 output is ping-ponged over pseudo-logical lanes 1,3.BS_DIST_MODE_2_LANE_TDM_1_VLANE - 2 lane TDM for 1 virtual lane.Virtual Lane 0 output is ping-ponged over pseudo-logical lanes 0,2.BS_DIST_MODE_NO_TDM - No TDM. Virtual Lane output is sent directly to corresponding pseudo-logical lane.
 *     BS_SYNC_EN       Enable block synchronization: If enabled, block sync sm will attempt to slip data until sync is achieved.
 *     BS_SM_SYNC_MODE  Block Sync Mode: When bs_sync_en==1, this bit indicates if cl49 or cl82 state machine operation is used.1'b0 - Clause 821'b1 - Clause 49
 *     DEC_FSM_MODE     
 *     DESKEW_MODE      
 *     DEC_TL_MODE      
 *     DESCR_MODE       
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_1_GEN2r (0x00109273 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR0_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_1_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr0_1_gen2[1];
	uint32_t _sc_x1_spd_ovrr0_1_gen2;
} BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_1_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_1_GEN2r_CLR(r) (r).sc_x1_spd_ovrr0_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_1_GEN2r_SET(r,d) (r).sc_x1_spd_ovrr0_1_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_1_GEN2r_GET(r) (r).sc_x1_spd_ovrr0_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_1_GEN2r_DESCR_MODEf_GET(r) ((((r).sc_x1_spd_ovrr0_1_gen2[0]) >> 14) & 0x3)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_1_GEN2r_DESCR_MODEf_SET(r,f) (r).sc_x1_spd_ovrr0_1_gen2[0]=(((r).sc_x1_spd_ovrr0_1_gen2[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_1_GEN2r_DEC_TL_MODEf_GET(r) ((((r).sc_x1_spd_ovrr0_1_gen2[0]) >> 12) & 0x3)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_1_GEN2r_DEC_TL_MODEf_SET(r,f) (r).sc_x1_spd_ovrr0_1_gen2[0]=(((r).sc_x1_spd_ovrr0_1_gen2[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12)) | (3 << (16 + 12))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_1_GEN2r_DESKEW_MODEf_GET(r) ((((r).sc_x1_spd_ovrr0_1_gen2[0]) >> 8) & 0xf)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_1_GEN2r_DESKEW_MODEf_SET(r,f) (r).sc_x1_spd_ovrr0_1_gen2[0]=(((r).sc_x1_spd_ovrr0_1_gen2[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_1_GEN2r_DEC_FSM_MODEf_GET(r) ((((r).sc_x1_spd_ovrr0_1_gen2[0]) >> 6) & 0x3)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_1_GEN2r_DEC_FSM_MODEf_SET(r,f) (r).sc_x1_spd_ovrr0_1_gen2[0]=(((r).sc_x1_spd_ovrr0_1_gen2[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6)) | (3 << (16 + 6))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_1_GEN2r_BS_SM_SYNC_MODEf_GET(r) ((((r).sc_x1_spd_ovrr0_1_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_1_GEN2r_BS_SM_SYNC_MODEf_SET(r,f) (r).sc_x1_spd_ovrr0_1_gen2[0]=(((r).sc_x1_spd_ovrr0_1_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_1_GEN2r_BS_SYNC_ENf_GET(r) ((((r).sc_x1_spd_ovrr0_1_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_1_GEN2r_BS_SYNC_ENf_SET(r,f) (r).sc_x1_spd_ovrr0_1_gen2[0]=(((r).sc_x1_spd_ovrr0_1_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_1_GEN2r_BS_DIST_MODEf_GET(r) ((((r).sc_x1_spd_ovrr0_1_gen2[0]) >> 2) & 0x3)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_1_GEN2r_BS_DIST_MODEf_SET(r,f) (r).sc_x1_spd_ovrr0_1_gen2[0]=(((r).sc_x1_spd_ovrr0_1_gen2[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2)) | (3 << (16 + 2))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_1_GEN2r_BS_BTMX_MODEf_GET(r) (((r).sc_x1_spd_ovrr0_1_gen2[0]) & 0x3)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_1_GEN2r_BS_BTMX_MODEf_SET(r,f) (r).sc_x1_spd_ovrr0_1_gen2[0]=(((r).sc_x1_spd_ovrr0_1_gen2[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR0_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR0_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_1_GEN2r,(_r._sc_x1_spd_ovrr0_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR0_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_1_GEN2r,(_r._sc_x1_spd_ovrr0_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR0_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_1_GEN2r,(_r._sc_x1_spd_ovrr0_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR0_1_GEN2r BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_1_GEN2r
#define SC_X1_SPD_OVRR0_1_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_1_GEN2r_t SC_X1_SPD_OVRR0_1_GEN2r_t;
#define SC_X1_SPD_OVRR0_1_GEN2r_CLR BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_1_GEN2r_CLR
#define SC_X1_SPD_OVRR0_1_GEN2r_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_1_GEN2r_SET
#define SC_X1_SPD_OVRR0_1_GEN2r_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_1_GEN2r_GET
#define SC_X1_SPD_OVRR0_1_GEN2r_DESCR_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_1_GEN2r_DESCR_MODEf_GET
#define SC_X1_SPD_OVRR0_1_GEN2r_DESCR_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_1_GEN2r_DESCR_MODEf_SET
#define SC_X1_SPD_OVRR0_1_GEN2r_DEC_TL_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_1_GEN2r_DEC_TL_MODEf_GET
#define SC_X1_SPD_OVRR0_1_GEN2r_DEC_TL_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_1_GEN2r_DEC_TL_MODEf_SET
#define SC_X1_SPD_OVRR0_1_GEN2r_DESKEW_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_1_GEN2r_DESKEW_MODEf_GET
#define SC_X1_SPD_OVRR0_1_GEN2r_DESKEW_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_1_GEN2r_DESKEW_MODEf_SET
#define SC_X1_SPD_OVRR0_1_GEN2r_DEC_FSM_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_1_GEN2r_DEC_FSM_MODEf_GET
#define SC_X1_SPD_OVRR0_1_GEN2r_DEC_FSM_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_1_GEN2r_DEC_FSM_MODEf_SET
#define SC_X1_SPD_OVRR0_1_GEN2r_BS_SM_SYNC_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_1_GEN2r_BS_SM_SYNC_MODEf_GET
#define SC_X1_SPD_OVRR0_1_GEN2r_BS_SM_SYNC_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_1_GEN2r_BS_SM_SYNC_MODEf_SET
#define SC_X1_SPD_OVRR0_1_GEN2r_BS_SYNC_ENf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_1_GEN2r_BS_SYNC_ENf_GET
#define SC_X1_SPD_OVRR0_1_GEN2r_BS_SYNC_ENf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_1_GEN2r_BS_SYNC_ENf_SET
#define SC_X1_SPD_OVRR0_1_GEN2r_BS_DIST_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_1_GEN2r_BS_DIST_MODEf_GET
#define SC_X1_SPD_OVRR0_1_GEN2r_BS_DIST_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_1_GEN2r_BS_DIST_MODEf_SET
#define SC_X1_SPD_OVRR0_1_GEN2r_BS_BTMX_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_1_GEN2r_BS_BTMX_MODEf_GET
#define SC_X1_SPD_OVRR0_1_GEN2r_BS_BTMX_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_1_GEN2r_BS_BTMX_MODEf_SET
#define READ_SC_X1_SPD_OVRR0_1_GEN2r BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR0_1_GEN2r
#define WRITE_SC_X1_SPD_OVRR0_1_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR0_1_GEN2r
#define MODIFY_SC_X1_SPD_OVRR0_1_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR0_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X1_SPD_OVRR0_2_GEN2
 * BLOCKS:   SC_X1_SPEED_OVERRIDE0
 * REGADDR:  0x9274
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CLOCKCNT0        clock count 0 for credit programming, range 5 to 4125
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_2_GEN2r (0x00109274 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR0_2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_2_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr0_2_gen2[1];
	uint32_t _sc_x1_spd_ovrr0_2_gen2;
} BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_2_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_2_GEN2r_CLR(r) (r).sc_x1_spd_ovrr0_2_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_2_GEN2r_SET(r,d) (r).sc_x1_spd_ovrr0_2_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_2_GEN2r_GET(r) (r).sc_x1_spd_ovrr0_2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_2_GEN2r_CLOCKCNT0f_GET(r) (((r).sc_x1_spd_ovrr0_2_gen2[0]) & 0x3fff)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_2_GEN2r_CLOCKCNT0f_SET(r,f) (r).sc_x1_spd_ovrr0_2_gen2[0]=(((r).sc_x1_spd_ovrr0_2_gen2[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff)) | (0x3fff << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR0_2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR0_2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_2_GEN2r,(_r._sc_x1_spd_ovrr0_2_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR0_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_2_GEN2r,(_r._sc_x1_spd_ovrr0_2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR0_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_2_GEN2r,(_r._sc_x1_spd_ovrr0_2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR0_2_GEN2r BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_2_GEN2r
#define SC_X1_SPD_OVRR0_2_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_2_GEN2r_t SC_X1_SPD_OVRR0_2_GEN2r_t;
#define SC_X1_SPD_OVRR0_2_GEN2r_CLR BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_2_GEN2r_CLR
#define SC_X1_SPD_OVRR0_2_GEN2r_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_2_GEN2r_SET
#define SC_X1_SPD_OVRR0_2_GEN2r_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_2_GEN2r_GET
#define SC_X1_SPD_OVRR0_2_GEN2r_CLOCKCNT0f_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_2_GEN2r_CLOCKCNT0f_GET
#define SC_X1_SPD_OVRR0_2_GEN2r_CLOCKCNT0f_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_2_GEN2r_CLOCKCNT0f_SET
#define READ_SC_X1_SPD_OVRR0_2_GEN2r BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR0_2_GEN2r
#define WRITE_SC_X1_SPD_OVRR0_2_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR0_2_GEN2r
#define MODIFY_SC_X1_SPD_OVRR0_2_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR0_2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X1_SPD_OVRR0_3_GEN2
 * BLOCKS:   SC_X1_SPEED_OVERRIDE0
 * REGADDR:  0x9275
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CLOCKCNT1        clock count 1 for credit programming, range 4 to 12
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_3_GEN2r (0x00109275 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_3_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR0_3_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_3_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr0_3_gen2[1];
	uint32_t _sc_x1_spd_ovrr0_3_gen2;
} BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_3_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_3_GEN2r_CLR(r) (r).sc_x1_spd_ovrr0_3_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_3_GEN2r_SET(r,d) (r).sc_x1_spd_ovrr0_3_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_3_GEN2r_GET(r) (r).sc_x1_spd_ovrr0_3_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_3_GEN2r_CLOCKCNT1f_GET(r) (((r).sc_x1_spd_ovrr0_3_gen2[0]) & 0xff)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_3_GEN2r_CLOCKCNT1f_SET(r,f) (r).sc_x1_spd_ovrr0_3_gen2[0]=(((r).sc_x1_spd_ovrr0_3_gen2[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR0_3_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR0_3_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_3_GEN2r,(_r._sc_x1_spd_ovrr0_3_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR0_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_3_GEN2r,(_r._sc_x1_spd_ovrr0_3_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR0_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_3_GEN2r,(_r._sc_x1_spd_ovrr0_3_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR0_3_GEN2r BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_3_GEN2r
#define SC_X1_SPD_OVRR0_3_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_3_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_3_GEN2r_t SC_X1_SPD_OVRR0_3_GEN2r_t;
#define SC_X1_SPD_OVRR0_3_GEN2r_CLR BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_3_GEN2r_CLR
#define SC_X1_SPD_OVRR0_3_GEN2r_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_3_GEN2r_SET
#define SC_X1_SPD_OVRR0_3_GEN2r_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_3_GEN2r_GET
#define SC_X1_SPD_OVRR0_3_GEN2r_CLOCKCNT1f_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_3_GEN2r_CLOCKCNT1f_GET
#define SC_X1_SPD_OVRR0_3_GEN2r_CLOCKCNT1f_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_3_GEN2r_CLOCKCNT1f_SET
#define READ_SC_X1_SPD_OVRR0_3_GEN2r BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR0_3_GEN2r
#define WRITE_SC_X1_SPD_OVRR0_3_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR0_3_GEN2r
#define MODIFY_SC_X1_SPD_OVRR0_3_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR0_3_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_3_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X1_SPD_OVRR0_4_GEN2
 * BLOCKS:   SC_X1_SPEED_OVERRIDE0
 * REGADDR:  0x9276
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LOOPCNT1         loop count 1 for credit programming, range 2 to 18
 *     LOOPCNT0         loop count 0 for credit programming, range 1 to 1
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_4_GEN2r (0x00109276 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_4_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR0_4_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_4_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr0_4_gen2[1];
	uint32_t _sc_x1_spd_ovrr0_4_gen2;
} BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_4_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_4_GEN2r_CLR(r) (r).sc_x1_spd_ovrr0_4_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_4_GEN2r_SET(r,d) (r).sc_x1_spd_ovrr0_4_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_4_GEN2r_GET(r) (r).sc_x1_spd_ovrr0_4_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_4_GEN2r_LOOPCNT0f_GET(r) ((((r).sc_x1_spd_ovrr0_4_gen2[0]) >> 6) & 0xff)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_4_GEN2r_LOOPCNT0f_SET(r,f) (r).sc_x1_spd_ovrr0_4_gen2[0]=(((r).sc_x1_spd_ovrr0_4_gen2[0] & ~((uint32_t)0xff << 6)) | ((((uint32_t)f) & 0xff) << 6)) | (255 << (16 + 6))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_4_GEN2r_LOOPCNT1f_GET(r) (((r).sc_x1_spd_ovrr0_4_gen2[0]) & 0x3f)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_4_GEN2r_LOOPCNT1f_SET(r,f) (r).sc_x1_spd_ovrr0_4_gen2[0]=(((r).sc_x1_spd_ovrr0_4_gen2[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR0_4_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR0_4_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_4_GEN2r,(_r._sc_x1_spd_ovrr0_4_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR0_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_4_GEN2r,(_r._sc_x1_spd_ovrr0_4_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR0_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_4_GEN2r,(_r._sc_x1_spd_ovrr0_4_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR0_4_GEN2r BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_4_GEN2r
#define SC_X1_SPD_OVRR0_4_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_4_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_4_GEN2r_t SC_X1_SPD_OVRR0_4_GEN2r_t;
#define SC_X1_SPD_OVRR0_4_GEN2r_CLR BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_4_GEN2r_CLR
#define SC_X1_SPD_OVRR0_4_GEN2r_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_4_GEN2r_SET
#define SC_X1_SPD_OVRR0_4_GEN2r_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_4_GEN2r_GET
#define SC_X1_SPD_OVRR0_4_GEN2r_LOOPCNT0f_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_4_GEN2r_LOOPCNT0f_GET
#define SC_X1_SPD_OVRR0_4_GEN2r_LOOPCNT0f_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_4_GEN2r_LOOPCNT0f_SET
#define SC_X1_SPD_OVRR0_4_GEN2r_LOOPCNT1f_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_4_GEN2r_LOOPCNT1f_GET
#define SC_X1_SPD_OVRR0_4_GEN2r_LOOPCNT1f_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_4_GEN2r_LOOPCNT1f_SET
#define READ_SC_X1_SPD_OVRR0_4_GEN2r BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR0_4_GEN2r
#define WRITE_SC_X1_SPD_OVRR0_4_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR0_4_GEN2r
#define MODIFY_SC_X1_SPD_OVRR0_4_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR0_4_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_4_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X1_SPD_OVRR0_5_GEN2
 * BLOCKS:   SC_X1_SPEED_OVERRIDE0
 * REGADDR:  0x9277
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MAC_CREDITGENCNT CGC for mac credit generation, range 1 to 2063
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_5_GEN2r (0x00109277 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_5_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR0_5_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_5_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr0_5_gen2[1];
	uint32_t _sc_x1_spd_ovrr0_5_gen2;
} BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_5_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_5_GEN2r_CLR(r) (r).sc_x1_spd_ovrr0_5_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_5_GEN2r_SET(r,d) (r).sc_x1_spd_ovrr0_5_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_5_GEN2r_GET(r) (r).sc_x1_spd_ovrr0_5_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_5_GEN2r_MAC_CREDITGENCNTf_GET(r) (((r).sc_x1_spd_ovrr0_5_gen2[0]) & 0x1fff)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_5_GEN2r_MAC_CREDITGENCNTf_SET(r,f) (r).sc_x1_spd_ovrr0_5_gen2[0]=(((r).sc_x1_spd_ovrr0_5_gen2[0] & ~((uint32_t)0x1fff)) | (((uint32_t)f) & 0x1fff)) | (0x1fff << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR0_5_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR0_5_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_5_GEN2r,(_r._sc_x1_spd_ovrr0_5_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR0_5_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_5_GEN2r,(_r._sc_x1_spd_ovrr0_5_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR0_5_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_5_GEN2r,(_r._sc_x1_spd_ovrr0_5_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR0_5_GEN2r BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_5_GEN2r
#define SC_X1_SPD_OVRR0_5_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_5_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_5_GEN2r_t SC_X1_SPD_OVRR0_5_GEN2r_t;
#define SC_X1_SPD_OVRR0_5_GEN2r_CLR BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_5_GEN2r_CLR
#define SC_X1_SPD_OVRR0_5_GEN2r_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_5_GEN2r_SET
#define SC_X1_SPD_OVRR0_5_GEN2r_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_5_GEN2r_GET
#define SC_X1_SPD_OVRR0_5_GEN2r_MAC_CREDITGENCNTf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_5_GEN2r_MAC_CREDITGENCNTf_GET
#define SC_X1_SPD_OVRR0_5_GEN2r_MAC_CREDITGENCNTf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_5_GEN2r_MAC_CREDITGENCNTf_SET
#define READ_SC_X1_SPD_OVRR0_5_GEN2r BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR0_5_GEN2r
#define WRITE_SC_X1_SPD_OVRR0_5_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR0_5_GEN2r
#define MODIFY_SC_X1_SPD_OVRR0_5_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR0_5_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_5_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X1_SPD_OVRR0_6_GEN2
 * BLOCKS:   SC_X1_SPEED_OVERRIDE0
 * REGADDR:  0x9278
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     T_CL91_CW_SCRAMBLE Indicates whether the CL91 codeword should be scrambled or not. It should be set to 1 in FC mode.
 *     T_FIVE_BIT_XOR_EN 1'b1 - XOR 4:0 with 12:8, 1'b0 - No XOR of the 5 bits
 *     T_PMA_CL91_MUX_SEL T_PMA MUX CL91 select.
 *     T_PMA_WATERMARK  T_PMA FIFO watermark. In units of 66-bit blocks.
 *     T_PMA_BITMUX_DELAY T_PMA FIFO delay after watermark is reached (in units of cycles)
 *     AM_SPACING_MUL   
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_6_GEN2r (0x00109278 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_6_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR0_6_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_6_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr0_6_gen2[1];
	uint32_t _sc_x1_spd_ovrr0_6_gen2;
} BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_6_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_6_GEN2r_CLR(r) (r).sc_x1_spd_ovrr0_6_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_6_GEN2r_SET(r,d) (r).sc_x1_spd_ovrr0_6_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_6_GEN2r_GET(r) (r).sc_x1_spd_ovrr0_6_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_6_GEN2r_AM_SPACING_MULf_GET(r) ((((r).sc_x1_spd_ovrr0_6_gen2[0]) >> 9) & 0x3)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_6_GEN2r_AM_SPACING_MULf_SET(r,f) (r).sc_x1_spd_ovrr0_6_gen2[0]=(((r).sc_x1_spd_ovrr0_6_gen2[0] & ~((uint32_t)0x3 << 9)) | ((((uint32_t)f) & 0x3) << 9)) | (3 << (16 + 9))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_6_GEN2r_T_PMA_BITMUX_DELAYf_GET(r) ((((r).sc_x1_spd_ovrr0_6_gen2[0]) >> 7) & 0x3)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_6_GEN2r_T_PMA_BITMUX_DELAYf_SET(r,f) (r).sc_x1_spd_ovrr0_6_gen2[0]=(((r).sc_x1_spd_ovrr0_6_gen2[0] & ~((uint32_t)0x3 << 7)) | ((((uint32_t)f) & 0x3) << 7)) | (3 << (16 + 7))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_6_GEN2r_T_PMA_WATERMARKf_GET(r) ((((r).sc_x1_spd_ovrr0_6_gen2[0]) >> 3) & 0xf)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_6_GEN2r_T_PMA_WATERMARKf_SET(r,f) (r).sc_x1_spd_ovrr0_6_gen2[0]=(((r).sc_x1_spd_ovrr0_6_gen2[0] & ~((uint32_t)0xf << 3)) | ((((uint32_t)f) & 0xf) << 3)) | (15 << (16 + 3))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_6_GEN2r_T_PMA_CL91_MUX_SELf_GET(r) ((((r).sc_x1_spd_ovrr0_6_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_6_GEN2r_T_PMA_CL91_MUX_SELf_SET(r,f) (r).sc_x1_spd_ovrr0_6_gen2[0]=(((r).sc_x1_spd_ovrr0_6_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_6_GEN2r_T_FIVE_BIT_XOR_ENf_GET(r) ((((r).sc_x1_spd_ovrr0_6_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_6_GEN2r_T_FIVE_BIT_XOR_ENf_SET(r,f) (r).sc_x1_spd_ovrr0_6_gen2[0]=(((r).sc_x1_spd_ovrr0_6_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_6_GEN2r_T_CL91_CW_SCRAMBLEf_GET(r) (((r).sc_x1_spd_ovrr0_6_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_6_GEN2r_T_CL91_CW_SCRAMBLEf_SET(r,f) (r).sc_x1_spd_ovrr0_6_gen2[0]=(((r).sc_x1_spd_ovrr0_6_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR0_6_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR0_6_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_6_GEN2r,(_r._sc_x1_spd_ovrr0_6_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR0_6_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_6_GEN2r,(_r._sc_x1_spd_ovrr0_6_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR0_6_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_6_GEN2r,(_r._sc_x1_spd_ovrr0_6_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR0_6_GEN2r BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_6_GEN2r
#define SC_X1_SPD_OVRR0_6_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_6_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_6_GEN2r_t SC_X1_SPD_OVRR0_6_GEN2r_t;
#define SC_X1_SPD_OVRR0_6_GEN2r_CLR BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_6_GEN2r_CLR
#define SC_X1_SPD_OVRR0_6_GEN2r_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_6_GEN2r_SET
#define SC_X1_SPD_OVRR0_6_GEN2r_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_6_GEN2r_GET
#define SC_X1_SPD_OVRR0_6_GEN2r_AM_SPACING_MULf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_6_GEN2r_AM_SPACING_MULf_GET
#define SC_X1_SPD_OVRR0_6_GEN2r_AM_SPACING_MULf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_6_GEN2r_AM_SPACING_MULf_SET
#define SC_X1_SPD_OVRR0_6_GEN2r_T_PMA_BITMUX_DELAYf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_6_GEN2r_T_PMA_BITMUX_DELAYf_GET
#define SC_X1_SPD_OVRR0_6_GEN2r_T_PMA_BITMUX_DELAYf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_6_GEN2r_T_PMA_BITMUX_DELAYf_SET
#define SC_X1_SPD_OVRR0_6_GEN2r_T_PMA_WATERMARKf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_6_GEN2r_T_PMA_WATERMARKf_GET
#define SC_X1_SPD_OVRR0_6_GEN2r_T_PMA_WATERMARKf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_6_GEN2r_T_PMA_WATERMARKf_SET
#define SC_X1_SPD_OVRR0_6_GEN2r_T_PMA_CL91_MUX_SELf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_6_GEN2r_T_PMA_CL91_MUX_SELf_GET
#define SC_X1_SPD_OVRR0_6_GEN2r_T_PMA_CL91_MUX_SELf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_6_GEN2r_T_PMA_CL91_MUX_SELf_SET
#define SC_X1_SPD_OVRR0_6_GEN2r_T_FIVE_BIT_XOR_ENf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_6_GEN2r_T_FIVE_BIT_XOR_ENf_GET
#define SC_X1_SPD_OVRR0_6_GEN2r_T_FIVE_BIT_XOR_ENf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_6_GEN2r_T_FIVE_BIT_XOR_ENf_SET
#define SC_X1_SPD_OVRR0_6_GEN2r_T_CL91_CW_SCRAMBLEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_6_GEN2r_T_CL91_CW_SCRAMBLEf_GET
#define SC_X1_SPD_OVRR0_6_GEN2r_T_CL91_CW_SCRAMBLEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_6_GEN2r_T_CL91_CW_SCRAMBLEf_SET
#define READ_SC_X1_SPD_OVRR0_6_GEN2r BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR0_6_GEN2r
#define WRITE_SC_X1_SPD_OVRR0_6_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR0_6_GEN2r
#define MODIFY_SC_X1_SPD_OVRR0_6_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR0_6_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_6_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X1_SPD_OVRR0_7_GEN2
 * BLOCKS:   SC_X1_SPEED_OVERRIDE0
 * REGADDR:  0x9279
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL91_BLKSYNC_MODE 
 *     R_MERGE_MODE     
 *     R_CL91_CW_SCRAMBLE Indicates whether the CL91 codeword needs to be descrambled. Should be enabled for FC mode.
 *     R_TC_IN_MODE     Indicates whether CL91 is turned ON for the port or not.
 *     R_TC_MODE        
 *     R_FIVE_BIT_XOR_EN 1'b1 - XOR 4:0 with 12:8, 1'b0 - No XOR of the 5 bits
 *     R_TC_OUT_MODE    
 *     R_HG2_ENABLE     Enables HG2 support for PCS
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_7_GEN2r (0x00109279 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_7_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR0_7_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_7_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr0_7_gen2[1];
	uint32_t _sc_x1_spd_ovrr0_7_gen2;
} BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_7_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_7_GEN2r_CLR(r) (r).sc_x1_spd_ovrr0_7_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_7_GEN2r_SET(r,d) (r).sc_x1_spd_ovrr0_7_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_7_GEN2r_GET(r) (r).sc_x1_spd_ovrr0_7_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_7_GEN2r_R_HG2_ENABLEf_GET(r) ((((r).sc_x1_spd_ovrr0_7_gen2[0]) >> 13) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_7_GEN2r_R_HG2_ENABLEf_SET(r,f) (r).sc_x1_spd_ovrr0_7_gen2[0]=(((r).sc_x1_spd_ovrr0_7_gen2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_7_GEN2r_R_TC_OUT_MODEf_GET(r) ((((r).sc_x1_spd_ovrr0_7_gen2[0]) >> 11) & 0x3)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_7_GEN2r_R_TC_OUT_MODEf_SET(r,f) (r).sc_x1_spd_ovrr0_7_gen2[0]=(((r).sc_x1_spd_ovrr0_7_gen2[0] & ~((uint32_t)0x3 << 11)) | ((((uint32_t)f) & 0x3) << 11)) | (3 << (16 + 11))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_7_GEN2r_R_FIVE_BIT_XOR_ENf_GET(r) ((((r).sc_x1_spd_ovrr0_7_gen2[0]) >> 10) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_7_GEN2r_R_FIVE_BIT_XOR_ENf_SET(r,f) (r).sc_x1_spd_ovrr0_7_gen2[0]=(((r).sc_x1_spd_ovrr0_7_gen2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_7_GEN2r_R_TC_MODEf_GET(r) ((((r).sc_x1_spd_ovrr0_7_gen2[0]) >> 8) & 0x3)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_7_GEN2r_R_TC_MODEf_SET(r,f) (r).sc_x1_spd_ovrr0_7_gen2[0]=(((r).sc_x1_spd_ovrr0_7_gen2[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_7_GEN2r_R_TC_IN_MODEf_GET(r) ((((r).sc_x1_spd_ovrr0_7_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_7_GEN2r_R_TC_IN_MODEf_SET(r,f) (r).sc_x1_spd_ovrr0_7_gen2[0]=(((r).sc_x1_spd_ovrr0_7_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_7_GEN2r_R_CL91_CW_SCRAMBLEf_GET(r) ((((r).sc_x1_spd_ovrr0_7_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_7_GEN2r_R_CL91_CW_SCRAMBLEf_SET(r,f) (r).sc_x1_spd_ovrr0_7_gen2[0]=(((r).sc_x1_spd_ovrr0_7_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_7_GEN2r_R_MERGE_MODEf_GET(r) ((((r).sc_x1_spd_ovrr0_7_gen2[0]) >> 3) & 0x7)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_7_GEN2r_R_MERGE_MODEf_SET(r,f) (r).sc_x1_spd_ovrr0_7_gen2[0]=(((r).sc_x1_spd_ovrr0_7_gen2[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3)) | (7 << (16 + 3))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_7_GEN2r_CL91_BLKSYNC_MODEf_GET(r) (((r).sc_x1_spd_ovrr0_7_gen2[0]) & 0x7)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_7_GEN2r_CL91_BLKSYNC_MODEf_SET(r,f) (r).sc_x1_spd_ovrr0_7_gen2[0]=(((r).sc_x1_spd_ovrr0_7_gen2[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR0_7_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR0_7_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_7_GEN2r,(_r._sc_x1_spd_ovrr0_7_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR0_7_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_7_GEN2r,(_r._sc_x1_spd_ovrr0_7_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR0_7_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_7_GEN2r,(_r._sc_x1_spd_ovrr0_7_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR0_7_GEN2r BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_7_GEN2r
#define SC_X1_SPD_OVRR0_7_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_7_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_7_GEN2r_t SC_X1_SPD_OVRR0_7_GEN2r_t;
#define SC_X1_SPD_OVRR0_7_GEN2r_CLR BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_7_GEN2r_CLR
#define SC_X1_SPD_OVRR0_7_GEN2r_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_7_GEN2r_SET
#define SC_X1_SPD_OVRR0_7_GEN2r_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_7_GEN2r_GET
#define SC_X1_SPD_OVRR0_7_GEN2r_R_HG2_ENABLEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_7_GEN2r_R_HG2_ENABLEf_GET
#define SC_X1_SPD_OVRR0_7_GEN2r_R_HG2_ENABLEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_7_GEN2r_R_HG2_ENABLEf_SET
#define SC_X1_SPD_OVRR0_7_GEN2r_R_TC_OUT_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_7_GEN2r_R_TC_OUT_MODEf_GET
#define SC_X1_SPD_OVRR0_7_GEN2r_R_TC_OUT_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_7_GEN2r_R_TC_OUT_MODEf_SET
#define SC_X1_SPD_OVRR0_7_GEN2r_R_FIVE_BIT_XOR_ENf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_7_GEN2r_R_FIVE_BIT_XOR_ENf_GET
#define SC_X1_SPD_OVRR0_7_GEN2r_R_FIVE_BIT_XOR_ENf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_7_GEN2r_R_FIVE_BIT_XOR_ENf_SET
#define SC_X1_SPD_OVRR0_7_GEN2r_R_TC_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_7_GEN2r_R_TC_MODEf_GET
#define SC_X1_SPD_OVRR0_7_GEN2r_R_TC_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_7_GEN2r_R_TC_MODEf_SET
#define SC_X1_SPD_OVRR0_7_GEN2r_R_TC_IN_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_7_GEN2r_R_TC_IN_MODEf_GET
#define SC_X1_SPD_OVRR0_7_GEN2r_R_TC_IN_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_7_GEN2r_R_TC_IN_MODEf_SET
#define SC_X1_SPD_OVRR0_7_GEN2r_R_CL91_CW_SCRAMBLEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_7_GEN2r_R_CL91_CW_SCRAMBLEf_GET
#define SC_X1_SPD_OVRR0_7_GEN2r_R_CL91_CW_SCRAMBLEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_7_GEN2r_R_CL91_CW_SCRAMBLEf_SET
#define SC_X1_SPD_OVRR0_7_GEN2r_R_MERGE_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_7_GEN2r_R_MERGE_MODEf_GET
#define SC_X1_SPD_OVRR0_7_GEN2r_R_MERGE_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_7_GEN2r_R_MERGE_MODEf_SET
#define SC_X1_SPD_OVRR0_7_GEN2r_CL91_BLKSYNC_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_7_GEN2r_CL91_BLKSYNC_MODEf_GET
#define SC_X1_SPD_OVRR0_7_GEN2r_CL91_BLKSYNC_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_7_GEN2r_CL91_BLKSYNC_MODEf_SET
#define READ_SC_X1_SPD_OVRR0_7_GEN2r BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR0_7_GEN2r
#define WRITE_SC_X1_SPD_OVRR0_7_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR0_7_GEN2r
#define MODIFY_SC_X1_SPD_OVRR0_7_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR0_7_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_7_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X1_SPD_OVRR0_8_GEN2
 * BLOCKS:   SC_X1_SPEED_OVERRIDE0
 * REGADDR:  0x927a
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CORRUPT_2ND_GROUP Corrupt 2nd group of codeward
 *     CORRUPT_6TH_GROUP Corrupt 6th group of codeward
 *     CL74_SHCORRUPT   Sync Header Corruption for CL74 FEC Error (uncorrectable).0: Only 5 SH, 1: All SH corrupted.
 *     BER_COUNT_SEL    0: select count based on cl49 else based on cl82
 *     BER_WINDOW_SEL   0: select window based on cl49 else based on cl82
 *     USE_100G_AM0     AM0 will be taken from 100G AM
 *     USE_100G_AM123   AM 1, 2, 3 will be taken from 100G AMs
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_8_GEN2r (0x0010927a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_8_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR0_8_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_8_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr0_8_gen2[1];
	uint32_t _sc_x1_spd_ovrr0_8_gen2;
} BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_8_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_8_GEN2r_CLR(r) (r).sc_x1_spd_ovrr0_8_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_8_GEN2r_SET(r,d) (r).sc_x1_spd_ovrr0_8_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_8_GEN2r_GET(r) (r).sc_x1_spd_ovrr0_8_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_8_GEN2r_USE_100G_AM123f_GET(r) ((((r).sc_x1_spd_ovrr0_8_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_8_GEN2r_USE_100G_AM123f_SET(r,f) (r).sc_x1_spd_ovrr0_8_gen2[0]=(((r).sc_x1_spd_ovrr0_8_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_8_GEN2r_USE_100G_AM0f_GET(r) ((((r).sc_x1_spd_ovrr0_8_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_8_GEN2r_USE_100G_AM0f_SET(r,f) (r).sc_x1_spd_ovrr0_8_gen2[0]=(((r).sc_x1_spd_ovrr0_8_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_8_GEN2r_BER_WINDOW_SELf_GET(r) ((((r).sc_x1_spd_ovrr0_8_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_8_GEN2r_BER_WINDOW_SELf_SET(r,f) (r).sc_x1_spd_ovrr0_8_gen2[0]=(((r).sc_x1_spd_ovrr0_8_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_8_GEN2r_BER_COUNT_SELf_GET(r) ((((r).sc_x1_spd_ovrr0_8_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_8_GEN2r_BER_COUNT_SELf_SET(r,f) (r).sc_x1_spd_ovrr0_8_gen2[0]=(((r).sc_x1_spd_ovrr0_8_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_8_GEN2r_CL74_SHCORRUPTf_GET(r) ((((r).sc_x1_spd_ovrr0_8_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_8_GEN2r_CL74_SHCORRUPTf_SET(r,f) (r).sc_x1_spd_ovrr0_8_gen2[0]=(((r).sc_x1_spd_ovrr0_8_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_8_GEN2r_CORRUPT_6TH_GROUPf_GET(r) ((((r).sc_x1_spd_ovrr0_8_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_8_GEN2r_CORRUPT_6TH_GROUPf_SET(r,f) (r).sc_x1_spd_ovrr0_8_gen2[0]=(((r).sc_x1_spd_ovrr0_8_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_8_GEN2r_CORRUPT_2ND_GROUPf_GET(r) (((r).sc_x1_spd_ovrr0_8_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_8_GEN2r_CORRUPT_2ND_GROUPf_SET(r,f) (r).sc_x1_spd_ovrr0_8_gen2[0]=(((r).sc_x1_spd_ovrr0_8_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR0_8_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR0_8_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_8_GEN2r,(_r._sc_x1_spd_ovrr0_8_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR0_8_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_8_GEN2r,(_r._sc_x1_spd_ovrr0_8_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR0_8_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_8_GEN2r,(_r._sc_x1_spd_ovrr0_8_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR0_8_GEN2r BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_8_GEN2r
#define SC_X1_SPD_OVRR0_8_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_8_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_8_GEN2r_t SC_X1_SPD_OVRR0_8_GEN2r_t;
#define SC_X1_SPD_OVRR0_8_GEN2r_CLR BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_8_GEN2r_CLR
#define SC_X1_SPD_OVRR0_8_GEN2r_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_8_GEN2r_SET
#define SC_X1_SPD_OVRR0_8_GEN2r_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_8_GEN2r_GET
#define SC_X1_SPD_OVRR0_8_GEN2r_USE_100G_AM123f_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_8_GEN2r_USE_100G_AM123f_GET
#define SC_X1_SPD_OVRR0_8_GEN2r_USE_100G_AM123f_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_8_GEN2r_USE_100G_AM123f_SET
#define SC_X1_SPD_OVRR0_8_GEN2r_USE_100G_AM0f_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_8_GEN2r_USE_100G_AM0f_GET
#define SC_X1_SPD_OVRR0_8_GEN2r_USE_100G_AM0f_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_8_GEN2r_USE_100G_AM0f_SET
#define SC_X1_SPD_OVRR0_8_GEN2r_BER_WINDOW_SELf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_8_GEN2r_BER_WINDOW_SELf_GET
#define SC_X1_SPD_OVRR0_8_GEN2r_BER_WINDOW_SELf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_8_GEN2r_BER_WINDOW_SELf_SET
#define SC_X1_SPD_OVRR0_8_GEN2r_BER_COUNT_SELf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_8_GEN2r_BER_COUNT_SELf_GET
#define SC_X1_SPD_OVRR0_8_GEN2r_BER_COUNT_SELf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_8_GEN2r_BER_COUNT_SELf_SET
#define SC_X1_SPD_OVRR0_8_GEN2r_CL74_SHCORRUPTf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_8_GEN2r_CL74_SHCORRUPTf_GET
#define SC_X1_SPD_OVRR0_8_GEN2r_CL74_SHCORRUPTf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_8_GEN2r_CL74_SHCORRUPTf_SET
#define SC_X1_SPD_OVRR0_8_GEN2r_CORRUPT_6TH_GROUPf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_8_GEN2r_CORRUPT_6TH_GROUPf_GET
#define SC_X1_SPD_OVRR0_8_GEN2r_CORRUPT_6TH_GROUPf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_8_GEN2r_CORRUPT_6TH_GROUPf_SET
#define SC_X1_SPD_OVRR0_8_GEN2r_CORRUPT_2ND_GROUPf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_8_GEN2r_CORRUPT_2ND_GROUPf_GET
#define SC_X1_SPD_OVRR0_8_GEN2r_CORRUPT_2ND_GROUPf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_8_GEN2r_CORRUPT_2ND_GROUPf_SET
#define READ_SC_X1_SPD_OVRR0_8_GEN2r BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR0_8_GEN2r
#define WRITE_SC_X1_SPD_OVRR0_8_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR0_8_GEN2r
#define MODIFY_SC_X1_SPD_OVRR0_8_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR0_8_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X1_SPD_OVRR0_8_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X1_SPD_OVRR1_SPD_GEN2
 * BLOCKS:   SC_X1_SPEED_OVERRIDE1
 * REGADDR:  0x9280
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/W
 * FIELDS:
 *     NUM_LANES        Number of lanes for override configuration0   : NUM_LANES_01 - use 1 lane1   : NUM_LANES_02 - use 2 lanes2   : NUM_LANES_04 - use 4 lanes
 *     T_PMA_40B_MODE   1'b0 - 66-bit data write in t_pma.1'b1 - 40-bit data write in t_pma.
 *     CL36TX_EN        Per logical lane: cl36 TX pipeline: 1=enabled , 0=disabled
 *     CL36RX_EN        Per logical lane: cl36 RX pipeline: 1=enabled , 0=disabled
 *     SPEED            Actual speed set by SW
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_SPD_GEN2r (0x00109280 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_SPD_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR1_SPD_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_SPD_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr1_spd_gen2[1];
	uint32_t _sc_x1_spd_ovrr1_spd_gen2;
} BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_SPD_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_SPD_GEN2r_CLR(r) (r).sc_x1_spd_ovrr1_spd_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_SPD_GEN2r_SET(r,d) (r).sc_x1_spd_ovrr1_spd_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_SPD_GEN2r_GET(r) (r).sc_x1_spd_ovrr1_spd_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_SPD_GEN2r_SPEEDf_GET(r) ((((r).sc_x1_spd_ovrr1_spd_gen2[0]) >> 8) & 0xff)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_SPD_GEN2r_SPEEDf_SET(r,f) (r).sc_x1_spd_ovrr1_spd_gen2[0]=(((r).sc_x1_spd_ovrr1_spd_gen2[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_SPD_GEN2r_CL36RX_ENf_GET(r) ((((r).sc_x1_spd_ovrr1_spd_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_SPD_GEN2r_CL36RX_ENf_SET(r,f) (r).sc_x1_spd_ovrr1_spd_gen2[0]=(((r).sc_x1_spd_ovrr1_spd_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_SPD_GEN2r_CL36TX_ENf_GET(r) ((((r).sc_x1_spd_ovrr1_spd_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_SPD_GEN2r_CL36TX_ENf_SET(r,f) (r).sc_x1_spd_ovrr1_spd_gen2[0]=(((r).sc_x1_spd_ovrr1_spd_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_SPD_GEN2r_T_PMA_40B_MODEf_GET(r) ((((r).sc_x1_spd_ovrr1_spd_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_SPD_GEN2r_T_PMA_40B_MODEf_SET(r,f) (r).sc_x1_spd_ovrr1_spd_gen2[0]=(((r).sc_x1_spd_ovrr1_spd_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_SPD_GEN2r_NUM_LANESf_GET(r) (((r).sc_x1_spd_ovrr1_spd_gen2[0]) & 0x7)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_SPD_GEN2r_NUM_LANESf_SET(r,f) (r).sc_x1_spd_ovrr1_spd_gen2[0]=(((r).sc_x1_spd_ovrr1_spd_gen2[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR1_SPD_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR1_SPD_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_SPD_GEN2r,(_r._sc_x1_spd_ovrr1_spd_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR1_SPD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_SPD_GEN2r,(_r._sc_x1_spd_ovrr1_spd_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR1_SPD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_SPD_GEN2r,(_r._sc_x1_spd_ovrr1_spd_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR1_SPD_GEN2r BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_SPD_GEN2r
#define SC_X1_SPD_OVRR1_SPD_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_SPD_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_SPD_GEN2r_t SC_X1_SPD_OVRR1_SPD_GEN2r_t;
#define SC_X1_SPD_OVRR1_SPD_GEN2r_CLR BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_SPD_GEN2r_CLR
#define SC_X1_SPD_OVRR1_SPD_GEN2r_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_SPD_GEN2r_SET
#define SC_X1_SPD_OVRR1_SPD_GEN2r_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_SPD_GEN2r_GET
#define SC_X1_SPD_OVRR1_SPD_GEN2r_SPEEDf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_SPD_GEN2r_SPEEDf_GET
#define SC_X1_SPD_OVRR1_SPD_GEN2r_SPEEDf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_SPD_GEN2r_SPEEDf_SET
#define SC_X1_SPD_OVRR1_SPD_GEN2r_CL36RX_ENf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_SPD_GEN2r_CL36RX_ENf_GET
#define SC_X1_SPD_OVRR1_SPD_GEN2r_CL36RX_ENf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_SPD_GEN2r_CL36RX_ENf_SET
#define SC_X1_SPD_OVRR1_SPD_GEN2r_CL36TX_ENf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_SPD_GEN2r_CL36TX_ENf_GET
#define SC_X1_SPD_OVRR1_SPD_GEN2r_CL36TX_ENf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_SPD_GEN2r_CL36TX_ENf_SET
#define SC_X1_SPD_OVRR1_SPD_GEN2r_T_PMA_40B_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_SPD_GEN2r_T_PMA_40B_MODEf_GET
#define SC_X1_SPD_OVRR1_SPD_GEN2r_T_PMA_40B_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_SPD_GEN2r_T_PMA_40B_MODEf_SET
#define SC_X1_SPD_OVRR1_SPD_GEN2r_NUM_LANESf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_SPD_GEN2r_NUM_LANESf_GET
#define SC_X1_SPD_OVRR1_SPD_GEN2r_NUM_LANESf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_SPD_GEN2r_NUM_LANESf_SET
#define READ_SC_X1_SPD_OVRR1_SPD_GEN2r BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR1_SPD_GEN2r
#define WRITE_SC_X1_SPD_OVRR1_SPD_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR1_SPD_GEN2r
#define MODIFY_SC_X1_SPD_OVRR1_SPD_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR1_SPD_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_SPD_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X1_SPD_OVRR1_0_GEN2
 * BLOCKS:   SC_X1_SPEED_OVERRIDE1
 * REGADDR:  0x9282
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     SCR_MODE         
 *     T_PMA_BTMX_MODE  Number of PCS lanes bitmuxed
 *     T_HG2_ENABLE     Enables HG2 support for PCS
 *     T_ENC_MODE       
 *     T_FIFO_MODE      T_FIFO stage control field
 *     OS_MODE          
 *     CL72_EN          Enables cl72
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_0_GEN2r (0x00109282 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR1_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_0_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr1_0_gen2[1];
	uint32_t _sc_x1_spd_ovrr1_0_gen2;
} BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_0_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_0_GEN2r_CLR(r) (r).sc_x1_spd_ovrr1_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_0_GEN2r_SET(r,d) (r).sc_x1_spd_ovrr1_0_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_0_GEN2r_GET(r) (r).sc_x1_spd_ovrr1_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_0_GEN2r_CL72_ENf_GET(r) ((((r).sc_x1_spd_ovrr1_0_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_0_GEN2r_CL72_ENf_SET(r,f) (r).sc_x1_spd_ovrr1_0_gen2[0]=(((r).sc_x1_spd_ovrr1_0_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_0_GEN2r_OS_MODEf_GET(r) ((((r).sc_x1_spd_ovrr1_0_gen2[0]) >> 11) & 0xf)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_0_GEN2r_OS_MODEf_SET(r,f) (r).sc_x1_spd_ovrr1_0_gen2[0]=(((r).sc_x1_spd_ovrr1_0_gen2[0] & ~((uint32_t)0xf << 11)) | ((((uint32_t)f) & 0xf) << 11)) | (15 << (16 + 11))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_0_GEN2r_T_FIFO_MODEf_GET(r) ((((r).sc_x1_spd_ovrr1_0_gen2[0]) >> 9) & 0x3)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_0_GEN2r_T_FIFO_MODEf_SET(r,f) (r).sc_x1_spd_ovrr1_0_gen2[0]=(((r).sc_x1_spd_ovrr1_0_gen2[0] & ~((uint32_t)0x3 << 9)) | ((((uint32_t)f) & 0x3) << 9)) | (3 << (16 + 9))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_0_GEN2r_T_ENC_MODEf_GET(r) ((((r).sc_x1_spd_ovrr1_0_gen2[0]) >> 7) & 0x3)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_0_GEN2r_T_ENC_MODEf_SET(r,f) (r).sc_x1_spd_ovrr1_0_gen2[0]=(((r).sc_x1_spd_ovrr1_0_gen2[0] & ~((uint32_t)0x3 << 7)) | ((((uint32_t)f) & 0x3) << 7)) | (3 << (16 + 7))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_0_GEN2r_T_HG2_ENABLEf_GET(r) ((((r).sc_x1_spd_ovrr1_0_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_0_GEN2r_T_HG2_ENABLEf_SET(r,f) (r).sc_x1_spd_ovrr1_0_gen2[0]=(((r).sc_x1_spd_ovrr1_0_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_0_GEN2r_T_PMA_BTMX_MODEf_GET(r) ((((r).sc_x1_spd_ovrr1_0_gen2[0]) >> 4) & 0x3)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_0_GEN2r_T_PMA_BTMX_MODEf_SET(r,f) (r).sc_x1_spd_ovrr1_0_gen2[0]=(((r).sc_x1_spd_ovrr1_0_gen2[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_0_GEN2r_SCR_MODEf_GET(r) ((((r).sc_x1_spd_ovrr1_0_gen2[0]) >> 1) & 0x7)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_0_GEN2r_SCR_MODEf_SET(r,f) (r).sc_x1_spd_ovrr1_0_gen2[0]=(((r).sc_x1_spd_ovrr1_0_gen2[0] & ~((uint32_t)0x7 << 1)) | ((((uint32_t)f) & 0x7) << 1)) | (7 << (16 + 1))

/*
 * These macros can be used to access SC_X1_SPD_OVRR1_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR1_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_0_GEN2r,(_r._sc_x1_spd_ovrr1_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR1_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_0_GEN2r,(_r._sc_x1_spd_ovrr1_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR1_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_0_GEN2r,(_r._sc_x1_spd_ovrr1_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR1_0_GEN2r BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_0_GEN2r
#define SC_X1_SPD_OVRR1_0_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_0_GEN2r_t SC_X1_SPD_OVRR1_0_GEN2r_t;
#define SC_X1_SPD_OVRR1_0_GEN2r_CLR BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_0_GEN2r_CLR
#define SC_X1_SPD_OVRR1_0_GEN2r_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_0_GEN2r_SET
#define SC_X1_SPD_OVRR1_0_GEN2r_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_0_GEN2r_GET
#define SC_X1_SPD_OVRR1_0_GEN2r_CL72_ENf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_0_GEN2r_CL72_ENf_GET
#define SC_X1_SPD_OVRR1_0_GEN2r_CL72_ENf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_0_GEN2r_CL72_ENf_SET
#define SC_X1_SPD_OVRR1_0_GEN2r_OS_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_0_GEN2r_OS_MODEf_GET
#define SC_X1_SPD_OVRR1_0_GEN2r_OS_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_0_GEN2r_OS_MODEf_SET
#define SC_X1_SPD_OVRR1_0_GEN2r_T_FIFO_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_0_GEN2r_T_FIFO_MODEf_GET
#define SC_X1_SPD_OVRR1_0_GEN2r_T_FIFO_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_0_GEN2r_T_FIFO_MODEf_SET
#define SC_X1_SPD_OVRR1_0_GEN2r_T_ENC_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_0_GEN2r_T_ENC_MODEf_GET
#define SC_X1_SPD_OVRR1_0_GEN2r_T_ENC_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_0_GEN2r_T_ENC_MODEf_SET
#define SC_X1_SPD_OVRR1_0_GEN2r_T_HG2_ENABLEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_0_GEN2r_T_HG2_ENABLEf_GET
#define SC_X1_SPD_OVRR1_0_GEN2r_T_HG2_ENABLEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_0_GEN2r_T_HG2_ENABLEf_SET
#define SC_X1_SPD_OVRR1_0_GEN2r_T_PMA_BTMX_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_0_GEN2r_T_PMA_BTMX_MODEf_GET
#define SC_X1_SPD_OVRR1_0_GEN2r_T_PMA_BTMX_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_0_GEN2r_T_PMA_BTMX_MODEf_SET
#define SC_X1_SPD_OVRR1_0_GEN2r_SCR_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_0_GEN2r_SCR_MODEf_GET
#define SC_X1_SPD_OVRR1_0_GEN2r_SCR_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_0_GEN2r_SCR_MODEf_SET
#define READ_SC_X1_SPD_OVRR1_0_GEN2r BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR1_0_GEN2r
#define WRITE_SC_X1_SPD_OVRR1_0_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR1_0_GEN2r
#define MODIFY_SC_X1_SPD_OVRR1_0_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR1_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X1_SPD_OVRR1_1_GEN2
 * BLOCKS:   SC_X1_SPEED_OVERRIDE1
 * REGADDR:  0x9283
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BS_BTMX_MODE     Bit-mux mode: Indicates the format of incoming data on a physical lane.
 *     BS_DIST_MODE     Block to lane distribution mode.BS_DIST_MODE_5_LANE_TDM - 5 lane TDM. Each block distributed in turn over output pseudo-logical lanes 0-4BS_DIST_MODE_2_LANE_TDM_2_VLANE - 2 lane TDM for 2 virtual lanes.Virtual Lane 0 output is ping-ponged over pseudo-logical lanes 0,2.Virtual Lane 1 output is ping-ponged over pseudo-logical lanes 1,3.BS_DIST_MODE_2_LANE_TDM_1_VLANE - 2 lane TDM for 1 virtual lane.Virtual Lane 0 output is ping-ponged over pseudo-logical lanes 0,2.BS_DIST_MODE_NO_TDM - No TDM. Virtual Lane output is sent directly to corresponding pseudo-logical lane.
 *     BS_SYNC_EN       Enable block synchronization: If enabled, block sync sm will attempt to slip data until sync is achieved.
 *     BS_SM_SYNC_MODE  Block Sync Mode: When bs_sync_en==1, this bit indicates if cl49 or cl82 state machine operation is used.1'b0 - Clause 821'b1 - Clause 49
 *     DEC_FSM_MODE     
 *     DESKEW_MODE      
 *     DEC_TL_MODE      
 *     DESCR_MODE       
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_1_GEN2r (0x00109283 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR1_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_1_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr1_1_gen2[1];
	uint32_t _sc_x1_spd_ovrr1_1_gen2;
} BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_1_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_1_GEN2r_CLR(r) (r).sc_x1_spd_ovrr1_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_1_GEN2r_SET(r,d) (r).sc_x1_spd_ovrr1_1_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_1_GEN2r_GET(r) (r).sc_x1_spd_ovrr1_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_1_GEN2r_DESCR_MODEf_GET(r) ((((r).sc_x1_spd_ovrr1_1_gen2[0]) >> 14) & 0x3)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_1_GEN2r_DESCR_MODEf_SET(r,f) (r).sc_x1_spd_ovrr1_1_gen2[0]=(((r).sc_x1_spd_ovrr1_1_gen2[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_1_GEN2r_DEC_TL_MODEf_GET(r) ((((r).sc_x1_spd_ovrr1_1_gen2[0]) >> 12) & 0x3)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_1_GEN2r_DEC_TL_MODEf_SET(r,f) (r).sc_x1_spd_ovrr1_1_gen2[0]=(((r).sc_x1_spd_ovrr1_1_gen2[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12)) | (3 << (16 + 12))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_1_GEN2r_DESKEW_MODEf_GET(r) ((((r).sc_x1_spd_ovrr1_1_gen2[0]) >> 8) & 0xf)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_1_GEN2r_DESKEW_MODEf_SET(r,f) (r).sc_x1_spd_ovrr1_1_gen2[0]=(((r).sc_x1_spd_ovrr1_1_gen2[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_1_GEN2r_DEC_FSM_MODEf_GET(r) ((((r).sc_x1_spd_ovrr1_1_gen2[0]) >> 6) & 0x3)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_1_GEN2r_DEC_FSM_MODEf_SET(r,f) (r).sc_x1_spd_ovrr1_1_gen2[0]=(((r).sc_x1_spd_ovrr1_1_gen2[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6)) | (3 << (16 + 6))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_1_GEN2r_BS_SM_SYNC_MODEf_GET(r) ((((r).sc_x1_spd_ovrr1_1_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_1_GEN2r_BS_SM_SYNC_MODEf_SET(r,f) (r).sc_x1_spd_ovrr1_1_gen2[0]=(((r).sc_x1_spd_ovrr1_1_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_1_GEN2r_BS_SYNC_ENf_GET(r) ((((r).sc_x1_spd_ovrr1_1_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_1_GEN2r_BS_SYNC_ENf_SET(r,f) (r).sc_x1_spd_ovrr1_1_gen2[0]=(((r).sc_x1_spd_ovrr1_1_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_1_GEN2r_BS_DIST_MODEf_GET(r) ((((r).sc_x1_spd_ovrr1_1_gen2[0]) >> 2) & 0x3)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_1_GEN2r_BS_DIST_MODEf_SET(r,f) (r).sc_x1_spd_ovrr1_1_gen2[0]=(((r).sc_x1_spd_ovrr1_1_gen2[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2)) | (3 << (16 + 2))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_1_GEN2r_BS_BTMX_MODEf_GET(r) (((r).sc_x1_spd_ovrr1_1_gen2[0]) & 0x3)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_1_GEN2r_BS_BTMX_MODEf_SET(r,f) (r).sc_x1_spd_ovrr1_1_gen2[0]=(((r).sc_x1_spd_ovrr1_1_gen2[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR1_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR1_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_1_GEN2r,(_r._sc_x1_spd_ovrr1_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR1_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_1_GEN2r,(_r._sc_x1_spd_ovrr1_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR1_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_1_GEN2r,(_r._sc_x1_spd_ovrr1_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR1_1_GEN2r BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_1_GEN2r
#define SC_X1_SPD_OVRR1_1_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_1_GEN2r_t SC_X1_SPD_OVRR1_1_GEN2r_t;
#define SC_X1_SPD_OVRR1_1_GEN2r_CLR BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_1_GEN2r_CLR
#define SC_X1_SPD_OVRR1_1_GEN2r_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_1_GEN2r_SET
#define SC_X1_SPD_OVRR1_1_GEN2r_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_1_GEN2r_GET
#define SC_X1_SPD_OVRR1_1_GEN2r_DESCR_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_1_GEN2r_DESCR_MODEf_GET
#define SC_X1_SPD_OVRR1_1_GEN2r_DESCR_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_1_GEN2r_DESCR_MODEf_SET
#define SC_X1_SPD_OVRR1_1_GEN2r_DEC_TL_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_1_GEN2r_DEC_TL_MODEf_GET
#define SC_X1_SPD_OVRR1_1_GEN2r_DEC_TL_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_1_GEN2r_DEC_TL_MODEf_SET
#define SC_X1_SPD_OVRR1_1_GEN2r_DESKEW_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_1_GEN2r_DESKEW_MODEf_GET
#define SC_X1_SPD_OVRR1_1_GEN2r_DESKEW_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_1_GEN2r_DESKEW_MODEf_SET
#define SC_X1_SPD_OVRR1_1_GEN2r_DEC_FSM_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_1_GEN2r_DEC_FSM_MODEf_GET
#define SC_X1_SPD_OVRR1_1_GEN2r_DEC_FSM_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_1_GEN2r_DEC_FSM_MODEf_SET
#define SC_X1_SPD_OVRR1_1_GEN2r_BS_SM_SYNC_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_1_GEN2r_BS_SM_SYNC_MODEf_GET
#define SC_X1_SPD_OVRR1_1_GEN2r_BS_SM_SYNC_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_1_GEN2r_BS_SM_SYNC_MODEf_SET
#define SC_X1_SPD_OVRR1_1_GEN2r_BS_SYNC_ENf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_1_GEN2r_BS_SYNC_ENf_GET
#define SC_X1_SPD_OVRR1_1_GEN2r_BS_SYNC_ENf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_1_GEN2r_BS_SYNC_ENf_SET
#define SC_X1_SPD_OVRR1_1_GEN2r_BS_DIST_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_1_GEN2r_BS_DIST_MODEf_GET
#define SC_X1_SPD_OVRR1_1_GEN2r_BS_DIST_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_1_GEN2r_BS_DIST_MODEf_SET
#define SC_X1_SPD_OVRR1_1_GEN2r_BS_BTMX_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_1_GEN2r_BS_BTMX_MODEf_GET
#define SC_X1_SPD_OVRR1_1_GEN2r_BS_BTMX_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_1_GEN2r_BS_BTMX_MODEf_SET
#define READ_SC_X1_SPD_OVRR1_1_GEN2r BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR1_1_GEN2r
#define WRITE_SC_X1_SPD_OVRR1_1_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR1_1_GEN2r
#define MODIFY_SC_X1_SPD_OVRR1_1_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR1_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X1_SPD_OVRR1_2_GEN2
 * BLOCKS:   SC_X1_SPEED_OVERRIDE1
 * REGADDR:  0x9284
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CLOCKCNT0        clock count 0 for credit programming, range 5 to 4125
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_2_GEN2r (0x00109284 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR1_2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_2_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr1_2_gen2[1];
	uint32_t _sc_x1_spd_ovrr1_2_gen2;
} BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_2_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_2_GEN2r_CLR(r) (r).sc_x1_spd_ovrr1_2_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_2_GEN2r_SET(r,d) (r).sc_x1_spd_ovrr1_2_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_2_GEN2r_GET(r) (r).sc_x1_spd_ovrr1_2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_2_GEN2r_CLOCKCNT0f_GET(r) (((r).sc_x1_spd_ovrr1_2_gen2[0]) & 0x3fff)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_2_GEN2r_CLOCKCNT0f_SET(r,f) (r).sc_x1_spd_ovrr1_2_gen2[0]=(((r).sc_x1_spd_ovrr1_2_gen2[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff)) | (0x3fff << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR1_2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR1_2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_2_GEN2r,(_r._sc_x1_spd_ovrr1_2_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR1_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_2_GEN2r,(_r._sc_x1_spd_ovrr1_2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR1_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_2_GEN2r,(_r._sc_x1_spd_ovrr1_2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR1_2_GEN2r BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_2_GEN2r
#define SC_X1_SPD_OVRR1_2_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_2_GEN2r_t SC_X1_SPD_OVRR1_2_GEN2r_t;
#define SC_X1_SPD_OVRR1_2_GEN2r_CLR BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_2_GEN2r_CLR
#define SC_X1_SPD_OVRR1_2_GEN2r_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_2_GEN2r_SET
#define SC_X1_SPD_OVRR1_2_GEN2r_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_2_GEN2r_GET
#define SC_X1_SPD_OVRR1_2_GEN2r_CLOCKCNT0f_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_2_GEN2r_CLOCKCNT0f_GET
#define SC_X1_SPD_OVRR1_2_GEN2r_CLOCKCNT0f_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_2_GEN2r_CLOCKCNT0f_SET
#define READ_SC_X1_SPD_OVRR1_2_GEN2r BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR1_2_GEN2r
#define WRITE_SC_X1_SPD_OVRR1_2_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR1_2_GEN2r
#define MODIFY_SC_X1_SPD_OVRR1_2_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR1_2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X1_SPD_OVRR1_3_GEN2
 * BLOCKS:   SC_X1_SPEED_OVERRIDE1
 * REGADDR:  0x9285
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CLOCKCNT1        clock count 1 for credit programming, range 4 to 12
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_3_GEN2r (0x00109285 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_3_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR1_3_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_3_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr1_3_gen2[1];
	uint32_t _sc_x1_spd_ovrr1_3_gen2;
} BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_3_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_3_GEN2r_CLR(r) (r).sc_x1_spd_ovrr1_3_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_3_GEN2r_SET(r,d) (r).sc_x1_spd_ovrr1_3_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_3_GEN2r_GET(r) (r).sc_x1_spd_ovrr1_3_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_3_GEN2r_CLOCKCNT1f_GET(r) (((r).sc_x1_spd_ovrr1_3_gen2[0]) & 0xff)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_3_GEN2r_CLOCKCNT1f_SET(r,f) (r).sc_x1_spd_ovrr1_3_gen2[0]=(((r).sc_x1_spd_ovrr1_3_gen2[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR1_3_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR1_3_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_3_GEN2r,(_r._sc_x1_spd_ovrr1_3_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR1_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_3_GEN2r,(_r._sc_x1_spd_ovrr1_3_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR1_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_3_GEN2r,(_r._sc_x1_spd_ovrr1_3_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR1_3_GEN2r BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_3_GEN2r
#define SC_X1_SPD_OVRR1_3_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_3_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_3_GEN2r_t SC_X1_SPD_OVRR1_3_GEN2r_t;
#define SC_X1_SPD_OVRR1_3_GEN2r_CLR BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_3_GEN2r_CLR
#define SC_X1_SPD_OVRR1_3_GEN2r_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_3_GEN2r_SET
#define SC_X1_SPD_OVRR1_3_GEN2r_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_3_GEN2r_GET
#define SC_X1_SPD_OVRR1_3_GEN2r_CLOCKCNT1f_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_3_GEN2r_CLOCKCNT1f_GET
#define SC_X1_SPD_OVRR1_3_GEN2r_CLOCKCNT1f_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_3_GEN2r_CLOCKCNT1f_SET
#define READ_SC_X1_SPD_OVRR1_3_GEN2r BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR1_3_GEN2r
#define WRITE_SC_X1_SPD_OVRR1_3_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR1_3_GEN2r
#define MODIFY_SC_X1_SPD_OVRR1_3_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR1_3_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_3_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X1_SPD_OVRR1_4_GEN2
 * BLOCKS:   SC_X1_SPEED_OVERRIDE1
 * REGADDR:  0x9286
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LOOPCNT1         loop count 1 for credit programming, range 2 to 18
 *     LOOPCNT0         loop count 0 for credit programming, range 1 to 1
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_4_GEN2r (0x00109286 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_4_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR1_4_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_4_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr1_4_gen2[1];
	uint32_t _sc_x1_spd_ovrr1_4_gen2;
} BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_4_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_4_GEN2r_CLR(r) (r).sc_x1_spd_ovrr1_4_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_4_GEN2r_SET(r,d) (r).sc_x1_spd_ovrr1_4_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_4_GEN2r_GET(r) (r).sc_x1_spd_ovrr1_4_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_4_GEN2r_LOOPCNT0f_GET(r) ((((r).sc_x1_spd_ovrr1_4_gen2[0]) >> 6) & 0xff)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_4_GEN2r_LOOPCNT0f_SET(r,f) (r).sc_x1_spd_ovrr1_4_gen2[0]=(((r).sc_x1_spd_ovrr1_4_gen2[0] & ~((uint32_t)0xff << 6)) | ((((uint32_t)f) & 0xff) << 6)) | (255 << (16 + 6))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_4_GEN2r_LOOPCNT1f_GET(r) (((r).sc_x1_spd_ovrr1_4_gen2[0]) & 0x3f)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_4_GEN2r_LOOPCNT1f_SET(r,f) (r).sc_x1_spd_ovrr1_4_gen2[0]=(((r).sc_x1_spd_ovrr1_4_gen2[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR1_4_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR1_4_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_4_GEN2r,(_r._sc_x1_spd_ovrr1_4_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR1_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_4_GEN2r,(_r._sc_x1_spd_ovrr1_4_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR1_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_4_GEN2r,(_r._sc_x1_spd_ovrr1_4_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR1_4_GEN2r BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_4_GEN2r
#define SC_X1_SPD_OVRR1_4_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_4_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_4_GEN2r_t SC_X1_SPD_OVRR1_4_GEN2r_t;
#define SC_X1_SPD_OVRR1_4_GEN2r_CLR BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_4_GEN2r_CLR
#define SC_X1_SPD_OVRR1_4_GEN2r_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_4_GEN2r_SET
#define SC_X1_SPD_OVRR1_4_GEN2r_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_4_GEN2r_GET
#define SC_X1_SPD_OVRR1_4_GEN2r_LOOPCNT0f_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_4_GEN2r_LOOPCNT0f_GET
#define SC_X1_SPD_OVRR1_4_GEN2r_LOOPCNT0f_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_4_GEN2r_LOOPCNT0f_SET
#define SC_X1_SPD_OVRR1_4_GEN2r_LOOPCNT1f_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_4_GEN2r_LOOPCNT1f_GET
#define SC_X1_SPD_OVRR1_4_GEN2r_LOOPCNT1f_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_4_GEN2r_LOOPCNT1f_SET
#define READ_SC_X1_SPD_OVRR1_4_GEN2r BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR1_4_GEN2r
#define WRITE_SC_X1_SPD_OVRR1_4_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR1_4_GEN2r
#define MODIFY_SC_X1_SPD_OVRR1_4_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR1_4_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_4_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X1_SPD_OVRR1_5_GEN2
 * BLOCKS:   SC_X1_SPEED_OVERRIDE1
 * REGADDR:  0x9287
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MAC_CREDITGENCNT CGC for mac credit generation, range 1 to 2063
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_5_GEN2r (0x00109287 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_5_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR1_5_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_5_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr1_5_gen2[1];
	uint32_t _sc_x1_spd_ovrr1_5_gen2;
} BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_5_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_5_GEN2r_CLR(r) (r).sc_x1_spd_ovrr1_5_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_5_GEN2r_SET(r,d) (r).sc_x1_spd_ovrr1_5_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_5_GEN2r_GET(r) (r).sc_x1_spd_ovrr1_5_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_5_GEN2r_MAC_CREDITGENCNTf_GET(r) (((r).sc_x1_spd_ovrr1_5_gen2[0]) & 0x1fff)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_5_GEN2r_MAC_CREDITGENCNTf_SET(r,f) (r).sc_x1_spd_ovrr1_5_gen2[0]=(((r).sc_x1_spd_ovrr1_5_gen2[0] & ~((uint32_t)0x1fff)) | (((uint32_t)f) & 0x1fff)) | (0x1fff << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR1_5_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR1_5_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_5_GEN2r,(_r._sc_x1_spd_ovrr1_5_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR1_5_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_5_GEN2r,(_r._sc_x1_spd_ovrr1_5_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR1_5_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_5_GEN2r,(_r._sc_x1_spd_ovrr1_5_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR1_5_GEN2r BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_5_GEN2r
#define SC_X1_SPD_OVRR1_5_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_5_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_5_GEN2r_t SC_X1_SPD_OVRR1_5_GEN2r_t;
#define SC_X1_SPD_OVRR1_5_GEN2r_CLR BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_5_GEN2r_CLR
#define SC_X1_SPD_OVRR1_5_GEN2r_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_5_GEN2r_SET
#define SC_X1_SPD_OVRR1_5_GEN2r_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_5_GEN2r_GET
#define SC_X1_SPD_OVRR1_5_GEN2r_MAC_CREDITGENCNTf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_5_GEN2r_MAC_CREDITGENCNTf_GET
#define SC_X1_SPD_OVRR1_5_GEN2r_MAC_CREDITGENCNTf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_5_GEN2r_MAC_CREDITGENCNTf_SET
#define READ_SC_X1_SPD_OVRR1_5_GEN2r BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR1_5_GEN2r
#define WRITE_SC_X1_SPD_OVRR1_5_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR1_5_GEN2r
#define MODIFY_SC_X1_SPD_OVRR1_5_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR1_5_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_5_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X1_SPD_OVRR1_6_GEN2
 * BLOCKS:   SC_X1_SPEED_OVERRIDE1
 * REGADDR:  0x9288
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     T_CL91_CW_SCRAMBLE Indicates whether the CL91 codeword should be scrambled or not. It should be set to 1 in FC mode.
 *     T_FIVE_BIT_XOR_EN 1'b1 - XOR 4:0 with 12:8, 1'b0 - No XOR of the 5 bits
 *     T_PMA_CL91_MUX_SEL T_PMA MUX CL91 select.
 *     T_PMA_WATERMARK  T_PMA FIFO watermark. In units of 66-bit blocks.
 *     T_PMA_BITMUX_DELAY T_PMA FIFO delay after watermark is reached (in units of cycles)
 *     AM_SPACING_MUL   
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_6_GEN2r (0x00109288 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_6_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR1_6_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_6_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr1_6_gen2[1];
	uint32_t _sc_x1_spd_ovrr1_6_gen2;
} BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_6_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_6_GEN2r_CLR(r) (r).sc_x1_spd_ovrr1_6_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_6_GEN2r_SET(r,d) (r).sc_x1_spd_ovrr1_6_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_6_GEN2r_GET(r) (r).sc_x1_spd_ovrr1_6_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_6_GEN2r_AM_SPACING_MULf_GET(r) ((((r).sc_x1_spd_ovrr1_6_gen2[0]) >> 9) & 0x3)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_6_GEN2r_AM_SPACING_MULf_SET(r,f) (r).sc_x1_spd_ovrr1_6_gen2[0]=(((r).sc_x1_spd_ovrr1_6_gen2[0] & ~((uint32_t)0x3 << 9)) | ((((uint32_t)f) & 0x3) << 9)) | (3 << (16 + 9))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_6_GEN2r_T_PMA_BITMUX_DELAYf_GET(r) ((((r).sc_x1_spd_ovrr1_6_gen2[0]) >> 7) & 0x3)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_6_GEN2r_T_PMA_BITMUX_DELAYf_SET(r,f) (r).sc_x1_spd_ovrr1_6_gen2[0]=(((r).sc_x1_spd_ovrr1_6_gen2[0] & ~((uint32_t)0x3 << 7)) | ((((uint32_t)f) & 0x3) << 7)) | (3 << (16 + 7))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_6_GEN2r_T_PMA_WATERMARKf_GET(r) ((((r).sc_x1_spd_ovrr1_6_gen2[0]) >> 3) & 0xf)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_6_GEN2r_T_PMA_WATERMARKf_SET(r,f) (r).sc_x1_spd_ovrr1_6_gen2[0]=(((r).sc_x1_spd_ovrr1_6_gen2[0] & ~((uint32_t)0xf << 3)) | ((((uint32_t)f) & 0xf) << 3)) | (15 << (16 + 3))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_6_GEN2r_T_PMA_CL91_MUX_SELf_GET(r) ((((r).sc_x1_spd_ovrr1_6_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_6_GEN2r_T_PMA_CL91_MUX_SELf_SET(r,f) (r).sc_x1_spd_ovrr1_6_gen2[0]=(((r).sc_x1_spd_ovrr1_6_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_6_GEN2r_T_FIVE_BIT_XOR_ENf_GET(r) ((((r).sc_x1_spd_ovrr1_6_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_6_GEN2r_T_FIVE_BIT_XOR_ENf_SET(r,f) (r).sc_x1_spd_ovrr1_6_gen2[0]=(((r).sc_x1_spd_ovrr1_6_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_6_GEN2r_T_CL91_CW_SCRAMBLEf_GET(r) (((r).sc_x1_spd_ovrr1_6_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_6_GEN2r_T_CL91_CW_SCRAMBLEf_SET(r,f) (r).sc_x1_spd_ovrr1_6_gen2[0]=(((r).sc_x1_spd_ovrr1_6_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR1_6_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR1_6_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_6_GEN2r,(_r._sc_x1_spd_ovrr1_6_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR1_6_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_6_GEN2r,(_r._sc_x1_spd_ovrr1_6_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR1_6_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_6_GEN2r,(_r._sc_x1_spd_ovrr1_6_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR1_6_GEN2r BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_6_GEN2r
#define SC_X1_SPD_OVRR1_6_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_6_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_6_GEN2r_t SC_X1_SPD_OVRR1_6_GEN2r_t;
#define SC_X1_SPD_OVRR1_6_GEN2r_CLR BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_6_GEN2r_CLR
#define SC_X1_SPD_OVRR1_6_GEN2r_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_6_GEN2r_SET
#define SC_X1_SPD_OVRR1_6_GEN2r_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_6_GEN2r_GET
#define SC_X1_SPD_OVRR1_6_GEN2r_AM_SPACING_MULf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_6_GEN2r_AM_SPACING_MULf_GET
#define SC_X1_SPD_OVRR1_6_GEN2r_AM_SPACING_MULf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_6_GEN2r_AM_SPACING_MULf_SET
#define SC_X1_SPD_OVRR1_6_GEN2r_T_PMA_BITMUX_DELAYf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_6_GEN2r_T_PMA_BITMUX_DELAYf_GET
#define SC_X1_SPD_OVRR1_6_GEN2r_T_PMA_BITMUX_DELAYf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_6_GEN2r_T_PMA_BITMUX_DELAYf_SET
#define SC_X1_SPD_OVRR1_6_GEN2r_T_PMA_WATERMARKf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_6_GEN2r_T_PMA_WATERMARKf_GET
#define SC_X1_SPD_OVRR1_6_GEN2r_T_PMA_WATERMARKf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_6_GEN2r_T_PMA_WATERMARKf_SET
#define SC_X1_SPD_OVRR1_6_GEN2r_T_PMA_CL91_MUX_SELf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_6_GEN2r_T_PMA_CL91_MUX_SELf_GET
#define SC_X1_SPD_OVRR1_6_GEN2r_T_PMA_CL91_MUX_SELf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_6_GEN2r_T_PMA_CL91_MUX_SELf_SET
#define SC_X1_SPD_OVRR1_6_GEN2r_T_FIVE_BIT_XOR_ENf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_6_GEN2r_T_FIVE_BIT_XOR_ENf_GET
#define SC_X1_SPD_OVRR1_6_GEN2r_T_FIVE_BIT_XOR_ENf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_6_GEN2r_T_FIVE_BIT_XOR_ENf_SET
#define SC_X1_SPD_OVRR1_6_GEN2r_T_CL91_CW_SCRAMBLEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_6_GEN2r_T_CL91_CW_SCRAMBLEf_GET
#define SC_X1_SPD_OVRR1_6_GEN2r_T_CL91_CW_SCRAMBLEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_6_GEN2r_T_CL91_CW_SCRAMBLEf_SET
#define READ_SC_X1_SPD_OVRR1_6_GEN2r BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR1_6_GEN2r
#define WRITE_SC_X1_SPD_OVRR1_6_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR1_6_GEN2r
#define MODIFY_SC_X1_SPD_OVRR1_6_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR1_6_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_6_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X1_SPD_OVRR1_7_GEN2
 * BLOCKS:   SC_X1_SPEED_OVERRIDE1
 * REGADDR:  0x9289
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL91_BLKSYNC_MODE 
 *     R_MERGE_MODE     
 *     R_CL91_CW_SCRAMBLE Indicates whether the CL91 codeword needs to be descrambled. Should be enabled for FC mode.
 *     R_TC_IN_MODE     Indicates whether CL91 is turned ON for the port or not.
 *     R_TC_MODE        
 *     R_FIVE_BIT_XOR_EN 1'b1 - XOR 4:0 with 12:8, 1'b0 - No XOR of the 5 bits
 *     R_TC_OUT_MODE    
 *     R_HG2_ENABLE     Enables HG2 support for PCS
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_7_GEN2r (0x00109289 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_7_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR1_7_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_7_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr1_7_gen2[1];
	uint32_t _sc_x1_spd_ovrr1_7_gen2;
} BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_7_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_7_GEN2r_CLR(r) (r).sc_x1_spd_ovrr1_7_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_7_GEN2r_SET(r,d) (r).sc_x1_spd_ovrr1_7_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_7_GEN2r_GET(r) (r).sc_x1_spd_ovrr1_7_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_7_GEN2r_R_HG2_ENABLEf_GET(r) ((((r).sc_x1_spd_ovrr1_7_gen2[0]) >> 13) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_7_GEN2r_R_HG2_ENABLEf_SET(r,f) (r).sc_x1_spd_ovrr1_7_gen2[0]=(((r).sc_x1_spd_ovrr1_7_gen2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_7_GEN2r_R_TC_OUT_MODEf_GET(r) ((((r).sc_x1_spd_ovrr1_7_gen2[0]) >> 11) & 0x3)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_7_GEN2r_R_TC_OUT_MODEf_SET(r,f) (r).sc_x1_spd_ovrr1_7_gen2[0]=(((r).sc_x1_spd_ovrr1_7_gen2[0] & ~((uint32_t)0x3 << 11)) | ((((uint32_t)f) & 0x3) << 11)) | (3 << (16 + 11))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_7_GEN2r_R_FIVE_BIT_XOR_ENf_GET(r) ((((r).sc_x1_spd_ovrr1_7_gen2[0]) >> 10) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_7_GEN2r_R_FIVE_BIT_XOR_ENf_SET(r,f) (r).sc_x1_spd_ovrr1_7_gen2[0]=(((r).sc_x1_spd_ovrr1_7_gen2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_7_GEN2r_R_TC_MODEf_GET(r) ((((r).sc_x1_spd_ovrr1_7_gen2[0]) >> 8) & 0x3)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_7_GEN2r_R_TC_MODEf_SET(r,f) (r).sc_x1_spd_ovrr1_7_gen2[0]=(((r).sc_x1_spd_ovrr1_7_gen2[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_7_GEN2r_R_TC_IN_MODEf_GET(r) ((((r).sc_x1_spd_ovrr1_7_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_7_GEN2r_R_TC_IN_MODEf_SET(r,f) (r).sc_x1_spd_ovrr1_7_gen2[0]=(((r).sc_x1_spd_ovrr1_7_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_7_GEN2r_R_CL91_CW_SCRAMBLEf_GET(r) ((((r).sc_x1_spd_ovrr1_7_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_7_GEN2r_R_CL91_CW_SCRAMBLEf_SET(r,f) (r).sc_x1_spd_ovrr1_7_gen2[0]=(((r).sc_x1_spd_ovrr1_7_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_7_GEN2r_R_MERGE_MODEf_GET(r) ((((r).sc_x1_spd_ovrr1_7_gen2[0]) >> 3) & 0x7)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_7_GEN2r_R_MERGE_MODEf_SET(r,f) (r).sc_x1_spd_ovrr1_7_gen2[0]=(((r).sc_x1_spd_ovrr1_7_gen2[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3)) | (7 << (16 + 3))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_7_GEN2r_CL91_BLKSYNC_MODEf_GET(r) (((r).sc_x1_spd_ovrr1_7_gen2[0]) & 0x7)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_7_GEN2r_CL91_BLKSYNC_MODEf_SET(r,f) (r).sc_x1_spd_ovrr1_7_gen2[0]=(((r).sc_x1_spd_ovrr1_7_gen2[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR1_7_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR1_7_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_7_GEN2r,(_r._sc_x1_spd_ovrr1_7_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR1_7_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_7_GEN2r,(_r._sc_x1_spd_ovrr1_7_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR1_7_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_7_GEN2r,(_r._sc_x1_spd_ovrr1_7_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR1_7_GEN2r BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_7_GEN2r
#define SC_X1_SPD_OVRR1_7_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_7_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_7_GEN2r_t SC_X1_SPD_OVRR1_7_GEN2r_t;
#define SC_X1_SPD_OVRR1_7_GEN2r_CLR BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_7_GEN2r_CLR
#define SC_X1_SPD_OVRR1_7_GEN2r_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_7_GEN2r_SET
#define SC_X1_SPD_OVRR1_7_GEN2r_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_7_GEN2r_GET
#define SC_X1_SPD_OVRR1_7_GEN2r_R_HG2_ENABLEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_7_GEN2r_R_HG2_ENABLEf_GET
#define SC_X1_SPD_OVRR1_7_GEN2r_R_HG2_ENABLEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_7_GEN2r_R_HG2_ENABLEf_SET
#define SC_X1_SPD_OVRR1_7_GEN2r_R_TC_OUT_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_7_GEN2r_R_TC_OUT_MODEf_GET
#define SC_X1_SPD_OVRR1_7_GEN2r_R_TC_OUT_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_7_GEN2r_R_TC_OUT_MODEf_SET
#define SC_X1_SPD_OVRR1_7_GEN2r_R_FIVE_BIT_XOR_ENf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_7_GEN2r_R_FIVE_BIT_XOR_ENf_GET
#define SC_X1_SPD_OVRR1_7_GEN2r_R_FIVE_BIT_XOR_ENf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_7_GEN2r_R_FIVE_BIT_XOR_ENf_SET
#define SC_X1_SPD_OVRR1_7_GEN2r_R_TC_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_7_GEN2r_R_TC_MODEf_GET
#define SC_X1_SPD_OVRR1_7_GEN2r_R_TC_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_7_GEN2r_R_TC_MODEf_SET
#define SC_X1_SPD_OVRR1_7_GEN2r_R_TC_IN_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_7_GEN2r_R_TC_IN_MODEf_GET
#define SC_X1_SPD_OVRR1_7_GEN2r_R_TC_IN_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_7_GEN2r_R_TC_IN_MODEf_SET
#define SC_X1_SPD_OVRR1_7_GEN2r_R_CL91_CW_SCRAMBLEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_7_GEN2r_R_CL91_CW_SCRAMBLEf_GET
#define SC_X1_SPD_OVRR1_7_GEN2r_R_CL91_CW_SCRAMBLEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_7_GEN2r_R_CL91_CW_SCRAMBLEf_SET
#define SC_X1_SPD_OVRR1_7_GEN2r_R_MERGE_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_7_GEN2r_R_MERGE_MODEf_GET
#define SC_X1_SPD_OVRR1_7_GEN2r_R_MERGE_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_7_GEN2r_R_MERGE_MODEf_SET
#define SC_X1_SPD_OVRR1_7_GEN2r_CL91_BLKSYNC_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_7_GEN2r_CL91_BLKSYNC_MODEf_GET
#define SC_X1_SPD_OVRR1_7_GEN2r_CL91_BLKSYNC_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_7_GEN2r_CL91_BLKSYNC_MODEf_SET
#define READ_SC_X1_SPD_OVRR1_7_GEN2r BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR1_7_GEN2r
#define WRITE_SC_X1_SPD_OVRR1_7_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR1_7_GEN2r
#define MODIFY_SC_X1_SPD_OVRR1_7_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR1_7_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_7_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X1_SPD_OVRR1_8_GEN2
 * BLOCKS:   SC_X1_SPEED_OVERRIDE1
 * REGADDR:  0x928a
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CORRUPT_2ND_GROUP Corrupt 2nd group of codeward
 *     CORRUPT_6TH_GROUP Corrupt 6th group of codeward
 *     CL74_SHCORRUPT   Sync Header Corruption for CL74 FEC Error (uncorrectable).0: Only 5 SH, 1: All SH corrupted.
 *     BER_COUNT_SEL    0: select count based on cl49 else based on cl82
 *     BER_WINDOW_SEL   0: select window based on cl49 else based on cl82
 *     USE_100G_AM0     AM0 will be taken from 100G AM
 *     USE_100G_AM123   AM 1, 2, 3 will be taken from 100G AMs
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_8_GEN2r (0x0010928a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_8_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR1_8_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_8_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr1_8_gen2[1];
	uint32_t _sc_x1_spd_ovrr1_8_gen2;
} BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_8_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_8_GEN2r_CLR(r) (r).sc_x1_spd_ovrr1_8_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_8_GEN2r_SET(r,d) (r).sc_x1_spd_ovrr1_8_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_8_GEN2r_GET(r) (r).sc_x1_spd_ovrr1_8_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_8_GEN2r_USE_100G_AM123f_GET(r) ((((r).sc_x1_spd_ovrr1_8_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_8_GEN2r_USE_100G_AM123f_SET(r,f) (r).sc_x1_spd_ovrr1_8_gen2[0]=(((r).sc_x1_spd_ovrr1_8_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_8_GEN2r_USE_100G_AM0f_GET(r) ((((r).sc_x1_spd_ovrr1_8_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_8_GEN2r_USE_100G_AM0f_SET(r,f) (r).sc_x1_spd_ovrr1_8_gen2[0]=(((r).sc_x1_spd_ovrr1_8_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_8_GEN2r_BER_WINDOW_SELf_GET(r) ((((r).sc_x1_spd_ovrr1_8_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_8_GEN2r_BER_WINDOW_SELf_SET(r,f) (r).sc_x1_spd_ovrr1_8_gen2[0]=(((r).sc_x1_spd_ovrr1_8_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_8_GEN2r_BER_COUNT_SELf_GET(r) ((((r).sc_x1_spd_ovrr1_8_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_8_GEN2r_BER_COUNT_SELf_SET(r,f) (r).sc_x1_spd_ovrr1_8_gen2[0]=(((r).sc_x1_spd_ovrr1_8_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_8_GEN2r_CL74_SHCORRUPTf_GET(r) ((((r).sc_x1_spd_ovrr1_8_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_8_GEN2r_CL74_SHCORRUPTf_SET(r,f) (r).sc_x1_spd_ovrr1_8_gen2[0]=(((r).sc_x1_spd_ovrr1_8_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_8_GEN2r_CORRUPT_6TH_GROUPf_GET(r) ((((r).sc_x1_spd_ovrr1_8_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_8_GEN2r_CORRUPT_6TH_GROUPf_SET(r,f) (r).sc_x1_spd_ovrr1_8_gen2[0]=(((r).sc_x1_spd_ovrr1_8_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_8_GEN2r_CORRUPT_2ND_GROUPf_GET(r) (((r).sc_x1_spd_ovrr1_8_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_8_GEN2r_CORRUPT_2ND_GROUPf_SET(r,f) (r).sc_x1_spd_ovrr1_8_gen2[0]=(((r).sc_x1_spd_ovrr1_8_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR1_8_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR1_8_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_8_GEN2r,(_r._sc_x1_spd_ovrr1_8_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR1_8_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_8_GEN2r,(_r._sc_x1_spd_ovrr1_8_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR1_8_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_8_GEN2r,(_r._sc_x1_spd_ovrr1_8_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR1_8_GEN2r BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_8_GEN2r
#define SC_X1_SPD_OVRR1_8_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_8_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_8_GEN2r_t SC_X1_SPD_OVRR1_8_GEN2r_t;
#define SC_X1_SPD_OVRR1_8_GEN2r_CLR BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_8_GEN2r_CLR
#define SC_X1_SPD_OVRR1_8_GEN2r_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_8_GEN2r_SET
#define SC_X1_SPD_OVRR1_8_GEN2r_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_8_GEN2r_GET
#define SC_X1_SPD_OVRR1_8_GEN2r_USE_100G_AM123f_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_8_GEN2r_USE_100G_AM123f_GET
#define SC_X1_SPD_OVRR1_8_GEN2r_USE_100G_AM123f_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_8_GEN2r_USE_100G_AM123f_SET
#define SC_X1_SPD_OVRR1_8_GEN2r_USE_100G_AM0f_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_8_GEN2r_USE_100G_AM0f_GET
#define SC_X1_SPD_OVRR1_8_GEN2r_USE_100G_AM0f_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_8_GEN2r_USE_100G_AM0f_SET
#define SC_X1_SPD_OVRR1_8_GEN2r_BER_WINDOW_SELf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_8_GEN2r_BER_WINDOW_SELf_GET
#define SC_X1_SPD_OVRR1_8_GEN2r_BER_WINDOW_SELf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_8_GEN2r_BER_WINDOW_SELf_SET
#define SC_X1_SPD_OVRR1_8_GEN2r_BER_COUNT_SELf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_8_GEN2r_BER_COUNT_SELf_GET
#define SC_X1_SPD_OVRR1_8_GEN2r_BER_COUNT_SELf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_8_GEN2r_BER_COUNT_SELf_SET
#define SC_X1_SPD_OVRR1_8_GEN2r_CL74_SHCORRUPTf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_8_GEN2r_CL74_SHCORRUPTf_GET
#define SC_X1_SPD_OVRR1_8_GEN2r_CL74_SHCORRUPTf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_8_GEN2r_CL74_SHCORRUPTf_SET
#define SC_X1_SPD_OVRR1_8_GEN2r_CORRUPT_6TH_GROUPf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_8_GEN2r_CORRUPT_6TH_GROUPf_GET
#define SC_X1_SPD_OVRR1_8_GEN2r_CORRUPT_6TH_GROUPf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_8_GEN2r_CORRUPT_6TH_GROUPf_SET
#define SC_X1_SPD_OVRR1_8_GEN2r_CORRUPT_2ND_GROUPf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_8_GEN2r_CORRUPT_2ND_GROUPf_GET
#define SC_X1_SPD_OVRR1_8_GEN2r_CORRUPT_2ND_GROUPf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_8_GEN2r_CORRUPT_2ND_GROUPf_SET
#define READ_SC_X1_SPD_OVRR1_8_GEN2r BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR1_8_GEN2r
#define WRITE_SC_X1_SPD_OVRR1_8_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR1_8_GEN2r
#define MODIFY_SC_X1_SPD_OVRR1_8_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR1_8_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X1_SPD_OVRR1_8_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X1_SPD_OVRR2_SPD_GEN2
 * BLOCKS:   SC_X1_SPEED_OVERRIDE2
 * REGADDR:  0x9290
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/W
 * FIELDS:
 *     NUM_LANES        Number of lanes for override configuration0   : NUM_LANES_01 - use 1 lane1   : NUM_LANES_02 - use 2 lanes2   : NUM_LANES_04 - use 4 lanes
 *     T_PMA_40B_MODE   1'b0 - 66-bit data write in t_pma.1'b1 - 40-bit data write in t_pma.
 *     CL36TX_EN        Per logical lane: cl36 TX pipeline: 1=enabled , 0=disabled
 *     CL36RX_EN        Per logical lane: cl36 RX pipeline: 1=enabled , 0=disabled
 *     SPEED            Actual speed set by SW
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_SPD_GEN2r (0x00109290 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_SPD_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR2_SPD_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_SPD_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr2_spd_gen2[1];
	uint32_t _sc_x1_spd_ovrr2_spd_gen2;
} BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_SPD_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_SPD_GEN2r_CLR(r) (r).sc_x1_spd_ovrr2_spd_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_SPD_GEN2r_SET(r,d) (r).sc_x1_spd_ovrr2_spd_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_SPD_GEN2r_GET(r) (r).sc_x1_spd_ovrr2_spd_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_SPD_GEN2r_SPEEDf_GET(r) ((((r).sc_x1_spd_ovrr2_spd_gen2[0]) >> 8) & 0xff)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_SPD_GEN2r_SPEEDf_SET(r,f) (r).sc_x1_spd_ovrr2_spd_gen2[0]=(((r).sc_x1_spd_ovrr2_spd_gen2[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_SPD_GEN2r_CL36RX_ENf_GET(r) ((((r).sc_x1_spd_ovrr2_spd_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_SPD_GEN2r_CL36RX_ENf_SET(r,f) (r).sc_x1_spd_ovrr2_spd_gen2[0]=(((r).sc_x1_spd_ovrr2_spd_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_SPD_GEN2r_CL36TX_ENf_GET(r) ((((r).sc_x1_spd_ovrr2_spd_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_SPD_GEN2r_CL36TX_ENf_SET(r,f) (r).sc_x1_spd_ovrr2_spd_gen2[0]=(((r).sc_x1_spd_ovrr2_spd_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_SPD_GEN2r_T_PMA_40B_MODEf_GET(r) ((((r).sc_x1_spd_ovrr2_spd_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_SPD_GEN2r_T_PMA_40B_MODEf_SET(r,f) (r).sc_x1_spd_ovrr2_spd_gen2[0]=(((r).sc_x1_spd_ovrr2_spd_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_SPD_GEN2r_NUM_LANESf_GET(r) (((r).sc_x1_spd_ovrr2_spd_gen2[0]) & 0x7)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_SPD_GEN2r_NUM_LANESf_SET(r,f) (r).sc_x1_spd_ovrr2_spd_gen2[0]=(((r).sc_x1_spd_ovrr2_spd_gen2[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR2_SPD_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR2_SPD_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_SPD_GEN2r,(_r._sc_x1_spd_ovrr2_spd_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR2_SPD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_SPD_GEN2r,(_r._sc_x1_spd_ovrr2_spd_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR2_SPD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_SPD_GEN2r,(_r._sc_x1_spd_ovrr2_spd_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR2_SPD_GEN2r BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_SPD_GEN2r
#define SC_X1_SPD_OVRR2_SPD_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_SPD_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_SPD_GEN2r_t SC_X1_SPD_OVRR2_SPD_GEN2r_t;
#define SC_X1_SPD_OVRR2_SPD_GEN2r_CLR BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_SPD_GEN2r_CLR
#define SC_X1_SPD_OVRR2_SPD_GEN2r_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_SPD_GEN2r_SET
#define SC_X1_SPD_OVRR2_SPD_GEN2r_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_SPD_GEN2r_GET
#define SC_X1_SPD_OVRR2_SPD_GEN2r_SPEEDf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_SPD_GEN2r_SPEEDf_GET
#define SC_X1_SPD_OVRR2_SPD_GEN2r_SPEEDf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_SPD_GEN2r_SPEEDf_SET
#define SC_X1_SPD_OVRR2_SPD_GEN2r_CL36RX_ENf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_SPD_GEN2r_CL36RX_ENf_GET
#define SC_X1_SPD_OVRR2_SPD_GEN2r_CL36RX_ENf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_SPD_GEN2r_CL36RX_ENf_SET
#define SC_X1_SPD_OVRR2_SPD_GEN2r_CL36TX_ENf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_SPD_GEN2r_CL36TX_ENf_GET
#define SC_X1_SPD_OVRR2_SPD_GEN2r_CL36TX_ENf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_SPD_GEN2r_CL36TX_ENf_SET
#define SC_X1_SPD_OVRR2_SPD_GEN2r_T_PMA_40B_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_SPD_GEN2r_T_PMA_40B_MODEf_GET
#define SC_X1_SPD_OVRR2_SPD_GEN2r_T_PMA_40B_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_SPD_GEN2r_T_PMA_40B_MODEf_SET
#define SC_X1_SPD_OVRR2_SPD_GEN2r_NUM_LANESf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_SPD_GEN2r_NUM_LANESf_GET
#define SC_X1_SPD_OVRR2_SPD_GEN2r_NUM_LANESf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_SPD_GEN2r_NUM_LANESf_SET
#define READ_SC_X1_SPD_OVRR2_SPD_GEN2r BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR2_SPD_GEN2r
#define WRITE_SC_X1_SPD_OVRR2_SPD_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR2_SPD_GEN2r
#define MODIFY_SC_X1_SPD_OVRR2_SPD_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR2_SPD_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_SPD_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X1_SPD_OVRR2_0_GEN2
 * BLOCKS:   SC_X1_SPEED_OVERRIDE2
 * REGADDR:  0x9292
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     SCR_MODE         
 *     T_PMA_BTMX_MODE  Number of PCS lanes bitmuxed
 *     T_HG2_ENABLE     Enables HG2 support for PCS
 *     T_ENC_MODE       
 *     T_FIFO_MODE      T_FIFO stage control field
 *     OS_MODE          
 *     CL72_EN          Enables cl72
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_0_GEN2r (0x00109292 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR2_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_0_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr2_0_gen2[1];
	uint32_t _sc_x1_spd_ovrr2_0_gen2;
} BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_0_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_0_GEN2r_CLR(r) (r).sc_x1_spd_ovrr2_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_0_GEN2r_SET(r,d) (r).sc_x1_spd_ovrr2_0_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_0_GEN2r_GET(r) (r).sc_x1_spd_ovrr2_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_0_GEN2r_CL72_ENf_GET(r) ((((r).sc_x1_spd_ovrr2_0_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_0_GEN2r_CL72_ENf_SET(r,f) (r).sc_x1_spd_ovrr2_0_gen2[0]=(((r).sc_x1_spd_ovrr2_0_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_0_GEN2r_OS_MODEf_GET(r) ((((r).sc_x1_spd_ovrr2_0_gen2[0]) >> 11) & 0xf)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_0_GEN2r_OS_MODEf_SET(r,f) (r).sc_x1_spd_ovrr2_0_gen2[0]=(((r).sc_x1_spd_ovrr2_0_gen2[0] & ~((uint32_t)0xf << 11)) | ((((uint32_t)f) & 0xf) << 11)) | (15 << (16 + 11))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_0_GEN2r_T_FIFO_MODEf_GET(r) ((((r).sc_x1_spd_ovrr2_0_gen2[0]) >> 9) & 0x3)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_0_GEN2r_T_FIFO_MODEf_SET(r,f) (r).sc_x1_spd_ovrr2_0_gen2[0]=(((r).sc_x1_spd_ovrr2_0_gen2[0] & ~((uint32_t)0x3 << 9)) | ((((uint32_t)f) & 0x3) << 9)) | (3 << (16 + 9))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_0_GEN2r_T_ENC_MODEf_GET(r) ((((r).sc_x1_spd_ovrr2_0_gen2[0]) >> 7) & 0x3)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_0_GEN2r_T_ENC_MODEf_SET(r,f) (r).sc_x1_spd_ovrr2_0_gen2[0]=(((r).sc_x1_spd_ovrr2_0_gen2[0] & ~((uint32_t)0x3 << 7)) | ((((uint32_t)f) & 0x3) << 7)) | (3 << (16 + 7))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_0_GEN2r_T_HG2_ENABLEf_GET(r) ((((r).sc_x1_spd_ovrr2_0_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_0_GEN2r_T_HG2_ENABLEf_SET(r,f) (r).sc_x1_spd_ovrr2_0_gen2[0]=(((r).sc_x1_spd_ovrr2_0_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_0_GEN2r_T_PMA_BTMX_MODEf_GET(r) ((((r).sc_x1_spd_ovrr2_0_gen2[0]) >> 4) & 0x3)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_0_GEN2r_T_PMA_BTMX_MODEf_SET(r,f) (r).sc_x1_spd_ovrr2_0_gen2[0]=(((r).sc_x1_spd_ovrr2_0_gen2[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_0_GEN2r_SCR_MODEf_GET(r) ((((r).sc_x1_spd_ovrr2_0_gen2[0]) >> 1) & 0x7)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_0_GEN2r_SCR_MODEf_SET(r,f) (r).sc_x1_spd_ovrr2_0_gen2[0]=(((r).sc_x1_spd_ovrr2_0_gen2[0] & ~((uint32_t)0x7 << 1)) | ((((uint32_t)f) & 0x7) << 1)) | (7 << (16 + 1))

/*
 * These macros can be used to access SC_X1_SPD_OVRR2_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR2_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_0_GEN2r,(_r._sc_x1_spd_ovrr2_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR2_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_0_GEN2r,(_r._sc_x1_spd_ovrr2_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR2_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_0_GEN2r,(_r._sc_x1_spd_ovrr2_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR2_0_GEN2r BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_0_GEN2r
#define SC_X1_SPD_OVRR2_0_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_0_GEN2r_t SC_X1_SPD_OVRR2_0_GEN2r_t;
#define SC_X1_SPD_OVRR2_0_GEN2r_CLR BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_0_GEN2r_CLR
#define SC_X1_SPD_OVRR2_0_GEN2r_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_0_GEN2r_SET
#define SC_X1_SPD_OVRR2_0_GEN2r_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_0_GEN2r_GET
#define SC_X1_SPD_OVRR2_0_GEN2r_CL72_ENf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_0_GEN2r_CL72_ENf_GET
#define SC_X1_SPD_OVRR2_0_GEN2r_CL72_ENf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_0_GEN2r_CL72_ENf_SET
#define SC_X1_SPD_OVRR2_0_GEN2r_OS_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_0_GEN2r_OS_MODEf_GET
#define SC_X1_SPD_OVRR2_0_GEN2r_OS_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_0_GEN2r_OS_MODEf_SET
#define SC_X1_SPD_OVRR2_0_GEN2r_T_FIFO_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_0_GEN2r_T_FIFO_MODEf_GET
#define SC_X1_SPD_OVRR2_0_GEN2r_T_FIFO_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_0_GEN2r_T_FIFO_MODEf_SET
#define SC_X1_SPD_OVRR2_0_GEN2r_T_ENC_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_0_GEN2r_T_ENC_MODEf_GET
#define SC_X1_SPD_OVRR2_0_GEN2r_T_ENC_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_0_GEN2r_T_ENC_MODEf_SET
#define SC_X1_SPD_OVRR2_0_GEN2r_T_HG2_ENABLEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_0_GEN2r_T_HG2_ENABLEf_GET
#define SC_X1_SPD_OVRR2_0_GEN2r_T_HG2_ENABLEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_0_GEN2r_T_HG2_ENABLEf_SET
#define SC_X1_SPD_OVRR2_0_GEN2r_T_PMA_BTMX_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_0_GEN2r_T_PMA_BTMX_MODEf_GET
#define SC_X1_SPD_OVRR2_0_GEN2r_T_PMA_BTMX_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_0_GEN2r_T_PMA_BTMX_MODEf_SET
#define SC_X1_SPD_OVRR2_0_GEN2r_SCR_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_0_GEN2r_SCR_MODEf_GET
#define SC_X1_SPD_OVRR2_0_GEN2r_SCR_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_0_GEN2r_SCR_MODEf_SET
#define READ_SC_X1_SPD_OVRR2_0_GEN2r BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR2_0_GEN2r
#define WRITE_SC_X1_SPD_OVRR2_0_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR2_0_GEN2r
#define MODIFY_SC_X1_SPD_OVRR2_0_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR2_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X1_SPD_OVRR2_1_GEN2
 * BLOCKS:   SC_X1_SPEED_OVERRIDE2
 * REGADDR:  0x9293
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BS_BTMX_MODE     Bit-mux mode: Indicates the format of incoming data on a physical lane.
 *     BS_DIST_MODE     Block to lane distribution mode.BS_DIST_MODE_5_LANE_TDM - 5 lane TDM. Each block distributed in turn over output pseudo-logical lanes 0-4BS_DIST_MODE_2_LANE_TDM_2_VLANE - 2 lane TDM for 2 virtual lanes.Virtual Lane 0 output is ping-ponged over pseudo-logical lanes 0,2.Virtual Lane 1 output is ping-ponged over pseudo-logical lanes 1,3.BS_DIST_MODE_2_LANE_TDM_1_VLANE - 2 lane TDM for 1 virtual lane.Virtual Lane 0 output is ping-ponged over pseudo-logical lanes 0,2.BS_DIST_MODE_NO_TDM - No TDM. Virtual Lane output is sent directly to corresponding pseudo-logical lane.
 *     BS_SYNC_EN       Enable block synchronization: If enabled, block sync sm will attempt to slip data until sync is achieved.
 *     BS_SM_SYNC_MODE  Block Sync Mode: When bs_sync_en==1, this bit indicates if cl49 or cl82 state machine operation is used.1'b0 - Clause 821'b1 - Clause 49
 *     DEC_FSM_MODE     
 *     DESKEW_MODE      
 *     DEC_TL_MODE      
 *     DESCR_MODE       
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_1_GEN2r (0x00109293 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR2_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_1_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr2_1_gen2[1];
	uint32_t _sc_x1_spd_ovrr2_1_gen2;
} BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_1_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_1_GEN2r_CLR(r) (r).sc_x1_spd_ovrr2_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_1_GEN2r_SET(r,d) (r).sc_x1_spd_ovrr2_1_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_1_GEN2r_GET(r) (r).sc_x1_spd_ovrr2_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_1_GEN2r_DESCR_MODEf_GET(r) ((((r).sc_x1_spd_ovrr2_1_gen2[0]) >> 14) & 0x3)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_1_GEN2r_DESCR_MODEf_SET(r,f) (r).sc_x1_spd_ovrr2_1_gen2[0]=(((r).sc_x1_spd_ovrr2_1_gen2[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_1_GEN2r_DEC_TL_MODEf_GET(r) ((((r).sc_x1_spd_ovrr2_1_gen2[0]) >> 12) & 0x3)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_1_GEN2r_DEC_TL_MODEf_SET(r,f) (r).sc_x1_spd_ovrr2_1_gen2[0]=(((r).sc_x1_spd_ovrr2_1_gen2[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12)) | (3 << (16 + 12))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_1_GEN2r_DESKEW_MODEf_GET(r) ((((r).sc_x1_spd_ovrr2_1_gen2[0]) >> 8) & 0xf)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_1_GEN2r_DESKEW_MODEf_SET(r,f) (r).sc_x1_spd_ovrr2_1_gen2[0]=(((r).sc_x1_spd_ovrr2_1_gen2[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_1_GEN2r_DEC_FSM_MODEf_GET(r) ((((r).sc_x1_spd_ovrr2_1_gen2[0]) >> 6) & 0x3)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_1_GEN2r_DEC_FSM_MODEf_SET(r,f) (r).sc_x1_spd_ovrr2_1_gen2[0]=(((r).sc_x1_spd_ovrr2_1_gen2[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6)) | (3 << (16 + 6))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_1_GEN2r_BS_SM_SYNC_MODEf_GET(r) ((((r).sc_x1_spd_ovrr2_1_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_1_GEN2r_BS_SM_SYNC_MODEf_SET(r,f) (r).sc_x1_spd_ovrr2_1_gen2[0]=(((r).sc_x1_spd_ovrr2_1_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_1_GEN2r_BS_SYNC_ENf_GET(r) ((((r).sc_x1_spd_ovrr2_1_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_1_GEN2r_BS_SYNC_ENf_SET(r,f) (r).sc_x1_spd_ovrr2_1_gen2[0]=(((r).sc_x1_spd_ovrr2_1_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_1_GEN2r_BS_DIST_MODEf_GET(r) ((((r).sc_x1_spd_ovrr2_1_gen2[0]) >> 2) & 0x3)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_1_GEN2r_BS_DIST_MODEf_SET(r,f) (r).sc_x1_spd_ovrr2_1_gen2[0]=(((r).sc_x1_spd_ovrr2_1_gen2[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2)) | (3 << (16 + 2))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_1_GEN2r_BS_BTMX_MODEf_GET(r) (((r).sc_x1_spd_ovrr2_1_gen2[0]) & 0x3)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_1_GEN2r_BS_BTMX_MODEf_SET(r,f) (r).sc_x1_spd_ovrr2_1_gen2[0]=(((r).sc_x1_spd_ovrr2_1_gen2[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR2_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR2_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_1_GEN2r,(_r._sc_x1_spd_ovrr2_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR2_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_1_GEN2r,(_r._sc_x1_spd_ovrr2_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR2_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_1_GEN2r,(_r._sc_x1_spd_ovrr2_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR2_1_GEN2r BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_1_GEN2r
#define SC_X1_SPD_OVRR2_1_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_1_GEN2r_t SC_X1_SPD_OVRR2_1_GEN2r_t;
#define SC_X1_SPD_OVRR2_1_GEN2r_CLR BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_1_GEN2r_CLR
#define SC_X1_SPD_OVRR2_1_GEN2r_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_1_GEN2r_SET
#define SC_X1_SPD_OVRR2_1_GEN2r_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_1_GEN2r_GET
#define SC_X1_SPD_OVRR2_1_GEN2r_DESCR_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_1_GEN2r_DESCR_MODEf_GET
#define SC_X1_SPD_OVRR2_1_GEN2r_DESCR_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_1_GEN2r_DESCR_MODEf_SET
#define SC_X1_SPD_OVRR2_1_GEN2r_DEC_TL_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_1_GEN2r_DEC_TL_MODEf_GET
#define SC_X1_SPD_OVRR2_1_GEN2r_DEC_TL_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_1_GEN2r_DEC_TL_MODEf_SET
#define SC_X1_SPD_OVRR2_1_GEN2r_DESKEW_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_1_GEN2r_DESKEW_MODEf_GET
#define SC_X1_SPD_OVRR2_1_GEN2r_DESKEW_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_1_GEN2r_DESKEW_MODEf_SET
#define SC_X1_SPD_OVRR2_1_GEN2r_DEC_FSM_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_1_GEN2r_DEC_FSM_MODEf_GET
#define SC_X1_SPD_OVRR2_1_GEN2r_DEC_FSM_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_1_GEN2r_DEC_FSM_MODEf_SET
#define SC_X1_SPD_OVRR2_1_GEN2r_BS_SM_SYNC_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_1_GEN2r_BS_SM_SYNC_MODEf_GET
#define SC_X1_SPD_OVRR2_1_GEN2r_BS_SM_SYNC_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_1_GEN2r_BS_SM_SYNC_MODEf_SET
#define SC_X1_SPD_OVRR2_1_GEN2r_BS_SYNC_ENf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_1_GEN2r_BS_SYNC_ENf_GET
#define SC_X1_SPD_OVRR2_1_GEN2r_BS_SYNC_ENf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_1_GEN2r_BS_SYNC_ENf_SET
#define SC_X1_SPD_OVRR2_1_GEN2r_BS_DIST_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_1_GEN2r_BS_DIST_MODEf_GET
#define SC_X1_SPD_OVRR2_1_GEN2r_BS_DIST_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_1_GEN2r_BS_DIST_MODEf_SET
#define SC_X1_SPD_OVRR2_1_GEN2r_BS_BTMX_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_1_GEN2r_BS_BTMX_MODEf_GET
#define SC_X1_SPD_OVRR2_1_GEN2r_BS_BTMX_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_1_GEN2r_BS_BTMX_MODEf_SET
#define READ_SC_X1_SPD_OVRR2_1_GEN2r BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR2_1_GEN2r
#define WRITE_SC_X1_SPD_OVRR2_1_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR2_1_GEN2r
#define MODIFY_SC_X1_SPD_OVRR2_1_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR2_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X1_SPD_OVRR2_2_GEN2
 * BLOCKS:   SC_X1_SPEED_OVERRIDE2
 * REGADDR:  0x9294
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CLOCKCNT0        clock count 0 for credit programming, range 5 to 4125
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_2_GEN2r (0x00109294 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR2_2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_2_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr2_2_gen2[1];
	uint32_t _sc_x1_spd_ovrr2_2_gen2;
} BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_2_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_2_GEN2r_CLR(r) (r).sc_x1_spd_ovrr2_2_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_2_GEN2r_SET(r,d) (r).sc_x1_spd_ovrr2_2_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_2_GEN2r_GET(r) (r).sc_x1_spd_ovrr2_2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_2_GEN2r_CLOCKCNT0f_GET(r) (((r).sc_x1_spd_ovrr2_2_gen2[0]) & 0x3fff)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_2_GEN2r_CLOCKCNT0f_SET(r,f) (r).sc_x1_spd_ovrr2_2_gen2[0]=(((r).sc_x1_spd_ovrr2_2_gen2[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff)) | (0x3fff << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR2_2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR2_2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_2_GEN2r,(_r._sc_x1_spd_ovrr2_2_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR2_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_2_GEN2r,(_r._sc_x1_spd_ovrr2_2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR2_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_2_GEN2r,(_r._sc_x1_spd_ovrr2_2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR2_2_GEN2r BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_2_GEN2r
#define SC_X1_SPD_OVRR2_2_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_2_GEN2r_t SC_X1_SPD_OVRR2_2_GEN2r_t;
#define SC_X1_SPD_OVRR2_2_GEN2r_CLR BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_2_GEN2r_CLR
#define SC_X1_SPD_OVRR2_2_GEN2r_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_2_GEN2r_SET
#define SC_X1_SPD_OVRR2_2_GEN2r_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_2_GEN2r_GET
#define SC_X1_SPD_OVRR2_2_GEN2r_CLOCKCNT0f_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_2_GEN2r_CLOCKCNT0f_GET
#define SC_X1_SPD_OVRR2_2_GEN2r_CLOCKCNT0f_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_2_GEN2r_CLOCKCNT0f_SET
#define READ_SC_X1_SPD_OVRR2_2_GEN2r BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR2_2_GEN2r
#define WRITE_SC_X1_SPD_OVRR2_2_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR2_2_GEN2r
#define MODIFY_SC_X1_SPD_OVRR2_2_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR2_2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X1_SPD_OVRR2_3_GEN2
 * BLOCKS:   SC_X1_SPEED_OVERRIDE2
 * REGADDR:  0x9295
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CLOCKCNT1        clock count 1 for credit programming, range 4 to 12
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_3_GEN2r (0x00109295 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_3_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR2_3_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_3_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr2_3_gen2[1];
	uint32_t _sc_x1_spd_ovrr2_3_gen2;
} BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_3_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_3_GEN2r_CLR(r) (r).sc_x1_spd_ovrr2_3_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_3_GEN2r_SET(r,d) (r).sc_x1_spd_ovrr2_3_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_3_GEN2r_GET(r) (r).sc_x1_spd_ovrr2_3_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_3_GEN2r_CLOCKCNT1f_GET(r) (((r).sc_x1_spd_ovrr2_3_gen2[0]) & 0xff)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_3_GEN2r_CLOCKCNT1f_SET(r,f) (r).sc_x1_spd_ovrr2_3_gen2[0]=(((r).sc_x1_spd_ovrr2_3_gen2[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR2_3_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR2_3_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_3_GEN2r,(_r._sc_x1_spd_ovrr2_3_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR2_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_3_GEN2r,(_r._sc_x1_spd_ovrr2_3_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR2_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_3_GEN2r,(_r._sc_x1_spd_ovrr2_3_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR2_3_GEN2r BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_3_GEN2r
#define SC_X1_SPD_OVRR2_3_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_3_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_3_GEN2r_t SC_X1_SPD_OVRR2_3_GEN2r_t;
#define SC_X1_SPD_OVRR2_3_GEN2r_CLR BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_3_GEN2r_CLR
#define SC_X1_SPD_OVRR2_3_GEN2r_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_3_GEN2r_SET
#define SC_X1_SPD_OVRR2_3_GEN2r_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_3_GEN2r_GET
#define SC_X1_SPD_OVRR2_3_GEN2r_CLOCKCNT1f_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_3_GEN2r_CLOCKCNT1f_GET
#define SC_X1_SPD_OVRR2_3_GEN2r_CLOCKCNT1f_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_3_GEN2r_CLOCKCNT1f_SET
#define READ_SC_X1_SPD_OVRR2_3_GEN2r BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR2_3_GEN2r
#define WRITE_SC_X1_SPD_OVRR2_3_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR2_3_GEN2r
#define MODIFY_SC_X1_SPD_OVRR2_3_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR2_3_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_3_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X1_SPD_OVRR2_4_GEN2
 * BLOCKS:   SC_X1_SPEED_OVERRIDE2
 * REGADDR:  0x9296
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LOOPCNT1         loop count 1 for credit programming, range 2 to 18
 *     LOOPCNT0         loop count 0 for credit programming, range 1 to 1
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_4_GEN2r (0x00109296 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_4_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR2_4_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_4_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr2_4_gen2[1];
	uint32_t _sc_x1_spd_ovrr2_4_gen2;
} BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_4_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_4_GEN2r_CLR(r) (r).sc_x1_spd_ovrr2_4_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_4_GEN2r_SET(r,d) (r).sc_x1_spd_ovrr2_4_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_4_GEN2r_GET(r) (r).sc_x1_spd_ovrr2_4_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_4_GEN2r_LOOPCNT0f_GET(r) ((((r).sc_x1_spd_ovrr2_4_gen2[0]) >> 6) & 0xff)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_4_GEN2r_LOOPCNT0f_SET(r,f) (r).sc_x1_spd_ovrr2_4_gen2[0]=(((r).sc_x1_spd_ovrr2_4_gen2[0] & ~((uint32_t)0xff << 6)) | ((((uint32_t)f) & 0xff) << 6)) | (255 << (16 + 6))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_4_GEN2r_LOOPCNT1f_GET(r) (((r).sc_x1_spd_ovrr2_4_gen2[0]) & 0x3f)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_4_GEN2r_LOOPCNT1f_SET(r,f) (r).sc_x1_spd_ovrr2_4_gen2[0]=(((r).sc_x1_spd_ovrr2_4_gen2[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR2_4_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR2_4_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_4_GEN2r,(_r._sc_x1_spd_ovrr2_4_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR2_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_4_GEN2r,(_r._sc_x1_spd_ovrr2_4_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR2_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_4_GEN2r,(_r._sc_x1_spd_ovrr2_4_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR2_4_GEN2r BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_4_GEN2r
#define SC_X1_SPD_OVRR2_4_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_4_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_4_GEN2r_t SC_X1_SPD_OVRR2_4_GEN2r_t;
#define SC_X1_SPD_OVRR2_4_GEN2r_CLR BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_4_GEN2r_CLR
#define SC_X1_SPD_OVRR2_4_GEN2r_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_4_GEN2r_SET
#define SC_X1_SPD_OVRR2_4_GEN2r_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_4_GEN2r_GET
#define SC_X1_SPD_OVRR2_4_GEN2r_LOOPCNT0f_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_4_GEN2r_LOOPCNT0f_GET
#define SC_X1_SPD_OVRR2_4_GEN2r_LOOPCNT0f_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_4_GEN2r_LOOPCNT0f_SET
#define SC_X1_SPD_OVRR2_4_GEN2r_LOOPCNT1f_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_4_GEN2r_LOOPCNT1f_GET
#define SC_X1_SPD_OVRR2_4_GEN2r_LOOPCNT1f_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_4_GEN2r_LOOPCNT1f_SET
#define READ_SC_X1_SPD_OVRR2_4_GEN2r BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR2_4_GEN2r
#define WRITE_SC_X1_SPD_OVRR2_4_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR2_4_GEN2r
#define MODIFY_SC_X1_SPD_OVRR2_4_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR2_4_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_4_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X1_SPD_OVRR2_5_GEN2
 * BLOCKS:   SC_X1_SPEED_OVERRIDE2
 * REGADDR:  0x9297
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MAC_CREDITGENCNT CGC for mac credit generation, range 1 to 2063
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_5_GEN2r (0x00109297 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_5_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR2_5_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_5_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr2_5_gen2[1];
	uint32_t _sc_x1_spd_ovrr2_5_gen2;
} BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_5_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_5_GEN2r_CLR(r) (r).sc_x1_spd_ovrr2_5_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_5_GEN2r_SET(r,d) (r).sc_x1_spd_ovrr2_5_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_5_GEN2r_GET(r) (r).sc_x1_spd_ovrr2_5_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_5_GEN2r_MAC_CREDITGENCNTf_GET(r) (((r).sc_x1_spd_ovrr2_5_gen2[0]) & 0x1fff)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_5_GEN2r_MAC_CREDITGENCNTf_SET(r,f) (r).sc_x1_spd_ovrr2_5_gen2[0]=(((r).sc_x1_spd_ovrr2_5_gen2[0] & ~((uint32_t)0x1fff)) | (((uint32_t)f) & 0x1fff)) | (0x1fff << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR2_5_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR2_5_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_5_GEN2r,(_r._sc_x1_spd_ovrr2_5_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR2_5_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_5_GEN2r,(_r._sc_x1_spd_ovrr2_5_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR2_5_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_5_GEN2r,(_r._sc_x1_spd_ovrr2_5_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR2_5_GEN2r BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_5_GEN2r
#define SC_X1_SPD_OVRR2_5_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_5_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_5_GEN2r_t SC_X1_SPD_OVRR2_5_GEN2r_t;
#define SC_X1_SPD_OVRR2_5_GEN2r_CLR BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_5_GEN2r_CLR
#define SC_X1_SPD_OVRR2_5_GEN2r_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_5_GEN2r_SET
#define SC_X1_SPD_OVRR2_5_GEN2r_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_5_GEN2r_GET
#define SC_X1_SPD_OVRR2_5_GEN2r_MAC_CREDITGENCNTf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_5_GEN2r_MAC_CREDITGENCNTf_GET
#define SC_X1_SPD_OVRR2_5_GEN2r_MAC_CREDITGENCNTf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_5_GEN2r_MAC_CREDITGENCNTf_SET
#define READ_SC_X1_SPD_OVRR2_5_GEN2r BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR2_5_GEN2r
#define WRITE_SC_X1_SPD_OVRR2_5_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR2_5_GEN2r
#define MODIFY_SC_X1_SPD_OVRR2_5_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR2_5_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_5_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X1_SPD_OVRR2_6_GEN2
 * BLOCKS:   SC_X1_SPEED_OVERRIDE2
 * REGADDR:  0x9298
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     T_CL91_CW_SCRAMBLE Indicates whether the CL91 codeword should be scrambled or not. It should be set to 1 in FC mode.
 *     T_FIVE_BIT_XOR_EN 1'b1 - XOR 4:0 with 12:8, 1'b0 - No XOR of the 5 bits
 *     T_PMA_CL91_MUX_SEL T_PMA MUX CL91 select.
 *     T_PMA_WATERMARK  T_PMA FIFO watermark. In units of 66-bit blocks.
 *     T_PMA_BITMUX_DELAY T_PMA FIFO delay after watermark is reached (in units of cycles)
 *     AM_SPACING_MUL   
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_6_GEN2r (0x00109298 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_6_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR2_6_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_6_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr2_6_gen2[1];
	uint32_t _sc_x1_spd_ovrr2_6_gen2;
} BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_6_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_6_GEN2r_CLR(r) (r).sc_x1_spd_ovrr2_6_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_6_GEN2r_SET(r,d) (r).sc_x1_spd_ovrr2_6_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_6_GEN2r_GET(r) (r).sc_x1_spd_ovrr2_6_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_6_GEN2r_AM_SPACING_MULf_GET(r) ((((r).sc_x1_spd_ovrr2_6_gen2[0]) >> 9) & 0x3)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_6_GEN2r_AM_SPACING_MULf_SET(r,f) (r).sc_x1_spd_ovrr2_6_gen2[0]=(((r).sc_x1_spd_ovrr2_6_gen2[0] & ~((uint32_t)0x3 << 9)) | ((((uint32_t)f) & 0x3) << 9)) | (3 << (16 + 9))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_6_GEN2r_T_PMA_BITMUX_DELAYf_GET(r) ((((r).sc_x1_spd_ovrr2_6_gen2[0]) >> 7) & 0x3)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_6_GEN2r_T_PMA_BITMUX_DELAYf_SET(r,f) (r).sc_x1_spd_ovrr2_6_gen2[0]=(((r).sc_x1_spd_ovrr2_6_gen2[0] & ~((uint32_t)0x3 << 7)) | ((((uint32_t)f) & 0x3) << 7)) | (3 << (16 + 7))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_6_GEN2r_T_PMA_WATERMARKf_GET(r) ((((r).sc_x1_spd_ovrr2_6_gen2[0]) >> 3) & 0xf)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_6_GEN2r_T_PMA_WATERMARKf_SET(r,f) (r).sc_x1_spd_ovrr2_6_gen2[0]=(((r).sc_x1_spd_ovrr2_6_gen2[0] & ~((uint32_t)0xf << 3)) | ((((uint32_t)f) & 0xf) << 3)) | (15 << (16 + 3))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_6_GEN2r_T_PMA_CL91_MUX_SELf_GET(r) ((((r).sc_x1_spd_ovrr2_6_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_6_GEN2r_T_PMA_CL91_MUX_SELf_SET(r,f) (r).sc_x1_spd_ovrr2_6_gen2[0]=(((r).sc_x1_spd_ovrr2_6_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_6_GEN2r_T_FIVE_BIT_XOR_ENf_GET(r) ((((r).sc_x1_spd_ovrr2_6_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_6_GEN2r_T_FIVE_BIT_XOR_ENf_SET(r,f) (r).sc_x1_spd_ovrr2_6_gen2[0]=(((r).sc_x1_spd_ovrr2_6_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_6_GEN2r_T_CL91_CW_SCRAMBLEf_GET(r) (((r).sc_x1_spd_ovrr2_6_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_6_GEN2r_T_CL91_CW_SCRAMBLEf_SET(r,f) (r).sc_x1_spd_ovrr2_6_gen2[0]=(((r).sc_x1_spd_ovrr2_6_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR2_6_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR2_6_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_6_GEN2r,(_r._sc_x1_spd_ovrr2_6_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR2_6_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_6_GEN2r,(_r._sc_x1_spd_ovrr2_6_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR2_6_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_6_GEN2r,(_r._sc_x1_spd_ovrr2_6_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR2_6_GEN2r BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_6_GEN2r
#define SC_X1_SPD_OVRR2_6_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_6_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_6_GEN2r_t SC_X1_SPD_OVRR2_6_GEN2r_t;
#define SC_X1_SPD_OVRR2_6_GEN2r_CLR BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_6_GEN2r_CLR
#define SC_X1_SPD_OVRR2_6_GEN2r_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_6_GEN2r_SET
#define SC_X1_SPD_OVRR2_6_GEN2r_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_6_GEN2r_GET
#define SC_X1_SPD_OVRR2_6_GEN2r_AM_SPACING_MULf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_6_GEN2r_AM_SPACING_MULf_GET
#define SC_X1_SPD_OVRR2_6_GEN2r_AM_SPACING_MULf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_6_GEN2r_AM_SPACING_MULf_SET
#define SC_X1_SPD_OVRR2_6_GEN2r_T_PMA_BITMUX_DELAYf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_6_GEN2r_T_PMA_BITMUX_DELAYf_GET
#define SC_X1_SPD_OVRR2_6_GEN2r_T_PMA_BITMUX_DELAYf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_6_GEN2r_T_PMA_BITMUX_DELAYf_SET
#define SC_X1_SPD_OVRR2_6_GEN2r_T_PMA_WATERMARKf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_6_GEN2r_T_PMA_WATERMARKf_GET
#define SC_X1_SPD_OVRR2_6_GEN2r_T_PMA_WATERMARKf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_6_GEN2r_T_PMA_WATERMARKf_SET
#define SC_X1_SPD_OVRR2_6_GEN2r_T_PMA_CL91_MUX_SELf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_6_GEN2r_T_PMA_CL91_MUX_SELf_GET
#define SC_X1_SPD_OVRR2_6_GEN2r_T_PMA_CL91_MUX_SELf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_6_GEN2r_T_PMA_CL91_MUX_SELf_SET
#define SC_X1_SPD_OVRR2_6_GEN2r_T_FIVE_BIT_XOR_ENf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_6_GEN2r_T_FIVE_BIT_XOR_ENf_GET
#define SC_X1_SPD_OVRR2_6_GEN2r_T_FIVE_BIT_XOR_ENf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_6_GEN2r_T_FIVE_BIT_XOR_ENf_SET
#define SC_X1_SPD_OVRR2_6_GEN2r_T_CL91_CW_SCRAMBLEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_6_GEN2r_T_CL91_CW_SCRAMBLEf_GET
#define SC_X1_SPD_OVRR2_6_GEN2r_T_CL91_CW_SCRAMBLEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_6_GEN2r_T_CL91_CW_SCRAMBLEf_SET
#define READ_SC_X1_SPD_OVRR2_6_GEN2r BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR2_6_GEN2r
#define WRITE_SC_X1_SPD_OVRR2_6_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR2_6_GEN2r
#define MODIFY_SC_X1_SPD_OVRR2_6_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR2_6_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_6_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X1_SPD_OVRR2_7_GEN2
 * BLOCKS:   SC_X1_SPEED_OVERRIDE2
 * REGADDR:  0x9299
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL91_BLKSYNC_MODE 
 *     R_MERGE_MODE     
 *     R_CL91_CW_SCRAMBLE Indicates whether the CL91 codeword needs to be descrambled. Should be enabled for FC mode.
 *     R_TC_IN_MODE     Indicates whether CL91 is turned ON for the port or not.
 *     R_TC_MODE        
 *     R_FIVE_BIT_XOR_EN 1'b1 - XOR 4:0 with 12:8, 1'b0 - No XOR of the 5 bits
 *     R_TC_OUT_MODE    
 *     R_HG2_ENABLE     Enables HG2 support for PCS
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_7_GEN2r (0x00109299 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_7_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR2_7_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_7_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr2_7_gen2[1];
	uint32_t _sc_x1_spd_ovrr2_7_gen2;
} BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_7_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_7_GEN2r_CLR(r) (r).sc_x1_spd_ovrr2_7_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_7_GEN2r_SET(r,d) (r).sc_x1_spd_ovrr2_7_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_7_GEN2r_GET(r) (r).sc_x1_spd_ovrr2_7_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_7_GEN2r_R_HG2_ENABLEf_GET(r) ((((r).sc_x1_spd_ovrr2_7_gen2[0]) >> 13) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_7_GEN2r_R_HG2_ENABLEf_SET(r,f) (r).sc_x1_spd_ovrr2_7_gen2[0]=(((r).sc_x1_spd_ovrr2_7_gen2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_7_GEN2r_R_TC_OUT_MODEf_GET(r) ((((r).sc_x1_spd_ovrr2_7_gen2[0]) >> 11) & 0x3)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_7_GEN2r_R_TC_OUT_MODEf_SET(r,f) (r).sc_x1_spd_ovrr2_7_gen2[0]=(((r).sc_x1_spd_ovrr2_7_gen2[0] & ~((uint32_t)0x3 << 11)) | ((((uint32_t)f) & 0x3) << 11)) | (3 << (16 + 11))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_7_GEN2r_R_FIVE_BIT_XOR_ENf_GET(r) ((((r).sc_x1_spd_ovrr2_7_gen2[0]) >> 10) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_7_GEN2r_R_FIVE_BIT_XOR_ENf_SET(r,f) (r).sc_x1_spd_ovrr2_7_gen2[0]=(((r).sc_x1_spd_ovrr2_7_gen2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_7_GEN2r_R_TC_MODEf_GET(r) ((((r).sc_x1_spd_ovrr2_7_gen2[0]) >> 8) & 0x3)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_7_GEN2r_R_TC_MODEf_SET(r,f) (r).sc_x1_spd_ovrr2_7_gen2[0]=(((r).sc_x1_spd_ovrr2_7_gen2[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_7_GEN2r_R_TC_IN_MODEf_GET(r) ((((r).sc_x1_spd_ovrr2_7_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_7_GEN2r_R_TC_IN_MODEf_SET(r,f) (r).sc_x1_spd_ovrr2_7_gen2[0]=(((r).sc_x1_spd_ovrr2_7_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_7_GEN2r_R_CL91_CW_SCRAMBLEf_GET(r) ((((r).sc_x1_spd_ovrr2_7_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_7_GEN2r_R_CL91_CW_SCRAMBLEf_SET(r,f) (r).sc_x1_spd_ovrr2_7_gen2[0]=(((r).sc_x1_spd_ovrr2_7_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_7_GEN2r_R_MERGE_MODEf_GET(r) ((((r).sc_x1_spd_ovrr2_7_gen2[0]) >> 3) & 0x7)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_7_GEN2r_R_MERGE_MODEf_SET(r,f) (r).sc_x1_spd_ovrr2_7_gen2[0]=(((r).sc_x1_spd_ovrr2_7_gen2[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3)) | (7 << (16 + 3))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_7_GEN2r_CL91_BLKSYNC_MODEf_GET(r) (((r).sc_x1_spd_ovrr2_7_gen2[0]) & 0x7)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_7_GEN2r_CL91_BLKSYNC_MODEf_SET(r,f) (r).sc_x1_spd_ovrr2_7_gen2[0]=(((r).sc_x1_spd_ovrr2_7_gen2[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR2_7_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR2_7_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_7_GEN2r,(_r._sc_x1_spd_ovrr2_7_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR2_7_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_7_GEN2r,(_r._sc_x1_spd_ovrr2_7_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR2_7_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_7_GEN2r,(_r._sc_x1_spd_ovrr2_7_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR2_7_GEN2r BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_7_GEN2r
#define SC_X1_SPD_OVRR2_7_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_7_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_7_GEN2r_t SC_X1_SPD_OVRR2_7_GEN2r_t;
#define SC_X1_SPD_OVRR2_7_GEN2r_CLR BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_7_GEN2r_CLR
#define SC_X1_SPD_OVRR2_7_GEN2r_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_7_GEN2r_SET
#define SC_X1_SPD_OVRR2_7_GEN2r_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_7_GEN2r_GET
#define SC_X1_SPD_OVRR2_7_GEN2r_R_HG2_ENABLEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_7_GEN2r_R_HG2_ENABLEf_GET
#define SC_X1_SPD_OVRR2_7_GEN2r_R_HG2_ENABLEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_7_GEN2r_R_HG2_ENABLEf_SET
#define SC_X1_SPD_OVRR2_7_GEN2r_R_TC_OUT_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_7_GEN2r_R_TC_OUT_MODEf_GET
#define SC_X1_SPD_OVRR2_7_GEN2r_R_TC_OUT_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_7_GEN2r_R_TC_OUT_MODEf_SET
#define SC_X1_SPD_OVRR2_7_GEN2r_R_FIVE_BIT_XOR_ENf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_7_GEN2r_R_FIVE_BIT_XOR_ENf_GET
#define SC_X1_SPD_OVRR2_7_GEN2r_R_FIVE_BIT_XOR_ENf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_7_GEN2r_R_FIVE_BIT_XOR_ENf_SET
#define SC_X1_SPD_OVRR2_7_GEN2r_R_TC_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_7_GEN2r_R_TC_MODEf_GET
#define SC_X1_SPD_OVRR2_7_GEN2r_R_TC_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_7_GEN2r_R_TC_MODEf_SET
#define SC_X1_SPD_OVRR2_7_GEN2r_R_TC_IN_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_7_GEN2r_R_TC_IN_MODEf_GET
#define SC_X1_SPD_OVRR2_7_GEN2r_R_TC_IN_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_7_GEN2r_R_TC_IN_MODEf_SET
#define SC_X1_SPD_OVRR2_7_GEN2r_R_CL91_CW_SCRAMBLEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_7_GEN2r_R_CL91_CW_SCRAMBLEf_GET
#define SC_X1_SPD_OVRR2_7_GEN2r_R_CL91_CW_SCRAMBLEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_7_GEN2r_R_CL91_CW_SCRAMBLEf_SET
#define SC_X1_SPD_OVRR2_7_GEN2r_R_MERGE_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_7_GEN2r_R_MERGE_MODEf_GET
#define SC_X1_SPD_OVRR2_7_GEN2r_R_MERGE_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_7_GEN2r_R_MERGE_MODEf_SET
#define SC_X1_SPD_OVRR2_7_GEN2r_CL91_BLKSYNC_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_7_GEN2r_CL91_BLKSYNC_MODEf_GET
#define SC_X1_SPD_OVRR2_7_GEN2r_CL91_BLKSYNC_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_7_GEN2r_CL91_BLKSYNC_MODEf_SET
#define READ_SC_X1_SPD_OVRR2_7_GEN2r BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR2_7_GEN2r
#define WRITE_SC_X1_SPD_OVRR2_7_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR2_7_GEN2r
#define MODIFY_SC_X1_SPD_OVRR2_7_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR2_7_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_7_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X1_SPD_OVRR2_8_GEN2
 * BLOCKS:   SC_X1_SPEED_OVERRIDE2
 * REGADDR:  0x929a
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CORRUPT_2ND_GROUP Corrupt 2nd group of codeward
 *     CORRUPT_6TH_GROUP Corrupt 6th group of codeward
 *     CL74_SHCORRUPT   Sync Header Corruption for CL74 FEC Error (uncorrectable).0: Only 5 SH, 1: All SH corrupted.
 *     BER_COUNT_SEL    0: select count based on cl49 else based on cl82
 *     BER_WINDOW_SEL   0: select window based on cl49 else based on cl82
 *     USE_100G_AM0     AM0 will be taken from 100G AM
 *     USE_100G_AM123   AM 1, 2, 3 will be taken from 100G AMs
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_8_GEN2r (0x0010929a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_8_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR2_8_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_8_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr2_8_gen2[1];
	uint32_t _sc_x1_spd_ovrr2_8_gen2;
} BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_8_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_8_GEN2r_CLR(r) (r).sc_x1_spd_ovrr2_8_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_8_GEN2r_SET(r,d) (r).sc_x1_spd_ovrr2_8_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_8_GEN2r_GET(r) (r).sc_x1_spd_ovrr2_8_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_8_GEN2r_USE_100G_AM123f_GET(r) ((((r).sc_x1_spd_ovrr2_8_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_8_GEN2r_USE_100G_AM123f_SET(r,f) (r).sc_x1_spd_ovrr2_8_gen2[0]=(((r).sc_x1_spd_ovrr2_8_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_8_GEN2r_USE_100G_AM0f_GET(r) ((((r).sc_x1_spd_ovrr2_8_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_8_GEN2r_USE_100G_AM0f_SET(r,f) (r).sc_x1_spd_ovrr2_8_gen2[0]=(((r).sc_x1_spd_ovrr2_8_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_8_GEN2r_BER_WINDOW_SELf_GET(r) ((((r).sc_x1_spd_ovrr2_8_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_8_GEN2r_BER_WINDOW_SELf_SET(r,f) (r).sc_x1_spd_ovrr2_8_gen2[0]=(((r).sc_x1_spd_ovrr2_8_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_8_GEN2r_BER_COUNT_SELf_GET(r) ((((r).sc_x1_spd_ovrr2_8_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_8_GEN2r_BER_COUNT_SELf_SET(r,f) (r).sc_x1_spd_ovrr2_8_gen2[0]=(((r).sc_x1_spd_ovrr2_8_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_8_GEN2r_CL74_SHCORRUPTf_GET(r) ((((r).sc_x1_spd_ovrr2_8_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_8_GEN2r_CL74_SHCORRUPTf_SET(r,f) (r).sc_x1_spd_ovrr2_8_gen2[0]=(((r).sc_x1_spd_ovrr2_8_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_8_GEN2r_CORRUPT_6TH_GROUPf_GET(r) ((((r).sc_x1_spd_ovrr2_8_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_8_GEN2r_CORRUPT_6TH_GROUPf_SET(r,f) (r).sc_x1_spd_ovrr2_8_gen2[0]=(((r).sc_x1_spd_ovrr2_8_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_8_GEN2r_CORRUPT_2ND_GROUPf_GET(r) (((r).sc_x1_spd_ovrr2_8_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_8_GEN2r_CORRUPT_2ND_GROUPf_SET(r,f) (r).sc_x1_spd_ovrr2_8_gen2[0]=(((r).sc_x1_spd_ovrr2_8_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR2_8_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR2_8_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_8_GEN2r,(_r._sc_x1_spd_ovrr2_8_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR2_8_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_8_GEN2r,(_r._sc_x1_spd_ovrr2_8_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR2_8_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_8_GEN2r,(_r._sc_x1_spd_ovrr2_8_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR2_8_GEN2r BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_8_GEN2r
#define SC_X1_SPD_OVRR2_8_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_8_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_8_GEN2r_t SC_X1_SPD_OVRR2_8_GEN2r_t;
#define SC_X1_SPD_OVRR2_8_GEN2r_CLR BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_8_GEN2r_CLR
#define SC_X1_SPD_OVRR2_8_GEN2r_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_8_GEN2r_SET
#define SC_X1_SPD_OVRR2_8_GEN2r_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_8_GEN2r_GET
#define SC_X1_SPD_OVRR2_8_GEN2r_USE_100G_AM123f_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_8_GEN2r_USE_100G_AM123f_GET
#define SC_X1_SPD_OVRR2_8_GEN2r_USE_100G_AM123f_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_8_GEN2r_USE_100G_AM123f_SET
#define SC_X1_SPD_OVRR2_8_GEN2r_USE_100G_AM0f_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_8_GEN2r_USE_100G_AM0f_GET
#define SC_X1_SPD_OVRR2_8_GEN2r_USE_100G_AM0f_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_8_GEN2r_USE_100G_AM0f_SET
#define SC_X1_SPD_OVRR2_8_GEN2r_BER_WINDOW_SELf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_8_GEN2r_BER_WINDOW_SELf_GET
#define SC_X1_SPD_OVRR2_8_GEN2r_BER_WINDOW_SELf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_8_GEN2r_BER_WINDOW_SELf_SET
#define SC_X1_SPD_OVRR2_8_GEN2r_BER_COUNT_SELf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_8_GEN2r_BER_COUNT_SELf_GET
#define SC_X1_SPD_OVRR2_8_GEN2r_BER_COUNT_SELf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_8_GEN2r_BER_COUNT_SELf_SET
#define SC_X1_SPD_OVRR2_8_GEN2r_CL74_SHCORRUPTf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_8_GEN2r_CL74_SHCORRUPTf_GET
#define SC_X1_SPD_OVRR2_8_GEN2r_CL74_SHCORRUPTf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_8_GEN2r_CL74_SHCORRUPTf_SET
#define SC_X1_SPD_OVRR2_8_GEN2r_CORRUPT_6TH_GROUPf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_8_GEN2r_CORRUPT_6TH_GROUPf_GET
#define SC_X1_SPD_OVRR2_8_GEN2r_CORRUPT_6TH_GROUPf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_8_GEN2r_CORRUPT_6TH_GROUPf_SET
#define SC_X1_SPD_OVRR2_8_GEN2r_CORRUPT_2ND_GROUPf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_8_GEN2r_CORRUPT_2ND_GROUPf_GET
#define SC_X1_SPD_OVRR2_8_GEN2r_CORRUPT_2ND_GROUPf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_8_GEN2r_CORRUPT_2ND_GROUPf_SET
#define READ_SC_X1_SPD_OVRR2_8_GEN2r BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR2_8_GEN2r
#define WRITE_SC_X1_SPD_OVRR2_8_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR2_8_GEN2r
#define MODIFY_SC_X1_SPD_OVRR2_8_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR2_8_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X1_SPD_OVRR2_8_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X1_SPD_OVRR3_SPD_GEN2
 * BLOCKS:   SC_X1_SPEED_OVERRIDE3
 * REGADDR:  0x92a0
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/W
 * FIELDS:
 *     NUM_LANES        Number of lanes for override configuration0   : NUM_LANES_01 - use 1 lane1   : NUM_LANES_02 - use 2 lanes2   : NUM_LANES_04 - use 4 lanes
 *     T_PMA_40B_MODE   1'b0 - 66-bit data write in t_pma.1'b1 - 40-bit data write in t_pma.
 *     CL36TX_EN        Per logical lane: cl36 TX pipeline: 1=enabled , 0=disabled
 *     CL36RX_EN        Per logical lane: cl36 RX pipeline: 1=enabled , 0=disabled
 *     SPEED            Actual speed set by SW
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_SPD_GEN2r (0x001092a0 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_SPD_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR3_SPD_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_SPD_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr3_spd_gen2[1];
	uint32_t _sc_x1_spd_ovrr3_spd_gen2;
} BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_SPD_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_SPD_GEN2r_CLR(r) (r).sc_x1_spd_ovrr3_spd_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_SPD_GEN2r_SET(r,d) (r).sc_x1_spd_ovrr3_spd_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_SPD_GEN2r_GET(r) (r).sc_x1_spd_ovrr3_spd_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_SPD_GEN2r_SPEEDf_GET(r) ((((r).sc_x1_spd_ovrr3_spd_gen2[0]) >> 8) & 0xff)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_SPD_GEN2r_SPEEDf_SET(r,f) (r).sc_x1_spd_ovrr3_spd_gen2[0]=(((r).sc_x1_spd_ovrr3_spd_gen2[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_SPD_GEN2r_CL36RX_ENf_GET(r) ((((r).sc_x1_spd_ovrr3_spd_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_SPD_GEN2r_CL36RX_ENf_SET(r,f) (r).sc_x1_spd_ovrr3_spd_gen2[0]=(((r).sc_x1_spd_ovrr3_spd_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_SPD_GEN2r_CL36TX_ENf_GET(r) ((((r).sc_x1_spd_ovrr3_spd_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_SPD_GEN2r_CL36TX_ENf_SET(r,f) (r).sc_x1_spd_ovrr3_spd_gen2[0]=(((r).sc_x1_spd_ovrr3_spd_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_SPD_GEN2r_T_PMA_40B_MODEf_GET(r) ((((r).sc_x1_spd_ovrr3_spd_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_SPD_GEN2r_T_PMA_40B_MODEf_SET(r,f) (r).sc_x1_spd_ovrr3_spd_gen2[0]=(((r).sc_x1_spd_ovrr3_spd_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_SPD_GEN2r_NUM_LANESf_GET(r) (((r).sc_x1_spd_ovrr3_spd_gen2[0]) & 0x7)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_SPD_GEN2r_NUM_LANESf_SET(r,f) (r).sc_x1_spd_ovrr3_spd_gen2[0]=(((r).sc_x1_spd_ovrr3_spd_gen2[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR3_SPD_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR3_SPD_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_SPD_GEN2r,(_r._sc_x1_spd_ovrr3_spd_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR3_SPD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_SPD_GEN2r,(_r._sc_x1_spd_ovrr3_spd_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR3_SPD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_SPD_GEN2r,(_r._sc_x1_spd_ovrr3_spd_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR3_SPD_GEN2r BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_SPD_GEN2r
#define SC_X1_SPD_OVRR3_SPD_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_SPD_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_SPD_GEN2r_t SC_X1_SPD_OVRR3_SPD_GEN2r_t;
#define SC_X1_SPD_OVRR3_SPD_GEN2r_CLR BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_SPD_GEN2r_CLR
#define SC_X1_SPD_OVRR3_SPD_GEN2r_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_SPD_GEN2r_SET
#define SC_X1_SPD_OVRR3_SPD_GEN2r_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_SPD_GEN2r_GET
#define SC_X1_SPD_OVRR3_SPD_GEN2r_SPEEDf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_SPD_GEN2r_SPEEDf_GET
#define SC_X1_SPD_OVRR3_SPD_GEN2r_SPEEDf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_SPD_GEN2r_SPEEDf_SET
#define SC_X1_SPD_OVRR3_SPD_GEN2r_CL36RX_ENf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_SPD_GEN2r_CL36RX_ENf_GET
#define SC_X1_SPD_OVRR3_SPD_GEN2r_CL36RX_ENf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_SPD_GEN2r_CL36RX_ENf_SET
#define SC_X1_SPD_OVRR3_SPD_GEN2r_CL36TX_ENf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_SPD_GEN2r_CL36TX_ENf_GET
#define SC_X1_SPD_OVRR3_SPD_GEN2r_CL36TX_ENf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_SPD_GEN2r_CL36TX_ENf_SET
#define SC_X1_SPD_OVRR3_SPD_GEN2r_T_PMA_40B_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_SPD_GEN2r_T_PMA_40B_MODEf_GET
#define SC_X1_SPD_OVRR3_SPD_GEN2r_T_PMA_40B_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_SPD_GEN2r_T_PMA_40B_MODEf_SET
#define SC_X1_SPD_OVRR3_SPD_GEN2r_NUM_LANESf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_SPD_GEN2r_NUM_LANESf_GET
#define SC_X1_SPD_OVRR3_SPD_GEN2r_NUM_LANESf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_SPD_GEN2r_NUM_LANESf_SET
#define READ_SC_X1_SPD_OVRR3_SPD_GEN2r BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR3_SPD_GEN2r
#define WRITE_SC_X1_SPD_OVRR3_SPD_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR3_SPD_GEN2r
#define MODIFY_SC_X1_SPD_OVRR3_SPD_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR3_SPD_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_SPD_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X1_SPD_OVRR3_0_GEN2
 * BLOCKS:   SC_X1_SPEED_OVERRIDE3
 * REGADDR:  0x92a2
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     SCR_MODE         
 *     T_PMA_BTMX_MODE  Number of PCS lanes bitmuxed
 *     T_HG2_ENABLE     Enables HG2 support for PCS
 *     T_ENC_MODE       
 *     T_FIFO_MODE      T_FIFO stage control field
 *     OS_MODE          
 *     CL72_EN          Enables cl72
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_0_GEN2r (0x001092a2 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR3_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_0_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr3_0_gen2[1];
	uint32_t _sc_x1_spd_ovrr3_0_gen2;
} BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_0_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_0_GEN2r_CLR(r) (r).sc_x1_spd_ovrr3_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_0_GEN2r_SET(r,d) (r).sc_x1_spd_ovrr3_0_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_0_GEN2r_GET(r) (r).sc_x1_spd_ovrr3_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_0_GEN2r_CL72_ENf_GET(r) ((((r).sc_x1_spd_ovrr3_0_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_0_GEN2r_CL72_ENf_SET(r,f) (r).sc_x1_spd_ovrr3_0_gen2[0]=(((r).sc_x1_spd_ovrr3_0_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_0_GEN2r_OS_MODEf_GET(r) ((((r).sc_x1_spd_ovrr3_0_gen2[0]) >> 11) & 0xf)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_0_GEN2r_OS_MODEf_SET(r,f) (r).sc_x1_spd_ovrr3_0_gen2[0]=(((r).sc_x1_spd_ovrr3_0_gen2[0] & ~((uint32_t)0xf << 11)) | ((((uint32_t)f) & 0xf) << 11)) | (15 << (16 + 11))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_0_GEN2r_T_FIFO_MODEf_GET(r) ((((r).sc_x1_spd_ovrr3_0_gen2[0]) >> 9) & 0x3)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_0_GEN2r_T_FIFO_MODEf_SET(r,f) (r).sc_x1_spd_ovrr3_0_gen2[0]=(((r).sc_x1_spd_ovrr3_0_gen2[0] & ~((uint32_t)0x3 << 9)) | ((((uint32_t)f) & 0x3) << 9)) | (3 << (16 + 9))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_0_GEN2r_T_ENC_MODEf_GET(r) ((((r).sc_x1_spd_ovrr3_0_gen2[0]) >> 7) & 0x3)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_0_GEN2r_T_ENC_MODEf_SET(r,f) (r).sc_x1_spd_ovrr3_0_gen2[0]=(((r).sc_x1_spd_ovrr3_0_gen2[0] & ~((uint32_t)0x3 << 7)) | ((((uint32_t)f) & 0x3) << 7)) | (3 << (16 + 7))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_0_GEN2r_T_HG2_ENABLEf_GET(r) ((((r).sc_x1_spd_ovrr3_0_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_0_GEN2r_T_HG2_ENABLEf_SET(r,f) (r).sc_x1_spd_ovrr3_0_gen2[0]=(((r).sc_x1_spd_ovrr3_0_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_0_GEN2r_T_PMA_BTMX_MODEf_GET(r) ((((r).sc_x1_spd_ovrr3_0_gen2[0]) >> 4) & 0x3)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_0_GEN2r_T_PMA_BTMX_MODEf_SET(r,f) (r).sc_x1_spd_ovrr3_0_gen2[0]=(((r).sc_x1_spd_ovrr3_0_gen2[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_0_GEN2r_SCR_MODEf_GET(r) ((((r).sc_x1_spd_ovrr3_0_gen2[0]) >> 1) & 0x7)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_0_GEN2r_SCR_MODEf_SET(r,f) (r).sc_x1_spd_ovrr3_0_gen2[0]=(((r).sc_x1_spd_ovrr3_0_gen2[0] & ~((uint32_t)0x7 << 1)) | ((((uint32_t)f) & 0x7) << 1)) | (7 << (16 + 1))

/*
 * These macros can be used to access SC_X1_SPD_OVRR3_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR3_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_0_GEN2r,(_r._sc_x1_spd_ovrr3_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR3_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_0_GEN2r,(_r._sc_x1_spd_ovrr3_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR3_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_0_GEN2r,(_r._sc_x1_spd_ovrr3_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR3_0_GEN2r BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_0_GEN2r
#define SC_X1_SPD_OVRR3_0_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_0_GEN2r_t SC_X1_SPD_OVRR3_0_GEN2r_t;
#define SC_X1_SPD_OVRR3_0_GEN2r_CLR BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_0_GEN2r_CLR
#define SC_X1_SPD_OVRR3_0_GEN2r_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_0_GEN2r_SET
#define SC_X1_SPD_OVRR3_0_GEN2r_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_0_GEN2r_GET
#define SC_X1_SPD_OVRR3_0_GEN2r_CL72_ENf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_0_GEN2r_CL72_ENf_GET
#define SC_X1_SPD_OVRR3_0_GEN2r_CL72_ENf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_0_GEN2r_CL72_ENf_SET
#define SC_X1_SPD_OVRR3_0_GEN2r_OS_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_0_GEN2r_OS_MODEf_GET
#define SC_X1_SPD_OVRR3_0_GEN2r_OS_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_0_GEN2r_OS_MODEf_SET
#define SC_X1_SPD_OVRR3_0_GEN2r_T_FIFO_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_0_GEN2r_T_FIFO_MODEf_GET
#define SC_X1_SPD_OVRR3_0_GEN2r_T_FIFO_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_0_GEN2r_T_FIFO_MODEf_SET
#define SC_X1_SPD_OVRR3_0_GEN2r_T_ENC_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_0_GEN2r_T_ENC_MODEf_GET
#define SC_X1_SPD_OVRR3_0_GEN2r_T_ENC_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_0_GEN2r_T_ENC_MODEf_SET
#define SC_X1_SPD_OVRR3_0_GEN2r_T_HG2_ENABLEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_0_GEN2r_T_HG2_ENABLEf_GET
#define SC_X1_SPD_OVRR3_0_GEN2r_T_HG2_ENABLEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_0_GEN2r_T_HG2_ENABLEf_SET
#define SC_X1_SPD_OVRR3_0_GEN2r_T_PMA_BTMX_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_0_GEN2r_T_PMA_BTMX_MODEf_GET
#define SC_X1_SPD_OVRR3_0_GEN2r_T_PMA_BTMX_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_0_GEN2r_T_PMA_BTMX_MODEf_SET
#define SC_X1_SPD_OVRR3_0_GEN2r_SCR_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_0_GEN2r_SCR_MODEf_GET
#define SC_X1_SPD_OVRR3_0_GEN2r_SCR_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_0_GEN2r_SCR_MODEf_SET
#define READ_SC_X1_SPD_OVRR3_0_GEN2r BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR3_0_GEN2r
#define WRITE_SC_X1_SPD_OVRR3_0_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR3_0_GEN2r
#define MODIFY_SC_X1_SPD_OVRR3_0_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR3_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X1_SPD_OVRR3_1_GEN2
 * BLOCKS:   SC_X1_SPEED_OVERRIDE3
 * REGADDR:  0x92a3
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BS_BTMX_MODE     Bit-mux mode: Indicates the format of incoming data on a physical lane.
 *     BS_DIST_MODE     Block to lane distribution mode.BS_DIST_MODE_5_LANE_TDM - 5 lane TDM. Each block distributed in turn over output pseudo-logical lanes 0-4BS_DIST_MODE_2_LANE_TDM_2_VLANE - 2 lane TDM for 2 virtual lanes.Virtual Lane 0 output is ping-ponged over pseudo-logical lanes 0,2.Virtual Lane 1 output is ping-ponged over pseudo-logical lanes 1,3.BS_DIST_MODE_2_LANE_TDM_1_VLANE - 2 lane TDM for 1 virtual lane.Virtual Lane 0 output is ping-ponged over pseudo-logical lanes 0,2.BS_DIST_MODE_NO_TDM - No TDM. Virtual Lane output is sent directly to corresponding pseudo-logical lane.
 *     BS_SYNC_EN       Enable block synchronization: If enabled, block sync sm will attempt to slip data until sync is achieved.
 *     BS_SM_SYNC_MODE  Block Sync Mode: When bs_sync_en==1, this bit indicates if cl49 or cl82 state machine operation is used.1'b0 - Clause 821'b1 - Clause 49
 *     DEC_FSM_MODE     
 *     DESKEW_MODE      
 *     DEC_TL_MODE      
 *     DESCR_MODE       
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_1_GEN2r (0x001092a3 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR3_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_1_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr3_1_gen2[1];
	uint32_t _sc_x1_spd_ovrr3_1_gen2;
} BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_1_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_1_GEN2r_CLR(r) (r).sc_x1_spd_ovrr3_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_1_GEN2r_SET(r,d) (r).sc_x1_spd_ovrr3_1_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_1_GEN2r_GET(r) (r).sc_x1_spd_ovrr3_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_1_GEN2r_DESCR_MODEf_GET(r) ((((r).sc_x1_spd_ovrr3_1_gen2[0]) >> 14) & 0x3)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_1_GEN2r_DESCR_MODEf_SET(r,f) (r).sc_x1_spd_ovrr3_1_gen2[0]=(((r).sc_x1_spd_ovrr3_1_gen2[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_1_GEN2r_DEC_TL_MODEf_GET(r) ((((r).sc_x1_spd_ovrr3_1_gen2[0]) >> 12) & 0x3)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_1_GEN2r_DEC_TL_MODEf_SET(r,f) (r).sc_x1_spd_ovrr3_1_gen2[0]=(((r).sc_x1_spd_ovrr3_1_gen2[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12)) | (3 << (16 + 12))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_1_GEN2r_DESKEW_MODEf_GET(r) ((((r).sc_x1_spd_ovrr3_1_gen2[0]) >> 8) & 0xf)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_1_GEN2r_DESKEW_MODEf_SET(r,f) (r).sc_x1_spd_ovrr3_1_gen2[0]=(((r).sc_x1_spd_ovrr3_1_gen2[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_1_GEN2r_DEC_FSM_MODEf_GET(r) ((((r).sc_x1_spd_ovrr3_1_gen2[0]) >> 6) & 0x3)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_1_GEN2r_DEC_FSM_MODEf_SET(r,f) (r).sc_x1_spd_ovrr3_1_gen2[0]=(((r).sc_x1_spd_ovrr3_1_gen2[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6)) | (3 << (16 + 6))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_1_GEN2r_BS_SM_SYNC_MODEf_GET(r) ((((r).sc_x1_spd_ovrr3_1_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_1_GEN2r_BS_SM_SYNC_MODEf_SET(r,f) (r).sc_x1_spd_ovrr3_1_gen2[0]=(((r).sc_x1_spd_ovrr3_1_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_1_GEN2r_BS_SYNC_ENf_GET(r) ((((r).sc_x1_spd_ovrr3_1_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_1_GEN2r_BS_SYNC_ENf_SET(r,f) (r).sc_x1_spd_ovrr3_1_gen2[0]=(((r).sc_x1_spd_ovrr3_1_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_1_GEN2r_BS_DIST_MODEf_GET(r) ((((r).sc_x1_spd_ovrr3_1_gen2[0]) >> 2) & 0x3)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_1_GEN2r_BS_DIST_MODEf_SET(r,f) (r).sc_x1_spd_ovrr3_1_gen2[0]=(((r).sc_x1_spd_ovrr3_1_gen2[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2)) | (3 << (16 + 2))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_1_GEN2r_BS_BTMX_MODEf_GET(r) (((r).sc_x1_spd_ovrr3_1_gen2[0]) & 0x3)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_1_GEN2r_BS_BTMX_MODEf_SET(r,f) (r).sc_x1_spd_ovrr3_1_gen2[0]=(((r).sc_x1_spd_ovrr3_1_gen2[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR3_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR3_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_1_GEN2r,(_r._sc_x1_spd_ovrr3_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR3_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_1_GEN2r,(_r._sc_x1_spd_ovrr3_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR3_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_1_GEN2r,(_r._sc_x1_spd_ovrr3_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR3_1_GEN2r BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_1_GEN2r
#define SC_X1_SPD_OVRR3_1_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_1_GEN2r_t SC_X1_SPD_OVRR3_1_GEN2r_t;
#define SC_X1_SPD_OVRR3_1_GEN2r_CLR BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_1_GEN2r_CLR
#define SC_X1_SPD_OVRR3_1_GEN2r_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_1_GEN2r_SET
#define SC_X1_SPD_OVRR3_1_GEN2r_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_1_GEN2r_GET
#define SC_X1_SPD_OVRR3_1_GEN2r_DESCR_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_1_GEN2r_DESCR_MODEf_GET
#define SC_X1_SPD_OVRR3_1_GEN2r_DESCR_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_1_GEN2r_DESCR_MODEf_SET
#define SC_X1_SPD_OVRR3_1_GEN2r_DEC_TL_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_1_GEN2r_DEC_TL_MODEf_GET
#define SC_X1_SPD_OVRR3_1_GEN2r_DEC_TL_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_1_GEN2r_DEC_TL_MODEf_SET
#define SC_X1_SPD_OVRR3_1_GEN2r_DESKEW_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_1_GEN2r_DESKEW_MODEf_GET
#define SC_X1_SPD_OVRR3_1_GEN2r_DESKEW_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_1_GEN2r_DESKEW_MODEf_SET
#define SC_X1_SPD_OVRR3_1_GEN2r_DEC_FSM_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_1_GEN2r_DEC_FSM_MODEf_GET
#define SC_X1_SPD_OVRR3_1_GEN2r_DEC_FSM_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_1_GEN2r_DEC_FSM_MODEf_SET
#define SC_X1_SPD_OVRR3_1_GEN2r_BS_SM_SYNC_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_1_GEN2r_BS_SM_SYNC_MODEf_GET
#define SC_X1_SPD_OVRR3_1_GEN2r_BS_SM_SYNC_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_1_GEN2r_BS_SM_SYNC_MODEf_SET
#define SC_X1_SPD_OVRR3_1_GEN2r_BS_SYNC_ENf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_1_GEN2r_BS_SYNC_ENf_GET
#define SC_X1_SPD_OVRR3_1_GEN2r_BS_SYNC_ENf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_1_GEN2r_BS_SYNC_ENf_SET
#define SC_X1_SPD_OVRR3_1_GEN2r_BS_DIST_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_1_GEN2r_BS_DIST_MODEf_GET
#define SC_X1_SPD_OVRR3_1_GEN2r_BS_DIST_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_1_GEN2r_BS_DIST_MODEf_SET
#define SC_X1_SPD_OVRR3_1_GEN2r_BS_BTMX_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_1_GEN2r_BS_BTMX_MODEf_GET
#define SC_X1_SPD_OVRR3_1_GEN2r_BS_BTMX_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_1_GEN2r_BS_BTMX_MODEf_SET
#define READ_SC_X1_SPD_OVRR3_1_GEN2r BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR3_1_GEN2r
#define WRITE_SC_X1_SPD_OVRR3_1_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR3_1_GEN2r
#define MODIFY_SC_X1_SPD_OVRR3_1_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR3_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X1_SPD_OVRR3_2_GEN2
 * BLOCKS:   SC_X1_SPEED_OVERRIDE3
 * REGADDR:  0x92a4
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CLOCKCNT0        clock count 0 for credit programming, range 5 to 4125
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_2_GEN2r (0x001092a4 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR3_2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_2_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr3_2_gen2[1];
	uint32_t _sc_x1_spd_ovrr3_2_gen2;
} BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_2_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_2_GEN2r_CLR(r) (r).sc_x1_spd_ovrr3_2_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_2_GEN2r_SET(r,d) (r).sc_x1_spd_ovrr3_2_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_2_GEN2r_GET(r) (r).sc_x1_spd_ovrr3_2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_2_GEN2r_CLOCKCNT0f_GET(r) (((r).sc_x1_spd_ovrr3_2_gen2[0]) & 0x3fff)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_2_GEN2r_CLOCKCNT0f_SET(r,f) (r).sc_x1_spd_ovrr3_2_gen2[0]=(((r).sc_x1_spd_ovrr3_2_gen2[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff)) | (0x3fff << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR3_2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR3_2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_2_GEN2r,(_r._sc_x1_spd_ovrr3_2_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR3_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_2_GEN2r,(_r._sc_x1_spd_ovrr3_2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR3_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_2_GEN2r,(_r._sc_x1_spd_ovrr3_2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR3_2_GEN2r BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_2_GEN2r
#define SC_X1_SPD_OVRR3_2_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_2_GEN2r_t SC_X1_SPD_OVRR3_2_GEN2r_t;
#define SC_X1_SPD_OVRR3_2_GEN2r_CLR BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_2_GEN2r_CLR
#define SC_X1_SPD_OVRR3_2_GEN2r_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_2_GEN2r_SET
#define SC_X1_SPD_OVRR3_2_GEN2r_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_2_GEN2r_GET
#define SC_X1_SPD_OVRR3_2_GEN2r_CLOCKCNT0f_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_2_GEN2r_CLOCKCNT0f_GET
#define SC_X1_SPD_OVRR3_2_GEN2r_CLOCKCNT0f_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_2_GEN2r_CLOCKCNT0f_SET
#define READ_SC_X1_SPD_OVRR3_2_GEN2r BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR3_2_GEN2r
#define WRITE_SC_X1_SPD_OVRR3_2_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR3_2_GEN2r
#define MODIFY_SC_X1_SPD_OVRR3_2_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR3_2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X1_SPD_OVRR3_3_GEN2
 * BLOCKS:   SC_X1_SPEED_OVERRIDE3
 * REGADDR:  0x92a5
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CLOCKCNT1        clock count 1 for credit programming, range 4 to 12
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_3_GEN2r (0x001092a5 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_3_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR3_3_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_3_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr3_3_gen2[1];
	uint32_t _sc_x1_spd_ovrr3_3_gen2;
} BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_3_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_3_GEN2r_CLR(r) (r).sc_x1_spd_ovrr3_3_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_3_GEN2r_SET(r,d) (r).sc_x1_spd_ovrr3_3_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_3_GEN2r_GET(r) (r).sc_x1_spd_ovrr3_3_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_3_GEN2r_CLOCKCNT1f_GET(r) (((r).sc_x1_spd_ovrr3_3_gen2[0]) & 0xff)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_3_GEN2r_CLOCKCNT1f_SET(r,f) (r).sc_x1_spd_ovrr3_3_gen2[0]=(((r).sc_x1_spd_ovrr3_3_gen2[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR3_3_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR3_3_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_3_GEN2r,(_r._sc_x1_spd_ovrr3_3_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR3_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_3_GEN2r,(_r._sc_x1_spd_ovrr3_3_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR3_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_3_GEN2r,(_r._sc_x1_spd_ovrr3_3_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR3_3_GEN2r BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_3_GEN2r
#define SC_X1_SPD_OVRR3_3_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_3_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_3_GEN2r_t SC_X1_SPD_OVRR3_3_GEN2r_t;
#define SC_X1_SPD_OVRR3_3_GEN2r_CLR BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_3_GEN2r_CLR
#define SC_X1_SPD_OVRR3_3_GEN2r_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_3_GEN2r_SET
#define SC_X1_SPD_OVRR3_3_GEN2r_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_3_GEN2r_GET
#define SC_X1_SPD_OVRR3_3_GEN2r_CLOCKCNT1f_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_3_GEN2r_CLOCKCNT1f_GET
#define SC_X1_SPD_OVRR3_3_GEN2r_CLOCKCNT1f_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_3_GEN2r_CLOCKCNT1f_SET
#define READ_SC_X1_SPD_OVRR3_3_GEN2r BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR3_3_GEN2r
#define WRITE_SC_X1_SPD_OVRR3_3_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR3_3_GEN2r
#define MODIFY_SC_X1_SPD_OVRR3_3_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR3_3_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_3_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X1_SPD_OVRR3_4_GEN2
 * BLOCKS:   SC_X1_SPEED_OVERRIDE3
 * REGADDR:  0x92a6
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LOOPCNT1         loop count 1 for credit programming, range 2 to 18
 *     LOOPCNT0         loop count 0 for credit programming, range 1 to 1
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_4_GEN2r (0x001092a6 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_4_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR3_4_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_4_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr3_4_gen2[1];
	uint32_t _sc_x1_spd_ovrr3_4_gen2;
} BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_4_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_4_GEN2r_CLR(r) (r).sc_x1_spd_ovrr3_4_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_4_GEN2r_SET(r,d) (r).sc_x1_spd_ovrr3_4_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_4_GEN2r_GET(r) (r).sc_x1_spd_ovrr3_4_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_4_GEN2r_LOOPCNT0f_GET(r) ((((r).sc_x1_spd_ovrr3_4_gen2[0]) >> 6) & 0xff)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_4_GEN2r_LOOPCNT0f_SET(r,f) (r).sc_x1_spd_ovrr3_4_gen2[0]=(((r).sc_x1_spd_ovrr3_4_gen2[0] & ~((uint32_t)0xff << 6)) | ((((uint32_t)f) & 0xff) << 6)) | (255 << (16 + 6))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_4_GEN2r_LOOPCNT1f_GET(r) (((r).sc_x1_spd_ovrr3_4_gen2[0]) & 0x3f)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_4_GEN2r_LOOPCNT1f_SET(r,f) (r).sc_x1_spd_ovrr3_4_gen2[0]=(((r).sc_x1_spd_ovrr3_4_gen2[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR3_4_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR3_4_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_4_GEN2r,(_r._sc_x1_spd_ovrr3_4_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR3_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_4_GEN2r,(_r._sc_x1_spd_ovrr3_4_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR3_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_4_GEN2r,(_r._sc_x1_spd_ovrr3_4_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR3_4_GEN2r BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_4_GEN2r
#define SC_X1_SPD_OVRR3_4_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_4_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_4_GEN2r_t SC_X1_SPD_OVRR3_4_GEN2r_t;
#define SC_X1_SPD_OVRR3_4_GEN2r_CLR BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_4_GEN2r_CLR
#define SC_X1_SPD_OVRR3_4_GEN2r_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_4_GEN2r_SET
#define SC_X1_SPD_OVRR3_4_GEN2r_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_4_GEN2r_GET
#define SC_X1_SPD_OVRR3_4_GEN2r_LOOPCNT0f_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_4_GEN2r_LOOPCNT0f_GET
#define SC_X1_SPD_OVRR3_4_GEN2r_LOOPCNT0f_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_4_GEN2r_LOOPCNT0f_SET
#define SC_X1_SPD_OVRR3_4_GEN2r_LOOPCNT1f_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_4_GEN2r_LOOPCNT1f_GET
#define SC_X1_SPD_OVRR3_4_GEN2r_LOOPCNT1f_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_4_GEN2r_LOOPCNT1f_SET
#define READ_SC_X1_SPD_OVRR3_4_GEN2r BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR3_4_GEN2r
#define WRITE_SC_X1_SPD_OVRR3_4_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR3_4_GEN2r
#define MODIFY_SC_X1_SPD_OVRR3_4_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR3_4_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_4_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X1_SPD_OVRR3_5_GEN2
 * BLOCKS:   SC_X1_SPEED_OVERRIDE3
 * REGADDR:  0x92a7
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MAC_CREDITGENCNT CGC for mac credit generation, range 1 to 2063
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_5_GEN2r (0x001092a7 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_5_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR3_5_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_5_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr3_5_gen2[1];
	uint32_t _sc_x1_spd_ovrr3_5_gen2;
} BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_5_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_5_GEN2r_CLR(r) (r).sc_x1_spd_ovrr3_5_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_5_GEN2r_SET(r,d) (r).sc_x1_spd_ovrr3_5_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_5_GEN2r_GET(r) (r).sc_x1_spd_ovrr3_5_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_5_GEN2r_MAC_CREDITGENCNTf_GET(r) (((r).sc_x1_spd_ovrr3_5_gen2[0]) & 0x1fff)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_5_GEN2r_MAC_CREDITGENCNTf_SET(r,f) (r).sc_x1_spd_ovrr3_5_gen2[0]=(((r).sc_x1_spd_ovrr3_5_gen2[0] & ~((uint32_t)0x1fff)) | (((uint32_t)f) & 0x1fff)) | (0x1fff << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR3_5_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR3_5_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_5_GEN2r,(_r._sc_x1_spd_ovrr3_5_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR3_5_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_5_GEN2r,(_r._sc_x1_spd_ovrr3_5_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR3_5_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_5_GEN2r,(_r._sc_x1_spd_ovrr3_5_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR3_5_GEN2r BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_5_GEN2r
#define SC_X1_SPD_OVRR3_5_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_5_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_5_GEN2r_t SC_X1_SPD_OVRR3_5_GEN2r_t;
#define SC_X1_SPD_OVRR3_5_GEN2r_CLR BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_5_GEN2r_CLR
#define SC_X1_SPD_OVRR3_5_GEN2r_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_5_GEN2r_SET
#define SC_X1_SPD_OVRR3_5_GEN2r_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_5_GEN2r_GET
#define SC_X1_SPD_OVRR3_5_GEN2r_MAC_CREDITGENCNTf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_5_GEN2r_MAC_CREDITGENCNTf_GET
#define SC_X1_SPD_OVRR3_5_GEN2r_MAC_CREDITGENCNTf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_5_GEN2r_MAC_CREDITGENCNTf_SET
#define READ_SC_X1_SPD_OVRR3_5_GEN2r BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR3_5_GEN2r
#define WRITE_SC_X1_SPD_OVRR3_5_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR3_5_GEN2r
#define MODIFY_SC_X1_SPD_OVRR3_5_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR3_5_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_5_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X1_SPD_OVRR3_6_GEN2
 * BLOCKS:   SC_X1_SPEED_OVERRIDE3
 * REGADDR:  0x92a8
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     T_CL91_CW_SCRAMBLE Indicates whether the CL91 codeword should be scrambled or not. It should be set to 1 in FC mode.
 *     T_FIVE_BIT_XOR_EN 1'b1 - XOR 4:0 with 12:8, 1'b0 - No XOR of the 5 bits
 *     T_PMA_CL91_MUX_SEL T_PMA MUX CL91 select.
 *     T_PMA_WATERMARK  T_PMA FIFO watermark. In units of 66-bit blocks.
 *     T_PMA_BITMUX_DELAY T_PMA FIFO delay after watermark is reached (in units of cycles)
 *     AM_SPACING_MUL   
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_6_GEN2r (0x001092a8 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_6_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR3_6_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_6_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr3_6_gen2[1];
	uint32_t _sc_x1_spd_ovrr3_6_gen2;
} BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_6_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_6_GEN2r_CLR(r) (r).sc_x1_spd_ovrr3_6_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_6_GEN2r_SET(r,d) (r).sc_x1_spd_ovrr3_6_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_6_GEN2r_GET(r) (r).sc_x1_spd_ovrr3_6_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_6_GEN2r_AM_SPACING_MULf_GET(r) ((((r).sc_x1_spd_ovrr3_6_gen2[0]) >> 9) & 0x3)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_6_GEN2r_AM_SPACING_MULf_SET(r,f) (r).sc_x1_spd_ovrr3_6_gen2[0]=(((r).sc_x1_spd_ovrr3_6_gen2[0] & ~((uint32_t)0x3 << 9)) | ((((uint32_t)f) & 0x3) << 9)) | (3 << (16 + 9))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_6_GEN2r_T_PMA_BITMUX_DELAYf_GET(r) ((((r).sc_x1_spd_ovrr3_6_gen2[0]) >> 7) & 0x3)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_6_GEN2r_T_PMA_BITMUX_DELAYf_SET(r,f) (r).sc_x1_spd_ovrr3_6_gen2[0]=(((r).sc_x1_spd_ovrr3_6_gen2[0] & ~((uint32_t)0x3 << 7)) | ((((uint32_t)f) & 0x3) << 7)) | (3 << (16 + 7))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_6_GEN2r_T_PMA_WATERMARKf_GET(r) ((((r).sc_x1_spd_ovrr3_6_gen2[0]) >> 3) & 0xf)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_6_GEN2r_T_PMA_WATERMARKf_SET(r,f) (r).sc_x1_spd_ovrr3_6_gen2[0]=(((r).sc_x1_spd_ovrr3_6_gen2[0] & ~((uint32_t)0xf << 3)) | ((((uint32_t)f) & 0xf) << 3)) | (15 << (16 + 3))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_6_GEN2r_T_PMA_CL91_MUX_SELf_GET(r) ((((r).sc_x1_spd_ovrr3_6_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_6_GEN2r_T_PMA_CL91_MUX_SELf_SET(r,f) (r).sc_x1_spd_ovrr3_6_gen2[0]=(((r).sc_x1_spd_ovrr3_6_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_6_GEN2r_T_FIVE_BIT_XOR_ENf_GET(r) ((((r).sc_x1_spd_ovrr3_6_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_6_GEN2r_T_FIVE_BIT_XOR_ENf_SET(r,f) (r).sc_x1_spd_ovrr3_6_gen2[0]=(((r).sc_x1_spd_ovrr3_6_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_6_GEN2r_T_CL91_CW_SCRAMBLEf_GET(r) (((r).sc_x1_spd_ovrr3_6_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_6_GEN2r_T_CL91_CW_SCRAMBLEf_SET(r,f) (r).sc_x1_spd_ovrr3_6_gen2[0]=(((r).sc_x1_spd_ovrr3_6_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR3_6_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR3_6_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_6_GEN2r,(_r._sc_x1_spd_ovrr3_6_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR3_6_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_6_GEN2r,(_r._sc_x1_spd_ovrr3_6_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR3_6_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_6_GEN2r,(_r._sc_x1_spd_ovrr3_6_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR3_6_GEN2r BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_6_GEN2r
#define SC_X1_SPD_OVRR3_6_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_6_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_6_GEN2r_t SC_X1_SPD_OVRR3_6_GEN2r_t;
#define SC_X1_SPD_OVRR3_6_GEN2r_CLR BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_6_GEN2r_CLR
#define SC_X1_SPD_OVRR3_6_GEN2r_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_6_GEN2r_SET
#define SC_X1_SPD_OVRR3_6_GEN2r_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_6_GEN2r_GET
#define SC_X1_SPD_OVRR3_6_GEN2r_AM_SPACING_MULf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_6_GEN2r_AM_SPACING_MULf_GET
#define SC_X1_SPD_OVRR3_6_GEN2r_AM_SPACING_MULf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_6_GEN2r_AM_SPACING_MULf_SET
#define SC_X1_SPD_OVRR3_6_GEN2r_T_PMA_BITMUX_DELAYf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_6_GEN2r_T_PMA_BITMUX_DELAYf_GET
#define SC_X1_SPD_OVRR3_6_GEN2r_T_PMA_BITMUX_DELAYf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_6_GEN2r_T_PMA_BITMUX_DELAYf_SET
#define SC_X1_SPD_OVRR3_6_GEN2r_T_PMA_WATERMARKf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_6_GEN2r_T_PMA_WATERMARKf_GET
#define SC_X1_SPD_OVRR3_6_GEN2r_T_PMA_WATERMARKf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_6_GEN2r_T_PMA_WATERMARKf_SET
#define SC_X1_SPD_OVRR3_6_GEN2r_T_PMA_CL91_MUX_SELf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_6_GEN2r_T_PMA_CL91_MUX_SELf_GET
#define SC_X1_SPD_OVRR3_6_GEN2r_T_PMA_CL91_MUX_SELf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_6_GEN2r_T_PMA_CL91_MUX_SELf_SET
#define SC_X1_SPD_OVRR3_6_GEN2r_T_FIVE_BIT_XOR_ENf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_6_GEN2r_T_FIVE_BIT_XOR_ENf_GET
#define SC_X1_SPD_OVRR3_6_GEN2r_T_FIVE_BIT_XOR_ENf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_6_GEN2r_T_FIVE_BIT_XOR_ENf_SET
#define SC_X1_SPD_OVRR3_6_GEN2r_T_CL91_CW_SCRAMBLEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_6_GEN2r_T_CL91_CW_SCRAMBLEf_GET
#define SC_X1_SPD_OVRR3_6_GEN2r_T_CL91_CW_SCRAMBLEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_6_GEN2r_T_CL91_CW_SCRAMBLEf_SET
#define READ_SC_X1_SPD_OVRR3_6_GEN2r BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR3_6_GEN2r
#define WRITE_SC_X1_SPD_OVRR3_6_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR3_6_GEN2r
#define MODIFY_SC_X1_SPD_OVRR3_6_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR3_6_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_6_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X1_SPD_OVRR3_7_GEN2
 * BLOCKS:   SC_X1_SPEED_OVERRIDE3
 * REGADDR:  0x92a9
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL91_BLKSYNC_MODE 
 *     R_MERGE_MODE     
 *     R_CL91_CW_SCRAMBLE Indicates whether the CL91 codeword needs to be descrambled. Should be enabled for FC mode.
 *     R_TC_IN_MODE     Indicates whether CL91 is turned ON for the port or not.
 *     R_TC_MODE        
 *     R_FIVE_BIT_XOR_EN 1'b1 - XOR 4:0 with 12:8, 1'b0 - No XOR of the 5 bits
 *     R_TC_OUT_MODE    
 *     R_HG2_ENABLE     Enables HG2 support for PCS
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_7_GEN2r (0x001092a9 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_7_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR3_7_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_7_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr3_7_gen2[1];
	uint32_t _sc_x1_spd_ovrr3_7_gen2;
} BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_7_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_7_GEN2r_CLR(r) (r).sc_x1_spd_ovrr3_7_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_7_GEN2r_SET(r,d) (r).sc_x1_spd_ovrr3_7_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_7_GEN2r_GET(r) (r).sc_x1_spd_ovrr3_7_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_7_GEN2r_R_HG2_ENABLEf_GET(r) ((((r).sc_x1_spd_ovrr3_7_gen2[0]) >> 13) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_7_GEN2r_R_HG2_ENABLEf_SET(r,f) (r).sc_x1_spd_ovrr3_7_gen2[0]=(((r).sc_x1_spd_ovrr3_7_gen2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_7_GEN2r_R_TC_OUT_MODEf_GET(r) ((((r).sc_x1_spd_ovrr3_7_gen2[0]) >> 11) & 0x3)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_7_GEN2r_R_TC_OUT_MODEf_SET(r,f) (r).sc_x1_spd_ovrr3_7_gen2[0]=(((r).sc_x1_spd_ovrr3_7_gen2[0] & ~((uint32_t)0x3 << 11)) | ((((uint32_t)f) & 0x3) << 11)) | (3 << (16 + 11))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_7_GEN2r_R_FIVE_BIT_XOR_ENf_GET(r) ((((r).sc_x1_spd_ovrr3_7_gen2[0]) >> 10) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_7_GEN2r_R_FIVE_BIT_XOR_ENf_SET(r,f) (r).sc_x1_spd_ovrr3_7_gen2[0]=(((r).sc_x1_spd_ovrr3_7_gen2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_7_GEN2r_R_TC_MODEf_GET(r) ((((r).sc_x1_spd_ovrr3_7_gen2[0]) >> 8) & 0x3)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_7_GEN2r_R_TC_MODEf_SET(r,f) (r).sc_x1_spd_ovrr3_7_gen2[0]=(((r).sc_x1_spd_ovrr3_7_gen2[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_7_GEN2r_R_TC_IN_MODEf_GET(r) ((((r).sc_x1_spd_ovrr3_7_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_7_GEN2r_R_TC_IN_MODEf_SET(r,f) (r).sc_x1_spd_ovrr3_7_gen2[0]=(((r).sc_x1_spd_ovrr3_7_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_7_GEN2r_R_CL91_CW_SCRAMBLEf_GET(r) ((((r).sc_x1_spd_ovrr3_7_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_7_GEN2r_R_CL91_CW_SCRAMBLEf_SET(r,f) (r).sc_x1_spd_ovrr3_7_gen2[0]=(((r).sc_x1_spd_ovrr3_7_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_7_GEN2r_R_MERGE_MODEf_GET(r) ((((r).sc_x1_spd_ovrr3_7_gen2[0]) >> 3) & 0x7)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_7_GEN2r_R_MERGE_MODEf_SET(r,f) (r).sc_x1_spd_ovrr3_7_gen2[0]=(((r).sc_x1_spd_ovrr3_7_gen2[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3)) | (7 << (16 + 3))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_7_GEN2r_CL91_BLKSYNC_MODEf_GET(r) (((r).sc_x1_spd_ovrr3_7_gen2[0]) & 0x7)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_7_GEN2r_CL91_BLKSYNC_MODEf_SET(r,f) (r).sc_x1_spd_ovrr3_7_gen2[0]=(((r).sc_x1_spd_ovrr3_7_gen2[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR3_7_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR3_7_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_7_GEN2r,(_r._sc_x1_spd_ovrr3_7_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR3_7_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_7_GEN2r,(_r._sc_x1_spd_ovrr3_7_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR3_7_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_7_GEN2r,(_r._sc_x1_spd_ovrr3_7_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR3_7_GEN2r BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_7_GEN2r
#define SC_X1_SPD_OVRR3_7_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_7_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_7_GEN2r_t SC_X1_SPD_OVRR3_7_GEN2r_t;
#define SC_X1_SPD_OVRR3_7_GEN2r_CLR BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_7_GEN2r_CLR
#define SC_X1_SPD_OVRR3_7_GEN2r_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_7_GEN2r_SET
#define SC_X1_SPD_OVRR3_7_GEN2r_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_7_GEN2r_GET
#define SC_X1_SPD_OVRR3_7_GEN2r_R_HG2_ENABLEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_7_GEN2r_R_HG2_ENABLEf_GET
#define SC_X1_SPD_OVRR3_7_GEN2r_R_HG2_ENABLEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_7_GEN2r_R_HG2_ENABLEf_SET
#define SC_X1_SPD_OVRR3_7_GEN2r_R_TC_OUT_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_7_GEN2r_R_TC_OUT_MODEf_GET
#define SC_X1_SPD_OVRR3_7_GEN2r_R_TC_OUT_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_7_GEN2r_R_TC_OUT_MODEf_SET
#define SC_X1_SPD_OVRR3_7_GEN2r_R_FIVE_BIT_XOR_ENf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_7_GEN2r_R_FIVE_BIT_XOR_ENf_GET
#define SC_X1_SPD_OVRR3_7_GEN2r_R_FIVE_BIT_XOR_ENf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_7_GEN2r_R_FIVE_BIT_XOR_ENf_SET
#define SC_X1_SPD_OVRR3_7_GEN2r_R_TC_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_7_GEN2r_R_TC_MODEf_GET
#define SC_X1_SPD_OVRR3_7_GEN2r_R_TC_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_7_GEN2r_R_TC_MODEf_SET
#define SC_X1_SPD_OVRR3_7_GEN2r_R_TC_IN_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_7_GEN2r_R_TC_IN_MODEf_GET
#define SC_X1_SPD_OVRR3_7_GEN2r_R_TC_IN_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_7_GEN2r_R_TC_IN_MODEf_SET
#define SC_X1_SPD_OVRR3_7_GEN2r_R_CL91_CW_SCRAMBLEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_7_GEN2r_R_CL91_CW_SCRAMBLEf_GET
#define SC_X1_SPD_OVRR3_7_GEN2r_R_CL91_CW_SCRAMBLEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_7_GEN2r_R_CL91_CW_SCRAMBLEf_SET
#define SC_X1_SPD_OVRR3_7_GEN2r_R_MERGE_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_7_GEN2r_R_MERGE_MODEf_GET
#define SC_X1_SPD_OVRR3_7_GEN2r_R_MERGE_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_7_GEN2r_R_MERGE_MODEf_SET
#define SC_X1_SPD_OVRR3_7_GEN2r_CL91_BLKSYNC_MODEf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_7_GEN2r_CL91_BLKSYNC_MODEf_GET
#define SC_X1_SPD_OVRR3_7_GEN2r_CL91_BLKSYNC_MODEf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_7_GEN2r_CL91_BLKSYNC_MODEf_SET
#define READ_SC_X1_SPD_OVRR3_7_GEN2r BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR3_7_GEN2r
#define WRITE_SC_X1_SPD_OVRR3_7_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR3_7_GEN2r
#define MODIFY_SC_X1_SPD_OVRR3_7_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR3_7_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_7_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X1_SPD_OVRR3_8_GEN2
 * BLOCKS:   SC_X1_SPEED_OVERRIDE3
 * REGADDR:  0x92aa
 * DESC:     Override speed specification for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CORRUPT_2ND_GROUP Corrupt 2nd group of codeward
 *     CORRUPT_6TH_GROUP Corrupt 6th group of codeward
 *     CL74_SHCORRUPT   Sync Header Corruption for CL74 FEC Error (uncorrectable).0: Only 5 SH, 1: All SH corrupted.
 *     BER_COUNT_SEL    0: select count based on cl49 else based on cl82
 *     BER_WINDOW_SEL   0: select window based on cl49 else based on cl82
 *     USE_100G_AM0     AM0 will be taken from 100G AM
 *     USE_100G_AM123   AM 1, 2, 3 will be taken from 100G AMs
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_8_GEN2r (0x001092aa | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_8_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X1_SPD_OVRR3_8_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_8_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x1_spd_ovrr3_8_gen2[1];
	uint32_t _sc_x1_spd_ovrr3_8_gen2;
} BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_8_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_8_GEN2r_CLR(r) (r).sc_x1_spd_ovrr3_8_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_8_GEN2r_SET(r,d) (r).sc_x1_spd_ovrr3_8_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_8_GEN2r_GET(r) (r).sc_x1_spd_ovrr3_8_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_8_GEN2r_USE_100G_AM123f_GET(r) ((((r).sc_x1_spd_ovrr3_8_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_8_GEN2r_USE_100G_AM123f_SET(r,f) (r).sc_x1_spd_ovrr3_8_gen2[0]=(((r).sc_x1_spd_ovrr3_8_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_8_GEN2r_USE_100G_AM0f_GET(r) ((((r).sc_x1_spd_ovrr3_8_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_8_GEN2r_USE_100G_AM0f_SET(r,f) (r).sc_x1_spd_ovrr3_8_gen2[0]=(((r).sc_x1_spd_ovrr3_8_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_8_GEN2r_BER_WINDOW_SELf_GET(r) ((((r).sc_x1_spd_ovrr3_8_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_8_GEN2r_BER_WINDOW_SELf_SET(r,f) (r).sc_x1_spd_ovrr3_8_gen2[0]=(((r).sc_x1_spd_ovrr3_8_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_8_GEN2r_BER_COUNT_SELf_GET(r) ((((r).sc_x1_spd_ovrr3_8_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_8_GEN2r_BER_COUNT_SELf_SET(r,f) (r).sc_x1_spd_ovrr3_8_gen2[0]=(((r).sc_x1_spd_ovrr3_8_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_8_GEN2r_CL74_SHCORRUPTf_GET(r) ((((r).sc_x1_spd_ovrr3_8_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_8_GEN2r_CL74_SHCORRUPTf_SET(r,f) (r).sc_x1_spd_ovrr3_8_gen2[0]=(((r).sc_x1_spd_ovrr3_8_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_8_GEN2r_CORRUPT_6TH_GROUPf_GET(r) ((((r).sc_x1_spd_ovrr3_8_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_8_GEN2r_CORRUPT_6TH_GROUPf_SET(r,f) (r).sc_x1_spd_ovrr3_8_gen2[0]=(((r).sc_x1_spd_ovrr3_8_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_8_GEN2r_CORRUPT_2ND_GROUPf_GET(r) (((r).sc_x1_spd_ovrr3_8_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_8_GEN2r_CORRUPT_2ND_GROUPf_SET(r,f) (r).sc_x1_spd_ovrr3_8_gen2[0]=(((r).sc_x1_spd_ovrr3_8_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access SC_X1_SPD_OVRR3_8_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR3_8_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_8_GEN2r,(_r._sc_x1_spd_ovrr3_8_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR3_8_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_8_GEN2r,(_r._sc_x1_spd_ovrr3_8_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR3_8_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_8_GEN2r,(_r._sc_x1_spd_ovrr3_8_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X1_SPD_OVRR3_8_GEN2r BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_8_GEN2r
#define SC_X1_SPD_OVRR3_8_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_8_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_8_GEN2r_t SC_X1_SPD_OVRR3_8_GEN2r_t;
#define SC_X1_SPD_OVRR3_8_GEN2r_CLR BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_8_GEN2r_CLR
#define SC_X1_SPD_OVRR3_8_GEN2r_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_8_GEN2r_SET
#define SC_X1_SPD_OVRR3_8_GEN2r_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_8_GEN2r_GET
#define SC_X1_SPD_OVRR3_8_GEN2r_USE_100G_AM123f_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_8_GEN2r_USE_100G_AM123f_GET
#define SC_X1_SPD_OVRR3_8_GEN2r_USE_100G_AM123f_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_8_GEN2r_USE_100G_AM123f_SET
#define SC_X1_SPD_OVRR3_8_GEN2r_USE_100G_AM0f_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_8_GEN2r_USE_100G_AM0f_GET
#define SC_X1_SPD_OVRR3_8_GEN2r_USE_100G_AM0f_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_8_GEN2r_USE_100G_AM0f_SET
#define SC_X1_SPD_OVRR3_8_GEN2r_BER_WINDOW_SELf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_8_GEN2r_BER_WINDOW_SELf_GET
#define SC_X1_SPD_OVRR3_8_GEN2r_BER_WINDOW_SELf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_8_GEN2r_BER_WINDOW_SELf_SET
#define SC_X1_SPD_OVRR3_8_GEN2r_BER_COUNT_SELf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_8_GEN2r_BER_COUNT_SELf_GET
#define SC_X1_SPD_OVRR3_8_GEN2r_BER_COUNT_SELf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_8_GEN2r_BER_COUNT_SELf_SET
#define SC_X1_SPD_OVRR3_8_GEN2r_CL74_SHCORRUPTf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_8_GEN2r_CL74_SHCORRUPTf_GET
#define SC_X1_SPD_OVRR3_8_GEN2r_CL74_SHCORRUPTf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_8_GEN2r_CL74_SHCORRUPTf_SET
#define SC_X1_SPD_OVRR3_8_GEN2r_CORRUPT_6TH_GROUPf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_8_GEN2r_CORRUPT_6TH_GROUPf_GET
#define SC_X1_SPD_OVRR3_8_GEN2r_CORRUPT_6TH_GROUPf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_8_GEN2r_CORRUPT_6TH_GROUPf_SET
#define SC_X1_SPD_OVRR3_8_GEN2r_CORRUPT_2ND_GROUPf_GET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_8_GEN2r_CORRUPT_2ND_GROUPf_GET
#define SC_X1_SPD_OVRR3_8_GEN2r_CORRUPT_2ND_GROUPf_SET BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_8_GEN2r_CORRUPT_2ND_GROUPf_SET
#define READ_SC_X1_SPD_OVRR3_8_GEN2r BCMI_TSCF_XGXS_READ_SC_X1_SPD_OVRR3_8_GEN2r
#define WRITE_SC_X1_SPD_OVRR3_8_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X1_SPD_OVRR3_8_GEN2r
#define MODIFY_SC_X1_SPD_OVRR3_8_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X1_SPD_OVRR3_8_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X1_SPD_OVRR3_8_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X1_STS_CL91_FEC_RAM1_LO_GEN2
 * BLOCKS:   RX_X1_STATUS0
 * REGADDR:  0x92b0
 * DESC:     ECC status register for CL91 FEC RAM1 containing lower 90 bits
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     ERR_EVENT_ADDRESS_CL91_FEC_RAM1_LO ECC error location, valid only if 1-bit or 2-bit error bit is set
 *     ONE_BIT_ERR_EVENT_CL91_FEC_RAM1_LO 1-bit ECC error detected
 *     TWO_BIT_ERR_EVENT_CL91_FEC_RAM1_LO 2-bit ECC error detected
 */
#define BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_LO_GEN2r (0x001092b0 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_LO_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X1_STS_CL91_FEC_RAM1_LO_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_LO_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x1_sts_cl91_fec_ram1_lo_gen2[1];
	uint32_t _rx_x1_sts_cl91_fec_ram1_lo_gen2;
} BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_LO_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_LO_GEN2r_CLR(r) (r).rx_x1_sts_cl91_fec_ram1_lo_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_LO_GEN2r_SET(r,d) (r).rx_x1_sts_cl91_fec_ram1_lo_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_LO_GEN2r_GET(r) (r).rx_x1_sts_cl91_fec_ram1_lo_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_LO_GEN2r_TWO_BIT_ERR_EVENT_CL91_FEC_RAM1_LOf_GET(r) ((((r).rx_x1_sts_cl91_fec_ram1_lo_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_LO_GEN2r_TWO_BIT_ERR_EVENT_CL91_FEC_RAM1_LOf_SET(r,f) (r).rx_x1_sts_cl91_fec_ram1_lo_gen2[0]=(((r).rx_x1_sts_cl91_fec_ram1_lo_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_LO_GEN2r_ONE_BIT_ERR_EVENT_CL91_FEC_RAM1_LOf_GET(r) ((((r).rx_x1_sts_cl91_fec_ram1_lo_gen2[0]) >> 14) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_LO_GEN2r_ONE_BIT_ERR_EVENT_CL91_FEC_RAM1_LOf_SET(r,f) (r).rx_x1_sts_cl91_fec_ram1_lo_gen2[0]=(((r).rx_x1_sts_cl91_fec_ram1_lo_gen2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_LO_GEN2r_ERR_EVENT_ADDRESS_CL91_FEC_RAM1_LOf_GET(r) (((r).rx_x1_sts_cl91_fec_ram1_lo_gen2[0]) & 0x3fff)
#define BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_LO_GEN2r_ERR_EVENT_ADDRESS_CL91_FEC_RAM1_LOf_SET(r,f) (r).rx_x1_sts_cl91_fec_ram1_lo_gen2[0]=(((r).rx_x1_sts_cl91_fec_ram1_lo_gen2[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff)) | (0x3fff << 16)

/*
 * These macros can be used to access RX_X1_STS_CL91_FEC_RAM1_LO_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X1_STS_CL91_FEC_RAM1_LO_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_LO_GEN2r,(_r._rx_x1_sts_cl91_fec_ram1_lo_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X1_STS_CL91_FEC_RAM1_LO_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_LO_GEN2r,(_r._rx_x1_sts_cl91_fec_ram1_lo_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X1_STS_CL91_FEC_RAM1_LO_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_LO_GEN2r,(_r._rx_x1_sts_cl91_fec_ram1_lo_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X1_STS_CL91_FEC_RAM1_LO_GEN2r BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_LO_GEN2r
#define RX_X1_STS_CL91_FEC_RAM1_LO_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_LO_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_LO_GEN2r_t RX_X1_STS_CL91_FEC_RAM1_LO_GEN2r_t;
#define RX_X1_STS_CL91_FEC_RAM1_LO_GEN2r_CLR BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_LO_GEN2r_CLR
#define RX_X1_STS_CL91_FEC_RAM1_LO_GEN2r_SET BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_LO_GEN2r_SET
#define RX_X1_STS_CL91_FEC_RAM1_LO_GEN2r_GET BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_LO_GEN2r_GET
#define RX_X1_STS_CL91_FEC_RAM1_LO_GEN2r_TWO_BIT_ERR_EVENT_CL91_FEC_RAM1_LOf_GET BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_LO_GEN2r_TWO_BIT_ERR_EVENT_CL91_FEC_RAM1_LOf_GET
#define RX_X1_STS_CL91_FEC_RAM1_LO_GEN2r_TWO_BIT_ERR_EVENT_CL91_FEC_RAM1_LOf_SET BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_LO_GEN2r_TWO_BIT_ERR_EVENT_CL91_FEC_RAM1_LOf_SET
#define RX_X1_STS_CL91_FEC_RAM1_LO_GEN2r_ONE_BIT_ERR_EVENT_CL91_FEC_RAM1_LOf_GET BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_LO_GEN2r_ONE_BIT_ERR_EVENT_CL91_FEC_RAM1_LOf_GET
#define RX_X1_STS_CL91_FEC_RAM1_LO_GEN2r_ONE_BIT_ERR_EVENT_CL91_FEC_RAM1_LOf_SET BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_LO_GEN2r_ONE_BIT_ERR_EVENT_CL91_FEC_RAM1_LOf_SET
#define RX_X1_STS_CL91_FEC_RAM1_LO_GEN2r_ERR_EVENT_ADDRESS_CL91_FEC_RAM1_LOf_GET BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_LO_GEN2r_ERR_EVENT_ADDRESS_CL91_FEC_RAM1_LOf_GET
#define RX_X1_STS_CL91_FEC_RAM1_LO_GEN2r_ERR_EVENT_ADDRESS_CL91_FEC_RAM1_LOf_SET BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_LO_GEN2r_ERR_EVENT_ADDRESS_CL91_FEC_RAM1_LOf_SET
#define READ_RX_X1_STS_CL91_FEC_RAM1_LO_GEN2r BCMI_TSCF_XGXS_READ_RX_X1_STS_CL91_FEC_RAM1_LO_GEN2r
#define WRITE_RX_X1_STS_CL91_FEC_RAM1_LO_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X1_STS_CL91_FEC_RAM1_LO_GEN2r
#define MODIFY_RX_X1_STS_CL91_FEC_RAM1_LO_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X1_STS_CL91_FEC_RAM1_LO_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_LO_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X1_STS_CL91_FEC_RAM1_HI_GEN2
 * BLOCKS:   RX_X1_STATUS0
 * REGADDR:  0x92b1
 * DESC:     ECC status register for CL91 FEC RAM1 containing upper 90 bits
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     ERR_EVENT_ADDRESS_CL91_FEC_RAM1_HI ECC error location, valid only if 1-bit or 2-bit error bit is set
 *     ONE_BIT_ERR_EVENT_CL91_FEC_RAM1_HI 1-bit ECC error detected
 *     TWO_BIT_ERR_EVENT_CL91_FEC_RAM1_HI 2-bit ECC error detected
 */
#define BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_HI_GEN2r (0x001092b1 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_HI_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X1_STS_CL91_FEC_RAM1_HI_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_HI_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x1_sts_cl91_fec_ram1_hi_gen2[1];
	uint32_t _rx_x1_sts_cl91_fec_ram1_hi_gen2;
} BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_HI_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_HI_GEN2r_CLR(r) (r).rx_x1_sts_cl91_fec_ram1_hi_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_HI_GEN2r_SET(r,d) (r).rx_x1_sts_cl91_fec_ram1_hi_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_HI_GEN2r_GET(r) (r).rx_x1_sts_cl91_fec_ram1_hi_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_HI_GEN2r_TWO_BIT_ERR_EVENT_CL91_FEC_RAM1_HIf_GET(r) ((((r).rx_x1_sts_cl91_fec_ram1_hi_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_HI_GEN2r_TWO_BIT_ERR_EVENT_CL91_FEC_RAM1_HIf_SET(r,f) (r).rx_x1_sts_cl91_fec_ram1_hi_gen2[0]=(((r).rx_x1_sts_cl91_fec_ram1_hi_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_HI_GEN2r_ONE_BIT_ERR_EVENT_CL91_FEC_RAM1_HIf_GET(r) ((((r).rx_x1_sts_cl91_fec_ram1_hi_gen2[0]) >> 14) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_HI_GEN2r_ONE_BIT_ERR_EVENT_CL91_FEC_RAM1_HIf_SET(r,f) (r).rx_x1_sts_cl91_fec_ram1_hi_gen2[0]=(((r).rx_x1_sts_cl91_fec_ram1_hi_gen2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_HI_GEN2r_ERR_EVENT_ADDRESS_CL91_FEC_RAM1_HIf_GET(r) (((r).rx_x1_sts_cl91_fec_ram1_hi_gen2[0]) & 0x3fff)
#define BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_HI_GEN2r_ERR_EVENT_ADDRESS_CL91_FEC_RAM1_HIf_SET(r,f) (r).rx_x1_sts_cl91_fec_ram1_hi_gen2[0]=(((r).rx_x1_sts_cl91_fec_ram1_hi_gen2[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff)) | (0x3fff << 16)

/*
 * These macros can be used to access RX_X1_STS_CL91_FEC_RAM1_HI_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X1_STS_CL91_FEC_RAM1_HI_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_HI_GEN2r,(_r._rx_x1_sts_cl91_fec_ram1_hi_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X1_STS_CL91_FEC_RAM1_HI_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_HI_GEN2r,(_r._rx_x1_sts_cl91_fec_ram1_hi_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X1_STS_CL91_FEC_RAM1_HI_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_HI_GEN2r,(_r._rx_x1_sts_cl91_fec_ram1_hi_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X1_STS_CL91_FEC_RAM1_HI_GEN2r BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_HI_GEN2r
#define RX_X1_STS_CL91_FEC_RAM1_HI_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_HI_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_HI_GEN2r_t RX_X1_STS_CL91_FEC_RAM1_HI_GEN2r_t;
#define RX_X1_STS_CL91_FEC_RAM1_HI_GEN2r_CLR BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_HI_GEN2r_CLR
#define RX_X1_STS_CL91_FEC_RAM1_HI_GEN2r_SET BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_HI_GEN2r_SET
#define RX_X1_STS_CL91_FEC_RAM1_HI_GEN2r_GET BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_HI_GEN2r_GET
#define RX_X1_STS_CL91_FEC_RAM1_HI_GEN2r_TWO_BIT_ERR_EVENT_CL91_FEC_RAM1_HIf_GET BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_HI_GEN2r_TWO_BIT_ERR_EVENT_CL91_FEC_RAM1_HIf_GET
#define RX_X1_STS_CL91_FEC_RAM1_HI_GEN2r_TWO_BIT_ERR_EVENT_CL91_FEC_RAM1_HIf_SET BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_HI_GEN2r_TWO_BIT_ERR_EVENT_CL91_FEC_RAM1_HIf_SET
#define RX_X1_STS_CL91_FEC_RAM1_HI_GEN2r_ONE_BIT_ERR_EVENT_CL91_FEC_RAM1_HIf_GET BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_HI_GEN2r_ONE_BIT_ERR_EVENT_CL91_FEC_RAM1_HIf_GET
#define RX_X1_STS_CL91_FEC_RAM1_HI_GEN2r_ONE_BIT_ERR_EVENT_CL91_FEC_RAM1_HIf_SET BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_HI_GEN2r_ONE_BIT_ERR_EVENT_CL91_FEC_RAM1_HIf_SET
#define RX_X1_STS_CL91_FEC_RAM1_HI_GEN2r_ERR_EVENT_ADDRESS_CL91_FEC_RAM1_HIf_GET BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_HI_GEN2r_ERR_EVENT_ADDRESS_CL91_FEC_RAM1_HIf_GET
#define RX_X1_STS_CL91_FEC_RAM1_HI_GEN2r_ERR_EVENT_ADDRESS_CL91_FEC_RAM1_HIf_SET BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_HI_GEN2r_ERR_EVENT_ADDRESS_CL91_FEC_RAM1_HIf_SET
#define READ_RX_X1_STS_CL91_FEC_RAM1_HI_GEN2r BCMI_TSCF_XGXS_READ_RX_X1_STS_CL91_FEC_RAM1_HI_GEN2r
#define WRITE_RX_X1_STS_CL91_FEC_RAM1_HI_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X1_STS_CL91_FEC_RAM1_HI_GEN2r
#define MODIFY_RX_X1_STS_CL91_FEC_RAM1_HI_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X1_STS_CL91_FEC_RAM1_HI_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM1_HI_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X1_STS_CL91_FEC_RAM2_LO_GEN2
 * BLOCKS:   RX_X1_STATUS0
 * REGADDR:  0x92b2
 * DESC:     ECC status register for CL91 FEC RAM2 containing lower 90 bits
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     ERR_EVENT_ADDRESS_CL91_FEC_RAM2_LO ECC error location, valid only if 1-bit or 2-bit error bit is set
 *     ONE_BIT_ERR_EVENT_CL91_FEC_RAM2_LO 1-bit ECC error detected
 *     TWO_BIT_ERR_EVENT_CL91_FEC_RAM2_LO 2-bit ECC error detected
 */
#define BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_LO_GEN2r (0x001092b2 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_LO_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X1_STS_CL91_FEC_RAM2_LO_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_LO_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x1_sts_cl91_fec_ram2_lo_gen2[1];
	uint32_t _rx_x1_sts_cl91_fec_ram2_lo_gen2;
} BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_LO_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_LO_GEN2r_CLR(r) (r).rx_x1_sts_cl91_fec_ram2_lo_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_LO_GEN2r_SET(r,d) (r).rx_x1_sts_cl91_fec_ram2_lo_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_LO_GEN2r_GET(r) (r).rx_x1_sts_cl91_fec_ram2_lo_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_LO_GEN2r_TWO_BIT_ERR_EVENT_CL91_FEC_RAM2_LOf_GET(r) ((((r).rx_x1_sts_cl91_fec_ram2_lo_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_LO_GEN2r_TWO_BIT_ERR_EVENT_CL91_FEC_RAM2_LOf_SET(r,f) (r).rx_x1_sts_cl91_fec_ram2_lo_gen2[0]=(((r).rx_x1_sts_cl91_fec_ram2_lo_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_LO_GEN2r_ONE_BIT_ERR_EVENT_CL91_FEC_RAM2_LOf_GET(r) ((((r).rx_x1_sts_cl91_fec_ram2_lo_gen2[0]) >> 14) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_LO_GEN2r_ONE_BIT_ERR_EVENT_CL91_FEC_RAM2_LOf_SET(r,f) (r).rx_x1_sts_cl91_fec_ram2_lo_gen2[0]=(((r).rx_x1_sts_cl91_fec_ram2_lo_gen2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_LO_GEN2r_ERR_EVENT_ADDRESS_CL91_FEC_RAM2_LOf_GET(r) (((r).rx_x1_sts_cl91_fec_ram2_lo_gen2[0]) & 0x3fff)
#define BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_LO_GEN2r_ERR_EVENT_ADDRESS_CL91_FEC_RAM2_LOf_SET(r,f) (r).rx_x1_sts_cl91_fec_ram2_lo_gen2[0]=(((r).rx_x1_sts_cl91_fec_ram2_lo_gen2[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff)) | (0x3fff << 16)

/*
 * These macros can be used to access RX_X1_STS_CL91_FEC_RAM2_LO_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X1_STS_CL91_FEC_RAM2_LO_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_LO_GEN2r,(_r._rx_x1_sts_cl91_fec_ram2_lo_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X1_STS_CL91_FEC_RAM2_LO_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_LO_GEN2r,(_r._rx_x1_sts_cl91_fec_ram2_lo_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X1_STS_CL91_FEC_RAM2_LO_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_LO_GEN2r,(_r._rx_x1_sts_cl91_fec_ram2_lo_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X1_STS_CL91_FEC_RAM2_LO_GEN2r BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_LO_GEN2r
#define RX_X1_STS_CL91_FEC_RAM2_LO_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_LO_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_LO_GEN2r_t RX_X1_STS_CL91_FEC_RAM2_LO_GEN2r_t;
#define RX_X1_STS_CL91_FEC_RAM2_LO_GEN2r_CLR BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_LO_GEN2r_CLR
#define RX_X1_STS_CL91_FEC_RAM2_LO_GEN2r_SET BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_LO_GEN2r_SET
#define RX_X1_STS_CL91_FEC_RAM2_LO_GEN2r_GET BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_LO_GEN2r_GET
#define RX_X1_STS_CL91_FEC_RAM2_LO_GEN2r_TWO_BIT_ERR_EVENT_CL91_FEC_RAM2_LOf_GET BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_LO_GEN2r_TWO_BIT_ERR_EVENT_CL91_FEC_RAM2_LOf_GET
#define RX_X1_STS_CL91_FEC_RAM2_LO_GEN2r_TWO_BIT_ERR_EVENT_CL91_FEC_RAM2_LOf_SET BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_LO_GEN2r_TWO_BIT_ERR_EVENT_CL91_FEC_RAM2_LOf_SET
#define RX_X1_STS_CL91_FEC_RAM2_LO_GEN2r_ONE_BIT_ERR_EVENT_CL91_FEC_RAM2_LOf_GET BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_LO_GEN2r_ONE_BIT_ERR_EVENT_CL91_FEC_RAM2_LOf_GET
#define RX_X1_STS_CL91_FEC_RAM2_LO_GEN2r_ONE_BIT_ERR_EVENT_CL91_FEC_RAM2_LOf_SET BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_LO_GEN2r_ONE_BIT_ERR_EVENT_CL91_FEC_RAM2_LOf_SET
#define RX_X1_STS_CL91_FEC_RAM2_LO_GEN2r_ERR_EVENT_ADDRESS_CL91_FEC_RAM2_LOf_GET BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_LO_GEN2r_ERR_EVENT_ADDRESS_CL91_FEC_RAM2_LOf_GET
#define RX_X1_STS_CL91_FEC_RAM2_LO_GEN2r_ERR_EVENT_ADDRESS_CL91_FEC_RAM2_LOf_SET BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_LO_GEN2r_ERR_EVENT_ADDRESS_CL91_FEC_RAM2_LOf_SET
#define READ_RX_X1_STS_CL91_FEC_RAM2_LO_GEN2r BCMI_TSCF_XGXS_READ_RX_X1_STS_CL91_FEC_RAM2_LO_GEN2r
#define WRITE_RX_X1_STS_CL91_FEC_RAM2_LO_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X1_STS_CL91_FEC_RAM2_LO_GEN2r
#define MODIFY_RX_X1_STS_CL91_FEC_RAM2_LO_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X1_STS_CL91_FEC_RAM2_LO_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_LO_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X1_STS_CL91_FEC_RAM2_HI_GEN2
 * BLOCKS:   RX_X1_STATUS0
 * REGADDR:  0x92b3
 * DESC:     ECC status register for CL91 FEC RAM2 containing upper 90 bits
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     ERR_EVENT_ADDRESS_CL91_FEC_RAM2_HI ECC error location, valid only if 1-bit or 2-bit error bit is set
 *     ONE_BIT_ERR_EVENT_CL91_FEC_RAM2_HI 1-bit ECC error detected
 *     TWO_BIT_ERR_EVENT_CL91_FEC_RAM2_HI 2-bit ECC error detected
 */
#define BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_HI_GEN2r (0x001092b3 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_HI_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X1_STS_CL91_FEC_RAM2_HI_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_HI_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x1_sts_cl91_fec_ram2_hi_gen2[1];
	uint32_t _rx_x1_sts_cl91_fec_ram2_hi_gen2;
} BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_HI_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_HI_GEN2r_CLR(r) (r).rx_x1_sts_cl91_fec_ram2_hi_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_HI_GEN2r_SET(r,d) (r).rx_x1_sts_cl91_fec_ram2_hi_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_HI_GEN2r_GET(r) (r).rx_x1_sts_cl91_fec_ram2_hi_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_HI_GEN2r_TWO_BIT_ERR_EVENT_CL91_FEC_RAM2_HIf_GET(r) ((((r).rx_x1_sts_cl91_fec_ram2_hi_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_HI_GEN2r_TWO_BIT_ERR_EVENT_CL91_FEC_RAM2_HIf_SET(r,f) (r).rx_x1_sts_cl91_fec_ram2_hi_gen2[0]=(((r).rx_x1_sts_cl91_fec_ram2_hi_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_HI_GEN2r_ONE_BIT_ERR_EVENT_CL91_FEC_RAM2_HIf_GET(r) ((((r).rx_x1_sts_cl91_fec_ram2_hi_gen2[0]) >> 14) & 0x1)
#define BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_HI_GEN2r_ONE_BIT_ERR_EVENT_CL91_FEC_RAM2_HIf_SET(r,f) (r).rx_x1_sts_cl91_fec_ram2_hi_gen2[0]=(((r).rx_x1_sts_cl91_fec_ram2_hi_gen2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_HI_GEN2r_ERR_EVENT_ADDRESS_CL91_FEC_RAM2_HIf_GET(r) (((r).rx_x1_sts_cl91_fec_ram2_hi_gen2[0]) & 0x3fff)
#define BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_HI_GEN2r_ERR_EVENT_ADDRESS_CL91_FEC_RAM2_HIf_SET(r,f) (r).rx_x1_sts_cl91_fec_ram2_hi_gen2[0]=(((r).rx_x1_sts_cl91_fec_ram2_hi_gen2[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff)) | (0x3fff << 16)

/*
 * These macros can be used to access RX_X1_STS_CL91_FEC_RAM2_HI_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X1_STS_CL91_FEC_RAM2_HI_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_HI_GEN2r,(_r._rx_x1_sts_cl91_fec_ram2_hi_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X1_STS_CL91_FEC_RAM2_HI_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_HI_GEN2r,(_r._rx_x1_sts_cl91_fec_ram2_hi_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X1_STS_CL91_FEC_RAM2_HI_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_HI_GEN2r,(_r._rx_x1_sts_cl91_fec_ram2_hi_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X1_STS_CL91_FEC_RAM2_HI_GEN2r BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_HI_GEN2r
#define RX_X1_STS_CL91_FEC_RAM2_HI_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_HI_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_HI_GEN2r_t RX_X1_STS_CL91_FEC_RAM2_HI_GEN2r_t;
#define RX_X1_STS_CL91_FEC_RAM2_HI_GEN2r_CLR BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_HI_GEN2r_CLR
#define RX_X1_STS_CL91_FEC_RAM2_HI_GEN2r_SET BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_HI_GEN2r_SET
#define RX_X1_STS_CL91_FEC_RAM2_HI_GEN2r_GET BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_HI_GEN2r_GET
#define RX_X1_STS_CL91_FEC_RAM2_HI_GEN2r_TWO_BIT_ERR_EVENT_CL91_FEC_RAM2_HIf_GET BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_HI_GEN2r_TWO_BIT_ERR_EVENT_CL91_FEC_RAM2_HIf_GET
#define RX_X1_STS_CL91_FEC_RAM2_HI_GEN2r_TWO_BIT_ERR_EVENT_CL91_FEC_RAM2_HIf_SET BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_HI_GEN2r_TWO_BIT_ERR_EVENT_CL91_FEC_RAM2_HIf_SET
#define RX_X1_STS_CL91_FEC_RAM2_HI_GEN2r_ONE_BIT_ERR_EVENT_CL91_FEC_RAM2_HIf_GET BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_HI_GEN2r_ONE_BIT_ERR_EVENT_CL91_FEC_RAM2_HIf_GET
#define RX_X1_STS_CL91_FEC_RAM2_HI_GEN2r_ONE_BIT_ERR_EVENT_CL91_FEC_RAM2_HIf_SET BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_HI_GEN2r_ONE_BIT_ERR_EVENT_CL91_FEC_RAM2_HIf_SET
#define RX_X1_STS_CL91_FEC_RAM2_HI_GEN2r_ERR_EVENT_ADDRESS_CL91_FEC_RAM2_HIf_GET BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_HI_GEN2r_ERR_EVENT_ADDRESS_CL91_FEC_RAM2_HIf_GET
#define RX_X1_STS_CL91_FEC_RAM2_HI_GEN2r_ERR_EVENT_ADDRESS_CL91_FEC_RAM2_HIf_SET BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_HI_GEN2r_ERR_EVENT_ADDRESS_CL91_FEC_RAM2_HIf_SET
#define READ_RX_X1_STS_CL91_FEC_RAM2_HI_GEN2r BCMI_TSCF_XGXS_READ_RX_X1_STS_CL91_FEC_RAM2_HI_GEN2r
#define WRITE_RX_X1_STS_CL91_FEC_RAM2_HI_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X1_STS_CL91_FEC_RAM2_HI_GEN2r
#define MODIFY_RX_X1_STS_CL91_FEC_RAM2_HI_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X1_STS_CL91_FEC_RAM2_HI_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X1_STS_CL91_FEC_RAM2_HI_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X1_GLB_INT_GEN2
 * BLOCKS:   AN_X1_SW_MGMT
 * REGADDR:  0x92c0
 * DESC:     SW AN Global Interrupt
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     INT_PORT0        Interrupt indication from port 0 - OR of the all 3 events from port 0 S/W AN
 *     INT_PORT1        Interrupt indication from port 1 - OR of the all 3 events from port 1 S/W AN
 *     INT_PORT2        Interrupt indication from port 2 - OR of the all 3 events from port 2 S/W AN
 *     INT_PORT3        Interrupt indication from port 3 - OR of the all 3 events from port 3 S/W AN
 */
#define BCMI_TSCF_XGXS_AN_X1_GLB_INT_GEN2r (0x001092c0 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X1_GLB_INT_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X1_GLB_INT_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X1_GLB_INT_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x1_glb_int_gen2[1];
	uint32_t _an_x1_glb_int_gen2;
} BCMI_TSCF_XGXS_AN_X1_GLB_INT_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X1_GLB_INT_GEN2r_CLR(r) (r).an_x1_glb_int_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X1_GLB_INT_GEN2r_SET(r,d) (r).an_x1_glb_int_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X1_GLB_INT_GEN2r_GET(r) (r).an_x1_glb_int_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X1_GLB_INT_GEN2r_INT_PORT3f_GET(r) ((((r).an_x1_glb_int_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_AN_X1_GLB_INT_GEN2r_INT_PORT3f_SET(r,f) (r).an_x1_glb_int_gen2[0]=(((r).an_x1_glb_int_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_AN_X1_GLB_INT_GEN2r_INT_PORT2f_GET(r) ((((r).an_x1_glb_int_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_AN_X1_GLB_INT_GEN2r_INT_PORT2f_SET(r,f) (r).an_x1_glb_int_gen2[0]=(((r).an_x1_glb_int_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_AN_X1_GLB_INT_GEN2r_INT_PORT1f_GET(r) ((((r).an_x1_glb_int_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_AN_X1_GLB_INT_GEN2r_INT_PORT1f_SET(r,f) (r).an_x1_glb_int_gen2[0]=(((r).an_x1_glb_int_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_AN_X1_GLB_INT_GEN2r_INT_PORT0f_GET(r) (((r).an_x1_glb_int_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_AN_X1_GLB_INT_GEN2r_INT_PORT0f_SET(r,f) (r).an_x1_glb_int_gen2[0]=(((r).an_x1_glb_int_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AN_X1_GLB_INT_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X1_GLB_INT_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X1_GLB_INT_GEN2r,(_r._an_x1_glb_int_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X1_GLB_INT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X1_GLB_INT_GEN2r,(_r._an_x1_glb_int_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X1_GLB_INT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X1_GLB_INT_GEN2r,(_r._an_x1_glb_int_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X1_GLB_INT_GEN2r BCMI_TSCF_XGXS_AN_X1_GLB_INT_GEN2r
#define AN_X1_GLB_INT_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X1_GLB_INT_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X1_GLB_INT_GEN2r_t AN_X1_GLB_INT_GEN2r_t;
#define AN_X1_GLB_INT_GEN2r_CLR BCMI_TSCF_XGXS_AN_X1_GLB_INT_GEN2r_CLR
#define AN_X1_GLB_INT_GEN2r_SET BCMI_TSCF_XGXS_AN_X1_GLB_INT_GEN2r_SET
#define AN_X1_GLB_INT_GEN2r_GET BCMI_TSCF_XGXS_AN_X1_GLB_INT_GEN2r_GET
#define AN_X1_GLB_INT_GEN2r_INT_PORT3f_GET BCMI_TSCF_XGXS_AN_X1_GLB_INT_GEN2r_INT_PORT3f_GET
#define AN_X1_GLB_INT_GEN2r_INT_PORT3f_SET BCMI_TSCF_XGXS_AN_X1_GLB_INT_GEN2r_INT_PORT3f_SET
#define AN_X1_GLB_INT_GEN2r_INT_PORT2f_GET BCMI_TSCF_XGXS_AN_X1_GLB_INT_GEN2r_INT_PORT2f_GET
#define AN_X1_GLB_INT_GEN2r_INT_PORT2f_SET BCMI_TSCF_XGXS_AN_X1_GLB_INT_GEN2r_INT_PORT2f_SET
#define AN_X1_GLB_INT_GEN2r_INT_PORT1f_GET BCMI_TSCF_XGXS_AN_X1_GLB_INT_GEN2r_INT_PORT1f_GET
#define AN_X1_GLB_INT_GEN2r_INT_PORT1f_SET BCMI_TSCF_XGXS_AN_X1_GLB_INT_GEN2r_INT_PORT1f_SET
#define AN_X1_GLB_INT_GEN2r_INT_PORT0f_GET BCMI_TSCF_XGXS_AN_X1_GLB_INT_GEN2r_INT_PORT0f_GET
#define AN_X1_GLB_INT_GEN2r_INT_PORT0f_SET BCMI_TSCF_XGXS_AN_X1_GLB_INT_GEN2r_INT_PORT0f_SET
#define READ_AN_X1_GLB_INT_GEN2r BCMI_TSCF_XGXS_READ_AN_X1_GLB_INT_GEN2r
#define WRITE_AN_X1_GLB_INT_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X1_GLB_INT_GEN2r
#define MODIFY_AN_X1_GLB_INT_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X1_GLB_INT_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X1_GLB_INT_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X1_GLB_MASK_GEN2
 * BLOCKS:   AN_X1_SW_MGMT
 * REGADDR:  0x92c1
 * DESC:     SW AN Per Port Global Interrupt Enable Mask
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     INT_PORT0_MASK   Write 1 to enable interrupt indication from port 0
 *     INT_PORT1_MASK   Write 1 to enable interrupt indication from port 1
 *     INT_PORT2_MASK   Write 1 to enable interrupt indication from port 2
 *     INT_PORT3_MASK   Write 1 to enable interrupt indication from port 3
 */
#define BCMI_TSCF_XGXS_AN_X1_GLB_MASK_GEN2r (0x001092c1 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X1_GLB_MASK_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X1_GLB_MASK_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X1_GLB_MASK_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x1_glb_mask_gen2[1];
	uint32_t _an_x1_glb_mask_gen2;
} BCMI_TSCF_XGXS_AN_X1_GLB_MASK_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X1_GLB_MASK_GEN2r_CLR(r) (r).an_x1_glb_mask_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X1_GLB_MASK_GEN2r_SET(r,d) (r).an_x1_glb_mask_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X1_GLB_MASK_GEN2r_GET(r) (r).an_x1_glb_mask_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X1_GLB_MASK_GEN2r_INT_PORT3_MASKf_GET(r) ((((r).an_x1_glb_mask_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_AN_X1_GLB_MASK_GEN2r_INT_PORT3_MASKf_SET(r,f) (r).an_x1_glb_mask_gen2[0]=(((r).an_x1_glb_mask_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_AN_X1_GLB_MASK_GEN2r_INT_PORT2_MASKf_GET(r) ((((r).an_x1_glb_mask_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_AN_X1_GLB_MASK_GEN2r_INT_PORT2_MASKf_SET(r,f) (r).an_x1_glb_mask_gen2[0]=(((r).an_x1_glb_mask_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_AN_X1_GLB_MASK_GEN2r_INT_PORT1_MASKf_GET(r) ((((r).an_x1_glb_mask_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_AN_X1_GLB_MASK_GEN2r_INT_PORT1_MASKf_SET(r,f) (r).an_x1_glb_mask_gen2[0]=(((r).an_x1_glb_mask_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_AN_X1_GLB_MASK_GEN2r_INT_PORT0_MASKf_GET(r) (((r).an_x1_glb_mask_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_AN_X1_GLB_MASK_GEN2r_INT_PORT0_MASKf_SET(r,f) (r).an_x1_glb_mask_gen2[0]=(((r).an_x1_glb_mask_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AN_X1_GLB_MASK_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X1_GLB_MASK_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X1_GLB_MASK_GEN2r,(_r._an_x1_glb_mask_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X1_GLB_MASK_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X1_GLB_MASK_GEN2r,(_r._an_x1_glb_mask_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X1_GLB_MASK_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X1_GLB_MASK_GEN2r,(_r._an_x1_glb_mask_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X1_GLB_MASK_GEN2r BCMI_TSCF_XGXS_AN_X1_GLB_MASK_GEN2r
#define AN_X1_GLB_MASK_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X1_GLB_MASK_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X1_GLB_MASK_GEN2r_t AN_X1_GLB_MASK_GEN2r_t;
#define AN_X1_GLB_MASK_GEN2r_CLR BCMI_TSCF_XGXS_AN_X1_GLB_MASK_GEN2r_CLR
#define AN_X1_GLB_MASK_GEN2r_SET BCMI_TSCF_XGXS_AN_X1_GLB_MASK_GEN2r_SET
#define AN_X1_GLB_MASK_GEN2r_GET BCMI_TSCF_XGXS_AN_X1_GLB_MASK_GEN2r_GET
#define AN_X1_GLB_MASK_GEN2r_INT_PORT3_MASKf_GET BCMI_TSCF_XGXS_AN_X1_GLB_MASK_GEN2r_INT_PORT3_MASKf_GET
#define AN_X1_GLB_MASK_GEN2r_INT_PORT3_MASKf_SET BCMI_TSCF_XGXS_AN_X1_GLB_MASK_GEN2r_INT_PORT3_MASKf_SET
#define AN_X1_GLB_MASK_GEN2r_INT_PORT2_MASKf_GET BCMI_TSCF_XGXS_AN_X1_GLB_MASK_GEN2r_INT_PORT2_MASKf_GET
#define AN_X1_GLB_MASK_GEN2r_INT_PORT2_MASKf_SET BCMI_TSCF_XGXS_AN_X1_GLB_MASK_GEN2r_INT_PORT2_MASKf_SET
#define AN_X1_GLB_MASK_GEN2r_INT_PORT1_MASKf_GET BCMI_TSCF_XGXS_AN_X1_GLB_MASK_GEN2r_INT_PORT1_MASKf_GET
#define AN_X1_GLB_MASK_GEN2r_INT_PORT1_MASKf_SET BCMI_TSCF_XGXS_AN_X1_GLB_MASK_GEN2r_INT_PORT1_MASKf_SET
#define AN_X1_GLB_MASK_GEN2r_INT_PORT0_MASKf_GET BCMI_TSCF_XGXS_AN_X1_GLB_MASK_GEN2r_INT_PORT0_MASKf_GET
#define AN_X1_GLB_MASK_GEN2r_INT_PORT0_MASKf_SET BCMI_TSCF_XGXS_AN_X1_GLB_MASK_GEN2r_INT_PORT0_MASKf_SET
#define READ_AN_X1_GLB_MASK_GEN2r BCMI_TSCF_XGXS_READ_AN_X1_GLB_MASK_GEN2r
#define WRITE_AN_X1_GLB_MASK_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X1_GLB_MASK_GEN2r
#define MODIFY_AN_X1_GLB_MASK_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X1_GLB_MASK_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X1_GLB_MASK_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TX_X2_CL82_0_GEN2
 * BLOCKS:   TX_X2_CONTROL0
 * REGADDR:  0xa002
 * DESC:     CL82 register
 * RESETVAL: 0x70 (112)
 * ACCESS:   R/W
 * FIELDS:
 *     CL82_TX_RF_ENABLE If this bit is a one, RFs are passed from the RS LAYER to the PCS.If this bit is a zero, RFs are replaced by IDLEs which are then passedto the PCS.For CL82 only.
 *     CL82_TX_LF_ENABLE If this bit is a one, LFs are passed from the RS LAYER to the PCS.If this bit is a zero, LFs are replaced by IDLEs which are then passedto the PCS.For CL82 only.
 *     CL82_TX_LI_ENABLE If this bit is a one, LIs (Link Interrupt) are passed thru to the RS LAYER.If this bit is a zero, LIs (Link Interrupt) are replaced by IDLEs which are then passedto the RS LAYER.For CL82 only.
 *     CL82_BYPASS_TXSM Bypass cl82 transmit state machine1 = Bypass cl82 txsm :- force TX_INIT state- pass the data from the table look-up decoder to the output0 = normal mode
 */
#define BCMI_TSCF_XGXS_TX_X2_CL82_0_GEN2r (0x0020a002 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TX_X2_CL82_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TX_X2_CL82_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TX_X2_CL82_0_GEN2r_s {
	uint32_t v[1];
	uint32_t tx_x2_cl82_0_gen2[1];
	uint32_t _tx_x2_cl82_0_gen2;
} BCMI_TSCF_XGXS_TX_X2_CL82_0_GEN2r_t;

#define BCMI_TSCF_XGXS_TX_X2_CL82_0_GEN2r_CLR(r) (r).tx_x2_cl82_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_TX_X2_CL82_0_GEN2r_SET(r,d) (r).tx_x2_cl82_0_gen2[0] = d
#define BCMI_TSCF_XGXS_TX_X2_CL82_0_GEN2r_GET(r) (r).tx_x2_cl82_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TX_X2_CL82_0_GEN2r_CL82_BYPASS_TXSMf_GET(r) ((((r).tx_x2_cl82_0_gen2[0]) >> 10) & 0x1)
#define BCMI_TSCF_XGXS_TX_X2_CL82_0_GEN2r_CL82_BYPASS_TXSMf_SET(r,f) (r).tx_x2_cl82_0_gen2[0]=(((r).tx_x2_cl82_0_gen2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_XGXS_TX_X2_CL82_0_GEN2r_CL82_TX_LI_ENABLEf_GET(r) ((((r).tx_x2_cl82_0_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_TX_X2_CL82_0_GEN2r_CL82_TX_LI_ENABLEf_SET(r,f) (r).tx_x2_cl82_0_gen2[0]=(((r).tx_x2_cl82_0_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_TX_X2_CL82_0_GEN2r_CL82_TX_LF_ENABLEf_GET(r) ((((r).tx_x2_cl82_0_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_TX_X2_CL82_0_GEN2r_CL82_TX_LF_ENABLEf_SET(r,f) (r).tx_x2_cl82_0_gen2[0]=(((r).tx_x2_cl82_0_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_TX_X2_CL82_0_GEN2r_CL82_TX_RF_ENABLEf_GET(r) ((((r).tx_x2_cl82_0_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_TX_X2_CL82_0_GEN2r_CL82_TX_RF_ENABLEf_SET(r,f) (r).tx_x2_cl82_0_gen2[0]=(((r).tx_x2_cl82_0_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))

/*
 * These macros can be used to access TX_X2_CL82_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TX_X2_CL82_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_X2_CL82_0_GEN2r,(_r._tx_x2_cl82_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_TX_X2_CL82_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X2_CL82_0_GEN2r,(_r._tx_x2_cl82_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TX_X2_CL82_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X2_CL82_0_GEN2r,(_r._tx_x2_cl82_0_gen2))
#define BCMI_TSCF_XGXS_READLN_TX_X2_CL82_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_X2_CL82_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x2_cl82_0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TX_X2_CL82_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X2_CL82_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x2_cl82_0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TX_X2_CL82_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X2_CL82_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_x2_cl82_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TX_X2_CL82_0_GEN2r BCMI_TSCF_XGXS_TX_X2_CL82_0_GEN2r
#define TX_X2_CL82_0_GEN2r_SIZE BCMI_TSCF_XGXS_TX_X2_CL82_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TX_X2_CL82_0_GEN2r_t TX_X2_CL82_0_GEN2r_t;
#define TX_X2_CL82_0_GEN2r_CLR BCMI_TSCF_XGXS_TX_X2_CL82_0_GEN2r_CLR
#define TX_X2_CL82_0_GEN2r_SET BCMI_TSCF_XGXS_TX_X2_CL82_0_GEN2r_SET
#define TX_X2_CL82_0_GEN2r_GET BCMI_TSCF_XGXS_TX_X2_CL82_0_GEN2r_GET
#define TX_X2_CL82_0_GEN2r_CL82_BYPASS_TXSMf_GET BCMI_TSCF_XGXS_TX_X2_CL82_0_GEN2r_CL82_BYPASS_TXSMf_GET
#define TX_X2_CL82_0_GEN2r_CL82_BYPASS_TXSMf_SET BCMI_TSCF_XGXS_TX_X2_CL82_0_GEN2r_CL82_BYPASS_TXSMf_SET
#define TX_X2_CL82_0_GEN2r_CL82_TX_LI_ENABLEf_GET BCMI_TSCF_XGXS_TX_X2_CL82_0_GEN2r_CL82_TX_LI_ENABLEf_GET
#define TX_X2_CL82_0_GEN2r_CL82_TX_LI_ENABLEf_SET BCMI_TSCF_XGXS_TX_X2_CL82_0_GEN2r_CL82_TX_LI_ENABLEf_SET
#define TX_X2_CL82_0_GEN2r_CL82_TX_LF_ENABLEf_GET BCMI_TSCF_XGXS_TX_X2_CL82_0_GEN2r_CL82_TX_LF_ENABLEf_GET
#define TX_X2_CL82_0_GEN2r_CL82_TX_LF_ENABLEf_SET BCMI_TSCF_XGXS_TX_X2_CL82_0_GEN2r_CL82_TX_LF_ENABLEf_SET
#define TX_X2_CL82_0_GEN2r_CL82_TX_RF_ENABLEf_GET BCMI_TSCF_XGXS_TX_X2_CL82_0_GEN2r_CL82_TX_RF_ENABLEf_GET
#define TX_X2_CL82_0_GEN2r_CL82_TX_RF_ENABLEf_SET BCMI_TSCF_XGXS_TX_X2_CL82_0_GEN2r_CL82_TX_RF_ENABLEf_SET
#define READ_TX_X2_CL82_0_GEN2r BCMI_TSCF_XGXS_READ_TX_X2_CL82_0_GEN2r
#define WRITE_TX_X2_CL82_0_GEN2r BCMI_TSCF_XGXS_WRITE_TX_X2_CL82_0_GEN2r
#define MODIFY_TX_X2_CL82_0_GEN2r BCMI_TSCF_XGXS_MODIFY_TX_X2_CL82_0_GEN2r
#define READLN_TX_X2_CL82_0_GEN2r BCMI_TSCF_XGXS_READLN_TX_X2_CL82_0_GEN2r
#define WRITELN_TX_X2_CL82_0_GEN2r BCMI_TSCF_XGXS_WRITELN_TX_X2_CL82_0_GEN2r
#define WRITEALL_TX_X2_CL82_0_GEN2r BCMI_TSCF_XGXS_WRITEALL_TX_X2_CL82_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TX_X2_CL82_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TX_X2_CL82_TX_STS_0_GEN2
 * BLOCKS:   TX_X2_STATUS0
 * REGADDR:  0xa011
 * DESC:     CL82 Status 0 register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TXSM_STATE       CL82 Transmit SM - current state
 *     T_TYPE_CODED     CL82 Transmit SM - current t_type
 */
#define BCMI_TSCF_XGXS_TX_X2_CL82_TX_STS_0_GEN2r (0x0020a011 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TX_X2_CL82_TX_STS_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TX_X2_CL82_TX_STS_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TX_X2_CL82_TX_STS_0_GEN2r_s {
	uint32_t v[1];
	uint32_t tx_x2_cl82_tx_sts_0_gen2[1];
	uint32_t _tx_x2_cl82_tx_sts_0_gen2;
} BCMI_TSCF_XGXS_TX_X2_CL82_TX_STS_0_GEN2r_t;

#define BCMI_TSCF_XGXS_TX_X2_CL82_TX_STS_0_GEN2r_CLR(r) (r).tx_x2_cl82_tx_sts_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_TX_X2_CL82_TX_STS_0_GEN2r_SET(r,d) (r).tx_x2_cl82_tx_sts_0_gen2[0] = d
#define BCMI_TSCF_XGXS_TX_X2_CL82_TX_STS_0_GEN2r_GET(r) (r).tx_x2_cl82_tx_sts_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TX_X2_CL82_TX_STS_0_GEN2r_T_TYPE_CODEDf_GET(r) ((((r).tx_x2_cl82_tx_sts_0_gen2[0]) >> 3) & 0x7)
#define BCMI_TSCF_XGXS_TX_X2_CL82_TX_STS_0_GEN2r_T_TYPE_CODEDf_SET(r,f) (r).tx_x2_cl82_tx_sts_0_gen2[0]=(((r).tx_x2_cl82_tx_sts_0_gen2[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3)) | (7 << (16 + 3))
#define BCMI_TSCF_XGXS_TX_X2_CL82_TX_STS_0_GEN2r_TXSM_STATEf_GET(r) (((r).tx_x2_cl82_tx_sts_0_gen2[0]) & 0x7)
#define BCMI_TSCF_XGXS_TX_X2_CL82_TX_STS_0_GEN2r_TXSM_STATEf_SET(r,f) (r).tx_x2_cl82_tx_sts_0_gen2[0]=(((r).tx_x2_cl82_tx_sts_0_gen2[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access TX_X2_CL82_TX_STS_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TX_X2_CL82_TX_STS_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_X2_CL82_TX_STS_0_GEN2r,(_r._tx_x2_cl82_tx_sts_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_TX_X2_CL82_TX_STS_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X2_CL82_TX_STS_0_GEN2r,(_r._tx_x2_cl82_tx_sts_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TX_X2_CL82_TX_STS_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X2_CL82_TX_STS_0_GEN2r,(_r._tx_x2_cl82_tx_sts_0_gen2))
#define BCMI_TSCF_XGXS_READLN_TX_X2_CL82_TX_STS_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_X2_CL82_TX_STS_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x2_cl82_tx_sts_0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TX_X2_CL82_TX_STS_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X2_CL82_TX_STS_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x2_cl82_tx_sts_0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TX_X2_CL82_TX_STS_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X2_CL82_TX_STS_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_x2_cl82_tx_sts_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TX_X2_CL82_TX_STS_0_GEN2r BCMI_TSCF_XGXS_TX_X2_CL82_TX_STS_0_GEN2r
#define TX_X2_CL82_TX_STS_0_GEN2r_SIZE BCMI_TSCF_XGXS_TX_X2_CL82_TX_STS_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TX_X2_CL82_TX_STS_0_GEN2r_t TX_X2_CL82_TX_STS_0_GEN2r_t;
#define TX_X2_CL82_TX_STS_0_GEN2r_CLR BCMI_TSCF_XGXS_TX_X2_CL82_TX_STS_0_GEN2r_CLR
#define TX_X2_CL82_TX_STS_0_GEN2r_SET BCMI_TSCF_XGXS_TX_X2_CL82_TX_STS_0_GEN2r_SET
#define TX_X2_CL82_TX_STS_0_GEN2r_GET BCMI_TSCF_XGXS_TX_X2_CL82_TX_STS_0_GEN2r_GET
#define TX_X2_CL82_TX_STS_0_GEN2r_T_TYPE_CODEDf_GET BCMI_TSCF_XGXS_TX_X2_CL82_TX_STS_0_GEN2r_T_TYPE_CODEDf_GET
#define TX_X2_CL82_TX_STS_0_GEN2r_T_TYPE_CODEDf_SET BCMI_TSCF_XGXS_TX_X2_CL82_TX_STS_0_GEN2r_T_TYPE_CODEDf_SET
#define TX_X2_CL82_TX_STS_0_GEN2r_TXSM_STATEf_GET BCMI_TSCF_XGXS_TX_X2_CL82_TX_STS_0_GEN2r_TXSM_STATEf_GET
#define TX_X2_CL82_TX_STS_0_GEN2r_TXSM_STATEf_SET BCMI_TSCF_XGXS_TX_X2_CL82_TX_STS_0_GEN2r_TXSM_STATEf_SET
#define READ_TX_X2_CL82_TX_STS_0_GEN2r BCMI_TSCF_XGXS_READ_TX_X2_CL82_TX_STS_0_GEN2r
#define WRITE_TX_X2_CL82_TX_STS_0_GEN2r BCMI_TSCF_XGXS_WRITE_TX_X2_CL82_TX_STS_0_GEN2r
#define MODIFY_TX_X2_CL82_TX_STS_0_GEN2r BCMI_TSCF_XGXS_MODIFY_TX_X2_CL82_TX_STS_0_GEN2r
#define READLN_TX_X2_CL82_TX_STS_0_GEN2r BCMI_TSCF_XGXS_READLN_TX_X2_CL82_TX_STS_0_GEN2r
#define WRITELN_TX_X2_CL82_TX_STS_0_GEN2r BCMI_TSCF_XGXS_WRITELN_TX_X2_CL82_TX_STS_0_GEN2r
#define WRITEALL_TX_X2_CL82_TX_STS_0_GEN2r BCMI_TSCF_XGXS_WRITEALL_TX_X2_CL82_TX_STS_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TX_X2_CL82_TX_STS_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TX_X2_CL82_TX_STS_1_GEN2
 * BLOCKS:   TX_X2_STATUS0
 * REGADDR:  0xa012
 * DESC:     CL82 Status 1 register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LTXSM_STATE      CL82 Transmit SM - latched states - latched on entry
 */
#define BCMI_TSCF_XGXS_TX_X2_CL82_TX_STS_1_GEN2r (0x0020a012 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TX_X2_CL82_TX_STS_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TX_X2_CL82_TX_STS_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TX_X2_CL82_TX_STS_1_GEN2r_s {
	uint32_t v[1];
	uint32_t tx_x2_cl82_tx_sts_1_gen2[1];
	uint32_t _tx_x2_cl82_tx_sts_1_gen2;
} BCMI_TSCF_XGXS_TX_X2_CL82_TX_STS_1_GEN2r_t;

#define BCMI_TSCF_XGXS_TX_X2_CL82_TX_STS_1_GEN2r_CLR(r) (r).tx_x2_cl82_tx_sts_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_TX_X2_CL82_TX_STS_1_GEN2r_SET(r,d) (r).tx_x2_cl82_tx_sts_1_gen2[0] = d
#define BCMI_TSCF_XGXS_TX_X2_CL82_TX_STS_1_GEN2r_GET(r) (r).tx_x2_cl82_tx_sts_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TX_X2_CL82_TX_STS_1_GEN2r_LTXSM_STATEf_GET(r) (((r).tx_x2_cl82_tx_sts_1_gen2[0]) & 0x7f)
#define BCMI_TSCF_XGXS_TX_X2_CL82_TX_STS_1_GEN2r_LTXSM_STATEf_SET(r,f) (r).tx_x2_cl82_tx_sts_1_gen2[0]=(((r).tx_x2_cl82_tx_sts_1_gen2[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f)) | (0x7f << 16)

/*
 * These macros can be used to access TX_X2_CL82_TX_STS_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TX_X2_CL82_TX_STS_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_X2_CL82_TX_STS_1_GEN2r,(_r._tx_x2_cl82_tx_sts_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_TX_X2_CL82_TX_STS_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X2_CL82_TX_STS_1_GEN2r,(_r._tx_x2_cl82_tx_sts_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TX_X2_CL82_TX_STS_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X2_CL82_TX_STS_1_GEN2r,(_r._tx_x2_cl82_tx_sts_1_gen2))
#define BCMI_TSCF_XGXS_READLN_TX_X2_CL82_TX_STS_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_X2_CL82_TX_STS_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x2_cl82_tx_sts_1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TX_X2_CL82_TX_STS_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X2_CL82_TX_STS_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x2_cl82_tx_sts_1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TX_X2_CL82_TX_STS_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X2_CL82_TX_STS_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_x2_cl82_tx_sts_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TX_X2_CL82_TX_STS_1_GEN2r BCMI_TSCF_XGXS_TX_X2_CL82_TX_STS_1_GEN2r
#define TX_X2_CL82_TX_STS_1_GEN2r_SIZE BCMI_TSCF_XGXS_TX_X2_CL82_TX_STS_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TX_X2_CL82_TX_STS_1_GEN2r_t TX_X2_CL82_TX_STS_1_GEN2r_t;
#define TX_X2_CL82_TX_STS_1_GEN2r_CLR BCMI_TSCF_XGXS_TX_X2_CL82_TX_STS_1_GEN2r_CLR
#define TX_X2_CL82_TX_STS_1_GEN2r_SET BCMI_TSCF_XGXS_TX_X2_CL82_TX_STS_1_GEN2r_SET
#define TX_X2_CL82_TX_STS_1_GEN2r_GET BCMI_TSCF_XGXS_TX_X2_CL82_TX_STS_1_GEN2r_GET
#define TX_X2_CL82_TX_STS_1_GEN2r_LTXSM_STATEf_GET BCMI_TSCF_XGXS_TX_X2_CL82_TX_STS_1_GEN2r_LTXSM_STATEf_GET
#define TX_X2_CL82_TX_STS_1_GEN2r_LTXSM_STATEf_SET BCMI_TSCF_XGXS_TX_X2_CL82_TX_STS_1_GEN2r_LTXSM_STATEf_SET
#define READ_TX_X2_CL82_TX_STS_1_GEN2r BCMI_TSCF_XGXS_READ_TX_X2_CL82_TX_STS_1_GEN2r
#define WRITE_TX_X2_CL82_TX_STS_1_GEN2r BCMI_TSCF_XGXS_WRITE_TX_X2_CL82_TX_STS_1_GEN2r
#define MODIFY_TX_X2_CL82_TX_STS_1_GEN2r BCMI_TSCF_XGXS_MODIFY_TX_X2_CL82_TX_STS_1_GEN2r
#define READLN_TX_X2_CL82_TX_STS_1_GEN2r BCMI_TSCF_XGXS_READLN_TX_X2_CL82_TX_STS_1_GEN2r
#define WRITELN_TX_X2_CL82_TX_STS_1_GEN2r BCMI_TSCF_XGXS_WRITELN_TX_X2_CL82_TX_STS_1_GEN2r
#define WRITEALL_TX_X2_CL82_TX_STS_1_GEN2r BCMI_TSCF_XGXS_WRITEALL_TX_X2_CL82_TX_STS_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TX_X2_CL82_TX_STS_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X2_MISC_0_GEN2
 * BLOCKS:   RX_X2_CONTROL0
 * REGADDR:  0xa023
 * DESC:     misc 0 register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BYPASS_CL82RXSM  Bypass cl82 receive state machine1 = Bypass cl82 rxsm :- force RX_INIT state- pass the data from the table look-up decoder to the output0 = normal mode
 *     DIS_CL82_BERMON  Disable cl82 BER monitor state machine1 = Disable bermon fsm, force BER_MT_INIT state0 = Enable (default)
 */
#define BCMI_TSCF_XGXS_RX_X2_MISC_0_GEN2r (0x0020a023 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X2_MISC_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X2_MISC_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X2_MISC_0_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x2_misc_0_gen2[1];
	uint32_t _rx_x2_misc_0_gen2;
} BCMI_TSCF_XGXS_RX_X2_MISC_0_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X2_MISC_0_GEN2r_CLR(r) (r).rx_x2_misc_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X2_MISC_0_GEN2r_SET(r,d) (r).rx_x2_misc_0_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X2_MISC_0_GEN2r_GET(r) (r).rx_x2_misc_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X2_MISC_0_GEN2r_DIS_CL82_BERMONf_GET(r) ((((r).rx_x2_misc_0_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_RX_X2_MISC_0_GEN2r_DIS_CL82_BERMONf_SET(r,f) (r).rx_x2_misc_0_gen2[0]=(((r).rx_x2_misc_0_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_RX_X2_MISC_0_GEN2r_BYPASS_CL82RXSMf_GET(r) (((r).rx_x2_misc_0_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_RX_X2_MISC_0_GEN2r_BYPASS_CL82RXSMf_SET(r,f) (r).rx_x2_misc_0_gen2[0]=(((r).rx_x2_misc_0_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_X2_MISC_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X2_MISC_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X2_MISC_0_GEN2r,(_r._rx_x2_misc_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X2_MISC_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X2_MISC_0_GEN2r,(_r._rx_x2_misc_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X2_MISC_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X2_MISC_0_GEN2r,(_r._rx_x2_misc_0_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X2_MISC_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X2_MISC_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x2_misc_0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X2_MISC_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X2_MISC_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x2_misc_0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X2_MISC_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X2_MISC_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x2_misc_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X2_MISC_0_GEN2r BCMI_TSCF_XGXS_RX_X2_MISC_0_GEN2r
#define RX_X2_MISC_0_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X2_MISC_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X2_MISC_0_GEN2r_t RX_X2_MISC_0_GEN2r_t;
#define RX_X2_MISC_0_GEN2r_CLR BCMI_TSCF_XGXS_RX_X2_MISC_0_GEN2r_CLR
#define RX_X2_MISC_0_GEN2r_SET BCMI_TSCF_XGXS_RX_X2_MISC_0_GEN2r_SET
#define RX_X2_MISC_0_GEN2r_GET BCMI_TSCF_XGXS_RX_X2_MISC_0_GEN2r_GET
#define RX_X2_MISC_0_GEN2r_DIS_CL82_BERMONf_GET BCMI_TSCF_XGXS_RX_X2_MISC_0_GEN2r_DIS_CL82_BERMONf_GET
#define RX_X2_MISC_0_GEN2r_DIS_CL82_BERMONf_SET BCMI_TSCF_XGXS_RX_X2_MISC_0_GEN2r_DIS_CL82_BERMONf_SET
#define RX_X2_MISC_0_GEN2r_BYPASS_CL82RXSMf_GET BCMI_TSCF_XGXS_RX_X2_MISC_0_GEN2r_BYPASS_CL82RXSMf_GET
#define RX_X2_MISC_0_GEN2r_BYPASS_CL82RXSMf_SET BCMI_TSCF_XGXS_RX_X2_MISC_0_GEN2r_BYPASS_CL82RXSMf_SET
#define READ_RX_X2_MISC_0_GEN2r BCMI_TSCF_XGXS_READ_RX_X2_MISC_0_GEN2r
#define WRITE_RX_X2_MISC_0_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X2_MISC_0_GEN2r
#define MODIFY_RX_X2_MISC_0_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X2_MISC_0_GEN2r
#define READLN_RX_X2_MISC_0_GEN2r BCMI_TSCF_XGXS_READLN_RX_X2_MISC_0_GEN2r
#define WRITELN_RX_X2_MISC_0_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X2_MISC_0_GEN2r
#define WRITEALL_RX_X2_MISC_0_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X2_MISC_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X2_MISC_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X2_MISC_1_GEN2
 * BLOCKS:   RX_X2_CONTROL0
 * REGADDR:  0xa024
 * DESC:     misc 1 register
 * RESETVAL: 0x203 (515)
 * ACCESS:   R/W
 * FIELDS:
 *     CL82_RX_RF_ENABLE If this bit is a one, RFs are passed to the RS layer from the PCS.If this bit is a zero, RFs are replaced by IDLEs which are then passedto the RS layer.For CL82 only.
 *     CL82_RX_LF_ENABLE If this bit is a one, LFs are passed to the RS layer from the PCS.If this bit is a zero, LFs are replaced by IDLEs which are then passedto the RS layer.For CL82 only.
 *     CL82_RX_LI_ENABLE If this bit is a one, LI (Link Interrupt) codes are passed thru to the PCS.If this bit is a zero, LI are replaced by IDLEs which are then passedto the PCS.For CL82 only.
 */
#define BCMI_TSCF_XGXS_RX_X2_MISC_1_GEN2r (0x0020a024 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X2_MISC_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X2_MISC_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X2_MISC_1_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x2_misc_1_gen2[1];
	uint32_t _rx_x2_misc_1_gen2;
} BCMI_TSCF_XGXS_RX_X2_MISC_1_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X2_MISC_1_GEN2r_CLR(r) (r).rx_x2_misc_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X2_MISC_1_GEN2r_SET(r,d) (r).rx_x2_misc_1_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X2_MISC_1_GEN2r_GET(r) (r).rx_x2_misc_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X2_MISC_1_GEN2r_CL82_RX_LI_ENABLEf_GET(r) ((((r).rx_x2_misc_1_gen2[0]) >> 9) & 0x1)
#define BCMI_TSCF_XGXS_RX_X2_MISC_1_GEN2r_CL82_RX_LI_ENABLEf_SET(r,f) (r).rx_x2_misc_1_gen2[0]=(((r).rx_x2_misc_1_gen2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_XGXS_RX_X2_MISC_1_GEN2r_CL82_RX_LF_ENABLEf_GET(r) ((((r).rx_x2_misc_1_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_RX_X2_MISC_1_GEN2r_CL82_RX_LF_ENABLEf_SET(r,f) (r).rx_x2_misc_1_gen2[0]=(((r).rx_x2_misc_1_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_RX_X2_MISC_1_GEN2r_CL82_RX_RF_ENABLEf_GET(r) (((r).rx_x2_misc_1_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_RX_X2_MISC_1_GEN2r_CL82_RX_RF_ENABLEf_SET(r,f) (r).rx_x2_misc_1_gen2[0]=(((r).rx_x2_misc_1_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_X2_MISC_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X2_MISC_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X2_MISC_1_GEN2r,(_r._rx_x2_misc_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X2_MISC_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X2_MISC_1_GEN2r,(_r._rx_x2_misc_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X2_MISC_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X2_MISC_1_GEN2r,(_r._rx_x2_misc_1_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X2_MISC_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X2_MISC_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x2_misc_1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X2_MISC_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X2_MISC_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x2_misc_1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X2_MISC_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X2_MISC_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x2_misc_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X2_MISC_1_GEN2r BCMI_TSCF_XGXS_RX_X2_MISC_1_GEN2r
#define RX_X2_MISC_1_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X2_MISC_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X2_MISC_1_GEN2r_t RX_X2_MISC_1_GEN2r_t;
#define RX_X2_MISC_1_GEN2r_CLR BCMI_TSCF_XGXS_RX_X2_MISC_1_GEN2r_CLR
#define RX_X2_MISC_1_GEN2r_SET BCMI_TSCF_XGXS_RX_X2_MISC_1_GEN2r_SET
#define RX_X2_MISC_1_GEN2r_GET BCMI_TSCF_XGXS_RX_X2_MISC_1_GEN2r_GET
#define RX_X2_MISC_1_GEN2r_CL82_RX_LI_ENABLEf_GET BCMI_TSCF_XGXS_RX_X2_MISC_1_GEN2r_CL82_RX_LI_ENABLEf_GET
#define RX_X2_MISC_1_GEN2r_CL82_RX_LI_ENABLEf_SET BCMI_TSCF_XGXS_RX_X2_MISC_1_GEN2r_CL82_RX_LI_ENABLEf_SET
#define RX_X2_MISC_1_GEN2r_CL82_RX_LF_ENABLEf_GET BCMI_TSCF_XGXS_RX_X2_MISC_1_GEN2r_CL82_RX_LF_ENABLEf_GET
#define RX_X2_MISC_1_GEN2r_CL82_RX_LF_ENABLEf_SET BCMI_TSCF_XGXS_RX_X2_MISC_1_GEN2r_CL82_RX_LF_ENABLEf_SET
#define RX_X2_MISC_1_GEN2r_CL82_RX_RF_ENABLEf_GET BCMI_TSCF_XGXS_RX_X2_MISC_1_GEN2r_CL82_RX_RF_ENABLEf_GET
#define RX_X2_MISC_1_GEN2r_CL82_RX_RF_ENABLEf_SET BCMI_TSCF_XGXS_RX_X2_MISC_1_GEN2r_CL82_RX_RF_ENABLEf_SET
#define READ_RX_X2_MISC_1_GEN2r BCMI_TSCF_XGXS_READ_RX_X2_MISC_1_GEN2r
#define WRITE_RX_X2_MISC_1_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X2_MISC_1_GEN2r
#define MODIFY_RX_X2_MISC_1_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X2_MISC_1_GEN2r
#define READLN_RX_X2_MISC_1_GEN2r BCMI_TSCF_XGXS_READLN_RX_X2_MISC_1_GEN2r
#define WRITELN_RX_X2_MISC_1_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X2_MISC_1_GEN2r
#define WRITEALL_RX_X2_MISC_1_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X2_MISC_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X2_MISC_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X2_CL82_SCRIDLE_TEST_ERR_GEN2
 * BLOCKS:   RX_X2_STATUS0
 * REGADDR:  0xa030
 * DESC:     CL82 Scrambled IDLE test Error register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL82_SCRIDLE_TEST_ERR CL82 Scrambled IDLE Test Error counter
 */
#define BCMI_TSCF_XGXS_RX_X2_CL82_SCRIDLE_TEST_ERR_GEN2r (0x0020a030 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X2_CL82_SCRIDLE_TEST_ERR_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X2_CL82_SCRIDLE_TEST_ERR_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X2_CL82_SCRIDLE_TEST_ERR_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x2_cl82_scridle_test_err_gen2[1];
	uint32_t _rx_x2_cl82_scridle_test_err_gen2;
} BCMI_TSCF_XGXS_RX_X2_CL82_SCRIDLE_TEST_ERR_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X2_CL82_SCRIDLE_TEST_ERR_GEN2r_CLR(r) (r).rx_x2_cl82_scridle_test_err_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X2_CL82_SCRIDLE_TEST_ERR_GEN2r_SET(r,d) (r).rx_x2_cl82_scridle_test_err_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X2_CL82_SCRIDLE_TEST_ERR_GEN2r_GET(r) (r).rx_x2_cl82_scridle_test_err_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X2_CL82_SCRIDLE_TEST_ERR_GEN2r_CL82_SCRIDLE_TEST_ERRf_GET(r) (((r).rx_x2_cl82_scridle_test_err_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X2_CL82_SCRIDLE_TEST_ERR_GEN2r_CL82_SCRIDLE_TEST_ERRf_SET(r,f) (r).rx_x2_cl82_scridle_test_err_gen2[0]=(((r).rx_x2_cl82_scridle_test_err_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X2_CL82_SCRIDLE_TEST_ERR_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X2_CL82_SCRIDLE_TEST_ERR_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X2_CL82_SCRIDLE_TEST_ERR_GEN2r,(_r._rx_x2_cl82_scridle_test_err_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X2_CL82_SCRIDLE_TEST_ERR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X2_CL82_SCRIDLE_TEST_ERR_GEN2r,(_r._rx_x2_cl82_scridle_test_err_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X2_CL82_SCRIDLE_TEST_ERR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X2_CL82_SCRIDLE_TEST_ERR_GEN2r,(_r._rx_x2_cl82_scridle_test_err_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X2_CL82_SCRIDLE_TEST_ERR_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X2_CL82_SCRIDLE_TEST_ERR_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x2_cl82_scridle_test_err_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X2_CL82_SCRIDLE_TEST_ERR_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X2_CL82_SCRIDLE_TEST_ERR_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x2_cl82_scridle_test_err_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X2_CL82_SCRIDLE_TEST_ERR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X2_CL82_SCRIDLE_TEST_ERR_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x2_cl82_scridle_test_err_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X2_CL82_SCRIDLE_TEST_ERR_GEN2r BCMI_TSCF_XGXS_RX_X2_CL82_SCRIDLE_TEST_ERR_GEN2r
#define RX_X2_CL82_SCRIDLE_TEST_ERR_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X2_CL82_SCRIDLE_TEST_ERR_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X2_CL82_SCRIDLE_TEST_ERR_GEN2r_t RX_X2_CL82_SCRIDLE_TEST_ERR_GEN2r_t;
#define RX_X2_CL82_SCRIDLE_TEST_ERR_GEN2r_CLR BCMI_TSCF_XGXS_RX_X2_CL82_SCRIDLE_TEST_ERR_GEN2r_CLR
#define RX_X2_CL82_SCRIDLE_TEST_ERR_GEN2r_SET BCMI_TSCF_XGXS_RX_X2_CL82_SCRIDLE_TEST_ERR_GEN2r_SET
#define RX_X2_CL82_SCRIDLE_TEST_ERR_GEN2r_GET BCMI_TSCF_XGXS_RX_X2_CL82_SCRIDLE_TEST_ERR_GEN2r_GET
#define RX_X2_CL82_SCRIDLE_TEST_ERR_GEN2r_CL82_SCRIDLE_TEST_ERRf_GET BCMI_TSCF_XGXS_RX_X2_CL82_SCRIDLE_TEST_ERR_GEN2r_CL82_SCRIDLE_TEST_ERRf_GET
#define RX_X2_CL82_SCRIDLE_TEST_ERR_GEN2r_CL82_SCRIDLE_TEST_ERRf_SET BCMI_TSCF_XGXS_RX_X2_CL82_SCRIDLE_TEST_ERR_GEN2r_CL82_SCRIDLE_TEST_ERRf_SET
#define READ_RX_X2_CL82_SCRIDLE_TEST_ERR_GEN2r BCMI_TSCF_XGXS_READ_RX_X2_CL82_SCRIDLE_TEST_ERR_GEN2r
#define WRITE_RX_X2_CL82_SCRIDLE_TEST_ERR_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X2_CL82_SCRIDLE_TEST_ERR_GEN2r
#define MODIFY_RX_X2_CL82_SCRIDLE_TEST_ERR_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X2_CL82_SCRIDLE_TEST_ERR_GEN2r
#define READLN_RX_X2_CL82_SCRIDLE_TEST_ERR_GEN2r BCMI_TSCF_XGXS_READLN_RX_X2_CL82_SCRIDLE_TEST_ERR_GEN2r
#define WRITELN_RX_X2_CL82_SCRIDLE_TEST_ERR_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X2_CL82_SCRIDLE_TEST_ERR_GEN2r
#define WRITEALL_RX_X2_CL82_SCRIDLE_TEST_ERR_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X2_CL82_SCRIDLE_TEST_ERR_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X2_CL82_SCRIDLE_TEST_ERR_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  CL82_RX_LIVE_STS_GEN2
 * BLOCKS:   CL82
 * REGADDR:  0xa080
 * DESC:     cl82 rx live deskew and decoder status register
 * RESETVAL: 0x2000 (8192)
 * ACCESS:   R/O
 * FIELDS:
 *     CURRENT_RXSM_STATE CL82 Recieve fsm - current state
 *     R_TYPE_CODED     CL82 Receive SM - current r_type
 *     DESKEW_STATE     Deskew current statesbit 1  - ALIGN_ACQUIREDbit 0  - LOSS_OF_ALIGNMENT
 */
#define BCMI_TSCF_XGXS_CL82_RX_LIVE_STS_GEN2r (0x0020a080 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_CL82_RX_LIVE_STS_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program CL82_RX_LIVE_STS_GEN2.
 */
typedef union BCMI_TSCF_XGXS_CL82_RX_LIVE_STS_GEN2r_s {
	uint32_t v[1];
	uint32_t cl82_rx_live_sts_gen2[1];
	uint32_t _cl82_rx_live_sts_gen2;
} BCMI_TSCF_XGXS_CL82_RX_LIVE_STS_GEN2r_t;

#define BCMI_TSCF_XGXS_CL82_RX_LIVE_STS_GEN2r_CLR(r) (r).cl82_rx_live_sts_gen2[0] = 0
#define BCMI_TSCF_XGXS_CL82_RX_LIVE_STS_GEN2r_SET(r,d) (r).cl82_rx_live_sts_gen2[0] = d
#define BCMI_TSCF_XGXS_CL82_RX_LIVE_STS_GEN2r_GET(r) (r).cl82_rx_live_sts_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_CL82_RX_LIVE_STS_GEN2r_DESKEW_STATEf_GET(r) ((((r).cl82_rx_live_sts_gen2[0]) >> 13) & 0x3)
#define BCMI_TSCF_XGXS_CL82_RX_LIVE_STS_GEN2r_DESKEW_STATEf_SET(r,f) (r).cl82_rx_live_sts_gen2[0]=(((r).cl82_rx_live_sts_gen2[0] & ~((uint32_t)0x3 << 13)) | ((((uint32_t)f) & 0x3) << 13)) | (3 << (16 + 13))
#define BCMI_TSCF_XGXS_CL82_RX_LIVE_STS_GEN2r_R_TYPE_CODEDf_GET(r) ((((r).cl82_rx_live_sts_gen2[0]) >> 7) & 0x3f)
#define BCMI_TSCF_XGXS_CL82_RX_LIVE_STS_GEN2r_R_TYPE_CODEDf_SET(r,f) (r).cl82_rx_live_sts_gen2[0]=(((r).cl82_rx_live_sts_gen2[0] & ~((uint32_t)0x3f << 7)) | ((((uint32_t)f) & 0x3f) << 7)) | (63 << (16 + 7))
#define BCMI_TSCF_XGXS_CL82_RX_LIVE_STS_GEN2r_CURRENT_RXSM_STATEf_GET(r) (((r).cl82_rx_live_sts_gen2[0]) & 0x7f)
#define BCMI_TSCF_XGXS_CL82_RX_LIVE_STS_GEN2r_CURRENT_RXSM_STATEf_SET(r,f) (r).cl82_rx_live_sts_gen2[0]=(((r).cl82_rx_live_sts_gen2[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f)) | (0x7f << 16)

/*
 * These macros can be used to access CL82_RX_LIVE_STS_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_CL82_RX_LIVE_STS_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL82_RX_LIVE_STS_GEN2r,(_r._cl82_rx_live_sts_gen2))
#define BCMI_TSCF_XGXS_WRITE_CL82_RX_LIVE_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL82_RX_LIVE_STS_GEN2r,(_r._cl82_rx_live_sts_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_CL82_RX_LIVE_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL82_RX_LIVE_STS_GEN2r,(_r._cl82_rx_live_sts_gen2))
#define BCMI_TSCF_XGXS_READLN_CL82_RX_LIVE_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL82_RX_LIVE_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl82_rx_live_sts_gen2))
#define BCMI_TSCF_XGXS_WRITELN_CL82_RX_LIVE_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL82_RX_LIVE_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl82_rx_live_sts_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_CL82_RX_LIVE_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL82_RX_LIVE_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl82_rx_live_sts_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define CL82_RX_LIVE_STS_GEN2r BCMI_TSCF_XGXS_CL82_RX_LIVE_STS_GEN2r
#define CL82_RX_LIVE_STS_GEN2r_SIZE BCMI_TSCF_XGXS_CL82_RX_LIVE_STS_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_CL82_RX_LIVE_STS_GEN2r_t CL82_RX_LIVE_STS_GEN2r_t;
#define CL82_RX_LIVE_STS_GEN2r_CLR BCMI_TSCF_XGXS_CL82_RX_LIVE_STS_GEN2r_CLR
#define CL82_RX_LIVE_STS_GEN2r_SET BCMI_TSCF_XGXS_CL82_RX_LIVE_STS_GEN2r_SET
#define CL82_RX_LIVE_STS_GEN2r_GET BCMI_TSCF_XGXS_CL82_RX_LIVE_STS_GEN2r_GET
#define CL82_RX_LIVE_STS_GEN2r_DESKEW_STATEf_GET BCMI_TSCF_XGXS_CL82_RX_LIVE_STS_GEN2r_DESKEW_STATEf_GET
#define CL82_RX_LIVE_STS_GEN2r_DESKEW_STATEf_SET BCMI_TSCF_XGXS_CL82_RX_LIVE_STS_GEN2r_DESKEW_STATEf_SET
#define CL82_RX_LIVE_STS_GEN2r_R_TYPE_CODEDf_GET BCMI_TSCF_XGXS_CL82_RX_LIVE_STS_GEN2r_R_TYPE_CODEDf_GET
#define CL82_RX_LIVE_STS_GEN2r_R_TYPE_CODEDf_SET BCMI_TSCF_XGXS_CL82_RX_LIVE_STS_GEN2r_R_TYPE_CODEDf_SET
#define CL82_RX_LIVE_STS_GEN2r_CURRENT_RXSM_STATEf_GET BCMI_TSCF_XGXS_CL82_RX_LIVE_STS_GEN2r_CURRENT_RXSM_STATEf_GET
#define CL82_RX_LIVE_STS_GEN2r_CURRENT_RXSM_STATEf_SET BCMI_TSCF_XGXS_CL82_RX_LIVE_STS_GEN2r_CURRENT_RXSM_STATEf_SET
#define READ_CL82_RX_LIVE_STS_GEN2r BCMI_TSCF_XGXS_READ_CL82_RX_LIVE_STS_GEN2r
#define WRITE_CL82_RX_LIVE_STS_GEN2r BCMI_TSCF_XGXS_WRITE_CL82_RX_LIVE_STS_GEN2r
#define MODIFY_CL82_RX_LIVE_STS_GEN2r BCMI_TSCF_XGXS_MODIFY_CL82_RX_LIVE_STS_GEN2r
#define READLN_CL82_RX_LIVE_STS_GEN2r BCMI_TSCF_XGXS_READLN_CL82_RX_LIVE_STS_GEN2r
#define WRITELN_CL82_RX_LIVE_STS_GEN2r BCMI_TSCF_XGXS_WRITELN_CL82_RX_LIVE_STS_GEN2r
#define WRITEALL_CL82_RX_LIVE_STS_GEN2r BCMI_TSCF_XGXS_WRITEALL_CL82_RX_LIVE_STS_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_CL82_RX_LIVE_STS_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  CL82_RX_LATCH_STS_GEN2
 * BLOCKS:   CL82
 * REGADDR:  0xa081
 * DESC:     cl82 rx latched deskew and decoder status register
 * RESETVAL: 0x1 (1)
 * ACCESS:   R/O
 * FIELDS:
 *     DESKEW_HIS_STATE Deskew history statesclear on read
 *     HISTORY_RXSM_STATE Recieve fsm - latched history state
 */
#define BCMI_TSCF_XGXS_CL82_RX_LATCH_STS_GEN2r (0x0020a081 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_CL82_RX_LATCH_STS_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program CL82_RX_LATCH_STS_GEN2.
 */
typedef union BCMI_TSCF_XGXS_CL82_RX_LATCH_STS_GEN2r_s {
	uint32_t v[1];
	uint32_t cl82_rx_latch_sts_gen2[1];
	uint32_t _cl82_rx_latch_sts_gen2;
} BCMI_TSCF_XGXS_CL82_RX_LATCH_STS_GEN2r_t;

#define BCMI_TSCF_XGXS_CL82_RX_LATCH_STS_GEN2r_CLR(r) (r).cl82_rx_latch_sts_gen2[0] = 0
#define BCMI_TSCF_XGXS_CL82_RX_LATCH_STS_GEN2r_SET(r,d) (r).cl82_rx_latch_sts_gen2[0] = d
#define BCMI_TSCF_XGXS_CL82_RX_LATCH_STS_GEN2r_GET(r) (r).cl82_rx_latch_sts_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_CL82_RX_LATCH_STS_GEN2r_HISTORY_RXSM_STATEf_GET(r) ((((r).cl82_rx_latch_sts_gen2[0]) >> 2) & 0x7f)
#define BCMI_TSCF_XGXS_CL82_RX_LATCH_STS_GEN2r_HISTORY_RXSM_STATEf_SET(r,f) (r).cl82_rx_latch_sts_gen2[0]=(((r).cl82_rx_latch_sts_gen2[0] & ~((uint32_t)0x7f << 2)) | ((((uint32_t)f) & 0x7f) << 2)) | (127 << (16 + 2))
#define BCMI_TSCF_XGXS_CL82_RX_LATCH_STS_GEN2r_DESKEW_HIS_STATEf_GET(r) (((r).cl82_rx_latch_sts_gen2[0]) & 0x3)
#define BCMI_TSCF_XGXS_CL82_RX_LATCH_STS_GEN2r_DESKEW_HIS_STATEf_SET(r,f) (r).cl82_rx_latch_sts_gen2[0]=(((r).cl82_rx_latch_sts_gen2[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access CL82_RX_LATCH_STS_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_CL82_RX_LATCH_STS_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL82_RX_LATCH_STS_GEN2r,(_r._cl82_rx_latch_sts_gen2))
#define BCMI_TSCF_XGXS_WRITE_CL82_RX_LATCH_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL82_RX_LATCH_STS_GEN2r,(_r._cl82_rx_latch_sts_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_CL82_RX_LATCH_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL82_RX_LATCH_STS_GEN2r,(_r._cl82_rx_latch_sts_gen2))
#define BCMI_TSCF_XGXS_READLN_CL82_RX_LATCH_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL82_RX_LATCH_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl82_rx_latch_sts_gen2))
#define BCMI_TSCF_XGXS_WRITELN_CL82_RX_LATCH_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL82_RX_LATCH_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl82_rx_latch_sts_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_CL82_RX_LATCH_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL82_RX_LATCH_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl82_rx_latch_sts_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define CL82_RX_LATCH_STS_GEN2r BCMI_TSCF_XGXS_CL82_RX_LATCH_STS_GEN2r
#define CL82_RX_LATCH_STS_GEN2r_SIZE BCMI_TSCF_XGXS_CL82_RX_LATCH_STS_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_CL82_RX_LATCH_STS_GEN2r_t CL82_RX_LATCH_STS_GEN2r_t;
#define CL82_RX_LATCH_STS_GEN2r_CLR BCMI_TSCF_XGXS_CL82_RX_LATCH_STS_GEN2r_CLR
#define CL82_RX_LATCH_STS_GEN2r_SET BCMI_TSCF_XGXS_CL82_RX_LATCH_STS_GEN2r_SET
#define CL82_RX_LATCH_STS_GEN2r_GET BCMI_TSCF_XGXS_CL82_RX_LATCH_STS_GEN2r_GET
#define CL82_RX_LATCH_STS_GEN2r_HISTORY_RXSM_STATEf_GET BCMI_TSCF_XGXS_CL82_RX_LATCH_STS_GEN2r_HISTORY_RXSM_STATEf_GET
#define CL82_RX_LATCH_STS_GEN2r_HISTORY_RXSM_STATEf_SET BCMI_TSCF_XGXS_CL82_RX_LATCH_STS_GEN2r_HISTORY_RXSM_STATEf_SET
#define CL82_RX_LATCH_STS_GEN2r_DESKEW_HIS_STATEf_GET BCMI_TSCF_XGXS_CL82_RX_LATCH_STS_GEN2r_DESKEW_HIS_STATEf_GET
#define CL82_RX_LATCH_STS_GEN2r_DESKEW_HIS_STATEf_SET BCMI_TSCF_XGXS_CL82_RX_LATCH_STS_GEN2r_DESKEW_HIS_STATEf_SET
#define READ_CL82_RX_LATCH_STS_GEN2r BCMI_TSCF_XGXS_READ_CL82_RX_LATCH_STS_GEN2r
#define WRITE_CL82_RX_LATCH_STS_GEN2r BCMI_TSCF_XGXS_WRITE_CL82_RX_LATCH_STS_GEN2r
#define MODIFY_CL82_RX_LATCH_STS_GEN2r BCMI_TSCF_XGXS_MODIFY_CL82_RX_LATCH_STS_GEN2r
#define READLN_CL82_RX_LATCH_STS_GEN2r BCMI_TSCF_XGXS_READLN_CL82_RX_LATCH_STS_GEN2r
#define WRITELN_CL82_RX_LATCH_STS_GEN2r BCMI_TSCF_XGXS_WRITELN_CL82_RX_LATCH_STS_GEN2r
#define WRITEALL_CL82_RX_LATCH_STS_GEN2r BCMI_TSCF_XGXS_WRITEALL_CL82_RX_LATCH_STS_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_CL82_RX_LATCH_STS_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  CL82_BER_LO_GEN2
 * BLOCKS:   CL82
 * REGADDR:  0xa082
 * DESC:     CL82 BER LOWER ORDER bits register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     BER_LO           Lower 8 bits of CL82 BER count.It counts the number of times BER_BAD_SH state is entered.
 */
#define BCMI_TSCF_XGXS_CL82_BER_LO_GEN2r (0x0020a082 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_CL82_BER_LO_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program CL82_BER_LO_GEN2.
 */
typedef union BCMI_TSCF_XGXS_CL82_BER_LO_GEN2r_s {
	uint32_t v[1];
	uint32_t cl82_ber_lo_gen2[1];
	uint32_t _cl82_ber_lo_gen2;
} BCMI_TSCF_XGXS_CL82_BER_LO_GEN2r_t;

#define BCMI_TSCF_XGXS_CL82_BER_LO_GEN2r_CLR(r) (r).cl82_ber_lo_gen2[0] = 0
#define BCMI_TSCF_XGXS_CL82_BER_LO_GEN2r_SET(r,d) (r).cl82_ber_lo_gen2[0] = d
#define BCMI_TSCF_XGXS_CL82_BER_LO_GEN2r_GET(r) (r).cl82_ber_lo_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_CL82_BER_LO_GEN2r_BER_LOf_GET(r) (((r).cl82_ber_lo_gen2[0]) & 0xff)
#define BCMI_TSCF_XGXS_CL82_BER_LO_GEN2r_BER_LOf_SET(r,f) (r).cl82_ber_lo_gen2[0]=(((r).cl82_ber_lo_gen2[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access CL82_BER_LO_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_CL82_BER_LO_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL82_BER_LO_GEN2r,(_r._cl82_ber_lo_gen2))
#define BCMI_TSCF_XGXS_WRITE_CL82_BER_LO_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL82_BER_LO_GEN2r,(_r._cl82_ber_lo_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_CL82_BER_LO_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL82_BER_LO_GEN2r,(_r._cl82_ber_lo_gen2))
#define BCMI_TSCF_XGXS_READLN_CL82_BER_LO_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL82_BER_LO_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl82_ber_lo_gen2))
#define BCMI_TSCF_XGXS_WRITELN_CL82_BER_LO_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL82_BER_LO_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl82_ber_lo_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_CL82_BER_LO_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL82_BER_LO_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl82_ber_lo_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define CL82_BER_LO_GEN2r BCMI_TSCF_XGXS_CL82_BER_LO_GEN2r
#define CL82_BER_LO_GEN2r_SIZE BCMI_TSCF_XGXS_CL82_BER_LO_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_CL82_BER_LO_GEN2r_t CL82_BER_LO_GEN2r_t;
#define CL82_BER_LO_GEN2r_CLR BCMI_TSCF_XGXS_CL82_BER_LO_GEN2r_CLR
#define CL82_BER_LO_GEN2r_SET BCMI_TSCF_XGXS_CL82_BER_LO_GEN2r_SET
#define CL82_BER_LO_GEN2r_GET BCMI_TSCF_XGXS_CL82_BER_LO_GEN2r_GET
#define CL82_BER_LO_GEN2r_BER_LOf_GET BCMI_TSCF_XGXS_CL82_BER_LO_GEN2r_BER_LOf_GET
#define CL82_BER_LO_GEN2r_BER_LOf_SET BCMI_TSCF_XGXS_CL82_BER_LO_GEN2r_BER_LOf_SET
#define READ_CL82_BER_LO_GEN2r BCMI_TSCF_XGXS_READ_CL82_BER_LO_GEN2r
#define WRITE_CL82_BER_LO_GEN2r BCMI_TSCF_XGXS_WRITE_CL82_BER_LO_GEN2r
#define MODIFY_CL82_BER_LO_GEN2r BCMI_TSCF_XGXS_MODIFY_CL82_BER_LO_GEN2r
#define READLN_CL82_BER_LO_GEN2r BCMI_TSCF_XGXS_READLN_CL82_BER_LO_GEN2r
#define WRITELN_CL82_BER_LO_GEN2r BCMI_TSCF_XGXS_WRITELN_CL82_BER_LO_GEN2r
#define WRITEALL_CL82_BER_LO_GEN2r BCMI_TSCF_XGXS_WRITEALL_CL82_BER_LO_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_CL82_BER_LO_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  CL82_BER_HO_GEN2
 * BLOCKS:   CL82
 * REGADDR:  0xa083
 * DESC:     CL82 BER HIGH ORDER bits register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     BER_HO           Upper 14 bits of CL82 BER count.It counts the number of times BER_BAD_SH state is entered.
 */
#define BCMI_TSCF_XGXS_CL82_BER_HO_GEN2r (0x0020a083 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_CL82_BER_HO_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program CL82_BER_HO_GEN2.
 */
typedef union BCMI_TSCF_XGXS_CL82_BER_HO_GEN2r_s {
	uint32_t v[1];
	uint32_t cl82_ber_ho_gen2[1];
	uint32_t _cl82_ber_ho_gen2;
} BCMI_TSCF_XGXS_CL82_BER_HO_GEN2r_t;

#define BCMI_TSCF_XGXS_CL82_BER_HO_GEN2r_CLR(r) (r).cl82_ber_ho_gen2[0] = 0
#define BCMI_TSCF_XGXS_CL82_BER_HO_GEN2r_SET(r,d) (r).cl82_ber_ho_gen2[0] = d
#define BCMI_TSCF_XGXS_CL82_BER_HO_GEN2r_GET(r) (r).cl82_ber_ho_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_CL82_BER_HO_GEN2r_BER_HOf_GET(r) (((r).cl82_ber_ho_gen2[0]) & 0x3fff)
#define BCMI_TSCF_XGXS_CL82_BER_HO_GEN2r_BER_HOf_SET(r,f) (r).cl82_ber_ho_gen2[0]=(((r).cl82_ber_ho_gen2[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff)) | (0x3fff << 16)

/*
 * These macros can be used to access CL82_BER_HO_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_CL82_BER_HO_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL82_BER_HO_GEN2r,(_r._cl82_ber_ho_gen2))
#define BCMI_TSCF_XGXS_WRITE_CL82_BER_HO_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL82_BER_HO_GEN2r,(_r._cl82_ber_ho_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_CL82_BER_HO_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL82_BER_HO_GEN2r,(_r._cl82_ber_ho_gen2))
#define BCMI_TSCF_XGXS_READLN_CL82_BER_HO_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL82_BER_HO_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl82_ber_ho_gen2))
#define BCMI_TSCF_XGXS_WRITELN_CL82_BER_HO_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL82_BER_HO_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl82_ber_ho_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_CL82_BER_HO_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL82_BER_HO_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl82_ber_ho_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define CL82_BER_HO_GEN2r BCMI_TSCF_XGXS_CL82_BER_HO_GEN2r
#define CL82_BER_HO_GEN2r_SIZE BCMI_TSCF_XGXS_CL82_BER_HO_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_CL82_BER_HO_GEN2r_t CL82_BER_HO_GEN2r_t;
#define CL82_BER_HO_GEN2r_CLR BCMI_TSCF_XGXS_CL82_BER_HO_GEN2r_CLR
#define CL82_BER_HO_GEN2r_SET BCMI_TSCF_XGXS_CL82_BER_HO_GEN2r_SET
#define CL82_BER_HO_GEN2r_GET BCMI_TSCF_XGXS_CL82_BER_HO_GEN2r_GET
#define CL82_BER_HO_GEN2r_BER_HOf_GET BCMI_TSCF_XGXS_CL82_BER_HO_GEN2r_BER_HOf_GET
#define CL82_BER_HO_GEN2r_BER_HOf_SET BCMI_TSCF_XGXS_CL82_BER_HO_GEN2r_BER_HOf_SET
#define READ_CL82_BER_HO_GEN2r BCMI_TSCF_XGXS_READ_CL82_BER_HO_GEN2r
#define WRITE_CL82_BER_HO_GEN2r BCMI_TSCF_XGXS_WRITE_CL82_BER_HO_GEN2r
#define MODIFY_CL82_BER_HO_GEN2r BCMI_TSCF_XGXS_MODIFY_CL82_BER_HO_GEN2r
#define READLN_CL82_BER_HO_GEN2r BCMI_TSCF_XGXS_READLN_CL82_BER_HO_GEN2r
#define WRITELN_CL82_BER_HO_GEN2r BCMI_TSCF_XGXS_WRITELN_CL82_BER_HO_GEN2r
#define WRITEALL_CL82_BER_HO_GEN2r BCMI_TSCF_XGXS_WRITEALL_CL82_BER_HO_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_CL82_BER_HO_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  CL82_ERRED_BLKS_HO_GEN2
 * BLOCKS:   CL82
 * REGADDR:  0xa084
 * DESC:     40G/100GBASE-R Errored blocks high order counter
 * RESETVAL: 0x8000 (32768)
 * ACCESS:   R/O
 * FIELDS:
 *     ERRORED_BLOCKS_HO Error blocks counter high order bits for cl82 - CR/NRBits 21:8 of the Error blocks  counter
 *     ERRORED_BLOCKS_HO_PRESENT Error blocks counter high order bits present - ROAlways reads as 1 if this registers is implemented
 */
#define BCMI_TSCF_XGXS_CL82_ERRED_BLKS_HO_GEN2r (0x0020a084 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_CL82_ERRED_BLKS_HO_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program CL82_ERRED_BLKS_HO_GEN2.
 */
typedef union BCMI_TSCF_XGXS_CL82_ERRED_BLKS_HO_GEN2r_s {
	uint32_t v[1];
	uint32_t cl82_erred_blks_ho_gen2[1];
	uint32_t _cl82_erred_blks_ho_gen2;
} BCMI_TSCF_XGXS_CL82_ERRED_BLKS_HO_GEN2r_t;

#define BCMI_TSCF_XGXS_CL82_ERRED_BLKS_HO_GEN2r_CLR(r) (r).cl82_erred_blks_ho_gen2[0] = 0
#define BCMI_TSCF_XGXS_CL82_ERRED_BLKS_HO_GEN2r_SET(r,d) (r).cl82_erred_blks_ho_gen2[0] = d
#define BCMI_TSCF_XGXS_CL82_ERRED_BLKS_HO_GEN2r_GET(r) (r).cl82_erred_blks_ho_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_CL82_ERRED_BLKS_HO_GEN2r_ERRORED_BLOCKS_HO_PRESENTf_GET(r) ((((r).cl82_erred_blks_ho_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_CL82_ERRED_BLKS_HO_GEN2r_ERRORED_BLOCKS_HO_PRESENTf_SET(r,f) (r).cl82_erred_blks_ho_gen2[0]=(((r).cl82_erred_blks_ho_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_CL82_ERRED_BLKS_HO_GEN2r_ERRORED_BLOCKS_HOf_GET(r) (((r).cl82_erred_blks_ho_gen2[0]) & 0x3fff)
#define BCMI_TSCF_XGXS_CL82_ERRED_BLKS_HO_GEN2r_ERRORED_BLOCKS_HOf_SET(r,f) (r).cl82_erred_blks_ho_gen2[0]=(((r).cl82_erred_blks_ho_gen2[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff)) | (0x3fff << 16)

/*
 * These macros can be used to access CL82_ERRED_BLKS_HO_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_CL82_ERRED_BLKS_HO_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL82_ERRED_BLKS_HO_GEN2r,(_r._cl82_erred_blks_ho_gen2))
#define BCMI_TSCF_XGXS_WRITE_CL82_ERRED_BLKS_HO_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL82_ERRED_BLKS_HO_GEN2r,(_r._cl82_erred_blks_ho_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_CL82_ERRED_BLKS_HO_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL82_ERRED_BLKS_HO_GEN2r,(_r._cl82_erred_blks_ho_gen2))
#define BCMI_TSCF_XGXS_READLN_CL82_ERRED_BLKS_HO_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL82_ERRED_BLKS_HO_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl82_erred_blks_ho_gen2))
#define BCMI_TSCF_XGXS_WRITELN_CL82_ERRED_BLKS_HO_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL82_ERRED_BLKS_HO_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl82_erred_blks_ho_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_CL82_ERRED_BLKS_HO_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL82_ERRED_BLKS_HO_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl82_erred_blks_ho_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define CL82_ERRED_BLKS_HO_GEN2r BCMI_TSCF_XGXS_CL82_ERRED_BLKS_HO_GEN2r
#define CL82_ERRED_BLKS_HO_GEN2r_SIZE BCMI_TSCF_XGXS_CL82_ERRED_BLKS_HO_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_CL82_ERRED_BLKS_HO_GEN2r_t CL82_ERRED_BLKS_HO_GEN2r_t;
#define CL82_ERRED_BLKS_HO_GEN2r_CLR BCMI_TSCF_XGXS_CL82_ERRED_BLKS_HO_GEN2r_CLR
#define CL82_ERRED_BLKS_HO_GEN2r_SET BCMI_TSCF_XGXS_CL82_ERRED_BLKS_HO_GEN2r_SET
#define CL82_ERRED_BLKS_HO_GEN2r_GET BCMI_TSCF_XGXS_CL82_ERRED_BLKS_HO_GEN2r_GET
#define CL82_ERRED_BLKS_HO_GEN2r_ERRORED_BLOCKS_HO_PRESENTf_GET BCMI_TSCF_XGXS_CL82_ERRED_BLKS_HO_GEN2r_ERRORED_BLOCKS_HO_PRESENTf_GET
#define CL82_ERRED_BLKS_HO_GEN2r_ERRORED_BLOCKS_HO_PRESENTf_SET BCMI_TSCF_XGXS_CL82_ERRED_BLKS_HO_GEN2r_ERRORED_BLOCKS_HO_PRESENTf_SET
#define CL82_ERRED_BLKS_HO_GEN2r_ERRORED_BLOCKS_HOf_GET BCMI_TSCF_XGXS_CL82_ERRED_BLKS_HO_GEN2r_ERRORED_BLOCKS_HOf_GET
#define CL82_ERRED_BLKS_HO_GEN2r_ERRORED_BLOCKS_HOf_SET BCMI_TSCF_XGXS_CL82_ERRED_BLKS_HO_GEN2r_ERRORED_BLOCKS_HOf_SET
#define READ_CL82_ERRED_BLKS_HO_GEN2r BCMI_TSCF_XGXS_READ_CL82_ERRED_BLKS_HO_GEN2r
#define WRITE_CL82_ERRED_BLKS_HO_GEN2r BCMI_TSCF_XGXS_WRITE_CL82_ERRED_BLKS_HO_GEN2r
#define MODIFY_CL82_ERRED_BLKS_HO_GEN2r BCMI_TSCF_XGXS_MODIFY_CL82_ERRED_BLKS_HO_GEN2r
#define READLN_CL82_ERRED_BLKS_HO_GEN2r BCMI_TSCF_XGXS_READLN_CL82_ERRED_BLKS_HO_GEN2r
#define WRITELN_CL82_ERRED_BLKS_HO_GEN2r BCMI_TSCF_XGXS_WRITELN_CL82_ERRED_BLKS_HO_GEN2r
#define WRITEALL_CL82_ERRED_BLKS_HO_GEN2r BCMI_TSCF_XGXS_WRITEALL_CL82_ERRED_BLKS_HO_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_CL82_ERRED_BLKS_HO_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PMD_X4_CTL_GEN2
 * BLOCKS:   PMD_X4
 * REGADDR:  0xc010
 * DESC:     PMD lane reset controls
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LN_DP_H_RSTB     PMD lane datapath reset override valueOnly used for Speed Control bypass operation
 *     LN_H_RSTB        Reset all lane logic: data path and registers
 *     LN_TX_H_PWRDN    Lane power down, TX direction
 *     LN_RX_H_PWRDN    Lane power down, RX direction
 *     TX_DISABLE       Set to squelch the transmit signal for laneOnly used for Speed Control bypass operation and local loopback
 *     OSR_MODE         OSR mode. In current implementation only OSR mode 1 is usedOnly used for Speed Control bypass operation
 */
#define BCMI_TSCF_XGXS_PMD_X4_CTL_GEN2r (0x0000c010 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PMD_X4_CTL_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PMD_X4_CTL_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PMD_X4_CTL_GEN2r_s {
	uint32_t v[1];
	uint32_t pmd_x4_ctl_gen2[1];
	uint32_t _pmd_x4_ctl_gen2;
} BCMI_TSCF_XGXS_PMD_X4_CTL_GEN2r_t;

#define BCMI_TSCF_XGXS_PMD_X4_CTL_GEN2r_CLR(r) (r).pmd_x4_ctl_gen2[0] = 0
#define BCMI_TSCF_XGXS_PMD_X4_CTL_GEN2r_SET(r,d) (r).pmd_x4_ctl_gen2[0] = d
#define BCMI_TSCF_XGXS_PMD_X4_CTL_GEN2r_GET(r) (r).pmd_x4_ctl_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PMD_X4_CTL_GEN2r_OSR_MODEf_GET(r) ((((r).pmd_x4_ctl_gen2[0]) >> 9) & 0xf)
#define BCMI_TSCF_XGXS_PMD_X4_CTL_GEN2r_OSR_MODEf_SET(r,f) (r).pmd_x4_ctl_gen2[0]=(((r).pmd_x4_ctl_gen2[0] & ~((uint32_t)0xf << 9)) | ((((uint32_t)f) & 0xf) << 9)) | (15 << (16 + 9))
#define BCMI_TSCF_XGXS_PMD_X4_CTL_GEN2r_TX_DISABLEf_GET(r) ((((r).pmd_x4_ctl_gen2[0]) >> 8) & 0x1)
#define BCMI_TSCF_XGXS_PMD_X4_CTL_GEN2r_TX_DISABLEf_SET(r,f) (r).pmd_x4_ctl_gen2[0]=(((r).pmd_x4_ctl_gen2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_XGXS_PMD_X4_CTL_GEN2r_LN_RX_H_PWRDNf_GET(r) ((((r).pmd_x4_ctl_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_PMD_X4_CTL_GEN2r_LN_RX_H_PWRDNf_SET(r,f) (r).pmd_x4_ctl_gen2[0]=(((r).pmd_x4_ctl_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_PMD_X4_CTL_GEN2r_LN_TX_H_PWRDNf_GET(r) ((((r).pmd_x4_ctl_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_PMD_X4_CTL_GEN2r_LN_TX_H_PWRDNf_SET(r,f) (r).pmd_x4_ctl_gen2[0]=(((r).pmd_x4_ctl_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_PMD_X4_CTL_GEN2r_LN_H_RSTBf_GET(r) ((((r).pmd_x4_ctl_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_PMD_X4_CTL_GEN2r_LN_H_RSTBf_SET(r,f) (r).pmd_x4_ctl_gen2[0]=(((r).pmd_x4_ctl_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_PMD_X4_CTL_GEN2r_LN_DP_H_RSTBf_GET(r) (((r).pmd_x4_ctl_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_PMD_X4_CTL_GEN2r_LN_DP_H_RSTBf_SET(r,f) (r).pmd_x4_ctl_gen2[0]=(((r).pmd_x4_ctl_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access PMD_X4_CTL_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PMD_X4_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PMD_X4_CTL_GEN2r,(_r._pmd_x4_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITE_PMD_X4_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PMD_X4_CTL_GEN2r,(_r._pmd_x4_ctl_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PMD_X4_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PMD_X4_CTL_GEN2r,(_r._pmd_x4_ctl_gen2))
#define BCMI_TSCF_XGXS_READLN_PMD_X4_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PMD_X4_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pmd_x4_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITELN_PMD_X4_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PMD_X4_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pmd_x4_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_PMD_X4_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PMD_X4_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._pmd_x4_ctl_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PMD_X4_CTL_GEN2r BCMI_TSCF_XGXS_PMD_X4_CTL_GEN2r
#define PMD_X4_CTL_GEN2r_SIZE BCMI_TSCF_XGXS_PMD_X4_CTL_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PMD_X4_CTL_GEN2r_t PMD_X4_CTL_GEN2r_t;
#define PMD_X4_CTL_GEN2r_CLR BCMI_TSCF_XGXS_PMD_X4_CTL_GEN2r_CLR
#define PMD_X4_CTL_GEN2r_SET BCMI_TSCF_XGXS_PMD_X4_CTL_GEN2r_SET
#define PMD_X4_CTL_GEN2r_GET BCMI_TSCF_XGXS_PMD_X4_CTL_GEN2r_GET
#define PMD_X4_CTL_GEN2r_OSR_MODEf_GET BCMI_TSCF_XGXS_PMD_X4_CTL_GEN2r_OSR_MODEf_GET
#define PMD_X4_CTL_GEN2r_OSR_MODEf_SET BCMI_TSCF_XGXS_PMD_X4_CTL_GEN2r_OSR_MODEf_SET
#define PMD_X4_CTL_GEN2r_TX_DISABLEf_GET BCMI_TSCF_XGXS_PMD_X4_CTL_GEN2r_TX_DISABLEf_GET
#define PMD_X4_CTL_GEN2r_TX_DISABLEf_SET BCMI_TSCF_XGXS_PMD_X4_CTL_GEN2r_TX_DISABLEf_SET
#define PMD_X4_CTL_GEN2r_LN_RX_H_PWRDNf_GET BCMI_TSCF_XGXS_PMD_X4_CTL_GEN2r_LN_RX_H_PWRDNf_GET
#define PMD_X4_CTL_GEN2r_LN_RX_H_PWRDNf_SET BCMI_TSCF_XGXS_PMD_X4_CTL_GEN2r_LN_RX_H_PWRDNf_SET
#define PMD_X4_CTL_GEN2r_LN_TX_H_PWRDNf_GET BCMI_TSCF_XGXS_PMD_X4_CTL_GEN2r_LN_TX_H_PWRDNf_GET
#define PMD_X4_CTL_GEN2r_LN_TX_H_PWRDNf_SET BCMI_TSCF_XGXS_PMD_X4_CTL_GEN2r_LN_TX_H_PWRDNf_SET
#define PMD_X4_CTL_GEN2r_LN_H_RSTBf_GET BCMI_TSCF_XGXS_PMD_X4_CTL_GEN2r_LN_H_RSTBf_GET
#define PMD_X4_CTL_GEN2r_LN_H_RSTBf_SET BCMI_TSCF_XGXS_PMD_X4_CTL_GEN2r_LN_H_RSTBf_SET
#define PMD_X4_CTL_GEN2r_LN_DP_H_RSTBf_GET BCMI_TSCF_XGXS_PMD_X4_CTL_GEN2r_LN_DP_H_RSTBf_GET
#define PMD_X4_CTL_GEN2r_LN_DP_H_RSTBf_SET BCMI_TSCF_XGXS_PMD_X4_CTL_GEN2r_LN_DP_H_RSTBf_SET
#define READ_PMD_X4_CTL_GEN2r BCMI_TSCF_XGXS_READ_PMD_X4_CTL_GEN2r
#define WRITE_PMD_X4_CTL_GEN2r BCMI_TSCF_XGXS_WRITE_PMD_X4_CTL_GEN2r
#define MODIFY_PMD_X4_CTL_GEN2r BCMI_TSCF_XGXS_MODIFY_PMD_X4_CTL_GEN2r
#define READLN_PMD_X4_CTL_GEN2r BCMI_TSCF_XGXS_READLN_PMD_X4_CTL_GEN2r
#define WRITELN_PMD_X4_CTL_GEN2r BCMI_TSCF_XGXS_WRITELN_PMD_X4_CTL_GEN2r
#define WRITEALL_PMD_X4_CTL_GEN2r BCMI_TSCF_XGXS_WRITEALL_PMD_X4_CTL_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PMD_X4_CTL_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PMD_X4_MODE_GEN2
 * BLOCKS:   PMD_X4
 * REGADDR:  0xc011
 * DESC:     PMD lane mode configuration
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LANE_MODE        Lane modeOnly used for Speed Control bypass operationBits 15:11 - Reserved.Bit  10    - cl72_en.Bit   9    - scrambler_disabled.Bit   8    - eee_mode_en.Bits  7:0  - speed_id.
 */
#define BCMI_TSCF_XGXS_PMD_X4_MODE_GEN2r (0x0000c011 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PMD_X4_MODE_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PMD_X4_MODE_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PMD_X4_MODE_GEN2r_s {
	uint32_t v[1];
	uint32_t pmd_x4_mode_gen2[1];
	uint32_t _pmd_x4_mode_gen2;
} BCMI_TSCF_XGXS_PMD_X4_MODE_GEN2r_t;

#define BCMI_TSCF_XGXS_PMD_X4_MODE_GEN2r_CLR(r) (r).pmd_x4_mode_gen2[0] = 0
#define BCMI_TSCF_XGXS_PMD_X4_MODE_GEN2r_SET(r,d) (r).pmd_x4_mode_gen2[0] = d
#define BCMI_TSCF_XGXS_PMD_X4_MODE_GEN2r_GET(r) (r).pmd_x4_mode_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PMD_X4_MODE_GEN2r_LANE_MODEf_GET(r) (((r).pmd_x4_mode_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_PMD_X4_MODE_GEN2r_LANE_MODEf_SET(r,f) (r).pmd_x4_mode_gen2[0]=(((r).pmd_x4_mode_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PMD_X4_MODE_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PMD_X4_MODE_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PMD_X4_MODE_GEN2r,(_r._pmd_x4_mode_gen2))
#define BCMI_TSCF_XGXS_WRITE_PMD_X4_MODE_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PMD_X4_MODE_GEN2r,(_r._pmd_x4_mode_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PMD_X4_MODE_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PMD_X4_MODE_GEN2r,(_r._pmd_x4_mode_gen2))
#define BCMI_TSCF_XGXS_READLN_PMD_X4_MODE_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PMD_X4_MODE_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pmd_x4_mode_gen2))
#define BCMI_TSCF_XGXS_WRITELN_PMD_X4_MODE_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PMD_X4_MODE_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pmd_x4_mode_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_PMD_X4_MODE_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PMD_X4_MODE_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._pmd_x4_mode_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PMD_X4_MODE_GEN2r BCMI_TSCF_XGXS_PMD_X4_MODE_GEN2r
#define PMD_X4_MODE_GEN2r_SIZE BCMI_TSCF_XGXS_PMD_X4_MODE_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PMD_X4_MODE_GEN2r_t PMD_X4_MODE_GEN2r_t;
#define PMD_X4_MODE_GEN2r_CLR BCMI_TSCF_XGXS_PMD_X4_MODE_GEN2r_CLR
#define PMD_X4_MODE_GEN2r_SET BCMI_TSCF_XGXS_PMD_X4_MODE_GEN2r_SET
#define PMD_X4_MODE_GEN2r_GET BCMI_TSCF_XGXS_PMD_X4_MODE_GEN2r_GET
#define PMD_X4_MODE_GEN2r_LANE_MODEf_GET BCMI_TSCF_XGXS_PMD_X4_MODE_GEN2r_LANE_MODEf_GET
#define PMD_X4_MODE_GEN2r_LANE_MODEf_SET BCMI_TSCF_XGXS_PMD_X4_MODE_GEN2r_LANE_MODEf_SET
#define READ_PMD_X4_MODE_GEN2r BCMI_TSCF_XGXS_READ_PMD_X4_MODE_GEN2r
#define WRITE_PMD_X4_MODE_GEN2r BCMI_TSCF_XGXS_WRITE_PMD_X4_MODE_GEN2r
#define MODIFY_PMD_X4_MODE_GEN2r BCMI_TSCF_XGXS_MODIFY_PMD_X4_MODE_GEN2r
#define READLN_PMD_X4_MODE_GEN2r BCMI_TSCF_XGXS_READLN_PMD_X4_MODE_GEN2r
#define WRITELN_PMD_X4_MODE_GEN2r BCMI_TSCF_XGXS_WRITELN_PMD_X4_MODE_GEN2r
#define WRITEALL_PMD_X4_MODE_GEN2r BCMI_TSCF_XGXS_WRITEALL_PMD_X4_MODE_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PMD_X4_MODE_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PMD_X4_STS_GEN2
 * BLOCKS:   PMD_X4
 * REGADDR:  0xc012
 * DESC:     PMD lane status
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     RX_LOCK_STS      DSC RX lock indication from PMD
 *     SIGNAL_DETECT_STS Signal Detect indication from PMD
 *     RX_CLK_VLD_STS   rx_clk_vld indication from PMD
 *     TX_CLK_VLD_STS   tx_clk_vld indication from PMD
 */
#define BCMI_TSCF_XGXS_PMD_X4_STS_GEN2r (0x0000c012 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PMD_X4_STS_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PMD_X4_STS_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PMD_X4_STS_GEN2r_s {
	uint32_t v[1];
	uint32_t pmd_x4_sts_gen2[1];
	uint32_t _pmd_x4_sts_gen2;
} BCMI_TSCF_XGXS_PMD_X4_STS_GEN2r_t;

#define BCMI_TSCF_XGXS_PMD_X4_STS_GEN2r_CLR(r) (r).pmd_x4_sts_gen2[0] = 0
#define BCMI_TSCF_XGXS_PMD_X4_STS_GEN2r_SET(r,d) (r).pmd_x4_sts_gen2[0] = d
#define BCMI_TSCF_XGXS_PMD_X4_STS_GEN2r_GET(r) (r).pmd_x4_sts_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PMD_X4_STS_GEN2r_TX_CLK_VLD_STSf_GET(r) ((((r).pmd_x4_sts_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_PMD_X4_STS_GEN2r_TX_CLK_VLD_STSf_SET(r,f) (r).pmd_x4_sts_gen2[0]=(((r).pmd_x4_sts_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_PMD_X4_STS_GEN2r_RX_CLK_VLD_STSf_GET(r) ((((r).pmd_x4_sts_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_PMD_X4_STS_GEN2r_RX_CLK_VLD_STSf_SET(r,f) (r).pmd_x4_sts_gen2[0]=(((r).pmd_x4_sts_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_PMD_X4_STS_GEN2r_SIGNAL_DETECT_STSf_GET(r) ((((r).pmd_x4_sts_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_PMD_X4_STS_GEN2r_SIGNAL_DETECT_STSf_SET(r,f) (r).pmd_x4_sts_gen2[0]=(((r).pmd_x4_sts_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_PMD_X4_STS_GEN2r_RX_LOCK_STSf_GET(r) (((r).pmd_x4_sts_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_PMD_X4_STS_GEN2r_RX_LOCK_STSf_SET(r,f) (r).pmd_x4_sts_gen2[0]=(((r).pmd_x4_sts_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access PMD_X4_STS_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PMD_X4_STS_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PMD_X4_STS_GEN2r,(_r._pmd_x4_sts_gen2))
#define BCMI_TSCF_XGXS_WRITE_PMD_X4_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PMD_X4_STS_GEN2r,(_r._pmd_x4_sts_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PMD_X4_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PMD_X4_STS_GEN2r,(_r._pmd_x4_sts_gen2))
#define BCMI_TSCF_XGXS_READLN_PMD_X4_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PMD_X4_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pmd_x4_sts_gen2))
#define BCMI_TSCF_XGXS_WRITELN_PMD_X4_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PMD_X4_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pmd_x4_sts_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_PMD_X4_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PMD_X4_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._pmd_x4_sts_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PMD_X4_STS_GEN2r BCMI_TSCF_XGXS_PMD_X4_STS_GEN2r
#define PMD_X4_STS_GEN2r_SIZE BCMI_TSCF_XGXS_PMD_X4_STS_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PMD_X4_STS_GEN2r_t PMD_X4_STS_GEN2r_t;
#define PMD_X4_STS_GEN2r_CLR BCMI_TSCF_XGXS_PMD_X4_STS_GEN2r_CLR
#define PMD_X4_STS_GEN2r_SET BCMI_TSCF_XGXS_PMD_X4_STS_GEN2r_SET
#define PMD_X4_STS_GEN2r_GET BCMI_TSCF_XGXS_PMD_X4_STS_GEN2r_GET
#define PMD_X4_STS_GEN2r_TX_CLK_VLD_STSf_GET BCMI_TSCF_XGXS_PMD_X4_STS_GEN2r_TX_CLK_VLD_STSf_GET
#define PMD_X4_STS_GEN2r_TX_CLK_VLD_STSf_SET BCMI_TSCF_XGXS_PMD_X4_STS_GEN2r_TX_CLK_VLD_STSf_SET
#define PMD_X4_STS_GEN2r_RX_CLK_VLD_STSf_GET BCMI_TSCF_XGXS_PMD_X4_STS_GEN2r_RX_CLK_VLD_STSf_GET
#define PMD_X4_STS_GEN2r_RX_CLK_VLD_STSf_SET BCMI_TSCF_XGXS_PMD_X4_STS_GEN2r_RX_CLK_VLD_STSf_SET
#define PMD_X4_STS_GEN2r_SIGNAL_DETECT_STSf_GET BCMI_TSCF_XGXS_PMD_X4_STS_GEN2r_SIGNAL_DETECT_STSf_GET
#define PMD_X4_STS_GEN2r_SIGNAL_DETECT_STSf_SET BCMI_TSCF_XGXS_PMD_X4_STS_GEN2r_SIGNAL_DETECT_STSf_SET
#define PMD_X4_STS_GEN2r_RX_LOCK_STSf_GET BCMI_TSCF_XGXS_PMD_X4_STS_GEN2r_RX_LOCK_STSf_GET
#define PMD_X4_STS_GEN2r_RX_LOCK_STSf_SET BCMI_TSCF_XGXS_PMD_X4_STS_GEN2r_RX_LOCK_STSf_SET
#define READ_PMD_X4_STS_GEN2r BCMI_TSCF_XGXS_READ_PMD_X4_STS_GEN2r
#define WRITE_PMD_X4_STS_GEN2r BCMI_TSCF_XGXS_WRITE_PMD_X4_STS_GEN2r
#define MODIFY_PMD_X4_STS_GEN2r BCMI_TSCF_XGXS_MODIFY_PMD_X4_STS_GEN2r
#define READLN_PMD_X4_STS_GEN2r BCMI_TSCF_XGXS_READLN_PMD_X4_STS_GEN2r
#define WRITELN_PMD_X4_STS_GEN2r BCMI_TSCF_XGXS_WRITELN_PMD_X4_STS_GEN2r
#define WRITEALL_PMD_X4_STS_GEN2r BCMI_TSCF_XGXS_WRITEALL_PMD_X4_STS_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PMD_X4_STS_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PMD_X4_LATCH_STS_GEN2
 * BLOCKS:   PMD_X4
 * REGADDR:  0xc013
 * DESC:     PMD lane latched status
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RX_LOCK_LL       DSC RX lock indication from PMD negedge detected
 *     RX_LOCK_LH       DSC RX lock indication from PMD posedge detected
 *     SIGNAL_DETECT_LL Signal Detect indication from PMD negedge detected
 *     SIGNAL_DETECT_LH Signal Detect indication from PMD posedge detected
 *     RX_CLK_VLD_LL    rx_clk_vld indication from PMD negedge detected
 *     RX_CLK_VLD_LH    rx_clk_vld indication from PMD posedge detected
 *     RX_LOCK_LIVE     DSC RX lock live indication from PMDSame as the pmd_x4_status register field.
 *     SIGNAL_DETECT_LIVE Signal Detect live indication from PMDSame as the pmd_x4_status register field.
 *     RX_CLK_VLD_LIVE  rx_clk_vld live indication from PMDSame as the pmd_x4_status register field.
 */
#define BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r (0x0000c013 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PMD_X4_LATCH_STS_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r_s {
	uint32_t v[1];
	uint32_t pmd_x4_latch_sts_gen2[1];
	uint32_t _pmd_x4_latch_sts_gen2;
} BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r_t;

#define BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r_CLR(r) (r).pmd_x4_latch_sts_gen2[0] = 0
#define BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r_SET(r,d) (r).pmd_x4_latch_sts_gen2[0] = d
#define BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r_GET(r) (r).pmd_x4_latch_sts_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r_RX_CLK_VLD_LIVEf_GET(r) ((((r).pmd_x4_latch_sts_gen2[0]) >> 10) & 0x1)
#define BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r_RX_CLK_VLD_LIVEf_SET(r,f) (r).pmd_x4_latch_sts_gen2[0]=(((r).pmd_x4_latch_sts_gen2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r_SIGNAL_DETECT_LIVEf_GET(r) ((((r).pmd_x4_latch_sts_gen2[0]) >> 9) & 0x1)
#define BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r_SIGNAL_DETECT_LIVEf_SET(r,f) (r).pmd_x4_latch_sts_gen2[0]=(((r).pmd_x4_latch_sts_gen2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r_RX_LOCK_LIVEf_GET(r) ((((r).pmd_x4_latch_sts_gen2[0]) >> 8) & 0x1)
#define BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r_RX_LOCK_LIVEf_SET(r,f) (r).pmd_x4_latch_sts_gen2[0]=(((r).pmd_x4_latch_sts_gen2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r_RX_CLK_VLD_LHf_GET(r) ((((r).pmd_x4_latch_sts_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r_RX_CLK_VLD_LHf_SET(r,f) (r).pmd_x4_latch_sts_gen2[0]=(((r).pmd_x4_latch_sts_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r_RX_CLK_VLD_LLf_GET(r) ((((r).pmd_x4_latch_sts_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r_RX_CLK_VLD_LLf_SET(r,f) (r).pmd_x4_latch_sts_gen2[0]=(((r).pmd_x4_latch_sts_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r_SIGNAL_DETECT_LHf_GET(r) ((((r).pmd_x4_latch_sts_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r_SIGNAL_DETECT_LHf_SET(r,f) (r).pmd_x4_latch_sts_gen2[0]=(((r).pmd_x4_latch_sts_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r_SIGNAL_DETECT_LLf_GET(r) ((((r).pmd_x4_latch_sts_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r_SIGNAL_DETECT_LLf_SET(r,f) (r).pmd_x4_latch_sts_gen2[0]=(((r).pmd_x4_latch_sts_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r_RX_LOCK_LHf_GET(r) ((((r).pmd_x4_latch_sts_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r_RX_LOCK_LHf_SET(r,f) (r).pmd_x4_latch_sts_gen2[0]=(((r).pmd_x4_latch_sts_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r_RX_LOCK_LLf_GET(r) (((r).pmd_x4_latch_sts_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r_RX_LOCK_LLf_SET(r,f) (r).pmd_x4_latch_sts_gen2[0]=(((r).pmd_x4_latch_sts_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access PMD_X4_LATCH_STS_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PMD_X4_LATCH_STS_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r,(_r._pmd_x4_latch_sts_gen2))
#define BCMI_TSCF_XGXS_WRITE_PMD_X4_LATCH_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r,(_r._pmd_x4_latch_sts_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PMD_X4_LATCH_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r,(_r._pmd_x4_latch_sts_gen2))
#define BCMI_TSCF_XGXS_READLN_PMD_X4_LATCH_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pmd_x4_latch_sts_gen2))
#define BCMI_TSCF_XGXS_WRITELN_PMD_X4_LATCH_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pmd_x4_latch_sts_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_PMD_X4_LATCH_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._pmd_x4_latch_sts_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PMD_X4_LATCH_STS_GEN2r BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r
#define PMD_X4_LATCH_STS_GEN2r_SIZE BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r_t PMD_X4_LATCH_STS_GEN2r_t;
#define PMD_X4_LATCH_STS_GEN2r_CLR BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r_CLR
#define PMD_X4_LATCH_STS_GEN2r_SET BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r_SET
#define PMD_X4_LATCH_STS_GEN2r_GET BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r_GET
#define PMD_X4_LATCH_STS_GEN2r_RX_CLK_VLD_LIVEf_GET BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r_RX_CLK_VLD_LIVEf_GET
#define PMD_X4_LATCH_STS_GEN2r_RX_CLK_VLD_LIVEf_SET BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r_RX_CLK_VLD_LIVEf_SET
#define PMD_X4_LATCH_STS_GEN2r_SIGNAL_DETECT_LIVEf_GET BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r_SIGNAL_DETECT_LIVEf_GET
#define PMD_X4_LATCH_STS_GEN2r_SIGNAL_DETECT_LIVEf_SET BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r_SIGNAL_DETECT_LIVEf_SET
#define PMD_X4_LATCH_STS_GEN2r_RX_LOCK_LIVEf_GET BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r_RX_LOCK_LIVEf_GET
#define PMD_X4_LATCH_STS_GEN2r_RX_LOCK_LIVEf_SET BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r_RX_LOCK_LIVEf_SET
#define PMD_X4_LATCH_STS_GEN2r_RX_CLK_VLD_LHf_GET BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r_RX_CLK_VLD_LHf_GET
#define PMD_X4_LATCH_STS_GEN2r_RX_CLK_VLD_LHf_SET BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r_RX_CLK_VLD_LHf_SET
#define PMD_X4_LATCH_STS_GEN2r_RX_CLK_VLD_LLf_GET BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r_RX_CLK_VLD_LLf_GET
#define PMD_X4_LATCH_STS_GEN2r_RX_CLK_VLD_LLf_SET BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r_RX_CLK_VLD_LLf_SET
#define PMD_X4_LATCH_STS_GEN2r_SIGNAL_DETECT_LHf_GET BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r_SIGNAL_DETECT_LHf_GET
#define PMD_X4_LATCH_STS_GEN2r_SIGNAL_DETECT_LHf_SET BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r_SIGNAL_DETECT_LHf_SET
#define PMD_X4_LATCH_STS_GEN2r_SIGNAL_DETECT_LLf_GET BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r_SIGNAL_DETECT_LLf_GET
#define PMD_X4_LATCH_STS_GEN2r_SIGNAL_DETECT_LLf_SET BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r_SIGNAL_DETECT_LLf_SET
#define PMD_X4_LATCH_STS_GEN2r_RX_LOCK_LHf_GET BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r_RX_LOCK_LHf_GET
#define PMD_X4_LATCH_STS_GEN2r_RX_LOCK_LHf_SET BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r_RX_LOCK_LHf_SET
#define PMD_X4_LATCH_STS_GEN2r_RX_LOCK_LLf_GET BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r_RX_LOCK_LLf_GET
#define PMD_X4_LATCH_STS_GEN2r_RX_LOCK_LLf_SET BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r_RX_LOCK_LLf_SET
#define READ_PMD_X4_LATCH_STS_GEN2r BCMI_TSCF_XGXS_READ_PMD_X4_LATCH_STS_GEN2r
#define WRITE_PMD_X4_LATCH_STS_GEN2r BCMI_TSCF_XGXS_WRITE_PMD_X4_LATCH_STS_GEN2r
#define MODIFY_PMD_X4_LATCH_STS_GEN2r BCMI_TSCF_XGXS_MODIFY_PMD_X4_LATCH_STS_GEN2r
#define READLN_PMD_X4_LATCH_STS_GEN2r BCMI_TSCF_XGXS_READLN_PMD_X4_LATCH_STS_GEN2r
#define WRITELN_PMD_X4_LATCH_STS_GEN2r BCMI_TSCF_XGXS_WRITELN_PMD_X4_LATCH_STS_GEN2r
#define WRITEALL_PMD_X4_LATCH_STS_GEN2r BCMI_TSCF_XGXS_WRITEALL_PMD_X4_LATCH_STS_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PMD_X4_LATCH_STS_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PMD_X4_OVRR_GEN2
 * BLOCKS:   PMD_X4
 * REGADDR:  0xc014
 * DESC:     PMD lane override
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RX_LOCK_OVRD     Override for DSC RX lock indication from PMD
 *     SIGNAL_DETECT_OVRD Override for Signal Detect indication from PMD
 *     RX_CLK_VLD_OVRD  Override rx_clk_vld indication from PMD
 *     LANE_MODE_OEN    Lane mode override enable
 *     OSR_MODE_OEN     OSR mode, overrideOnly used for Speed Control bypass operation
 *     TX_DISABLE_OEN   tx_disable override enableOnly used for Speed Control bypass operation and local loopback.
 *     LN_DP_H_RSTB_OEN PMD Lane Datapath reset override enableOnly used for Speed Control bypass operation
 *     TX_CLK_VLD_OVRD  Override tx_clk_vld indication from PMD
 */
#define BCMI_TSCF_XGXS_PMD_X4_OVRR_GEN2r (0x0000c014 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PMD_X4_OVRR_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PMD_X4_OVRR_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PMD_X4_OVRR_GEN2r_s {
	uint32_t v[1];
	uint32_t pmd_x4_ovrr_gen2[1];
	uint32_t _pmd_x4_ovrr_gen2;
} BCMI_TSCF_XGXS_PMD_X4_OVRR_GEN2r_t;

#define BCMI_TSCF_XGXS_PMD_X4_OVRR_GEN2r_CLR(r) (r).pmd_x4_ovrr_gen2[0] = 0
#define BCMI_TSCF_XGXS_PMD_X4_OVRR_GEN2r_SET(r,d) (r).pmd_x4_ovrr_gen2[0] = d
#define BCMI_TSCF_XGXS_PMD_X4_OVRR_GEN2r_GET(r) (r).pmd_x4_ovrr_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PMD_X4_OVRR_GEN2r_TX_CLK_VLD_OVRDf_GET(r) ((((r).pmd_x4_ovrr_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_PMD_X4_OVRR_GEN2r_TX_CLK_VLD_OVRDf_SET(r,f) (r).pmd_x4_ovrr_gen2[0]=(((r).pmd_x4_ovrr_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_PMD_X4_OVRR_GEN2r_LN_DP_H_RSTB_OENf_GET(r) ((((r).pmd_x4_ovrr_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_PMD_X4_OVRR_GEN2r_LN_DP_H_RSTB_OENf_SET(r,f) (r).pmd_x4_ovrr_gen2[0]=(((r).pmd_x4_ovrr_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_PMD_X4_OVRR_GEN2r_TX_DISABLE_OENf_GET(r) ((((r).pmd_x4_ovrr_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_PMD_X4_OVRR_GEN2r_TX_DISABLE_OENf_SET(r,f) (r).pmd_x4_ovrr_gen2[0]=(((r).pmd_x4_ovrr_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_PMD_X4_OVRR_GEN2r_OSR_MODE_OENf_GET(r) ((((r).pmd_x4_ovrr_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_PMD_X4_OVRR_GEN2r_OSR_MODE_OENf_SET(r,f) (r).pmd_x4_ovrr_gen2[0]=(((r).pmd_x4_ovrr_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_PMD_X4_OVRR_GEN2r_LANE_MODE_OENf_GET(r) ((((r).pmd_x4_ovrr_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_PMD_X4_OVRR_GEN2r_LANE_MODE_OENf_SET(r,f) (r).pmd_x4_ovrr_gen2[0]=(((r).pmd_x4_ovrr_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_PMD_X4_OVRR_GEN2r_RX_CLK_VLD_OVRDf_GET(r) ((((r).pmd_x4_ovrr_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_PMD_X4_OVRR_GEN2r_RX_CLK_VLD_OVRDf_SET(r,f) (r).pmd_x4_ovrr_gen2[0]=(((r).pmd_x4_ovrr_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_PMD_X4_OVRR_GEN2r_SIGNAL_DETECT_OVRDf_GET(r) ((((r).pmd_x4_ovrr_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_PMD_X4_OVRR_GEN2r_SIGNAL_DETECT_OVRDf_SET(r,f) (r).pmd_x4_ovrr_gen2[0]=(((r).pmd_x4_ovrr_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_PMD_X4_OVRR_GEN2r_RX_LOCK_OVRDf_GET(r) (((r).pmd_x4_ovrr_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_PMD_X4_OVRR_GEN2r_RX_LOCK_OVRDf_SET(r,f) (r).pmd_x4_ovrr_gen2[0]=(((r).pmd_x4_ovrr_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access PMD_X4_OVRR_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PMD_X4_OVRR_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PMD_X4_OVRR_GEN2r,(_r._pmd_x4_ovrr_gen2))
#define BCMI_TSCF_XGXS_WRITE_PMD_X4_OVRR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PMD_X4_OVRR_GEN2r,(_r._pmd_x4_ovrr_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PMD_X4_OVRR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PMD_X4_OVRR_GEN2r,(_r._pmd_x4_ovrr_gen2))
#define BCMI_TSCF_XGXS_READLN_PMD_X4_OVRR_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PMD_X4_OVRR_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pmd_x4_ovrr_gen2))
#define BCMI_TSCF_XGXS_WRITELN_PMD_X4_OVRR_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PMD_X4_OVRR_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pmd_x4_ovrr_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_PMD_X4_OVRR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PMD_X4_OVRR_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._pmd_x4_ovrr_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PMD_X4_OVRR_GEN2r BCMI_TSCF_XGXS_PMD_X4_OVRR_GEN2r
#define PMD_X4_OVRR_GEN2r_SIZE BCMI_TSCF_XGXS_PMD_X4_OVRR_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PMD_X4_OVRR_GEN2r_t PMD_X4_OVRR_GEN2r_t;
#define PMD_X4_OVRR_GEN2r_CLR BCMI_TSCF_XGXS_PMD_X4_OVRR_GEN2r_CLR
#define PMD_X4_OVRR_GEN2r_SET BCMI_TSCF_XGXS_PMD_X4_OVRR_GEN2r_SET
#define PMD_X4_OVRR_GEN2r_GET BCMI_TSCF_XGXS_PMD_X4_OVRR_GEN2r_GET
#define PMD_X4_OVRR_GEN2r_TX_CLK_VLD_OVRDf_GET BCMI_TSCF_XGXS_PMD_X4_OVRR_GEN2r_TX_CLK_VLD_OVRDf_GET
#define PMD_X4_OVRR_GEN2r_TX_CLK_VLD_OVRDf_SET BCMI_TSCF_XGXS_PMD_X4_OVRR_GEN2r_TX_CLK_VLD_OVRDf_SET
#define PMD_X4_OVRR_GEN2r_LN_DP_H_RSTB_OENf_GET BCMI_TSCF_XGXS_PMD_X4_OVRR_GEN2r_LN_DP_H_RSTB_OENf_GET
#define PMD_X4_OVRR_GEN2r_LN_DP_H_RSTB_OENf_SET BCMI_TSCF_XGXS_PMD_X4_OVRR_GEN2r_LN_DP_H_RSTB_OENf_SET
#define PMD_X4_OVRR_GEN2r_TX_DISABLE_OENf_GET BCMI_TSCF_XGXS_PMD_X4_OVRR_GEN2r_TX_DISABLE_OENf_GET
#define PMD_X4_OVRR_GEN2r_TX_DISABLE_OENf_SET BCMI_TSCF_XGXS_PMD_X4_OVRR_GEN2r_TX_DISABLE_OENf_SET
#define PMD_X4_OVRR_GEN2r_OSR_MODE_OENf_GET BCMI_TSCF_XGXS_PMD_X4_OVRR_GEN2r_OSR_MODE_OENf_GET
#define PMD_X4_OVRR_GEN2r_OSR_MODE_OENf_SET BCMI_TSCF_XGXS_PMD_X4_OVRR_GEN2r_OSR_MODE_OENf_SET
#define PMD_X4_OVRR_GEN2r_LANE_MODE_OENf_GET BCMI_TSCF_XGXS_PMD_X4_OVRR_GEN2r_LANE_MODE_OENf_GET
#define PMD_X4_OVRR_GEN2r_LANE_MODE_OENf_SET BCMI_TSCF_XGXS_PMD_X4_OVRR_GEN2r_LANE_MODE_OENf_SET
#define PMD_X4_OVRR_GEN2r_RX_CLK_VLD_OVRDf_GET BCMI_TSCF_XGXS_PMD_X4_OVRR_GEN2r_RX_CLK_VLD_OVRDf_GET
#define PMD_X4_OVRR_GEN2r_RX_CLK_VLD_OVRDf_SET BCMI_TSCF_XGXS_PMD_X4_OVRR_GEN2r_RX_CLK_VLD_OVRDf_SET
#define PMD_X4_OVRR_GEN2r_SIGNAL_DETECT_OVRDf_GET BCMI_TSCF_XGXS_PMD_X4_OVRR_GEN2r_SIGNAL_DETECT_OVRDf_GET
#define PMD_X4_OVRR_GEN2r_SIGNAL_DETECT_OVRDf_SET BCMI_TSCF_XGXS_PMD_X4_OVRR_GEN2r_SIGNAL_DETECT_OVRDf_SET
#define PMD_X4_OVRR_GEN2r_RX_LOCK_OVRDf_GET BCMI_TSCF_XGXS_PMD_X4_OVRR_GEN2r_RX_LOCK_OVRDf_GET
#define PMD_X4_OVRR_GEN2r_RX_LOCK_OVRDf_SET BCMI_TSCF_XGXS_PMD_X4_OVRR_GEN2r_RX_LOCK_OVRDf_SET
#define READ_PMD_X4_OVRR_GEN2r BCMI_TSCF_XGXS_READ_PMD_X4_OVRR_GEN2r
#define WRITE_PMD_X4_OVRR_GEN2r BCMI_TSCF_XGXS_WRITE_PMD_X4_OVRR_GEN2r
#define MODIFY_PMD_X4_OVRR_GEN2r BCMI_TSCF_XGXS_MODIFY_PMD_X4_OVRR_GEN2r
#define READLN_PMD_X4_OVRR_GEN2r BCMI_TSCF_XGXS_READLN_PMD_X4_OVRR_GEN2r
#define WRITELN_PMD_X4_OVRR_GEN2r BCMI_TSCF_XGXS_WRITELN_PMD_X4_OVRR_GEN2r
#define WRITEALL_PMD_X4_OVRR_GEN2r BCMI_TSCF_XGXS_WRITEALL_PMD_X4_OVRR_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PMD_X4_OVRR_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PMD_X4_EEE_CTL_GEN2
 * BLOCKS:   PMD_X4
 * REGADDR:  0xc018
 * DESC:     PMD lane eee controls
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TX_MODE          EEE tx low power modeEEE low power operation is not supported by TSC
 *     RX_MODE          EEE rx low power modeEEE low power operation is not supported by TSC
 */
#define BCMI_TSCF_XGXS_PMD_X4_EEE_CTL_GEN2r (0x0000c018 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PMD_X4_EEE_CTL_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PMD_X4_EEE_CTL_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PMD_X4_EEE_CTL_GEN2r_s {
	uint32_t v[1];
	uint32_t pmd_x4_eee_ctl_gen2[1];
	uint32_t _pmd_x4_eee_ctl_gen2;
} BCMI_TSCF_XGXS_PMD_X4_EEE_CTL_GEN2r_t;

#define BCMI_TSCF_XGXS_PMD_X4_EEE_CTL_GEN2r_CLR(r) (r).pmd_x4_eee_ctl_gen2[0] = 0
#define BCMI_TSCF_XGXS_PMD_X4_EEE_CTL_GEN2r_SET(r,d) (r).pmd_x4_eee_ctl_gen2[0] = d
#define BCMI_TSCF_XGXS_PMD_X4_EEE_CTL_GEN2r_GET(r) (r).pmd_x4_eee_ctl_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PMD_X4_EEE_CTL_GEN2r_RX_MODEf_GET(r) ((((r).pmd_x4_eee_ctl_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_PMD_X4_EEE_CTL_GEN2r_RX_MODEf_SET(r,f) (r).pmd_x4_eee_ctl_gen2[0]=(((r).pmd_x4_eee_ctl_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_PMD_X4_EEE_CTL_GEN2r_TX_MODEf_GET(r) (((r).pmd_x4_eee_ctl_gen2[0]) & 0x3)
#define BCMI_TSCF_XGXS_PMD_X4_EEE_CTL_GEN2r_TX_MODEf_SET(r,f) (r).pmd_x4_eee_ctl_gen2[0]=(((r).pmd_x4_eee_ctl_gen2[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access PMD_X4_EEE_CTL_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PMD_X4_EEE_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PMD_X4_EEE_CTL_GEN2r,(_r._pmd_x4_eee_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITE_PMD_X4_EEE_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PMD_X4_EEE_CTL_GEN2r,(_r._pmd_x4_eee_ctl_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PMD_X4_EEE_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PMD_X4_EEE_CTL_GEN2r,(_r._pmd_x4_eee_ctl_gen2))
#define BCMI_TSCF_XGXS_READLN_PMD_X4_EEE_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PMD_X4_EEE_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pmd_x4_eee_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITELN_PMD_X4_EEE_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PMD_X4_EEE_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pmd_x4_eee_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_PMD_X4_EEE_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PMD_X4_EEE_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._pmd_x4_eee_ctl_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PMD_X4_EEE_CTL_GEN2r BCMI_TSCF_XGXS_PMD_X4_EEE_CTL_GEN2r
#define PMD_X4_EEE_CTL_GEN2r_SIZE BCMI_TSCF_XGXS_PMD_X4_EEE_CTL_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PMD_X4_EEE_CTL_GEN2r_t PMD_X4_EEE_CTL_GEN2r_t;
#define PMD_X4_EEE_CTL_GEN2r_CLR BCMI_TSCF_XGXS_PMD_X4_EEE_CTL_GEN2r_CLR
#define PMD_X4_EEE_CTL_GEN2r_SET BCMI_TSCF_XGXS_PMD_X4_EEE_CTL_GEN2r_SET
#define PMD_X4_EEE_CTL_GEN2r_GET BCMI_TSCF_XGXS_PMD_X4_EEE_CTL_GEN2r_GET
#define PMD_X4_EEE_CTL_GEN2r_RX_MODEf_GET BCMI_TSCF_XGXS_PMD_X4_EEE_CTL_GEN2r_RX_MODEf_GET
#define PMD_X4_EEE_CTL_GEN2r_RX_MODEf_SET BCMI_TSCF_XGXS_PMD_X4_EEE_CTL_GEN2r_RX_MODEf_SET
#define PMD_X4_EEE_CTL_GEN2r_TX_MODEf_GET BCMI_TSCF_XGXS_PMD_X4_EEE_CTL_GEN2r_TX_MODEf_GET
#define PMD_X4_EEE_CTL_GEN2r_TX_MODEf_SET BCMI_TSCF_XGXS_PMD_X4_EEE_CTL_GEN2r_TX_MODEf_SET
#define READ_PMD_X4_EEE_CTL_GEN2r BCMI_TSCF_XGXS_READ_PMD_X4_EEE_CTL_GEN2r
#define WRITE_PMD_X4_EEE_CTL_GEN2r BCMI_TSCF_XGXS_WRITE_PMD_X4_EEE_CTL_GEN2r
#define MODIFY_PMD_X4_EEE_CTL_GEN2r BCMI_TSCF_XGXS_MODIFY_PMD_X4_EEE_CTL_GEN2r
#define READLN_PMD_X4_EEE_CTL_GEN2r BCMI_TSCF_XGXS_READLN_PMD_X4_EEE_CTL_GEN2r
#define WRITELN_PMD_X4_EEE_CTL_GEN2r BCMI_TSCF_XGXS_WRITELN_PMD_X4_EEE_CTL_GEN2r
#define WRITEALL_PMD_X4_EEE_CTL_GEN2r BCMI_TSCF_XGXS_WRITEALL_PMD_X4_EEE_CTL_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PMD_X4_EEE_CTL_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PMD_X4_EEE_STS_GEN2
 * BLOCKS:   PMD_X4
 * REGADDR:  0xc019
 * DESC:     PMD lane eee status
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     ENERGY_DETECT    EEE Energy detection indication from PMDEEE low power operation is not supported by TSC
 */
#define BCMI_TSCF_XGXS_PMD_X4_EEE_STS_GEN2r (0x0000c019 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PMD_X4_EEE_STS_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PMD_X4_EEE_STS_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PMD_X4_EEE_STS_GEN2r_s {
	uint32_t v[1];
	uint32_t pmd_x4_eee_sts_gen2[1];
	uint32_t _pmd_x4_eee_sts_gen2;
} BCMI_TSCF_XGXS_PMD_X4_EEE_STS_GEN2r_t;

#define BCMI_TSCF_XGXS_PMD_X4_EEE_STS_GEN2r_CLR(r) (r).pmd_x4_eee_sts_gen2[0] = 0
#define BCMI_TSCF_XGXS_PMD_X4_EEE_STS_GEN2r_SET(r,d) (r).pmd_x4_eee_sts_gen2[0] = d
#define BCMI_TSCF_XGXS_PMD_X4_EEE_STS_GEN2r_GET(r) (r).pmd_x4_eee_sts_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PMD_X4_EEE_STS_GEN2r_ENERGY_DETECTf_GET(r) (((r).pmd_x4_eee_sts_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_PMD_X4_EEE_STS_GEN2r_ENERGY_DETECTf_SET(r,f) (r).pmd_x4_eee_sts_gen2[0]=(((r).pmd_x4_eee_sts_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access PMD_X4_EEE_STS_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PMD_X4_EEE_STS_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PMD_X4_EEE_STS_GEN2r,(_r._pmd_x4_eee_sts_gen2))
#define BCMI_TSCF_XGXS_WRITE_PMD_X4_EEE_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PMD_X4_EEE_STS_GEN2r,(_r._pmd_x4_eee_sts_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PMD_X4_EEE_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PMD_X4_EEE_STS_GEN2r,(_r._pmd_x4_eee_sts_gen2))
#define BCMI_TSCF_XGXS_READLN_PMD_X4_EEE_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PMD_X4_EEE_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pmd_x4_eee_sts_gen2))
#define BCMI_TSCF_XGXS_WRITELN_PMD_X4_EEE_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PMD_X4_EEE_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pmd_x4_eee_sts_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_PMD_X4_EEE_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PMD_X4_EEE_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._pmd_x4_eee_sts_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PMD_X4_EEE_STS_GEN2r BCMI_TSCF_XGXS_PMD_X4_EEE_STS_GEN2r
#define PMD_X4_EEE_STS_GEN2r_SIZE BCMI_TSCF_XGXS_PMD_X4_EEE_STS_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PMD_X4_EEE_STS_GEN2r_t PMD_X4_EEE_STS_GEN2r_t;
#define PMD_X4_EEE_STS_GEN2r_CLR BCMI_TSCF_XGXS_PMD_X4_EEE_STS_GEN2r_CLR
#define PMD_X4_EEE_STS_GEN2r_SET BCMI_TSCF_XGXS_PMD_X4_EEE_STS_GEN2r_SET
#define PMD_X4_EEE_STS_GEN2r_GET BCMI_TSCF_XGXS_PMD_X4_EEE_STS_GEN2r_GET
#define PMD_X4_EEE_STS_GEN2r_ENERGY_DETECTf_GET BCMI_TSCF_XGXS_PMD_X4_EEE_STS_GEN2r_ENERGY_DETECTf_GET
#define PMD_X4_EEE_STS_GEN2r_ENERGY_DETECTf_SET BCMI_TSCF_XGXS_PMD_X4_EEE_STS_GEN2r_ENERGY_DETECTf_SET
#define READ_PMD_X4_EEE_STS_GEN2r BCMI_TSCF_XGXS_READ_PMD_X4_EEE_STS_GEN2r
#define WRITE_PMD_X4_EEE_STS_GEN2r BCMI_TSCF_XGXS_WRITE_PMD_X4_EEE_STS_GEN2r
#define MODIFY_PMD_X4_EEE_STS_GEN2r BCMI_TSCF_XGXS_MODIFY_PMD_X4_EEE_STS_GEN2r
#define READLN_PMD_X4_EEE_STS_GEN2r BCMI_TSCF_XGXS_READLN_PMD_X4_EEE_STS_GEN2r
#define WRITELN_PMD_X4_EEE_STS_GEN2r BCMI_TSCF_XGXS_WRITELN_PMD_X4_EEE_STS_GEN2r
#define WRITEALL_PMD_X4_EEE_STS_GEN2r BCMI_TSCF_XGXS_WRITEALL_PMD_X4_EEE_STS_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PMD_X4_EEE_STS_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X4_CTL_GEN2
 * BLOCKS:   SC_X4_CONTROL
 * REGADDR:  0xc050
 * DESC:     SW speed change control
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     SPEED            
 *     SW_SPEED_CHANGE  Start SW speed change.HW will detect possedge of this field and start or restart the speed change logic.To restart speed change logic SW must write 0 to this bit and then write 1.
 */
#define BCMI_TSCF_XGXS_SC_X4_CTL_GEN2r (0x0000c050 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X4_CTL_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X4_CTL_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X4_CTL_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x4_ctl_gen2[1];
	uint32_t _sc_x4_ctl_gen2;
} BCMI_TSCF_XGXS_SC_X4_CTL_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X4_CTL_GEN2r_CLR(r) (r).sc_x4_ctl_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X4_CTL_GEN2r_SET(r,d) (r).sc_x4_ctl_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X4_CTL_GEN2r_GET(r) (r).sc_x4_ctl_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X4_CTL_GEN2r_SW_SPEED_CHANGEf_GET(r) ((((r).sc_x4_ctl_gen2[0]) >> 8) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_CTL_GEN2r_SW_SPEED_CHANGEf_SET(r,f) (r).sc_x4_ctl_gen2[0]=(((r).sc_x4_ctl_gen2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_XGXS_SC_X4_CTL_GEN2r_SPEEDf_GET(r) (((r).sc_x4_ctl_gen2[0]) & 0xff)
#define BCMI_TSCF_XGXS_SC_X4_CTL_GEN2r_SPEEDf_SET(r,f) (r).sc_x4_ctl_gen2[0]=(((r).sc_x4_ctl_gen2[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access SC_X4_CTL_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X4_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X4_CTL_GEN2r,(_r._sc_x4_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X4_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_CTL_GEN2r,(_r._sc_x4_ctl_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X4_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_CTL_GEN2r,(_r._sc_x4_ctl_gen2))
#define BCMI_TSCF_XGXS_READLN_SC_X4_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X4_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITELN_SC_X4_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_SC_X4_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sc_x4_ctl_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X4_CTL_GEN2r BCMI_TSCF_XGXS_SC_X4_CTL_GEN2r
#define SC_X4_CTL_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X4_CTL_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X4_CTL_GEN2r_t SC_X4_CTL_GEN2r_t;
#define SC_X4_CTL_GEN2r_CLR BCMI_TSCF_XGXS_SC_X4_CTL_GEN2r_CLR
#define SC_X4_CTL_GEN2r_SET BCMI_TSCF_XGXS_SC_X4_CTL_GEN2r_SET
#define SC_X4_CTL_GEN2r_GET BCMI_TSCF_XGXS_SC_X4_CTL_GEN2r_GET
#define SC_X4_CTL_GEN2r_SW_SPEED_CHANGEf_GET BCMI_TSCF_XGXS_SC_X4_CTL_GEN2r_SW_SPEED_CHANGEf_GET
#define SC_X4_CTL_GEN2r_SW_SPEED_CHANGEf_SET BCMI_TSCF_XGXS_SC_X4_CTL_GEN2r_SW_SPEED_CHANGEf_SET
#define SC_X4_CTL_GEN2r_SPEEDf_GET BCMI_TSCF_XGXS_SC_X4_CTL_GEN2r_SPEEDf_GET
#define SC_X4_CTL_GEN2r_SPEEDf_SET BCMI_TSCF_XGXS_SC_X4_CTL_GEN2r_SPEEDf_SET
#define READ_SC_X4_CTL_GEN2r BCMI_TSCF_XGXS_READ_SC_X4_CTL_GEN2r
#define WRITE_SC_X4_CTL_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X4_CTL_GEN2r
#define MODIFY_SC_X4_CTL_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X4_CTL_GEN2r
#define READLN_SC_X4_CTL_GEN2r BCMI_TSCF_XGXS_READLN_SC_X4_CTL_GEN2r
#define WRITELN_SC_X4_CTL_GEN2r BCMI_TSCF_XGXS_WRITELN_SC_X4_CTL_GEN2r
#define WRITEALL_SC_X4_CTL_GEN2r BCMI_TSCF_XGXS_WRITEALL_SC_X4_CTL_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X4_CTL_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X4_STS_GEN2
 * BLOCKS:   SC_X4_CONTROL
 * REGADDR:  0xc051
 * DESC:     SW speed change status
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     SW_SPEED_CHANGE_DONE Read clear bit indicating that SW initiated speed change completed
 *     SW_SPEED_CONFIG_VLD Read clear bit indicating that resolved speed configuration in stutus registers can be read
 */
#define BCMI_TSCF_XGXS_SC_X4_STS_GEN2r (0x0000c051 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X4_STS_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X4_STS_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X4_STS_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x4_sts_gen2[1];
	uint32_t _sc_x4_sts_gen2;
} BCMI_TSCF_XGXS_SC_X4_STS_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X4_STS_GEN2r_CLR(r) (r).sc_x4_sts_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X4_STS_GEN2r_SET(r,d) (r).sc_x4_sts_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X4_STS_GEN2r_GET(r) (r).sc_x4_sts_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X4_STS_GEN2r_SW_SPEED_CONFIG_VLDf_GET(r) ((((r).sc_x4_sts_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_STS_GEN2r_SW_SPEED_CONFIG_VLDf_SET(r,f) (r).sc_x4_sts_gen2[0]=(((r).sc_x4_sts_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_SC_X4_STS_GEN2r_SW_SPEED_CHANGE_DONEf_GET(r) (((r).sc_x4_sts_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_STS_GEN2r_SW_SPEED_CHANGE_DONEf_SET(r,f) (r).sc_x4_sts_gen2[0]=(((r).sc_x4_sts_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access SC_X4_STS_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X4_STS_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X4_STS_GEN2r,(_r._sc_x4_sts_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X4_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_STS_GEN2r,(_r._sc_x4_sts_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X4_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_STS_GEN2r,(_r._sc_x4_sts_gen2))
#define BCMI_TSCF_XGXS_READLN_SC_X4_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X4_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_sts_gen2))
#define BCMI_TSCF_XGXS_WRITELN_SC_X4_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_sts_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_SC_X4_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sc_x4_sts_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X4_STS_GEN2r BCMI_TSCF_XGXS_SC_X4_STS_GEN2r
#define SC_X4_STS_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X4_STS_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X4_STS_GEN2r_t SC_X4_STS_GEN2r_t;
#define SC_X4_STS_GEN2r_CLR BCMI_TSCF_XGXS_SC_X4_STS_GEN2r_CLR
#define SC_X4_STS_GEN2r_SET BCMI_TSCF_XGXS_SC_X4_STS_GEN2r_SET
#define SC_X4_STS_GEN2r_GET BCMI_TSCF_XGXS_SC_X4_STS_GEN2r_GET
#define SC_X4_STS_GEN2r_SW_SPEED_CONFIG_VLDf_GET BCMI_TSCF_XGXS_SC_X4_STS_GEN2r_SW_SPEED_CONFIG_VLDf_GET
#define SC_X4_STS_GEN2r_SW_SPEED_CONFIG_VLDf_SET BCMI_TSCF_XGXS_SC_X4_STS_GEN2r_SW_SPEED_CONFIG_VLDf_SET
#define SC_X4_STS_GEN2r_SW_SPEED_CHANGE_DONEf_GET BCMI_TSCF_XGXS_SC_X4_STS_GEN2r_SW_SPEED_CHANGE_DONEf_GET
#define SC_X4_STS_GEN2r_SW_SPEED_CHANGE_DONEf_SET BCMI_TSCF_XGXS_SC_X4_STS_GEN2r_SW_SPEED_CHANGE_DONEf_SET
#define READ_SC_X4_STS_GEN2r BCMI_TSCF_XGXS_READ_SC_X4_STS_GEN2r
#define WRITE_SC_X4_STS_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X4_STS_GEN2r
#define MODIFY_SC_X4_STS_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X4_STS_GEN2r
#define READLN_SC_X4_STS_GEN2r BCMI_TSCF_XGXS_READLN_SC_X4_STS_GEN2r
#define WRITELN_SC_X4_STS_GEN2r BCMI_TSCF_XGXS_WRITELN_SC_X4_STS_GEN2r
#define WRITEALL_SC_X4_STS_GEN2r BCMI_TSCF_XGXS_WRITEALL_SC_X4_STS_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X4_STS_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X4_ERR_GEN2
 * BLOCKS:   SC_X4_CONTROL
 * REGADDR:  0xc052
 * DESC:     Speed control error indication
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     PLL_LOCK_TIMED_OUT Indication of timeout during PLL lock
 *     PMD_LOCK_TIMED_OUT Indication of timeout during PMD RX lock
 */
#define BCMI_TSCF_XGXS_SC_X4_ERR_GEN2r (0x0000c052 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X4_ERR_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X4_ERR_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X4_ERR_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x4_err_gen2[1];
	uint32_t _sc_x4_err_gen2;
} BCMI_TSCF_XGXS_SC_X4_ERR_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X4_ERR_GEN2r_CLR(r) (r).sc_x4_err_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X4_ERR_GEN2r_SET(r,d) (r).sc_x4_err_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X4_ERR_GEN2r_GET(r) (r).sc_x4_err_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X4_ERR_GEN2r_PMD_LOCK_TIMED_OUTf_GET(r) ((((r).sc_x4_err_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_ERR_GEN2r_PMD_LOCK_TIMED_OUTf_SET(r,f) (r).sc_x4_err_gen2[0]=(((r).sc_x4_err_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_SC_X4_ERR_GEN2r_PLL_LOCK_TIMED_OUTf_GET(r) (((r).sc_x4_err_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_ERR_GEN2r_PLL_LOCK_TIMED_OUTf_SET(r,f) (r).sc_x4_err_gen2[0]=(((r).sc_x4_err_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access SC_X4_ERR_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X4_ERR_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X4_ERR_GEN2r,(_r._sc_x4_err_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X4_ERR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_ERR_GEN2r,(_r._sc_x4_err_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X4_ERR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_ERR_GEN2r,(_r._sc_x4_err_gen2))
#define BCMI_TSCF_XGXS_READLN_SC_X4_ERR_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X4_ERR_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_err_gen2))
#define BCMI_TSCF_XGXS_WRITELN_SC_X4_ERR_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_ERR_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_err_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_SC_X4_ERR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_ERR_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sc_x4_err_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X4_ERR_GEN2r BCMI_TSCF_XGXS_SC_X4_ERR_GEN2r
#define SC_X4_ERR_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X4_ERR_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X4_ERR_GEN2r_t SC_X4_ERR_GEN2r_t;
#define SC_X4_ERR_GEN2r_CLR BCMI_TSCF_XGXS_SC_X4_ERR_GEN2r_CLR
#define SC_X4_ERR_GEN2r_SET BCMI_TSCF_XGXS_SC_X4_ERR_GEN2r_SET
#define SC_X4_ERR_GEN2r_GET BCMI_TSCF_XGXS_SC_X4_ERR_GEN2r_GET
#define SC_X4_ERR_GEN2r_PMD_LOCK_TIMED_OUTf_GET BCMI_TSCF_XGXS_SC_X4_ERR_GEN2r_PMD_LOCK_TIMED_OUTf_GET
#define SC_X4_ERR_GEN2r_PMD_LOCK_TIMED_OUTf_SET BCMI_TSCF_XGXS_SC_X4_ERR_GEN2r_PMD_LOCK_TIMED_OUTf_SET
#define SC_X4_ERR_GEN2r_PLL_LOCK_TIMED_OUTf_GET BCMI_TSCF_XGXS_SC_X4_ERR_GEN2r_PLL_LOCK_TIMED_OUTf_GET
#define SC_X4_ERR_GEN2r_PLL_LOCK_TIMED_OUTf_SET BCMI_TSCF_XGXS_SC_X4_ERR_GEN2r_PLL_LOCK_TIMED_OUTf_SET
#define READ_SC_X4_ERR_GEN2r BCMI_TSCF_XGXS_READ_SC_X4_ERR_GEN2r
#define WRITE_SC_X4_ERR_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X4_ERR_GEN2r
#define MODIFY_SC_X4_ERR_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X4_ERR_GEN2r
#define READLN_SC_X4_ERR_GEN2r BCMI_TSCF_XGXS_READLN_SC_X4_ERR_GEN2r
#define WRITELN_SC_X4_ERR_GEN2r BCMI_TSCF_XGXS_WRITELN_SC_X4_ERR_GEN2r
#define WRITEALL_SC_X4_ERR_GEN2r BCMI_TSCF_XGXS_WRITEALL_SC_X4_ERR_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X4_ERR_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X4_MSA_25G_50G_CTL_GEN2
 * BLOCKS:   SC_X4_CONTROL
 * REGADDR:  0xc053
 * DESC:     MSA 25 and 50G control register
 * RESETVAL: 0x30c (780)
 * ACCESS:   R/W
 * FIELDS:
 *     CL74_SHCORRUPT_25GMSA This bit will choose whether to corrupt all SH or only 5 SH for 25G MSA Speed0: Only 5 SH1: all SH
 *     CL74_SHCORRUPT_50GMSA This bit will choose whether to corrupt all SH or only 5 SH for 50G MSA Speed0: Only 5 SH1: all SH
 *     MSA_COUNT_SEL    This bit will select between 16 (cl49) and 97 (cl82) count for BER for MSA 25G and 50G Speeds.0: select cl49 register1: select cl82 register
 *     MSA_WINDOW_SEL   This bit will select between cl49 window and cl82 window count for BER for MSA 25G and 50G Speeds.0: select cl49 window1: select cl82 window
 *     MSA_25G_AM123_FORMAT this bit will select TX AM0 format for MSA 25G.0: select 40G AM1231: select 100G AM123
 *     MSA_25G_AM0_FORMAT this bit will select TX AM0 format for MSA 25G.0: select 40G AM01: select 100G AM0
 *     MSA_50G_AM123_FORMAT this bit will select TX AM0 format for MSA 25G.0: select 40G AM1231: select 100G AM123
 *     MSA_50G_AM0_FORMAT this bit will select TX AM0 format for MSA 25G.0: select 40G AM01: select 100G AM0
 *     MSA_25G_AM_EN    Disable AM TX and RX.1: AM is enabled0: AM is disabled
 *     MSA_25G_5BIT_XOR Enable disable 5 bit XOR for MSA 25G0: Disabled1: Enabled
 *     MSA_25G_CWSCR_EN Pre/Post code word scranmbler enable/disable.0: DISABLED1: ENABLED
 */
#define BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r (0x0000c053 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X4_MSA_25G_50G_CTL_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x4_msa_25g_50g_ctl_gen2[1];
	uint32_t _sc_x4_msa_25g_50g_ctl_gen2;
} BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_CLR(r) (r).sc_x4_msa_25g_50g_ctl_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_SET(r,d) (r).sc_x4_msa_25g_50g_ctl_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_GET(r) (r).sc_x4_msa_25g_50g_ctl_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_25G_CWSCR_ENf_GET(r) ((((r).sc_x4_msa_25g_50g_ctl_gen2[0]) >> 10) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_25G_CWSCR_ENf_SET(r,f) (r).sc_x4_msa_25g_50g_ctl_gen2[0]=(((r).sc_x4_msa_25g_50g_ctl_gen2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_25G_5BIT_XORf_GET(r) ((((r).sc_x4_msa_25g_50g_ctl_gen2[0]) >> 9) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_25G_5BIT_XORf_SET(r,f) (r).sc_x4_msa_25g_50g_ctl_gen2[0]=(((r).sc_x4_msa_25g_50g_ctl_gen2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_25G_AM_ENf_GET(r) ((((r).sc_x4_msa_25g_50g_ctl_gen2[0]) >> 8) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_25G_AM_ENf_SET(r,f) (r).sc_x4_msa_25g_50g_ctl_gen2[0]=(((r).sc_x4_msa_25g_50g_ctl_gen2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_50G_AM0_FORMATf_GET(r) ((((r).sc_x4_msa_25g_50g_ctl_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_50G_AM0_FORMATf_SET(r,f) (r).sc_x4_msa_25g_50g_ctl_gen2[0]=(((r).sc_x4_msa_25g_50g_ctl_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_50G_AM123_FORMATf_GET(r) ((((r).sc_x4_msa_25g_50g_ctl_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_50G_AM123_FORMATf_SET(r,f) (r).sc_x4_msa_25g_50g_ctl_gen2[0]=(((r).sc_x4_msa_25g_50g_ctl_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_25G_AM0_FORMATf_GET(r) ((((r).sc_x4_msa_25g_50g_ctl_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_25G_AM0_FORMATf_SET(r,f) (r).sc_x4_msa_25g_50g_ctl_gen2[0]=(((r).sc_x4_msa_25g_50g_ctl_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_25G_AM123_FORMATf_GET(r) ((((r).sc_x4_msa_25g_50g_ctl_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_25G_AM123_FORMATf_SET(r,f) (r).sc_x4_msa_25g_50g_ctl_gen2[0]=(((r).sc_x4_msa_25g_50g_ctl_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_WINDOW_SELf_GET(r) ((((r).sc_x4_msa_25g_50g_ctl_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_WINDOW_SELf_SET(r,f) (r).sc_x4_msa_25g_50g_ctl_gen2[0]=(((r).sc_x4_msa_25g_50g_ctl_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_COUNT_SELf_GET(r) ((((r).sc_x4_msa_25g_50g_ctl_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_COUNT_SELf_SET(r,f) (r).sc_x4_msa_25g_50g_ctl_gen2[0]=(((r).sc_x4_msa_25g_50g_ctl_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_CL74_SHCORRUPT_50GMSAf_GET(r) ((((r).sc_x4_msa_25g_50g_ctl_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_CL74_SHCORRUPT_50GMSAf_SET(r,f) (r).sc_x4_msa_25g_50g_ctl_gen2[0]=(((r).sc_x4_msa_25g_50g_ctl_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_CL74_SHCORRUPT_25GMSAf_GET(r) (((r).sc_x4_msa_25g_50g_ctl_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_CL74_SHCORRUPT_25GMSAf_SET(r,f) (r).sc_x4_msa_25g_50g_ctl_gen2[0]=(((r).sc_x4_msa_25g_50g_ctl_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access SC_X4_MSA_25G_50G_CTL_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X4_MSA_25G_50G_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r,(_r._sc_x4_msa_25g_50g_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X4_MSA_25G_50G_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r,(_r._sc_x4_msa_25g_50g_ctl_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X4_MSA_25G_50G_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r,(_r._sc_x4_msa_25g_50g_ctl_gen2))
#define BCMI_TSCF_XGXS_READLN_SC_X4_MSA_25G_50G_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_msa_25g_50g_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITELN_SC_X4_MSA_25G_50G_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_msa_25g_50g_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_SC_X4_MSA_25G_50G_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sc_x4_msa_25g_50g_ctl_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X4_MSA_25G_50G_CTL_GEN2r BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r
#define SC_X4_MSA_25G_50G_CTL_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_t SC_X4_MSA_25G_50G_CTL_GEN2r_t;
#define SC_X4_MSA_25G_50G_CTL_GEN2r_CLR BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_CLR
#define SC_X4_MSA_25G_50G_CTL_GEN2r_SET BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_SET
#define SC_X4_MSA_25G_50G_CTL_GEN2r_GET BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_GET
#define SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_25G_CWSCR_ENf_GET BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_25G_CWSCR_ENf_GET
#define SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_25G_CWSCR_ENf_SET BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_25G_CWSCR_ENf_SET
#define SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_25G_5BIT_XORf_GET BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_25G_5BIT_XORf_GET
#define SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_25G_5BIT_XORf_SET BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_25G_5BIT_XORf_SET
#define SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_25G_AM_ENf_GET BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_25G_AM_ENf_GET
#define SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_25G_AM_ENf_SET BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_25G_AM_ENf_SET
#define SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_50G_AM0_FORMATf_GET BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_50G_AM0_FORMATf_GET
#define SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_50G_AM0_FORMATf_SET BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_50G_AM0_FORMATf_SET
#define SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_50G_AM123_FORMATf_GET BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_50G_AM123_FORMATf_GET
#define SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_50G_AM123_FORMATf_SET BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_50G_AM123_FORMATf_SET
#define SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_25G_AM0_FORMATf_GET BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_25G_AM0_FORMATf_GET
#define SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_25G_AM0_FORMATf_SET BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_25G_AM0_FORMATf_SET
#define SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_25G_AM123_FORMATf_GET BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_25G_AM123_FORMATf_GET
#define SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_25G_AM123_FORMATf_SET BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_25G_AM123_FORMATf_SET
#define SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_WINDOW_SELf_GET BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_WINDOW_SELf_GET
#define SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_WINDOW_SELf_SET BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_WINDOW_SELf_SET
#define SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_COUNT_SELf_GET BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_COUNT_SELf_GET
#define SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_COUNT_SELf_SET BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_MSA_COUNT_SELf_SET
#define SC_X4_MSA_25G_50G_CTL_GEN2r_CL74_SHCORRUPT_50GMSAf_GET BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_CL74_SHCORRUPT_50GMSAf_GET
#define SC_X4_MSA_25G_50G_CTL_GEN2r_CL74_SHCORRUPT_50GMSAf_SET BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_CL74_SHCORRUPT_50GMSAf_SET
#define SC_X4_MSA_25G_50G_CTL_GEN2r_CL74_SHCORRUPT_25GMSAf_GET BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_CL74_SHCORRUPT_25GMSAf_GET
#define SC_X4_MSA_25G_50G_CTL_GEN2r_CL74_SHCORRUPT_25GMSAf_SET BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r_CL74_SHCORRUPT_25GMSAf_SET
#define READ_SC_X4_MSA_25G_50G_CTL_GEN2r BCMI_TSCF_XGXS_READ_SC_X4_MSA_25G_50G_CTL_GEN2r
#define WRITE_SC_X4_MSA_25G_50G_CTL_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X4_MSA_25G_50G_CTL_GEN2r
#define MODIFY_SC_X4_MSA_25G_50G_CTL_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X4_MSA_25G_50G_CTL_GEN2r
#define READLN_SC_X4_MSA_25G_50G_CTL_GEN2r BCMI_TSCF_XGXS_READLN_SC_X4_MSA_25G_50G_CTL_GEN2r
#define WRITELN_SC_X4_MSA_25G_50G_CTL_GEN2r BCMI_TSCF_XGXS_WRITELN_SC_X4_MSA_25G_50G_CTL_GEN2r
#define WRITEALL_SC_X4_MSA_25G_50G_CTL_GEN2r BCMI_TSCF_XGXS_WRITEALL_SC_X4_MSA_25G_50G_CTL_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X4_MSA_25G_50G_CTL_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X4_DBG_GEN2
 * BLOCKS:   SC_X4_CONTROL
 * REGADDR:  0xc054
 * DESC:     Speed control debug information
 * RESETVAL: 0x8000 (32768)
 * ACCESS:   R/W
 * FIELDS:
 *     SC_FSM_STATUS    Speed Control logic FSM debug information16'h8000 - START16'h4000 - RESET_PCS16'h2000 - RESET_PMD_LANE16'h1000 - RESET_PMD_PLL16'h0800 - APPLY_SPEED_CFG16'h0400 - WAIT_CFG_DONE16'h0200 - ACTIVATE_PMD16'h0100 - WAIT_PLL_RESET16'h0080 - PLL_LOCK_FAIL16'h0040 - ACTIVATE_TX16'h0020 - WAIT_PMD_LOCK16'h0010 - ACTIVATE_RX16'h0008 - PMD_LOCK_FAIL16'h0004 - DONE16'h0002 - STOP16'h0001 - BYPASS
 */
#define BCMI_TSCF_XGXS_SC_X4_DBG_GEN2r (0x0000c054 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X4_DBG_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X4_DBG_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X4_DBG_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x4_dbg_gen2[1];
	uint32_t _sc_x4_dbg_gen2;
} BCMI_TSCF_XGXS_SC_X4_DBG_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X4_DBG_GEN2r_CLR(r) (r).sc_x4_dbg_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X4_DBG_GEN2r_SET(r,d) (r).sc_x4_dbg_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X4_DBG_GEN2r_GET(r) (r).sc_x4_dbg_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X4_DBG_GEN2r_SC_FSM_STATUSf_GET(r) (((r).sc_x4_dbg_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_SC_X4_DBG_GEN2r_SC_FSM_STATUSf_SET(r,f) (r).sc_x4_dbg_gen2[0]=(((r).sc_x4_dbg_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access SC_X4_DBG_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X4_DBG_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X4_DBG_GEN2r,(_r._sc_x4_dbg_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X4_DBG_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_DBG_GEN2r,(_r._sc_x4_dbg_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X4_DBG_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_DBG_GEN2r,(_r._sc_x4_dbg_gen2))
#define BCMI_TSCF_XGXS_READLN_SC_X4_DBG_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X4_DBG_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_dbg_gen2))
#define BCMI_TSCF_XGXS_WRITELN_SC_X4_DBG_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_DBG_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_dbg_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_SC_X4_DBG_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_DBG_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sc_x4_dbg_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X4_DBG_GEN2r BCMI_TSCF_XGXS_SC_X4_DBG_GEN2r
#define SC_X4_DBG_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X4_DBG_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X4_DBG_GEN2r_t SC_X4_DBG_GEN2r_t;
#define SC_X4_DBG_GEN2r_CLR BCMI_TSCF_XGXS_SC_X4_DBG_GEN2r_CLR
#define SC_X4_DBG_GEN2r_SET BCMI_TSCF_XGXS_SC_X4_DBG_GEN2r_SET
#define SC_X4_DBG_GEN2r_GET BCMI_TSCF_XGXS_SC_X4_DBG_GEN2r_GET
#define SC_X4_DBG_GEN2r_SC_FSM_STATUSf_GET BCMI_TSCF_XGXS_SC_X4_DBG_GEN2r_SC_FSM_STATUSf_GET
#define SC_X4_DBG_GEN2r_SC_FSM_STATUSf_SET BCMI_TSCF_XGXS_SC_X4_DBG_GEN2r_SC_FSM_STATUSf_SET
#define READ_SC_X4_DBG_GEN2r BCMI_TSCF_XGXS_READ_SC_X4_DBG_GEN2r
#define WRITE_SC_X4_DBG_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X4_DBG_GEN2r
#define MODIFY_SC_X4_DBG_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X4_DBG_GEN2r
#define READLN_SC_X4_DBG_GEN2r BCMI_TSCF_XGXS_READLN_SC_X4_DBG_GEN2r
#define WRITELN_SC_X4_DBG_GEN2r BCMI_TSCF_XGXS_WRITELN_SC_X4_DBG_GEN2r
#define WRITEALL_SC_X4_DBG_GEN2r BCMI_TSCF_XGXS_WRITEALL_SC_X4_DBG_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X4_DBG_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X4_SC_X4_OVRR_GEN2
 * BLOCKS:   SC_X4_CONTROL
 * REGADDR:  0xc055
 * DESC:     Number of lanes for override configuration
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     NUM_LANES_OVERRIDE_VALUE Number of lanes for override configuration0   : NUM_LANES_01 - use 1 lane1   : NUM_LANES_02 - use 2 lanes2   : NUM_LANES_04 - use 4 lanes
 *     AN_FEC_SEL_OVERRIDE Valid only when AN resolves to 25G, 50G (over 2 lanes), 100G speeds.
 *     CORRUPT_2ND_GROUP Global over-ride value for corrupt_2nd_group
 *     CORRUPT_6TH_GROUP Global over-ride value for corrupt_6th_group
 *     CL74_SHCORRUPT   Global over-ride value for cl74_shcorrupt
 *     BER_COUNT_SEL    Global over-ride value for ber_count_sel
 *     BER_WINDOW_SEL   Global over-ride value for ber_window_sel
 *     USE_100G_AM0     Global over-ride value for use_100G_am0
 *     USE_100G_AM123   Global over-ride value for use_100G_am123
 */
#define BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r (0x0000c055 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X4_SC_X4_OVRR_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x4_sc_x4_ovrr_gen2[1];
	uint32_t _sc_x4_sc_x4_ovrr_gen2;
} BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r_CLR(r) (r).sc_x4_sc_x4_ovrr_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r_SET(r,d) (r).sc_x4_sc_x4_ovrr_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r_GET(r) (r).sc_x4_sc_x4_ovrr_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r_USE_100G_AM123f_GET(r) ((((r).sc_x4_sc_x4_ovrr_gen2[0]) >> 11) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r_USE_100G_AM123f_SET(r,f) (r).sc_x4_sc_x4_ovrr_gen2[0]=(((r).sc_x4_sc_x4_ovrr_gen2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r_USE_100G_AM0f_GET(r) ((((r).sc_x4_sc_x4_ovrr_gen2[0]) >> 10) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r_USE_100G_AM0f_SET(r,f) (r).sc_x4_sc_x4_ovrr_gen2[0]=(((r).sc_x4_sc_x4_ovrr_gen2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r_BER_WINDOW_SELf_GET(r) ((((r).sc_x4_sc_x4_ovrr_gen2[0]) >> 9) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r_BER_WINDOW_SELf_SET(r,f) (r).sc_x4_sc_x4_ovrr_gen2[0]=(((r).sc_x4_sc_x4_ovrr_gen2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r_BER_COUNT_SELf_GET(r) ((((r).sc_x4_sc_x4_ovrr_gen2[0]) >> 8) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r_BER_COUNT_SELf_SET(r,f) (r).sc_x4_sc_x4_ovrr_gen2[0]=(((r).sc_x4_sc_x4_ovrr_gen2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r_CL74_SHCORRUPTf_GET(r) ((((r).sc_x4_sc_x4_ovrr_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r_CL74_SHCORRUPTf_SET(r,f) (r).sc_x4_sc_x4_ovrr_gen2[0]=(((r).sc_x4_sc_x4_ovrr_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r_CORRUPT_6TH_GROUPf_GET(r) ((((r).sc_x4_sc_x4_ovrr_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r_CORRUPT_6TH_GROUPf_SET(r,f) (r).sc_x4_sc_x4_ovrr_gen2[0]=(((r).sc_x4_sc_x4_ovrr_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r_CORRUPT_2ND_GROUPf_GET(r) ((((r).sc_x4_sc_x4_ovrr_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r_CORRUPT_2ND_GROUPf_SET(r,f) (r).sc_x4_sc_x4_ovrr_gen2[0]=(((r).sc_x4_sc_x4_ovrr_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r_AN_FEC_SEL_OVERRIDEf_GET(r) ((((r).sc_x4_sc_x4_ovrr_gen2[0]) >> 3) & 0x3)
#define BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r_AN_FEC_SEL_OVERRIDEf_SET(r,f) (r).sc_x4_sc_x4_ovrr_gen2[0]=(((r).sc_x4_sc_x4_ovrr_gen2[0] & ~((uint32_t)0x3 << 3)) | ((((uint32_t)f) & 0x3) << 3)) | (3 << (16 + 3))
#define BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r_NUM_LANES_OVERRIDE_VALUEf_GET(r) (((r).sc_x4_sc_x4_ovrr_gen2[0]) & 0x7)
#define BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r_NUM_LANES_OVERRIDE_VALUEf_SET(r,f) (r).sc_x4_sc_x4_ovrr_gen2[0]=(((r).sc_x4_sc_x4_ovrr_gen2[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access SC_X4_SC_X4_OVRR_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X4_SC_X4_OVRR_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r,(_r._sc_x4_sc_x4_ovrr_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X4_SC_X4_OVRR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r,(_r._sc_x4_sc_x4_ovrr_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X4_SC_X4_OVRR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r,(_r._sc_x4_sc_x4_ovrr_gen2))
#define BCMI_TSCF_XGXS_READLN_SC_X4_SC_X4_OVRR_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_sc_x4_ovrr_gen2))
#define BCMI_TSCF_XGXS_WRITELN_SC_X4_SC_X4_OVRR_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_sc_x4_ovrr_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_SC_X4_SC_X4_OVRR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sc_x4_sc_x4_ovrr_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X4_SC_X4_OVRR_GEN2r BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r
#define SC_X4_SC_X4_OVRR_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r_t SC_X4_SC_X4_OVRR_GEN2r_t;
#define SC_X4_SC_X4_OVRR_GEN2r_CLR BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r_CLR
#define SC_X4_SC_X4_OVRR_GEN2r_SET BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r_SET
#define SC_X4_SC_X4_OVRR_GEN2r_GET BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r_GET
#define SC_X4_SC_X4_OVRR_GEN2r_USE_100G_AM123f_GET BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r_USE_100G_AM123f_GET
#define SC_X4_SC_X4_OVRR_GEN2r_USE_100G_AM123f_SET BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r_USE_100G_AM123f_SET
#define SC_X4_SC_X4_OVRR_GEN2r_USE_100G_AM0f_GET BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r_USE_100G_AM0f_GET
#define SC_X4_SC_X4_OVRR_GEN2r_USE_100G_AM0f_SET BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r_USE_100G_AM0f_SET
#define SC_X4_SC_X4_OVRR_GEN2r_BER_WINDOW_SELf_GET BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r_BER_WINDOW_SELf_GET
#define SC_X4_SC_X4_OVRR_GEN2r_BER_WINDOW_SELf_SET BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r_BER_WINDOW_SELf_SET
#define SC_X4_SC_X4_OVRR_GEN2r_BER_COUNT_SELf_GET BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r_BER_COUNT_SELf_GET
#define SC_X4_SC_X4_OVRR_GEN2r_BER_COUNT_SELf_SET BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r_BER_COUNT_SELf_SET
#define SC_X4_SC_X4_OVRR_GEN2r_CL74_SHCORRUPTf_GET BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r_CL74_SHCORRUPTf_GET
#define SC_X4_SC_X4_OVRR_GEN2r_CL74_SHCORRUPTf_SET BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r_CL74_SHCORRUPTf_SET
#define SC_X4_SC_X4_OVRR_GEN2r_CORRUPT_6TH_GROUPf_GET BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r_CORRUPT_6TH_GROUPf_GET
#define SC_X4_SC_X4_OVRR_GEN2r_CORRUPT_6TH_GROUPf_SET BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r_CORRUPT_6TH_GROUPf_SET
#define SC_X4_SC_X4_OVRR_GEN2r_CORRUPT_2ND_GROUPf_GET BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r_CORRUPT_2ND_GROUPf_GET
#define SC_X4_SC_X4_OVRR_GEN2r_CORRUPT_2ND_GROUPf_SET BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r_CORRUPT_2ND_GROUPf_SET
#define SC_X4_SC_X4_OVRR_GEN2r_AN_FEC_SEL_OVERRIDEf_GET BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r_AN_FEC_SEL_OVERRIDEf_GET
#define SC_X4_SC_X4_OVRR_GEN2r_AN_FEC_SEL_OVERRIDEf_SET BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r_AN_FEC_SEL_OVERRIDEf_SET
#define SC_X4_SC_X4_OVRR_GEN2r_NUM_LANES_OVERRIDE_VALUEf_GET BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r_NUM_LANES_OVERRIDE_VALUEf_GET
#define SC_X4_SC_X4_OVRR_GEN2r_NUM_LANES_OVERRIDE_VALUEf_SET BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r_NUM_LANES_OVERRIDE_VALUEf_SET
#define READ_SC_X4_SC_X4_OVRR_GEN2r BCMI_TSCF_XGXS_READ_SC_X4_SC_X4_OVRR_GEN2r
#define WRITE_SC_X4_SC_X4_OVRR_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X4_SC_X4_OVRR_GEN2r
#define MODIFY_SC_X4_SC_X4_OVRR_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X4_SC_X4_OVRR_GEN2r
#define READLN_SC_X4_SC_X4_OVRR_GEN2r BCMI_TSCF_XGXS_READLN_SC_X4_SC_X4_OVRR_GEN2r
#define WRITELN_SC_X4_SC_X4_OVRR_GEN2r BCMI_TSCF_XGXS_WRITELN_SC_X4_SC_X4_OVRR_GEN2r
#define WRITEALL_SC_X4_SC_X4_OVRR_GEN2r BCMI_TSCF_XGXS_WRITEALL_SC_X4_SC_X4_OVRR_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X4_SC_X4_OVRR_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X4_IEEE_25G_CTL_GEN2
 * BLOCKS:   SC_X4_CONTROL
 * REGADDR:  0xc056
 * DESC:     IEEE 25G control register
 * RESETVAL: 0x66 (102)
 * ACCESS:   R/W
 * FIELDS:
 *     CL74_SHCORRUPT_25IEEE This bit will choose whether to corrupt all SH or only 5 SH for 25G IEEE speed0: Only 5 SH1: all SH
 *     IEEE_COUNT_SEL   This bit will select between 16 (cl49) and 97 (cl82) count for BER for IEEE 25G.0: select 161: select 97
 *     IEEE_WINDOW_SEL  This bit will select between cl49 window and cl82 window count for BER for IEEE 25G.0: select cl49 window1: select cl82 window
 *     IEEE_25G_AM123_FORMAT this bit will select TX AM0 format for IEEE 25G.0: select 40G AM01: select 100G AM0
 *     IEEE_25G_AM0_FORMAT this bit will select RX AM0 format for IEEE 25G.0: select 40G AM01: select 100G AM0
 *     IEEE_25G_AM_EN   Disable AM TX and RX.1: AM is enabled0: AM is disabled
 *     IEEE_25G_5BIT_XOR Enable disable 5 bit XOR for IEEE 25G0: Disabled1: Enabled
 *     IEEE_25G_CWSCR_EN Pre/Post code word scranmbler enable/disable.0: DISABLED1: ENABLED
 */
#define BCMI_TSCF_XGXS_SC_X4_IEEE_25G_CTL_GEN2r (0x0000c056 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X4_IEEE_25G_CTL_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X4_IEEE_25G_CTL_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X4_IEEE_25G_CTL_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x4_ieee_25g_ctl_gen2[1];
	uint32_t _sc_x4_ieee_25g_ctl_gen2;
} BCMI_TSCF_XGXS_SC_X4_IEEE_25G_CTL_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X4_IEEE_25G_CTL_GEN2r_CLR(r) (r).sc_x4_ieee_25g_ctl_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X4_IEEE_25G_CTL_GEN2r_SET(r,d) (r).sc_x4_ieee_25g_ctl_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X4_IEEE_25G_CTL_GEN2r_GET(r) (r).sc_x4_ieee_25g_ctl_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X4_IEEE_25G_CTL_GEN2r_IEEE_25G_CWSCR_ENf_GET(r) ((((r).sc_x4_ieee_25g_ctl_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_IEEE_25G_CTL_GEN2r_IEEE_25G_CWSCR_ENf_SET(r,f) (r).sc_x4_ieee_25g_ctl_gen2[0]=(((r).sc_x4_ieee_25g_ctl_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_SC_X4_IEEE_25G_CTL_GEN2r_IEEE_25G_5BIT_XORf_GET(r) ((((r).sc_x4_ieee_25g_ctl_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_IEEE_25G_CTL_GEN2r_IEEE_25G_5BIT_XORf_SET(r,f) (r).sc_x4_ieee_25g_ctl_gen2[0]=(((r).sc_x4_ieee_25g_ctl_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_SC_X4_IEEE_25G_CTL_GEN2r_IEEE_25G_AM_ENf_GET(r) ((((r).sc_x4_ieee_25g_ctl_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_IEEE_25G_CTL_GEN2r_IEEE_25G_AM_ENf_SET(r,f) (r).sc_x4_ieee_25g_ctl_gen2[0]=(((r).sc_x4_ieee_25g_ctl_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_SC_X4_IEEE_25G_CTL_GEN2r_IEEE_25G_AM0_FORMATf_GET(r) ((((r).sc_x4_ieee_25g_ctl_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_IEEE_25G_CTL_GEN2r_IEEE_25G_AM0_FORMATf_SET(r,f) (r).sc_x4_ieee_25g_ctl_gen2[0]=(((r).sc_x4_ieee_25g_ctl_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_SC_X4_IEEE_25G_CTL_GEN2r_IEEE_25G_AM123_FORMATf_GET(r) ((((r).sc_x4_ieee_25g_ctl_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_IEEE_25G_CTL_GEN2r_IEEE_25G_AM123_FORMATf_SET(r,f) (r).sc_x4_ieee_25g_ctl_gen2[0]=(((r).sc_x4_ieee_25g_ctl_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_SC_X4_IEEE_25G_CTL_GEN2r_IEEE_WINDOW_SELf_GET(r) ((((r).sc_x4_ieee_25g_ctl_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_IEEE_25G_CTL_GEN2r_IEEE_WINDOW_SELf_SET(r,f) (r).sc_x4_ieee_25g_ctl_gen2[0]=(((r).sc_x4_ieee_25g_ctl_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_SC_X4_IEEE_25G_CTL_GEN2r_IEEE_COUNT_SELf_GET(r) ((((r).sc_x4_ieee_25g_ctl_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_IEEE_25G_CTL_GEN2r_IEEE_COUNT_SELf_SET(r,f) (r).sc_x4_ieee_25g_ctl_gen2[0]=(((r).sc_x4_ieee_25g_ctl_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_SC_X4_IEEE_25G_CTL_GEN2r_CL74_SHCORRUPT_25IEEEf_GET(r) (((r).sc_x4_ieee_25g_ctl_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_IEEE_25G_CTL_GEN2r_CL74_SHCORRUPT_25IEEEf_SET(r,f) (r).sc_x4_ieee_25g_ctl_gen2[0]=(((r).sc_x4_ieee_25g_ctl_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access SC_X4_IEEE_25G_CTL_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X4_IEEE_25G_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X4_IEEE_25G_CTL_GEN2r,(_r._sc_x4_ieee_25g_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X4_IEEE_25G_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_IEEE_25G_CTL_GEN2r,(_r._sc_x4_ieee_25g_ctl_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X4_IEEE_25G_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_IEEE_25G_CTL_GEN2r,(_r._sc_x4_ieee_25g_ctl_gen2))
#define BCMI_TSCF_XGXS_READLN_SC_X4_IEEE_25G_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X4_IEEE_25G_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_ieee_25g_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITELN_SC_X4_IEEE_25G_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_IEEE_25G_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_ieee_25g_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_SC_X4_IEEE_25G_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_IEEE_25G_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sc_x4_ieee_25g_ctl_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X4_IEEE_25G_CTL_GEN2r BCMI_TSCF_XGXS_SC_X4_IEEE_25G_CTL_GEN2r
#define SC_X4_IEEE_25G_CTL_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X4_IEEE_25G_CTL_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X4_IEEE_25G_CTL_GEN2r_t SC_X4_IEEE_25G_CTL_GEN2r_t;
#define SC_X4_IEEE_25G_CTL_GEN2r_CLR BCMI_TSCF_XGXS_SC_X4_IEEE_25G_CTL_GEN2r_CLR
#define SC_X4_IEEE_25G_CTL_GEN2r_SET BCMI_TSCF_XGXS_SC_X4_IEEE_25G_CTL_GEN2r_SET
#define SC_X4_IEEE_25G_CTL_GEN2r_GET BCMI_TSCF_XGXS_SC_X4_IEEE_25G_CTL_GEN2r_GET
#define SC_X4_IEEE_25G_CTL_GEN2r_IEEE_25G_CWSCR_ENf_GET BCMI_TSCF_XGXS_SC_X4_IEEE_25G_CTL_GEN2r_IEEE_25G_CWSCR_ENf_GET
#define SC_X4_IEEE_25G_CTL_GEN2r_IEEE_25G_CWSCR_ENf_SET BCMI_TSCF_XGXS_SC_X4_IEEE_25G_CTL_GEN2r_IEEE_25G_CWSCR_ENf_SET
#define SC_X4_IEEE_25G_CTL_GEN2r_IEEE_25G_5BIT_XORf_GET BCMI_TSCF_XGXS_SC_X4_IEEE_25G_CTL_GEN2r_IEEE_25G_5BIT_XORf_GET
#define SC_X4_IEEE_25G_CTL_GEN2r_IEEE_25G_5BIT_XORf_SET BCMI_TSCF_XGXS_SC_X4_IEEE_25G_CTL_GEN2r_IEEE_25G_5BIT_XORf_SET
#define SC_X4_IEEE_25G_CTL_GEN2r_IEEE_25G_AM_ENf_GET BCMI_TSCF_XGXS_SC_X4_IEEE_25G_CTL_GEN2r_IEEE_25G_AM_ENf_GET
#define SC_X4_IEEE_25G_CTL_GEN2r_IEEE_25G_AM_ENf_SET BCMI_TSCF_XGXS_SC_X4_IEEE_25G_CTL_GEN2r_IEEE_25G_AM_ENf_SET
#define SC_X4_IEEE_25G_CTL_GEN2r_IEEE_25G_AM0_FORMATf_GET BCMI_TSCF_XGXS_SC_X4_IEEE_25G_CTL_GEN2r_IEEE_25G_AM0_FORMATf_GET
#define SC_X4_IEEE_25G_CTL_GEN2r_IEEE_25G_AM0_FORMATf_SET BCMI_TSCF_XGXS_SC_X4_IEEE_25G_CTL_GEN2r_IEEE_25G_AM0_FORMATf_SET
#define SC_X4_IEEE_25G_CTL_GEN2r_IEEE_25G_AM123_FORMATf_GET BCMI_TSCF_XGXS_SC_X4_IEEE_25G_CTL_GEN2r_IEEE_25G_AM123_FORMATf_GET
#define SC_X4_IEEE_25G_CTL_GEN2r_IEEE_25G_AM123_FORMATf_SET BCMI_TSCF_XGXS_SC_X4_IEEE_25G_CTL_GEN2r_IEEE_25G_AM123_FORMATf_SET
#define SC_X4_IEEE_25G_CTL_GEN2r_IEEE_WINDOW_SELf_GET BCMI_TSCF_XGXS_SC_X4_IEEE_25G_CTL_GEN2r_IEEE_WINDOW_SELf_GET
#define SC_X4_IEEE_25G_CTL_GEN2r_IEEE_WINDOW_SELf_SET BCMI_TSCF_XGXS_SC_X4_IEEE_25G_CTL_GEN2r_IEEE_WINDOW_SELf_SET
#define SC_X4_IEEE_25G_CTL_GEN2r_IEEE_COUNT_SELf_GET BCMI_TSCF_XGXS_SC_X4_IEEE_25G_CTL_GEN2r_IEEE_COUNT_SELf_GET
#define SC_X4_IEEE_25G_CTL_GEN2r_IEEE_COUNT_SELf_SET BCMI_TSCF_XGXS_SC_X4_IEEE_25G_CTL_GEN2r_IEEE_COUNT_SELf_SET
#define SC_X4_IEEE_25G_CTL_GEN2r_CL74_SHCORRUPT_25IEEEf_GET BCMI_TSCF_XGXS_SC_X4_IEEE_25G_CTL_GEN2r_CL74_SHCORRUPT_25IEEEf_GET
#define SC_X4_IEEE_25G_CTL_GEN2r_CL74_SHCORRUPT_25IEEEf_SET BCMI_TSCF_XGXS_SC_X4_IEEE_25G_CTL_GEN2r_CL74_SHCORRUPT_25IEEEf_SET
#define READ_SC_X4_IEEE_25G_CTL_GEN2r BCMI_TSCF_XGXS_READ_SC_X4_IEEE_25G_CTL_GEN2r
#define WRITE_SC_X4_IEEE_25G_CTL_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X4_IEEE_25G_CTL_GEN2r
#define MODIFY_SC_X4_IEEE_25G_CTL_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X4_IEEE_25G_CTL_GEN2r
#define READLN_SC_X4_IEEE_25G_CTL_GEN2r BCMI_TSCF_XGXS_READLN_SC_X4_IEEE_25G_CTL_GEN2r
#define WRITELN_SC_X4_IEEE_25G_CTL_GEN2r BCMI_TSCF_XGXS_WRITELN_SC_X4_IEEE_25G_CTL_GEN2r
#define WRITEALL_SC_X4_IEEE_25G_CTL_GEN2r BCMI_TSCF_XGXS_WRITEALL_SC_X4_IEEE_25G_CTL_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X4_IEEE_25G_CTL_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X4_BYPASS_GEN2
 * BLOCKS:   SC_X4_CONTROL
 * REGADDR:  0xc058
 * DESC:     Speed control bypass enable
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     SC_BYPASS        Disable speed control logic
 *     SC_IGNORE_TX_DATA_VLD Do not wait for tx_data_vld indication from PMD before taking TX pipe out of reset
 */
#define BCMI_TSCF_XGXS_SC_X4_BYPASS_GEN2r (0x0000c058 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X4_BYPASS_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X4_BYPASS_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X4_BYPASS_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x4_bypass_gen2[1];
	uint32_t _sc_x4_bypass_gen2;
} BCMI_TSCF_XGXS_SC_X4_BYPASS_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X4_BYPASS_GEN2r_CLR(r) (r).sc_x4_bypass_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X4_BYPASS_GEN2r_SET(r,d) (r).sc_x4_bypass_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X4_BYPASS_GEN2r_GET(r) (r).sc_x4_bypass_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X4_BYPASS_GEN2r_SC_IGNORE_TX_DATA_VLDf_GET(r) ((((r).sc_x4_bypass_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_BYPASS_GEN2r_SC_IGNORE_TX_DATA_VLDf_SET(r,f) (r).sc_x4_bypass_gen2[0]=(((r).sc_x4_bypass_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_SC_X4_BYPASS_GEN2r_SC_BYPASSf_GET(r) (((r).sc_x4_bypass_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_BYPASS_GEN2r_SC_BYPASSf_SET(r,f) (r).sc_x4_bypass_gen2[0]=(((r).sc_x4_bypass_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access SC_X4_BYPASS_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X4_BYPASS_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X4_BYPASS_GEN2r,(_r._sc_x4_bypass_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X4_BYPASS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_BYPASS_GEN2r,(_r._sc_x4_bypass_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X4_BYPASS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_BYPASS_GEN2r,(_r._sc_x4_bypass_gen2))
#define BCMI_TSCF_XGXS_READLN_SC_X4_BYPASS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X4_BYPASS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_bypass_gen2))
#define BCMI_TSCF_XGXS_WRITELN_SC_X4_BYPASS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_BYPASS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_bypass_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_SC_X4_BYPASS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_BYPASS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sc_x4_bypass_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X4_BYPASS_GEN2r BCMI_TSCF_XGXS_SC_X4_BYPASS_GEN2r
#define SC_X4_BYPASS_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X4_BYPASS_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X4_BYPASS_GEN2r_t SC_X4_BYPASS_GEN2r_t;
#define SC_X4_BYPASS_GEN2r_CLR BCMI_TSCF_XGXS_SC_X4_BYPASS_GEN2r_CLR
#define SC_X4_BYPASS_GEN2r_SET BCMI_TSCF_XGXS_SC_X4_BYPASS_GEN2r_SET
#define SC_X4_BYPASS_GEN2r_GET BCMI_TSCF_XGXS_SC_X4_BYPASS_GEN2r_GET
#define SC_X4_BYPASS_GEN2r_SC_IGNORE_TX_DATA_VLDf_GET BCMI_TSCF_XGXS_SC_X4_BYPASS_GEN2r_SC_IGNORE_TX_DATA_VLDf_GET
#define SC_X4_BYPASS_GEN2r_SC_IGNORE_TX_DATA_VLDf_SET BCMI_TSCF_XGXS_SC_X4_BYPASS_GEN2r_SC_IGNORE_TX_DATA_VLDf_SET
#define SC_X4_BYPASS_GEN2r_SC_BYPASSf_GET BCMI_TSCF_XGXS_SC_X4_BYPASS_GEN2r_SC_BYPASSf_GET
#define SC_X4_BYPASS_GEN2r_SC_BYPASSf_SET BCMI_TSCF_XGXS_SC_X4_BYPASS_GEN2r_SC_BYPASSf_SET
#define READ_SC_X4_BYPASS_GEN2r BCMI_TSCF_XGXS_READ_SC_X4_BYPASS_GEN2r
#define WRITE_SC_X4_BYPASS_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X4_BYPASS_GEN2r
#define MODIFY_SC_X4_BYPASS_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X4_BYPASS_GEN2r
#define READLN_SC_X4_BYPASS_GEN2r BCMI_TSCF_XGXS_READLN_SC_X4_BYPASS_GEN2r
#define WRITELN_SC_X4_BYPASS_GEN2r BCMI_TSCF_XGXS_WRITELN_SC_X4_BYPASS_GEN2r
#define WRITEALL_SC_X4_BYPASS_GEN2r BCMI_TSCF_XGXS_WRITEALL_SC_X4_BYPASS_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X4_BYPASS_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X4_SPARE0_GEN2
 * BLOCKS:   SC_X4_CONTROL
 * REGADDR:  0xc05d
 * DESC:     spare 0 register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     SPARE0           Spare register
 */
#define BCMI_TSCF_XGXS_SC_X4_SPARE0_GEN2r (0x0000c05d | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X4_SPARE0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X4_SPARE0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X4_SPARE0_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x4_spare0_gen2[1];
	uint32_t _sc_x4_spare0_gen2;
} BCMI_TSCF_XGXS_SC_X4_SPARE0_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X4_SPARE0_GEN2r_CLR(r) (r).sc_x4_spare0_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X4_SPARE0_GEN2r_SET(r,d) (r).sc_x4_spare0_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X4_SPARE0_GEN2r_GET(r) (r).sc_x4_spare0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X4_SPARE0_GEN2r_SPARE0f_GET(r) (((r).sc_x4_spare0_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_SC_X4_SPARE0_GEN2r_SPARE0f_SET(r,f) (r).sc_x4_spare0_gen2[0]=(((r).sc_x4_spare0_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access SC_X4_SPARE0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X4_SPARE0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X4_SPARE0_GEN2r,(_r._sc_x4_spare0_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X4_SPARE0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_SPARE0_GEN2r,(_r._sc_x4_spare0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X4_SPARE0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_SPARE0_GEN2r,(_r._sc_x4_spare0_gen2))
#define BCMI_TSCF_XGXS_READLN_SC_X4_SPARE0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X4_SPARE0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_spare0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_SC_X4_SPARE0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_SPARE0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_spare0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_SC_X4_SPARE0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_SPARE0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sc_x4_spare0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X4_SPARE0_GEN2r BCMI_TSCF_XGXS_SC_X4_SPARE0_GEN2r
#define SC_X4_SPARE0_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X4_SPARE0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X4_SPARE0_GEN2r_t SC_X4_SPARE0_GEN2r_t;
#define SC_X4_SPARE0_GEN2r_CLR BCMI_TSCF_XGXS_SC_X4_SPARE0_GEN2r_CLR
#define SC_X4_SPARE0_GEN2r_SET BCMI_TSCF_XGXS_SC_X4_SPARE0_GEN2r_SET
#define SC_X4_SPARE0_GEN2r_GET BCMI_TSCF_XGXS_SC_X4_SPARE0_GEN2r_GET
#define SC_X4_SPARE0_GEN2r_SPARE0f_GET BCMI_TSCF_XGXS_SC_X4_SPARE0_GEN2r_SPARE0f_GET
#define SC_X4_SPARE0_GEN2r_SPARE0f_SET BCMI_TSCF_XGXS_SC_X4_SPARE0_GEN2r_SPARE0f_SET
#define READ_SC_X4_SPARE0_GEN2r BCMI_TSCF_XGXS_READ_SC_X4_SPARE0_GEN2r
#define WRITE_SC_X4_SPARE0_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X4_SPARE0_GEN2r
#define MODIFY_SC_X4_SPARE0_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X4_SPARE0_GEN2r
#define READLN_SC_X4_SPARE0_GEN2r BCMI_TSCF_XGXS_READLN_SC_X4_SPARE0_GEN2r
#define WRITELN_SC_X4_SPARE0_GEN2r BCMI_TSCF_XGXS_WRITELN_SC_X4_SPARE0_GEN2r
#define WRITEALL_SC_X4_SPARE0_GEN2r BCMI_TSCF_XGXS_WRITEALL_SC_X4_SPARE0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X4_SPARE0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X4_SPARE1_GEN2
 * BLOCKS:   SC_X4_CONTROL
 * REGADDR:  0xc05e
 * DESC:     spare 1 register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     SPARE1           Spare register
 */
#define BCMI_TSCF_XGXS_SC_X4_SPARE1_GEN2r (0x0000c05e | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X4_SPARE1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X4_SPARE1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X4_SPARE1_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x4_spare1_gen2[1];
	uint32_t _sc_x4_spare1_gen2;
} BCMI_TSCF_XGXS_SC_X4_SPARE1_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X4_SPARE1_GEN2r_CLR(r) (r).sc_x4_spare1_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X4_SPARE1_GEN2r_SET(r,d) (r).sc_x4_spare1_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X4_SPARE1_GEN2r_GET(r) (r).sc_x4_spare1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X4_SPARE1_GEN2r_SPARE1f_GET(r) (((r).sc_x4_spare1_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_SC_X4_SPARE1_GEN2r_SPARE1f_SET(r,f) (r).sc_x4_spare1_gen2[0]=(((r).sc_x4_spare1_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access SC_X4_SPARE1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X4_SPARE1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X4_SPARE1_GEN2r,(_r._sc_x4_spare1_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X4_SPARE1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_SPARE1_GEN2r,(_r._sc_x4_spare1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X4_SPARE1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_SPARE1_GEN2r,(_r._sc_x4_spare1_gen2))
#define BCMI_TSCF_XGXS_READLN_SC_X4_SPARE1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X4_SPARE1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_spare1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_SC_X4_SPARE1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_SPARE1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_spare1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_SC_X4_SPARE1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_SPARE1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sc_x4_spare1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X4_SPARE1_GEN2r BCMI_TSCF_XGXS_SC_X4_SPARE1_GEN2r
#define SC_X4_SPARE1_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X4_SPARE1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X4_SPARE1_GEN2r_t SC_X4_SPARE1_GEN2r_t;
#define SC_X4_SPARE1_GEN2r_CLR BCMI_TSCF_XGXS_SC_X4_SPARE1_GEN2r_CLR
#define SC_X4_SPARE1_GEN2r_SET BCMI_TSCF_XGXS_SC_X4_SPARE1_GEN2r_SET
#define SC_X4_SPARE1_GEN2r_GET BCMI_TSCF_XGXS_SC_X4_SPARE1_GEN2r_GET
#define SC_X4_SPARE1_GEN2r_SPARE1f_GET BCMI_TSCF_XGXS_SC_X4_SPARE1_GEN2r_SPARE1f_GET
#define SC_X4_SPARE1_GEN2r_SPARE1f_SET BCMI_TSCF_XGXS_SC_X4_SPARE1_GEN2r_SPARE1f_SET
#define READ_SC_X4_SPARE1_GEN2r BCMI_TSCF_XGXS_READ_SC_X4_SPARE1_GEN2r
#define WRITE_SC_X4_SPARE1_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X4_SPARE1_GEN2r
#define MODIFY_SC_X4_SPARE1_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X4_SPARE1_GEN2r
#define READLN_SC_X4_SPARE1_GEN2r BCMI_TSCF_XGXS_READLN_SC_X4_SPARE1_GEN2r
#define WRITELN_SC_X4_SPARE1_GEN2r BCMI_TSCF_XGXS_WRITELN_SC_X4_SPARE1_GEN2r
#define WRITEALL_SC_X4_SPARE1_GEN2r BCMI_TSCF_XGXS_WRITEALL_SC_X4_SPARE1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X4_SPARE1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X4_FLD_OVRR_EN0_TYPE_GEN2
 * BLOCKS:   SC_X4_FIELD_OVERRIDE_ENABLE
 * REGADDR:  0xc060
 * DESC:     Enable override of individual fields
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL36RX_EN_OEN    The hardware/software table field named cl36rx_en is overriden with the value from the register rx_x4_control0-cl36rx_en.
 *     CL36TX_EN_OEN    The hardware/software table field named cl36tx_en is overriden with the value from the register tx_x4_control0-cl36tx_en.
 *     T_PMA_40B_MODE_OEN The hardware/software table field named t_pma_40b_mode is overriden with the value from the register tx_x4_control0-t_pma_40b_mode.
 *     DEC_FSM_MODE_OEN The hardware/software table field named dec_fsm_mode is overriden with the value from the register rx_x4_control0-dec_fsm_mode.
 *     DESKEW_MODE_OEN  The hardware/software table field named deskew_mode is overriden with the value from the register rx_x4_control0-deskew_mode.
 *     DEC_TL_MODE_OEN  The hardware/software table field named dec_tl_mode is overriden with the value from the register rx_x4_control0-dec_tl_mode.
 *     DESCR_MODE_OEN   The hardware/software table field named descr_mode is overriden with the value from the register rx_x4_control0-descr_mode.
 *     CL72_EN_OEN      The hardware/software table field named cl72_en is overriden with the value from the register main0-cl72_en.
 *     SCR_MODE_OEN     The hardware/software table field named scr_mode is overriden with the value from the register tx_x4_control0-scr_mode.
 *     T_PMA_BTMX_MODE_OEN The hardware/software table field named t_pma_btmx_mode is overriden with the value from the register tx_x4_control0-t_pma_btmx_mode.
 *     T_HG2_ENABLE_OEN The hardware/software table field named t_HG2_ENABLE is overriden with the value from the register tx_x4_control0-HG2_ENABLE.
 *     T_ENC_MODE_OEN   The hardware/software table field named t_enc_mode is overriden with the value from the register tx_x4_control0-t_enc_mode.
 *     T_FIFO_MODE_OEN  The hardware/software table field named t_fifo_mode is overriden with the value from the register tx_x2_control0-t_fifo_mode.
 *     OS_MODE_OEN      The hardware/software table field named os_mode is overriden with the value from the register tx_x4_control0-os_mode.
 *     NUM_LANES_OEN    The hardware/software table field named num_lanes is overriden with the value from the register sc_x4_control-num_lanes_override_value.
 */
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r (0x0000c060 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X4_FLD_OVRR_EN0_TYPE_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x4_fld_ovrr_en0_type_gen2[1];
	uint32_t _sc_x4_fld_ovrr_en0_type_gen2;
} BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_CLR(r) (r).sc_x4_fld_ovrr_en0_type_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_SET(r,d) (r).sc_x4_fld_ovrr_en0_type_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_GET(r) (r).sc_x4_fld_ovrr_en0_type_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_NUM_LANES_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en0_type_gen2[0]) >> 14) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_NUM_LANES_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en0_type_gen2[0]=(((r).sc_x4_fld_ovrr_en0_type_gen2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_OS_MODE_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en0_type_gen2[0]) >> 13) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_OS_MODE_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en0_type_gen2[0]=(((r).sc_x4_fld_ovrr_en0_type_gen2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_T_FIFO_MODE_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en0_type_gen2[0]) >> 12) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_T_FIFO_MODE_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en0_type_gen2[0]=(((r).sc_x4_fld_ovrr_en0_type_gen2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_T_ENC_MODE_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en0_type_gen2[0]) >> 11) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_T_ENC_MODE_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en0_type_gen2[0]=(((r).sc_x4_fld_ovrr_en0_type_gen2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_T_HG2_ENABLE_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en0_type_gen2[0]) >> 10) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_T_HG2_ENABLE_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en0_type_gen2[0]=(((r).sc_x4_fld_ovrr_en0_type_gen2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_T_PMA_BTMX_MODE_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en0_type_gen2[0]) >> 9) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_T_PMA_BTMX_MODE_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en0_type_gen2[0]=(((r).sc_x4_fld_ovrr_en0_type_gen2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_SCR_MODE_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en0_type_gen2[0]) >> 8) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_SCR_MODE_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en0_type_gen2[0]=(((r).sc_x4_fld_ovrr_en0_type_gen2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_CL72_EN_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en0_type_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_CL72_EN_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en0_type_gen2[0]=(((r).sc_x4_fld_ovrr_en0_type_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_DESCR_MODE_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en0_type_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_DESCR_MODE_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en0_type_gen2[0]=(((r).sc_x4_fld_ovrr_en0_type_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_DEC_TL_MODE_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en0_type_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_DEC_TL_MODE_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en0_type_gen2[0]=(((r).sc_x4_fld_ovrr_en0_type_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_DESKEW_MODE_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en0_type_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_DESKEW_MODE_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en0_type_gen2[0]=(((r).sc_x4_fld_ovrr_en0_type_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_DEC_FSM_MODE_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en0_type_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_DEC_FSM_MODE_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en0_type_gen2[0]=(((r).sc_x4_fld_ovrr_en0_type_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_T_PMA_40B_MODE_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en0_type_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_T_PMA_40B_MODE_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en0_type_gen2[0]=(((r).sc_x4_fld_ovrr_en0_type_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_CL36TX_EN_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en0_type_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_CL36TX_EN_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en0_type_gen2[0]=(((r).sc_x4_fld_ovrr_en0_type_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_CL36RX_EN_OENf_GET(r) (((r).sc_x4_fld_ovrr_en0_type_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_CL36RX_EN_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en0_type_gen2[0]=(((r).sc_x4_fld_ovrr_en0_type_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access SC_X4_FLD_OVRR_EN0_TYPE_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r,(_r._sc_x4_fld_ovrr_en0_type_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r,(_r._sc_x4_fld_ovrr_en0_type_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r,(_r._sc_x4_fld_ovrr_en0_type_gen2))
#define BCMI_TSCF_XGXS_READLN_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_fld_ovrr_en0_type_gen2))
#define BCMI_TSCF_XGXS_WRITELN_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_fld_ovrr_en0_type_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sc_x4_fld_ovrr_en0_type_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X4_FLD_OVRR_EN0_TYPE_GEN2r BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r
#define SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_t SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_t;
#define SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_CLR BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_CLR
#define SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_SET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_SET
#define SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_GET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_GET
#define SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_NUM_LANES_OENf_GET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_NUM_LANES_OENf_GET
#define SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_NUM_LANES_OENf_SET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_NUM_LANES_OENf_SET
#define SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_OS_MODE_OENf_GET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_OS_MODE_OENf_GET
#define SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_OS_MODE_OENf_SET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_OS_MODE_OENf_SET
#define SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_T_FIFO_MODE_OENf_GET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_T_FIFO_MODE_OENf_GET
#define SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_T_FIFO_MODE_OENf_SET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_T_FIFO_MODE_OENf_SET
#define SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_T_ENC_MODE_OENf_GET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_T_ENC_MODE_OENf_GET
#define SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_T_ENC_MODE_OENf_SET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_T_ENC_MODE_OENf_SET
#define SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_T_HG2_ENABLE_OENf_GET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_T_HG2_ENABLE_OENf_GET
#define SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_T_HG2_ENABLE_OENf_SET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_T_HG2_ENABLE_OENf_SET
#define SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_T_PMA_BTMX_MODE_OENf_GET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_T_PMA_BTMX_MODE_OENf_GET
#define SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_T_PMA_BTMX_MODE_OENf_SET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_T_PMA_BTMX_MODE_OENf_SET
#define SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_SCR_MODE_OENf_GET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_SCR_MODE_OENf_GET
#define SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_SCR_MODE_OENf_SET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_SCR_MODE_OENf_SET
#define SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_CL72_EN_OENf_GET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_CL72_EN_OENf_GET
#define SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_CL72_EN_OENf_SET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_CL72_EN_OENf_SET
#define SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_DESCR_MODE_OENf_GET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_DESCR_MODE_OENf_GET
#define SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_DESCR_MODE_OENf_SET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_DESCR_MODE_OENf_SET
#define SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_DEC_TL_MODE_OENf_GET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_DEC_TL_MODE_OENf_GET
#define SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_DEC_TL_MODE_OENf_SET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_DEC_TL_MODE_OENf_SET
#define SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_DESKEW_MODE_OENf_GET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_DESKEW_MODE_OENf_GET
#define SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_DESKEW_MODE_OENf_SET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_DESKEW_MODE_OENf_SET
#define SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_DEC_FSM_MODE_OENf_GET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_DEC_FSM_MODE_OENf_GET
#define SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_DEC_FSM_MODE_OENf_SET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_DEC_FSM_MODE_OENf_SET
#define SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_T_PMA_40B_MODE_OENf_GET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_T_PMA_40B_MODE_OENf_GET
#define SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_T_PMA_40B_MODE_OENf_SET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_T_PMA_40B_MODE_OENf_SET
#define SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_CL36TX_EN_OENf_GET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_CL36TX_EN_OENf_GET
#define SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_CL36TX_EN_OENf_SET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_CL36TX_EN_OENf_SET
#define SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_CL36RX_EN_OENf_GET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_CL36RX_EN_OENf_GET
#define SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_CL36RX_EN_OENf_SET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r_CL36RX_EN_OENf_SET
#define READ_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r BCMI_TSCF_XGXS_READ_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r
#define WRITE_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r
#define MODIFY_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r
#define READLN_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r BCMI_TSCF_XGXS_READLN_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r
#define WRITELN_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r BCMI_TSCF_XGXS_WRITELN_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r
#define WRITEALL_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r BCMI_TSCF_XGXS_WRITEALL_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN0_TYPE_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X4_FLD_OVRR_EN1_TYPE_GEN2
 * BLOCKS:   SC_X4_FIELD_OVERRIDE_ENABLE
 * REGADDR:  0xc061
 * DESC:     Enable override of individual fields
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     T_CL91_CW_SCRAMBLE_OEN The hardware/software table field named t_cl91_cw_scramble is overriden with the value from the register tx_x4_control0-cl91_cw_scramble.
 *     T_FIVE_BIT_XOR_EN_OEN The hardware/software table field named t_five_bit_xor_en is overriden with the value from the register tx_x4_control0-five_bit_xor_en.
 *     T_PMA_CL91_MUX_SEL_OEN The hardware/software table field named t_pma_cl91_mux_sel is overriden with the value from the register tx_x4_control0-t_pma_cl91_mux_sel.
 *     T_PMA_WATERMARK_OEN The hardware/software table field named t_pma_watermark is overriden with the value from the register tx_x4_control0-t_pma_watermark.
 *     T_PMA_BITMUX_DELAY_OEN The hardware/software table field named t_pma_bitmux_delay is overriden with the value from the register tx_x4_control0-t_pma_bitmux_delay.
 *     MAC_CREDITGENCNT_OEN The hardware/software table field named mac_creditgencnt is overriden with the value from the register tx_x4_credit_gen0-mac_creditgencnt.
 *     LOOPCNT1_OEN     The hardware/software table field named loopcnt1 is overriden with the value from the register tx_x4_credit_gen0-loopcnt1.
 *     LOOPCNT0_OEN     The hardware/software table field named loopcnt0 is overriden with the value from the register tx_x4_credit_gen0-loopcnt0.
 *     CLOCKCNT1_OEN    The hardware/software table field named clockcnt1 is overriden with the value from the register tx_x4_credit_gen0-clockcnt1.
 *     CLOCKCNT0_OEN    The hardware/software table field named clockcnt0 is overriden with the value from the register tx_x4_credit_gen0-clockcnt0.
 *     CREDITENABLE_OEN The hardware/software table field named creditenable is overriden with the value from the register tx_x4_credit_gen0-creditenable.
 *     BS_BTMX_MODE_OEN The hardware/software table field named bs_btmx_mode is overriden with the value from the register rx_x4_control0-bs_btmx_mode.
 *     BS_DIST_MODE_OEN The hardware/software table field named bs_dist_mode is overriden with the value from the register rx_x4_control0-bs_dist_mode.
 *     BS_SYNC_EN_OEN   The hardware/software table field named bs_sync_en is overriden with the value from the register rx_x4_control0-bs_sync_en.
 *     BS_SM_SYNC_MODE_OEN The hardware/software table field named bs_sm_sync_mode is overriden with the value from the register rx_x4_control0-bs_sm_sync_mode.
 *     R_HG2_ENABLE_OEN The hardware/software table field named r_HG2_ENABLE is overriden with the value from the register rx_x4_control0-HG2_ENABLE.
 */
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r (0x0000c061 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X4_FLD_OVRR_EN1_TYPE_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x4_fld_ovrr_en1_type_gen2[1];
	uint32_t _sc_x4_fld_ovrr_en1_type_gen2;
} BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_CLR(r) (r).sc_x4_fld_ovrr_en1_type_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_SET(r,d) (r).sc_x4_fld_ovrr_en1_type_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_GET(r) (r).sc_x4_fld_ovrr_en1_type_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_R_HG2_ENABLE_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en1_type_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_R_HG2_ENABLE_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en1_type_gen2[0]=(((r).sc_x4_fld_ovrr_en1_type_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_BS_SM_SYNC_MODE_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en1_type_gen2[0]) >> 14) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_BS_SM_SYNC_MODE_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en1_type_gen2[0]=(((r).sc_x4_fld_ovrr_en1_type_gen2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_BS_SYNC_EN_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en1_type_gen2[0]) >> 13) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_BS_SYNC_EN_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en1_type_gen2[0]=(((r).sc_x4_fld_ovrr_en1_type_gen2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_BS_DIST_MODE_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en1_type_gen2[0]) >> 12) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_BS_DIST_MODE_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en1_type_gen2[0]=(((r).sc_x4_fld_ovrr_en1_type_gen2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_BS_BTMX_MODE_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en1_type_gen2[0]) >> 11) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_BS_BTMX_MODE_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en1_type_gen2[0]=(((r).sc_x4_fld_ovrr_en1_type_gen2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_CREDITENABLE_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en1_type_gen2[0]) >> 10) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_CREDITENABLE_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en1_type_gen2[0]=(((r).sc_x4_fld_ovrr_en1_type_gen2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_CLOCKCNT0_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en1_type_gen2[0]) >> 9) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_CLOCKCNT0_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en1_type_gen2[0]=(((r).sc_x4_fld_ovrr_en1_type_gen2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_CLOCKCNT1_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en1_type_gen2[0]) >> 8) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_CLOCKCNT1_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en1_type_gen2[0]=(((r).sc_x4_fld_ovrr_en1_type_gen2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_LOOPCNT0_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en1_type_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_LOOPCNT0_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en1_type_gen2[0]=(((r).sc_x4_fld_ovrr_en1_type_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_LOOPCNT1_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en1_type_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_LOOPCNT1_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en1_type_gen2[0]=(((r).sc_x4_fld_ovrr_en1_type_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_MAC_CREDITGENCNT_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en1_type_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_MAC_CREDITGENCNT_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en1_type_gen2[0]=(((r).sc_x4_fld_ovrr_en1_type_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_T_PMA_BITMUX_DELAY_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en1_type_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_T_PMA_BITMUX_DELAY_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en1_type_gen2[0]=(((r).sc_x4_fld_ovrr_en1_type_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_T_PMA_WATERMARK_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en1_type_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_T_PMA_WATERMARK_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en1_type_gen2[0]=(((r).sc_x4_fld_ovrr_en1_type_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_T_PMA_CL91_MUX_SEL_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en1_type_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_T_PMA_CL91_MUX_SEL_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en1_type_gen2[0]=(((r).sc_x4_fld_ovrr_en1_type_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_T_FIVE_BIT_XOR_EN_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en1_type_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_T_FIVE_BIT_XOR_EN_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en1_type_gen2[0]=(((r).sc_x4_fld_ovrr_en1_type_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_T_CL91_CW_SCRAMBLE_OENf_GET(r) (((r).sc_x4_fld_ovrr_en1_type_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_T_CL91_CW_SCRAMBLE_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en1_type_gen2[0]=(((r).sc_x4_fld_ovrr_en1_type_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access SC_X4_FLD_OVRR_EN1_TYPE_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r,(_r._sc_x4_fld_ovrr_en1_type_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r,(_r._sc_x4_fld_ovrr_en1_type_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r,(_r._sc_x4_fld_ovrr_en1_type_gen2))
#define BCMI_TSCF_XGXS_READLN_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_fld_ovrr_en1_type_gen2))
#define BCMI_TSCF_XGXS_WRITELN_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_fld_ovrr_en1_type_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sc_x4_fld_ovrr_en1_type_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X4_FLD_OVRR_EN1_TYPE_GEN2r BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r
#define SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_t SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_t;
#define SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_CLR BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_CLR
#define SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_SET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_SET
#define SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_GET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_GET
#define SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_R_HG2_ENABLE_OENf_GET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_R_HG2_ENABLE_OENf_GET
#define SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_R_HG2_ENABLE_OENf_SET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_R_HG2_ENABLE_OENf_SET
#define SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_BS_SM_SYNC_MODE_OENf_GET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_BS_SM_SYNC_MODE_OENf_GET
#define SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_BS_SM_SYNC_MODE_OENf_SET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_BS_SM_SYNC_MODE_OENf_SET
#define SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_BS_SYNC_EN_OENf_GET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_BS_SYNC_EN_OENf_GET
#define SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_BS_SYNC_EN_OENf_SET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_BS_SYNC_EN_OENf_SET
#define SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_BS_DIST_MODE_OENf_GET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_BS_DIST_MODE_OENf_GET
#define SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_BS_DIST_MODE_OENf_SET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_BS_DIST_MODE_OENf_SET
#define SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_BS_BTMX_MODE_OENf_GET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_BS_BTMX_MODE_OENf_GET
#define SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_BS_BTMX_MODE_OENf_SET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_BS_BTMX_MODE_OENf_SET
#define SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_CREDITENABLE_OENf_GET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_CREDITENABLE_OENf_GET
#define SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_CREDITENABLE_OENf_SET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_CREDITENABLE_OENf_SET
#define SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_CLOCKCNT0_OENf_GET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_CLOCKCNT0_OENf_GET
#define SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_CLOCKCNT0_OENf_SET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_CLOCKCNT0_OENf_SET
#define SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_CLOCKCNT1_OENf_GET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_CLOCKCNT1_OENf_GET
#define SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_CLOCKCNT1_OENf_SET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_CLOCKCNT1_OENf_SET
#define SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_LOOPCNT0_OENf_GET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_LOOPCNT0_OENf_GET
#define SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_LOOPCNT0_OENf_SET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_LOOPCNT0_OENf_SET
#define SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_LOOPCNT1_OENf_GET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_LOOPCNT1_OENf_GET
#define SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_LOOPCNT1_OENf_SET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_LOOPCNT1_OENf_SET
#define SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_MAC_CREDITGENCNT_OENf_GET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_MAC_CREDITGENCNT_OENf_GET
#define SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_MAC_CREDITGENCNT_OENf_SET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_MAC_CREDITGENCNT_OENf_SET
#define SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_T_PMA_BITMUX_DELAY_OENf_GET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_T_PMA_BITMUX_DELAY_OENf_GET
#define SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_T_PMA_BITMUX_DELAY_OENf_SET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_T_PMA_BITMUX_DELAY_OENf_SET
#define SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_T_PMA_WATERMARK_OENf_GET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_T_PMA_WATERMARK_OENf_GET
#define SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_T_PMA_WATERMARK_OENf_SET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_T_PMA_WATERMARK_OENf_SET
#define SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_T_PMA_CL91_MUX_SEL_OENf_GET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_T_PMA_CL91_MUX_SEL_OENf_GET
#define SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_T_PMA_CL91_MUX_SEL_OENf_SET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_T_PMA_CL91_MUX_SEL_OENf_SET
#define SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_T_FIVE_BIT_XOR_EN_OENf_GET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_T_FIVE_BIT_XOR_EN_OENf_GET
#define SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_T_FIVE_BIT_XOR_EN_OENf_SET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_T_FIVE_BIT_XOR_EN_OENf_SET
#define SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_T_CL91_CW_SCRAMBLE_OENf_GET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_T_CL91_CW_SCRAMBLE_OENf_GET
#define SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_T_CL91_CW_SCRAMBLE_OENf_SET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r_T_CL91_CW_SCRAMBLE_OENf_SET
#define READ_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r BCMI_TSCF_XGXS_READ_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r
#define WRITE_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r
#define MODIFY_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r
#define READLN_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r BCMI_TSCF_XGXS_READLN_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r
#define WRITELN_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r BCMI_TSCF_XGXS_WRITELN_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r
#define WRITEALL_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r BCMI_TSCF_XGXS_WRITEALL_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN1_TYPE_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X4_FLD_OVRR_EN2_TYPE_GEN2
 * BLOCKS:   SC_X4_FIELD_OVERRIDE_ENABLE
 * REGADDR:  0xc062
 * DESC:     Enable override of individual fields
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AM_SPACING_MUL_OEN The hardware/software table field named AM_spacing_mul is overriden with the value from the register tx_x4_control0-AM_spacing_mul.
 *     CL91_BLKSYNC_MODE_OEN The hardware/software table field named cl91_blksync_mode is overriden with the value from the register rx_x4_control0-cl91_blksync_mode.
 *     R_MERGE_MODE_OEN The hardware/software table field named r_merge_mode is overriden with the value from the register rx_x4_control0-r_merge_mode.
 *     R_CL91_CW_SCRAMBLE_OEN The hardware/software table field named r_cl91_cw_scramble is overriden with the value from the register rx_x4_control0-cl91_cw_scramble.
 *     R_TC_IN_MODE_OEN The hardware/software table field named r_tc_in_mode is overriden with the value from the register rx_x4_control0-r_tc_in_mode.
 *     R_TC_MODE_OEN    The hardware/software table field named r_tc_mode is overriden with the value from the register rx_x4_control0-r_tc_mode.
 *     R_FIVE_BIT_XOR_EN_OEN The hardware/software table field named r_five_bit_xor_en is overriden with the value from the register rx_x4_control0-five_bit_xor_en.
 *     R_TC_OUT_MODE_OEN The hardware/software table field named r_tc_out_mode is overriden with the value from the register rx_x4_control0-r_tc_out_mode.
 *     CORRUPT_2ND_GROUP The hardware/software table field named corrupt_2nd_group is overriden with the value from the register sc_x4_control-corrupt_2nd_group.
 *     CORRUPT_6TH_GROUP The hardware/software table field named corrupt_6th_group is overriden with the value from the register sc_x4_control-corrupt_6th_group.
 *     CL74_SHCORRUPT   The hardware/software table field named cl74_shcorrupt is overriden with the value from the register sc_x4_control-cl74_shcorrupt.
 *     BER_COUNT_SEL    The hardware/software table field named ber_count_sel is overriden with the value from the register sc_x4_control-ber_count_sel.
 *     BER_WINDOW_SEL   The hardware/software table field ber_window_sel use_100G_am123 is overriden with the value from the register sc_x4_control-ber_window_sel.
 *     USE_100G_AM0     The hardware/software table field named use_100G_am0 is overriden with the value from the register sc_x4_control-use_100G_am0.
 *     USE_100G_AM123   The hardware/software table field named use_100G_am123 is overriden with the value from the register sc_x4_control-use_100G_am123.
 */
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r (0x0000c062 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X4_FLD_OVRR_EN2_TYPE_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x4_fld_ovrr_en2_type_gen2[1];
	uint32_t _sc_x4_fld_ovrr_en2_type_gen2;
} BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_CLR(r) (r).sc_x4_fld_ovrr_en2_type_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_SET(r,d) (r).sc_x4_fld_ovrr_en2_type_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_GET(r) (r).sc_x4_fld_ovrr_en2_type_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_USE_100G_AM123f_GET(r) ((((r).sc_x4_fld_ovrr_en2_type_gen2[0]) >> 14) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_USE_100G_AM123f_SET(r,f) (r).sc_x4_fld_ovrr_en2_type_gen2[0]=(((r).sc_x4_fld_ovrr_en2_type_gen2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_USE_100G_AM0f_GET(r) ((((r).sc_x4_fld_ovrr_en2_type_gen2[0]) >> 13) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_USE_100G_AM0f_SET(r,f) (r).sc_x4_fld_ovrr_en2_type_gen2[0]=(((r).sc_x4_fld_ovrr_en2_type_gen2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_BER_WINDOW_SELf_GET(r) ((((r).sc_x4_fld_ovrr_en2_type_gen2[0]) >> 12) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_BER_WINDOW_SELf_SET(r,f) (r).sc_x4_fld_ovrr_en2_type_gen2[0]=(((r).sc_x4_fld_ovrr_en2_type_gen2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_BER_COUNT_SELf_GET(r) ((((r).sc_x4_fld_ovrr_en2_type_gen2[0]) >> 11) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_BER_COUNT_SELf_SET(r,f) (r).sc_x4_fld_ovrr_en2_type_gen2[0]=(((r).sc_x4_fld_ovrr_en2_type_gen2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_CL74_SHCORRUPTf_GET(r) ((((r).sc_x4_fld_ovrr_en2_type_gen2[0]) >> 10) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_CL74_SHCORRUPTf_SET(r,f) (r).sc_x4_fld_ovrr_en2_type_gen2[0]=(((r).sc_x4_fld_ovrr_en2_type_gen2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_CORRUPT_6TH_GROUPf_GET(r) ((((r).sc_x4_fld_ovrr_en2_type_gen2[0]) >> 9) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_CORRUPT_6TH_GROUPf_SET(r,f) (r).sc_x4_fld_ovrr_en2_type_gen2[0]=(((r).sc_x4_fld_ovrr_en2_type_gen2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_CORRUPT_2ND_GROUPf_GET(r) ((((r).sc_x4_fld_ovrr_en2_type_gen2[0]) >> 8) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_CORRUPT_2ND_GROUPf_SET(r,f) (r).sc_x4_fld_ovrr_en2_type_gen2[0]=(((r).sc_x4_fld_ovrr_en2_type_gen2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_R_TC_OUT_MODE_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en2_type_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_R_TC_OUT_MODE_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en2_type_gen2[0]=(((r).sc_x4_fld_ovrr_en2_type_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_R_FIVE_BIT_XOR_EN_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en2_type_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_R_FIVE_BIT_XOR_EN_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en2_type_gen2[0]=(((r).sc_x4_fld_ovrr_en2_type_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_R_TC_MODE_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en2_type_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_R_TC_MODE_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en2_type_gen2[0]=(((r).sc_x4_fld_ovrr_en2_type_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_R_TC_IN_MODE_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en2_type_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_R_TC_IN_MODE_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en2_type_gen2[0]=(((r).sc_x4_fld_ovrr_en2_type_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_R_CL91_CW_SCRAMBLE_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en2_type_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_R_CL91_CW_SCRAMBLE_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en2_type_gen2[0]=(((r).sc_x4_fld_ovrr_en2_type_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_R_MERGE_MODE_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en2_type_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_R_MERGE_MODE_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en2_type_gen2[0]=(((r).sc_x4_fld_ovrr_en2_type_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_CL91_BLKSYNC_MODE_OENf_GET(r) ((((r).sc_x4_fld_ovrr_en2_type_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_CL91_BLKSYNC_MODE_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en2_type_gen2[0]=(((r).sc_x4_fld_ovrr_en2_type_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_AM_SPACING_MUL_OENf_GET(r) (((r).sc_x4_fld_ovrr_en2_type_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_AM_SPACING_MUL_OENf_SET(r,f) (r).sc_x4_fld_ovrr_en2_type_gen2[0]=(((r).sc_x4_fld_ovrr_en2_type_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access SC_X4_FLD_OVRR_EN2_TYPE_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r,(_r._sc_x4_fld_ovrr_en2_type_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r,(_r._sc_x4_fld_ovrr_en2_type_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r,(_r._sc_x4_fld_ovrr_en2_type_gen2))
#define BCMI_TSCF_XGXS_READLN_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_fld_ovrr_en2_type_gen2))
#define BCMI_TSCF_XGXS_WRITELN_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_fld_ovrr_en2_type_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sc_x4_fld_ovrr_en2_type_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X4_FLD_OVRR_EN2_TYPE_GEN2r BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r
#define SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_t SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_t;
#define SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_CLR BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_CLR
#define SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_SET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_SET
#define SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_GET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_GET
#define SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_USE_100G_AM123f_GET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_USE_100G_AM123f_GET
#define SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_USE_100G_AM123f_SET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_USE_100G_AM123f_SET
#define SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_USE_100G_AM0f_GET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_USE_100G_AM0f_GET
#define SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_USE_100G_AM0f_SET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_USE_100G_AM0f_SET
#define SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_BER_WINDOW_SELf_GET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_BER_WINDOW_SELf_GET
#define SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_BER_WINDOW_SELf_SET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_BER_WINDOW_SELf_SET
#define SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_BER_COUNT_SELf_GET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_BER_COUNT_SELf_GET
#define SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_BER_COUNT_SELf_SET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_BER_COUNT_SELf_SET
#define SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_CL74_SHCORRUPTf_GET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_CL74_SHCORRUPTf_GET
#define SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_CL74_SHCORRUPTf_SET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_CL74_SHCORRUPTf_SET
#define SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_CORRUPT_6TH_GROUPf_GET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_CORRUPT_6TH_GROUPf_GET
#define SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_CORRUPT_6TH_GROUPf_SET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_CORRUPT_6TH_GROUPf_SET
#define SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_CORRUPT_2ND_GROUPf_GET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_CORRUPT_2ND_GROUPf_GET
#define SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_CORRUPT_2ND_GROUPf_SET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_CORRUPT_2ND_GROUPf_SET
#define SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_R_TC_OUT_MODE_OENf_GET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_R_TC_OUT_MODE_OENf_GET
#define SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_R_TC_OUT_MODE_OENf_SET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_R_TC_OUT_MODE_OENf_SET
#define SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_R_FIVE_BIT_XOR_EN_OENf_GET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_R_FIVE_BIT_XOR_EN_OENf_GET
#define SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_R_FIVE_BIT_XOR_EN_OENf_SET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_R_FIVE_BIT_XOR_EN_OENf_SET
#define SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_R_TC_MODE_OENf_GET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_R_TC_MODE_OENf_GET
#define SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_R_TC_MODE_OENf_SET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_R_TC_MODE_OENf_SET
#define SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_R_TC_IN_MODE_OENf_GET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_R_TC_IN_MODE_OENf_GET
#define SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_R_TC_IN_MODE_OENf_SET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_R_TC_IN_MODE_OENf_SET
#define SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_R_CL91_CW_SCRAMBLE_OENf_GET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_R_CL91_CW_SCRAMBLE_OENf_GET
#define SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_R_CL91_CW_SCRAMBLE_OENf_SET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_R_CL91_CW_SCRAMBLE_OENf_SET
#define SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_R_MERGE_MODE_OENf_GET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_R_MERGE_MODE_OENf_GET
#define SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_R_MERGE_MODE_OENf_SET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_R_MERGE_MODE_OENf_SET
#define SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_CL91_BLKSYNC_MODE_OENf_GET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_CL91_BLKSYNC_MODE_OENf_GET
#define SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_CL91_BLKSYNC_MODE_OENf_SET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_CL91_BLKSYNC_MODE_OENf_SET
#define SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_AM_SPACING_MUL_OENf_GET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_AM_SPACING_MUL_OENf_GET
#define SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_AM_SPACING_MUL_OENf_SET BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r_AM_SPACING_MUL_OENf_SET
#define READ_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r BCMI_TSCF_XGXS_READ_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r
#define WRITE_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r
#define MODIFY_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r
#define READLN_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r BCMI_TSCF_XGXS_READLN_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r
#define WRITELN_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r BCMI_TSCF_XGXS_WRITELN_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r
#define WRITEALL_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r BCMI_TSCF_XGXS_WRITEALL_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X4_FLD_OVRR_EN2_TYPE_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X4_RSLVD_SPD_GEN2
 * BLOCKS:   SC_X4_FINAL_CONFIG_STATUS
 * REGADDR:  0xc070
 * DESC:     Final speed configuration for PCS
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/O
 * FIELDS:
 *     NUM_LANES        Number of lanes for override configuration0   : NUM_LANES_01 - use 1 lane1   : NUM_LANES_02 - use 2 lanes2   : NUM_LANES_04 - use 4 lanes
 *     T_PMA_40B_MODE   1'b0 - 66-bit data write in t_pma.1'b1 - 40-bit data write in t_pma.
 *     CL36TX_EN        Per logical lane: cl36 TX pipeline: 1=enabled , 0=disabled
 *     CL36RX_EN        Per logical lane: cl36 RX pipeline: 1=enabled , 0=disabled
 *     SPEED            Actual speed set by SW
 */
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_SPD_GEN2r (0x0000c070 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X4_RSLVD_SPD_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X4_RSLVD_SPD_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X4_RSLVD_SPD_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x4_rslvd_spd_gen2[1];
	uint32_t _sc_x4_rslvd_spd_gen2;
} BCMI_TSCF_XGXS_SC_X4_RSLVD_SPD_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X4_RSLVD_SPD_GEN2r_CLR(r) (r).sc_x4_rslvd_spd_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_SPD_GEN2r_SET(r,d) (r).sc_x4_rslvd_spd_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_SPD_GEN2r_GET(r) (r).sc_x4_rslvd_spd_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_SPD_GEN2r_SPEEDf_GET(r) ((((r).sc_x4_rslvd_spd_gen2[0]) >> 8) & 0xff)
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_SPD_GEN2r_SPEEDf_SET(r,f) (r).sc_x4_rslvd_spd_gen2[0]=(((r).sc_x4_rslvd_spd_gen2[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_SPD_GEN2r_CL36RX_ENf_GET(r) ((((r).sc_x4_rslvd_spd_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_SPD_GEN2r_CL36RX_ENf_SET(r,f) (r).sc_x4_rslvd_spd_gen2[0]=(((r).sc_x4_rslvd_spd_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_SPD_GEN2r_CL36TX_ENf_GET(r) ((((r).sc_x4_rslvd_spd_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_SPD_GEN2r_CL36TX_ENf_SET(r,f) (r).sc_x4_rslvd_spd_gen2[0]=(((r).sc_x4_rslvd_spd_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_SPD_GEN2r_T_PMA_40B_MODEf_GET(r) ((((r).sc_x4_rslvd_spd_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_SPD_GEN2r_T_PMA_40B_MODEf_SET(r,f) (r).sc_x4_rslvd_spd_gen2[0]=(((r).sc_x4_rslvd_spd_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_SPD_GEN2r_NUM_LANESf_GET(r) (((r).sc_x4_rslvd_spd_gen2[0]) & 0x7)
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_SPD_GEN2r_NUM_LANESf_SET(r,f) (r).sc_x4_rslvd_spd_gen2[0]=(((r).sc_x4_rslvd_spd_gen2[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access SC_X4_RSLVD_SPD_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X4_RSLVD_SPD_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_SPD_GEN2r,(_r._sc_x4_rslvd_spd_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X4_RSLVD_SPD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_SPD_GEN2r,(_r._sc_x4_rslvd_spd_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X4_RSLVD_SPD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_SPD_GEN2r,(_r._sc_x4_rslvd_spd_gen2))
#define BCMI_TSCF_XGXS_READLN_SC_X4_RSLVD_SPD_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_SPD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_rslvd_spd_gen2))
#define BCMI_TSCF_XGXS_WRITELN_SC_X4_RSLVD_SPD_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_SPD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_rslvd_spd_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_SC_X4_RSLVD_SPD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_SPD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sc_x4_rslvd_spd_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X4_RSLVD_SPD_GEN2r BCMI_TSCF_XGXS_SC_X4_RSLVD_SPD_GEN2r
#define SC_X4_RSLVD_SPD_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X4_RSLVD_SPD_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X4_RSLVD_SPD_GEN2r_t SC_X4_RSLVD_SPD_GEN2r_t;
#define SC_X4_RSLVD_SPD_GEN2r_CLR BCMI_TSCF_XGXS_SC_X4_RSLVD_SPD_GEN2r_CLR
#define SC_X4_RSLVD_SPD_GEN2r_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_SPD_GEN2r_SET
#define SC_X4_RSLVD_SPD_GEN2r_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_SPD_GEN2r_GET
#define SC_X4_RSLVD_SPD_GEN2r_SPEEDf_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_SPD_GEN2r_SPEEDf_GET
#define SC_X4_RSLVD_SPD_GEN2r_SPEEDf_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_SPD_GEN2r_SPEEDf_SET
#define SC_X4_RSLVD_SPD_GEN2r_CL36RX_ENf_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_SPD_GEN2r_CL36RX_ENf_GET
#define SC_X4_RSLVD_SPD_GEN2r_CL36RX_ENf_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_SPD_GEN2r_CL36RX_ENf_SET
#define SC_X4_RSLVD_SPD_GEN2r_CL36TX_ENf_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_SPD_GEN2r_CL36TX_ENf_GET
#define SC_X4_RSLVD_SPD_GEN2r_CL36TX_ENf_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_SPD_GEN2r_CL36TX_ENf_SET
#define SC_X4_RSLVD_SPD_GEN2r_T_PMA_40B_MODEf_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_SPD_GEN2r_T_PMA_40B_MODEf_GET
#define SC_X4_RSLVD_SPD_GEN2r_T_PMA_40B_MODEf_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_SPD_GEN2r_T_PMA_40B_MODEf_SET
#define SC_X4_RSLVD_SPD_GEN2r_NUM_LANESf_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_SPD_GEN2r_NUM_LANESf_GET
#define SC_X4_RSLVD_SPD_GEN2r_NUM_LANESf_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_SPD_GEN2r_NUM_LANESf_SET
#define READ_SC_X4_RSLVD_SPD_GEN2r BCMI_TSCF_XGXS_READ_SC_X4_RSLVD_SPD_GEN2r
#define WRITE_SC_X4_RSLVD_SPD_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X4_RSLVD_SPD_GEN2r
#define MODIFY_SC_X4_RSLVD_SPD_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X4_RSLVD_SPD_GEN2r
#define READLN_SC_X4_RSLVD_SPD_GEN2r BCMI_TSCF_XGXS_READLN_SC_X4_RSLVD_SPD_GEN2r
#define WRITELN_SC_X4_RSLVD_SPD_GEN2r BCMI_TSCF_XGXS_WRITELN_SC_X4_RSLVD_SPD_GEN2r
#define WRITEALL_SC_X4_RSLVD_SPD_GEN2r BCMI_TSCF_XGXS_WRITEALL_SC_X4_RSLVD_SPD_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X4_RSLVD_SPD_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X4_RSLVD_0_GEN2
 * BLOCKS:   SC_X4_FINAL_CONFIG_STATUS
 * REGADDR:  0xc072
 * DESC:     Final speed configuration for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     SCR_MODE         
 *     T_PMA_BTMX_MODE  Number of PCS lanes bitmuxed
 *     T_HG2_ENABLE     Enables HG2 support for PCS
 *     T_ENC_MODE       
 *     T_FIFO_MODE      T_FIFO stage control field
 *     OS_MODE          
 *     CL72_EN          Enables cl72
 */
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_0_GEN2r (0x0000c072 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X4_RSLVD_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X4_RSLVD_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X4_RSLVD_0_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x4_rslvd_0_gen2[1];
	uint32_t _sc_x4_rslvd_0_gen2;
} BCMI_TSCF_XGXS_SC_X4_RSLVD_0_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X4_RSLVD_0_GEN2r_CLR(r) (r).sc_x4_rslvd_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_0_GEN2r_SET(r,d) (r).sc_x4_rslvd_0_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_0_GEN2r_GET(r) (r).sc_x4_rslvd_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_0_GEN2r_CL72_ENf_GET(r) ((((r).sc_x4_rslvd_0_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_0_GEN2r_CL72_ENf_SET(r,f) (r).sc_x4_rslvd_0_gen2[0]=(((r).sc_x4_rslvd_0_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_0_GEN2r_OS_MODEf_GET(r) ((((r).sc_x4_rslvd_0_gen2[0]) >> 11) & 0xf)
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_0_GEN2r_OS_MODEf_SET(r,f) (r).sc_x4_rslvd_0_gen2[0]=(((r).sc_x4_rslvd_0_gen2[0] & ~((uint32_t)0xf << 11)) | ((((uint32_t)f) & 0xf) << 11)) | (15 << (16 + 11))
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_0_GEN2r_T_FIFO_MODEf_GET(r) ((((r).sc_x4_rslvd_0_gen2[0]) >> 9) & 0x3)
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_0_GEN2r_T_FIFO_MODEf_SET(r,f) (r).sc_x4_rslvd_0_gen2[0]=(((r).sc_x4_rslvd_0_gen2[0] & ~((uint32_t)0x3 << 9)) | ((((uint32_t)f) & 0x3) << 9)) | (3 << (16 + 9))
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_0_GEN2r_T_ENC_MODEf_GET(r) ((((r).sc_x4_rslvd_0_gen2[0]) >> 7) & 0x3)
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_0_GEN2r_T_ENC_MODEf_SET(r,f) (r).sc_x4_rslvd_0_gen2[0]=(((r).sc_x4_rslvd_0_gen2[0] & ~((uint32_t)0x3 << 7)) | ((((uint32_t)f) & 0x3) << 7)) | (3 << (16 + 7))
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_0_GEN2r_T_HG2_ENABLEf_GET(r) ((((r).sc_x4_rslvd_0_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_0_GEN2r_T_HG2_ENABLEf_SET(r,f) (r).sc_x4_rslvd_0_gen2[0]=(((r).sc_x4_rslvd_0_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_0_GEN2r_T_PMA_BTMX_MODEf_GET(r) ((((r).sc_x4_rslvd_0_gen2[0]) >> 4) & 0x3)
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_0_GEN2r_T_PMA_BTMX_MODEf_SET(r,f) (r).sc_x4_rslvd_0_gen2[0]=(((r).sc_x4_rslvd_0_gen2[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_0_GEN2r_SCR_MODEf_GET(r) ((((r).sc_x4_rslvd_0_gen2[0]) >> 1) & 0x7)
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_0_GEN2r_SCR_MODEf_SET(r,f) (r).sc_x4_rslvd_0_gen2[0]=(((r).sc_x4_rslvd_0_gen2[0] & ~((uint32_t)0x7 << 1)) | ((((uint32_t)f) & 0x7) << 1)) | (7 << (16 + 1))

/*
 * These macros can be used to access SC_X4_RSLVD_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X4_RSLVD_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_0_GEN2r,(_r._sc_x4_rslvd_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X4_RSLVD_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_0_GEN2r,(_r._sc_x4_rslvd_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X4_RSLVD_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_0_GEN2r,(_r._sc_x4_rslvd_0_gen2))
#define BCMI_TSCF_XGXS_READLN_SC_X4_RSLVD_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_rslvd_0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_SC_X4_RSLVD_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_rslvd_0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_SC_X4_RSLVD_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sc_x4_rslvd_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X4_RSLVD_0_GEN2r BCMI_TSCF_XGXS_SC_X4_RSLVD_0_GEN2r
#define SC_X4_RSLVD_0_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X4_RSLVD_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X4_RSLVD_0_GEN2r_t SC_X4_RSLVD_0_GEN2r_t;
#define SC_X4_RSLVD_0_GEN2r_CLR BCMI_TSCF_XGXS_SC_X4_RSLVD_0_GEN2r_CLR
#define SC_X4_RSLVD_0_GEN2r_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_0_GEN2r_SET
#define SC_X4_RSLVD_0_GEN2r_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_0_GEN2r_GET
#define SC_X4_RSLVD_0_GEN2r_CL72_ENf_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_0_GEN2r_CL72_ENf_GET
#define SC_X4_RSLVD_0_GEN2r_CL72_ENf_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_0_GEN2r_CL72_ENf_SET
#define SC_X4_RSLVD_0_GEN2r_OS_MODEf_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_0_GEN2r_OS_MODEf_GET
#define SC_X4_RSLVD_0_GEN2r_OS_MODEf_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_0_GEN2r_OS_MODEf_SET
#define SC_X4_RSLVD_0_GEN2r_T_FIFO_MODEf_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_0_GEN2r_T_FIFO_MODEf_GET
#define SC_X4_RSLVD_0_GEN2r_T_FIFO_MODEf_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_0_GEN2r_T_FIFO_MODEf_SET
#define SC_X4_RSLVD_0_GEN2r_T_ENC_MODEf_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_0_GEN2r_T_ENC_MODEf_GET
#define SC_X4_RSLVD_0_GEN2r_T_ENC_MODEf_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_0_GEN2r_T_ENC_MODEf_SET
#define SC_X4_RSLVD_0_GEN2r_T_HG2_ENABLEf_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_0_GEN2r_T_HG2_ENABLEf_GET
#define SC_X4_RSLVD_0_GEN2r_T_HG2_ENABLEf_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_0_GEN2r_T_HG2_ENABLEf_SET
#define SC_X4_RSLVD_0_GEN2r_T_PMA_BTMX_MODEf_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_0_GEN2r_T_PMA_BTMX_MODEf_GET
#define SC_X4_RSLVD_0_GEN2r_T_PMA_BTMX_MODEf_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_0_GEN2r_T_PMA_BTMX_MODEf_SET
#define SC_X4_RSLVD_0_GEN2r_SCR_MODEf_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_0_GEN2r_SCR_MODEf_GET
#define SC_X4_RSLVD_0_GEN2r_SCR_MODEf_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_0_GEN2r_SCR_MODEf_SET
#define READ_SC_X4_RSLVD_0_GEN2r BCMI_TSCF_XGXS_READ_SC_X4_RSLVD_0_GEN2r
#define WRITE_SC_X4_RSLVD_0_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X4_RSLVD_0_GEN2r
#define MODIFY_SC_X4_RSLVD_0_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X4_RSLVD_0_GEN2r
#define READLN_SC_X4_RSLVD_0_GEN2r BCMI_TSCF_XGXS_READLN_SC_X4_RSLVD_0_GEN2r
#define WRITELN_SC_X4_RSLVD_0_GEN2r BCMI_TSCF_XGXS_WRITELN_SC_X4_RSLVD_0_GEN2r
#define WRITEALL_SC_X4_RSLVD_0_GEN2r BCMI_TSCF_XGXS_WRITEALL_SC_X4_RSLVD_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X4_RSLVD_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X4_RSLVD_1_GEN2
 * BLOCKS:   SC_X4_FINAL_CONFIG_STATUS
 * REGADDR:  0xc073
 * DESC:     Final speed configuration for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     BS_BTMX_MODE     Bit-mux mode: Indicates the format of incoming data on a physical lane.
 *     BS_DIST_MODE     Block to lane distribution mode.BS_DIST_MODE_5_LANE_TDM - 5 lane TDM. Each block distributed in turn over output pseudo-logical lanes 0-4BS_DIST_MODE_2_LANE_TDM_2_VLANE - 2 lane TDM for 2 virtual lanes.Virtual Lane 0 output is ping-ponged over pseudo-logical lanes 0,2.Virtual Lane 1 output is ping-ponged over pseudo-logical lanes 1,3.BS_DIST_MODE_2_LANE_TDM_1_VLANE - 2 lane TDM for 1 virtual lane.Virtual Lane 0 output is ping-ponged over pseudo-logical lanes 0,2.BS_DIST_MODE_NO_TDM - No TDM. Virtual Lane output is sent directly to corresponding pseudo-logical lane.
 *     BS_SYNC_EN       Enable block synchronization: If enabled, block sync sm will attempt to slip data until sync is achieved.
 *     BS_SM_SYNC_MODE  Block Sync Mode: When bs_sync_en==1, this bit indicates if cl49 or cl82 state machine operation is used.1'b0 - Clause 821'b1 - Clause 49
 *     DEC_FSM_MODE     
 *     DESKEW_MODE      
 *     DEC_TL_MODE      
 *     DESCR_MODE       
 */
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_1_GEN2r (0x0000c073 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X4_RSLVD_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X4_RSLVD_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X4_RSLVD_1_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x4_rslvd_1_gen2[1];
	uint32_t _sc_x4_rslvd_1_gen2;
} BCMI_TSCF_XGXS_SC_X4_RSLVD_1_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X4_RSLVD_1_GEN2r_CLR(r) (r).sc_x4_rslvd_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_1_GEN2r_SET(r,d) (r).sc_x4_rslvd_1_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_1_GEN2r_GET(r) (r).sc_x4_rslvd_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_1_GEN2r_DESCR_MODEf_GET(r) ((((r).sc_x4_rslvd_1_gen2[0]) >> 14) & 0x3)
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_1_GEN2r_DESCR_MODEf_SET(r,f) (r).sc_x4_rslvd_1_gen2[0]=(((r).sc_x4_rslvd_1_gen2[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_1_GEN2r_DEC_TL_MODEf_GET(r) ((((r).sc_x4_rslvd_1_gen2[0]) >> 12) & 0x3)
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_1_GEN2r_DEC_TL_MODEf_SET(r,f) (r).sc_x4_rslvd_1_gen2[0]=(((r).sc_x4_rslvd_1_gen2[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12)) | (3 << (16 + 12))
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_1_GEN2r_DESKEW_MODEf_GET(r) ((((r).sc_x4_rslvd_1_gen2[0]) >> 8) & 0xf)
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_1_GEN2r_DESKEW_MODEf_SET(r,f) (r).sc_x4_rslvd_1_gen2[0]=(((r).sc_x4_rslvd_1_gen2[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_1_GEN2r_DEC_FSM_MODEf_GET(r) ((((r).sc_x4_rslvd_1_gen2[0]) >> 6) & 0x3)
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_1_GEN2r_DEC_FSM_MODEf_SET(r,f) (r).sc_x4_rslvd_1_gen2[0]=(((r).sc_x4_rslvd_1_gen2[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6)) | (3 << (16 + 6))
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_1_GEN2r_BS_SM_SYNC_MODEf_GET(r) ((((r).sc_x4_rslvd_1_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_1_GEN2r_BS_SM_SYNC_MODEf_SET(r,f) (r).sc_x4_rslvd_1_gen2[0]=(((r).sc_x4_rslvd_1_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_1_GEN2r_BS_SYNC_ENf_GET(r) ((((r).sc_x4_rslvd_1_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_1_GEN2r_BS_SYNC_ENf_SET(r,f) (r).sc_x4_rslvd_1_gen2[0]=(((r).sc_x4_rslvd_1_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_1_GEN2r_BS_DIST_MODEf_GET(r) ((((r).sc_x4_rslvd_1_gen2[0]) >> 2) & 0x3)
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_1_GEN2r_BS_DIST_MODEf_SET(r,f) (r).sc_x4_rslvd_1_gen2[0]=(((r).sc_x4_rslvd_1_gen2[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2)) | (3 << (16 + 2))
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_1_GEN2r_BS_BTMX_MODEf_GET(r) (((r).sc_x4_rslvd_1_gen2[0]) & 0x3)
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_1_GEN2r_BS_BTMX_MODEf_SET(r,f) (r).sc_x4_rslvd_1_gen2[0]=(((r).sc_x4_rslvd_1_gen2[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access SC_X4_RSLVD_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X4_RSLVD_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_1_GEN2r,(_r._sc_x4_rslvd_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X4_RSLVD_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_1_GEN2r,(_r._sc_x4_rslvd_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X4_RSLVD_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_1_GEN2r,(_r._sc_x4_rslvd_1_gen2))
#define BCMI_TSCF_XGXS_READLN_SC_X4_RSLVD_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_rslvd_1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_SC_X4_RSLVD_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_rslvd_1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_SC_X4_RSLVD_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sc_x4_rslvd_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X4_RSLVD_1_GEN2r BCMI_TSCF_XGXS_SC_X4_RSLVD_1_GEN2r
#define SC_X4_RSLVD_1_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X4_RSLVD_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X4_RSLVD_1_GEN2r_t SC_X4_RSLVD_1_GEN2r_t;
#define SC_X4_RSLVD_1_GEN2r_CLR BCMI_TSCF_XGXS_SC_X4_RSLVD_1_GEN2r_CLR
#define SC_X4_RSLVD_1_GEN2r_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_1_GEN2r_SET
#define SC_X4_RSLVD_1_GEN2r_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_1_GEN2r_GET
#define SC_X4_RSLVD_1_GEN2r_DESCR_MODEf_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_1_GEN2r_DESCR_MODEf_GET
#define SC_X4_RSLVD_1_GEN2r_DESCR_MODEf_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_1_GEN2r_DESCR_MODEf_SET
#define SC_X4_RSLVD_1_GEN2r_DEC_TL_MODEf_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_1_GEN2r_DEC_TL_MODEf_GET
#define SC_X4_RSLVD_1_GEN2r_DEC_TL_MODEf_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_1_GEN2r_DEC_TL_MODEf_SET
#define SC_X4_RSLVD_1_GEN2r_DESKEW_MODEf_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_1_GEN2r_DESKEW_MODEf_GET
#define SC_X4_RSLVD_1_GEN2r_DESKEW_MODEf_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_1_GEN2r_DESKEW_MODEf_SET
#define SC_X4_RSLVD_1_GEN2r_DEC_FSM_MODEf_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_1_GEN2r_DEC_FSM_MODEf_GET
#define SC_X4_RSLVD_1_GEN2r_DEC_FSM_MODEf_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_1_GEN2r_DEC_FSM_MODEf_SET
#define SC_X4_RSLVD_1_GEN2r_BS_SM_SYNC_MODEf_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_1_GEN2r_BS_SM_SYNC_MODEf_GET
#define SC_X4_RSLVD_1_GEN2r_BS_SM_SYNC_MODEf_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_1_GEN2r_BS_SM_SYNC_MODEf_SET
#define SC_X4_RSLVD_1_GEN2r_BS_SYNC_ENf_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_1_GEN2r_BS_SYNC_ENf_GET
#define SC_X4_RSLVD_1_GEN2r_BS_SYNC_ENf_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_1_GEN2r_BS_SYNC_ENf_SET
#define SC_X4_RSLVD_1_GEN2r_BS_DIST_MODEf_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_1_GEN2r_BS_DIST_MODEf_GET
#define SC_X4_RSLVD_1_GEN2r_BS_DIST_MODEf_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_1_GEN2r_BS_DIST_MODEf_SET
#define SC_X4_RSLVD_1_GEN2r_BS_BTMX_MODEf_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_1_GEN2r_BS_BTMX_MODEf_GET
#define SC_X4_RSLVD_1_GEN2r_BS_BTMX_MODEf_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_1_GEN2r_BS_BTMX_MODEf_SET
#define READ_SC_X4_RSLVD_1_GEN2r BCMI_TSCF_XGXS_READ_SC_X4_RSLVD_1_GEN2r
#define WRITE_SC_X4_RSLVD_1_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X4_RSLVD_1_GEN2r
#define MODIFY_SC_X4_RSLVD_1_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X4_RSLVD_1_GEN2r
#define READLN_SC_X4_RSLVD_1_GEN2r BCMI_TSCF_XGXS_READLN_SC_X4_RSLVD_1_GEN2r
#define WRITELN_SC_X4_RSLVD_1_GEN2r BCMI_TSCF_XGXS_WRITELN_SC_X4_RSLVD_1_GEN2r
#define WRITEALL_SC_X4_RSLVD_1_GEN2r BCMI_TSCF_XGXS_WRITEALL_SC_X4_RSLVD_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X4_RSLVD_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X4_RSLVD_2_GEN2
 * BLOCKS:   SC_X4_FINAL_CONFIG_STATUS
 * REGADDR:  0xc074
 * DESC:     Final speed configuration for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CLOCKCNT0        clock count 0 for credit programming, range 5 to 4125
 */
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_2_GEN2r (0x0000c074 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X4_RSLVD_2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X4_RSLVD_2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X4_RSLVD_2_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x4_rslvd_2_gen2[1];
	uint32_t _sc_x4_rslvd_2_gen2;
} BCMI_TSCF_XGXS_SC_X4_RSLVD_2_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X4_RSLVD_2_GEN2r_CLR(r) (r).sc_x4_rslvd_2_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_2_GEN2r_SET(r,d) (r).sc_x4_rslvd_2_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_2_GEN2r_GET(r) (r).sc_x4_rslvd_2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_2_GEN2r_CLOCKCNT0f_GET(r) (((r).sc_x4_rslvd_2_gen2[0]) & 0x3fff)
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_2_GEN2r_CLOCKCNT0f_SET(r,f) (r).sc_x4_rslvd_2_gen2[0]=(((r).sc_x4_rslvd_2_gen2[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff)) | (0x3fff << 16)

/*
 * These macros can be used to access SC_X4_RSLVD_2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X4_RSLVD_2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_2_GEN2r,(_r._sc_x4_rslvd_2_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X4_RSLVD_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_2_GEN2r,(_r._sc_x4_rslvd_2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X4_RSLVD_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_2_GEN2r,(_r._sc_x4_rslvd_2_gen2))
#define BCMI_TSCF_XGXS_READLN_SC_X4_RSLVD_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_rslvd_2_gen2))
#define BCMI_TSCF_XGXS_WRITELN_SC_X4_RSLVD_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_rslvd_2_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_SC_X4_RSLVD_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sc_x4_rslvd_2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X4_RSLVD_2_GEN2r BCMI_TSCF_XGXS_SC_X4_RSLVD_2_GEN2r
#define SC_X4_RSLVD_2_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X4_RSLVD_2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X4_RSLVD_2_GEN2r_t SC_X4_RSLVD_2_GEN2r_t;
#define SC_X4_RSLVD_2_GEN2r_CLR BCMI_TSCF_XGXS_SC_X4_RSLVD_2_GEN2r_CLR
#define SC_X4_RSLVD_2_GEN2r_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_2_GEN2r_SET
#define SC_X4_RSLVD_2_GEN2r_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_2_GEN2r_GET
#define SC_X4_RSLVD_2_GEN2r_CLOCKCNT0f_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_2_GEN2r_CLOCKCNT0f_GET
#define SC_X4_RSLVD_2_GEN2r_CLOCKCNT0f_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_2_GEN2r_CLOCKCNT0f_SET
#define READ_SC_X4_RSLVD_2_GEN2r BCMI_TSCF_XGXS_READ_SC_X4_RSLVD_2_GEN2r
#define WRITE_SC_X4_RSLVD_2_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X4_RSLVD_2_GEN2r
#define MODIFY_SC_X4_RSLVD_2_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X4_RSLVD_2_GEN2r
#define READLN_SC_X4_RSLVD_2_GEN2r BCMI_TSCF_XGXS_READLN_SC_X4_RSLVD_2_GEN2r
#define WRITELN_SC_X4_RSLVD_2_GEN2r BCMI_TSCF_XGXS_WRITELN_SC_X4_RSLVD_2_GEN2r
#define WRITEALL_SC_X4_RSLVD_2_GEN2r BCMI_TSCF_XGXS_WRITEALL_SC_X4_RSLVD_2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X4_RSLVD_2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X4_RSLVD_3_GEN2
 * BLOCKS:   SC_X4_FINAL_CONFIG_STATUS
 * REGADDR:  0xc075
 * DESC:     Final speed configuration for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CLOCKCNT1        clock count 1 for credit programming, range 4 to 12
 */
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_3_GEN2r (0x0000c075 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X4_RSLVD_3_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X4_RSLVD_3_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X4_RSLVD_3_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x4_rslvd_3_gen2[1];
	uint32_t _sc_x4_rslvd_3_gen2;
} BCMI_TSCF_XGXS_SC_X4_RSLVD_3_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X4_RSLVD_3_GEN2r_CLR(r) (r).sc_x4_rslvd_3_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_3_GEN2r_SET(r,d) (r).sc_x4_rslvd_3_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_3_GEN2r_GET(r) (r).sc_x4_rslvd_3_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_3_GEN2r_CLOCKCNT1f_GET(r) (((r).sc_x4_rslvd_3_gen2[0]) & 0xff)
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_3_GEN2r_CLOCKCNT1f_SET(r,f) (r).sc_x4_rslvd_3_gen2[0]=(((r).sc_x4_rslvd_3_gen2[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access SC_X4_RSLVD_3_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X4_RSLVD_3_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_3_GEN2r,(_r._sc_x4_rslvd_3_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X4_RSLVD_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_3_GEN2r,(_r._sc_x4_rslvd_3_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X4_RSLVD_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_3_GEN2r,(_r._sc_x4_rslvd_3_gen2))
#define BCMI_TSCF_XGXS_READLN_SC_X4_RSLVD_3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_rslvd_3_gen2))
#define BCMI_TSCF_XGXS_WRITELN_SC_X4_RSLVD_3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_rslvd_3_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_SC_X4_RSLVD_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sc_x4_rslvd_3_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X4_RSLVD_3_GEN2r BCMI_TSCF_XGXS_SC_X4_RSLVD_3_GEN2r
#define SC_X4_RSLVD_3_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X4_RSLVD_3_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X4_RSLVD_3_GEN2r_t SC_X4_RSLVD_3_GEN2r_t;
#define SC_X4_RSLVD_3_GEN2r_CLR BCMI_TSCF_XGXS_SC_X4_RSLVD_3_GEN2r_CLR
#define SC_X4_RSLVD_3_GEN2r_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_3_GEN2r_SET
#define SC_X4_RSLVD_3_GEN2r_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_3_GEN2r_GET
#define SC_X4_RSLVD_3_GEN2r_CLOCKCNT1f_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_3_GEN2r_CLOCKCNT1f_GET
#define SC_X4_RSLVD_3_GEN2r_CLOCKCNT1f_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_3_GEN2r_CLOCKCNT1f_SET
#define READ_SC_X4_RSLVD_3_GEN2r BCMI_TSCF_XGXS_READ_SC_X4_RSLVD_3_GEN2r
#define WRITE_SC_X4_RSLVD_3_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X4_RSLVD_3_GEN2r
#define MODIFY_SC_X4_RSLVD_3_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X4_RSLVD_3_GEN2r
#define READLN_SC_X4_RSLVD_3_GEN2r BCMI_TSCF_XGXS_READLN_SC_X4_RSLVD_3_GEN2r
#define WRITELN_SC_X4_RSLVD_3_GEN2r BCMI_TSCF_XGXS_WRITELN_SC_X4_RSLVD_3_GEN2r
#define WRITEALL_SC_X4_RSLVD_3_GEN2r BCMI_TSCF_XGXS_WRITEALL_SC_X4_RSLVD_3_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X4_RSLVD_3_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X4_RSLVD_4_GEN2
 * BLOCKS:   SC_X4_FINAL_CONFIG_STATUS
 * REGADDR:  0xc076
 * DESC:     Final speed configuration for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     LOOPCNT1         loop count 1 for credit programming, range 2 to 18
 *     LOOPCNT0         loop count 0 for credit programming, range 1 to 1
 */
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_4_GEN2r (0x0000c076 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X4_RSLVD_4_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X4_RSLVD_4_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X4_RSLVD_4_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x4_rslvd_4_gen2[1];
	uint32_t _sc_x4_rslvd_4_gen2;
} BCMI_TSCF_XGXS_SC_X4_RSLVD_4_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X4_RSLVD_4_GEN2r_CLR(r) (r).sc_x4_rslvd_4_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_4_GEN2r_SET(r,d) (r).sc_x4_rslvd_4_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_4_GEN2r_GET(r) (r).sc_x4_rslvd_4_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_4_GEN2r_LOOPCNT0f_GET(r) ((((r).sc_x4_rslvd_4_gen2[0]) >> 6) & 0xff)
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_4_GEN2r_LOOPCNT0f_SET(r,f) (r).sc_x4_rslvd_4_gen2[0]=(((r).sc_x4_rslvd_4_gen2[0] & ~((uint32_t)0xff << 6)) | ((((uint32_t)f) & 0xff) << 6)) | (255 << (16 + 6))
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_4_GEN2r_LOOPCNT1f_GET(r) (((r).sc_x4_rslvd_4_gen2[0]) & 0x3f)
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_4_GEN2r_LOOPCNT1f_SET(r,f) (r).sc_x4_rslvd_4_gen2[0]=(((r).sc_x4_rslvd_4_gen2[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access SC_X4_RSLVD_4_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X4_RSLVD_4_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_4_GEN2r,(_r._sc_x4_rslvd_4_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X4_RSLVD_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_4_GEN2r,(_r._sc_x4_rslvd_4_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X4_RSLVD_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_4_GEN2r,(_r._sc_x4_rslvd_4_gen2))
#define BCMI_TSCF_XGXS_READLN_SC_X4_RSLVD_4_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_rslvd_4_gen2))
#define BCMI_TSCF_XGXS_WRITELN_SC_X4_RSLVD_4_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_rslvd_4_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_SC_X4_RSLVD_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sc_x4_rslvd_4_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X4_RSLVD_4_GEN2r BCMI_TSCF_XGXS_SC_X4_RSLVD_4_GEN2r
#define SC_X4_RSLVD_4_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X4_RSLVD_4_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X4_RSLVD_4_GEN2r_t SC_X4_RSLVD_4_GEN2r_t;
#define SC_X4_RSLVD_4_GEN2r_CLR BCMI_TSCF_XGXS_SC_X4_RSLVD_4_GEN2r_CLR
#define SC_X4_RSLVD_4_GEN2r_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_4_GEN2r_SET
#define SC_X4_RSLVD_4_GEN2r_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_4_GEN2r_GET
#define SC_X4_RSLVD_4_GEN2r_LOOPCNT0f_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_4_GEN2r_LOOPCNT0f_GET
#define SC_X4_RSLVD_4_GEN2r_LOOPCNT0f_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_4_GEN2r_LOOPCNT0f_SET
#define SC_X4_RSLVD_4_GEN2r_LOOPCNT1f_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_4_GEN2r_LOOPCNT1f_GET
#define SC_X4_RSLVD_4_GEN2r_LOOPCNT1f_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_4_GEN2r_LOOPCNT1f_SET
#define READ_SC_X4_RSLVD_4_GEN2r BCMI_TSCF_XGXS_READ_SC_X4_RSLVD_4_GEN2r
#define WRITE_SC_X4_RSLVD_4_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X4_RSLVD_4_GEN2r
#define MODIFY_SC_X4_RSLVD_4_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X4_RSLVD_4_GEN2r
#define READLN_SC_X4_RSLVD_4_GEN2r BCMI_TSCF_XGXS_READLN_SC_X4_RSLVD_4_GEN2r
#define WRITELN_SC_X4_RSLVD_4_GEN2r BCMI_TSCF_XGXS_WRITELN_SC_X4_RSLVD_4_GEN2r
#define WRITEALL_SC_X4_RSLVD_4_GEN2r BCMI_TSCF_XGXS_WRITEALL_SC_X4_RSLVD_4_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X4_RSLVD_4_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X4_RSLVD_5_GEN2
 * BLOCKS:   SC_X4_FINAL_CONFIG_STATUS
 * REGADDR:  0xc077
 * DESC:     Final speed configuration for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MAC_CREDITGENCNT CGC for mac credit generation, range 1 to 2063
 */
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_5_GEN2r (0x0000c077 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X4_RSLVD_5_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X4_RSLVD_5_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X4_RSLVD_5_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x4_rslvd_5_gen2[1];
	uint32_t _sc_x4_rslvd_5_gen2;
} BCMI_TSCF_XGXS_SC_X4_RSLVD_5_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X4_RSLVD_5_GEN2r_CLR(r) (r).sc_x4_rslvd_5_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_5_GEN2r_SET(r,d) (r).sc_x4_rslvd_5_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_5_GEN2r_GET(r) (r).sc_x4_rslvd_5_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_5_GEN2r_MAC_CREDITGENCNTf_GET(r) (((r).sc_x4_rslvd_5_gen2[0]) & 0x1fff)
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_5_GEN2r_MAC_CREDITGENCNTf_SET(r,f) (r).sc_x4_rslvd_5_gen2[0]=(((r).sc_x4_rslvd_5_gen2[0] & ~((uint32_t)0x1fff)) | (((uint32_t)f) & 0x1fff)) | (0x1fff << 16)

/*
 * These macros can be used to access SC_X4_RSLVD_5_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X4_RSLVD_5_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_5_GEN2r,(_r._sc_x4_rslvd_5_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X4_RSLVD_5_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_5_GEN2r,(_r._sc_x4_rslvd_5_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X4_RSLVD_5_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_5_GEN2r,(_r._sc_x4_rslvd_5_gen2))
#define BCMI_TSCF_XGXS_READLN_SC_X4_RSLVD_5_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_5_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_rslvd_5_gen2))
#define BCMI_TSCF_XGXS_WRITELN_SC_X4_RSLVD_5_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_5_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_rslvd_5_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_SC_X4_RSLVD_5_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_5_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sc_x4_rslvd_5_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X4_RSLVD_5_GEN2r BCMI_TSCF_XGXS_SC_X4_RSLVD_5_GEN2r
#define SC_X4_RSLVD_5_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X4_RSLVD_5_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X4_RSLVD_5_GEN2r_t SC_X4_RSLVD_5_GEN2r_t;
#define SC_X4_RSLVD_5_GEN2r_CLR BCMI_TSCF_XGXS_SC_X4_RSLVD_5_GEN2r_CLR
#define SC_X4_RSLVD_5_GEN2r_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_5_GEN2r_SET
#define SC_X4_RSLVD_5_GEN2r_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_5_GEN2r_GET
#define SC_X4_RSLVD_5_GEN2r_MAC_CREDITGENCNTf_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_5_GEN2r_MAC_CREDITGENCNTf_GET
#define SC_X4_RSLVD_5_GEN2r_MAC_CREDITGENCNTf_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_5_GEN2r_MAC_CREDITGENCNTf_SET
#define READ_SC_X4_RSLVD_5_GEN2r BCMI_TSCF_XGXS_READ_SC_X4_RSLVD_5_GEN2r
#define WRITE_SC_X4_RSLVD_5_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X4_RSLVD_5_GEN2r
#define MODIFY_SC_X4_RSLVD_5_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X4_RSLVD_5_GEN2r
#define READLN_SC_X4_RSLVD_5_GEN2r BCMI_TSCF_XGXS_READLN_SC_X4_RSLVD_5_GEN2r
#define WRITELN_SC_X4_RSLVD_5_GEN2r BCMI_TSCF_XGXS_WRITELN_SC_X4_RSLVD_5_GEN2r
#define WRITEALL_SC_X4_RSLVD_5_GEN2r BCMI_TSCF_XGXS_WRITEALL_SC_X4_RSLVD_5_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X4_RSLVD_5_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X4_FEC_STS_GEN2
 * BLOCKS:   SC_X4_FINAL_CONFIG_STATUS
 * REGADDR:  0xc078
 * DESC:     Final speed configuration for FEC
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     R_FEC_ENABLE     Receive CL74 FEC enable status
 *     T_FEC_ENABLE     Transmit CL74 FEC enable status
 *     R_CL91_FEC_MODE  
 *     T_CL91_FEC_MODE  
 */
#define BCMI_TSCF_XGXS_SC_X4_FEC_STS_GEN2r (0x0000c078 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X4_FEC_STS_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X4_FEC_STS_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X4_FEC_STS_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x4_fec_sts_gen2[1];
	uint32_t _sc_x4_fec_sts_gen2;
} BCMI_TSCF_XGXS_SC_X4_FEC_STS_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X4_FEC_STS_GEN2r_CLR(r) (r).sc_x4_fec_sts_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X4_FEC_STS_GEN2r_SET(r,d) (r).sc_x4_fec_sts_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X4_FEC_STS_GEN2r_GET(r) (r).sc_x4_fec_sts_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X4_FEC_STS_GEN2r_T_CL91_FEC_MODEf_GET(r) ((((r).sc_x4_fec_sts_gen2[0]) >> 5) & 0x7)
#define BCMI_TSCF_XGXS_SC_X4_FEC_STS_GEN2r_T_CL91_FEC_MODEf_SET(r,f) (r).sc_x4_fec_sts_gen2[0]=(((r).sc_x4_fec_sts_gen2[0] & ~((uint32_t)0x7 << 5)) | ((((uint32_t)f) & 0x7) << 5)) | (7 << (16 + 5))
#define BCMI_TSCF_XGXS_SC_X4_FEC_STS_GEN2r_R_CL91_FEC_MODEf_GET(r) ((((r).sc_x4_fec_sts_gen2[0]) >> 2) & 0x7)
#define BCMI_TSCF_XGXS_SC_X4_FEC_STS_GEN2r_R_CL91_FEC_MODEf_SET(r,f) (r).sc_x4_fec_sts_gen2[0]=(((r).sc_x4_fec_sts_gen2[0] & ~((uint32_t)0x7 << 2)) | ((((uint32_t)f) & 0x7) << 2)) | (7 << (16 + 2))
#define BCMI_TSCF_XGXS_SC_X4_FEC_STS_GEN2r_T_FEC_ENABLEf_GET(r) ((((r).sc_x4_fec_sts_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_FEC_STS_GEN2r_T_FEC_ENABLEf_SET(r,f) (r).sc_x4_fec_sts_gen2[0]=(((r).sc_x4_fec_sts_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_SC_X4_FEC_STS_GEN2r_R_FEC_ENABLEf_GET(r) (((r).sc_x4_fec_sts_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_FEC_STS_GEN2r_R_FEC_ENABLEf_SET(r,f) (r).sc_x4_fec_sts_gen2[0]=(((r).sc_x4_fec_sts_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access SC_X4_FEC_STS_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X4_FEC_STS_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X4_FEC_STS_GEN2r,(_r._sc_x4_fec_sts_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X4_FEC_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_FEC_STS_GEN2r,(_r._sc_x4_fec_sts_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X4_FEC_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_FEC_STS_GEN2r,(_r._sc_x4_fec_sts_gen2))
#define BCMI_TSCF_XGXS_READLN_SC_X4_FEC_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X4_FEC_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_fec_sts_gen2))
#define BCMI_TSCF_XGXS_WRITELN_SC_X4_FEC_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_FEC_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_fec_sts_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_SC_X4_FEC_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_FEC_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sc_x4_fec_sts_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X4_FEC_STS_GEN2r BCMI_TSCF_XGXS_SC_X4_FEC_STS_GEN2r
#define SC_X4_FEC_STS_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X4_FEC_STS_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X4_FEC_STS_GEN2r_t SC_X4_FEC_STS_GEN2r_t;
#define SC_X4_FEC_STS_GEN2r_CLR BCMI_TSCF_XGXS_SC_X4_FEC_STS_GEN2r_CLR
#define SC_X4_FEC_STS_GEN2r_SET BCMI_TSCF_XGXS_SC_X4_FEC_STS_GEN2r_SET
#define SC_X4_FEC_STS_GEN2r_GET BCMI_TSCF_XGXS_SC_X4_FEC_STS_GEN2r_GET
#define SC_X4_FEC_STS_GEN2r_T_CL91_FEC_MODEf_GET BCMI_TSCF_XGXS_SC_X4_FEC_STS_GEN2r_T_CL91_FEC_MODEf_GET
#define SC_X4_FEC_STS_GEN2r_T_CL91_FEC_MODEf_SET BCMI_TSCF_XGXS_SC_X4_FEC_STS_GEN2r_T_CL91_FEC_MODEf_SET
#define SC_X4_FEC_STS_GEN2r_R_CL91_FEC_MODEf_GET BCMI_TSCF_XGXS_SC_X4_FEC_STS_GEN2r_R_CL91_FEC_MODEf_GET
#define SC_X4_FEC_STS_GEN2r_R_CL91_FEC_MODEf_SET BCMI_TSCF_XGXS_SC_X4_FEC_STS_GEN2r_R_CL91_FEC_MODEf_SET
#define SC_X4_FEC_STS_GEN2r_T_FEC_ENABLEf_GET BCMI_TSCF_XGXS_SC_X4_FEC_STS_GEN2r_T_FEC_ENABLEf_GET
#define SC_X4_FEC_STS_GEN2r_T_FEC_ENABLEf_SET BCMI_TSCF_XGXS_SC_X4_FEC_STS_GEN2r_T_FEC_ENABLEf_SET
#define SC_X4_FEC_STS_GEN2r_R_FEC_ENABLEf_GET BCMI_TSCF_XGXS_SC_X4_FEC_STS_GEN2r_R_FEC_ENABLEf_GET
#define SC_X4_FEC_STS_GEN2r_R_FEC_ENABLEf_SET BCMI_TSCF_XGXS_SC_X4_FEC_STS_GEN2r_R_FEC_ENABLEf_SET
#define READ_SC_X4_FEC_STS_GEN2r BCMI_TSCF_XGXS_READ_SC_X4_FEC_STS_GEN2r
#define WRITE_SC_X4_FEC_STS_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X4_FEC_STS_GEN2r
#define MODIFY_SC_X4_FEC_STS_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X4_FEC_STS_GEN2r
#define READLN_SC_X4_FEC_STS_GEN2r BCMI_TSCF_XGXS_READLN_SC_X4_FEC_STS_GEN2r
#define WRITELN_SC_X4_FEC_STS_GEN2r BCMI_TSCF_XGXS_WRITELN_SC_X4_FEC_STS_GEN2r
#define WRITEALL_SC_X4_FEC_STS_GEN2r BCMI_TSCF_XGXS_WRITEALL_SC_X4_FEC_STS_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X4_FEC_STS_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X4_RSLVD_6_GEN2
 * BLOCKS:   SC_X4_FINAL_CONFIG_STATUS
 * REGADDR:  0xc079
 * DESC:     Final speed configuration for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     T_CL91_CW_SCRAMBLE Indicates whether the CL91 codeword should be scrambled or not. It should be set to 1 in FC mode.
 *     T_FIVE_BIT_XOR_EN 1'b1 - XOR 4:0 with 12:8, 1'b0 - No XOR of the 5 bits
 *     T_PMA_CL91_MUX_SEL T_PMA MUX CL91 select.
 *     T_PMA_WATERMARK  T_PMA FIFO watermark. In units of 66-bit blocks.
 *     T_PMA_BITMUX_DELAY T_PMA FIFO delay after watermark is reached (in units of cycles)
 *     AM_SPACING_MUL   
 */
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_6_GEN2r (0x0000c079 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X4_RSLVD_6_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X4_RSLVD_6_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X4_RSLVD_6_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x4_rslvd_6_gen2[1];
	uint32_t _sc_x4_rslvd_6_gen2;
} BCMI_TSCF_XGXS_SC_X4_RSLVD_6_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X4_RSLVD_6_GEN2r_CLR(r) (r).sc_x4_rslvd_6_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_6_GEN2r_SET(r,d) (r).sc_x4_rslvd_6_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_6_GEN2r_GET(r) (r).sc_x4_rslvd_6_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_6_GEN2r_AM_SPACING_MULf_GET(r) ((((r).sc_x4_rslvd_6_gen2[0]) >> 9) & 0x3)
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_6_GEN2r_AM_SPACING_MULf_SET(r,f) (r).sc_x4_rslvd_6_gen2[0]=(((r).sc_x4_rslvd_6_gen2[0] & ~((uint32_t)0x3 << 9)) | ((((uint32_t)f) & 0x3) << 9)) | (3 << (16 + 9))
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_6_GEN2r_T_PMA_BITMUX_DELAYf_GET(r) ((((r).sc_x4_rslvd_6_gen2[0]) >> 7) & 0x3)
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_6_GEN2r_T_PMA_BITMUX_DELAYf_SET(r,f) (r).sc_x4_rslvd_6_gen2[0]=(((r).sc_x4_rslvd_6_gen2[0] & ~((uint32_t)0x3 << 7)) | ((((uint32_t)f) & 0x3) << 7)) | (3 << (16 + 7))
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_6_GEN2r_T_PMA_WATERMARKf_GET(r) ((((r).sc_x4_rslvd_6_gen2[0]) >> 3) & 0xf)
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_6_GEN2r_T_PMA_WATERMARKf_SET(r,f) (r).sc_x4_rslvd_6_gen2[0]=(((r).sc_x4_rslvd_6_gen2[0] & ~((uint32_t)0xf << 3)) | ((((uint32_t)f) & 0xf) << 3)) | (15 << (16 + 3))
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_6_GEN2r_T_PMA_CL91_MUX_SELf_GET(r) ((((r).sc_x4_rslvd_6_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_6_GEN2r_T_PMA_CL91_MUX_SELf_SET(r,f) (r).sc_x4_rslvd_6_gen2[0]=(((r).sc_x4_rslvd_6_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_6_GEN2r_T_FIVE_BIT_XOR_ENf_GET(r) ((((r).sc_x4_rslvd_6_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_6_GEN2r_T_FIVE_BIT_XOR_ENf_SET(r,f) (r).sc_x4_rslvd_6_gen2[0]=(((r).sc_x4_rslvd_6_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_6_GEN2r_T_CL91_CW_SCRAMBLEf_GET(r) (((r).sc_x4_rslvd_6_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_6_GEN2r_T_CL91_CW_SCRAMBLEf_SET(r,f) (r).sc_x4_rslvd_6_gen2[0]=(((r).sc_x4_rslvd_6_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access SC_X4_RSLVD_6_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X4_RSLVD_6_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_6_GEN2r,(_r._sc_x4_rslvd_6_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X4_RSLVD_6_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_6_GEN2r,(_r._sc_x4_rslvd_6_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X4_RSLVD_6_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_6_GEN2r,(_r._sc_x4_rslvd_6_gen2))
#define BCMI_TSCF_XGXS_READLN_SC_X4_RSLVD_6_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_6_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_rslvd_6_gen2))
#define BCMI_TSCF_XGXS_WRITELN_SC_X4_RSLVD_6_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_6_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_rslvd_6_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_SC_X4_RSLVD_6_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_6_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sc_x4_rslvd_6_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X4_RSLVD_6_GEN2r BCMI_TSCF_XGXS_SC_X4_RSLVD_6_GEN2r
#define SC_X4_RSLVD_6_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X4_RSLVD_6_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X4_RSLVD_6_GEN2r_t SC_X4_RSLVD_6_GEN2r_t;
#define SC_X4_RSLVD_6_GEN2r_CLR BCMI_TSCF_XGXS_SC_X4_RSLVD_6_GEN2r_CLR
#define SC_X4_RSLVD_6_GEN2r_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_6_GEN2r_SET
#define SC_X4_RSLVD_6_GEN2r_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_6_GEN2r_GET
#define SC_X4_RSLVD_6_GEN2r_AM_SPACING_MULf_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_6_GEN2r_AM_SPACING_MULf_GET
#define SC_X4_RSLVD_6_GEN2r_AM_SPACING_MULf_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_6_GEN2r_AM_SPACING_MULf_SET
#define SC_X4_RSLVD_6_GEN2r_T_PMA_BITMUX_DELAYf_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_6_GEN2r_T_PMA_BITMUX_DELAYf_GET
#define SC_X4_RSLVD_6_GEN2r_T_PMA_BITMUX_DELAYf_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_6_GEN2r_T_PMA_BITMUX_DELAYf_SET
#define SC_X4_RSLVD_6_GEN2r_T_PMA_WATERMARKf_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_6_GEN2r_T_PMA_WATERMARKf_GET
#define SC_X4_RSLVD_6_GEN2r_T_PMA_WATERMARKf_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_6_GEN2r_T_PMA_WATERMARKf_SET
#define SC_X4_RSLVD_6_GEN2r_T_PMA_CL91_MUX_SELf_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_6_GEN2r_T_PMA_CL91_MUX_SELf_GET
#define SC_X4_RSLVD_6_GEN2r_T_PMA_CL91_MUX_SELf_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_6_GEN2r_T_PMA_CL91_MUX_SELf_SET
#define SC_X4_RSLVD_6_GEN2r_T_FIVE_BIT_XOR_ENf_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_6_GEN2r_T_FIVE_BIT_XOR_ENf_GET
#define SC_X4_RSLVD_6_GEN2r_T_FIVE_BIT_XOR_ENf_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_6_GEN2r_T_FIVE_BIT_XOR_ENf_SET
#define SC_X4_RSLVD_6_GEN2r_T_CL91_CW_SCRAMBLEf_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_6_GEN2r_T_CL91_CW_SCRAMBLEf_GET
#define SC_X4_RSLVD_6_GEN2r_T_CL91_CW_SCRAMBLEf_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_6_GEN2r_T_CL91_CW_SCRAMBLEf_SET
#define READ_SC_X4_RSLVD_6_GEN2r BCMI_TSCF_XGXS_READ_SC_X4_RSLVD_6_GEN2r
#define WRITE_SC_X4_RSLVD_6_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X4_RSLVD_6_GEN2r
#define MODIFY_SC_X4_RSLVD_6_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X4_RSLVD_6_GEN2r
#define READLN_SC_X4_RSLVD_6_GEN2r BCMI_TSCF_XGXS_READLN_SC_X4_RSLVD_6_GEN2r
#define WRITELN_SC_X4_RSLVD_6_GEN2r BCMI_TSCF_XGXS_WRITELN_SC_X4_RSLVD_6_GEN2r
#define WRITEALL_SC_X4_RSLVD_6_GEN2r BCMI_TSCF_XGXS_WRITEALL_SC_X4_RSLVD_6_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X4_RSLVD_6_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X4_RSLVD_7_GEN2
 * BLOCKS:   SC_X4_FINAL_CONFIG_STATUS
 * REGADDR:  0xc07a
 * DESC:     Final speed configuration for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CL91_BLKSYNC_MODE 
 *     R_MERGE_MODE     
 *     R_CL91_CW_SCRAMBLE Indicates whether the CL91 codeword needs to be descrambled. Should be enabled for FC mode.
 *     R_TC_IN_MODE     Indicates whether CL91 is turned ON for the port or not.
 *     R_TC_MODE        
 *     R_FIVE_BIT_XOR_EN 1'b1 - XOR 4:0 with 12:8, 1'b0 - No XOR of the 5 bits
 *     R_TC_OUT_MODE    
 *     R_HG2_ENABLE     Enables HG2 support for PCS
 */
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_7_GEN2r (0x0000c07a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X4_RSLVD_7_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X4_RSLVD_7_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X4_RSLVD_7_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x4_rslvd_7_gen2[1];
	uint32_t _sc_x4_rslvd_7_gen2;
} BCMI_TSCF_XGXS_SC_X4_RSLVD_7_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X4_RSLVD_7_GEN2r_CLR(r) (r).sc_x4_rslvd_7_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_7_GEN2r_SET(r,d) (r).sc_x4_rslvd_7_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_7_GEN2r_GET(r) (r).sc_x4_rslvd_7_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_7_GEN2r_R_HG2_ENABLEf_GET(r) ((((r).sc_x4_rslvd_7_gen2[0]) >> 13) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_7_GEN2r_R_HG2_ENABLEf_SET(r,f) (r).sc_x4_rslvd_7_gen2[0]=(((r).sc_x4_rslvd_7_gen2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_7_GEN2r_R_TC_OUT_MODEf_GET(r) ((((r).sc_x4_rslvd_7_gen2[0]) >> 11) & 0x3)
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_7_GEN2r_R_TC_OUT_MODEf_SET(r,f) (r).sc_x4_rslvd_7_gen2[0]=(((r).sc_x4_rslvd_7_gen2[0] & ~((uint32_t)0x3 << 11)) | ((((uint32_t)f) & 0x3) << 11)) | (3 << (16 + 11))
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_7_GEN2r_R_FIVE_BIT_XOR_ENf_GET(r) ((((r).sc_x4_rslvd_7_gen2[0]) >> 10) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_7_GEN2r_R_FIVE_BIT_XOR_ENf_SET(r,f) (r).sc_x4_rslvd_7_gen2[0]=(((r).sc_x4_rslvd_7_gen2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_7_GEN2r_R_TC_MODEf_GET(r) ((((r).sc_x4_rslvd_7_gen2[0]) >> 8) & 0x3)
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_7_GEN2r_R_TC_MODEf_SET(r,f) (r).sc_x4_rslvd_7_gen2[0]=(((r).sc_x4_rslvd_7_gen2[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_7_GEN2r_R_TC_IN_MODEf_GET(r) ((((r).sc_x4_rslvd_7_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_7_GEN2r_R_TC_IN_MODEf_SET(r,f) (r).sc_x4_rslvd_7_gen2[0]=(((r).sc_x4_rslvd_7_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_7_GEN2r_R_CL91_CW_SCRAMBLEf_GET(r) ((((r).sc_x4_rslvd_7_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_7_GEN2r_R_CL91_CW_SCRAMBLEf_SET(r,f) (r).sc_x4_rslvd_7_gen2[0]=(((r).sc_x4_rslvd_7_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_7_GEN2r_R_MERGE_MODEf_GET(r) ((((r).sc_x4_rslvd_7_gen2[0]) >> 3) & 0x7)
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_7_GEN2r_R_MERGE_MODEf_SET(r,f) (r).sc_x4_rslvd_7_gen2[0]=(((r).sc_x4_rslvd_7_gen2[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3)) | (7 << (16 + 3))
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_7_GEN2r_CL91_BLKSYNC_MODEf_GET(r) (((r).sc_x4_rslvd_7_gen2[0]) & 0x7)
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_7_GEN2r_CL91_BLKSYNC_MODEf_SET(r,f) (r).sc_x4_rslvd_7_gen2[0]=(((r).sc_x4_rslvd_7_gen2[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access SC_X4_RSLVD_7_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X4_RSLVD_7_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_7_GEN2r,(_r._sc_x4_rslvd_7_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X4_RSLVD_7_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_7_GEN2r,(_r._sc_x4_rslvd_7_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X4_RSLVD_7_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_7_GEN2r,(_r._sc_x4_rslvd_7_gen2))
#define BCMI_TSCF_XGXS_READLN_SC_X4_RSLVD_7_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_7_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_rslvd_7_gen2))
#define BCMI_TSCF_XGXS_WRITELN_SC_X4_RSLVD_7_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_7_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_rslvd_7_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_SC_X4_RSLVD_7_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_7_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sc_x4_rslvd_7_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X4_RSLVD_7_GEN2r BCMI_TSCF_XGXS_SC_X4_RSLVD_7_GEN2r
#define SC_X4_RSLVD_7_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X4_RSLVD_7_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X4_RSLVD_7_GEN2r_t SC_X4_RSLVD_7_GEN2r_t;
#define SC_X4_RSLVD_7_GEN2r_CLR BCMI_TSCF_XGXS_SC_X4_RSLVD_7_GEN2r_CLR
#define SC_X4_RSLVD_7_GEN2r_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_7_GEN2r_SET
#define SC_X4_RSLVD_7_GEN2r_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_7_GEN2r_GET
#define SC_X4_RSLVD_7_GEN2r_R_HG2_ENABLEf_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_7_GEN2r_R_HG2_ENABLEf_GET
#define SC_X4_RSLVD_7_GEN2r_R_HG2_ENABLEf_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_7_GEN2r_R_HG2_ENABLEf_SET
#define SC_X4_RSLVD_7_GEN2r_R_TC_OUT_MODEf_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_7_GEN2r_R_TC_OUT_MODEf_GET
#define SC_X4_RSLVD_7_GEN2r_R_TC_OUT_MODEf_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_7_GEN2r_R_TC_OUT_MODEf_SET
#define SC_X4_RSLVD_7_GEN2r_R_FIVE_BIT_XOR_ENf_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_7_GEN2r_R_FIVE_BIT_XOR_ENf_GET
#define SC_X4_RSLVD_7_GEN2r_R_FIVE_BIT_XOR_ENf_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_7_GEN2r_R_FIVE_BIT_XOR_ENf_SET
#define SC_X4_RSLVD_7_GEN2r_R_TC_MODEf_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_7_GEN2r_R_TC_MODEf_GET
#define SC_X4_RSLVD_7_GEN2r_R_TC_MODEf_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_7_GEN2r_R_TC_MODEf_SET
#define SC_X4_RSLVD_7_GEN2r_R_TC_IN_MODEf_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_7_GEN2r_R_TC_IN_MODEf_GET
#define SC_X4_RSLVD_7_GEN2r_R_TC_IN_MODEf_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_7_GEN2r_R_TC_IN_MODEf_SET
#define SC_X4_RSLVD_7_GEN2r_R_CL91_CW_SCRAMBLEf_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_7_GEN2r_R_CL91_CW_SCRAMBLEf_GET
#define SC_X4_RSLVD_7_GEN2r_R_CL91_CW_SCRAMBLEf_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_7_GEN2r_R_CL91_CW_SCRAMBLEf_SET
#define SC_X4_RSLVD_7_GEN2r_R_MERGE_MODEf_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_7_GEN2r_R_MERGE_MODEf_GET
#define SC_X4_RSLVD_7_GEN2r_R_MERGE_MODEf_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_7_GEN2r_R_MERGE_MODEf_SET
#define SC_X4_RSLVD_7_GEN2r_CL91_BLKSYNC_MODEf_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_7_GEN2r_CL91_BLKSYNC_MODEf_GET
#define SC_X4_RSLVD_7_GEN2r_CL91_BLKSYNC_MODEf_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_7_GEN2r_CL91_BLKSYNC_MODEf_SET
#define READ_SC_X4_RSLVD_7_GEN2r BCMI_TSCF_XGXS_READ_SC_X4_RSLVD_7_GEN2r
#define WRITE_SC_X4_RSLVD_7_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X4_RSLVD_7_GEN2r
#define MODIFY_SC_X4_RSLVD_7_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X4_RSLVD_7_GEN2r
#define READLN_SC_X4_RSLVD_7_GEN2r BCMI_TSCF_XGXS_READLN_SC_X4_RSLVD_7_GEN2r
#define WRITELN_SC_X4_RSLVD_7_GEN2r BCMI_TSCF_XGXS_WRITELN_SC_X4_RSLVD_7_GEN2r
#define WRITEALL_SC_X4_RSLVD_7_GEN2r BCMI_TSCF_XGXS_WRITEALL_SC_X4_RSLVD_7_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X4_RSLVD_7_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SC_X4_RSLVD_8_GEN2
 * BLOCKS:   SC_X4_FINAL_CONFIG_STATUS
 * REGADDR:  0xc07b
 * DESC:     Final speed configuration for PCS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CORRUPT_2ND_GROUP Corrupt 2nd group of codeward
 *     CORRUPT_6TH_GROUP Corrupt 6th group of codeward
 *     CL74_SHCORRUPT   Sync Header Corruption for CL74 FEC Error (uncorrectable).0: Only 5 SH, 1: All SH corrupted.
 *     BER_COUNT_SEL    0: select count based on cl49 else based on cl82
 *     BER_WINDOW_SEL   0: select window based on cl49 else based on cl82
 *     USE_100G_AM0     AM0 will be taken from 100G AM
 *     USE_100G_AM123   AM 1, 2, 3 will be taken from 100G AMs
 */
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_8_GEN2r (0x0000c07b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SC_X4_RSLVD_8_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SC_X4_RSLVD_8_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SC_X4_RSLVD_8_GEN2r_s {
	uint32_t v[1];
	uint32_t sc_x4_rslvd_8_gen2[1];
	uint32_t _sc_x4_rslvd_8_gen2;
} BCMI_TSCF_XGXS_SC_X4_RSLVD_8_GEN2r_t;

#define BCMI_TSCF_XGXS_SC_X4_RSLVD_8_GEN2r_CLR(r) (r).sc_x4_rslvd_8_gen2[0] = 0
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_8_GEN2r_SET(r,d) (r).sc_x4_rslvd_8_gen2[0] = d
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_8_GEN2r_GET(r) (r).sc_x4_rslvd_8_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_8_GEN2r_USE_100G_AM123f_GET(r) ((((r).sc_x4_rslvd_8_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_8_GEN2r_USE_100G_AM123f_SET(r,f) (r).sc_x4_rslvd_8_gen2[0]=(((r).sc_x4_rslvd_8_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_8_GEN2r_USE_100G_AM0f_GET(r) ((((r).sc_x4_rslvd_8_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_8_GEN2r_USE_100G_AM0f_SET(r,f) (r).sc_x4_rslvd_8_gen2[0]=(((r).sc_x4_rslvd_8_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_8_GEN2r_BER_WINDOW_SELf_GET(r) ((((r).sc_x4_rslvd_8_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_8_GEN2r_BER_WINDOW_SELf_SET(r,f) (r).sc_x4_rslvd_8_gen2[0]=(((r).sc_x4_rslvd_8_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_8_GEN2r_BER_COUNT_SELf_GET(r) ((((r).sc_x4_rslvd_8_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_8_GEN2r_BER_COUNT_SELf_SET(r,f) (r).sc_x4_rslvd_8_gen2[0]=(((r).sc_x4_rslvd_8_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_8_GEN2r_CL74_SHCORRUPTf_GET(r) ((((r).sc_x4_rslvd_8_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_8_GEN2r_CL74_SHCORRUPTf_SET(r,f) (r).sc_x4_rslvd_8_gen2[0]=(((r).sc_x4_rslvd_8_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_8_GEN2r_CORRUPT_6TH_GROUPf_GET(r) ((((r).sc_x4_rslvd_8_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_8_GEN2r_CORRUPT_6TH_GROUPf_SET(r,f) (r).sc_x4_rslvd_8_gen2[0]=(((r).sc_x4_rslvd_8_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_8_GEN2r_CORRUPT_2ND_GROUPf_GET(r) (((r).sc_x4_rslvd_8_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_SC_X4_RSLVD_8_GEN2r_CORRUPT_2ND_GROUPf_SET(r,f) (r).sc_x4_rslvd_8_gen2[0]=(((r).sc_x4_rslvd_8_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access SC_X4_RSLVD_8_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SC_X4_RSLVD_8_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_8_GEN2r,(_r._sc_x4_rslvd_8_gen2))
#define BCMI_TSCF_XGXS_WRITE_SC_X4_RSLVD_8_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_8_GEN2r,(_r._sc_x4_rslvd_8_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SC_X4_RSLVD_8_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_8_GEN2r,(_r._sc_x4_rslvd_8_gen2))
#define BCMI_TSCF_XGXS_READLN_SC_X4_RSLVD_8_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_8_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_rslvd_8_gen2))
#define BCMI_TSCF_XGXS_WRITELN_SC_X4_RSLVD_8_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_8_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sc_x4_rslvd_8_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_SC_X4_RSLVD_8_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SC_X4_RSLVD_8_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sc_x4_rslvd_8_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SC_X4_RSLVD_8_GEN2r BCMI_TSCF_XGXS_SC_X4_RSLVD_8_GEN2r
#define SC_X4_RSLVD_8_GEN2r_SIZE BCMI_TSCF_XGXS_SC_X4_RSLVD_8_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SC_X4_RSLVD_8_GEN2r_t SC_X4_RSLVD_8_GEN2r_t;
#define SC_X4_RSLVD_8_GEN2r_CLR BCMI_TSCF_XGXS_SC_X4_RSLVD_8_GEN2r_CLR
#define SC_X4_RSLVD_8_GEN2r_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_8_GEN2r_SET
#define SC_X4_RSLVD_8_GEN2r_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_8_GEN2r_GET
#define SC_X4_RSLVD_8_GEN2r_USE_100G_AM123f_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_8_GEN2r_USE_100G_AM123f_GET
#define SC_X4_RSLVD_8_GEN2r_USE_100G_AM123f_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_8_GEN2r_USE_100G_AM123f_SET
#define SC_X4_RSLVD_8_GEN2r_USE_100G_AM0f_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_8_GEN2r_USE_100G_AM0f_GET
#define SC_X4_RSLVD_8_GEN2r_USE_100G_AM0f_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_8_GEN2r_USE_100G_AM0f_SET
#define SC_X4_RSLVD_8_GEN2r_BER_WINDOW_SELf_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_8_GEN2r_BER_WINDOW_SELf_GET
#define SC_X4_RSLVD_8_GEN2r_BER_WINDOW_SELf_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_8_GEN2r_BER_WINDOW_SELf_SET
#define SC_X4_RSLVD_8_GEN2r_BER_COUNT_SELf_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_8_GEN2r_BER_COUNT_SELf_GET
#define SC_X4_RSLVD_8_GEN2r_BER_COUNT_SELf_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_8_GEN2r_BER_COUNT_SELf_SET
#define SC_X4_RSLVD_8_GEN2r_CL74_SHCORRUPTf_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_8_GEN2r_CL74_SHCORRUPTf_GET
#define SC_X4_RSLVD_8_GEN2r_CL74_SHCORRUPTf_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_8_GEN2r_CL74_SHCORRUPTf_SET
#define SC_X4_RSLVD_8_GEN2r_CORRUPT_6TH_GROUPf_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_8_GEN2r_CORRUPT_6TH_GROUPf_GET
#define SC_X4_RSLVD_8_GEN2r_CORRUPT_6TH_GROUPf_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_8_GEN2r_CORRUPT_6TH_GROUPf_SET
#define SC_X4_RSLVD_8_GEN2r_CORRUPT_2ND_GROUPf_GET BCMI_TSCF_XGXS_SC_X4_RSLVD_8_GEN2r_CORRUPT_2ND_GROUPf_GET
#define SC_X4_RSLVD_8_GEN2r_CORRUPT_2ND_GROUPf_SET BCMI_TSCF_XGXS_SC_X4_RSLVD_8_GEN2r_CORRUPT_2ND_GROUPf_SET
#define READ_SC_X4_RSLVD_8_GEN2r BCMI_TSCF_XGXS_READ_SC_X4_RSLVD_8_GEN2r
#define WRITE_SC_X4_RSLVD_8_GEN2r BCMI_TSCF_XGXS_WRITE_SC_X4_RSLVD_8_GEN2r
#define MODIFY_SC_X4_RSLVD_8_GEN2r BCMI_TSCF_XGXS_MODIFY_SC_X4_RSLVD_8_GEN2r
#define READLN_SC_X4_RSLVD_8_GEN2r BCMI_TSCF_XGXS_READLN_SC_X4_RSLVD_8_GEN2r
#define WRITELN_SC_X4_RSLVD_8_GEN2r BCMI_TSCF_XGXS_WRITELN_SC_X4_RSLVD_8_GEN2r
#define WRITEALL_SC_X4_RSLVD_8_GEN2r BCMI_TSCF_XGXS_WRITEALL_SC_X4_RSLVD_8_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SC_X4_RSLVD_8_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TX_X4_CRED0_GEN2
 * BLOCKS:   TX_X4_CREDIT0
 * REGADDR:  0xc100
 * DESC:     clock count 0 register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CLOCKCNT0        clock count 0 for credit programming, range 5 to 4125
 *     CREDITENABLE     Enables credits to be generated for the MAC.
 */
#define BCMI_TSCF_XGXS_TX_X4_CRED0_GEN2r (0x0000c100 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TX_X4_CRED0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TX_X4_CRED0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TX_X4_CRED0_GEN2r_s {
	uint32_t v[1];
	uint32_t tx_x4_cred0_gen2[1];
	uint32_t _tx_x4_cred0_gen2;
} BCMI_TSCF_XGXS_TX_X4_CRED0_GEN2r_t;

#define BCMI_TSCF_XGXS_TX_X4_CRED0_GEN2r_CLR(r) (r).tx_x4_cred0_gen2[0] = 0
#define BCMI_TSCF_XGXS_TX_X4_CRED0_GEN2r_SET(r,d) (r).tx_x4_cred0_gen2[0] = d
#define BCMI_TSCF_XGXS_TX_X4_CRED0_GEN2r_GET(r) (r).tx_x4_cred0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TX_X4_CRED0_GEN2r_CREDITENABLEf_GET(r) ((((r).tx_x4_cred0_gen2[0]) >> 14) & 0x1)
#define BCMI_TSCF_XGXS_TX_X4_CRED0_GEN2r_CREDITENABLEf_SET(r,f) (r).tx_x4_cred0_gen2[0]=(((r).tx_x4_cred0_gen2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_XGXS_TX_X4_CRED0_GEN2r_CLOCKCNT0f_GET(r) (((r).tx_x4_cred0_gen2[0]) & 0x3fff)
#define BCMI_TSCF_XGXS_TX_X4_CRED0_GEN2r_CLOCKCNT0f_SET(r,f) (r).tx_x4_cred0_gen2[0]=(((r).tx_x4_cred0_gen2[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff)) | (0x3fff << 16)

/*
 * These macros can be used to access TX_X4_CRED0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TX_X4_CRED0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_X4_CRED0_GEN2r,(_r._tx_x4_cred0_gen2))
#define BCMI_TSCF_XGXS_WRITE_TX_X4_CRED0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X4_CRED0_GEN2r,(_r._tx_x4_cred0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TX_X4_CRED0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X4_CRED0_GEN2r,(_r._tx_x4_cred0_gen2))
#define BCMI_TSCF_XGXS_READLN_TX_X4_CRED0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_X4_CRED0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_cred0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TX_X4_CRED0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X4_CRED0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_cred0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TX_X4_CRED0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X4_CRED0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_x4_cred0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TX_X4_CRED0_GEN2r BCMI_TSCF_XGXS_TX_X4_CRED0_GEN2r
#define TX_X4_CRED0_GEN2r_SIZE BCMI_TSCF_XGXS_TX_X4_CRED0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TX_X4_CRED0_GEN2r_t TX_X4_CRED0_GEN2r_t;
#define TX_X4_CRED0_GEN2r_CLR BCMI_TSCF_XGXS_TX_X4_CRED0_GEN2r_CLR
#define TX_X4_CRED0_GEN2r_SET BCMI_TSCF_XGXS_TX_X4_CRED0_GEN2r_SET
#define TX_X4_CRED0_GEN2r_GET BCMI_TSCF_XGXS_TX_X4_CRED0_GEN2r_GET
#define TX_X4_CRED0_GEN2r_CREDITENABLEf_GET BCMI_TSCF_XGXS_TX_X4_CRED0_GEN2r_CREDITENABLEf_GET
#define TX_X4_CRED0_GEN2r_CREDITENABLEf_SET BCMI_TSCF_XGXS_TX_X4_CRED0_GEN2r_CREDITENABLEf_SET
#define TX_X4_CRED0_GEN2r_CLOCKCNT0f_GET BCMI_TSCF_XGXS_TX_X4_CRED0_GEN2r_CLOCKCNT0f_GET
#define TX_X4_CRED0_GEN2r_CLOCKCNT0f_SET BCMI_TSCF_XGXS_TX_X4_CRED0_GEN2r_CLOCKCNT0f_SET
#define READ_TX_X4_CRED0_GEN2r BCMI_TSCF_XGXS_READ_TX_X4_CRED0_GEN2r
#define WRITE_TX_X4_CRED0_GEN2r BCMI_TSCF_XGXS_WRITE_TX_X4_CRED0_GEN2r
#define MODIFY_TX_X4_CRED0_GEN2r BCMI_TSCF_XGXS_MODIFY_TX_X4_CRED0_GEN2r
#define READLN_TX_X4_CRED0_GEN2r BCMI_TSCF_XGXS_READLN_TX_X4_CRED0_GEN2r
#define WRITELN_TX_X4_CRED0_GEN2r BCMI_TSCF_XGXS_WRITELN_TX_X4_CRED0_GEN2r
#define WRITEALL_TX_X4_CRED0_GEN2r BCMI_TSCF_XGXS_WRITEALL_TX_X4_CRED0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TX_X4_CRED0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TX_X4_CRED1_GEN2
 * BLOCKS:   TX_X4_CREDIT0
 * REGADDR:  0xc101
 * DESC:     clock count 1 register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CLOCKCNT1        clock count 1 for credit programming, range 4 to 12
 */
#define BCMI_TSCF_XGXS_TX_X4_CRED1_GEN2r (0x0000c101 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TX_X4_CRED1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TX_X4_CRED1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TX_X4_CRED1_GEN2r_s {
	uint32_t v[1];
	uint32_t tx_x4_cred1_gen2[1];
	uint32_t _tx_x4_cred1_gen2;
} BCMI_TSCF_XGXS_TX_X4_CRED1_GEN2r_t;

#define BCMI_TSCF_XGXS_TX_X4_CRED1_GEN2r_CLR(r) (r).tx_x4_cred1_gen2[0] = 0
#define BCMI_TSCF_XGXS_TX_X4_CRED1_GEN2r_SET(r,d) (r).tx_x4_cred1_gen2[0] = d
#define BCMI_TSCF_XGXS_TX_X4_CRED1_GEN2r_GET(r) (r).tx_x4_cred1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TX_X4_CRED1_GEN2r_CLOCKCNT1f_GET(r) (((r).tx_x4_cred1_gen2[0]) & 0xff)
#define BCMI_TSCF_XGXS_TX_X4_CRED1_GEN2r_CLOCKCNT1f_SET(r,f) (r).tx_x4_cred1_gen2[0]=(((r).tx_x4_cred1_gen2[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access TX_X4_CRED1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TX_X4_CRED1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_X4_CRED1_GEN2r,(_r._tx_x4_cred1_gen2))
#define BCMI_TSCF_XGXS_WRITE_TX_X4_CRED1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X4_CRED1_GEN2r,(_r._tx_x4_cred1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TX_X4_CRED1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X4_CRED1_GEN2r,(_r._tx_x4_cred1_gen2))
#define BCMI_TSCF_XGXS_READLN_TX_X4_CRED1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_X4_CRED1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_cred1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TX_X4_CRED1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X4_CRED1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_cred1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TX_X4_CRED1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X4_CRED1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_x4_cred1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TX_X4_CRED1_GEN2r BCMI_TSCF_XGXS_TX_X4_CRED1_GEN2r
#define TX_X4_CRED1_GEN2r_SIZE BCMI_TSCF_XGXS_TX_X4_CRED1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TX_X4_CRED1_GEN2r_t TX_X4_CRED1_GEN2r_t;
#define TX_X4_CRED1_GEN2r_CLR BCMI_TSCF_XGXS_TX_X4_CRED1_GEN2r_CLR
#define TX_X4_CRED1_GEN2r_SET BCMI_TSCF_XGXS_TX_X4_CRED1_GEN2r_SET
#define TX_X4_CRED1_GEN2r_GET BCMI_TSCF_XGXS_TX_X4_CRED1_GEN2r_GET
#define TX_X4_CRED1_GEN2r_CLOCKCNT1f_GET BCMI_TSCF_XGXS_TX_X4_CRED1_GEN2r_CLOCKCNT1f_GET
#define TX_X4_CRED1_GEN2r_CLOCKCNT1f_SET BCMI_TSCF_XGXS_TX_X4_CRED1_GEN2r_CLOCKCNT1f_SET
#define READ_TX_X4_CRED1_GEN2r BCMI_TSCF_XGXS_READ_TX_X4_CRED1_GEN2r
#define WRITE_TX_X4_CRED1_GEN2r BCMI_TSCF_XGXS_WRITE_TX_X4_CRED1_GEN2r
#define MODIFY_TX_X4_CRED1_GEN2r BCMI_TSCF_XGXS_MODIFY_TX_X4_CRED1_GEN2r
#define READLN_TX_X4_CRED1_GEN2r BCMI_TSCF_XGXS_READLN_TX_X4_CRED1_GEN2r
#define WRITELN_TX_X4_CRED1_GEN2r BCMI_TSCF_XGXS_WRITELN_TX_X4_CRED1_GEN2r
#define WRITEALL_TX_X4_CRED1_GEN2r BCMI_TSCF_XGXS_WRITEALL_TX_X4_CRED1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TX_X4_CRED1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TX_X4_LOOPCNT_GEN2
 * BLOCKS:   TX_X4_CREDIT0
 * REGADDR:  0xc102
 * DESC:     loop count 1_0 register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LOOPCNT1         loop count 1 for credit programming, range 2 to 18
 *     LOOPCNT0         loop count 0 for credit programming, range 1 to 1
 */
#define BCMI_TSCF_XGXS_TX_X4_LOOPCNT_GEN2r (0x0000c102 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TX_X4_LOOPCNT_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TX_X4_LOOPCNT_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TX_X4_LOOPCNT_GEN2r_s {
	uint32_t v[1];
	uint32_t tx_x4_loopcnt_gen2[1];
	uint32_t _tx_x4_loopcnt_gen2;
} BCMI_TSCF_XGXS_TX_X4_LOOPCNT_GEN2r_t;

#define BCMI_TSCF_XGXS_TX_X4_LOOPCNT_GEN2r_CLR(r) (r).tx_x4_loopcnt_gen2[0] = 0
#define BCMI_TSCF_XGXS_TX_X4_LOOPCNT_GEN2r_SET(r,d) (r).tx_x4_loopcnt_gen2[0] = d
#define BCMI_TSCF_XGXS_TX_X4_LOOPCNT_GEN2r_GET(r) (r).tx_x4_loopcnt_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TX_X4_LOOPCNT_GEN2r_LOOPCNT0f_GET(r) ((((r).tx_x4_loopcnt_gen2[0]) >> 6) & 0xff)
#define BCMI_TSCF_XGXS_TX_X4_LOOPCNT_GEN2r_LOOPCNT0f_SET(r,f) (r).tx_x4_loopcnt_gen2[0]=(((r).tx_x4_loopcnt_gen2[0] & ~((uint32_t)0xff << 6)) | ((((uint32_t)f) & 0xff) << 6)) | (255 << (16 + 6))
#define BCMI_TSCF_XGXS_TX_X4_LOOPCNT_GEN2r_LOOPCNT1f_GET(r) (((r).tx_x4_loopcnt_gen2[0]) & 0x3f)
#define BCMI_TSCF_XGXS_TX_X4_LOOPCNT_GEN2r_LOOPCNT1f_SET(r,f) (r).tx_x4_loopcnt_gen2[0]=(((r).tx_x4_loopcnt_gen2[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access TX_X4_LOOPCNT_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TX_X4_LOOPCNT_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_X4_LOOPCNT_GEN2r,(_r._tx_x4_loopcnt_gen2))
#define BCMI_TSCF_XGXS_WRITE_TX_X4_LOOPCNT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X4_LOOPCNT_GEN2r,(_r._tx_x4_loopcnt_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TX_X4_LOOPCNT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X4_LOOPCNT_GEN2r,(_r._tx_x4_loopcnt_gen2))
#define BCMI_TSCF_XGXS_READLN_TX_X4_LOOPCNT_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_X4_LOOPCNT_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_loopcnt_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TX_X4_LOOPCNT_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X4_LOOPCNT_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_loopcnt_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TX_X4_LOOPCNT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X4_LOOPCNT_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_x4_loopcnt_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TX_X4_LOOPCNT_GEN2r BCMI_TSCF_XGXS_TX_X4_LOOPCNT_GEN2r
#define TX_X4_LOOPCNT_GEN2r_SIZE BCMI_TSCF_XGXS_TX_X4_LOOPCNT_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TX_X4_LOOPCNT_GEN2r_t TX_X4_LOOPCNT_GEN2r_t;
#define TX_X4_LOOPCNT_GEN2r_CLR BCMI_TSCF_XGXS_TX_X4_LOOPCNT_GEN2r_CLR
#define TX_X4_LOOPCNT_GEN2r_SET BCMI_TSCF_XGXS_TX_X4_LOOPCNT_GEN2r_SET
#define TX_X4_LOOPCNT_GEN2r_GET BCMI_TSCF_XGXS_TX_X4_LOOPCNT_GEN2r_GET
#define TX_X4_LOOPCNT_GEN2r_LOOPCNT0f_GET BCMI_TSCF_XGXS_TX_X4_LOOPCNT_GEN2r_LOOPCNT0f_GET
#define TX_X4_LOOPCNT_GEN2r_LOOPCNT0f_SET BCMI_TSCF_XGXS_TX_X4_LOOPCNT_GEN2r_LOOPCNT0f_SET
#define TX_X4_LOOPCNT_GEN2r_LOOPCNT1f_GET BCMI_TSCF_XGXS_TX_X4_LOOPCNT_GEN2r_LOOPCNT1f_GET
#define TX_X4_LOOPCNT_GEN2r_LOOPCNT1f_SET BCMI_TSCF_XGXS_TX_X4_LOOPCNT_GEN2r_LOOPCNT1f_SET
#define READ_TX_X4_LOOPCNT_GEN2r BCMI_TSCF_XGXS_READ_TX_X4_LOOPCNT_GEN2r
#define WRITE_TX_X4_LOOPCNT_GEN2r BCMI_TSCF_XGXS_WRITE_TX_X4_LOOPCNT_GEN2r
#define MODIFY_TX_X4_LOOPCNT_GEN2r BCMI_TSCF_XGXS_MODIFY_TX_X4_LOOPCNT_GEN2r
#define READLN_TX_X4_LOOPCNT_GEN2r BCMI_TSCF_XGXS_READLN_TX_X4_LOOPCNT_GEN2r
#define WRITELN_TX_X4_LOOPCNT_GEN2r BCMI_TSCF_XGXS_WRITELN_TX_X4_LOOPCNT_GEN2r
#define WRITEALL_TX_X4_LOOPCNT_GEN2r BCMI_TSCF_XGXS_WRITEALL_TX_X4_LOOPCNT_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TX_X4_LOOPCNT_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TX_X4_MAC_CREDGENCNT_GEN2
 * BLOCKS:   TX_X4_CREDIT0
 * REGADDR:  0xc103
 * DESC:     credit gen count register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MAC_CREDITGENCNT clock count 0 for credit programming, range 1 to 2063
 */
#define BCMI_TSCF_XGXS_TX_X4_MAC_CREDGENCNT_GEN2r (0x0000c103 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TX_X4_MAC_CREDGENCNT_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TX_X4_MAC_CREDGENCNT_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TX_X4_MAC_CREDGENCNT_GEN2r_s {
	uint32_t v[1];
	uint32_t tx_x4_mac_credgencnt_gen2[1];
	uint32_t _tx_x4_mac_credgencnt_gen2;
} BCMI_TSCF_XGXS_TX_X4_MAC_CREDGENCNT_GEN2r_t;

#define BCMI_TSCF_XGXS_TX_X4_MAC_CREDGENCNT_GEN2r_CLR(r) (r).tx_x4_mac_credgencnt_gen2[0] = 0
#define BCMI_TSCF_XGXS_TX_X4_MAC_CREDGENCNT_GEN2r_SET(r,d) (r).tx_x4_mac_credgencnt_gen2[0] = d
#define BCMI_TSCF_XGXS_TX_X4_MAC_CREDGENCNT_GEN2r_GET(r) (r).tx_x4_mac_credgencnt_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TX_X4_MAC_CREDGENCNT_GEN2r_MAC_CREDITGENCNTf_GET(r) (((r).tx_x4_mac_credgencnt_gen2[0]) & 0x1fff)
#define BCMI_TSCF_XGXS_TX_X4_MAC_CREDGENCNT_GEN2r_MAC_CREDITGENCNTf_SET(r,f) (r).tx_x4_mac_credgencnt_gen2[0]=(((r).tx_x4_mac_credgencnt_gen2[0] & ~((uint32_t)0x1fff)) | (((uint32_t)f) & 0x1fff)) | (0x1fff << 16)

/*
 * These macros can be used to access TX_X4_MAC_CREDGENCNT_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TX_X4_MAC_CREDGENCNT_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_X4_MAC_CREDGENCNT_GEN2r,(_r._tx_x4_mac_credgencnt_gen2))
#define BCMI_TSCF_XGXS_WRITE_TX_X4_MAC_CREDGENCNT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X4_MAC_CREDGENCNT_GEN2r,(_r._tx_x4_mac_credgencnt_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TX_X4_MAC_CREDGENCNT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X4_MAC_CREDGENCNT_GEN2r,(_r._tx_x4_mac_credgencnt_gen2))
#define BCMI_TSCF_XGXS_READLN_TX_X4_MAC_CREDGENCNT_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_X4_MAC_CREDGENCNT_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_mac_credgencnt_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TX_X4_MAC_CREDGENCNT_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X4_MAC_CREDGENCNT_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_mac_credgencnt_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TX_X4_MAC_CREDGENCNT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X4_MAC_CREDGENCNT_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_x4_mac_credgencnt_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TX_X4_MAC_CREDGENCNT_GEN2r BCMI_TSCF_XGXS_TX_X4_MAC_CREDGENCNT_GEN2r
#define TX_X4_MAC_CREDGENCNT_GEN2r_SIZE BCMI_TSCF_XGXS_TX_X4_MAC_CREDGENCNT_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TX_X4_MAC_CREDGENCNT_GEN2r_t TX_X4_MAC_CREDGENCNT_GEN2r_t;
#define TX_X4_MAC_CREDGENCNT_GEN2r_CLR BCMI_TSCF_XGXS_TX_X4_MAC_CREDGENCNT_GEN2r_CLR
#define TX_X4_MAC_CREDGENCNT_GEN2r_SET BCMI_TSCF_XGXS_TX_X4_MAC_CREDGENCNT_GEN2r_SET
#define TX_X4_MAC_CREDGENCNT_GEN2r_GET BCMI_TSCF_XGXS_TX_X4_MAC_CREDGENCNT_GEN2r_GET
#define TX_X4_MAC_CREDGENCNT_GEN2r_MAC_CREDITGENCNTf_GET BCMI_TSCF_XGXS_TX_X4_MAC_CREDGENCNT_GEN2r_MAC_CREDITGENCNTf_GET
#define TX_X4_MAC_CREDGENCNT_GEN2r_MAC_CREDITGENCNTf_SET BCMI_TSCF_XGXS_TX_X4_MAC_CREDGENCNT_GEN2r_MAC_CREDITGENCNTf_SET
#define READ_TX_X4_MAC_CREDGENCNT_GEN2r BCMI_TSCF_XGXS_READ_TX_X4_MAC_CREDGENCNT_GEN2r
#define WRITE_TX_X4_MAC_CREDGENCNT_GEN2r BCMI_TSCF_XGXS_WRITE_TX_X4_MAC_CREDGENCNT_GEN2r
#define MODIFY_TX_X4_MAC_CREDGENCNT_GEN2r BCMI_TSCF_XGXS_MODIFY_TX_X4_MAC_CREDGENCNT_GEN2r
#define READLN_TX_X4_MAC_CREDGENCNT_GEN2r BCMI_TSCF_XGXS_READLN_TX_X4_MAC_CREDGENCNT_GEN2r
#define WRITELN_TX_X4_MAC_CREDGENCNT_GEN2r BCMI_TSCF_XGXS_WRITELN_TX_X4_MAC_CREDGENCNT_GEN2r
#define WRITEALL_TX_X4_MAC_CREDGENCNT_GEN2r BCMI_TSCF_XGXS_WRITEALL_TX_X4_MAC_CREDGENCNT_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TX_X4_MAC_CREDGENCNT_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TX_X4_ENC_0_GEN2
 * BLOCKS:   TX_X4_CONTROL0
 * REGADDR:  0xc111
 * DESC:     Encode 0 register
 * RESETVAL: 0x1800 (6144)
 * ACCESS:   R/W
 * FIELDS:
 *     T_ENC_MODE       
 *     T_FIFO_MODE      T_FIFO stage control field
 *     AM_SPACING_MUL   
 *     CL49_TX_TL_MODE  2'b01 - Force encoder output to local faults.2'b10 - Force encoder output to idles.
 *     CL49_BYPASS_TXSM Bypass cl49 transmit state machine1 = Bypass cl49 txsm :- force TX_INIT state- pass the data from the table look-up decoder to the output0 = normal mode
 *     HG2_ENABLE       Enables HG2 support for PCS
 *     HG2_MESSAGE_INVALID_CODE_ENABLE Enables HG2 invalid message code support.
 *     HG2_CODEC        Enables HG2 extensions support for PCSSet this bit to enable HG2 messaging
 *     BLOCK_NON_FC_BLK_TYPES Convert the following block types to errors - 0x87, 0x99, 0xAA, 0xCC, 0xD2, 0xE1
 *     DIS_SCRAMBLER    Disable the TX scrambler
 *     TX_TEST_MODE_CFG Force cl82 encoder output to idles.
 */
#define BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r (0x0000c111 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TX_X4_ENC_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_s {
	uint32_t v[1];
	uint32_t tx_x4_enc_0_gen2[1];
	uint32_t _tx_x4_enc_0_gen2;
} BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_t;

#define BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_CLR(r) (r).tx_x4_enc_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_SET(r,d) (r).tx_x4_enc_0_gen2[0] = d
#define BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_GET(r) (r).tx_x4_enc_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_TX_TEST_MODE_CFGf_GET(r) ((((r).tx_x4_enc_0_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_TX_TEST_MODE_CFGf_SET(r,f) (r).tx_x4_enc_0_gen2[0]=(((r).tx_x4_enc_0_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_DIS_SCRAMBLERf_GET(r) ((((r).tx_x4_enc_0_gen2[0]) >> 14) & 0x1)
#define BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_DIS_SCRAMBLERf_SET(r,f) (r).tx_x4_enc_0_gen2[0]=(((r).tx_x4_enc_0_gen2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_BLOCK_NON_FC_BLK_TYPESf_GET(r) ((((r).tx_x4_enc_0_gen2[0]) >> 13) & 0x1)
#define BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_BLOCK_NON_FC_BLK_TYPESf_SET(r,f) (r).tx_x4_enc_0_gen2[0]=(((r).tx_x4_enc_0_gen2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_HG2_CODECf_GET(r) ((((r).tx_x4_enc_0_gen2[0]) >> 12) & 0x1)
#define BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_HG2_CODECf_SET(r,f) (r).tx_x4_enc_0_gen2[0]=(((r).tx_x4_enc_0_gen2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_HG2_MESSAGE_INVALID_CODE_ENABLEf_GET(r) ((((r).tx_x4_enc_0_gen2[0]) >> 11) & 0x1)
#define BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_HG2_MESSAGE_INVALID_CODE_ENABLEf_SET(r,f) (r).tx_x4_enc_0_gen2[0]=(((r).tx_x4_enc_0_gen2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_HG2_ENABLEf_GET(r) ((((r).tx_x4_enc_0_gen2[0]) >> 10) & 0x1)
#define BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_HG2_ENABLEf_SET(r,f) (r).tx_x4_enc_0_gen2[0]=(((r).tx_x4_enc_0_gen2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_CL49_BYPASS_TXSMf_GET(r) ((((r).tx_x4_enc_0_gen2[0]) >> 9) & 0x1)
#define BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_CL49_BYPASS_TXSMf_SET(r,f) (r).tx_x4_enc_0_gen2[0]=(((r).tx_x4_enc_0_gen2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_CL49_TX_TL_MODEf_GET(r) ((((r).tx_x4_enc_0_gen2[0]) >> 7) & 0x3)
#define BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_CL49_TX_TL_MODEf_SET(r,f) (r).tx_x4_enc_0_gen2[0]=(((r).tx_x4_enc_0_gen2[0] & ~((uint32_t)0x3 << 7)) | ((((uint32_t)f) & 0x3) << 7)) | (3 << (16 + 7))
#define BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_AM_SPACING_MULf_GET(r) ((((r).tx_x4_enc_0_gen2[0]) >> 4) & 0x3)
#define BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_AM_SPACING_MULf_SET(r,f) (r).tx_x4_enc_0_gen2[0]=(((r).tx_x4_enc_0_gen2[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_T_FIFO_MODEf_GET(r) ((((r).tx_x4_enc_0_gen2[0]) >> 2) & 0x3)
#define BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_T_FIFO_MODEf_SET(r,f) (r).tx_x4_enc_0_gen2[0]=(((r).tx_x4_enc_0_gen2[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2)) | (3 << (16 + 2))
#define BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_T_ENC_MODEf_GET(r) (((r).tx_x4_enc_0_gen2[0]) & 0x3)
#define BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_T_ENC_MODEf_SET(r,f) (r).tx_x4_enc_0_gen2[0]=(((r).tx_x4_enc_0_gen2[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access TX_X4_ENC_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TX_X4_ENC_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r,(_r._tx_x4_enc_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_TX_X4_ENC_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r,(_r._tx_x4_enc_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TX_X4_ENC_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r,(_r._tx_x4_enc_0_gen2))
#define BCMI_TSCF_XGXS_READLN_TX_X4_ENC_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_enc_0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TX_X4_ENC_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_enc_0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TX_X4_ENC_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_x4_enc_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TX_X4_ENC_0_GEN2r BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r
#define TX_X4_ENC_0_GEN2r_SIZE BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_t TX_X4_ENC_0_GEN2r_t;
#define TX_X4_ENC_0_GEN2r_CLR BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_CLR
#define TX_X4_ENC_0_GEN2r_SET BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_SET
#define TX_X4_ENC_0_GEN2r_GET BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_GET
#define TX_X4_ENC_0_GEN2r_TX_TEST_MODE_CFGf_GET BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_TX_TEST_MODE_CFGf_GET
#define TX_X4_ENC_0_GEN2r_TX_TEST_MODE_CFGf_SET BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_TX_TEST_MODE_CFGf_SET
#define TX_X4_ENC_0_GEN2r_DIS_SCRAMBLERf_GET BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_DIS_SCRAMBLERf_GET
#define TX_X4_ENC_0_GEN2r_DIS_SCRAMBLERf_SET BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_DIS_SCRAMBLERf_SET
#define TX_X4_ENC_0_GEN2r_BLOCK_NON_FC_BLK_TYPESf_GET BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_BLOCK_NON_FC_BLK_TYPESf_GET
#define TX_X4_ENC_0_GEN2r_BLOCK_NON_FC_BLK_TYPESf_SET BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_BLOCK_NON_FC_BLK_TYPESf_SET
#define TX_X4_ENC_0_GEN2r_HG2_CODECf_GET BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_HG2_CODECf_GET
#define TX_X4_ENC_0_GEN2r_HG2_CODECf_SET BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_HG2_CODECf_SET
#define TX_X4_ENC_0_GEN2r_HG2_MESSAGE_INVALID_CODE_ENABLEf_GET BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_HG2_MESSAGE_INVALID_CODE_ENABLEf_GET
#define TX_X4_ENC_0_GEN2r_HG2_MESSAGE_INVALID_CODE_ENABLEf_SET BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_HG2_MESSAGE_INVALID_CODE_ENABLEf_SET
#define TX_X4_ENC_0_GEN2r_HG2_ENABLEf_GET BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_HG2_ENABLEf_GET
#define TX_X4_ENC_0_GEN2r_HG2_ENABLEf_SET BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_HG2_ENABLEf_SET
#define TX_X4_ENC_0_GEN2r_CL49_BYPASS_TXSMf_GET BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_CL49_BYPASS_TXSMf_GET
#define TX_X4_ENC_0_GEN2r_CL49_BYPASS_TXSMf_SET BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_CL49_BYPASS_TXSMf_SET
#define TX_X4_ENC_0_GEN2r_CL49_TX_TL_MODEf_GET BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_CL49_TX_TL_MODEf_GET
#define TX_X4_ENC_0_GEN2r_CL49_TX_TL_MODEf_SET BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_CL49_TX_TL_MODEf_SET
#define TX_X4_ENC_0_GEN2r_AM_SPACING_MULf_GET BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_AM_SPACING_MULf_GET
#define TX_X4_ENC_0_GEN2r_AM_SPACING_MULf_SET BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_AM_SPACING_MULf_SET
#define TX_X4_ENC_0_GEN2r_T_FIFO_MODEf_GET BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_T_FIFO_MODEf_GET
#define TX_X4_ENC_0_GEN2r_T_FIFO_MODEf_SET BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_T_FIFO_MODEf_SET
#define TX_X4_ENC_0_GEN2r_T_ENC_MODEf_GET BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_T_ENC_MODEf_GET
#define TX_X4_ENC_0_GEN2r_T_ENC_MODEf_SET BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r_T_ENC_MODEf_SET
#define READ_TX_X4_ENC_0_GEN2r BCMI_TSCF_XGXS_READ_TX_X4_ENC_0_GEN2r
#define WRITE_TX_X4_ENC_0_GEN2r BCMI_TSCF_XGXS_WRITE_TX_X4_ENC_0_GEN2r
#define MODIFY_TX_X4_ENC_0_GEN2r BCMI_TSCF_XGXS_MODIFY_TX_X4_ENC_0_GEN2r
#define READLN_TX_X4_ENC_0_GEN2r BCMI_TSCF_XGXS_READLN_TX_X4_ENC_0_GEN2r
#define WRITELN_TX_X4_ENC_0_GEN2r BCMI_TSCF_XGXS_WRITELN_TX_X4_ENC_0_GEN2r
#define WRITEALL_TX_X4_ENC_0_GEN2r BCMI_TSCF_XGXS_WRITEALL_TX_X4_ENC_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TX_X4_ENC_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TX_X4_MISC_GEN2
 * BLOCKS:   TX_X4_CONTROL0
 * REGADDR:  0xc113
 * DESC:     Misc register
 * RESETVAL: 0x1c0 (448)
 * ACCESS:   R/W
 * FIELDS:
 *     ENABLE_TX_LANE   Per lane enable to allow DVs from MAC to enter TXP
 *     RSTB_TX_LANE     Low active reset for txp lanes
 *     OS_MODE          
 *     CL49_TX_RF_ENABLE If this bit is a one, RFs are passed from the RS LAYER to the PCS.If this bit is a zero, RFs are replaced by IDLEs which are then passedto the PCS.For CL49 only.
 *     CL49_TX_LF_ENABLE If this bit is a one, LFs are passed from the RS LAYER to the PCS.If this bit is a zero, LFs are replaced by IDLEs which are then passedto the PCS.For CL49 only.
 *     CL49_TX_LI_ENABLE If this bit is a one, LIs (Link Interrupt) are passed thru to the RS LAYER.If this bit is a zero, LIs (Link Interrupt) are replaced by IDLEs which are then passedto the RS LAYER.For CL49 only.
 *     T_PMA_40B_MODE   1'b0 - 66-bit data write in t_pma.1'b1 - 40-bit data write in t_pma.
 *     FEC_ENABLE       Enable Transmit FEC.
 *     T_PMA_BTMX_MODE  Number of PCS lanes bitmuxed
 *     SCR_MODE         
 */
#define BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r (0x0000c113 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TX_X4_MISC_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r_s {
	uint32_t v[1];
	uint32_t tx_x4_misc_gen2[1];
	uint32_t _tx_x4_misc_gen2;
} BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r_t;

#define BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r_CLR(r) (r).tx_x4_misc_gen2[0] = 0
#define BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r_SET(r,d) (r).tx_x4_misc_gen2[0] = d
#define BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r_GET(r) (r).tx_x4_misc_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r_SCR_MODEf_GET(r) ((((r).tx_x4_misc_gen2[0]) >> 13) & 0x7)
#define BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r_SCR_MODEf_SET(r,f) (r).tx_x4_misc_gen2[0]=(((r).tx_x4_misc_gen2[0] & ~((uint32_t)0x7 << 13)) | ((((uint32_t)f) & 0x7) << 13)) | (7 << (16 + 13))
#define BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r_T_PMA_BTMX_MODEf_GET(r) ((((r).tx_x4_misc_gen2[0]) >> 11) & 0x3)
#define BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r_T_PMA_BTMX_MODEf_SET(r,f) (r).tx_x4_misc_gen2[0]=(((r).tx_x4_misc_gen2[0] & ~((uint32_t)0x3 << 11)) | ((((uint32_t)f) & 0x3) << 11)) | (3 << (16 + 11))
#define BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r_FEC_ENABLEf_GET(r) ((((r).tx_x4_misc_gen2[0]) >> 10) & 0x1)
#define BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r_FEC_ENABLEf_SET(r,f) (r).tx_x4_misc_gen2[0]=(((r).tx_x4_misc_gen2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r_T_PMA_40B_MODEf_GET(r) ((((r).tx_x4_misc_gen2[0]) >> 9) & 0x1)
#define BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r_T_PMA_40B_MODEf_SET(r,f) (r).tx_x4_misc_gen2[0]=(((r).tx_x4_misc_gen2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r_CL49_TX_LI_ENABLEf_GET(r) ((((r).tx_x4_misc_gen2[0]) >> 8) & 0x1)
#define BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r_CL49_TX_LI_ENABLEf_SET(r,f) (r).tx_x4_misc_gen2[0]=(((r).tx_x4_misc_gen2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r_CL49_TX_LF_ENABLEf_GET(r) ((((r).tx_x4_misc_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r_CL49_TX_LF_ENABLEf_SET(r,f) (r).tx_x4_misc_gen2[0]=(((r).tx_x4_misc_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r_CL49_TX_RF_ENABLEf_GET(r) ((((r).tx_x4_misc_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r_CL49_TX_RF_ENABLEf_SET(r,f) (r).tx_x4_misc_gen2[0]=(((r).tx_x4_misc_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r_OS_MODEf_GET(r) ((((r).tx_x4_misc_gen2[0]) >> 2) & 0xf)
#define BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r_OS_MODEf_SET(r,f) (r).tx_x4_misc_gen2[0]=(((r).tx_x4_misc_gen2[0] & ~((uint32_t)0xf << 2)) | ((((uint32_t)f) & 0xf) << 2)) | (15 << (16 + 2))
#define BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r_RSTB_TX_LANEf_GET(r) ((((r).tx_x4_misc_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r_RSTB_TX_LANEf_SET(r,f) (r).tx_x4_misc_gen2[0]=(((r).tx_x4_misc_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r_ENABLE_TX_LANEf_GET(r) (((r).tx_x4_misc_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r_ENABLE_TX_LANEf_SET(r,f) (r).tx_x4_misc_gen2[0]=(((r).tx_x4_misc_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TX_X4_MISC_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TX_X4_MISC_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r,(_r._tx_x4_misc_gen2))
#define BCMI_TSCF_XGXS_WRITE_TX_X4_MISC_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r,(_r._tx_x4_misc_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TX_X4_MISC_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r,(_r._tx_x4_misc_gen2))
#define BCMI_TSCF_XGXS_READLN_TX_X4_MISC_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_misc_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TX_X4_MISC_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_misc_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TX_X4_MISC_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_x4_misc_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TX_X4_MISC_GEN2r BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r
#define TX_X4_MISC_GEN2r_SIZE BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r_t TX_X4_MISC_GEN2r_t;
#define TX_X4_MISC_GEN2r_CLR BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r_CLR
#define TX_X4_MISC_GEN2r_SET BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r_SET
#define TX_X4_MISC_GEN2r_GET BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r_GET
#define TX_X4_MISC_GEN2r_SCR_MODEf_GET BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r_SCR_MODEf_GET
#define TX_X4_MISC_GEN2r_SCR_MODEf_SET BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r_SCR_MODEf_SET
#define TX_X4_MISC_GEN2r_T_PMA_BTMX_MODEf_GET BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r_T_PMA_BTMX_MODEf_GET
#define TX_X4_MISC_GEN2r_T_PMA_BTMX_MODEf_SET BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r_T_PMA_BTMX_MODEf_SET
#define TX_X4_MISC_GEN2r_FEC_ENABLEf_GET BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r_FEC_ENABLEf_GET
#define TX_X4_MISC_GEN2r_FEC_ENABLEf_SET BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r_FEC_ENABLEf_SET
#define TX_X4_MISC_GEN2r_T_PMA_40B_MODEf_GET BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r_T_PMA_40B_MODEf_GET
#define TX_X4_MISC_GEN2r_T_PMA_40B_MODEf_SET BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r_T_PMA_40B_MODEf_SET
#define TX_X4_MISC_GEN2r_CL49_TX_LI_ENABLEf_GET BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r_CL49_TX_LI_ENABLEf_GET
#define TX_X4_MISC_GEN2r_CL49_TX_LI_ENABLEf_SET BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r_CL49_TX_LI_ENABLEf_SET
#define TX_X4_MISC_GEN2r_CL49_TX_LF_ENABLEf_GET BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r_CL49_TX_LF_ENABLEf_GET
#define TX_X4_MISC_GEN2r_CL49_TX_LF_ENABLEf_SET BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r_CL49_TX_LF_ENABLEf_SET
#define TX_X4_MISC_GEN2r_CL49_TX_RF_ENABLEf_GET BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r_CL49_TX_RF_ENABLEf_GET
#define TX_X4_MISC_GEN2r_CL49_TX_RF_ENABLEf_SET BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r_CL49_TX_RF_ENABLEf_SET
#define TX_X4_MISC_GEN2r_OS_MODEf_GET BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r_OS_MODEf_GET
#define TX_X4_MISC_GEN2r_OS_MODEf_SET BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r_OS_MODEf_SET
#define TX_X4_MISC_GEN2r_RSTB_TX_LANEf_GET BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r_RSTB_TX_LANEf_GET
#define TX_X4_MISC_GEN2r_RSTB_TX_LANEf_SET BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r_RSTB_TX_LANEf_SET
#define TX_X4_MISC_GEN2r_ENABLE_TX_LANEf_GET BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r_ENABLE_TX_LANEf_GET
#define TX_X4_MISC_GEN2r_ENABLE_TX_LANEf_SET BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r_ENABLE_TX_LANEf_SET
#define READ_TX_X4_MISC_GEN2r BCMI_TSCF_XGXS_READ_TX_X4_MISC_GEN2r
#define WRITE_TX_X4_MISC_GEN2r BCMI_TSCF_XGXS_WRITE_TX_X4_MISC_GEN2r
#define MODIFY_TX_X4_MISC_GEN2r BCMI_TSCF_XGXS_MODIFY_TX_X4_MISC_GEN2r
#define READLN_TX_X4_MISC_GEN2r BCMI_TSCF_XGXS_READLN_TX_X4_MISC_GEN2r
#define WRITELN_TX_X4_MISC_GEN2r BCMI_TSCF_XGXS_WRITELN_TX_X4_MISC_GEN2r
#define WRITEALL_TX_X4_MISC_GEN2r BCMI_TSCF_XGXS_WRITEALL_TX_X4_MISC_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TX_X4_MISC_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TX_X4_CL36_CTL_GEN2
 * BLOCKS:   TX_X4_CONTROL0
 * REGADDR:  0xc114
 * DESC:     CL36 TX control
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL36TX_EN        Per logical lane: cl36 TX pipeline: 1=enabled , 0=disabled
 *     CL36TX_LPI_EN    Support for transmit of /LI/ code: 1=enabled , 0=disabledIf disabled (0), LPIs are converted to IDLEs
 *     CL36TX_CATCH_ALL_8B10B_DIS The following logic implements the catch-all special code-group case indicatedin the IEEE Std 802.3-2005, Table 48-2. Basically, it states that any invalidcode-group NOT defined in either Table 36-2 Valid special code-groups, orTable 48-2 XGMII character to PCS code-group mapping, shall be mapped tospecial code-group K30.7 (i.e. 10'h1FE). An input mux muxes out the actualinput data[7:0] or the 10'h1FE onto the internal bus, data_int, which drivesthe orginal 8b10b logic. A control, named catch_all_8b10b_dis, is used to turn offthe catch-all; default is catch-all is ON.
 */
#define BCMI_TSCF_XGXS_TX_X4_CL36_CTL_GEN2r (0x0000c114 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TX_X4_CL36_CTL_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TX_X4_CL36_CTL_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TX_X4_CL36_CTL_GEN2r_s {
	uint32_t v[1];
	uint32_t tx_x4_cl36_ctl_gen2[1];
	uint32_t _tx_x4_cl36_ctl_gen2;
} BCMI_TSCF_XGXS_TX_X4_CL36_CTL_GEN2r_t;

#define BCMI_TSCF_XGXS_TX_X4_CL36_CTL_GEN2r_CLR(r) (r).tx_x4_cl36_ctl_gen2[0] = 0
#define BCMI_TSCF_XGXS_TX_X4_CL36_CTL_GEN2r_SET(r,d) (r).tx_x4_cl36_ctl_gen2[0] = d
#define BCMI_TSCF_XGXS_TX_X4_CL36_CTL_GEN2r_GET(r) (r).tx_x4_cl36_ctl_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TX_X4_CL36_CTL_GEN2r_CL36TX_CATCH_ALL_8B10B_DISf_GET(r) ((((r).tx_x4_cl36_ctl_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_TX_X4_CL36_CTL_GEN2r_CL36TX_CATCH_ALL_8B10B_DISf_SET(r,f) (r).tx_x4_cl36_ctl_gen2[0]=(((r).tx_x4_cl36_ctl_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_TX_X4_CL36_CTL_GEN2r_CL36TX_LPI_ENf_GET(r) ((((r).tx_x4_cl36_ctl_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_TX_X4_CL36_CTL_GEN2r_CL36TX_LPI_ENf_SET(r,f) (r).tx_x4_cl36_ctl_gen2[0]=(((r).tx_x4_cl36_ctl_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_TX_X4_CL36_CTL_GEN2r_CL36TX_ENf_GET(r) (((r).tx_x4_cl36_ctl_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_TX_X4_CL36_CTL_GEN2r_CL36TX_ENf_SET(r,f) (r).tx_x4_cl36_ctl_gen2[0]=(((r).tx_x4_cl36_ctl_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TX_X4_CL36_CTL_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TX_X4_CL36_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_X4_CL36_CTL_GEN2r,(_r._tx_x4_cl36_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITE_TX_X4_CL36_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X4_CL36_CTL_GEN2r,(_r._tx_x4_cl36_ctl_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TX_X4_CL36_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X4_CL36_CTL_GEN2r,(_r._tx_x4_cl36_ctl_gen2))
#define BCMI_TSCF_XGXS_READLN_TX_X4_CL36_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_X4_CL36_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_cl36_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TX_X4_CL36_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X4_CL36_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_cl36_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TX_X4_CL36_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X4_CL36_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_x4_cl36_ctl_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TX_X4_CL36_CTL_GEN2r BCMI_TSCF_XGXS_TX_X4_CL36_CTL_GEN2r
#define TX_X4_CL36_CTL_GEN2r_SIZE BCMI_TSCF_XGXS_TX_X4_CL36_CTL_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TX_X4_CL36_CTL_GEN2r_t TX_X4_CL36_CTL_GEN2r_t;
#define TX_X4_CL36_CTL_GEN2r_CLR BCMI_TSCF_XGXS_TX_X4_CL36_CTL_GEN2r_CLR
#define TX_X4_CL36_CTL_GEN2r_SET BCMI_TSCF_XGXS_TX_X4_CL36_CTL_GEN2r_SET
#define TX_X4_CL36_CTL_GEN2r_GET BCMI_TSCF_XGXS_TX_X4_CL36_CTL_GEN2r_GET
#define TX_X4_CL36_CTL_GEN2r_CL36TX_CATCH_ALL_8B10B_DISf_GET BCMI_TSCF_XGXS_TX_X4_CL36_CTL_GEN2r_CL36TX_CATCH_ALL_8B10B_DISf_GET
#define TX_X4_CL36_CTL_GEN2r_CL36TX_CATCH_ALL_8B10B_DISf_SET BCMI_TSCF_XGXS_TX_X4_CL36_CTL_GEN2r_CL36TX_CATCH_ALL_8B10B_DISf_SET
#define TX_X4_CL36_CTL_GEN2r_CL36TX_LPI_ENf_GET BCMI_TSCF_XGXS_TX_X4_CL36_CTL_GEN2r_CL36TX_LPI_ENf_GET
#define TX_X4_CL36_CTL_GEN2r_CL36TX_LPI_ENf_SET BCMI_TSCF_XGXS_TX_X4_CL36_CTL_GEN2r_CL36TX_LPI_ENf_SET
#define TX_X4_CL36_CTL_GEN2r_CL36TX_ENf_GET BCMI_TSCF_XGXS_TX_X4_CL36_CTL_GEN2r_CL36TX_ENf_GET
#define TX_X4_CL36_CTL_GEN2r_CL36TX_ENf_SET BCMI_TSCF_XGXS_TX_X4_CL36_CTL_GEN2r_CL36TX_ENf_SET
#define READ_TX_X4_CL36_CTL_GEN2r BCMI_TSCF_XGXS_READ_TX_X4_CL36_CTL_GEN2r
#define WRITE_TX_X4_CL36_CTL_GEN2r BCMI_TSCF_XGXS_WRITE_TX_X4_CL36_CTL_GEN2r
#define MODIFY_TX_X4_CL36_CTL_GEN2r BCMI_TSCF_XGXS_MODIFY_TX_X4_CL36_CTL_GEN2r
#define READLN_TX_X4_CL36_CTL_GEN2r BCMI_TSCF_XGXS_READLN_TX_X4_CL36_CTL_GEN2r
#define WRITELN_TX_X4_CL36_CTL_GEN2r BCMI_TSCF_XGXS_WRITELN_TX_X4_CL36_CTL_GEN2r
#define WRITEALL_TX_X4_CL36_CTL_GEN2r BCMI_TSCF_XGXS_WRITEALL_TX_X4_CL36_CTL_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TX_X4_CL36_CTL_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TX_X4_TX_CTL0_GEN2
 * BLOCKS:   TX_X4_CONTROL0
 * REGADDR:  0xc115
 * DESC:     TX control 0 register
 * RESETVAL: 0xb8 (184)
 * ACCESS:   R/W
 * FIELDS:
 *     CL91_CW_SCRAMBLE Indicates whether the CL91 codeword should be scrambled or not. It should be set to 1 in FC mode.
 *     FIVE_BIT_XOR_EN  1'b1 - XOR 4:0 with 12:8, 1'b0 - No XOR of the 5 bits
 *     T_PMA_CL91_MUX_SEL T_PMA MUX CL91 select.
 *     T_PMA_WATERMARK  T_PMA FIFO watermark. In units of 66-bit blocks.
 *     T_PMA_BITMUX_DELAY T_PMA FIFO delay after watermark is reached (in units of cycles)
 *     CL91_FEC_MODE    
 */
#define BCMI_TSCF_XGXS_TX_X4_TX_CTL0_GEN2r (0x0000c115 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TX_X4_TX_CTL0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TX_X4_TX_CTL0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TX_X4_TX_CTL0_GEN2r_s {
	uint32_t v[1];
	uint32_t tx_x4_tx_ctl0_gen2[1];
	uint32_t _tx_x4_tx_ctl0_gen2;
} BCMI_TSCF_XGXS_TX_X4_TX_CTL0_GEN2r_t;

#define BCMI_TSCF_XGXS_TX_X4_TX_CTL0_GEN2r_CLR(r) (r).tx_x4_tx_ctl0_gen2[0] = 0
#define BCMI_TSCF_XGXS_TX_X4_TX_CTL0_GEN2r_SET(r,d) (r).tx_x4_tx_ctl0_gen2[0] = d
#define BCMI_TSCF_XGXS_TX_X4_TX_CTL0_GEN2r_GET(r) (r).tx_x4_tx_ctl0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TX_X4_TX_CTL0_GEN2r_CL91_FEC_MODEf_GET(r) ((((r).tx_x4_tx_ctl0_gen2[0]) >> 9) & 0x7)
#define BCMI_TSCF_XGXS_TX_X4_TX_CTL0_GEN2r_CL91_FEC_MODEf_SET(r,f) (r).tx_x4_tx_ctl0_gen2[0]=(((r).tx_x4_tx_ctl0_gen2[0] & ~((uint32_t)0x7 << 9)) | ((((uint32_t)f) & 0x7) << 9)) | (7 << (16 + 9))
#define BCMI_TSCF_XGXS_TX_X4_TX_CTL0_GEN2r_T_PMA_BITMUX_DELAYf_GET(r) ((((r).tx_x4_tx_ctl0_gen2[0]) >> 7) & 0x3)
#define BCMI_TSCF_XGXS_TX_X4_TX_CTL0_GEN2r_T_PMA_BITMUX_DELAYf_SET(r,f) (r).tx_x4_tx_ctl0_gen2[0]=(((r).tx_x4_tx_ctl0_gen2[0] & ~((uint32_t)0x3 << 7)) | ((((uint32_t)f) & 0x3) << 7)) | (3 << (16 + 7))
#define BCMI_TSCF_XGXS_TX_X4_TX_CTL0_GEN2r_T_PMA_WATERMARKf_GET(r) ((((r).tx_x4_tx_ctl0_gen2[0]) >> 3) & 0xf)
#define BCMI_TSCF_XGXS_TX_X4_TX_CTL0_GEN2r_T_PMA_WATERMARKf_SET(r,f) (r).tx_x4_tx_ctl0_gen2[0]=(((r).tx_x4_tx_ctl0_gen2[0] & ~((uint32_t)0xf << 3)) | ((((uint32_t)f) & 0xf) << 3)) | (15 << (16 + 3))
#define BCMI_TSCF_XGXS_TX_X4_TX_CTL0_GEN2r_T_PMA_CL91_MUX_SELf_GET(r) ((((r).tx_x4_tx_ctl0_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_TX_X4_TX_CTL0_GEN2r_T_PMA_CL91_MUX_SELf_SET(r,f) (r).tx_x4_tx_ctl0_gen2[0]=(((r).tx_x4_tx_ctl0_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_TX_X4_TX_CTL0_GEN2r_FIVE_BIT_XOR_ENf_GET(r) ((((r).tx_x4_tx_ctl0_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_TX_X4_TX_CTL0_GEN2r_FIVE_BIT_XOR_ENf_SET(r,f) (r).tx_x4_tx_ctl0_gen2[0]=(((r).tx_x4_tx_ctl0_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_TX_X4_TX_CTL0_GEN2r_CL91_CW_SCRAMBLEf_GET(r) (((r).tx_x4_tx_ctl0_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_TX_X4_TX_CTL0_GEN2r_CL91_CW_SCRAMBLEf_SET(r,f) (r).tx_x4_tx_ctl0_gen2[0]=(((r).tx_x4_tx_ctl0_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TX_X4_TX_CTL0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TX_X4_TX_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_X4_TX_CTL0_GEN2r,(_r._tx_x4_tx_ctl0_gen2))
#define BCMI_TSCF_XGXS_WRITE_TX_X4_TX_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X4_TX_CTL0_GEN2r,(_r._tx_x4_tx_ctl0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TX_X4_TX_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X4_TX_CTL0_GEN2r,(_r._tx_x4_tx_ctl0_gen2))
#define BCMI_TSCF_XGXS_READLN_TX_X4_TX_CTL0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_X4_TX_CTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_tx_ctl0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TX_X4_TX_CTL0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X4_TX_CTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_tx_ctl0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TX_X4_TX_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X4_TX_CTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_x4_tx_ctl0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TX_X4_TX_CTL0_GEN2r BCMI_TSCF_XGXS_TX_X4_TX_CTL0_GEN2r
#define TX_X4_TX_CTL0_GEN2r_SIZE BCMI_TSCF_XGXS_TX_X4_TX_CTL0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TX_X4_TX_CTL0_GEN2r_t TX_X4_TX_CTL0_GEN2r_t;
#define TX_X4_TX_CTL0_GEN2r_CLR BCMI_TSCF_XGXS_TX_X4_TX_CTL0_GEN2r_CLR
#define TX_X4_TX_CTL0_GEN2r_SET BCMI_TSCF_XGXS_TX_X4_TX_CTL0_GEN2r_SET
#define TX_X4_TX_CTL0_GEN2r_GET BCMI_TSCF_XGXS_TX_X4_TX_CTL0_GEN2r_GET
#define TX_X4_TX_CTL0_GEN2r_CL91_FEC_MODEf_GET BCMI_TSCF_XGXS_TX_X4_TX_CTL0_GEN2r_CL91_FEC_MODEf_GET
#define TX_X4_TX_CTL0_GEN2r_CL91_FEC_MODEf_SET BCMI_TSCF_XGXS_TX_X4_TX_CTL0_GEN2r_CL91_FEC_MODEf_SET
#define TX_X4_TX_CTL0_GEN2r_T_PMA_BITMUX_DELAYf_GET BCMI_TSCF_XGXS_TX_X4_TX_CTL0_GEN2r_T_PMA_BITMUX_DELAYf_GET
#define TX_X4_TX_CTL0_GEN2r_T_PMA_BITMUX_DELAYf_SET BCMI_TSCF_XGXS_TX_X4_TX_CTL0_GEN2r_T_PMA_BITMUX_DELAYf_SET
#define TX_X4_TX_CTL0_GEN2r_T_PMA_WATERMARKf_GET BCMI_TSCF_XGXS_TX_X4_TX_CTL0_GEN2r_T_PMA_WATERMARKf_GET
#define TX_X4_TX_CTL0_GEN2r_T_PMA_WATERMARKf_SET BCMI_TSCF_XGXS_TX_X4_TX_CTL0_GEN2r_T_PMA_WATERMARKf_SET
#define TX_X4_TX_CTL0_GEN2r_T_PMA_CL91_MUX_SELf_GET BCMI_TSCF_XGXS_TX_X4_TX_CTL0_GEN2r_T_PMA_CL91_MUX_SELf_GET
#define TX_X4_TX_CTL0_GEN2r_T_PMA_CL91_MUX_SELf_SET BCMI_TSCF_XGXS_TX_X4_TX_CTL0_GEN2r_T_PMA_CL91_MUX_SELf_SET
#define TX_X4_TX_CTL0_GEN2r_FIVE_BIT_XOR_ENf_GET BCMI_TSCF_XGXS_TX_X4_TX_CTL0_GEN2r_FIVE_BIT_XOR_ENf_GET
#define TX_X4_TX_CTL0_GEN2r_FIVE_BIT_XOR_ENf_SET BCMI_TSCF_XGXS_TX_X4_TX_CTL0_GEN2r_FIVE_BIT_XOR_ENf_SET
#define TX_X4_TX_CTL0_GEN2r_CL91_CW_SCRAMBLEf_GET BCMI_TSCF_XGXS_TX_X4_TX_CTL0_GEN2r_CL91_CW_SCRAMBLEf_GET
#define TX_X4_TX_CTL0_GEN2r_CL91_CW_SCRAMBLEf_SET BCMI_TSCF_XGXS_TX_X4_TX_CTL0_GEN2r_CL91_CW_SCRAMBLEf_SET
#define READ_TX_X4_TX_CTL0_GEN2r BCMI_TSCF_XGXS_READ_TX_X4_TX_CTL0_GEN2r
#define WRITE_TX_X4_TX_CTL0_GEN2r BCMI_TSCF_XGXS_WRITE_TX_X4_TX_CTL0_GEN2r
#define MODIFY_TX_X4_TX_CTL0_GEN2r BCMI_TSCF_XGXS_MODIFY_TX_X4_TX_CTL0_GEN2r
#define READLN_TX_X4_TX_CTL0_GEN2r BCMI_TSCF_XGXS_READLN_TX_X4_TX_CTL0_GEN2r
#define WRITELN_TX_X4_TX_CTL0_GEN2r BCMI_TSCF_XGXS_WRITELN_TX_X4_TX_CTL0_GEN2r
#define WRITEALL_TX_X4_TX_CTL0_GEN2r BCMI_TSCF_XGXS_WRITEALL_TX_X4_TX_CTL0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TX_X4_TX_CTL0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TX_X4_ENC_STS_0_GEN2
 * BLOCKS:   TX_X4_STATUS0
 * REGADDR:  0xc120
 * DESC:     Encode Status 0 register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CL49_TXSM_STATE  Transmit SM - current state
 *     CL49_T_TYPE_CODED Transmit SM - current t_type
 *     CL82_IDLE_DELETION_UNDERFLOW Not enough IPG between ||A|| in MLD mode and CL91 single lane mode.
 */
#define BCMI_TSCF_XGXS_TX_X4_ENC_STS_0_GEN2r (0x0000c120 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TX_X4_ENC_STS_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TX_X4_ENC_STS_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TX_X4_ENC_STS_0_GEN2r_s {
	uint32_t v[1];
	uint32_t tx_x4_enc_sts_0_gen2[1];
	uint32_t _tx_x4_enc_sts_0_gen2;
} BCMI_TSCF_XGXS_TX_X4_ENC_STS_0_GEN2r_t;

#define BCMI_TSCF_XGXS_TX_X4_ENC_STS_0_GEN2r_CLR(r) (r).tx_x4_enc_sts_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_TX_X4_ENC_STS_0_GEN2r_SET(r,d) (r).tx_x4_enc_sts_0_gen2[0] = d
#define BCMI_TSCF_XGXS_TX_X4_ENC_STS_0_GEN2r_GET(r) (r).tx_x4_enc_sts_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TX_X4_ENC_STS_0_GEN2r_CL82_IDLE_DELETION_UNDERFLOWf_GET(r) ((((r).tx_x4_enc_sts_0_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_TX_X4_ENC_STS_0_GEN2r_CL82_IDLE_DELETION_UNDERFLOWf_SET(r,f) (r).tx_x4_enc_sts_0_gen2[0]=(((r).tx_x4_enc_sts_0_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_TX_X4_ENC_STS_0_GEN2r_CL49_T_TYPE_CODEDf_GET(r) ((((r).tx_x4_enc_sts_0_gen2[0]) >> 3) & 0xf)
#define BCMI_TSCF_XGXS_TX_X4_ENC_STS_0_GEN2r_CL49_T_TYPE_CODEDf_SET(r,f) (r).tx_x4_enc_sts_0_gen2[0]=(((r).tx_x4_enc_sts_0_gen2[0] & ~((uint32_t)0xf << 3)) | ((((uint32_t)f) & 0xf) << 3)) | (15 << (16 + 3))
#define BCMI_TSCF_XGXS_TX_X4_ENC_STS_0_GEN2r_CL49_TXSM_STATEf_GET(r) (((r).tx_x4_enc_sts_0_gen2[0]) & 0x7)
#define BCMI_TSCF_XGXS_TX_X4_ENC_STS_0_GEN2r_CL49_TXSM_STATEf_SET(r,f) (r).tx_x4_enc_sts_0_gen2[0]=(((r).tx_x4_enc_sts_0_gen2[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access TX_X4_ENC_STS_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TX_X4_ENC_STS_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_X4_ENC_STS_0_GEN2r,(_r._tx_x4_enc_sts_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_TX_X4_ENC_STS_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X4_ENC_STS_0_GEN2r,(_r._tx_x4_enc_sts_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TX_X4_ENC_STS_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X4_ENC_STS_0_GEN2r,(_r._tx_x4_enc_sts_0_gen2))
#define BCMI_TSCF_XGXS_READLN_TX_X4_ENC_STS_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_X4_ENC_STS_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_enc_sts_0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TX_X4_ENC_STS_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X4_ENC_STS_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_enc_sts_0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TX_X4_ENC_STS_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X4_ENC_STS_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_x4_enc_sts_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TX_X4_ENC_STS_0_GEN2r BCMI_TSCF_XGXS_TX_X4_ENC_STS_0_GEN2r
#define TX_X4_ENC_STS_0_GEN2r_SIZE BCMI_TSCF_XGXS_TX_X4_ENC_STS_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TX_X4_ENC_STS_0_GEN2r_t TX_X4_ENC_STS_0_GEN2r_t;
#define TX_X4_ENC_STS_0_GEN2r_CLR BCMI_TSCF_XGXS_TX_X4_ENC_STS_0_GEN2r_CLR
#define TX_X4_ENC_STS_0_GEN2r_SET BCMI_TSCF_XGXS_TX_X4_ENC_STS_0_GEN2r_SET
#define TX_X4_ENC_STS_0_GEN2r_GET BCMI_TSCF_XGXS_TX_X4_ENC_STS_0_GEN2r_GET
#define TX_X4_ENC_STS_0_GEN2r_CL82_IDLE_DELETION_UNDERFLOWf_GET BCMI_TSCF_XGXS_TX_X4_ENC_STS_0_GEN2r_CL82_IDLE_DELETION_UNDERFLOWf_GET
#define TX_X4_ENC_STS_0_GEN2r_CL82_IDLE_DELETION_UNDERFLOWf_SET BCMI_TSCF_XGXS_TX_X4_ENC_STS_0_GEN2r_CL82_IDLE_DELETION_UNDERFLOWf_SET
#define TX_X4_ENC_STS_0_GEN2r_CL49_T_TYPE_CODEDf_GET BCMI_TSCF_XGXS_TX_X4_ENC_STS_0_GEN2r_CL49_T_TYPE_CODEDf_GET
#define TX_X4_ENC_STS_0_GEN2r_CL49_T_TYPE_CODEDf_SET BCMI_TSCF_XGXS_TX_X4_ENC_STS_0_GEN2r_CL49_T_TYPE_CODEDf_SET
#define TX_X4_ENC_STS_0_GEN2r_CL49_TXSM_STATEf_GET BCMI_TSCF_XGXS_TX_X4_ENC_STS_0_GEN2r_CL49_TXSM_STATEf_GET
#define TX_X4_ENC_STS_0_GEN2r_CL49_TXSM_STATEf_SET BCMI_TSCF_XGXS_TX_X4_ENC_STS_0_GEN2r_CL49_TXSM_STATEf_SET
#define READ_TX_X4_ENC_STS_0_GEN2r BCMI_TSCF_XGXS_READ_TX_X4_ENC_STS_0_GEN2r
#define WRITE_TX_X4_ENC_STS_0_GEN2r BCMI_TSCF_XGXS_WRITE_TX_X4_ENC_STS_0_GEN2r
#define MODIFY_TX_X4_ENC_STS_0_GEN2r BCMI_TSCF_XGXS_MODIFY_TX_X4_ENC_STS_0_GEN2r
#define READLN_TX_X4_ENC_STS_0_GEN2r BCMI_TSCF_XGXS_READLN_TX_X4_ENC_STS_0_GEN2r
#define WRITELN_TX_X4_ENC_STS_0_GEN2r BCMI_TSCF_XGXS_WRITELN_TX_X4_ENC_STS_0_GEN2r
#define WRITEALL_TX_X4_ENC_STS_0_GEN2r BCMI_TSCF_XGXS_WRITEALL_TX_X4_ENC_STS_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TX_X4_ENC_STS_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TX_X4_ENC_STS_1_GEN2
 * BLOCKS:   TX_X4_STATUS0
 * REGADDR:  0xc121
 * DESC:     Encode Status 1 register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL49_LTXSM_STATE Transmit SM - latched states - latched on entry
 *     CL49_TX_FAULT_DET A latched status bit indicating that the cl49 encoder has a local or remote fault block.
 */
#define BCMI_TSCF_XGXS_TX_X4_ENC_STS_1_GEN2r (0x0000c121 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TX_X4_ENC_STS_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TX_X4_ENC_STS_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TX_X4_ENC_STS_1_GEN2r_s {
	uint32_t v[1];
	uint32_t tx_x4_enc_sts_1_gen2[1];
	uint32_t _tx_x4_enc_sts_1_gen2;
} BCMI_TSCF_XGXS_TX_X4_ENC_STS_1_GEN2r_t;

#define BCMI_TSCF_XGXS_TX_X4_ENC_STS_1_GEN2r_CLR(r) (r).tx_x4_enc_sts_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_TX_X4_ENC_STS_1_GEN2r_SET(r,d) (r).tx_x4_enc_sts_1_gen2[0] = d
#define BCMI_TSCF_XGXS_TX_X4_ENC_STS_1_GEN2r_GET(r) (r).tx_x4_enc_sts_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TX_X4_ENC_STS_1_GEN2r_CL49_TX_FAULT_DETf_GET(r) ((((r).tx_x4_enc_sts_1_gen2[0]) >> 8) & 0x1)
#define BCMI_TSCF_XGXS_TX_X4_ENC_STS_1_GEN2r_CL49_TX_FAULT_DETf_SET(r,f) (r).tx_x4_enc_sts_1_gen2[0]=(((r).tx_x4_enc_sts_1_gen2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_XGXS_TX_X4_ENC_STS_1_GEN2r_CL49_LTXSM_STATEf_GET(r) (((r).tx_x4_enc_sts_1_gen2[0]) & 0xff)
#define BCMI_TSCF_XGXS_TX_X4_ENC_STS_1_GEN2r_CL49_LTXSM_STATEf_SET(r,f) (r).tx_x4_enc_sts_1_gen2[0]=(((r).tx_x4_enc_sts_1_gen2[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access TX_X4_ENC_STS_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TX_X4_ENC_STS_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_X4_ENC_STS_1_GEN2r,(_r._tx_x4_enc_sts_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_TX_X4_ENC_STS_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X4_ENC_STS_1_GEN2r,(_r._tx_x4_enc_sts_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TX_X4_ENC_STS_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X4_ENC_STS_1_GEN2r,(_r._tx_x4_enc_sts_1_gen2))
#define BCMI_TSCF_XGXS_READLN_TX_X4_ENC_STS_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_X4_ENC_STS_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_enc_sts_1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TX_X4_ENC_STS_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X4_ENC_STS_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_enc_sts_1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TX_X4_ENC_STS_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X4_ENC_STS_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_x4_enc_sts_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TX_X4_ENC_STS_1_GEN2r BCMI_TSCF_XGXS_TX_X4_ENC_STS_1_GEN2r
#define TX_X4_ENC_STS_1_GEN2r_SIZE BCMI_TSCF_XGXS_TX_X4_ENC_STS_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TX_X4_ENC_STS_1_GEN2r_t TX_X4_ENC_STS_1_GEN2r_t;
#define TX_X4_ENC_STS_1_GEN2r_CLR BCMI_TSCF_XGXS_TX_X4_ENC_STS_1_GEN2r_CLR
#define TX_X4_ENC_STS_1_GEN2r_SET BCMI_TSCF_XGXS_TX_X4_ENC_STS_1_GEN2r_SET
#define TX_X4_ENC_STS_1_GEN2r_GET BCMI_TSCF_XGXS_TX_X4_ENC_STS_1_GEN2r_GET
#define TX_X4_ENC_STS_1_GEN2r_CL49_TX_FAULT_DETf_GET BCMI_TSCF_XGXS_TX_X4_ENC_STS_1_GEN2r_CL49_TX_FAULT_DETf_GET
#define TX_X4_ENC_STS_1_GEN2r_CL49_TX_FAULT_DETf_SET BCMI_TSCF_XGXS_TX_X4_ENC_STS_1_GEN2r_CL49_TX_FAULT_DETf_SET
#define TX_X4_ENC_STS_1_GEN2r_CL49_LTXSM_STATEf_GET BCMI_TSCF_XGXS_TX_X4_ENC_STS_1_GEN2r_CL49_LTXSM_STATEf_GET
#define TX_X4_ENC_STS_1_GEN2r_CL49_LTXSM_STATEf_SET BCMI_TSCF_XGXS_TX_X4_ENC_STS_1_GEN2r_CL49_LTXSM_STATEf_SET
#define READ_TX_X4_ENC_STS_1_GEN2r BCMI_TSCF_XGXS_READ_TX_X4_ENC_STS_1_GEN2r
#define WRITE_TX_X4_ENC_STS_1_GEN2r BCMI_TSCF_XGXS_WRITE_TX_X4_ENC_STS_1_GEN2r
#define MODIFY_TX_X4_ENC_STS_1_GEN2r BCMI_TSCF_XGXS_MODIFY_TX_X4_ENC_STS_1_GEN2r
#define READLN_TX_X4_ENC_STS_1_GEN2r BCMI_TSCF_XGXS_READLN_TX_X4_ENC_STS_1_GEN2r
#define WRITELN_TX_X4_ENC_STS_1_GEN2r BCMI_TSCF_XGXS_WRITELN_TX_X4_ENC_STS_1_GEN2r
#define WRITEALL_TX_X4_ENC_STS_1_GEN2r BCMI_TSCF_XGXS_WRITEALL_TX_X4_ENC_STS_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TX_X4_ENC_STS_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TX_X4_PCS_STS_LIVE_GEN2
 * BLOCKS:   TX_X4_STATUS0
 * REGADDR:  0xc122
 * DESC:     Live Status of PCS Information
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TX_LPI_RECEIVED  PER PORT: Live LPI (LOW POWER IDLE ) indicator
 *     TX_LINK_INTERRUPT PER PORT: Live LI (LINK INTERRUPT) indicator
 *     TX_REMOTE_FAULT  PER PORT: Live RF (REMOTE FAULT ) indicator
 *     TX_LOCAL_FAULT   PER PORT: Live LF (LOCAL FAULT ) indicator
 */
#define BCMI_TSCF_XGXS_TX_X4_PCS_STS_LIVE_GEN2r (0x0000c122 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TX_X4_PCS_STS_LIVE_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TX_X4_PCS_STS_LIVE_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TX_X4_PCS_STS_LIVE_GEN2r_s {
	uint32_t v[1];
	uint32_t tx_x4_pcs_sts_live_gen2[1];
	uint32_t _tx_x4_pcs_sts_live_gen2;
} BCMI_TSCF_XGXS_TX_X4_PCS_STS_LIVE_GEN2r_t;

#define BCMI_TSCF_XGXS_TX_X4_PCS_STS_LIVE_GEN2r_CLR(r) (r).tx_x4_pcs_sts_live_gen2[0] = 0
#define BCMI_TSCF_XGXS_TX_X4_PCS_STS_LIVE_GEN2r_SET(r,d) (r).tx_x4_pcs_sts_live_gen2[0] = d
#define BCMI_TSCF_XGXS_TX_X4_PCS_STS_LIVE_GEN2r_GET(r) (r).tx_x4_pcs_sts_live_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TX_X4_PCS_STS_LIVE_GEN2r_TX_LOCAL_FAULTf_GET(r) ((((r).tx_x4_pcs_sts_live_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_TX_X4_PCS_STS_LIVE_GEN2r_TX_LOCAL_FAULTf_SET(r,f) (r).tx_x4_pcs_sts_live_gen2[0]=(((r).tx_x4_pcs_sts_live_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_TX_X4_PCS_STS_LIVE_GEN2r_TX_REMOTE_FAULTf_GET(r) ((((r).tx_x4_pcs_sts_live_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_TX_X4_PCS_STS_LIVE_GEN2r_TX_REMOTE_FAULTf_SET(r,f) (r).tx_x4_pcs_sts_live_gen2[0]=(((r).tx_x4_pcs_sts_live_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_TX_X4_PCS_STS_LIVE_GEN2r_TX_LINK_INTERRUPTf_GET(r) ((((r).tx_x4_pcs_sts_live_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_TX_X4_PCS_STS_LIVE_GEN2r_TX_LINK_INTERRUPTf_SET(r,f) (r).tx_x4_pcs_sts_live_gen2[0]=(((r).tx_x4_pcs_sts_live_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_TX_X4_PCS_STS_LIVE_GEN2r_TX_LPI_RECEIVEDf_GET(r) (((r).tx_x4_pcs_sts_live_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_TX_X4_PCS_STS_LIVE_GEN2r_TX_LPI_RECEIVEDf_SET(r,f) (r).tx_x4_pcs_sts_live_gen2[0]=(((r).tx_x4_pcs_sts_live_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TX_X4_PCS_STS_LIVE_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TX_X4_PCS_STS_LIVE_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_X4_PCS_STS_LIVE_GEN2r,(_r._tx_x4_pcs_sts_live_gen2))
#define BCMI_TSCF_XGXS_WRITE_TX_X4_PCS_STS_LIVE_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X4_PCS_STS_LIVE_GEN2r,(_r._tx_x4_pcs_sts_live_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TX_X4_PCS_STS_LIVE_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X4_PCS_STS_LIVE_GEN2r,(_r._tx_x4_pcs_sts_live_gen2))
#define BCMI_TSCF_XGXS_READLN_TX_X4_PCS_STS_LIVE_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_X4_PCS_STS_LIVE_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_pcs_sts_live_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TX_X4_PCS_STS_LIVE_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X4_PCS_STS_LIVE_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_pcs_sts_live_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TX_X4_PCS_STS_LIVE_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X4_PCS_STS_LIVE_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_x4_pcs_sts_live_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TX_X4_PCS_STS_LIVE_GEN2r BCMI_TSCF_XGXS_TX_X4_PCS_STS_LIVE_GEN2r
#define TX_X4_PCS_STS_LIVE_GEN2r_SIZE BCMI_TSCF_XGXS_TX_X4_PCS_STS_LIVE_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TX_X4_PCS_STS_LIVE_GEN2r_t TX_X4_PCS_STS_LIVE_GEN2r_t;
#define TX_X4_PCS_STS_LIVE_GEN2r_CLR BCMI_TSCF_XGXS_TX_X4_PCS_STS_LIVE_GEN2r_CLR
#define TX_X4_PCS_STS_LIVE_GEN2r_SET BCMI_TSCF_XGXS_TX_X4_PCS_STS_LIVE_GEN2r_SET
#define TX_X4_PCS_STS_LIVE_GEN2r_GET BCMI_TSCF_XGXS_TX_X4_PCS_STS_LIVE_GEN2r_GET
#define TX_X4_PCS_STS_LIVE_GEN2r_TX_LOCAL_FAULTf_GET BCMI_TSCF_XGXS_TX_X4_PCS_STS_LIVE_GEN2r_TX_LOCAL_FAULTf_GET
#define TX_X4_PCS_STS_LIVE_GEN2r_TX_LOCAL_FAULTf_SET BCMI_TSCF_XGXS_TX_X4_PCS_STS_LIVE_GEN2r_TX_LOCAL_FAULTf_SET
#define TX_X4_PCS_STS_LIVE_GEN2r_TX_REMOTE_FAULTf_GET BCMI_TSCF_XGXS_TX_X4_PCS_STS_LIVE_GEN2r_TX_REMOTE_FAULTf_GET
#define TX_X4_PCS_STS_LIVE_GEN2r_TX_REMOTE_FAULTf_SET BCMI_TSCF_XGXS_TX_X4_PCS_STS_LIVE_GEN2r_TX_REMOTE_FAULTf_SET
#define TX_X4_PCS_STS_LIVE_GEN2r_TX_LINK_INTERRUPTf_GET BCMI_TSCF_XGXS_TX_X4_PCS_STS_LIVE_GEN2r_TX_LINK_INTERRUPTf_GET
#define TX_X4_PCS_STS_LIVE_GEN2r_TX_LINK_INTERRUPTf_SET BCMI_TSCF_XGXS_TX_X4_PCS_STS_LIVE_GEN2r_TX_LINK_INTERRUPTf_SET
#define TX_X4_PCS_STS_LIVE_GEN2r_TX_LPI_RECEIVEDf_GET BCMI_TSCF_XGXS_TX_X4_PCS_STS_LIVE_GEN2r_TX_LPI_RECEIVEDf_GET
#define TX_X4_PCS_STS_LIVE_GEN2r_TX_LPI_RECEIVEDf_SET BCMI_TSCF_XGXS_TX_X4_PCS_STS_LIVE_GEN2r_TX_LPI_RECEIVEDf_SET
#define READ_TX_X4_PCS_STS_LIVE_GEN2r BCMI_TSCF_XGXS_READ_TX_X4_PCS_STS_LIVE_GEN2r
#define WRITE_TX_X4_PCS_STS_LIVE_GEN2r BCMI_TSCF_XGXS_WRITE_TX_X4_PCS_STS_LIVE_GEN2r
#define MODIFY_TX_X4_PCS_STS_LIVE_GEN2r BCMI_TSCF_XGXS_MODIFY_TX_X4_PCS_STS_LIVE_GEN2r
#define READLN_TX_X4_PCS_STS_LIVE_GEN2r BCMI_TSCF_XGXS_READLN_TX_X4_PCS_STS_LIVE_GEN2r
#define WRITELN_TX_X4_PCS_STS_LIVE_GEN2r BCMI_TSCF_XGXS_WRITELN_TX_X4_PCS_STS_LIVE_GEN2r
#define WRITEALL_TX_X4_PCS_STS_LIVE_GEN2r BCMI_TSCF_XGXS_WRITEALL_TX_X4_PCS_STS_LIVE_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TX_X4_PCS_STS_LIVE_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TX_X4_PCS_STS_LATCH_GEN2
 * BLOCKS:   TX_X4_STATUS0
 * REGADDR:  0xc123
 * DESC:     Latched Status of PCS Information
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LPI_RECEIVED_LH  PER PORT: Low Power Indicator (LPI) has transitioned high since last read.Clear on read
 *     REMOTE_FAULT_LH  PER PORT: Remote Fault (RF)  has transitioned high since last read.Clear on read
 *     LOCAL_FAULT_LH   PER PORT: Local Fault (LF) indicator has transitioned high since last read.Clear on read
 *     LINK_INTERRUPT_LH PER PORT: LI (LINK INTERRUPT) indicator has transitioned high since last read.Clear on read
 */
#define BCMI_TSCF_XGXS_TX_X4_PCS_STS_LATCH_GEN2r (0x0000c123 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TX_X4_PCS_STS_LATCH_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TX_X4_PCS_STS_LATCH_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TX_X4_PCS_STS_LATCH_GEN2r_s {
	uint32_t v[1];
	uint32_t tx_x4_pcs_sts_latch_gen2[1];
	uint32_t _tx_x4_pcs_sts_latch_gen2;
} BCMI_TSCF_XGXS_TX_X4_PCS_STS_LATCH_GEN2r_t;

#define BCMI_TSCF_XGXS_TX_X4_PCS_STS_LATCH_GEN2r_CLR(r) (r).tx_x4_pcs_sts_latch_gen2[0] = 0
#define BCMI_TSCF_XGXS_TX_X4_PCS_STS_LATCH_GEN2r_SET(r,d) (r).tx_x4_pcs_sts_latch_gen2[0] = d
#define BCMI_TSCF_XGXS_TX_X4_PCS_STS_LATCH_GEN2r_GET(r) (r).tx_x4_pcs_sts_latch_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TX_X4_PCS_STS_LATCH_GEN2r_LINK_INTERRUPT_LHf_GET(r) ((((r).tx_x4_pcs_sts_latch_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_TX_X4_PCS_STS_LATCH_GEN2r_LINK_INTERRUPT_LHf_SET(r,f) (r).tx_x4_pcs_sts_latch_gen2[0]=(((r).tx_x4_pcs_sts_latch_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_TX_X4_PCS_STS_LATCH_GEN2r_LOCAL_FAULT_LHf_GET(r) ((((r).tx_x4_pcs_sts_latch_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_TX_X4_PCS_STS_LATCH_GEN2r_LOCAL_FAULT_LHf_SET(r,f) (r).tx_x4_pcs_sts_latch_gen2[0]=(((r).tx_x4_pcs_sts_latch_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_TX_X4_PCS_STS_LATCH_GEN2r_REMOTE_FAULT_LHf_GET(r) ((((r).tx_x4_pcs_sts_latch_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_TX_X4_PCS_STS_LATCH_GEN2r_REMOTE_FAULT_LHf_SET(r,f) (r).tx_x4_pcs_sts_latch_gen2[0]=(((r).tx_x4_pcs_sts_latch_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_TX_X4_PCS_STS_LATCH_GEN2r_LPI_RECEIVED_LHf_GET(r) (((r).tx_x4_pcs_sts_latch_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_TX_X4_PCS_STS_LATCH_GEN2r_LPI_RECEIVED_LHf_SET(r,f) (r).tx_x4_pcs_sts_latch_gen2[0]=(((r).tx_x4_pcs_sts_latch_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TX_X4_PCS_STS_LATCH_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TX_X4_PCS_STS_LATCH_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_X4_PCS_STS_LATCH_GEN2r,(_r._tx_x4_pcs_sts_latch_gen2))
#define BCMI_TSCF_XGXS_WRITE_TX_X4_PCS_STS_LATCH_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X4_PCS_STS_LATCH_GEN2r,(_r._tx_x4_pcs_sts_latch_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TX_X4_PCS_STS_LATCH_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X4_PCS_STS_LATCH_GEN2r,(_r._tx_x4_pcs_sts_latch_gen2))
#define BCMI_TSCF_XGXS_READLN_TX_X4_PCS_STS_LATCH_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_X4_PCS_STS_LATCH_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_pcs_sts_latch_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TX_X4_PCS_STS_LATCH_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X4_PCS_STS_LATCH_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_pcs_sts_latch_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TX_X4_PCS_STS_LATCH_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X4_PCS_STS_LATCH_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_x4_pcs_sts_latch_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TX_X4_PCS_STS_LATCH_GEN2r BCMI_TSCF_XGXS_TX_X4_PCS_STS_LATCH_GEN2r
#define TX_X4_PCS_STS_LATCH_GEN2r_SIZE BCMI_TSCF_XGXS_TX_X4_PCS_STS_LATCH_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TX_X4_PCS_STS_LATCH_GEN2r_t TX_X4_PCS_STS_LATCH_GEN2r_t;
#define TX_X4_PCS_STS_LATCH_GEN2r_CLR BCMI_TSCF_XGXS_TX_X4_PCS_STS_LATCH_GEN2r_CLR
#define TX_X4_PCS_STS_LATCH_GEN2r_SET BCMI_TSCF_XGXS_TX_X4_PCS_STS_LATCH_GEN2r_SET
#define TX_X4_PCS_STS_LATCH_GEN2r_GET BCMI_TSCF_XGXS_TX_X4_PCS_STS_LATCH_GEN2r_GET
#define TX_X4_PCS_STS_LATCH_GEN2r_LINK_INTERRUPT_LHf_GET BCMI_TSCF_XGXS_TX_X4_PCS_STS_LATCH_GEN2r_LINK_INTERRUPT_LHf_GET
#define TX_X4_PCS_STS_LATCH_GEN2r_LINK_INTERRUPT_LHf_SET BCMI_TSCF_XGXS_TX_X4_PCS_STS_LATCH_GEN2r_LINK_INTERRUPT_LHf_SET
#define TX_X4_PCS_STS_LATCH_GEN2r_LOCAL_FAULT_LHf_GET BCMI_TSCF_XGXS_TX_X4_PCS_STS_LATCH_GEN2r_LOCAL_FAULT_LHf_GET
#define TX_X4_PCS_STS_LATCH_GEN2r_LOCAL_FAULT_LHf_SET BCMI_TSCF_XGXS_TX_X4_PCS_STS_LATCH_GEN2r_LOCAL_FAULT_LHf_SET
#define TX_X4_PCS_STS_LATCH_GEN2r_REMOTE_FAULT_LHf_GET BCMI_TSCF_XGXS_TX_X4_PCS_STS_LATCH_GEN2r_REMOTE_FAULT_LHf_GET
#define TX_X4_PCS_STS_LATCH_GEN2r_REMOTE_FAULT_LHf_SET BCMI_TSCF_XGXS_TX_X4_PCS_STS_LATCH_GEN2r_REMOTE_FAULT_LHf_SET
#define TX_X4_PCS_STS_LATCH_GEN2r_LPI_RECEIVED_LHf_GET BCMI_TSCF_XGXS_TX_X4_PCS_STS_LATCH_GEN2r_LPI_RECEIVED_LHf_GET
#define TX_X4_PCS_STS_LATCH_GEN2r_LPI_RECEIVED_LHf_SET BCMI_TSCF_XGXS_TX_X4_PCS_STS_LATCH_GEN2r_LPI_RECEIVED_LHf_SET
#define READ_TX_X4_PCS_STS_LATCH_GEN2r BCMI_TSCF_XGXS_READ_TX_X4_PCS_STS_LATCH_GEN2r
#define WRITE_TX_X4_PCS_STS_LATCH_GEN2r BCMI_TSCF_XGXS_WRITE_TX_X4_PCS_STS_LATCH_GEN2r
#define MODIFY_TX_X4_PCS_STS_LATCH_GEN2r BCMI_TSCF_XGXS_MODIFY_TX_X4_PCS_STS_LATCH_GEN2r
#define READLN_TX_X4_PCS_STS_LATCH_GEN2r BCMI_TSCF_XGXS_READLN_TX_X4_PCS_STS_LATCH_GEN2r
#define WRITELN_TX_X4_PCS_STS_LATCH_GEN2r BCMI_TSCF_XGXS_WRITELN_TX_X4_PCS_STS_LATCH_GEN2r
#define WRITEALL_TX_X4_PCS_STS_LATCH_GEN2r BCMI_TSCF_XGXS_WRITEALL_TX_X4_PCS_STS_LATCH_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TX_X4_PCS_STS_LATCH_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TX_X4_PMA_STS_GEN2
 * BLOCKS:   TX_X4_STATUS0
 * REGADDR:  0xc124
 * DESC:     PMA overflow underflow status
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     T_TC_OUT_OVERFLOW Per logical lane t_tc_out fifo overflow status.
 *     T_TC_OUT_UNDERFLOW Per logical lane t_tc_out fifo underflow status.
 */
#define BCMI_TSCF_XGXS_TX_X4_PMA_STS_GEN2r (0x0000c124 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TX_X4_PMA_STS_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TX_X4_PMA_STS_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TX_X4_PMA_STS_GEN2r_s {
	uint32_t v[1];
	uint32_t tx_x4_pma_sts_gen2[1];
	uint32_t _tx_x4_pma_sts_gen2;
} BCMI_TSCF_XGXS_TX_X4_PMA_STS_GEN2r_t;

#define BCMI_TSCF_XGXS_TX_X4_PMA_STS_GEN2r_CLR(r) (r).tx_x4_pma_sts_gen2[0] = 0
#define BCMI_TSCF_XGXS_TX_X4_PMA_STS_GEN2r_SET(r,d) (r).tx_x4_pma_sts_gen2[0] = d
#define BCMI_TSCF_XGXS_TX_X4_PMA_STS_GEN2r_GET(r) (r).tx_x4_pma_sts_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TX_X4_PMA_STS_GEN2r_T_TC_OUT_UNDERFLOWf_GET(r) ((((r).tx_x4_pma_sts_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_TX_X4_PMA_STS_GEN2r_T_TC_OUT_UNDERFLOWf_SET(r,f) (r).tx_x4_pma_sts_gen2[0]=(((r).tx_x4_pma_sts_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_TX_X4_PMA_STS_GEN2r_T_TC_OUT_OVERFLOWf_GET(r) ((((r).tx_x4_pma_sts_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_TX_X4_PMA_STS_GEN2r_T_TC_OUT_OVERFLOWf_SET(r,f) (r).tx_x4_pma_sts_gen2[0]=(((r).tx_x4_pma_sts_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))

/*
 * These macros can be used to access TX_X4_PMA_STS_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TX_X4_PMA_STS_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_X4_PMA_STS_GEN2r,(_r._tx_x4_pma_sts_gen2))
#define BCMI_TSCF_XGXS_WRITE_TX_X4_PMA_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X4_PMA_STS_GEN2r,(_r._tx_x4_pma_sts_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TX_X4_PMA_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X4_PMA_STS_GEN2r,(_r._tx_x4_pma_sts_gen2))
#define BCMI_TSCF_XGXS_READLN_TX_X4_PMA_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_X4_PMA_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_pma_sts_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TX_X4_PMA_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X4_PMA_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_x4_pma_sts_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TX_X4_PMA_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_X4_PMA_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_x4_pma_sts_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TX_X4_PMA_STS_GEN2r BCMI_TSCF_XGXS_TX_X4_PMA_STS_GEN2r
#define TX_X4_PMA_STS_GEN2r_SIZE BCMI_TSCF_XGXS_TX_X4_PMA_STS_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TX_X4_PMA_STS_GEN2r_t TX_X4_PMA_STS_GEN2r_t;
#define TX_X4_PMA_STS_GEN2r_CLR BCMI_TSCF_XGXS_TX_X4_PMA_STS_GEN2r_CLR
#define TX_X4_PMA_STS_GEN2r_SET BCMI_TSCF_XGXS_TX_X4_PMA_STS_GEN2r_SET
#define TX_X4_PMA_STS_GEN2r_GET BCMI_TSCF_XGXS_TX_X4_PMA_STS_GEN2r_GET
#define TX_X4_PMA_STS_GEN2r_T_TC_OUT_UNDERFLOWf_GET BCMI_TSCF_XGXS_TX_X4_PMA_STS_GEN2r_T_TC_OUT_UNDERFLOWf_GET
#define TX_X4_PMA_STS_GEN2r_T_TC_OUT_UNDERFLOWf_SET BCMI_TSCF_XGXS_TX_X4_PMA_STS_GEN2r_T_TC_OUT_UNDERFLOWf_SET
#define TX_X4_PMA_STS_GEN2r_T_TC_OUT_OVERFLOWf_GET BCMI_TSCF_XGXS_TX_X4_PMA_STS_GEN2r_T_TC_OUT_OVERFLOWf_GET
#define TX_X4_PMA_STS_GEN2r_T_TC_OUT_OVERFLOWf_SET BCMI_TSCF_XGXS_TX_X4_PMA_STS_GEN2r_T_TC_OUT_OVERFLOWf_SET
#define READ_TX_X4_PMA_STS_GEN2r BCMI_TSCF_XGXS_READ_TX_X4_PMA_STS_GEN2r
#define WRITE_TX_X4_PMA_STS_GEN2r BCMI_TSCF_XGXS_WRITE_TX_X4_PMA_STS_GEN2r
#define MODIFY_TX_X4_PMA_STS_GEN2r BCMI_TSCF_XGXS_MODIFY_TX_X4_PMA_STS_GEN2r
#define READLN_TX_X4_PMA_STS_GEN2r BCMI_TSCF_XGXS_READLN_TX_X4_PMA_STS_GEN2r
#define WRITELN_TX_X4_PMA_STS_GEN2r BCMI_TSCF_XGXS_WRITELN_TX_X4_PMA_STS_GEN2r
#define WRITEALL_TX_X4_PMA_STS_GEN2r BCMI_TSCF_XGXS_WRITEALL_TX_X4_PMA_STS_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TX_X4_PMA_STS_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_PCS_CTL_0_GEN2
 * BLOCKS:   RX_X4_CONTROL0
 * REGADDR:  0xc130
 * DESC:     pcs control 0 register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LPI_ENABLE       If off (0), LPIs are converted to IDLEsNOTE: LPI_ENABLE APPLIES TO BOTH TX AND RX pipelines
 *     FEC_ENABLE       Indicates whether cl74 FEC is enabled or not
 *     CL91_FEC_MODE    
 *     BLOCK_NON_FC_BLK_TYPES Convert the following block types to errors - 0x87, 0x99, 0xAA, 0xCC, 0xD2, 0xE1
 *     DEC_FSM_MODE     
 *     DESKEW_MODE      
 *     DEC_TL_MODE      
 *     DESCR_MODE       
 */
#define BCMI_TSCF_XGXS_RX_X4_PCS_CTL_0_GEN2r (0x0000c130 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_PCS_CTL_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_PCS_CTL_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_PCS_CTL_0_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_pcs_ctl_0_gen2[1];
	uint32_t _rx_x4_pcs_ctl_0_gen2;
} BCMI_TSCF_XGXS_RX_X4_PCS_CTL_0_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_PCS_CTL_0_GEN2r_CLR(r) (r).rx_x4_pcs_ctl_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_PCS_CTL_0_GEN2r_SET(r,d) (r).rx_x4_pcs_ctl_0_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_PCS_CTL_0_GEN2r_GET(r) (r).rx_x4_pcs_ctl_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_PCS_CTL_0_GEN2r_DESCR_MODEf_GET(r) ((((r).rx_x4_pcs_ctl_0_gen2[0]) >> 14) & 0x3)
#define BCMI_TSCF_XGXS_RX_X4_PCS_CTL_0_GEN2r_DESCR_MODEf_SET(r,f) (r).rx_x4_pcs_ctl_0_gen2[0]=(((r).rx_x4_pcs_ctl_0_gen2[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_TSCF_XGXS_RX_X4_PCS_CTL_0_GEN2r_DEC_TL_MODEf_GET(r) ((((r).rx_x4_pcs_ctl_0_gen2[0]) >> 12) & 0x3)
#define BCMI_TSCF_XGXS_RX_X4_PCS_CTL_0_GEN2r_DEC_TL_MODEf_SET(r,f) (r).rx_x4_pcs_ctl_0_gen2[0]=(((r).rx_x4_pcs_ctl_0_gen2[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12)) | (3 << (16 + 12))
#define BCMI_TSCF_XGXS_RX_X4_PCS_CTL_0_GEN2r_DESKEW_MODEf_GET(r) ((((r).rx_x4_pcs_ctl_0_gen2[0]) >> 8) & 0xf)
#define BCMI_TSCF_XGXS_RX_X4_PCS_CTL_0_GEN2r_DESKEW_MODEf_SET(r,f) (r).rx_x4_pcs_ctl_0_gen2[0]=(((r).rx_x4_pcs_ctl_0_gen2[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_XGXS_RX_X4_PCS_CTL_0_GEN2r_DEC_FSM_MODEf_GET(r) ((((r).rx_x4_pcs_ctl_0_gen2[0]) >> 6) & 0x3)
#define BCMI_TSCF_XGXS_RX_X4_PCS_CTL_0_GEN2r_DEC_FSM_MODEf_SET(r,f) (r).rx_x4_pcs_ctl_0_gen2[0]=(((r).rx_x4_pcs_ctl_0_gen2[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6)) | (3 << (16 + 6))
#define BCMI_TSCF_XGXS_RX_X4_PCS_CTL_0_GEN2r_BLOCK_NON_FC_BLK_TYPESf_GET(r) ((((r).rx_x4_pcs_ctl_0_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_PCS_CTL_0_GEN2r_BLOCK_NON_FC_BLK_TYPESf_SET(r,f) (r).rx_x4_pcs_ctl_0_gen2[0]=(((r).rx_x4_pcs_ctl_0_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_RX_X4_PCS_CTL_0_GEN2r_CL91_FEC_MODEf_GET(r) ((((r).rx_x4_pcs_ctl_0_gen2[0]) >> 2) & 0x7)
#define BCMI_TSCF_XGXS_RX_X4_PCS_CTL_0_GEN2r_CL91_FEC_MODEf_SET(r,f) (r).rx_x4_pcs_ctl_0_gen2[0]=(((r).rx_x4_pcs_ctl_0_gen2[0] & ~((uint32_t)0x7 << 2)) | ((((uint32_t)f) & 0x7) << 2)) | (7 << (16 + 2))
#define BCMI_TSCF_XGXS_RX_X4_PCS_CTL_0_GEN2r_FEC_ENABLEf_GET(r) ((((r).rx_x4_pcs_ctl_0_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_PCS_CTL_0_GEN2r_FEC_ENABLEf_SET(r,f) (r).rx_x4_pcs_ctl_0_gen2[0]=(((r).rx_x4_pcs_ctl_0_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_RX_X4_PCS_CTL_0_GEN2r_LPI_ENABLEf_GET(r) (((r).rx_x4_pcs_ctl_0_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_PCS_CTL_0_GEN2r_LPI_ENABLEf_SET(r,f) (r).rx_x4_pcs_ctl_0_gen2[0]=(((r).rx_x4_pcs_ctl_0_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_X4_PCS_CTL_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_PCS_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_PCS_CTL_0_GEN2r,(_r._rx_x4_pcs_ctl_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_PCS_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_PCS_CTL_0_GEN2r,(_r._rx_x4_pcs_ctl_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_PCS_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_PCS_CTL_0_GEN2r,(_r._rx_x4_pcs_ctl_0_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_PCS_CTL_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_PCS_CTL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_pcs_ctl_0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_PCS_CTL_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_PCS_CTL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_pcs_ctl_0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_PCS_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_PCS_CTL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_pcs_ctl_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_PCS_CTL_0_GEN2r BCMI_TSCF_XGXS_RX_X4_PCS_CTL_0_GEN2r
#define RX_X4_PCS_CTL_0_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_PCS_CTL_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_PCS_CTL_0_GEN2r_t RX_X4_PCS_CTL_0_GEN2r_t;
#define RX_X4_PCS_CTL_0_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_PCS_CTL_0_GEN2r_CLR
#define RX_X4_PCS_CTL_0_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_PCS_CTL_0_GEN2r_SET
#define RX_X4_PCS_CTL_0_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_PCS_CTL_0_GEN2r_GET
#define RX_X4_PCS_CTL_0_GEN2r_DESCR_MODEf_GET BCMI_TSCF_XGXS_RX_X4_PCS_CTL_0_GEN2r_DESCR_MODEf_GET
#define RX_X4_PCS_CTL_0_GEN2r_DESCR_MODEf_SET BCMI_TSCF_XGXS_RX_X4_PCS_CTL_0_GEN2r_DESCR_MODEf_SET
#define RX_X4_PCS_CTL_0_GEN2r_DEC_TL_MODEf_GET BCMI_TSCF_XGXS_RX_X4_PCS_CTL_0_GEN2r_DEC_TL_MODEf_GET
#define RX_X4_PCS_CTL_0_GEN2r_DEC_TL_MODEf_SET BCMI_TSCF_XGXS_RX_X4_PCS_CTL_0_GEN2r_DEC_TL_MODEf_SET
#define RX_X4_PCS_CTL_0_GEN2r_DESKEW_MODEf_GET BCMI_TSCF_XGXS_RX_X4_PCS_CTL_0_GEN2r_DESKEW_MODEf_GET
#define RX_X4_PCS_CTL_0_GEN2r_DESKEW_MODEf_SET BCMI_TSCF_XGXS_RX_X4_PCS_CTL_0_GEN2r_DESKEW_MODEf_SET
#define RX_X4_PCS_CTL_0_GEN2r_DEC_FSM_MODEf_GET BCMI_TSCF_XGXS_RX_X4_PCS_CTL_0_GEN2r_DEC_FSM_MODEf_GET
#define RX_X4_PCS_CTL_0_GEN2r_DEC_FSM_MODEf_SET BCMI_TSCF_XGXS_RX_X4_PCS_CTL_0_GEN2r_DEC_FSM_MODEf_SET
#define RX_X4_PCS_CTL_0_GEN2r_BLOCK_NON_FC_BLK_TYPESf_GET BCMI_TSCF_XGXS_RX_X4_PCS_CTL_0_GEN2r_BLOCK_NON_FC_BLK_TYPESf_GET
#define RX_X4_PCS_CTL_0_GEN2r_BLOCK_NON_FC_BLK_TYPESf_SET BCMI_TSCF_XGXS_RX_X4_PCS_CTL_0_GEN2r_BLOCK_NON_FC_BLK_TYPESf_SET
#define RX_X4_PCS_CTL_0_GEN2r_CL91_FEC_MODEf_GET BCMI_TSCF_XGXS_RX_X4_PCS_CTL_0_GEN2r_CL91_FEC_MODEf_GET
#define RX_X4_PCS_CTL_0_GEN2r_CL91_FEC_MODEf_SET BCMI_TSCF_XGXS_RX_X4_PCS_CTL_0_GEN2r_CL91_FEC_MODEf_SET
#define RX_X4_PCS_CTL_0_GEN2r_FEC_ENABLEf_GET BCMI_TSCF_XGXS_RX_X4_PCS_CTL_0_GEN2r_FEC_ENABLEf_GET
#define RX_X4_PCS_CTL_0_GEN2r_FEC_ENABLEf_SET BCMI_TSCF_XGXS_RX_X4_PCS_CTL_0_GEN2r_FEC_ENABLEf_SET
#define RX_X4_PCS_CTL_0_GEN2r_LPI_ENABLEf_GET BCMI_TSCF_XGXS_RX_X4_PCS_CTL_0_GEN2r_LPI_ENABLEf_GET
#define RX_X4_PCS_CTL_0_GEN2r_LPI_ENABLEf_SET BCMI_TSCF_XGXS_RX_X4_PCS_CTL_0_GEN2r_LPI_ENABLEf_SET
#define READ_RX_X4_PCS_CTL_0_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_PCS_CTL_0_GEN2r
#define WRITE_RX_X4_PCS_CTL_0_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_PCS_CTL_0_GEN2r
#define MODIFY_RX_X4_PCS_CTL_0_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_PCS_CTL_0_GEN2r
#define READLN_RX_X4_PCS_CTL_0_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_PCS_CTL_0_GEN2r
#define WRITELN_RX_X4_PCS_CTL_0_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_PCS_CTL_0_GEN2r
#define WRITEALL_RX_X4_PCS_CTL_0_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_PCS_CTL_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_PCS_CTL_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_CL91_THR_GEN2
 * BLOCKS:   RX_X4_CONTROL0
 * REGADDR:  0xc131
 * DESC:     cl91 symbol error threshold count register
 * RESETVAL: 0x1a1 (417)
 * ACCESS:   R/W
 * FIELDS:
 *     SYMBOL_ERR_CNT_THRESHOLD When the number of symbol errors in a window of 8192 (or 128) code words exceed this value, all sync headers are corruptedIt is referred to as variable K in the IEEE spec.
 */
#define BCMI_TSCF_XGXS_RX_X4_CL91_THR_GEN2r (0x0000c131 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_CL91_THR_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL91_THR_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_CL91_THR_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_cl91_thr_gen2[1];
	uint32_t _rx_x4_cl91_thr_gen2;
} BCMI_TSCF_XGXS_RX_X4_CL91_THR_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_CL91_THR_GEN2r_CLR(r) (r).rx_x4_cl91_thr_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_CL91_THR_GEN2r_SET(r,d) (r).rx_x4_cl91_thr_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_CL91_THR_GEN2r_GET(r) (r).rx_x4_cl91_thr_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_CL91_THR_GEN2r_SYMBOL_ERR_CNT_THRESHOLDf_GET(r) (((r).rx_x4_cl91_thr_gen2[0]) & 0x1fff)
#define BCMI_TSCF_XGXS_RX_X4_CL91_THR_GEN2r_SYMBOL_ERR_CNT_THRESHOLDf_SET(r,f) (r).rx_x4_cl91_thr_gen2[0]=(((r).rx_x4_cl91_thr_gen2[0] & ~((uint32_t)0x1fff)) | (((uint32_t)f) & 0x1fff)) | (0x1fff << 16)

/*
 * These macros can be used to access RX_X4_CL91_THR_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_CL91_THR_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_THR_GEN2r,(_r._rx_x4_cl91_thr_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_CL91_THR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_THR_GEN2r,(_r._rx_x4_cl91_thr_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_CL91_THR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_THR_GEN2r,(_r._rx_x4_cl91_thr_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_CL91_THR_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_THR_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_thr_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_CL91_THR_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_THR_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_thr_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL91_THR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_THR_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl91_thr_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL91_THR_GEN2r BCMI_TSCF_XGXS_RX_X4_CL91_THR_GEN2r
#define RX_X4_CL91_THR_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_CL91_THR_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_CL91_THR_GEN2r_t RX_X4_CL91_THR_GEN2r_t;
#define RX_X4_CL91_THR_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_CL91_THR_GEN2r_CLR
#define RX_X4_CL91_THR_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_CL91_THR_GEN2r_SET
#define RX_X4_CL91_THR_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_CL91_THR_GEN2r_GET
#define RX_X4_CL91_THR_GEN2r_SYMBOL_ERR_CNT_THRESHOLDf_GET BCMI_TSCF_XGXS_RX_X4_CL91_THR_GEN2r_SYMBOL_ERR_CNT_THRESHOLDf_GET
#define RX_X4_CL91_THR_GEN2r_SYMBOL_ERR_CNT_THRESHOLDf_SET BCMI_TSCF_XGXS_RX_X4_CL91_THR_GEN2r_SYMBOL_ERR_CNT_THRESHOLDf_SET
#define READ_RX_X4_CL91_THR_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_CL91_THR_GEN2r
#define WRITE_RX_X4_CL91_THR_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_CL91_THR_GEN2r
#define MODIFY_RX_X4_CL91_THR_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_CL91_THR_GEN2r
#define READLN_RX_X4_CL91_THR_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_CL91_THR_GEN2r
#define WRITELN_RX_X4_CL91_THR_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_CL91_THR_GEN2r
#define WRITEALL_RX_X4_CL91_THR_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL91_THR_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_CL91_THR_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_CL91_TMR_GEN2
 * BLOCKS:   RX_X4_CONTROL0
 * REGADDR:  0xc132
 * DESC:     cl91 symbol error timer period register
 * RESETVAL: 0xfa0 (4000)
 * ACCESS:   R/W
 * FIELDS:
 *     SYMBOL_ERROR_TMR_PERIOD Counter value upto which 15us ticks are counted.It should be programmed between 60-75ms as per IEEE.
 */
#define BCMI_TSCF_XGXS_RX_X4_CL91_TMR_GEN2r (0x0000c132 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_CL91_TMR_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL91_TMR_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_CL91_TMR_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_cl91_tmr_gen2[1];
	uint32_t _rx_x4_cl91_tmr_gen2;
} BCMI_TSCF_XGXS_RX_X4_CL91_TMR_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_CL91_TMR_GEN2r_CLR(r) (r).rx_x4_cl91_tmr_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_CL91_TMR_GEN2r_SET(r,d) (r).rx_x4_cl91_tmr_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_CL91_TMR_GEN2r_GET(r) (r).rx_x4_cl91_tmr_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_CL91_TMR_GEN2r_SYMBOL_ERROR_TMR_PERIODf_GET(r) (((r).rx_x4_cl91_tmr_gen2[0]) & 0x1fff)
#define BCMI_TSCF_XGXS_RX_X4_CL91_TMR_GEN2r_SYMBOL_ERROR_TMR_PERIODf_SET(r,f) (r).rx_x4_cl91_tmr_gen2[0]=(((r).rx_x4_cl91_tmr_gen2[0] & ~((uint32_t)0x1fff)) | (((uint32_t)f) & 0x1fff)) | (0x1fff << 16)

/*
 * These macros can be used to access RX_X4_CL91_TMR_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_CL91_TMR_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_TMR_GEN2r,(_r._rx_x4_cl91_tmr_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_CL91_TMR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_TMR_GEN2r,(_r._rx_x4_cl91_tmr_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_CL91_TMR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_TMR_GEN2r,(_r._rx_x4_cl91_tmr_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_CL91_TMR_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_TMR_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_tmr_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_CL91_TMR_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_TMR_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_tmr_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL91_TMR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_TMR_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl91_tmr_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL91_TMR_GEN2r BCMI_TSCF_XGXS_RX_X4_CL91_TMR_GEN2r
#define RX_X4_CL91_TMR_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_CL91_TMR_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_CL91_TMR_GEN2r_t RX_X4_CL91_TMR_GEN2r_t;
#define RX_X4_CL91_TMR_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_CL91_TMR_GEN2r_CLR
#define RX_X4_CL91_TMR_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_CL91_TMR_GEN2r_SET
#define RX_X4_CL91_TMR_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_CL91_TMR_GEN2r_GET
#define RX_X4_CL91_TMR_GEN2r_SYMBOL_ERROR_TMR_PERIODf_GET BCMI_TSCF_XGXS_RX_X4_CL91_TMR_GEN2r_SYMBOL_ERROR_TMR_PERIODf_GET
#define RX_X4_CL91_TMR_GEN2r_SYMBOL_ERROR_TMR_PERIODf_SET BCMI_TSCF_XGXS_RX_X4_CL91_TMR_GEN2r_SYMBOL_ERROR_TMR_PERIODf_SET
#define READ_RX_X4_CL91_TMR_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_CL91_TMR_GEN2r
#define WRITE_RX_X4_CL91_TMR_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_CL91_TMR_GEN2r
#define MODIFY_RX_X4_CL91_TMR_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_CL91_TMR_GEN2r
#define READLN_RX_X4_CL91_TMR_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_CL91_TMR_GEN2r
#define WRITELN_RX_X4_CL91_TMR_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_CL91_TMR_GEN2r
#define WRITEALL_RX_X4_CL91_TMR_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL91_TMR_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_CL91_TMR_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_CL91_RX_CTL_0_GEN2
 * BLOCKS:   RX_X4_CONTROL0
 * REGADDR:  0xc133
 * DESC:     cl91 control register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL91_BLKSYNC_MODE 
 *     R_MERGE_MODE     
 *     CL91_CW_SCRAMBLE Indicates whether the CL91 codeword needs to be descrambled. Should be enabled for FC mode.
 *     R_TC_IN_MODE     Indicates whether CL91 is turned ON for the port or not.
 *     R_TC_MODE        
 *     FIVE_BIT_XOR_EN  1'b1 - XOR 4:0 with 12:8, 1'b0 - No XOR of the 5 bits
 *     R_TC_OUT_MODE    
 *     FEC_BYP_CORR_EN  1'b1 - Reed Solomon decoder performs error detection without error correction.1'b0 - Reed Solomon decoder also performs error correction.
 *     FEC_BYP_IND_EN   1'b1 - Disable error code word marking.1'b0 - Enable error code word marking.This bit shall have no effect if FEC bypass correction enable is set to 1.
 */
#define BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r (0x0000c133 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL91_RX_CTL_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_cl91_rx_ctl_0_gen2[1];
	uint32_t _rx_x4_cl91_rx_ctl_0_gen2;
} BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r_CLR(r) (r).rx_x4_cl91_rx_ctl_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r_SET(r,d) (r).rx_x4_cl91_rx_ctl_0_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r_GET(r) (r).rx_x4_cl91_rx_ctl_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r_FEC_BYP_IND_ENf_GET(r) ((((r).rx_x4_cl91_rx_ctl_0_gen2[0]) >> 14) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r_FEC_BYP_IND_ENf_SET(r,f) (r).rx_x4_cl91_rx_ctl_0_gen2[0]=(((r).rx_x4_cl91_rx_ctl_0_gen2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r_FEC_BYP_CORR_ENf_GET(r) ((((r).rx_x4_cl91_rx_ctl_0_gen2[0]) >> 13) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r_FEC_BYP_CORR_ENf_SET(r,f) (r).rx_x4_cl91_rx_ctl_0_gen2[0]=(((r).rx_x4_cl91_rx_ctl_0_gen2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r_R_TC_OUT_MODEf_GET(r) ((((r).rx_x4_cl91_rx_ctl_0_gen2[0]) >> 11) & 0x3)
#define BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r_R_TC_OUT_MODEf_SET(r,f) (r).rx_x4_cl91_rx_ctl_0_gen2[0]=(((r).rx_x4_cl91_rx_ctl_0_gen2[0] & ~((uint32_t)0x3 << 11)) | ((((uint32_t)f) & 0x3) << 11)) | (3 << (16 + 11))
#define BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r_FIVE_BIT_XOR_ENf_GET(r) ((((r).rx_x4_cl91_rx_ctl_0_gen2[0]) >> 10) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r_FIVE_BIT_XOR_ENf_SET(r,f) (r).rx_x4_cl91_rx_ctl_0_gen2[0]=(((r).rx_x4_cl91_rx_ctl_0_gen2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r_R_TC_MODEf_GET(r) ((((r).rx_x4_cl91_rx_ctl_0_gen2[0]) >> 8) & 0x3)
#define BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r_R_TC_MODEf_SET(r,f) (r).rx_x4_cl91_rx_ctl_0_gen2[0]=(((r).rx_x4_cl91_rx_ctl_0_gen2[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))
#define BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r_R_TC_IN_MODEf_GET(r) ((((r).rx_x4_cl91_rx_ctl_0_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r_R_TC_IN_MODEf_SET(r,f) (r).rx_x4_cl91_rx_ctl_0_gen2[0]=(((r).rx_x4_cl91_rx_ctl_0_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r_CL91_CW_SCRAMBLEf_GET(r) ((((r).rx_x4_cl91_rx_ctl_0_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r_CL91_CW_SCRAMBLEf_SET(r,f) (r).rx_x4_cl91_rx_ctl_0_gen2[0]=(((r).rx_x4_cl91_rx_ctl_0_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r_R_MERGE_MODEf_GET(r) ((((r).rx_x4_cl91_rx_ctl_0_gen2[0]) >> 3) & 0x7)
#define BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r_R_MERGE_MODEf_SET(r,f) (r).rx_x4_cl91_rx_ctl_0_gen2[0]=(((r).rx_x4_cl91_rx_ctl_0_gen2[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3)) | (7 << (16 + 3))
#define BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r_CL91_BLKSYNC_MODEf_GET(r) (((r).rx_x4_cl91_rx_ctl_0_gen2[0]) & 0x7)
#define BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r_CL91_BLKSYNC_MODEf_SET(r,f) (r).rx_x4_cl91_rx_ctl_0_gen2[0]=(((r).rx_x4_cl91_rx_ctl_0_gen2[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access RX_X4_CL91_RX_CTL_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_CL91_RX_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r,(_r._rx_x4_cl91_rx_ctl_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_CL91_RX_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r,(_r._rx_x4_cl91_rx_ctl_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_CL91_RX_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r,(_r._rx_x4_cl91_rx_ctl_0_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_CL91_RX_CTL_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_rx_ctl_0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_CL91_RX_CTL_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_rx_ctl_0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL91_RX_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl91_rx_ctl_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL91_RX_CTL_0_GEN2r BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r
#define RX_X4_CL91_RX_CTL_0_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r_t RX_X4_CL91_RX_CTL_0_GEN2r_t;
#define RX_X4_CL91_RX_CTL_0_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r_CLR
#define RX_X4_CL91_RX_CTL_0_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r_SET
#define RX_X4_CL91_RX_CTL_0_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r_GET
#define RX_X4_CL91_RX_CTL_0_GEN2r_FEC_BYP_IND_ENf_GET BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r_FEC_BYP_IND_ENf_GET
#define RX_X4_CL91_RX_CTL_0_GEN2r_FEC_BYP_IND_ENf_SET BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r_FEC_BYP_IND_ENf_SET
#define RX_X4_CL91_RX_CTL_0_GEN2r_FEC_BYP_CORR_ENf_GET BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r_FEC_BYP_CORR_ENf_GET
#define RX_X4_CL91_RX_CTL_0_GEN2r_FEC_BYP_CORR_ENf_SET BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r_FEC_BYP_CORR_ENf_SET
#define RX_X4_CL91_RX_CTL_0_GEN2r_R_TC_OUT_MODEf_GET BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r_R_TC_OUT_MODEf_GET
#define RX_X4_CL91_RX_CTL_0_GEN2r_R_TC_OUT_MODEf_SET BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r_R_TC_OUT_MODEf_SET
#define RX_X4_CL91_RX_CTL_0_GEN2r_FIVE_BIT_XOR_ENf_GET BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r_FIVE_BIT_XOR_ENf_GET
#define RX_X4_CL91_RX_CTL_0_GEN2r_FIVE_BIT_XOR_ENf_SET BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r_FIVE_BIT_XOR_ENf_SET
#define RX_X4_CL91_RX_CTL_0_GEN2r_R_TC_MODEf_GET BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r_R_TC_MODEf_GET
#define RX_X4_CL91_RX_CTL_0_GEN2r_R_TC_MODEf_SET BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r_R_TC_MODEf_SET
#define RX_X4_CL91_RX_CTL_0_GEN2r_R_TC_IN_MODEf_GET BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r_R_TC_IN_MODEf_GET
#define RX_X4_CL91_RX_CTL_0_GEN2r_R_TC_IN_MODEf_SET BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r_R_TC_IN_MODEf_SET
#define RX_X4_CL91_RX_CTL_0_GEN2r_CL91_CW_SCRAMBLEf_GET BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r_CL91_CW_SCRAMBLEf_GET
#define RX_X4_CL91_RX_CTL_0_GEN2r_CL91_CW_SCRAMBLEf_SET BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r_CL91_CW_SCRAMBLEf_SET
#define RX_X4_CL91_RX_CTL_0_GEN2r_R_MERGE_MODEf_GET BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r_R_MERGE_MODEf_GET
#define RX_X4_CL91_RX_CTL_0_GEN2r_R_MERGE_MODEf_SET BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r_R_MERGE_MODEf_SET
#define RX_X4_CL91_RX_CTL_0_GEN2r_CL91_BLKSYNC_MODEf_GET BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r_CL91_BLKSYNC_MODEf_GET
#define RX_X4_CL91_RX_CTL_0_GEN2r_CL91_BLKSYNC_MODEf_SET BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r_CL91_BLKSYNC_MODEf_SET
#define READ_RX_X4_CL91_RX_CTL_0_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_CL91_RX_CTL_0_GEN2r
#define WRITE_RX_X4_CL91_RX_CTL_0_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_CL91_RX_CTL_0_GEN2r
#define MODIFY_RX_X4_CL91_RX_CTL_0_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_CL91_RX_CTL_0_GEN2r
#define READLN_RX_X4_CL91_RX_CTL_0_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_CL91_RX_CTL_0_GEN2r
#define WRITELN_RX_X4_CL91_RX_CTL_0_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_CL91_RX_CTL_0_GEN2r
#define WRITEALL_RX_X4_CL91_RX_CTL_0_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL91_RX_CTL_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_CL91_RX_CTL_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_DEC_CTL_0_GEN2
 * BLOCKS:   RX_X4_CONTROL0
 * REGADDR:  0xc134
 * DESC:     Decoder control 0 register
 * RESETVAL: 0x2270 (8816)
 * ACCESS:   R/W
 * FIELDS:
 *     CL49_RX_RF_ENABLE If this bit is a one, RFs are passed to the RS layer from the PCS.If this bit is a zero, RFs are replaced by IDLEs which are then passedto the RS layer.For CL49 only.
 *     CL49_RX_LF_ENABLE If this bit is a one, LFs are passed to the RS layer from the PCS.If this bit is a zero, LFs are replaced by IDLEs which are then passedto the RS layer.For CL49 only.
 *     CL49_RX_LI_ENABLE If this bit is a one, LIs (Link Interrupt) are passed thru to the PCS.If this bit is a zero, LIs (Link Interrupt) are replaced by IDLEs which are then passedto the PCS.For CL49 only.
 *     DIS_SCRAMBLER    Disable the RX scrambler
 *     DISABLE_CL49_BERMON Disable cl49 BER monitor state machine1 = Disable bermon fsm, force BER_MT_INIT state0 = Enable (default)
 *     HG2_CODEC        Enables HG2 extensions support for PCSSet this bit to enable HG2 messaging
 *     HG2_ENABLE       Enables HG2 support for PCS
 *     HG2_MESSAGE_INVALID_CODE_ENABLE Enables HG2 invalid message code support.
 *     R_TEST_MODE_CFG  Test Mode enable for both CL49 and CL82
 *     BYPASS_CL49RXSM  Bypass cl49 receive state machine1 = Bypass cl49 rxsm :- force RX_INIT state- pass the data from the table look-up decoder to the output0 = normal mode
 */
#define BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r (0x0000c134 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_DEC_CTL_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_dec_ctl_0_gen2[1];
	uint32_t _rx_x4_dec_ctl_0_gen2;
} BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r_CLR(r) (r).rx_x4_dec_ctl_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r_SET(r,d) (r).rx_x4_dec_ctl_0_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r_GET(r) (r).rx_x4_dec_ctl_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r_BYPASS_CL49RXSMf_GET(r) ((((r).rx_x4_dec_ctl_0_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r_BYPASS_CL49RXSMf_SET(r,f) (r).rx_x4_dec_ctl_0_gen2[0]=(((r).rx_x4_dec_ctl_0_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r_R_TEST_MODE_CFGf_GET(r) ((((r).rx_x4_dec_ctl_0_gen2[0]) >> 14) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r_R_TEST_MODE_CFGf_SET(r,f) (r).rx_x4_dec_ctl_0_gen2[0]=(((r).rx_x4_dec_ctl_0_gen2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r_HG2_MESSAGE_INVALID_CODE_ENABLEf_GET(r) ((((r).rx_x4_dec_ctl_0_gen2[0]) >> 13) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r_HG2_MESSAGE_INVALID_CODE_ENABLEf_SET(r,f) (r).rx_x4_dec_ctl_0_gen2[0]=(((r).rx_x4_dec_ctl_0_gen2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r_HG2_ENABLEf_GET(r) ((((r).rx_x4_dec_ctl_0_gen2[0]) >> 12) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r_HG2_ENABLEf_SET(r,f) (r).rx_x4_dec_ctl_0_gen2[0]=(((r).rx_x4_dec_ctl_0_gen2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r_HG2_CODECf_GET(r) ((((r).rx_x4_dec_ctl_0_gen2[0]) >> 9) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r_HG2_CODECf_SET(r,f) (r).rx_x4_dec_ctl_0_gen2[0]=(((r).rx_x4_dec_ctl_0_gen2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r_DISABLE_CL49_BERMONf_GET(r) ((((r).rx_x4_dec_ctl_0_gen2[0]) >> 8) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r_DISABLE_CL49_BERMONf_SET(r,f) (r).rx_x4_dec_ctl_0_gen2[0]=(((r).rx_x4_dec_ctl_0_gen2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r_DIS_SCRAMBLERf_GET(r) ((((r).rx_x4_dec_ctl_0_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r_DIS_SCRAMBLERf_SET(r,f) (r).rx_x4_dec_ctl_0_gen2[0]=(((r).rx_x4_dec_ctl_0_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r_CL49_RX_LI_ENABLEf_GET(r) ((((r).rx_x4_dec_ctl_0_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r_CL49_RX_LI_ENABLEf_SET(r,f) (r).rx_x4_dec_ctl_0_gen2[0]=(((r).rx_x4_dec_ctl_0_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r_CL49_RX_LF_ENABLEf_GET(r) ((((r).rx_x4_dec_ctl_0_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r_CL49_RX_LF_ENABLEf_SET(r,f) (r).rx_x4_dec_ctl_0_gen2[0]=(((r).rx_x4_dec_ctl_0_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r_CL49_RX_RF_ENABLEf_GET(r) ((((r).rx_x4_dec_ctl_0_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r_CL49_RX_RF_ENABLEf_SET(r,f) (r).rx_x4_dec_ctl_0_gen2[0]=(((r).rx_x4_dec_ctl_0_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))

/*
 * These macros can be used to access RX_X4_DEC_CTL_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_DEC_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r,(_r._rx_x4_dec_ctl_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_DEC_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r,(_r._rx_x4_dec_ctl_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_DEC_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r,(_r._rx_x4_dec_ctl_0_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_DEC_CTL_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_dec_ctl_0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_DEC_CTL_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_dec_ctl_0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_DEC_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_dec_ctl_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_DEC_CTL_0_GEN2r BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r
#define RX_X4_DEC_CTL_0_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r_t RX_X4_DEC_CTL_0_GEN2r_t;
#define RX_X4_DEC_CTL_0_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r_CLR
#define RX_X4_DEC_CTL_0_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r_SET
#define RX_X4_DEC_CTL_0_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r_GET
#define RX_X4_DEC_CTL_0_GEN2r_BYPASS_CL49RXSMf_GET BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r_BYPASS_CL49RXSMf_GET
#define RX_X4_DEC_CTL_0_GEN2r_BYPASS_CL49RXSMf_SET BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r_BYPASS_CL49RXSMf_SET
#define RX_X4_DEC_CTL_0_GEN2r_R_TEST_MODE_CFGf_GET BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r_R_TEST_MODE_CFGf_GET
#define RX_X4_DEC_CTL_0_GEN2r_R_TEST_MODE_CFGf_SET BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r_R_TEST_MODE_CFGf_SET
#define RX_X4_DEC_CTL_0_GEN2r_HG2_MESSAGE_INVALID_CODE_ENABLEf_GET BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r_HG2_MESSAGE_INVALID_CODE_ENABLEf_GET
#define RX_X4_DEC_CTL_0_GEN2r_HG2_MESSAGE_INVALID_CODE_ENABLEf_SET BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r_HG2_MESSAGE_INVALID_CODE_ENABLEf_SET
#define RX_X4_DEC_CTL_0_GEN2r_HG2_ENABLEf_GET BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r_HG2_ENABLEf_GET
#define RX_X4_DEC_CTL_0_GEN2r_HG2_ENABLEf_SET BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r_HG2_ENABLEf_SET
#define RX_X4_DEC_CTL_0_GEN2r_HG2_CODECf_GET BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r_HG2_CODECf_GET
#define RX_X4_DEC_CTL_0_GEN2r_HG2_CODECf_SET BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r_HG2_CODECf_SET
#define RX_X4_DEC_CTL_0_GEN2r_DISABLE_CL49_BERMONf_GET BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r_DISABLE_CL49_BERMONf_GET
#define RX_X4_DEC_CTL_0_GEN2r_DISABLE_CL49_BERMONf_SET BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r_DISABLE_CL49_BERMONf_SET
#define RX_X4_DEC_CTL_0_GEN2r_DIS_SCRAMBLERf_GET BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r_DIS_SCRAMBLERf_GET
#define RX_X4_DEC_CTL_0_GEN2r_DIS_SCRAMBLERf_SET BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r_DIS_SCRAMBLERf_SET
#define RX_X4_DEC_CTL_0_GEN2r_CL49_RX_LI_ENABLEf_GET BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r_CL49_RX_LI_ENABLEf_GET
#define RX_X4_DEC_CTL_0_GEN2r_CL49_RX_LI_ENABLEf_SET BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r_CL49_RX_LI_ENABLEf_SET
#define RX_X4_DEC_CTL_0_GEN2r_CL49_RX_LF_ENABLEf_GET BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r_CL49_RX_LF_ENABLEf_GET
#define RX_X4_DEC_CTL_0_GEN2r_CL49_RX_LF_ENABLEf_SET BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r_CL49_RX_LF_ENABLEf_SET
#define RX_X4_DEC_CTL_0_GEN2r_CL49_RX_RF_ENABLEf_GET BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r_CL49_RX_RF_ENABLEf_GET
#define RX_X4_DEC_CTL_0_GEN2r_CL49_RX_RF_ENABLEf_SET BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r_CL49_RX_RF_ENABLEf_SET
#define READ_RX_X4_DEC_CTL_0_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_DEC_CTL_0_GEN2r
#define WRITE_RX_X4_DEC_CTL_0_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_DEC_CTL_0_GEN2r
#define MODIFY_RX_X4_DEC_CTL_0_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_DEC_CTL_0_GEN2r
#define READLN_RX_X4_DEC_CTL_0_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_DEC_CTL_0_GEN2r
#define WRITELN_RX_X4_DEC_CTL_0_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_DEC_CTL_0_GEN2r
#define WRITEALL_RX_X4_DEC_CTL_0_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_DEC_CTL_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_DEC_CTL_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_BLKSYNC_CFG_GEN2
 * BLOCKS:   RX_X4_CONTROL0
 * REGADDR:  0xc135
 * DESC:     Block Sync Configuration register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BS_BTMX_MODE     Bit-mux mode: Indicates the format of incoming data on a physical lane.
 *     BS_DIST_MODE     Block to lane distribution mode.BS_DIST_MODE_5_LANE_TDM - 5 lane TDM. Each block distributed in turn over output pseudo-logical lanes 0-4BS_DIST_MODE_2_LANE_TDM_2_VLANE - 2 lane TDM for 2 virtual lanes.Virtual Lane 0 output is ping-ponged over pseudo-logical lanes 0,2.Virtual Lane 1 output is ping-ponged over pseudo-logical lanes 1,3.BS_DIST_MODE_2_LANE_TDM_1_VLANE - 2 lane TDM for 1 virtual lane.Virtual Lane 0 output is ping-ponged over pseudo-logical lanes 0,2.BS_DIST_MODE_NO_TDM - No TDM. Virtual Lane output is sent directly to corresponding pseudo-logical lane.
 *     BS_SYNC_EN       Enable block synchronization: If enabled, block sync sm will attempt to slip data until sync is achieved.
 *     BS_SM_SYNC_MODE  Block Sync Mode: When bs_sync_en==1, this bit indicates if cl49 or cl82 state machine operation is used.1'b0 - Clause 821'b1 - Clause 49
 *     BLK_LOCK_ON_CTRL If this bit is set the block lock for 64/66b modes will be achieved only on control sync headers (2'b01).Else, block lock can be achieved on both control or data sync headers.
 */
#define BCMI_TSCF_XGXS_RX_X4_BLKSYNC_CFG_GEN2r (0x0000c135 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_BLKSYNC_CFG_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_BLKSYNC_CFG_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_BLKSYNC_CFG_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_blksync_cfg_gen2[1];
	uint32_t _rx_x4_blksync_cfg_gen2;
} BCMI_TSCF_XGXS_RX_X4_BLKSYNC_CFG_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_BLKSYNC_CFG_GEN2r_CLR(r) (r).rx_x4_blksync_cfg_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_BLKSYNC_CFG_GEN2r_SET(r,d) (r).rx_x4_blksync_cfg_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_BLKSYNC_CFG_GEN2r_GET(r) (r).rx_x4_blksync_cfg_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_BLKSYNC_CFG_GEN2r_BLK_LOCK_ON_CTRLf_GET(r) ((((r).rx_x4_blksync_cfg_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_BLKSYNC_CFG_GEN2r_BLK_LOCK_ON_CTRLf_SET(r,f) (r).rx_x4_blksync_cfg_gen2[0]=(((r).rx_x4_blksync_cfg_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_RX_X4_BLKSYNC_CFG_GEN2r_BS_SM_SYNC_MODEf_GET(r) ((((r).rx_x4_blksync_cfg_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_BLKSYNC_CFG_GEN2r_BS_SM_SYNC_MODEf_SET(r,f) (r).rx_x4_blksync_cfg_gen2[0]=(((r).rx_x4_blksync_cfg_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_RX_X4_BLKSYNC_CFG_GEN2r_BS_SYNC_ENf_GET(r) ((((r).rx_x4_blksync_cfg_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_BLKSYNC_CFG_GEN2r_BS_SYNC_ENf_SET(r,f) (r).rx_x4_blksync_cfg_gen2[0]=(((r).rx_x4_blksync_cfg_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_RX_X4_BLKSYNC_CFG_GEN2r_BS_DIST_MODEf_GET(r) ((((r).rx_x4_blksync_cfg_gen2[0]) >> 2) & 0x3)
#define BCMI_TSCF_XGXS_RX_X4_BLKSYNC_CFG_GEN2r_BS_DIST_MODEf_SET(r,f) (r).rx_x4_blksync_cfg_gen2[0]=(((r).rx_x4_blksync_cfg_gen2[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2)) | (3 << (16 + 2))
#define BCMI_TSCF_XGXS_RX_X4_BLKSYNC_CFG_GEN2r_BS_BTMX_MODEf_GET(r) (((r).rx_x4_blksync_cfg_gen2[0]) & 0x3)
#define BCMI_TSCF_XGXS_RX_X4_BLKSYNC_CFG_GEN2r_BS_BTMX_MODEf_SET(r,f) (r).rx_x4_blksync_cfg_gen2[0]=(((r).rx_x4_blksync_cfg_gen2[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access RX_X4_BLKSYNC_CFG_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_BLKSYNC_CFG_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_BLKSYNC_CFG_GEN2r,(_r._rx_x4_blksync_cfg_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_BLKSYNC_CFG_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_BLKSYNC_CFG_GEN2r,(_r._rx_x4_blksync_cfg_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_BLKSYNC_CFG_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_BLKSYNC_CFG_GEN2r,(_r._rx_x4_blksync_cfg_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_BLKSYNC_CFG_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_BLKSYNC_CFG_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_blksync_cfg_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_BLKSYNC_CFG_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_BLKSYNC_CFG_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_blksync_cfg_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_BLKSYNC_CFG_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_BLKSYNC_CFG_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_blksync_cfg_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_BLKSYNC_CFG_GEN2r BCMI_TSCF_XGXS_RX_X4_BLKSYNC_CFG_GEN2r
#define RX_X4_BLKSYNC_CFG_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_BLKSYNC_CFG_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_BLKSYNC_CFG_GEN2r_t RX_X4_BLKSYNC_CFG_GEN2r_t;
#define RX_X4_BLKSYNC_CFG_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_BLKSYNC_CFG_GEN2r_CLR
#define RX_X4_BLKSYNC_CFG_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_BLKSYNC_CFG_GEN2r_SET
#define RX_X4_BLKSYNC_CFG_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_BLKSYNC_CFG_GEN2r_GET
#define RX_X4_BLKSYNC_CFG_GEN2r_BLK_LOCK_ON_CTRLf_GET BCMI_TSCF_XGXS_RX_X4_BLKSYNC_CFG_GEN2r_BLK_LOCK_ON_CTRLf_GET
#define RX_X4_BLKSYNC_CFG_GEN2r_BLK_LOCK_ON_CTRLf_SET BCMI_TSCF_XGXS_RX_X4_BLKSYNC_CFG_GEN2r_BLK_LOCK_ON_CTRLf_SET
#define RX_X4_BLKSYNC_CFG_GEN2r_BS_SM_SYNC_MODEf_GET BCMI_TSCF_XGXS_RX_X4_BLKSYNC_CFG_GEN2r_BS_SM_SYNC_MODEf_GET
#define RX_X4_BLKSYNC_CFG_GEN2r_BS_SM_SYNC_MODEf_SET BCMI_TSCF_XGXS_RX_X4_BLKSYNC_CFG_GEN2r_BS_SM_SYNC_MODEf_SET
#define RX_X4_BLKSYNC_CFG_GEN2r_BS_SYNC_ENf_GET BCMI_TSCF_XGXS_RX_X4_BLKSYNC_CFG_GEN2r_BS_SYNC_ENf_GET
#define RX_X4_BLKSYNC_CFG_GEN2r_BS_SYNC_ENf_SET BCMI_TSCF_XGXS_RX_X4_BLKSYNC_CFG_GEN2r_BS_SYNC_ENf_SET
#define RX_X4_BLKSYNC_CFG_GEN2r_BS_DIST_MODEf_GET BCMI_TSCF_XGXS_RX_X4_BLKSYNC_CFG_GEN2r_BS_DIST_MODEf_GET
#define RX_X4_BLKSYNC_CFG_GEN2r_BS_DIST_MODEf_SET BCMI_TSCF_XGXS_RX_X4_BLKSYNC_CFG_GEN2r_BS_DIST_MODEf_SET
#define RX_X4_BLKSYNC_CFG_GEN2r_BS_BTMX_MODEf_GET BCMI_TSCF_XGXS_RX_X4_BLKSYNC_CFG_GEN2r_BS_BTMX_MODEf_GET
#define RX_X4_BLKSYNC_CFG_GEN2r_BS_BTMX_MODEf_SET BCMI_TSCF_XGXS_RX_X4_BLKSYNC_CFG_GEN2r_BS_BTMX_MODEf_SET
#define READ_RX_X4_BLKSYNC_CFG_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_BLKSYNC_CFG_GEN2r
#define WRITE_RX_X4_BLKSYNC_CFG_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_BLKSYNC_CFG_GEN2r
#define MODIFY_RX_X4_BLKSYNC_CFG_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_BLKSYNC_CFG_GEN2r
#define READLN_RX_X4_BLKSYNC_CFG_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_BLKSYNC_CFG_GEN2r
#define WRITELN_RX_X4_BLKSYNC_CFG_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_BLKSYNC_CFG_GEN2r
#define WRITEALL_RX_X4_BLKSYNC_CFG_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_BLKSYNC_CFG_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_BLKSYNC_CFG_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_PMA_CTL_0_GEN2
 * BLOCKS:   RX_X4_CONTROL0
 * REGADDR:  0xc137
 * DESC:     pma_control_0 register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RSTB_LANE        Low activer per lane reset for RXP
 */
#define BCMI_TSCF_XGXS_RX_X4_PMA_CTL_0_GEN2r (0x0000c137 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_PMA_CTL_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_PMA_CTL_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_PMA_CTL_0_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_pma_ctl_0_gen2[1];
	uint32_t _rx_x4_pma_ctl_0_gen2;
} BCMI_TSCF_XGXS_RX_X4_PMA_CTL_0_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_PMA_CTL_0_GEN2r_CLR(r) (r).rx_x4_pma_ctl_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_PMA_CTL_0_GEN2r_SET(r,d) (r).rx_x4_pma_ctl_0_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_PMA_CTL_0_GEN2r_GET(r) (r).rx_x4_pma_ctl_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_PMA_CTL_0_GEN2r_RSTB_LANEf_GET(r) (((r).rx_x4_pma_ctl_0_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_PMA_CTL_0_GEN2r_RSTB_LANEf_SET(r,f) (r).rx_x4_pma_ctl_0_gen2[0]=(((r).rx_x4_pma_ctl_0_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_X4_PMA_CTL_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_PMA_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_PMA_CTL_0_GEN2r,(_r._rx_x4_pma_ctl_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_PMA_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_PMA_CTL_0_GEN2r,(_r._rx_x4_pma_ctl_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_PMA_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_PMA_CTL_0_GEN2r,(_r._rx_x4_pma_ctl_0_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_PMA_CTL_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_PMA_CTL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_pma_ctl_0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_PMA_CTL_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_PMA_CTL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_pma_ctl_0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_PMA_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_PMA_CTL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_pma_ctl_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_PMA_CTL_0_GEN2r BCMI_TSCF_XGXS_RX_X4_PMA_CTL_0_GEN2r
#define RX_X4_PMA_CTL_0_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_PMA_CTL_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_PMA_CTL_0_GEN2r_t RX_X4_PMA_CTL_0_GEN2r_t;
#define RX_X4_PMA_CTL_0_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_PMA_CTL_0_GEN2r_CLR
#define RX_X4_PMA_CTL_0_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_PMA_CTL_0_GEN2r_SET
#define RX_X4_PMA_CTL_0_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_PMA_CTL_0_GEN2r_GET
#define RX_X4_PMA_CTL_0_GEN2r_RSTB_LANEf_GET BCMI_TSCF_XGXS_RX_X4_PMA_CTL_0_GEN2r_RSTB_LANEf_GET
#define RX_X4_PMA_CTL_0_GEN2r_RSTB_LANEf_SET BCMI_TSCF_XGXS_RX_X4_PMA_CTL_0_GEN2r_RSTB_LANEf_SET
#define READ_RX_X4_PMA_CTL_0_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_PMA_CTL_0_GEN2r
#define WRITE_RX_X4_PMA_CTL_0_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_PMA_CTL_0_GEN2r
#define MODIFY_RX_X4_PMA_CTL_0_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_PMA_CTL_0_GEN2r
#define READLN_RX_X4_PMA_CTL_0_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_PMA_CTL_0_GEN2r
#define WRITELN_RX_X4_PMA_CTL_0_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_PMA_CTL_0_GEN2r
#define WRITEALL_RX_X4_PMA_CTL_0_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_PMA_CTL_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_PMA_CTL_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_LNK_CTL_GEN2
 * BLOCKS:   RX_X4_CONTROL0
 * REGADDR:  0xc139
 * DESC:     Link status control
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LATCH_LINKDOWN_ENABLE Per port signal1'b1 - If the link status transitions from UP (1) to DOWN (0), this bit maintains the DOWN (0) value of the link status until the SW clears this bit.1'b0 - The link status information is passed directly from the PCS to the MAC and status registers without modification
 */
#define BCMI_TSCF_XGXS_RX_X4_LNK_CTL_GEN2r (0x0000c139 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_LNK_CTL_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_LNK_CTL_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_LNK_CTL_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_lnk_ctl_gen2[1];
	uint32_t _rx_x4_lnk_ctl_gen2;
} BCMI_TSCF_XGXS_RX_X4_LNK_CTL_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_LNK_CTL_GEN2r_CLR(r) (r).rx_x4_lnk_ctl_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_LNK_CTL_GEN2r_SET(r,d) (r).rx_x4_lnk_ctl_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_LNK_CTL_GEN2r_GET(r) (r).rx_x4_lnk_ctl_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_LNK_CTL_GEN2r_LATCH_LINKDOWN_ENABLEf_GET(r) (((r).rx_x4_lnk_ctl_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_LNK_CTL_GEN2r_LATCH_LINKDOWN_ENABLEf_SET(r,f) (r).rx_x4_lnk_ctl_gen2[0]=(((r).rx_x4_lnk_ctl_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_X4_LNK_CTL_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_LNK_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_LNK_CTL_GEN2r,(_r._rx_x4_lnk_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_LNK_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_LNK_CTL_GEN2r,(_r._rx_x4_lnk_ctl_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_LNK_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_LNK_CTL_GEN2r,(_r._rx_x4_lnk_ctl_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_LNK_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_LNK_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_lnk_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_LNK_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_LNK_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_lnk_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_LNK_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_LNK_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_lnk_ctl_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_LNK_CTL_GEN2r BCMI_TSCF_XGXS_RX_X4_LNK_CTL_GEN2r
#define RX_X4_LNK_CTL_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_LNK_CTL_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_LNK_CTL_GEN2r_t RX_X4_LNK_CTL_GEN2r_t;
#define RX_X4_LNK_CTL_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_LNK_CTL_GEN2r_CLR
#define RX_X4_LNK_CTL_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_LNK_CTL_GEN2r_SET
#define RX_X4_LNK_CTL_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_LNK_CTL_GEN2r_GET
#define RX_X4_LNK_CTL_GEN2r_LATCH_LINKDOWN_ENABLEf_GET BCMI_TSCF_XGXS_RX_X4_LNK_CTL_GEN2r_LATCH_LINKDOWN_ENABLEf_GET
#define RX_X4_LNK_CTL_GEN2r_LATCH_LINKDOWN_ENABLEf_SET BCMI_TSCF_XGXS_RX_X4_LNK_CTL_GEN2r_LATCH_LINKDOWN_ENABLEf_SET
#define READ_RX_X4_LNK_CTL_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_LNK_CTL_GEN2r
#define WRITE_RX_X4_LNK_CTL_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_LNK_CTL_GEN2r
#define MODIFY_RX_X4_LNK_CTL_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_LNK_CTL_GEN2r
#define READLN_RX_X4_LNK_CTL_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_LNK_CTL_GEN2r
#define WRITELN_RX_X4_LNK_CTL_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_LNK_CTL_GEN2r
#define WRITEALL_RX_X4_LNK_CTL_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_LNK_CTL_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_LNK_CTL_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_CL36_CTL_GEN2
 * BLOCKS:   RX_X4_CONTROL0
 * REGADDR:  0xc13c
 * DESC:     CL36 RX control
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL36RX_EN        Per logical lane: cl36 RX pipeline: 1=enabled , 0=disabled
 *     CL36RX_LPI_EN    If enabled (1), LPIs are recognized by CL36 RX decoder
 *     CL36RX_DISABLE_CARRIER_EXTEND Disable carrier extensions
 *     CL36RX_FORCE_COMMA_ALIGN_ENABLE Force comma alignment function, and over-ride CL36 Synchronization function
 *     CL36RX_BER_EN    Per logical lane: cl36 RX BER count: 1=enable , 0=disable
 */
#define BCMI_TSCF_XGXS_RX_X4_CL36_CTL_GEN2r (0x0000c13c | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_CL36_CTL_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL36_CTL_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_CL36_CTL_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_cl36_ctl_gen2[1];
	uint32_t _rx_x4_cl36_ctl_gen2;
} BCMI_TSCF_XGXS_RX_X4_CL36_CTL_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_CL36_CTL_GEN2r_CLR(r) (r).rx_x4_cl36_ctl_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_CL36_CTL_GEN2r_SET(r,d) (r).rx_x4_cl36_ctl_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_CL36_CTL_GEN2r_GET(r) (r).rx_x4_cl36_ctl_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_CL36_CTL_GEN2r_CL36RX_BER_ENf_GET(r) ((((r).rx_x4_cl36_ctl_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_CL36_CTL_GEN2r_CL36RX_BER_ENf_SET(r,f) (r).rx_x4_cl36_ctl_gen2[0]=(((r).rx_x4_cl36_ctl_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_RX_X4_CL36_CTL_GEN2r_CL36RX_FORCE_COMMA_ALIGN_ENABLEf_GET(r) ((((r).rx_x4_cl36_ctl_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_CL36_CTL_GEN2r_CL36RX_FORCE_COMMA_ALIGN_ENABLEf_SET(r,f) (r).rx_x4_cl36_ctl_gen2[0]=(((r).rx_x4_cl36_ctl_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_RX_X4_CL36_CTL_GEN2r_CL36RX_DISABLE_CARRIER_EXTENDf_GET(r) ((((r).rx_x4_cl36_ctl_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_CL36_CTL_GEN2r_CL36RX_DISABLE_CARRIER_EXTENDf_SET(r,f) (r).rx_x4_cl36_ctl_gen2[0]=(((r).rx_x4_cl36_ctl_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_RX_X4_CL36_CTL_GEN2r_CL36RX_LPI_ENf_GET(r) ((((r).rx_x4_cl36_ctl_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_CL36_CTL_GEN2r_CL36RX_LPI_ENf_SET(r,f) (r).rx_x4_cl36_ctl_gen2[0]=(((r).rx_x4_cl36_ctl_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_RX_X4_CL36_CTL_GEN2r_CL36RX_ENf_GET(r) (((r).rx_x4_cl36_ctl_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_CL36_CTL_GEN2r_CL36RX_ENf_SET(r,f) (r).rx_x4_cl36_ctl_gen2[0]=(((r).rx_x4_cl36_ctl_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_X4_CL36_CTL_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_CL36_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL36_CTL_GEN2r,(_r._rx_x4_cl36_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_CL36_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL36_CTL_GEN2r,(_r._rx_x4_cl36_ctl_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_CL36_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL36_CTL_GEN2r,(_r._rx_x4_cl36_ctl_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_CL36_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL36_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl36_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_CL36_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL36_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl36_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL36_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL36_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl36_ctl_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL36_CTL_GEN2r BCMI_TSCF_XGXS_RX_X4_CL36_CTL_GEN2r
#define RX_X4_CL36_CTL_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_CL36_CTL_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_CL36_CTL_GEN2r_t RX_X4_CL36_CTL_GEN2r_t;
#define RX_X4_CL36_CTL_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_CL36_CTL_GEN2r_CLR
#define RX_X4_CL36_CTL_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_CL36_CTL_GEN2r_SET
#define RX_X4_CL36_CTL_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_CL36_CTL_GEN2r_GET
#define RX_X4_CL36_CTL_GEN2r_CL36RX_BER_ENf_GET BCMI_TSCF_XGXS_RX_X4_CL36_CTL_GEN2r_CL36RX_BER_ENf_GET
#define RX_X4_CL36_CTL_GEN2r_CL36RX_BER_ENf_SET BCMI_TSCF_XGXS_RX_X4_CL36_CTL_GEN2r_CL36RX_BER_ENf_SET
#define RX_X4_CL36_CTL_GEN2r_CL36RX_FORCE_COMMA_ALIGN_ENABLEf_GET BCMI_TSCF_XGXS_RX_X4_CL36_CTL_GEN2r_CL36RX_FORCE_COMMA_ALIGN_ENABLEf_GET
#define RX_X4_CL36_CTL_GEN2r_CL36RX_FORCE_COMMA_ALIGN_ENABLEf_SET BCMI_TSCF_XGXS_RX_X4_CL36_CTL_GEN2r_CL36RX_FORCE_COMMA_ALIGN_ENABLEf_SET
#define RX_X4_CL36_CTL_GEN2r_CL36RX_DISABLE_CARRIER_EXTENDf_GET BCMI_TSCF_XGXS_RX_X4_CL36_CTL_GEN2r_CL36RX_DISABLE_CARRIER_EXTENDf_GET
#define RX_X4_CL36_CTL_GEN2r_CL36RX_DISABLE_CARRIER_EXTENDf_SET BCMI_TSCF_XGXS_RX_X4_CL36_CTL_GEN2r_CL36RX_DISABLE_CARRIER_EXTENDf_SET
#define RX_X4_CL36_CTL_GEN2r_CL36RX_LPI_ENf_GET BCMI_TSCF_XGXS_RX_X4_CL36_CTL_GEN2r_CL36RX_LPI_ENf_GET
#define RX_X4_CL36_CTL_GEN2r_CL36RX_LPI_ENf_SET BCMI_TSCF_XGXS_RX_X4_CL36_CTL_GEN2r_CL36RX_LPI_ENf_SET
#define RX_X4_CL36_CTL_GEN2r_CL36RX_ENf_GET BCMI_TSCF_XGXS_RX_X4_CL36_CTL_GEN2r_CL36RX_ENf_GET
#define RX_X4_CL36_CTL_GEN2r_CL36RX_ENf_SET BCMI_TSCF_XGXS_RX_X4_CL36_CTL_GEN2r_CL36RX_ENf_SET
#define READ_RX_X4_CL36_CTL_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_CL36_CTL_GEN2r
#define WRITE_RX_X4_CL36_CTL_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_CL36_CTL_GEN2r
#define MODIFY_RX_X4_CL36_CTL_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_CL36_CTL_GEN2r
#define READLN_RX_X4_CL36_CTL_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_CL36_CTL_GEN2r
#define WRITELN_RX_X4_CL36_CTL_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_CL36_CTL_GEN2r
#define WRITEALL_RX_X4_CL36_CTL_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL36_CTL_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_CL36_CTL_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_SYNCE_FRACTIONAL_DIV_GEN2
 * BLOCKS:   RX_X4_CONTROL0
 * REGADDR:  0xc13d
 * DESC:     SyncE fractional divisor configuration
 * RESETVAL: 0x14a0 (5280)
 * ACCESS:   R/W
 * FIELDS:
 *     SYNCE_FRACTIONAL_DIVSOR_CFG Per physical lane:Program this register for different divider as the following table:f_cdr(Hz)      config divisor[15:0]  resulted fractional divider :Eagle         515,625,000     5280                  20.625546,875,000     5600                  21.875Falcon        644,531,250     6600                  25.78125683,593,750     7000                  27.34375515,625,000     5280                  20.625257,812,500     2640                  10.3125156,250,000     1600                  6.25515,625,000     5280                  20.625resulted fractional divider  =       config division[15:0]/256
 */
#define BCMI_TSCF_XGXS_RX_X4_SYNCE_FRACTIONAL_DIV_GEN2r (0x0000c13d | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_SYNCE_FRACTIONAL_DIV_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_SYNCE_FRACTIONAL_DIV_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_SYNCE_FRACTIONAL_DIV_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_synce_fractional_div_gen2[1];
	uint32_t _rx_x4_synce_fractional_div_gen2;
} BCMI_TSCF_XGXS_RX_X4_SYNCE_FRACTIONAL_DIV_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_SYNCE_FRACTIONAL_DIV_GEN2r_CLR(r) (r).rx_x4_synce_fractional_div_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_SYNCE_FRACTIONAL_DIV_GEN2r_SET(r,d) (r).rx_x4_synce_fractional_div_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_SYNCE_FRACTIONAL_DIV_GEN2r_GET(r) (r).rx_x4_synce_fractional_div_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_SYNCE_FRACTIONAL_DIV_GEN2r_SYNCE_FRACTIONAL_DIVSOR_CFGf_GET(r) (((r).rx_x4_synce_fractional_div_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_SYNCE_FRACTIONAL_DIV_GEN2r_SYNCE_FRACTIONAL_DIVSOR_CFGf_SET(r,f) (r).rx_x4_synce_fractional_div_gen2[0]=(((r).rx_x4_synce_fractional_div_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_SYNCE_FRACTIONAL_DIV_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_SYNCE_FRACTIONAL_DIV_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_SYNCE_FRACTIONAL_DIV_GEN2r,(_r._rx_x4_synce_fractional_div_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_SYNCE_FRACTIONAL_DIV_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_SYNCE_FRACTIONAL_DIV_GEN2r,(_r._rx_x4_synce_fractional_div_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_SYNCE_FRACTIONAL_DIV_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_SYNCE_FRACTIONAL_DIV_GEN2r,(_r._rx_x4_synce_fractional_div_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_SYNCE_FRACTIONAL_DIV_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_SYNCE_FRACTIONAL_DIV_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_synce_fractional_div_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_SYNCE_FRACTIONAL_DIV_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_SYNCE_FRACTIONAL_DIV_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_synce_fractional_div_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_SYNCE_FRACTIONAL_DIV_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_SYNCE_FRACTIONAL_DIV_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_synce_fractional_div_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_SYNCE_FRACTIONAL_DIV_GEN2r BCMI_TSCF_XGXS_RX_X4_SYNCE_FRACTIONAL_DIV_GEN2r
#define RX_X4_SYNCE_FRACTIONAL_DIV_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_SYNCE_FRACTIONAL_DIV_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_SYNCE_FRACTIONAL_DIV_GEN2r_t RX_X4_SYNCE_FRACTIONAL_DIV_GEN2r_t;
#define RX_X4_SYNCE_FRACTIONAL_DIV_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_SYNCE_FRACTIONAL_DIV_GEN2r_CLR
#define RX_X4_SYNCE_FRACTIONAL_DIV_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_SYNCE_FRACTIONAL_DIV_GEN2r_SET
#define RX_X4_SYNCE_FRACTIONAL_DIV_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_SYNCE_FRACTIONAL_DIV_GEN2r_GET
#define RX_X4_SYNCE_FRACTIONAL_DIV_GEN2r_SYNCE_FRACTIONAL_DIVSOR_CFGf_GET BCMI_TSCF_XGXS_RX_X4_SYNCE_FRACTIONAL_DIV_GEN2r_SYNCE_FRACTIONAL_DIVSOR_CFGf_GET
#define RX_X4_SYNCE_FRACTIONAL_DIV_GEN2r_SYNCE_FRACTIONAL_DIVSOR_CFGf_SET BCMI_TSCF_XGXS_RX_X4_SYNCE_FRACTIONAL_DIV_GEN2r_SYNCE_FRACTIONAL_DIVSOR_CFGf_SET
#define READ_RX_X4_SYNCE_FRACTIONAL_DIV_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_SYNCE_FRACTIONAL_DIV_GEN2r
#define WRITE_RX_X4_SYNCE_FRACTIONAL_DIV_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_SYNCE_FRACTIONAL_DIV_GEN2r
#define MODIFY_RX_X4_SYNCE_FRACTIONAL_DIV_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_SYNCE_FRACTIONAL_DIV_GEN2r
#define READLN_RX_X4_SYNCE_FRACTIONAL_DIV_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_SYNCE_FRACTIONAL_DIV_GEN2r
#define WRITELN_RX_X4_SYNCE_FRACTIONAL_DIV_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_SYNCE_FRACTIONAL_DIV_GEN2r
#define WRITEALL_RX_X4_SYNCE_FRACTIONAL_DIV_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_SYNCE_FRACTIONAL_DIV_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_SYNCE_FRACTIONAL_DIV_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2
 * BLOCKS:   RX_X4_CONTROL0
 * REGADDR:  0xc13e
 * DESC:     25G IEEE vs MSA detection control register
 * RESETVAL: 0x1 (1)
 * ACCESS:   R/W
 * FIELDS:
 *     MSA_IEEE_DET_TIMEPERIOD Time which will be spent on MSA and IEEE detection.
 *     MSA_IEEE_DET_EN  MSA and IEEE device detection in FORCED speed mode. This should only be enabled in forced speed mode and never in AN (or SW-AN)
 */
#define BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r (0x0000c13e | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_ieee_25g_parllel_det_ctr_gen2[1];
	uint32_t _rx_x4_ieee_25g_parllel_det_ctr_gen2;
} BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r_CLR(r) (r).rx_x4_ieee_25g_parllel_det_ctr_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r_SET(r,d) (r).rx_x4_ieee_25g_parllel_det_ctr_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r_GET(r) (r).rx_x4_ieee_25g_parllel_det_ctr_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r_MSA_IEEE_DET_ENf_GET(r) ((((r).rx_x4_ieee_25g_parllel_det_ctr_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r_MSA_IEEE_DET_ENf_SET(r,f) (r).rx_x4_ieee_25g_parllel_det_ctr_gen2[0]=(((r).rx_x4_ieee_25g_parllel_det_ctr_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r_MSA_IEEE_DET_TIMEPERIODf_GET(r) (((r).rx_x4_ieee_25g_parllel_det_ctr_gen2[0]) & 0x1fff)
#define BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r_MSA_IEEE_DET_TIMEPERIODf_SET(r,f) (r).rx_x4_ieee_25g_parllel_det_ctr_gen2[0]=(((r).rx_x4_ieee_25g_parllel_det_ctr_gen2[0] & ~((uint32_t)0x1fff)) | (((uint32_t)f) & 0x1fff)) | (0x1fff << 16)

/*
 * These macros can be used to access RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r,(_r._rx_x4_ieee_25g_parllel_det_ctr_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r,(_r._rx_x4_ieee_25g_parllel_det_ctr_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r,(_r._rx_x4_ieee_25g_parllel_det_ctr_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ieee_25g_parllel_det_ctr_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ieee_25g_parllel_det_ctr_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_ieee_25g_parllel_det_ctr_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r
#define RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r_t RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r_t;
#define RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r_CLR
#define RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r_SET
#define RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r_GET
#define RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r_MSA_IEEE_DET_ENf_GET BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r_MSA_IEEE_DET_ENf_GET
#define RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r_MSA_IEEE_DET_ENf_SET BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r_MSA_IEEE_DET_ENf_SET
#define RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r_MSA_IEEE_DET_TIMEPERIODf_GET BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r_MSA_IEEE_DET_TIMEPERIODf_GET
#define RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r_MSA_IEEE_DET_TIMEPERIODf_SET BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r_MSA_IEEE_DET_TIMEPERIODf_SET
#define READ_RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r
#define WRITE_RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r
#define MODIFY_RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r
#define READLN_RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r
#define WRITELN_RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r
#define WRITEALL_RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_CTR_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_FEC_0_GEN2
 * BLOCKS:   RX_X4_FEC_CONTROL
 * REGADDR:  0xc140
 * DESC:     User FEC Control 0 register
 * RESETVAL: 0x442c (17452)
 * ACCESS:   R/W
 * FIELDS:
 *     DBG_ERR_MODE     debug readout only for uncorrectable errors
 *     BURST_ERR_STATUS_MODE collect error info only for uncorrectable errors0 - update on correctable and uncorrectable events1 - update on uncorrectable events only
 *     DEC_MAX_PM       maximum correctable burst pattern size
 *     INVALID_PARITY_CNT number of bad locks before unlocking
 *     GOOD_PARITY_CNT  number of good blocks before locking
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_0_GEN2r (0x0000c140 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_FEC_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_FEC_0_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_0_gen2[1];
	uint32_t _rx_x4_fec_0_gen2;
} BCMI_TSCF_XGXS_RX_X4_FEC_0_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_FEC_0_GEN2r_CLR(r) (r).rx_x4_fec_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_FEC_0_GEN2r_SET(r,d) (r).rx_x4_fec_0_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_FEC_0_GEN2r_GET(r) (r).rx_x4_fec_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_0_GEN2r_GOOD_PARITY_CNTf_GET(r) ((((r).rx_x4_fec_0_gen2[0]) >> 12) & 0x7)
#define BCMI_TSCF_XGXS_RX_X4_FEC_0_GEN2r_GOOD_PARITY_CNTf_SET(r,f) (r).rx_x4_fec_0_gen2[0]=(((r).rx_x4_fec_0_gen2[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12)) | (7 << (16 + 12))
#define BCMI_TSCF_XGXS_RX_X4_FEC_0_GEN2r_INVALID_PARITY_CNTf_GET(r) ((((r).rx_x4_fec_0_gen2[0]) >> 8) & 0xf)
#define BCMI_TSCF_XGXS_RX_X4_FEC_0_GEN2r_INVALID_PARITY_CNTf_SET(r,f) (r).rx_x4_fec_0_gen2[0]=(((r).rx_x4_fec_0_gen2[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_XGXS_RX_X4_FEC_0_GEN2r_DEC_MAX_PMf_GET(r) ((((r).rx_x4_fec_0_gen2[0]) >> 2) & 0x3f)
#define BCMI_TSCF_XGXS_RX_X4_FEC_0_GEN2r_DEC_MAX_PMf_SET(r,f) (r).rx_x4_fec_0_gen2[0]=(((r).rx_x4_fec_0_gen2[0] & ~((uint32_t)0x3f << 2)) | ((((uint32_t)f) & 0x3f) << 2)) | (63 << (16 + 2))
#define BCMI_TSCF_XGXS_RX_X4_FEC_0_GEN2r_BURST_ERR_STATUS_MODEf_GET(r) ((((r).rx_x4_fec_0_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_FEC_0_GEN2r_BURST_ERR_STATUS_MODEf_SET(r,f) (r).rx_x4_fec_0_gen2[0]=(((r).rx_x4_fec_0_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_RX_X4_FEC_0_GEN2r_DBG_ERR_MODEf_GET(r) (((r).rx_x4_fec_0_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_FEC_0_GEN2r_DBG_ERR_MODEf_SET(r,f) (r).rx_x4_fec_0_gen2[0]=(((r).rx_x4_fec_0_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_X4_FEC_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_FEC_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_0_GEN2r,(_r._rx_x4_fec_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_0_GEN2r,(_r._rx_x4_fec_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_0_GEN2r,(_r._rx_x4_fec_0_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_FEC_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_0_GEN2r BCMI_TSCF_XGXS_RX_X4_FEC_0_GEN2r
#define RX_X4_FEC_0_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_FEC_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_FEC_0_GEN2r_t RX_X4_FEC_0_GEN2r_t;
#define RX_X4_FEC_0_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_FEC_0_GEN2r_CLR
#define RX_X4_FEC_0_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_FEC_0_GEN2r_SET
#define RX_X4_FEC_0_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_FEC_0_GEN2r_GET
#define RX_X4_FEC_0_GEN2r_GOOD_PARITY_CNTf_GET BCMI_TSCF_XGXS_RX_X4_FEC_0_GEN2r_GOOD_PARITY_CNTf_GET
#define RX_X4_FEC_0_GEN2r_GOOD_PARITY_CNTf_SET BCMI_TSCF_XGXS_RX_X4_FEC_0_GEN2r_GOOD_PARITY_CNTf_SET
#define RX_X4_FEC_0_GEN2r_INVALID_PARITY_CNTf_GET BCMI_TSCF_XGXS_RX_X4_FEC_0_GEN2r_INVALID_PARITY_CNTf_GET
#define RX_X4_FEC_0_GEN2r_INVALID_PARITY_CNTf_SET BCMI_TSCF_XGXS_RX_X4_FEC_0_GEN2r_INVALID_PARITY_CNTf_SET
#define RX_X4_FEC_0_GEN2r_DEC_MAX_PMf_GET BCMI_TSCF_XGXS_RX_X4_FEC_0_GEN2r_DEC_MAX_PMf_GET
#define RX_X4_FEC_0_GEN2r_DEC_MAX_PMf_SET BCMI_TSCF_XGXS_RX_X4_FEC_0_GEN2r_DEC_MAX_PMf_SET
#define RX_X4_FEC_0_GEN2r_BURST_ERR_STATUS_MODEf_GET BCMI_TSCF_XGXS_RX_X4_FEC_0_GEN2r_BURST_ERR_STATUS_MODEf_GET
#define RX_X4_FEC_0_GEN2r_BURST_ERR_STATUS_MODEf_SET BCMI_TSCF_XGXS_RX_X4_FEC_0_GEN2r_BURST_ERR_STATUS_MODEf_SET
#define RX_X4_FEC_0_GEN2r_DBG_ERR_MODEf_GET BCMI_TSCF_XGXS_RX_X4_FEC_0_GEN2r_DBG_ERR_MODEf_GET
#define RX_X4_FEC_0_GEN2r_DBG_ERR_MODEf_SET BCMI_TSCF_XGXS_RX_X4_FEC_0_GEN2r_DBG_ERR_MODEf_SET
#define READ_RX_X4_FEC_0_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_FEC_0_GEN2r
#define WRITE_RX_X4_FEC_0_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_0_GEN2r
#define MODIFY_RX_X4_FEC_0_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_0_GEN2r
#define READLN_RX_X4_FEC_0_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_FEC_0_GEN2r
#define WRITELN_RX_X4_FEC_0_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_0_GEN2r
#define WRITEALL_RX_X4_FEC_0_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_FEC_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_FEC_1_GEN2
 * BLOCKS:   RX_X4_FEC_CONTROL
 * REGADDR:  0xc141
 * DESC:     User FEC Control 1 register
 * RESETVAL: 0x28 (40)
 * ACCESS:   R/W
 * FIELDS:
 *     DEC_GAP_COUNT_MODE Gap counting mode0 = Counting zero method1 = Counting gap method
 *     DEC_17B_BURST_GAP_COUNT Gaps allowed in 17-bit bursts000 No gaps001 Single gap010-111 Multi gaps
 *     DEC_18B_BURST_GAP_COUNT Gaps allowed in 18-bit bursts000 No gaps001 Single gap010-111 Multi gaps
 *     DEC_19B_BURST_GAP_COUNT Gaps allowed in 19-bit bursts000 No gaps001 Single gap010-111 Multi gaps
 *     DEC_PM_MODE      Pattern Match Mode
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_1_GEN2r (0x0000c141 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_FEC_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_FEC_1_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_1_gen2[1];
	uint32_t _rx_x4_fec_1_gen2;
} BCMI_TSCF_XGXS_RX_X4_FEC_1_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_FEC_1_GEN2r_CLR(r) (r).rx_x4_fec_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_FEC_1_GEN2r_SET(r,d) (r).rx_x4_fec_1_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_FEC_1_GEN2r_GET(r) (r).rx_x4_fec_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_1_GEN2r_DEC_PM_MODEf_GET(r) ((((r).rx_x4_fec_1_gen2[0]) >> 11) & 0x1f)
#define BCMI_TSCF_XGXS_RX_X4_FEC_1_GEN2r_DEC_PM_MODEf_SET(r,f) (r).rx_x4_fec_1_gen2[0]=(((r).rx_x4_fec_1_gen2[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11)) | (31 << (16 + 11))
#define BCMI_TSCF_XGXS_RX_X4_FEC_1_GEN2r_DEC_19B_BURST_GAP_COUNTf_GET(r) ((((r).rx_x4_fec_1_gen2[0]) >> 8) & 0x7)
#define BCMI_TSCF_XGXS_RX_X4_FEC_1_GEN2r_DEC_19B_BURST_GAP_COUNTf_SET(r,f) (r).rx_x4_fec_1_gen2[0]=(((r).rx_x4_fec_1_gen2[0] & ~((uint32_t)0x7 << 8)) | ((((uint32_t)f) & 0x7) << 8)) | (7 << (16 + 8))
#define BCMI_TSCF_XGXS_RX_X4_FEC_1_GEN2r_DEC_18B_BURST_GAP_COUNTf_GET(r) ((((r).rx_x4_fec_1_gen2[0]) >> 5) & 0x7)
#define BCMI_TSCF_XGXS_RX_X4_FEC_1_GEN2r_DEC_18B_BURST_GAP_COUNTf_SET(r,f) (r).rx_x4_fec_1_gen2[0]=(((r).rx_x4_fec_1_gen2[0] & ~((uint32_t)0x7 << 5)) | ((((uint32_t)f) & 0x7) << 5)) | (7 << (16 + 5))
#define BCMI_TSCF_XGXS_RX_X4_FEC_1_GEN2r_DEC_17B_BURST_GAP_COUNTf_GET(r) ((((r).rx_x4_fec_1_gen2[0]) >> 2) & 0x7)
#define BCMI_TSCF_XGXS_RX_X4_FEC_1_GEN2r_DEC_17B_BURST_GAP_COUNTf_SET(r,f) (r).rx_x4_fec_1_gen2[0]=(((r).rx_x4_fec_1_gen2[0] & ~((uint32_t)0x7 << 2)) | ((((uint32_t)f) & 0x7) << 2)) | (7 << (16 + 2))
#define BCMI_TSCF_XGXS_RX_X4_FEC_1_GEN2r_DEC_GAP_COUNT_MODEf_GET(r) ((((r).rx_x4_fec_1_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_FEC_1_GEN2r_DEC_GAP_COUNT_MODEf_SET(r,f) (r).rx_x4_fec_1_gen2[0]=(((r).rx_x4_fec_1_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))

/*
 * These macros can be used to access RX_X4_FEC_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_FEC_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_1_GEN2r,(_r._rx_x4_fec_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_1_GEN2r,(_r._rx_x4_fec_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_1_GEN2r,(_r._rx_x4_fec_1_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_FEC_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_1_GEN2r BCMI_TSCF_XGXS_RX_X4_FEC_1_GEN2r
#define RX_X4_FEC_1_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_FEC_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_FEC_1_GEN2r_t RX_X4_FEC_1_GEN2r_t;
#define RX_X4_FEC_1_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_FEC_1_GEN2r_CLR
#define RX_X4_FEC_1_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_FEC_1_GEN2r_SET
#define RX_X4_FEC_1_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_FEC_1_GEN2r_GET
#define RX_X4_FEC_1_GEN2r_DEC_PM_MODEf_GET BCMI_TSCF_XGXS_RX_X4_FEC_1_GEN2r_DEC_PM_MODEf_GET
#define RX_X4_FEC_1_GEN2r_DEC_PM_MODEf_SET BCMI_TSCF_XGXS_RX_X4_FEC_1_GEN2r_DEC_PM_MODEf_SET
#define RX_X4_FEC_1_GEN2r_DEC_19B_BURST_GAP_COUNTf_GET BCMI_TSCF_XGXS_RX_X4_FEC_1_GEN2r_DEC_19B_BURST_GAP_COUNTf_GET
#define RX_X4_FEC_1_GEN2r_DEC_19B_BURST_GAP_COUNTf_SET BCMI_TSCF_XGXS_RX_X4_FEC_1_GEN2r_DEC_19B_BURST_GAP_COUNTf_SET
#define RX_X4_FEC_1_GEN2r_DEC_18B_BURST_GAP_COUNTf_GET BCMI_TSCF_XGXS_RX_X4_FEC_1_GEN2r_DEC_18B_BURST_GAP_COUNTf_GET
#define RX_X4_FEC_1_GEN2r_DEC_18B_BURST_GAP_COUNTf_SET BCMI_TSCF_XGXS_RX_X4_FEC_1_GEN2r_DEC_18B_BURST_GAP_COUNTf_SET
#define RX_X4_FEC_1_GEN2r_DEC_17B_BURST_GAP_COUNTf_GET BCMI_TSCF_XGXS_RX_X4_FEC_1_GEN2r_DEC_17B_BURST_GAP_COUNTf_GET
#define RX_X4_FEC_1_GEN2r_DEC_17B_BURST_GAP_COUNTf_SET BCMI_TSCF_XGXS_RX_X4_FEC_1_GEN2r_DEC_17B_BURST_GAP_COUNTf_SET
#define RX_X4_FEC_1_GEN2r_DEC_GAP_COUNT_MODEf_GET BCMI_TSCF_XGXS_RX_X4_FEC_1_GEN2r_DEC_GAP_COUNT_MODEf_GET
#define RX_X4_FEC_1_GEN2r_DEC_GAP_COUNT_MODEf_SET BCMI_TSCF_XGXS_RX_X4_FEC_1_GEN2r_DEC_GAP_COUNT_MODEf_SET
#define READ_RX_X4_FEC_1_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_FEC_1_GEN2r
#define WRITE_RX_X4_FEC_1_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_1_GEN2r
#define MODIFY_RX_X4_FEC_1_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_1_GEN2r
#define READLN_RX_X4_FEC_1_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_FEC_1_GEN2r
#define WRITELN_RX_X4_FEC_1_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_1_GEN2r
#define WRITEALL_RX_X4_FEC_1_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_FEC_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_FEC_2_GEN2
 * BLOCKS:   RX_X4_FEC_CONTROL
 * REGADDR:  0xc142
 * DESC:     User FEC Control 2 register
 * RESETVAL: 0x7c00 (31744)
 * ACCESS:   R/W
 * FIELDS:
 *     FEC_ERROR_CODE_ALL_PER_STREAM report errors thru all sync headersNow this functionality is controlled by Speed table so it is advisable NOT to TOUCH this register.
 *     DBG_ENABLE_PER_STREAM FEC debug enable
 *     FEC_ERR_ENABLE_PER_STREAM FEC error enable
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_2_GEN2r (0x0000c142 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_FEC_2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_FEC_2_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_2_gen2[1];
	uint32_t _rx_x4_fec_2_gen2;
} BCMI_TSCF_XGXS_RX_X4_FEC_2_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_FEC_2_GEN2r_CLR(r) (r).rx_x4_fec_2_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_FEC_2_GEN2r_SET(r,d) (r).rx_x4_fec_2_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_FEC_2_GEN2r_GET(r) (r).rx_x4_fec_2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_2_GEN2r_FEC_ERR_ENABLE_PER_STREAMf_GET(r) ((((r).rx_x4_fec_2_gen2[0]) >> 10) & 0x1f)
#define BCMI_TSCF_XGXS_RX_X4_FEC_2_GEN2r_FEC_ERR_ENABLE_PER_STREAMf_SET(r,f) (r).rx_x4_fec_2_gen2[0]=(((r).rx_x4_fec_2_gen2[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10)) | (31 << (16 + 10))
#define BCMI_TSCF_XGXS_RX_X4_FEC_2_GEN2r_DBG_ENABLE_PER_STREAMf_GET(r) ((((r).rx_x4_fec_2_gen2[0]) >> 5) & 0x1f)
#define BCMI_TSCF_XGXS_RX_X4_FEC_2_GEN2r_DBG_ENABLE_PER_STREAMf_SET(r,f) (r).rx_x4_fec_2_gen2[0]=(((r).rx_x4_fec_2_gen2[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5)) | (31 << (16 + 5))
#define BCMI_TSCF_XGXS_RX_X4_FEC_2_GEN2r_FEC_ERROR_CODE_ALL_PER_STREAMf_GET(r) (((r).rx_x4_fec_2_gen2[0]) & 0x1f)
#define BCMI_TSCF_XGXS_RX_X4_FEC_2_GEN2r_FEC_ERROR_CODE_ALL_PER_STREAMf_SET(r,f) (r).rx_x4_fec_2_gen2[0]=(((r).rx_x4_fec_2_gen2[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access RX_X4_FEC_2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_FEC_2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_2_GEN2r,(_r._rx_x4_fec_2_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_2_GEN2r,(_r._rx_x4_fec_2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_2_GEN2r,(_r._rx_x4_fec_2_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_FEC_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_2_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_2_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_2_GEN2r BCMI_TSCF_XGXS_RX_X4_FEC_2_GEN2r
#define RX_X4_FEC_2_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_FEC_2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_FEC_2_GEN2r_t RX_X4_FEC_2_GEN2r_t;
#define RX_X4_FEC_2_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_FEC_2_GEN2r_CLR
#define RX_X4_FEC_2_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_FEC_2_GEN2r_SET
#define RX_X4_FEC_2_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_FEC_2_GEN2r_GET
#define RX_X4_FEC_2_GEN2r_FEC_ERR_ENABLE_PER_STREAMf_GET BCMI_TSCF_XGXS_RX_X4_FEC_2_GEN2r_FEC_ERR_ENABLE_PER_STREAMf_GET
#define RX_X4_FEC_2_GEN2r_FEC_ERR_ENABLE_PER_STREAMf_SET BCMI_TSCF_XGXS_RX_X4_FEC_2_GEN2r_FEC_ERR_ENABLE_PER_STREAMf_SET
#define RX_X4_FEC_2_GEN2r_DBG_ENABLE_PER_STREAMf_GET BCMI_TSCF_XGXS_RX_X4_FEC_2_GEN2r_DBG_ENABLE_PER_STREAMf_GET
#define RX_X4_FEC_2_GEN2r_DBG_ENABLE_PER_STREAMf_SET BCMI_TSCF_XGXS_RX_X4_FEC_2_GEN2r_DBG_ENABLE_PER_STREAMf_SET
#define RX_X4_FEC_2_GEN2r_FEC_ERROR_CODE_ALL_PER_STREAMf_GET BCMI_TSCF_XGXS_RX_X4_FEC_2_GEN2r_FEC_ERROR_CODE_ALL_PER_STREAMf_GET
#define RX_X4_FEC_2_GEN2r_FEC_ERROR_CODE_ALL_PER_STREAMf_SET BCMI_TSCF_XGXS_RX_X4_FEC_2_GEN2r_FEC_ERROR_CODE_ALL_PER_STREAMf_SET
#define READ_RX_X4_FEC_2_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_FEC_2_GEN2r
#define WRITE_RX_X4_FEC_2_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_2_GEN2r
#define MODIFY_RX_X4_FEC_2_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_2_GEN2r
#define READLN_RX_X4_FEC_2_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_FEC_2_GEN2r
#define WRITELN_RX_X4_FEC_2_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_2_GEN2r
#define WRITEALL_RX_X4_FEC_2_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_FEC_2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_FEC_3_GEN2
 * BLOCKS:   RX_X4_FEC_CONTROL
 * REGADDR:  0xc143
 * DESC:     User FEC Control 3 register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     ERROR_EN_OVR_PER_STREAM FEC error enable override control
 *     ERROR_EN_OVR_VAL_PER_STREAM FEC error enable override control value
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_3_GEN2r (0x0000c143 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_FEC_3_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_3_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_FEC_3_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_3_gen2[1];
	uint32_t _rx_x4_fec_3_gen2;
} BCMI_TSCF_XGXS_RX_X4_FEC_3_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_FEC_3_GEN2r_CLR(r) (r).rx_x4_fec_3_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_FEC_3_GEN2r_SET(r,d) (r).rx_x4_fec_3_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_FEC_3_GEN2r_GET(r) (r).rx_x4_fec_3_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_3_GEN2r_ERROR_EN_OVR_VAL_PER_STREAMf_GET(r) ((((r).rx_x4_fec_3_gen2[0]) >> 5) & 0x1f)
#define BCMI_TSCF_XGXS_RX_X4_FEC_3_GEN2r_ERROR_EN_OVR_VAL_PER_STREAMf_SET(r,f) (r).rx_x4_fec_3_gen2[0]=(((r).rx_x4_fec_3_gen2[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5)) | (31 << (16 + 5))
#define BCMI_TSCF_XGXS_RX_X4_FEC_3_GEN2r_ERROR_EN_OVR_PER_STREAMf_GET(r) (((r).rx_x4_fec_3_gen2[0]) & 0x1f)
#define BCMI_TSCF_XGXS_RX_X4_FEC_3_GEN2r_ERROR_EN_OVR_PER_STREAMf_SET(r,f) (r).rx_x4_fec_3_gen2[0]=(((r).rx_x4_fec_3_gen2[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access RX_X4_FEC_3_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_FEC_3_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_3_GEN2r,(_r._rx_x4_fec_3_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_3_GEN2r,(_r._rx_x4_fec_3_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_3_GEN2r,(_r._rx_x4_fec_3_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_FEC_3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_3_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_3_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_3_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_3_GEN2r BCMI_TSCF_XGXS_RX_X4_FEC_3_GEN2r
#define RX_X4_FEC_3_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_FEC_3_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_FEC_3_GEN2r_t RX_X4_FEC_3_GEN2r_t;
#define RX_X4_FEC_3_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_FEC_3_GEN2r_CLR
#define RX_X4_FEC_3_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_FEC_3_GEN2r_SET
#define RX_X4_FEC_3_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_FEC_3_GEN2r_GET
#define RX_X4_FEC_3_GEN2r_ERROR_EN_OVR_VAL_PER_STREAMf_GET BCMI_TSCF_XGXS_RX_X4_FEC_3_GEN2r_ERROR_EN_OVR_VAL_PER_STREAMf_GET
#define RX_X4_FEC_3_GEN2r_ERROR_EN_OVR_VAL_PER_STREAMf_SET BCMI_TSCF_XGXS_RX_X4_FEC_3_GEN2r_ERROR_EN_OVR_VAL_PER_STREAMf_SET
#define RX_X4_FEC_3_GEN2r_ERROR_EN_OVR_PER_STREAMf_GET BCMI_TSCF_XGXS_RX_X4_FEC_3_GEN2r_ERROR_EN_OVR_PER_STREAMf_GET
#define RX_X4_FEC_3_GEN2r_ERROR_EN_OVR_PER_STREAMf_SET BCMI_TSCF_XGXS_RX_X4_FEC_3_GEN2r_ERROR_EN_OVR_PER_STREAMf_SET
#define READ_RX_X4_FEC_3_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_FEC_3_GEN2r
#define WRITE_RX_X4_FEC_3_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_3_GEN2r
#define MODIFY_RX_X4_FEC_3_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_3_GEN2r
#define READLN_RX_X4_FEC_3_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_FEC_3_GEN2r
#define WRITELN_RX_X4_FEC_3_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_3_GEN2r
#define WRITEALL_RX_X4_FEC_3_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_3_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_FEC_3_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_BLKSYNC_STS_GEN2
 * BLOCKS:   RX_X4_STATUS0
 * REGADDR:  0xc150
 * DESC:     block sync status
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     BS_STATUS        Block Lock: indicates that the lane has achieved block lock status.One bit per pseudo-logical (Bitmux output) lane.
 *     BS_PMD_LOCK      Indicates the pmd_lock value seen at the input to this lane.
 */
#define BCMI_TSCF_XGXS_RX_X4_BLKSYNC_STS_GEN2r (0x0000c150 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_BLKSYNC_STS_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_BLKSYNC_STS_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_BLKSYNC_STS_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_blksync_sts_gen2[1];
	uint32_t _rx_x4_blksync_sts_gen2;
} BCMI_TSCF_XGXS_RX_X4_BLKSYNC_STS_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_BLKSYNC_STS_GEN2r_CLR(r) (r).rx_x4_blksync_sts_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_BLKSYNC_STS_GEN2r_SET(r,d) (r).rx_x4_blksync_sts_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_BLKSYNC_STS_GEN2r_GET(r) (r).rx_x4_blksync_sts_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_BLKSYNC_STS_GEN2r_BS_PMD_LOCKf_GET(r) ((((r).rx_x4_blksync_sts_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_BLKSYNC_STS_GEN2r_BS_PMD_LOCKf_SET(r,f) (r).rx_x4_blksync_sts_gen2[0]=(((r).rx_x4_blksync_sts_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_RX_X4_BLKSYNC_STS_GEN2r_BS_STATUSf_GET(r) (((r).rx_x4_blksync_sts_gen2[0]) & 0x1f)
#define BCMI_TSCF_XGXS_RX_X4_BLKSYNC_STS_GEN2r_BS_STATUSf_SET(r,f) (r).rx_x4_blksync_sts_gen2[0]=(((r).rx_x4_blksync_sts_gen2[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access RX_X4_BLKSYNC_STS_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_BLKSYNC_STS_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_BLKSYNC_STS_GEN2r,(_r._rx_x4_blksync_sts_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_BLKSYNC_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_BLKSYNC_STS_GEN2r,(_r._rx_x4_blksync_sts_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_BLKSYNC_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_BLKSYNC_STS_GEN2r,(_r._rx_x4_blksync_sts_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_BLKSYNC_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_BLKSYNC_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_blksync_sts_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_BLKSYNC_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_BLKSYNC_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_blksync_sts_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_BLKSYNC_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_BLKSYNC_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_blksync_sts_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_BLKSYNC_STS_GEN2r BCMI_TSCF_XGXS_RX_X4_BLKSYNC_STS_GEN2r
#define RX_X4_BLKSYNC_STS_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_BLKSYNC_STS_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_BLKSYNC_STS_GEN2r_t RX_X4_BLKSYNC_STS_GEN2r_t;
#define RX_X4_BLKSYNC_STS_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_BLKSYNC_STS_GEN2r_CLR
#define RX_X4_BLKSYNC_STS_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_BLKSYNC_STS_GEN2r_SET
#define RX_X4_BLKSYNC_STS_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_BLKSYNC_STS_GEN2r_GET
#define RX_X4_BLKSYNC_STS_GEN2r_BS_PMD_LOCKf_GET BCMI_TSCF_XGXS_RX_X4_BLKSYNC_STS_GEN2r_BS_PMD_LOCKf_GET
#define RX_X4_BLKSYNC_STS_GEN2r_BS_PMD_LOCKf_SET BCMI_TSCF_XGXS_RX_X4_BLKSYNC_STS_GEN2r_BS_PMD_LOCKf_SET
#define RX_X4_BLKSYNC_STS_GEN2r_BS_STATUSf_GET BCMI_TSCF_XGXS_RX_X4_BLKSYNC_STS_GEN2r_BS_STATUSf_GET
#define RX_X4_BLKSYNC_STS_GEN2r_BS_STATUSf_SET BCMI_TSCF_XGXS_RX_X4_BLKSYNC_STS_GEN2r_BS_STATUSf_SET
#define READ_RX_X4_BLKSYNC_STS_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_BLKSYNC_STS_GEN2r
#define WRITE_RX_X4_BLKSYNC_STS_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_BLKSYNC_STS_GEN2r
#define MODIFY_RX_X4_BLKSYNC_STS_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_BLKSYNC_STS_GEN2r
#define READLN_RX_X4_BLKSYNC_STS_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_BLKSYNC_STS_GEN2r
#define WRITELN_RX_X4_BLKSYNC_STS_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_BLKSYNC_STS_GEN2r
#define WRITEALL_RX_X4_BLKSYNC_STS_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_BLKSYNC_STS_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_BLKSYNC_STS_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_BLKSYNC_DBG0_GEN2
 * BLOCKS:   RX_X4_STATUS0
 * REGADDR:  0xc151
 * DESC:     block sync state machine debug info
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     LANE0_DEBUG_INFO Debug info for pseudo-logical lane 0 blocksync SM.See Table 7: Debug Info Bit Defs.
 *     LANE1_DEBUG_INFO Debug info for pseudo-logical lane 1 blocksync SM.See Table 7: Debug Info Bit Defs.
 */
#define BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG0_GEN2r (0x0000c151 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_BLKSYNC_DBG0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG0_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_blksync_dbg0_gen2[1];
	uint32_t _rx_x4_blksync_dbg0_gen2;
} BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG0_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG0_GEN2r_CLR(r) (r).rx_x4_blksync_dbg0_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG0_GEN2r_SET(r,d) (r).rx_x4_blksync_dbg0_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG0_GEN2r_GET(r) (r).rx_x4_blksync_dbg0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG0_GEN2r_LANE1_DEBUG_INFOf_GET(r) ((((r).rx_x4_blksync_dbg0_gen2[0]) >> 8) & 0xff)
#define BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG0_GEN2r_LANE1_DEBUG_INFOf_SET(r,f) (r).rx_x4_blksync_dbg0_gen2[0]=(((r).rx_x4_blksync_dbg0_gen2[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG0_GEN2r_LANE0_DEBUG_INFOf_GET(r) (((r).rx_x4_blksync_dbg0_gen2[0]) & 0xff)
#define BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG0_GEN2r_LANE0_DEBUG_INFOf_SET(r,f) (r).rx_x4_blksync_dbg0_gen2[0]=(((r).rx_x4_blksync_dbg0_gen2[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access RX_X4_BLKSYNC_DBG0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_BLKSYNC_DBG0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG0_GEN2r,(_r._rx_x4_blksync_dbg0_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_BLKSYNC_DBG0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG0_GEN2r,(_r._rx_x4_blksync_dbg0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_BLKSYNC_DBG0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG0_GEN2r,(_r._rx_x4_blksync_dbg0_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_BLKSYNC_DBG0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_blksync_dbg0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_BLKSYNC_DBG0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_blksync_dbg0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_BLKSYNC_DBG0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_blksync_dbg0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_BLKSYNC_DBG0_GEN2r BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG0_GEN2r
#define RX_X4_BLKSYNC_DBG0_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG0_GEN2r_t RX_X4_BLKSYNC_DBG0_GEN2r_t;
#define RX_X4_BLKSYNC_DBG0_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG0_GEN2r_CLR
#define RX_X4_BLKSYNC_DBG0_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG0_GEN2r_SET
#define RX_X4_BLKSYNC_DBG0_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG0_GEN2r_GET
#define RX_X4_BLKSYNC_DBG0_GEN2r_LANE1_DEBUG_INFOf_GET BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG0_GEN2r_LANE1_DEBUG_INFOf_GET
#define RX_X4_BLKSYNC_DBG0_GEN2r_LANE1_DEBUG_INFOf_SET BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG0_GEN2r_LANE1_DEBUG_INFOf_SET
#define RX_X4_BLKSYNC_DBG0_GEN2r_LANE0_DEBUG_INFOf_GET BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG0_GEN2r_LANE0_DEBUG_INFOf_GET
#define RX_X4_BLKSYNC_DBG0_GEN2r_LANE0_DEBUG_INFOf_SET BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG0_GEN2r_LANE0_DEBUG_INFOf_SET
#define READ_RX_X4_BLKSYNC_DBG0_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_BLKSYNC_DBG0_GEN2r
#define WRITE_RX_X4_BLKSYNC_DBG0_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_BLKSYNC_DBG0_GEN2r
#define MODIFY_RX_X4_BLKSYNC_DBG0_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_BLKSYNC_DBG0_GEN2r
#define READLN_RX_X4_BLKSYNC_DBG0_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_BLKSYNC_DBG0_GEN2r
#define WRITELN_RX_X4_BLKSYNC_DBG0_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_BLKSYNC_DBG0_GEN2r
#define WRITEALL_RX_X4_BLKSYNC_DBG0_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_BLKSYNC_DBG0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_BLKSYNC_DBG1_GEN2
 * BLOCKS:   RX_X4_STATUS0
 * REGADDR:  0xc152
 * DESC:     block sync state machine debug info
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     LANE2_DEBUG_INFO Debug info for pseudo-logical lane 2 blocksync SM.See Table 7: Debug Info Bit Defs.
 *     LANE3_DEBUG_INFO Debug info for pseudo-logical lane 3 blocksync SM.See Table 7: Debug Info Bit Defs.
 */
#define BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG1_GEN2r (0x0000c152 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_BLKSYNC_DBG1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG1_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_blksync_dbg1_gen2[1];
	uint32_t _rx_x4_blksync_dbg1_gen2;
} BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG1_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG1_GEN2r_CLR(r) (r).rx_x4_blksync_dbg1_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG1_GEN2r_SET(r,d) (r).rx_x4_blksync_dbg1_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG1_GEN2r_GET(r) (r).rx_x4_blksync_dbg1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG1_GEN2r_LANE3_DEBUG_INFOf_GET(r) ((((r).rx_x4_blksync_dbg1_gen2[0]) >> 8) & 0xff)
#define BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG1_GEN2r_LANE3_DEBUG_INFOf_SET(r,f) (r).rx_x4_blksync_dbg1_gen2[0]=(((r).rx_x4_blksync_dbg1_gen2[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG1_GEN2r_LANE2_DEBUG_INFOf_GET(r) (((r).rx_x4_blksync_dbg1_gen2[0]) & 0xff)
#define BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG1_GEN2r_LANE2_DEBUG_INFOf_SET(r,f) (r).rx_x4_blksync_dbg1_gen2[0]=(((r).rx_x4_blksync_dbg1_gen2[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access RX_X4_BLKSYNC_DBG1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_BLKSYNC_DBG1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG1_GEN2r,(_r._rx_x4_blksync_dbg1_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_BLKSYNC_DBG1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG1_GEN2r,(_r._rx_x4_blksync_dbg1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_BLKSYNC_DBG1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG1_GEN2r,(_r._rx_x4_blksync_dbg1_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_BLKSYNC_DBG1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_blksync_dbg1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_BLKSYNC_DBG1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_blksync_dbg1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_BLKSYNC_DBG1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_blksync_dbg1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_BLKSYNC_DBG1_GEN2r BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG1_GEN2r
#define RX_X4_BLKSYNC_DBG1_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG1_GEN2r_t RX_X4_BLKSYNC_DBG1_GEN2r_t;
#define RX_X4_BLKSYNC_DBG1_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG1_GEN2r_CLR
#define RX_X4_BLKSYNC_DBG1_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG1_GEN2r_SET
#define RX_X4_BLKSYNC_DBG1_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG1_GEN2r_GET
#define RX_X4_BLKSYNC_DBG1_GEN2r_LANE3_DEBUG_INFOf_GET BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG1_GEN2r_LANE3_DEBUG_INFOf_GET
#define RX_X4_BLKSYNC_DBG1_GEN2r_LANE3_DEBUG_INFOf_SET BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG1_GEN2r_LANE3_DEBUG_INFOf_SET
#define RX_X4_BLKSYNC_DBG1_GEN2r_LANE2_DEBUG_INFOf_GET BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG1_GEN2r_LANE2_DEBUG_INFOf_GET
#define RX_X4_BLKSYNC_DBG1_GEN2r_LANE2_DEBUG_INFOf_SET BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG1_GEN2r_LANE2_DEBUG_INFOf_SET
#define READ_RX_X4_BLKSYNC_DBG1_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_BLKSYNC_DBG1_GEN2r
#define WRITE_RX_X4_BLKSYNC_DBG1_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_BLKSYNC_DBG1_GEN2r
#define MODIFY_RX_X4_BLKSYNC_DBG1_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_BLKSYNC_DBG1_GEN2r
#define READLN_RX_X4_BLKSYNC_DBG1_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_BLKSYNC_DBG1_GEN2r
#define WRITELN_RX_X4_BLKSYNC_DBG1_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_BLKSYNC_DBG1_GEN2r
#define WRITEALL_RX_X4_BLKSYNC_DBG1_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_BLKSYNC_DBG1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_BLKSYNC_DBG2_GEN2
 * BLOCKS:   RX_X4_STATUS0
 * REGADDR:  0xc153
 * DESC:     block sync state machine debug info
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     LANE4_DEBUG_INFO Debug info for pseudo-logical lane 4 blocksync SM.See Table 7: Debug Info Bit Defs.
 */
#define BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG2_GEN2r (0x0000c153 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_BLKSYNC_DBG2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG2_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_blksync_dbg2_gen2[1];
	uint32_t _rx_x4_blksync_dbg2_gen2;
} BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG2_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG2_GEN2r_CLR(r) (r).rx_x4_blksync_dbg2_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG2_GEN2r_SET(r,d) (r).rx_x4_blksync_dbg2_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG2_GEN2r_GET(r) (r).rx_x4_blksync_dbg2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG2_GEN2r_LANE4_DEBUG_INFOf_GET(r) (((r).rx_x4_blksync_dbg2_gen2[0]) & 0xff)
#define BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG2_GEN2r_LANE4_DEBUG_INFOf_SET(r,f) (r).rx_x4_blksync_dbg2_gen2[0]=(((r).rx_x4_blksync_dbg2_gen2[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access RX_X4_BLKSYNC_DBG2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_BLKSYNC_DBG2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG2_GEN2r,(_r._rx_x4_blksync_dbg2_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_BLKSYNC_DBG2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG2_GEN2r,(_r._rx_x4_blksync_dbg2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_BLKSYNC_DBG2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG2_GEN2r,(_r._rx_x4_blksync_dbg2_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_BLKSYNC_DBG2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_blksync_dbg2_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_BLKSYNC_DBG2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_blksync_dbg2_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_BLKSYNC_DBG2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_blksync_dbg2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_BLKSYNC_DBG2_GEN2r BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG2_GEN2r
#define RX_X4_BLKSYNC_DBG2_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG2_GEN2r_t RX_X4_BLKSYNC_DBG2_GEN2r_t;
#define RX_X4_BLKSYNC_DBG2_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG2_GEN2r_CLR
#define RX_X4_BLKSYNC_DBG2_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG2_GEN2r_SET
#define RX_X4_BLKSYNC_DBG2_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG2_GEN2r_GET
#define RX_X4_BLKSYNC_DBG2_GEN2r_LANE4_DEBUG_INFOf_GET BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG2_GEN2r_LANE4_DEBUG_INFOf_GET
#define RX_X4_BLKSYNC_DBG2_GEN2r_LANE4_DEBUG_INFOf_SET BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG2_GEN2r_LANE4_DEBUG_INFOf_SET
#define READ_RX_X4_BLKSYNC_DBG2_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_BLKSYNC_DBG2_GEN2r
#define WRITE_RX_X4_BLKSYNC_DBG2_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_BLKSYNC_DBG2_GEN2r
#define MODIFY_RX_X4_BLKSYNC_DBG2_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_BLKSYNC_DBG2_GEN2r
#define READLN_RX_X4_BLKSYNC_DBG2_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_BLKSYNC_DBG2_GEN2r
#define WRITELN_RX_X4_BLKSYNC_DBG2_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_BLKSYNC_DBG2_GEN2r
#define WRITEALL_RX_X4_BLKSYNC_DBG2_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_BLKSYNC_DBG2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_BLKSYNC_DBG2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_BLK_LOCK_LATCH_STS_GEN2
 * BLOCKS:   RX_X4_STATUS0
 * REGADDR:  0xc154
 * DESC:     Latched status of PCS information
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BLOCK_LOCK_LL_0  BLOCK Lock has transitioned low since last read (for Pseudo-logical lane 0).Clear on read
 *     BLOCK_LOCK_LH_0  BLOCK Lock has transitioned high since last read (for Pseudo-logical lane 0).Clear on read
 *     BLOCK_LOCK_LL_1  BLOCK Lock has transitioned low since last read (for Pseudo-logical lane 1).Clear on read
 *     BLOCK_LOCK_LH_1  BLOCK Lock has transitioned high since last read (for Pseudo-logical lane 1).Clear on read
 *     BLOCK_LOCK_LL_2  BLOCK Lock has transitioned low since last read (for Pseudo-logical lane 2).Clear on read
 *     BLOCK_LOCK_LH_2  BLOCK Lock has transitioned high since last read (for Pseudo-logical lane 2).Clear on read
 *     BLOCK_LOCK_LL_3  BLOCK Lock has transitioned low since last read (for Pseudo-logical lane 3).Clear on read
 *     BLOCK_LOCK_LH_3  BLOCK Lock has transitioned high since last read (for Pseudo-logical lane 3).Clear on read
 *     BLOCK_LOCK_LL_4  BLOCK Lock has transitioned low since last read (for Pseudo-logical lane 4).Clear on read
 *     BLOCK_LOCK_LH_4  BLOCK Lock has transitioned high since last read (for Pseudo-logical lane 4).Clear on read
 */
#define BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r (0x0000c154 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_BLK_LOCK_LATCH_STS_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_blk_lock_latch_sts_gen2[1];
	uint32_t _rx_x4_blk_lock_latch_sts_gen2;
} BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r_CLR(r) (r).rx_x4_blk_lock_latch_sts_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r_SET(r,d) (r).rx_x4_blk_lock_latch_sts_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r_GET(r) (r).rx_x4_blk_lock_latch_sts_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LH_4f_GET(r) ((((r).rx_x4_blk_lock_latch_sts_gen2[0]) >> 9) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LH_4f_SET(r,f) (r).rx_x4_blk_lock_latch_sts_gen2[0]=(((r).rx_x4_blk_lock_latch_sts_gen2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LL_4f_GET(r) ((((r).rx_x4_blk_lock_latch_sts_gen2[0]) >> 8) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LL_4f_SET(r,f) (r).rx_x4_blk_lock_latch_sts_gen2[0]=(((r).rx_x4_blk_lock_latch_sts_gen2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LH_3f_GET(r) ((((r).rx_x4_blk_lock_latch_sts_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LH_3f_SET(r,f) (r).rx_x4_blk_lock_latch_sts_gen2[0]=(((r).rx_x4_blk_lock_latch_sts_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LL_3f_GET(r) ((((r).rx_x4_blk_lock_latch_sts_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LL_3f_SET(r,f) (r).rx_x4_blk_lock_latch_sts_gen2[0]=(((r).rx_x4_blk_lock_latch_sts_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LH_2f_GET(r) ((((r).rx_x4_blk_lock_latch_sts_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LH_2f_SET(r,f) (r).rx_x4_blk_lock_latch_sts_gen2[0]=(((r).rx_x4_blk_lock_latch_sts_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LL_2f_GET(r) ((((r).rx_x4_blk_lock_latch_sts_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LL_2f_SET(r,f) (r).rx_x4_blk_lock_latch_sts_gen2[0]=(((r).rx_x4_blk_lock_latch_sts_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LH_1f_GET(r) ((((r).rx_x4_blk_lock_latch_sts_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LH_1f_SET(r,f) (r).rx_x4_blk_lock_latch_sts_gen2[0]=(((r).rx_x4_blk_lock_latch_sts_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LL_1f_GET(r) ((((r).rx_x4_blk_lock_latch_sts_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LL_1f_SET(r,f) (r).rx_x4_blk_lock_latch_sts_gen2[0]=(((r).rx_x4_blk_lock_latch_sts_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LH_0f_GET(r) ((((r).rx_x4_blk_lock_latch_sts_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LH_0f_SET(r,f) (r).rx_x4_blk_lock_latch_sts_gen2[0]=(((r).rx_x4_blk_lock_latch_sts_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LL_0f_GET(r) (((r).rx_x4_blk_lock_latch_sts_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LL_0f_SET(r,f) (r).rx_x4_blk_lock_latch_sts_gen2[0]=(((r).rx_x4_blk_lock_latch_sts_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_X4_BLK_LOCK_LATCH_STS_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_BLK_LOCK_LATCH_STS_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r,(_r._rx_x4_blk_lock_latch_sts_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_BLK_LOCK_LATCH_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r,(_r._rx_x4_blk_lock_latch_sts_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_BLK_LOCK_LATCH_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r,(_r._rx_x4_blk_lock_latch_sts_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_BLK_LOCK_LATCH_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_blk_lock_latch_sts_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_BLK_LOCK_LATCH_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_blk_lock_latch_sts_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_BLK_LOCK_LATCH_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_blk_lock_latch_sts_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_BLK_LOCK_LATCH_STS_GEN2r BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r
#define RX_X4_BLK_LOCK_LATCH_STS_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r_t RX_X4_BLK_LOCK_LATCH_STS_GEN2r_t;
#define RX_X4_BLK_LOCK_LATCH_STS_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r_CLR
#define RX_X4_BLK_LOCK_LATCH_STS_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r_SET
#define RX_X4_BLK_LOCK_LATCH_STS_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r_GET
#define RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LH_4f_GET BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LH_4f_GET
#define RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LH_4f_SET BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LH_4f_SET
#define RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LL_4f_GET BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LL_4f_GET
#define RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LL_4f_SET BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LL_4f_SET
#define RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LH_3f_GET BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LH_3f_GET
#define RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LH_3f_SET BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LH_3f_SET
#define RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LL_3f_GET BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LL_3f_GET
#define RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LL_3f_SET BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LL_3f_SET
#define RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LH_2f_GET BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LH_2f_GET
#define RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LH_2f_SET BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LH_2f_SET
#define RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LL_2f_GET BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LL_2f_GET
#define RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LL_2f_SET BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LL_2f_SET
#define RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LH_1f_GET BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LH_1f_GET
#define RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LH_1f_SET BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LH_1f_SET
#define RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LL_1f_GET BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LL_1f_GET
#define RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LL_1f_SET BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LL_1f_SET
#define RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LH_0f_GET BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LH_0f_GET
#define RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LH_0f_SET BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LH_0f_SET
#define RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LL_0f_GET BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LL_0f_GET
#define RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LL_0f_SET BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r_BLOCK_LOCK_LL_0f_SET
#define READ_RX_X4_BLK_LOCK_LATCH_STS_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_BLK_LOCK_LATCH_STS_GEN2r
#define WRITE_RX_X4_BLK_LOCK_LATCH_STS_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_BLK_LOCK_LATCH_STS_GEN2r
#define MODIFY_RX_X4_BLK_LOCK_LATCH_STS_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_BLK_LOCK_LATCH_STS_GEN2r
#define READLN_RX_X4_BLK_LOCK_LATCH_STS_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_BLK_LOCK_LATCH_STS_GEN2r
#define WRITELN_RX_X4_BLK_LOCK_LATCH_STS_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_BLK_LOCK_LATCH_STS_GEN2r
#define WRITEALL_RX_X4_BLK_LOCK_LATCH_STS_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_BLK_LOCK_LATCH_STS_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_BLK_LOCK_LATCH_STS_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_AM_LOCK_LATCH_STS_GEN2
 * BLOCKS:   RX_X4_STATUS0
 * REGADDR:  0xc155
 * DESC:     Latched status of PCS information
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AM_LOCK_LL_0     AM Lock has transitioned low since last read (for Pseudo-logical lane 0).Clear on read
 *     AM_LOCK_LH_0     AM Lock has transitioned high since last read (for Pseudo-logical lane 0).Clear on read
 *     AM_LOCK_LL_1     AM Lock has transitioned low since last read (for Pseudo-logical lane 1).Clear on read
 *     AM_LOCK_LH_1     AM Lock has transitioned high since last read (for Pseudo-logical lane 1).Clear on read
 *     AM_LOCK_LL_2     AM Lock has transitioned low since last read (for Pseudo-logical lane 2).Clear on read
 *     AM_LOCK_LH_2     AM Lock has transitioned high since last read (for Pseudo-logical lane 2).Clear on read
 *     AM_LOCK_LL_3     AM Lock has transitioned low since last read (for Pseudo-logical lane 3).Clear on read
 *     AM_LOCK_LH_3     AM Lock has transitioned high since last read (for Pseudo-logical lane 3).Clear on read
 *     AM_LOCK_LL_4     AM Lock has transitioned low since last read (for Pseudo-logical lane 4).Clear on read
 *     AM_LOCK_LH_4     AM Lock has transitioned high since last read (for Pseudo-logical lane 4).Clear on read
 */
#define BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r (0x0000c155 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_AM_LOCK_LATCH_STS_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_am_lock_latch_sts_gen2[1];
	uint32_t _rx_x4_am_lock_latch_sts_gen2;
} BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r_CLR(r) (r).rx_x4_am_lock_latch_sts_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r_SET(r,d) (r).rx_x4_am_lock_latch_sts_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r_GET(r) (r).rx_x4_am_lock_latch_sts_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LH_4f_GET(r) ((((r).rx_x4_am_lock_latch_sts_gen2[0]) >> 9) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LH_4f_SET(r,f) (r).rx_x4_am_lock_latch_sts_gen2[0]=(((r).rx_x4_am_lock_latch_sts_gen2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LL_4f_GET(r) ((((r).rx_x4_am_lock_latch_sts_gen2[0]) >> 8) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LL_4f_SET(r,f) (r).rx_x4_am_lock_latch_sts_gen2[0]=(((r).rx_x4_am_lock_latch_sts_gen2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LH_3f_GET(r) ((((r).rx_x4_am_lock_latch_sts_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LH_3f_SET(r,f) (r).rx_x4_am_lock_latch_sts_gen2[0]=(((r).rx_x4_am_lock_latch_sts_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LL_3f_GET(r) ((((r).rx_x4_am_lock_latch_sts_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LL_3f_SET(r,f) (r).rx_x4_am_lock_latch_sts_gen2[0]=(((r).rx_x4_am_lock_latch_sts_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LH_2f_GET(r) ((((r).rx_x4_am_lock_latch_sts_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LH_2f_SET(r,f) (r).rx_x4_am_lock_latch_sts_gen2[0]=(((r).rx_x4_am_lock_latch_sts_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LL_2f_GET(r) ((((r).rx_x4_am_lock_latch_sts_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LL_2f_SET(r,f) (r).rx_x4_am_lock_latch_sts_gen2[0]=(((r).rx_x4_am_lock_latch_sts_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LH_1f_GET(r) ((((r).rx_x4_am_lock_latch_sts_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LH_1f_SET(r,f) (r).rx_x4_am_lock_latch_sts_gen2[0]=(((r).rx_x4_am_lock_latch_sts_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LL_1f_GET(r) ((((r).rx_x4_am_lock_latch_sts_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LL_1f_SET(r,f) (r).rx_x4_am_lock_latch_sts_gen2[0]=(((r).rx_x4_am_lock_latch_sts_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LH_0f_GET(r) ((((r).rx_x4_am_lock_latch_sts_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LH_0f_SET(r,f) (r).rx_x4_am_lock_latch_sts_gen2[0]=(((r).rx_x4_am_lock_latch_sts_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LL_0f_GET(r) (((r).rx_x4_am_lock_latch_sts_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LL_0f_SET(r,f) (r).rx_x4_am_lock_latch_sts_gen2[0]=(((r).rx_x4_am_lock_latch_sts_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_X4_AM_LOCK_LATCH_STS_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_AM_LOCK_LATCH_STS_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r,(_r._rx_x4_am_lock_latch_sts_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_AM_LOCK_LATCH_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r,(_r._rx_x4_am_lock_latch_sts_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_AM_LOCK_LATCH_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r,(_r._rx_x4_am_lock_latch_sts_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_AM_LOCK_LATCH_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_am_lock_latch_sts_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_AM_LOCK_LATCH_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_am_lock_latch_sts_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_AM_LOCK_LATCH_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_am_lock_latch_sts_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_AM_LOCK_LATCH_STS_GEN2r BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r
#define RX_X4_AM_LOCK_LATCH_STS_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r_t RX_X4_AM_LOCK_LATCH_STS_GEN2r_t;
#define RX_X4_AM_LOCK_LATCH_STS_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r_CLR
#define RX_X4_AM_LOCK_LATCH_STS_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r_SET
#define RX_X4_AM_LOCK_LATCH_STS_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r_GET
#define RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LH_4f_GET BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LH_4f_GET
#define RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LH_4f_SET BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LH_4f_SET
#define RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LL_4f_GET BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LL_4f_GET
#define RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LL_4f_SET BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LL_4f_SET
#define RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LH_3f_GET BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LH_3f_GET
#define RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LH_3f_SET BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LH_3f_SET
#define RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LL_3f_GET BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LL_3f_GET
#define RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LL_3f_SET BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LL_3f_SET
#define RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LH_2f_GET BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LH_2f_GET
#define RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LH_2f_SET BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LH_2f_SET
#define RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LL_2f_GET BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LL_2f_GET
#define RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LL_2f_SET BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LL_2f_SET
#define RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LH_1f_GET BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LH_1f_GET
#define RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LH_1f_SET BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LH_1f_SET
#define RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LL_1f_GET BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LL_1f_GET
#define RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LL_1f_SET BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LL_1f_SET
#define RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LH_0f_GET BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LH_0f_GET
#define RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LH_0f_SET BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LH_0f_SET
#define RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LL_0f_GET BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LL_0f_GET
#define RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LL_0f_SET BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r_AM_LOCK_LL_0f_SET
#define READ_RX_X4_AM_LOCK_LATCH_STS_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_AM_LOCK_LATCH_STS_GEN2r
#define WRITE_RX_X4_AM_LOCK_LATCH_STS_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_AM_LOCK_LATCH_STS_GEN2r
#define MODIFY_RX_X4_AM_LOCK_LATCH_STS_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_AM_LOCK_LATCH_STS_GEN2r
#define READLN_RX_X4_AM_LOCK_LATCH_STS_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_AM_LOCK_LATCH_STS_GEN2r
#define WRITELN_RX_X4_AM_LOCK_LATCH_STS_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_AM_LOCK_LATCH_STS_GEN2r
#define WRITEALL_RX_X4_AM_LOCK_LATCH_STS_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_AM_LOCK_LATCH_STS_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_AM_LOCK_LATCH_STS_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_PCS_LIVE_STS_0_GEN2
 * BLOCKS:   RX_X4_STATUS0
 * REGADDR:  0xc156
 * DESC:     Live status of PCS information
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     AM_LOCK_0        AM Lock status for pseudo-logical lane 0
 *     AM_LOCK_1        AM Lock status for pseudo-logical lane 1
 *     AM_LOCK_2        AM Lock status for pseudo-logical lane 2
 *     AM_LOCK_3        AM Lock status for pseudo-logical lane 3
 *     AM_LOCK_4        AM Lock status for pseudo-logical lane 4
 *     BLOCK_LOCK_0     BLOCK Lock status for pseudo-logical lane 0
 *     BLOCK_LOCK_1     BLOCK Lock status for pseudo-logical lane 1
 *     BLOCK_LOCK_2     BLOCK Lock status for pseudo-logical lane 2
 *     BLOCK_LOCK_3     BLOCK Lock status for pseudo-logical lane 3
 *     BLOCK_LOCK_4     BLOCK Lock status for pseudo-logical lane 4
 */
#define BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r (0x0000c156 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_PCS_LIVE_STS_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_pcs_live_sts_0_gen2[1];
	uint32_t _rx_x4_pcs_live_sts_0_gen2;
} BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r_CLR(r) (r).rx_x4_pcs_live_sts_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r_SET(r,d) (r).rx_x4_pcs_live_sts_0_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r_GET(r) (r).rx_x4_pcs_live_sts_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r_BLOCK_LOCK_4f_GET(r) ((((r).rx_x4_pcs_live_sts_0_gen2[0]) >> 9) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r_BLOCK_LOCK_4f_SET(r,f) (r).rx_x4_pcs_live_sts_0_gen2[0]=(((r).rx_x4_pcs_live_sts_0_gen2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r_BLOCK_LOCK_3f_GET(r) ((((r).rx_x4_pcs_live_sts_0_gen2[0]) >> 8) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r_BLOCK_LOCK_3f_SET(r,f) (r).rx_x4_pcs_live_sts_0_gen2[0]=(((r).rx_x4_pcs_live_sts_0_gen2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r_BLOCK_LOCK_2f_GET(r) ((((r).rx_x4_pcs_live_sts_0_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r_BLOCK_LOCK_2f_SET(r,f) (r).rx_x4_pcs_live_sts_0_gen2[0]=(((r).rx_x4_pcs_live_sts_0_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r_BLOCK_LOCK_1f_GET(r) ((((r).rx_x4_pcs_live_sts_0_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r_BLOCK_LOCK_1f_SET(r,f) (r).rx_x4_pcs_live_sts_0_gen2[0]=(((r).rx_x4_pcs_live_sts_0_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r_BLOCK_LOCK_0f_GET(r) ((((r).rx_x4_pcs_live_sts_0_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r_BLOCK_LOCK_0f_SET(r,f) (r).rx_x4_pcs_live_sts_0_gen2[0]=(((r).rx_x4_pcs_live_sts_0_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r_AM_LOCK_4f_GET(r) ((((r).rx_x4_pcs_live_sts_0_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r_AM_LOCK_4f_SET(r,f) (r).rx_x4_pcs_live_sts_0_gen2[0]=(((r).rx_x4_pcs_live_sts_0_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r_AM_LOCK_3f_GET(r) ((((r).rx_x4_pcs_live_sts_0_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r_AM_LOCK_3f_SET(r,f) (r).rx_x4_pcs_live_sts_0_gen2[0]=(((r).rx_x4_pcs_live_sts_0_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r_AM_LOCK_2f_GET(r) ((((r).rx_x4_pcs_live_sts_0_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r_AM_LOCK_2f_SET(r,f) (r).rx_x4_pcs_live_sts_0_gen2[0]=(((r).rx_x4_pcs_live_sts_0_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r_AM_LOCK_1f_GET(r) ((((r).rx_x4_pcs_live_sts_0_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r_AM_LOCK_1f_SET(r,f) (r).rx_x4_pcs_live_sts_0_gen2[0]=(((r).rx_x4_pcs_live_sts_0_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r_AM_LOCK_0f_GET(r) (((r).rx_x4_pcs_live_sts_0_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r_AM_LOCK_0f_SET(r,f) (r).rx_x4_pcs_live_sts_0_gen2[0]=(((r).rx_x4_pcs_live_sts_0_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_X4_PCS_LIVE_STS_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_PCS_LIVE_STS_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r,(_r._rx_x4_pcs_live_sts_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_PCS_LIVE_STS_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r,(_r._rx_x4_pcs_live_sts_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_PCS_LIVE_STS_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r,(_r._rx_x4_pcs_live_sts_0_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_PCS_LIVE_STS_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_pcs_live_sts_0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_PCS_LIVE_STS_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_pcs_live_sts_0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_PCS_LIVE_STS_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_pcs_live_sts_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_PCS_LIVE_STS_0_GEN2r BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r
#define RX_X4_PCS_LIVE_STS_0_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r_t RX_X4_PCS_LIVE_STS_0_GEN2r_t;
#define RX_X4_PCS_LIVE_STS_0_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r_CLR
#define RX_X4_PCS_LIVE_STS_0_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r_SET
#define RX_X4_PCS_LIVE_STS_0_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r_GET
#define RX_X4_PCS_LIVE_STS_0_GEN2r_BLOCK_LOCK_4f_GET BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r_BLOCK_LOCK_4f_GET
#define RX_X4_PCS_LIVE_STS_0_GEN2r_BLOCK_LOCK_4f_SET BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r_BLOCK_LOCK_4f_SET
#define RX_X4_PCS_LIVE_STS_0_GEN2r_BLOCK_LOCK_3f_GET BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r_BLOCK_LOCK_3f_GET
#define RX_X4_PCS_LIVE_STS_0_GEN2r_BLOCK_LOCK_3f_SET BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r_BLOCK_LOCK_3f_SET
#define RX_X4_PCS_LIVE_STS_0_GEN2r_BLOCK_LOCK_2f_GET BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r_BLOCK_LOCK_2f_GET
#define RX_X4_PCS_LIVE_STS_0_GEN2r_BLOCK_LOCK_2f_SET BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r_BLOCK_LOCK_2f_SET
#define RX_X4_PCS_LIVE_STS_0_GEN2r_BLOCK_LOCK_1f_GET BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r_BLOCK_LOCK_1f_GET
#define RX_X4_PCS_LIVE_STS_0_GEN2r_BLOCK_LOCK_1f_SET BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r_BLOCK_LOCK_1f_SET
#define RX_X4_PCS_LIVE_STS_0_GEN2r_BLOCK_LOCK_0f_GET BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r_BLOCK_LOCK_0f_GET
#define RX_X4_PCS_LIVE_STS_0_GEN2r_BLOCK_LOCK_0f_SET BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r_BLOCK_LOCK_0f_SET
#define RX_X4_PCS_LIVE_STS_0_GEN2r_AM_LOCK_4f_GET BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r_AM_LOCK_4f_GET
#define RX_X4_PCS_LIVE_STS_0_GEN2r_AM_LOCK_4f_SET BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r_AM_LOCK_4f_SET
#define RX_X4_PCS_LIVE_STS_0_GEN2r_AM_LOCK_3f_GET BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r_AM_LOCK_3f_GET
#define RX_X4_PCS_LIVE_STS_0_GEN2r_AM_LOCK_3f_SET BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r_AM_LOCK_3f_SET
#define RX_X4_PCS_LIVE_STS_0_GEN2r_AM_LOCK_2f_GET BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r_AM_LOCK_2f_GET
#define RX_X4_PCS_LIVE_STS_0_GEN2r_AM_LOCK_2f_SET BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r_AM_LOCK_2f_SET
#define RX_X4_PCS_LIVE_STS_0_GEN2r_AM_LOCK_1f_GET BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r_AM_LOCK_1f_GET
#define RX_X4_PCS_LIVE_STS_0_GEN2r_AM_LOCK_1f_SET BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r_AM_LOCK_1f_SET
#define RX_X4_PCS_LIVE_STS_0_GEN2r_AM_LOCK_0f_GET BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r_AM_LOCK_0f_GET
#define RX_X4_PCS_LIVE_STS_0_GEN2r_AM_LOCK_0f_SET BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r_AM_LOCK_0f_SET
#define READ_RX_X4_PCS_LIVE_STS_0_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_PCS_LIVE_STS_0_GEN2r
#define WRITE_RX_X4_PCS_LIVE_STS_0_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_PCS_LIVE_STS_0_GEN2r
#define MODIFY_RX_X4_PCS_LIVE_STS_0_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_PCS_LIVE_STS_0_GEN2r
#define READLN_RX_X4_PCS_LIVE_STS_0_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_PCS_LIVE_STS_0_GEN2r
#define WRITELN_RX_X4_PCS_LIVE_STS_0_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_PCS_LIVE_STS_0_GEN2r
#define WRITEALL_RX_X4_PCS_LIVE_STS_0_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_PCS_LIVE_STS_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_BIPCNT_0_GEN2
 * BLOCKS:   RX_X4_STATUS0
 * REGADDR:  0xc157
 * DESC:     BIP error count register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BIP_ERROR_COUNT_0 CL82 BIP error count for pseudo-logical lane 0.Saturates at 8'hFF. Clear on read.
 *     BIP_ERROR_COUNT_1 CL82 BIP error count for pseudo-logical lane 1.Saturates at 8'hFF. Clear on read.
 */
#define BCMI_TSCF_XGXS_RX_X4_BIPCNT_0_GEN2r (0x0000c157 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_BIPCNT_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_BIPCNT_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_BIPCNT_0_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_bipcnt_0_gen2[1];
	uint32_t _rx_x4_bipcnt_0_gen2;
} BCMI_TSCF_XGXS_RX_X4_BIPCNT_0_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_BIPCNT_0_GEN2r_CLR(r) (r).rx_x4_bipcnt_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_BIPCNT_0_GEN2r_SET(r,d) (r).rx_x4_bipcnt_0_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_BIPCNT_0_GEN2r_GET(r) (r).rx_x4_bipcnt_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_BIPCNT_0_GEN2r_BIP_ERROR_COUNT_1f_GET(r) ((((r).rx_x4_bipcnt_0_gen2[0]) >> 8) & 0xff)
#define BCMI_TSCF_XGXS_RX_X4_BIPCNT_0_GEN2r_BIP_ERROR_COUNT_1f_SET(r,f) (r).rx_x4_bipcnt_0_gen2[0]=(((r).rx_x4_bipcnt_0_gen2[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_TSCF_XGXS_RX_X4_BIPCNT_0_GEN2r_BIP_ERROR_COUNT_0f_GET(r) (((r).rx_x4_bipcnt_0_gen2[0]) & 0xff)
#define BCMI_TSCF_XGXS_RX_X4_BIPCNT_0_GEN2r_BIP_ERROR_COUNT_0f_SET(r,f) (r).rx_x4_bipcnt_0_gen2[0]=(((r).rx_x4_bipcnt_0_gen2[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access RX_X4_BIPCNT_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_BIPCNT_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_BIPCNT_0_GEN2r,(_r._rx_x4_bipcnt_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_BIPCNT_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_BIPCNT_0_GEN2r,(_r._rx_x4_bipcnt_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_BIPCNT_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_BIPCNT_0_GEN2r,(_r._rx_x4_bipcnt_0_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_BIPCNT_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_BIPCNT_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_bipcnt_0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_BIPCNT_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_BIPCNT_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_bipcnt_0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_BIPCNT_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_BIPCNT_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_bipcnt_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_BIPCNT_0_GEN2r BCMI_TSCF_XGXS_RX_X4_BIPCNT_0_GEN2r
#define RX_X4_BIPCNT_0_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_BIPCNT_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_BIPCNT_0_GEN2r_t RX_X4_BIPCNT_0_GEN2r_t;
#define RX_X4_BIPCNT_0_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_BIPCNT_0_GEN2r_CLR
#define RX_X4_BIPCNT_0_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_BIPCNT_0_GEN2r_SET
#define RX_X4_BIPCNT_0_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_BIPCNT_0_GEN2r_GET
#define RX_X4_BIPCNT_0_GEN2r_BIP_ERROR_COUNT_1f_GET BCMI_TSCF_XGXS_RX_X4_BIPCNT_0_GEN2r_BIP_ERROR_COUNT_1f_GET
#define RX_X4_BIPCNT_0_GEN2r_BIP_ERROR_COUNT_1f_SET BCMI_TSCF_XGXS_RX_X4_BIPCNT_0_GEN2r_BIP_ERROR_COUNT_1f_SET
#define RX_X4_BIPCNT_0_GEN2r_BIP_ERROR_COUNT_0f_GET BCMI_TSCF_XGXS_RX_X4_BIPCNT_0_GEN2r_BIP_ERROR_COUNT_0f_GET
#define RX_X4_BIPCNT_0_GEN2r_BIP_ERROR_COUNT_0f_SET BCMI_TSCF_XGXS_RX_X4_BIPCNT_0_GEN2r_BIP_ERROR_COUNT_0f_SET
#define READ_RX_X4_BIPCNT_0_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_BIPCNT_0_GEN2r
#define WRITE_RX_X4_BIPCNT_0_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_BIPCNT_0_GEN2r
#define MODIFY_RX_X4_BIPCNT_0_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_BIPCNT_0_GEN2r
#define READLN_RX_X4_BIPCNT_0_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_BIPCNT_0_GEN2r
#define WRITELN_RX_X4_BIPCNT_0_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_BIPCNT_0_GEN2r
#define WRITEALL_RX_X4_BIPCNT_0_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_BIPCNT_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_BIPCNT_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_BIPCNT_1_GEN2
 * BLOCKS:   RX_X4_STATUS0
 * REGADDR:  0xc158
 * DESC:     BIP error count register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BIP_ERROR_COUNT_2 CL82 BIP error count for pseudo-logical lane 2.Saturates at 8'hFF. Clear on read.
 *     BIP_ERROR_COUNT_3 CL82 BIP error count for pseudo-logical lane 3.Saturates at 8'hFF. Clear on read.
 */
#define BCMI_TSCF_XGXS_RX_X4_BIPCNT_1_GEN2r (0x0000c158 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_BIPCNT_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_BIPCNT_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_BIPCNT_1_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_bipcnt_1_gen2[1];
	uint32_t _rx_x4_bipcnt_1_gen2;
} BCMI_TSCF_XGXS_RX_X4_BIPCNT_1_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_BIPCNT_1_GEN2r_CLR(r) (r).rx_x4_bipcnt_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_BIPCNT_1_GEN2r_SET(r,d) (r).rx_x4_bipcnt_1_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_BIPCNT_1_GEN2r_GET(r) (r).rx_x4_bipcnt_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_BIPCNT_1_GEN2r_BIP_ERROR_COUNT_3f_GET(r) ((((r).rx_x4_bipcnt_1_gen2[0]) >> 8) & 0xff)
#define BCMI_TSCF_XGXS_RX_X4_BIPCNT_1_GEN2r_BIP_ERROR_COUNT_3f_SET(r,f) (r).rx_x4_bipcnt_1_gen2[0]=(((r).rx_x4_bipcnt_1_gen2[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_TSCF_XGXS_RX_X4_BIPCNT_1_GEN2r_BIP_ERROR_COUNT_2f_GET(r) (((r).rx_x4_bipcnt_1_gen2[0]) & 0xff)
#define BCMI_TSCF_XGXS_RX_X4_BIPCNT_1_GEN2r_BIP_ERROR_COUNT_2f_SET(r,f) (r).rx_x4_bipcnt_1_gen2[0]=(((r).rx_x4_bipcnt_1_gen2[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access RX_X4_BIPCNT_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_BIPCNT_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_BIPCNT_1_GEN2r,(_r._rx_x4_bipcnt_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_BIPCNT_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_BIPCNT_1_GEN2r,(_r._rx_x4_bipcnt_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_BIPCNT_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_BIPCNT_1_GEN2r,(_r._rx_x4_bipcnt_1_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_BIPCNT_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_BIPCNT_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_bipcnt_1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_BIPCNT_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_BIPCNT_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_bipcnt_1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_BIPCNT_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_BIPCNT_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_bipcnt_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_BIPCNT_1_GEN2r BCMI_TSCF_XGXS_RX_X4_BIPCNT_1_GEN2r
#define RX_X4_BIPCNT_1_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_BIPCNT_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_BIPCNT_1_GEN2r_t RX_X4_BIPCNT_1_GEN2r_t;
#define RX_X4_BIPCNT_1_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_BIPCNT_1_GEN2r_CLR
#define RX_X4_BIPCNT_1_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_BIPCNT_1_GEN2r_SET
#define RX_X4_BIPCNT_1_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_BIPCNT_1_GEN2r_GET
#define RX_X4_BIPCNT_1_GEN2r_BIP_ERROR_COUNT_3f_GET BCMI_TSCF_XGXS_RX_X4_BIPCNT_1_GEN2r_BIP_ERROR_COUNT_3f_GET
#define RX_X4_BIPCNT_1_GEN2r_BIP_ERROR_COUNT_3f_SET BCMI_TSCF_XGXS_RX_X4_BIPCNT_1_GEN2r_BIP_ERROR_COUNT_3f_SET
#define RX_X4_BIPCNT_1_GEN2r_BIP_ERROR_COUNT_2f_GET BCMI_TSCF_XGXS_RX_X4_BIPCNT_1_GEN2r_BIP_ERROR_COUNT_2f_GET
#define RX_X4_BIPCNT_1_GEN2r_BIP_ERROR_COUNT_2f_SET BCMI_TSCF_XGXS_RX_X4_BIPCNT_1_GEN2r_BIP_ERROR_COUNT_2f_SET
#define READ_RX_X4_BIPCNT_1_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_BIPCNT_1_GEN2r
#define WRITE_RX_X4_BIPCNT_1_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_BIPCNT_1_GEN2r
#define MODIFY_RX_X4_BIPCNT_1_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_BIPCNT_1_GEN2r
#define READLN_RX_X4_BIPCNT_1_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_BIPCNT_1_GEN2r
#define WRITELN_RX_X4_BIPCNT_1_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_BIPCNT_1_GEN2r
#define WRITEALL_RX_X4_BIPCNT_1_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_BIPCNT_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_BIPCNT_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_BIPCNT_2_GEN2
 * BLOCKS:   RX_X4_STATUS0
 * REGADDR:  0xc159
 * DESC:     BIP error count register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BIP_ERROR_COUNT_4 CL82 BIP error count for pseudo-logical lane 4.Saturates at 8'hFF. Clear on read.
 */
#define BCMI_TSCF_XGXS_RX_X4_BIPCNT_2_GEN2r (0x0000c159 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_BIPCNT_2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_BIPCNT_2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_BIPCNT_2_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_bipcnt_2_gen2[1];
	uint32_t _rx_x4_bipcnt_2_gen2;
} BCMI_TSCF_XGXS_RX_X4_BIPCNT_2_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_BIPCNT_2_GEN2r_CLR(r) (r).rx_x4_bipcnt_2_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_BIPCNT_2_GEN2r_SET(r,d) (r).rx_x4_bipcnt_2_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_BIPCNT_2_GEN2r_GET(r) (r).rx_x4_bipcnt_2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_BIPCNT_2_GEN2r_BIP_ERROR_COUNT_4f_GET(r) (((r).rx_x4_bipcnt_2_gen2[0]) & 0xff)
#define BCMI_TSCF_XGXS_RX_X4_BIPCNT_2_GEN2r_BIP_ERROR_COUNT_4f_SET(r,f) (r).rx_x4_bipcnt_2_gen2[0]=(((r).rx_x4_bipcnt_2_gen2[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access RX_X4_BIPCNT_2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_BIPCNT_2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_BIPCNT_2_GEN2r,(_r._rx_x4_bipcnt_2_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_BIPCNT_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_BIPCNT_2_GEN2r,(_r._rx_x4_bipcnt_2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_BIPCNT_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_BIPCNT_2_GEN2r,(_r._rx_x4_bipcnt_2_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_BIPCNT_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_BIPCNT_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_bipcnt_2_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_BIPCNT_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_BIPCNT_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_bipcnt_2_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_BIPCNT_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_BIPCNT_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_bipcnt_2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_BIPCNT_2_GEN2r BCMI_TSCF_XGXS_RX_X4_BIPCNT_2_GEN2r
#define RX_X4_BIPCNT_2_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_BIPCNT_2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_BIPCNT_2_GEN2r_t RX_X4_BIPCNT_2_GEN2r_t;
#define RX_X4_BIPCNT_2_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_BIPCNT_2_GEN2r_CLR
#define RX_X4_BIPCNT_2_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_BIPCNT_2_GEN2r_SET
#define RX_X4_BIPCNT_2_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_BIPCNT_2_GEN2r_GET
#define RX_X4_BIPCNT_2_GEN2r_BIP_ERROR_COUNT_4f_GET BCMI_TSCF_XGXS_RX_X4_BIPCNT_2_GEN2r_BIP_ERROR_COUNT_4f_GET
#define RX_X4_BIPCNT_2_GEN2r_BIP_ERROR_COUNT_4f_SET BCMI_TSCF_XGXS_RX_X4_BIPCNT_2_GEN2r_BIP_ERROR_COUNT_4f_SET
#define READ_RX_X4_BIPCNT_2_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_BIPCNT_2_GEN2r
#define WRITE_RX_X4_BIPCNT_2_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_BIPCNT_2_GEN2r
#define MODIFY_RX_X4_BIPCNT_2_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_BIPCNT_2_GEN2r
#define READLN_RX_X4_BIPCNT_2_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_BIPCNT_2_GEN2r
#define WRITELN_RX_X4_BIPCNT_2_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_BIPCNT_2_GEN2r
#define WRITEALL_RX_X4_BIPCNT_2_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_BIPCNT_2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_BIPCNT_2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_PSLL_TO_VL_MAP_0_GEN2
 * BLOCKS:   RX_X4_STATUS0
 * REGADDR:  0xc15a
 * DESC:     Pseudo-logical lane to virtual lane mapping
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     PSLL0_TO_VL_MAPPING Pseudo-logical lane 0 to virtual lane mapping.
 *     PSLL1_TO_VL_MAPPING Pseudo-logical lane 1 to virtual lane mapping.
 *     PSLL2_TO_VL_MAPPING Pseudo-logical lane 2 to virtual lane mapping.
 */
#define BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_0_GEN2r (0x0000c15a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_PSLL_TO_VL_MAP_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_0_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_psll_to_vl_map_0_gen2[1];
	uint32_t _rx_x4_psll_to_vl_map_0_gen2;
} BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_0_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_0_GEN2r_CLR(r) (r).rx_x4_psll_to_vl_map_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_0_GEN2r_SET(r,d) (r).rx_x4_psll_to_vl_map_0_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_0_GEN2r_GET(r) (r).rx_x4_psll_to_vl_map_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_0_GEN2r_PSLL2_TO_VL_MAPPINGf_GET(r) ((((r).rx_x4_psll_to_vl_map_0_gen2[0]) >> 10) & 0x1f)
#define BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_0_GEN2r_PSLL2_TO_VL_MAPPINGf_SET(r,f) (r).rx_x4_psll_to_vl_map_0_gen2[0]=(((r).rx_x4_psll_to_vl_map_0_gen2[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10)) | (31 << (16 + 10))
#define BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_0_GEN2r_PSLL1_TO_VL_MAPPINGf_GET(r) ((((r).rx_x4_psll_to_vl_map_0_gen2[0]) >> 5) & 0x1f)
#define BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_0_GEN2r_PSLL1_TO_VL_MAPPINGf_SET(r,f) (r).rx_x4_psll_to_vl_map_0_gen2[0]=(((r).rx_x4_psll_to_vl_map_0_gen2[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5)) | (31 << (16 + 5))
#define BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_0_GEN2r_PSLL0_TO_VL_MAPPINGf_GET(r) (((r).rx_x4_psll_to_vl_map_0_gen2[0]) & 0x1f)
#define BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_0_GEN2r_PSLL0_TO_VL_MAPPINGf_SET(r,f) (r).rx_x4_psll_to_vl_map_0_gen2[0]=(((r).rx_x4_psll_to_vl_map_0_gen2[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access RX_X4_PSLL_TO_VL_MAP_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_PSLL_TO_VL_MAP_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_0_GEN2r,(_r._rx_x4_psll_to_vl_map_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_PSLL_TO_VL_MAP_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_0_GEN2r,(_r._rx_x4_psll_to_vl_map_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_PSLL_TO_VL_MAP_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_0_GEN2r,(_r._rx_x4_psll_to_vl_map_0_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_PSLL_TO_VL_MAP_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_psll_to_vl_map_0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_PSLL_TO_VL_MAP_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_psll_to_vl_map_0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_PSLL_TO_VL_MAP_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_psll_to_vl_map_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_PSLL_TO_VL_MAP_0_GEN2r BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_0_GEN2r
#define RX_X4_PSLL_TO_VL_MAP_0_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_0_GEN2r_t RX_X4_PSLL_TO_VL_MAP_0_GEN2r_t;
#define RX_X4_PSLL_TO_VL_MAP_0_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_0_GEN2r_CLR
#define RX_X4_PSLL_TO_VL_MAP_0_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_0_GEN2r_SET
#define RX_X4_PSLL_TO_VL_MAP_0_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_0_GEN2r_GET
#define RX_X4_PSLL_TO_VL_MAP_0_GEN2r_PSLL2_TO_VL_MAPPINGf_GET BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_0_GEN2r_PSLL2_TO_VL_MAPPINGf_GET
#define RX_X4_PSLL_TO_VL_MAP_0_GEN2r_PSLL2_TO_VL_MAPPINGf_SET BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_0_GEN2r_PSLL2_TO_VL_MAPPINGf_SET
#define RX_X4_PSLL_TO_VL_MAP_0_GEN2r_PSLL1_TO_VL_MAPPINGf_GET BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_0_GEN2r_PSLL1_TO_VL_MAPPINGf_GET
#define RX_X4_PSLL_TO_VL_MAP_0_GEN2r_PSLL1_TO_VL_MAPPINGf_SET BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_0_GEN2r_PSLL1_TO_VL_MAPPINGf_SET
#define RX_X4_PSLL_TO_VL_MAP_0_GEN2r_PSLL0_TO_VL_MAPPINGf_GET BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_0_GEN2r_PSLL0_TO_VL_MAPPINGf_GET
#define RX_X4_PSLL_TO_VL_MAP_0_GEN2r_PSLL0_TO_VL_MAPPINGf_SET BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_0_GEN2r_PSLL0_TO_VL_MAPPINGf_SET
#define READ_RX_X4_PSLL_TO_VL_MAP_0_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_PSLL_TO_VL_MAP_0_GEN2r
#define WRITE_RX_X4_PSLL_TO_VL_MAP_0_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_PSLL_TO_VL_MAP_0_GEN2r
#define MODIFY_RX_X4_PSLL_TO_VL_MAP_0_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_PSLL_TO_VL_MAP_0_GEN2r
#define READLN_RX_X4_PSLL_TO_VL_MAP_0_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_PSLL_TO_VL_MAP_0_GEN2r
#define WRITELN_RX_X4_PSLL_TO_VL_MAP_0_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_PSLL_TO_VL_MAP_0_GEN2r
#define WRITEALL_RX_X4_PSLL_TO_VL_MAP_0_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_PSLL_TO_VL_MAP_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_PSLL_TO_VL_MAP_1_GEN2
 * BLOCKS:   RX_X4_STATUS0
 * REGADDR:  0xc15b
 * DESC:     Pseudo-logical lane to virtual lane mapping
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     PSLL3_TO_VL_MAPPING Pseudo-logical lane 3 to virtual lane mapping.
 *     PSLL4_TO_VL_MAPPING Pseudo-logical lane 4 to virtual lane mapping.
 */
#define BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_1_GEN2r (0x0000c15b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_PSLL_TO_VL_MAP_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_1_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_psll_to_vl_map_1_gen2[1];
	uint32_t _rx_x4_psll_to_vl_map_1_gen2;
} BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_1_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_1_GEN2r_CLR(r) (r).rx_x4_psll_to_vl_map_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_1_GEN2r_SET(r,d) (r).rx_x4_psll_to_vl_map_1_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_1_GEN2r_GET(r) (r).rx_x4_psll_to_vl_map_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_1_GEN2r_PSLL4_TO_VL_MAPPINGf_GET(r) ((((r).rx_x4_psll_to_vl_map_1_gen2[0]) >> 5) & 0x1f)
#define BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_1_GEN2r_PSLL4_TO_VL_MAPPINGf_SET(r,f) (r).rx_x4_psll_to_vl_map_1_gen2[0]=(((r).rx_x4_psll_to_vl_map_1_gen2[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5)) | (31 << (16 + 5))
#define BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_1_GEN2r_PSLL3_TO_VL_MAPPINGf_GET(r) (((r).rx_x4_psll_to_vl_map_1_gen2[0]) & 0x1f)
#define BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_1_GEN2r_PSLL3_TO_VL_MAPPINGf_SET(r,f) (r).rx_x4_psll_to_vl_map_1_gen2[0]=(((r).rx_x4_psll_to_vl_map_1_gen2[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access RX_X4_PSLL_TO_VL_MAP_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_PSLL_TO_VL_MAP_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_1_GEN2r,(_r._rx_x4_psll_to_vl_map_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_PSLL_TO_VL_MAP_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_1_GEN2r,(_r._rx_x4_psll_to_vl_map_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_PSLL_TO_VL_MAP_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_1_GEN2r,(_r._rx_x4_psll_to_vl_map_1_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_PSLL_TO_VL_MAP_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_psll_to_vl_map_1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_PSLL_TO_VL_MAP_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_psll_to_vl_map_1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_PSLL_TO_VL_MAP_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_psll_to_vl_map_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_PSLL_TO_VL_MAP_1_GEN2r BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_1_GEN2r
#define RX_X4_PSLL_TO_VL_MAP_1_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_1_GEN2r_t RX_X4_PSLL_TO_VL_MAP_1_GEN2r_t;
#define RX_X4_PSLL_TO_VL_MAP_1_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_1_GEN2r_CLR
#define RX_X4_PSLL_TO_VL_MAP_1_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_1_GEN2r_SET
#define RX_X4_PSLL_TO_VL_MAP_1_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_1_GEN2r_GET
#define RX_X4_PSLL_TO_VL_MAP_1_GEN2r_PSLL4_TO_VL_MAPPINGf_GET BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_1_GEN2r_PSLL4_TO_VL_MAPPINGf_GET
#define RX_X4_PSLL_TO_VL_MAP_1_GEN2r_PSLL4_TO_VL_MAPPINGf_SET BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_1_GEN2r_PSLL4_TO_VL_MAPPINGf_SET
#define RX_X4_PSLL_TO_VL_MAP_1_GEN2r_PSLL3_TO_VL_MAPPINGf_GET BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_1_GEN2r_PSLL3_TO_VL_MAPPINGf_GET
#define RX_X4_PSLL_TO_VL_MAP_1_GEN2r_PSLL3_TO_VL_MAPPINGf_SET BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_1_GEN2r_PSLL3_TO_VL_MAPPINGf_SET
#define READ_RX_X4_PSLL_TO_VL_MAP_1_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_PSLL_TO_VL_MAP_1_GEN2r
#define WRITE_RX_X4_PSLL_TO_VL_MAP_1_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_PSLL_TO_VL_MAP_1_GEN2r
#define MODIFY_RX_X4_PSLL_TO_VL_MAP_1_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_PSLL_TO_VL_MAP_1_GEN2r
#define READLN_RX_X4_PSLL_TO_VL_MAP_1_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_PSLL_TO_VL_MAP_1_GEN2r
#define WRITELN_RX_X4_PSLL_TO_VL_MAP_1_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_PSLL_TO_VL_MAP_1_GEN2r
#define WRITEALL_RX_X4_PSLL_TO_VL_MAP_1_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_PSLL_TO_VL_MAP_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_PSLL_TO_VL_MAP_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_PRTPERRCTR_GEN2
 * BLOCKS:   RX_X4_STATUS0
 * REGADDR:  0xc15c
 * DESC:     PRTP Error Count Register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     PRTP_ERR_COUNT   Pseudo Random Test Pattern block error count
 */
#define BCMI_TSCF_XGXS_RX_X4_PRTPERRCTR_GEN2r (0x0000c15c | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_PRTPERRCTR_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_PRTPERRCTR_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_PRTPERRCTR_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_prtperrctr_gen2[1];
	uint32_t _rx_x4_prtperrctr_gen2;
} BCMI_TSCF_XGXS_RX_X4_PRTPERRCTR_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_PRTPERRCTR_GEN2r_CLR(r) (r).rx_x4_prtperrctr_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_PRTPERRCTR_GEN2r_SET(r,d) (r).rx_x4_prtperrctr_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_PRTPERRCTR_GEN2r_GET(r) (r).rx_x4_prtperrctr_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_PRTPERRCTR_GEN2r_PRTP_ERR_COUNTf_GET(r) (((r).rx_x4_prtperrctr_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_PRTPERRCTR_GEN2r_PRTP_ERR_COUNTf_SET(r,f) (r).rx_x4_prtperrctr_gen2[0]=(((r).rx_x4_prtperrctr_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_PRTPERRCTR_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_PRTPERRCTR_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_PRTPERRCTR_GEN2r,(_r._rx_x4_prtperrctr_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_PRTPERRCTR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_PRTPERRCTR_GEN2r,(_r._rx_x4_prtperrctr_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_PRTPERRCTR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_PRTPERRCTR_GEN2r,(_r._rx_x4_prtperrctr_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_PRTPERRCTR_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_PRTPERRCTR_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_prtperrctr_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_PRTPERRCTR_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_PRTPERRCTR_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_prtperrctr_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_PRTPERRCTR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_PRTPERRCTR_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_prtperrctr_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_PRTPERRCTR_GEN2r BCMI_TSCF_XGXS_RX_X4_PRTPERRCTR_GEN2r
#define RX_X4_PRTPERRCTR_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_PRTPERRCTR_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_PRTPERRCTR_GEN2r_t RX_X4_PRTPERRCTR_GEN2r_t;
#define RX_X4_PRTPERRCTR_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_PRTPERRCTR_GEN2r_CLR
#define RX_X4_PRTPERRCTR_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_PRTPERRCTR_GEN2r_SET
#define RX_X4_PRTPERRCTR_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_PRTPERRCTR_GEN2r_GET
#define RX_X4_PRTPERRCTR_GEN2r_PRTP_ERR_COUNTf_GET BCMI_TSCF_XGXS_RX_X4_PRTPERRCTR_GEN2r_PRTP_ERR_COUNTf_GET
#define RX_X4_PRTPERRCTR_GEN2r_PRTP_ERR_COUNTf_SET BCMI_TSCF_XGXS_RX_X4_PRTPERRCTR_GEN2r_PRTP_ERR_COUNTf_SET
#define READ_RX_X4_PRTPERRCTR_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_PRTPERRCTR_GEN2r
#define WRITE_RX_X4_PRTPERRCTR_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_PRTPERRCTR_GEN2r
#define MODIFY_RX_X4_PRTPERRCTR_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_PRTPERRCTR_GEN2r
#define READLN_RX_X4_PRTPERRCTR_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_PRTPERRCTR_GEN2r
#define WRITELN_RX_X4_PRTPERRCTR_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_PRTPERRCTR_GEN2r
#define WRITEALL_RX_X4_PRTPERRCTR_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_PRTPERRCTR_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_PRTPERRCTR_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_PRTPSTS_GEN2
 * BLOCKS:   RX_X4_STATUS0
 * REGADDR:  0xc15d
 * DESC:     PRTP Status Register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     PRTP_LOCK        Pseudo Random Test Pattern (PRTP) is locked
 */
#define BCMI_TSCF_XGXS_RX_X4_PRTPSTS_GEN2r (0x0000c15d | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_PRTPSTS_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_PRTPSTS_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_PRTPSTS_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_prtpsts_gen2[1];
	uint32_t _rx_x4_prtpsts_gen2;
} BCMI_TSCF_XGXS_RX_X4_PRTPSTS_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_PRTPSTS_GEN2r_CLR(r) (r).rx_x4_prtpsts_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_PRTPSTS_GEN2r_SET(r,d) (r).rx_x4_prtpsts_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_PRTPSTS_GEN2r_GET(r) (r).rx_x4_prtpsts_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_PRTPSTS_GEN2r_PRTP_LOCKf_GET(r) (((r).rx_x4_prtpsts_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_PRTPSTS_GEN2r_PRTP_LOCKf_SET(r,f) (r).rx_x4_prtpsts_gen2[0]=(((r).rx_x4_prtpsts_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_X4_PRTPSTS_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_PRTPSTS_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_PRTPSTS_GEN2r,(_r._rx_x4_prtpsts_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_PRTPSTS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_PRTPSTS_GEN2r,(_r._rx_x4_prtpsts_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_PRTPSTS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_PRTPSTS_GEN2r,(_r._rx_x4_prtpsts_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_PRTPSTS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_PRTPSTS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_prtpsts_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_PRTPSTS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_PRTPSTS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_prtpsts_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_PRTPSTS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_PRTPSTS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_prtpsts_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_PRTPSTS_GEN2r BCMI_TSCF_XGXS_RX_X4_PRTPSTS_GEN2r
#define RX_X4_PRTPSTS_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_PRTPSTS_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_PRTPSTS_GEN2r_t RX_X4_PRTPSTS_GEN2r_t;
#define RX_X4_PRTPSTS_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_PRTPSTS_GEN2r_CLR
#define RX_X4_PRTPSTS_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_PRTPSTS_GEN2r_SET
#define RX_X4_PRTPSTS_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_PRTPSTS_GEN2r_GET
#define RX_X4_PRTPSTS_GEN2r_PRTP_LOCKf_GET BCMI_TSCF_XGXS_RX_X4_PRTPSTS_GEN2r_PRTP_LOCKf_GET
#define RX_X4_PRTPSTS_GEN2r_PRTP_LOCKf_SET BCMI_TSCF_XGXS_RX_X4_PRTPSTS_GEN2r_PRTP_LOCKf_SET
#define READ_RX_X4_PRTPSTS_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_PRTPSTS_GEN2r
#define WRITE_RX_X4_PRTPSTS_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_PRTPSTS_GEN2r
#define MODIFY_RX_X4_PRTPSTS_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_PRTPSTS_GEN2r
#define READLN_RX_X4_PRTPSTS_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_PRTPSTS_GEN2r
#define WRITELN_RX_X4_PRTPSTS_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_PRTPSTS_GEN2r
#define WRITEALL_RX_X4_PRTPSTS_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_PRTPSTS_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_PRTPSTS_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_CL91_FC_STS_GEN2
 * BLOCKS:   RX_X4_STATUS0
 * REGADDR:  0xc15e
 * DESC:     CL91 Fiber Channel Status Register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL91_FC_SYNC_LIVE_STATE CL91 Fiber Channel alignment lock FSM state
 *     CL91_FC_SYNC_LATCHED_STATE CL91 Fiber Channel alignment lock FSM state
 *     CL91_FC_CW_SYNC_LIVE CL91 Fiber Channel sync state live
 *     CL91_FC_CW_SYNC_LL CL91 Fiber Channel sync state latched low
 *     CL91_FC_CW_SYNC_LH CL91 Fiber Channel sync state latched high
 *     CL91_FC_CW_GOOD_CNT CL91 Fiber Channel align lock FSM good codeword count.
 *     CL91_FC_CW_BAD_CNT CL91 Fiber Channel align lock FSM bad codeword count.
 */
#define BCMI_TSCF_XGXS_RX_X4_CL91_FC_STS_GEN2r (0x0000c15e | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_CL91_FC_STS_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL91_FC_STS_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_CL91_FC_STS_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_cl91_fc_sts_gen2[1];
	uint32_t _rx_x4_cl91_fc_sts_gen2;
} BCMI_TSCF_XGXS_RX_X4_CL91_FC_STS_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_CL91_FC_STS_GEN2r_CLR(r) (r).rx_x4_cl91_fc_sts_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_CL91_FC_STS_GEN2r_SET(r,d) (r).rx_x4_cl91_fc_sts_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_CL91_FC_STS_GEN2r_GET(r) (r).rx_x4_cl91_fc_sts_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_CL91_FC_STS_GEN2r_CL91_FC_CW_BAD_CNTf_GET(r) ((((r).rx_x4_cl91_fc_sts_gen2[0]) >> 11) & 0x3)
#define BCMI_TSCF_XGXS_RX_X4_CL91_FC_STS_GEN2r_CL91_FC_CW_BAD_CNTf_SET(r,f) (r).rx_x4_cl91_fc_sts_gen2[0]=(((r).rx_x4_cl91_fc_sts_gen2[0] & ~((uint32_t)0x3 << 11)) | ((((uint32_t)f) & 0x3) << 11)) | (3 << (16 + 11))
#define BCMI_TSCF_XGXS_RX_X4_CL91_FC_STS_GEN2r_CL91_FC_CW_GOOD_CNTf_GET(r) ((((r).rx_x4_cl91_fc_sts_gen2[0]) >> 9) & 0x3)
#define BCMI_TSCF_XGXS_RX_X4_CL91_FC_STS_GEN2r_CL91_FC_CW_GOOD_CNTf_SET(r,f) (r).rx_x4_cl91_fc_sts_gen2[0]=(((r).rx_x4_cl91_fc_sts_gen2[0] & ~((uint32_t)0x3 << 9)) | ((((uint32_t)f) & 0x3) << 9)) | (3 << (16 + 9))
#define BCMI_TSCF_XGXS_RX_X4_CL91_FC_STS_GEN2r_CL91_FC_CW_SYNC_LHf_GET(r) ((((r).rx_x4_cl91_fc_sts_gen2[0]) >> 8) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_CL91_FC_STS_GEN2r_CL91_FC_CW_SYNC_LHf_SET(r,f) (r).rx_x4_cl91_fc_sts_gen2[0]=(((r).rx_x4_cl91_fc_sts_gen2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_XGXS_RX_X4_CL91_FC_STS_GEN2r_CL91_FC_CW_SYNC_LLf_GET(r) ((((r).rx_x4_cl91_fc_sts_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_CL91_FC_STS_GEN2r_CL91_FC_CW_SYNC_LLf_SET(r,f) (r).rx_x4_cl91_fc_sts_gen2[0]=(((r).rx_x4_cl91_fc_sts_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_RX_X4_CL91_FC_STS_GEN2r_CL91_FC_CW_SYNC_LIVEf_GET(r) ((((r).rx_x4_cl91_fc_sts_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_CL91_FC_STS_GEN2r_CL91_FC_CW_SYNC_LIVEf_SET(r,f) (r).rx_x4_cl91_fc_sts_gen2[0]=(((r).rx_x4_cl91_fc_sts_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_RX_X4_CL91_FC_STS_GEN2r_CL91_FC_SYNC_LATCHED_STATEf_GET(r) ((((r).rx_x4_cl91_fc_sts_gen2[0]) >> 2) & 0xf)
#define BCMI_TSCF_XGXS_RX_X4_CL91_FC_STS_GEN2r_CL91_FC_SYNC_LATCHED_STATEf_SET(r,f) (r).rx_x4_cl91_fc_sts_gen2[0]=(((r).rx_x4_cl91_fc_sts_gen2[0] & ~((uint32_t)0xf << 2)) | ((((uint32_t)f) & 0xf) << 2)) | (15 << (16 + 2))
#define BCMI_TSCF_XGXS_RX_X4_CL91_FC_STS_GEN2r_CL91_FC_SYNC_LIVE_STATEf_GET(r) (((r).rx_x4_cl91_fc_sts_gen2[0]) & 0x3)
#define BCMI_TSCF_XGXS_RX_X4_CL91_FC_STS_GEN2r_CL91_FC_SYNC_LIVE_STATEf_SET(r,f) (r).rx_x4_cl91_fc_sts_gen2[0]=(((r).rx_x4_cl91_fc_sts_gen2[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access RX_X4_CL91_FC_STS_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_CL91_FC_STS_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FC_STS_GEN2r,(_r._rx_x4_cl91_fc_sts_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_CL91_FC_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FC_STS_GEN2r,(_r._rx_x4_cl91_fc_sts_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_CL91_FC_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FC_STS_GEN2r,(_r._rx_x4_cl91_fc_sts_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_CL91_FC_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FC_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_fc_sts_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_CL91_FC_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FC_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_fc_sts_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL91_FC_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FC_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl91_fc_sts_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL91_FC_STS_GEN2r BCMI_TSCF_XGXS_RX_X4_CL91_FC_STS_GEN2r
#define RX_X4_CL91_FC_STS_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_CL91_FC_STS_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_CL91_FC_STS_GEN2r_t RX_X4_CL91_FC_STS_GEN2r_t;
#define RX_X4_CL91_FC_STS_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_CL91_FC_STS_GEN2r_CLR
#define RX_X4_CL91_FC_STS_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_CL91_FC_STS_GEN2r_SET
#define RX_X4_CL91_FC_STS_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_CL91_FC_STS_GEN2r_GET
#define RX_X4_CL91_FC_STS_GEN2r_CL91_FC_CW_BAD_CNTf_GET BCMI_TSCF_XGXS_RX_X4_CL91_FC_STS_GEN2r_CL91_FC_CW_BAD_CNTf_GET
#define RX_X4_CL91_FC_STS_GEN2r_CL91_FC_CW_BAD_CNTf_SET BCMI_TSCF_XGXS_RX_X4_CL91_FC_STS_GEN2r_CL91_FC_CW_BAD_CNTf_SET
#define RX_X4_CL91_FC_STS_GEN2r_CL91_FC_CW_GOOD_CNTf_GET BCMI_TSCF_XGXS_RX_X4_CL91_FC_STS_GEN2r_CL91_FC_CW_GOOD_CNTf_GET
#define RX_X4_CL91_FC_STS_GEN2r_CL91_FC_CW_GOOD_CNTf_SET BCMI_TSCF_XGXS_RX_X4_CL91_FC_STS_GEN2r_CL91_FC_CW_GOOD_CNTf_SET
#define RX_X4_CL91_FC_STS_GEN2r_CL91_FC_CW_SYNC_LHf_GET BCMI_TSCF_XGXS_RX_X4_CL91_FC_STS_GEN2r_CL91_FC_CW_SYNC_LHf_GET
#define RX_X4_CL91_FC_STS_GEN2r_CL91_FC_CW_SYNC_LHf_SET BCMI_TSCF_XGXS_RX_X4_CL91_FC_STS_GEN2r_CL91_FC_CW_SYNC_LHf_SET
#define RX_X4_CL91_FC_STS_GEN2r_CL91_FC_CW_SYNC_LLf_GET BCMI_TSCF_XGXS_RX_X4_CL91_FC_STS_GEN2r_CL91_FC_CW_SYNC_LLf_GET
#define RX_X4_CL91_FC_STS_GEN2r_CL91_FC_CW_SYNC_LLf_SET BCMI_TSCF_XGXS_RX_X4_CL91_FC_STS_GEN2r_CL91_FC_CW_SYNC_LLf_SET
#define RX_X4_CL91_FC_STS_GEN2r_CL91_FC_CW_SYNC_LIVEf_GET BCMI_TSCF_XGXS_RX_X4_CL91_FC_STS_GEN2r_CL91_FC_CW_SYNC_LIVEf_GET
#define RX_X4_CL91_FC_STS_GEN2r_CL91_FC_CW_SYNC_LIVEf_SET BCMI_TSCF_XGXS_RX_X4_CL91_FC_STS_GEN2r_CL91_FC_CW_SYNC_LIVEf_SET
#define RX_X4_CL91_FC_STS_GEN2r_CL91_FC_SYNC_LATCHED_STATEf_GET BCMI_TSCF_XGXS_RX_X4_CL91_FC_STS_GEN2r_CL91_FC_SYNC_LATCHED_STATEf_GET
#define RX_X4_CL91_FC_STS_GEN2r_CL91_FC_SYNC_LATCHED_STATEf_SET BCMI_TSCF_XGXS_RX_X4_CL91_FC_STS_GEN2r_CL91_FC_SYNC_LATCHED_STATEf_SET
#define RX_X4_CL91_FC_STS_GEN2r_CL91_FC_SYNC_LIVE_STATEf_GET BCMI_TSCF_XGXS_RX_X4_CL91_FC_STS_GEN2r_CL91_FC_SYNC_LIVE_STATEf_GET
#define RX_X4_CL91_FC_STS_GEN2r_CL91_FC_SYNC_LIVE_STATEf_SET BCMI_TSCF_XGXS_RX_X4_CL91_FC_STS_GEN2r_CL91_FC_SYNC_LIVE_STATEf_SET
#define READ_RX_X4_CL91_FC_STS_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_CL91_FC_STS_GEN2r
#define WRITE_RX_X4_CL91_FC_STS_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_CL91_FC_STS_GEN2r
#define MODIFY_RX_X4_CL91_FC_STS_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_CL91_FC_STS_GEN2r
#define READLN_RX_X4_CL91_FC_STS_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_CL91_FC_STS_GEN2r
#define WRITELN_RX_X4_CL91_FC_STS_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_CL91_FC_STS_GEN2r
#define WRITEALL_RX_X4_CL91_FC_STS_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL91_FC_STS_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_CL91_FC_STS_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_PCS_LATCH_STS_1_GEN2
 * BLOCKS:   RX_X4_STATUS1
 * REGADDR:  0xc160
 * DESC:     Latched status of PCS Information
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     DESKEW_STATUS_LL Deskew status has transitioned low since last read.Deskew achieved (1), Deskew not achieved (0)Clear on read
 *     DESKEW_STATUS_LH Deskew status has transitioned high since last read.Deskew achieved (1), Deskew not achieved (0)Clear on read
 *     LINK_STATUS_LL   PER PORT: Link Status indicator has transitioned low since last readClear on read
 *     LINK_STATUS_LH   PER PORT: Link Status indicator has transitioned high since last readClear on read
 *     HI_BER_LL        HI_BER has transitioned low since last read.Clear on read
 *     HI_BER_LH        HI_BER has transitioned high since last read.Clear on read
 *     LPI_RECEIVED_LH  PER PORT: Low Power Indicator (LPI) has transitioned high since last read.Clear on read
 *     LINK_INTERRUPT_LH PER PORT: Link Interrupt (LI)  has transitioned high since last read.Clear on read
 *     REMOTE_FAULT_LH  PER PORT: Remote Fault (RF)  has transitioned high since last read.Clear on read
 *     LOCAL_FAULT_LH   PER PORT: Local Fault (LF) indicator has transitioned high since last read.Clear on read
 */
#define BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r (0x0000c160 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_PCS_LATCH_STS_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_pcs_latch_sts_1_gen2[1];
	uint32_t _rx_x4_pcs_latch_sts_1_gen2;
} BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r_CLR(r) (r).rx_x4_pcs_latch_sts_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r_SET(r,d) (r).rx_x4_pcs_latch_sts_1_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r_GET(r) (r).rx_x4_pcs_latch_sts_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r_LOCAL_FAULT_LHf_GET(r) ((((r).rx_x4_pcs_latch_sts_1_gen2[0]) >> 9) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r_LOCAL_FAULT_LHf_SET(r,f) (r).rx_x4_pcs_latch_sts_1_gen2[0]=(((r).rx_x4_pcs_latch_sts_1_gen2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r_REMOTE_FAULT_LHf_GET(r) ((((r).rx_x4_pcs_latch_sts_1_gen2[0]) >> 8) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r_REMOTE_FAULT_LHf_SET(r,f) (r).rx_x4_pcs_latch_sts_1_gen2[0]=(((r).rx_x4_pcs_latch_sts_1_gen2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r_LINK_INTERRUPT_LHf_GET(r) ((((r).rx_x4_pcs_latch_sts_1_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r_LINK_INTERRUPT_LHf_SET(r,f) (r).rx_x4_pcs_latch_sts_1_gen2[0]=(((r).rx_x4_pcs_latch_sts_1_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r_LPI_RECEIVED_LHf_GET(r) ((((r).rx_x4_pcs_latch_sts_1_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r_LPI_RECEIVED_LHf_SET(r,f) (r).rx_x4_pcs_latch_sts_1_gen2[0]=(((r).rx_x4_pcs_latch_sts_1_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r_HI_BER_LHf_GET(r) ((((r).rx_x4_pcs_latch_sts_1_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r_HI_BER_LHf_SET(r,f) (r).rx_x4_pcs_latch_sts_1_gen2[0]=(((r).rx_x4_pcs_latch_sts_1_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r_HI_BER_LLf_GET(r) ((((r).rx_x4_pcs_latch_sts_1_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r_HI_BER_LLf_SET(r,f) (r).rx_x4_pcs_latch_sts_1_gen2[0]=(((r).rx_x4_pcs_latch_sts_1_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r_LINK_STATUS_LHf_GET(r) ((((r).rx_x4_pcs_latch_sts_1_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r_LINK_STATUS_LHf_SET(r,f) (r).rx_x4_pcs_latch_sts_1_gen2[0]=(((r).rx_x4_pcs_latch_sts_1_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r_LINK_STATUS_LLf_GET(r) ((((r).rx_x4_pcs_latch_sts_1_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r_LINK_STATUS_LLf_SET(r,f) (r).rx_x4_pcs_latch_sts_1_gen2[0]=(((r).rx_x4_pcs_latch_sts_1_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r_DESKEW_STATUS_LHf_GET(r) ((((r).rx_x4_pcs_latch_sts_1_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r_DESKEW_STATUS_LHf_SET(r,f) (r).rx_x4_pcs_latch_sts_1_gen2[0]=(((r).rx_x4_pcs_latch_sts_1_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r_DESKEW_STATUS_LLf_GET(r) (((r).rx_x4_pcs_latch_sts_1_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r_DESKEW_STATUS_LLf_SET(r,f) (r).rx_x4_pcs_latch_sts_1_gen2[0]=(((r).rx_x4_pcs_latch_sts_1_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_X4_PCS_LATCH_STS_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_PCS_LATCH_STS_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r,(_r._rx_x4_pcs_latch_sts_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_PCS_LATCH_STS_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r,(_r._rx_x4_pcs_latch_sts_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_PCS_LATCH_STS_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r,(_r._rx_x4_pcs_latch_sts_1_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_PCS_LATCH_STS_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_pcs_latch_sts_1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_PCS_LATCH_STS_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_pcs_latch_sts_1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_PCS_LATCH_STS_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_pcs_latch_sts_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_PCS_LATCH_STS_1_GEN2r BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r
#define RX_X4_PCS_LATCH_STS_1_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r_t RX_X4_PCS_LATCH_STS_1_GEN2r_t;
#define RX_X4_PCS_LATCH_STS_1_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r_CLR
#define RX_X4_PCS_LATCH_STS_1_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r_SET
#define RX_X4_PCS_LATCH_STS_1_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r_GET
#define RX_X4_PCS_LATCH_STS_1_GEN2r_LOCAL_FAULT_LHf_GET BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r_LOCAL_FAULT_LHf_GET
#define RX_X4_PCS_LATCH_STS_1_GEN2r_LOCAL_FAULT_LHf_SET BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r_LOCAL_FAULT_LHf_SET
#define RX_X4_PCS_LATCH_STS_1_GEN2r_REMOTE_FAULT_LHf_GET BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r_REMOTE_FAULT_LHf_GET
#define RX_X4_PCS_LATCH_STS_1_GEN2r_REMOTE_FAULT_LHf_SET BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r_REMOTE_FAULT_LHf_SET
#define RX_X4_PCS_LATCH_STS_1_GEN2r_LINK_INTERRUPT_LHf_GET BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r_LINK_INTERRUPT_LHf_GET
#define RX_X4_PCS_LATCH_STS_1_GEN2r_LINK_INTERRUPT_LHf_SET BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r_LINK_INTERRUPT_LHf_SET
#define RX_X4_PCS_LATCH_STS_1_GEN2r_LPI_RECEIVED_LHf_GET BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r_LPI_RECEIVED_LHf_GET
#define RX_X4_PCS_LATCH_STS_1_GEN2r_LPI_RECEIVED_LHf_SET BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r_LPI_RECEIVED_LHf_SET
#define RX_X4_PCS_LATCH_STS_1_GEN2r_HI_BER_LHf_GET BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r_HI_BER_LHf_GET
#define RX_X4_PCS_LATCH_STS_1_GEN2r_HI_BER_LHf_SET BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r_HI_BER_LHf_SET
#define RX_X4_PCS_LATCH_STS_1_GEN2r_HI_BER_LLf_GET BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r_HI_BER_LLf_GET
#define RX_X4_PCS_LATCH_STS_1_GEN2r_HI_BER_LLf_SET BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r_HI_BER_LLf_SET
#define RX_X4_PCS_LATCH_STS_1_GEN2r_LINK_STATUS_LHf_GET BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r_LINK_STATUS_LHf_GET
#define RX_X4_PCS_LATCH_STS_1_GEN2r_LINK_STATUS_LHf_SET BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r_LINK_STATUS_LHf_SET
#define RX_X4_PCS_LATCH_STS_1_GEN2r_LINK_STATUS_LLf_GET BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r_LINK_STATUS_LLf_GET
#define RX_X4_PCS_LATCH_STS_1_GEN2r_LINK_STATUS_LLf_SET BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r_LINK_STATUS_LLf_SET
#define RX_X4_PCS_LATCH_STS_1_GEN2r_DESKEW_STATUS_LHf_GET BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r_DESKEW_STATUS_LHf_GET
#define RX_X4_PCS_LATCH_STS_1_GEN2r_DESKEW_STATUS_LHf_SET BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r_DESKEW_STATUS_LHf_SET
#define RX_X4_PCS_LATCH_STS_1_GEN2r_DESKEW_STATUS_LLf_GET BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r_DESKEW_STATUS_LLf_GET
#define RX_X4_PCS_LATCH_STS_1_GEN2r_DESKEW_STATUS_LLf_SET BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r_DESKEW_STATUS_LLf_SET
#define READ_RX_X4_PCS_LATCH_STS_1_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_PCS_LATCH_STS_1_GEN2r
#define WRITE_RX_X4_PCS_LATCH_STS_1_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_PCS_LATCH_STS_1_GEN2r
#define MODIFY_RX_X4_PCS_LATCH_STS_1_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_PCS_LATCH_STS_1_GEN2r
#define READLN_RX_X4_PCS_LATCH_STS_1_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_PCS_LATCH_STS_1_GEN2r
#define WRITELN_RX_X4_PCS_LATCH_STS_1_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_PCS_LATCH_STS_1_GEN2r
#define WRITEALL_RX_X4_PCS_LATCH_STS_1_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_PCS_LATCH_STS_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_PCS_LATCH_STS_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_PCS_LIVE_STS_1_GEN2
 * BLOCKS:   RX_X4_STATUS1
 * REGADDR:  0xc161
 * DESC:     LiveLatched status of PCS Information
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     DESKEW_STATUS    Deskew achieved (1), Deskew not achieved (0)
 *     LINK_STATUS      PER PORT: Live Link Status indicator
 *     HI_BER           HI_BER indicator
 *     LPI_RECEIVED     Live LPI indicator
 *     LINK_INTERRUPT   Live link interrupt indicator
 *     REMOTE_FAULT     Live remote fault indicator
 *     LOCAL_FAULT      Live local fault indicator
 */
#define BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_1_GEN2r (0x0000c161 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_PCS_LIVE_STS_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_1_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_pcs_live_sts_1_gen2[1];
	uint32_t _rx_x4_pcs_live_sts_1_gen2;
} BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_1_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_1_GEN2r_CLR(r) (r).rx_x4_pcs_live_sts_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_1_GEN2r_SET(r,d) (r).rx_x4_pcs_live_sts_1_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_1_GEN2r_GET(r) (r).rx_x4_pcs_live_sts_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_1_GEN2r_LOCAL_FAULTf_GET(r) ((((r).rx_x4_pcs_live_sts_1_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_1_GEN2r_LOCAL_FAULTf_SET(r,f) (r).rx_x4_pcs_live_sts_1_gen2[0]=(((r).rx_x4_pcs_live_sts_1_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_1_GEN2r_REMOTE_FAULTf_GET(r) ((((r).rx_x4_pcs_live_sts_1_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_1_GEN2r_REMOTE_FAULTf_SET(r,f) (r).rx_x4_pcs_live_sts_1_gen2[0]=(((r).rx_x4_pcs_live_sts_1_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_1_GEN2r_LINK_INTERRUPTf_GET(r) ((((r).rx_x4_pcs_live_sts_1_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_1_GEN2r_LINK_INTERRUPTf_SET(r,f) (r).rx_x4_pcs_live_sts_1_gen2[0]=(((r).rx_x4_pcs_live_sts_1_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_1_GEN2r_LPI_RECEIVEDf_GET(r) ((((r).rx_x4_pcs_live_sts_1_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_1_GEN2r_LPI_RECEIVEDf_SET(r,f) (r).rx_x4_pcs_live_sts_1_gen2[0]=(((r).rx_x4_pcs_live_sts_1_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_1_GEN2r_HI_BERf_GET(r) ((((r).rx_x4_pcs_live_sts_1_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_1_GEN2r_HI_BERf_SET(r,f) (r).rx_x4_pcs_live_sts_1_gen2[0]=(((r).rx_x4_pcs_live_sts_1_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_1_GEN2r_LINK_STATUSf_GET(r) ((((r).rx_x4_pcs_live_sts_1_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_1_GEN2r_LINK_STATUSf_SET(r,f) (r).rx_x4_pcs_live_sts_1_gen2[0]=(((r).rx_x4_pcs_live_sts_1_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_1_GEN2r_DESKEW_STATUSf_GET(r) (((r).rx_x4_pcs_live_sts_1_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_1_GEN2r_DESKEW_STATUSf_SET(r,f) (r).rx_x4_pcs_live_sts_1_gen2[0]=(((r).rx_x4_pcs_live_sts_1_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_X4_PCS_LIVE_STS_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_PCS_LIVE_STS_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_1_GEN2r,(_r._rx_x4_pcs_live_sts_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_PCS_LIVE_STS_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_1_GEN2r,(_r._rx_x4_pcs_live_sts_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_PCS_LIVE_STS_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_1_GEN2r,(_r._rx_x4_pcs_live_sts_1_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_PCS_LIVE_STS_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_pcs_live_sts_1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_PCS_LIVE_STS_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_pcs_live_sts_1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_PCS_LIVE_STS_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_pcs_live_sts_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_PCS_LIVE_STS_1_GEN2r BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_1_GEN2r
#define RX_X4_PCS_LIVE_STS_1_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_1_GEN2r_t RX_X4_PCS_LIVE_STS_1_GEN2r_t;
#define RX_X4_PCS_LIVE_STS_1_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_1_GEN2r_CLR
#define RX_X4_PCS_LIVE_STS_1_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_1_GEN2r_SET
#define RX_X4_PCS_LIVE_STS_1_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_1_GEN2r_GET
#define RX_X4_PCS_LIVE_STS_1_GEN2r_LOCAL_FAULTf_GET BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_1_GEN2r_LOCAL_FAULTf_GET
#define RX_X4_PCS_LIVE_STS_1_GEN2r_LOCAL_FAULTf_SET BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_1_GEN2r_LOCAL_FAULTf_SET
#define RX_X4_PCS_LIVE_STS_1_GEN2r_REMOTE_FAULTf_GET BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_1_GEN2r_REMOTE_FAULTf_GET
#define RX_X4_PCS_LIVE_STS_1_GEN2r_REMOTE_FAULTf_SET BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_1_GEN2r_REMOTE_FAULTf_SET
#define RX_X4_PCS_LIVE_STS_1_GEN2r_LINK_INTERRUPTf_GET BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_1_GEN2r_LINK_INTERRUPTf_GET
#define RX_X4_PCS_LIVE_STS_1_GEN2r_LINK_INTERRUPTf_SET BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_1_GEN2r_LINK_INTERRUPTf_SET
#define RX_X4_PCS_LIVE_STS_1_GEN2r_LPI_RECEIVEDf_GET BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_1_GEN2r_LPI_RECEIVEDf_GET
#define RX_X4_PCS_LIVE_STS_1_GEN2r_LPI_RECEIVEDf_SET BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_1_GEN2r_LPI_RECEIVEDf_SET
#define RX_X4_PCS_LIVE_STS_1_GEN2r_HI_BERf_GET BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_1_GEN2r_HI_BERf_GET
#define RX_X4_PCS_LIVE_STS_1_GEN2r_HI_BERf_SET BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_1_GEN2r_HI_BERf_SET
#define RX_X4_PCS_LIVE_STS_1_GEN2r_LINK_STATUSf_GET BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_1_GEN2r_LINK_STATUSf_GET
#define RX_X4_PCS_LIVE_STS_1_GEN2r_LINK_STATUSf_SET BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_1_GEN2r_LINK_STATUSf_SET
#define RX_X4_PCS_LIVE_STS_1_GEN2r_DESKEW_STATUSf_GET BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_1_GEN2r_DESKEW_STATUSf_GET
#define RX_X4_PCS_LIVE_STS_1_GEN2r_DESKEW_STATUSf_SET BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_1_GEN2r_DESKEW_STATUSf_SET
#define READ_RX_X4_PCS_LIVE_STS_1_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_PCS_LIVE_STS_1_GEN2r
#define WRITE_RX_X4_PCS_LIVE_STS_1_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_PCS_LIVE_STS_1_GEN2r
#define MODIFY_RX_X4_PCS_LIVE_STS_1_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_PCS_LIVE_STS_1_GEN2r
#define READLN_RX_X4_PCS_LIVE_STS_1_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_PCS_LIVE_STS_1_GEN2r
#define WRITELN_RX_X4_PCS_LIVE_STS_1_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_PCS_LIVE_STS_1_GEN2r
#define WRITEALL_RX_X4_PCS_LIVE_STS_1_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_PCS_LIVE_STS_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_PCS_LIVE_STS_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_DEC_STS_0_GEN2
 * BLOCKS:   RX_X4_STATUS1
 * REGADDR:  0xc162
 * DESC:     decode status 0 register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     BERMON_CURRENT_STATE BER Monitor fsm - current state
 */
#define BCMI_TSCF_XGXS_RX_X4_DEC_STS_0_GEN2r (0x0000c162 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_DEC_STS_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_DEC_STS_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_DEC_STS_0_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_dec_sts_0_gen2[1];
	uint32_t _rx_x4_dec_sts_0_gen2;
} BCMI_TSCF_XGXS_RX_X4_DEC_STS_0_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_DEC_STS_0_GEN2r_CLR(r) (r).rx_x4_dec_sts_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_DEC_STS_0_GEN2r_SET(r,d) (r).rx_x4_dec_sts_0_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_DEC_STS_0_GEN2r_GET(r) (r).rx_x4_dec_sts_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_DEC_STS_0_GEN2r_BERMON_CURRENT_STATEf_GET(r) (((r).rx_x4_dec_sts_0_gen2[0]) & 0x1f)
#define BCMI_TSCF_XGXS_RX_X4_DEC_STS_0_GEN2r_BERMON_CURRENT_STATEf_SET(r,f) (r).rx_x4_dec_sts_0_gen2[0]=(((r).rx_x4_dec_sts_0_gen2[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access RX_X4_DEC_STS_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_DEC_STS_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_DEC_STS_0_GEN2r,(_r._rx_x4_dec_sts_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_DEC_STS_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_DEC_STS_0_GEN2r,(_r._rx_x4_dec_sts_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_DEC_STS_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_DEC_STS_0_GEN2r,(_r._rx_x4_dec_sts_0_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_DEC_STS_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_DEC_STS_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_dec_sts_0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_DEC_STS_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_DEC_STS_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_dec_sts_0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_DEC_STS_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_DEC_STS_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_dec_sts_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_DEC_STS_0_GEN2r BCMI_TSCF_XGXS_RX_X4_DEC_STS_0_GEN2r
#define RX_X4_DEC_STS_0_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_DEC_STS_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_DEC_STS_0_GEN2r_t RX_X4_DEC_STS_0_GEN2r_t;
#define RX_X4_DEC_STS_0_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_DEC_STS_0_GEN2r_CLR
#define RX_X4_DEC_STS_0_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_DEC_STS_0_GEN2r_SET
#define RX_X4_DEC_STS_0_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_DEC_STS_0_GEN2r_GET
#define RX_X4_DEC_STS_0_GEN2r_BERMON_CURRENT_STATEf_GET BCMI_TSCF_XGXS_RX_X4_DEC_STS_0_GEN2r_BERMON_CURRENT_STATEf_GET
#define RX_X4_DEC_STS_0_GEN2r_BERMON_CURRENT_STATEf_SET BCMI_TSCF_XGXS_RX_X4_DEC_STS_0_GEN2r_BERMON_CURRENT_STATEf_SET
#define READ_RX_X4_DEC_STS_0_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_DEC_STS_0_GEN2r
#define WRITE_RX_X4_DEC_STS_0_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_DEC_STS_0_GEN2r
#define MODIFY_RX_X4_DEC_STS_0_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_DEC_STS_0_GEN2r
#define READLN_RX_X4_DEC_STS_0_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_DEC_STS_0_GEN2r
#define WRITELN_RX_X4_DEC_STS_0_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_DEC_STS_0_GEN2r
#define WRITEALL_RX_X4_DEC_STS_0_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_DEC_STS_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_DEC_STS_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_DEC_STS_1_GEN2
 * BLOCKS:   RX_X4_STATUS1
 * REGADDR:  0xc163
 * DESC:     decode status 1 register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BERMON_HISTORY_STATE BER Monitor fsm - latched states - latched on entry
 *     CL49_RXSM_HISTORY_STATE Receive SM - latched states - latched on entry
 */
#define BCMI_TSCF_XGXS_RX_X4_DEC_STS_1_GEN2r (0x0000c163 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_DEC_STS_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_DEC_STS_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_DEC_STS_1_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_dec_sts_1_gen2[1];
	uint32_t _rx_x4_dec_sts_1_gen2;
} BCMI_TSCF_XGXS_RX_X4_DEC_STS_1_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_DEC_STS_1_GEN2r_CLR(r) (r).rx_x4_dec_sts_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_DEC_STS_1_GEN2r_SET(r,d) (r).rx_x4_dec_sts_1_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_DEC_STS_1_GEN2r_GET(r) (r).rx_x4_dec_sts_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_DEC_STS_1_GEN2r_CL49_RXSM_HISTORY_STATEf_GET(r) ((((r).rx_x4_dec_sts_1_gen2[0]) >> 5) & 0xff)
#define BCMI_TSCF_XGXS_RX_X4_DEC_STS_1_GEN2r_CL49_RXSM_HISTORY_STATEf_SET(r,f) (r).rx_x4_dec_sts_1_gen2[0]=(((r).rx_x4_dec_sts_1_gen2[0] & ~((uint32_t)0xff << 5)) | ((((uint32_t)f) & 0xff) << 5)) | (255 << (16 + 5))
#define BCMI_TSCF_XGXS_RX_X4_DEC_STS_1_GEN2r_BERMON_HISTORY_STATEf_GET(r) (((r).rx_x4_dec_sts_1_gen2[0]) & 0x1f)
#define BCMI_TSCF_XGXS_RX_X4_DEC_STS_1_GEN2r_BERMON_HISTORY_STATEf_SET(r,f) (r).rx_x4_dec_sts_1_gen2[0]=(((r).rx_x4_dec_sts_1_gen2[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access RX_X4_DEC_STS_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_DEC_STS_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_DEC_STS_1_GEN2r,(_r._rx_x4_dec_sts_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_DEC_STS_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_DEC_STS_1_GEN2r,(_r._rx_x4_dec_sts_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_DEC_STS_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_DEC_STS_1_GEN2r,(_r._rx_x4_dec_sts_1_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_DEC_STS_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_DEC_STS_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_dec_sts_1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_DEC_STS_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_DEC_STS_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_dec_sts_1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_DEC_STS_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_DEC_STS_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_dec_sts_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_DEC_STS_1_GEN2r BCMI_TSCF_XGXS_RX_X4_DEC_STS_1_GEN2r
#define RX_X4_DEC_STS_1_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_DEC_STS_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_DEC_STS_1_GEN2r_t RX_X4_DEC_STS_1_GEN2r_t;
#define RX_X4_DEC_STS_1_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_DEC_STS_1_GEN2r_CLR
#define RX_X4_DEC_STS_1_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_DEC_STS_1_GEN2r_SET
#define RX_X4_DEC_STS_1_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_DEC_STS_1_GEN2r_GET
#define RX_X4_DEC_STS_1_GEN2r_CL49_RXSM_HISTORY_STATEf_GET BCMI_TSCF_XGXS_RX_X4_DEC_STS_1_GEN2r_CL49_RXSM_HISTORY_STATEf_GET
#define RX_X4_DEC_STS_1_GEN2r_CL49_RXSM_HISTORY_STATEf_SET BCMI_TSCF_XGXS_RX_X4_DEC_STS_1_GEN2r_CL49_RXSM_HISTORY_STATEf_SET
#define RX_X4_DEC_STS_1_GEN2r_BERMON_HISTORY_STATEf_GET BCMI_TSCF_XGXS_RX_X4_DEC_STS_1_GEN2r_BERMON_HISTORY_STATEf_GET
#define RX_X4_DEC_STS_1_GEN2r_BERMON_HISTORY_STATEf_SET BCMI_TSCF_XGXS_RX_X4_DEC_STS_1_GEN2r_BERMON_HISTORY_STATEf_SET
#define READ_RX_X4_DEC_STS_1_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_DEC_STS_1_GEN2r
#define WRITE_RX_X4_DEC_STS_1_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_DEC_STS_1_GEN2r
#define MODIFY_RX_X4_DEC_STS_1_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_DEC_STS_1_GEN2r
#define READLN_RX_X4_DEC_STS_1_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_DEC_STS_1_GEN2r
#define WRITELN_RX_X4_DEC_STS_1_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_DEC_STS_1_GEN2r
#define WRITEALL_RX_X4_DEC_STS_1_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_DEC_STS_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_DEC_STS_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_DEC_STS_2_GEN2
 * BLOCKS:   RX_X4_STATUS1
 * REGADDR:  0xc164
 * DESC:     decode status 2 register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CL49_RXSM_CURRENT_STATE Recieve SM - current state
 *     CL49_R_TYPE_CODED Receive SM - current r_type
 */
#define BCMI_TSCF_XGXS_RX_X4_DEC_STS_2_GEN2r (0x0000c164 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_DEC_STS_2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_DEC_STS_2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_DEC_STS_2_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_dec_sts_2_gen2[1];
	uint32_t _rx_x4_dec_sts_2_gen2;
} BCMI_TSCF_XGXS_RX_X4_DEC_STS_2_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_DEC_STS_2_GEN2r_CLR(r) (r).rx_x4_dec_sts_2_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_DEC_STS_2_GEN2r_SET(r,d) (r).rx_x4_dec_sts_2_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_DEC_STS_2_GEN2r_GET(r) (r).rx_x4_dec_sts_2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_DEC_STS_2_GEN2r_CL49_R_TYPE_CODEDf_GET(r) ((((r).rx_x4_dec_sts_2_gen2[0]) >> 8) & 0xf)
#define BCMI_TSCF_XGXS_RX_X4_DEC_STS_2_GEN2r_CL49_R_TYPE_CODEDf_SET(r,f) (r).rx_x4_dec_sts_2_gen2[0]=(((r).rx_x4_dec_sts_2_gen2[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_XGXS_RX_X4_DEC_STS_2_GEN2r_CL49_RXSM_CURRENT_STATEf_GET(r) (((r).rx_x4_dec_sts_2_gen2[0]) & 0xff)
#define BCMI_TSCF_XGXS_RX_X4_DEC_STS_2_GEN2r_CL49_RXSM_CURRENT_STATEf_SET(r,f) (r).rx_x4_dec_sts_2_gen2[0]=(((r).rx_x4_dec_sts_2_gen2[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access RX_X4_DEC_STS_2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_DEC_STS_2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_DEC_STS_2_GEN2r,(_r._rx_x4_dec_sts_2_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_DEC_STS_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_DEC_STS_2_GEN2r,(_r._rx_x4_dec_sts_2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_DEC_STS_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_DEC_STS_2_GEN2r,(_r._rx_x4_dec_sts_2_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_DEC_STS_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_DEC_STS_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_dec_sts_2_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_DEC_STS_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_DEC_STS_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_dec_sts_2_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_DEC_STS_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_DEC_STS_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_dec_sts_2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_DEC_STS_2_GEN2r BCMI_TSCF_XGXS_RX_X4_DEC_STS_2_GEN2r
#define RX_X4_DEC_STS_2_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_DEC_STS_2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_DEC_STS_2_GEN2r_t RX_X4_DEC_STS_2_GEN2r_t;
#define RX_X4_DEC_STS_2_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_DEC_STS_2_GEN2r_CLR
#define RX_X4_DEC_STS_2_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_DEC_STS_2_GEN2r_SET
#define RX_X4_DEC_STS_2_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_DEC_STS_2_GEN2r_GET
#define RX_X4_DEC_STS_2_GEN2r_CL49_R_TYPE_CODEDf_GET BCMI_TSCF_XGXS_RX_X4_DEC_STS_2_GEN2r_CL49_R_TYPE_CODEDf_GET
#define RX_X4_DEC_STS_2_GEN2r_CL49_R_TYPE_CODEDf_SET BCMI_TSCF_XGXS_RX_X4_DEC_STS_2_GEN2r_CL49_R_TYPE_CODEDf_SET
#define RX_X4_DEC_STS_2_GEN2r_CL49_RXSM_CURRENT_STATEf_GET BCMI_TSCF_XGXS_RX_X4_DEC_STS_2_GEN2r_CL49_RXSM_CURRENT_STATEf_GET
#define RX_X4_DEC_STS_2_GEN2r_CL49_RXSM_CURRENT_STATEf_SET BCMI_TSCF_XGXS_RX_X4_DEC_STS_2_GEN2r_CL49_RXSM_CURRENT_STATEf_SET
#define READ_RX_X4_DEC_STS_2_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_DEC_STS_2_GEN2r
#define WRITE_RX_X4_DEC_STS_2_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_DEC_STS_2_GEN2r
#define MODIFY_RX_X4_DEC_STS_2_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_DEC_STS_2_GEN2r
#define READLN_RX_X4_DEC_STS_2_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_DEC_STS_2_GEN2r
#define WRITELN_RX_X4_DEC_STS_2_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_DEC_STS_2_GEN2r
#define WRITEALL_RX_X4_DEC_STS_2_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_DEC_STS_2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_DEC_STS_2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_DEC_STS_3_GEN2
 * BLOCKS:   RX_X4_STATUS1
 * REGADDR:  0xc165
 * DESC:     decode status 3 register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     IEEE_ERRORED_BLOCKS Contains the count of the errored blocks decoded by the cl49/cl82 decoders.For cl82, it contains the lower 8 bits of the 22 bit value. The upper 14 bits are present in the cl82_errored_blocks_ho register.
 *     CL49_BER_COUNT   For cl49 - This field is the 6 bit BER count.It counts the number of times BER_BAD_SH state is entered.The counter saturates at 6'h3F and clears on read.
 */
#define BCMI_TSCF_XGXS_RX_X4_DEC_STS_3_GEN2r (0x0000c165 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_DEC_STS_3_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_DEC_STS_3_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_DEC_STS_3_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_dec_sts_3_gen2[1];
	uint32_t _rx_x4_dec_sts_3_gen2;
} BCMI_TSCF_XGXS_RX_X4_DEC_STS_3_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_DEC_STS_3_GEN2r_CLR(r) (r).rx_x4_dec_sts_3_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_DEC_STS_3_GEN2r_SET(r,d) (r).rx_x4_dec_sts_3_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_DEC_STS_3_GEN2r_GET(r) (r).rx_x4_dec_sts_3_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_DEC_STS_3_GEN2r_CL49_BER_COUNTf_GET(r) ((((r).rx_x4_dec_sts_3_gen2[0]) >> 8) & 0x3f)
#define BCMI_TSCF_XGXS_RX_X4_DEC_STS_3_GEN2r_CL49_BER_COUNTf_SET(r,f) (r).rx_x4_dec_sts_3_gen2[0]=(((r).rx_x4_dec_sts_3_gen2[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8)) | (63 << (16 + 8))
#define BCMI_TSCF_XGXS_RX_X4_DEC_STS_3_GEN2r_IEEE_ERRORED_BLOCKSf_GET(r) (((r).rx_x4_dec_sts_3_gen2[0]) & 0xff)
#define BCMI_TSCF_XGXS_RX_X4_DEC_STS_3_GEN2r_IEEE_ERRORED_BLOCKSf_SET(r,f) (r).rx_x4_dec_sts_3_gen2[0]=(((r).rx_x4_dec_sts_3_gen2[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access RX_X4_DEC_STS_3_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_DEC_STS_3_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_DEC_STS_3_GEN2r,(_r._rx_x4_dec_sts_3_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_DEC_STS_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_DEC_STS_3_GEN2r,(_r._rx_x4_dec_sts_3_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_DEC_STS_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_DEC_STS_3_GEN2r,(_r._rx_x4_dec_sts_3_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_DEC_STS_3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_DEC_STS_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_dec_sts_3_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_DEC_STS_3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_DEC_STS_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_dec_sts_3_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_DEC_STS_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_DEC_STS_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_dec_sts_3_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_DEC_STS_3_GEN2r BCMI_TSCF_XGXS_RX_X4_DEC_STS_3_GEN2r
#define RX_X4_DEC_STS_3_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_DEC_STS_3_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_DEC_STS_3_GEN2r_t RX_X4_DEC_STS_3_GEN2r_t;
#define RX_X4_DEC_STS_3_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_DEC_STS_3_GEN2r_CLR
#define RX_X4_DEC_STS_3_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_DEC_STS_3_GEN2r_SET
#define RX_X4_DEC_STS_3_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_DEC_STS_3_GEN2r_GET
#define RX_X4_DEC_STS_3_GEN2r_CL49_BER_COUNTf_GET BCMI_TSCF_XGXS_RX_X4_DEC_STS_3_GEN2r_CL49_BER_COUNTf_GET
#define RX_X4_DEC_STS_3_GEN2r_CL49_BER_COUNTf_SET BCMI_TSCF_XGXS_RX_X4_DEC_STS_3_GEN2r_CL49_BER_COUNTf_SET
#define RX_X4_DEC_STS_3_GEN2r_IEEE_ERRORED_BLOCKSf_GET BCMI_TSCF_XGXS_RX_X4_DEC_STS_3_GEN2r_IEEE_ERRORED_BLOCKSf_GET
#define RX_X4_DEC_STS_3_GEN2r_IEEE_ERRORED_BLOCKSf_SET BCMI_TSCF_XGXS_RX_X4_DEC_STS_3_GEN2r_IEEE_ERRORED_BLOCKSf_SET
#define READ_RX_X4_DEC_STS_3_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_DEC_STS_3_GEN2r
#define WRITE_RX_X4_DEC_STS_3_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_DEC_STS_3_GEN2r
#define MODIFY_RX_X4_DEC_STS_3_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_DEC_STS_3_GEN2r
#define READLN_RX_X4_DEC_STS_3_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_DEC_STS_3_GEN2r
#define WRITELN_RX_X4_DEC_STS_3_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_DEC_STS_3_GEN2r
#define WRITEALL_RX_X4_DEC_STS_3_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_DEC_STS_3_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_DEC_STS_3_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_CL36_SYNCACQ_STS_0_GEN2
 * BLOCKS:   RX_X4_STATUS1
 * REGADDR:  0xc168
 * DESC:     cl36rx_syncacq_status_0 register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CL36RX_SYNCACQ_STATE_CODED_PER_LN cl36 sync acquisition fsm - next state4'd0 - LOSS_OF_SYNC4'd1 - COMMA_DET_14'd2 - ACQ_SYNC_14'd3 - COMMA_DET_24'd4 - ACQ_SYNC_24'd5 - COMMA_DET_34'd6 - SYNC_ACQ_14'd7 - SYNC_ACQ_24'd8 - SYNC_ACQ_34'd9 - SYNC_ACQ_44'd10 - SYNC_ACQ_2A4'd11 - SYNC_ACQ_3A4'd12 - SYNC_ACQ_4A
 */
#define BCMI_TSCF_XGXS_RX_X4_CL36_SYNCACQ_STS_0_GEN2r (0x0000c168 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_CL36_SYNCACQ_STS_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL36_SYNCACQ_STS_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_CL36_SYNCACQ_STS_0_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_cl36_syncacq_sts_0_gen2[1];
	uint32_t _rx_x4_cl36_syncacq_sts_0_gen2;
} BCMI_TSCF_XGXS_RX_X4_CL36_SYNCACQ_STS_0_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_CL36_SYNCACQ_STS_0_GEN2r_CLR(r) (r).rx_x4_cl36_syncacq_sts_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_CL36_SYNCACQ_STS_0_GEN2r_SET(r,d) (r).rx_x4_cl36_syncacq_sts_0_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_CL36_SYNCACQ_STS_0_GEN2r_GET(r) (r).rx_x4_cl36_syncacq_sts_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_CL36_SYNCACQ_STS_0_GEN2r_CL36RX_SYNCACQ_STATE_CODED_PER_LNf_GET(r) (((r).rx_x4_cl36_syncacq_sts_0_gen2[0]) & 0xf)
#define BCMI_TSCF_XGXS_RX_X4_CL36_SYNCACQ_STS_0_GEN2r_CL36RX_SYNCACQ_STATE_CODED_PER_LNf_SET(r,f) (r).rx_x4_cl36_syncacq_sts_0_gen2[0]=(((r).rx_x4_cl36_syncacq_sts_0_gen2[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access RX_X4_CL36_SYNCACQ_STS_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_CL36_SYNCACQ_STS_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL36_SYNCACQ_STS_0_GEN2r,(_r._rx_x4_cl36_syncacq_sts_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_CL36_SYNCACQ_STS_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL36_SYNCACQ_STS_0_GEN2r,(_r._rx_x4_cl36_syncacq_sts_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_CL36_SYNCACQ_STS_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL36_SYNCACQ_STS_0_GEN2r,(_r._rx_x4_cl36_syncacq_sts_0_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_CL36_SYNCACQ_STS_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL36_SYNCACQ_STS_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl36_syncacq_sts_0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_CL36_SYNCACQ_STS_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL36_SYNCACQ_STS_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl36_syncacq_sts_0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL36_SYNCACQ_STS_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL36_SYNCACQ_STS_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl36_syncacq_sts_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL36_SYNCACQ_STS_0_GEN2r BCMI_TSCF_XGXS_RX_X4_CL36_SYNCACQ_STS_0_GEN2r
#define RX_X4_CL36_SYNCACQ_STS_0_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_CL36_SYNCACQ_STS_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_CL36_SYNCACQ_STS_0_GEN2r_t RX_X4_CL36_SYNCACQ_STS_0_GEN2r_t;
#define RX_X4_CL36_SYNCACQ_STS_0_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_CL36_SYNCACQ_STS_0_GEN2r_CLR
#define RX_X4_CL36_SYNCACQ_STS_0_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_CL36_SYNCACQ_STS_0_GEN2r_SET
#define RX_X4_CL36_SYNCACQ_STS_0_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_CL36_SYNCACQ_STS_0_GEN2r_GET
#define RX_X4_CL36_SYNCACQ_STS_0_GEN2r_CL36RX_SYNCACQ_STATE_CODED_PER_LNf_GET BCMI_TSCF_XGXS_RX_X4_CL36_SYNCACQ_STS_0_GEN2r_CL36RX_SYNCACQ_STATE_CODED_PER_LNf_GET
#define RX_X4_CL36_SYNCACQ_STS_0_GEN2r_CL36RX_SYNCACQ_STATE_CODED_PER_LNf_SET BCMI_TSCF_XGXS_RX_X4_CL36_SYNCACQ_STS_0_GEN2r_CL36RX_SYNCACQ_STATE_CODED_PER_LNf_SET
#define READ_RX_X4_CL36_SYNCACQ_STS_0_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_CL36_SYNCACQ_STS_0_GEN2r
#define WRITE_RX_X4_CL36_SYNCACQ_STS_0_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_CL36_SYNCACQ_STS_0_GEN2r
#define MODIFY_RX_X4_CL36_SYNCACQ_STS_0_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_CL36_SYNCACQ_STS_0_GEN2r
#define READLN_RX_X4_CL36_SYNCACQ_STS_0_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_CL36_SYNCACQ_STS_0_GEN2r
#define WRITELN_RX_X4_CL36_SYNCACQ_STS_0_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_CL36_SYNCACQ_STS_0_GEN2r
#define WRITEALL_RX_X4_CL36_SYNCACQ_STS_0_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL36_SYNCACQ_STS_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_CL36_SYNCACQ_STS_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_CL36_SYNCACQ_STS_1_GEN2
 * BLOCKS:   RX_X4_STATUS1
 * REGADDR:  0xc169
 * DESC:     cl36rx_syncacq_status_1 register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL36RX_SYNCACQ_HIS_STATE_PER_LN bit 0 - LOSS_OF_SYNCbit 1 - COMMA_DET_1bit 2 - ACQ_SYNC_1bit 3 - COMMA_DET_2bit 4 - ACQ_SYNC_2bit 5 - COMMA_DET_3bit 6 - SYNC_ACQ_1bit 7 - SYNC_ACQ_2bit 8 - SYNC_ACQ_3bit 9 - SYNC_ACQ_4bit 10 - SYNC_ACQ_2Abit 11 - SYNC_ACQ_3Abit 12 - SYNC_ACQ_4A
 */
#define BCMI_TSCF_XGXS_RX_X4_CL36_SYNCACQ_STS_1_GEN2r (0x0000c169 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_CL36_SYNCACQ_STS_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL36_SYNCACQ_STS_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_CL36_SYNCACQ_STS_1_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_cl36_syncacq_sts_1_gen2[1];
	uint32_t _rx_x4_cl36_syncacq_sts_1_gen2;
} BCMI_TSCF_XGXS_RX_X4_CL36_SYNCACQ_STS_1_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_CL36_SYNCACQ_STS_1_GEN2r_CLR(r) (r).rx_x4_cl36_syncacq_sts_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_CL36_SYNCACQ_STS_1_GEN2r_SET(r,d) (r).rx_x4_cl36_syncacq_sts_1_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_CL36_SYNCACQ_STS_1_GEN2r_GET(r) (r).rx_x4_cl36_syncacq_sts_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_CL36_SYNCACQ_STS_1_GEN2r_CL36RX_SYNCACQ_HIS_STATE_PER_LNf_GET(r) (((r).rx_x4_cl36_syncacq_sts_1_gen2[0]) & 0x1fff)
#define BCMI_TSCF_XGXS_RX_X4_CL36_SYNCACQ_STS_1_GEN2r_CL36RX_SYNCACQ_HIS_STATE_PER_LNf_SET(r,f) (r).rx_x4_cl36_syncacq_sts_1_gen2[0]=(((r).rx_x4_cl36_syncacq_sts_1_gen2[0] & ~((uint32_t)0x1fff)) | (((uint32_t)f) & 0x1fff)) | (0x1fff << 16)

/*
 * These macros can be used to access RX_X4_CL36_SYNCACQ_STS_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_CL36_SYNCACQ_STS_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL36_SYNCACQ_STS_1_GEN2r,(_r._rx_x4_cl36_syncacq_sts_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_CL36_SYNCACQ_STS_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL36_SYNCACQ_STS_1_GEN2r,(_r._rx_x4_cl36_syncacq_sts_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_CL36_SYNCACQ_STS_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL36_SYNCACQ_STS_1_GEN2r,(_r._rx_x4_cl36_syncacq_sts_1_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_CL36_SYNCACQ_STS_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL36_SYNCACQ_STS_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl36_syncacq_sts_1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_CL36_SYNCACQ_STS_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL36_SYNCACQ_STS_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl36_syncacq_sts_1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL36_SYNCACQ_STS_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL36_SYNCACQ_STS_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl36_syncacq_sts_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL36_SYNCACQ_STS_1_GEN2r BCMI_TSCF_XGXS_RX_X4_CL36_SYNCACQ_STS_1_GEN2r
#define RX_X4_CL36_SYNCACQ_STS_1_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_CL36_SYNCACQ_STS_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_CL36_SYNCACQ_STS_1_GEN2r_t RX_X4_CL36_SYNCACQ_STS_1_GEN2r_t;
#define RX_X4_CL36_SYNCACQ_STS_1_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_CL36_SYNCACQ_STS_1_GEN2r_CLR
#define RX_X4_CL36_SYNCACQ_STS_1_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_CL36_SYNCACQ_STS_1_GEN2r_SET
#define RX_X4_CL36_SYNCACQ_STS_1_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_CL36_SYNCACQ_STS_1_GEN2r_GET
#define RX_X4_CL36_SYNCACQ_STS_1_GEN2r_CL36RX_SYNCACQ_HIS_STATE_PER_LNf_GET BCMI_TSCF_XGXS_RX_X4_CL36_SYNCACQ_STS_1_GEN2r_CL36RX_SYNCACQ_HIS_STATE_PER_LNf_GET
#define RX_X4_CL36_SYNCACQ_STS_1_GEN2r_CL36RX_SYNCACQ_HIS_STATE_PER_LNf_SET BCMI_TSCF_XGXS_RX_X4_CL36_SYNCACQ_STS_1_GEN2r_CL36RX_SYNCACQ_HIS_STATE_PER_LNf_SET
#define READ_RX_X4_CL36_SYNCACQ_STS_1_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_CL36_SYNCACQ_STS_1_GEN2r
#define WRITE_RX_X4_CL36_SYNCACQ_STS_1_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_CL36_SYNCACQ_STS_1_GEN2r
#define MODIFY_RX_X4_CL36_SYNCACQ_STS_1_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_CL36_SYNCACQ_STS_1_GEN2r
#define READLN_RX_X4_CL36_SYNCACQ_STS_1_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_CL36_SYNCACQ_STS_1_GEN2r
#define WRITELN_RX_X4_CL36_SYNCACQ_STS_1_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_CL36_SYNCACQ_STS_1_GEN2r
#define WRITEALL_RX_X4_CL36_SYNCACQ_STS_1_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL36_SYNCACQ_STS_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_CL36_SYNCACQ_STS_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_CL36_BERCNT_GEN2
 * BLOCKS:   RX_X4_STATUS1
 * REGADDR:  0xc16a
 * DESC:     cl36rx_bercount register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL36RX_BER_COUNT_PER_LN For cl36 - This field is the 8b/10b symbol error counter that increments1. upon detecting symbol error (due to invalid symbol or disparity error)2. when comma aligns on the wrong boundaryThe error conditions are detected only when cl36 sync_status is asserted.The counter saturates at 8'hFF and clears on read.
 */
#define BCMI_TSCF_XGXS_RX_X4_CL36_BERCNT_GEN2r (0x0000c16a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_CL36_BERCNT_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL36_BERCNT_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_CL36_BERCNT_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_cl36_bercnt_gen2[1];
	uint32_t _rx_x4_cl36_bercnt_gen2;
} BCMI_TSCF_XGXS_RX_X4_CL36_BERCNT_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_CL36_BERCNT_GEN2r_CLR(r) (r).rx_x4_cl36_bercnt_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_CL36_BERCNT_GEN2r_SET(r,d) (r).rx_x4_cl36_bercnt_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_CL36_BERCNT_GEN2r_GET(r) (r).rx_x4_cl36_bercnt_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_CL36_BERCNT_GEN2r_CL36RX_BER_COUNT_PER_LNf_GET(r) (((r).rx_x4_cl36_bercnt_gen2[0]) & 0xff)
#define BCMI_TSCF_XGXS_RX_X4_CL36_BERCNT_GEN2r_CL36RX_BER_COUNT_PER_LNf_SET(r,f) (r).rx_x4_cl36_bercnt_gen2[0]=(((r).rx_x4_cl36_bercnt_gen2[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access RX_X4_CL36_BERCNT_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_CL36_BERCNT_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL36_BERCNT_GEN2r,(_r._rx_x4_cl36_bercnt_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_CL36_BERCNT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL36_BERCNT_GEN2r,(_r._rx_x4_cl36_bercnt_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_CL36_BERCNT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL36_BERCNT_GEN2r,(_r._rx_x4_cl36_bercnt_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_CL36_BERCNT_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL36_BERCNT_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl36_bercnt_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_CL36_BERCNT_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL36_BERCNT_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl36_bercnt_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL36_BERCNT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL36_BERCNT_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl36_bercnt_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL36_BERCNT_GEN2r BCMI_TSCF_XGXS_RX_X4_CL36_BERCNT_GEN2r
#define RX_X4_CL36_BERCNT_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_CL36_BERCNT_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_CL36_BERCNT_GEN2r_t RX_X4_CL36_BERCNT_GEN2r_t;
#define RX_X4_CL36_BERCNT_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_CL36_BERCNT_GEN2r_CLR
#define RX_X4_CL36_BERCNT_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_CL36_BERCNT_GEN2r_SET
#define RX_X4_CL36_BERCNT_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_CL36_BERCNT_GEN2r_GET
#define RX_X4_CL36_BERCNT_GEN2r_CL36RX_BER_COUNT_PER_LNf_GET BCMI_TSCF_XGXS_RX_X4_CL36_BERCNT_GEN2r_CL36RX_BER_COUNT_PER_LNf_GET
#define RX_X4_CL36_BERCNT_GEN2r_CL36RX_BER_COUNT_PER_LNf_SET BCMI_TSCF_XGXS_RX_X4_CL36_BERCNT_GEN2r_CL36RX_BER_COUNT_PER_LNf_SET
#define READ_RX_X4_CL36_BERCNT_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_CL36_BERCNT_GEN2r
#define WRITE_RX_X4_CL36_BERCNT_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_CL36_BERCNT_GEN2r
#define MODIFY_RX_X4_CL36_BERCNT_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_CL36_BERCNT_GEN2r
#define READLN_RX_X4_CL36_BERCNT_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_CL36_BERCNT_GEN2r
#define WRITELN_RX_X4_CL36_BERCNT_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_CL36_BERCNT_GEN2r
#define WRITEALL_RX_X4_CL36_BERCNT_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL36_BERCNT_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_CL36_BERCNT_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2
 * BLOCKS:   RX_X4_STATUS1
 * REGADDR:  0xc16b
 * DESC:     IEEE and MSA detction FSM live state
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MSA_IEEE_DET_STATE [0] : IEEE mode detection mode[1] : MSA mode detection mode[2] : Resolution is done see resolved bit to see what is resolved.
 *     RESOLVED_25_MODE 00: No resolution (either not enabled or still looking for lock)01: IEEE mode is resolved10: MSA mode is resolved11: Illegal value, It should never achieve this value.
 */
#define BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r (0x0000c16b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_ieee_25g_parllel_det_sts_gen2[1];
	uint32_t _rx_x4_ieee_25g_parllel_det_sts_gen2;
} BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r_CLR(r) (r).rx_x4_ieee_25g_parllel_det_sts_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r_SET(r,d) (r).rx_x4_ieee_25g_parllel_det_sts_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r_GET(r) (r).rx_x4_ieee_25g_parllel_det_sts_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r_RESOLVED_25_MODEf_GET(r) ((((r).rx_x4_ieee_25g_parllel_det_sts_gen2[0]) >> 3) & 0x3)
#define BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r_RESOLVED_25_MODEf_SET(r,f) (r).rx_x4_ieee_25g_parllel_det_sts_gen2[0]=(((r).rx_x4_ieee_25g_parllel_det_sts_gen2[0] & ~((uint32_t)0x3 << 3)) | ((((uint32_t)f) & 0x3) << 3)) | (3 << (16 + 3))
#define BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r_MSA_IEEE_DET_STATEf_GET(r) (((r).rx_x4_ieee_25g_parllel_det_sts_gen2[0]) & 0x7)
#define BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r_MSA_IEEE_DET_STATEf_SET(r,f) (r).rx_x4_ieee_25g_parllel_det_sts_gen2[0]=(((r).rx_x4_ieee_25g_parllel_det_sts_gen2[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r,(_r._rx_x4_ieee_25g_parllel_det_sts_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r,(_r._rx_x4_ieee_25g_parllel_det_sts_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r,(_r._rx_x4_ieee_25g_parllel_det_sts_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ieee_25g_parllel_det_sts_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ieee_25g_parllel_det_sts_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_ieee_25g_parllel_det_sts_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r
#define RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r_t RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r_t;
#define RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r_CLR
#define RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r_SET
#define RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r_GET
#define RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r_RESOLVED_25_MODEf_GET BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r_RESOLVED_25_MODEf_GET
#define RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r_RESOLVED_25_MODEf_SET BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r_RESOLVED_25_MODEf_SET
#define RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r_MSA_IEEE_DET_STATEf_GET BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r_MSA_IEEE_DET_STATEf_GET
#define RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r_MSA_IEEE_DET_STATEf_SET BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r_MSA_IEEE_DET_STATEf_SET
#define READ_RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r
#define WRITE_RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r
#define MODIFY_RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r
#define READLN_RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r
#define WRITELN_RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r
#define WRITEALL_RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_IEEE_25G_PARLLEL_DET_STS_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_CL49_SCRIDLE_TEST_ERR_GEN2
 * BLOCKS:   RX_X4_STATUS1
 * REGADDR:  0xc16c
 * DESC:     CL49 Scrambled IDLE test Error register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL49_SCRIDLE_TEST_ERR CL49 Scrambled IDLE Test Error counter
 */
#define BCMI_TSCF_XGXS_RX_X4_CL49_SCRIDLE_TEST_ERR_GEN2r (0x0000c16c | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_CL49_SCRIDLE_TEST_ERR_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL49_SCRIDLE_TEST_ERR_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_CL49_SCRIDLE_TEST_ERR_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_cl49_scridle_test_err_gen2[1];
	uint32_t _rx_x4_cl49_scridle_test_err_gen2;
} BCMI_TSCF_XGXS_RX_X4_CL49_SCRIDLE_TEST_ERR_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_CL49_SCRIDLE_TEST_ERR_GEN2r_CLR(r) (r).rx_x4_cl49_scridle_test_err_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_CL49_SCRIDLE_TEST_ERR_GEN2r_SET(r,d) (r).rx_x4_cl49_scridle_test_err_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_CL49_SCRIDLE_TEST_ERR_GEN2r_GET(r) (r).rx_x4_cl49_scridle_test_err_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_CL49_SCRIDLE_TEST_ERR_GEN2r_CL49_SCRIDLE_TEST_ERRf_GET(r) (((r).rx_x4_cl49_scridle_test_err_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_CL49_SCRIDLE_TEST_ERR_GEN2r_CL49_SCRIDLE_TEST_ERRf_SET(r,f) (r).rx_x4_cl49_scridle_test_err_gen2[0]=(((r).rx_x4_cl49_scridle_test_err_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_CL49_SCRIDLE_TEST_ERR_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_CL49_SCRIDLE_TEST_ERR_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL49_SCRIDLE_TEST_ERR_GEN2r,(_r._rx_x4_cl49_scridle_test_err_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_CL49_SCRIDLE_TEST_ERR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL49_SCRIDLE_TEST_ERR_GEN2r,(_r._rx_x4_cl49_scridle_test_err_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_CL49_SCRIDLE_TEST_ERR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL49_SCRIDLE_TEST_ERR_GEN2r,(_r._rx_x4_cl49_scridle_test_err_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_CL49_SCRIDLE_TEST_ERR_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL49_SCRIDLE_TEST_ERR_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl49_scridle_test_err_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_CL49_SCRIDLE_TEST_ERR_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL49_SCRIDLE_TEST_ERR_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl49_scridle_test_err_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL49_SCRIDLE_TEST_ERR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL49_SCRIDLE_TEST_ERR_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl49_scridle_test_err_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL49_SCRIDLE_TEST_ERR_GEN2r BCMI_TSCF_XGXS_RX_X4_CL49_SCRIDLE_TEST_ERR_GEN2r
#define RX_X4_CL49_SCRIDLE_TEST_ERR_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_CL49_SCRIDLE_TEST_ERR_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_CL49_SCRIDLE_TEST_ERR_GEN2r_t RX_X4_CL49_SCRIDLE_TEST_ERR_GEN2r_t;
#define RX_X4_CL49_SCRIDLE_TEST_ERR_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_CL49_SCRIDLE_TEST_ERR_GEN2r_CLR
#define RX_X4_CL49_SCRIDLE_TEST_ERR_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_CL49_SCRIDLE_TEST_ERR_GEN2r_SET
#define RX_X4_CL49_SCRIDLE_TEST_ERR_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_CL49_SCRIDLE_TEST_ERR_GEN2r_GET
#define RX_X4_CL49_SCRIDLE_TEST_ERR_GEN2r_CL49_SCRIDLE_TEST_ERRf_GET BCMI_TSCF_XGXS_RX_X4_CL49_SCRIDLE_TEST_ERR_GEN2r_CL49_SCRIDLE_TEST_ERRf_GET
#define RX_X4_CL49_SCRIDLE_TEST_ERR_GEN2r_CL49_SCRIDLE_TEST_ERRf_SET BCMI_TSCF_XGXS_RX_X4_CL49_SCRIDLE_TEST_ERR_GEN2r_CL49_SCRIDLE_TEST_ERRf_SET
#define READ_RX_X4_CL49_SCRIDLE_TEST_ERR_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_CL49_SCRIDLE_TEST_ERR_GEN2r
#define WRITE_RX_X4_CL49_SCRIDLE_TEST_ERR_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_CL49_SCRIDLE_TEST_ERR_GEN2r
#define MODIFY_RX_X4_CL49_SCRIDLE_TEST_ERR_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_CL49_SCRIDLE_TEST_ERR_GEN2r
#define READLN_RX_X4_CL49_SCRIDLE_TEST_ERR_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_CL49_SCRIDLE_TEST_ERR_GEN2r
#define WRITELN_RX_X4_CL49_SCRIDLE_TEST_ERR_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_CL49_SCRIDLE_TEST_ERR_GEN2r
#define WRITEALL_RX_X4_CL49_SCRIDLE_TEST_ERR_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL49_SCRIDLE_TEST_ERR_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_CL49_SCRIDLE_TEST_ERR_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2
 * BLOCKS:   RX_X4_STATUS2
 * REGADDR:  0xc170
 * DESC:     AM FSM latched status for pseudo-logical lane 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AM_LOCK_HIS_STATE_PSLL_0 Alignment marker history states - per logical lane for psll 0clear on read
 *     AMRKR_SPACING_ERR_LATCH_MUX_PSLL_0 align marker spacing error detected - per logical lane for psll 0clear on read
 */
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r (0x0000c170 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_cl82_am_latch_sts_psll_0_gen2[1];
	uint32_t _rx_x4_cl82_am_latch_sts_psll_0_gen2;
} BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r_CLR(r) (r).rx_x4_cl82_am_latch_sts_psll_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r_SET(r,d) (r).rx_x4_cl82_am_latch_sts_psll_0_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r_GET(r) (r).rx_x4_cl82_am_latch_sts_psll_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_0f_GET(r) ((((r).rx_x4_cl82_am_latch_sts_psll_0_gen2[0]) >> 10) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_0f_SET(r,f) (r).rx_x4_cl82_am_latch_sts_psll_0_gen2[0]=(((r).rx_x4_cl82_am_latch_sts_psll_0_gen2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r_AM_LOCK_HIS_STATE_PSLL_0f_GET(r) (((r).rx_x4_cl82_am_latch_sts_psll_0_gen2[0]) & 0x3ff)
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r_AM_LOCK_HIS_STATE_PSLL_0f_SET(r,f) (r).rx_x4_cl82_am_latch_sts_psll_0_gen2[0]=(((r).rx_x4_cl82_am_latch_sts_psll_0_gen2[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff)) | (0x3ff << 16)

/*
 * These macros can be used to access RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r,(_r._rx_x4_cl82_am_latch_sts_psll_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r,(_r._rx_x4_cl82_am_latch_sts_psll_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r,(_r._rx_x4_cl82_am_latch_sts_psll_0_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl82_am_latch_sts_psll_0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl82_am_latch_sts_psll_0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl82_am_latch_sts_psll_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r
#define RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r_t RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r_t;
#define RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r_CLR
#define RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r_SET
#define RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r_GET
#define RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_0f_GET BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_0f_GET
#define RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_0f_SET BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_0f_SET
#define RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r_AM_LOCK_HIS_STATE_PSLL_0f_GET BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r_AM_LOCK_HIS_STATE_PSLL_0f_GET
#define RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r_AM_LOCK_HIS_STATE_PSLL_0f_SET BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r_AM_LOCK_HIS_STATE_PSLL_0f_SET
#define READ_RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r
#define WRITE_RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r
#define MODIFY_RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r
#define READLN_RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r
#define WRITELN_RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r
#define WRITEALL_RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2
 * BLOCKS:   RX_X4_STATUS2
 * REGADDR:  0xc171
 * DESC:     AM FSM latched status for pseudo-logical lane 1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AM_LOCK_HIS_STATE_PSLL_1 Alignment marker history states - per logical lane for psll 1clear on read
 *     AMRKR_SPACING_ERR_LATCH_MUX_PSLL_1 align marker spacing error detected - per logical lane for psll 1clear on read
 */
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r (0x0000c171 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_cl82_am_latch_sts_psll_1_gen2[1];
	uint32_t _rx_x4_cl82_am_latch_sts_psll_1_gen2;
} BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r_CLR(r) (r).rx_x4_cl82_am_latch_sts_psll_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r_SET(r,d) (r).rx_x4_cl82_am_latch_sts_psll_1_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r_GET(r) (r).rx_x4_cl82_am_latch_sts_psll_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_1f_GET(r) ((((r).rx_x4_cl82_am_latch_sts_psll_1_gen2[0]) >> 10) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_1f_SET(r,f) (r).rx_x4_cl82_am_latch_sts_psll_1_gen2[0]=(((r).rx_x4_cl82_am_latch_sts_psll_1_gen2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r_AM_LOCK_HIS_STATE_PSLL_1f_GET(r) (((r).rx_x4_cl82_am_latch_sts_psll_1_gen2[0]) & 0x3ff)
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r_AM_LOCK_HIS_STATE_PSLL_1f_SET(r,f) (r).rx_x4_cl82_am_latch_sts_psll_1_gen2[0]=(((r).rx_x4_cl82_am_latch_sts_psll_1_gen2[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff)) | (0x3ff << 16)

/*
 * These macros can be used to access RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r,(_r._rx_x4_cl82_am_latch_sts_psll_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r,(_r._rx_x4_cl82_am_latch_sts_psll_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r,(_r._rx_x4_cl82_am_latch_sts_psll_1_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl82_am_latch_sts_psll_1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl82_am_latch_sts_psll_1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl82_am_latch_sts_psll_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r
#define RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r_t RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r_t;
#define RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r_CLR
#define RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r_SET
#define RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r_GET
#define RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_1f_GET BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_1f_GET
#define RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_1f_SET BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_1f_SET
#define RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r_AM_LOCK_HIS_STATE_PSLL_1f_GET BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r_AM_LOCK_HIS_STATE_PSLL_1f_GET
#define RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r_AM_LOCK_HIS_STATE_PSLL_1f_SET BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r_AM_LOCK_HIS_STATE_PSLL_1f_SET
#define READ_RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r
#define WRITE_RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r
#define MODIFY_RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r
#define READLN_RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r
#define WRITELN_RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r
#define WRITEALL_RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2
 * BLOCKS:   RX_X4_STATUS2
 * REGADDR:  0xc172
 * DESC:     AM FSM latched status for pseudo-logical lane 2
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AM_LOCK_HIS_STATE_PSLL_2 Alignment marker history states - per logical lane for psll 2clear on read
 *     AMRKR_SPACING_ERR_LATCH_MUX_PSLL_2 align marker spacing error detected - per logical lane for psll 2clear on read
 */
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r (0x0000c172 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_cl82_am_latch_sts_psll_2_gen2[1];
	uint32_t _rx_x4_cl82_am_latch_sts_psll_2_gen2;
} BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r_CLR(r) (r).rx_x4_cl82_am_latch_sts_psll_2_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r_SET(r,d) (r).rx_x4_cl82_am_latch_sts_psll_2_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r_GET(r) (r).rx_x4_cl82_am_latch_sts_psll_2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_2f_GET(r) ((((r).rx_x4_cl82_am_latch_sts_psll_2_gen2[0]) >> 10) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_2f_SET(r,f) (r).rx_x4_cl82_am_latch_sts_psll_2_gen2[0]=(((r).rx_x4_cl82_am_latch_sts_psll_2_gen2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r_AM_LOCK_HIS_STATE_PSLL_2f_GET(r) (((r).rx_x4_cl82_am_latch_sts_psll_2_gen2[0]) & 0x3ff)
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r_AM_LOCK_HIS_STATE_PSLL_2f_SET(r,f) (r).rx_x4_cl82_am_latch_sts_psll_2_gen2[0]=(((r).rx_x4_cl82_am_latch_sts_psll_2_gen2[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff)) | (0x3ff << 16)

/*
 * These macros can be used to access RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r,(_r._rx_x4_cl82_am_latch_sts_psll_2_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r,(_r._rx_x4_cl82_am_latch_sts_psll_2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r,(_r._rx_x4_cl82_am_latch_sts_psll_2_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl82_am_latch_sts_psll_2_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl82_am_latch_sts_psll_2_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl82_am_latch_sts_psll_2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r
#define RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r_t RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r_t;
#define RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r_CLR
#define RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r_SET
#define RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r_GET
#define RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_2f_GET BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_2f_GET
#define RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_2f_SET BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_2f_SET
#define RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r_AM_LOCK_HIS_STATE_PSLL_2f_GET BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r_AM_LOCK_HIS_STATE_PSLL_2f_GET
#define RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r_AM_LOCK_HIS_STATE_PSLL_2f_SET BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r_AM_LOCK_HIS_STATE_PSLL_2f_SET
#define READ_RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r
#define WRITE_RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r
#define MODIFY_RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r
#define READLN_RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r
#define WRITELN_RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r
#define WRITEALL_RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2
 * BLOCKS:   RX_X4_STATUS2
 * REGADDR:  0xc173
 * DESC:     AM FSM latched status for pseudo-logical lane 3
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AM_LOCK_HIS_STATE_PSLL_3 Alignment marker history states - per logical lane for psll 3clear on read
 *     AMRKR_SPACING_ERR_LATCH_MUX_PSLL_3 align marker spacing error detected - per logical lane for psll 3clear on read
 */
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r (0x0000c173 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_cl82_am_latch_sts_psll_3_gen2[1];
	uint32_t _rx_x4_cl82_am_latch_sts_psll_3_gen2;
} BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r_CLR(r) (r).rx_x4_cl82_am_latch_sts_psll_3_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r_SET(r,d) (r).rx_x4_cl82_am_latch_sts_psll_3_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r_GET(r) (r).rx_x4_cl82_am_latch_sts_psll_3_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_3f_GET(r) ((((r).rx_x4_cl82_am_latch_sts_psll_3_gen2[0]) >> 10) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_3f_SET(r,f) (r).rx_x4_cl82_am_latch_sts_psll_3_gen2[0]=(((r).rx_x4_cl82_am_latch_sts_psll_3_gen2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r_AM_LOCK_HIS_STATE_PSLL_3f_GET(r) (((r).rx_x4_cl82_am_latch_sts_psll_3_gen2[0]) & 0x3ff)
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r_AM_LOCK_HIS_STATE_PSLL_3f_SET(r,f) (r).rx_x4_cl82_am_latch_sts_psll_3_gen2[0]=(((r).rx_x4_cl82_am_latch_sts_psll_3_gen2[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff)) | (0x3ff << 16)

/*
 * These macros can be used to access RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r,(_r._rx_x4_cl82_am_latch_sts_psll_3_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r,(_r._rx_x4_cl82_am_latch_sts_psll_3_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r,(_r._rx_x4_cl82_am_latch_sts_psll_3_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl82_am_latch_sts_psll_3_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl82_am_latch_sts_psll_3_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl82_am_latch_sts_psll_3_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r
#define RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r_t RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r_t;
#define RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r_CLR
#define RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r_SET
#define RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r_GET
#define RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_3f_GET BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_3f_GET
#define RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_3f_SET BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_3f_SET
#define RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r_AM_LOCK_HIS_STATE_PSLL_3f_GET BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r_AM_LOCK_HIS_STATE_PSLL_3f_GET
#define RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r_AM_LOCK_HIS_STATE_PSLL_3f_SET BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r_AM_LOCK_HIS_STATE_PSLL_3f_SET
#define READ_RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r
#define WRITE_RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r
#define MODIFY_RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r
#define READLN_RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r
#define WRITELN_RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r
#define WRITEALL_RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_3_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2
 * BLOCKS:   RX_X4_STATUS2
 * REGADDR:  0xc174
 * DESC:     AM FSM latched status for pseudo-logical lane 4
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AM_LOCK_HIS_STATE_PSLL_4 Alignment marker history states - per logical lane for psll 4clear on read
 *     AMRKR_SPACING_ERR_LATCH_MUX_PSLL_4 align marker spacing error detected - per logical lane for psll 4clear on read
 */
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r (0x0000c174 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_cl82_am_latch_sts_psll_4_gen2[1];
	uint32_t _rx_x4_cl82_am_latch_sts_psll_4_gen2;
} BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r_CLR(r) (r).rx_x4_cl82_am_latch_sts_psll_4_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r_SET(r,d) (r).rx_x4_cl82_am_latch_sts_psll_4_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r_GET(r) (r).rx_x4_cl82_am_latch_sts_psll_4_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_4f_GET(r) ((((r).rx_x4_cl82_am_latch_sts_psll_4_gen2[0]) >> 10) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_4f_SET(r,f) (r).rx_x4_cl82_am_latch_sts_psll_4_gen2[0]=(((r).rx_x4_cl82_am_latch_sts_psll_4_gen2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r_AM_LOCK_HIS_STATE_PSLL_4f_GET(r) (((r).rx_x4_cl82_am_latch_sts_psll_4_gen2[0]) & 0x3ff)
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r_AM_LOCK_HIS_STATE_PSLL_4f_SET(r,f) (r).rx_x4_cl82_am_latch_sts_psll_4_gen2[0]=(((r).rx_x4_cl82_am_latch_sts_psll_4_gen2[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff)) | (0x3ff << 16)

/*
 * These macros can be used to access RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r,(_r._rx_x4_cl82_am_latch_sts_psll_4_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r,(_r._rx_x4_cl82_am_latch_sts_psll_4_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r,(_r._rx_x4_cl82_am_latch_sts_psll_4_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl82_am_latch_sts_psll_4_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl82_am_latch_sts_psll_4_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl82_am_latch_sts_psll_4_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r
#define RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r_t RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r_t;
#define RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r_CLR
#define RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r_SET
#define RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r_GET
#define RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_4f_GET BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_4f_GET
#define RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_4f_SET BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r_AMRKR_SPACING_ERR_LATCH_MUX_PSLL_4f_SET
#define RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r_AM_LOCK_HIS_STATE_PSLL_4f_GET BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r_AM_LOCK_HIS_STATE_PSLL_4f_GET
#define RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r_AM_LOCK_HIS_STATE_PSLL_4f_SET BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r_AM_LOCK_HIS_STATE_PSLL_4f_SET
#define READ_RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r
#define WRITE_RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r
#define MODIFY_RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r
#define READLN_RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r
#define WRITELN_RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r
#define WRITEALL_RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_CL82_AM_LATCH_STS_PSLL_4_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_CL82_AM_LIVE_STS_PSLL_0_GEN2
 * BLOCKS:   RX_X4_STATUS2
 * REGADDR:  0xc175
 * DESC:     AM FSM live status for pseudo-logical lane 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     AM_LOCK_STATE_PSLL_0 Alignment marker current states - per logical lane for psll 0
 */
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_0_GEN2r (0x0000c175 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL82_AM_LIVE_STS_PSLL_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_0_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_cl82_am_live_sts_psll_0_gen2[1];
	uint32_t _rx_x4_cl82_am_live_sts_psll_0_gen2;
} BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_0_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_0_GEN2r_CLR(r) (r).rx_x4_cl82_am_live_sts_psll_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_0_GEN2r_SET(r,d) (r).rx_x4_cl82_am_live_sts_psll_0_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_0_GEN2r_GET(r) (r).rx_x4_cl82_am_live_sts_psll_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_0_GEN2r_AM_LOCK_STATE_PSLL_0f_GET(r) (((r).rx_x4_cl82_am_live_sts_psll_0_gen2[0]) & 0x3ff)
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_0_GEN2r_AM_LOCK_STATE_PSLL_0f_SET(r,f) (r).rx_x4_cl82_am_live_sts_psll_0_gen2[0]=(((r).rx_x4_cl82_am_live_sts_psll_0_gen2[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff)) | (0x3ff << 16)

/*
 * These macros can be used to access RX_X4_CL82_AM_LIVE_STS_PSLL_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_CL82_AM_LIVE_STS_PSLL_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_0_GEN2r,(_r._rx_x4_cl82_am_live_sts_psll_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_CL82_AM_LIVE_STS_PSLL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_0_GEN2r,(_r._rx_x4_cl82_am_live_sts_psll_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_CL82_AM_LIVE_STS_PSLL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_0_GEN2r,(_r._rx_x4_cl82_am_live_sts_psll_0_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_CL82_AM_LIVE_STS_PSLL_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl82_am_live_sts_psll_0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_CL82_AM_LIVE_STS_PSLL_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl82_am_live_sts_psll_0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL82_AM_LIVE_STS_PSLL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl82_am_live_sts_psll_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL82_AM_LIVE_STS_PSLL_0_GEN2r BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_0_GEN2r
#define RX_X4_CL82_AM_LIVE_STS_PSLL_0_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_0_GEN2r_t RX_X4_CL82_AM_LIVE_STS_PSLL_0_GEN2r_t;
#define RX_X4_CL82_AM_LIVE_STS_PSLL_0_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_0_GEN2r_CLR
#define RX_X4_CL82_AM_LIVE_STS_PSLL_0_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_0_GEN2r_SET
#define RX_X4_CL82_AM_LIVE_STS_PSLL_0_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_0_GEN2r_GET
#define RX_X4_CL82_AM_LIVE_STS_PSLL_0_GEN2r_AM_LOCK_STATE_PSLL_0f_GET BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_0_GEN2r_AM_LOCK_STATE_PSLL_0f_GET
#define RX_X4_CL82_AM_LIVE_STS_PSLL_0_GEN2r_AM_LOCK_STATE_PSLL_0f_SET BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_0_GEN2r_AM_LOCK_STATE_PSLL_0f_SET
#define READ_RX_X4_CL82_AM_LIVE_STS_PSLL_0_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_CL82_AM_LIVE_STS_PSLL_0_GEN2r
#define WRITE_RX_X4_CL82_AM_LIVE_STS_PSLL_0_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_CL82_AM_LIVE_STS_PSLL_0_GEN2r
#define MODIFY_RX_X4_CL82_AM_LIVE_STS_PSLL_0_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_CL82_AM_LIVE_STS_PSLL_0_GEN2r
#define READLN_RX_X4_CL82_AM_LIVE_STS_PSLL_0_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_CL82_AM_LIVE_STS_PSLL_0_GEN2r
#define WRITELN_RX_X4_CL82_AM_LIVE_STS_PSLL_0_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_CL82_AM_LIVE_STS_PSLL_0_GEN2r
#define WRITEALL_RX_X4_CL82_AM_LIVE_STS_PSLL_0_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL82_AM_LIVE_STS_PSLL_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_CL82_AM_LIVE_STS_PSLL_1_GEN2
 * BLOCKS:   RX_X4_STATUS2
 * REGADDR:  0xc176
 * DESC:     AM FSM live status for pseudo-logical lane 1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     AM_LOCK_STATE_PSLL_1 Alignment marker current states - per logical lane for psll 1
 */
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_1_GEN2r (0x0000c176 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL82_AM_LIVE_STS_PSLL_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_1_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_cl82_am_live_sts_psll_1_gen2[1];
	uint32_t _rx_x4_cl82_am_live_sts_psll_1_gen2;
} BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_1_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_1_GEN2r_CLR(r) (r).rx_x4_cl82_am_live_sts_psll_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_1_GEN2r_SET(r,d) (r).rx_x4_cl82_am_live_sts_psll_1_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_1_GEN2r_GET(r) (r).rx_x4_cl82_am_live_sts_psll_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_1_GEN2r_AM_LOCK_STATE_PSLL_1f_GET(r) (((r).rx_x4_cl82_am_live_sts_psll_1_gen2[0]) & 0x3ff)
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_1_GEN2r_AM_LOCK_STATE_PSLL_1f_SET(r,f) (r).rx_x4_cl82_am_live_sts_psll_1_gen2[0]=(((r).rx_x4_cl82_am_live_sts_psll_1_gen2[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff)) | (0x3ff << 16)

/*
 * These macros can be used to access RX_X4_CL82_AM_LIVE_STS_PSLL_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_CL82_AM_LIVE_STS_PSLL_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_1_GEN2r,(_r._rx_x4_cl82_am_live_sts_psll_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_CL82_AM_LIVE_STS_PSLL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_1_GEN2r,(_r._rx_x4_cl82_am_live_sts_psll_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_CL82_AM_LIVE_STS_PSLL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_1_GEN2r,(_r._rx_x4_cl82_am_live_sts_psll_1_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_CL82_AM_LIVE_STS_PSLL_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl82_am_live_sts_psll_1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_CL82_AM_LIVE_STS_PSLL_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl82_am_live_sts_psll_1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL82_AM_LIVE_STS_PSLL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl82_am_live_sts_psll_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL82_AM_LIVE_STS_PSLL_1_GEN2r BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_1_GEN2r
#define RX_X4_CL82_AM_LIVE_STS_PSLL_1_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_1_GEN2r_t RX_X4_CL82_AM_LIVE_STS_PSLL_1_GEN2r_t;
#define RX_X4_CL82_AM_LIVE_STS_PSLL_1_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_1_GEN2r_CLR
#define RX_X4_CL82_AM_LIVE_STS_PSLL_1_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_1_GEN2r_SET
#define RX_X4_CL82_AM_LIVE_STS_PSLL_1_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_1_GEN2r_GET
#define RX_X4_CL82_AM_LIVE_STS_PSLL_1_GEN2r_AM_LOCK_STATE_PSLL_1f_GET BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_1_GEN2r_AM_LOCK_STATE_PSLL_1f_GET
#define RX_X4_CL82_AM_LIVE_STS_PSLL_1_GEN2r_AM_LOCK_STATE_PSLL_1f_SET BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_1_GEN2r_AM_LOCK_STATE_PSLL_1f_SET
#define READ_RX_X4_CL82_AM_LIVE_STS_PSLL_1_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_CL82_AM_LIVE_STS_PSLL_1_GEN2r
#define WRITE_RX_X4_CL82_AM_LIVE_STS_PSLL_1_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_CL82_AM_LIVE_STS_PSLL_1_GEN2r
#define MODIFY_RX_X4_CL82_AM_LIVE_STS_PSLL_1_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_CL82_AM_LIVE_STS_PSLL_1_GEN2r
#define READLN_RX_X4_CL82_AM_LIVE_STS_PSLL_1_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_CL82_AM_LIVE_STS_PSLL_1_GEN2r
#define WRITELN_RX_X4_CL82_AM_LIVE_STS_PSLL_1_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_CL82_AM_LIVE_STS_PSLL_1_GEN2r
#define WRITEALL_RX_X4_CL82_AM_LIVE_STS_PSLL_1_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL82_AM_LIVE_STS_PSLL_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_CL82_AM_LIVE_STS_PSLL_2_GEN2
 * BLOCKS:   RX_X4_STATUS2
 * REGADDR:  0xc177
 * DESC:     AM FSM live status for pseudo-logical lane 2
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     AM_LOCK_STATE_PSLL_2 Alignment marker current states - per logical lane for psll 2
 */
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_2_GEN2r (0x0000c177 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL82_AM_LIVE_STS_PSLL_2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_2_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_cl82_am_live_sts_psll_2_gen2[1];
	uint32_t _rx_x4_cl82_am_live_sts_psll_2_gen2;
} BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_2_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_2_GEN2r_CLR(r) (r).rx_x4_cl82_am_live_sts_psll_2_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_2_GEN2r_SET(r,d) (r).rx_x4_cl82_am_live_sts_psll_2_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_2_GEN2r_GET(r) (r).rx_x4_cl82_am_live_sts_psll_2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_2_GEN2r_AM_LOCK_STATE_PSLL_2f_GET(r) (((r).rx_x4_cl82_am_live_sts_psll_2_gen2[0]) & 0x3ff)
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_2_GEN2r_AM_LOCK_STATE_PSLL_2f_SET(r,f) (r).rx_x4_cl82_am_live_sts_psll_2_gen2[0]=(((r).rx_x4_cl82_am_live_sts_psll_2_gen2[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff)) | (0x3ff << 16)

/*
 * These macros can be used to access RX_X4_CL82_AM_LIVE_STS_PSLL_2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_CL82_AM_LIVE_STS_PSLL_2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_2_GEN2r,(_r._rx_x4_cl82_am_live_sts_psll_2_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_CL82_AM_LIVE_STS_PSLL_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_2_GEN2r,(_r._rx_x4_cl82_am_live_sts_psll_2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_CL82_AM_LIVE_STS_PSLL_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_2_GEN2r,(_r._rx_x4_cl82_am_live_sts_psll_2_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_CL82_AM_LIVE_STS_PSLL_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl82_am_live_sts_psll_2_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_CL82_AM_LIVE_STS_PSLL_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl82_am_live_sts_psll_2_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL82_AM_LIVE_STS_PSLL_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl82_am_live_sts_psll_2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL82_AM_LIVE_STS_PSLL_2_GEN2r BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_2_GEN2r
#define RX_X4_CL82_AM_LIVE_STS_PSLL_2_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_2_GEN2r_t RX_X4_CL82_AM_LIVE_STS_PSLL_2_GEN2r_t;
#define RX_X4_CL82_AM_LIVE_STS_PSLL_2_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_2_GEN2r_CLR
#define RX_X4_CL82_AM_LIVE_STS_PSLL_2_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_2_GEN2r_SET
#define RX_X4_CL82_AM_LIVE_STS_PSLL_2_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_2_GEN2r_GET
#define RX_X4_CL82_AM_LIVE_STS_PSLL_2_GEN2r_AM_LOCK_STATE_PSLL_2f_GET BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_2_GEN2r_AM_LOCK_STATE_PSLL_2f_GET
#define RX_X4_CL82_AM_LIVE_STS_PSLL_2_GEN2r_AM_LOCK_STATE_PSLL_2f_SET BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_2_GEN2r_AM_LOCK_STATE_PSLL_2f_SET
#define READ_RX_X4_CL82_AM_LIVE_STS_PSLL_2_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_CL82_AM_LIVE_STS_PSLL_2_GEN2r
#define WRITE_RX_X4_CL82_AM_LIVE_STS_PSLL_2_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_CL82_AM_LIVE_STS_PSLL_2_GEN2r
#define MODIFY_RX_X4_CL82_AM_LIVE_STS_PSLL_2_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_CL82_AM_LIVE_STS_PSLL_2_GEN2r
#define READLN_RX_X4_CL82_AM_LIVE_STS_PSLL_2_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_CL82_AM_LIVE_STS_PSLL_2_GEN2r
#define WRITELN_RX_X4_CL82_AM_LIVE_STS_PSLL_2_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_CL82_AM_LIVE_STS_PSLL_2_GEN2r
#define WRITEALL_RX_X4_CL82_AM_LIVE_STS_PSLL_2_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL82_AM_LIVE_STS_PSLL_2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_CL82_AM_LIVE_STS_PSLL_3_GEN2
 * BLOCKS:   RX_X4_STATUS2
 * REGADDR:  0xc178
 * DESC:     AM FSM live status for pseudo-logical lane 3
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     AM_LOCK_STATE_PSLL_3 Alignment marker current states - per logical lane for psll 3
 */
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_3_GEN2r (0x0000c178 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_3_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL82_AM_LIVE_STS_PSLL_3_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_3_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_cl82_am_live_sts_psll_3_gen2[1];
	uint32_t _rx_x4_cl82_am_live_sts_psll_3_gen2;
} BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_3_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_3_GEN2r_CLR(r) (r).rx_x4_cl82_am_live_sts_psll_3_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_3_GEN2r_SET(r,d) (r).rx_x4_cl82_am_live_sts_psll_3_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_3_GEN2r_GET(r) (r).rx_x4_cl82_am_live_sts_psll_3_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_3_GEN2r_AM_LOCK_STATE_PSLL_3f_GET(r) (((r).rx_x4_cl82_am_live_sts_psll_3_gen2[0]) & 0x3ff)
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_3_GEN2r_AM_LOCK_STATE_PSLL_3f_SET(r,f) (r).rx_x4_cl82_am_live_sts_psll_3_gen2[0]=(((r).rx_x4_cl82_am_live_sts_psll_3_gen2[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff)) | (0x3ff << 16)

/*
 * These macros can be used to access RX_X4_CL82_AM_LIVE_STS_PSLL_3_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_CL82_AM_LIVE_STS_PSLL_3_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_3_GEN2r,(_r._rx_x4_cl82_am_live_sts_psll_3_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_CL82_AM_LIVE_STS_PSLL_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_3_GEN2r,(_r._rx_x4_cl82_am_live_sts_psll_3_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_CL82_AM_LIVE_STS_PSLL_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_3_GEN2r,(_r._rx_x4_cl82_am_live_sts_psll_3_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_CL82_AM_LIVE_STS_PSLL_3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl82_am_live_sts_psll_3_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_CL82_AM_LIVE_STS_PSLL_3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl82_am_live_sts_psll_3_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL82_AM_LIVE_STS_PSLL_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl82_am_live_sts_psll_3_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL82_AM_LIVE_STS_PSLL_3_GEN2r BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_3_GEN2r
#define RX_X4_CL82_AM_LIVE_STS_PSLL_3_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_3_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_3_GEN2r_t RX_X4_CL82_AM_LIVE_STS_PSLL_3_GEN2r_t;
#define RX_X4_CL82_AM_LIVE_STS_PSLL_3_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_3_GEN2r_CLR
#define RX_X4_CL82_AM_LIVE_STS_PSLL_3_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_3_GEN2r_SET
#define RX_X4_CL82_AM_LIVE_STS_PSLL_3_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_3_GEN2r_GET
#define RX_X4_CL82_AM_LIVE_STS_PSLL_3_GEN2r_AM_LOCK_STATE_PSLL_3f_GET BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_3_GEN2r_AM_LOCK_STATE_PSLL_3f_GET
#define RX_X4_CL82_AM_LIVE_STS_PSLL_3_GEN2r_AM_LOCK_STATE_PSLL_3f_SET BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_3_GEN2r_AM_LOCK_STATE_PSLL_3f_SET
#define READ_RX_X4_CL82_AM_LIVE_STS_PSLL_3_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_CL82_AM_LIVE_STS_PSLL_3_GEN2r
#define WRITE_RX_X4_CL82_AM_LIVE_STS_PSLL_3_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_CL82_AM_LIVE_STS_PSLL_3_GEN2r
#define MODIFY_RX_X4_CL82_AM_LIVE_STS_PSLL_3_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_CL82_AM_LIVE_STS_PSLL_3_GEN2r
#define READLN_RX_X4_CL82_AM_LIVE_STS_PSLL_3_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_CL82_AM_LIVE_STS_PSLL_3_GEN2r
#define WRITELN_RX_X4_CL82_AM_LIVE_STS_PSLL_3_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_CL82_AM_LIVE_STS_PSLL_3_GEN2r
#define WRITEALL_RX_X4_CL82_AM_LIVE_STS_PSLL_3_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL82_AM_LIVE_STS_PSLL_3_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_3_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_CL82_AM_LIVE_STS_PSLL_4_GEN2
 * BLOCKS:   RX_X4_STATUS2
 * REGADDR:  0xc179
 * DESC:     AM FSM live status for pseudo-logical lane 4
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     AM_LOCK_STATE_PSLL_4 Alignment marker current states - per logical lane for psll 4
 */
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_4_GEN2r (0x0000c179 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_4_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL82_AM_LIVE_STS_PSLL_4_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_4_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_cl82_am_live_sts_psll_4_gen2[1];
	uint32_t _rx_x4_cl82_am_live_sts_psll_4_gen2;
} BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_4_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_4_GEN2r_CLR(r) (r).rx_x4_cl82_am_live_sts_psll_4_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_4_GEN2r_SET(r,d) (r).rx_x4_cl82_am_live_sts_psll_4_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_4_GEN2r_GET(r) (r).rx_x4_cl82_am_live_sts_psll_4_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_4_GEN2r_AM_LOCK_STATE_PSLL_4f_GET(r) (((r).rx_x4_cl82_am_live_sts_psll_4_gen2[0]) & 0x3ff)
#define BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_4_GEN2r_AM_LOCK_STATE_PSLL_4f_SET(r,f) (r).rx_x4_cl82_am_live_sts_psll_4_gen2[0]=(((r).rx_x4_cl82_am_live_sts_psll_4_gen2[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff)) | (0x3ff << 16)

/*
 * These macros can be used to access RX_X4_CL82_AM_LIVE_STS_PSLL_4_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_CL82_AM_LIVE_STS_PSLL_4_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_4_GEN2r,(_r._rx_x4_cl82_am_live_sts_psll_4_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_CL82_AM_LIVE_STS_PSLL_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_4_GEN2r,(_r._rx_x4_cl82_am_live_sts_psll_4_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_CL82_AM_LIVE_STS_PSLL_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_4_GEN2r,(_r._rx_x4_cl82_am_live_sts_psll_4_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_CL82_AM_LIVE_STS_PSLL_4_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl82_am_live_sts_psll_4_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_CL82_AM_LIVE_STS_PSLL_4_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl82_am_live_sts_psll_4_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL82_AM_LIVE_STS_PSLL_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl82_am_live_sts_psll_4_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL82_AM_LIVE_STS_PSLL_4_GEN2r BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_4_GEN2r
#define RX_X4_CL82_AM_LIVE_STS_PSLL_4_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_4_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_4_GEN2r_t RX_X4_CL82_AM_LIVE_STS_PSLL_4_GEN2r_t;
#define RX_X4_CL82_AM_LIVE_STS_PSLL_4_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_4_GEN2r_CLR
#define RX_X4_CL82_AM_LIVE_STS_PSLL_4_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_4_GEN2r_SET
#define RX_X4_CL82_AM_LIVE_STS_PSLL_4_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_4_GEN2r_GET
#define RX_X4_CL82_AM_LIVE_STS_PSLL_4_GEN2r_AM_LOCK_STATE_PSLL_4f_GET BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_4_GEN2r_AM_LOCK_STATE_PSLL_4f_GET
#define RX_X4_CL82_AM_LIVE_STS_PSLL_4_GEN2r_AM_LOCK_STATE_PSLL_4f_SET BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_4_GEN2r_AM_LOCK_STATE_PSLL_4f_SET
#define READ_RX_X4_CL82_AM_LIVE_STS_PSLL_4_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_CL82_AM_LIVE_STS_PSLL_4_GEN2r
#define WRITE_RX_X4_CL82_AM_LIVE_STS_PSLL_4_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_CL82_AM_LIVE_STS_PSLL_4_GEN2r
#define MODIFY_RX_X4_CL82_AM_LIVE_STS_PSLL_4_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_CL82_AM_LIVE_STS_PSLL_4_GEN2r
#define READLN_RX_X4_CL82_AM_LIVE_STS_PSLL_4_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_CL82_AM_LIVE_STS_PSLL_4_GEN2r
#define WRITELN_RX_X4_CL82_AM_LIVE_STS_PSLL_4_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_CL82_AM_LIVE_STS_PSLL_4_GEN2r
#define WRITEALL_RX_X4_CL82_AM_LIVE_STS_PSLL_4_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL82_AM_LIVE_STS_PSLL_4_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_CL82_AM_LIVE_STS_PSLL_4_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_CL91_SYNC_STS_GEN2
 * BLOCKS:   RX_X4_STATUS2
 * REGADDR:  0xc17a
 * DESC:     CL91 RXP per lane statuses
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL91_AMPS_LOCK_LIVE Boolean variable that is set when the receiver has detected the location of the alignment marker payload sequence for a given logical lane.
 *     CL91_AMPS_LOCK_LL Latched low version of cl91_amps_lock_live.
 *     CL91_AMPS_LOCK_LH Latched high version of cl91_amps_lock_live.
 *     CL91_FEC_LANE_MAP FEC lane ID per logical lane
 *     CL91_FEC_LANE_MAP_VALID Indicates that the FEC lane ID for the given logical lane is valid.
 */
#define BCMI_TSCF_XGXS_RX_X4_CL91_SYNC_STS_GEN2r (0x0000c17a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_CL91_SYNC_STS_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL91_SYNC_STS_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_CL91_SYNC_STS_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_cl91_sync_sts_gen2[1];
	uint32_t _rx_x4_cl91_sync_sts_gen2;
} BCMI_TSCF_XGXS_RX_X4_CL91_SYNC_STS_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_CL91_SYNC_STS_GEN2r_CLR(r) (r).rx_x4_cl91_sync_sts_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_CL91_SYNC_STS_GEN2r_SET(r,d) (r).rx_x4_cl91_sync_sts_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_CL91_SYNC_STS_GEN2r_GET(r) (r).rx_x4_cl91_sync_sts_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_CL91_SYNC_STS_GEN2r_CL91_FEC_LANE_MAP_VALIDf_GET(r) ((((r).rx_x4_cl91_sync_sts_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_CL91_SYNC_STS_GEN2r_CL91_FEC_LANE_MAP_VALIDf_SET(r,f) (r).rx_x4_cl91_sync_sts_gen2[0]=(((r).rx_x4_cl91_sync_sts_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_RX_X4_CL91_SYNC_STS_GEN2r_CL91_FEC_LANE_MAPf_GET(r) ((((r).rx_x4_cl91_sync_sts_gen2[0]) >> 3) & 0x3)
#define BCMI_TSCF_XGXS_RX_X4_CL91_SYNC_STS_GEN2r_CL91_FEC_LANE_MAPf_SET(r,f) (r).rx_x4_cl91_sync_sts_gen2[0]=(((r).rx_x4_cl91_sync_sts_gen2[0] & ~((uint32_t)0x3 << 3)) | ((((uint32_t)f) & 0x3) << 3)) | (3 << (16 + 3))
#define BCMI_TSCF_XGXS_RX_X4_CL91_SYNC_STS_GEN2r_CL91_AMPS_LOCK_LHf_GET(r) ((((r).rx_x4_cl91_sync_sts_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_CL91_SYNC_STS_GEN2r_CL91_AMPS_LOCK_LHf_SET(r,f) (r).rx_x4_cl91_sync_sts_gen2[0]=(((r).rx_x4_cl91_sync_sts_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_RX_X4_CL91_SYNC_STS_GEN2r_CL91_AMPS_LOCK_LLf_GET(r) ((((r).rx_x4_cl91_sync_sts_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_CL91_SYNC_STS_GEN2r_CL91_AMPS_LOCK_LLf_SET(r,f) (r).rx_x4_cl91_sync_sts_gen2[0]=(((r).rx_x4_cl91_sync_sts_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_RX_X4_CL91_SYNC_STS_GEN2r_CL91_AMPS_LOCK_LIVEf_GET(r) (((r).rx_x4_cl91_sync_sts_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_CL91_SYNC_STS_GEN2r_CL91_AMPS_LOCK_LIVEf_SET(r,f) (r).rx_x4_cl91_sync_sts_gen2[0]=(((r).rx_x4_cl91_sync_sts_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_X4_CL91_SYNC_STS_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_CL91_SYNC_STS_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_SYNC_STS_GEN2r,(_r._rx_x4_cl91_sync_sts_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_CL91_SYNC_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_SYNC_STS_GEN2r,(_r._rx_x4_cl91_sync_sts_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_CL91_SYNC_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_SYNC_STS_GEN2r,(_r._rx_x4_cl91_sync_sts_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_CL91_SYNC_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_SYNC_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_sync_sts_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_CL91_SYNC_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_SYNC_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_sync_sts_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL91_SYNC_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_SYNC_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl91_sync_sts_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL91_SYNC_STS_GEN2r BCMI_TSCF_XGXS_RX_X4_CL91_SYNC_STS_GEN2r
#define RX_X4_CL91_SYNC_STS_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_CL91_SYNC_STS_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_CL91_SYNC_STS_GEN2r_t RX_X4_CL91_SYNC_STS_GEN2r_t;
#define RX_X4_CL91_SYNC_STS_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_CL91_SYNC_STS_GEN2r_CLR
#define RX_X4_CL91_SYNC_STS_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_CL91_SYNC_STS_GEN2r_SET
#define RX_X4_CL91_SYNC_STS_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_CL91_SYNC_STS_GEN2r_GET
#define RX_X4_CL91_SYNC_STS_GEN2r_CL91_FEC_LANE_MAP_VALIDf_GET BCMI_TSCF_XGXS_RX_X4_CL91_SYNC_STS_GEN2r_CL91_FEC_LANE_MAP_VALIDf_GET
#define RX_X4_CL91_SYNC_STS_GEN2r_CL91_FEC_LANE_MAP_VALIDf_SET BCMI_TSCF_XGXS_RX_X4_CL91_SYNC_STS_GEN2r_CL91_FEC_LANE_MAP_VALIDf_SET
#define RX_X4_CL91_SYNC_STS_GEN2r_CL91_FEC_LANE_MAPf_GET BCMI_TSCF_XGXS_RX_X4_CL91_SYNC_STS_GEN2r_CL91_FEC_LANE_MAPf_GET
#define RX_X4_CL91_SYNC_STS_GEN2r_CL91_FEC_LANE_MAPf_SET BCMI_TSCF_XGXS_RX_X4_CL91_SYNC_STS_GEN2r_CL91_FEC_LANE_MAPf_SET
#define RX_X4_CL91_SYNC_STS_GEN2r_CL91_AMPS_LOCK_LHf_GET BCMI_TSCF_XGXS_RX_X4_CL91_SYNC_STS_GEN2r_CL91_AMPS_LOCK_LHf_GET
#define RX_X4_CL91_SYNC_STS_GEN2r_CL91_AMPS_LOCK_LHf_SET BCMI_TSCF_XGXS_RX_X4_CL91_SYNC_STS_GEN2r_CL91_AMPS_LOCK_LHf_SET
#define RX_X4_CL91_SYNC_STS_GEN2r_CL91_AMPS_LOCK_LLf_GET BCMI_TSCF_XGXS_RX_X4_CL91_SYNC_STS_GEN2r_CL91_AMPS_LOCK_LLf_GET
#define RX_X4_CL91_SYNC_STS_GEN2r_CL91_AMPS_LOCK_LLf_SET BCMI_TSCF_XGXS_RX_X4_CL91_SYNC_STS_GEN2r_CL91_AMPS_LOCK_LLf_SET
#define RX_X4_CL91_SYNC_STS_GEN2r_CL91_AMPS_LOCK_LIVEf_GET BCMI_TSCF_XGXS_RX_X4_CL91_SYNC_STS_GEN2r_CL91_AMPS_LOCK_LIVEf_GET
#define RX_X4_CL91_SYNC_STS_GEN2r_CL91_AMPS_LOCK_LIVEf_SET BCMI_TSCF_XGXS_RX_X4_CL91_SYNC_STS_GEN2r_CL91_AMPS_LOCK_LIVEf_SET
#define READ_RX_X4_CL91_SYNC_STS_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_CL91_SYNC_STS_GEN2r
#define WRITE_RX_X4_CL91_SYNC_STS_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_CL91_SYNC_STS_GEN2r
#define MODIFY_RX_X4_CL91_SYNC_STS_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_CL91_SYNC_STS_GEN2r
#define READLN_RX_X4_CL91_SYNC_STS_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_CL91_SYNC_STS_GEN2r
#define WRITELN_RX_X4_CL91_SYNC_STS_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_CL91_SYNC_STS_GEN2r
#define WRITEALL_RX_X4_CL91_SYNC_STS_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL91_SYNC_STS_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_CL91_SYNC_STS_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_FEC_SYNC_FSM_ST_GEN2
 * BLOCKS:   RX_X4_STATUS2
 * REGADDR:  0xc17b
 * DESC:     block sync status
 * RESETVAL: 0x4 (4)
 * ACCESS:   R/W
 * FIELDS:
 *     CL91_FEC_SYNC_FSM_LIVE_STATE FEC synchronization FSM current state
 *     CL91_FEC_SYNC_FSM_LATCHED_STATE FEC synchronization FSM latched stateEach bit represents a particular state. The bit positions for each state is shown belowThe register clears only when read. It is not cleared even on pipeline reset.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_SYNC_FSM_ST_GEN2r (0x0000c17b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_FEC_SYNC_FSM_ST_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_SYNC_FSM_ST_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_FEC_SYNC_FSM_ST_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_sync_fsm_st_gen2[1];
	uint32_t _rx_x4_fec_sync_fsm_st_gen2;
} BCMI_TSCF_XGXS_RX_X4_FEC_SYNC_FSM_ST_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_FEC_SYNC_FSM_ST_GEN2r_CLR(r) (r).rx_x4_fec_sync_fsm_st_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_FEC_SYNC_FSM_ST_GEN2r_SET(r,d) (r).rx_x4_fec_sync_fsm_st_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_FEC_SYNC_FSM_ST_GEN2r_GET(r) (r).rx_x4_fec_sync_fsm_st_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_SYNC_FSM_ST_GEN2r_CL91_FEC_SYNC_FSM_LATCHED_STATEf_GET(r) ((((r).rx_x4_fec_sync_fsm_st_gen2[0]) >> 2) & 0xf)
#define BCMI_TSCF_XGXS_RX_X4_FEC_SYNC_FSM_ST_GEN2r_CL91_FEC_SYNC_FSM_LATCHED_STATEf_SET(r,f) (r).rx_x4_fec_sync_fsm_st_gen2[0]=(((r).rx_x4_fec_sync_fsm_st_gen2[0] & ~((uint32_t)0xf << 2)) | ((((uint32_t)f) & 0xf) << 2)) | (15 << (16 + 2))
#define BCMI_TSCF_XGXS_RX_X4_FEC_SYNC_FSM_ST_GEN2r_CL91_FEC_SYNC_FSM_LIVE_STATEf_GET(r) (((r).rx_x4_fec_sync_fsm_st_gen2[0]) & 0x3)
#define BCMI_TSCF_XGXS_RX_X4_FEC_SYNC_FSM_ST_GEN2r_CL91_FEC_SYNC_FSM_LIVE_STATEf_SET(r,f) (r).rx_x4_fec_sync_fsm_st_gen2[0]=(((r).rx_x4_fec_sync_fsm_st_gen2[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access RX_X4_FEC_SYNC_FSM_ST_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_FEC_SYNC_FSM_ST_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_SYNC_FSM_ST_GEN2r,(_r._rx_x4_fec_sync_fsm_st_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_SYNC_FSM_ST_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_SYNC_FSM_ST_GEN2r,(_r._rx_x4_fec_sync_fsm_st_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_SYNC_FSM_ST_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_SYNC_FSM_ST_GEN2r,(_r._rx_x4_fec_sync_fsm_st_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_FEC_SYNC_FSM_ST_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_SYNC_FSM_ST_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_sync_fsm_st_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_SYNC_FSM_ST_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_SYNC_FSM_ST_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_sync_fsm_st_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_SYNC_FSM_ST_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_SYNC_FSM_ST_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_sync_fsm_st_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_SYNC_FSM_ST_GEN2r BCMI_TSCF_XGXS_RX_X4_FEC_SYNC_FSM_ST_GEN2r
#define RX_X4_FEC_SYNC_FSM_ST_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_FEC_SYNC_FSM_ST_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_FEC_SYNC_FSM_ST_GEN2r_t RX_X4_FEC_SYNC_FSM_ST_GEN2r_t;
#define RX_X4_FEC_SYNC_FSM_ST_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_FEC_SYNC_FSM_ST_GEN2r_CLR
#define RX_X4_FEC_SYNC_FSM_ST_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_FEC_SYNC_FSM_ST_GEN2r_SET
#define RX_X4_FEC_SYNC_FSM_ST_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_FEC_SYNC_FSM_ST_GEN2r_GET
#define RX_X4_FEC_SYNC_FSM_ST_GEN2r_CL91_FEC_SYNC_FSM_LATCHED_STATEf_GET BCMI_TSCF_XGXS_RX_X4_FEC_SYNC_FSM_ST_GEN2r_CL91_FEC_SYNC_FSM_LATCHED_STATEf_GET
#define RX_X4_FEC_SYNC_FSM_ST_GEN2r_CL91_FEC_SYNC_FSM_LATCHED_STATEf_SET BCMI_TSCF_XGXS_RX_X4_FEC_SYNC_FSM_ST_GEN2r_CL91_FEC_SYNC_FSM_LATCHED_STATEf_SET
#define RX_X4_FEC_SYNC_FSM_ST_GEN2r_CL91_FEC_SYNC_FSM_LIVE_STATEf_GET BCMI_TSCF_XGXS_RX_X4_FEC_SYNC_FSM_ST_GEN2r_CL91_FEC_SYNC_FSM_LIVE_STATEf_GET
#define RX_X4_FEC_SYNC_FSM_ST_GEN2r_CL91_FEC_SYNC_FSM_LIVE_STATEf_SET BCMI_TSCF_XGXS_RX_X4_FEC_SYNC_FSM_ST_GEN2r_CL91_FEC_SYNC_FSM_LIVE_STATEf_SET
#define READ_RX_X4_FEC_SYNC_FSM_ST_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_FEC_SYNC_FSM_ST_GEN2r
#define WRITE_RX_X4_FEC_SYNC_FSM_ST_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_SYNC_FSM_ST_GEN2r
#define MODIFY_RX_X4_FEC_SYNC_FSM_ST_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_SYNC_FSM_ST_GEN2r
#define READLN_RX_X4_FEC_SYNC_FSM_ST_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_FEC_SYNC_FSM_ST_GEN2r
#define WRITELN_RX_X4_FEC_SYNC_FSM_ST_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_SYNC_FSM_ST_GEN2r
#define WRITEALL_RX_X4_FEC_SYNC_FSM_ST_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_SYNC_FSM_ST_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_FEC_SYNC_FSM_ST_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_CL91_FC_SLIP_CNT_GEN2
 * BLOCKS:   RX_X4_STATUS2
 * REGADDR:  0xc17c
 * DESC:     CL91 FC CW sync slip count
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CL91_FC_SLIP_CNT Slip count value for CL91 Fiber channel codeword sync.Live value used for debug.
 */
#define BCMI_TSCF_XGXS_RX_X4_CL91_FC_SLIP_CNT_GEN2r (0x0000c17c | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_CL91_FC_SLIP_CNT_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL91_FC_SLIP_CNT_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_CL91_FC_SLIP_CNT_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_cl91_fc_slip_cnt_gen2[1];
	uint32_t _rx_x4_cl91_fc_slip_cnt_gen2;
} BCMI_TSCF_XGXS_RX_X4_CL91_FC_SLIP_CNT_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_CL91_FC_SLIP_CNT_GEN2r_CLR(r) (r).rx_x4_cl91_fc_slip_cnt_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_CL91_FC_SLIP_CNT_GEN2r_SET(r,d) (r).rx_x4_cl91_fc_slip_cnt_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_CL91_FC_SLIP_CNT_GEN2r_GET(r) (r).rx_x4_cl91_fc_slip_cnt_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_CL91_FC_SLIP_CNT_GEN2r_CL91_FC_SLIP_CNTf_GET(r) (((r).rx_x4_cl91_fc_slip_cnt_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_CL91_FC_SLIP_CNT_GEN2r_CL91_FC_SLIP_CNTf_SET(r,f) (r).rx_x4_cl91_fc_slip_cnt_gen2[0]=(((r).rx_x4_cl91_fc_slip_cnt_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_CL91_FC_SLIP_CNT_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_CL91_FC_SLIP_CNT_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FC_SLIP_CNT_GEN2r,(_r._rx_x4_cl91_fc_slip_cnt_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_CL91_FC_SLIP_CNT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FC_SLIP_CNT_GEN2r,(_r._rx_x4_cl91_fc_slip_cnt_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_CL91_FC_SLIP_CNT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FC_SLIP_CNT_GEN2r,(_r._rx_x4_cl91_fc_slip_cnt_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_CL91_FC_SLIP_CNT_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FC_SLIP_CNT_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_fc_slip_cnt_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_CL91_FC_SLIP_CNT_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FC_SLIP_CNT_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_fc_slip_cnt_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL91_FC_SLIP_CNT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FC_SLIP_CNT_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl91_fc_slip_cnt_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL91_FC_SLIP_CNT_GEN2r BCMI_TSCF_XGXS_RX_X4_CL91_FC_SLIP_CNT_GEN2r
#define RX_X4_CL91_FC_SLIP_CNT_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_CL91_FC_SLIP_CNT_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_CL91_FC_SLIP_CNT_GEN2r_t RX_X4_CL91_FC_SLIP_CNT_GEN2r_t;
#define RX_X4_CL91_FC_SLIP_CNT_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_CL91_FC_SLIP_CNT_GEN2r_CLR
#define RX_X4_CL91_FC_SLIP_CNT_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_CL91_FC_SLIP_CNT_GEN2r_SET
#define RX_X4_CL91_FC_SLIP_CNT_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_CL91_FC_SLIP_CNT_GEN2r_GET
#define RX_X4_CL91_FC_SLIP_CNT_GEN2r_CL91_FC_SLIP_CNTf_GET BCMI_TSCF_XGXS_RX_X4_CL91_FC_SLIP_CNT_GEN2r_CL91_FC_SLIP_CNTf_GET
#define RX_X4_CL91_FC_SLIP_CNT_GEN2r_CL91_FC_SLIP_CNTf_SET BCMI_TSCF_XGXS_RX_X4_CL91_FC_SLIP_CNT_GEN2r_CL91_FC_SLIP_CNTf_SET
#define READ_RX_X4_CL91_FC_SLIP_CNT_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_CL91_FC_SLIP_CNT_GEN2r
#define WRITE_RX_X4_CL91_FC_SLIP_CNT_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_CL91_FC_SLIP_CNT_GEN2r
#define MODIFY_RX_X4_CL91_FC_SLIP_CNT_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_CL91_FC_SLIP_CNT_GEN2r
#define READLN_RX_X4_CL91_FC_SLIP_CNT_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_CL91_FC_SLIP_CNT_GEN2r
#define WRITELN_RX_X4_CL91_FC_SLIP_CNT_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_CL91_FC_SLIP_CNT_GEN2r
#define WRITEALL_RX_X4_CL91_FC_SLIP_CNT_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL91_FC_SLIP_CNT_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_CL91_FC_SLIP_CNT_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_FEC_DBG_ERRL_0_GEN2
 * BLOCKS:   RX_X4_STATUS3
 * REGADDR:  0xc180
 * DESC:     User FEC debug read data for stream 0[15:0]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     DBG_ERRL_STREAM0 16 LSB of the FEC debug data for stream 0, clear on read
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_0_GEN2r (0x0000c180 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_DBG_ERRL_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_0_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_dbg_errl_0_gen2[1];
	uint32_t _rx_x4_fec_dbg_errl_0_gen2;
} BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_0_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_0_GEN2r_CLR(r) (r).rx_x4_fec_dbg_errl_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_0_GEN2r_SET(r,d) (r).rx_x4_fec_dbg_errl_0_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_0_GEN2r_GET(r) (r).rx_x4_fec_dbg_errl_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_0_GEN2r_DBG_ERRL_STREAM0f_GET(r) (((r).rx_x4_fec_dbg_errl_0_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_0_GEN2r_DBG_ERRL_STREAM0f_SET(r,f) (r).rx_x4_fec_dbg_errl_0_gen2[0]=(((r).rx_x4_fec_dbg_errl_0_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_DBG_ERRL_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_FEC_DBG_ERRL_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_0_GEN2r,(_r._rx_x4_fec_dbg_errl_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_DBG_ERRL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_0_GEN2r,(_r._rx_x4_fec_dbg_errl_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_DBG_ERRL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_0_GEN2r,(_r._rx_x4_fec_dbg_errl_0_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_FEC_DBG_ERRL_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_dbg_errl_0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_DBG_ERRL_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_dbg_errl_0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_DBG_ERRL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_dbg_errl_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_DBG_ERRL_0_GEN2r BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_0_GEN2r
#define RX_X4_FEC_DBG_ERRL_0_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_0_GEN2r_t RX_X4_FEC_DBG_ERRL_0_GEN2r_t;
#define RX_X4_FEC_DBG_ERRL_0_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_0_GEN2r_CLR
#define RX_X4_FEC_DBG_ERRL_0_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_0_GEN2r_SET
#define RX_X4_FEC_DBG_ERRL_0_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_0_GEN2r_GET
#define RX_X4_FEC_DBG_ERRL_0_GEN2r_DBG_ERRL_STREAM0f_GET BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_0_GEN2r_DBG_ERRL_STREAM0f_GET
#define RX_X4_FEC_DBG_ERRL_0_GEN2r_DBG_ERRL_STREAM0f_SET BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_0_GEN2r_DBG_ERRL_STREAM0f_SET
#define READ_RX_X4_FEC_DBG_ERRL_0_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_FEC_DBG_ERRL_0_GEN2r
#define WRITE_RX_X4_FEC_DBG_ERRL_0_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_DBG_ERRL_0_GEN2r
#define MODIFY_RX_X4_FEC_DBG_ERRL_0_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_DBG_ERRL_0_GEN2r
#define READLN_RX_X4_FEC_DBG_ERRL_0_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_FEC_DBG_ERRL_0_GEN2r
#define WRITELN_RX_X4_FEC_DBG_ERRL_0_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_DBG_ERRL_0_GEN2r
#define WRITEALL_RX_X4_FEC_DBG_ERRL_0_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_DBG_ERRL_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_FEC_DBG_ERRL_1_GEN2
 * BLOCKS:   RX_X4_STATUS3
 * REGADDR:  0xc181
 * DESC:     User FEC debug read data for stream 1[15:0]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     DBG_ERRL_STREAM1 16 LSB of the FEC debug data for stream 0, clear on read
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_1_GEN2r (0x0000c181 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_DBG_ERRL_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_1_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_dbg_errl_1_gen2[1];
	uint32_t _rx_x4_fec_dbg_errl_1_gen2;
} BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_1_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_1_GEN2r_CLR(r) (r).rx_x4_fec_dbg_errl_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_1_GEN2r_SET(r,d) (r).rx_x4_fec_dbg_errl_1_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_1_GEN2r_GET(r) (r).rx_x4_fec_dbg_errl_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_1_GEN2r_DBG_ERRL_STREAM1f_GET(r) (((r).rx_x4_fec_dbg_errl_1_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_1_GEN2r_DBG_ERRL_STREAM1f_SET(r,f) (r).rx_x4_fec_dbg_errl_1_gen2[0]=(((r).rx_x4_fec_dbg_errl_1_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_DBG_ERRL_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_FEC_DBG_ERRL_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_1_GEN2r,(_r._rx_x4_fec_dbg_errl_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_DBG_ERRL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_1_GEN2r,(_r._rx_x4_fec_dbg_errl_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_DBG_ERRL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_1_GEN2r,(_r._rx_x4_fec_dbg_errl_1_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_FEC_DBG_ERRL_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_dbg_errl_1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_DBG_ERRL_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_dbg_errl_1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_DBG_ERRL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_dbg_errl_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_DBG_ERRL_1_GEN2r BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_1_GEN2r
#define RX_X4_FEC_DBG_ERRL_1_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_1_GEN2r_t RX_X4_FEC_DBG_ERRL_1_GEN2r_t;
#define RX_X4_FEC_DBG_ERRL_1_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_1_GEN2r_CLR
#define RX_X4_FEC_DBG_ERRL_1_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_1_GEN2r_SET
#define RX_X4_FEC_DBG_ERRL_1_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_1_GEN2r_GET
#define RX_X4_FEC_DBG_ERRL_1_GEN2r_DBG_ERRL_STREAM1f_GET BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_1_GEN2r_DBG_ERRL_STREAM1f_GET
#define RX_X4_FEC_DBG_ERRL_1_GEN2r_DBG_ERRL_STREAM1f_SET BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_1_GEN2r_DBG_ERRL_STREAM1f_SET
#define READ_RX_X4_FEC_DBG_ERRL_1_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_FEC_DBG_ERRL_1_GEN2r
#define WRITE_RX_X4_FEC_DBG_ERRL_1_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_DBG_ERRL_1_GEN2r
#define MODIFY_RX_X4_FEC_DBG_ERRL_1_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_DBG_ERRL_1_GEN2r
#define READLN_RX_X4_FEC_DBG_ERRL_1_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_FEC_DBG_ERRL_1_GEN2r
#define WRITELN_RX_X4_FEC_DBG_ERRL_1_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_DBG_ERRL_1_GEN2r
#define WRITEALL_RX_X4_FEC_DBG_ERRL_1_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_DBG_ERRL_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_FEC_DBG_ERRL_2_GEN2
 * BLOCKS:   RX_X4_STATUS3
 * REGADDR:  0xc182
 * DESC:     User FEC debug read data for stream 2[15:0]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     DBG_ERRL_STREAM2 16 LSB of the FEC debug data for stream 2, clear on read
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_2_GEN2r (0x0000c182 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_DBG_ERRL_2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_2_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_dbg_errl_2_gen2[1];
	uint32_t _rx_x4_fec_dbg_errl_2_gen2;
} BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_2_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_2_GEN2r_CLR(r) (r).rx_x4_fec_dbg_errl_2_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_2_GEN2r_SET(r,d) (r).rx_x4_fec_dbg_errl_2_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_2_GEN2r_GET(r) (r).rx_x4_fec_dbg_errl_2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_2_GEN2r_DBG_ERRL_STREAM2f_GET(r) (((r).rx_x4_fec_dbg_errl_2_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_2_GEN2r_DBG_ERRL_STREAM2f_SET(r,f) (r).rx_x4_fec_dbg_errl_2_gen2[0]=(((r).rx_x4_fec_dbg_errl_2_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_DBG_ERRL_2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_FEC_DBG_ERRL_2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_2_GEN2r,(_r._rx_x4_fec_dbg_errl_2_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_DBG_ERRL_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_2_GEN2r,(_r._rx_x4_fec_dbg_errl_2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_DBG_ERRL_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_2_GEN2r,(_r._rx_x4_fec_dbg_errl_2_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_FEC_DBG_ERRL_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_dbg_errl_2_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_DBG_ERRL_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_dbg_errl_2_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_DBG_ERRL_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_dbg_errl_2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_DBG_ERRL_2_GEN2r BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_2_GEN2r
#define RX_X4_FEC_DBG_ERRL_2_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_2_GEN2r_t RX_X4_FEC_DBG_ERRL_2_GEN2r_t;
#define RX_X4_FEC_DBG_ERRL_2_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_2_GEN2r_CLR
#define RX_X4_FEC_DBG_ERRL_2_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_2_GEN2r_SET
#define RX_X4_FEC_DBG_ERRL_2_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_2_GEN2r_GET
#define RX_X4_FEC_DBG_ERRL_2_GEN2r_DBG_ERRL_STREAM2f_GET BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_2_GEN2r_DBG_ERRL_STREAM2f_GET
#define RX_X4_FEC_DBG_ERRL_2_GEN2r_DBG_ERRL_STREAM2f_SET BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_2_GEN2r_DBG_ERRL_STREAM2f_SET
#define READ_RX_X4_FEC_DBG_ERRL_2_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_FEC_DBG_ERRL_2_GEN2r
#define WRITE_RX_X4_FEC_DBG_ERRL_2_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_DBG_ERRL_2_GEN2r
#define MODIFY_RX_X4_FEC_DBG_ERRL_2_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_DBG_ERRL_2_GEN2r
#define READLN_RX_X4_FEC_DBG_ERRL_2_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_FEC_DBG_ERRL_2_GEN2r
#define WRITELN_RX_X4_FEC_DBG_ERRL_2_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_DBG_ERRL_2_GEN2r
#define WRITEALL_RX_X4_FEC_DBG_ERRL_2_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_DBG_ERRL_2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_FEC_DBG_ERRL_3_GEN2
 * BLOCKS:   RX_X4_STATUS3
 * REGADDR:  0xc183
 * DESC:     User FEC debug read data for stream 3[15:0]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     DBG_ERRL_STREAM3 16 LSB of the FEC debug data for stream 3, clear on read
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_3_GEN2r (0x0000c183 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_3_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_DBG_ERRL_3_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_3_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_dbg_errl_3_gen2[1];
	uint32_t _rx_x4_fec_dbg_errl_3_gen2;
} BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_3_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_3_GEN2r_CLR(r) (r).rx_x4_fec_dbg_errl_3_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_3_GEN2r_SET(r,d) (r).rx_x4_fec_dbg_errl_3_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_3_GEN2r_GET(r) (r).rx_x4_fec_dbg_errl_3_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_3_GEN2r_DBG_ERRL_STREAM3f_GET(r) (((r).rx_x4_fec_dbg_errl_3_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_3_GEN2r_DBG_ERRL_STREAM3f_SET(r,f) (r).rx_x4_fec_dbg_errl_3_gen2[0]=(((r).rx_x4_fec_dbg_errl_3_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_DBG_ERRL_3_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_FEC_DBG_ERRL_3_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_3_GEN2r,(_r._rx_x4_fec_dbg_errl_3_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_DBG_ERRL_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_3_GEN2r,(_r._rx_x4_fec_dbg_errl_3_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_DBG_ERRL_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_3_GEN2r,(_r._rx_x4_fec_dbg_errl_3_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_FEC_DBG_ERRL_3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_dbg_errl_3_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_DBG_ERRL_3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_dbg_errl_3_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_DBG_ERRL_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_dbg_errl_3_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_DBG_ERRL_3_GEN2r BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_3_GEN2r
#define RX_X4_FEC_DBG_ERRL_3_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_3_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_3_GEN2r_t RX_X4_FEC_DBG_ERRL_3_GEN2r_t;
#define RX_X4_FEC_DBG_ERRL_3_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_3_GEN2r_CLR
#define RX_X4_FEC_DBG_ERRL_3_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_3_GEN2r_SET
#define RX_X4_FEC_DBG_ERRL_3_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_3_GEN2r_GET
#define RX_X4_FEC_DBG_ERRL_3_GEN2r_DBG_ERRL_STREAM3f_GET BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_3_GEN2r_DBG_ERRL_STREAM3f_GET
#define RX_X4_FEC_DBG_ERRL_3_GEN2r_DBG_ERRL_STREAM3f_SET BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_3_GEN2r_DBG_ERRL_STREAM3f_SET
#define READ_RX_X4_FEC_DBG_ERRL_3_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_FEC_DBG_ERRL_3_GEN2r
#define WRITE_RX_X4_FEC_DBG_ERRL_3_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_DBG_ERRL_3_GEN2r
#define MODIFY_RX_X4_FEC_DBG_ERRL_3_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_DBG_ERRL_3_GEN2r
#define READLN_RX_X4_FEC_DBG_ERRL_3_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_FEC_DBG_ERRL_3_GEN2r
#define WRITELN_RX_X4_FEC_DBG_ERRL_3_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_DBG_ERRL_3_GEN2r
#define WRITEALL_RX_X4_FEC_DBG_ERRL_3_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_DBG_ERRL_3_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_3_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_FEC_DBG_ERRL_4_GEN2
 * BLOCKS:   RX_X4_STATUS3
 * REGADDR:  0xc184
 * DESC:     User FEC debug read data for stream 4[15:0]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     DBG_ERRL_STREAM4 16 LSB of the FEC debug data for stream 4, clear on read
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_4_GEN2r (0x0000c184 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_4_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_DBG_ERRL_4_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_4_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_dbg_errl_4_gen2[1];
	uint32_t _rx_x4_fec_dbg_errl_4_gen2;
} BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_4_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_4_GEN2r_CLR(r) (r).rx_x4_fec_dbg_errl_4_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_4_GEN2r_SET(r,d) (r).rx_x4_fec_dbg_errl_4_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_4_GEN2r_GET(r) (r).rx_x4_fec_dbg_errl_4_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_4_GEN2r_DBG_ERRL_STREAM4f_GET(r) (((r).rx_x4_fec_dbg_errl_4_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_4_GEN2r_DBG_ERRL_STREAM4f_SET(r,f) (r).rx_x4_fec_dbg_errl_4_gen2[0]=(((r).rx_x4_fec_dbg_errl_4_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_DBG_ERRL_4_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_FEC_DBG_ERRL_4_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_4_GEN2r,(_r._rx_x4_fec_dbg_errl_4_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_DBG_ERRL_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_4_GEN2r,(_r._rx_x4_fec_dbg_errl_4_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_DBG_ERRL_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_4_GEN2r,(_r._rx_x4_fec_dbg_errl_4_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_FEC_DBG_ERRL_4_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_dbg_errl_4_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_DBG_ERRL_4_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_dbg_errl_4_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_DBG_ERRL_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_dbg_errl_4_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_DBG_ERRL_4_GEN2r BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_4_GEN2r
#define RX_X4_FEC_DBG_ERRL_4_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_4_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_4_GEN2r_t RX_X4_FEC_DBG_ERRL_4_GEN2r_t;
#define RX_X4_FEC_DBG_ERRL_4_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_4_GEN2r_CLR
#define RX_X4_FEC_DBG_ERRL_4_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_4_GEN2r_SET
#define RX_X4_FEC_DBG_ERRL_4_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_4_GEN2r_GET
#define RX_X4_FEC_DBG_ERRL_4_GEN2r_DBG_ERRL_STREAM4f_GET BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_4_GEN2r_DBG_ERRL_STREAM4f_GET
#define RX_X4_FEC_DBG_ERRL_4_GEN2r_DBG_ERRL_STREAM4f_SET BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_4_GEN2r_DBG_ERRL_STREAM4f_SET
#define READ_RX_X4_FEC_DBG_ERRL_4_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_FEC_DBG_ERRL_4_GEN2r
#define WRITE_RX_X4_FEC_DBG_ERRL_4_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_DBG_ERRL_4_GEN2r
#define MODIFY_RX_X4_FEC_DBG_ERRL_4_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_DBG_ERRL_4_GEN2r
#define READLN_RX_X4_FEC_DBG_ERRL_4_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_FEC_DBG_ERRL_4_GEN2r
#define WRITELN_RX_X4_FEC_DBG_ERRL_4_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_DBG_ERRL_4_GEN2r
#define WRITEALL_RX_X4_FEC_DBG_ERRL_4_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_DBG_ERRL_4_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRL_4_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_FEC_DBG_ERRAH_0_GEN2
 * BLOCKS:   RX_X4_STATUS3
 * REGADDR:  0xc185
 * DESC:     User FEC debug read data for stream 0[31:16]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     DBG_ERRH_STREAM0 16 MSB of the FEC debug data for stream 0, clear on readContents are latched upon read of Fecdbg_edataL
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_0_GEN2r (0x0000c185 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_DBG_ERRAH_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_0_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_dbg_errah_0_gen2[1];
	uint32_t _rx_x4_fec_dbg_errah_0_gen2;
} BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_0_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_0_GEN2r_CLR(r) (r).rx_x4_fec_dbg_errah_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_0_GEN2r_SET(r,d) (r).rx_x4_fec_dbg_errah_0_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_0_GEN2r_GET(r) (r).rx_x4_fec_dbg_errah_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_0_GEN2r_DBG_ERRH_STREAM0f_GET(r) (((r).rx_x4_fec_dbg_errah_0_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_0_GEN2r_DBG_ERRH_STREAM0f_SET(r,f) (r).rx_x4_fec_dbg_errah_0_gen2[0]=(((r).rx_x4_fec_dbg_errah_0_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_DBG_ERRAH_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_FEC_DBG_ERRAH_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_0_GEN2r,(_r._rx_x4_fec_dbg_errah_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_DBG_ERRAH_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_0_GEN2r,(_r._rx_x4_fec_dbg_errah_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_DBG_ERRAH_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_0_GEN2r,(_r._rx_x4_fec_dbg_errah_0_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_FEC_DBG_ERRAH_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_dbg_errah_0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_DBG_ERRAH_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_dbg_errah_0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_DBG_ERRAH_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_dbg_errah_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_DBG_ERRAH_0_GEN2r BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_0_GEN2r
#define RX_X4_FEC_DBG_ERRAH_0_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_0_GEN2r_t RX_X4_FEC_DBG_ERRAH_0_GEN2r_t;
#define RX_X4_FEC_DBG_ERRAH_0_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_0_GEN2r_CLR
#define RX_X4_FEC_DBG_ERRAH_0_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_0_GEN2r_SET
#define RX_X4_FEC_DBG_ERRAH_0_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_0_GEN2r_GET
#define RX_X4_FEC_DBG_ERRAH_0_GEN2r_DBG_ERRH_STREAM0f_GET BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_0_GEN2r_DBG_ERRH_STREAM0f_GET
#define RX_X4_FEC_DBG_ERRAH_0_GEN2r_DBG_ERRH_STREAM0f_SET BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_0_GEN2r_DBG_ERRH_STREAM0f_SET
#define READ_RX_X4_FEC_DBG_ERRAH_0_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_FEC_DBG_ERRAH_0_GEN2r
#define WRITE_RX_X4_FEC_DBG_ERRAH_0_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_DBG_ERRAH_0_GEN2r
#define MODIFY_RX_X4_FEC_DBG_ERRAH_0_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_DBG_ERRAH_0_GEN2r
#define READLN_RX_X4_FEC_DBG_ERRAH_0_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_FEC_DBG_ERRAH_0_GEN2r
#define WRITELN_RX_X4_FEC_DBG_ERRAH_0_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_DBG_ERRAH_0_GEN2r
#define WRITEALL_RX_X4_FEC_DBG_ERRAH_0_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_DBG_ERRAH_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_FEC_DBG_ERRAH_1_GEN2
 * BLOCKS:   RX_X4_STATUS3
 * REGADDR:  0xc186
 * DESC:     User FEC debug read data for stream 1[31:16]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     DBG_ERRH_STREAM1 16 MSB of the FEC debug data for stream 1, clear on readContents are latched upon read of Fecdbg_edataL
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_1_GEN2r (0x0000c186 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_DBG_ERRAH_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_1_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_dbg_errah_1_gen2[1];
	uint32_t _rx_x4_fec_dbg_errah_1_gen2;
} BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_1_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_1_GEN2r_CLR(r) (r).rx_x4_fec_dbg_errah_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_1_GEN2r_SET(r,d) (r).rx_x4_fec_dbg_errah_1_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_1_GEN2r_GET(r) (r).rx_x4_fec_dbg_errah_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_1_GEN2r_DBG_ERRH_STREAM1f_GET(r) (((r).rx_x4_fec_dbg_errah_1_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_1_GEN2r_DBG_ERRH_STREAM1f_SET(r,f) (r).rx_x4_fec_dbg_errah_1_gen2[0]=(((r).rx_x4_fec_dbg_errah_1_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_DBG_ERRAH_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_FEC_DBG_ERRAH_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_1_GEN2r,(_r._rx_x4_fec_dbg_errah_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_DBG_ERRAH_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_1_GEN2r,(_r._rx_x4_fec_dbg_errah_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_DBG_ERRAH_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_1_GEN2r,(_r._rx_x4_fec_dbg_errah_1_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_FEC_DBG_ERRAH_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_dbg_errah_1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_DBG_ERRAH_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_dbg_errah_1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_DBG_ERRAH_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_dbg_errah_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_DBG_ERRAH_1_GEN2r BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_1_GEN2r
#define RX_X4_FEC_DBG_ERRAH_1_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_1_GEN2r_t RX_X4_FEC_DBG_ERRAH_1_GEN2r_t;
#define RX_X4_FEC_DBG_ERRAH_1_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_1_GEN2r_CLR
#define RX_X4_FEC_DBG_ERRAH_1_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_1_GEN2r_SET
#define RX_X4_FEC_DBG_ERRAH_1_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_1_GEN2r_GET
#define RX_X4_FEC_DBG_ERRAH_1_GEN2r_DBG_ERRH_STREAM1f_GET BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_1_GEN2r_DBG_ERRH_STREAM1f_GET
#define RX_X4_FEC_DBG_ERRAH_1_GEN2r_DBG_ERRH_STREAM1f_SET BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_1_GEN2r_DBG_ERRH_STREAM1f_SET
#define READ_RX_X4_FEC_DBG_ERRAH_1_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_FEC_DBG_ERRAH_1_GEN2r
#define WRITE_RX_X4_FEC_DBG_ERRAH_1_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_DBG_ERRAH_1_GEN2r
#define MODIFY_RX_X4_FEC_DBG_ERRAH_1_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_DBG_ERRAH_1_GEN2r
#define READLN_RX_X4_FEC_DBG_ERRAH_1_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_FEC_DBG_ERRAH_1_GEN2r
#define WRITELN_RX_X4_FEC_DBG_ERRAH_1_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_DBG_ERRAH_1_GEN2r
#define WRITEALL_RX_X4_FEC_DBG_ERRAH_1_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_DBG_ERRAH_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_FEC_DBG_ERRAH_2_GEN2
 * BLOCKS:   RX_X4_STATUS3
 * REGADDR:  0xc187
 * DESC:     User FEC debug read data for stream 2[31:16]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     DBG_ERRH_STREAM2 16 MSB of the FEC debug data for stream 2, clear on readContents are latched upon read of Fecdbg_edataL
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_2_GEN2r (0x0000c187 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_DBG_ERRAH_2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_2_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_dbg_errah_2_gen2[1];
	uint32_t _rx_x4_fec_dbg_errah_2_gen2;
} BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_2_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_2_GEN2r_CLR(r) (r).rx_x4_fec_dbg_errah_2_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_2_GEN2r_SET(r,d) (r).rx_x4_fec_dbg_errah_2_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_2_GEN2r_GET(r) (r).rx_x4_fec_dbg_errah_2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_2_GEN2r_DBG_ERRH_STREAM2f_GET(r) (((r).rx_x4_fec_dbg_errah_2_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_2_GEN2r_DBG_ERRH_STREAM2f_SET(r,f) (r).rx_x4_fec_dbg_errah_2_gen2[0]=(((r).rx_x4_fec_dbg_errah_2_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_DBG_ERRAH_2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_FEC_DBG_ERRAH_2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_2_GEN2r,(_r._rx_x4_fec_dbg_errah_2_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_DBG_ERRAH_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_2_GEN2r,(_r._rx_x4_fec_dbg_errah_2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_DBG_ERRAH_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_2_GEN2r,(_r._rx_x4_fec_dbg_errah_2_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_FEC_DBG_ERRAH_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_dbg_errah_2_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_DBG_ERRAH_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_dbg_errah_2_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_DBG_ERRAH_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_dbg_errah_2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_DBG_ERRAH_2_GEN2r BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_2_GEN2r
#define RX_X4_FEC_DBG_ERRAH_2_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_2_GEN2r_t RX_X4_FEC_DBG_ERRAH_2_GEN2r_t;
#define RX_X4_FEC_DBG_ERRAH_2_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_2_GEN2r_CLR
#define RX_X4_FEC_DBG_ERRAH_2_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_2_GEN2r_SET
#define RX_X4_FEC_DBG_ERRAH_2_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_2_GEN2r_GET
#define RX_X4_FEC_DBG_ERRAH_2_GEN2r_DBG_ERRH_STREAM2f_GET BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_2_GEN2r_DBG_ERRH_STREAM2f_GET
#define RX_X4_FEC_DBG_ERRAH_2_GEN2r_DBG_ERRH_STREAM2f_SET BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_2_GEN2r_DBG_ERRH_STREAM2f_SET
#define READ_RX_X4_FEC_DBG_ERRAH_2_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_FEC_DBG_ERRAH_2_GEN2r
#define WRITE_RX_X4_FEC_DBG_ERRAH_2_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_DBG_ERRAH_2_GEN2r
#define MODIFY_RX_X4_FEC_DBG_ERRAH_2_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_DBG_ERRAH_2_GEN2r
#define READLN_RX_X4_FEC_DBG_ERRAH_2_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_FEC_DBG_ERRAH_2_GEN2r
#define WRITELN_RX_X4_FEC_DBG_ERRAH_2_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_DBG_ERRAH_2_GEN2r
#define WRITEALL_RX_X4_FEC_DBG_ERRAH_2_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_DBG_ERRAH_2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_FEC_DBG_ERRAH_3_GEN2
 * BLOCKS:   RX_X4_STATUS3
 * REGADDR:  0xc188
 * DESC:     User FEC debug read data for stream 8[31:16]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     DBG_ERRH_STREAM3 16 MSB of the FEC debug data for stream 3, clear on readContents are latched upon read of Fecdbg_edataL
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_3_GEN2r (0x0000c188 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_3_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_DBG_ERRAH_3_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_3_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_dbg_errah_3_gen2[1];
	uint32_t _rx_x4_fec_dbg_errah_3_gen2;
} BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_3_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_3_GEN2r_CLR(r) (r).rx_x4_fec_dbg_errah_3_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_3_GEN2r_SET(r,d) (r).rx_x4_fec_dbg_errah_3_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_3_GEN2r_GET(r) (r).rx_x4_fec_dbg_errah_3_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_3_GEN2r_DBG_ERRH_STREAM3f_GET(r) (((r).rx_x4_fec_dbg_errah_3_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_3_GEN2r_DBG_ERRH_STREAM3f_SET(r,f) (r).rx_x4_fec_dbg_errah_3_gen2[0]=(((r).rx_x4_fec_dbg_errah_3_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_DBG_ERRAH_3_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_FEC_DBG_ERRAH_3_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_3_GEN2r,(_r._rx_x4_fec_dbg_errah_3_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_DBG_ERRAH_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_3_GEN2r,(_r._rx_x4_fec_dbg_errah_3_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_DBG_ERRAH_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_3_GEN2r,(_r._rx_x4_fec_dbg_errah_3_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_FEC_DBG_ERRAH_3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_dbg_errah_3_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_DBG_ERRAH_3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_dbg_errah_3_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_DBG_ERRAH_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_dbg_errah_3_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_DBG_ERRAH_3_GEN2r BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_3_GEN2r
#define RX_X4_FEC_DBG_ERRAH_3_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_3_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_3_GEN2r_t RX_X4_FEC_DBG_ERRAH_3_GEN2r_t;
#define RX_X4_FEC_DBG_ERRAH_3_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_3_GEN2r_CLR
#define RX_X4_FEC_DBG_ERRAH_3_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_3_GEN2r_SET
#define RX_X4_FEC_DBG_ERRAH_3_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_3_GEN2r_GET
#define RX_X4_FEC_DBG_ERRAH_3_GEN2r_DBG_ERRH_STREAM3f_GET BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_3_GEN2r_DBG_ERRH_STREAM3f_GET
#define RX_X4_FEC_DBG_ERRAH_3_GEN2r_DBG_ERRH_STREAM3f_SET BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_3_GEN2r_DBG_ERRH_STREAM3f_SET
#define READ_RX_X4_FEC_DBG_ERRAH_3_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_FEC_DBG_ERRAH_3_GEN2r
#define WRITE_RX_X4_FEC_DBG_ERRAH_3_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_DBG_ERRAH_3_GEN2r
#define MODIFY_RX_X4_FEC_DBG_ERRAH_3_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_DBG_ERRAH_3_GEN2r
#define READLN_RX_X4_FEC_DBG_ERRAH_3_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_FEC_DBG_ERRAH_3_GEN2r
#define WRITELN_RX_X4_FEC_DBG_ERRAH_3_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_DBG_ERRAH_3_GEN2r
#define WRITEALL_RX_X4_FEC_DBG_ERRAH_3_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_DBG_ERRAH_3_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_3_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_FEC_DBG_ERRAH_4_GEN2
 * BLOCKS:   RX_X4_STATUS3
 * REGADDR:  0xc189
 * DESC:     User FEC debug read data for stream 4[31:16]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     DBG_ERRH_STREAM4 16 MSB of the FEC debug data for stream 4, clear on readContents are latched upon read of Fecdbg_edataL
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_4_GEN2r (0x0000c189 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_4_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_DBG_ERRAH_4_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_4_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_dbg_errah_4_gen2[1];
	uint32_t _rx_x4_fec_dbg_errah_4_gen2;
} BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_4_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_4_GEN2r_CLR(r) (r).rx_x4_fec_dbg_errah_4_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_4_GEN2r_SET(r,d) (r).rx_x4_fec_dbg_errah_4_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_4_GEN2r_GET(r) (r).rx_x4_fec_dbg_errah_4_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_4_GEN2r_DBG_ERRH_STREAM4f_GET(r) (((r).rx_x4_fec_dbg_errah_4_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_4_GEN2r_DBG_ERRH_STREAM4f_SET(r,f) (r).rx_x4_fec_dbg_errah_4_gen2[0]=(((r).rx_x4_fec_dbg_errah_4_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_DBG_ERRAH_4_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_FEC_DBG_ERRAH_4_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_4_GEN2r,(_r._rx_x4_fec_dbg_errah_4_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_DBG_ERRAH_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_4_GEN2r,(_r._rx_x4_fec_dbg_errah_4_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_DBG_ERRAH_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_4_GEN2r,(_r._rx_x4_fec_dbg_errah_4_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_FEC_DBG_ERRAH_4_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_dbg_errah_4_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_DBG_ERRAH_4_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_dbg_errah_4_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_DBG_ERRAH_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_dbg_errah_4_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_DBG_ERRAH_4_GEN2r BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_4_GEN2r
#define RX_X4_FEC_DBG_ERRAH_4_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_4_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_4_GEN2r_t RX_X4_FEC_DBG_ERRAH_4_GEN2r_t;
#define RX_X4_FEC_DBG_ERRAH_4_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_4_GEN2r_CLR
#define RX_X4_FEC_DBG_ERRAH_4_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_4_GEN2r_SET
#define RX_X4_FEC_DBG_ERRAH_4_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_4_GEN2r_GET
#define RX_X4_FEC_DBG_ERRAH_4_GEN2r_DBG_ERRH_STREAM4f_GET BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_4_GEN2r_DBG_ERRH_STREAM4f_GET
#define RX_X4_FEC_DBG_ERRAH_4_GEN2r_DBG_ERRH_STREAM4f_SET BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_4_GEN2r_DBG_ERRH_STREAM4f_SET
#define READ_RX_X4_FEC_DBG_ERRAH_4_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_FEC_DBG_ERRAH_4_GEN2r
#define WRITE_RX_X4_FEC_DBG_ERRAH_4_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_DBG_ERRAH_4_GEN2r
#define MODIFY_RX_X4_FEC_DBG_ERRAH_4_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_DBG_ERRAH_4_GEN2r
#define READLN_RX_X4_FEC_DBG_ERRAH_4_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_FEC_DBG_ERRAH_4_GEN2r
#define WRITELN_RX_X4_FEC_DBG_ERRAH_4_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_DBG_ERRAH_4_GEN2r
#define WRITEALL_RX_X4_FEC_DBG_ERRAH_4_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_DBG_ERRAH_4_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_FEC_DBG_ERRAH_4_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_FEC_BURST_ERR_STSL_0_GEN2
 * BLOCKS:   RX_X4_STATUS3
 * REGADDR:  0xc18a
 * DESC:     fec burst error status lower 16 bits for stream 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BURST_ERR_STATUSL_STREAM0 16 LSB of the fec_burst_err_status for stream 0bits mapping :Bit [15:0] : b21[15:0]Note: Bit 15 of Fec_burst_err_statusH register clears upon reading this register
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_0_GEN2r (0x0000c18a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_BURST_ERR_STSL_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_0_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_burst_err_stsl_0_gen2[1];
	uint32_t _rx_x4_fec_burst_err_stsl_0_gen2;
} BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_0_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_0_GEN2r_CLR(r) (r).rx_x4_fec_burst_err_stsl_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_0_GEN2r_SET(r,d) (r).rx_x4_fec_burst_err_stsl_0_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_0_GEN2r_GET(r) (r).rx_x4_fec_burst_err_stsl_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_0_GEN2r_BURST_ERR_STATUSL_STREAM0f_GET(r) (((r).rx_x4_fec_burst_err_stsl_0_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_0_GEN2r_BURST_ERR_STATUSL_STREAM0f_SET(r,f) (r).rx_x4_fec_burst_err_stsl_0_gen2[0]=(((r).rx_x4_fec_burst_err_stsl_0_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_BURST_ERR_STSL_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_FEC_BURST_ERR_STSL_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_0_GEN2r,(_r._rx_x4_fec_burst_err_stsl_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_BURST_ERR_STSL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_0_GEN2r,(_r._rx_x4_fec_burst_err_stsl_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_BURST_ERR_STSL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_0_GEN2r,(_r._rx_x4_fec_burst_err_stsl_0_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_FEC_BURST_ERR_STSL_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_burst_err_stsl_0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_BURST_ERR_STSL_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_burst_err_stsl_0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_BURST_ERR_STSL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_burst_err_stsl_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_BURST_ERR_STSL_0_GEN2r BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_0_GEN2r
#define RX_X4_FEC_BURST_ERR_STSL_0_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_0_GEN2r_t RX_X4_FEC_BURST_ERR_STSL_0_GEN2r_t;
#define RX_X4_FEC_BURST_ERR_STSL_0_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_0_GEN2r_CLR
#define RX_X4_FEC_BURST_ERR_STSL_0_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_0_GEN2r_SET
#define RX_X4_FEC_BURST_ERR_STSL_0_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_0_GEN2r_GET
#define RX_X4_FEC_BURST_ERR_STSL_0_GEN2r_BURST_ERR_STATUSL_STREAM0f_GET BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_0_GEN2r_BURST_ERR_STATUSL_STREAM0f_GET
#define RX_X4_FEC_BURST_ERR_STSL_0_GEN2r_BURST_ERR_STATUSL_STREAM0f_SET BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_0_GEN2r_BURST_ERR_STATUSL_STREAM0f_SET
#define READ_RX_X4_FEC_BURST_ERR_STSL_0_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_FEC_BURST_ERR_STSL_0_GEN2r
#define WRITE_RX_X4_FEC_BURST_ERR_STSL_0_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_BURST_ERR_STSL_0_GEN2r
#define MODIFY_RX_X4_FEC_BURST_ERR_STSL_0_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_BURST_ERR_STSL_0_GEN2r
#define READLN_RX_X4_FEC_BURST_ERR_STSL_0_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_FEC_BURST_ERR_STSL_0_GEN2r
#define WRITELN_RX_X4_FEC_BURST_ERR_STSL_0_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_BURST_ERR_STSL_0_GEN2r
#define WRITEALL_RX_X4_FEC_BURST_ERR_STSL_0_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_BURST_ERR_STSL_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_FEC_BURST_ERR_STSL_1_GEN2
 * BLOCKS:   RX_X4_STATUS3
 * REGADDR:  0xc18b
 * DESC:     fec burst error status lower 16 bits for stream 1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BURST_ERR_STATUSL_STREAM1 16 LSB of the fec_burst_err_status for stream 1bits mapping :Bit [15:0] : b21[15:0]Note: Bit 15 of Fec_burst_err_statusH register clears upon reading this register
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_1_GEN2r (0x0000c18b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_BURST_ERR_STSL_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_1_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_burst_err_stsl_1_gen2[1];
	uint32_t _rx_x4_fec_burst_err_stsl_1_gen2;
} BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_1_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_1_GEN2r_CLR(r) (r).rx_x4_fec_burst_err_stsl_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_1_GEN2r_SET(r,d) (r).rx_x4_fec_burst_err_stsl_1_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_1_GEN2r_GET(r) (r).rx_x4_fec_burst_err_stsl_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_1_GEN2r_BURST_ERR_STATUSL_STREAM1f_GET(r) (((r).rx_x4_fec_burst_err_stsl_1_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_1_GEN2r_BURST_ERR_STATUSL_STREAM1f_SET(r,f) (r).rx_x4_fec_burst_err_stsl_1_gen2[0]=(((r).rx_x4_fec_burst_err_stsl_1_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_BURST_ERR_STSL_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_FEC_BURST_ERR_STSL_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_1_GEN2r,(_r._rx_x4_fec_burst_err_stsl_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_BURST_ERR_STSL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_1_GEN2r,(_r._rx_x4_fec_burst_err_stsl_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_BURST_ERR_STSL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_1_GEN2r,(_r._rx_x4_fec_burst_err_stsl_1_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_FEC_BURST_ERR_STSL_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_burst_err_stsl_1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_BURST_ERR_STSL_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_burst_err_stsl_1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_BURST_ERR_STSL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_burst_err_stsl_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_BURST_ERR_STSL_1_GEN2r BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_1_GEN2r
#define RX_X4_FEC_BURST_ERR_STSL_1_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_1_GEN2r_t RX_X4_FEC_BURST_ERR_STSL_1_GEN2r_t;
#define RX_X4_FEC_BURST_ERR_STSL_1_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_1_GEN2r_CLR
#define RX_X4_FEC_BURST_ERR_STSL_1_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_1_GEN2r_SET
#define RX_X4_FEC_BURST_ERR_STSL_1_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_1_GEN2r_GET
#define RX_X4_FEC_BURST_ERR_STSL_1_GEN2r_BURST_ERR_STATUSL_STREAM1f_GET BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_1_GEN2r_BURST_ERR_STATUSL_STREAM1f_GET
#define RX_X4_FEC_BURST_ERR_STSL_1_GEN2r_BURST_ERR_STATUSL_STREAM1f_SET BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_1_GEN2r_BURST_ERR_STATUSL_STREAM1f_SET
#define READ_RX_X4_FEC_BURST_ERR_STSL_1_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_FEC_BURST_ERR_STSL_1_GEN2r
#define WRITE_RX_X4_FEC_BURST_ERR_STSL_1_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_BURST_ERR_STSL_1_GEN2r
#define MODIFY_RX_X4_FEC_BURST_ERR_STSL_1_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_BURST_ERR_STSL_1_GEN2r
#define READLN_RX_X4_FEC_BURST_ERR_STSL_1_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_FEC_BURST_ERR_STSL_1_GEN2r
#define WRITELN_RX_X4_FEC_BURST_ERR_STSL_1_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_BURST_ERR_STSL_1_GEN2r
#define WRITEALL_RX_X4_FEC_BURST_ERR_STSL_1_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_BURST_ERR_STSL_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_FEC_BURST_ERR_STSL_2_GEN2
 * BLOCKS:   RX_X4_STATUS3
 * REGADDR:  0xc18c
 * DESC:     fec burst error status lower 16 bits for stream 2
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BURST_ERR_STATUSL_STREAM2 16 LSB of the fec_burst_err_status for stream 2bits mapping :Bit [15:0] : b21[15:0]Note: Bit 15 of Fec_burst_err_statusH register clears upon reading this register
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_2_GEN2r (0x0000c18c | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_BURST_ERR_STSL_2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_2_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_burst_err_stsl_2_gen2[1];
	uint32_t _rx_x4_fec_burst_err_stsl_2_gen2;
} BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_2_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_2_GEN2r_CLR(r) (r).rx_x4_fec_burst_err_stsl_2_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_2_GEN2r_SET(r,d) (r).rx_x4_fec_burst_err_stsl_2_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_2_GEN2r_GET(r) (r).rx_x4_fec_burst_err_stsl_2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_2_GEN2r_BURST_ERR_STATUSL_STREAM2f_GET(r) (((r).rx_x4_fec_burst_err_stsl_2_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_2_GEN2r_BURST_ERR_STATUSL_STREAM2f_SET(r,f) (r).rx_x4_fec_burst_err_stsl_2_gen2[0]=(((r).rx_x4_fec_burst_err_stsl_2_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_BURST_ERR_STSL_2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_FEC_BURST_ERR_STSL_2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_2_GEN2r,(_r._rx_x4_fec_burst_err_stsl_2_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_BURST_ERR_STSL_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_2_GEN2r,(_r._rx_x4_fec_burst_err_stsl_2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_BURST_ERR_STSL_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_2_GEN2r,(_r._rx_x4_fec_burst_err_stsl_2_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_FEC_BURST_ERR_STSL_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_burst_err_stsl_2_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_BURST_ERR_STSL_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_burst_err_stsl_2_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_BURST_ERR_STSL_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_burst_err_stsl_2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_BURST_ERR_STSL_2_GEN2r BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_2_GEN2r
#define RX_X4_FEC_BURST_ERR_STSL_2_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_2_GEN2r_t RX_X4_FEC_BURST_ERR_STSL_2_GEN2r_t;
#define RX_X4_FEC_BURST_ERR_STSL_2_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_2_GEN2r_CLR
#define RX_X4_FEC_BURST_ERR_STSL_2_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_2_GEN2r_SET
#define RX_X4_FEC_BURST_ERR_STSL_2_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_2_GEN2r_GET
#define RX_X4_FEC_BURST_ERR_STSL_2_GEN2r_BURST_ERR_STATUSL_STREAM2f_GET BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_2_GEN2r_BURST_ERR_STATUSL_STREAM2f_GET
#define RX_X4_FEC_BURST_ERR_STSL_2_GEN2r_BURST_ERR_STATUSL_STREAM2f_SET BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_2_GEN2r_BURST_ERR_STATUSL_STREAM2f_SET
#define READ_RX_X4_FEC_BURST_ERR_STSL_2_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_FEC_BURST_ERR_STSL_2_GEN2r
#define WRITE_RX_X4_FEC_BURST_ERR_STSL_2_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_BURST_ERR_STSL_2_GEN2r
#define MODIFY_RX_X4_FEC_BURST_ERR_STSL_2_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_BURST_ERR_STSL_2_GEN2r
#define READLN_RX_X4_FEC_BURST_ERR_STSL_2_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_FEC_BURST_ERR_STSL_2_GEN2r
#define WRITELN_RX_X4_FEC_BURST_ERR_STSL_2_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_BURST_ERR_STSL_2_GEN2r
#define WRITEALL_RX_X4_FEC_BURST_ERR_STSL_2_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_BURST_ERR_STSL_2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_FEC_BURST_ERR_STSL_3_GEN2
 * BLOCKS:   RX_X4_STATUS3
 * REGADDR:  0xc18d
 * DESC:     fec burst error status lower 16 bits for stream 3
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BURST_ERR_STATUSL_STREAM3 16 LSB of the fec_burst_err_status for stream 3bits mapping :Bit [15:0] : b21[15:0]Note: Bit 15 of Fec_burst_err_statusH register clears upon reading this register
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_3_GEN2r (0x0000c18d | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_3_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_BURST_ERR_STSL_3_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_3_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_burst_err_stsl_3_gen2[1];
	uint32_t _rx_x4_fec_burst_err_stsl_3_gen2;
} BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_3_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_3_GEN2r_CLR(r) (r).rx_x4_fec_burst_err_stsl_3_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_3_GEN2r_SET(r,d) (r).rx_x4_fec_burst_err_stsl_3_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_3_GEN2r_GET(r) (r).rx_x4_fec_burst_err_stsl_3_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_3_GEN2r_BURST_ERR_STATUSL_STREAM3f_GET(r) (((r).rx_x4_fec_burst_err_stsl_3_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_3_GEN2r_BURST_ERR_STATUSL_STREAM3f_SET(r,f) (r).rx_x4_fec_burst_err_stsl_3_gen2[0]=(((r).rx_x4_fec_burst_err_stsl_3_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_BURST_ERR_STSL_3_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_FEC_BURST_ERR_STSL_3_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_3_GEN2r,(_r._rx_x4_fec_burst_err_stsl_3_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_BURST_ERR_STSL_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_3_GEN2r,(_r._rx_x4_fec_burst_err_stsl_3_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_BURST_ERR_STSL_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_3_GEN2r,(_r._rx_x4_fec_burst_err_stsl_3_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_FEC_BURST_ERR_STSL_3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_burst_err_stsl_3_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_BURST_ERR_STSL_3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_burst_err_stsl_3_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_BURST_ERR_STSL_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_burst_err_stsl_3_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_BURST_ERR_STSL_3_GEN2r BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_3_GEN2r
#define RX_X4_FEC_BURST_ERR_STSL_3_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_3_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_3_GEN2r_t RX_X4_FEC_BURST_ERR_STSL_3_GEN2r_t;
#define RX_X4_FEC_BURST_ERR_STSL_3_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_3_GEN2r_CLR
#define RX_X4_FEC_BURST_ERR_STSL_3_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_3_GEN2r_SET
#define RX_X4_FEC_BURST_ERR_STSL_3_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_3_GEN2r_GET
#define RX_X4_FEC_BURST_ERR_STSL_3_GEN2r_BURST_ERR_STATUSL_STREAM3f_GET BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_3_GEN2r_BURST_ERR_STATUSL_STREAM3f_GET
#define RX_X4_FEC_BURST_ERR_STSL_3_GEN2r_BURST_ERR_STATUSL_STREAM3f_SET BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_3_GEN2r_BURST_ERR_STATUSL_STREAM3f_SET
#define READ_RX_X4_FEC_BURST_ERR_STSL_3_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_FEC_BURST_ERR_STSL_3_GEN2r
#define WRITE_RX_X4_FEC_BURST_ERR_STSL_3_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_BURST_ERR_STSL_3_GEN2r
#define MODIFY_RX_X4_FEC_BURST_ERR_STSL_3_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_BURST_ERR_STSL_3_GEN2r
#define READLN_RX_X4_FEC_BURST_ERR_STSL_3_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_FEC_BURST_ERR_STSL_3_GEN2r
#define WRITELN_RX_X4_FEC_BURST_ERR_STSL_3_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_BURST_ERR_STSL_3_GEN2r
#define WRITEALL_RX_X4_FEC_BURST_ERR_STSL_3_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_BURST_ERR_STSL_3_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_3_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_FEC_BURST_ERR_STSL_4_GEN2
 * BLOCKS:   RX_X4_STATUS3
 * REGADDR:  0xc18e
 * DESC:     fec burst error status lower 16 bits for stream 4
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BURST_ERR_STATUSL_STREAM4 16 LSB of the fec_burst_err_status for stream 4bits mapping :Bit [15:0] : b21[15:0]Note: Bit 15 of Fec_burst_err_statusH register clears upon reading this register
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_4_GEN2r (0x0000c18e | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_4_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_BURST_ERR_STSL_4_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_4_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_burst_err_stsl_4_gen2[1];
	uint32_t _rx_x4_fec_burst_err_stsl_4_gen2;
} BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_4_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_4_GEN2r_CLR(r) (r).rx_x4_fec_burst_err_stsl_4_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_4_GEN2r_SET(r,d) (r).rx_x4_fec_burst_err_stsl_4_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_4_GEN2r_GET(r) (r).rx_x4_fec_burst_err_stsl_4_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_4_GEN2r_BURST_ERR_STATUSL_STREAM4f_GET(r) (((r).rx_x4_fec_burst_err_stsl_4_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_4_GEN2r_BURST_ERR_STATUSL_STREAM4f_SET(r,f) (r).rx_x4_fec_burst_err_stsl_4_gen2[0]=(((r).rx_x4_fec_burst_err_stsl_4_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_BURST_ERR_STSL_4_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_FEC_BURST_ERR_STSL_4_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_4_GEN2r,(_r._rx_x4_fec_burst_err_stsl_4_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_BURST_ERR_STSL_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_4_GEN2r,(_r._rx_x4_fec_burst_err_stsl_4_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_BURST_ERR_STSL_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_4_GEN2r,(_r._rx_x4_fec_burst_err_stsl_4_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_FEC_BURST_ERR_STSL_4_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_burst_err_stsl_4_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_BURST_ERR_STSL_4_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_burst_err_stsl_4_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_BURST_ERR_STSL_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_burst_err_stsl_4_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_BURST_ERR_STSL_4_GEN2r BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_4_GEN2r
#define RX_X4_FEC_BURST_ERR_STSL_4_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_4_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_4_GEN2r_t RX_X4_FEC_BURST_ERR_STSL_4_GEN2r_t;
#define RX_X4_FEC_BURST_ERR_STSL_4_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_4_GEN2r_CLR
#define RX_X4_FEC_BURST_ERR_STSL_4_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_4_GEN2r_SET
#define RX_X4_FEC_BURST_ERR_STSL_4_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_4_GEN2r_GET
#define RX_X4_FEC_BURST_ERR_STSL_4_GEN2r_BURST_ERR_STATUSL_STREAM4f_GET BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_4_GEN2r_BURST_ERR_STATUSL_STREAM4f_GET
#define RX_X4_FEC_BURST_ERR_STSL_4_GEN2r_BURST_ERR_STATUSL_STREAM4f_SET BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_4_GEN2r_BURST_ERR_STATUSL_STREAM4f_SET
#define READ_RX_X4_FEC_BURST_ERR_STSL_4_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_FEC_BURST_ERR_STSL_4_GEN2r
#define WRITE_RX_X4_FEC_BURST_ERR_STSL_4_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_BURST_ERR_STSL_4_GEN2r
#define MODIFY_RX_X4_FEC_BURST_ERR_STSL_4_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_BURST_ERR_STSL_4_GEN2r
#define READLN_RX_X4_FEC_BURST_ERR_STSL_4_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_FEC_BURST_ERR_STSL_4_GEN2r
#define WRITELN_RX_X4_FEC_BURST_ERR_STSL_4_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_BURST_ERR_STSL_4_GEN2r
#define WRITEALL_RX_X4_FEC_BURST_ERR_STSL_4_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_BURST_ERR_STSL_4_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSL_4_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_FEC_BURST_ERR_STSH_0_GEN2
 * BLOCKS:   RX_X4_STATUS4
 * REGADDR:  0xc190
 * DESC:     fec burst error status lower 16 bits for stream 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BURST_ERR_STATUSH_STREAM0 Note: This register is only valid in case of Correctable Error scenario.In case of uncorrectable error case, This register may contain invalid data information.16 MSB of the fec_burst_err_status for stream 0bits mapping :Bit 15: status updatedBit 8: 21-bit burst detected, but location failed pattern searchBit 7: pattern match passedBit 6: Corrected alternate errorBit 5: Corrected errorBit [4:0] : b21[20:16]Note: Bit 15 clears upon reading Fec_burst_err_statusL register
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_0_GEN2r (0x0000c190 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_BURST_ERR_STSH_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_0_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_burst_err_stsh_0_gen2[1];
	uint32_t _rx_x4_fec_burst_err_stsh_0_gen2;
} BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_0_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_0_GEN2r_CLR(r) (r).rx_x4_fec_burst_err_stsh_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_0_GEN2r_SET(r,d) (r).rx_x4_fec_burst_err_stsh_0_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_0_GEN2r_GET(r) (r).rx_x4_fec_burst_err_stsh_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_0_GEN2r_BURST_ERR_STATUSH_STREAM0f_GET(r) (((r).rx_x4_fec_burst_err_stsh_0_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_0_GEN2r_BURST_ERR_STATUSH_STREAM0f_SET(r,f) (r).rx_x4_fec_burst_err_stsh_0_gen2[0]=(((r).rx_x4_fec_burst_err_stsh_0_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_BURST_ERR_STSH_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_FEC_BURST_ERR_STSH_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_0_GEN2r,(_r._rx_x4_fec_burst_err_stsh_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_BURST_ERR_STSH_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_0_GEN2r,(_r._rx_x4_fec_burst_err_stsh_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_BURST_ERR_STSH_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_0_GEN2r,(_r._rx_x4_fec_burst_err_stsh_0_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_FEC_BURST_ERR_STSH_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_burst_err_stsh_0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_BURST_ERR_STSH_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_burst_err_stsh_0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_BURST_ERR_STSH_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_burst_err_stsh_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_BURST_ERR_STSH_0_GEN2r BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_0_GEN2r
#define RX_X4_FEC_BURST_ERR_STSH_0_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_0_GEN2r_t RX_X4_FEC_BURST_ERR_STSH_0_GEN2r_t;
#define RX_X4_FEC_BURST_ERR_STSH_0_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_0_GEN2r_CLR
#define RX_X4_FEC_BURST_ERR_STSH_0_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_0_GEN2r_SET
#define RX_X4_FEC_BURST_ERR_STSH_0_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_0_GEN2r_GET
#define RX_X4_FEC_BURST_ERR_STSH_0_GEN2r_BURST_ERR_STATUSH_STREAM0f_GET BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_0_GEN2r_BURST_ERR_STATUSH_STREAM0f_GET
#define RX_X4_FEC_BURST_ERR_STSH_0_GEN2r_BURST_ERR_STATUSH_STREAM0f_SET BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_0_GEN2r_BURST_ERR_STATUSH_STREAM0f_SET
#define READ_RX_X4_FEC_BURST_ERR_STSH_0_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_FEC_BURST_ERR_STSH_0_GEN2r
#define WRITE_RX_X4_FEC_BURST_ERR_STSH_0_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_BURST_ERR_STSH_0_GEN2r
#define MODIFY_RX_X4_FEC_BURST_ERR_STSH_0_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_BURST_ERR_STSH_0_GEN2r
#define READLN_RX_X4_FEC_BURST_ERR_STSH_0_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_FEC_BURST_ERR_STSH_0_GEN2r
#define WRITELN_RX_X4_FEC_BURST_ERR_STSH_0_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_BURST_ERR_STSH_0_GEN2r
#define WRITEALL_RX_X4_FEC_BURST_ERR_STSH_0_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_BURST_ERR_STSH_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_FEC_BURST_ERR_STSH_1_GEN2
 * BLOCKS:   RX_X4_STATUS4
 * REGADDR:  0xc191
 * DESC:     fec burst error status lower 16 bits for stream 1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BURST_ERR_STATUSH_STREAM1 Note: This register is only valid in case of Correctable Error scenario.In case of uncorrectable error case, This register may contain invalid data information.16 MSB of the fec_burst_err_status for stream 1bits mapping :Bit 15: status updatedBit 8: 21-bit burst detected, but location failed pattern searchBit 7: pattern match passedBit 6: Corrected alternate errorBit 5: Corrected errorBit [4:0] : b21[20:16]Note: Bit 15 clears upon reading Fec_burst_err_statusL register
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_1_GEN2r (0x0000c191 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_BURST_ERR_STSH_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_1_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_burst_err_stsh_1_gen2[1];
	uint32_t _rx_x4_fec_burst_err_stsh_1_gen2;
} BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_1_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_1_GEN2r_CLR(r) (r).rx_x4_fec_burst_err_stsh_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_1_GEN2r_SET(r,d) (r).rx_x4_fec_burst_err_stsh_1_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_1_GEN2r_GET(r) (r).rx_x4_fec_burst_err_stsh_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_1_GEN2r_BURST_ERR_STATUSH_STREAM1f_GET(r) (((r).rx_x4_fec_burst_err_stsh_1_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_1_GEN2r_BURST_ERR_STATUSH_STREAM1f_SET(r,f) (r).rx_x4_fec_burst_err_stsh_1_gen2[0]=(((r).rx_x4_fec_burst_err_stsh_1_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_BURST_ERR_STSH_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_FEC_BURST_ERR_STSH_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_1_GEN2r,(_r._rx_x4_fec_burst_err_stsh_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_BURST_ERR_STSH_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_1_GEN2r,(_r._rx_x4_fec_burst_err_stsh_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_BURST_ERR_STSH_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_1_GEN2r,(_r._rx_x4_fec_burst_err_stsh_1_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_FEC_BURST_ERR_STSH_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_burst_err_stsh_1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_BURST_ERR_STSH_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_burst_err_stsh_1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_BURST_ERR_STSH_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_burst_err_stsh_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_BURST_ERR_STSH_1_GEN2r BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_1_GEN2r
#define RX_X4_FEC_BURST_ERR_STSH_1_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_1_GEN2r_t RX_X4_FEC_BURST_ERR_STSH_1_GEN2r_t;
#define RX_X4_FEC_BURST_ERR_STSH_1_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_1_GEN2r_CLR
#define RX_X4_FEC_BURST_ERR_STSH_1_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_1_GEN2r_SET
#define RX_X4_FEC_BURST_ERR_STSH_1_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_1_GEN2r_GET
#define RX_X4_FEC_BURST_ERR_STSH_1_GEN2r_BURST_ERR_STATUSH_STREAM1f_GET BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_1_GEN2r_BURST_ERR_STATUSH_STREAM1f_GET
#define RX_X4_FEC_BURST_ERR_STSH_1_GEN2r_BURST_ERR_STATUSH_STREAM1f_SET BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_1_GEN2r_BURST_ERR_STATUSH_STREAM1f_SET
#define READ_RX_X4_FEC_BURST_ERR_STSH_1_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_FEC_BURST_ERR_STSH_1_GEN2r
#define WRITE_RX_X4_FEC_BURST_ERR_STSH_1_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_BURST_ERR_STSH_1_GEN2r
#define MODIFY_RX_X4_FEC_BURST_ERR_STSH_1_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_BURST_ERR_STSH_1_GEN2r
#define READLN_RX_X4_FEC_BURST_ERR_STSH_1_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_FEC_BURST_ERR_STSH_1_GEN2r
#define WRITELN_RX_X4_FEC_BURST_ERR_STSH_1_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_BURST_ERR_STSH_1_GEN2r
#define WRITEALL_RX_X4_FEC_BURST_ERR_STSH_1_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_BURST_ERR_STSH_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_FEC_BURST_ERR_STSH_2_GEN2
 * BLOCKS:   RX_X4_STATUS4
 * REGADDR:  0xc192
 * DESC:     fec burst error status lower 16 bits for stream 2
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BURST_ERR_STATUSH_STREAM2 Note: This register is only valid in case of Correctable Error scenario.In case of uncorrectable error case, This register may contain invalid data information.16 MSB of the fec_burst_err_status for stream 2bits mapping :Bit 15: status updatedBit 8: 21-bit burst detected, but location failed pattern searchBit 7: pattern match passedBit 6: Corrected alternate errorBit 5: Corrected errorBit [4:0] : b21[20:16]Note: Bit 15 clears upon reading Fec_burst_err_statusL register
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_2_GEN2r (0x0000c192 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_BURST_ERR_STSH_2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_2_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_burst_err_stsh_2_gen2[1];
	uint32_t _rx_x4_fec_burst_err_stsh_2_gen2;
} BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_2_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_2_GEN2r_CLR(r) (r).rx_x4_fec_burst_err_stsh_2_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_2_GEN2r_SET(r,d) (r).rx_x4_fec_burst_err_stsh_2_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_2_GEN2r_GET(r) (r).rx_x4_fec_burst_err_stsh_2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_2_GEN2r_BURST_ERR_STATUSH_STREAM2f_GET(r) (((r).rx_x4_fec_burst_err_stsh_2_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_2_GEN2r_BURST_ERR_STATUSH_STREAM2f_SET(r,f) (r).rx_x4_fec_burst_err_stsh_2_gen2[0]=(((r).rx_x4_fec_burst_err_stsh_2_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_BURST_ERR_STSH_2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_FEC_BURST_ERR_STSH_2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_2_GEN2r,(_r._rx_x4_fec_burst_err_stsh_2_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_BURST_ERR_STSH_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_2_GEN2r,(_r._rx_x4_fec_burst_err_stsh_2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_BURST_ERR_STSH_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_2_GEN2r,(_r._rx_x4_fec_burst_err_stsh_2_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_FEC_BURST_ERR_STSH_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_burst_err_stsh_2_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_BURST_ERR_STSH_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_burst_err_stsh_2_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_BURST_ERR_STSH_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_burst_err_stsh_2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_BURST_ERR_STSH_2_GEN2r BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_2_GEN2r
#define RX_X4_FEC_BURST_ERR_STSH_2_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_2_GEN2r_t RX_X4_FEC_BURST_ERR_STSH_2_GEN2r_t;
#define RX_X4_FEC_BURST_ERR_STSH_2_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_2_GEN2r_CLR
#define RX_X4_FEC_BURST_ERR_STSH_2_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_2_GEN2r_SET
#define RX_X4_FEC_BURST_ERR_STSH_2_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_2_GEN2r_GET
#define RX_X4_FEC_BURST_ERR_STSH_2_GEN2r_BURST_ERR_STATUSH_STREAM2f_GET BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_2_GEN2r_BURST_ERR_STATUSH_STREAM2f_GET
#define RX_X4_FEC_BURST_ERR_STSH_2_GEN2r_BURST_ERR_STATUSH_STREAM2f_SET BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_2_GEN2r_BURST_ERR_STATUSH_STREAM2f_SET
#define READ_RX_X4_FEC_BURST_ERR_STSH_2_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_FEC_BURST_ERR_STSH_2_GEN2r
#define WRITE_RX_X4_FEC_BURST_ERR_STSH_2_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_BURST_ERR_STSH_2_GEN2r
#define MODIFY_RX_X4_FEC_BURST_ERR_STSH_2_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_BURST_ERR_STSH_2_GEN2r
#define READLN_RX_X4_FEC_BURST_ERR_STSH_2_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_FEC_BURST_ERR_STSH_2_GEN2r
#define WRITELN_RX_X4_FEC_BURST_ERR_STSH_2_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_BURST_ERR_STSH_2_GEN2r
#define WRITEALL_RX_X4_FEC_BURST_ERR_STSH_2_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_BURST_ERR_STSH_2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_FEC_BURST_ERR_STSH_3_GEN2
 * BLOCKS:   RX_X4_STATUS4
 * REGADDR:  0xc193
 * DESC:     fec burst error status lower 16 bits for stream 3
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BURST_ERR_STATUSH_STREAM3 Note: This register is only valid in case of Correctable Error scenario.In case of uncorrectable error case, This register may contain invalid data information.16 MSB of the fec_burst_err_status for stream 3bits mapping :Bit 15: status updatedBit 8: 21-bit burst detected, but location failed pattern searchBit 7: pattern match passedBit 6: Corrected alternate errorBit 5: Corrected errorBit [4:0] : b21[20:16]Note: Bit 15 clears upon reading Fec_burst_err_statusL register
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_3_GEN2r (0x0000c193 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_3_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_BURST_ERR_STSH_3_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_3_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_burst_err_stsh_3_gen2[1];
	uint32_t _rx_x4_fec_burst_err_stsh_3_gen2;
} BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_3_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_3_GEN2r_CLR(r) (r).rx_x4_fec_burst_err_stsh_3_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_3_GEN2r_SET(r,d) (r).rx_x4_fec_burst_err_stsh_3_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_3_GEN2r_GET(r) (r).rx_x4_fec_burst_err_stsh_3_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_3_GEN2r_BURST_ERR_STATUSH_STREAM3f_GET(r) (((r).rx_x4_fec_burst_err_stsh_3_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_3_GEN2r_BURST_ERR_STATUSH_STREAM3f_SET(r,f) (r).rx_x4_fec_burst_err_stsh_3_gen2[0]=(((r).rx_x4_fec_burst_err_stsh_3_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_BURST_ERR_STSH_3_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_FEC_BURST_ERR_STSH_3_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_3_GEN2r,(_r._rx_x4_fec_burst_err_stsh_3_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_BURST_ERR_STSH_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_3_GEN2r,(_r._rx_x4_fec_burst_err_stsh_3_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_BURST_ERR_STSH_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_3_GEN2r,(_r._rx_x4_fec_burst_err_stsh_3_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_FEC_BURST_ERR_STSH_3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_burst_err_stsh_3_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_BURST_ERR_STSH_3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_burst_err_stsh_3_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_BURST_ERR_STSH_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_burst_err_stsh_3_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_BURST_ERR_STSH_3_GEN2r BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_3_GEN2r
#define RX_X4_FEC_BURST_ERR_STSH_3_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_3_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_3_GEN2r_t RX_X4_FEC_BURST_ERR_STSH_3_GEN2r_t;
#define RX_X4_FEC_BURST_ERR_STSH_3_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_3_GEN2r_CLR
#define RX_X4_FEC_BURST_ERR_STSH_3_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_3_GEN2r_SET
#define RX_X4_FEC_BURST_ERR_STSH_3_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_3_GEN2r_GET
#define RX_X4_FEC_BURST_ERR_STSH_3_GEN2r_BURST_ERR_STATUSH_STREAM3f_GET BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_3_GEN2r_BURST_ERR_STATUSH_STREAM3f_GET
#define RX_X4_FEC_BURST_ERR_STSH_3_GEN2r_BURST_ERR_STATUSH_STREAM3f_SET BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_3_GEN2r_BURST_ERR_STATUSH_STREAM3f_SET
#define READ_RX_X4_FEC_BURST_ERR_STSH_3_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_FEC_BURST_ERR_STSH_3_GEN2r
#define WRITE_RX_X4_FEC_BURST_ERR_STSH_3_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_BURST_ERR_STSH_3_GEN2r
#define MODIFY_RX_X4_FEC_BURST_ERR_STSH_3_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_BURST_ERR_STSH_3_GEN2r
#define READLN_RX_X4_FEC_BURST_ERR_STSH_3_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_FEC_BURST_ERR_STSH_3_GEN2r
#define WRITELN_RX_X4_FEC_BURST_ERR_STSH_3_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_BURST_ERR_STSH_3_GEN2r
#define WRITEALL_RX_X4_FEC_BURST_ERR_STSH_3_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_BURST_ERR_STSH_3_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_3_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_FEC_BURST_ERR_STSH_4_GEN2
 * BLOCKS:   RX_X4_STATUS4
 * REGADDR:  0xc194
 * DESC:     fec burst error status lower 16 bits for stream 4
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BURST_ERR_STATUSH_STREAM4 Note: This register is only valid in case of Correctable Error scenario.In case of uncorrectable error case, This register may contain invalid data information.16 MSB of the fec_burst_err_status for stream 4bits mapping :Bit 15: status updatedBit 8: 21-bit burst detected, but location failed pattern searchBit 7: pattern match passedBit 6: Corrected alternate errorBit 5: Corrected errorBit [4:0] : b21[20:16]Note: Bit 15 clears upon reading Fec_burst_err_statusL register
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_4_GEN2r (0x0000c194 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_4_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_BURST_ERR_STSH_4_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_4_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_burst_err_stsh_4_gen2[1];
	uint32_t _rx_x4_fec_burst_err_stsh_4_gen2;
} BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_4_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_4_GEN2r_CLR(r) (r).rx_x4_fec_burst_err_stsh_4_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_4_GEN2r_SET(r,d) (r).rx_x4_fec_burst_err_stsh_4_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_4_GEN2r_GET(r) (r).rx_x4_fec_burst_err_stsh_4_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_4_GEN2r_BURST_ERR_STATUSH_STREAM4f_GET(r) (((r).rx_x4_fec_burst_err_stsh_4_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_4_GEN2r_BURST_ERR_STATUSH_STREAM4f_SET(r,f) (r).rx_x4_fec_burst_err_stsh_4_gen2[0]=(((r).rx_x4_fec_burst_err_stsh_4_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_BURST_ERR_STSH_4_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_FEC_BURST_ERR_STSH_4_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_4_GEN2r,(_r._rx_x4_fec_burst_err_stsh_4_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_BURST_ERR_STSH_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_4_GEN2r,(_r._rx_x4_fec_burst_err_stsh_4_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_BURST_ERR_STSH_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_4_GEN2r,(_r._rx_x4_fec_burst_err_stsh_4_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_FEC_BURST_ERR_STSH_4_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_burst_err_stsh_4_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_BURST_ERR_STSH_4_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_burst_err_stsh_4_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_BURST_ERR_STSH_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_burst_err_stsh_4_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_BURST_ERR_STSH_4_GEN2r BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_4_GEN2r
#define RX_X4_FEC_BURST_ERR_STSH_4_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_4_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_4_GEN2r_t RX_X4_FEC_BURST_ERR_STSH_4_GEN2r_t;
#define RX_X4_FEC_BURST_ERR_STSH_4_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_4_GEN2r_CLR
#define RX_X4_FEC_BURST_ERR_STSH_4_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_4_GEN2r_SET
#define RX_X4_FEC_BURST_ERR_STSH_4_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_4_GEN2r_GET
#define RX_X4_FEC_BURST_ERR_STSH_4_GEN2r_BURST_ERR_STATUSH_STREAM4f_GET BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_4_GEN2r_BURST_ERR_STATUSH_STREAM4f_GET
#define RX_X4_FEC_BURST_ERR_STSH_4_GEN2r_BURST_ERR_STATUSH_STREAM4f_SET BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_4_GEN2r_BURST_ERR_STATUSH_STREAM4f_SET
#define READ_RX_X4_FEC_BURST_ERR_STSH_4_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_FEC_BURST_ERR_STSH_4_GEN2r
#define WRITE_RX_X4_FEC_BURST_ERR_STSH_4_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_BURST_ERR_STSH_4_GEN2r
#define MODIFY_RX_X4_FEC_BURST_ERR_STSH_4_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_BURST_ERR_STSH_4_GEN2r
#define READLN_RX_X4_FEC_BURST_ERR_STSH_4_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_FEC_BURST_ERR_STSH_4_GEN2r
#define WRITELN_RX_X4_FEC_BURST_ERR_STSH_4_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_BURST_ERR_STSH_4_GEN2r
#define WRITEALL_RX_X4_FEC_BURST_ERR_STSH_4_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_BURST_ERR_STSH_4_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_FEC_BURST_ERR_STSH_4_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_FEC_CORRBLKSL_0_GEN2
 * BLOCKS:   RX_X4_STATUS4
 * REGADDR:  0xc195
 * DESC:     FEC corrected blocks counter for stream 0 [15:0]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CORCOUNTL_STREAM0 16 LSB of the corrected blocks count for stream 0, clear on read
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_0_GEN2r (0x0000c195 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_CORRBLKSL_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_0_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_corrblksl_0_gen2[1];
	uint32_t _rx_x4_fec_corrblksl_0_gen2;
} BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_0_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_0_GEN2r_CLR(r) (r).rx_x4_fec_corrblksl_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_0_GEN2r_SET(r,d) (r).rx_x4_fec_corrblksl_0_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_0_GEN2r_GET(r) (r).rx_x4_fec_corrblksl_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_0_GEN2r_CORCOUNTL_STREAM0f_GET(r) (((r).rx_x4_fec_corrblksl_0_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_0_GEN2r_CORCOUNTL_STREAM0f_SET(r,f) (r).rx_x4_fec_corrblksl_0_gen2[0]=(((r).rx_x4_fec_corrblksl_0_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_CORRBLKSL_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_FEC_CORRBLKSL_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_0_GEN2r,(_r._rx_x4_fec_corrblksl_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_CORRBLKSL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_0_GEN2r,(_r._rx_x4_fec_corrblksl_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_CORRBLKSL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_0_GEN2r,(_r._rx_x4_fec_corrblksl_0_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_FEC_CORRBLKSL_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_corrblksl_0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_CORRBLKSL_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_corrblksl_0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_CORRBLKSL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_corrblksl_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_CORRBLKSL_0_GEN2r BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_0_GEN2r
#define RX_X4_FEC_CORRBLKSL_0_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_0_GEN2r_t RX_X4_FEC_CORRBLKSL_0_GEN2r_t;
#define RX_X4_FEC_CORRBLKSL_0_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_0_GEN2r_CLR
#define RX_X4_FEC_CORRBLKSL_0_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_0_GEN2r_SET
#define RX_X4_FEC_CORRBLKSL_0_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_0_GEN2r_GET
#define RX_X4_FEC_CORRBLKSL_0_GEN2r_CORCOUNTL_STREAM0f_GET BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_0_GEN2r_CORCOUNTL_STREAM0f_GET
#define RX_X4_FEC_CORRBLKSL_0_GEN2r_CORCOUNTL_STREAM0f_SET BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_0_GEN2r_CORCOUNTL_STREAM0f_SET
#define READ_RX_X4_FEC_CORRBLKSL_0_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_FEC_CORRBLKSL_0_GEN2r
#define WRITE_RX_X4_FEC_CORRBLKSL_0_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_CORRBLKSL_0_GEN2r
#define MODIFY_RX_X4_FEC_CORRBLKSL_0_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_CORRBLKSL_0_GEN2r
#define READLN_RX_X4_FEC_CORRBLKSL_0_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_FEC_CORRBLKSL_0_GEN2r
#define WRITELN_RX_X4_FEC_CORRBLKSL_0_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_CORRBLKSL_0_GEN2r
#define WRITEALL_RX_X4_FEC_CORRBLKSL_0_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_CORRBLKSL_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_FEC_CORRBLKSL_1_GEN2
 * BLOCKS:   RX_X4_STATUS4
 * REGADDR:  0xc196
 * DESC:     FEC corrected blocks counter for stream 1 [15:0]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CORCOUNTL_STREAM1 16 LSB of the corrected blocks count for stream 1, clear on read
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_1_GEN2r (0x0000c196 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_CORRBLKSL_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_1_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_corrblksl_1_gen2[1];
	uint32_t _rx_x4_fec_corrblksl_1_gen2;
} BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_1_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_1_GEN2r_CLR(r) (r).rx_x4_fec_corrblksl_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_1_GEN2r_SET(r,d) (r).rx_x4_fec_corrblksl_1_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_1_GEN2r_GET(r) (r).rx_x4_fec_corrblksl_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_1_GEN2r_CORCOUNTL_STREAM1f_GET(r) (((r).rx_x4_fec_corrblksl_1_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_1_GEN2r_CORCOUNTL_STREAM1f_SET(r,f) (r).rx_x4_fec_corrblksl_1_gen2[0]=(((r).rx_x4_fec_corrblksl_1_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_CORRBLKSL_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_FEC_CORRBLKSL_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_1_GEN2r,(_r._rx_x4_fec_corrblksl_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_CORRBLKSL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_1_GEN2r,(_r._rx_x4_fec_corrblksl_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_CORRBLKSL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_1_GEN2r,(_r._rx_x4_fec_corrblksl_1_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_FEC_CORRBLKSL_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_corrblksl_1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_CORRBLKSL_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_corrblksl_1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_CORRBLKSL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_corrblksl_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_CORRBLKSL_1_GEN2r BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_1_GEN2r
#define RX_X4_FEC_CORRBLKSL_1_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_1_GEN2r_t RX_X4_FEC_CORRBLKSL_1_GEN2r_t;
#define RX_X4_FEC_CORRBLKSL_1_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_1_GEN2r_CLR
#define RX_X4_FEC_CORRBLKSL_1_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_1_GEN2r_SET
#define RX_X4_FEC_CORRBLKSL_1_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_1_GEN2r_GET
#define RX_X4_FEC_CORRBLKSL_1_GEN2r_CORCOUNTL_STREAM1f_GET BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_1_GEN2r_CORCOUNTL_STREAM1f_GET
#define RX_X4_FEC_CORRBLKSL_1_GEN2r_CORCOUNTL_STREAM1f_SET BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_1_GEN2r_CORCOUNTL_STREAM1f_SET
#define READ_RX_X4_FEC_CORRBLKSL_1_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_FEC_CORRBLKSL_1_GEN2r
#define WRITE_RX_X4_FEC_CORRBLKSL_1_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_CORRBLKSL_1_GEN2r
#define MODIFY_RX_X4_FEC_CORRBLKSL_1_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_CORRBLKSL_1_GEN2r
#define READLN_RX_X4_FEC_CORRBLKSL_1_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_FEC_CORRBLKSL_1_GEN2r
#define WRITELN_RX_X4_FEC_CORRBLKSL_1_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_CORRBLKSL_1_GEN2r
#define WRITEALL_RX_X4_FEC_CORRBLKSL_1_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_CORRBLKSL_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_FEC_CORRBLKSL_2_GEN2
 * BLOCKS:   RX_X4_STATUS4
 * REGADDR:  0xc197
 * DESC:     FEC corrected blocks counter for stream 2 [15:0]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CORCOUNTL_STREAM2 16 LSB of the corrected blocks count for stream 2, clear on read
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_2_GEN2r (0x0000c197 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_CORRBLKSL_2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_2_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_corrblksl_2_gen2[1];
	uint32_t _rx_x4_fec_corrblksl_2_gen2;
} BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_2_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_2_GEN2r_CLR(r) (r).rx_x4_fec_corrblksl_2_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_2_GEN2r_SET(r,d) (r).rx_x4_fec_corrblksl_2_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_2_GEN2r_GET(r) (r).rx_x4_fec_corrblksl_2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_2_GEN2r_CORCOUNTL_STREAM2f_GET(r) (((r).rx_x4_fec_corrblksl_2_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_2_GEN2r_CORCOUNTL_STREAM2f_SET(r,f) (r).rx_x4_fec_corrblksl_2_gen2[0]=(((r).rx_x4_fec_corrblksl_2_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_CORRBLKSL_2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_FEC_CORRBLKSL_2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_2_GEN2r,(_r._rx_x4_fec_corrblksl_2_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_CORRBLKSL_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_2_GEN2r,(_r._rx_x4_fec_corrblksl_2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_CORRBLKSL_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_2_GEN2r,(_r._rx_x4_fec_corrblksl_2_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_FEC_CORRBLKSL_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_corrblksl_2_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_CORRBLKSL_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_corrblksl_2_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_CORRBLKSL_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_corrblksl_2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_CORRBLKSL_2_GEN2r BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_2_GEN2r
#define RX_X4_FEC_CORRBLKSL_2_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_2_GEN2r_t RX_X4_FEC_CORRBLKSL_2_GEN2r_t;
#define RX_X4_FEC_CORRBLKSL_2_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_2_GEN2r_CLR
#define RX_X4_FEC_CORRBLKSL_2_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_2_GEN2r_SET
#define RX_X4_FEC_CORRBLKSL_2_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_2_GEN2r_GET
#define RX_X4_FEC_CORRBLKSL_2_GEN2r_CORCOUNTL_STREAM2f_GET BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_2_GEN2r_CORCOUNTL_STREAM2f_GET
#define RX_X4_FEC_CORRBLKSL_2_GEN2r_CORCOUNTL_STREAM2f_SET BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_2_GEN2r_CORCOUNTL_STREAM2f_SET
#define READ_RX_X4_FEC_CORRBLKSL_2_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_FEC_CORRBLKSL_2_GEN2r
#define WRITE_RX_X4_FEC_CORRBLKSL_2_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_CORRBLKSL_2_GEN2r
#define MODIFY_RX_X4_FEC_CORRBLKSL_2_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_CORRBLKSL_2_GEN2r
#define READLN_RX_X4_FEC_CORRBLKSL_2_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_FEC_CORRBLKSL_2_GEN2r
#define WRITELN_RX_X4_FEC_CORRBLKSL_2_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_CORRBLKSL_2_GEN2r
#define WRITEALL_RX_X4_FEC_CORRBLKSL_2_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_CORRBLKSL_2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_FEC_CORRBLKSL_3_GEN2
 * BLOCKS:   RX_X4_STATUS4
 * REGADDR:  0xc198
 * DESC:     FEC corrected blocks counter for stream 3 [15:0]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CORCOUNTL_STREAM3 16 LSB of the corrected blocks count for stream 3, clear on read
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_3_GEN2r (0x0000c198 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_3_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_CORRBLKSL_3_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_3_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_corrblksl_3_gen2[1];
	uint32_t _rx_x4_fec_corrblksl_3_gen2;
} BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_3_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_3_GEN2r_CLR(r) (r).rx_x4_fec_corrblksl_3_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_3_GEN2r_SET(r,d) (r).rx_x4_fec_corrblksl_3_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_3_GEN2r_GET(r) (r).rx_x4_fec_corrblksl_3_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_3_GEN2r_CORCOUNTL_STREAM3f_GET(r) (((r).rx_x4_fec_corrblksl_3_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_3_GEN2r_CORCOUNTL_STREAM3f_SET(r,f) (r).rx_x4_fec_corrblksl_3_gen2[0]=(((r).rx_x4_fec_corrblksl_3_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_CORRBLKSL_3_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_FEC_CORRBLKSL_3_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_3_GEN2r,(_r._rx_x4_fec_corrblksl_3_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_CORRBLKSL_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_3_GEN2r,(_r._rx_x4_fec_corrblksl_3_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_CORRBLKSL_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_3_GEN2r,(_r._rx_x4_fec_corrblksl_3_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_FEC_CORRBLKSL_3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_corrblksl_3_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_CORRBLKSL_3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_corrblksl_3_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_CORRBLKSL_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_corrblksl_3_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_CORRBLKSL_3_GEN2r BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_3_GEN2r
#define RX_X4_FEC_CORRBLKSL_3_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_3_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_3_GEN2r_t RX_X4_FEC_CORRBLKSL_3_GEN2r_t;
#define RX_X4_FEC_CORRBLKSL_3_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_3_GEN2r_CLR
#define RX_X4_FEC_CORRBLKSL_3_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_3_GEN2r_SET
#define RX_X4_FEC_CORRBLKSL_3_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_3_GEN2r_GET
#define RX_X4_FEC_CORRBLKSL_3_GEN2r_CORCOUNTL_STREAM3f_GET BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_3_GEN2r_CORCOUNTL_STREAM3f_GET
#define RX_X4_FEC_CORRBLKSL_3_GEN2r_CORCOUNTL_STREAM3f_SET BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_3_GEN2r_CORCOUNTL_STREAM3f_SET
#define READ_RX_X4_FEC_CORRBLKSL_3_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_FEC_CORRBLKSL_3_GEN2r
#define WRITE_RX_X4_FEC_CORRBLKSL_3_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_CORRBLKSL_3_GEN2r
#define MODIFY_RX_X4_FEC_CORRBLKSL_3_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_CORRBLKSL_3_GEN2r
#define READLN_RX_X4_FEC_CORRBLKSL_3_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_FEC_CORRBLKSL_3_GEN2r
#define WRITELN_RX_X4_FEC_CORRBLKSL_3_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_CORRBLKSL_3_GEN2r
#define WRITEALL_RX_X4_FEC_CORRBLKSL_3_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_CORRBLKSL_3_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_3_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_FEC_CORRBLKSL_4_GEN2
 * BLOCKS:   RX_X4_STATUS4
 * REGADDR:  0xc199
 * DESC:     FEC corrected blocks counter for stream 4 [15:0]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CORCOUNTL_STREAM4 16 LSB of the corrected blocks count for stream 4, clear on read
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_4_GEN2r (0x0000c199 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_4_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_CORRBLKSL_4_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_4_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_corrblksl_4_gen2[1];
	uint32_t _rx_x4_fec_corrblksl_4_gen2;
} BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_4_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_4_GEN2r_CLR(r) (r).rx_x4_fec_corrblksl_4_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_4_GEN2r_SET(r,d) (r).rx_x4_fec_corrblksl_4_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_4_GEN2r_GET(r) (r).rx_x4_fec_corrblksl_4_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_4_GEN2r_CORCOUNTL_STREAM4f_GET(r) (((r).rx_x4_fec_corrblksl_4_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_4_GEN2r_CORCOUNTL_STREAM4f_SET(r,f) (r).rx_x4_fec_corrblksl_4_gen2[0]=(((r).rx_x4_fec_corrblksl_4_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_CORRBLKSL_4_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_FEC_CORRBLKSL_4_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_4_GEN2r,(_r._rx_x4_fec_corrblksl_4_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_CORRBLKSL_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_4_GEN2r,(_r._rx_x4_fec_corrblksl_4_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_CORRBLKSL_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_4_GEN2r,(_r._rx_x4_fec_corrblksl_4_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_FEC_CORRBLKSL_4_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_corrblksl_4_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_CORRBLKSL_4_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_corrblksl_4_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_CORRBLKSL_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_corrblksl_4_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_CORRBLKSL_4_GEN2r BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_4_GEN2r
#define RX_X4_FEC_CORRBLKSL_4_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_4_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_4_GEN2r_t RX_X4_FEC_CORRBLKSL_4_GEN2r_t;
#define RX_X4_FEC_CORRBLKSL_4_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_4_GEN2r_CLR
#define RX_X4_FEC_CORRBLKSL_4_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_4_GEN2r_SET
#define RX_X4_FEC_CORRBLKSL_4_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_4_GEN2r_GET
#define RX_X4_FEC_CORRBLKSL_4_GEN2r_CORCOUNTL_STREAM4f_GET BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_4_GEN2r_CORCOUNTL_STREAM4f_GET
#define RX_X4_FEC_CORRBLKSL_4_GEN2r_CORCOUNTL_STREAM4f_SET BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_4_GEN2r_CORCOUNTL_STREAM4f_SET
#define READ_RX_X4_FEC_CORRBLKSL_4_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_FEC_CORRBLKSL_4_GEN2r
#define WRITE_RX_X4_FEC_CORRBLKSL_4_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_CORRBLKSL_4_GEN2r
#define MODIFY_RX_X4_FEC_CORRBLKSL_4_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_CORRBLKSL_4_GEN2r
#define READLN_RX_X4_FEC_CORRBLKSL_4_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_FEC_CORRBLKSL_4_GEN2r
#define WRITELN_RX_X4_FEC_CORRBLKSL_4_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_CORRBLKSL_4_GEN2r
#define WRITEALL_RX_X4_FEC_CORRBLKSL_4_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_CORRBLKSL_4_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSL_4_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_FEC_CORRBLKSH_0_GEN2
 * BLOCKS:   RX_X4_STATUS4
 * REGADDR:  0xc19a
 * DESC:     FEC corrected blocks counter for stream 0 [31:16]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CORCOUNTH_STREAM0 16 MSB of the corrected blocks count for stream 0, clear on readContents are latched upon read of corCountL
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_0_GEN2r (0x0000c19a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_CORRBLKSH_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_0_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_corrblksh_0_gen2[1];
	uint32_t _rx_x4_fec_corrblksh_0_gen2;
} BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_0_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_0_GEN2r_CLR(r) (r).rx_x4_fec_corrblksh_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_0_GEN2r_SET(r,d) (r).rx_x4_fec_corrblksh_0_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_0_GEN2r_GET(r) (r).rx_x4_fec_corrblksh_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_0_GEN2r_CORCOUNTH_STREAM0f_GET(r) (((r).rx_x4_fec_corrblksh_0_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_0_GEN2r_CORCOUNTH_STREAM0f_SET(r,f) (r).rx_x4_fec_corrblksh_0_gen2[0]=(((r).rx_x4_fec_corrblksh_0_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_CORRBLKSH_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_FEC_CORRBLKSH_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_0_GEN2r,(_r._rx_x4_fec_corrblksh_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_CORRBLKSH_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_0_GEN2r,(_r._rx_x4_fec_corrblksh_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_CORRBLKSH_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_0_GEN2r,(_r._rx_x4_fec_corrblksh_0_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_FEC_CORRBLKSH_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_corrblksh_0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_CORRBLKSH_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_corrblksh_0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_CORRBLKSH_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_corrblksh_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_CORRBLKSH_0_GEN2r BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_0_GEN2r
#define RX_X4_FEC_CORRBLKSH_0_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_0_GEN2r_t RX_X4_FEC_CORRBLKSH_0_GEN2r_t;
#define RX_X4_FEC_CORRBLKSH_0_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_0_GEN2r_CLR
#define RX_X4_FEC_CORRBLKSH_0_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_0_GEN2r_SET
#define RX_X4_FEC_CORRBLKSH_0_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_0_GEN2r_GET
#define RX_X4_FEC_CORRBLKSH_0_GEN2r_CORCOUNTH_STREAM0f_GET BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_0_GEN2r_CORCOUNTH_STREAM0f_GET
#define RX_X4_FEC_CORRBLKSH_0_GEN2r_CORCOUNTH_STREAM0f_SET BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_0_GEN2r_CORCOUNTH_STREAM0f_SET
#define READ_RX_X4_FEC_CORRBLKSH_0_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_FEC_CORRBLKSH_0_GEN2r
#define WRITE_RX_X4_FEC_CORRBLKSH_0_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_CORRBLKSH_0_GEN2r
#define MODIFY_RX_X4_FEC_CORRBLKSH_0_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_CORRBLKSH_0_GEN2r
#define READLN_RX_X4_FEC_CORRBLKSH_0_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_FEC_CORRBLKSH_0_GEN2r
#define WRITELN_RX_X4_FEC_CORRBLKSH_0_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_CORRBLKSH_0_GEN2r
#define WRITEALL_RX_X4_FEC_CORRBLKSH_0_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_CORRBLKSH_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_FEC_CORRBLKSH_1_GEN2
 * BLOCKS:   RX_X4_STATUS4
 * REGADDR:  0xc19b
 * DESC:     FEC corrected blocks counter for stream 1 [31:16]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CORCOUNTH_STREAM1 16 MSB of the corrected blocks count for stream 1, clear on readContents are latched upon read of corCountL
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_1_GEN2r (0x0000c19b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_CORRBLKSH_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_1_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_corrblksh_1_gen2[1];
	uint32_t _rx_x4_fec_corrblksh_1_gen2;
} BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_1_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_1_GEN2r_CLR(r) (r).rx_x4_fec_corrblksh_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_1_GEN2r_SET(r,d) (r).rx_x4_fec_corrblksh_1_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_1_GEN2r_GET(r) (r).rx_x4_fec_corrblksh_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_1_GEN2r_CORCOUNTH_STREAM1f_GET(r) (((r).rx_x4_fec_corrblksh_1_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_1_GEN2r_CORCOUNTH_STREAM1f_SET(r,f) (r).rx_x4_fec_corrblksh_1_gen2[0]=(((r).rx_x4_fec_corrblksh_1_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_CORRBLKSH_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_FEC_CORRBLKSH_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_1_GEN2r,(_r._rx_x4_fec_corrblksh_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_CORRBLKSH_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_1_GEN2r,(_r._rx_x4_fec_corrblksh_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_CORRBLKSH_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_1_GEN2r,(_r._rx_x4_fec_corrblksh_1_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_FEC_CORRBLKSH_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_corrblksh_1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_CORRBLKSH_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_corrblksh_1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_CORRBLKSH_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_corrblksh_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_CORRBLKSH_1_GEN2r BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_1_GEN2r
#define RX_X4_FEC_CORRBLKSH_1_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_1_GEN2r_t RX_X4_FEC_CORRBLKSH_1_GEN2r_t;
#define RX_X4_FEC_CORRBLKSH_1_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_1_GEN2r_CLR
#define RX_X4_FEC_CORRBLKSH_1_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_1_GEN2r_SET
#define RX_X4_FEC_CORRBLKSH_1_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_1_GEN2r_GET
#define RX_X4_FEC_CORRBLKSH_1_GEN2r_CORCOUNTH_STREAM1f_GET BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_1_GEN2r_CORCOUNTH_STREAM1f_GET
#define RX_X4_FEC_CORRBLKSH_1_GEN2r_CORCOUNTH_STREAM1f_SET BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_1_GEN2r_CORCOUNTH_STREAM1f_SET
#define READ_RX_X4_FEC_CORRBLKSH_1_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_FEC_CORRBLKSH_1_GEN2r
#define WRITE_RX_X4_FEC_CORRBLKSH_1_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_CORRBLKSH_1_GEN2r
#define MODIFY_RX_X4_FEC_CORRBLKSH_1_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_CORRBLKSH_1_GEN2r
#define READLN_RX_X4_FEC_CORRBLKSH_1_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_FEC_CORRBLKSH_1_GEN2r
#define WRITELN_RX_X4_FEC_CORRBLKSH_1_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_CORRBLKSH_1_GEN2r
#define WRITEALL_RX_X4_FEC_CORRBLKSH_1_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_CORRBLKSH_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_FEC_CORRBLKSH_2_GEN2
 * BLOCKS:   RX_X4_STATUS4
 * REGADDR:  0xc19c
 * DESC:     FEC corrected blocks counter for stream 2 [31:16]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CORCOUNTH_STREAM2 16 MSB of the corrected blocks count for stream 2, clear on readContents are latched upon read of corCountL
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_2_GEN2r (0x0000c19c | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_CORRBLKSH_2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_2_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_corrblksh_2_gen2[1];
	uint32_t _rx_x4_fec_corrblksh_2_gen2;
} BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_2_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_2_GEN2r_CLR(r) (r).rx_x4_fec_corrblksh_2_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_2_GEN2r_SET(r,d) (r).rx_x4_fec_corrblksh_2_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_2_GEN2r_GET(r) (r).rx_x4_fec_corrblksh_2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_2_GEN2r_CORCOUNTH_STREAM2f_GET(r) (((r).rx_x4_fec_corrblksh_2_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_2_GEN2r_CORCOUNTH_STREAM2f_SET(r,f) (r).rx_x4_fec_corrblksh_2_gen2[0]=(((r).rx_x4_fec_corrblksh_2_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_CORRBLKSH_2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_FEC_CORRBLKSH_2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_2_GEN2r,(_r._rx_x4_fec_corrblksh_2_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_CORRBLKSH_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_2_GEN2r,(_r._rx_x4_fec_corrblksh_2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_CORRBLKSH_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_2_GEN2r,(_r._rx_x4_fec_corrblksh_2_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_FEC_CORRBLKSH_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_corrblksh_2_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_CORRBLKSH_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_corrblksh_2_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_CORRBLKSH_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_corrblksh_2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_CORRBLKSH_2_GEN2r BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_2_GEN2r
#define RX_X4_FEC_CORRBLKSH_2_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_2_GEN2r_t RX_X4_FEC_CORRBLKSH_2_GEN2r_t;
#define RX_X4_FEC_CORRBLKSH_2_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_2_GEN2r_CLR
#define RX_X4_FEC_CORRBLKSH_2_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_2_GEN2r_SET
#define RX_X4_FEC_CORRBLKSH_2_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_2_GEN2r_GET
#define RX_X4_FEC_CORRBLKSH_2_GEN2r_CORCOUNTH_STREAM2f_GET BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_2_GEN2r_CORCOUNTH_STREAM2f_GET
#define RX_X4_FEC_CORRBLKSH_2_GEN2r_CORCOUNTH_STREAM2f_SET BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_2_GEN2r_CORCOUNTH_STREAM2f_SET
#define READ_RX_X4_FEC_CORRBLKSH_2_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_FEC_CORRBLKSH_2_GEN2r
#define WRITE_RX_X4_FEC_CORRBLKSH_2_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_CORRBLKSH_2_GEN2r
#define MODIFY_RX_X4_FEC_CORRBLKSH_2_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_CORRBLKSH_2_GEN2r
#define READLN_RX_X4_FEC_CORRBLKSH_2_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_FEC_CORRBLKSH_2_GEN2r
#define WRITELN_RX_X4_FEC_CORRBLKSH_2_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_CORRBLKSH_2_GEN2r
#define WRITEALL_RX_X4_FEC_CORRBLKSH_2_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_CORRBLKSH_2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_FEC_CORRBLKSH_3_GEN2
 * BLOCKS:   RX_X4_STATUS4
 * REGADDR:  0xc19d
 * DESC:     FEC corrected blocks counter for stream 3 [31:16]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CORCOUNTH_STREAM3 16 MSB of the corrected blocks count for stream 3, clear on readContents are latched upon read of corCountL
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_3_GEN2r (0x0000c19d | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_3_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_CORRBLKSH_3_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_3_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_corrblksh_3_gen2[1];
	uint32_t _rx_x4_fec_corrblksh_3_gen2;
} BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_3_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_3_GEN2r_CLR(r) (r).rx_x4_fec_corrblksh_3_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_3_GEN2r_SET(r,d) (r).rx_x4_fec_corrblksh_3_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_3_GEN2r_GET(r) (r).rx_x4_fec_corrblksh_3_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_3_GEN2r_CORCOUNTH_STREAM3f_GET(r) (((r).rx_x4_fec_corrblksh_3_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_3_GEN2r_CORCOUNTH_STREAM3f_SET(r,f) (r).rx_x4_fec_corrblksh_3_gen2[0]=(((r).rx_x4_fec_corrblksh_3_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_CORRBLKSH_3_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_FEC_CORRBLKSH_3_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_3_GEN2r,(_r._rx_x4_fec_corrblksh_3_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_CORRBLKSH_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_3_GEN2r,(_r._rx_x4_fec_corrblksh_3_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_CORRBLKSH_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_3_GEN2r,(_r._rx_x4_fec_corrblksh_3_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_FEC_CORRBLKSH_3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_corrblksh_3_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_CORRBLKSH_3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_corrblksh_3_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_CORRBLKSH_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_corrblksh_3_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_CORRBLKSH_3_GEN2r BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_3_GEN2r
#define RX_X4_FEC_CORRBLKSH_3_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_3_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_3_GEN2r_t RX_X4_FEC_CORRBLKSH_3_GEN2r_t;
#define RX_X4_FEC_CORRBLKSH_3_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_3_GEN2r_CLR
#define RX_X4_FEC_CORRBLKSH_3_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_3_GEN2r_SET
#define RX_X4_FEC_CORRBLKSH_3_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_3_GEN2r_GET
#define RX_X4_FEC_CORRBLKSH_3_GEN2r_CORCOUNTH_STREAM3f_GET BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_3_GEN2r_CORCOUNTH_STREAM3f_GET
#define RX_X4_FEC_CORRBLKSH_3_GEN2r_CORCOUNTH_STREAM3f_SET BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_3_GEN2r_CORCOUNTH_STREAM3f_SET
#define READ_RX_X4_FEC_CORRBLKSH_3_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_FEC_CORRBLKSH_3_GEN2r
#define WRITE_RX_X4_FEC_CORRBLKSH_3_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_CORRBLKSH_3_GEN2r
#define MODIFY_RX_X4_FEC_CORRBLKSH_3_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_CORRBLKSH_3_GEN2r
#define READLN_RX_X4_FEC_CORRBLKSH_3_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_FEC_CORRBLKSH_3_GEN2r
#define WRITELN_RX_X4_FEC_CORRBLKSH_3_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_CORRBLKSH_3_GEN2r
#define WRITEALL_RX_X4_FEC_CORRBLKSH_3_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_CORRBLKSH_3_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_3_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_FEC_CORRBLKSH_4_GEN2
 * BLOCKS:   RX_X4_STATUS4
 * REGADDR:  0xc19e
 * DESC:     FEC corrected blocks counter for stream 4 [31:16]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CORCOUNTH_STREAM4 16 MSB of the corrected blocks count for stream 4, clear on readContents are latched upon read of corCountL
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_4_GEN2r (0x0000c19e | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_4_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_CORRBLKSH_4_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_4_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_corrblksh_4_gen2[1];
	uint32_t _rx_x4_fec_corrblksh_4_gen2;
} BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_4_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_4_GEN2r_CLR(r) (r).rx_x4_fec_corrblksh_4_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_4_GEN2r_SET(r,d) (r).rx_x4_fec_corrblksh_4_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_4_GEN2r_GET(r) (r).rx_x4_fec_corrblksh_4_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_4_GEN2r_CORCOUNTH_STREAM4f_GET(r) (((r).rx_x4_fec_corrblksh_4_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_4_GEN2r_CORCOUNTH_STREAM4f_SET(r,f) (r).rx_x4_fec_corrblksh_4_gen2[0]=(((r).rx_x4_fec_corrblksh_4_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_CORRBLKSH_4_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_FEC_CORRBLKSH_4_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_4_GEN2r,(_r._rx_x4_fec_corrblksh_4_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_CORRBLKSH_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_4_GEN2r,(_r._rx_x4_fec_corrblksh_4_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_CORRBLKSH_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_4_GEN2r,(_r._rx_x4_fec_corrblksh_4_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_FEC_CORRBLKSH_4_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_corrblksh_4_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_CORRBLKSH_4_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_corrblksh_4_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_CORRBLKSH_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_corrblksh_4_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_CORRBLKSH_4_GEN2r BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_4_GEN2r
#define RX_X4_FEC_CORRBLKSH_4_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_4_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_4_GEN2r_t RX_X4_FEC_CORRBLKSH_4_GEN2r_t;
#define RX_X4_FEC_CORRBLKSH_4_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_4_GEN2r_CLR
#define RX_X4_FEC_CORRBLKSH_4_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_4_GEN2r_SET
#define RX_X4_FEC_CORRBLKSH_4_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_4_GEN2r_GET
#define RX_X4_FEC_CORRBLKSH_4_GEN2r_CORCOUNTH_STREAM4f_GET BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_4_GEN2r_CORCOUNTH_STREAM4f_GET
#define RX_X4_FEC_CORRBLKSH_4_GEN2r_CORCOUNTH_STREAM4f_SET BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_4_GEN2r_CORCOUNTH_STREAM4f_SET
#define READ_RX_X4_FEC_CORRBLKSH_4_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_FEC_CORRBLKSH_4_GEN2r
#define WRITE_RX_X4_FEC_CORRBLKSH_4_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_CORRBLKSH_4_GEN2r
#define MODIFY_RX_X4_FEC_CORRBLKSH_4_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_CORRBLKSH_4_GEN2r
#define READLN_RX_X4_FEC_CORRBLKSH_4_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_FEC_CORRBLKSH_4_GEN2r
#define WRITELN_RX_X4_FEC_CORRBLKSH_4_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_CORRBLKSH_4_GEN2r
#define WRITEALL_RX_X4_FEC_CORRBLKSH_4_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_CORRBLKSH_4_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_FEC_CORRBLKSH_4_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_FEC_UNCORRBLKSL_0_GEN2
 * BLOCKS:   RX_X4_STATUS5
 * REGADDR:  0xc1a0
 * DESC:     FEC uncorrected blocks counter for stream 0[15:0]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     UNCORCOUNTL_STREAM0 16 LSB of the uncorrected blocks count for stream 0, clear on read
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_0_GEN2r (0x0000c1a0 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_UNCORRBLKSL_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_0_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_uncorrblksl_0_gen2[1];
	uint32_t _rx_x4_fec_uncorrblksl_0_gen2;
} BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_0_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_0_GEN2r_CLR(r) (r).rx_x4_fec_uncorrblksl_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_0_GEN2r_SET(r,d) (r).rx_x4_fec_uncorrblksl_0_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_0_GEN2r_GET(r) (r).rx_x4_fec_uncorrblksl_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_0_GEN2r_UNCORCOUNTL_STREAM0f_GET(r) (((r).rx_x4_fec_uncorrblksl_0_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_0_GEN2r_UNCORCOUNTL_STREAM0f_SET(r,f) (r).rx_x4_fec_uncorrblksl_0_gen2[0]=(((r).rx_x4_fec_uncorrblksl_0_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_UNCORRBLKSL_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_FEC_UNCORRBLKSL_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_0_GEN2r,(_r._rx_x4_fec_uncorrblksl_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_UNCORRBLKSL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_0_GEN2r,(_r._rx_x4_fec_uncorrblksl_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_UNCORRBLKSL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_0_GEN2r,(_r._rx_x4_fec_uncorrblksl_0_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_FEC_UNCORRBLKSL_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_uncorrblksl_0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_UNCORRBLKSL_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_uncorrblksl_0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_UNCORRBLKSL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_uncorrblksl_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_UNCORRBLKSL_0_GEN2r BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_0_GEN2r
#define RX_X4_FEC_UNCORRBLKSL_0_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_0_GEN2r_t RX_X4_FEC_UNCORRBLKSL_0_GEN2r_t;
#define RX_X4_FEC_UNCORRBLKSL_0_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_0_GEN2r_CLR
#define RX_X4_FEC_UNCORRBLKSL_0_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_0_GEN2r_SET
#define RX_X4_FEC_UNCORRBLKSL_0_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_0_GEN2r_GET
#define RX_X4_FEC_UNCORRBLKSL_0_GEN2r_UNCORCOUNTL_STREAM0f_GET BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_0_GEN2r_UNCORCOUNTL_STREAM0f_GET
#define RX_X4_FEC_UNCORRBLKSL_0_GEN2r_UNCORCOUNTL_STREAM0f_SET BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_0_GEN2r_UNCORCOUNTL_STREAM0f_SET
#define READ_RX_X4_FEC_UNCORRBLKSL_0_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_FEC_UNCORRBLKSL_0_GEN2r
#define WRITE_RX_X4_FEC_UNCORRBLKSL_0_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_UNCORRBLKSL_0_GEN2r
#define MODIFY_RX_X4_FEC_UNCORRBLKSL_0_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_UNCORRBLKSL_0_GEN2r
#define READLN_RX_X4_FEC_UNCORRBLKSL_0_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_FEC_UNCORRBLKSL_0_GEN2r
#define WRITELN_RX_X4_FEC_UNCORRBLKSL_0_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_UNCORRBLKSL_0_GEN2r
#define WRITEALL_RX_X4_FEC_UNCORRBLKSL_0_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_UNCORRBLKSL_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_FEC_UNCORRBLKSL_1_GEN2
 * BLOCKS:   RX_X4_STATUS5
 * REGADDR:  0xc1a1
 * DESC:     FEC uncorrected blocks counter for stream 1[15:0]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     UNCORCOUNTL_STREAM1 16 LSB of the uncorrected blocks count for stream 1, clear on read
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_1_GEN2r (0x0000c1a1 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_UNCORRBLKSL_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_1_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_uncorrblksl_1_gen2[1];
	uint32_t _rx_x4_fec_uncorrblksl_1_gen2;
} BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_1_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_1_GEN2r_CLR(r) (r).rx_x4_fec_uncorrblksl_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_1_GEN2r_SET(r,d) (r).rx_x4_fec_uncorrblksl_1_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_1_GEN2r_GET(r) (r).rx_x4_fec_uncorrblksl_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_1_GEN2r_UNCORCOUNTL_STREAM1f_GET(r) (((r).rx_x4_fec_uncorrblksl_1_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_1_GEN2r_UNCORCOUNTL_STREAM1f_SET(r,f) (r).rx_x4_fec_uncorrblksl_1_gen2[0]=(((r).rx_x4_fec_uncorrblksl_1_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_UNCORRBLKSL_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_FEC_UNCORRBLKSL_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_1_GEN2r,(_r._rx_x4_fec_uncorrblksl_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_UNCORRBLKSL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_1_GEN2r,(_r._rx_x4_fec_uncorrblksl_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_UNCORRBLKSL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_1_GEN2r,(_r._rx_x4_fec_uncorrblksl_1_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_FEC_UNCORRBLKSL_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_uncorrblksl_1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_UNCORRBLKSL_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_uncorrblksl_1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_UNCORRBLKSL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_uncorrblksl_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_UNCORRBLKSL_1_GEN2r BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_1_GEN2r
#define RX_X4_FEC_UNCORRBLKSL_1_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_1_GEN2r_t RX_X4_FEC_UNCORRBLKSL_1_GEN2r_t;
#define RX_X4_FEC_UNCORRBLKSL_1_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_1_GEN2r_CLR
#define RX_X4_FEC_UNCORRBLKSL_1_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_1_GEN2r_SET
#define RX_X4_FEC_UNCORRBLKSL_1_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_1_GEN2r_GET
#define RX_X4_FEC_UNCORRBLKSL_1_GEN2r_UNCORCOUNTL_STREAM1f_GET BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_1_GEN2r_UNCORCOUNTL_STREAM1f_GET
#define RX_X4_FEC_UNCORRBLKSL_1_GEN2r_UNCORCOUNTL_STREAM1f_SET BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_1_GEN2r_UNCORCOUNTL_STREAM1f_SET
#define READ_RX_X4_FEC_UNCORRBLKSL_1_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_FEC_UNCORRBLKSL_1_GEN2r
#define WRITE_RX_X4_FEC_UNCORRBLKSL_1_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_UNCORRBLKSL_1_GEN2r
#define MODIFY_RX_X4_FEC_UNCORRBLKSL_1_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_UNCORRBLKSL_1_GEN2r
#define READLN_RX_X4_FEC_UNCORRBLKSL_1_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_FEC_UNCORRBLKSL_1_GEN2r
#define WRITELN_RX_X4_FEC_UNCORRBLKSL_1_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_UNCORRBLKSL_1_GEN2r
#define WRITEALL_RX_X4_FEC_UNCORRBLKSL_1_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_UNCORRBLKSL_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_FEC_UNCORRBLKSL_2_GEN2
 * BLOCKS:   RX_X4_STATUS5
 * REGADDR:  0xc1a2
 * DESC:     FEC uncorrected blocks counter for stream 2[15:0]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     UNCORCOUNTL_STREAM2 16 LSB of the uncorrected blocks count for stream 2, clear on read
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_2_GEN2r (0x0000c1a2 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_UNCORRBLKSL_2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_2_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_uncorrblksl_2_gen2[1];
	uint32_t _rx_x4_fec_uncorrblksl_2_gen2;
} BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_2_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_2_GEN2r_CLR(r) (r).rx_x4_fec_uncorrblksl_2_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_2_GEN2r_SET(r,d) (r).rx_x4_fec_uncorrblksl_2_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_2_GEN2r_GET(r) (r).rx_x4_fec_uncorrblksl_2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_2_GEN2r_UNCORCOUNTL_STREAM2f_GET(r) (((r).rx_x4_fec_uncorrblksl_2_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_2_GEN2r_UNCORCOUNTL_STREAM2f_SET(r,f) (r).rx_x4_fec_uncorrblksl_2_gen2[0]=(((r).rx_x4_fec_uncorrblksl_2_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_UNCORRBLKSL_2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_FEC_UNCORRBLKSL_2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_2_GEN2r,(_r._rx_x4_fec_uncorrblksl_2_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_UNCORRBLKSL_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_2_GEN2r,(_r._rx_x4_fec_uncorrblksl_2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_UNCORRBLKSL_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_2_GEN2r,(_r._rx_x4_fec_uncorrblksl_2_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_FEC_UNCORRBLKSL_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_uncorrblksl_2_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_UNCORRBLKSL_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_uncorrblksl_2_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_UNCORRBLKSL_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_uncorrblksl_2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_UNCORRBLKSL_2_GEN2r BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_2_GEN2r
#define RX_X4_FEC_UNCORRBLKSL_2_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_2_GEN2r_t RX_X4_FEC_UNCORRBLKSL_2_GEN2r_t;
#define RX_X4_FEC_UNCORRBLKSL_2_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_2_GEN2r_CLR
#define RX_X4_FEC_UNCORRBLKSL_2_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_2_GEN2r_SET
#define RX_X4_FEC_UNCORRBLKSL_2_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_2_GEN2r_GET
#define RX_X4_FEC_UNCORRBLKSL_2_GEN2r_UNCORCOUNTL_STREAM2f_GET BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_2_GEN2r_UNCORCOUNTL_STREAM2f_GET
#define RX_X4_FEC_UNCORRBLKSL_2_GEN2r_UNCORCOUNTL_STREAM2f_SET BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_2_GEN2r_UNCORCOUNTL_STREAM2f_SET
#define READ_RX_X4_FEC_UNCORRBLKSL_2_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_FEC_UNCORRBLKSL_2_GEN2r
#define WRITE_RX_X4_FEC_UNCORRBLKSL_2_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_UNCORRBLKSL_2_GEN2r
#define MODIFY_RX_X4_FEC_UNCORRBLKSL_2_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_UNCORRBLKSL_2_GEN2r
#define READLN_RX_X4_FEC_UNCORRBLKSL_2_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_FEC_UNCORRBLKSL_2_GEN2r
#define WRITELN_RX_X4_FEC_UNCORRBLKSL_2_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_UNCORRBLKSL_2_GEN2r
#define WRITEALL_RX_X4_FEC_UNCORRBLKSL_2_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_UNCORRBLKSL_2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_FEC_UNCORRBLKSL_3_GEN2
 * BLOCKS:   RX_X4_STATUS5
 * REGADDR:  0xc1a3
 * DESC:     FEC uncorrected blocks counter for stream 3[15:0]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     UNCORCOUNTL_STREAM3 16 LSB of the uncorrected blocks count for stream 3, clear on read
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_3_GEN2r (0x0000c1a3 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_3_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_UNCORRBLKSL_3_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_3_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_uncorrblksl_3_gen2[1];
	uint32_t _rx_x4_fec_uncorrblksl_3_gen2;
} BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_3_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_3_GEN2r_CLR(r) (r).rx_x4_fec_uncorrblksl_3_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_3_GEN2r_SET(r,d) (r).rx_x4_fec_uncorrblksl_3_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_3_GEN2r_GET(r) (r).rx_x4_fec_uncorrblksl_3_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_3_GEN2r_UNCORCOUNTL_STREAM3f_GET(r) (((r).rx_x4_fec_uncorrblksl_3_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_3_GEN2r_UNCORCOUNTL_STREAM3f_SET(r,f) (r).rx_x4_fec_uncorrblksl_3_gen2[0]=(((r).rx_x4_fec_uncorrblksl_3_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_UNCORRBLKSL_3_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_FEC_UNCORRBLKSL_3_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_3_GEN2r,(_r._rx_x4_fec_uncorrblksl_3_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_UNCORRBLKSL_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_3_GEN2r,(_r._rx_x4_fec_uncorrblksl_3_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_UNCORRBLKSL_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_3_GEN2r,(_r._rx_x4_fec_uncorrblksl_3_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_FEC_UNCORRBLKSL_3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_uncorrblksl_3_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_UNCORRBLKSL_3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_uncorrblksl_3_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_UNCORRBLKSL_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_uncorrblksl_3_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_UNCORRBLKSL_3_GEN2r BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_3_GEN2r
#define RX_X4_FEC_UNCORRBLKSL_3_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_3_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_3_GEN2r_t RX_X4_FEC_UNCORRBLKSL_3_GEN2r_t;
#define RX_X4_FEC_UNCORRBLKSL_3_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_3_GEN2r_CLR
#define RX_X4_FEC_UNCORRBLKSL_3_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_3_GEN2r_SET
#define RX_X4_FEC_UNCORRBLKSL_3_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_3_GEN2r_GET
#define RX_X4_FEC_UNCORRBLKSL_3_GEN2r_UNCORCOUNTL_STREAM3f_GET BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_3_GEN2r_UNCORCOUNTL_STREAM3f_GET
#define RX_X4_FEC_UNCORRBLKSL_3_GEN2r_UNCORCOUNTL_STREAM3f_SET BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_3_GEN2r_UNCORCOUNTL_STREAM3f_SET
#define READ_RX_X4_FEC_UNCORRBLKSL_3_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_FEC_UNCORRBLKSL_3_GEN2r
#define WRITE_RX_X4_FEC_UNCORRBLKSL_3_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_UNCORRBLKSL_3_GEN2r
#define MODIFY_RX_X4_FEC_UNCORRBLKSL_3_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_UNCORRBLKSL_3_GEN2r
#define READLN_RX_X4_FEC_UNCORRBLKSL_3_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_FEC_UNCORRBLKSL_3_GEN2r
#define WRITELN_RX_X4_FEC_UNCORRBLKSL_3_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_UNCORRBLKSL_3_GEN2r
#define WRITEALL_RX_X4_FEC_UNCORRBLKSL_3_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_UNCORRBLKSL_3_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_3_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_FEC_UNCORRBLKSL_4_GEN2
 * BLOCKS:   RX_X4_STATUS5
 * REGADDR:  0xc1a4
 * DESC:     FEC uncorrected blocks counter for stream 4[15:0]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     UNCORCOUNTL_STREAM4 16 LSB of the uncorrected blocks count for stream 4, clear on read
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_4_GEN2r (0x0000c1a4 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_4_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_UNCORRBLKSL_4_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_4_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_uncorrblksl_4_gen2[1];
	uint32_t _rx_x4_fec_uncorrblksl_4_gen2;
} BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_4_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_4_GEN2r_CLR(r) (r).rx_x4_fec_uncorrblksl_4_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_4_GEN2r_SET(r,d) (r).rx_x4_fec_uncorrblksl_4_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_4_GEN2r_GET(r) (r).rx_x4_fec_uncorrblksl_4_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_4_GEN2r_UNCORCOUNTL_STREAM4f_GET(r) (((r).rx_x4_fec_uncorrblksl_4_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_4_GEN2r_UNCORCOUNTL_STREAM4f_SET(r,f) (r).rx_x4_fec_uncorrblksl_4_gen2[0]=(((r).rx_x4_fec_uncorrblksl_4_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_UNCORRBLKSL_4_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_FEC_UNCORRBLKSL_4_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_4_GEN2r,(_r._rx_x4_fec_uncorrblksl_4_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_UNCORRBLKSL_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_4_GEN2r,(_r._rx_x4_fec_uncorrblksl_4_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_UNCORRBLKSL_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_4_GEN2r,(_r._rx_x4_fec_uncorrblksl_4_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_FEC_UNCORRBLKSL_4_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_uncorrblksl_4_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_UNCORRBLKSL_4_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_uncorrblksl_4_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_UNCORRBLKSL_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_uncorrblksl_4_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_UNCORRBLKSL_4_GEN2r BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_4_GEN2r
#define RX_X4_FEC_UNCORRBLKSL_4_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_4_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_4_GEN2r_t RX_X4_FEC_UNCORRBLKSL_4_GEN2r_t;
#define RX_X4_FEC_UNCORRBLKSL_4_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_4_GEN2r_CLR
#define RX_X4_FEC_UNCORRBLKSL_4_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_4_GEN2r_SET
#define RX_X4_FEC_UNCORRBLKSL_4_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_4_GEN2r_GET
#define RX_X4_FEC_UNCORRBLKSL_4_GEN2r_UNCORCOUNTL_STREAM4f_GET BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_4_GEN2r_UNCORCOUNTL_STREAM4f_GET
#define RX_X4_FEC_UNCORRBLKSL_4_GEN2r_UNCORCOUNTL_STREAM4f_SET BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_4_GEN2r_UNCORCOUNTL_STREAM4f_SET
#define READ_RX_X4_FEC_UNCORRBLKSL_4_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_FEC_UNCORRBLKSL_4_GEN2r
#define WRITE_RX_X4_FEC_UNCORRBLKSL_4_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_UNCORRBLKSL_4_GEN2r
#define MODIFY_RX_X4_FEC_UNCORRBLKSL_4_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_UNCORRBLKSL_4_GEN2r
#define READLN_RX_X4_FEC_UNCORRBLKSL_4_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_FEC_UNCORRBLKSL_4_GEN2r
#define WRITELN_RX_X4_FEC_UNCORRBLKSL_4_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_UNCORRBLKSL_4_GEN2r
#define WRITEALL_RX_X4_FEC_UNCORRBLKSL_4_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_UNCORRBLKSL_4_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSL_4_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_FEC_UNCORRBLKSH_0_GEN2
 * BLOCKS:   RX_X4_STATUS5
 * REGADDR:  0xc1a5
 * DESC:     FEC uncorrected blocks counter for stream 0[31:16]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     UNCORCOUNTH_STREAM0 16 MSB of the uncorrected blocks count for stream 0, clear on readContents are latched upon read of uncorCountL
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_0_GEN2r (0x0000c1a5 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_UNCORRBLKSH_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_0_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_uncorrblksh_0_gen2[1];
	uint32_t _rx_x4_fec_uncorrblksh_0_gen2;
} BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_0_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_0_GEN2r_CLR(r) (r).rx_x4_fec_uncorrblksh_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_0_GEN2r_SET(r,d) (r).rx_x4_fec_uncorrblksh_0_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_0_GEN2r_GET(r) (r).rx_x4_fec_uncorrblksh_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_0_GEN2r_UNCORCOUNTH_STREAM0f_GET(r) (((r).rx_x4_fec_uncorrblksh_0_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_0_GEN2r_UNCORCOUNTH_STREAM0f_SET(r,f) (r).rx_x4_fec_uncorrblksh_0_gen2[0]=(((r).rx_x4_fec_uncorrblksh_0_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_UNCORRBLKSH_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_FEC_UNCORRBLKSH_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_0_GEN2r,(_r._rx_x4_fec_uncorrblksh_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_UNCORRBLKSH_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_0_GEN2r,(_r._rx_x4_fec_uncorrblksh_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_UNCORRBLKSH_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_0_GEN2r,(_r._rx_x4_fec_uncorrblksh_0_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_FEC_UNCORRBLKSH_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_uncorrblksh_0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_UNCORRBLKSH_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_uncorrblksh_0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_UNCORRBLKSH_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_uncorrblksh_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_UNCORRBLKSH_0_GEN2r BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_0_GEN2r
#define RX_X4_FEC_UNCORRBLKSH_0_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_0_GEN2r_t RX_X4_FEC_UNCORRBLKSH_0_GEN2r_t;
#define RX_X4_FEC_UNCORRBLKSH_0_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_0_GEN2r_CLR
#define RX_X4_FEC_UNCORRBLKSH_0_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_0_GEN2r_SET
#define RX_X4_FEC_UNCORRBLKSH_0_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_0_GEN2r_GET
#define RX_X4_FEC_UNCORRBLKSH_0_GEN2r_UNCORCOUNTH_STREAM0f_GET BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_0_GEN2r_UNCORCOUNTH_STREAM0f_GET
#define RX_X4_FEC_UNCORRBLKSH_0_GEN2r_UNCORCOUNTH_STREAM0f_SET BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_0_GEN2r_UNCORCOUNTH_STREAM0f_SET
#define READ_RX_X4_FEC_UNCORRBLKSH_0_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_FEC_UNCORRBLKSH_0_GEN2r
#define WRITE_RX_X4_FEC_UNCORRBLKSH_0_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_UNCORRBLKSH_0_GEN2r
#define MODIFY_RX_X4_FEC_UNCORRBLKSH_0_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_UNCORRBLKSH_0_GEN2r
#define READLN_RX_X4_FEC_UNCORRBLKSH_0_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_FEC_UNCORRBLKSH_0_GEN2r
#define WRITELN_RX_X4_FEC_UNCORRBLKSH_0_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_UNCORRBLKSH_0_GEN2r
#define WRITEALL_RX_X4_FEC_UNCORRBLKSH_0_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_UNCORRBLKSH_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_FEC_UNCORRBLKSH_1_GEN2
 * BLOCKS:   RX_X4_STATUS5
 * REGADDR:  0xc1a6
 * DESC:     FEC uncorrected blocks counter for stream 1[31:16]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     UNCORCOUNTH_STREAM1 16 MSB of the uncorrected blocks count for stream 1, clear on readContents are latched upon read of uncorCountL
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_1_GEN2r (0x0000c1a6 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_UNCORRBLKSH_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_1_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_uncorrblksh_1_gen2[1];
	uint32_t _rx_x4_fec_uncorrblksh_1_gen2;
} BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_1_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_1_GEN2r_CLR(r) (r).rx_x4_fec_uncorrblksh_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_1_GEN2r_SET(r,d) (r).rx_x4_fec_uncorrblksh_1_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_1_GEN2r_GET(r) (r).rx_x4_fec_uncorrblksh_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_1_GEN2r_UNCORCOUNTH_STREAM1f_GET(r) (((r).rx_x4_fec_uncorrblksh_1_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_1_GEN2r_UNCORCOUNTH_STREAM1f_SET(r,f) (r).rx_x4_fec_uncorrblksh_1_gen2[0]=(((r).rx_x4_fec_uncorrblksh_1_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_UNCORRBLKSH_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_FEC_UNCORRBLKSH_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_1_GEN2r,(_r._rx_x4_fec_uncorrblksh_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_UNCORRBLKSH_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_1_GEN2r,(_r._rx_x4_fec_uncorrblksh_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_UNCORRBLKSH_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_1_GEN2r,(_r._rx_x4_fec_uncorrblksh_1_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_FEC_UNCORRBLKSH_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_uncorrblksh_1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_UNCORRBLKSH_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_uncorrblksh_1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_UNCORRBLKSH_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_uncorrblksh_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_UNCORRBLKSH_1_GEN2r BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_1_GEN2r
#define RX_X4_FEC_UNCORRBLKSH_1_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_1_GEN2r_t RX_X4_FEC_UNCORRBLKSH_1_GEN2r_t;
#define RX_X4_FEC_UNCORRBLKSH_1_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_1_GEN2r_CLR
#define RX_X4_FEC_UNCORRBLKSH_1_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_1_GEN2r_SET
#define RX_X4_FEC_UNCORRBLKSH_1_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_1_GEN2r_GET
#define RX_X4_FEC_UNCORRBLKSH_1_GEN2r_UNCORCOUNTH_STREAM1f_GET BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_1_GEN2r_UNCORCOUNTH_STREAM1f_GET
#define RX_X4_FEC_UNCORRBLKSH_1_GEN2r_UNCORCOUNTH_STREAM1f_SET BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_1_GEN2r_UNCORCOUNTH_STREAM1f_SET
#define READ_RX_X4_FEC_UNCORRBLKSH_1_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_FEC_UNCORRBLKSH_1_GEN2r
#define WRITE_RX_X4_FEC_UNCORRBLKSH_1_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_UNCORRBLKSH_1_GEN2r
#define MODIFY_RX_X4_FEC_UNCORRBLKSH_1_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_UNCORRBLKSH_1_GEN2r
#define READLN_RX_X4_FEC_UNCORRBLKSH_1_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_FEC_UNCORRBLKSH_1_GEN2r
#define WRITELN_RX_X4_FEC_UNCORRBLKSH_1_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_UNCORRBLKSH_1_GEN2r
#define WRITEALL_RX_X4_FEC_UNCORRBLKSH_1_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_UNCORRBLKSH_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_FEC_UNCORRBLKSH_2_GEN2
 * BLOCKS:   RX_X4_STATUS5
 * REGADDR:  0xc1a7
 * DESC:     FEC uncorrected blocks counter for stream 2[31:16]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     UNCORCOUNTH_STREAM2 16 MSB of the uncorrected blocks count for stream 2, clear on readContents are latched upon read of uncorCountL
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_2_GEN2r (0x0000c1a7 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_UNCORRBLKSH_2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_2_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_uncorrblksh_2_gen2[1];
	uint32_t _rx_x4_fec_uncorrblksh_2_gen2;
} BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_2_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_2_GEN2r_CLR(r) (r).rx_x4_fec_uncorrblksh_2_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_2_GEN2r_SET(r,d) (r).rx_x4_fec_uncorrblksh_2_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_2_GEN2r_GET(r) (r).rx_x4_fec_uncorrblksh_2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_2_GEN2r_UNCORCOUNTH_STREAM2f_GET(r) (((r).rx_x4_fec_uncorrblksh_2_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_2_GEN2r_UNCORCOUNTH_STREAM2f_SET(r,f) (r).rx_x4_fec_uncorrblksh_2_gen2[0]=(((r).rx_x4_fec_uncorrblksh_2_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_UNCORRBLKSH_2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_FEC_UNCORRBLKSH_2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_2_GEN2r,(_r._rx_x4_fec_uncorrblksh_2_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_UNCORRBLKSH_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_2_GEN2r,(_r._rx_x4_fec_uncorrblksh_2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_UNCORRBLKSH_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_2_GEN2r,(_r._rx_x4_fec_uncorrblksh_2_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_FEC_UNCORRBLKSH_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_uncorrblksh_2_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_UNCORRBLKSH_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_uncorrblksh_2_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_UNCORRBLKSH_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_uncorrblksh_2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_UNCORRBLKSH_2_GEN2r BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_2_GEN2r
#define RX_X4_FEC_UNCORRBLKSH_2_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_2_GEN2r_t RX_X4_FEC_UNCORRBLKSH_2_GEN2r_t;
#define RX_X4_FEC_UNCORRBLKSH_2_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_2_GEN2r_CLR
#define RX_X4_FEC_UNCORRBLKSH_2_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_2_GEN2r_SET
#define RX_X4_FEC_UNCORRBLKSH_2_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_2_GEN2r_GET
#define RX_X4_FEC_UNCORRBLKSH_2_GEN2r_UNCORCOUNTH_STREAM2f_GET BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_2_GEN2r_UNCORCOUNTH_STREAM2f_GET
#define RX_X4_FEC_UNCORRBLKSH_2_GEN2r_UNCORCOUNTH_STREAM2f_SET BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_2_GEN2r_UNCORCOUNTH_STREAM2f_SET
#define READ_RX_X4_FEC_UNCORRBLKSH_2_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_FEC_UNCORRBLKSH_2_GEN2r
#define WRITE_RX_X4_FEC_UNCORRBLKSH_2_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_UNCORRBLKSH_2_GEN2r
#define MODIFY_RX_X4_FEC_UNCORRBLKSH_2_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_UNCORRBLKSH_2_GEN2r
#define READLN_RX_X4_FEC_UNCORRBLKSH_2_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_FEC_UNCORRBLKSH_2_GEN2r
#define WRITELN_RX_X4_FEC_UNCORRBLKSH_2_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_UNCORRBLKSH_2_GEN2r
#define WRITEALL_RX_X4_FEC_UNCORRBLKSH_2_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_UNCORRBLKSH_2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_FEC_UNCORRBLKSH_3_GEN2
 * BLOCKS:   RX_X4_STATUS5
 * REGADDR:  0xc1a8
 * DESC:     FEC uncorrected blocks counter for stream 3[31:16]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     UNCORCOUNTH_STREAM3 16 MSB of the uncorrected blocks count for stream 3, clear on readContents are latched upon read of uncorCountL
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_3_GEN2r (0x0000c1a8 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_3_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_UNCORRBLKSH_3_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_3_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_uncorrblksh_3_gen2[1];
	uint32_t _rx_x4_fec_uncorrblksh_3_gen2;
} BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_3_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_3_GEN2r_CLR(r) (r).rx_x4_fec_uncorrblksh_3_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_3_GEN2r_SET(r,d) (r).rx_x4_fec_uncorrblksh_3_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_3_GEN2r_GET(r) (r).rx_x4_fec_uncorrblksh_3_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_3_GEN2r_UNCORCOUNTH_STREAM3f_GET(r) (((r).rx_x4_fec_uncorrblksh_3_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_3_GEN2r_UNCORCOUNTH_STREAM3f_SET(r,f) (r).rx_x4_fec_uncorrblksh_3_gen2[0]=(((r).rx_x4_fec_uncorrblksh_3_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_UNCORRBLKSH_3_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_FEC_UNCORRBLKSH_3_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_3_GEN2r,(_r._rx_x4_fec_uncorrblksh_3_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_UNCORRBLKSH_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_3_GEN2r,(_r._rx_x4_fec_uncorrblksh_3_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_UNCORRBLKSH_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_3_GEN2r,(_r._rx_x4_fec_uncorrblksh_3_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_FEC_UNCORRBLKSH_3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_uncorrblksh_3_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_UNCORRBLKSH_3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_uncorrblksh_3_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_UNCORRBLKSH_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_uncorrblksh_3_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_UNCORRBLKSH_3_GEN2r BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_3_GEN2r
#define RX_X4_FEC_UNCORRBLKSH_3_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_3_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_3_GEN2r_t RX_X4_FEC_UNCORRBLKSH_3_GEN2r_t;
#define RX_X4_FEC_UNCORRBLKSH_3_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_3_GEN2r_CLR
#define RX_X4_FEC_UNCORRBLKSH_3_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_3_GEN2r_SET
#define RX_X4_FEC_UNCORRBLKSH_3_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_3_GEN2r_GET
#define RX_X4_FEC_UNCORRBLKSH_3_GEN2r_UNCORCOUNTH_STREAM3f_GET BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_3_GEN2r_UNCORCOUNTH_STREAM3f_GET
#define RX_X4_FEC_UNCORRBLKSH_3_GEN2r_UNCORCOUNTH_STREAM3f_SET BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_3_GEN2r_UNCORCOUNTH_STREAM3f_SET
#define READ_RX_X4_FEC_UNCORRBLKSH_3_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_FEC_UNCORRBLKSH_3_GEN2r
#define WRITE_RX_X4_FEC_UNCORRBLKSH_3_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_UNCORRBLKSH_3_GEN2r
#define MODIFY_RX_X4_FEC_UNCORRBLKSH_3_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_UNCORRBLKSH_3_GEN2r
#define READLN_RX_X4_FEC_UNCORRBLKSH_3_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_FEC_UNCORRBLKSH_3_GEN2r
#define WRITELN_RX_X4_FEC_UNCORRBLKSH_3_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_UNCORRBLKSH_3_GEN2r
#define WRITEALL_RX_X4_FEC_UNCORRBLKSH_3_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_UNCORRBLKSH_3_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_3_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_FEC_UNCORRBLKSH_4_GEN2
 * BLOCKS:   RX_X4_STATUS5
 * REGADDR:  0xc1a9
 * DESC:     FEC uncorrected blocks counter for stream 4[31:16]
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     UNCORCOUNTH_STREAM4 16 MSB of the uncorrected blocks count for stream 4, clear on readContents are latched upon read of uncorCountL
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_4_GEN2r (0x0000c1a9 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_4_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_UNCORRBLKSH_4_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_4_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_uncorrblksh_4_gen2[1];
	uint32_t _rx_x4_fec_uncorrblksh_4_gen2;
} BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_4_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_4_GEN2r_CLR(r) (r).rx_x4_fec_uncorrblksh_4_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_4_GEN2r_SET(r,d) (r).rx_x4_fec_uncorrblksh_4_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_4_GEN2r_GET(r) (r).rx_x4_fec_uncorrblksh_4_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_4_GEN2r_UNCORCOUNTH_STREAM4f_GET(r) (((r).rx_x4_fec_uncorrblksh_4_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_4_GEN2r_UNCORCOUNTH_STREAM4f_SET(r,f) (r).rx_x4_fec_uncorrblksh_4_gen2[0]=(((r).rx_x4_fec_uncorrblksh_4_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_UNCORRBLKSH_4_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_FEC_UNCORRBLKSH_4_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_4_GEN2r,(_r._rx_x4_fec_uncorrblksh_4_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_UNCORRBLKSH_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_4_GEN2r,(_r._rx_x4_fec_uncorrblksh_4_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_UNCORRBLKSH_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_4_GEN2r,(_r._rx_x4_fec_uncorrblksh_4_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_FEC_UNCORRBLKSH_4_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_uncorrblksh_4_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_UNCORRBLKSH_4_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_uncorrblksh_4_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_UNCORRBLKSH_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_uncorrblksh_4_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_UNCORRBLKSH_4_GEN2r BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_4_GEN2r
#define RX_X4_FEC_UNCORRBLKSH_4_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_4_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_4_GEN2r_t RX_X4_FEC_UNCORRBLKSH_4_GEN2r_t;
#define RX_X4_FEC_UNCORRBLKSH_4_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_4_GEN2r_CLR
#define RX_X4_FEC_UNCORRBLKSH_4_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_4_GEN2r_SET
#define RX_X4_FEC_UNCORRBLKSH_4_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_4_GEN2r_GET
#define RX_X4_FEC_UNCORRBLKSH_4_GEN2r_UNCORCOUNTH_STREAM4f_GET BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_4_GEN2r_UNCORCOUNTH_STREAM4f_GET
#define RX_X4_FEC_UNCORRBLKSH_4_GEN2r_UNCORCOUNTH_STREAM4f_SET BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_4_GEN2r_UNCORCOUNTH_STREAM4f_SET
#define READ_RX_X4_FEC_UNCORRBLKSH_4_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_FEC_UNCORRBLKSH_4_GEN2r
#define WRITE_RX_X4_FEC_UNCORRBLKSH_4_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_UNCORRBLKSH_4_GEN2r
#define MODIFY_RX_X4_FEC_UNCORRBLKSH_4_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_UNCORRBLKSH_4_GEN2r
#define READLN_RX_X4_FEC_UNCORRBLKSH_4_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_FEC_UNCORRBLKSH_4_GEN2r
#define WRITELN_RX_X4_FEC_UNCORRBLKSH_4_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_UNCORRBLKSH_4_GEN2r
#define WRITEALL_RX_X4_FEC_UNCORRBLKSH_4_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_UNCORRBLKSH_4_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_FEC_UNCORRBLKSH_4_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TEST1_TXPKTCNT_U_GEN2
 * BLOCKS:   TEST1
 * REGADDR:  0xc1b0
 * DESC:     TX Packet Count Upper Register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TXPKTCNT_U       
 */
#define BCMI_TSCF_XGXS_TEST1_TXPKTCNT_U_GEN2r (0x0000c1b0 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TEST1_TXPKTCNT_U_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TEST1_TXPKTCNT_U_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TEST1_TXPKTCNT_U_GEN2r_s {
	uint32_t v[1];
	uint32_t test1_txpktcnt_u_gen2[1];
	uint32_t _test1_txpktcnt_u_gen2;
} BCMI_TSCF_XGXS_TEST1_TXPKTCNT_U_GEN2r_t;

#define BCMI_TSCF_XGXS_TEST1_TXPKTCNT_U_GEN2r_CLR(r) (r).test1_txpktcnt_u_gen2[0] = 0
#define BCMI_TSCF_XGXS_TEST1_TXPKTCNT_U_GEN2r_SET(r,d) (r).test1_txpktcnt_u_gen2[0] = d
#define BCMI_TSCF_XGXS_TEST1_TXPKTCNT_U_GEN2r_GET(r) (r).test1_txpktcnt_u_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TEST1_TXPKTCNT_U_GEN2r_TXPKTCNT_Uf_GET(r) (((r).test1_txpktcnt_u_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_TEST1_TXPKTCNT_U_GEN2r_TXPKTCNT_Uf_SET(r,f) (r).test1_txpktcnt_u_gen2[0]=(((r).test1_txpktcnt_u_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access TEST1_TXPKTCNT_U_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TEST1_TXPKTCNT_U_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TEST1_TXPKTCNT_U_GEN2r,(_r._test1_txpktcnt_u_gen2))
#define BCMI_TSCF_XGXS_WRITE_TEST1_TXPKTCNT_U_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TEST1_TXPKTCNT_U_GEN2r,(_r._test1_txpktcnt_u_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TEST1_TXPKTCNT_U_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TEST1_TXPKTCNT_U_GEN2r,(_r._test1_txpktcnt_u_gen2))
#define BCMI_TSCF_XGXS_READLN_TEST1_TXPKTCNT_U_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TEST1_TXPKTCNT_U_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._test1_txpktcnt_u_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TEST1_TXPKTCNT_U_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TEST1_TXPKTCNT_U_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._test1_txpktcnt_u_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TEST1_TXPKTCNT_U_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TEST1_TXPKTCNT_U_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._test1_txpktcnt_u_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TEST1_TXPKTCNT_U_GEN2r BCMI_TSCF_XGXS_TEST1_TXPKTCNT_U_GEN2r
#define TEST1_TXPKTCNT_U_GEN2r_SIZE BCMI_TSCF_XGXS_TEST1_TXPKTCNT_U_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TEST1_TXPKTCNT_U_GEN2r_t TEST1_TXPKTCNT_U_GEN2r_t;
#define TEST1_TXPKTCNT_U_GEN2r_CLR BCMI_TSCF_XGXS_TEST1_TXPKTCNT_U_GEN2r_CLR
#define TEST1_TXPKTCNT_U_GEN2r_SET BCMI_TSCF_XGXS_TEST1_TXPKTCNT_U_GEN2r_SET
#define TEST1_TXPKTCNT_U_GEN2r_GET BCMI_TSCF_XGXS_TEST1_TXPKTCNT_U_GEN2r_GET
#define TEST1_TXPKTCNT_U_GEN2r_TXPKTCNT_Uf_GET BCMI_TSCF_XGXS_TEST1_TXPKTCNT_U_GEN2r_TXPKTCNT_Uf_GET
#define TEST1_TXPKTCNT_U_GEN2r_TXPKTCNT_Uf_SET BCMI_TSCF_XGXS_TEST1_TXPKTCNT_U_GEN2r_TXPKTCNT_Uf_SET
#define READ_TEST1_TXPKTCNT_U_GEN2r BCMI_TSCF_XGXS_READ_TEST1_TXPKTCNT_U_GEN2r
#define WRITE_TEST1_TXPKTCNT_U_GEN2r BCMI_TSCF_XGXS_WRITE_TEST1_TXPKTCNT_U_GEN2r
#define MODIFY_TEST1_TXPKTCNT_U_GEN2r BCMI_TSCF_XGXS_MODIFY_TEST1_TXPKTCNT_U_GEN2r
#define READLN_TEST1_TXPKTCNT_U_GEN2r BCMI_TSCF_XGXS_READLN_TEST1_TXPKTCNT_U_GEN2r
#define WRITELN_TEST1_TXPKTCNT_U_GEN2r BCMI_TSCF_XGXS_WRITELN_TEST1_TXPKTCNT_U_GEN2r
#define WRITEALL_TEST1_TXPKTCNT_U_GEN2r BCMI_TSCF_XGXS_WRITEALL_TEST1_TXPKTCNT_U_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TEST1_TXPKTCNT_U_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TEST1_TXPKTCNT_L_GEN2
 * BLOCKS:   TEST1
 * REGADDR:  0xc1b1
 * DESC:     TX Packet Count Lower Register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TXPKTCNT_L       
 */
#define BCMI_TSCF_XGXS_TEST1_TXPKTCNT_L_GEN2r (0x0000c1b1 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TEST1_TXPKTCNT_L_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TEST1_TXPKTCNT_L_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TEST1_TXPKTCNT_L_GEN2r_s {
	uint32_t v[1];
	uint32_t test1_txpktcnt_l_gen2[1];
	uint32_t _test1_txpktcnt_l_gen2;
} BCMI_TSCF_XGXS_TEST1_TXPKTCNT_L_GEN2r_t;

#define BCMI_TSCF_XGXS_TEST1_TXPKTCNT_L_GEN2r_CLR(r) (r).test1_txpktcnt_l_gen2[0] = 0
#define BCMI_TSCF_XGXS_TEST1_TXPKTCNT_L_GEN2r_SET(r,d) (r).test1_txpktcnt_l_gen2[0] = d
#define BCMI_TSCF_XGXS_TEST1_TXPKTCNT_L_GEN2r_GET(r) (r).test1_txpktcnt_l_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TEST1_TXPKTCNT_L_GEN2r_TXPKTCNT_Lf_GET(r) (((r).test1_txpktcnt_l_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_TEST1_TXPKTCNT_L_GEN2r_TXPKTCNT_Lf_SET(r,f) (r).test1_txpktcnt_l_gen2[0]=(((r).test1_txpktcnt_l_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access TEST1_TXPKTCNT_L_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TEST1_TXPKTCNT_L_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TEST1_TXPKTCNT_L_GEN2r,(_r._test1_txpktcnt_l_gen2))
#define BCMI_TSCF_XGXS_WRITE_TEST1_TXPKTCNT_L_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TEST1_TXPKTCNT_L_GEN2r,(_r._test1_txpktcnt_l_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TEST1_TXPKTCNT_L_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TEST1_TXPKTCNT_L_GEN2r,(_r._test1_txpktcnt_l_gen2))
#define BCMI_TSCF_XGXS_READLN_TEST1_TXPKTCNT_L_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TEST1_TXPKTCNT_L_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._test1_txpktcnt_l_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TEST1_TXPKTCNT_L_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TEST1_TXPKTCNT_L_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._test1_txpktcnt_l_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TEST1_TXPKTCNT_L_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TEST1_TXPKTCNT_L_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._test1_txpktcnt_l_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TEST1_TXPKTCNT_L_GEN2r BCMI_TSCF_XGXS_TEST1_TXPKTCNT_L_GEN2r
#define TEST1_TXPKTCNT_L_GEN2r_SIZE BCMI_TSCF_XGXS_TEST1_TXPKTCNT_L_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TEST1_TXPKTCNT_L_GEN2r_t TEST1_TXPKTCNT_L_GEN2r_t;
#define TEST1_TXPKTCNT_L_GEN2r_CLR BCMI_TSCF_XGXS_TEST1_TXPKTCNT_L_GEN2r_CLR
#define TEST1_TXPKTCNT_L_GEN2r_SET BCMI_TSCF_XGXS_TEST1_TXPKTCNT_L_GEN2r_SET
#define TEST1_TXPKTCNT_L_GEN2r_GET BCMI_TSCF_XGXS_TEST1_TXPKTCNT_L_GEN2r_GET
#define TEST1_TXPKTCNT_L_GEN2r_TXPKTCNT_Lf_GET BCMI_TSCF_XGXS_TEST1_TXPKTCNT_L_GEN2r_TXPKTCNT_Lf_GET
#define TEST1_TXPKTCNT_L_GEN2r_TXPKTCNT_Lf_SET BCMI_TSCF_XGXS_TEST1_TXPKTCNT_L_GEN2r_TXPKTCNT_Lf_SET
#define READ_TEST1_TXPKTCNT_L_GEN2r BCMI_TSCF_XGXS_READ_TEST1_TXPKTCNT_L_GEN2r
#define WRITE_TEST1_TXPKTCNT_L_GEN2r BCMI_TSCF_XGXS_WRITE_TEST1_TXPKTCNT_L_GEN2r
#define MODIFY_TEST1_TXPKTCNT_L_GEN2r BCMI_TSCF_XGXS_MODIFY_TEST1_TXPKTCNT_L_GEN2r
#define READLN_TEST1_TXPKTCNT_L_GEN2r BCMI_TSCF_XGXS_READLN_TEST1_TXPKTCNT_L_GEN2r
#define WRITELN_TEST1_TXPKTCNT_L_GEN2r BCMI_TSCF_XGXS_WRITELN_TEST1_TXPKTCNT_L_GEN2r
#define WRITEALL_TEST1_TXPKTCNT_L_GEN2r BCMI_TSCF_XGXS_WRITEALL_TEST1_TXPKTCNT_L_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TEST1_TXPKTCNT_L_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TEST1_RXPKTCNT_U_GEN2
 * BLOCKS:   TEST1
 * REGADDR:  0xc1b2
 * DESC:     RX Packet Count Upper Register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXPKTCNT_U       
 */
#define BCMI_TSCF_XGXS_TEST1_RXPKTCNT_U_GEN2r (0x0000c1b2 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TEST1_RXPKTCNT_U_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TEST1_RXPKTCNT_U_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TEST1_RXPKTCNT_U_GEN2r_s {
	uint32_t v[1];
	uint32_t test1_rxpktcnt_u_gen2[1];
	uint32_t _test1_rxpktcnt_u_gen2;
} BCMI_TSCF_XGXS_TEST1_RXPKTCNT_U_GEN2r_t;

#define BCMI_TSCF_XGXS_TEST1_RXPKTCNT_U_GEN2r_CLR(r) (r).test1_rxpktcnt_u_gen2[0] = 0
#define BCMI_TSCF_XGXS_TEST1_RXPKTCNT_U_GEN2r_SET(r,d) (r).test1_rxpktcnt_u_gen2[0] = d
#define BCMI_TSCF_XGXS_TEST1_RXPKTCNT_U_GEN2r_GET(r) (r).test1_rxpktcnt_u_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TEST1_RXPKTCNT_U_GEN2r_RXPKTCNT_Uf_GET(r) (((r).test1_rxpktcnt_u_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_TEST1_RXPKTCNT_U_GEN2r_RXPKTCNT_Uf_SET(r,f) (r).test1_rxpktcnt_u_gen2[0]=(((r).test1_rxpktcnt_u_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access TEST1_RXPKTCNT_U_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TEST1_RXPKTCNT_U_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TEST1_RXPKTCNT_U_GEN2r,(_r._test1_rxpktcnt_u_gen2))
#define BCMI_TSCF_XGXS_WRITE_TEST1_RXPKTCNT_U_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TEST1_RXPKTCNT_U_GEN2r,(_r._test1_rxpktcnt_u_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TEST1_RXPKTCNT_U_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TEST1_RXPKTCNT_U_GEN2r,(_r._test1_rxpktcnt_u_gen2))
#define BCMI_TSCF_XGXS_READLN_TEST1_RXPKTCNT_U_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TEST1_RXPKTCNT_U_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._test1_rxpktcnt_u_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TEST1_RXPKTCNT_U_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TEST1_RXPKTCNT_U_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._test1_rxpktcnt_u_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TEST1_RXPKTCNT_U_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TEST1_RXPKTCNT_U_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._test1_rxpktcnt_u_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TEST1_RXPKTCNT_U_GEN2r BCMI_TSCF_XGXS_TEST1_RXPKTCNT_U_GEN2r
#define TEST1_RXPKTCNT_U_GEN2r_SIZE BCMI_TSCF_XGXS_TEST1_RXPKTCNT_U_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TEST1_RXPKTCNT_U_GEN2r_t TEST1_RXPKTCNT_U_GEN2r_t;
#define TEST1_RXPKTCNT_U_GEN2r_CLR BCMI_TSCF_XGXS_TEST1_RXPKTCNT_U_GEN2r_CLR
#define TEST1_RXPKTCNT_U_GEN2r_SET BCMI_TSCF_XGXS_TEST1_RXPKTCNT_U_GEN2r_SET
#define TEST1_RXPKTCNT_U_GEN2r_GET BCMI_TSCF_XGXS_TEST1_RXPKTCNT_U_GEN2r_GET
#define TEST1_RXPKTCNT_U_GEN2r_RXPKTCNT_Uf_GET BCMI_TSCF_XGXS_TEST1_RXPKTCNT_U_GEN2r_RXPKTCNT_Uf_GET
#define TEST1_RXPKTCNT_U_GEN2r_RXPKTCNT_Uf_SET BCMI_TSCF_XGXS_TEST1_RXPKTCNT_U_GEN2r_RXPKTCNT_Uf_SET
#define READ_TEST1_RXPKTCNT_U_GEN2r BCMI_TSCF_XGXS_READ_TEST1_RXPKTCNT_U_GEN2r
#define WRITE_TEST1_RXPKTCNT_U_GEN2r BCMI_TSCF_XGXS_WRITE_TEST1_RXPKTCNT_U_GEN2r
#define MODIFY_TEST1_RXPKTCNT_U_GEN2r BCMI_TSCF_XGXS_MODIFY_TEST1_RXPKTCNT_U_GEN2r
#define READLN_TEST1_RXPKTCNT_U_GEN2r BCMI_TSCF_XGXS_READLN_TEST1_RXPKTCNT_U_GEN2r
#define WRITELN_TEST1_RXPKTCNT_U_GEN2r BCMI_TSCF_XGXS_WRITELN_TEST1_RXPKTCNT_U_GEN2r
#define WRITEALL_TEST1_RXPKTCNT_U_GEN2r BCMI_TSCF_XGXS_WRITEALL_TEST1_RXPKTCNT_U_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TEST1_RXPKTCNT_U_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TEST1_RXPKTCNT_L_GEN2
 * BLOCKS:   TEST1
 * REGADDR:  0xc1b3
 * DESC:     RX Packet Count Lower Register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXPKTCNT_L       
 */
#define BCMI_TSCF_XGXS_TEST1_RXPKTCNT_L_GEN2r (0x0000c1b3 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TEST1_RXPKTCNT_L_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TEST1_RXPKTCNT_L_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TEST1_RXPKTCNT_L_GEN2r_s {
	uint32_t v[1];
	uint32_t test1_rxpktcnt_l_gen2[1];
	uint32_t _test1_rxpktcnt_l_gen2;
} BCMI_TSCF_XGXS_TEST1_RXPKTCNT_L_GEN2r_t;

#define BCMI_TSCF_XGXS_TEST1_RXPKTCNT_L_GEN2r_CLR(r) (r).test1_rxpktcnt_l_gen2[0] = 0
#define BCMI_TSCF_XGXS_TEST1_RXPKTCNT_L_GEN2r_SET(r,d) (r).test1_rxpktcnt_l_gen2[0] = d
#define BCMI_TSCF_XGXS_TEST1_RXPKTCNT_L_GEN2r_GET(r) (r).test1_rxpktcnt_l_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TEST1_RXPKTCNT_L_GEN2r_RXPKTCNT_Lf_GET(r) (((r).test1_rxpktcnt_l_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_TEST1_RXPKTCNT_L_GEN2r_RXPKTCNT_Lf_SET(r,f) (r).test1_rxpktcnt_l_gen2[0]=(((r).test1_rxpktcnt_l_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access TEST1_RXPKTCNT_L_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TEST1_RXPKTCNT_L_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TEST1_RXPKTCNT_L_GEN2r,(_r._test1_rxpktcnt_l_gen2))
#define BCMI_TSCF_XGXS_WRITE_TEST1_RXPKTCNT_L_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TEST1_RXPKTCNT_L_GEN2r,(_r._test1_rxpktcnt_l_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TEST1_RXPKTCNT_L_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TEST1_RXPKTCNT_L_GEN2r,(_r._test1_rxpktcnt_l_gen2))
#define BCMI_TSCF_XGXS_READLN_TEST1_RXPKTCNT_L_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TEST1_RXPKTCNT_L_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._test1_rxpktcnt_l_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TEST1_RXPKTCNT_L_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TEST1_RXPKTCNT_L_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._test1_rxpktcnt_l_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TEST1_RXPKTCNT_L_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TEST1_RXPKTCNT_L_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._test1_rxpktcnt_l_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TEST1_RXPKTCNT_L_GEN2r BCMI_TSCF_XGXS_TEST1_RXPKTCNT_L_GEN2r
#define TEST1_RXPKTCNT_L_GEN2r_SIZE BCMI_TSCF_XGXS_TEST1_RXPKTCNT_L_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TEST1_RXPKTCNT_L_GEN2r_t TEST1_RXPKTCNT_L_GEN2r_t;
#define TEST1_RXPKTCNT_L_GEN2r_CLR BCMI_TSCF_XGXS_TEST1_RXPKTCNT_L_GEN2r_CLR
#define TEST1_RXPKTCNT_L_GEN2r_SET BCMI_TSCF_XGXS_TEST1_RXPKTCNT_L_GEN2r_SET
#define TEST1_RXPKTCNT_L_GEN2r_GET BCMI_TSCF_XGXS_TEST1_RXPKTCNT_L_GEN2r_GET
#define TEST1_RXPKTCNT_L_GEN2r_RXPKTCNT_Lf_GET BCMI_TSCF_XGXS_TEST1_RXPKTCNT_L_GEN2r_RXPKTCNT_Lf_GET
#define TEST1_RXPKTCNT_L_GEN2r_RXPKTCNT_Lf_SET BCMI_TSCF_XGXS_TEST1_RXPKTCNT_L_GEN2r_RXPKTCNT_Lf_SET
#define READ_TEST1_RXPKTCNT_L_GEN2r BCMI_TSCF_XGXS_READ_TEST1_RXPKTCNT_L_GEN2r
#define WRITE_TEST1_RXPKTCNT_L_GEN2r BCMI_TSCF_XGXS_WRITE_TEST1_RXPKTCNT_L_GEN2r
#define MODIFY_TEST1_RXPKTCNT_L_GEN2r BCMI_TSCF_XGXS_MODIFY_TEST1_RXPKTCNT_L_GEN2r
#define READLN_TEST1_RXPKTCNT_L_GEN2r BCMI_TSCF_XGXS_READLN_TEST1_RXPKTCNT_L_GEN2r
#define WRITELN_TEST1_RXPKTCNT_L_GEN2r BCMI_TSCF_XGXS_WRITELN_TEST1_RXPKTCNT_L_GEN2r
#define WRITEALL_TEST1_RXPKTCNT_L_GEN2r BCMI_TSCF_XGXS_WRITEALL_TEST1_RXPKTCNT_L_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TEST1_RXPKTCNT_L_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X4_CL73_CFG_GEN2
 * BLOCKS:   AN_X4_ABILITIES
 * REGADDR:  0xc1c0
 * DESC:     CL73 Auto Neg Config Reg
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL73_AN_RESTART  CL73 Auto-Negotiation RestartA transition from zero to one on this bit will restart CL73 AN
 *     AD_TO_CL73_EN    When doing HP auto neg, if the other device is doing CL73 auto neg, then restart auto neg in CL73 mode.
 *     BAM_TO_HPAM_AD_EN Broadcom to Hewlett-Packard Auto-Detect EnableWhen doing Broadcom CL73 auto-negotioation, if the other device is doingHewlett-Packard auto-negotiation, then restart auto-negotiation in.Hewlett-Packard mode.
 *     CL73_NONCE_MATCH_VAL Clause 73 nonce match value
 *     CL73_NONCE_MATCH_OVER Clause 73 nonce match over-ride
 *     CL73_ENABLE      IEEE CL73 Auto-Negotiation Mode Enable
 *     CL73_HPAM_ENABLE Hewlett-Packard Auto-Negotiation Mode EnableIf both Broadcom CL73 and Hewlett Packard modes are enabled, then the local device will start in Broadcom CL73 mode.
 *     CL73_BAM_ENABLE  Broadcom CL73 Auto-Negotiation Mode Enable
 *     NUM_ADVERTISED_LANES Defines the number of lanes that are available via the advertised pagesSW must set this field before enabling AN0: one lane1: two lanes2: four lanes3: 10 lanes
 *     DISABLE_REMOTE_FAULT Disable the Remote Fault Reporting
 */
#define BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r (0x0000c1c0 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_CL73_CFG_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x4_cl73_cfg_gen2[1];
	uint32_t _an_x4_cl73_cfg_gen2;
} BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r_CLR(r) (r).an_x4_cl73_cfg_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r_SET(r,d) (r).an_x4_cl73_cfg_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r_GET(r) (r).an_x4_cl73_cfg_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r_DISABLE_REMOTE_FAULTf_GET(r) ((((r).an_x4_cl73_cfg_gen2[0]) >> 13) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r_DISABLE_REMOTE_FAULTf_SET(r,f) (r).an_x4_cl73_cfg_gen2[0]=(((r).an_x4_cl73_cfg_gen2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r_NUM_ADVERTISED_LANESf_GET(r) ((((r).an_x4_cl73_cfg_gen2[0]) >> 11) & 0x3)
#define BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r_NUM_ADVERTISED_LANESf_SET(r,f) (r).an_x4_cl73_cfg_gen2[0]=(((r).an_x4_cl73_cfg_gen2[0] & ~((uint32_t)0x3 << 11)) | ((((uint32_t)f) & 0x3) << 11)) | (3 << (16 + 11))
#define BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r_CL73_BAM_ENABLEf_GET(r) ((((r).an_x4_cl73_cfg_gen2[0]) >> 10) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r_CL73_BAM_ENABLEf_SET(r,f) (r).an_x4_cl73_cfg_gen2[0]=(((r).an_x4_cl73_cfg_gen2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r_CL73_HPAM_ENABLEf_GET(r) ((((r).an_x4_cl73_cfg_gen2[0]) >> 9) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r_CL73_HPAM_ENABLEf_SET(r,f) (r).an_x4_cl73_cfg_gen2[0]=(((r).an_x4_cl73_cfg_gen2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r_CL73_ENABLEf_GET(r) ((((r).an_x4_cl73_cfg_gen2[0]) >> 8) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r_CL73_ENABLEf_SET(r,f) (r).an_x4_cl73_cfg_gen2[0]=(((r).an_x4_cl73_cfg_gen2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r_CL73_NONCE_MATCH_OVERf_GET(r) ((((r).an_x4_cl73_cfg_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r_CL73_NONCE_MATCH_OVERf_SET(r,f) (r).an_x4_cl73_cfg_gen2[0]=(((r).an_x4_cl73_cfg_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r_CL73_NONCE_MATCH_VALf_GET(r) ((((r).an_x4_cl73_cfg_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r_CL73_NONCE_MATCH_VALf_SET(r,f) (r).an_x4_cl73_cfg_gen2[0]=(((r).an_x4_cl73_cfg_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r_BAM_TO_HPAM_AD_ENf_GET(r) ((((r).an_x4_cl73_cfg_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r_BAM_TO_HPAM_AD_ENf_SET(r,f) (r).an_x4_cl73_cfg_gen2[0]=(((r).an_x4_cl73_cfg_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r_AD_TO_CL73_ENf_GET(r) ((((r).an_x4_cl73_cfg_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r_AD_TO_CL73_ENf_SET(r,f) (r).an_x4_cl73_cfg_gen2[0]=(((r).an_x4_cl73_cfg_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r_CL73_AN_RESTARTf_GET(r) (((r).an_x4_cl73_cfg_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r_CL73_AN_RESTARTf_SET(r,f) (r).an_x4_cl73_cfg_gen2[0]=(((r).an_x4_cl73_cfg_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AN_X4_CL73_CFG_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X4_CL73_CFG_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r,(_r._an_x4_cl73_cfg_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X4_CL73_CFG_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r,(_r._an_x4_cl73_cfg_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X4_CL73_CFG_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r,(_r._an_x4_cl73_cfg_gen2))
#define BCMI_TSCF_XGXS_READLN_AN_X4_CL73_CFG_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_cl73_cfg_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AN_X4_CL73_CFG_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_cl73_cfg_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AN_X4_CL73_CFG_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_cl73_cfg_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_CL73_CFG_GEN2r BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r
#define AN_X4_CL73_CFG_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r_t AN_X4_CL73_CFG_GEN2r_t;
#define AN_X4_CL73_CFG_GEN2r_CLR BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r_CLR
#define AN_X4_CL73_CFG_GEN2r_SET BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r_SET
#define AN_X4_CL73_CFG_GEN2r_GET BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r_GET
#define AN_X4_CL73_CFG_GEN2r_DISABLE_REMOTE_FAULTf_GET BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r_DISABLE_REMOTE_FAULTf_GET
#define AN_X4_CL73_CFG_GEN2r_DISABLE_REMOTE_FAULTf_SET BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r_DISABLE_REMOTE_FAULTf_SET
#define AN_X4_CL73_CFG_GEN2r_NUM_ADVERTISED_LANESf_GET BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r_NUM_ADVERTISED_LANESf_GET
#define AN_X4_CL73_CFG_GEN2r_NUM_ADVERTISED_LANESf_SET BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r_NUM_ADVERTISED_LANESf_SET
#define AN_X4_CL73_CFG_GEN2r_CL73_BAM_ENABLEf_GET BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r_CL73_BAM_ENABLEf_GET
#define AN_X4_CL73_CFG_GEN2r_CL73_BAM_ENABLEf_SET BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r_CL73_BAM_ENABLEf_SET
#define AN_X4_CL73_CFG_GEN2r_CL73_HPAM_ENABLEf_GET BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r_CL73_HPAM_ENABLEf_GET
#define AN_X4_CL73_CFG_GEN2r_CL73_HPAM_ENABLEf_SET BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r_CL73_HPAM_ENABLEf_SET
#define AN_X4_CL73_CFG_GEN2r_CL73_ENABLEf_GET BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r_CL73_ENABLEf_GET
#define AN_X4_CL73_CFG_GEN2r_CL73_ENABLEf_SET BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r_CL73_ENABLEf_SET
#define AN_X4_CL73_CFG_GEN2r_CL73_NONCE_MATCH_OVERf_GET BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r_CL73_NONCE_MATCH_OVERf_GET
#define AN_X4_CL73_CFG_GEN2r_CL73_NONCE_MATCH_OVERf_SET BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r_CL73_NONCE_MATCH_OVERf_SET
#define AN_X4_CL73_CFG_GEN2r_CL73_NONCE_MATCH_VALf_GET BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r_CL73_NONCE_MATCH_VALf_GET
#define AN_X4_CL73_CFG_GEN2r_CL73_NONCE_MATCH_VALf_SET BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r_CL73_NONCE_MATCH_VALf_SET
#define AN_X4_CL73_CFG_GEN2r_BAM_TO_HPAM_AD_ENf_GET BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r_BAM_TO_HPAM_AD_ENf_GET
#define AN_X4_CL73_CFG_GEN2r_BAM_TO_HPAM_AD_ENf_SET BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r_BAM_TO_HPAM_AD_ENf_SET
#define AN_X4_CL73_CFG_GEN2r_AD_TO_CL73_ENf_GET BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r_AD_TO_CL73_ENf_GET
#define AN_X4_CL73_CFG_GEN2r_AD_TO_CL73_ENf_SET BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r_AD_TO_CL73_ENf_SET
#define AN_X4_CL73_CFG_GEN2r_CL73_AN_RESTARTf_GET BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r_CL73_AN_RESTARTf_GET
#define AN_X4_CL73_CFG_GEN2r_CL73_AN_RESTARTf_SET BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r_CL73_AN_RESTARTf_SET
#define READ_AN_X4_CL73_CFG_GEN2r BCMI_TSCF_XGXS_READ_AN_X4_CL73_CFG_GEN2r
#define WRITE_AN_X4_CL73_CFG_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X4_CL73_CFG_GEN2r
#define MODIFY_AN_X4_CL73_CFG_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X4_CL73_CFG_GEN2r
#define READLN_AN_X4_CL73_CFG_GEN2r BCMI_TSCF_XGXS_READLN_AN_X4_CL73_CFG_GEN2r
#define WRITELN_AN_X4_CL73_CFG_GEN2r BCMI_TSCF_XGXS_WRITELN_AN_X4_CL73_CFG_GEN2r
#define WRITEALL_AN_X4_CL73_CFG_GEN2r BCMI_TSCF_XGXS_WRITEALL_AN_X4_CL73_CFG_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X4_CL73_CFG_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X4_LD_UP1_ABIL_0_GEN2
 * BLOCKS:   AN_X4_ABILITIES
 * REGADDR:  0xc1c1
 * DESC:     Local Device UP1 ABILITIES REG 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BAM_20G_KR2      UP1 Page Bit 16
 *     BAM_20G_CR2      UP1 Page Bit 17
 *     BAM_40G_KR2      UP1 Page Bit 22
 *     BAM_40G_CR2      UP1 Page Bit 23
 *     BAM_50G_KR2      UP1 Page Bit 24
 *     BAM_50G_CR2      UP1 Page Bit 25
 *     BAM_50G_KR4      UP1 Page Bit 32
 *     BAM_50G_CR4      UP1 Page Bit 33
 *     BAM_HG2          Hi Gig Mode
 */
#define BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r (0x0000c1c1 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_LD_UP1_ABIL_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x4_ld_up1_abil_0_gen2[1];
	uint32_t _an_x4_ld_up1_abil_0_gen2;
} BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r_CLR(r) (r).an_x4_ld_up1_abil_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r_SET(r,d) (r).an_x4_ld_up1_abil_0_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r_GET(r) (r).an_x4_ld_up1_abil_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_HG2f_GET(r) ((((r).an_x4_ld_up1_abil_0_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_HG2f_SET(r,f) (r).an_x4_ld_up1_abil_0_gen2[0]=(((r).an_x4_ld_up1_abil_0_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_50G_CR4f_GET(r) ((((r).an_x4_ld_up1_abil_0_gen2[0]) >> 9) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_50G_CR4f_SET(r,f) (r).an_x4_ld_up1_abil_0_gen2[0]=(((r).an_x4_ld_up1_abil_0_gen2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_50G_KR4f_GET(r) ((((r).an_x4_ld_up1_abil_0_gen2[0]) >> 8) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_50G_KR4f_SET(r,f) (r).an_x4_ld_up1_abil_0_gen2[0]=(((r).an_x4_ld_up1_abil_0_gen2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_50G_CR2f_GET(r) ((((r).an_x4_ld_up1_abil_0_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_50G_CR2f_SET(r,f) (r).an_x4_ld_up1_abil_0_gen2[0]=(((r).an_x4_ld_up1_abil_0_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_50G_KR2f_GET(r) ((((r).an_x4_ld_up1_abil_0_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_50G_KR2f_SET(r,f) (r).an_x4_ld_up1_abil_0_gen2[0]=(((r).an_x4_ld_up1_abil_0_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_40G_CR2f_GET(r) ((((r).an_x4_ld_up1_abil_0_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_40G_CR2f_SET(r,f) (r).an_x4_ld_up1_abil_0_gen2[0]=(((r).an_x4_ld_up1_abil_0_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_40G_KR2f_GET(r) ((((r).an_x4_ld_up1_abil_0_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_40G_KR2f_SET(r,f) (r).an_x4_ld_up1_abil_0_gen2[0]=(((r).an_x4_ld_up1_abil_0_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_20G_CR2f_GET(r) ((((r).an_x4_ld_up1_abil_0_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_20G_CR2f_SET(r,f) (r).an_x4_ld_up1_abil_0_gen2[0]=(((r).an_x4_ld_up1_abil_0_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_20G_KR2f_GET(r) (((r).an_x4_ld_up1_abil_0_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_20G_KR2f_SET(r,f) (r).an_x4_ld_up1_abil_0_gen2[0]=(((r).an_x4_ld_up1_abil_0_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AN_X4_LD_UP1_ABIL_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X4_LD_UP1_ABIL_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r,(_r._an_x4_ld_up1_abil_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X4_LD_UP1_ABIL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r,(_r._an_x4_ld_up1_abil_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X4_LD_UP1_ABIL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r,(_r._an_x4_ld_up1_abil_0_gen2))
#define BCMI_TSCF_XGXS_READLN_AN_X4_LD_UP1_ABIL_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_up1_abil_0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AN_X4_LD_UP1_ABIL_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_up1_abil_0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AN_X4_LD_UP1_ABIL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_ld_up1_abil_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_LD_UP1_ABIL_0_GEN2r BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r
#define AN_X4_LD_UP1_ABIL_0_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r_t AN_X4_LD_UP1_ABIL_0_GEN2r_t;
#define AN_X4_LD_UP1_ABIL_0_GEN2r_CLR BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r_CLR
#define AN_X4_LD_UP1_ABIL_0_GEN2r_SET BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r_SET
#define AN_X4_LD_UP1_ABIL_0_GEN2r_GET BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r_GET
#define AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_HG2f_GET BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_HG2f_GET
#define AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_HG2f_SET BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_HG2f_SET
#define AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_50G_CR4f_GET BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_50G_CR4f_GET
#define AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_50G_CR4f_SET BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_50G_CR4f_SET
#define AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_50G_KR4f_GET BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_50G_KR4f_GET
#define AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_50G_KR4f_SET BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_50G_KR4f_SET
#define AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_50G_CR2f_GET BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_50G_CR2f_GET
#define AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_50G_CR2f_SET BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_50G_CR2f_SET
#define AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_50G_KR2f_GET BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_50G_KR2f_GET
#define AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_50G_KR2f_SET BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_50G_KR2f_SET
#define AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_40G_CR2f_GET BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_40G_CR2f_GET
#define AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_40G_CR2f_SET BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_40G_CR2f_SET
#define AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_40G_KR2f_GET BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_40G_KR2f_GET
#define AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_40G_KR2f_SET BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_40G_KR2f_SET
#define AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_20G_CR2f_GET BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_20G_CR2f_GET
#define AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_20G_CR2f_SET BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_20G_CR2f_SET
#define AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_20G_KR2f_GET BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_20G_KR2f_GET
#define AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_20G_KR2f_SET BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r_BAM_20G_KR2f_SET
#define READ_AN_X4_LD_UP1_ABIL_0_GEN2r BCMI_TSCF_XGXS_READ_AN_X4_LD_UP1_ABIL_0_GEN2r
#define WRITE_AN_X4_LD_UP1_ABIL_0_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X4_LD_UP1_ABIL_0_GEN2r
#define MODIFY_AN_X4_LD_UP1_ABIL_0_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X4_LD_UP1_ABIL_0_GEN2r
#define READLN_AN_X4_LD_UP1_ABIL_0_GEN2r BCMI_TSCF_XGXS_READLN_AN_X4_LD_UP1_ABIL_0_GEN2r
#define WRITELN_AN_X4_LD_UP1_ABIL_0_GEN2r BCMI_TSCF_XGXS_WRITELN_AN_X4_LD_UP1_ABIL_0_GEN2r
#define WRITEALL_AN_X4_LD_UP1_ABIL_0_GEN2r BCMI_TSCF_XGXS_WRITEALL_AN_X4_LD_UP1_ABIL_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X4_LD_UP1_ABIL_1_GEN2
 * BLOCKS:   AN_X4_ABILITIES
 * REGADDR:  0xc1c2
 * DESC:     Local Device UP1 ABILITIES REG 1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BAM_20G_KR1      UP1 Page Bit 18
 *     BAM_20G_CR1      UP1 Page Bit 19
 *     BAM_25G_KR1      UP1 Page Bit 20
 *     BAM_25G_CR1      UP1 Page Bit 21
 *     CL91_REQ         UP1 Page Bit 43 and 40 for CL91 requested and enable for 25/50G upper bit is for request of CL91 and lower is to enable LD'c CL91
 *     CL74_REQ         UP1 Page Bit 44 and 41 for CL74 requested and enable for 25/50G upper bit is for request of CL74 and lower is to enable LD'c CL74
 */
#define BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_1_GEN2r (0x0000c1c2 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_LD_UP1_ABIL_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_1_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x4_ld_up1_abil_1_gen2[1];
	uint32_t _an_x4_ld_up1_abil_1_gen2;
} BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_1_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_1_GEN2r_CLR(r) (r).an_x4_ld_up1_abil_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_1_GEN2r_SET(r,d) (r).an_x4_ld_up1_abil_1_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_1_GEN2r_GET(r) (r).an_x4_ld_up1_abil_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_1_GEN2r_CL74_REQf_GET(r) ((((r).an_x4_ld_up1_abil_1_gen2[0]) >> 14) & 0x3)
#define BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_1_GEN2r_CL74_REQf_SET(r,f) (r).an_x4_ld_up1_abil_1_gen2[0]=(((r).an_x4_ld_up1_abil_1_gen2[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_1_GEN2r_CL91_REQf_GET(r) ((((r).an_x4_ld_up1_abil_1_gen2[0]) >> 12) & 0x3)
#define BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_1_GEN2r_CL91_REQf_SET(r,f) (r).an_x4_ld_up1_abil_1_gen2[0]=(((r).an_x4_ld_up1_abil_1_gen2[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12)) | (3 << (16 + 12))
#define BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_1_GEN2r_BAM_25G_CR1f_GET(r) ((((r).an_x4_ld_up1_abil_1_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_1_GEN2r_BAM_25G_CR1f_SET(r,f) (r).an_x4_ld_up1_abil_1_gen2[0]=(((r).an_x4_ld_up1_abil_1_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_1_GEN2r_BAM_25G_KR1f_GET(r) ((((r).an_x4_ld_up1_abil_1_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_1_GEN2r_BAM_25G_KR1f_SET(r,f) (r).an_x4_ld_up1_abil_1_gen2[0]=(((r).an_x4_ld_up1_abil_1_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_1_GEN2r_BAM_20G_CR1f_GET(r) ((((r).an_x4_ld_up1_abil_1_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_1_GEN2r_BAM_20G_CR1f_SET(r,f) (r).an_x4_ld_up1_abil_1_gen2[0]=(((r).an_x4_ld_up1_abil_1_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_1_GEN2r_BAM_20G_KR1f_GET(r) ((((r).an_x4_ld_up1_abil_1_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_1_GEN2r_BAM_20G_KR1f_SET(r,f) (r).an_x4_ld_up1_abil_1_gen2[0]=(((r).an_x4_ld_up1_abil_1_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))

/*
 * These macros can be used to access AN_X4_LD_UP1_ABIL_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X4_LD_UP1_ABIL_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_1_GEN2r,(_r._an_x4_ld_up1_abil_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X4_LD_UP1_ABIL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_1_GEN2r,(_r._an_x4_ld_up1_abil_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X4_LD_UP1_ABIL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_1_GEN2r,(_r._an_x4_ld_up1_abil_1_gen2))
#define BCMI_TSCF_XGXS_READLN_AN_X4_LD_UP1_ABIL_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_up1_abil_1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AN_X4_LD_UP1_ABIL_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_up1_abil_1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AN_X4_LD_UP1_ABIL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_ld_up1_abil_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_LD_UP1_ABIL_1_GEN2r BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_1_GEN2r
#define AN_X4_LD_UP1_ABIL_1_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_1_GEN2r_t AN_X4_LD_UP1_ABIL_1_GEN2r_t;
#define AN_X4_LD_UP1_ABIL_1_GEN2r_CLR BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_1_GEN2r_CLR
#define AN_X4_LD_UP1_ABIL_1_GEN2r_SET BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_1_GEN2r_SET
#define AN_X4_LD_UP1_ABIL_1_GEN2r_GET BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_1_GEN2r_GET
#define AN_X4_LD_UP1_ABIL_1_GEN2r_CL74_REQf_GET BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_1_GEN2r_CL74_REQf_GET
#define AN_X4_LD_UP1_ABIL_1_GEN2r_CL74_REQf_SET BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_1_GEN2r_CL74_REQf_SET
#define AN_X4_LD_UP1_ABIL_1_GEN2r_CL91_REQf_GET BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_1_GEN2r_CL91_REQf_GET
#define AN_X4_LD_UP1_ABIL_1_GEN2r_CL91_REQf_SET BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_1_GEN2r_CL91_REQf_SET
#define AN_X4_LD_UP1_ABIL_1_GEN2r_BAM_25G_CR1f_GET BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_1_GEN2r_BAM_25G_CR1f_GET
#define AN_X4_LD_UP1_ABIL_1_GEN2r_BAM_25G_CR1f_SET BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_1_GEN2r_BAM_25G_CR1f_SET
#define AN_X4_LD_UP1_ABIL_1_GEN2r_BAM_25G_KR1f_GET BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_1_GEN2r_BAM_25G_KR1f_GET
#define AN_X4_LD_UP1_ABIL_1_GEN2r_BAM_25G_KR1f_SET BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_1_GEN2r_BAM_25G_KR1f_SET
#define AN_X4_LD_UP1_ABIL_1_GEN2r_BAM_20G_CR1f_GET BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_1_GEN2r_BAM_20G_CR1f_GET
#define AN_X4_LD_UP1_ABIL_1_GEN2r_BAM_20G_CR1f_SET BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_1_GEN2r_BAM_20G_CR1f_SET
#define AN_X4_LD_UP1_ABIL_1_GEN2r_BAM_20G_KR1f_GET BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_1_GEN2r_BAM_20G_KR1f_GET
#define AN_X4_LD_UP1_ABIL_1_GEN2r_BAM_20G_KR1f_SET BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_1_GEN2r_BAM_20G_KR1f_SET
#define READ_AN_X4_LD_UP1_ABIL_1_GEN2r BCMI_TSCF_XGXS_READ_AN_X4_LD_UP1_ABIL_1_GEN2r
#define WRITE_AN_X4_LD_UP1_ABIL_1_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X4_LD_UP1_ABIL_1_GEN2r
#define MODIFY_AN_X4_LD_UP1_ABIL_1_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X4_LD_UP1_ABIL_1_GEN2r
#define READLN_AN_X4_LD_UP1_ABIL_1_GEN2r BCMI_TSCF_XGXS_READLN_AN_X4_LD_UP1_ABIL_1_GEN2r
#define WRITELN_AN_X4_LD_UP1_ABIL_1_GEN2r BCMI_TSCF_XGXS_WRITELN_AN_X4_LD_UP1_ABIL_1_GEN2r
#define WRITEALL_AN_X4_LD_UP1_ABIL_1_GEN2r BCMI_TSCF_XGXS_WRITEALL_AN_X4_LD_UP1_ABIL_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X4_LD_UP1_ABIL_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X4_LD_BASE_ABIL_0_GEN2
 * BLOCKS:   AN_X4_ABILITIES
 * REGADDR:  0xc1c3
 * DESC:     Local Device BASE ABILITIES REG 0
 * RESETVAL: 0x2a1 (673)
 * ACCESS:   R/W
 * FIELDS:
 *     CL73_BASE_SELECTOR IEEE Annex 28A Message SelectorSent in CL73 base page.
 *     TX_NONCE         First CL73 nonce to be transmitted.
 */
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_0_GEN2r (0x0000c1c3 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_LD_BASE_ABIL_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_0_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x4_ld_base_abil_0_gen2[1];
	uint32_t _an_x4_ld_base_abil_0_gen2;
} BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_0_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_0_GEN2r_CLR(r) (r).an_x4_ld_base_abil_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_0_GEN2r_SET(r,d) (r).an_x4_ld_base_abil_0_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_0_GEN2r_GET(r) (r).an_x4_ld_base_abil_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_0_GEN2r_TX_NONCEf_GET(r) ((((r).an_x4_ld_base_abil_0_gen2[0]) >> 5) & 0x1f)
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_0_GEN2r_TX_NONCEf_SET(r,f) (r).an_x4_ld_base_abil_0_gen2[0]=(((r).an_x4_ld_base_abil_0_gen2[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5)) | (31 << (16 + 5))
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_0_GEN2r_CL73_BASE_SELECTORf_GET(r) (((r).an_x4_ld_base_abil_0_gen2[0]) & 0x1f)
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_0_GEN2r_CL73_BASE_SELECTORf_SET(r,f) (r).an_x4_ld_base_abil_0_gen2[0]=(((r).an_x4_ld_base_abil_0_gen2[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access AN_X4_LD_BASE_ABIL_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X4_LD_BASE_ABIL_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_0_GEN2r,(_r._an_x4_ld_base_abil_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X4_LD_BASE_ABIL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_0_GEN2r,(_r._an_x4_ld_base_abil_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X4_LD_BASE_ABIL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_0_GEN2r,(_r._an_x4_ld_base_abil_0_gen2))
#define BCMI_TSCF_XGXS_READLN_AN_X4_LD_BASE_ABIL_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_base_abil_0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AN_X4_LD_BASE_ABIL_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_base_abil_0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AN_X4_LD_BASE_ABIL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_ld_base_abil_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_LD_BASE_ABIL_0_GEN2r BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_0_GEN2r
#define AN_X4_LD_BASE_ABIL_0_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_0_GEN2r_t AN_X4_LD_BASE_ABIL_0_GEN2r_t;
#define AN_X4_LD_BASE_ABIL_0_GEN2r_CLR BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_0_GEN2r_CLR
#define AN_X4_LD_BASE_ABIL_0_GEN2r_SET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_0_GEN2r_SET
#define AN_X4_LD_BASE_ABIL_0_GEN2r_GET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_0_GEN2r_GET
#define AN_X4_LD_BASE_ABIL_0_GEN2r_TX_NONCEf_GET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_0_GEN2r_TX_NONCEf_GET
#define AN_X4_LD_BASE_ABIL_0_GEN2r_TX_NONCEf_SET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_0_GEN2r_TX_NONCEf_SET
#define AN_X4_LD_BASE_ABIL_0_GEN2r_CL73_BASE_SELECTORf_GET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_0_GEN2r_CL73_BASE_SELECTORf_GET
#define AN_X4_LD_BASE_ABIL_0_GEN2r_CL73_BASE_SELECTORf_SET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_0_GEN2r_CL73_BASE_SELECTORf_SET
#define READ_AN_X4_LD_BASE_ABIL_0_GEN2r BCMI_TSCF_XGXS_READ_AN_X4_LD_BASE_ABIL_0_GEN2r
#define WRITE_AN_X4_LD_BASE_ABIL_0_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X4_LD_BASE_ABIL_0_GEN2r
#define MODIFY_AN_X4_LD_BASE_ABIL_0_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X4_LD_BASE_ABIL_0_GEN2r
#define READLN_AN_X4_LD_BASE_ABIL_0_GEN2r BCMI_TSCF_XGXS_READLN_AN_X4_LD_BASE_ABIL_0_GEN2r
#define WRITELN_AN_X4_LD_BASE_ABIL_0_GEN2r BCMI_TSCF_XGXS_WRITELN_AN_X4_LD_BASE_ABIL_0_GEN2r
#define WRITEALL_AN_X4_LD_BASE_ABIL_0_GEN2r BCMI_TSCF_XGXS_WRITEALL_AN_X4_LD_BASE_ABIL_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X4_LD_BASE_ABIL_1_GEN2
 * BLOCKS:   AN_X4_ABILITIES
 * REGADDR:  0xc1c4
 * DESC:     Local Device BASE ABILITIES REG 1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BASE_10G_KR1     Base Page Bit A2
 *     BASE_40G_KR4     Base page Bit A3
 *     BASE_40G_CR4     Base Page Bit A4
 *     BASE_100G_KR4    Base Page Bit A7
 *     BASE_100G_CR4    Base Page Bit A8
 *     BASE_1G_KX1      Base Page Bit A0
 *     CL73_PAUSE       Pause Ability[7:6]
 *     FEC_REQ          Forward Error CorrectionIf neither device requests FEC, then FEC is not done.
 *     NEXT_PAGE        Next Page ability bit.
 *     CL73_REMOTE_FAULT CL73 AN Advertisement Register (7.16.13) Remote Fault field.Specifies whether the Remote Fault field should be set in the CL73 base pages that are transmitted.0 = no fault1 = fault
 */
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r (0x0000c1c4 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_LD_BASE_ABIL_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x4_ld_base_abil_1_gen2[1];
	uint32_t _an_x4_ld_base_abil_1_gen2;
} BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r_CLR(r) (r).an_x4_ld_base_abil_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r_SET(r,d) (r).an_x4_ld_base_abil_1_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r_GET(r) (r).an_x4_ld_base_abil_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r_CL73_REMOTE_FAULTf_GET(r) ((((r).an_x4_ld_base_abil_1_gen2[0]) >> 11) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r_CL73_REMOTE_FAULTf_SET(r,f) (r).an_x4_ld_base_abil_1_gen2[0]=(((r).an_x4_ld_base_abil_1_gen2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r_NEXT_PAGEf_GET(r) ((((r).an_x4_ld_base_abil_1_gen2[0]) >> 10) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r_NEXT_PAGEf_SET(r,f) (r).an_x4_ld_base_abil_1_gen2[0]=(((r).an_x4_ld_base_abil_1_gen2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r_FEC_REQf_GET(r) ((((r).an_x4_ld_base_abil_1_gen2[0]) >> 8) & 0x3)
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r_FEC_REQf_SET(r,f) (r).an_x4_ld_base_abil_1_gen2[0]=(((r).an_x4_ld_base_abil_1_gen2[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r_CL73_PAUSEf_GET(r) ((((r).an_x4_ld_base_abil_1_gen2[0]) >> 6) & 0x3)
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r_CL73_PAUSEf_SET(r,f) (r).an_x4_ld_base_abil_1_gen2[0]=(((r).an_x4_ld_base_abil_1_gen2[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6)) | (3 << (16 + 6))
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r_BASE_1G_KX1f_GET(r) ((((r).an_x4_ld_base_abil_1_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r_BASE_1G_KX1f_SET(r,f) (r).an_x4_ld_base_abil_1_gen2[0]=(((r).an_x4_ld_base_abil_1_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r_BASE_100G_CR4f_GET(r) ((((r).an_x4_ld_base_abil_1_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r_BASE_100G_CR4f_SET(r,f) (r).an_x4_ld_base_abil_1_gen2[0]=(((r).an_x4_ld_base_abil_1_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r_BASE_100G_KR4f_GET(r) ((((r).an_x4_ld_base_abil_1_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r_BASE_100G_KR4f_SET(r,f) (r).an_x4_ld_base_abil_1_gen2[0]=(((r).an_x4_ld_base_abil_1_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r_BASE_40G_CR4f_GET(r) ((((r).an_x4_ld_base_abil_1_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r_BASE_40G_CR4f_SET(r,f) (r).an_x4_ld_base_abil_1_gen2[0]=(((r).an_x4_ld_base_abil_1_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r_BASE_40G_KR4f_GET(r) ((((r).an_x4_ld_base_abil_1_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r_BASE_40G_KR4f_SET(r,f) (r).an_x4_ld_base_abil_1_gen2[0]=(((r).an_x4_ld_base_abil_1_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r_BASE_10G_KR1f_GET(r) (((r).an_x4_ld_base_abil_1_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r_BASE_10G_KR1f_SET(r,f) (r).an_x4_ld_base_abil_1_gen2[0]=(((r).an_x4_ld_base_abil_1_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AN_X4_LD_BASE_ABIL_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X4_LD_BASE_ABIL_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r,(_r._an_x4_ld_base_abil_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X4_LD_BASE_ABIL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r,(_r._an_x4_ld_base_abil_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X4_LD_BASE_ABIL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r,(_r._an_x4_ld_base_abil_1_gen2))
#define BCMI_TSCF_XGXS_READLN_AN_X4_LD_BASE_ABIL_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_base_abil_1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AN_X4_LD_BASE_ABIL_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_base_abil_1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AN_X4_LD_BASE_ABIL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_ld_base_abil_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_LD_BASE_ABIL_1_GEN2r BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r
#define AN_X4_LD_BASE_ABIL_1_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r_t AN_X4_LD_BASE_ABIL_1_GEN2r_t;
#define AN_X4_LD_BASE_ABIL_1_GEN2r_CLR BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r_CLR
#define AN_X4_LD_BASE_ABIL_1_GEN2r_SET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r_SET
#define AN_X4_LD_BASE_ABIL_1_GEN2r_GET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r_GET
#define AN_X4_LD_BASE_ABIL_1_GEN2r_CL73_REMOTE_FAULTf_GET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r_CL73_REMOTE_FAULTf_GET
#define AN_X4_LD_BASE_ABIL_1_GEN2r_CL73_REMOTE_FAULTf_SET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r_CL73_REMOTE_FAULTf_SET
#define AN_X4_LD_BASE_ABIL_1_GEN2r_NEXT_PAGEf_GET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r_NEXT_PAGEf_GET
#define AN_X4_LD_BASE_ABIL_1_GEN2r_NEXT_PAGEf_SET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r_NEXT_PAGEf_SET
#define AN_X4_LD_BASE_ABIL_1_GEN2r_FEC_REQf_GET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r_FEC_REQf_GET
#define AN_X4_LD_BASE_ABIL_1_GEN2r_FEC_REQf_SET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r_FEC_REQf_SET
#define AN_X4_LD_BASE_ABIL_1_GEN2r_CL73_PAUSEf_GET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r_CL73_PAUSEf_GET
#define AN_X4_LD_BASE_ABIL_1_GEN2r_CL73_PAUSEf_SET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r_CL73_PAUSEf_SET
#define AN_X4_LD_BASE_ABIL_1_GEN2r_BASE_1G_KX1f_GET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r_BASE_1G_KX1f_GET
#define AN_X4_LD_BASE_ABIL_1_GEN2r_BASE_1G_KX1f_SET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r_BASE_1G_KX1f_SET
#define AN_X4_LD_BASE_ABIL_1_GEN2r_BASE_100G_CR4f_GET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r_BASE_100G_CR4f_GET
#define AN_X4_LD_BASE_ABIL_1_GEN2r_BASE_100G_CR4f_SET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r_BASE_100G_CR4f_SET
#define AN_X4_LD_BASE_ABIL_1_GEN2r_BASE_100G_KR4f_GET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r_BASE_100G_KR4f_GET
#define AN_X4_LD_BASE_ABIL_1_GEN2r_BASE_100G_KR4f_SET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r_BASE_100G_KR4f_SET
#define AN_X4_LD_BASE_ABIL_1_GEN2r_BASE_40G_CR4f_GET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r_BASE_40G_CR4f_GET
#define AN_X4_LD_BASE_ABIL_1_GEN2r_BASE_40G_CR4f_SET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r_BASE_40G_CR4f_SET
#define AN_X4_LD_BASE_ABIL_1_GEN2r_BASE_40G_KR4f_GET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r_BASE_40G_KR4f_GET
#define AN_X4_LD_BASE_ABIL_1_GEN2r_BASE_40G_KR4f_SET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r_BASE_40G_KR4f_SET
#define AN_X4_LD_BASE_ABIL_1_GEN2r_BASE_10G_KR1f_GET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r_BASE_10G_KR1f_GET
#define AN_X4_LD_BASE_ABIL_1_GEN2r_BASE_10G_KR1f_SET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r_BASE_10G_KR1f_SET
#define READ_AN_X4_LD_BASE_ABIL_1_GEN2r BCMI_TSCF_XGXS_READ_AN_X4_LD_BASE_ABIL_1_GEN2r
#define WRITE_AN_X4_LD_BASE_ABIL_1_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X4_LD_BASE_ABIL_1_GEN2r
#define MODIFY_AN_X4_LD_BASE_ABIL_1_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X4_LD_BASE_ABIL_1_GEN2r
#define READLN_AN_X4_LD_BASE_ABIL_1_GEN2r BCMI_TSCF_XGXS_READLN_AN_X4_LD_BASE_ABIL_1_GEN2r
#define WRITELN_AN_X4_LD_BASE_ABIL_1_GEN2r BCMI_TSCF_XGXS_WRITELN_AN_X4_LD_BASE_ABIL_1_GEN2r
#define WRITEALL_AN_X4_LD_BASE_ABIL_1_GEN2r BCMI_TSCF_XGXS_WRITEALL_AN_X4_LD_BASE_ABIL_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X4_LD_BAM_ABIL_GEN2
 * BLOCKS:   AN_X4_ABILITIES
 * REGADDR:  0xc1c5
 * DESC:     Local Device BAM ABILITIES
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL73_BAM_CODE    BAM code
 */
#define BCMI_TSCF_XGXS_AN_X4_LD_BAM_ABIL_GEN2r (0x0000c1c5 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X4_LD_BAM_ABIL_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_LD_BAM_ABIL_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X4_LD_BAM_ABIL_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x4_ld_bam_abil_gen2[1];
	uint32_t _an_x4_ld_bam_abil_gen2;
} BCMI_TSCF_XGXS_AN_X4_LD_BAM_ABIL_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X4_LD_BAM_ABIL_GEN2r_CLR(r) (r).an_x4_ld_bam_abil_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X4_LD_BAM_ABIL_GEN2r_SET(r,d) (r).an_x4_ld_bam_abil_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X4_LD_BAM_ABIL_GEN2r_GET(r) (r).an_x4_ld_bam_abil_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X4_LD_BAM_ABIL_GEN2r_CL73_BAM_CODEf_GET(r) (((r).an_x4_ld_bam_abil_gen2[0]) & 0x1ff)
#define BCMI_TSCF_XGXS_AN_X4_LD_BAM_ABIL_GEN2r_CL73_BAM_CODEf_SET(r,f) (r).an_x4_ld_bam_abil_gen2[0]=(((r).an_x4_ld_bam_abil_gen2[0] & ~((uint32_t)0x1ff)) | (((uint32_t)f) & 0x1ff)) | (0x1ff << 16)

/*
 * These macros can be used to access AN_X4_LD_BAM_ABIL_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X4_LD_BAM_ABIL_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_LD_BAM_ABIL_GEN2r,(_r._an_x4_ld_bam_abil_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X4_LD_BAM_ABIL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LD_BAM_ABIL_GEN2r,(_r._an_x4_ld_bam_abil_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X4_LD_BAM_ABIL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LD_BAM_ABIL_GEN2r,(_r._an_x4_ld_bam_abil_gen2))
#define BCMI_TSCF_XGXS_READLN_AN_X4_LD_BAM_ABIL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_LD_BAM_ABIL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_bam_abil_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AN_X4_LD_BAM_ABIL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LD_BAM_ABIL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_bam_abil_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AN_X4_LD_BAM_ABIL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LD_BAM_ABIL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_ld_bam_abil_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_LD_BAM_ABIL_GEN2r BCMI_TSCF_XGXS_AN_X4_LD_BAM_ABIL_GEN2r
#define AN_X4_LD_BAM_ABIL_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X4_LD_BAM_ABIL_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X4_LD_BAM_ABIL_GEN2r_t AN_X4_LD_BAM_ABIL_GEN2r_t;
#define AN_X4_LD_BAM_ABIL_GEN2r_CLR BCMI_TSCF_XGXS_AN_X4_LD_BAM_ABIL_GEN2r_CLR
#define AN_X4_LD_BAM_ABIL_GEN2r_SET BCMI_TSCF_XGXS_AN_X4_LD_BAM_ABIL_GEN2r_SET
#define AN_X4_LD_BAM_ABIL_GEN2r_GET BCMI_TSCF_XGXS_AN_X4_LD_BAM_ABIL_GEN2r_GET
#define AN_X4_LD_BAM_ABIL_GEN2r_CL73_BAM_CODEf_GET BCMI_TSCF_XGXS_AN_X4_LD_BAM_ABIL_GEN2r_CL73_BAM_CODEf_GET
#define AN_X4_LD_BAM_ABIL_GEN2r_CL73_BAM_CODEf_SET BCMI_TSCF_XGXS_AN_X4_LD_BAM_ABIL_GEN2r_CL73_BAM_CODEf_SET
#define READ_AN_X4_LD_BAM_ABIL_GEN2r BCMI_TSCF_XGXS_READ_AN_X4_LD_BAM_ABIL_GEN2r
#define WRITE_AN_X4_LD_BAM_ABIL_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X4_LD_BAM_ABIL_GEN2r
#define MODIFY_AN_X4_LD_BAM_ABIL_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X4_LD_BAM_ABIL_GEN2r
#define READLN_AN_X4_LD_BAM_ABIL_GEN2r BCMI_TSCF_XGXS_READLN_AN_X4_LD_BAM_ABIL_GEN2r
#define WRITELN_AN_X4_LD_BAM_ABIL_GEN2r BCMI_TSCF_XGXS_WRITELN_AN_X4_LD_BAM_ABIL_GEN2r
#define WRITEALL_AN_X4_LD_BAM_ABIL_GEN2r BCMI_TSCF_XGXS_WRITEALL_AN_X4_LD_BAM_ABIL_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X4_LD_BAM_ABIL_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X4_CL73_CTLS_GEN2
 * BLOCKS:   AN_X4_ABILITIES
 * REGADDR:  0xc1c6
 * DESC:     CL73 AN MISC CONTROLS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     PD_KX_EN         Enable 1G KX Parallel Detect.
 *     AN_GOOD_TRAP     Trap the TLA_SEQUENCER in its AN_GOOD state.
 *     AN_GOOD_CHECK_TRAP Trap the TLA_SEQUENCER in its AN_GOOD_CHECK state.
 *     LINKFAILTIMER_DIS Ignore link_fail_inhibit timer.
 *     LINKFAILTIMERQUAL_EN Wait for long enough to link_fail_inhibit_timer to expire.
 *     AN_FAIL_COUNT_LIMIT Number of times AN may retry after AN failureIt indicates the max value of an_fail_count register
 *     AN_OUI_OVERRIDE_HPAM_DET bit 3: require programmable OUI to detect CL73 HP mode
 *     AN_OUI_OVERRIDE_HPAM_ADV bit 2: advertise programmable OUI for CL73 HP mode
 *     AN_OUI_OVERRIDE_BAM73_DET bit 1: require programmable OUI to detect CL73 BAM
 *     AN_OUI_OVERRIDE_BAM73_ADV bit 0: advertise programmable OUI in CL73 BAM
 */
#define BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r (0x0000c1c6 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_CL73_CTLS_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x4_cl73_ctls_gen2[1];
	uint32_t _an_x4_cl73_ctls_gen2;
} BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r_CLR(r) (r).an_x4_cl73_ctls_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r_SET(r,d) (r).an_x4_cl73_ctls_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r_GET(r) (r).an_x4_cl73_ctls_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r_AN_OUI_OVERRIDE_BAM73_ADVf_GET(r) ((((r).an_x4_cl73_ctls_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r_AN_OUI_OVERRIDE_BAM73_ADVf_SET(r,f) (r).an_x4_cl73_ctls_gen2[0]=(((r).an_x4_cl73_ctls_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r_AN_OUI_OVERRIDE_BAM73_DETf_GET(r) ((((r).an_x4_cl73_ctls_gen2[0]) >> 14) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r_AN_OUI_OVERRIDE_BAM73_DETf_SET(r,f) (r).an_x4_cl73_ctls_gen2[0]=(((r).an_x4_cl73_ctls_gen2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r_AN_OUI_OVERRIDE_HPAM_ADVf_GET(r) ((((r).an_x4_cl73_ctls_gen2[0]) >> 13) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r_AN_OUI_OVERRIDE_HPAM_ADVf_SET(r,f) (r).an_x4_cl73_ctls_gen2[0]=(((r).an_x4_cl73_ctls_gen2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r_AN_OUI_OVERRIDE_HPAM_DETf_GET(r) ((((r).an_x4_cl73_ctls_gen2[0]) >> 12) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r_AN_OUI_OVERRIDE_HPAM_DETf_SET(r,f) (r).an_x4_cl73_ctls_gen2[0]=(((r).an_x4_cl73_ctls_gen2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r_AN_FAIL_COUNT_LIMITf_GET(r) ((((r).an_x4_cl73_ctls_gen2[0]) >> 6) & 0xf)
#define BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r_AN_FAIL_COUNT_LIMITf_SET(r,f) (r).an_x4_cl73_ctls_gen2[0]=(((r).an_x4_cl73_ctls_gen2[0] & ~((uint32_t)0xf << 6)) | ((((uint32_t)f) & 0xf) << 6)) | (15 << (16 + 6))
#define BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r_LINKFAILTIMERQUAL_ENf_GET(r) ((((r).an_x4_cl73_ctls_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r_LINKFAILTIMERQUAL_ENf_SET(r,f) (r).an_x4_cl73_ctls_gen2[0]=(((r).an_x4_cl73_ctls_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r_LINKFAILTIMER_DISf_GET(r) ((((r).an_x4_cl73_ctls_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r_LINKFAILTIMER_DISf_SET(r,f) (r).an_x4_cl73_ctls_gen2[0]=(((r).an_x4_cl73_ctls_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r_AN_GOOD_CHECK_TRAPf_GET(r) ((((r).an_x4_cl73_ctls_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r_AN_GOOD_CHECK_TRAPf_SET(r,f) (r).an_x4_cl73_ctls_gen2[0]=(((r).an_x4_cl73_ctls_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r_AN_GOOD_TRAPf_GET(r) ((((r).an_x4_cl73_ctls_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r_AN_GOOD_TRAPf_SET(r,f) (r).an_x4_cl73_ctls_gen2[0]=(((r).an_x4_cl73_ctls_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r_PD_KX_ENf_GET(r) ((((r).an_x4_cl73_ctls_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r_PD_KX_ENf_SET(r,f) (r).an_x4_cl73_ctls_gen2[0]=(((r).an_x4_cl73_ctls_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))

/*
 * These macros can be used to access AN_X4_CL73_CTLS_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X4_CL73_CTLS_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r,(_r._an_x4_cl73_ctls_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X4_CL73_CTLS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r,(_r._an_x4_cl73_ctls_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X4_CL73_CTLS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r,(_r._an_x4_cl73_ctls_gen2))
#define BCMI_TSCF_XGXS_READLN_AN_X4_CL73_CTLS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_cl73_ctls_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AN_X4_CL73_CTLS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_cl73_ctls_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AN_X4_CL73_CTLS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_cl73_ctls_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_CL73_CTLS_GEN2r BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r
#define AN_X4_CL73_CTLS_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r_t AN_X4_CL73_CTLS_GEN2r_t;
#define AN_X4_CL73_CTLS_GEN2r_CLR BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r_CLR
#define AN_X4_CL73_CTLS_GEN2r_SET BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r_SET
#define AN_X4_CL73_CTLS_GEN2r_GET BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r_GET
#define AN_X4_CL73_CTLS_GEN2r_AN_OUI_OVERRIDE_BAM73_ADVf_GET BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r_AN_OUI_OVERRIDE_BAM73_ADVf_GET
#define AN_X4_CL73_CTLS_GEN2r_AN_OUI_OVERRIDE_BAM73_ADVf_SET BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r_AN_OUI_OVERRIDE_BAM73_ADVf_SET
#define AN_X4_CL73_CTLS_GEN2r_AN_OUI_OVERRIDE_BAM73_DETf_GET BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r_AN_OUI_OVERRIDE_BAM73_DETf_GET
#define AN_X4_CL73_CTLS_GEN2r_AN_OUI_OVERRIDE_BAM73_DETf_SET BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r_AN_OUI_OVERRIDE_BAM73_DETf_SET
#define AN_X4_CL73_CTLS_GEN2r_AN_OUI_OVERRIDE_HPAM_ADVf_GET BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r_AN_OUI_OVERRIDE_HPAM_ADVf_GET
#define AN_X4_CL73_CTLS_GEN2r_AN_OUI_OVERRIDE_HPAM_ADVf_SET BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r_AN_OUI_OVERRIDE_HPAM_ADVf_SET
#define AN_X4_CL73_CTLS_GEN2r_AN_OUI_OVERRIDE_HPAM_DETf_GET BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r_AN_OUI_OVERRIDE_HPAM_DETf_GET
#define AN_X4_CL73_CTLS_GEN2r_AN_OUI_OVERRIDE_HPAM_DETf_SET BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r_AN_OUI_OVERRIDE_HPAM_DETf_SET
#define AN_X4_CL73_CTLS_GEN2r_AN_FAIL_COUNT_LIMITf_GET BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r_AN_FAIL_COUNT_LIMITf_GET
#define AN_X4_CL73_CTLS_GEN2r_AN_FAIL_COUNT_LIMITf_SET BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r_AN_FAIL_COUNT_LIMITf_SET
#define AN_X4_CL73_CTLS_GEN2r_LINKFAILTIMERQUAL_ENf_GET BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r_LINKFAILTIMERQUAL_ENf_GET
#define AN_X4_CL73_CTLS_GEN2r_LINKFAILTIMERQUAL_ENf_SET BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r_LINKFAILTIMERQUAL_ENf_SET
#define AN_X4_CL73_CTLS_GEN2r_LINKFAILTIMER_DISf_GET BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r_LINKFAILTIMER_DISf_GET
#define AN_X4_CL73_CTLS_GEN2r_LINKFAILTIMER_DISf_SET BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r_LINKFAILTIMER_DISf_SET
#define AN_X4_CL73_CTLS_GEN2r_AN_GOOD_CHECK_TRAPf_GET BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r_AN_GOOD_CHECK_TRAPf_GET
#define AN_X4_CL73_CTLS_GEN2r_AN_GOOD_CHECK_TRAPf_SET BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r_AN_GOOD_CHECK_TRAPf_SET
#define AN_X4_CL73_CTLS_GEN2r_AN_GOOD_TRAPf_GET BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r_AN_GOOD_TRAPf_GET
#define AN_X4_CL73_CTLS_GEN2r_AN_GOOD_TRAPf_SET BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r_AN_GOOD_TRAPf_SET
#define AN_X4_CL73_CTLS_GEN2r_PD_KX_ENf_GET BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r_PD_KX_ENf_GET
#define AN_X4_CL73_CTLS_GEN2r_PD_KX_ENf_SET BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r_PD_KX_ENf_SET
#define READ_AN_X4_CL73_CTLS_GEN2r BCMI_TSCF_XGXS_READ_AN_X4_CL73_CTLS_GEN2r
#define WRITE_AN_X4_CL73_CTLS_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X4_CL73_CTLS_GEN2r
#define MODIFY_AN_X4_CL73_CTLS_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X4_CL73_CTLS_GEN2r
#define READLN_AN_X4_CL73_CTLS_GEN2r BCMI_TSCF_XGXS_READLN_AN_X4_CL73_CTLS_GEN2r
#define WRITELN_AN_X4_CL73_CTLS_GEN2r BCMI_TSCF_XGXS_WRITELN_AN_X4_CL73_CTLS_GEN2r
#define WRITEALL_AN_X4_CL73_CTLS_GEN2r BCMI_TSCF_XGXS_WRITEALL_AN_X4_CL73_CTLS_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X4_CL73_CTLS_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X4_LD_BASE_ABIL_2_GEN2
 * BLOCKS:   AN_X4_ABILITIES
 * REGADDR:  0xc1c7
 * DESC:     Local Device BASE ABILITIES REG 2
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BASE_50G_CR2_EN  Enable Base page 50G CR2 bit position
 *     BASE_50G_CR2_SEL Base page 50G CR2 bit position
 *     BASE_50G_KR2_EN  Enable Base page 50G KR2 bit position
 *     BASE_50G_KR2_SEL Base page 50G KR2 bit position
 */
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_2_GEN2r (0x0000c1c7 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_LD_BASE_ABIL_2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_2_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x4_ld_base_abil_2_gen2[1];
	uint32_t _an_x4_ld_base_abil_2_gen2;
} BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_2_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_2_GEN2r_CLR(r) (r).an_x4_ld_base_abil_2_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_2_GEN2r_SET(r,d) (r).an_x4_ld_base_abil_2_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_2_GEN2r_GET(r) (r).an_x4_ld_base_abil_2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_2_GEN2r_BASE_50G_KR2_SELf_GET(r) ((((r).an_x4_ld_base_abil_2_gen2[0]) >> 7) & 0x1f)
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_2_GEN2r_BASE_50G_KR2_SELf_SET(r,f) (r).an_x4_ld_base_abil_2_gen2[0]=(((r).an_x4_ld_base_abil_2_gen2[0] & ~((uint32_t)0x1f << 7)) | ((((uint32_t)f) & 0x1f) << 7)) | (31 << (16 + 7))
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_2_GEN2r_BASE_50G_KR2_ENf_GET(r) ((((r).an_x4_ld_base_abil_2_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_2_GEN2r_BASE_50G_KR2_ENf_SET(r,f) (r).an_x4_ld_base_abil_2_gen2[0]=(((r).an_x4_ld_base_abil_2_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_2_GEN2r_BASE_50G_CR2_SELf_GET(r) ((((r).an_x4_ld_base_abil_2_gen2[0]) >> 1) & 0x1f)
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_2_GEN2r_BASE_50G_CR2_SELf_SET(r,f) (r).an_x4_ld_base_abil_2_gen2[0]=(((r).an_x4_ld_base_abil_2_gen2[0] & ~((uint32_t)0x1f << 1)) | ((((uint32_t)f) & 0x1f) << 1)) | (31 << (16 + 1))
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_2_GEN2r_BASE_50G_CR2_ENf_GET(r) (((r).an_x4_ld_base_abil_2_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_2_GEN2r_BASE_50G_CR2_ENf_SET(r,f) (r).an_x4_ld_base_abil_2_gen2[0]=(((r).an_x4_ld_base_abil_2_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AN_X4_LD_BASE_ABIL_2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X4_LD_BASE_ABIL_2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_2_GEN2r,(_r._an_x4_ld_base_abil_2_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X4_LD_BASE_ABIL_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_2_GEN2r,(_r._an_x4_ld_base_abil_2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X4_LD_BASE_ABIL_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_2_GEN2r,(_r._an_x4_ld_base_abil_2_gen2))
#define BCMI_TSCF_XGXS_READLN_AN_X4_LD_BASE_ABIL_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_base_abil_2_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AN_X4_LD_BASE_ABIL_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_base_abil_2_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AN_X4_LD_BASE_ABIL_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_ld_base_abil_2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_LD_BASE_ABIL_2_GEN2r BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_2_GEN2r
#define AN_X4_LD_BASE_ABIL_2_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_2_GEN2r_t AN_X4_LD_BASE_ABIL_2_GEN2r_t;
#define AN_X4_LD_BASE_ABIL_2_GEN2r_CLR BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_2_GEN2r_CLR
#define AN_X4_LD_BASE_ABIL_2_GEN2r_SET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_2_GEN2r_SET
#define AN_X4_LD_BASE_ABIL_2_GEN2r_GET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_2_GEN2r_GET
#define AN_X4_LD_BASE_ABIL_2_GEN2r_BASE_50G_KR2_SELf_GET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_2_GEN2r_BASE_50G_KR2_SELf_GET
#define AN_X4_LD_BASE_ABIL_2_GEN2r_BASE_50G_KR2_SELf_SET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_2_GEN2r_BASE_50G_KR2_SELf_SET
#define AN_X4_LD_BASE_ABIL_2_GEN2r_BASE_50G_KR2_ENf_GET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_2_GEN2r_BASE_50G_KR2_ENf_GET
#define AN_X4_LD_BASE_ABIL_2_GEN2r_BASE_50G_KR2_ENf_SET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_2_GEN2r_BASE_50G_KR2_ENf_SET
#define AN_X4_LD_BASE_ABIL_2_GEN2r_BASE_50G_CR2_SELf_GET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_2_GEN2r_BASE_50G_CR2_SELf_GET
#define AN_X4_LD_BASE_ABIL_2_GEN2r_BASE_50G_CR2_SELf_SET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_2_GEN2r_BASE_50G_CR2_SELf_SET
#define AN_X4_LD_BASE_ABIL_2_GEN2r_BASE_50G_CR2_ENf_GET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_2_GEN2r_BASE_50G_CR2_ENf_GET
#define AN_X4_LD_BASE_ABIL_2_GEN2r_BASE_50G_CR2_ENf_SET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_2_GEN2r_BASE_50G_CR2_ENf_SET
#define READ_AN_X4_LD_BASE_ABIL_2_GEN2r BCMI_TSCF_XGXS_READ_AN_X4_LD_BASE_ABIL_2_GEN2r
#define WRITE_AN_X4_LD_BASE_ABIL_2_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X4_LD_BASE_ABIL_2_GEN2r
#define MODIFY_AN_X4_LD_BASE_ABIL_2_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X4_LD_BASE_ABIL_2_GEN2r
#define READLN_AN_X4_LD_BASE_ABIL_2_GEN2r BCMI_TSCF_XGXS_READLN_AN_X4_LD_BASE_ABIL_2_GEN2r
#define WRITELN_AN_X4_LD_BASE_ABIL_2_GEN2r BCMI_TSCF_XGXS_WRITELN_AN_X4_LD_BASE_ABIL_2_GEN2r
#define WRITEALL_AN_X4_LD_BASE_ABIL_2_GEN2r BCMI_TSCF_XGXS_WRITEALL_AN_X4_LD_BASE_ABIL_2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X4_LD_BASE_ABIL_3_GEN2
 * BLOCKS:   AN_X4_ABILITIES
 * REGADDR:  0xc1c8
 * DESC:     Local Device BASE ABILITIES REG 3
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BASE_25G_CR1_EN  Enable Base page 25G CR1 bit position
 *     BASE_25G_CR1_SEL Base page 25G CR1 bit position
 *     BASE_25G_KR1_EN  Enable Base page 25G KR1 bit position
 *     BASE_25G_KR1_SEL Base page 25G KR1 bit position
 */
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_3_GEN2r (0x0000c1c8 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_3_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_LD_BASE_ABIL_3_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_3_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x4_ld_base_abil_3_gen2[1];
	uint32_t _an_x4_ld_base_abil_3_gen2;
} BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_3_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_3_GEN2r_CLR(r) (r).an_x4_ld_base_abil_3_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_3_GEN2r_SET(r,d) (r).an_x4_ld_base_abil_3_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_3_GEN2r_GET(r) (r).an_x4_ld_base_abil_3_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_3_GEN2r_BASE_25G_KR1_SELf_GET(r) ((((r).an_x4_ld_base_abil_3_gen2[0]) >> 7) & 0x1f)
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_3_GEN2r_BASE_25G_KR1_SELf_SET(r,f) (r).an_x4_ld_base_abil_3_gen2[0]=(((r).an_x4_ld_base_abil_3_gen2[0] & ~((uint32_t)0x1f << 7)) | ((((uint32_t)f) & 0x1f) << 7)) | (31 << (16 + 7))
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_3_GEN2r_BASE_25G_KR1_ENf_GET(r) ((((r).an_x4_ld_base_abil_3_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_3_GEN2r_BASE_25G_KR1_ENf_SET(r,f) (r).an_x4_ld_base_abil_3_gen2[0]=(((r).an_x4_ld_base_abil_3_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_3_GEN2r_BASE_25G_CR1_SELf_GET(r) ((((r).an_x4_ld_base_abil_3_gen2[0]) >> 1) & 0x1f)
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_3_GEN2r_BASE_25G_CR1_SELf_SET(r,f) (r).an_x4_ld_base_abil_3_gen2[0]=(((r).an_x4_ld_base_abil_3_gen2[0] & ~((uint32_t)0x1f << 1)) | ((((uint32_t)f) & 0x1f) << 1)) | (31 << (16 + 1))
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_3_GEN2r_BASE_25G_CR1_ENf_GET(r) (((r).an_x4_ld_base_abil_3_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_3_GEN2r_BASE_25G_CR1_ENf_SET(r,f) (r).an_x4_ld_base_abil_3_gen2[0]=(((r).an_x4_ld_base_abil_3_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AN_X4_LD_BASE_ABIL_3_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X4_LD_BASE_ABIL_3_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_3_GEN2r,(_r._an_x4_ld_base_abil_3_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X4_LD_BASE_ABIL_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_3_GEN2r,(_r._an_x4_ld_base_abil_3_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X4_LD_BASE_ABIL_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_3_GEN2r,(_r._an_x4_ld_base_abil_3_gen2))
#define BCMI_TSCF_XGXS_READLN_AN_X4_LD_BASE_ABIL_3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_base_abil_3_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AN_X4_LD_BASE_ABIL_3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_base_abil_3_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AN_X4_LD_BASE_ABIL_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_ld_base_abil_3_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_LD_BASE_ABIL_3_GEN2r BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_3_GEN2r
#define AN_X4_LD_BASE_ABIL_3_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_3_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_3_GEN2r_t AN_X4_LD_BASE_ABIL_3_GEN2r_t;
#define AN_X4_LD_BASE_ABIL_3_GEN2r_CLR BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_3_GEN2r_CLR
#define AN_X4_LD_BASE_ABIL_3_GEN2r_SET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_3_GEN2r_SET
#define AN_X4_LD_BASE_ABIL_3_GEN2r_GET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_3_GEN2r_GET
#define AN_X4_LD_BASE_ABIL_3_GEN2r_BASE_25G_KR1_SELf_GET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_3_GEN2r_BASE_25G_KR1_SELf_GET
#define AN_X4_LD_BASE_ABIL_3_GEN2r_BASE_25G_KR1_SELf_SET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_3_GEN2r_BASE_25G_KR1_SELf_SET
#define AN_X4_LD_BASE_ABIL_3_GEN2r_BASE_25G_KR1_ENf_GET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_3_GEN2r_BASE_25G_KR1_ENf_GET
#define AN_X4_LD_BASE_ABIL_3_GEN2r_BASE_25G_KR1_ENf_SET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_3_GEN2r_BASE_25G_KR1_ENf_SET
#define AN_X4_LD_BASE_ABIL_3_GEN2r_BASE_25G_CR1_SELf_GET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_3_GEN2r_BASE_25G_CR1_SELf_GET
#define AN_X4_LD_BASE_ABIL_3_GEN2r_BASE_25G_CR1_SELf_SET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_3_GEN2r_BASE_25G_CR1_SELf_SET
#define AN_X4_LD_BASE_ABIL_3_GEN2r_BASE_25G_CR1_ENf_GET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_3_GEN2r_BASE_25G_CR1_ENf_GET
#define AN_X4_LD_BASE_ABIL_3_GEN2r_BASE_25G_CR1_ENf_SET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_3_GEN2r_BASE_25G_CR1_ENf_SET
#define READ_AN_X4_LD_BASE_ABIL_3_GEN2r BCMI_TSCF_XGXS_READ_AN_X4_LD_BASE_ABIL_3_GEN2r
#define WRITE_AN_X4_LD_BASE_ABIL_3_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X4_LD_BASE_ABIL_3_GEN2r
#define MODIFY_AN_X4_LD_BASE_ABIL_3_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X4_LD_BASE_ABIL_3_GEN2r
#define READLN_AN_X4_LD_BASE_ABIL_3_GEN2r BCMI_TSCF_XGXS_READLN_AN_X4_LD_BASE_ABIL_3_GEN2r
#define WRITELN_AN_X4_LD_BASE_ABIL_3_GEN2r BCMI_TSCF_XGXS_WRITELN_AN_X4_LD_BASE_ABIL_3_GEN2r
#define WRITEALL_AN_X4_LD_BASE_ABIL_3_GEN2r BCMI_TSCF_XGXS_WRITEALL_AN_X4_LD_BASE_ABIL_3_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_3_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X4_LD_BASE_ABIL_4_GEN2
 * BLOCKS:   AN_X4_ABILITIES
 * REGADDR:  0xc1c9
 * DESC:     Local Device BASE ABILITIES REG 4
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     BASE_25G_CRS1_EN Enable Base page 25G CR1 bit position
 *     BASE_25G_CRS1_SEL Base page 25G CR1 bit position
 *     BASE_25G_KRS1_EN Enable Base page 25G KR1 bit position
 *     BASE_25G_KRS1_SEL Base page 25G KR1 bit position
 */
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_4_GEN2r (0x0000c1c9 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_4_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_LD_BASE_ABIL_4_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_4_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x4_ld_base_abil_4_gen2[1];
	uint32_t _an_x4_ld_base_abil_4_gen2;
} BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_4_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_4_GEN2r_CLR(r) (r).an_x4_ld_base_abil_4_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_4_GEN2r_SET(r,d) (r).an_x4_ld_base_abil_4_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_4_GEN2r_GET(r) (r).an_x4_ld_base_abil_4_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_4_GEN2r_BASE_25G_KRS1_SELf_GET(r) ((((r).an_x4_ld_base_abil_4_gen2[0]) >> 7) & 0x1f)
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_4_GEN2r_BASE_25G_KRS1_SELf_SET(r,f) (r).an_x4_ld_base_abil_4_gen2[0]=(((r).an_x4_ld_base_abil_4_gen2[0] & ~((uint32_t)0x1f << 7)) | ((((uint32_t)f) & 0x1f) << 7)) | (31 << (16 + 7))
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_4_GEN2r_BASE_25G_KRS1_ENf_GET(r) ((((r).an_x4_ld_base_abil_4_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_4_GEN2r_BASE_25G_KRS1_ENf_SET(r,f) (r).an_x4_ld_base_abil_4_gen2[0]=(((r).an_x4_ld_base_abil_4_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_4_GEN2r_BASE_25G_CRS1_SELf_GET(r) ((((r).an_x4_ld_base_abil_4_gen2[0]) >> 1) & 0x1f)
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_4_GEN2r_BASE_25G_CRS1_SELf_SET(r,f) (r).an_x4_ld_base_abil_4_gen2[0]=(((r).an_x4_ld_base_abil_4_gen2[0] & ~((uint32_t)0x1f << 1)) | ((((uint32_t)f) & 0x1f) << 1)) | (31 << (16 + 1))
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_4_GEN2r_BASE_25G_CRS1_ENf_GET(r) (((r).an_x4_ld_base_abil_4_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_4_GEN2r_BASE_25G_CRS1_ENf_SET(r,f) (r).an_x4_ld_base_abil_4_gen2[0]=(((r).an_x4_ld_base_abil_4_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AN_X4_LD_BASE_ABIL_4_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X4_LD_BASE_ABIL_4_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_4_GEN2r,(_r._an_x4_ld_base_abil_4_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X4_LD_BASE_ABIL_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_4_GEN2r,(_r._an_x4_ld_base_abil_4_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X4_LD_BASE_ABIL_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_4_GEN2r,(_r._an_x4_ld_base_abil_4_gen2))
#define BCMI_TSCF_XGXS_READLN_AN_X4_LD_BASE_ABIL_4_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_base_abil_4_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AN_X4_LD_BASE_ABIL_4_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_base_abil_4_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AN_X4_LD_BASE_ABIL_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_ld_base_abil_4_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_LD_BASE_ABIL_4_GEN2r BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_4_GEN2r
#define AN_X4_LD_BASE_ABIL_4_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_4_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_4_GEN2r_t AN_X4_LD_BASE_ABIL_4_GEN2r_t;
#define AN_X4_LD_BASE_ABIL_4_GEN2r_CLR BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_4_GEN2r_CLR
#define AN_X4_LD_BASE_ABIL_4_GEN2r_SET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_4_GEN2r_SET
#define AN_X4_LD_BASE_ABIL_4_GEN2r_GET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_4_GEN2r_GET
#define AN_X4_LD_BASE_ABIL_4_GEN2r_BASE_25G_KRS1_SELf_GET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_4_GEN2r_BASE_25G_KRS1_SELf_GET
#define AN_X4_LD_BASE_ABIL_4_GEN2r_BASE_25G_KRS1_SELf_SET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_4_GEN2r_BASE_25G_KRS1_SELf_SET
#define AN_X4_LD_BASE_ABIL_4_GEN2r_BASE_25G_KRS1_ENf_GET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_4_GEN2r_BASE_25G_KRS1_ENf_GET
#define AN_X4_LD_BASE_ABIL_4_GEN2r_BASE_25G_KRS1_ENf_SET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_4_GEN2r_BASE_25G_KRS1_ENf_SET
#define AN_X4_LD_BASE_ABIL_4_GEN2r_BASE_25G_CRS1_SELf_GET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_4_GEN2r_BASE_25G_CRS1_SELf_GET
#define AN_X4_LD_BASE_ABIL_4_GEN2r_BASE_25G_CRS1_SELf_SET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_4_GEN2r_BASE_25G_CRS1_SELf_SET
#define AN_X4_LD_BASE_ABIL_4_GEN2r_BASE_25G_CRS1_ENf_GET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_4_GEN2r_BASE_25G_CRS1_ENf_GET
#define AN_X4_LD_BASE_ABIL_4_GEN2r_BASE_25G_CRS1_ENf_SET BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_4_GEN2r_BASE_25G_CRS1_ENf_SET
#define READ_AN_X4_LD_BASE_ABIL_4_GEN2r BCMI_TSCF_XGXS_READ_AN_X4_LD_BASE_ABIL_4_GEN2r
#define WRITE_AN_X4_LD_BASE_ABIL_4_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X4_LD_BASE_ABIL_4_GEN2r
#define MODIFY_AN_X4_LD_BASE_ABIL_4_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X4_LD_BASE_ABIL_4_GEN2r
#define READLN_AN_X4_LD_BASE_ABIL_4_GEN2r BCMI_TSCF_XGXS_READLN_AN_X4_LD_BASE_ABIL_4_GEN2r
#define WRITELN_AN_X4_LD_BASE_ABIL_4_GEN2r BCMI_TSCF_XGXS_WRITELN_AN_X4_LD_BASE_ABIL_4_GEN2r
#define WRITEALL_AN_X4_LD_BASE_ABIL_4_GEN2r BCMI_TSCF_XGXS_WRITEALL_AN_X4_LD_BASE_ABIL_4_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X4_LD_BASE_ABIL_4_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2
 * BLOCKS:   AN_X4_ABILITIES
 * REGADDR:  0xc1ca
 * DESC:     Local Device BASE_RS FEC REQ Register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RS_FEC_REQ_EN    Enable Advertisement of RS FEC Request (CL91) for 25G C(K)R(S). 0: Disable, 1: Enable
 *     RS_FEC_REQ_SEL   Advertised position bit in BASE PAGE for RS FEC REQ.AN will keep looking for RS_FEC request from LPif this field is Non-Zero. To stop AN to even look, SW MUSTset this field to 0.
 *     BASE_R_FEC_REQ_EN Enable Advertisement of BASE FEC Request (CL74) for 25G C(K)R(S). 0: Disable, 1: Enable
 *     BASE_R_FEC_REQ_SEL Advertised position bit in BASE PAGE for BASE R FEC REQ.AN will keep looking for BASE_R_FEC request from LPif this field is Non-Zero. To stop AN to even look, SW MUSTset this field to 0.
 */
#define BCMI_TSCF_XGXS_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r (0x0000c1ca | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x4_ld_fec_basepage_abil_gen2[1];
	uint32_t _an_x4_ld_fec_basepage_abil_gen2;
} BCMI_TSCF_XGXS_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r_CLR(r) (r).an_x4_ld_fec_basepage_abil_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r_SET(r,d) (r).an_x4_ld_fec_basepage_abil_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r_GET(r) (r).an_x4_ld_fec_basepage_abil_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r_BASE_R_FEC_REQ_SELf_GET(r) ((((r).an_x4_ld_fec_basepage_abil_gen2[0]) >> 7) & 0x1f)
#define BCMI_TSCF_XGXS_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r_BASE_R_FEC_REQ_SELf_SET(r,f) (r).an_x4_ld_fec_basepage_abil_gen2[0]=(((r).an_x4_ld_fec_basepage_abil_gen2[0] & ~((uint32_t)0x1f << 7)) | ((((uint32_t)f) & 0x1f) << 7)) | (31 << (16 + 7))
#define BCMI_TSCF_XGXS_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r_BASE_R_FEC_REQ_ENf_GET(r) ((((r).an_x4_ld_fec_basepage_abil_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r_BASE_R_FEC_REQ_ENf_SET(r,f) (r).an_x4_ld_fec_basepage_abil_gen2[0]=(((r).an_x4_ld_fec_basepage_abil_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r_RS_FEC_REQ_SELf_GET(r) ((((r).an_x4_ld_fec_basepage_abil_gen2[0]) >> 1) & 0x1f)
#define BCMI_TSCF_XGXS_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r_RS_FEC_REQ_SELf_SET(r,f) (r).an_x4_ld_fec_basepage_abil_gen2[0]=(((r).an_x4_ld_fec_basepage_abil_gen2[0] & ~((uint32_t)0x1f << 1)) | ((((uint32_t)f) & 0x1f) << 1)) | (31 << (16 + 1))
#define BCMI_TSCF_XGXS_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r_RS_FEC_REQ_ENf_GET(r) (((r).an_x4_ld_fec_basepage_abil_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r_RS_FEC_REQ_ENf_SET(r,f) (r).an_x4_ld_fec_basepage_abil_gen2[0]=(((r).an_x4_ld_fec_basepage_abil_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r,(_r._an_x4_ld_fec_basepage_abil_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r,(_r._an_x4_ld_fec_basepage_abil_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r,(_r._an_x4_ld_fec_basepage_abil_gen2))
#define BCMI_TSCF_XGXS_READLN_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_fec_basepage_abil_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_fec_basepage_abil_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_ld_fec_basepage_abil_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r BCMI_TSCF_XGXS_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r
#define AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r_t AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r_t;
#define AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r_CLR BCMI_TSCF_XGXS_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r_CLR
#define AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r_SET BCMI_TSCF_XGXS_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r_SET
#define AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r_GET BCMI_TSCF_XGXS_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r_GET
#define AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r_BASE_R_FEC_REQ_SELf_GET BCMI_TSCF_XGXS_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r_BASE_R_FEC_REQ_SELf_GET
#define AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r_BASE_R_FEC_REQ_SELf_SET BCMI_TSCF_XGXS_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r_BASE_R_FEC_REQ_SELf_SET
#define AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r_BASE_R_FEC_REQ_ENf_GET BCMI_TSCF_XGXS_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r_BASE_R_FEC_REQ_ENf_GET
#define AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r_BASE_R_FEC_REQ_ENf_SET BCMI_TSCF_XGXS_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r_BASE_R_FEC_REQ_ENf_SET
#define AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r_RS_FEC_REQ_SELf_GET BCMI_TSCF_XGXS_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r_RS_FEC_REQ_SELf_GET
#define AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r_RS_FEC_REQ_SELf_SET BCMI_TSCF_XGXS_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r_RS_FEC_REQ_SELf_SET
#define AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r_RS_FEC_REQ_ENf_GET BCMI_TSCF_XGXS_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r_RS_FEC_REQ_ENf_GET
#define AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r_RS_FEC_REQ_ENf_SET BCMI_TSCF_XGXS_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r_RS_FEC_REQ_ENf_SET
#define READ_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r BCMI_TSCF_XGXS_READ_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r
#define WRITE_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r
#define MODIFY_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r
#define READLN_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r BCMI_TSCF_XGXS_READLN_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r
#define WRITELN_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r BCMI_TSCF_XGXS_WRITELN_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r
#define WRITEALL_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r BCMI_TSCF_XGXS_WRITEALL_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X4_LD_FEC_BASEPAGE_ABIL_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X4_SW_AN_BASE_PAGE_0_GEN2
 * BLOCKS:   AN_X4_ABILITIES
 * REGADDR:  0xc1cb
 * DESC:     SW AN Base Page 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     SW_AN_BP_0       LOCAL DEVICE PAGE 2 FIELD
 */
#define BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_0_GEN2r (0x0000c1cb | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_SW_AN_BASE_PAGE_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_0_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x4_sw_an_base_page_0_gen2[1];
	uint32_t _an_x4_sw_an_base_page_0_gen2;
} BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_0_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_0_GEN2r_CLR(r) (r).an_x4_sw_an_base_page_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_0_GEN2r_SET(r,d) (r).an_x4_sw_an_base_page_0_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_0_GEN2r_GET(r) (r).an_x4_sw_an_base_page_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_0_GEN2r_SW_AN_BP_0f_GET(r) (((r).an_x4_sw_an_base_page_0_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_0_GEN2r_SW_AN_BP_0f_SET(r,f) (r).an_x4_sw_an_base_page_0_gen2[0]=(((r).an_x4_sw_an_base_page_0_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AN_X4_SW_AN_BASE_PAGE_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X4_SW_AN_BASE_PAGE_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_0_GEN2r,(_r._an_x4_sw_an_base_page_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X4_SW_AN_BASE_PAGE_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_0_GEN2r,(_r._an_x4_sw_an_base_page_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X4_SW_AN_BASE_PAGE_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_0_GEN2r,(_r._an_x4_sw_an_base_page_0_gen2))
#define BCMI_TSCF_XGXS_READLN_AN_X4_SW_AN_BASE_PAGE_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_sw_an_base_page_0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AN_X4_SW_AN_BASE_PAGE_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_sw_an_base_page_0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AN_X4_SW_AN_BASE_PAGE_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_sw_an_base_page_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_SW_AN_BASE_PAGE_0_GEN2r BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_0_GEN2r
#define AN_X4_SW_AN_BASE_PAGE_0_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_0_GEN2r_t AN_X4_SW_AN_BASE_PAGE_0_GEN2r_t;
#define AN_X4_SW_AN_BASE_PAGE_0_GEN2r_CLR BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_0_GEN2r_CLR
#define AN_X4_SW_AN_BASE_PAGE_0_GEN2r_SET BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_0_GEN2r_SET
#define AN_X4_SW_AN_BASE_PAGE_0_GEN2r_GET BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_0_GEN2r_GET
#define AN_X4_SW_AN_BASE_PAGE_0_GEN2r_SW_AN_BP_0f_GET BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_0_GEN2r_SW_AN_BP_0f_GET
#define AN_X4_SW_AN_BASE_PAGE_0_GEN2r_SW_AN_BP_0f_SET BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_0_GEN2r_SW_AN_BP_0f_SET
#define READ_AN_X4_SW_AN_BASE_PAGE_0_GEN2r BCMI_TSCF_XGXS_READ_AN_X4_SW_AN_BASE_PAGE_0_GEN2r
#define WRITE_AN_X4_SW_AN_BASE_PAGE_0_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X4_SW_AN_BASE_PAGE_0_GEN2r
#define MODIFY_AN_X4_SW_AN_BASE_PAGE_0_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X4_SW_AN_BASE_PAGE_0_GEN2r
#define READLN_AN_X4_SW_AN_BASE_PAGE_0_GEN2r BCMI_TSCF_XGXS_READLN_AN_X4_SW_AN_BASE_PAGE_0_GEN2r
#define WRITELN_AN_X4_SW_AN_BASE_PAGE_0_GEN2r BCMI_TSCF_XGXS_WRITELN_AN_X4_SW_AN_BASE_PAGE_0_GEN2r
#define WRITEALL_AN_X4_SW_AN_BASE_PAGE_0_GEN2r BCMI_TSCF_XGXS_WRITEALL_AN_X4_SW_AN_BASE_PAGE_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X4_SW_AN_BASE_PAGE_1_GEN2
 * BLOCKS:   AN_X4_ABILITIES
 * REGADDR:  0xc1cc
 * DESC:     SW AN Base Page 1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     SW_AN_BP_1       LOCAL DEVICE PAGE 1 FIELD
 */
#define BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_1_GEN2r (0x0000c1cc | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_SW_AN_BASE_PAGE_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_1_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x4_sw_an_base_page_1_gen2[1];
	uint32_t _an_x4_sw_an_base_page_1_gen2;
} BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_1_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_1_GEN2r_CLR(r) (r).an_x4_sw_an_base_page_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_1_GEN2r_SET(r,d) (r).an_x4_sw_an_base_page_1_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_1_GEN2r_GET(r) (r).an_x4_sw_an_base_page_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_1_GEN2r_SW_AN_BP_1f_GET(r) (((r).an_x4_sw_an_base_page_1_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_1_GEN2r_SW_AN_BP_1f_SET(r,f) (r).an_x4_sw_an_base_page_1_gen2[0]=(((r).an_x4_sw_an_base_page_1_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AN_X4_SW_AN_BASE_PAGE_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X4_SW_AN_BASE_PAGE_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_1_GEN2r,(_r._an_x4_sw_an_base_page_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X4_SW_AN_BASE_PAGE_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_1_GEN2r,(_r._an_x4_sw_an_base_page_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X4_SW_AN_BASE_PAGE_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_1_GEN2r,(_r._an_x4_sw_an_base_page_1_gen2))
#define BCMI_TSCF_XGXS_READLN_AN_X4_SW_AN_BASE_PAGE_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_sw_an_base_page_1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AN_X4_SW_AN_BASE_PAGE_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_sw_an_base_page_1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AN_X4_SW_AN_BASE_PAGE_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_sw_an_base_page_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_SW_AN_BASE_PAGE_1_GEN2r BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_1_GEN2r
#define AN_X4_SW_AN_BASE_PAGE_1_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_1_GEN2r_t AN_X4_SW_AN_BASE_PAGE_1_GEN2r_t;
#define AN_X4_SW_AN_BASE_PAGE_1_GEN2r_CLR BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_1_GEN2r_CLR
#define AN_X4_SW_AN_BASE_PAGE_1_GEN2r_SET BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_1_GEN2r_SET
#define AN_X4_SW_AN_BASE_PAGE_1_GEN2r_GET BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_1_GEN2r_GET
#define AN_X4_SW_AN_BASE_PAGE_1_GEN2r_SW_AN_BP_1f_GET BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_1_GEN2r_SW_AN_BP_1f_GET
#define AN_X4_SW_AN_BASE_PAGE_1_GEN2r_SW_AN_BP_1f_SET BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_1_GEN2r_SW_AN_BP_1f_SET
#define READ_AN_X4_SW_AN_BASE_PAGE_1_GEN2r BCMI_TSCF_XGXS_READ_AN_X4_SW_AN_BASE_PAGE_1_GEN2r
#define WRITE_AN_X4_SW_AN_BASE_PAGE_1_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X4_SW_AN_BASE_PAGE_1_GEN2r
#define MODIFY_AN_X4_SW_AN_BASE_PAGE_1_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X4_SW_AN_BASE_PAGE_1_GEN2r
#define READLN_AN_X4_SW_AN_BASE_PAGE_1_GEN2r BCMI_TSCF_XGXS_READLN_AN_X4_SW_AN_BASE_PAGE_1_GEN2r
#define WRITELN_AN_X4_SW_AN_BASE_PAGE_1_GEN2r BCMI_TSCF_XGXS_WRITELN_AN_X4_SW_AN_BASE_PAGE_1_GEN2r
#define WRITEALL_AN_X4_SW_AN_BASE_PAGE_1_GEN2r BCMI_TSCF_XGXS_WRITEALL_AN_X4_SW_AN_BASE_PAGE_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X4_SW_AN_BASE_PAGE_2_GEN2
 * BLOCKS:   AN_X4_ABILITIES
 * REGADDR:  0xc1cd
 * DESC:     SW AN Base Page 2
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     SW_AN_BP_2       LOCAL DEVICE PAGE 0 FIELD
 */
#define BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_2_GEN2r (0x0000c1cd | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_SW_AN_BASE_PAGE_2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_2_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x4_sw_an_base_page_2_gen2[1];
	uint32_t _an_x4_sw_an_base_page_2_gen2;
} BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_2_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_2_GEN2r_CLR(r) (r).an_x4_sw_an_base_page_2_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_2_GEN2r_SET(r,d) (r).an_x4_sw_an_base_page_2_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_2_GEN2r_GET(r) (r).an_x4_sw_an_base_page_2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_2_GEN2r_SW_AN_BP_2f_GET(r) (((r).an_x4_sw_an_base_page_2_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_2_GEN2r_SW_AN_BP_2f_SET(r,f) (r).an_x4_sw_an_base_page_2_gen2[0]=(((r).an_x4_sw_an_base_page_2_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AN_X4_SW_AN_BASE_PAGE_2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X4_SW_AN_BASE_PAGE_2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_2_GEN2r,(_r._an_x4_sw_an_base_page_2_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X4_SW_AN_BASE_PAGE_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_2_GEN2r,(_r._an_x4_sw_an_base_page_2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X4_SW_AN_BASE_PAGE_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_2_GEN2r,(_r._an_x4_sw_an_base_page_2_gen2))
#define BCMI_TSCF_XGXS_READLN_AN_X4_SW_AN_BASE_PAGE_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_sw_an_base_page_2_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AN_X4_SW_AN_BASE_PAGE_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_sw_an_base_page_2_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AN_X4_SW_AN_BASE_PAGE_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_sw_an_base_page_2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_SW_AN_BASE_PAGE_2_GEN2r BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_2_GEN2r
#define AN_X4_SW_AN_BASE_PAGE_2_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_2_GEN2r_t AN_X4_SW_AN_BASE_PAGE_2_GEN2r_t;
#define AN_X4_SW_AN_BASE_PAGE_2_GEN2r_CLR BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_2_GEN2r_CLR
#define AN_X4_SW_AN_BASE_PAGE_2_GEN2r_SET BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_2_GEN2r_SET
#define AN_X4_SW_AN_BASE_PAGE_2_GEN2r_GET BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_2_GEN2r_GET
#define AN_X4_SW_AN_BASE_PAGE_2_GEN2r_SW_AN_BP_2f_GET BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_2_GEN2r_SW_AN_BP_2f_GET
#define AN_X4_SW_AN_BASE_PAGE_2_GEN2r_SW_AN_BP_2f_SET BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_2_GEN2r_SW_AN_BP_2f_SET
#define READ_AN_X4_SW_AN_BASE_PAGE_2_GEN2r BCMI_TSCF_XGXS_READ_AN_X4_SW_AN_BASE_PAGE_2_GEN2r
#define WRITE_AN_X4_SW_AN_BASE_PAGE_2_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X4_SW_AN_BASE_PAGE_2_GEN2r
#define MODIFY_AN_X4_SW_AN_BASE_PAGE_2_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X4_SW_AN_BASE_PAGE_2_GEN2r
#define READLN_AN_X4_SW_AN_BASE_PAGE_2_GEN2r BCMI_TSCF_XGXS_READLN_AN_X4_SW_AN_BASE_PAGE_2_GEN2r
#define WRITELN_AN_X4_SW_AN_BASE_PAGE_2_GEN2r BCMI_TSCF_XGXS_WRITELN_AN_X4_SW_AN_BASE_PAGE_2_GEN2r
#define WRITEALL_AN_X4_SW_AN_BASE_PAGE_2_GEN2r BCMI_TSCF_XGXS_WRITEALL_AN_X4_SW_AN_BASE_PAGE_2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X4_SW_AN_BASE_PAGE_2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X4_R_CL73_STS_GEN2
 * BLOCKS:   AN_X4_STATUS
 * REGADDR:  0xc1d0
 * DESC:     R_CL73 Status 
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     DME_STATE        DME Receive State.
 *     DME_PAGE         Valid DME page received.
 *     DME_MV_PAIR      DME Delimiter detected.
 *     CLK_TRANS_MISS   Missing DME clock transition detected.
 *     PAGE_TOO_LONG    Too long DME page detected.
 *     PAGE_TOO_SHORT   Too short DME page detected.
 *     PULSE_TOO_LONG   Too long DME pulse detected.
 *     PULSE_TOO_MODERATE Too moderate DME pulse detected.
 *     PULSE_TOO_SHORT  Too short DME pulse detected.
 *     DME_LOCKED       Locked on DME signal.
 *     CL73_FIFO_FULL   CL73 Fifo Full.
 */
#define BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r (0x0000c1d0 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_R_CL73_STS_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x4_r_cl73_sts_gen2[1];
	uint32_t _an_x4_r_cl73_sts_gen2;
} BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_CLR(r) (r).an_x4_r_cl73_sts_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_SET(r,d) (r).an_x4_r_cl73_sts_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_GET(r) (r).an_x4_r_cl73_sts_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_CL73_FIFO_FULLf_GET(r) ((((r).an_x4_r_cl73_sts_gen2[0]) >> 11) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_CL73_FIFO_FULLf_SET(r,f) (r).an_x4_r_cl73_sts_gen2[0]=(((r).an_x4_r_cl73_sts_gen2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_DME_LOCKEDf_GET(r) ((((r).an_x4_r_cl73_sts_gen2[0]) >> 10) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_DME_LOCKEDf_SET(r,f) (r).an_x4_r_cl73_sts_gen2[0]=(((r).an_x4_r_cl73_sts_gen2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_PULSE_TOO_SHORTf_GET(r) ((((r).an_x4_r_cl73_sts_gen2[0]) >> 9) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_PULSE_TOO_SHORTf_SET(r,f) (r).an_x4_r_cl73_sts_gen2[0]=(((r).an_x4_r_cl73_sts_gen2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_PULSE_TOO_MODERATEf_GET(r) ((((r).an_x4_r_cl73_sts_gen2[0]) >> 8) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_PULSE_TOO_MODERATEf_SET(r,f) (r).an_x4_r_cl73_sts_gen2[0]=(((r).an_x4_r_cl73_sts_gen2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_PULSE_TOO_LONGf_GET(r) ((((r).an_x4_r_cl73_sts_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_PULSE_TOO_LONGf_SET(r,f) (r).an_x4_r_cl73_sts_gen2[0]=(((r).an_x4_r_cl73_sts_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_PAGE_TOO_SHORTf_GET(r) ((((r).an_x4_r_cl73_sts_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_PAGE_TOO_SHORTf_SET(r,f) (r).an_x4_r_cl73_sts_gen2[0]=(((r).an_x4_r_cl73_sts_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_PAGE_TOO_LONGf_GET(r) ((((r).an_x4_r_cl73_sts_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_PAGE_TOO_LONGf_SET(r,f) (r).an_x4_r_cl73_sts_gen2[0]=(((r).an_x4_r_cl73_sts_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_CLK_TRANS_MISSf_GET(r) ((((r).an_x4_r_cl73_sts_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_CLK_TRANS_MISSf_SET(r,f) (r).an_x4_r_cl73_sts_gen2[0]=(((r).an_x4_r_cl73_sts_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_DME_MV_PAIRf_GET(r) ((((r).an_x4_r_cl73_sts_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_DME_MV_PAIRf_SET(r,f) (r).an_x4_r_cl73_sts_gen2[0]=(((r).an_x4_r_cl73_sts_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_DME_PAGEf_GET(r) ((((r).an_x4_r_cl73_sts_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_DME_PAGEf_SET(r,f) (r).an_x4_r_cl73_sts_gen2[0]=(((r).an_x4_r_cl73_sts_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_DME_STATEf_GET(r) (((r).an_x4_r_cl73_sts_gen2[0]) & 0x3)
#define BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_DME_STATEf_SET(r,f) (r).an_x4_r_cl73_sts_gen2[0]=(((r).an_x4_r_cl73_sts_gen2[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access AN_X4_R_CL73_STS_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X4_R_CL73_STS_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r,(_r._an_x4_r_cl73_sts_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X4_R_CL73_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r,(_r._an_x4_r_cl73_sts_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X4_R_CL73_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r,(_r._an_x4_r_cl73_sts_gen2))
#define BCMI_TSCF_XGXS_READLN_AN_X4_R_CL73_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_r_cl73_sts_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AN_X4_R_CL73_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_r_cl73_sts_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AN_X4_R_CL73_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_r_cl73_sts_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_R_CL73_STS_GEN2r BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r
#define AN_X4_R_CL73_STS_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_t AN_X4_R_CL73_STS_GEN2r_t;
#define AN_X4_R_CL73_STS_GEN2r_CLR BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_CLR
#define AN_X4_R_CL73_STS_GEN2r_SET BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_SET
#define AN_X4_R_CL73_STS_GEN2r_GET BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_GET
#define AN_X4_R_CL73_STS_GEN2r_CL73_FIFO_FULLf_GET BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_CL73_FIFO_FULLf_GET
#define AN_X4_R_CL73_STS_GEN2r_CL73_FIFO_FULLf_SET BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_CL73_FIFO_FULLf_SET
#define AN_X4_R_CL73_STS_GEN2r_DME_LOCKEDf_GET BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_DME_LOCKEDf_GET
#define AN_X4_R_CL73_STS_GEN2r_DME_LOCKEDf_SET BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_DME_LOCKEDf_SET
#define AN_X4_R_CL73_STS_GEN2r_PULSE_TOO_SHORTf_GET BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_PULSE_TOO_SHORTf_GET
#define AN_X4_R_CL73_STS_GEN2r_PULSE_TOO_SHORTf_SET BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_PULSE_TOO_SHORTf_SET
#define AN_X4_R_CL73_STS_GEN2r_PULSE_TOO_MODERATEf_GET BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_PULSE_TOO_MODERATEf_GET
#define AN_X4_R_CL73_STS_GEN2r_PULSE_TOO_MODERATEf_SET BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_PULSE_TOO_MODERATEf_SET
#define AN_X4_R_CL73_STS_GEN2r_PULSE_TOO_LONGf_GET BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_PULSE_TOO_LONGf_GET
#define AN_X4_R_CL73_STS_GEN2r_PULSE_TOO_LONGf_SET BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_PULSE_TOO_LONGf_SET
#define AN_X4_R_CL73_STS_GEN2r_PAGE_TOO_SHORTf_GET BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_PAGE_TOO_SHORTf_GET
#define AN_X4_R_CL73_STS_GEN2r_PAGE_TOO_SHORTf_SET BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_PAGE_TOO_SHORTf_SET
#define AN_X4_R_CL73_STS_GEN2r_PAGE_TOO_LONGf_GET BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_PAGE_TOO_LONGf_GET
#define AN_X4_R_CL73_STS_GEN2r_PAGE_TOO_LONGf_SET BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_PAGE_TOO_LONGf_SET
#define AN_X4_R_CL73_STS_GEN2r_CLK_TRANS_MISSf_GET BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_CLK_TRANS_MISSf_GET
#define AN_X4_R_CL73_STS_GEN2r_CLK_TRANS_MISSf_SET BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_CLK_TRANS_MISSf_SET
#define AN_X4_R_CL73_STS_GEN2r_DME_MV_PAIRf_GET BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_DME_MV_PAIRf_GET
#define AN_X4_R_CL73_STS_GEN2r_DME_MV_PAIRf_SET BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_DME_MV_PAIRf_SET
#define AN_X4_R_CL73_STS_GEN2r_DME_PAGEf_GET BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_DME_PAGEf_GET
#define AN_X4_R_CL73_STS_GEN2r_DME_PAGEf_SET BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_DME_PAGEf_SET
#define AN_X4_R_CL73_STS_GEN2r_DME_STATEf_GET BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_DME_STATEf_GET
#define AN_X4_R_CL73_STS_GEN2r_DME_STATEf_SET BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r_DME_STATEf_SET
#define READ_AN_X4_R_CL73_STS_GEN2r BCMI_TSCF_XGXS_READ_AN_X4_R_CL73_STS_GEN2r
#define WRITE_AN_X4_R_CL73_STS_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X4_R_CL73_STS_GEN2r
#define MODIFY_AN_X4_R_CL73_STS_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X4_R_CL73_STS_GEN2r
#define READLN_AN_X4_R_CL73_STS_GEN2r BCMI_TSCF_XGXS_READLN_AN_X4_R_CL73_STS_GEN2r
#define WRITELN_AN_X4_R_CL73_STS_GEN2r BCMI_TSCF_XGXS_WRITELN_AN_X4_R_CL73_STS_GEN2r
#define WRITEALL_AN_X4_R_CL73_STS_GEN2r BCMI_TSCF_XGXS_WRITEALL_AN_X4_R_CL73_STS_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X4_R_CL73_STS_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X4_PXNG_STS_GEN2
 * BLOCKS:   AN_X4_STATUS
 * REGADDR:  0xc1d1
 * DESC:     CL73_PXNG Status 
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CONSISTENCY_MISMATCH PXNG mismatch detected.
 *     COMPLETE_ACK     PXNG COMPLETE_ACKNOWLEDGE state.
 *     ACK_DETECT       PXNG ACKNOWLEDGE_DETECT state.
 *     ABILITY_DETECT   PXNG ABILITY_DETECT state.
 *     AN_ENABLE        PXNG AN_ENABLE state.
 *     ERROR_STATE      PXNG ERROR state.
 *     TRANSMIT_DISABLE PXNG TRANSMIT_DISABLE state
 *     NEXT_PAGE_WAIT   PXNG NEXT_PAGE_WAIT state.
 *     AN_GOOD_CHECK    PXNG AN_GOOD_CHECK state.
 */
#define BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r (0x0000c1d1 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_PXNG_STS_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x4_pxng_sts_gen2[1];
	uint32_t _an_x4_pxng_sts_gen2;
} BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r_CLR(r) (r).an_x4_pxng_sts_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r_SET(r,d) (r).an_x4_pxng_sts_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r_GET(r) (r).an_x4_pxng_sts_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r_AN_GOOD_CHECKf_GET(r) ((((r).an_x4_pxng_sts_gen2[0]) >> 8) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r_AN_GOOD_CHECKf_SET(r,f) (r).an_x4_pxng_sts_gen2[0]=(((r).an_x4_pxng_sts_gen2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r_NEXT_PAGE_WAITf_GET(r) ((((r).an_x4_pxng_sts_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r_NEXT_PAGE_WAITf_SET(r,f) (r).an_x4_pxng_sts_gen2[0]=(((r).an_x4_pxng_sts_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r_TRANSMIT_DISABLEf_GET(r) ((((r).an_x4_pxng_sts_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r_TRANSMIT_DISABLEf_SET(r,f) (r).an_x4_pxng_sts_gen2[0]=(((r).an_x4_pxng_sts_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r_ERROR_STATEf_GET(r) ((((r).an_x4_pxng_sts_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r_ERROR_STATEf_SET(r,f) (r).an_x4_pxng_sts_gen2[0]=(((r).an_x4_pxng_sts_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r_AN_ENABLEf_GET(r) ((((r).an_x4_pxng_sts_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r_AN_ENABLEf_SET(r,f) (r).an_x4_pxng_sts_gen2[0]=(((r).an_x4_pxng_sts_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r_ABILITY_DETECTf_GET(r) ((((r).an_x4_pxng_sts_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r_ABILITY_DETECTf_SET(r,f) (r).an_x4_pxng_sts_gen2[0]=(((r).an_x4_pxng_sts_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r_ACK_DETECTf_GET(r) ((((r).an_x4_pxng_sts_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r_ACK_DETECTf_SET(r,f) (r).an_x4_pxng_sts_gen2[0]=(((r).an_x4_pxng_sts_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r_COMPLETE_ACKf_GET(r) ((((r).an_x4_pxng_sts_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r_COMPLETE_ACKf_SET(r,f) (r).an_x4_pxng_sts_gen2[0]=(((r).an_x4_pxng_sts_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r_CONSISTENCY_MISMATCHf_GET(r) (((r).an_x4_pxng_sts_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r_CONSISTENCY_MISMATCHf_SET(r,f) (r).an_x4_pxng_sts_gen2[0]=(((r).an_x4_pxng_sts_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AN_X4_PXNG_STS_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X4_PXNG_STS_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r,(_r._an_x4_pxng_sts_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X4_PXNG_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r,(_r._an_x4_pxng_sts_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X4_PXNG_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r,(_r._an_x4_pxng_sts_gen2))
#define BCMI_TSCF_XGXS_READLN_AN_X4_PXNG_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_pxng_sts_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AN_X4_PXNG_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_pxng_sts_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AN_X4_PXNG_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_pxng_sts_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_PXNG_STS_GEN2r BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r
#define AN_X4_PXNG_STS_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r_t AN_X4_PXNG_STS_GEN2r_t;
#define AN_X4_PXNG_STS_GEN2r_CLR BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r_CLR
#define AN_X4_PXNG_STS_GEN2r_SET BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r_SET
#define AN_X4_PXNG_STS_GEN2r_GET BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r_GET
#define AN_X4_PXNG_STS_GEN2r_AN_GOOD_CHECKf_GET BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r_AN_GOOD_CHECKf_GET
#define AN_X4_PXNG_STS_GEN2r_AN_GOOD_CHECKf_SET BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r_AN_GOOD_CHECKf_SET
#define AN_X4_PXNG_STS_GEN2r_NEXT_PAGE_WAITf_GET BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r_NEXT_PAGE_WAITf_GET
#define AN_X4_PXNG_STS_GEN2r_NEXT_PAGE_WAITf_SET BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r_NEXT_PAGE_WAITf_SET
#define AN_X4_PXNG_STS_GEN2r_TRANSMIT_DISABLEf_GET BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r_TRANSMIT_DISABLEf_GET
#define AN_X4_PXNG_STS_GEN2r_TRANSMIT_DISABLEf_SET BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r_TRANSMIT_DISABLEf_SET
#define AN_X4_PXNG_STS_GEN2r_ERROR_STATEf_GET BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r_ERROR_STATEf_GET
#define AN_X4_PXNG_STS_GEN2r_ERROR_STATEf_SET BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r_ERROR_STATEf_SET
#define AN_X4_PXNG_STS_GEN2r_AN_ENABLEf_GET BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r_AN_ENABLEf_GET
#define AN_X4_PXNG_STS_GEN2r_AN_ENABLEf_SET BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r_AN_ENABLEf_SET
#define AN_X4_PXNG_STS_GEN2r_ABILITY_DETECTf_GET BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r_ABILITY_DETECTf_GET
#define AN_X4_PXNG_STS_GEN2r_ABILITY_DETECTf_SET BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r_ABILITY_DETECTf_SET
#define AN_X4_PXNG_STS_GEN2r_ACK_DETECTf_GET BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r_ACK_DETECTf_GET
#define AN_X4_PXNG_STS_GEN2r_ACK_DETECTf_SET BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r_ACK_DETECTf_SET
#define AN_X4_PXNG_STS_GEN2r_COMPLETE_ACKf_GET BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r_COMPLETE_ACKf_GET
#define AN_X4_PXNG_STS_GEN2r_COMPLETE_ACKf_SET BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r_COMPLETE_ACKf_SET
#define AN_X4_PXNG_STS_GEN2r_CONSISTENCY_MISMATCHf_GET BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r_CONSISTENCY_MISMATCHf_GET
#define AN_X4_PXNG_STS_GEN2r_CONSISTENCY_MISMATCHf_SET BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r_CONSISTENCY_MISMATCHf_SET
#define READ_AN_X4_PXNG_STS_GEN2r BCMI_TSCF_XGXS_READ_AN_X4_PXNG_STS_GEN2r
#define WRITE_AN_X4_PXNG_STS_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X4_PXNG_STS_GEN2r
#define MODIFY_AN_X4_PXNG_STS_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X4_PXNG_STS_GEN2r
#define READLN_AN_X4_PXNG_STS_GEN2r BCMI_TSCF_XGXS_READLN_AN_X4_PXNG_STS_GEN2r
#define WRITELN_AN_X4_PXNG_STS_GEN2r BCMI_TSCF_XGXS_WRITELN_AN_X4_PXNG_STS_GEN2r
#define WRITEALL_AN_X4_PXNG_STS_GEN2r BCMI_TSCF_XGXS_WRITEALL_AN_X4_PXNG_STS_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X4_PXNG_STS_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X4_PSEQ_STS_GEN2
 * BLOCKS:   AN_X4_STATUS
 * REGADDR:  0xc1d2
 * DESC:     CL73_PSEQ Status 
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     HP_MODE          PSEQ Entered Hewlett-Packard mode.
 *     RX_BP            PSEQ Received base page.
 *     RX_NP            PSEQ Received next page.
 *     RX_MP_NULL       PSEQ Received message page 1.
 *     RX_MP_OUI        PSEQ Received message page 5.
 *     RX_MP_MISMATCH   PSEQ Received mismatching message page.
 *     RX_UP_OUI_MISMATCH PSEQ Received MPS-5 OUI mismatch.
 *     RX_UP_OUI_MATCH  PSEQ Received MPS-5 OUI match.
 *     RX_INVALID_SEQ   PSEQ Received invalid page sequence.
 *     RX_NP_TOGGLE_ERR PSEQ Received NP without T toggling.
 *     CL73_AN_COMPLETE PSEQ CL73 auto-neg is complete.
 */
#define BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r (0x0000c1d2 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_PSEQ_STS_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x4_pseq_sts_gen2[1];
	uint32_t _an_x4_pseq_sts_gen2;
} BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_CLR(r) (r).an_x4_pseq_sts_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_SET(r,d) (r).an_x4_pseq_sts_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_GET(r) (r).an_x4_pseq_sts_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_CL73_AN_COMPLETEf_GET(r) ((((r).an_x4_pseq_sts_gen2[0]) >> 10) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_CL73_AN_COMPLETEf_SET(r,f) (r).an_x4_pseq_sts_gen2[0]=(((r).an_x4_pseq_sts_gen2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_RX_NP_TOGGLE_ERRf_GET(r) ((((r).an_x4_pseq_sts_gen2[0]) >> 9) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_RX_NP_TOGGLE_ERRf_SET(r,f) (r).an_x4_pseq_sts_gen2[0]=(((r).an_x4_pseq_sts_gen2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_RX_INVALID_SEQf_GET(r) ((((r).an_x4_pseq_sts_gen2[0]) >> 8) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_RX_INVALID_SEQf_SET(r,f) (r).an_x4_pseq_sts_gen2[0]=(((r).an_x4_pseq_sts_gen2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_RX_UP_OUI_MATCHf_GET(r) ((((r).an_x4_pseq_sts_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_RX_UP_OUI_MATCHf_SET(r,f) (r).an_x4_pseq_sts_gen2[0]=(((r).an_x4_pseq_sts_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_RX_UP_OUI_MISMATCHf_GET(r) ((((r).an_x4_pseq_sts_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_RX_UP_OUI_MISMATCHf_SET(r,f) (r).an_x4_pseq_sts_gen2[0]=(((r).an_x4_pseq_sts_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_RX_MP_MISMATCHf_GET(r) ((((r).an_x4_pseq_sts_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_RX_MP_MISMATCHf_SET(r,f) (r).an_x4_pseq_sts_gen2[0]=(((r).an_x4_pseq_sts_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_RX_MP_OUIf_GET(r) ((((r).an_x4_pseq_sts_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_RX_MP_OUIf_SET(r,f) (r).an_x4_pseq_sts_gen2[0]=(((r).an_x4_pseq_sts_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_RX_MP_NULLf_GET(r) ((((r).an_x4_pseq_sts_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_RX_MP_NULLf_SET(r,f) (r).an_x4_pseq_sts_gen2[0]=(((r).an_x4_pseq_sts_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_RX_NPf_GET(r) ((((r).an_x4_pseq_sts_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_RX_NPf_SET(r,f) (r).an_x4_pseq_sts_gen2[0]=(((r).an_x4_pseq_sts_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_RX_BPf_GET(r) ((((r).an_x4_pseq_sts_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_RX_BPf_SET(r,f) (r).an_x4_pseq_sts_gen2[0]=(((r).an_x4_pseq_sts_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_HP_MODEf_GET(r) (((r).an_x4_pseq_sts_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_HP_MODEf_SET(r,f) (r).an_x4_pseq_sts_gen2[0]=(((r).an_x4_pseq_sts_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AN_X4_PSEQ_STS_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X4_PSEQ_STS_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r,(_r._an_x4_pseq_sts_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X4_PSEQ_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r,(_r._an_x4_pseq_sts_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X4_PSEQ_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r,(_r._an_x4_pseq_sts_gen2))
#define BCMI_TSCF_XGXS_READLN_AN_X4_PSEQ_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_pseq_sts_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AN_X4_PSEQ_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_pseq_sts_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AN_X4_PSEQ_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_pseq_sts_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_PSEQ_STS_GEN2r BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r
#define AN_X4_PSEQ_STS_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_t AN_X4_PSEQ_STS_GEN2r_t;
#define AN_X4_PSEQ_STS_GEN2r_CLR BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_CLR
#define AN_X4_PSEQ_STS_GEN2r_SET BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_SET
#define AN_X4_PSEQ_STS_GEN2r_GET BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_GET
#define AN_X4_PSEQ_STS_GEN2r_CL73_AN_COMPLETEf_GET BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_CL73_AN_COMPLETEf_GET
#define AN_X4_PSEQ_STS_GEN2r_CL73_AN_COMPLETEf_SET BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_CL73_AN_COMPLETEf_SET
#define AN_X4_PSEQ_STS_GEN2r_RX_NP_TOGGLE_ERRf_GET BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_RX_NP_TOGGLE_ERRf_GET
#define AN_X4_PSEQ_STS_GEN2r_RX_NP_TOGGLE_ERRf_SET BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_RX_NP_TOGGLE_ERRf_SET
#define AN_X4_PSEQ_STS_GEN2r_RX_INVALID_SEQf_GET BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_RX_INVALID_SEQf_GET
#define AN_X4_PSEQ_STS_GEN2r_RX_INVALID_SEQf_SET BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_RX_INVALID_SEQf_SET
#define AN_X4_PSEQ_STS_GEN2r_RX_UP_OUI_MATCHf_GET BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_RX_UP_OUI_MATCHf_GET
#define AN_X4_PSEQ_STS_GEN2r_RX_UP_OUI_MATCHf_SET BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_RX_UP_OUI_MATCHf_SET
#define AN_X4_PSEQ_STS_GEN2r_RX_UP_OUI_MISMATCHf_GET BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_RX_UP_OUI_MISMATCHf_GET
#define AN_X4_PSEQ_STS_GEN2r_RX_UP_OUI_MISMATCHf_SET BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_RX_UP_OUI_MISMATCHf_SET
#define AN_X4_PSEQ_STS_GEN2r_RX_MP_MISMATCHf_GET BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_RX_MP_MISMATCHf_GET
#define AN_X4_PSEQ_STS_GEN2r_RX_MP_MISMATCHf_SET BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_RX_MP_MISMATCHf_SET
#define AN_X4_PSEQ_STS_GEN2r_RX_MP_OUIf_GET BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_RX_MP_OUIf_GET
#define AN_X4_PSEQ_STS_GEN2r_RX_MP_OUIf_SET BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_RX_MP_OUIf_SET
#define AN_X4_PSEQ_STS_GEN2r_RX_MP_NULLf_GET BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_RX_MP_NULLf_GET
#define AN_X4_PSEQ_STS_GEN2r_RX_MP_NULLf_SET BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_RX_MP_NULLf_SET
#define AN_X4_PSEQ_STS_GEN2r_RX_NPf_GET BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_RX_NPf_GET
#define AN_X4_PSEQ_STS_GEN2r_RX_NPf_SET BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_RX_NPf_SET
#define AN_X4_PSEQ_STS_GEN2r_RX_BPf_GET BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_RX_BPf_GET
#define AN_X4_PSEQ_STS_GEN2r_RX_BPf_SET BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_RX_BPf_SET
#define AN_X4_PSEQ_STS_GEN2r_HP_MODEf_GET BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_HP_MODEf_GET
#define AN_X4_PSEQ_STS_GEN2r_HP_MODEf_SET BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r_HP_MODEf_SET
#define READ_AN_X4_PSEQ_STS_GEN2r BCMI_TSCF_XGXS_READ_AN_X4_PSEQ_STS_GEN2r
#define WRITE_AN_X4_PSEQ_STS_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X4_PSEQ_STS_GEN2r
#define MODIFY_AN_X4_PSEQ_STS_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X4_PSEQ_STS_GEN2r
#define READLN_AN_X4_PSEQ_STS_GEN2r BCMI_TSCF_XGXS_READLN_AN_X4_PSEQ_STS_GEN2r
#define WRITELN_AN_X4_PSEQ_STS_GEN2r BCMI_TSCF_XGXS_WRITELN_AN_X4_PSEQ_STS_GEN2r
#define WRITEALL_AN_X4_PSEQ_STS_GEN2r BCMI_TSCF_XGXS_WRITEALL_AN_X4_PSEQ_STS_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X4_PSEQ_STS_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X4_PSEQ_RF_GEN2
 * BLOCKS:   AN_X4_STATUS
 * REGADDR:  0xc1d3
 * DESC:     PSEQ Remote Fault Status 
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     REMOTE_FAULT_SET PSEQ Received a remote fault indication.
 */
#define BCMI_TSCF_XGXS_AN_X4_PSEQ_RF_GEN2r (0x0000c1d3 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X4_PSEQ_RF_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_PSEQ_RF_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X4_PSEQ_RF_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x4_pseq_rf_gen2[1];
	uint32_t _an_x4_pseq_rf_gen2;
} BCMI_TSCF_XGXS_AN_X4_PSEQ_RF_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X4_PSEQ_RF_GEN2r_CLR(r) (r).an_x4_pseq_rf_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X4_PSEQ_RF_GEN2r_SET(r,d) (r).an_x4_pseq_rf_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X4_PSEQ_RF_GEN2r_GET(r) (r).an_x4_pseq_rf_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X4_PSEQ_RF_GEN2r_REMOTE_FAULT_SETf_GET(r) (((r).an_x4_pseq_rf_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_PSEQ_RF_GEN2r_REMOTE_FAULT_SETf_SET(r,f) (r).an_x4_pseq_rf_gen2[0]=(((r).an_x4_pseq_rf_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AN_X4_PSEQ_RF_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X4_PSEQ_RF_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_PSEQ_RF_GEN2r,(_r._an_x4_pseq_rf_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X4_PSEQ_RF_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_PSEQ_RF_GEN2r,(_r._an_x4_pseq_rf_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X4_PSEQ_RF_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_PSEQ_RF_GEN2r,(_r._an_x4_pseq_rf_gen2))
#define BCMI_TSCF_XGXS_READLN_AN_X4_PSEQ_RF_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_PSEQ_RF_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_pseq_rf_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AN_X4_PSEQ_RF_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_PSEQ_RF_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_pseq_rf_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AN_X4_PSEQ_RF_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_PSEQ_RF_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_pseq_rf_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_PSEQ_RF_GEN2r BCMI_TSCF_XGXS_AN_X4_PSEQ_RF_GEN2r
#define AN_X4_PSEQ_RF_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X4_PSEQ_RF_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X4_PSEQ_RF_GEN2r_t AN_X4_PSEQ_RF_GEN2r_t;
#define AN_X4_PSEQ_RF_GEN2r_CLR BCMI_TSCF_XGXS_AN_X4_PSEQ_RF_GEN2r_CLR
#define AN_X4_PSEQ_RF_GEN2r_SET BCMI_TSCF_XGXS_AN_X4_PSEQ_RF_GEN2r_SET
#define AN_X4_PSEQ_RF_GEN2r_GET BCMI_TSCF_XGXS_AN_X4_PSEQ_RF_GEN2r_GET
#define AN_X4_PSEQ_RF_GEN2r_REMOTE_FAULT_SETf_GET BCMI_TSCF_XGXS_AN_X4_PSEQ_RF_GEN2r_REMOTE_FAULT_SETf_GET
#define AN_X4_PSEQ_RF_GEN2r_REMOTE_FAULT_SETf_SET BCMI_TSCF_XGXS_AN_X4_PSEQ_RF_GEN2r_REMOTE_FAULT_SETf_SET
#define READ_AN_X4_PSEQ_RF_GEN2r BCMI_TSCF_XGXS_READ_AN_X4_PSEQ_RF_GEN2r
#define WRITE_AN_X4_PSEQ_RF_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X4_PSEQ_RF_GEN2r
#define MODIFY_AN_X4_PSEQ_RF_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X4_PSEQ_RF_GEN2r
#define READLN_AN_X4_PSEQ_RF_GEN2r BCMI_TSCF_XGXS_READLN_AN_X4_PSEQ_RF_GEN2r
#define WRITELN_AN_X4_PSEQ_RF_GEN2r BCMI_TSCF_XGXS_WRITELN_AN_X4_PSEQ_RF_GEN2r
#define WRITEALL_AN_X4_PSEQ_RF_GEN2r BCMI_TSCF_XGXS_WRITEALL_AN_X4_PSEQ_RF_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X4_PSEQ_RF_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X4_UNEXP_PAGE_GEN2
 * BLOCKS:   AN_X4_STATUS
 * REGADDR:  0xc1d4
 * DESC:     PSEQ Unexpected page 
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     RX_UNEXPECTED_PAGE PSEQ Unexpected page received.
 */
#define BCMI_TSCF_XGXS_AN_X4_UNEXP_PAGE_GEN2r (0x0000c1d4 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X4_UNEXP_PAGE_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_UNEXP_PAGE_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X4_UNEXP_PAGE_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x4_unexp_page_gen2[1];
	uint32_t _an_x4_unexp_page_gen2;
} BCMI_TSCF_XGXS_AN_X4_UNEXP_PAGE_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X4_UNEXP_PAGE_GEN2r_CLR(r) (r).an_x4_unexp_page_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X4_UNEXP_PAGE_GEN2r_SET(r,d) (r).an_x4_unexp_page_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X4_UNEXP_PAGE_GEN2r_GET(r) (r).an_x4_unexp_page_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X4_UNEXP_PAGE_GEN2r_RX_UNEXPECTED_PAGEf_GET(r) (((r).an_x4_unexp_page_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_AN_X4_UNEXP_PAGE_GEN2r_RX_UNEXPECTED_PAGEf_SET(r,f) (r).an_x4_unexp_page_gen2[0]=(((r).an_x4_unexp_page_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AN_X4_UNEXP_PAGE_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X4_UNEXP_PAGE_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_UNEXP_PAGE_GEN2r,(_r._an_x4_unexp_page_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X4_UNEXP_PAGE_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_UNEXP_PAGE_GEN2r,(_r._an_x4_unexp_page_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X4_UNEXP_PAGE_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_UNEXP_PAGE_GEN2r,(_r._an_x4_unexp_page_gen2))
#define BCMI_TSCF_XGXS_READLN_AN_X4_UNEXP_PAGE_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_UNEXP_PAGE_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_unexp_page_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AN_X4_UNEXP_PAGE_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_UNEXP_PAGE_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_unexp_page_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AN_X4_UNEXP_PAGE_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_UNEXP_PAGE_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_unexp_page_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_UNEXP_PAGE_GEN2r BCMI_TSCF_XGXS_AN_X4_UNEXP_PAGE_GEN2r
#define AN_X4_UNEXP_PAGE_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X4_UNEXP_PAGE_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X4_UNEXP_PAGE_GEN2r_t AN_X4_UNEXP_PAGE_GEN2r_t;
#define AN_X4_UNEXP_PAGE_GEN2r_CLR BCMI_TSCF_XGXS_AN_X4_UNEXP_PAGE_GEN2r_CLR
#define AN_X4_UNEXP_PAGE_GEN2r_SET BCMI_TSCF_XGXS_AN_X4_UNEXP_PAGE_GEN2r_SET
#define AN_X4_UNEXP_PAGE_GEN2r_GET BCMI_TSCF_XGXS_AN_X4_UNEXP_PAGE_GEN2r_GET
#define AN_X4_UNEXP_PAGE_GEN2r_RX_UNEXPECTED_PAGEf_GET BCMI_TSCF_XGXS_AN_X4_UNEXP_PAGE_GEN2r_RX_UNEXPECTED_PAGEf_GET
#define AN_X4_UNEXP_PAGE_GEN2r_RX_UNEXPECTED_PAGEf_SET BCMI_TSCF_XGXS_AN_X4_UNEXP_PAGE_GEN2r_RX_UNEXPECTED_PAGEf_SET
#define READ_AN_X4_UNEXP_PAGE_GEN2r BCMI_TSCF_XGXS_READ_AN_X4_UNEXP_PAGE_GEN2r
#define WRITE_AN_X4_UNEXP_PAGE_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X4_UNEXP_PAGE_GEN2r
#define MODIFY_AN_X4_UNEXP_PAGE_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X4_UNEXP_PAGE_GEN2r
#define READLN_AN_X4_UNEXP_PAGE_GEN2r BCMI_TSCF_XGXS_READLN_AN_X4_UNEXP_PAGE_GEN2r
#define WRITELN_AN_X4_UNEXP_PAGE_GEN2r BCMI_TSCF_XGXS_WRITELN_AN_X4_UNEXP_PAGE_GEN2r
#define WRITEALL_AN_X4_UNEXP_PAGE_GEN2r BCMI_TSCF_XGXS_WRITEALL_AN_X4_UNEXP_PAGE_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X4_UNEXP_PAGE_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X4_LP_BASE1_GEN2
 * BLOCKS:   AN_X4_STATUS
 * REGADDR:  0xc1d5
 * DESC:     PSEQ LP Base page 1 
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     LP_BASE1         PSEQ LP Base page 1.15 -- Next Page14 -- Acknowledge: Value always 0, writes ignored13 -- Remote Fault12 -- some PHY ability11 -- pause10 -- asm_dir09:05 -- echoed nonce04:00 -- S4 S3 S2 S1 S0 Selector description0 0 0 0 0 Reserved for future Auto-Negotiation development0 0 0 0 1 IEEE Std 802.30 0 0 1 0 IEEE Std 802.9 ISLAN-16T0 0 0 1 1 IEEE Std 802.50 0 1 0 0 IEEE Std 13940 0 1 0 1 Reserved for future Auto-Negotiation development0 0 1 1 X Reserved for future Auto-Negotiation development0 1 X X X Reserved for future Auto-Negotiation development1 X X X X Reserved for future Auto-Negotiation developmentFor up-to-date information on the allocation of Auto-Negotiation Selector Fields, visit www.ieee802.org/3/selectors/selectors.html
 */
#define BCMI_TSCF_XGXS_AN_X4_LP_BASE1_GEN2r (0x0000c1d5 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X4_LP_BASE1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_LP_BASE1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X4_LP_BASE1_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x4_lp_base1_gen2[1];
	uint32_t _an_x4_lp_base1_gen2;
} BCMI_TSCF_XGXS_AN_X4_LP_BASE1_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X4_LP_BASE1_GEN2r_CLR(r) (r).an_x4_lp_base1_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X4_LP_BASE1_GEN2r_SET(r,d) (r).an_x4_lp_base1_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X4_LP_BASE1_GEN2r_GET(r) (r).an_x4_lp_base1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X4_LP_BASE1_GEN2r_LP_BASE1f_GET(r) (((r).an_x4_lp_base1_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_AN_X4_LP_BASE1_GEN2r_LP_BASE1f_SET(r,f) (r).an_x4_lp_base1_gen2[0]=(((r).an_x4_lp_base1_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AN_X4_LP_BASE1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X4_LP_BASE1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_LP_BASE1_GEN2r,(_r._an_x4_lp_base1_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X4_LP_BASE1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LP_BASE1_GEN2r,(_r._an_x4_lp_base1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X4_LP_BASE1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LP_BASE1_GEN2r,(_r._an_x4_lp_base1_gen2))
#define BCMI_TSCF_XGXS_READLN_AN_X4_LP_BASE1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_LP_BASE1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_lp_base1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AN_X4_LP_BASE1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LP_BASE1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_lp_base1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AN_X4_LP_BASE1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LP_BASE1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_lp_base1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_LP_BASE1_GEN2r BCMI_TSCF_XGXS_AN_X4_LP_BASE1_GEN2r
#define AN_X4_LP_BASE1_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X4_LP_BASE1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X4_LP_BASE1_GEN2r_t AN_X4_LP_BASE1_GEN2r_t;
#define AN_X4_LP_BASE1_GEN2r_CLR BCMI_TSCF_XGXS_AN_X4_LP_BASE1_GEN2r_CLR
#define AN_X4_LP_BASE1_GEN2r_SET BCMI_TSCF_XGXS_AN_X4_LP_BASE1_GEN2r_SET
#define AN_X4_LP_BASE1_GEN2r_GET BCMI_TSCF_XGXS_AN_X4_LP_BASE1_GEN2r_GET
#define AN_X4_LP_BASE1_GEN2r_LP_BASE1f_GET BCMI_TSCF_XGXS_AN_X4_LP_BASE1_GEN2r_LP_BASE1f_GET
#define AN_X4_LP_BASE1_GEN2r_LP_BASE1f_SET BCMI_TSCF_XGXS_AN_X4_LP_BASE1_GEN2r_LP_BASE1f_SET
#define READ_AN_X4_LP_BASE1_GEN2r BCMI_TSCF_XGXS_READ_AN_X4_LP_BASE1_GEN2r
#define WRITE_AN_X4_LP_BASE1_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X4_LP_BASE1_GEN2r
#define MODIFY_AN_X4_LP_BASE1_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X4_LP_BASE1_GEN2r
#define READLN_AN_X4_LP_BASE1_GEN2r BCMI_TSCF_XGXS_READLN_AN_X4_LP_BASE1_GEN2r
#define WRITELN_AN_X4_LP_BASE1_GEN2r BCMI_TSCF_XGXS_WRITELN_AN_X4_LP_BASE1_GEN2r
#define WRITEALL_AN_X4_LP_BASE1_GEN2r BCMI_TSCF_XGXS_WRITEALL_AN_X4_LP_BASE1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X4_LP_BASE1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X4_LP_BASE2_GEN2
 * BLOCKS:   AN_X4_STATUS
 * REGADDR:  0xc1d6
 * DESC:     PSEQ LP Base page 2 
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     LP_BASE2         PSEQ LP Base page 2.15:11 Reserved for future10 -- 100G CR109 -- 40G CR48 -- 40G KR47 -- 10G KR6 -- 10G KX45 -- 1G KX04:00 -- transmitted nonce
 */
#define BCMI_TSCF_XGXS_AN_X4_LP_BASE2_GEN2r (0x0000c1d6 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X4_LP_BASE2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_LP_BASE2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X4_LP_BASE2_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x4_lp_base2_gen2[1];
	uint32_t _an_x4_lp_base2_gen2;
} BCMI_TSCF_XGXS_AN_X4_LP_BASE2_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X4_LP_BASE2_GEN2r_CLR(r) (r).an_x4_lp_base2_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X4_LP_BASE2_GEN2r_SET(r,d) (r).an_x4_lp_base2_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X4_LP_BASE2_GEN2r_GET(r) (r).an_x4_lp_base2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X4_LP_BASE2_GEN2r_LP_BASE2f_GET(r) (((r).an_x4_lp_base2_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_AN_X4_LP_BASE2_GEN2r_LP_BASE2f_SET(r,f) (r).an_x4_lp_base2_gen2[0]=(((r).an_x4_lp_base2_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AN_X4_LP_BASE2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X4_LP_BASE2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_LP_BASE2_GEN2r,(_r._an_x4_lp_base2_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X4_LP_BASE2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LP_BASE2_GEN2r,(_r._an_x4_lp_base2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X4_LP_BASE2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LP_BASE2_GEN2r,(_r._an_x4_lp_base2_gen2))
#define BCMI_TSCF_XGXS_READLN_AN_X4_LP_BASE2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_LP_BASE2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_lp_base2_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AN_X4_LP_BASE2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LP_BASE2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_lp_base2_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AN_X4_LP_BASE2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LP_BASE2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_lp_base2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_LP_BASE2_GEN2r BCMI_TSCF_XGXS_AN_X4_LP_BASE2_GEN2r
#define AN_X4_LP_BASE2_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X4_LP_BASE2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X4_LP_BASE2_GEN2r_t AN_X4_LP_BASE2_GEN2r_t;
#define AN_X4_LP_BASE2_GEN2r_CLR BCMI_TSCF_XGXS_AN_X4_LP_BASE2_GEN2r_CLR
#define AN_X4_LP_BASE2_GEN2r_SET BCMI_TSCF_XGXS_AN_X4_LP_BASE2_GEN2r_SET
#define AN_X4_LP_BASE2_GEN2r_GET BCMI_TSCF_XGXS_AN_X4_LP_BASE2_GEN2r_GET
#define AN_X4_LP_BASE2_GEN2r_LP_BASE2f_GET BCMI_TSCF_XGXS_AN_X4_LP_BASE2_GEN2r_LP_BASE2f_GET
#define AN_X4_LP_BASE2_GEN2r_LP_BASE2f_SET BCMI_TSCF_XGXS_AN_X4_LP_BASE2_GEN2r_LP_BASE2f_SET
#define READ_AN_X4_LP_BASE2_GEN2r BCMI_TSCF_XGXS_READ_AN_X4_LP_BASE2_GEN2r
#define WRITE_AN_X4_LP_BASE2_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X4_LP_BASE2_GEN2r
#define MODIFY_AN_X4_LP_BASE2_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X4_LP_BASE2_GEN2r
#define READLN_AN_X4_LP_BASE2_GEN2r BCMI_TSCF_XGXS_READLN_AN_X4_LP_BASE2_GEN2r
#define WRITELN_AN_X4_LP_BASE2_GEN2r BCMI_TSCF_XGXS_WRITELN_AN_X4_LP_BASE2_GEN2r
#define WRITEALL_AN_X4_LP_BASE2_GEN2r BCMI_TSCF_XGXS_WRITEALL_AN_X4_LP_BASE2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X4_LP_BASE2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X4_LP_BASE3_GEN2
 * BLOCKS:   AN_X4_STATUS
 * REGADDR:  0xc1d7
 * DESC:     PSEQ LP Base page 3 
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     LP_BASE3         PSEQ LP Base page 3.15 -- FEC requested14 -- FEC ability13:00 -- Reserved bits must be written with 0. A read returns an unknown value.
 */
#define BCMI_TSCF_XGXS_AN_X4_LP_BASE3_GEN2r (0x0000c1d7 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X4_LP_BASE3_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_LP_BASE3_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X4_LP_BASE3_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x4_lp_base3_gen2[1];
	uint32_t _an_x4_lp_base3_gen2;
} BCMI_TSCF_XGXS_AN_X4_LP_BASE3_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X4_LP_BASE3_GEN2r_CLR(r) (r).an_x4_lp_base3_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X4_LP_BASE3_GEN2r_SET(r,d) (r).an_x4_lp_base3_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X4_LP_BASE3_GEN2r_GET(r) (r).an_x4_lp_base3_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X4_LP_BASE3_GEN2r_LP_BASE3f_GET(r) (((r).an_x4_lp_base3_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_AN_X4_LP_BASE3_GEN2r_LP_BASE3f_SET(r,f) (r).an_x4_lp_base3_gen2[0]=(((r).an_x4_lp_base3_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AN_X4_LP_BASE3_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X4_LP_BASE3_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_LP_BASE3_GEN2r,(_r._an_x4_lp_base3_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X4_LP_BASE3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LP_BASE3_GEN2r,(_r._an_x4_lp_base3_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X4_LP_BASE3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LP_BASE3_GEN2r,(_r._an_x4_lp_base3_gen2))
#define BCMI_TSCF_XGXS_READLN_AN_X4_LP_BASE3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_LP_BASE3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_lp_base3_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AN_X4_LP_BASE3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LP_BASE3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_lp_base3_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AN_X4_LP_BASE3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LP_BASE3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_lp_base3_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_LP_BASE3_GEN2r BCMI_TSCF_XGXS_AN_X4_LP_BASE3_GEN2r
#define AN_X4_LP_BASE3_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X4_LP_BASE3_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X4_LP_BASE3_GEN2r_t AN_X4_LP_BASE3_GEN2r_t;
#define AN_X4_LP_BASE3_GEN2r_CLR BCMI_TSCF_XGXS_AN_X4_LP_BASE3_GEN2r_CLR
#define AN_X4_LP_BASE3_GEN2r_SET BCMI_TSCF_XGXS_AN_X4_LP_BASE3_GEN2r_SET
#define AN_X4_LP_BASE3_GEN2r_GET BCMI_TSCF_XGXS_AN_X4_LP_BASE3_GEN2r_GET
#define AN_X4_LP_BASE3_GEN2r_LP_BASE3f_GET BCMI_TSCF_XGXS_AN_X4_LP_BASE3_GEN2r_LP_BASE3f_GET
#define AN_X4_LP_BASE3_GEN2r_LP_BASE3f_SET BCMI_TSCF_XGXS_AN_X4_LP_BASE3_GEN2r_LP_BASE3f_SET
#define READ_AN_X4_LP_BASE3_GEN2r BCMI_TSCF_XGXS_READ_AN_X4_LP_BASE3_GEN2r
#define WRITE_AN_X4_LP_BASE3_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X4_LP_BASE3_GEN2r
#define MODIFY_AN_X4_LP_BASE3_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X4_LP_BASE3_GEN2r
#define READLN_AN_X4_LP_BASE3_GEN2r BCMI_TSCF_XGXS_READLN_AN_X4_LP_BASE3_GEN2r
#define WRITELN_AN_X4_LP_BASE3_GEN2r BCMI_TSCF_XGXS_WRITELN_AN_X4_LP_BASE3_GEN2r
#define WRITEALL_AN_X4_LP_BASE3_GEN2r BCMI_TSCF_XGXS_WRITEALL_AN_X4_LP_BASE3_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X4_LP_BASE3_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X4_LP_OUI_UP1_GEN2
 * BLOCKS:   AN_X4_STATUS
 * REGADDR:  0xc1d8
 * DESC:     PSEQ LP OUI UP-1 
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     LP_OUI_UP1       10:0 -- OUI MP5 bits 23:1311 -- !(Toggle bit in MP5 page)12 -- Read as 013 -- Read as 014 -- Ack bit in MP5 page15 -- Read as 1
 */
#define BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP1_GEN2r (0x0000c1d8 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_LP_OUI_UP1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP1_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x4_lp_oui_up1_gen2[1];
	uint32_t _an_x4_lp_oui_up1_gen2;
} BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP1_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP1_GEN2r_CLR(r) (r).an_x4_lp_oui_up1_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP1_GEN2r_SET(r,d) (r).an_x4_lp_oui_up1_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP1_GEN2r_GET(r) (r).an_x4_lp_oui_up1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP1_GEN2r_LP_OUI_UP1f_GET(r) (((r).an_x4_lp_oui_up1_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP1_GEN2r_LP_OUI_UP1f_SET(r,f) (r).an_x4_lp_oui_up1_gen2[0]=(((r).an_x4_lp_oui_up1_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AN_X4_LP_OUI_UP1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X4_LP_OUI_UP1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP1_GEN2r,(_r._an_x4_lp_oui_up1_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X4_LP_OUI_UP1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP1_GEN2r,(_r._an_x4_lp_oui_up1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X4_LP_OUI_UP1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP1_GEN2r,(_r._an_x4_lp_oui_up1_gen2))
#define BCMI_TSCF_XGXS_READLN_AN_X4_LP_OUI_UP1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_lp_oui_up1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AN_X4_LP_OUI_UP1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_lp_oui_up1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AN_X4_LP_OUI_UP1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_lp_oui_up1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_LP_OUI_UP1_GEN2r BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP1_GEN2r
#define AN_X4_LP_OUI_UP1_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP1_GEN2r_t AN_X4_LP_OUI_UP1_GEN2r_t;
#define AN_X4_LP_OUI_UP1_GEN2r_CLR BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP1_GEN2r_CLR
#define AN_X4_LP_OUI_UP1_GEN2r_SET BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP1_GEN2r_SET
#define AN_X4_LP_OUI_UP1_GEN2r_GET BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP1_GEN2r_GET
#define AN_X4_LP_OUI_UP1_GEN2r_LP_OUI_UP1f_GET BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP1_GEN2r_LP_OUI_UP1f_GET
#define AN_X4_LP_OUI_UP1_GEN2r_LP_OUI_UP1f_SET BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP1_GEN2r_LP_OUI_UP1f_SET
#define READ_AN_X4_LP_OUI_UP1_GEN2r BCMI_TSCF_XGXS_READ_AN_X4_LP_OUI_UP1_GEN2r
#define WRITE_AN_X4_LP_OUI_UP1_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X4_LP_OUI_UP1_GEN2r
#define MODIFY_AN_X4_LP_OUI_UP1_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X4_LP_OUI_UP1_GEN2r
#define READLN_AN_X4_LP_OUI_UP1_GEN2r BCMI_TSCF_XGXS_READLN_AN_X4_LP_OUI_UP1_GEN2r
#define WRITELN_AN_X4_LP_OUI_UP1_GEN2r BCMI_TSCF_XGXS_WRITELN_AN_X4_LP_OUI_UP1_GEN2r
#define WRITEALL_AN_X4_LP_OUI_UP1_GEN2r BCMI_TSCF_XGXS_WRITEALL_AN_X4_LP_OUI_UP1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X4_LP_OUI_UP2_GEN2
 * BLOCKS:   AN_X4_STATUS
 * REGADDR:  0xc1d9
 * DESC:     PSEQ LP OUI UP-2 
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     LP_OUI_UP2       10:0 -- OUI MP5 bits 12:211 -- (Toggle bit in MP5 page)12 -- Read as 013 -- Read as 014 -- Ack bit in MP5 page15 -- Read as 1
 */
#define BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP2_GEN2r (0x0000c1d9 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_LP_OUI_UP2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP2_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x4_lp_oui_up2_gen2[1];
	uint32_t _an_x4_lp_oui_up2_gen2;
} BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP2_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP2_GEN2r_CLR(r) (r).an_x4_lp_oui_up2_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP2_GEN2r_SET(r,d) (r).an_x4_lp_oui_up2_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP2_GEN2r_GET(r) (r).an_x4_lp_oui_up2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP2_GEN2r_LP_OUI_UP2f_GET(r) (((r).an_x4_lp_oui_up2_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP2_GEN2r_LP_OUI_UP2f_SET(r,f) (r).an_x4_lp_oui_up2_gen2[0]=(((r).an_x4_lp_oui_up2_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AN_X4_LP_OUI_UP2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X4_LP_OUI_UP2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP2_GEN2r,(_r._an_x4_lp_oui_up2_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X4_LP_OUI_UP2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP2_GEN2r,(_r._an_x4_lp_oui_up2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X4_LP_OUI_UP2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP2_GEN2r,(_r._an_x4_lp_oui_up2_gen2))
#define BCMI_TSCF_XGXS_READLN_AN_X4_LP_OUI_UP2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_lp_oui_up2_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AN_X4_LP_OUI_UP2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_lp_oui_up2_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AN_X4_LP_OUI_UP2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_lp_oui_up2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_LP_OUI_UP2_GEN2r BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP2_GEN2r
#define AN_X4_LP_OUI_UP2_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP2_GEN2r_t AN_X4_LP_OUI_UP2_GEN2r_t;
#define AN_X4_LP_OUI_UP2_GEN2r_CLR BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP2_GEN2r_CLR
#define AN_X4_LP_OUI_UP2_GEN2r_SET BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP2_GEN2r_SET
#define AN_X4_LP_OUI_UP2_GEN2r_GET BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP2_GEN2r_GET
#define AN_X4_LP_OUI_UP2_GEN2r_LP_OUI_UP2f_GET BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP2_GEN2r_LP_OUI_UP2f_GET
#define AN_X4_LP_OUI_UP2_GEN2r_LP_OUI_UP2f_SET BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP2_GEN2r_LP_OUI_UP2f_SET
#define READ_AN_X4_LP_OUI_UP2_GEN2r BCMI_TSCF_XGXS_READ_AN_X4_LP_OUI_UP2_GEN2r
#define WRITE_AN_X4_LP_OUI_UP2_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X4_LP_OUI_UP2_GEN2r
#define MODIFY_AN_X4_LP_OUI_UP2_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X4_LP_OUI_UP2_GEN2r
#define READLN_AN_X4_LP_OUI_UP2_GEN2r BCMI_TSCF_XGXS_READLN_AN_X4_LP_OUI_UP2_GEN2r
#define WRITELN_AN_X4_LP_OUI_UP2_GEN2r BCMI_TSCF_XGXS_WRITELN_AN_X4_LP_OUI_UP2_GEN2r
#define WRITEALL_AN_X4_LP_OUI_UP2_GEN2r BCMI_TSCF_XGXS_WRITEALL_AN_X4_LP_OUI_UP2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X4_LP_OUI_UP3_GEN2
 * BLOCKS:   AN_X4_STATUS
 * REGADDR:  0xc1da
 * DESC:     PSEQ LP OUI UP-3 
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     LP_OUI_UP3       PSEQ LP OUI UP-3.8:0 -- BAM Code10:9 -- OUI UP1 bits 1:011 -- Toggle bit in UP1 page13:12 -- Read as 014 -- Ack bit in UP1 page15 -- Read as 1
 */
#define BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP3_GEN2r (0x0000c1da | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP3_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_LP_OUI_UP3_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP3_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x4_lp_oui_up3_gen2[1];
	uint32_t _an_x4_lp_oui_up3_gen2;
} BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP3_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP3_GEN2r_CLR(r) (r).an_x4_lp_oui_up3_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP3_GEN2r_SET(r,d) (r).an_x4_lp_oui_up3_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP3_GEN2r_GET(r) (r).an_x4_lp_oui_up3_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP3_GEN2r_LP_OUI_UP3f_GET(r) (((r).an_x4_lp_oui_up3_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP3_GEN2r_LP_OUI_UP3f_SET(r,f) (r).an_x4_lp_oui_up3_gen2[0]=(((r).an_x4_lp_oui_up3_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AN_X4_LP_OUI_UP3_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X4_LP_OUI_UP3_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP3_GEN2r,(_r._an_x4_lp_oui_up3_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X4_LP_OUI_UP3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP3_GEN2r,(_r._an_x4_lp_oui_up3_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X4_LP_OUI_UP3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP3_GEN2r,(_r._an_x4_lp_oui_up3_gen2))
#define BCMI_TSCF_XGXS_READLN_AN_X4_LP_OUI_UP3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_lp_oui_up3_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AN_X4_LP_OUI_UP3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_lp_oui_up3_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AN_X4_LP_OUI_UP3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_lp_oui_up3_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_LP_OUI_UP3_GEN2r BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP3_GEN2r
#define AN_X4_LP_OUI_UP3_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP3_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP3_GEN2r_t AN_X4_LP_OUI_UP3_GEN2r_t;
#define AN_X4_LP_OUI_UP3_GEN2r_CLR BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP3_GEN2r_CLR
#define AN_X4_LP_OUI_UP3_GEN2r_SET BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP3_GEN2r_SET
#define AN_X4_LP_OUI_UP3_GEN2r_GET BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP3_GEN2r_GET
#define AN_X4_LP_OUI_UP3_GEN2r_LP_OUI_UP3f_GET BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP3_GEN2r_LP_OUI_UP3f_GET
#define AN_X4_LP_OUI_UP3_GEN2r_LP_OUI_UP3f_SET BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP3_GEN2r_LP_OUI_UP3f_SET
#define READ_AN_X4_LP_OUI_UP3_GEN2r BCMI_TSCF_XGXS_READ_AN_X4_LP_OUI_UP3_GEN2r
#define WRITE_AN_X4_LP_OUI_UP3_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X4_LP_OUI_UP3_GEN2r
#define MODIFY_AN_X4_LP_OUI_UP3_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X4_LP_OUI_UP3_GEN2r
#define READLN_AN_X4_LP_OUI_UP3_GEN2r BCMI_TSCF_XGXS_READLN_AN_X4_LP_OUI_UP3_GEN2r
#define WRITELN_AN_X4_LP_OUI_UP3_GEN2r BCMI_TSCF_XGXS_WRITELN_AN_X4_LP_OUI_UP3_GEN2r
#define WRITEALL_AN_X4_LP_OUI_UP3_GEN2r BCMI_TSCF_XGXS_WRITEALL_AN_X4_LP_OUI_UP3_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP3_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X4_LP_OUI_UP4_GEN2
 * BLOCKS:   AN_X4_STATUS
 * REGADDR:  0xc1db
 * DESC:     PSEQ LP OUI UP-4 
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     LP_OUI_UP4       PSEQ LP OUI UP-4.10:0 -- User defined data; 26:16 bits in UP1 page10 -- 26 bits in UP1 page (Reserved)9 -- 25 bits in UP1 page which is SPEED_50G_CR2 in BAM8 -- 24 bits in UP1 page which is SPEED_50G_KR2 in BAM7 -- 23 bits in UP1 page which is SPEED_40G_CR2 in BAM6 -- 22 bits in UP1 page which is SPEED_40G_KR2 in BAM5 -- 21 bits in UP1 page which is SPEED_25G_CR2 in BAM4 -- 20 bits in UP1 page which is SPEED_25G_KR2 in BAM3 -- 19 bits in UP1 page which is SPEED_20G_CR1 in BAM2 -- 18 bits in UP1 page which is SPEED_20G_KR1 in BAM1 -- 17 bits in UP1 page which is SPEED_20G_CR2 in BAM0 -- 16 bits in UP1 page which is SPEED_20G_KR2 in BAM11 -- !(Toggle bit in UP1 page)13:12 -- Read as 014 -- Ack bit in UP1 page15 -- Next page in UP1 ; bit 15 in UP1 page
 */
#define BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP4_GEN2r (0x0000c1db | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP4_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_LP_OUI_UP4_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP4_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x4_lp_oui_up4_gen2[1];
	uint32_t _an_x4_lp_oui_up4_gen2;
} BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP4_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP4_GEN2r_CLR(r) (r).an_x4_lp_oui_up4_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP4_GEN2r_SET(r,d) (r).an_x4_lp_oui_up4_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP4_GEN2r_GET(r) (r).an_x4_lp_oui_up4_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP4_GEN2r_LP_OUI_UP4f_GET(r) (((r).an_x4_lp_oui_up4_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP4_GEN2r_LP_OUI_UP4f_SET(r,f) (r).an_x4_lp_oui_up4_gen2[0]=(((r).an_x4_lp_oui_up4_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AN_X4_LP_OUI_UP4_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X4_LP_OUI_UP4_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP4_GEN2r,(_r._an_x4_lp_oui_up4_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X4_LP_OUI_UP4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP4_GEN2r,(_r._an_x4_lp_oui_up4_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X4_LP_OUI_UP4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP4_GEN2r,(_r._an_x4_lp_oui_up4_gen2))
#define BCMI_TSCF_XGXS_READLN_AN_X4_LP_OUI_UP4_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_lp_oui_up4_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AN_X4_LP_OUI_UP4_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_lp_oui_up4_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AN_X4_LP_OUI_UP4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_lp_oui_up4_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_LP_OUI_UP4_GEN2r BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP4_GEN2r
#define AN_X4_LP_OUI_UP4_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP4_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP4_GEN2r_t AN_X4_LP_OUI_UP4_GEN2r_t;
#define AN_X4_LP_OUI_UP4_GEN2r_CLR BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP4_GEN2r_CLR
#define AN_X4_LP_OUI_UP4_GEN2r_SET BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP4_GEN2r_SET
#define AN_X4_LP_OUI_UP4_GEN2r_GET BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP4_GEN2r_GET
#define AN_X4_LP_OUI_UP4_GEN2r_LP_OUI_UP4f_GET BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP4_GEN2r_LP_OUI_UP4f_GET
#define AN_X4_LP_OUI_UP4_GEN2r_LP_OUI_UP4f_SET BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP4_GEN2r_LP_OUI_UP4f_SET
#define READ_AN_X4_LP_OUI_UP4_GEN2r BCMI_TSCF_XGXS_READ_AN_X4_LP_OUI_UP4_GEN2r
#define WRITE_AN_X4_LP_OUI_UP4_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X4_LP_OUI_UP4_GEN2r
#define MODIFY_AN_X4_LP_OUI_UP4_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X4_LP_OUI_UP4_GEN2r
#define READLN_AN_X4_LP_OUI_UP4_GEN2r BCMI_TSCF_XGXS_READLN_AN_X4_LP_OUI_UP4_GEN2r
#define WRITELN_AN_X4_LP_OUI_UP4_GEN2r BCMI_TSCF_XGXS_WRITELN_AN_X4_LP_OUI_UP4_GEN2r
#define WRITEALL_AN_X4_LP_OUI_UP4_GEN2r BCMI_TSCF_XGXS_WRITEALL_AN_X4_LP_OUI_UP4_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP4_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X4_LP_OUI_UP5_GEN2
 * BLOCKS:   AN_X4_STATUS
 * REGADDR:  0xc1dc
 * DESC:     PSEQ LP OUI UP-5 
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     LP_OUI_UP5       44:32 bits in UP1 page12 -- 44 bits in UP1 page which is CL74_FEC Request in BAM11 -- 43 bits in UP1 page which is CL91_FEC Request in BAM10 -- 42 bits in UP1 page which is HG2 Enabled in BAM9 --  41 bits in UP1 page which is CL74_FEC ability exist8 --  40 bits in UP1 page which is CL91_FEC ability exist7:2 --  39 to 34 bits in UP1 page which reserved1 --  33 bits in UP1 page which is SPEED_50G_CR4 in BAM0 --  32 bits in UP1 page which is SPEED_50G_KR4 in BAM
 */
#define BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP5_GEN2r (0x0000c1dc | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP5_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_LP_OUI_UP5_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP5_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x4_lp_oui_up5_gen2[1];
	uint32_t _an_x4_lp_oui_up5_gen2;
} BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP5_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP5_GEN2r_CLR(r) (r).an_x4_lp_oui_up5_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP5_GEN2r_SET(r,d) (r).an_x4_lp_oui_up5_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP5_GEN2r_GET(r) (r).an_x4_lp_oui_up5_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP5_GEN2r_LP_OUI_UP5f_GET(r) (((r).an_x4_lp_oui_up5_gen2[0]) & 0x1fff)
#define BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP5_GEN2r_LP_OUI_UP5f_SET(r,f) (r).an_x4_lp_oui_up5_gen2[0]=(((r).an_x4_lp_oui_up5_gen2[0] & ~((uint32_t)0x1fff)) | (((uint32_t)f) & 0x1fff)) | (0x1fff << 16)

/*
 * These macros can be used to access AN_X4_LP_OUI_UP5_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X4_LP_OUI_UP5_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP5_GEN2r,(_r._an_x4_lp_oui_up5_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X4_LP_OUI_UP5_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP5_GEN2r,(_r._an_x4_lp_oui_up5_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X4_LP_OUI_UP5_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP5_GEN2r,(_r._an_x4_lp_oui_up5_gen2))
#define BCMI_TSCF_XGXS_READLN_AN_X4_LP_OUI_UP5_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP5_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_lp_oui_up5_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AN_X4_LP_OUI_UP5_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP5_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_lp_oui_up5_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AN_X4_LP_OUI_UP5_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP5_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_lp_oui_up5_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_LP_OUI_UP5_GEN2r BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP5_GEN2r
#define AN_X4_LP_OUI_UP5_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP5_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP5_GEN2r_t AN_X4_LP_OUI_UP5_GEN2r_t;
#define AN_X4_LP_OUI_UP5_GEN2r_CLR BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP5_GEN2r_CLR
#define AN_X4_LP_OUI_UP5_GEN2r_SET BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP5_GEN2r_SET
#define AN_X4_LP_OUI_UP5_GEN2r_GET BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP5_GEN2r_GET
#define AN_X4_LP_OUI_UP5_GEN2r_LP_OUI_UP5f_GET BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP5_GEN2r_LP_OUI_UP5f_GET
#define AN_X4_LP_OUI_UP5_GEN2r_LP_OUI_UP5f_SET BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP5_GEN2r_LP_OUI_UP5f_SET
#define READ_AN_X4_LP_OUI_UP5_GEN2r BCMI_TSCF_XGXS_READ_AN_X4_LP_OUI_UP5_GEN2r
#define WRITE_AN_X4_LP_OUI_UP5_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X4_LP_OUI_UP5_GEN2r
#define MODIFY_AN_X4_LP_OUI_UP5_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X4_LP_OUI_UP5_GEN2r
#define READLN_AN_X4_LP_OUI_UP5_GEN2r BCMI_TSCF_XGXS_READLN_AN_X4_LP_OUI_UP5_GEN2r
#define WRITELN_AN_X4_LP_OUI_UP5_GEN2r BCMI_TSCF_XGXS_WRITELN_AN_X4_LP_OUI_UP5_GEN2r
#define WRITEALL_AN_X4_LP_OUI_UP5_GEN2r BCMI_TSCF_XGXS_WRITEALL_AN_X4_LP_OUI_UP5_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X4_LP_OUI_UP5_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X4_RES_ERR_GEN2
 * BLOCKS:   AN_X4_STATUS
 * REGADDR:  0xc1dd
 * DESC:     RES ERR
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     RESOLUTION_ERROR RES No common speed/mode.
 */
#define BCMI_TSCF_XGXS_AN_X4_RES_ERR_GEN2r (0x0000c1dd | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X4_RES_ERR_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_RES_ERR_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X4_RES_ERR_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x4_res_err_gen2[1];
	uint32_t _an_x4_res_err_gen2;
} BCMI_TSCF_XGXS_AN_X4_RES_ERR_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X4_RES_ERR_GEN2r_CLR(r) (r).an_x4_res_err_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X4_RES_ERR_GEN2r_SET(r,d) (r).an_x4_res_err_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X4_RES_ERR_GEN2r_GET(r) (r).an_x4_res_err_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X4_RES_ERR_GEN2r_RESOLUTION_ERRORf_GET(r) (((r).an_x4_res_err_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_RES_ERR_GEN2r_RESOLUTION_ERRORf_SET(r,f) (r).an_x4_res_err_gen2[0]=(((r).an_x4_res_err_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AN_X4_RES_ERR_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X4_RES_ERR_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_RES_ERR_GEN2r,(_r._an_x4_res_err_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X4_RES_ERR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_RES_ERR_GEN2r,(_r._an_x4_res_err_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X4_RES_ERR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_RES_ERR_GEN2r,(_r._an_x4_res_err_gen2))
#define BCMI_TSCF_XGXS_READLN_AN_X4_RES_ERR_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_RES_ERR_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_res_err_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AN_X4_RES_ERR_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_RES_ERR_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_res_err_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AN_X4_RES_ERR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_RES_ERR_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_res_err_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_RES_ERR_GEN2r BCMI_TSCF_XGXS_AN_X4_RES_ERR_GEN2r
#define AN_X4_RES_ERR_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X4_RES_ERR_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X4_RES_ERR_GEN2r_t AN_X4_RES_ERR_GEN2r_t;
#define AN_X4_RES_ERR_GEN2r_CLR BCMI_TSCF_XGXS_AN_X4_RES_ERR_GEN2r_CLR
#define AN_X4_RES_ERR_GEN2r_SET BCMI_TSCF_XGXS_AN_X4_RES_ERR_GEN2r_SET
#define AN_X4_RES_ERR_GEN2r_GET BCMI_TSCF_XGXS_AN_X4_RES_ERR_GEN2r_GET
#define AN_X4_RES_ERR_GEN2r_RESOLUTION_ERRORf_GET BCMI_TSCF_XGXS_AN_X4_RES_ERR_GEN2r_RESOLUTION_ERRORf_GET
#define AN_X4_RES_ERR_GEN2r_RESOLUTION_ERRORf_SET BCMI_TSCF_XGXS_AN_X4_RES_ERR_GEN2r_RESOLUTION_ERRORf_SET
#define READ_AN_X4_RES_ERR_GEN2r BCMI_TSCF_XGXS_READ_AN_X4_RES_ERR_GEN2r
#define WRITE_AN_X4_RES_ERR_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X4_RES_ERR_GEN2r
#define MODIFY_AN_X4_RES_ERR_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X4_RES_ERR_GEN2r
#define READLN_AN_X4_RES_ERR_GEN2r BCMI_TSCF_XGXS_READLN_AN_X4_RES_ERR_GEN2r
#define WRITELN_AN_X4_RES_ERR_GEN2r BCMI_TSCF_XGXS_WRITELN_AN_X4_RES_ERR_GEN2r
#define WRITEALL_AN_X4_RES_ERR_GEN2r BCMI_TSCF_XGXS_WRITEALL_AN_X4_RES_ERR_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X4_RES_ERR_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X4_LD_PAGE_2_GEN2
 * BLOCKS:   AN_X4_SW_MGMT
 * REGADDR:  0xc1e0
 * DESC:     LOCAL DEVICE SW CONTROL PAGE 2
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LD_PAGE_2        LOCAL DEVICE PAGE 2 FIELD
 */
#define BCMI_TSCF_XGXS_AN_X4_LD_PAGE_2_GEN2r (0x0000c1e0 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X4_LD_PAGE_2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_LD_PAGE_2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X4_LD_PAGE_2_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x4_ld_page_2_gen2[1];
	uint32_t _an_x4_ld_page_2_gen2;
} BCMI_TSCF_XGXS_AN_X4_LD_PAGE_2_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X4_LD_PAGE_2_GEN2r_CLR(r) (r).an_x4_ld_page_2_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X4_LD_PAGE_2_GEN2r_SET(r,d) (r).an_x4_ld_page_2_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X4_LD_PAGE_2_GEN2r_GET(r) (r).an_x4_ld_page_2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X4_LD_PAGE_2_GEN2r_LD_PAGE_2f_GET(r) (((r).an_x4_ld_page_2_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_AN_X4_LD_PAGE_2_GEN2r_LD_PAGE_2f_SET(r,f) (r).an_x4_ld_page_2_gen2[0]=(((r).an_x4_ld_page_2_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AN_X4_LD_PAGE_2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X4_LD_PAGE_2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_LD_PAGE_2_GEN2r,(_r._an_x4_ld_page_2_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X4_LD_PAGE_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LD_PAGE_2_GEN2r,(_r._an_x4_ld_page_2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X4_LD_PAGE_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LD_PAGE_2_GEN2r,(_r._an_x4_ld_page_2_gen2))
#define BCMI_TSCF_XGXS_READLN_AN_X4_LD_PAGE_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_LD_PAGE_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_page_2_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AN_X4_LD_PAGE_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LD_PAGE_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_page_2_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AN_X4_LD_PAGE_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LD_PAGE_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_ld_page_2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_LD_PAGE_2_GEN2r BCMI_TSCF_XGXS_AN_X4_LD_PAGE_2_GEN2r
#define AN_X4_LD_PAGE_2_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X4_LD_PAGE_2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X4_LD_PAGE_2_GEN2r_t AN_X4_LD_PAGE_2_GEN2r_t;
#define AN_X4_LD_PAGE_2_GEN2r_CLR BCMI_TSCF_XGXS_AN_X4_LD_PAGE_2_GEN2r_CLR
#define AN_X4_LD_PAGE_2_GEN2r_SET BCMI_TSCF_XGXS_AN_X4_LD_PAGE_2_GEN2r_SET
#define AN_X4_LD_PAGE_2_GEN2r_GET BCMI_TSCF_XGXS_AN_X4_LD_PAGE_2_GEN2r_GET
#define AN_X4_LD_PAGE_2_GEN2r_LD_PAGE_2f_GET BCMI_TSCF_XGXS_AN_X4_LD_PAGE_2_GEN2r_LD_PAGE_2f_GET
#define AN_X4_LD_PAGE_2_GEN2r_LD_PAGE_2f_SET BCMI_TSCF_XGXS_AN_X4_LD_PAGE_2_GEN2r_LD_PAGE_2f_SET
#define READ_AN_X4_LD_PAGE_2_GEN2r BCMI_TSCF_XGXS_READ_AN_X4_LD_PAGE_2_GEN2r
#define WRITE_AN_X4_LD_PAGE_2_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X4_LD_PAGE_2_GEN2r
#define MODIFY_AN_X4_LD_PAGE_2_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X4_LD_PAGE_2_GEN2r
#define READLN_AN_X4_LD_PAGE_2_GEN2r BCMI_TSCF_XGXS_READLN_AN_X4_LD_PAGE_2_GEN2r
#define WRITELN_AN_X4_LD_PAGE_2_GEN2r BCMI_TSCF_XGXS_WRITELN_AN_X4_LD_PAGE_2_GEN2r
#define WRITEALL_AN_X4_LD_PAGE_2_GEN2r BCMI_TSCF_XGXS_WRITEALL_AN_X4_LD_PAGE_2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X4_LD_PAGE_2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X4_LD_PAGE_1_GEN2
 * BLOCKS:   AN_X4_SW_MGMT
 * REGADDR:  0xc1e1
 * DESC:     LOCAL DEVICE SW CONTROL PAGE 1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LD_PAGE_1        LOCAL DEVICE PAGE 1 FIELD
 */
#define BCMI_TSCF_XGXS_AN_X4_LD_PAGE_1_GEN2r (0x0000c1e1 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X4_LD_PAGE_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_LD_PAGE_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X4_LD_PAGE_1_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x4_ld_page_1_gen2[1];
	uint32_t _an_x4_ld_page_1_gen2;
} BCMI_TSCF_XGXS_AN_X4_LD_PAGE_1_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X4_LD_PAGE_1_GEN2r_CLR(r) (r).an_x4_ld_page_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X4_LD_PAGE_1_GEN2r_SET(r,d) (r).an_x4_ld_page_1_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X4_LD_PAGE_1_GEN2r_GET(r) (r).an_x4_ld_page_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X4_LD_PAGE_1_GEN2r_LD_PAGE_1f_GET(r) (((r).an_x4_ld_page_1_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_AN_X4_LD_PAGE_1_GEN2r_LD_PAGE_1f_SET(r,f) (r).an_x4_ld_page_1_gen2[0]=(((r).an_x4_ld_page_1_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AN_X4_LD_PAGE_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X4_LD_PAGE_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_LD_PAGE_1_GEN2r,(_r._an_x4_ld_page_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X4_LD_PAGE_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LD_PAGE_1_GEN2r,(_r._an_x4_ld_page_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X4_LD_PAGE_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LD_PAGE_1_GEN2r,(_r._an_x4_ld_page_1_gen2))
#define BCMI_TSCF_XGXS_READLN_AN_X4_LD_PAGE_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_LD_PAGE_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_page_1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AN_X4_LD_PAGE_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LD_PAGE_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_page_1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AN_X4_LD_PAGE_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LD_PAGE_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_ld_page_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_LD_PAGE_1_GEN2r BCMI_TSCF_XGXS_AN_X4_LD_PAGE_1_GEN2r
#define AN_X4_LD_PAGE_1_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X4_LD_PAGE_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X4_LD_PAGE_1_GEN2r_t AN_X4_LD_PAGE_1_GEN2r_t;
#define AN_X4_LD_PAGE_1_GEN2r_CLR BCMI_TSCF_XGXS_AN_X4_LD_PAGE_1_GEN2r_CLR
#define AN_X4_LD_PAGE_1_GEN2r_SET BCMI_TSCF_XGXS_AN_X4_LD_PAGE_1_GEN2r_SET
#define AN_X4_LD_PAGE_1_GEN2r_GET BCMI_TSCF_XGXS_AN_X4_LD_PAGE_1_GEN2r_GET
#define AN_X4_LD_PAGE_1_GEN2r_LD_PAGE_1f_GET BCMI_TSCF_XGXS_AN_X4_LD_PAGE_1_GEN2r_LD_PAGE_1f_GET
#define AN_X4_LD_PAGE_1_GEN2r_LD_PAGE_1f_SET BCMI_TSCF_XGXS_AN_X4_LD_PAGE_1_GEN2r_LD_PAGE_1f_SET
#define READ_AN_X4_LD_PAGE_1_GEN2r BCMI_TSCF_XGXS_READ_AN_X4_LD_PAGE_1_GEN2r
#define WRITE_AN_X4_LD_PAGE_1_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X4_LD_PAGE_1_GEN2r
#define MODIFY_AN_X4_LD_PAGE_1_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X4_LD_PAGE_1_GEN2r
#define READLN_AN_X4_LD_PAGE_1_GEN2r BCMI_TSCF_XGXS_READLN_AN_X4_LD_PAGE_1_GEN2r
#define WRITELN_AN_X4_LD_PAGE_1_GEN2r BCMI_TSCF_XGXS_WRITELN_AN_X4_LD_PAGE_1_GEN2r
#define WRITEALL_AN_X4_LD_PAGE_1_GEN2r BCMI_TSCF_XGXS_WRITEALL_AN_X4_LD_PAGE_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X4_LD_PAGE_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X4_LD_PAGE_0_GEN2
 * BLOCKS:   AN_X4_SW_MGMT
 * REGADDR:  0xc1e2
 * DESC:     LOCAL DEVICE SW CONTROL PAGE 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LD_PAGE_0        LOCAL DEVICE PAGE 0 FIELD
 */
#define BCMI_TSCF_XGXS_AN_X4_LD_PAGE_0_GEN2r (0x0000c1e2 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X4_LD_PAGE_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_LD_PAGE_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X4_LD_PAGE_0_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x4_ld_page_0_gen2[1];
	uint32_t _an_x4_ld_page_0_gen2;
} BCMI_TSCF_XGXS_AN_X4_LD_PAGE_0_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X4_LD_PAGE_0_GEN2r_CLR(r) (r).an_x4_ld_page_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X4_LD_PAGE_0_GEN2r_SET(r,d) (r).an_x4_ld_page_0_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X4_LD_PAGE_0_GEN2r_GET(r) (r).an_x4_ld_page_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X4_LD_PAGE_0_GEN2r_LD_PAGE_0f_GET(r) (((r).an_x4_ld_page_0_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_AN_X4_LD_PAGE_0_GEN2r_LD_PAGE_0f_SET(r,f) (r).an_x4_ld_page_0_gen2[0]=(((r).an_x4_ld_page_0_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AN_X4_LD_PAGE_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X4_LD_PAGE_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_LD_PAGE_0_GEN2r,(_r._an_x4_ld_page_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X4_LD_PAGE_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LD_PAGE_0_GEN2r,(_r._an_x4_ld_page_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X4_LD_PAGE_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LD_PAGE_0_GEN2r,(_r._an_x4_ld_page_0_gen2))
#define BCMI_TSCF_XGXS_READLN_AN_X4_LD_PAGE_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_LD_PAGE_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_page_0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AN_X4_LD_PAGE_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LD_PAGE_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_page_0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AN_X4_LD_PAGE_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LD_PAGE_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_ld_page_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_LD_PAGE_0_GEN2r BCMI_TSCF_XGXS_AN_X4_LD_PAGE_0_GEN2r
#define AN_X4_LD_PAGE_0_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X4_LD_PAGE_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X4_LD_PAGE_0_GEN2r_t AN_X4_LD_PAGE_0_GEN2r_t;
#define AN_X4_LD_PAGE_0_GEN2r_CLR BCMI_TSCF_XGXS_AN_X4_LD_PAGE_0_GEN2r_CLR
#define AN_X4_LD_PAGE_0_GEN2r_SET BCMI_TSCF_XGXS_AN_X4_LD_PAGE_0_GEN2r_SET
#define AN_X4_LD_PAGE_0_GEN2r_GET BCMI_TSCF_XGXS_AN_X4_LD_PAGE_0_GEN2r_GET
#define AN_X4_LD_PAGE_0_GEN2r_LD_PAGE_0f_GET BCMI_TSCF_XGXS_AN_X4_LD_PAGE_0_GEN2r_LD_PAGE_0f_GET
#define AN_X4_LD_PAGE_0_GEN2r_LD_PAGE_0f_SET BCMI_TSCF_XGXS_AN_X4_LD_PAGE_0_GEN2r_LD_PAGE_0f_SET
#define READ_AN_X4_LD_PAGE_0_GEN2r BCMI_TSCF_XGXS_READ_AN_X4_LD_PAGE_0_GEN2r
#define WRITE_AN_X4_LD_PAGE_0_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X4_LD_PAGE_0_GEN2r
#define MODIFY_AN_X4_LD_PAGE_0_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X4_LD_PAGE_0_GEN2r
#define READLN_AN_X4_LD_PAGE_0_GEN2r BCMI_TSCF_XGXS_READLN_AN_X4_LD_PAGE_0_GEN2r
#define WRITELN_AN_X4_LD_PAGE_0_GEN2r BCMI_TSCF_XGXS_WRITELN_AN_X4_LD_PAGE_0_GEN2r
#define WRITEALL_AN_X4_LD_PAGE_0_GEN2r BCMI_TSCF_XGXS_WRITEALL_AN_X4_LD_PAGE_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X4_LD_PAGE_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X4_LP_PAGE_2_GEN2
 * BLOCKS:   AN_X4_SW_MGMT
 * REGADDR:  0xc1e3
 * DESC:     LINK PARNTER SW CONTROL PAGE 2
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     LP_PAGE_2        LINK PARTNER PAGE 2 FIELD
 */
#define BCMI_TSCF_XGXS_AN_X4_LP_PAGE_2_GEN2r (0x0000c1e3 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X4_LP_PAGE_2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_LP_PAGE_2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X4_LP_PAGE_2_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x4_lp_page_2_gen2[1];
	uint32_t _an_x4_lp_page_2_gen2;
} BCMI_TSCF_XGXS_AN_X4_LP_PAGE_2_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X4_LP_PAGE_2_GEN2r_CLR(r) (r).an_x4_lp_page_2_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X4_LP_PAGE_2_GEN2r_SET(r,d) (r).an_x4_lp_page_2_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X4_LP_PAGE_2_GEN2r_GET(r) (r).an_x4_lp_page_2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X4_LP_PAGE_2_GEN2r_LP_PAGE_2f_GET(r) (((r).an_x4_lp_page_2_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_AN_X4_LP_PAGE_2_GEN2r_LP_PAGE_2f_SET(r,f) (r).an_x4_lp_page_2_gen2[0]=(((r).an_x4_lp_page_2_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AN_X4_LP_PAGE_2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X4_LP_PAGE_2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_LP_PAGE_2_GEN2r,(_r._an_x4_lp_page_2_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X4_LP_PAGE_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LP_PAGE_2_GEN2r,(_r._an_x4_lp_page_2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X4_LP_PAGE_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LP_PAGE_2_GEN2r,(_r._an_x4_lp_page_2_gen2))
#define BCMI_TSCF_XGXS_READLN_AN_X4_LP_PAGE_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_LP_PAGE_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_lp_page_2_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AN_X4_LP_PAGE_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LP_PAGE_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_lp_page_2_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AN_X4_LP_PAGE_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LP_PAGE_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_lp_page_2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_LP_PAGE_2_GEN2r BCMI_TSCF_XGXS_AN_X4_LP_PAGE_2_GEN2r
#define AN_X4_LP_PAGE_2_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X4_LP_PAGE_2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X4_LP_PAGE_2_GEN2r_t AN_X4_LP_PAGE_2_GEN2r_t;
#define AN_X4_LP_PAGE_2_GEN2r_CLR BCMI_TSCF_XGXS_AN_X4_LP_PAGE_2_GEN2r_CLR
#define AN_X4_LP_PAGE_2_GEN2r_SET BCMI_TSCF_XGXS_AN_X4_LP_PAGE_2_GEN2r_SET
#define AN_X4_LP_PAGE_2_GEN2r_GET BCMI_TSCF_XGXS_AN_X4_LP_PAGE_2_GEN2r_GET
#define AN_X4_LP_PAGE_2_GEN2r_LP_PAGE_2f_GET BCMI_TSCF_XGXS_AN_X4_LP_PAGE_2_GEN2r_LP_PAGE_2f_GET
#define AN_X4_LP_PAGE_2_GEN2r_LP_PAGE_2f_SET BCMI_TSCF_XGXS_AN_X4_LP_PAGE_2_GEN2r_LP_PAGE_2f_SET
#define READ_AN_X4_LP_PAGE_2_GEN2r BCMI_TSCF_XGXS_READ_AN_X4_LP_PAGE_2_GEN2r
#define WRITE_AN_X4_LP_PAGE_2_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X4_LP_PAGE_2_GEN2r
#define MODIFY_AN_X4_LP_PAGE_2_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X4_LP_PAGE_2_GEN2r
#define READLN_AN_X4_LP_PAGE_2_GEN2r BCMI_TSCF_XGXS_READLN_AN_X4_LP_PAGE_2_GEN2r
#define WRITELN_AN_X4_LP_PAGE_2_GEN2r BCMI_TSCF_XGXS_WRITELN_AN_X4_LP_PAGE_2_GEN2r
#define WRITEALL_AN_X4_LP_PAGE_2_GEN2r BCMI_TSCF_XGXS_WRITEALL_AN_X4_LP_PAGE_2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X4_LP_PAGE_2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X4_LP_PAGE_1_GEN2
 * BLOCKS:   AN_X4_SW_MGMT
 * REGADDR:  0xc1e4
 * DESC:     LINK PARNTER SW CONTROL PAGE 1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     LP_PAGE_1        LINK PARTNER PAGE 1 FIELD
 */
#define BCMI_TSCF_XGXS_AN_X4_LP_PAGE_1_GEN2r (0x0000c1e4 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X4_LP_PAGE_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_LP_PAGE_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X4_LP_PAGE_1_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x4_lp_page_1_gen2[1];
	uint32_t _an_x4_lp_page_1_gen2;
} BCMI_TSCF_XGXS_AN_X4_LP_PAGE_1_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X4_LP_PAGE_1_GEN2r_CLR(r) (r).an_x4_lp_page_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X4_LP_PAGE_1_GEN2r_SET(r,d) (r).an_x4_lp_page_1_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X4_LP_PAGE_1_GEN2r_GET(r) (r).an_x4_lp_page_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X4_LP_PAGE_1_GEN2r_LP_PAGE_1f_GET(r) (((r).an_x4_lp_page_1_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_AN_X4_LP_PAGE_1_GEN2r_LP_PAGE_1f_SET(r,f) (r).an_x4_lp_page_1_gen2[0]=(((r).an_x4_lp_page_1_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AN_X4_LP_PAGE_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X4_LP_PAGE_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_LP_PAGE_1_GEN2r,(_r._an_x4_lp_page_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X4_LP_PAGE_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LP_PAGE_1_GEN2r,(_r._an_x4_lp_page_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X4_LP_PAGE_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LP_PAGE_1_GEN2r,(_r._an_x4_lp_page_1_gen2))
#define BCMI_TSCF_XGXS_READLN_AN_X4_LP_PAGE_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_LP_PAGE_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_lp_page_1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AN_X4_LP_PAGE_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LP_PAGE_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_lp_page_1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AN_X4_LP_PAGE_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LP_PAGE_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_lp_page_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_LP_PAGE_1_GEN2r BCMI_TSCF_XGXS_AN_X4_LP_PAGE_1_GEN2r
#define AN_X4_LP_PAGE_1_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X4_LP_PAGE_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X4_LP_PAGE_1_GEN2r_t AN_X4_LP_PAGE_1_GEN2r_t;
#define AN_X4_LP_PAGE_1_GEN2r_CLR BCMI_TSCF_XGXS_AN_X4_LP_PAGE_1_GEN2r_CLR
#define AN_X4_LP_PAGE_1_GEN2r_SET BCMI_TSCF_XGXS_AN_X4_LP_PAGE_1_GEN2r_SET
#define AN_X4_LP_PAGE_1_GEN2r_GET BCMI_TSCF_XGXS_AN_X4_LP_PAGE_1_GEN2r_GET
#define AN_X4_LP_PAGE_1_GEN2r_LP_PAGE_1f_GET BCMI_TSCF_XGXS_AN_X4_LP_PAGE_1_GEN2r_LP_PAGE_1f_GET
#define AN_X4_LP_PAGE_1_GEN2r_LP_PAGE_1f_SET BCMI_TSCF_XGXS_AN_X4_LP_PAGE_1_GEN2r_LP_PAGE_1f_SET
#define READ_AN_X4_LP_PAGE_1_GEN2r BCMI_TSCF_XGXS_READ_AN_X4_LP_PAGE_1_GEN2r
#define WRITE_AN_X4_LP_PAGE_1_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X4_LP_PAGE_1_GEN2r
#define MODIFY_AN_X4_LP_PAGE_1_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X4_LP_PAGE_1_GEN2r
#define READLN_AN_X4_LP_PAGE_1_GEN2r BCMI_TSCF_XGXS_READLN_AN_X4_LP_PAGE_1_GEN2r
#define WRITELN_AN_X4_LP_PAGE_1_GEN2r BCMI_TSCF_XGXS_WRITELN_AN_X4_LP_PAGE_1_GEN2r
#define WRITEALL_AN_X4_LP_PAGE_1_GEN2r BCMI_TSCF_XGXS_WRITEALL_AN_X4_LP_PAGE_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X4_LP_PAGE_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X4_LP_PAGE_0_GEN2
 * BLOCKS:   AN_X4_SW_MGMT
 * REGADDR:  0xc1e5
 * DESC:     LINK PARNTER SW CONTROL PAGE 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     LP_PAGE_0        LINK PARTNER PAGE 0 FIELD
 */
#define BCMI_TSCF_XGXS_AN_X4_LP_PAGE_0_GEN2r (0x0000c1e5 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X4_LP_PAGE_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_LP_PAGE_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X4_LP_PAGE_0_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x4_lp_page_0_gen2[1];
	uint32_t _an_x4_lp_page_0_gen2;
} BCMI_TSCF_XGXS_AN_X4_LP_PAGE_0_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X4_LP_PAGE_0_GEN2r_CLR(r) (r).an_x4_lp_page_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X4_LP_PAGE_0_GEN2r_SET(r,d) (r).an_x4_lp_page_0_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X4_LP_PAGE_0_GEN2r_GET(r) (r).an_x4_lp_page_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X4_LP_PAGE_0_GEN2r_LP_PAGE_0f_GET(r) (((r).an_x4_lp_page_0_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_AN_X4_LP_PAGE_0_GEN2r_LP_PAGE_0f_SET(r,f) (r).an_x4_lp_page_0_gen2[0]=(((r).an_x4_lp_page_0_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AN_X4_LP_PAGE_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X4_LP_PAGE_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_LP_PAGE_0_GEN2r,(_r._an_x4_lp_page_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X4_LP_PAGE_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LP_PAGE_0_GEN2r,(_r._an_x4_lp_page_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X4_LP_PAGE_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LP_PAGE_0_GEN2r,(_r._an_x4_lp_page_0_gen2))
#define BCMI_TSCF_XGXS_READLN_AN_X4_LP_PAGE_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_LP_PAGE_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_lp_page_0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AN_X4_LP_PAGE_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LP_PAGE_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_lp_page_0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AN_X4_LP_PAGE_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LP_PAGE_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_lp_page_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_LP_PAGE_0_GEN2r BCMI_TSCF_XGXS_AN_X4_LP_PAGE_0_GEN2r
#define AN_X4_LP_PAGE_0_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X4_LP_PAGE_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X4_LP_PAGE_0_GEN2r_t AN_X4_LP_PAGE_0_GEN2r_t;
#define AN_X4_LP_PAGE_0_GEN2r_CLR BCMI_TSCF_XGXS_AN_X4_LP_PAGE_0_GEN2r_CLR
#define AN_X4_LP_PAGE_0_GEN2r_SET BCMI_TSCF_XGXS_AN_X4_LP_PAGE_0_GEN2r_SET
#define AN_X4_LP_PAGE_0_GEN2r_GET BCMI_TSCF_XGXS_AN_X4_LP_PAGE_0_GEN2r_GET
#define AN_X4_LP_PAGE_0_GEN2r_LP_PAGE_0f_GET BCMI_TSCF_XGXS_AN_X4_LP_PAGE_0_GEN2r_LP_PAGE_0f_GET
#define AN_X4_LP_PAGE_0_GEN2r_LP_PAGE_0f_SET BCMI_TSCF_XGXS_AN_X4_LP_PAGE_0_GEN2r_LP_PAGE_0f_SET
#define READ_AN_X4_LP_PAGE_0_GEN2r BCMI_TSCF_XGXS_READ_AN_X4_LP_PAGE_0_GEN2r
#define WRITE_AN_X4_LP_PAGE_0_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X4_LP_PAGE_0_GEN2r
#define MODIFY_AN_X4_LP_PAGE_0_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X4_LP_PAGE_0_GEN2r
#define READLN_AN_X4_LP_PAGE_0_GEN2r BCMI_TSCF_XGXS_READLN_AN_X4_LP_PAGE_0_GEN2r
#define WRITELN_AN_X4_LP_PAGE_0_GEN2r BCMI_TSCF_XGXS_WRITELN_AN_X4_LP_PAGE_0_GEN2r
#define WRITEALL_AN_X4_LP_PAGE_0_GEN2r BCMI_TSCF_XGXS_WRITEALL_AN_X4_LP_PAGE_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X4_LP_PAGE_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X4_SW_CTL_STS_GEN2
 * BLOCKS:   AN_X4_SW_MGMT
 * REGADDR:  0xc1e6
 * DESC:     SW CONTROL STATUS INFORMATION
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TLA_LN_SEQUENCER_FSM_STATUS1 TLA Lane sequencer fsm latched status cont.
 *     PD_CL37_COMPLETED Parallel detect process has selected cl37 and it was completed.
 *     LD_SEQ_RESTART   Set by HW when the CL73 AN FSM enters the TX_DISABLE state.It indicates to SW that it has to restart the page sequence from the base page.Valid when ld_page_req is set.
 *     LP_PAGE_RDY      Set by HW, Clear on Read of lp_page_0
 *     LD_PAGE_REQ      Set by HW to indicate that is ready for page to be sent.
 *     LD_CONTROL_VALID Set by SW write to ld_page_0, Cleared when HW transfers the ld_page'sreflects internal status and used for debug
 *     AN_COMPLETED     All page exchanges have completed
 */
#define BCMI_TSCF_XGXS_AN_X4_SW_CTL_STS_GEN2r (0x0000c1e6 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X4_SW_CTL_STS_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_SW_CTL_STS_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X4_SW_CTL_STS_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x4_sw_ctl_sts_gen2[1];
	uint32_t _an_x4_sw_ctl_sts_gen2;
} BCMI_TSCF_XGXS_AN_X4_SW_CTL_STS_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X4_SW_CTL_STS_GEN2r_CLR(r) (r).an_x4_sw_ctl_sts_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X4_SW_CTL_STS_GEN2r_SET(r,d) (r).an_x4_sw_ctl_sts_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X4_SW_CTL_STS_GEN2r_GET(r) (r).an_x4_sw_ctl_sts_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X4_SW_CTL_STS_GEN2r_AN_COMPLETEDf_GET(r) ((((r).an_x4_sw_ctl_sts_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_SW_CTL_STS_GEN2r_AN_COMPLETEDf_SET(r,f) (r).an_x4_sw_ctl_sts_gen2[0]=(((r).an_x4_sw_ctl_sts_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_AN_X4_SW_CTL_STS_GEN2r_LD_CONTROL_VALIDf_GET(r) ((((r).an_x4_sw_ctl_sts_gen2[0]) >> 14) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_SW_CTL_STS_GEN2r_LD_CONTROL_VALIDf_SET(r,f) (r).an_x4_sw_ctl_sts_gen2[0]=(((r).an_x4_sw_ctl_sts_gen2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_XGXS_AN_X4_SW_CTL_STS_GEN2r_LD_PAGE_REQf_GET(r) ((((r).an_x4_sw_ctl_sts_gen2[0]) >> 13) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_SW_CTL_STS_GEN2r_LD_PAGE_REQf_SET(r,f) (r).an_x4_sw_ctl_sts_gen2[0]=(((r).an_x4_sw_ctl_sts_gen2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_XGXS_AN_X4_SW_CTL_STS_GEN2r_LP_PAGE_RDYf_GET(r) ((((r).an_x4_sw_ctl_sts_gen2[0]) >> 12) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_SW_CTL_STS_GEN2r_LP_PAGE_RDYf_SET(r,f) (r).an_x4_sw_ctl_sts_gen2[0]=(((r).an_x4_sw_ctl_sts_gen2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_TSCF_XGXS_AN_X4_SW_CTL_STS_GEN2r_LD_SEQ_RESTARTf_GET(r) ((((r).an_x4_sw_ctl_sts_gen2[0]) >> 11) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_SW_CTL_STS_GEN2r_LD_SEQ_RESTARTf_SET(r,f) (r).an_x4_sw_ctl_sts_gen2[0]=(((r).an_x4_sw_ctl_sts_gen2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_XGXS_AN_X4_SW_CTL_STS_GEN2r_PD_CL37_COMPLETEDf_GET(r) ((((r).an_x4_sw_ctl_sts_gen2[0]) >> 8) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_SW_CTL_STS_GEN2r_PD_CL37_COMPLETEDf_SET(r,f) (r).an_x4_sw_ctl_sts_gen2[0]=(((r).an_x4_sw_ctl_sts_gen2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_XGXS_AN_X4_SW_CTL_STS_GEN2r_TLA_LN_SEQUENCER_FSM_STATUS1f_GET(r) (((r).an_x4_sw_ctl_sts_gen2[0]) & 0xff)
#define BCMI_TSCF_XGXS_AN_X4_SW_CTL_STS_GEN2r_TLA_LN_SEQUENCER_FSM_STATUS1f_SET(r,f) (r).an_x4_sw_ctl_sts_gen2[0]=(((r).an_x4_sw_ctl_sts_gen2[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access AN_X4_SW_CTL_STS_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X4_SW_CTL_STS_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_SW_CTL_STS_GEN2r,(_r._an_x4_sw_ctl_sts_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X4_SW_CTL_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_SW_CTL_STS_GEN2r,(_r._an_x4_sw_ctl_sts_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X4_SW_CTL_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_SW_CTL_STS_GEN2r,(_r._an_x4_sw_ctl_sts_gen2))
#define BCMI_TSCF_XGXS_READLN_AN_X4_SW_CTL_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_SW_CTL_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_sw_ctl_sts_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AN_X4_SW_CTL_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_SW_CTL_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_sw_ctl_sts_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AN_X4_SW_CTL_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_SW_CTL_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_sw_ctl_sts_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_SW_CTL_STS_GEN2r BCMI_TSCF_XGXS_AN_X4_SW_CTL_STS_GEN2r
#define AN_X4_SW_CTL_STS_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X4_SW_CTL_STS_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X4_SW_CTL_STS_GEN2r_t AN_X4_SW_CTL_STS_GEN2r_t;
#define AN_X4_SW_CTL_STS_GEN2r_CLR BCMI_TSCF_XGXS_AN_X4_SW_CTL_STS_GEN2r_CLR
#define AN_X4_SW_CTL_STS_GEN2r_SET BCMI_TSCF_XGXS_AN_X4_SW_CTL_STS_GEN2r_SET
#define AN_X4_SW_CTL_STS_GEN2r_GET BCMI_TSCF_XGXS_AN_X4_SW_CTL_STS_GEN2r_GET
#define AN_X4_SW_CTL_STS_GEN2r_AN_COMPLETEDf_GET BCMI_TSCF_XGXS_AN_X4_SW_CTL_STS_GEN2r_AN_COMPLETEDf_GET
#define AN_X4_SW_CTL_STS_GEN2r_AN_COMPLETEDf_SET BCMI_TSCF_XGXS_AN_X4_SW_CTL_STS_GEN2r_AN_COMPLETEDf_SET
#define AN_X4_SW_CTL_STS_GEN2r_LD_CONTROL_VALIDf_GET BCMI_TSCF_XGXS_AN_X4_SW_CTL_STS_GEN2r_LD_CONTROL_VALIDf_GET
#define AN_X4_SW_CTL_STS_GEN2r_LD_CONTROL_VALIDf_SET BCMI_TSCF_XGXS_AN_X4_SW_CTL_STS_GEN2r_LD_CONTROL_VALIDf_SET
#define AN_X4_SW_CTL_STS_GEN2r_LD_PAGE_REQf_GET BCMI_TSCF_XGXS_AN_X4_SW_CTL_STS_GEN2r_LD_PAGE_REQf_GET
#define AN_X4_SW_CTL_STS_GEN2r_LD_PAGE_REQf_SET BCMI_TSCF_XGXS_AN_X4_SW_CTL_STS_GEN2r_LD_PAGE_REQf_SET
#define AN_X4_SW_CTL_STS_GEN2r_LP_PAGE_RDYf_GET BCMI_TSCF_XGXS_AN_X4_SW_CTL_STS_GEN2r_LP_PAGE_RDYf_GET
#define AN_X4_SW_CTL_STS_GEN2r_LP_PAGE_RDYf_SET BCMI_TSCF_XGXS_AN_X4_SW_CTL_STS_GEN2r_LP_PAGE_RDYf_SET
#define AN_X4_SW_CTL_STS_GEN2r_LD_SEQ_RESTARTf_GET BCMI_TSCF_XGXS_AN_X4_SW_CTL_STS_GEN2r_LD_SEQ_RESTARTf_GET
#define AN_X4_SW_CTL_STS_GEN2r_LD_SEQ_RESTARTf_SET BCMI_TSCF_XGXS_AN_X4_SW_CTL_STS_GEN2r_LD_SEQ_RESTARTf_SET
#define AN_X4_SW_CTL_STS_GEN2r_PD_CL37_COMPLETEDf_GET BCMI_TSCF_XGXS_AN_X4_SW_CTL_STS_GEN2r_PD_CL37_COMPLETEDf_GET
#define AN_X4_SW_CTL_STS_GEN2r_PD_CL37_COMPLETEDf_SET BCMI_TSCF_XGXS_AN_X4_SW_CTL_STS_GEN2r_PD_CL37_COMPLETEDf_SET
#define AN_X4_SW_CTL_STS_GEN2r_TLA_LN_SEQUENCER_FSM_STATUS1f_GET BCMI_TSCF_XGXS_AN_X4_SW_CTL_STS_GEN2r_TLA_LN_SEQUENCER_FSM_STATUS1f_GET
#define AN_X4_SW_CTL_STS_GEN2r_TLA_LN_SEQUENCER_FSM_STATUS1f_SET BCMI_TSCF_XGXS_AN_X4_SW_CTL_STS_GEN2r_TLA_LN_SEQUENCER_FSM_STATUS1f_SET
#define READ_AN_X4_SW_CTL_STS_GEN2r BCMI_TSCF_XGXS_READ_AN_X4_SW_CTL_STS_GEN2r
#define WRITE_AN_X4_SW_CTL_STS_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X4_SW_CTL_STS_GEN2r
#define MODIFY_AN_X4_SW_CTL_STS_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X4_SW_CTL_STS_GEN2r
#define READLN_AN_X4_SW_CTL_STS_GEN2r BCMI_TSCF_XGXS_READLN_AN_X4_SW_CTL_STS_GEN2r
#define WRITELN_AN_X4_SW_CTL_STS_GEN2r BCMI_TSCF_XGXS_WRITELN_AN_X4_SW_CTL_STS_GEN2r
#define WRITEALL_AN_X4_SW_CTL_STS_GEN2r BCMI_TSCF_XGXS_WRITEALL_AN_X4_SW_CTL_STS_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X4_SW_CTL_STS_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X4_LD_CTL_GEN2
 * BLOCKS:   AN_X4_SW_MGMT
 * REGADDR:  0xc1e7
 * DESC:     LOCAL DEVICE CONTROLS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AN_HCD_RES_DISABLE Indicates HW does not perform HCD
 *     AN_TYPE_SW       Indicates SW managed AN
 */
#define BCMI_TSCF_XGXS_AN_X4_LD_CTL_GEN2r (0x0000c1e7 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X4_LD_CTL_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_LD_CTL_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X4_LD_CTL_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x4_ld_ctl_gen2[1];
	uint32_t _an_x4_ld_ctl_gen2;
} BCMI_TSCF_XGXS_AN_X4_LD_CTL_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X4_LD_CTL_GEN2r_CLR(r) (r).an_x4_ld_ctl_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X4_LD_CTL_GEN2r_SET(r,d) (r).an_x4_ld_ctl_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X4_LD_CTL_GEN2r_GET(r) (r).an_x4_ld_ctl_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X4_LD_CTL_GEN2r_AN_TYPE_SWf_GET(r) ((((r).an_x4_ld_ctl_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_LD_CTL_GEN2r_AN_TYPE_SWf_SET(r,f) (r).an_x4_ld_ctl_gen2[0]=(((r).an_x4_ld_ctl_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_AN_X4_LD_CTL_GEN2r_AN_HCD_RES_DISABLEf_GET(r) (((r).an_x4_ld_ctl_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_LD_CTL_GEN2r_AN_HCD_RES_DISABLEf_SET(r,f) (r).an_x4_ld_ctl_gen2[0]=(((r).an_x4_ld_ctl_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AN_X4_LD_CTL_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X4_LD_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_LD_CTL_GEN2r,(_r._an_x4_ld_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X4_LD_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LD_CTL_GEN2r,(_r._an_x4_ld_ctl_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X4_LD_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LD_CTL_GEN2r,(_r._an_x4_ld_ctl_gen2))
#define BCMI_TSCF_XGXS_READLN_AN_X4_LD_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_LD_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AN_X4_LD_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LD_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_ld_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AN_X4_LD_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_LD_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_ld_ctl_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_LD_CTL_GEN2r BCMI_TSCF_XGXS_AN_X4_LD_CTL_GEN2r
#define AN_X4_LD_CTL_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X4_LD_CTL_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X4_LD_CTL_GEN2r_t AN_X4_LD_CTL_GEN2r_t;
#define AN_X4_LD_CTL_GEN2r_CLR BCMI_TSCF_XGXS_AN_X4_LD_CTL_GEN2r_CLR
#define AN_X4_LD_CTL_GEN2r_SET BCMI_TSCF_XGXS_AN_X4_LD_CTL_GEN2r_SET
#define AN_X4_LD_CTL_GEN2r_GET BCMI_TSCF_XGXS_AN_X4_LD_CTL_GEN2r_GET
#define AN_X4_LD_CTL_GEN2r_AN_TYPE_SWf_GET BCMI_TSCF_XGXS_AN_X4_LD_CTL_GEN2r_AN_TYPE_SWf_GET
#define AN_X4_LD_CTL_GEN2r_AN_TYPE_SWf_SET BCMI_TSCF_XGXS_AN_X4_LD_CTL_GEN2r_AN_TYPE_SWf_SET
#define AN_X4_LD_CTL_GEN2r_AN_HCD_RES_DISABLEf_GET BCMI_TSCF_XGXS_AN_X4_LD_CTL_GEN2r_AN_HCD_RES_DISABLEf_GET
#define AN_X4_LD_CTL_GEN2r_AN_HCD_RES_DISABLEf_SET BCMI_TSCF_XGXS_AN_X4_LD_CTL_GEN2r_AN_HCD_RES_DISABLEf_SET
#define READ_AN_X4_LD_CTL_GEN2r BCMI_TSCF_XGXS_READ_AN_X4_LD_CTL_GEN2r
#define WRITE_AN_X4_LD_CTL_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X4_LD_CTL_GEN2r
#define MODIFY_AN_X4_LD_CTL_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X4_LD_CTL_GEN2r
#define READLN_AN_X4_LD_CTL_GEN2r BCMI_TSCF_XGXS_READLN_AN_X4_LD_CTL_GEN2r
#define WRITELN_AN_X4_LD_CTL_GEN2r BCMI_TSCF_XGXS_WRITELN_AN_X4_LD_CTL_GEN2r
#define WRITEALL_AN_X4_LD_CTL_GEN2r BCMI_TSCF_XGXS_WRITEALL_AN_X4_LD_CTL_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X4_LD_CTL_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X4_AN_ABIL_RESOLUTION_STS_GEN2
 * BLOCKS:   AN_X4_SW_MGMT
 * REGADDR:  0xc1e8
 * DESC:     AN ABILITY RESOLUTION INFORMATION
 * RESETVAL: 0x120 (288)
 * ACCESS:   R/O
 * FIELDS:
 *     AN_HCD_CL72      HCD training ability
 *     AN_HCD_FEC       HCD forward-error correction ability
 *     AN_HCD_SPEED     HCD speedSPEED_10G_KR1       8'h01SPEED_10G_HG2_KR1   8'h05SPEED_20G_CR1       8'h08SPEED_20G_HG2_CR1   8'h0cSPEED_20G_KR1       8'h09SPEED_20G_HG2_KR1   8'h0dSPEED_25G_CR1       8'h10SPEED_25G_HG2_CR1   8'h14SPEED_25G_KR1       8'h11SPEED_25G_HG2_KR1   8'h15SPEED_20G_CR2       8'h18SPEED_20G_HG2_CR2   8'h1cSPEED_20G_KR2       8'h19SPEED_20G_HG2_KR2   8'h1dSPEED_40G_CR2       8'h20SPEED_40G_HG2_CR2   8'h24SPEED_40G_KR2       8'h21SPEED_40G_HG2_KR2   8'h25SPEED_40G_CR4       8'h28SPEED_40G_HG2_CR4   8'h2cSPEED_40G_KR4       8'h29SPEED_40G_HG2_KR4   8'h2dSPEED_50G_CR2       8'h30SPEED_50G_HG2_CR2   8'h34SPEED_50G_KR2       8'h31SPEED_50G_HG2_KR2   8'h35SPEED_50G_CR4       8'h38SPEED_50G_HG2_CR4   8'h3cSPEED_50G_KR4       8'h39SPEED_50G_HG2_KR4   8'h3DSPEED_100G_CR4      8'h40SPEED_100G_HG2_CR4  8'h44SPEED_100G_KR4      8'h41SPEED_100G_HG2_KR4  8'h45SPEED_CL73_20GVCO   8'h48SPEED_CL73_25GVCO   8'h50SPEED_1G_20GVCO     8'h58SPEED_1G_25GVCO     8'h60SPEED_25G_CR_IEEE   8'h70SPEED_25G_CRS_IEEE  8'h71SPEED_25G_KR_IEEE   8'h72SPEED_25G_KRS_IEEE  8'h73
 *     AN_HCD_PAUSE     HCD Pause Ability[11:10]00 - None01 - TX (from LD to LP)10 - RX (from LP to LD)11 - TX/RX (symmetrical)
 *     AN_HCD_DUPLEX    HCD full-duplex ability
 *     HCD_CL91_EN      Resolved HCD CL91 ability for 25G/50G
 *     HCD_DBG_CL74_UP_EN Resolved HCD CL74 ability for 25G/50G VIA USER PAGE
 *     HCD_DBG_CL74_BASE_EN Resolved HCD CL74 ability for 25G/50G VIA BASE PAGE
 */
#define BCMI_TSCF_XGXS_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r (0x0000c1e8 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_AN_ABIL_RESOLUTION_STS_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x4_an_abil_resolution_sts_gen2[1];
	uint32_t _an_x4_an_abil_resolution_sts_gen2;
} BCMI_TSCF_XGXS_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_CLR(r) (r).an_x4_an_abil_resolution_sts_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_SET(r,d) (r).an_x4_an_abil_resolution_sts_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_GET(r) (r).an_x4_an_abil_resolution_sts_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_HCD_DBG_CL74_BASE_ENf_GET(r) ((((r).an_x4_an_abil_resolution_sts_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_HCD_DBG_CL74_BASE_ENf_SET(r,f) (r).an_x4_an_abil_resolution_sts_gen2[0]=(((r).an_x4_an_abil_resolution_sts_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_HCD_DBG_CL74_UP_ENf_GET(r) ((((r).an_x4_an_abil_resolution_sts_gen2[0]) >> 14) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_HCD_DBG_CL74_UP_ENf_SET(r,f) (r).an_x4_an_abil_resolution_sts_gen2[0]=(((r).an_x4_an_abil_resolution_sts_gen2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_XGXS_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_HCD_CL91_ENf_GET(r) ((((r).an_x4_an_abil_resolution_sts_gen2[0]) >> 13) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_HCD_CL91_ENf_SET(r,f) (r).an_x4_an_abil_resolution_sts_gen2[0]=(((r).an_x4_an_abil_resolution_sts_gen2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_XGXS_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_AN_HCD_DUPLEXf_GET(r) ((((r).an_x4_an_abil_resolution_sts_gen2[0]) >> 12) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_AN_HCD_DUPLEXf_SET(r,f) (r).an_x4_an_abil_resolution_sts_gen2[0]=(((r).an_x4_an_abil_resolution_sts_gen2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_TSCF_XGXS_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_AN_HCD_PAUSEf_GET(r) ((((r).an_x4_an_abil_resolution_sts_gen2[0]) >> 10) & 0x3)
#define BCMI_TSCF_XGXS_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_AN_HCD_PAUSEf_SET(r,f) (r).an_x4_an_abil_resolution_sts_gen2[0]=(((r).an_x4_an_abil_resolution_sts_gen2[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10)) | (3 << (16 + 10))
#define BCMI_TSCF_XGXS_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_AN_HCD_SPEEDf_GET(r) ((((r).an_x4_an_abil_resolution_sts_gen2[0]) >> 2) & 0xff)
#define BCMI_TSCF_XGXS_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_AN_HCD_SPEEDf_SET(r,f) (r).an_x4_an_abil_resolution_sts_gen2[0]=(((r).an_x4_an_abil_resolution_sts_gen2[0] & ~((uint32_t)0xff << 2)) | ((((uint32_t)f) & 0xff) << 2)) | (255 << (16 + 2))
#define BCMI_TSCF_XGXS_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_AN_HCD_FECf_GET(r) ((((r).an_x4_an_abil_resolution_sts_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_AN_HCD_FECf_SET(r,f) (r).an_x4_an_abil_resolution_sts_gen2[0]=(((r).an_x4_an_abil_resolution_sts_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_AN_HCD_CL72f_GET(r) (((r).an_x4_an_abil_resolution_sts_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_AN_HCD_CL72f_SET(r,f) (r).an_x4_an_abil_resolution_sts_gen2[0]=(((r).an_x4_an_abil_resolution_sts_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AN_X4_AN_ABIL_RESOLUTION_STS_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r,(_r._an_x4_an_abil_resolution_sts_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r,(_r._an_x4_an_abil_resolution_sts_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r,(_r._an_x4_an_abil_resolution_sts_gen2))
#define BCMI_TSCF_XGXS_READLN_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_an_abil_resolution_sts_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_an_abil_resolution_sts_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_an_abil_resolution_sts_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r BCMI_TSCF_XGXS_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r
#define AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_t AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_t;
#define AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_CLR BCMI_TSCF_XGXS_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_CLR
#define AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_SET BCMI_TSCF_XGXS_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_SET
#define AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_GET BCMI_TSCF_XGXS_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_GET
#define AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_HCD_DBG_CL74_BASE_ENf_GET BCMI_TSCF_XGXS_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_HCD_DBG_CL74_BASE_ENf_GET
#define AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_HCD_DBG_CL74_BASE_ENf_SET BCMI_TSCF_XGXS_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_HCD_DBG_CL74_BASE_ENf_SET
#define AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_HCD_DBG_CL74_UP_ENf_GET BCMI_TSCF_XGXS_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_HCD_DBG_CL74_UP_ENf_GET
#define AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_HCD_DBG_CL74_UP_ENf_SET BCMI_TSCF_XGXS_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_HCD_DBG_CL74_UP_ENf_SET
#define AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_HCD_CL91_ENf_GET BCMI_TSCF_XGXS_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_HCD_CL91_ENf_GET
#define AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_HCD_CL91_ENf_SET BCMI_TSCF_XGXS_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_HCD_CL91_ENf_SET
#define AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_AN_HCD_DUPLEXf_GET BCMI_TSCF_XGXS_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_AN_HCD_DUPLEXf_GET
#define AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_AN_HCD_DUPLEXf_SET BCMI_TSCF_XGXS_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_AN_HCD_DUPLEXf_SET
#define AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_AN_HCD_PAUSEf_GET BCMI_TSCF_XGXS_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_AN_HCD_PAUSEf_GET
#define AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_AN_HCD_PAUSEf_SET BCMI_TSCF_XGXS_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_AN_HCD_PAUSEf_SET
#define AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_AN_HCD_SPEEDf_GET BCMI_TSCF_XGXS_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_AN_HCD_SPEEDf_GET
#define AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_AN_HCD_SPEEDf_SET BCMI_TSCF_XGXS_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_AN_HCD_SPEEDf_SET
#define AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_AN_HCD_FECf_GET BCMI_TSCF_XGXS_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_AN_HCD_FECf_GET
#define AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_AN_HCD_FECf_SET BCMI_TSCF_XGXS_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_AN_HCD_FECf_SET
#define AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_AN_HCD_CL72f_GET BCMI_TSCF_XGXS_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_AN_HCD_CL72f_GET
#define AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_AN_HCD_CL72f_SET BCMI_TSCF_XGXS_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r_AN_HCD_CL72f_SET
#define READ_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r BCMI_TSCF_XGXS_READ_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r
#define WRITE_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r
#define MODIFY_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r
#define READLN_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r BCMI_TSCF_XGXS_READLN_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r
#define WRITELN_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r BCMI_TSCF_XGXS_WRITELN_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r
#define WRITEALL_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r BCMI_TSCF_XGXS_WRITEALL_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X4_AN_ABIL_RESOLUTION_STS_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X4_AN_MISC_STS_GEN2
 * BLOCKS:   AN_X4_SW_MGMT
 * REGADDR:  0xc1e9
 * DESC:     MISCILLANEOUS AN STATUS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     PD_IN_PROGRESS   Currently Parallel detect is active
 *     AN_FAIL_COUNT    Number of AN retries due to AN failureSaturate, Clear on Read
 *     AN_ACTIVE        Auto-neg in progress
 *     PD_COMPLETED     Parallel detect process is
 *     SPEED_FORCE      Speed Force by AN_SEQ
 *     AN_RETRY_COUNT   Number of AN retried for any reason while performing HW-AN (NOT APPLICABLE FOR SW_AN)Saturate, Clear on Read
 *     AN_COMPLETE      AN Sequencer has completed Auto Neg
 */
#define BCMI_TSCF_XGXS_AN_X4_AN_MISC_STS_GEN2r (0x0000c1e9 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X4_AN_MISC_STS_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_AN_MISC_STS_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X4_AN_MISC_STS_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x4_an_misc_sts_gen2[1];
	uint32_t _an_x4_an_misc_sts_gen2;
} BCMI_TSCF_XGXS_AN_X4_AN_MISC_STS_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X4_AN_MISC_STS_GEN2r_CLR(r) (r).an_x4_an_misc_sts_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X4_AN_MISC_STS_GEN2r_SET(r,d) (r).an_x4_an_misc_sts_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X4_AN_MISC_STS_GEN2r_GET(r) (r).an_x4_an_misc_sts_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X4_AN_MISC_STS_GEN2r_AN_COMPLETEf_GET(r) ((((r).an_x4_an_misc_sts_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_AN_MISC_STS_GEN2r_AN_COMPLETEf_SET(r,f) (r).an_x4_an_misc_sts_gen2[0]=(((r).an_x4_an_misc_sts_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_AN_X4_AN_MISC_STS_GEN2r_AN_RETRY_COUNTf_GET(r) ((((r).an_x4_an_misc_sts_gen2[0]) >> 9) & 0x3f)
#define BCMI_TSCF_XGXS_AN_X4_AN_MISC_STS_GEN2r_AN_RETRY_COUNTf_SET(r,f) (r).an_x4_an_misc_sts_gen2[0]=(((r).an_x4_an_misc_sts_gen2[0] & ~((uint32_t)0x3f << 9)) | ((((uint32_t)f) & 0x3f) << 9)) | (63 << (16 + 9))
#define BCMI_TSCF_XGXS_AN_X4_AN_MISC_STS_GEN2r_SPEED_FORCEf_GET(r) ((((r).an_x4_an_misc_sts_gen2[0]) >> 8) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_AN_MISC_STS_GEN2r_SPEED_FORCEf_SET(r,f) (r).an_x4_an_misc_sts_gen2[0]=(((r).an_x4_an_misc_sts_gen2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_XGXS_AN_X4_AN_MISC_STS_GEN2r_PD_COMPLETEDf_GET(r) ((((r).an_x4_an_misc_sts_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_AN_MISC_STS_GEN2r_PD_COMPLETEDf_SET(r,f) (r).an_x4_an_misc_sts_gen2[0]=(((r).an_x4_an_misc_sts_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_AN_X4_AN_MISC_STS_GEN2r_AN_ACTIVEf_GET(r) ((((r).an_x4_an_misc_sts_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_AN_MISC_STS_GEN2r_AN_ACTIVEf_SET(r,f) (r).an_x4_an_misc_sts_gen2[0]=(((r).an_x4_an_misc_sts_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_AN_X4_AN_MISC_STS_GEN2r_AN_FAIL_COUNTf_GET(r) ((((r).an_x4_an_misc_sts_gen2[0]) >> 2) & 0xf)
#define BCMI_TSCF_XGXS_AN_X4_AN_MISC_STS_GEN2r_AN_FAIL_COUNTf_SET(r,f) (r).an_x4_an_misc_sts_gen2[0]=(((r).an_x4_an_misc_sts_gen2[0] & ~((uint32_t)0xf << 2)) | ((((uint32_t)f) & 0xf) << 2)) | (15 << (16 + 2))
#define BCMI_TSCF_XGXS_AN_X4_AN_MISC_STS_GEN2r_PD_IN_PROGRESSf_GET(r) ((((r).an_x4_an_misc_sts_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_AN_MISC_STS_GEN2r_PD_IN_PROGRESSf_SET(r,f) (r).an_x4_an_misc_sts_gen2[0]=(((r).an_x4_an_misc_sts_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))

/*
 * These macros can be used to access AN_X4_AN_MISC_STS_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X4_AN_MISC_STS_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_AN_MISC_STS_GEN2r,(_r._an_x4_an_misc_sts_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X4_AN_MISC_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_AN_MISC_STS_GEN2r,(_r._an_x4_an_misc_sts_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X4_AN_MISC_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_AN_MISC_STS_GEN2r,(_r._an_x4_an_misc_sts_gen2))
#define BCMI_TSCF_XGXS_READLN_AN_X4_AN_MISC_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_AN_MISC_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_an_misc_sts_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AN_X4_AN_MISC_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_AN_MISC_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_an_misc_sts_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AN_X4_AN_MISC_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_AN_MISC_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_an_misc_sts_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_AN_MISC_STS_GEN2r BCMI_TSCF_XGXS_AN_X4_AN_MISC_STS_GEN2r
#define AN_X4_AN_MISC_STS_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X4_AN_MISC_STS_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X4_AN_MISC_STS_GEN2r_t AN_X4_AN_MISC_STS_GEN2r_t;
#define AN_X4_AN_MISC_STS_GEN2r_CLR BCMI_TSCF_XGXS_AN_X4_AN_MISC_STS_GEN2r_CLR
#define AN_X4_AN_MISC_STS_GEN2r_SET BCMI_TSCF_XGXS_AN_X4_AN_MISC_STS_GEN2r_SET
#define AN_X4_AN_MISC_STS_GEN2r_GET BCMI_TSCF_XGXS_AN_X4_AN_MISC_STS_GEN2r_GET
#define AN_X4_AN_MISC_STS_GEN2r_AN_COMPLETEf_GET BCMI_TSCF_XGXS_AN_X4_AN_MISC_STS_GEN2r_AN_COMPLETEf_GET
#define AN_X4_AN_MISC_STS_GEN2r_AN_COMPLETEf_SET BCMI_TSCF_XGXS_AN_X4_AN_MISC_STS_GEN2r_AN_COMPLETEf_SET
#define AN_X4_AN_MISC_STS_GEN2r_AN_RETRY_COUNTf_GET BCMI_TSCF_XGXS_AN_X4_AN_MISC_STS_GEN2r_AN_RETRY_COUNTf_GET
#define AN_X4_AN_MISC_STS_GEN2r_AN_RETRY_COUNTf_SET BCMI_TSCF_XGXS_AN_X4_AN_MISC_STS_GEN2r_AN_RETRY_COUNTf_SET
#define AN_X4_AN_MISC_STS_GEN2r_SPEED_FORCEf_GET BCMI_TSCF_XGXS_AN_X4_AN_MISC_STS_GEN2r_SPEED_FORCEf_GET
#define AN_X4_AN_MISC_STS_GEN2r_SPEED_FORCEf_SET BCMI_TSCF_XGXS_AN_X4_AN_MISC_STS_GEN2r_SPEED_FORCEf_SET
#define AN_X4_AN_MISC_STS_GEN2r_PD_COMPLETEDf_GET BCMI_TSCF_XGXS_AN_X4_AN_MISC_STS_GEN2r_PD_COMPLETEDf_GET
#define AN_X4_AN_MISC_STS_GEN2r_PD_COMPLETEDf_SET BCMI_TSCF_XGXS_AN_X4_AN_MISC_STS_GEN2r_PD_COMPLETEDf_SET
#define AN_X4_AN_MISC_STS_GEN2r_AN_ACTIVEf_GET BCMI_TSCF_XGXS_AN_X4_AN_MISC_STS_GEN2r_AN_ACTIVEf_GET
#define AN_X4_AN_MISC_STS_GEN2r_AN_ACTIVEf_SET BCMI_TSCF_XGXS_AN_X4_AN_MISC_STS_GEN2r_AN_ACTIVEf_SET
#define AN_X4_AN_MISC_STS_GEN2r_AN_FAIL_COUNTf_GET BCMI_TSCF_XGXS_AN_X4_AN_MISC_STS_GEN2r_AN_FAIL_COUNTf_GET
#define AN_X4_AN_MISC_STS_GEN2r_AN_FAIL_COUNTf_SET BCMI_TSCF_XGXS_AN_X4_AN_MISC_STS_GEN2r_AN_FAIL_COUNTf_SET
#define AN_X4_AN_MISC_STS_GEN2r_PD_IN_PROGRESSf_GET BCMI_TSCF_XGXS_AN_X4_AN_MISC_STS_GEN2r_PD_IN_PROGRESSf_GET
#define AN_X4_AN_MISC_STS_GEN2r_PD_IN_PROGRESSf_SET BCMI_TSCF_XGXS_AN_X4_AN_MISC_STS_GEN2r_PD_IN_PROGRESSf_SET
#define READ_AN_X4_AN_MISC_STS_GEN2r BCMI_TSCF_XGXS_READ_AN_X4_AN_MISC_STS_GEN2r
#define WRITE_AN_X4_AN_MISC_STS_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X4_AN_MISC_STS_GEN2r
#define MODIFY_AN_X4_AN_MISC_STS_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X4_AN_MISC_STS_GEN2r
#define READLN_AN_X4_AN_MISC_STS_GEN2r BCMI_TSCF_XGXS_READLN_AN_X4_AN_MISC_STS_GEN2r
#define WRITELN_AN_X4_AN_MISC_STS_GEN2r BCMI_TSCF_XGXS_WRITELN_AN_X4_AN_MISC_STS_GEN2r
#define WRITEALL_AN_X4_AN_MISC_STS_GEN2r BCMI_TSCF_XGXS_WRITEALL_AN_X4_AN_MISC_STS_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X4_AN_MISC_STS_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X4_TLA_SEQUENCER_STS_GEN2
 * BLOCKS:   AN_X4_SW_MGMT
 * REGADDR:  0xc1ea
 * DESC:     TLA SEQUENCER STATUS
 * RESETVAL: 0x1 (1)
 * ACCESS:   R/W
 * FIELDS:
 *     TLA_SEQ_FSM_STATUS TLA Lane sequencer fsm latched statusClear on read
 */
#define BCMI_TSCF_XGXS_AN_X4_TLA_SEQUENCER_STS_GEN2r (0x0000c1ea | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X4_TLA_SEQUENCER_STS_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_TLA_SEQUENCER_STS_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X4_TLA_SEQUENCER_STS_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x4_tla_sequencer_sts_gen2[1];
	uint32_t _an_x4_tla_sequencer_sts_gen2;
} BCMI_TSCF_XGXS_AN_X4_TLA_SEQUENCER_STS_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X4_TLA_SEQUENCER_STS_GEN2r_CLR(r) (r).an_x4_tla_sequencer_sts_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X4_TLA_SEQUENCER_STS_GEN2r_SET(r,d) (r).an_x4_tla_sequencer_sts_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X4_TLA_SEQUENCER_STS_GEN2r_GET(r) (r).an_x4_tla_sequencer_sts_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X4_TLA_SEQUENCER_STS_GEN2r_TLA_SEQ_FSM_STATUSf_GET(r) (((r).an_x4_tla_sequencer_sts_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_AN_X4_TLA_SEQUENCER_STS_GEN2r_TLA_SEQ_FSM_STATUSf_SET(r,f) (r).an_x4_tla_sequencer_sts_gen2[0]=(((r).an_x4_tla_sequencer_sts_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AN_X4_TLA_SEQUENCER_STS_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X4_TLA_SEQUENCER_STS_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_TLA_SEQUENCER_STS_GEN2r,(_r._an_x4_tla_sequencer_sts_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X4_TLA_SEQUENCER_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_TLA_SEQUENCER_STS_GEN2r,(_r._an_x4_tla_sequencer_sts_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X4_TLA_SEQUENCER_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_TLA_SEQUENCER_STS_GEN2r,(_r._an_x4_tla_sequencer_sts_gen2))
#define BCMI_TSCF_XGXS_READLN_AN_X4_TLA_SEQUENCER_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_TLA_SEQUENCER_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_tla_sequencer_sts_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AN_X4_TLA_SEQUENCER_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_TLA_SEQUENCER_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_tla_sequencer_sts_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AN_X4_TLA_SEQUENCER_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_TLA_SEQUENCER_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_tla_sequencer_sts_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_TLA_SEQUENCER_STS_GEN2r BCMI_TSCF_XGXS_AN_X4_TLA_SEQUENCER_STS_GEN2r
#define AN_X4_TLA_SEQUENCER_STS_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X4_TLA_SEQUENCER_STS_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X4_TLA_SEQUENCER_STS_GEN2r_t AN_X4_TLA_SEQUENCER_STS_GEN2r_t;
#define AN_X4_TLA_SEQUENCER_STS_GEN2r_CLR BCMI_TSCF_XGXS_AN_X4_TLA_SEQUENCER_STS_GEN2r_CLR
#define AN_X4_TLA_SEQUENCER_STS_GEN2r_SET BCMI_TSCF_XGXS_AN_X4_TLA_SEQUENCER_STS_GEN2r_SET
#define AN_X4_TLA_SEQUENCER_STS_GEN2r_GET BCMI_TSCF_XGXS_AN_X4_TLA_SEQUENCER_STS_GEN2r_GET
#define AN_X4_TLA_SEQUENCER_STS_GEN2r_TLA_SEQ_FSM_STATUSf_GET BCMI_TSCF_XGXS_AN_X4_TLA_SEQUENCER_STS_GEN2r_TLA_SEQ_FSM_STATUSf_GET
#define AN_X4_TLA_SEQUENCER_STS_GEN2r_TLA_SEQ_FSM_STATUSf_SET BCMI_TSCF_XGXS_AN_X4_TLA_SEQUENCER_STS_GEN2r_TLA_SEQ_FSM_STATUSf_SET
#define READ_AN_X4_TLA_SEQUENCER_STS_GEN2r BCMI_TSCF_XGXS_READ_AN_X4_TLA_SEQUENCER_STS_GEN2r
#define WRITE_AN_X4_TLA_SEQUENCER_STS_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X4_TLA_SEQUENCER_STS_GEN2r
#define MODIFY_AN_X4_TLA_SEQUENCER_STS_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X4_TLA_SEQUENCER_STS_GEN2r
#define READLN_AN_X4_TLA_SEQUENCER_STS_GEN2r BCMI_TSCF_XGXS_READLN_AN_X4_TLA_SEQUENCER_STS_GEN2r
#define WRITELN_AN_X4_TLA_SEQUENCER_STS_GEN2r BCMI_TSCF_XGXS_WRITELN_AN_X4_TLA_SEQUENCER_STS_GEN2r
#define WRITEALL_AN_X4_TLA_SEQUENCER_STS_GEN2r BCMI_TSCF_XGXS_WRITEALL_AN_X4_TLA_SEQUENCER_STS_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X4_TLA_SEQUENCER_STS_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X4_INT_GEN2
 * BLOCKS:   AN_X4_SW_MGMT
 * REGADDR:  0xc1eb
 * DESC:     SW AN and retimer Interrupt
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LP_PAGE_RDY_INT  Link partner's page has been receivedClear on read
 *     LD_PAGE_REQ_INT  Local device is requesting a new page for transmitClear on read
 *     AN_COMPLETED_SW_INT S/W AN page exchange completed indicationClear on read
 *     AN_GOOD_CHK_INT  Entry of port in AN Good check state.Clear on read
 */
#define BCMI_TSCF_XGXS_AN_X4_INT_GEN2r (0x0000c1eb | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X4_INT_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_INT_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X4_INT_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x4_int_gen2[1];
	uint32_t _an_x4_int_gen2;
} BCMI_TSCF_XGXS_AN_X4_INT_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X4_INT_GEN2r_CLR(r) (r).an_x4_int_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X4_INT_GEN2r_SET(r,d) (r).an_x4_int_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X4_INT_GEN2r_GET(r) (r).an_x4_int_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X4_INT_GEN2r_AN_GOOD_CHK_INTf_GET(r) ((((r).an_x4_int_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_INT_GEN2r_AN_GOOD_CHK_INTf_SET(r,f) (r).an_x4_int_gen2[0]=(((r).an_x4_int_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_AN_X4_INT_GEN2r_AN_COMPLETED_SW_INTf_GET(r) ((((r).an_x4_int_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_INT_GEN2r_AN_COMPLETED_SW_INTf_SET(r,f) (r).an_x4_int_gen2[0]=(((r).an_x4_int_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_AN_X4_INT_GEN2r_LD_PAGE_REQ_INTf_GET(r) ((((r).an_x4_int_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_INT_GEN2r_LD_PAGE_REQ_INTf_SET(r,f) (r).an_x4_int_gen2[0]=(((r).an_x4_int_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_AN_X4_INT_GEN2r_LP_PAGE_RDY_INTf_GET(r) (((r).an_x4_int_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_INT_GEN2r_LP_PAGE_RDY_INTf_SET(r,f) (r).an_x4_int_gen2[0]=(((r).an_x4_int_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AN_X4_INT_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X4_INT_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_INT_GEN2r,(_r._an_x4_int_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X4_INT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_INT_GEN2r,(_r._an_x4_int_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X4_INT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_INT_GEN2r,(_r._an_x4_int_gen2))
#define BCMI_TSCF_XGXS_READLN_AN_X4_INT_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_INT_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_int_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AN_X4_INT_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_INT_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_int_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AN_X4_INT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_INT_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_int_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_INT_GEN2r BCMI_TSCF_XGXS_AN_X4_INT_GEN2r
#define AN_X4_INT_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X4_INT_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X4_INT_GEN2r_t AN_X4_INT_GEN2r_t;
#define AN_X4_INT_GEN2r_CLR BCMI_TSCF_XGXS_AN_X4_INT_GEN2r_CLR
#define AN_X4_INT_GEN2r_SET BCMI_TSCF_XGXS_AN_X4_INT_GEN2r_SET
#define AN_X4_INT_GEN2r_GET BCMI_TSCF_XGXS_AN_X4_INT_GEN2r_GET
#define AN_X4_INT_GEN2r_AN_GOOD_CHK_INTf_GET BCMI_TSCF_XGXS_AN_X4_INT_GEN2r_AN_GOOD_CHK_INTf_GET
#define AN_X4_INT_GEN2r_AN_GOOD_CHK_INTf_SET BCMI_TSCF_XGXS_AN_X4_INT_GEN2r_AN_GOOD_CHK_INTf_SET
#define AN_X4_INT_GEN2r_AN_COMPLETED_SW_INTf_GET BCMI_TSCF_XGXS_AN_X4_INT_GEN2r_AN_COMPLETED_SW_INTf_GET
#define AN_X4_INT_GEN2r_AN_COMPLETED_SW_INTf_SET BCMI_TSCF_XGXS_AN_X4_INT_GEN2r_AN_COMPLETED_SW_INTf_SET
#define AN_X4_INT_GEN2r_LD_PAGE_REQ_INTf_GET BCMI_TSCF_XGXS_AN_X4_INT_GEN2r_LD_PAGE_REQ_INTf_GET
#define AN_X4_INT_GEN2r_LD_PAGE_REQ_INTf_SET BCMI_TSCF_XGXS_AN_X4_INT_GEN2r_LD_PAGE_REQ_INTf_SET
#define AN_X4_INT_GEN2r_LP_PAGE_RDY_INTf_GET BCMI_TSCF_XGXS_AN_X4_INT_GEN2r_LP_PAGE_RDY_INTf_GET
#define AN_X4_INT_GEN2r_LP_PAGE_RDY_INTf_SET BCMI_TSCF_XGXS_AN_X4_INT_GEN2r_LP_PAGE_RDY_INTf_SET
#define READ_AN_X4_INT_GEN2r BCMI_TSCF_XGXS_READ_AN_X4_INT_GEN2r
#define WRITE_AN_X4_INT_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X4_INT_GEN2r
#define MODIFY_AN_X4_INT_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X4_INT_GEN2r
#define READLN_AN_X4_INT_GEN2r BCMI_TSCF_XGXS_READLN_AN_X4_INT_GEN2r
#define WRITELN_AN_X4_INT_GEN2r BCMI_TSCF_XGXS_WRITELN_AN_X4_INT_GEN2r
#define WRITEALL_AN_X4_INT_GEN2r BCMI_TSCF_XGXS_WRITEALL_AN_X4_INT_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X4_INT_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X4_INT_EN_GEN2
 * BLOCKS:   AN_X4_SW_MGMT
 * REGADDR:  0xc1ec
 * DESC:     SW AN and retimer Interrupt Enable
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LP_PAGE_RDY_EN   Enable Link partner's page has been receivedWriting 1 will enable this interrupt and interrupt is disable by default.
 *     LD_PAGE_REQ_EN   Enable Local device is requesting a new page for transmitWriting 1 will enable this interrupt and interrupt is disable by default.
 *     AN_COMPLETED_SW_EN Enable S/W AN page exchange completed indicationWriting 1 will enable this interrupt and interrupt is disable by default.
 *     AN_GOOD_CHK_EN   Enable interrupt when AN enters into AN Good check state.Writing 1 will enable this interrupt and interrupt is disable by default.
 */
#define BCMI_TSCF_XGXS_AN_X4_INT_EN_GEN2r (0x0000c1ec | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X4_INT_EN_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_INT_EN_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X4_INT_EN_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x4_int_en_gen2[1];
	uint32_t _an_x4_int_en_gen2;
} BCMI_TSCF_XGXS_AN_X4_INT_EN_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X4_INT_EN_GEN2r_CLR(r) (r).an_x4_int_en_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X4_INT_EN_GEN2r_SET(r,d) (r).an_x4_int_en_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X4_INT_EN_GEN2r_GET(r) (r).an_x4_int_en_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X4_INT_EN_GEN2r_AN_GOOD_CHK_ENf_GET(r) ((((r).an_x4_int_en_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_INT_EN_GEN2r_AN_GOOD_CHK_ENf_SET(r,f) (r).an_x4_int_en_gen2[0]=(((r).an_x4_int_en_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_AN_X4_INT_EN_GEN2r_AN_COMPLETED_SW_ENf_GET(r) ((((r).an_x4_int_en_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_INT_EN_GEN2r_AN_COMPLETED_SW_ENf_SET(r,f) (r).an_x4_int_en_gen2[0]=(((r).an_x4_int_en_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_AN_X4_INT_EN_GEN2r_LD_PAGE_REQ_ENf_GET(r) ((((r).an_x4_int_en_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_INT_EN_GEN2r_LD_PAGE_REQ_ENf_SET(r,f) (r).an_x4_int_en_gen2[0]=(((r).an_x4_int_en_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_AN_X4_INT_EN_GEN2r_LP_PAGE_RDY_ENf_GET(r) (((r).an_x4_int_en_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_INT_EN_GEN2r_LP_PAGE_RDY_ENf_SET(r,f) (r).an_x4_int_en_gen2[0]=(((r).an_x4_int_en_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AN_X4_INT_EN_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X4_INT_EN_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_INT_EN_GEN2r,(_r._an_x4_int_en_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X4_INT_EN_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_INT_EN_GEN2r,(_r._an_x4_int_en_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X4_INT_EN_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_INT_EN_GEN2r,(_r._an_x4_int_en_gen2))
#define BCMI_TSCF_XGXS_READLN_AN_X4_INT_EN_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_INT_EN_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_int_en_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AN_X4_INT_EN_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_INT_EN_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_int_en_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AN_X4_INT_EN_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_INT_EN_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_int_en_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_INT_EN_GEN2r BCMI_TSCF_XGXS_AN_X4_INT_EN_GEN2r
#define AN_X4_INT_EN_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X4_INT_EN_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X4_INT_EN_GEN2r_t AN_X4_INT_EN_GEN2r_t;
#define AN_X4_INT_EN_GEN2r_CLR BCMI_TSCF_XGXS_AN_X4_INT_EN_GEN2r_CLR
#define AN_X4_INT_EN_GEN2r_SET BCMI_TSCF_XGXS_AN_X4_INT_EN_GEN2r_SET
#define AN_X4_INT_EN_GEN2r_GET BCMI_TSCF_XGXS_AN_X4_INT_EN_GEN2r_GET
#define AN_X4_INT_EN_GEN2r_AN_GOOD_CHK_ENf_GET BCMI_TSCF_XGXS_AN_X4_INT_EN_GEN2r_AN_GOOD_CHK_ENf_GET
#define AN_X4_INT_EN_GEN2r_AN_GOOD_CHK_ENf_SET BCMI_TSCF_XGXS_AN_X4_INT_EN_GEN2r_AN_GOOD_CHK_ENf_SET
#define AN_X4_INT_EN_GEN2r_AN_COMPLETED_SW_ENf_GET BCMI_TSCF_XGXS_AN_X4_INT_EN_GEN2r_AN_COMPLETED_SW_ENf_GET
#define AN_X4_INT_EN_GEN2r_AN_COMPLETED_SW_ENf_SET BCMI_TSCF_XGXS_AN_X4_INT_EN_GEN2r_AN_COMPLETED_SW_ENf_SET
#define AN_X4_INT_EN_GEN2r_LD_PAGE_REQ_ENf_GET BCMI_TSCF_XGXS_AN_X4_INT_EN_GEN2r_LD_PAGE_REQ_ENf_GET
#define AN_X4_INT_EN_GEN2r_LD_PAGE_REQ_ENf_SET BCMI_TSCF_XGXS_AN_X4_INT_EN_GEN2r_LD_PAGE_REQ_ENf_SET
#define AN_X4_INT_EN_GEN2r_LP_PAGE_RDY_ENf_GET BCMI_TSCF_XGXS_AN_X4_INT_EN_GEN2r_LP_PAGE_RDY_ENf_GET
#define AN_X4_INT_EN_GEN2r_LP_PAGE_RDY_ENf_SET BCMI_TSCF_XGXS_AN_X4_INT_EN_GEN2r_LP_PAGE_RDY_ENf_SET
#define READ_AN_X4_INT_EN_GEN2r BCMI_TSCF_XGXS_READ_AN_X4_INT_EN_GEN2r
#define WRITE_AN_X4_INT_EN_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X4_INT_EN_GEN2r
#define MODIFY_AN_X4_INT_EN_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X4_INT_EN_GEN2r
#define READLN_AN_X4_INT_EN_GEN2r BCMI_TSCF_XGXS_READLN_AN_X4_INT_EN_GEN2r
#define WRITELN_AN_X4_INT_EN_GEN2r BCMI_TSCF_XGXS_WRITELN_AN_X4_INT_EN_GEN2r
#define WRITEALL_AN_X4_INT_EN_GEN2r BCMI_TSCF_XGXS_WRITEALL_AN_X4_INT_EN_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X4_INT_EN_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AN_X4_WAIT_ACK_COMPLETE_GEN2
 * BLOCKS:   AN_X4_SW_MGMT
 * REGADDR:  0xc1ed
 * DESC:     Wait for ACK register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     WAIT_FOR_ACK_EN  If this bit is set, then FSM will wait for the send_ack bit to be set by SW.
 *     SEND_ACK         Now send ACK for the last page. this is set by SW cleared by HW
 */
#define BCMI_TSCF_XGXS_AN_X4_WAIT_ACK_COMPLETE_GEN2r (0x0000c1ed | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AN_X4_WAIT_ACK_COMPLETE_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AN_X4_WAIT_ACK_COMPLETE_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AN_X4_WAIT_ACK_COMPLETE_GEN2r_s {
	uint32_t v[1];
	uint32_t an_x4_wait_ack_complete_gen2[1];
	uint32_t _an_x4_wait_ack_complete_gen2;
} BCMI_TSCF_XGXS_AN_X4_WAIT_ACK_COMPLETE_GEN2r_t;

#define BCMI_TSCF_XGXS_AN_X4_WAIT_ACK_COMPLETE_GEN2r_CLR(r) (r).an_x4_wait_ack_complete_gen2[0] = 0
#define BCMI_TSCF_XGXS_AN_X4_WAIT_ACK_COMPLETE_GEN2r_SET(r,d) (r).an_x4_wait_ack_complete_gen2[0] = d
#define BCMI_TSCF_XGXS_AN_X4_WAIT_ACK_COMPLETE_GEN2r_GET(r) (r).an_x4_wait_ack_complete_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AN_X4_WAIT_ACK_COMPLETE_GEN2r_SEND_ACKf_GET(r) ((((r).an_x4_wait_ack_complete_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_WAIT_ACK_COMPLETE_GEN2r_SEND_ACKf_SET(r,f) (r).an_x4_wait_ack_complete_gen2[0]=(((r).an_x4_wait_ack_complete_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_AN_X4_WAIT_ACK_COMPLETE_GEN2r_WAIT_FOR_ACK_ENf_GET(r) (((r).an_x4_wait_ack_complete_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_AN_X4_WAIT_ACK_COMPLETE_GEN2r_WAIT_FOR_ACK_ENf_SET(r,f) (r).an_x4_wait_ack_complete_gen2[0]=(((r).an_x4_wait_ack_complete_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AN_X4_WAIT_ACK_COMPLETE_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AN_X4_WAIT_ACK_COMPLETE_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_WAIT_ACK_COMPLETE_GEN2r,(_r._an_x4_wait_ack_complete_gen2))
#define BCMI_TSCF_XGXS_WRITE_AN_X4_WAIT_ACK_COMPLETE_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_WAIT_ACK_COMPLETE_GEN2r,(_r._an_x4_wait_ack_complete_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AN_X4_WAIT_ACK_COMPLETE_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_WAIT_ACK_COMPLETE_GEN2r,(_r._an_x4_wait_ack_complete_gen2))
#define BCMI_TSCF_XGXS_READLN_AN_X4_WAIT_ACK_COMPLETE_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AN_X4_WAIT_ACK_COMPLETE_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_wait_ack_complete_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AN_X4_WAIT_ACK_COMPLETE_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_WAIT_ACK_COMPLETE_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._an_x4_wait_ack_complete_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AN_X4_WAIT_ACK_COMPLETE_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AN_X4_WAIT_ACK_COMPLETE_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._an_x4_wait_ack_complete_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AN_X4_WAIT_ACK_COMPLETE_GEN2r BCMI_TSCF_XGXS_AN_X4_WAIT_ACK_COMPLETE_GEN2r
#define AN_X4_WAIT_ACK_COMPLETE_GEN2r_SIZE BCMI_TSCF_XGXS_AN_X4_WAIT_ACK_COMPLETE_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AN_X4_WAIT_ACK_COMPLETE_GEN2r_t AN_X4_WAIT_ACK_COMPLETE_GEN2r_t;
#define AN_X4_WAIT_ACK_COMPLETE_GEN2r_CLR BCMI_TSCF_XGXS_AN_X4_WAIT_ACK_COMPLETE_GEN2r_CLR
#define AN_X4_WAIT_ACK_COMPLETE_GEN2r_SET BCMI_TSCF_XGXS_AN_X4_WAIT_ACK_COMPLETE_GEN2r_SET
#define AN_X4_WAIT_ACK_COMPLETE_GEN2r_GET BCMI_TSCF_XGXS_AN_X4_WAIT_ACK_COMPLETE_GEN2r_GET
#define AN_X4_WAIT_ACK_COMPLETE_GEN2r_SEND_ACKf_GET BCMI_TSCF_XGXS_AN_X4_WAIT_ACK_COMPLETE_GEN2r_SEND_ACKf_GET
#define AN_X4_WAIT_ACK_COMPLETE_GEN2r_SEND_ACKf_SET BCMI_TSCF_XGXS_AN_X4_WAIT_ACK_COMPLETE_GEN2r_SEND_ACKf_SET
#define AN_X4_WAIT_ACK_COMPLETE_GEN2r_WAIT_FOR_ACK_ENf_GET BCMI_TSCF_XGXS_AN_X4_WAIT_ACK_COMPLETE_GEN2r_WAIT_FOR_ACK_ENf_GET
#define AN_X4_WAIT_ACK_COMPLETE_GEN2r_WAIT_FOR_ACK_ENf_SET BCMI_TSCF_XGXS_AN_X4_WAIT_ACK_COMPLETE_GEN2r_WAIT_FOR_ACK_ENf_SET
#define READ_AN_X4_WAIT_ACK_COMPLETE_GEN2r BCMI_TSCF_XGXS_READ_AN_X4_WAIT_ACK_COMPLETE_GEN2r
#define WRITE_AN_X4_WAIT_ACK_COMPLETE_GEN2r BCMI_TSCF_XGXS_WRITE_AN_X4_WAIT_ACK_COMPLETE_GEN2r
#define MODIFY_AN_X4_WAIT_ACK_COMPLETE_GEN2r BCMI_TSCF_XGXS_MODIFY_AN_X4_WAIT_ACK_COMPLETE_GEN2r
#define READLN_AN_X4_WAIT_ACK_COMPLETE_GEN2r BCMI_TSCF_XGXS_READLN_AN_X4_WAIT_ACK_COMPLETE_GEN2r
#define WRITELN_AN_X4_WAIT_ACK_COMPLETE_GEN2r BCMI_TSCF_XGXS_WRITELN_AN_X4_WAIT_ACK_COMPLETE_GEN2r
#define WRITEALL_AN_X4_WAIT_ACK_COMPLETE_GEN2r BCMI_TSCF_XGXS_WRITEALL_AN_X4_WAIT_ACK_COMPLETE_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AN_X4_WAIT_ACK_COMPLETE_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  ILKN_CTL0_GEN2
 * BLOCKS:   ILKN_X4_CONTROL0
 * REGADDR:  0xc330
 * DESC:     ilkn control 0 register
 * RESETVAL: 0x4 (4)
 * ACCESS:   R/W
 * FIELDS:
 *     WM               Watermark to reach before data from bypass interface is sent on egress data pathWatermark applies to the egress path onlyThe optimal setting of the watermark is between 2 and 6Watermark level of 2 is set for any configuration value of less than 2Watermark level of 6 is set for any configuration value of greater than 6
 *     ILKN_SEL         1 = enable ingress and egress data paths through ilkn bypass logicWhen 0, data paths are connected to the PCS interface
 *     INV_TX_ORDER     1 = when tx20_sel is 1, bit[39:20] from bypass interface is first sent on the egress data path0 = when tx20_sel is 1, bit[19:0] from bypass interface is first sent on the egress data path
 *     INV_RX_ORDER     1 = when rx20_sel is 1, ingress data from serdes is first packed into bit[39:20] of the bypass interface0 = when rx20_sel is 1, ingress data from serdes is first packed into bit[19:0] of the bypass interface
 *     SOFT_RST_TX      1 = reset tx path logic, other register setting is not changed; set bit to 0 for normal operation
 *     SOFT_RST_RX      1 = reset rx path logic, other register setting is not changed; set bit to 0 for normal operation
 *     CREDIT_EN        1 = enable credit generation to bypass interface on the egress pathWhen 0, no credit is issued for the egress path of the bypass interface
 */
#define BCMI_TSCF_XGXS_ILKN_CTL0_GEN2r (0x0000c330 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_ILKN_CTL0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program ILKN_CTL0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_ILKN_CTL0_GEN2r_s {
	uint32_t v[1];
	uint32_t ilkn_ctl0_gen2[1];
	uint32_t _ilkn_ctl0_gen2;
} BCMI_TSCF_XGXS_ILKN_CTL0_GEN2r_t;

#define BCMI_TSCF_XGXS_ILKN_CTL0_GEN2r_CLR(r) (r).ilkn_ctl0_gen2[0] = 0
#define BCMI_TSCF_XGXS_ILKN_CTL0_GEN2r_SET(r,d) (r).ilkn_ctl0_gen2[0] = d
#define BCMI_TSCF_XGXS_ILKN_CTL0_GEN2r_GET(r) (r).ilkn_ctl0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_ILKN_CTL0_GEN2r_CREDIT_ENf_GET(r) ((((r).ilkn_ctl0_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_ILKN_CTL0_GEN2r_CREDIT_ENf_SET(r,f) (r).ilkn_ctl0_gen2[0]=(((r).ilkn_ctl0_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_ILKN_CTL0_GEN2r_SOFT_RST_RXf_GET(r) ((((r).ilkn_ctl0_gen2[0]) >> 9) & 0x1)
#define BCMI_TSCF_XGXS_ILKN_CTL0_GEN2r_SOFT_RST_RXf_SET(r,f) (r).ilkn_ctl0_gen2[0]=(((r).ilkn_ctl0_gen2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_XGXS_ILKN_CTL0_GEN2r_SOFT_RST_TXf_GET(r) ((((r).ilkn_ctl0_gen2[0]) >> 8) & 0x1)
#define BCMI_TSCF_XGXS_ILKN_CTL0_GEN2r_SOFT_RST_TXf_SET(r,f) (r).ilkn_ctl0_gen2[0]=(((r).ilkn_ctl0_gen2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_XGXS_ILKN_CTL0_GEN2r_INV_RX_ORDERf_GET(r) ((((r).ilkn_ctl0_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_ILKN_CTL0_GEN2r_INV_RX_ORDERf_SET(r,f) (r).ilkn_ctl0_gen2[0]=(((r).ilkn_ctl0_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_ILKN_CTL0_GEN2r_INV_TX_ORDERf_GET(r) ((((r).ilkn_ctl0_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_ILKN_CTL0_GEN2r_INV_TX_ORDERf_SET(r,f) (r).ilkn_ctl0_gen2[0]=(((r).ilkn_ctl0_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_ILKN_CTL0_GEN2r_ILKN_SELf_GET(r) ((((r).ilkn_ctl0_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_ILKN_CTL0_GEN2r_ILKN_SELf_SET(r,f) (r).ilkn_ctl0_gen2[0]=(((r).ilkn_ctl0_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_ILKN_CTL0_GEN2r_WMf_GET(r) (((r).ilkn_ctl0_gen2[0]) & 0xf)
#define BCMI_TSCF_XGXS_ILKN_CTL0_GEN2r_WMf_SET(r,f) (r).ilkn_ctl0_gen2[0]=(((r).ilkn_ctl0_gen2[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access ILKN_CTL0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_ILKN_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_ILKN_CTL0_GEN2r,(_r._ilkn_ctl0_gen2))
#define BCMI_TSCF_XGXS_WRITE_ILKN_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_ILKN_CTL0_GEN2r,(_r._ilkn_ctl0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_ILKN_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_ILKN_CTL0_GEN2r,(_r._ilkn_ctl0_gen2))
#define BCMI_TSCF_XGXS_READLN_ILKN_CTL0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_ILKN_CTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ilkn_ctl0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_ILKN_CTL0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_ILKN_CTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ilkn_ctl0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_ILKN_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_ILKN_CTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ilkn_ctl0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define ILKN_CTL0_GEN2r BCMI_TSCF_XGXS_ILKN_CTL0_GEN2r
#define ILKN_CTL0_GEN2r_SIZE BCMI_TSCF_XGXS_ILKN_CTL0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_ILKN_CTL0_GEN2r_t ILKN_CTL0_GEN2r_t;
#define ILKN_CTL0_GEN2r_CLR BCMI_TSCF_XGXS_ILKN_CTL0_GEN2r_CLR
#define ILKN_CTL0_GEN2r_SET BCMI_TSCF_XGXS_ILKN_CTL0_GEN2r_SET
#define ILKN_CTL0_GEN2r_GET BCMI_TSCF_XGXS_ILKN_CTL0_GEN2r_GET
#define ILKN_CTL0_GEN2r_CREDIT_ENf_GET BCMI_TSCF_XGXS_ILKN_CTL0_GEN2r_CREDIT_ENf_GET
#define ILKN_CTL0_GEN2r_CREDIT_ENf_SET BCMI_TSCF_XGXS_ILKN_CTL0_GEN2r_CREDIT_ENf_SET
#define ILKN_CTL0_GEN2r_SOFT_RST_RXf_GET BCMI_TSCF_XGXS_ILKN_CTL0_GEN2r_SOFT_RST_RXf_GET
#define ILKN_CTL0_GEN2r_SOFT_RST_RXf_SET BCMI_TSCF_XGXS_ILKN_CTL0_GEN2r_SOFT_RST_RXf_SET
#define ILKN_CTL0_GEN2r_SOFT_RST_TXf_GET BCMI_TSCF_XGXS_ILKN_CTL0_GEN2r_SOFT_RST_TXf_GET
#define ILKN_CTL0_GEN2r_SOFT_RST_TXf_SET BCMI_TSCF_XGXS_ILKN_CTL0_GEN2r_SOFT_RST_TXf_SET
#define ILKN_CTL0_GEN2r_INV_RX_ORDERf_GET BCMI_TSCF_XGXS_ILKN_CTL0_GEN2r_INV_RX_ORDERf_GET
#define ILKN_CTL0_GEN2r_INV_RX_ORDERf_SET BCMI_TSCF_XGXS_ILKN_CTL0_GEN2r_INV_RX_ORDERf_SET
#define ILKN_CTL0_GEN2r_INV_TX_ORDERf_GET BCMI_TSCF_XGXS_ILKN_CTL0_GEN2r_INV_TX_ORDERf_GET
#define ILKN_CTL0_GEN2r_INV_TX_ORDERf_SET BCMI_TSCF_XGXS_ILKN_CTL0_GEN2r_INV_TX_ORDERf_SET
#define ILKN_CTL0_GEN2r_ILKN_SELf_GET BCMI_TSCF_XGXS_ILKN_CTL0_GEN2r_ILKN_SELf_GET
#define ILKN_CTL0_GEN2r_ILKN_SELf_SET BCMI_TSCF_XGXS_ILKN_CTL0_GEN2r_ILKN_SELf_SET
#define ILKN_CTL0_GEN2r_WMf_GET BCMI_TSCF_XGXS_ILKN_CTL0_GEN2r_WMf_GET
#define ILKN_CTL0_GEN2r_WMf_SET BCMI_TSCF_XGXS_ILKN_CTL0_GEN2r_WMf_SET
#define READ_ILKN_CTL0_GEN2r BCMI_TSCF_XGXS_READ_ILKN_CTL0_GEN2r
#define WRITE_ILKN_CTL0_GEN2r BCMI_TSCF_XGXS_WRITE_ILKN_CTL0_GEN2r
#define MODIFY_ILKN_CTL0_GEN2r BCMI_TSCF_XGXS_MODIFY_ILKN_CTL0_GEN2r
#define READLN_ILKN_CTL0_GEN2r BCMI_TSCF_XGXS_READLN_ILKN_CTL0_GEN2r
#define WRITELN_ILKN_CTL0_GEN2r BCMI_TSCF_XGXS_WRITELN_ILKN_CTL0_GEN2r
#define WRITEALL_ILKN_CTL0_GEN2r BCMI_TSCF_XGXS_WRITEALL_ILKN_CTL0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_ILKN_CTL0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  ILKN_STS0_GEN2
 * BLOCKS:   ILKN_X4_STATUS0
 * REGADDR:  0xc340
 * DESC:     ilkn status 0 register
 * RESETVAL: 0x11 (17)
 * ACCESS:   R/W
 * FIELDS:
 *     RXFIFO_EMPTY     rxfifo status  - mainly for simulatin and debug purposesreal time rxfifo status in bypass rxclk domain; rxfifo is empty
 *     RXFIFO_FULL      rxfifo status  - mainly for simulatin and debug purposesreal time rxfifo status in serdes rxclk domain; rxfifo is full
 *     RXFIFO_OVERRUN   rxfifo status  - mainly for simulatin and debug purposesreal time rxfifo status in bypass rxclk domain; rxfifo is being written when full
 *     RXFIFO_UNDERRUN  rxfifo status  - mainly for simulatin and debug purposesreal time rxfifo status in bypass rxclk domain; rxfifo is being read when empty
 *     TXFIFO_EMPTY     txfifo status  - mainly for simulatin and debug purposesreal time txfifo status in serdes txwclk domain; txfifo is empty
 *     TXFIFO_FULL      txfifo status  - mainly for simulatin and debug purposesreal time txfifo status in bypass txclk domain; txfifo is full
 *     TXFIFO_OVERRUN   txfifo status  - mainly for simulatin and debug purposesreal time txfifo status in serdes txwclk domain; txfifo is being written when full
 *     TXFIFO_UNDERRUN  txfifo status  - mainly for simulatin and debug purposesreal time txfifo status in serdes txwclk domain; txfifo is being read when empty
 */
#define BCMI_TSCF_XGXS_ILKN_STS0_GEN2r (0x0000c340 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_ILKN_STS0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program ILKN_STS0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_ILKN_STS0_GEN2r_s {
	uint32_t v[1];
	uint32_t ilkn_sts0_gen2[1];
	uint32_t _ilkn_sts0_gen2;
} BCMI_TSCF_XGXS_ILKN_STS0_GEN2r_t;

#define BCMI_TSCF_XGXS_ILKN_STS0_GEN2r_CLR(r) (r).ilkn_sts0_gen2[0] = 0
#define BCMI_TSCF_XGXS_ILKN_STS0_GEN2r_SET(r,d) (r).ilkn_sts0_gen2[0] = d
#define BCMI_TSCF_XGXS_ILKN_STS0_GEN2r_GET(r) (r).ilkn_sts0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_ILKN_STS0_GEN2r_TXFIFO_UNDERRUNf_GET(r) ((((r).ilkn_sts0_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_ILKN_STS0_GEN2r_TXFIFO_UNDERRUNf_SET(r,f) (r).ilkn_sts0_gen2[0]=(((r).ilkn_sts0_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_ILKN_STS0_GEN2r_TXFIFO_OVERRUNf_GET(r) ((((r).ilkn_sts0_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_ILKN_STS0_GEN2r_TXFIFO_OVERRUNf_SET(r,f) (r).ilkn_sts0_gen2[0]=(((r).ilkn_sts0_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_ILKN_STS0_GEN2r_TXFIFO_FULLf_GET(r) ((((r).ilkn_sts0_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_ILKN_STS0_GEN2r_TXFIFO_FULLf_SET(r,f) (r).ilkn_sts0_gen2[0]=(((r).ilkn_sts0_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_ILKN_STS0_GEN2r_TXFIFO_EMPTYf_GET(r) ((((r).ilkn_sts0_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_ILKN_STS0_GEN2r_TXFIFO_EMPTYf_SET(r,f) (r).ilkn_sts0_gen2[0]=(((r).ilkn_sts0_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_ILKN_STS0_GEN2r_RXFIFO_UNDERRUNf_GET(r) ((((r).ilkn_sts0_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_ILKN_STS0_GEN2r_RXFIFO_UNDERRUNf_SET(r,f) (r).ilkn_sts0_gen2[0]=(((r).ilkn_sts0_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_ILKN_STS0_GEN2r_RXFIFO_OVERRUNf_GET(r) ((((r).ilkn_sts0_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_ILKN_STS0_GEN2r_RXFIFO_OVERRUNf_SET(r,f) (r).ilkn_sts0_gen2[0]=(((r).ilkn_sts0_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_ILKN_STS0_GEN2r_RXFIFO_FULLf_GET(r) ((((r).ilkn_sts0_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_ILKN_STS0_GEN2r_RXFIFO_FULLf_SET(r,f) (r).ilkn_sts0_gen2[0]=(((r).ilkn_sts0_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_ILKN_STS0_GEN2r_RXFIFO_EMPTYf_GET(r) (((r).ilkn_sts0_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_ILKN_STS0_GEN2r_RXFIFO_EMPTYf_SET(r,f) (r).ilkn_sts0_gen2[0]=(((r).ilkn_sts0_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access ILKN_STS0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_ILKN_STS0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_ILKN_STS0_GEN2r,(_r._ilkn_sts0_gen2))
#define BCMI_TSCF_XGXS_WRITE_ILKN_STS0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_ILKN_STS0_GEN2r,(_r._ilkn_sts0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_ILKN_STS0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_ILKN_STS0_GEN2r,(_r._ilkn_sts0_gen2))
#define BCMI_TSCF_XGXS_READLN_ILKN_STS0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_ILKN_STS0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ilkn_sts0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_ILKN_STS0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_ILKN_STS0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ilkn_sts0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_ILKN_STS0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_ILKN_STS0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ilkn_sts0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define ILKN_STS0_GEN2r BCMI_TSCF_XGXS_ILKN_STS0_GEN2r
#define ILKN_STS0_GEN2r_SIZE BCMI_TSCF_XGXS_ILKN_STS0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_ILKN_STS0_GEN2r_t ILKN_STS0_GEN2r_t;
#define ILKN_STS0_GEN2r_CLR BCMI_TSCF_XGXS_ILKN_STS0_GEN2r_CLR
#define ILKN_STS0_GEN2r_SET BCMI_TSCF_XGXS_ILKN_STS0_GEN2r_SET
#define ILKN_STS0_GEN2r_GET BCMI_TSCF_XGXS_ILKN_STS0_GEN2r_GET
#define ILKN_STS0_GEN2r_TXFIFO_UNDERRUNf_GET BCMI_TSCF_XGXS_ILKN_STS0_GEN2r_TXFIFO_UNDERRUNf_GET
#define ILKN_STS0_GEN2r_TXFIFO_UNDERRUNf_SET BCMI_TSCF_XGXS_ILKN_STS0_GEN2r_TXFIFO_UNDERRUNf_SET
#define ILKN_STS0_GEN2r_TXFIFO_OVERRUNf_GET BCMI_TSCF_XGXS_ILKN_STS0_GEN2r_TXFIFO_OVERRUNf_GET
#define ILKN_STS0_GEN2r_TXFIFO_OVERRUNf_SET BCMI_TSCF_XGXS_ILKN_STS0_GEN2r_TXFIFO_OVERRUNf_SET
#define ILKN_STS0_GEN2r_TXFIFO_FULLf_GET BCMI_TSCF_XGXS_ILKN_STS0_GEN2r_TXFIFO_FULLf_GET
#define ILKN_STS0_GEN2r_TXFIFO_FULLf_SET BCMI_TSCF_XGXS_ILKN_STS0_GEN2r_TXFIFO_FULLf_SET
#define ILKN_STS0_GEN2r_TXFIFO_EMPTYf_GET BCMI_TSCF_XGXS_ILKN_STS0_GEN2r_TXFIFO_EMPTYf_GET
#define ILKN_STS0_GEN2r_TXFIFO_EMPTYf_SET BCMI_TSCF_XGXS_ILKN_STS0_GEN2r_TXFIFO_EMPTYf_SET
#define ILKN_STS0_GEN2r_RXFIFO_UNDERRUNf_GET BCMI_TSCF_XGXS_ILKN_STS0_GEN2r_RXFIFO_UNDERRUNf_GET
#define ILKN_STS0_GEN2r_RXFIFO_UNDERRUNf_SET BCMI_TSCF_XGXS_ILKN_STS0_GEN2r_RXFIFO_UNDERRUNf_SET
#define ILKN_STS0_GEN2r_RXFIFO_OVERRUNf_GET BCMI_TSCF_XGXS_ILKN_STS0_GEN2r_RXFIFO_OVERRUNf_GET
#define ILKN_STS0_GEN2r_RXFIFO_OVERRUNf_SET BCMI_TSCF_XGXS_ILKN_STS0_GEN2r_RXFIFO_OVERRUNf_SET
#define ILKN_STS0_GEN2r_RXFIFO_FULLf_GET BCMI_TSCF_XGXS_ILKN_STS0_GEN2r_RXFIFO_FULLf_GET
#define ILKN_STS0_GEN2r_RXFIFO_FULLf_SET BCMI_TSCF_XGXS_ILKN_STS0_GEN2r_RXFIFO_FULLf_SET
#define ILKN_STS0_GEN2r_RXFIFO_EMPTYf_GET BCMI_TSCF_XGXS_ILKN_STS0_GEN2r_RXFIFO_EMPTYf_GET
#define ILKN_STS0_GEN2r_RXFIFO_EMPTYf_SET BCMI_TSCF_XGXS_ILKN_STS0_GEN2r_RXFIFO_EMPTYf_SET
#define READ_ILKN_STS0_GEN2r BCMI_TSCF_XGXS_READ_ILKN_STS0_GEN2r
#define WRITE_ILKN_STS0_GEN2r BCMI_TSCF_XGXS_WRITE_ILKN_STS0_GEN2r
#define MODIFY_ILKN_STS0_GEN2r BCMI_TSCF_XGXS_MODIFY_ILKN_STS0_GEN2r
#define READLN_ILKN_STS0_GEN2r BCMI_TSCF_XGXS_READLN_ILKN_STS0_GEN2r
#define WRITELN_ILKN_STS0_GEN2r BCMI_TSCF_XGXS_WRITELN_ILKN_STS0_GEN2r
#define WRITEALL_ILKN_STS0_GEN2r BCMI_TSCF_XGXS_WRITEALL_ILKN_STS0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_ILKN_STS0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_FEC_ALGN_FSM_ST_GEN2
 * BLOCKS:   RX_X4_CL91_STATUS0
 * REGADDR:  0xc350
 * DESC:     fec alignment status
 * RESETVAL: 0x8 (8)
 * ACCESS:   R/W
 * FIELDS:
 *     CL91_FEC_ALGN_FSM_LIVE_STATE FEC alignment FSM current state
 *     CL91_FEC_ALGN_FSM_LATCHED_STATE FEC alignment FSM latched stateEach bit represents a particular state. The bit positions for each state is shown belowThe register clears only when read. It is not cleared even on pipeline reset.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_ALGN_FSM_ST_GEN2r (0x0000c350 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_FEC_ALGN_FSM_ST_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_ALGN_FSM_ST_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_FEC_ALGN_FSM_ST_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_algn_fsm_st_gen2[1];
	uint32_t _rx_x4_fec_algn_fsm_st_gen2;
} BCMI_TSCF_XGXS_RX_X4_FEC_ALGN_FSM_ST_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_FEC_ALGN_FSM_ST_GEN2r_CLR(r) (r).rx_x4_fec_algn_fsm_st_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_FEC_ALGN_FSM_ST_GEN2r_SET(r,d) (r).rx_x4_fec_algn_fsm_st_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_FEC_ALGN_FSM_ST_GEN2r_GET(r) (r).rx_x4_fec_algn_fsm_st_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_ALGN_FSM_ST_GEN2r_CL91_FEC_ALGN_FSM_LATCHED_STATEf_GET(r) ((((r).rx_x4_fec_algn_fsm_st_gen2[0]) >> 3) & 0x7f)
#define BCMI_TSCF_XGXS_RX_X4_FEC_ALGN_FSM_ST_GEN2r_CL91_FEC_ALGN_FSM_LATCHED_STATEf_SET(r,f) (r).rx_x4_fec_algn_fsm_st_gen2[0]=(((r).rx_x4_fec_algn_fsm_st_gen2[0] & ~((uint32_t)0x7f << 3)) | ((((uint32_t)f) & 0x7f) << 3)) | (127 << (16 + 3))
#define BCMI_TSCF_XGXS_RX_X4_FEC_ALGN_FSM_ST_GEN2r_CL91_FEC_ALGN_FSM_LIVE_STATEf_GET(r) (((r).rx_x4_fec_algn_fsm_st_gen2[0]) & 0x7)
#define BCMI_TSCF_XGXS_RX_X4_FEC_ALGN_FSM_ST_GEN2r_CL91_FEC_ALGN_FSM_LIVE_STATEf_SET(r,f) (r).rx_x4_fec_algn_fsm_st_gen2[0]=(((r).rx_x4_fec_algn_fsm_st_gen2[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access RX_X4_FEC_ALGN_FSM_ST_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_FEC_ALGN_FSM_ST_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_ALGN_FSM_ST_GEN2r,(_r._rx_x4_fec_algn_fsm_st_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_ALGN_FSM_ST_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_ALGN_FSM_ST_GEN2r,(_r._rx_x4_fec_algn_fsm_st_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_ALGN_FSM_ST_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_ALGN_FSM_ST_GEN2r,(_r._rx_x4_fec_algn_fsm_st_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_FEC_ALGN_FSM_ST_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_ALGN_FSM_ST_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_algn_fsm_st_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_ALGN_FSM_ST_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_ALGN_FSM_ST_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_algn_fsm_st_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_ALGN_FSM_ST_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_ALGN_FSM_ST_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_algn_fsm_st_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_ALGN_FSM_ST_GEN2r BCMI_TSCF_XGXS_RX_X4_FEC_ALGN_FSM_ST_GEN2r
#define RX_X4_FEC_ALGN_FSM_ST_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_FEC_ALGN_FSM_ST_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_FEC_ALGN_FSM_ST_GEN2r_t RX_X4_FEC_ALGN_FSM_ST_GEN2r_t;
#define RX_X4_FEC_ALGN_FSM_ST_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_FEC_ALGN_FSM_ST_GEN2r_CLR
#define RX_X4_FEC_ALGN_FSM_ST_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_FEC_ALGN_FSM_ST_GEN2r_SET
#define RX_X4_FEC_ALGN_FSM_ST_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_FEC_ALGN_FSM_ST_GEN2r_GET
#define RX_X4_FEC_ALGN_FSM_ST_GEN2r_CL91_FEC_ALGN_FSM_LATCHED_STATEf_GET BCMI_TSCF_XGXS_RX_X4_FEC_ALGN_FSM_ST_GEN2r_CL91_FEC_ALGN_FSM_LATCHED_STATEf_GET
#define RX_X4_FEC_ALGN_FSM_ST_GEN2r_CL91_FEC_ALGN_FSM_LATCHED_STATEf_SET BCMI_TSCF_XGXS_RX_X4_FEC_ALGN_FSM_ST_GEN2r_CL91_FEC_ALGN_FSM_LATCHED_STATEf_SET
#define RX_X4_FEC_ALGN_FSM_ST_GEN2r_CL91_FEC_ALGN_FSM_LIVE_STATEf_GET BCMI_TSCF_XGXS_RX_X4_FEC_ALGN_FSM_ST_GEN2r_CL91_FEC_ALGN_FSM_LIVE_STATEf_GET
#define RX_X4_FEC_ALGN_FSM_ST_GEN2r_CL91_FEC_ALGN_FSM_LIVE_STATEf_SET BCMI_TSCF_XGXS_RX_X4_FEC_ALGN_FSM_ST_GEN2r_CL91_FEC_ALGN_FSM_LIVE_STATEf_SET
#define READ_RX_X4_FEC_ALGN_FSM_ST_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_FEC_ALGN_FSM_ST_GEN2r
#define WRITE_RX_X4_FEC_ALGN_FSM_ST_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_ALGN_FSM_ST_GEN2r
#define MODIFY_RX_X4_FEC_ALGN_FSM_ST_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_ALGN_FSM_ST_GEN2r
#define READLN_RX_X4_FEC_ALGN_FSM_ST_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_FEC_ALGN_FSM_ST_GEN2r
#define WRITELN_RX_X4_FEC_ALGN_FSM_ST_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_ALGN_FSM_ST_GEN2r
#define WRITEALL_RX_X4_FEC_ALGN_FSM_ST_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_ALGN_FSM_ST_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_FEC_ALGN_FSM_ST_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_CL91_RXP_STS_GEN2
 * BLOCKS:   RX_X4_CL91_STATUS0
 * REGADDR:  0xc351
 * DESC:     cl91 rxp status indicators
 * RESETVAL: 0x600 (1536)
 * ACCESS:   R/W
 * FIELDS:
 *     RESTART_LOCK_LIVE Set by the FEC alignment FSM in the deskew stage to reset the synchronization process on all FEC lanes
 *     RESTART_LOCK_LL  Latched low version of restart_lock_live
 *     RESTART_LOCK_LH  Latched high version of restart_lock_live
 *     FEC_ALIGN_STATUS_LIVE Set when deskew is achieved successfully.
 *     FEC_ALIGN_STATUS_LL Latched low version of fec_align_status_live
 *     FEC_ALIGN_STATUS_LH Latched high version of fec_align_status_live
 *     HI_SER_LIVE      When FEC_bypass_indication_enable is set, this bit is set to 1 if the number of RS-FEC symbol errors in a window of 8192 (or 128) codewords exceeds the threshold (K) and is set to 0 otherwise.
 *     HI_SER_LL        Latched low version of hi_ser_live
 *     HI_SER_LH        Latched high version of hi_ser_live
 *     FEC_BYP_CORR_ABILITY Indicates the ability to perform error detection without error correction.
 *     FEC_BYP_IND_ABILITY Indicates the ability to bypass the error indication function.
 */
#define BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r (0x0000c351 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL91_RXP_STS_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_cl91_rxp_sts_gen2[1];
	uint32_t _rx_x4_cl91_rxp_sts_gen2;
} BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_CLR(r) (r).rx_x4_cl91_rxp_sts_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_SET(r,d) (r).rx_x4_cl91_rxp_sts_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_GET(r) (r).rx_x4_cl91_rxp_sts_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_FEC_BYP_IND_ABILITYf_GET(r) ((((r).rx_x4_cl91_rxp_sts_gen2[0]) >> 10) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_FEC_BYP_IND_ABILITYf_SET(r,f) (r).rx_x4_cl91_rxp_sts_gen2[0]=(((r).rx_x4_cl91_rxp_sts_gen2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_FEC_BYP_CORR_ABILITYf_GET(r) ((((r).rx_x4_cl91_rxp_sts_gen2[0]) >> 9) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_FEC_BYP_CORR_ABILITYf_SET(r,f) (r).rx_x4_cl91_rxp_sts_gen2[0]=(((r).rx_x4_cl91_rxp_sts_gen2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_HI_SER_LHf_GET(r) ((((r).rx_x4_cl91_rxp_sts_gen2[0]) >> 8) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_HI_SER_LHf_SET(r,f) (r).rx_x4_cl91_rxp_sts_gen2[0]=(((r).rx_x4_cl91_rxp_sts_gen2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_HI_SER_LLf_GET(r) ((((r).rx_x4_cl91_rxp_sts_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_HI_SER_LLf_SET(r,f) (r).rx_x4_cl91_rxp_sts_gen2[0]=(((r).rx_x4_cl91_rxp_sts_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_HI_SER_LIVEf_GET(r) ((((r).rx_x4_cl91_rxp_sts_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_HI_SER_LIVEf_SET(r,f) (r).rx_x4_cl91_rxp_sts_gen2[0]=(((r).rx_x4_cl91_rxp_sts_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_FEC_ALIGN_STATUS_LHf_GET(r) ((((r).rx_x4_cl91_rxp_sts_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_FEC_ALIGN_STATUS_LHf_SET(r,f) (r).rx_x4_cl91_rxp_sts_gen2[0]=(((r).rx_x4_cl91_rxp_sts_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_FEC_ALIGN_STATUS_LLf_GET(r) ((((r).rx_x4_cl91_rxp_sts_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_FEC_ALIGN_STATUS_LLf_SET(r,f) (r).rx_x4_cl91_rxp_sts_gen2[0]=(((r).rx_x4_cl91_rxp_sts_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_FEC_ALIGN_STATUS_LIVEf_GET(r) ((((r).rx_x4_cl91_rxp_sts_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_FEC_ALIGN_STATUS_LIVEf_SET(r,f) (r).rx_x4_cl91_rxp_sts_gen2[0]=(((r).rx_x4_cl91_rxp_sts_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_RESTART_LOCK_LHf_GET(r) ((((r).rx_x4_cl91_rxp_sts_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_RESTART_LOCK_LHf_SET(r,f) (r).rx_x4_cl91_rxp_sts_gen2[0]=(((r).rx_x4_cl91_rxp_sts_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_RESTART_LOCK_LLf_GET(r) ((((r).rx_x4_cl91_rxp_sts_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_RESTART_LOCK_LLf_SET(r,f) (r).rx_x4_cl91_rxp_sts_gen2[0]=(((r).rx_x4_cl91_rxp_sts_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_RESTART_LOCK_LIVEf_GET(r) (((r).rx_x4_cl91_rxp_sts_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_RESTART_LOCK_LIVEf_SET(r,f) (r).rx_x4_cl91_rxp_sts_gen2[0]=(((r).rx_x4_cl91_rxp_sts_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_X4_CL91_RXP_STS_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_CL91_RXP_STS_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r,(_r._rx_x4_cl91_rxp_sts_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_CL91_RXP_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r,(_r._rx_x4_cl91_rxp_sts_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_CL91_RXP_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r,(_r._rx_x4_cl91_rxp_sts_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_CL91_RXP_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_rxp_sts_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_CL91_RXP_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_rxp_sts_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL91_RXP_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl91_rxp_sts_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL91_RXP_STS_GEN2r BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r
#define RX_X4_CL91_RXP_STS_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_t RX_X4_CL91_RXP_STS_GEN2r_t;
#define RX_X4_CL91_RXP_STS_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_CLR
#define RX_X4_CL91_RXP_STS_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_SET
#define RX_X4_CL91_RXP_STS_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_GET
#define RX_X4_CL91_RXP_STS_GEN2r_FEC_BYP_IND_ABILITYf_GET BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_FEC_BYP_IND_ABILITYf_GET
#define RX_X4_CL91_RXP_STS_GEN2r_FEC_BYP_IND_ABILITYf_SET BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_FEC_BYP_IND_ABILITYf_SET
#define RX_X4_CL91_RXP_STS_GEN2r_FEC_BYP_CORR_ABILITYf_GET BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_FEC_BYP_CORR_ABILITYf_GET
#define RX_X4_CL91_RXP_STS_GEN2r_FEC_BYP_CORR_ABILITYf_SET BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_FEC_BYP_CORR_ABILITYf_SET
#define RX_X4_CL91_RXP_STS_GEN2r_HI_SER_LHf_GET BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_HI_SER_LHf_GET
#define RX_X4_CL91_RXP_STS_GEN2r_HI_SER_LHf_SET BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_HI_SER_LHf_SET
#define RX_X4_CL91_RXP_STS_GEN2r_HI_SER_LLf_GET BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_HI_SER_LLf_GET
#define RX_X4_CL91_RXP_STS_GEN2r_HI_SER_LLf_SET BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_HI_SER_LLf_SET
#define RX_X4_CL91_RXP_STS_GEN2r_HI_SER_LIVEf_GET BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_HI_SER_LIVEf_GET
#define RX_X4_CL91_RXP_STS_GEN2r_HI_SER_LIVEf_SET BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_HI_SER_LIVEf_SET
#define RX_X4_CL91_RXP_STS_GEN2r_FEC_ALIGN_STATUS_LHf_GET BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_FEC_ALIGN_STATUS_LHf_GET
#define RX_X4_CL91_RXP_STS_GEN2r_FEC_ALIGN_STATUS_LHf_SET BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_FEC_ALIGN_STATUS_LHf_SET
#define RX_X4_CL91_RXP_STS_GEN2r_FEC_ALIGN_STATUS_LLf_GET BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_FEC_ALIGN_STATUS_LLf_GET
#define RX_X4_CL91_RXP_STS_GEN2r_FEC_ALIGN_STATUS_LLf_SET BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_FEC_ALIGN_STATUS_LLf_SET
#define RX_X4_CL91_RXP_STS_GEN2r_FEC_ALIGN_STATUS_LIVEf_GET BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_FEC_ALIGN_STATUS_LIVEf_GET
#define RX_X4_CL91_RXP_STS_GEN2r_FEC_ALIGN_STATUS_LIVEf_SET BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_FEC_ALIGN_STATUS_LIVEf_SET
#define RX_X4_CL91_RXP_STS_GEN2r_RESTART_LOCK_LHf_GET BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_RESTART_LOCK_LHf_GET
#define RX_X4_CL91_RXP_STS_GEN2r_RESTART_LOCK_LHf_SET BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_RESTART_LOCK_LHf_SET
#define RX_X4_CL91_RXP_STS_GEN2r_RESTART_LOCK_LLf_GET BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_RESTART_LOCK_LLf_GET
#define RX_X4_CL91_RXP_STS_GEN2r_RESTART_LOCK_LLf_SET BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_RESTART_LOCK_LLf_SET
#define RX_X4_CL91_RXP_STS_GEN2r_RESTART_LOCK_LIVEf_GET BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_RESTART_LOCK_LIVEf_GET
#define RX_X4_CL91_RXP_STS_GEN2r_RESTART_LOCK_LIVEf_SET BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r_RESTART_LOCK_LIVEf_SET
#define READ_RX_X4_CL91_RXP_STS_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_CL91_RXP_STS_GEN2r
#define WRITE_RX_X4_CL91_RXP_STS_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_CL91_RXP_STS_GEN2r
#define MODIFY_RX_X4_CL91_RXP_STS_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_CL91_RXP_STS_GEN2r
#define READLN_RX_X4_CL91_RXP_STS_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_CL91_RXP_STS_GEN2r
#define WRITELN_RX_X4_CL91_RXP_STS_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_CL91_RXP_STS_GEN2r
#define WRITEALL_RX_X4_CL91_RXP_STS_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL91_RXP_STS_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_CL91_RXP_STS_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_FEC_CORR_CTR_0_GEN2
 * BLOCKS:   RX_X4_CL91_STATUS0
 * REGADDR:  0xc352
 * DESC:     Lower 16 bits of FEC corrected codeword counter
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL91_FEC_CORR_CW_CNTR_LOWER Lower 16 bits of the CL91 FEC corrected code word counter.Counts once for each corrected FEC codeword processed when fec_align_status is true.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORR_CTR_0_GEN2r (0x0000c352 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_FEC_CORR_CTR_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_CORR_CTR_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_FEC_CORR_CTR_0_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_corr_ctr_0_gen2[1];
	uint32_t _rx_x4_fec_corr_ctr_0_gen2;
} BCMI_TSCF_XGXS_RX_X4_FEC_CORR_CTR_0_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_FEC_CORR_CTR_0_GEN2r_CLR(r) (r).rx_x4_fec_corr_ctr_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORR_CTR_0_GEN2r_SET(r,d) (r).rx_x4_fec_corr_ctr_0_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORR_CTR_0_GEN2r_GET(r) (r).rx_x4_fec_corr_ctr_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORR_CTR_0_GEN2r_CL91_FEC_CORR_CW_CNTR_LOWERf_GET(r) (((r).rx_x4_fec_corr_ctr_0_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORR_CTR_0_GEN2r_CL91_FEC_CORR_CW_CNTR_LOWERf_SET(r,f) (r).rx_x4_fec_corr_ctr_0_gen2[0]=(((r).rx_x4_fec_corr_ctr_0_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_CORR_CTR_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_FEC_CORR_CTR_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORR_CTR_0_GEN2r,(_r._rx_x4_fec_corr_ctr_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_CORR_CTR_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORR_CTR_0_GEN2r,(_r._rx_x4_fec_corr_ctr_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_CORR_CTR_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORR_CTR_0_GEN2r,(_r._rx_x4_fec_corr_ctr_0_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_FEC_CORR_CTR_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORR_CTR_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_corr_ctr_0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_CORR_CTR_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORR_CTR_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_corr_ctr_0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_CORR_CTR_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORR_CTR_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_corr_ctr_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_CORR_CTR_0_GEN2r BCMI_TSCF_XGXS_RX_X4_FEC_CORR_CTR_0_GEN2r
#define RX_X4_FEC_CORR_CTR_0_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_FEC_CORR_CTR_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_FEC_CORR_CTR_0_GEN2r_t RX_X4_FEC_CORR_CTR_0_GEN2r_t;
#define RX_X4_FEC_CORR_CTR_0_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_FEC_CORR_CTR_0_GEN2r_CLR
#define RX_X4_FEC_CORR_CTR_0_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_FEC_CORR_CTR_0_GEN2r_SET
#define RX_X4_FEC_CORR_CTR_0_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_FEC_CORR_CTR_0_GEN2r_GET
#define RX_X4_FEC_CORR_CTR_0_GEN2r_CL91_FEC_CORR_CW_CNTR_LOWERf_GET BCMI_TSCF_XGXS_RX_X4_FEC_CORR_CTR_0_GEN2r_CL91_FEC_CORR_CW_CNTR_LOWERf_GET
#define RX_X4_FEC_CORR_CTR_0_GEN2r_CL91_FEC_CORR_CW_CNTR_LOWERf_SET BCMI_TSCF_XGXS_RX_X4_FEC_CORR_CTR_0_GEN2r_CL91_FEC_CORR_CW_CNTR_LOWERf_SET
#define READ_RX_X4_FEC_CORR_CTR_0_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_FEC_CORR_CTR_0_GEN2r
#define WRITE_RX_X4_FEC_CORR_CTR_0_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_CORR_CTR_0_GEN2r
#define MODIFY_RX_X4_FEC_CORR_CTR_0_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_CORR_CTR_0_GEN2r
#define READLN_RX_X4_FEC_CORR_CTR_0_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_FEC_CORR_CTR_0_GEN2r
#define WRITELN_RX_X4_FEC_CORR_CTR_0_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_CORR_CTR_0_GEN2r
#define WRITEALL_RX_X4_FEC_CORR_CTR_0_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_CORR_CTR_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_FEC_CORR_CTR_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_FEC_CORR_CTR_1_GEN2
 * BLOCKS:   RX_X4_CL91_STATUS0
 * REGADDR:  0xc353
 * DESC:     Upper 16 bits of FEC corrected codeword counter
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL91_FEC_CORR_CW_CNTR_UPPER Upper 16 bits of the CL91 FEC corrected code word counter.Read the lower 16 bits firstSaturates on overflow
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORR_CTR_1_GEN2r (0x0000c353 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_FEC_CORR_CTR_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_CORR_CTR_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_FEC_CORR_CTR_1_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_corr_ctr_1_gen2[1];
	uint32_t _rx_x4_fec_corr_ctr_1_gen2;
} BCMI_TSCF_XGXS_RX_X4_FEC_CORR_CTR_1_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_FEC_CORR_CTR_1_GEN2r_CLR(r) (r).rx_x4_fec_corr_ctr_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORR_CTR_1_GEN2r_SET(r,d) (r).rx_x4_fec_corr_ctr_1_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORR_CTR_1_GEN2r_GET(r) (r).rx_x4_fec_corr_ctr_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORR_CTR_1_GEN2r_CL91_FEC_CORR_CW_CNTR_UPPERf_GET(r) (((r).rx_x4_fec_corr_ctr_1_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_FEC_CORR_CTR_1_GEN2r_CL91_FEC_CORR_CW_CNTR_UPPERf_SET(r,f) (r).rx_x4_fec_corr_ctr_1_gen2[0]=(((r).rx_x4_fec_corr_ctr_1_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_CORR_CTR_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_FEC_CORR_CTR_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORR_CTR_1_GEN2r,(_r._rx_x4_fec_corr_ctr_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_CORR_CTR_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORR_CTR_1_GEN2r,(_r._rx_x4_fec_corr_ctr_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_CORR_CTR_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORR_CTR_1_GEN2r,(_r._rx_x4_fec_corr_ctr_1_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_FEC_CORR_CTR_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORR_CTR_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_corr_ctr_1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_CORR_CTR_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORR_CTR_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_corr_ctr_1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_CORR_CTR_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_CORR_CTR_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_corr_ctr_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_CORR_CTR_1_GEN2r BCMI_TSCF_XGXS_RX_X4_FEC_CORR_CTR_1_GEN2r
#define RX_X4_FEC_CORR_CTR_1_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_FEC_CORR_CTR_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_FEC_CORR_CTR_1_GEN2r_t RX_X4_FEC_CORR_CTR_1_GEN2r_t;
#define RX_X4_FEC_CORR_CTR_1_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_FEC_CORR_CTR_1_GEN2r_CLR
#define RX_X4_FEC_CORR_CTR_1_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_FEC_CORR_CTR_1_GEN2r_SET
#define RX_X4_FEC_CORR_CTR_1_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_FEC_CORR_CTR_1_GEN2r_GET
#define RX_X4_FEC_CORR_CTR_1_GEN2r_CL91_FEC_CORR_CW_CNTR_UPPERf_GET BCMI_TSCF_XGXS_RX_X4_FEC_CORR_CTR_1_GEN2r_CL91_FEC_CORR_CW_CNTR_UPPERf_GET
#define RX_X4_FEC_CORR_CTR_1_GEN2r_CL91_FEC_CORR_CW_CNTR_UPPERf_SET BCMI_TSCF_XGXS_RX_X4_FEC_CORR_CTR_1_GEN2r_CL91_FEC_CORR_CW_CNTR_UPPERf_SET
#define READ_RX_X4_FEC_CORR_CTR_1_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_FEC_CORR_CTR_1_GEN2r
#define WRITE_RX_X4_FEC_CORR_CTR_1_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_CORR_CTR_1_GEN2r
#define MODIFY_RX_X4_FEC_CORR_CTR_1_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_CORR_CTR_1_GEN2r
#define READLN_RX_X4_FEC_CORR_CTR_1_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_FEC_CORR_CTR_1_GEN2r
#define WRITELN_RX_X4_FEC_CORR_CTR_1_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_CORR_CTR_1_GEN2r
#define WRITEALL_RX_X4_FEC_CORR_CTR_1_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_CORR_CTR_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_FEC_CORR_CTR_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_FEC_UNCORR_CTR_0_GEN2
 * BLOCKS:   RX_X4_CL91_STATUS0
 * REGADDR:  0xc354
 * DESC:     Lower 16 bits of FEC uncorrected codeword counter
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL91_FEC_UNCORR_CW_CNTR_LOWER Lower 16 bits of the CL91 FEC uncorrected code word counter.Counts once for each uncorrected FEC codeword processed when fec_align_status is true.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORR_CTR_0_GEN2r (0x0000c354 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORR_CTR_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_UNCORR_CTR_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_FEC_UNCORR_CTR_0_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_uncorr_ctr_0_gen2[1];
	uint32_t _rx_x4_fec_uncorr_ctr_0_gen2;
} BCMI_TSCF_XGXS_RX_X4_FEC_UNCORR_CTR_0_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORR_CTR_0_GEN2r_CLR(r) (r).rx_x4_fec_uncorr_ctr_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORR_CTR_0_GEN2r_SET(r,d) (r).rx_x4_fec_uncorr_ctr_0_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORR_CTR_0_GEN2r_GET(r) (r).rx_x4_fec_uncorr_ctr_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORR_CTR_0_GEN2r_CL91_FEC_UNCORR_CW_CNTR_LOWERf_GET(r) (((r).rx_x4_fec_uncorr_ctr_0_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORR_CTR_0_GEN2r_CL91_FEC_UNCORR_CW_CNTR_LOWERf_SET(r,f) (r).rx_x4_fec_uncorr_ctr_0_gen2[0]=(((r).rx_x4_fec_uncorr_ctr_0_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_UNCORR_CTR_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_FEC_UNCORR_CTR_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORR_CTR_0_GEN2r,(_r._rx_x4_fec_uncorr_ctr_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_UNCORR_CTR_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORR_CTR_0_GEN2r,(_r._rx_x4_fec_uncorr_ctr_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_UNCORR_CTR_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORR_CTR_0_GEN2r,(_r._rx_x4_fec_uncorr_ctr_0_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_FEC_UNCORR_CTR_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORR_CTR_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_uncorr_ctr_0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_UNCORR_CTR_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORR_CTR_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_uncorr_ctr_0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_UNCORR_CTR_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORR_CTR_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_uncorr_ctr_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_UNCORR_CTR_0_GEN2r BCMI_TSCF_XGXS_RX_X4_FEC_UNCORR_CTR_0_GEN2r
#define RX_X4_FEC_UNCORR_CTR_0_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_FEC_UNCORR_CTR_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_FEC_UNCORR_CTR_0_GEN2r_t RX_X4_FEC_UNCORR_CTR_0_GEN2r_t;
#define RX_X4_FEC_UNCORR_CTR_0_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_FEC_UNCORR_CTR_0_GEN2r_CLR
#define RX_X4_FEC_UNCORR_CTR_0_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_FEC_UNCORR_CTR_0_GEN2r_SET
#define RX_X4_FEC_UNCORR_CTR_0_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_FEC_UNCORR_CTR_0_GEN2r_GET
#define RX_X4_FEC_UNCORR_CTR_0_GEN2r_CL91_FEC_UNCORR_CW_CNTR_LOWERf_GET BCMI_TSCF_XGXS_RX_X4_FEC_UNCORR_CTR_0_GEN2r_CL91_FEC_UNCORR_CW_CNTR_LOWERf_GET
#define RX_X4_FEC_UNCORR_CTR_0_GEN2r_CL91_FEC_UNCORR_CW_CNTR_LOWERf_SET BCMI_TSCF_XGXS_RX_X4_FEC_UNCORR_CTR_0_GEN2r_CL91_FEC_UNCORR_CW_CNTR_LOWERf_SET
#define READ_RX_X4_FEC_UNCORR_CTR_0_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_FEC_UNCORR_CTR_0_GEN2r
#define WRITE_RX_X4_FEC_UNCORR_CTR_0_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_UNCORR_CTR_0_GEN2r
#define MODIFY_RX_X4_FEC_UNCORR_CTR_0_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_UNCORR_CTR_0_GEN2r
#define READLN_RX_X4_FEC_UNCORR_CTR_0_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_FEC_UNCORR_CTR_0_GEN2r
#define WRITELN_RX_X4_FEC_UNCORR_CTR_0_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_UNCORR_CTR_0_GEN2r
#define WRITEALL_RX_X4_FEC_UNCORR_CTR_0_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_UNCORR_CTR_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_FEC_UNCORR_CTR_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_FEC_UNCORR_CTR_1_GEN2
 * BLOCKS:   RX_X4_CL91_STATUS0
 * REGADDR:  0xc355
 * DESC:     Upper 16 bits of FEC uncorrected codeword counter
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL91_FEC_UNCORR_CW_CNTR_UPPER Upper 16 bits of the CL91 FEC uncorrected code word counter.Read the lower 16 bits firstSaturates on overflow
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORR_CTR_1_GEN2r (0x0000c355 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORR_CTR_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_UNCORR_CTR_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_FEC_UNCORR_CTR_1_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_uncorr_ctr_1_gen2[1];
	uint32_t _rx_x4_fec_uncorr_ctr_1_gen2;
} BCMI_TSCF_XGXS_RX_X4_FEC_UNCORR_CTR_1_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORR_CTR_1_GEN2r_CLR(r) (r).rx_x4_fec_uncorr_ctr_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORR_CTR_1_GEN2r_SET(r,d) (r).rx_x4_fec_uncorr_ctr_1_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORR_CTR_1_GEN2r_GET(r) (r).rx_x4_fec_uncorr_ctr_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORR_CTR_1_GEN2r_CL91_FEC_UNCORR_CW_CNTR_UPPERf_GET(r) (((r).rx_x4_fec_uncorr_ctr_1_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_FEC_UNCORR_CTR_1_GEN2r_CL91_FEC_UNCORR_CW_CNTR_UPPERf_SET(r,f) (r).rx_x4_fec_uncorr_ctr_1_gen2[0]=(((r).rx_x4_fec_uncorr_ctr_1_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_UNCORR_CTR_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_FEC_UNCORR_CTR_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORR_CTR_1_GEN2r,(_r._rx_x4_fec_uncorr_ctr_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_UNCORR_CTR_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORR_CTR_1_GEN2r,(_r._rx_x4_fec_uncorr_ctr_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_UNCORR_CTR_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORR_CTR_1_GEN2r,(_r._rx_x4_fec_uncorr_ctr_1_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_FEC_UNCORR_CTR_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORR_CTR_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_uncorr_ctr_1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_UNCORR_CTR_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORR_CTR_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_uncorr_ctr_1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_UNCORR_CTR_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_UNCORR_CTR_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_uncorr_ctr_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_UNCORR_CTR_1_GEN2r BCMI_TSCF_XGXS_RX_X4_FEC_UNCORR_CTR_1_GEN2r
#define RX_X4_FEC_UNCORR_CTR_1_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_FEC_UNCORR_CTR_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_FEC_UNCORR_CTR_1_GEN2r_t RX_X4_FEC_UNCORR_CTR_1_GEN2r_t;
#define RX_X4_FEC_UNCORR_CTR_1_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_FEC_UNCORR_CTR_1_GEN2r_CLR
#define RX_X4_FEC_UNCORR_CTR_1_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_FEC_UNCORR_CTR_1_GEN2r_SET
#define RX_X4_FEC_UNCORR_CTR_1_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_FEC_UNCORR_CTR_1_GEN2r_GET
#define RX_X4_FEC_UNCORR_CTR_1_GEN2r_CL91_FEC_UNCORR_CW_CNTR_UPPERf_GET BCMI_TSCF_XGXS_RX_X4_FEC_UNCORR_CTR_1_GEN2r_CL91_FEC_UNCORR_CW_CNTR_UPPERf_GET
#define RX_X4_FEC_UNCORR_CTR_1_GEN2r_CL91_FEC_UNCORR_CW_CNTR_UPPERf_SET BCMI_TSCF_XGXS_RX_X4_FEC_UNCORR_CTR_1_GEN2r_CL91_FEC_UNCORR_CW_CNTR_UPPERf_SET
#define READ_RX_X4_FEC_UNCORR_CTR_1_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_FEC_UNCORR_CTR_1_GEN2r
#define WRITE_RX_X4_FEC_UNCORR_CTR_1_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_UNCORR_CTR_1_GEN2r
#define MODIFY_RX_X4_FEC_UNCORR_CTR_1_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_UNCORR_CTR_1_GEN2r
#define READLN_RX_X4_FEC_UNCORR_CTR_1_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_FEC_UNCORR_CTR_1_GEN2r
#define WRITELN_RX_X4_FEC_UNCORR_CTR_1_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_UNCORR_CTR_1_GEN2r
#define WRITEALL_RX_X4_FEC_UNCORR_CTR_1_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_UNCORR_CTR_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_FEC_UNCORR_CTR_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_FEC_BIT_ERR_CTR_0_GEN2
 * BLOCKS:   RX_X4_CL91_STATUS0
 * REGADDR:  0xc356
 * DESC:     Lower 16 bits of FEC bit error counter
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL91_FEC_CORR_BIT_CNTR_LOWER Counts corrected bits. Accurate only when no uncorrectable errors are present and doesnt count parity bits errors.  Lower 16 bits of the counter.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_BIT_ERR_CTR_0_GEN2r (0x0000c356 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_FEC_BIT_ERR_CTR_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_BIT_ERR_CTR_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_FEC_BIT_ERR_CTR_0_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_bit_err_ctr_0_gen2[1];
	uint32_t _rx_x4_fec_bit_err_ctr_0_gen2;
} BCMI_TSCF_XGXS_RX_X4_FEC_BIT_ERR_CTR_0_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_FEC_BIT_ERR_CTR_0_GEN2r_CLR(r) (r).rx_x4_fec_bit_err_ctr_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_FEC_BIT_ERR_CTR_0_GEN2r_SET(r,d) (r).rx_x4_fec_bit_err_ctr_0_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_FEC_BIT_ERR_CTR_0_GEN2r_GET(r) (r).rx_x4_fec_bit_err_ctr_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_BIT_ERR_CTR_0_GEN2r_CL91_FEC_CORR_BIT_CNTR_LOWERf_GET(r) (((r).rx_x4_fec_bit_err_ctr_0_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_FEC_BIT_ERR_CTR_0_GEN2r_CL91_FEC_CORR_BIT_CNTR_LOWERf_SET(r,f) (r).rx_x4_fec_bit_err_ctr_0_gen2[0]=(((r).rx_x4_fec_bit_err_ctr_0_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_BIT_ERR_CTR_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_FEC_BIT_ERR_CTR_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BIT_ERR_CTR_0_GEN2r,(_r._rx_x4_fec_bit_err_ctr_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_BIT_ERR_CTR_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BIT_ERR_CTR_0_GEN2r,(_r._rx_x4_fec_bit_err_ctr_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_BIT_ERR_CTR_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BIT_ERR_CTR_0_GEN2r,(_r._rx_x4_fec_bit_err_ctr_0_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_FEC_BIT_ERR_CTR_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BIT_ERR_CTR_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_bit_err_ctr_0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_BIT_ERR_CTR_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BIT_ERR_CTR_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_bit_err_ctr_0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_BIT_ERR_CTR_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BIT_ERR_CTR_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_bit_err_ctr_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_BIT_ERR_CTR_0_GEN2r BCMI_TSCF_XGXS_RX_X4_FEC_BIT_ERR_CTR_0_GEN2r
#define RX_X4_FEC_BIT_ERR_CTR_0_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_FEC_BIT_ERR_CTR_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_FEC_BIT_ERR_CTR_0_GEN2r_t RX_X4_FEC_BIT_ERR_CTR_0_GEN2r_t;
#define RX_X4_FEC_BIT_ERR_CTR_0_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_FEC_BIT_ERR_CTR_0_GEN2r_CLR
#define RX_X4_FEC_BIT_ERR_CTR_0_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_FEC_BIT_ERR_CTR_0_GEN2r_SET
#define RX_X4_FEC_BIT_ERR_CTR_0_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_FEC_BIT_ERR_CTR_0_GEN2r_GET
#define RX_X4_FEC_BIT_ERR_CTR_0_GEN2r_CL91_FEC_CORR_BIT_CNTR_LOWERf_GET BCMI_TSCF_XGXS_RX_X4_FEC_BIT_ERR_CTR_0_GEN2r_CL91_FEC_CORR_BIT_CNTR_LOWERf_GET
#define RX_X4_FEC_BIT_ERR_CTR_0_GEN2r_CL91_FEC_CORR_BIT_CNTR_LOWERf_SET BCMI_TSCF_XGXS_RX_X4_FEC_BIT_ERR_CTR_0_GEN2r_CL91_FEC_CORR_BIT_CNTR_LOWERf_SET
#define READ_RX_X4_FEC_BIT_ERR_CTR_0_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_FEC_BIT_ERR_CTR_0_GEN2r
#define WRITE_RX_X4_FEC_BIT_ERR_CTR_0_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_BIT_ERR_CTR_0_GEN2r
#define MODIFY_RX_X4_FEC_BIT_ERR_CTR_0_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_BIT_ERR_CTR_0_GEN2r
#define READLN_RX_X4_FEC_BIT_ERR_CTR_0_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_FEC_BIT_ERR_CTR_0_GEN2r
#define WRITELN_RX_X4_FEC_BIT_ERR_CTR_0_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_BIT_ERR_CTR_0_GEN2r
#define WRITEALL_RX_X4_FEC_BIT_ERR_CTR_0_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_BIT_ERR_CTR_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_FEC_BIT_ERR_CTR_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_FEC_BIT_ERR_CTR_1_GEN2
 * BLOCKS:   RX_X4_CL91_STATUS0
 * REGADDR:  0xc357
 * DESC:     Upper 16 bits of FEC bit error counter
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL91_FEC_CORR_BIT_CNTR_UPPER Upper 16 bits of the CL91 FEC error bit counter.Read the lower 16 bits firstSaturates on overflow
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_BIT_ERR_CTR_1_GEN2r (0x0000c357 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_FEC_BIT_ERR_CTR_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_FEC_BIT_ERR_CTR_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_FEC_BIT_ERR_CTR_1_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_fec_bit_err_ctr_1_gen2[1];
	uint32_t _rx_x4_fec_bit_err_ctr_1_gen2;
} BCMI_TSCF_XGXS_RX_X4_FEC_BIT_ERR_CTR_1_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_FEC_BIT_ERR_CTR_1_GEN2r_CLR(r) (r).rx_x4_fec_bit_err_ctr_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_FEC_BIT_ERR_CTR_1_GEN2r_SET(r,d) (r).rx_x4_fec_bit_err_ctr_1_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_FEC_BIT_ERR_CTR_1_GEN2r_GET(r) (r).rx_x4_fec_bit_err_ctr_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_FEC_BIT_ERR_CTR_1_GEN2r_CL91_FEC_CORR_BIT_CNTR_UPPERf_GET(r) (((r).rx_x4_fec_bit_err_ctr_1_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_FEC_BIT_ERR_CTR_1_GEN2r_CL91_FEC_CORR_BIT_CNTR_UPPERf_SET(r,f) (r).rx_x4_fec_bit_err_ctr_1_gen2[0]=(((r).rx_x4_fec_bit_err_ctr_1_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_FEC_BIT_ERR_CTR_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_FEC_BIT_ERR_CTR_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BIT_ERR_CTR_1_GEN2r,(_r._rx_x4_fec_bit_err_ctr_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_BIT_ERR_CTR_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BIT_ERR_CTR_1_GEN2r,(_r._rx_x4_fec_bit_err_ctr_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_BIT_ERR_CTR_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BIT_ERR_CTR_1_GEN2r,(_r._rx_x4_fec_bit_err_ctr_1_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_FEC_BIT_ERR_CTR_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BIT_ERR_CTR_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_bit_err_ctr_1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_BIT_ERR_CTR_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BIT_ERR_CTR_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_fec_bit_err_ctr_1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_BIT_ERR_CTR_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_FEC_BIT_ERR_CTR_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_fec_bit_err_ctr_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_FEC_BIT_ERR_CTR_1_GEN2r BCMI_TSCF_XGXS_RX_X4_FEC_BIT_ERR_CTR_1_GEN2r
#define RX_X4_FEC_BIT_ERR_CTR_1_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_FEC_BIT_ERR_CTR_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_FEC_BIT_ERR_CTR_1_GEN2r_t RX_X4_FEC_BIT_ERR_CTR_1_GEN2r_t;
#define RX_X4_FEC_BIT_ERR_CTR_1_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_FEC_BIT_ERR_CTR_1_GEN2r_CLR
#define RX_X4_FEC_BIT_ERR_CTR_1_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_FEC_BIT_ERR_CTR_1_GEN2r_SET
#define RX_X4_FEC_BIT_ERR_CTR_1_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_FEC_BIT_ERR_CTR_1_GEN2r_GET
#define RX_X4_FEC_BIT_ERR_CTR_1_GEN2r_CL91_FEC_CORR_BIT_CNTR_UPPERf_GET BCMI_TSCF_XGXS_RX_X4_FEC_BIT_ERR_CTR_1_GEN2r_CL91_FEC_CORR_BIT_CNTR_UPPERf_GET
#define RX_X4_FEC_BIT_ERR_CTR_1_GEN2r_CL91_FEC_CORR_BIT_CNTR_UPPERf_SET BCMI_TSCF_XGXS_RX_X4_FEC_BIT_ERR_CTR_1_GEN2r_CL91_FEC_CORR_BIT_CNTR_UPPERf_SET
#define READ_RX_X4_FEC_BIT_ERR_CTR_1_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_FEC_BIT_ERR_CTR_1_GEN2r
#define WRITE_RX_X4_FEC_BIT_ERR_CTR_1_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_FEC_BIT_ERR_CTR_1_GEN2r
#define MODIFY_RX_X4_FEC_BIT_ERR_CTR_1_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_FEC_BIT_ERR_CTR_1_GEN2r
#define READLN_RX_X4_FEC_BIT_ERR_CTR_1_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_FEC_BIT_ERR_CTR_1_GEN2r
#define WRITELN_RX_X4_FEC_BIT_ERR_CTR_1_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_FEC_BIT_ERR_CTR_1_GEN2r
#define WRITEALL_RX_X4_FEC_BIT_ERR_CTR_1_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_FEC_BIT_ERR_CTR_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_FEC_BIT_ERR_CTR_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_0_GEN2
 * BLOCKS:   RX_X4_CL91_STATUS1
 * REGADDR:  0xc360
 * DESC:     CL91 FEC symbol error counter lower 16 bits of FEC lane 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     FEC_SYMBOL_ERROR_COUNTER_LOWER_0 Lower 16 bits of the FEC symbol error counter for FEC lane 0.Counts once for each 10-bit symbol corrected.Per FEC lane counter.If we have a 100G port, the 4 symbol error counters for port 0 represent the counter values per FEC lane.If we have a 25G port, add the 4 symbol error counter values of a port for the symbol error counter value for the FEC lane 0 for that port.If we have a 50G port, add the counter value of 0 and 2 for FEC lane 0 and counter value of 1 and 3 for FEC lane 1.
 */
#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_0_GEN2r (0x0000c360 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_0_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_cl91_fec_sym_err_ctr_low_0_gen2[1];
	uint32_t _rx_x4_cl91_fec_sym_err_ctr_low_0_gen2;
} BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_0_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_0_GEN2r_CLR(r) (r).rx_x4_cl91_fec_sym_err_ctr_low_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_0_GEN2r_SET(r,d) (r).rx_x4_cl91_fec_sym_err_ctr_low_0_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_0_GEN2r_GET(r) (r).rx_x4_cl91_fec_sym_err_ctr_low_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_0_GEN2r_FEC_SYMBOL_ERROR_COUNTER_LOWER_0f_GET(r) (((r).rx_x4_cl91_fec_sym_err_ctr_low_0_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_0_GEN2r_FEC_SYMBOL_ERROR_COUNTER_LOWER_0f_SET(r,f) (r).rx_x4_cl91_fec_sym_err_ctr_low_0_gen2[0]=(((r).rx_x4_cl91_fec_sym_err_ctr_low_0_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_0_GEN2r,(_r._rx_x4_cl91_fec_sym_err_ctr_low_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_0_GEN2r,(_r._rx_x4_cl91_fec_sym_err_ctr_low_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_0_GEN2r,(_r._rx_x4_cl91_fec_sym_err_ctr_low_0_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_fec_sym_err_ctr_low_0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_fec_sym_err_ctr_low_0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl91_fec_sym_err_ctr_low_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_0_GEN2r BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_0_GEN2r
#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_0_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_0_GEN2r_t RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_0_GEN2r_t;
#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_0_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_0_GEN2r_CLR
#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_0_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_0_GEN2r_SET
#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_0_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_0_GEN2r_GET
#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_0_GEN2r_FEC_SYMBOL_ERROR_COUNTER_LOWER_0f_GET BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_0_GEN2r_FEC_SYMBOL_ERROR_COUNTER_LOWER_0f_GET
#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_0_GEN2r_FEC_SYMBOL_ERROR_COUNTER_LOWER_0f_SET BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_0_GEN2r_FEC_SYMBOL_ERROR_COUNTER_LOWER_0f_SET
#define READ_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_0_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_0_GEN2r
#define WRITE_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_0_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_0_GEN2r
#define MODIFY_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_0_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_0_GEN2r
#define READLN_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_0_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_0_GEN2r
#define WRITELN_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_0_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_0_GEN2r
#define WRITEALL_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_0_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_CL91_FEC_SYM_ERR_CTR_UP_0_GEN2
 * BLOCKS:   RX_X4_CL91_STATUS1
 * REGADDR:  0xc361
 * DESC:     CL91 FEC symbol error counter upper 16 bits of FEC lane 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     FEC_SYMBOL_ERROR_COUNTER_UPPER_0 Upper 16 bits of the FEC symbol error counter for FEC lane 0.Counts once for each 10-bit symbol corrected.Per FEC lane counter.Saturates on overflow.
 */
#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_0_GEN2r (0x0000c361 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL91_FEC_SYM_ERR_CTR_UP_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_0_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_cl91_fec_sym_err_ctr_up_0_gen2[1];
	uint32_t _rx_x4_cl91_fec_sym_err_ctr_up_0_gen2;
} BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_0_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_0_GEN2r_CLR(r) (r).rx_x4_cl91_fec_sym_err_ctr_up_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_0_GEN2r_SET(r,d) (r).rx_x4_cl91_fec_sym_err_ctr_up_0_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_0_GEN2r_GET(r) (r).rx_x4_cl91_fec_sym_err_ctr_up_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_0_GEN2r_FEC_SYMBOL_ERROR_COUNTER_UPPER_0f_GET(r) (((r).rx_x4_cl91_fec_sym_err_ctr_up_0_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_0_GEN2r_FEC_SYMBOL_ERROR_COUNTER_UPPER_0f_SET(r,f) (r).rx_x4_cl91_fec_sym_err_ctr_up_0_gen2[0]=(((r).rx_x4_cl91_fec_sym_err_ctr_up_0_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_CL91_FEC_SYM_ERR_CTR_UP_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_0_GEN2r,(_r._rx_x4_cl91_fec_sym_err_ctr_up_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_0_GEN2r,(_r._rx_x4_cl91_fec_sym_err_ctr_up_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_0_GEN2r,(_r._rx_x4_cl91_fec_sym_err_ctr_up_0_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_fec_sym_err_ctr_up_0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_fec_sym_err_ctr_up_0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl91_fec_sym_err_ctr_up_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP_0_GEN2r BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_0_GEN2r
#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP_0_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_0_GEN2r_t RX_X4_CL91_FEC_SYM_ERR_CTR_UP_0_GEN2r_t;
#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP_0_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_0_GEN2r_CLR
#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP_0_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_0_GEN2r_SET
#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP_0_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_0_GEN2r_GET
#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP_0_GEN2r_FEC_SYMBOL_ERROR_COUNTER_UPPER_0f_GET BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_0_GEN2r_FEC_SYMBOL_ERROR_COUNTER_UPPER_0f_GET
#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP_0_GEN2r_FEC_SYMBOL_ERROR_COUNTER_UPPER_0f_SET BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_0_GEN2r_FEC_SYMBOL_ERROR_COUNTER_UPPER_0f_SET
#define READ_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_0_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_0_GEN2r
#define WRITE_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_0_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_0_GEN2r
#define MODIFY_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_0_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_0_GEN2r
#define READLN_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_0_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_0_GEN2r
#define WRITELN_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_0_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_0_GEN2r
#define WRITEALL_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_0_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_1_GEN2
 * BLOCKS:   RX_X4_CL91_STATUS1
 * REGADDR:  0xc362
 * DESC:     CL91 FEC symbol error counter lower 16 bits of FEC lane 1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     FEC_SYMBOL_ERROR_COUNTER_LOWER_1 Lower 16 bits of the FEC symbol error counter for FEC lane 1.Counts once for each 10-bit symbol corrected.Per FEC lane counter.If we have a 100G port, the 4 symbol error counters for port 0 represent the counter values per FEC lane.If we have a 25G port, add the 4 symbol error counter values of a port for the symbol error counter value for the FEC lane 0 for that port.If we have a 50G port, add the counter value of 0 and 2 for FEC lane 0 and counter value of 1 and 3 for FEC lane 1.
 */
#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_1_GEN2r (0x0000c362 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_1_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_cl91_fec_sym_err_ctr_low_1_gen2[1];
	uint32_t _rx_x4_cl91_fec_sym_err_ctr_low_1_gen2;
} BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_1_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_1_GEN2r_CLR(r) (r).rx_x4_cl91_fec_sym_err_ctr_low_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_1_GEN2r_SET(r,d) (r).rx_x4_cl91_fec_sym_err_ctr_low_1_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_1_GEN2r_GET(r) (r).rx_x4_cl91_fec_sym_err_ctr_low_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_1_GEN2r_FEC_SYMBOL_ERROR_COUNTER_LOWER_1f_GET(r) (((r).rx_x4_cl91_fec_sym_err_ctr_low_1_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_1_GEN2r_FEC_SYMBOL_ERROR_COUNTER_LOWER_1f_SET(r,f) (r).rx_x4_cl91_fec_sym_err_ctr_low_1_gen2[0]=(((r).rx_x4_cl91_fec_sym_err_ctr_low_1_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_1_GEN2r,(_r._rx_x4_cl91_fec_sym_err_ctr_low_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_1_GEN2r,(_r._rx_x4_cl91_fec_sym_err_ctr_low_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_1_GEN2r,(_r._rx_x4_cl91_fec_sym_err_ctr_low_1_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_fec_sym_err_ctr_low_1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_fec_sym_err_ctr_low_1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl91_fec_sym_err_ctr_low_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_1_GEN2r BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_1_GEN2r
#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_1_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_1_GEN2r_t RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_1_GEN2r_t;
#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_1_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_1_GEN2r_CLR
#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_1_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_1_GEN2r_SET
#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_1_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_1_GEN2r_GET
#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_1_GEN2r_FEC_SYMBOL_ERROR_COUNTER_LOWER_1f_GET BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_1_GEN2r_FEC_SYMBOL_ERROR_COUNTER_LOWER_1f_GET
#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_1_GEN2r_FEC_SYMBOL_ERROR_COUNTER_LOWER_1f_SET BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_1_GEN2r_FEC_SYMBOL_ERROR_COUNTER_LOWER_1f_SET
#define READ_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_1_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_1_GEN2r
#define WRITE_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_1_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_1_GEN2r
#define MODIFY_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_1_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_1_GEN2r
#define READLN_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_1_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_1_GEN2r
#define WRITELN_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_1_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_1_GEN2r
#define WRITEALL_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_1_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_CL91_FEC_SYM_ERR_CTR_UP_1_GEN2
 * BLOCKS:   RX_X4_CL91_STATUS1
 * REGADDR:  0xc363
 * DESC:     CL91 FEC symbol error counter upper 16 bits of FEC lane 1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     FEC_SYMBOL_ERROR_COUNTER_UPPER_1 Upper 16 bits of the FEC symbol error counter for FEC lane 1.Counts once for each 10-bit symbol corrected.Per FEC lane counter.Saturates on overflow.
 */
#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_1_GEN2r (0x0000c363 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL91_FEC_SYM_ERR_CTR_UP_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_1_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_cl91_fec_sym_err_ctr_up_1_gen2[1];
	uint32_t _rx_x4_cl91_fec_sym_err_ctr_up_1_gen2;
} BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_1_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_1_GEN2r_CLR(r) (r).rx_x4_cl91_fec_sym_err_ctr_up_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_1_GEN2r_SET(r,d) (r).rx_x4_cl91_fec_sym_err_ctr_up_1_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_1_GEN2r_GET(r) (r).rx_x4_cl91_fec_sym_err_ctr_up_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_1_GEN2r_FEC_SYMBOL_ERROR_COUNTER_UPPER_1f_GET(r) (((r).rx_x4_cl91_fec_sym_err_ctr_up_1_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_1_GEN2r_FEC_SYMBOL_ERROR_COUNTER_UPPER_1f_SET(r,f) (r).rx_x4_cl91_fec_sym_err_ctr_up_1_gen2[0]=(((r).rx_x4_cl91_fec_sym_err_ctr_up_1_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_CL91_FEC_SYM_ERR_CTR_UP_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_1_GEN2r,(_r._rx_x4_cl91_fec_sym_err_ctr_up_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_1_GEN2r,(_r._rx_x4_cl91_fec_sym_err_ctr_up_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_1_GEN2r,(_r._rx_x4_cl91_fec_sym_err_ctr_up_1_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_fec_sym_err_ctr_up_1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_fec_sym_err_ctr_up_1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl91_fec_sym_err_ctr_up_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP_1_GEN2r BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_1_GEN2r
#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP_1_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_1_GEN2r_t RX_X4_CL91_FEC_SYM_ERR_CTR_UP_1_GEN2r_t;
#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP_1_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_1_GEN2r_CLR
#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP_1_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_1_GEN2r_SET
#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP_1_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_1_GEN2r_GET
#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP_1_GEN2r_FEC_SYMBOL_ERROR_COUNTER_UPPER_1f_GET BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_1_GEN2r_FEC_SYMBOL_ERROR_COUNTER_UPPER_1f_GET
#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP_1_GEN2r_FEC_SYMBOL_ERROR_COUNTER_UPPER_1f_SET BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_1_GEN2r_FEC_SYMBOL_ERROR_COUNTER_UPPER_1f_SET
#define READ_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_1_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_1_GEN2r
#define WRITE_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_1_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_1_GEN2r
#define MODIFY_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_1_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_1_GEN2r
#define READLN_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_1_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_1_GEN2r
#define WRITELN_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_1_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_1_GEN2r
#define WRITEALL_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_1_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_2_GEN2
 * BLOCKS:   RX_X4_CL91_STATUS1
 * REGADDR:  0xc364
 * DESC:     CL91 FEC symbol error counter lower 16 bits of FEC lane 2
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     FEC_SYMBOL_ERROR_COUNTER_LOWER_2 Lower 16 bits of the FEC symbol error counter for FEC lane 2.Counts once for each 10-bit symbol corrected.Per FEC lane counter.If we have a 100G port, the 4 symbol error counters for port 0 represent the counter values per FEC lane.If we have a 25G port, add the 4 symbol error counter values of a port for the symbol error counter value for the FEC lane 0 for that port.If we have a 50G port, add the counter value of 0 and 2 for FEC lane 0 and counter value of 1 and 3 for FEC lane 1.
 */
#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_2_GEN2r (0x0000c364 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_2_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_cl91_fec_sym_err_ctr_low_2_gen2[1];
	uint32_t _rx_x4_cl91_fec_sym_err_ctr_low_2_gen2;
} BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_2_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_2_GEN2r_CLR(r) (r).rx_x4_cl91_fec_sym_err_ctr_low_2_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_2_GEN2r_SET(r,d) (r).rx_x4_cl91_fec_sym_err_ctr_low_2_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_2_GEN2r_GET(r) (r).rx_x4_cl91_fec_sym_err_ctr_low_2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_2_GEN2r_FEC_SYMBOL_ERROR_COUNTER_LOWER_2f_GET(r) (((r).rx_x4_cl91_fec_sym_err_ctr_low_2_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_2_GEN2r_FEC_SYMBOL_ERROR_COUNTER_LOWER_2f_SET(r,f) (r).rx_x4_cl91_fec_sym_err_ctr_low_2_gen2[0]=(((r).rx_x4_cl91_fec_sym_err_ctr_low_2_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_2_GEN2r,(_r._rx_x4_cl91_fec_sym_err_ctr_low_2_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_2_GEN2r,(_r._rx_x4_cl91_fec_sym_err_ctr_low_2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_2_GEN2r,(_r._rx_x4_cl91_fec_sym_err_ctr_low_2_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_fec_sym_err_ctr_low_2_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_fec_sym_err_ctr_low_2_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl91_fec_sym_err_ctr_low_2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_2_GEN2r BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_2_GEN2r
#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_2_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_2_GEN2r_t RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_2_GEN2r_t;
#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_2_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_2_GEN2r_CLR
#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_2_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_2_GEN2r_SET
#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_2_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_2_GEN2r_GET
#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_2_GEN2r_FEC_SYMBOL_ERROR_COUNTER_LOWER_2f_GET BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_2_GEN2r_FEC_SYMBOL_ERROR_COUNTER_LOWER_2f_GET
#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_2_GEN2r_FEC_SYMBOL_ERROR_COUNTER_LOWER_2f_SET BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_2_GEN2r_FEC_SYMBOL_ERROR_COUNTER_LOWER_2f_SET
#define READ_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_2_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_2_GEN2r
#define WRITE_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_2_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_2_GEN2r
#define MODIFY_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_2_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_2_GEN2r
#define READLN_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_2_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_2_GEN2r
#define WRITELN_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_2_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_2_GEN2r
#define WRITEALL_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_2_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_CL91_FEC_SYM_ERR_CTR_UP_2_GEN2
 * BLOCKS:   RX_X4_CL91_STATUS1
 * REGADDR:  0xc365
 * DESC:     CL91 FEC symbol error counter upper 16 bits of FEC lane 2
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     FEC_SYMBOL_ERROR_COUNTER_UPPER_2 Upper 16 bits of the FEC symbol error counter for FEC lane 2.Counts once for each 10-bit symbol corrected.Per FEC lane counter.Saturates on overflow.
 */
#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_2_GEN2r (0x0000c365 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL91_FEC_SYM_ERR_CTR_UP_2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_2_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_cl91_fec_sym_err_ctr_up_2_gen2[1];
	uint32_t _rx_x4_cl91_fec_sym_err_ctr_up_2_gen2;
} BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_2_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_2_GEN2r_CLR(r) (r).rx_x4_cl91_fec_sym_err_ctr_up_2_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_2_GEN2r_SET(r,d) (r).rx_x4_cl91_fec_sym_err_ctr_up_2_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_2_GEN2r_GET(r) (r).rx_x4_cl91_fec_sym_err_ctr_up_2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_2_GEN2r_FEC_SYMBOL_ERROR_COUNTER_UPPER_2f_GET(r) (((r).rx_x4_cl91_fec_sym_err_ctr_up_2_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_2_GEN2r_FEC_SYMBOL_ERROR_COUNTER_UPPER_2f_SET(r,f) (r).rx_x4_cl91_fec_sym_err_ctr_up_2_gen2[0]=(((r).rx_x4_cl91_fec_sym_err_ctr_up_2_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_CL91_FEC_SYM_ERR_CTR_UP_2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_2_GEN2r,(_r._rx_x4_cl91_fec_sym_err_ctr_up_2_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_2_GEN2r,(_r._rx_x4_cl91_fec_sym_err_ctr_up_2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_2_GEN2r,(_r._rx_x4_cl91_fec_sym_err_ctr_up_2_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_fec_sym_err_ctr_up_2_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_fec_sym_err_ctr_up_2_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl91_fec_sym_err_ctr_up_2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP_2_GEN2r BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_2_GEN2r
#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP_2_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_2_GEN2r_t RX_X4_CL91_FEC_SYM_ERR_CTR_UP_2_GEN2r_t;
#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP_2_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_2_GEN2r_CLR
#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP_2_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_2_GEN2r_SET
#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP_2_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_2_GEN2r_GET
#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP_2_GEN2r_FEC_SYMBOL_ERROR_COUNTER_UPPER_2f_GET BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_2_GEN2r_FEC_SYMBOL_ERROR_COUNTER_UPPER_2f_GET
#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP_2_GEN2r_FEC_SYMBOL_ERROR_COUNTER_UPPER_2f_SET BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_2_GEN2r_FEC_SYMBOL_ERROR_COUNTER_UPPER_2f_SET
#define READ_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_2_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_2_GEN2r
#define WRITE_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_2_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_2_GEN2r
#define MODIFY_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_2_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_2_GEN2r
#define READLN_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_2_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_2_GEN2r
#define WRITELN_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_2_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_2_GEN2r
#define WRITEALL_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_2_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_3_GEN2
 * BLOCKS:   RX_X4_CL91_STATUS1
 * REGADDR:  0xc366
 * DESC:     CL91 FEC symbol error counter lower 16 bits of FEC lane 3
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     FEC_SYMBOL_ERROR_COUNTER_LOWER_3 Lower 16 bits of the FEC symbol error counter for FEC lane 3.Counts once for each 10-bit symbol corrected.Per FEC lane counter.If we have a 100G port, the 4 symbol error counters for port 0 represent the counter values per FEC lane.If we have a 25G port, add the 4 symbol error counter values of a port for the symbol error counter value for the FEC lane 0 for that port.If we have a 50G port, add the counter value of 0 and 2 for FEC lane 0 and counter value of 1 and 3 for FEC lane 1.
 */
#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_3_GEN2r (0x0000c366 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_3_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_3_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_3_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_cl91_fec_sym_err_ctr_low_3_gen2[1];
	uint32_t _rx_x4_cl91_fec_sym_err_ctr_low_3_gen2;
} BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_3_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_3_GEN2r_CLR(r) (r).rx_x4_cl91_fec_sym_err_ctr_low_3_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_3_GEN2r_SET(r,d) (r).rx_x4_cl91_fec_sym_err_ctr_low_3_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_3_GEN2r_GET(r) (r).rx_x4_cl91_fec_sym_err_ctr_low_3_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_3_GEN2r_FEC_SYMBOL_ERROR_COUNTER_LOWER_3f_GET(r) (((r).rx_x4_cl91_fec_sym_err_ctr_low_3_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_3_GEN2r_FEC_SYMBOL_ERROR_COUNTER_LOWER_3f_SET(r,f) (r).rx_x4_cl91_fec_sym_err_ctr_low_3_gen2[0]=(((r).rx_x4_cl91_fec_sym_err_ctr_low_3_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_3_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_3_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_3_GEN2r,(_r._rx_x4_cl91_fec_sym_err_ctr_low_3_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_3_GEN2r,(_r._rx_x4_cl91_fec_sym_err_ctr_low_3_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_3_GEN2r,(_r._rx_x4_cl91_fec_sym_err_ctr_low_3_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_fec_sym_err_ctr_low_3_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_fec_sym_err_ctr_low_3_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl91_fec_sym_err_ctr_low_3_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_3_GEN2r BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_3_GEN2r
#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_3_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_3_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_3_GEN2r_t RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_3_GEN2r_t;
#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_3_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_3_GEN2r_CLR
#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_3_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_3_GEN2r_SET
#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_3_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_3_GEN2r_GET
#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_3_GEN2r_FEC_SYMBOL_ERROR_COUNTER_LOWER_3f_GET BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_3_GEN2r_FEC_SYMBOL_ERROR_COUNTER_LOWER_3f_GET
#define RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_3_GEN2r_FEC_SYMBOL_ERROR_COUNTER_LOWER_3f_SET BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_3_GEN2r_FEC_SYMBOL_ERROR_COUNTER_LOWER_3f_SET
#define READ_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_3_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_3_GEN2r
#define WRITE_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_3_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_3_GEN2r
#define MODIFY_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_3_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_3_GEN2r
#define READLN_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_3_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_3_GEN2r
#define WRITELN_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_3_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_3_GEN2r
#define WRITEALL_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_3_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_3_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_LOW_3_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_CL91_FEC_SYM_ERR_CTR_UP_3_GEN2
 * BLOCKS:   RX_X4_CL91_STATUS1
 * REGADDR:  0xc367
 * DESC:     CL91 FEC symbol error counter upper 16 bits of FEC lane 3
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     FEC_SYMBOL_ERROR_COUNTER_UPPER_3 Upper 16 bits of the FEC symbol error counter for FEC lane 3.Counts once for each 10-bit symbol corrected.Per FEC lane counter.Saturates on overflow.
 */
#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_3_GEN2r (0x0000c367 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_3_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_CL91_FEC_SYM_ERR_CTR_UP_3_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_3_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_cl91_fec_sym_err_ctr_up_3_gen2[1];
	uint32_t _rx_x4_cl91_fec_sym_err_ctr_up_3_gen2;
} BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_3_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_3_GEN2r_CLR(r) (r).rx_x4_cl91_fec_sym_err_ctr_up_3_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_3_GEN2r_SET(r,d) (r).rx_x4_cl91_fec_sym_err_ctr_up_3_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_3_GEN2r_GET(r) (r).rx_x4_cl91_fec_sym_err_ctr_up_3_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_3_GEN2r_FEC_SYMBOL_ERROR_COUNTER_UPPER_3f_GET(r) (((r).rx_x4_cl91_fec_sym_err_ctr_up_3_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_3_GEN2r_FEC_SYMBOL_ERROR_COUNTER_UPPER_3f_SET(r,f) (r).rx_x4_cl91_fec_sym_err_ctr_up_3_gen2[0]=(((r).rx_x4_cl91_fec_sym_err_ctr_up_3_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_X4_CL91_FEC_SYM_ERR_CTR_UP_3_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_3_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_3_GEN2r,(_r._rx_x4_cl91_fec_sym_err_ctr_up_3_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_3_GEN2r,(_r._rx_x4_cl91_fec_sym_err_ctr_up_3_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_3_GEN2r,(_r._rx_x4_cl91_fec_sym_err_ctr_up_3_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_fec_sym_err_ctr_up_3_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_cl91_fec_sym_err_ctr_up_3_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_cl91_fec_sym_err_ctr_up_3_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP_3_GEN2r BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_3_GEN2r
#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP_3_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_3_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_3_GEN2r_t RX_X4_CL91_FEC_SYM_ERR_CTR_UP_3_GEN2r_t;
#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP_3_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_3_GEN2r_CLR
#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP_3_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_3_GEN2r_SET
#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP_3_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_3_GEN2r_GET
#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP_3_GEN2r_FEC_SYMBOL_ERROR_COUNTER_UPPER_3f_GET BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_3_GEN2r_FEC_SYMBOL_ERROR_COUNTER_UPPER_3f_GET
#define RX_X4_CL91_FEC_SYM_ERR_CTR_UP_3_GEN2r_FEC_SYMBOL_ERROR_COUNTER_UPPER_3f_SET BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_3_GEN2r_FEC_SYMBOL_ERROR_COUNTER_UPPER_3f_SET
#define READ_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_3_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_3_GEN2r
#define WRITE_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_3_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_3_GEN2r
#define MODIFY_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_3_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_3_GEN2r
#define READLN_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_3_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_3_GEN2r
#define WRITELN_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_3_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_3_GEN2r
#define WRITEALL_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_3_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_3_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_CL91_FEC_SYM_ERR_CTR_UP_3_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2
 * BLOCKS:   RX_X4_ECC
 * REGADDR:  0xc380
 * DESC:     ECC status register for CL91 buffer block 0 memory
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     ERR_EVENT_ADDRESS_CL91_BUFFER_BLK_0 ECC error location, valid only if 1-bit or 2-bit error bit is set
 *     ONE_BIT_ERR_EVENT_CL91_BUFFER_BLK_0 1-bit ECC error detected
 *     TWO_BIT_ERR_EVENT_CL91_BUFFER_BLK_0 2-bit ECC error detected
 */
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r (0x0000c380 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_ecc_sts_cl91_buffer_blk_0_gen2[1];
	uint32_t _rx_x4_ecc_sts_cl91_buffer_blk_0_gen2;
} BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r_CLR(r) (r).rx_x4_ecc_sts_cl91_buffer_blk_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r_SET(r,d) (r).rx_x4_ecc_sts_cl91_buffer_blk_0_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r_GET(r) (r).rx_x4_ecc_sts_cl91_buffer_blk_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r_TWO_BIT_ERR_EVENT_CL91_BUFFER_BLK_0f_GET(r) ((((r).rx_x4_ecc_sts_cl91_buffer_blk_0_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r_TWO_BIT_ERR_EVENT_CL91_BUFFER_BLK_0f_SET(r,f) (r).rx_x4_ecc_sts_cl91_buffer_blk_0_gen2[0]=(((r).rx_x4_ecc_sts_cl91_buffer_blk_0_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r_ONE_BIT_ERR_EVENT_CL91_BUFFER_BLK_0f_GET(r) ((((r).rx_x4_ecc_sts_cl91_buffer_blk_0_gen2[0]) >> 14) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r_ONE_BIT_ERR_EVENT_CL91_BUFFER_BLK_0f_SET(r,f) (r).rx_x4_ecc_sts_cl91_buffer_blk_0_gen2[0]=(((r).rx_x4_ecc_sts_cl91_buffer_blk_0_gen2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r_ERR_EVENT_ADDRESS_CL91_BUFFER_BLK_0f_GET(r) (((r).rx_x4_ecc_sts_cl91_buffer_blk_0_gen2[0]) & 0x3fff)
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r_ERR_EVENT_ADDRESS_CL91_BUFFER_BLK_0f_SET(r,f) (r).rx_x4_ecc_sts_cl91_buffer_blk_0_gen2[0]=(((r).rx_x4_ecc_sts_cl91_buffer_blk_0_gen2[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff)) | (0x3fff << 16)

/*
 * These macros can be used to access RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r,(_r._rx_x4_ecc_sts_cl91_buffer_blk_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r,(_r._rx_x4_ecc_sts_cl91_buffer_blk_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r,(_r._rx_x4_ecc_sts_cl91_buffer_blk_0_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ecc_sts_cl91_buffer_blk_0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ecc_sts_cl91_buffer_blk_0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_ecc_sts_cl91_buffer_blk_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r
#define RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r_t RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r_t;
#define RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r_CLR
#define RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r_SET
#define RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r_GET
#define RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r_TWO_BIT_ERR_EVENT_CL91_BUFFER_BLK_0f_GET BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r_TWO_BIT_ERR_EVENT_CL91_BUFFER_BLK_0f_GET
#define RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r_TWO_BIT_ERR_EVENT_CL91_BUFFER_BLK_0f_SET BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r_TWO_BIT_ERR_EVENT_CL91_BUFFER_BLK_0f_SET
#define RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r_ONE_BIT_ERR_EVENT_CL91_BUFFER_BLK_0f_GET BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r_ONE_BIT_ERR_EVENT_CL91_BUFFER_BLK_0f_GET
#define RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r_ONE_BIT_ERR_EVENT_CL91_BUFFER_BLK_0f_SET BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r_ONE_BIT_ERR_EVENT_CL91_BUFFER_BLK_0f_SET
#define RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r_ERR_EVENT_ADDRESS_CL91_BUFFER_BLK_0f_GET BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r_ERR_EVENT_ADDRESS_CL91_BUFFER_BLK_0f_GET
#define RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r_ERR_EVENT_ADDRESS_CL91_BUFFER_BLK_0f_SET BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r_ERR_EVENT_ADDRESS_CL91_BUFFER_BLK_0f_SET
#define READ_RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r
#define WRITE_RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r
#define MODIFY_RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r
#define READLN_RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r
#define WRITELN_RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r
#define WRITEALL_RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2
 * BLOCKS:   RX_X4_ECC
 * REGADDR:  0xc381
 * DESC:     ECC status register for CL91 buffer block 1 memory
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     ERR_EVENT_ADDRESS_CL91_BUFFER_BLK_1 ECC error location, valid only if 1-bit or 2-bit error bit is set
 *     ONE_BIT_ERR_EVENT_CL91_BUFFER_BLK_1 1-bit ECC error detected
 *     TWO_BIT_ERR_EVENT_CL91_BUFFER_BLK_1 2-bit ECC error detected
 */
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r (0x0000c381 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_ecc_sts_cl91_buffer_blk_1_gen2[1];
	uint32_t _rx_x4_ecc_sts_cl91_buffer_blk_1_gen2;
} BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r_CLR(r) (r).rx_x4_ecc_sts_cl91_buffer_blk_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r_SET(r,d) (r).rx_x4_ecc_sts_cl91_buffer_blk_1_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r_GET(r) (r).rx_x4_ecc_sts_cl91_buffer_blk_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r_TWO_BIT_ERR_EVENT_CL91_BUFFER_BLK_1f_GET(r) ((((r).rx_x4_ecc_sts_cl91_buffer_blk_1_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r_TWO_BIT_ERR_EVENT_CL91_BUFFER_BLK_1f_SET(r,f) (r).rx_x4_ecc_sts_cl91_buffer_blk_1_gen2[0]=(((r).rx_x4_ecc_sts_cl91_buffer_blk_1_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r_ONE_BIT_ERR_EVENT_CL91_BUFFER_BLK_1f_GET(r) ((((r).rx_x4_ecc_sts_cl91_buffer_blk_1_gen2[0]) >> 14) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r_ONE_BIT_ERR_EVENT_CL91_BUFFER_BLK_1f_SET(r,f) (r).rx_x4_ecc_sts_cl91_buffer_blk_1_gen2[0]=(((r).rx_x4_ecc_sts_cl91_buffer_blk_1_gen2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r_ERR_EVENT_ADDRESS_CL91_BUFFER_BLK_1f_GET(r) (((r).rx_x4_ecc_sts_cl91_buffer_blk_1_gen2[0]) & 0x3fff)
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r_ERR_EVENT_ADDRESS_CL91_BUFFER_BLK_1f_SET(r,f) (r).rx_x4_ecc_sts_cl91_buffer_blk_1_gen2[0]=(((r).rx_x4_ecc_sts_cl91_buffer_blk_1_gen2[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff)) | (0x3fff << 16)

/*
 * These macros can be used to access RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r,(_r._rx_x4_ecc_sts_cl91_buffer_blk_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r,(_r._rx_x4_ecc_sts_cl91_buffer_blk_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r,(_r._rx_x4_ecc_sts_cl91_buffer_blk_1_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ecc_sts_cl91_buffer_blk_1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ecc_sts_cl91_buffer_blk_1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_ecc_sts_cl91_buffer_blk_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r
#define RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r_t RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r_t;
#define RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r_CLR
#define RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r_SET
#define RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r_GET
#define RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r_TWO_BIT_ERR_EVENT_CL91_BUFFER_BLK_1f_GET BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r_TWO_BIT_ERR_EVENT_CL91_BUFFER_BLK_1f_GET
#define RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r_TWO_BIT_ERR_EVENT_CL91_BUFFER_BLK_1f_SET BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r_TWO_BIT_ERR_EVENT_CL91_BUFFER_BLK_1f_SET
#define RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r_ONE_BIT_ERR_EVENT_CL91_BUFFER_BLK_1f_GET BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r_ONE_BIT_ERR_EVENT_CL91_BUFFER_BLK_1f_GET
#define RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r_ONE_BIT_ERR_EVENT_CL91_BUFFER_BLK_1f_SET BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r_ONE_BIT_ERR_EVENT_CL91_BUFFER_BLK_1f_SET
#define RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r_ERR_EVENT_ADDRESS_CL91_BUFFER_BLK_1f_GET BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r_ERR_EVENT_ADDRESS_CL91_BUFFER_BLK_1f_GET
#define RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r_ERR_EVENT_ADDRESS_CL91_BUFFER_BLK_1f_SET BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r_ERR_EVENT_ADDRESS_CL91_BUFFER_BLK_1f_SET
#define READ_RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r
#define WRITE_RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r
#define MODIFY_RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r
#define READLN_RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r
#define WRITELN_RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r
#define WRITEALL_RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2
 * BLOCKS:   RX_X4_ECC
 * REGADDR:  0xc382
 * DESC:     ECC status register for CL91 buffer block 2 memory
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     ERR_EVENT_ADDRESS_CL91_BUFFER_BLK_2 ECC error location, valid only if 1-bit or 2-bit error bit is set
 *     ONE_BIT_ERR_EVENT_CL91_BUFFER_BLK_2 1-bit ECC error detected
 *     TWO_BIT_ERR_EVENT_CL91_BUFFER_BLK_2 2-bit ECC error detected
 */
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r (0x0000c382 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_ecc_sts_cl91_buffer_blk_2_gen2[1];
	uint32_t _rx_x4_ecc_sts_cl91_buffer_blk_2_gen2;
} BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r_CLR(r) (r).rx_x4_ecc_sts_cl91_buffer_blk_2_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r_SET(r,d) (r).rx_x4_ecc_sts_cl91_buffer_blk_2_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r_GET(r) (r).rx_x4_ecc_sts_cl91_buffer_blk_2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r_TWO_BIT_ERR_EVENT_CL91_BUFFER_BLK_2f_GET(r) ((((r).rx_x4_ecc_sts_cl91_buffer_blk_2_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r_TWO_BIT_ERR_EVENT_CL91_BUFFER_BLK_2f_SET(r,f) (r).rx_x4_ecc_sts_cl91_buffer_blk_2_gen2[0]=(((r).rx_x4_ecc_sts_cl91_buffer_blk_2_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r_ONE_BIT_ERR_EVENT_CL91_BUFFER_BLK_2f_GET(r) ((((r).rx_x4_ecc_sts_cl91_buffer_blk_2_gen2[0]) >> 14) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r_ONE_BIT_ERR_EVENT_CL91_BUFFER_BLK_2f_SET(r,f) (r).rx_x4_ecc_sts_cl91_buffer_blk_2_gen2[0]=(((r).rx_x4_ecc_sts_cl91_buffer_blk_2_gen2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r_ERR_EVENT_ADDRESS_CL91_BUFFER_BLK_2f_GET(r) (((r).rx_x4_ecc_sts_cl91_buffer_blk_2_gen2[0]) & 0x3fff)
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r_ERR_EVENT_ADDRESS_CL91_BUFFER_BLK_2f_SET(r,f) (r).rx_x4_ecc_sts_cl91_buffer_blk_2_gen2[0]=(((r).rx_x4_ecc_sts_cl91_buffer_blk_2_gen2[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff)) | (0x3fff << 16)

/*
 * These macros can be used to access RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r,(_r._rx_x4_ecc_sts_cl91_buffer_blk_2_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r,(_r._rx_x4_ecc_sts_cl91_buffer_blk_2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r,(_r._rx_x4_ecc_sts_cl91_buffer_blk_2_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ecc_sts_cl91_buffer_blk_2_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ecc_sts_cl91_buffer_blk_2_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_ecc_sts_cl91_buffer_blk_2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r
#define RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r_t RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r_t;
#define RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r_CLR
#define RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r_SET
#define RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r_GET
#define RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r_TWO_BIT_ERR_EVENT_CL91_BUFFER_BLK_2f_GET BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r_TWO_BIT_ERR_EVENT_CL91_BUFFER_BLK_2f_GET
#define RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r_TWO_BIT_ERR_EVENT_CL91_BUFFER_BLK_2f_SET BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r_TWO_BIT_ERR_EVENT_CL91_BUFFER_BLK_2f_SET
#define RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r_ONE_BIT_ERR_EVENT_CL91_BUFFER_BLK_2f_GET BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r_ONE_BIT_ERR_EVENT_CL91_BUFFER_BLK_2f_GET
#define RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r_ONE_BIT_ERR_EVENT_CL91_BUFFER_BLK_2f_SET BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r_ONE_BIT_ERR_EVENT_CL91_BUFFER_BLK_2f_SET
#define RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r_ERR_EVENT_ADDRESS_CL91_BUFFER_BLK_2f_GET BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r_ERR_EVENT_ADDRESS_CL91_BUFFER_BLK_2f_GET
#define RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r_ERR_EVENT_ADDRESS_CL91_BUFFER_BLK_2f_SET BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r_ERR_EVENT_ADDRESS_CL91_BUFFER_BLK_2f_SET
#define READ_RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r
#define WRITE_RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r
#define MODIFY_RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r
#define READLN_RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r
#define WRITELN_RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r
#define WRITEALL_RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_ECC_STS_CL91_BUFFER_BLK_2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_ECC_STS_DESKEW_MEM_0_GEN2
 * BLOCKS:   RX_X4_ECC
 * REGADDR:  0xc383
 * DESC:     ECC status register for MEM0 per physical lane
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     ERR_EVENT_ADDRESS_DESKEW_0 ECC error location, valid only if 1-bit or 2-bit error bit is set
 *     ONE_BIT_ERR_EVENT_DESKEW_0 1-bit ECC error detected
 *     TWO_BIT_ERR_EVENT_DESKEW_0 2-bit ECC error detected
 */
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r (0x0000c383 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_ECC_STS_DESKEW_MEM_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_ecc_sts_deskew_mem_0_gen2[1];
	uint32_t _rx_x4_ecc_sts_deskew_mem_0_gen2;
} BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r_CLR(r) (r).rx_x4_ecc_sts_deskew_mem_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r_SET(r,d) (r).rx_x4_ecc_sts_deskew_mem_0_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r_GET(r) (r).rx_x4_ecc_sts_deskew_mem_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r_TWO_BIT_ERR_EVENT_DESKEW_0f_GET(r) ((((r).rx_x4_ecc_sts_deskew_mem_0_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r_TWO_BIT_ERR_EVENT_DESKEW_0f_SET(r,f) (r).rx_x4_ecc_sts_deskew_mem_0_gen2[0]=(((r).rx_x4_ecc_sts_deskew_mem_0_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r_ONE_BIT_ERR_EVENT_DESKEW_0f_GET(r) ((((r).rx_x4_ecc_sts_deskew_mem_0_gen2[0]) >> 14) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r_ONE_BIT_ERR_EVENT_DESKEW_0f_SET(r,f) (r).rx_x4_ecc_sts_deskew_mem_0_gen2[0]=(((r).rx_x4_ecc_sts_deskew_mem_0_gen2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r_ERR_EVENT_ADDRESS_DESKEW_0f_GET(r) (((r).rx_x4_ecc_sts_deskew_mem_0_gen2[0]) & 0x3fff)
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r_ERR_EVENT_ADDRESS_DESKEW_0f_SET(r,f) (r).rx_x4_ecc_sts_deskew_mem_0_gen2[0]=(((r).rx_x4_ecc_sts_deskew_mem_0_gen2[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff)) | (0x3fff << 16)

/*
 * These macros can be used to access RX_X4_ECC_STS_DESKEW_MEM_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r,(_r._rx_x4_ecc_sts_deskew_mem_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r,(_r._rx_x4_ecc_sts_deskew_mem_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r,(_r._rx_x4_ecc_sts_deskew_mem_0_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ecc_sts_deskew_mem_0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ecc_sts_deskew_mem_0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_ecc_sts_deskew_mem_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r
#define RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r_t RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r_t;
#define RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r_CLR
#define RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r_SET
#define RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r_GET
#define RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r_TWO_BIT_ERR_EVENT_DESKEW_0f_GET BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r_TWO_BIT_ERR_EVENT_DESKEW_0f_GET
#define RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r_TWO_BIT_ERR_EVENT_DESKEW_0f_SET BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r_TWO_BIT_ERR_EVENT_DESKEW_0f_SET
#define RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r_ONE_BIT_ERR_EVENT_DESKEW_0f_GET BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r_ONE_BIT_ERR_EVENT_DESKEW_0f_GET
#define RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r_ONE_BIT_ERR_EVENT_DESKEW_0f_SET BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r_ONE_BIT_ERR_EVENT_DESKEW_0f_SET
#define RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r_ERR_EVENT_ADDRESS_DESKEW_0f_GET BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r_ERR_EVENT_ADDRESS_DESKEW_0f_GET
#define RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r_ERR_EVENT_ADDRESS_DESKEW_0f_SET BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r_ERR_EVENT_ADDRESS_DESKEW_0f_SET
#define READ_RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r
#define WRITE_RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r
#define MODIFY_RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r
#define READLN_RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r
#define WRITELN_RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r
#define WRITEALL_RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_ECC_STS_DESKEW_MEM_1_GEN2
 * BLOCKS:   RX_X4_ECC
 * REGADDR:  0xc384
 * DESC:     ECC status register for MEM1 per physical lane
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     ERR_EVENT_ADDRESS_DESKEW_1 ECC error location, valid only if 1-bit or 2-bit error bit is set
 *     ONE_BIT_ERR_EVENT_DESKEW_1 1-bit ECC error detected
 *     TWO_BIT_ERR_EVENT_DESKEW_1 2-bit ECC error detected
 */
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r (0x0000c384 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_ECC_STS_DESKEW_MEM_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_ecc_sts_deskew_mem_1_gen2[1];
	uint32_t _rx_x4_ecc_sts_deskew_mem_1_gen2;
} BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r_CLR(r) (r).rx_x4_ecc_sts_deskew_mem_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r_SET(r,d) (r).rx_x4_ecc_sts_deskew_mem_1_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r_GET(r) (r).rx_x4_ecc_sts_deskew_mem_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r_TWO_BIT_ERR_EVENT_DESKEW_1f_GET(r) ((((r).rx_x4_ecc_sts_deskew_mem_1_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r_TWO_BIT_ERR_EVENT_DESKEW_1f_SET(r,f) (r).rx_x4_ecc_sts_deskew_mem_1_gen2[0]=(((r).rx_x4_ecc_sts_deskew_mem_1_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r_ONE_BIT_ERR_EVENT_DESKEW_1f_GET(r) ((((r).rx_x4_ecc_sts_deskew_mem_1_gen2[0]) >> 14) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r_ONE_BIT_ERR_EVENT_DESKEW_1f_SET(r,f) (r).rx_x4_ecc_sts_deskew_mem_1_gen2[0]=(((r).rx_x4_ecc_sts_deskew_mem_1_gen2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r_ERR_EVENT_ADDRESS_DESKEW_1f_GET(r) (((r).rx_x4_ecc_sts_deskew_mem_1_gen2[0]) & 0x3fff)
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r_ERR_EVENT_ADDRESS_DESKEW_1f_SET(r,f) (r).rx_x4_ecc_sts_deskew_mem_1_gen2[0]=(((r).rx_x4_ecc_sts_deskew_mem_1_gen2[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff)) | (0x3fff << 16)

/*
 * These macros can be used to access RX_X4_ECC_STS_DESKEW_MEM_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r,(_r._rx_x4_ecc_sts_deskew_mem_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r,(_r._rx_x4_ecc_sts_deskew_mem_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r,(_r._rx_x4_ecc_sts_deskew_mem_1_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ecc_sts_deskew_mem_1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ecc_sts_deskew_mem_1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_ecc_sts_deskew_mem_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r
#define RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r_t RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r_t;
#define RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r_CLR
#define RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r_SET
#define RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r_GET
#define RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r_TWO_BIT_ERR_EVENT_DESKEW_1f_GET BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r_TWO_BIT_ERR_EVENT_DESKEW_1f_GET
#define RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r_TWO_BIT_ERR_EVENT_DESKEW_1f_SET BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r_TWO_BIT_ERR_EVENT_DESKEW_1f_SET
#define RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r_ONE_BIT_ERR_EVENT_DESKEW_1f_GET BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r_ONE_BIT_ERR_EVENT_DESKEW_1f_GET
#define RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r_ONE_BIT_ERR_EVENT_DESKEW_1f_SET BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r_ONE_BIT_ERR_EVENT_DESKEW_1f_SET
#define RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r_ERR_EVENT_ADDRESS_DESKEW_1f_GET BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r_ERR_EVENT_ADDRESS_DESKEW_1f_GET
#define RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r_ERR_EVENT_ADDRESS_DESKEW_1f_SET BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r_ERR_EVENT_ADDRESS_DESKEW_1f_SET
#define READ_RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r
#define WRITE_RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r
#define MODIFY_RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r
#define READLN_RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r
#define WRITELN_RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r
#define WRITEALL_RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_ECC_STS_DESKEW_MEM_2_GEN2
 * BLOCKS:   RX_X4_ECC
 * REGADDR:  0xc385
 * DESC:     ECC status register for MEM2 per physical lane
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     ERR_EVENT_ADDRESS_DESKEW_2 ECC error location, valid only if 1-bit or 2-bit error bit is set
 *     ONE_BIT_ERR_EVENT_DESKEW_2 1-bit ECC error detected
 *     TWO_BIT_ERR_EVENT_DESKEW_2 2-bit ECC error detected
 */
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r (0x0000c385 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_ECC_STS_DESKEW_MEM_2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_ecc_sts_deskew_mem_2_gen2[1];
	uint32_t _rx_x4_ecc_sts_deskew_mem_2_gen2;
} BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r_CLR(r) (r).rx_x4_ecc_sts_deskew_mem_2_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r_SET(r,d) (r).rx_x4_ecc_sts_deskew_mem_2_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r_GET(r) (r).rx_x4_ecc_sts_deskew_mem_2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r_TWO_BIT_ERR_EVENT_DESKEW_2f_GET(r) ((((r).rx_x4_ecc_sts_deskew_mem_2_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r_TWO_BIT_ERR_EVENT_DESKEW_2f_SET(r,f) (r).rx_x4_ecc_sts_deskew_mem_2_gen2[0]=(((r).rx_x4_ecc_sts_deskew_mem_2_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r_ONE_BIT_ERR_EVENT_DESKEW_2f_GET(r) ((((r).rx_x4_ecc_sts_deskew_mem_2_gen2[0]) >> 14) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r_ONE_BIT_ERR_EVENT_DESKEW_2f_SET(r,f) (r).rx_x4_ecc_sts_deskew_mem_2_gen2[0]=(((r).rx_x4_ecc_sts_deskew_mem_2_gen2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r_ERR_EVENT_ADDRESS_DESKEW_2f_GET(r) (((r).rx_x4_ecc_sts_deskew_mem_2_gen2[0]) & 0x3fff)
#define BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r_ERR_EVENT_ADDRESS_DESKEW_2f_SET(r,f) (r).rx_x4_ecc_sts_deskew_mem_2_gen2[0]=(((r).rx_x4_ecc_sts_deskew_mem_2_gen2[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff)) | (0x3fff << 16)

/*
 * These macros can be used to access RX_X4_ECC_STS_DESKEW_MEM_2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r,(_r._rx_x4_ecc_sts_deskew_mem_2_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r,(_r._rx_x4_ecc_sts_deskew_mem_2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r,(_r._rx_x4_ecc_sts_deskew_mem_2_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ecc_sts_deskew_mem_2_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ecc_sts_deskew_mem_2_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_ecc_sts_deskew_mem_2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r
#define RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r_t RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r_t;
#define RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r_CLR
#define RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r_SET
#define RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r_GET
#define RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r_TWO_BIT_ERR_EVENT_DESKEW_2f_GET BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r_TWO_BIT_ERR_EVENT_DESKEW_2f_GET
#define RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r_TWO_BIT_ERR_EVENT_DESKEW_2f_SET BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r_TWO_BIT_ERR_EVENT_DESKEW_2f_SET
#define RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r_ONE_BIT_ERR_EVENT_DESKEW_2f_GET BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r_ONE_BIT_ERR_EVENT_DESKEW_2f_GET
#define RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r_ONE_BIT_ERR_EVENT_DESKEW_2f_SET BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r_ONE_BIT_ERR_EVENT_DESKEW_2f_SET
#define RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r_ERR_EVENT_ADDRESS_DESKEW_2f_GET BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r_ERR_EVENT_ADDRESS_DESKEW_2f_GET
#define RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r_ERR_EVENT_ADDRESS_DESKEW_2f_SET BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r_ERR_EVENT_ADDRESS_DESKEW_2f_SET
#define READ_RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r
#define WRITE_RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r
#define MODIFY_RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r
#define READLN_RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r
#define WRITELN_RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r
#define WRITEALL_RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_ECC_STS_DESKEW_MEM_2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_ECC_INTR_STS_1BIT_GEN2
 * BLOCKS:   RX_X4_ECC
 * REGADDR:  0xc386
 * DESC:     ECC 1-bit interrupt status register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CL91_BUFFER_BLK0_1BIT_INT_STATUS Single bit, correctable error detected
 *     CL91_BUFFER_BLK1_1BIT_INT_STATUS Single bit, correctable error detected
 *     CL91_BUFFER_BLK2_1BIT_INT_STATUS Single bit, correctable error detected
 *     DESKEW_MEM_0_1BIT_INT_STATUS Single bit, correctable error detected
 *     DESKEW_MEM_1_1BIT_INT_STATUS Single bit, correctable error detected
 *     DESKEW_MEM_2_1BIT_INT_STATUS Single bit, correctable error detected
 */
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_1BIT_GEN2r (0x0000c386 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_1BIT_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_ECC_INTR_STS_1BIT_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_1BIT_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_ecc_intr_sts_1bit_gen2[1];
	uint32_t _rx_x4_ecc_intr_sts_1bit_gen2;
} BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_1BIT_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_1BIT_GEN2r_CLR(r) (r).rx_x4_ecc_intr_sts_1bit_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_1BIT_GEN2r_SET(r,d) (r).rx_x4_ecc_intr_sts_1bit_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_1BIT_GEN2r_GET(r) (r).rx_x4_ecc_intr_sts_1bit_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_1BIT_GEN2r_DESKEW_MEM_2_1BIT_INT_STATUSf_GET(r) ((((r).rx_x4_ecc_intr_sts_1bit_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_1BIT_GEN2r_DESKEW_MEM_2_1BIT_INT_STATUSf_SET(r,f) (r).rx_x4_ecc_intr_sts_1bit_gen2[0]=(((r).rx_x4_ecc_intr_sts_1bit_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_1BIT_GEN2r_DESKEW_MEM_1_1BIT_INT_STATUSf_GET(r) ((((r).rx_x4_ecc_intr_sts_1bit_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_1BIT_GEN2r_DESKEW_MEM_1_1BIT_INT_STATUSf_SET(r,f) (r).rx_x4_ecc_intr_sts_1bit_gen2[0]=(((r).rx_x4_ecc_intr_sts_1bit_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_1BIT_GEN2r_DESKEW_MEM_0_1BIT_INT_STATUSf_GET(r) ((((r).rx_x4_ecc_intr_sts_1bit_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_1BIT_GEN2r_DESKEW_MEM_0_1BIT_INT_STATUSf_SET(r,f) (r).rx_x4_ecc_intr_sts_1bit_gen2[0]=(((r).rx_x4_ecc_intr_sts_1bit_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_1BIT_GEN2r_CL91_BUFFER_BLK2_1BIT_INT_STATUSf_GET(r) ((((r).rx_x4_ecc_intr_sts_1bit_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_1BIT_GEN2r_CL91_BUFFER_BLK2_1BIT_INT_STATUSf_SET(r,f) (r).rx_x4_ecc_intr_sts_1bit_gen2[0]=(((r).rx_x4_ecc_intr_sts_1bit_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_1BIT_GEN2r_CL91_BUFFER_BLK1_1BIT_INT_STATUSf_GET(r) ((((r).rx_x4_ecc_intr_sts_1bit_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_1BIT_GEN2r_CL91_BUFFER_BLK1_1BIT_INT_STATUSf_SET(r,f) (r).rx_x4_ecc_intr_sts_1bit_gen2[0]=(((r).rx_x4_ecc_intr_sts_1bit_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_1BIT_GEN2r_CL91_BUFFER_BLK0_1BIT_INT_STATUSf_GET(r) (((r).rx_x4_ecc_intr_sts_1bit_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_1BIT_GEN2r_CL91_BUFFER_BLK0_1BIT_INT_STATUSf_SET(r,f) (r).rx_x4_ecc_intr_sts_1bit_gen2[0]=(((r).rx_x4_ecc_intr_sts_1bit_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_X4_ECC_INTR_STS_1BIT_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_ECC_INTR_STS_1BIT_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_1BIT_GEN2r,(_r._rx_x4_ecc_intr_sts_1bit_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_ECC_INTR_STS_1BIT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_1BIT_GEN2r,(_r._rx_x4_ecc_intr_sts_1bit_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_ECC_INTR_STS_1BIT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_1BIT_GEN2r,(_r._rx_x4_ecc_intr_sts_1bit_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_ECC_INTR_STS_1BIT_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_1BIT_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ecc_intr_sts_1bit_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_ECC_INTR_STS_1BIT_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_1BIT_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ecc_intr_sts_1bit_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_ECC_INTR_STS_1BIT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_1BIT_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_ecc_intr_sts_1bit_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_ECC_INTR_STS_1BIT_GEN2r BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_1BIT_GEN2r
#define RX_X4_ECC_INTR_STS_1BIT_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_1BIT_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_1BIT_GEN2r_t RX_X4_ECC_INTR_STS_1BIT_GEN2r_t;
#define RX_X4_ECC_INTR_STS_1BIT_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_1BIT_GEN2r_CLR
#define RX_X4_ECC_INTR_STS_1BIT_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_1BIT_GEN2r_SET
#define RX_X4_ECC_INTR_STS_1BIT_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_1BIT_GEN2r_GET
#define RX_X4_ECC_INTR_STS_1BIT_GEN2r_DESKEW_MEM_2_1BIT_INT_STATUSf_GET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_1BIT_GEN2r_DESKEW_MEM_2_1BIT_INT_STATUSf_GET
#define RX_X4_ECC_INTR_STS_1BIT_GEN2r_DESKEW_MEM_2_1BIT_INT_STATUSf_SET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_1BIT_GEN2r_DESKEW_MEM_2_1BIT_INT_STATUSf_SET
#define RX_X4_ECC_INTR_STS_1BIT_GEN2r_DESKEW_MEM_1_1BIT_INT_STATUSf_GET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_1BIT_GEN2r_DESKEW_MEM_1_1BIT_INT_STATUSf_GET
#define RX_X4_ECC_INTR_STS_1BIT_GEN2r_DESKEW_MEM_1_1BIT_INT_STATUSf_SET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_1BIT_GEN2r_DESKEW_MEM_1_1BIT_INT_STATUSf_SET
#define RX_X4_ECC_INTR_STS_1BIT_GEN2r_DESKEW_MEM_0_1BIT_INT_STATUSf_GET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_1BIT_GEN2r_DESKEW_MEM_0_1BIT_INT_STATUSf_GET
#define RX_X4_ECC_INTR_STS_1BIT_GEN2r_DESKEW_MEM_0_1BIT_INT_STATUSf_SET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_1BIT_GEN2r_DESKEW_MEM_0_1BIT_INT_STATUSf_SET
#define RX_X4_ECC_INTR_STS_1BIT_GEN2r_CL91_BUFFER_BLK2_1BIT_INT_STATUSf_GET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_1BIT_GEN2r_CL91_BUFFER_BLK2_1BIT_INT_STATUSf_GET
#define RX_X4_ECC_INTR_STS_1BIT_GEN2r_CL91_BUFFER_BLK2_1BIT_INT_STATUSf_SET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_1BIT_GEN2r_CL91_BUFFER_BLK2_1BIT_INT_STATUSf_SET
#define RX_X4_ECC_INTR_STS_1BIT_GEN2r_CL91_BUFFER_BLK1_1BIT_INT_STATUSf_GET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_1BIT_GEN2r_CL91_BUFFER_BLK1_1BIT_INT_STATUSf_GET
#define RX_X4_ECC_INTR_STS_1BIT_GEN2r_CL91_BUFFER_BLK1_1BIT_INT_STATUSf_SET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_1BIT_GEN2r_CL91_BUFFER_BLK1_1BIT_INT_STATUSf_SET
#define RX_X4_ECC_INTR_STS_1BIT_GEN2r_CL91_BUFFER_BLK0_1BIT_INT_STATUSf_GET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_1BIT_GEN2r_CL91_BUFFER_BLK0_1BIT_INT_STATUSf_GET
#define RX_X4_ECC_INTR_STS_1BIT_GEN2r_CL91_BUFFER_BLK0_1BIT_INT_STATUSf_SET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_1BIT_GEN2r_CL91_BUFFER_BLK0_1BIT_INT_STATUSf_SET
#define READ_RX_X4_ECC_INTR_STS_1BIT_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_ECC_INTR_STS_1BIT_GEN2r
#define WRITE_RX_X4_ECC_INTR_STS_1BIT_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_ECC_INTR_STS_1BIT_GEN2r
#define MODIFY_RX_X4_ECC_INTR_STS_1BIT_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_ECC_INTR_STS_1BIT_GEN2r
#define READLN_RX_X4_ECC_INTR_STS_1BIT_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_ECC_INTR_STS_1BIT_GEN2r
#define WRITELN_RX_X4_ECC_INTR_STS_1BIT_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_ECC_INTR_STS_1BIT_GEN2r
#define WRITEALL_RX_X4_ECC_INTR_STS_1BIT_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_ECC_INTR_STS_1BIT_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_1BIT_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_ECC_INTR_STS_2BIT_GEN2
 * BLOCKS:   RX_X4_ECC
 * REGADDR:  0xc387
 * DESC:     ECC 2-bit interrupt status register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CL91_BUFFER_BLK0_2BIT_INT_STATUS Two bit, uncorrectable error detected
 *     CL91_BUFFER_BLK1_2BIT_INT_STATUS Two bit, uncorrectable error detected
 *     CL91_BUFFER_BLK2_2BIT_INT_STATUS Two bit, uncorrectable error detected
 *     DESKEW_MEM_0_2BIT_INT_STATUS Two bit, uncorrectable error detected
 *     DESKEW_MEM_1_2BIT_INT_STATUS Two bit, uncorrectable error detected
 *     DESKEW_MEM_2_2BIT_INT_STATUS Two bit, uncorrectable error detected
 */
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_2BIT_GEN2r (0x0000c387 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_2BIT_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_ECC_INTR_STS_2BIT_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_2BIT_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_ecc_intr_sts_2bit_gen2[1];
	uint32_t _rx_x4_ecc_intr_sts_2bit_gen2;
} BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_2BIT_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_2BIT_GEN2r_CLR(r) (r).rx_x4_ecc_intr_sts_2bit_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_2BIT_GEN2r_SET(r,d) (r).rx_x4_ecc_intr_sts_2bit_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_2BIT_GEN2r_GET(r) (r).rx_x4_ecc_intr_sts_2bit_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_2BIT_GEN2r_DESKEW_MEM_2_2BIT_INT_STATUSf_GET(r) ((((r).rx_x4_ecc_intr_sts_2bit_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_2BIT_GEN2r_DESKEW_MEM_2_2BIT_INT_STATUSf_SET(r,f) (r).rx_x4_ecc_intr_sts_2bit_gen2[0]=(((r).rx_x4_ecc_intr_sts_2bit_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_2BIT_GEN2r_DESKEW_MEM_1_2BIT_INT_STATUSf_GET(r) ((((r).rx_x4_ecc_intr_sts_2bit_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_2BIT_GEN2r_DESKEW_MEM_1_2BIT_INT_STATUSf_SET(r,f) (r).rx_x4_ecc_intr_sts_2bit_gen2[0]=(((r).rx_x4_ecc_intr_sts_2bit_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_2BIT_GEN2r_DESKEW_MEM_0_2BIT_INT_STATUSf_GET(r) ((((r).rx_x4_ecc_intr_sts_2bit_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_2BIT_GEN2r_DESKEW_MEM_0_2BIT_INT_STATUSf_SET(r,f) (r).rx_x4_ecc_intr_sts_2bit_gen2[0]=(((r).rx_x4_ecc_intr_sts_2bit_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_2BIT_GEN2r_CL91_BUFFER_BLK2_2BIT_INT_STATUSf_GET(r) ((((r).rx_x4_ecc_intr_sts_2bit_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_2BIT_GEN2r_CL91_BUFFER_BLK2_2BIT_INT_STATUSf_SET(r,f) (r).rx_x4_ecc_intr_sts_2bit_gen2[0]=(((r).rx_x4_ecc_intr_sts_2bit_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_2BIT_GEN2r_CL91_BUFFER_BLK1_2BIT_INT_STATUSf_GET(r) ((((r).rx_x4_ecc_intr_sts_2bit_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_2BIT_GEN2r_CL91_BUFFER_BLK1_2BIT_INT_STATUSf_SET(r,f) (r).rx_x4_ecc_intr_sts_2bit_gen2[0]=(((r).rx_x4_ecc_intr_sts_2bit_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_2BIT_GEN2r_CL91_BUFFER_BLK0_2BIT_INT_STATUSf_GET(r) (((r).rx_x4_ecc_intr_sts_2bit_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_2BIT_GEN2r_CL91_BUFFER_BLK0_2BIT_INT_STATUSf_SET(r,f) (r).rx_x4_ecc_intr_sts_2bit_gen2[0]=(((r).rx_x4_ecc_intr_sts_2bit_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_X4_ECC_INTR_STS_2BIT_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_ECC_INTR_STS_2BIT_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_2BIT_GEN2r,(_r._rx_x4_ecc_intr_sts_2bit_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_ECC_INTR_STS_2BIT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_2BIT_GEN2r,(_r._rx_x4_ecc_intr_sts_2bit_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_ECC_INTR_STS_2BIT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_2BIT_GEN2r,(_r._rx_x4_ecc_intr_sts_2bit_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_ECC_INTR_STS_2BIT_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_2BIT_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ecc_intr_sts_2bit_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_ECC_INTR_STS_2BIT_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_2BIT_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ecc_intr_sts_2bit_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_ECC_INTR_STS_2BIT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_2BIT_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_ecc_intr_sts_2bit_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_ECC_INTR_STS_2BIT_GEN2r BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_2BIT_GEN2r
#define RX_X4_ECC_INTR_STS_2BIT_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_2BIT_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_2BIT_GEN2r_t RX_X4_ECC_INTR_STS_2BIT_GEN2r_t;
#define RX_X4_ECC_INTR_STS_2BIT_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_2BIT_GEN2r_CLR
#define RX_X4_ECC_INTR_STS_2BIT_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_2BIT_GEN2r_SET
#define RX_X4_ECC_INTR_STS_2BIT_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_2BIT_GEN2r_GET
#define RX_X4_ECC_INTR_STS_2BIT_GEN2r_DESKEW_MEM_2_2BIT_INT_STATUSf_GET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_2BIT_GEN2r_DESKEW_MEM_2_2BIT_INT_STATUSf_GET
#define RX_X4_ECC_INTR_STS_2BIT_GEN2r_DESKEW_MEM_2_2BIT_INT_STATUSf_SET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_2BIT_GEN2r_DESKEW_MEM_2_2BIT_INT_STATUSf_SET
#define RX_X4_ECC_INTR_STS_2BIT_GEN2r_DESKEW_MEM_1_2BIT_INT_STATUSf_GET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_2BIT_GEN2r_DESKEW_MEM_1_2BIT_INT_STATUSf_GET
#define RX_X4_ECC_INTR_STS_2BIT_GEN2r_DESKEW_MEM_1_2BIT_INT_STATUSf_SET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_2BIT_GEN2r_DESKEW_MEM_1_2BIT_INT_STATUSf_SET
#define RX_X4_ECC_INTR_STS_2BIT_GEN2r_DESKEW_MEM_0_2BIT_INT_STATUSf_GET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_2BIT_GEN2r_DESKEW_MEM_0_2BIT_INT_STATUSf_GET
#define RX_X4_ECC_INTR_STS_2BIT_GEN2r_DESKEW_MEM_0_2BIT_INT_STATUSf_SET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_2BIT_GEN2r_DESKEW_MEM_0_2BIT_INT_STATUSf_SET
#define RX_X4_ECC_INTR_STS_2BIT_GEN2r_CL91_BUFFER_BLK2_2BIT_INT_STATUSf_GET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_2BIT_GEN2r_CL91_BUFFER_BLK2_2BIT_INT_STATUSf_GET
#define RX_X4_ECC_INTR_STS_2BIT_GEN2r_CL91_BUFFER_BLK2_2BIT_INT_STATUSf_SET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_2BIT_GEN2r_CL91_BUFFER_BLK2_2BIT_INT_STATUSf_SET
#define RX_X4_ECC_INTR_STS_2BIT_GEN2r_CL91_BUFFER_BLK1_2BIT_INT_STATUSf_GET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_2BIT_GEN2r_CL91_BUFFER_BLK1_2BIT_INT_STATUSf_GET
#define RX_X4_ECC_INTR_STS_2BIT_GEN2r_CL91_BUFFER_BLK1_2BIT_INT_STATUSf_SET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_2BIT_GEN2r_CL91_BUFFER_BLK1_2BIT_INT_STATUSf_SET
#define RX_X4_ECC_INTR_STS_2BIT_GEN2r_CL91_BUFFER_BLK0_2BIT_INT_STATUSf_GET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_2BIT_GEN2r_CL91_BUFFER_BLK0_2BIT_INT_STATUSf_GET
#define RX_X4_ECC_INTR_STS_2BIT_GEN2r_CL91_BUFFER_BLK0_2BIT_INT_STATUSf_SET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_2BIT_GEN2r_CL91_BUFFER_BLK0_2BIT_INT_STATUSf_SET
#define READ_RX_X4_ECC_INTR_STS_2BIT_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_ECC_INTR_STS_2BIT_GEN2r
#define WRITE_RX_X4_ECC_INTR_STS_2BIT_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_ECC_INTR_STS_2BIT_GEN2r
#define MODIFY_RX_X4_ECC_INTR_STS_2BIT_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_ECC_INTR_STS_2BIT_GEN2r
#define READLN_RX_X4_ECC_INTR_STS_2BIT_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_ECC_INTR_STS_2BIT_GEN2r
#define WRITELN_RX_X4_ECC_INTR_STS_2BIT_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_ECC_INTR_STS_2BIT_GEN2r
#define WRITEALL_RX_X4_ECC_INTR_STS_2BIT_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_ECC_INTR_STS_2BIT_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_ECC_INTR_STS_2BIT_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_ECC_INTR_EN_1BIT_GEN2
 * BLOCKS:   RX_X4_ECC
 * REGADDR:  0xc388
 * DESC:     ECC 1-bit interrupt enable register
 * RESETVAL: 0x3f (63)
 * ACCESS:   R/W
 * FIELDS:
 *     CL91_BUFFER_BLK0_1BIT_INT_EN Enable for correctable error interrupt
 *     CL91_BUFFER_BLK1_1BIT_INT_EN Enable for correctable error interrupt
 *     CL91_BUFFER_BLK2_1BIT_INT_EN Enable for correctable error interrupt
 *     DESKEW_MEM_0_1BIT_INT_EN Enable for correctable error interrupt
 *     DESKEW_MEM_1_1BIT_INT_EN Enable for correctable error interrupt
 *     DESKEW_MEM_2_1BIT_INT_EN Enable for correctable error interrupt
 */
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_1BIT_GEN2r (0x0000c388 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_1BIT_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_ECC_INTR_EN_1BIT_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_1BIT_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_ecc_intr_en_1bit_gen2[1];
	uint32_t _rx_x4_ecc_intr_en_1bit_gen2;
} BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_1BIT_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_1BIT_GEN2r_CLR(r) (r).rx_x4_ecc_intr_en_1bit_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_1BIT_GEN2r_SET(r,d) (r).rx_x4_ecc_intr_en_1bit_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_1BIT_GEN2r_GET(r) (r).rx_x4_ecc_intr_en_1bit_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_1BIT_GEN2r_DESKEW_MEM_2_1BIT_INT_ENf_GET(r) ((((r).rx_x4_ecc_intr_en_1bit_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_1BIT_GEN2r_DESKEW_MEM_2_1BIT_INT_ENf_SET(r,f) (r).rx_x4_ecc_intr_en_1bit_gen2[0]=(((r).rx_x4_ecc_intr_en_1bit_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_1BIT_GEN2r_DESKEW_MEM_1_1BIT_INT_ENf_GET(r) ((((r).rx_x4_ecc_intr_en_1bit_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_1BIT_GEN2r_DESKEW_MEM_1_1BIT_INT_ENf_SET(r,f) (r).rx_x4_ecc_intr_en_1bit_gen2[0]=(((r).rx_x4_ecc_intr_en_1bit_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_1BIT_GEN2r_DESKEW_MEM_0_1BIT_INT_ENf_GET(r) ((((r).rx_x4_ecc_intr_en_1bit_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_1BIT_GEN2r_DESKEW_MEM_0_1BIT_INT_ENf_SET(r,f) (r).rx_x4_ecc_intr_en_1bit_gen2[0]=(((r).rx_x4_ecc_intr_en_1bit_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_1BIT_GEN2r_CL91_BUFFER_BLK2_1BIT_INT_ENf_GET(r) ((((r).rx_x4_ecc_intr_en_1bit_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_1BIT_GEN2r_CL91_BUFFER_BLK2_1BIT_INT_ENf_SET(r,f) (r).rx_x4_ecc_intr_en_1bit_gen2[0]=(((r).rx_x4_ecc_intr_en_1bit_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_1BIT_GEN2r_CL91_BUFFER_BLK1_1BIT_INT_ENf_GET(r) ((((r).rx_x4_ecc_intr_en_1bit_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_1BIT_GEN2r_CL91_BUFFER_BLK1_1BIT_INT_ENf_SET(r,f) (r).rx_x4_ecc_intr_en_1bit_gen2[0]=(((r).rx_x4_ecc_intr_en_1bit_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_1BIT_GEN2r_CL91_BUFFER_BLK0_1BIT_INT_ENf_GET(r) (((r).rx_x4_ecc_intr_en_1bit_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_1BIT_GEN2r_CL91_BUFFER_BLK0_1BIT_INT_ENf_SET(r,f) (r).rx_x4_ecc_intr_en_1bit_gen2[0]=(((r).rx_x4_ecc_intr_en_1bit_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_X4_ECC_INTR_EN_1BIT_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_ECC_INTR_EN_1BIT_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_1BIT_GEN2r,(_r._rx_x4_ecc_intr_en_1bit_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_ECC_INTR_EN_1BIT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_1BIT_GEN2r,(_r._rx_x4_ecc_intr_en_1bit_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_ECC_INTR_EN_1BIT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_1BIT_GEN2r,(_r._rx_x4_ecc_intr_en_1bit_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_ECC_INTR_EN_1BIT_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_1BIT_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ecc_intr_en_1bit_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_ECC_INTR_EN_1BIT_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_1BIT_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ecc_intr_en_1bit_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_ECC_INTR_EN_1BIT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_1BIT_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_ecc_intr_en_1bit_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_ECC_INTR_EN_1BIT_GEN2r BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_1BIT_GEN2r
#define RX_X4_ECC_INTR_EN_1BIT_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_1BIT_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_1BIT_GEN2r_t RX_X4_ECC_INTR_EN_1BIT_GEN2r_t;
#define RX_X4_ECC_INTR_EN_1BIT_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_1BIT_GEN2r_CLR
#define RX_X4_ECC_INTR_EN_1BIT_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_1BIT_GEN2r_SET
#define RX_X4_ECC_INTR_EN_1BIT_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_1BIT_GEN2r_GET
#define RX_X4_ECC_INTR_EN_1BIT_GEN2r_DESKEW_MEM_2_1BIT_INT_ENf_GET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_1BIT_GEN2r_DESKEW_MEM_2_1BIT_INT_ENf_GET
#define RX_X4_ECC_INTR_EN_1BIT_GEN2r_DESKEW_MEM_2_1BIT_INT_ENf_SET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_1BIT_GEN2r_DESKEW_MEM_2_1BIT_INT_ENf_SET
#define RX_X4_ECC_INTR_EN_1BIT_GEN2r_DESKEW_MEM_1_1BIT_INT_ENf_GET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_1BIT_GEN2r_DESKEW_MEM_1_1BIT_INT_ENf_GET
#define RX_X4_ECC_INTR_EN_1BIT_GEN2r_DESKEW_MEM_1_1BIT_INT_ENf_SET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_1BIT_GEN2r_DESKEW_MEM_1_1BIT_INT_ENf_SET
#define RX_X4_ECC_INTR_EN_1BIT_GEN2r_DESKEW_MEM_0_1BIT_INT_ENf_GET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_1BIT_GEN2r_DESKEW_MEM_0_1BIT_INT_ENf_GET
#define RX_X4_ECC_INTR_EN_1BIT_GEN2r_DESKEW_MEM_0_1BIT_INT_ENf_SET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_1BIT_GEN2r_DESKEW_MEM_0_1BIT_INT_ENf_SET
#define RX_X4_ECC_INTR_EN_1BIT_GEN2r_CL91_BUFFER_BLK2_1BIT_INT_ENf_GET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_1BIT_GEN2r_CL91_BUFFER_BLK2_1BIT_INT_ENf_GET
#define RX_X4_ECC_INTR_EN_1BIT_GEN2r_CL91_BUFFER_BLK2_1BIT_INT_ENf_SET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_1BIT_GEN2r_CL91_BUFFER_BLK2_1BIT_INT_ENf_SET
#define RX_X4_ECC_INTR_EN_1BIT_GEN2r_CL91_BUFFER_BLK1_1BIT_INT_ENf_GET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_1BIT_GEN2r_CL91_BUFFER_BLK1_1BIT_INT_ENf_GET
#define RX_X4_ECC_INTR_EN_1BIT_GEN2r_CL91_BUFFER_BLK1_1BIT_INT_ENf_SET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_1BIT_GEN2r_CL91_BUFFER_BLK1_1BIT_INT_ENf_SET
#define RX_X4_ECC_INTR_EN_1BIT_GEN2r_CL91_BUFFER_BLK0_1BIT_INT_ENf_GET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_1BIT_GEN2r_CL91_BUFFER_BLK0_1BIT_INT_ENf_GET
#define RX_X4_ECC_INTR_EN_1BIT_GEN2r_CL91_BUFFER_BLK0_1BIT_INT_ENf_SET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_1BIT_GEN2r_CL91_BUFFER_BLK0_1BIT_INT_ENf_SET
#define READ_RX_X4_ECC_INTR_EN_1BIT_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_ECC_INTR_EN_1BIT_GEN2r
#define WRITE_RX_X4_ECC_INTR_EN_1BIT_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_ECC_INTR_EN_1BIT_GEN2r
#define MODIFY_RX_X4_ECC_INTR_EN_1BIT_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_ECC_INTR_EN_1BIT_GEN2r
#define READLN_RX_X4_ECC_INTR_EN_1BIT_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_ECC_INTR_EN_1BIT_GEN2r
#define WRITELN_RX_X4_ECC_INTR_EN_1BIT_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_ECC_INTR_EN_1BIT_GEN2r
#define WRITEALL_RX_X4_ECC_INTR_EN_1BIT_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_ECC_INTR_EN_1BIT_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_1BIT_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_ECC_INTR_EN_2BIT_GEN2
 * BLOCKS:   RX_X4_ECC
 * REGADDR:  0xc389
 * DESC:     ECC 2-bit interrupt enable register
 * RESETVAL: 0x3f (63)
 * ACCESS:   R/W
 * FIELDS:
 *     CL91_BUFFER_BLK0_2BIT_INT_EN Enable for uncorrectable error interrupt
 *     CL91_BUFFER_BLK1_2BIT_INT_EN Enable for uncorrectable error interrupt
 *     CL91_BUFFER_BLK2_2BIT_INT_EN Enable for uncorrectable error interrupt
 *     DESKEW_MEM_0_2BIT_INT_EN Enable for uncorrectable error interrupt
 *     DESKEW_MEM_1_2BIT_INT_EN Enable for uncorrectable error interrupt
 *     DESKEW_MEM_2_2BIT_INT_EN Enable for uncorrectable error interrupt
 */
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_2BIT_GEN2r (0x0000c389 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_2BIT_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_ECC_INTR_EN_2BIT_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_2BIT_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_ecc_intr_en_2bit_gen2[1];
	uint32_t _rx_x4_ecc_intr_en_2bit_gen2;
} BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_2BIT_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_2BIT_GEN2r_CLR(r) (r).rx_x4_ecc_intr_en_2bit_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_2BIT_GEN2r_SET(r,d) (r).rx_x4_ecc_intr_en_2bit_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_2BIT_GEN2r_GET(r) (r).rx_x4_ecc_intr_en_2bit_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_2BIT_GEN2r_DESKEW_MEM_2_2BIT_INT_ENf_GET(r) ((((r).rx_x4_ecc_intr_en_2bit_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_2BIT_GEN2r_DESKEW_MEM_2_2BIT_INT_ENf_SET(r,f) (r).rx_x4_ecc_intr_en_2bit_gen2[0]=(((r).rx_x4_ecc_intr_en_2bit_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_2BIT_GEN2r_DESKEW_MEM_1_2BIT_INT_ENf_GET(r) ((((r).rx_x4_ecc_intr_en_2bit_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_2BIT_GEN2r_DESKEW_MEM_1_2BIT_INT_ENf_SET(r,f) (r).rx_x4_ecc_intr_en_2bit_gen2[0]=(((r).rx_x4_ecc_intr_en_2bit_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_2BIT_GEN2r_DESKEW_MEM_0_2BIT_INT_ENf_GET(r) ((((r).rx_x4_ecc_intr_en_2bit_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_2BIT_GEN2r_DESKEW_MEM_0_2BIT_INT_ENf_SET(r,f) (r).rx_x4_ecc_intr_en_2bit_gen2[0]=(((r).rx_x4_ecc_intr_en_2bit_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_2BIT_GEN2r_CL91_BUFFER_BLK2_2BIT_INT_ENf_GET(r) ((((r).rx_x4_ecc_intr_en_2bit_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_2BIT_GEN2r_CL91_BUFFER_BLK2_2BIT_INT_ENf_SET(r,f) (r).rx_x4_ecc_intr_en_2bit_gen2[0]=(((r).rx_x4_ecc_intr_en_2bit_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_2BIT_GEN2r_CL91_BUFFER_BLK1_2BIT_INT_ENf_GET(r) ((((r).rx_x4_ecc_intr_en_2bit_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_2BIT_GEN2r_CL91_BUFFER_BLK1_2BIT_INT_ENf_SET(r,f) (r).rx_x4_ecc_intr_en_2bit_gen2[0]=(((r).rx_x4_ecc_intr_en_2bit_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_2BIT_GEN2r_CL91_BUFFER_BLK0_2BIT_INT_ENf_GET(r) (((r).rx_x4_ecc_intr_en_2bit_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_2BIT_GEN2r_CL91_BUFFER_BLK0_2BIT_INT_ENf_SET(r,f) (r).rx_x4_ecc_intr_en_2bit_gen2[0]=(((r).rx_x4_ecc_intr_en_2bit_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_X4_ECC_INTR_EN_2BIT_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_ECC_INTR_EN_2BIT_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_2BIT_GEN2r,(_r._rx_x4_ecc_intr_en_2bit_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_ECC_INTR_EN_2BIT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_2BIT_GEN2r,(_r._rx_x4_ecc_intr_en_2bit_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_ECC_INTR_EN_2BIT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_2BIT_GEN2r,(_r._rx_x4_ecc_intr_en_2bit_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_ECC_INTR_EN_2BIT_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_2BIT_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ecc_intr_en_2bit_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_ECC_INTR_EN_2BIT_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_2BIT_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ecc_intr_en_2bit_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_ECC_INTR_EN_2BIT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_2BIT_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_ecc_intr_en_2bit_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_ECC_INTR_EN_2BIT_GEN2r BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_2BIT_GEN2r
#define RX_X4_ECC_INTR_EN_2BIT_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_2BIT_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_2BIT_GEN2r_t RX_X4_ECC_INTR_EN_2BIT_GEN2r_t;
#define RX_X4_ECC_INTR_EN_2BIT_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_2BIT_GEN2r_CLR
#define RX_X4_ECC_INTR_EN_2BIT_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_2BIT_GEN2r_SET
#define RX_X4_ECC_INTR_EN_2BIT_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_2BIT_GEN2r_GET
#define RX_X4_ECC_INTR_EN_2BIT_GEN2r_DESKEW_MEM_2_2BIT_INT_ENf_GET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_2BIT_GEN2r_DESKEW_MEM_2_2BIT_INT_ENf_GET
#define RX_X4_ECC_INTR_EN_2BIT_GEN2r_DESKEW_MEM_2_2BIT_INT_ENf_SET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_2BIT_GEN2r_DESKEW_MEM_2_2BIT_INT_ENf_SET
#define RX_X4_ECC_INTR_EN_2BIT_GEN2r_DESKEW_MEM_1_2BIT_INT_ENf_GET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_2BIT_GEN2r_DESKEW_MEM_1_2BIT_INT_ENf_GET
#define RX_X4_ECC_INTR_EN_2BIT_GEN2r_DESKEW_MEM_1_2BIT_INT_ENf_SET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_2BIT_GEN2r_DESKEW_MEM_1_2BIT_INT_ENf_SET
#define RX_X4_ECC_INTR_EN_2BIT_GEN2r_DESKEW_MEM_0_2BIT_INT_ENf_GET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_2BIT_GEN2r_DESKEW_MEM_0_2BIT_INT_ENf_GET
#define RX_X4_ECC_INTR_EN_2BIT_GEN2r_DESKEW_MEM_0_2BIT_INT_ENf_SET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_2BIT_GEN2r_DESKEW_MEM_0_2BIT_INT_ENf_SET
#define RX_X4_ECC_INTR_EN_2BIT_GEN2r_CL91_BUFFER_BLK2_2BIT_INT_ENf_GET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_2BIT_GEN2r_CL91_BUFFER_BLK2_2BIT_INT_ENf_GET
#define RX_X4_ECC_INTR_EN_2BIT_GEN2r_CL91_BUFFER_BLK2_2BIT_INT_ENf_SET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_2BIT_GEN2r_CL91_BUFFER_BLK2_2BIT_INT_ENf_SET
#define RX_X4_ECC_INTR_EN_2BIT_GEN2r_CL91_BUFFER_BLK1_2BIT_INT_ENf_GET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_2BIT_GEN2r_CL91_BUFFER_BLK1_2BIT_INT_ENf_GET
#define RX_X4_ECC_INTR_EN_2BIT_GEN2r_CL91_BUFFER_BLK1_2BIT_INT_ENf_SET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_2BIT_GEN2r_CL91_BUFFER_BLK1_2BIT_INT_ENf_SET
#define RX_X4_ECC_INTR_EN_2BIT_GEN2r_CL91_BUFFER_BLK0_2BIT_INT_ENf_GET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_2BIT_GEN2r_CL91_BUFFER_BLK0_2BIT_INT_ENf_GET
#define RX_X4_ECC_INTR_EN_2BIT_GEN2r_CL91_BUFFER_BLK0_2BIT_INT_ENf_SET BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_2BIT_GEN2r_CL91_BUFFER_BLK0_2BIT_INT_ENf_SET
#define READ_RX_X4_ECC_INTR_EN_2BIT_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_ECC_INTR_EN_2BIT_GEN2r
#define WRITE_RX_X4_ECC_INTR_EN_2BIT_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_ECC_INTR_EN_2BIT_GEN2r
#define MODIFY_RX_X4_ECC_INTR_EN_2BIT_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_ECC_INTR_EN_2BIT_GEN2r
#define READLN_RX_X4_ECC_INTR_EN_2BIT_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_ECC_INTR_EN_2BIT_GEN2r
#define WRITELN_RX_X4_ECC_INTR_EN_2BIT_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_ECC_INTR_EN_2BIT_GEN2r
#define WRITEALL_RX_X4_ECC_INTR_EN_2BIT_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_ECC_INTR_EN_2BIT_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_ECC_INTR_EN_2BIT_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_ECC_DIS_ECC_MEM_GEN2
 * BLOCKS:   RX_X4_ECC
 * REGADDR:  0xc38a
 * DESC:     Disable ECC register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     DISABLE_ECC_CL91_BUFFER_BLK0 disable ECC check/generationThis bit should not be changed from 1 to 0 in the middle of the test
 *     DISABLE_ECC_CL91_BUFFER_BLK1 disable ECC check/generationThis bit should not be changed from 1 to 0 in the middle of the test
 *     DISABLE_ECC_CL91_BUFFER_BLK2 disable ECC check/generationThis bit should not be changed from 1 to 0 in the middle of the test
 *     DISABLE_ECC_DESKEW_MEM_0 disable ECC check/generationThis bit should not be changed from 1 to 0 in the middle of the test
 *     DISABLE_ECC_DESKEW_MEM_1 disable ECC check/generationThis bit should not be changed from 1 to 0 in the middle of the test
 *     DISABLE_ECC_DESKEW_MEM_2 disable ECC check/generationThis bit should not be changed from 1 to 0 in the middle of the test
 */
#define BCMI_TSCF_XGXS_RX_X4_ECC_DIS_ECC_MEM_GEN2r (0x0000c38a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_ECC_DIS_ECC_MEM_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_ECC_DIS_ECC_MEM_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_ECC_DIS_ECC_MEM_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_ecc_dis_ecc_mem_gen2[1];
	uint32_t _rx_x4_ecc_dis_ecc_mem_gen2;
} BCMI_TSCF_XGXS_RX_X4_ECC_DIS_ECC_MEM_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_ECC_DIS_ECC_MEM_GEN2r_CLR(r) (r).rx_x4_ecc_dis_ecc_mem_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_ECC_DIS_ECC_MEM_GEN2r_SET(r,d) (r).rx_x4_ecc_dis_ecc_mem_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_ECC_DIS_ECC_MEM_GEN2r_GET(r) (r).rx_x4_ecc_dis_ecc_mem_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_DESKEW_MEM_2f_GET(r) ((((r).rx_x4_ecc_dis_ecc_mem_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_DESKEW_MEM_2f_SET(r,f) (r).rx_x4_ecc_dis_ecc_mem_gen2[0]=(((r).rx_x4_ecc_dis_ecc_mem_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_RX_X4_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_DESKEW_MEM_1f_GET(r) ((((r).rx_x4_ecc_dis_ecc_mem_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_DESKEW_MEM_1f_SET(r,f) (r).rx_x4_ecc_dis_ecc_mem_gen2[0]=(((r).rx_x4_ecc_dis_ecc_mem_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_RX_X4_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_DESKEW_MEM_0f_GET(r) ((((r).rx_x4_ecc_dis_ecc_mem_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_DESKEW_MEM_0f_SET(r,f) (r).rx_x4_ecc_dis_ecc_mem_gen2[0]=(((r).rx_x4_ecc_dis_ecc_mem_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_RX_X4_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_CL91_BUFFER_BLK2f_GET(r) ((((r).rx_x4_ecc_dis_ecc_mem_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_CL91_BUFFER_BLK2f_SET(r,f) (r).rx_x4_ecc_dis_ecc_mem_gen2[0]=(((r).rx_x4_ecc_dis_ecc_mem_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_RX_X4_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_CL91_BUFFER_BLK1f_GET(r) ((((r).rx_x4_ecc_dis_ecc_mem_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_CL91_BUFFER_BLK1f_SET(r,f) (r).rx_x4_ecc_dis_ecc_mem_gen2[0]=(((r).rx_x4_ecc_dis_ecc_mem_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_RX_X4_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_CL91_BUFFER_BLK0f_GET(r) (((r).rx_x4_ecc_dis_ecc_mem_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_RX_X4_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_CL91_BUFFER_BLK0f_SET(r,f) (r).rx_x4_ecc_dis_ecc_mem_gen2[0]=(((r).rx_x4_ecc_dis_ecc_mem_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_X4_ECC_DIS_ECC_MEM_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_ECC_DIS_ECC_MEM_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_DIS_ECC_MEM_GEN2r,(_r._rx_x4_ecc_dis_ecc_mem_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_ECC_DIS_ECC_MEM_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_DIS_ECC_MEM_GEN2r,(_r._rx_x4_ecc_dis_ecc_mem_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_ECC_DIS_ECC_MEM_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_DIS_ECC_MEM_GEN2r,(_r._rx_x4_ecc_dis_ecc_mem_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_ECC_DIS_ECC_MEM_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_DIS_ECC_MEM_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ecc_dis_ecc_mem_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_ECC_DIS_ECC_MEM_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_DIS_ECC_MEM_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ecc_dis_ecc_mem_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_ECC_DIS_ECC_MEM_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_DIS_ECC_MEM_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_ecc_dis_ecc_mem_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_ECC_DIS_ECC_MEM_GEN2r BCMI_TSCF_XGXS_RX_X4_ECC_DIS_ECC_MEM_GEN2r
#define RX_X4_ECC_DIS_ECC_MEM_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_ECC_DIS_ECC_MEM_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_ECC_DIS_ECC_MEM_GEN2r_t RX_X4_ECC_DIS_ECC_MEM_GEN2r_t;
#define RX_X4_ECC_DIS_ECC_MEM_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_ECC_DIS_ECC_MEM_GEN2r_CLR
#define RX_X4_ECC_DIS_ECC_MEM_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_ECC_DIS_ECC_MEM_GEN2r_SET
#define RX_X4_ECC_DIS_ECC_MEM_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_ECC_DIS_ECC_MEM_GEN2r_GET
#define RX_X4_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_DESKEW_MEM_2f_GET BCMI_TSCF_XGXS_RX_X4_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_DESKEW_MEM_2f_GET
#define RX_X4_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_DESKEW_MEM_2f_SET BCMI_TSCF_XGXS_RX_X4_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_DESKEW_MEM_2f_SET
#define RX_X4_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_DESKEW_MEM_1f_GET BCMI_TSCF_XGXS_RX_X4_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_DESKEW_MEM_1f_GET
#define RX_X4_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_DESKEW_MEM_1f_SET BCMI_TSCF_XGXS_RX_X4_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_DESKEW_MEM_1f_SET
#define RX_X4_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_DESKEW_MEM_0f_GET BCMI_TSCF_XGXS_RX_X4_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_DESKEW_MEM_0f_GET
#define RX_X4_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_DESKEW_MEM_0f_SET BCMI_TSCF_XGXS_RX_X4_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_DESKEW_MEM_0f_SET
#define RX_X4_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_CL91_BUFFER_BLK2f_GET BCMI_TSCF_XGXS_RX_X4_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_CL91_BUFFER_BLK2f_GET
#define RX_X4_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_CL91_BUFFER_BLK2f_SET BCMI_TSCF_XGXS_RX_X4_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_CL91_BUFFER_BLK2f_SET
#define RX_X4_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_CL91_BUFFER_BLK1f_GET BCMI_TSCF_XGXS_RX_X4_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_CL91_BUFFER_BLK1f_GET
#define RX_X4_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_CL91_BUFFER_BLK1f_SET BCMI_TSCF_XGXS_RX_X4_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_CL91_BUFFER_BLK1f_SET
#define RX_X4_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_CL91_BUFFER_BLK0f_GET BCMI_TSCF_XGXS_RX_X4_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_CL91_BUFFER_BLK0f_GET
#define RX_X4_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_CL91_BUFFER_BLK0f_SET BCMI_TSCF_XGXS_RX_X4_ECC_DIS_ECC_MEM_GEN2r_DISABLE_ECC_CL91_BUFFER_BLK0f_SET
#define READ_RX_X4_ECC_DIS_ECC_MEM_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_ECC_DIS_ECC_MEM_GEN2r
#define WRITE_RX_X4_ECC_DIS_ECC_MEM_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_ECC_DIS_ECC_MEM_GEN2r
#define MODIFY_RX_X4_ECC_DIS_ECC_MEM_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_ECC_DIS_ECC_MEM_GEN2r
#define READLN_RX_X4_ECC_DIS_ECC_MEM_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_ECC_DIS_ECC_MEM_GEN2r
#define WRITELN_RX_X4_ECC_DIS_ECC_MEM_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_ECC_DIS_ECC_MEM_GEN2r
#define WRITEALL_RX_X4_ECC_DIS_ECC_MEM_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_ECC_DIS_ECC_MEM_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_ECC_DIS_ECC_MEM_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  RX_X4_ECC_CORRUPT_GEN2
 * BLOCKS:   RX_X4_ECC
 * REGADDR:  0xc38b
 * DESC:     Corrupt ECC register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CORRUPT_ECC_CL91_BUFFER_BLK0 ECC error injection2'b01 - Inject 2-bit error on write data2'b10 - Inject 1-bit error on read data2'b11 - Inject 2-bit error on read data
 *     CORRUPT_ECC_CL91_BUFFER_BLK1 ECC error injection2'b01 - Inject 2-bit error on write data2'b10 - Inject 1-bit error on read data2'b11 - Inject 2-bit error on read data
 *     CORRUPT_ECC_CL91_BUFFER_BLK2 ECC error injection2'b01 - Inject 2-bit error on write data2'b10 - Inject 1-bit error on read data2'b11 - Inject 2-bit error on read data
 *     CORRUPT_ECC_DESKEW_MEM_0 ECC error injection2'b01 - Inject 2-bit error on write data2'b10 - Inject 1-bit error on read data2'b11 - Inject 2-bit error on read data
 *     CORRUPT_ECC_DESKEW_MEM_1 ECC error injection2'b01 - Inject 2-bit error on write data2'b10 - Inject 1-bit error on read data2'b11 - Inject 2-bit error on read data
 *     CORRUPT_ECC_DESKEW_MEM_2 ECC error injection2'b01 - Inject 2-bit error on write data2'b10 - Inject 1-bit error on read data2'b11 - Inject 2-bit error on read data
 */
#define BCMI_TSCF_XGXS_RX_X4_ECC_CORRUPT_GEN2r (0x0000c38b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_RX_X4_ECC_CORRUPT_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program RX_X4_ECC_CORRUPT_GEN2.
 */
typedef union BCMI_TSCF_XGXS_RX_X4_ECC_CORRUPT_GEN2r_s {
	uint32_t v[1];
	uint32_t rx_x4_ecc_corrupt_gen2[1];
	uint32_t _rx_x4_ecc_corrupt_gen2;
} BCMI_TSCF_XGXS_RX_X4_ECC_CORRUPT_GEN2r_t;

#define BCMI_TSCF_XGXS_RX_X4_ECC_CORRUPT_GEN2r_CLR(r) (r).rx_x4_ecc_corrupt_gen2[0] = 0
#define BCMI_TSCF_XGXS_RX_X4_ECC_CORRUPT_GEN2r_SET(r,d) (r).rx_x4_ecc_corrupt_gen2[0] = d
#define BCMI_TSCF_XGXS_RX_X4_ECC_CORRUPT_GEN2r_GET(r) (r).rx_x4_ecc_corrupt_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_RX_X4_ECC_CORRUPT_GEN2r_CORRUPT_ECC_DESKEW_MEM_2f_GET(r) ((((r).rx_x4_ecc_corrupt_gen2[0]) >> 10) & 0x3)
#define BCMI_TSCF_XGXS_RX_X4_ECC_CORRUPT_GEN2r_CORRUPT_ECC_DESKEW_MEM_2f_SET(r,f) (r).rx_x4_ecc_corrupt_gen2[0]=(((r).rx_x4_ecc_corrupt_gen2[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10)) | (3 << (16 + 10))
#define BCMI_TSCF_XGXS_RX_X4_ECC_CORRUPT_GEN2r_CORRUPT_ECC_DESKEW_MEM_1f_GET(r) ((((r).rx_x4_ecc_corrupt_gen2[0]) >> 8) & 0x3)
#define BCMI_TSCF_XGXS_RX_X4_ECC_CORRUPT_GEN2r_CORRUPT_ECC_DESKEW_MEM_1f_SET(r,f) (r).rx_x4_ecc_corrupt_gen2[0]=(((r).rx_x4_ecc_corrupt_gen2[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))
#define BCMI_TSCF_XGXS_RX_X4_ECC_CORRUPT_GEN2r_CORRUPT_ECC_DESKEW_MEM_0f_GET(r) ((((r).rx_x4_ecc_corrupt_gen2[0]) >> 6) & 0x3)
#define BCMI_TSCF_XGXS_RX_X4_ECC_CORRUPT_GEN2r_CORRUPT_ECC_DESKEW_MEM_0f_SET(r,f) (r).rx_x4_ecc_corrupt_gen2[0]=(((r).rx_x4_ecc_corrupt_gen2[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6)) | (3 << (16 + 6))
#define BCMI_TSCF_XGXS_RX_X4_ECC_CORRUPT_GEN2r_CORRUPT_ECC_CL91_BUFFER_BLK2f_GET(r) ((((r).rx_x4_ecc_corrupt_gen2[0]) >> 4) & 0x3)
#define BCMI_TSCF_XGXS_RX_X4_ECC_CORRUPT_GEN2r_CORRUPT_ECC_CL91_BUFFER_BLK2f_SET(r,f) (r).rx_x4_ecc_corrupt_gen2[0]=(((r).rx_x4_ecc_corrupt_gen2[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_XGXS_RX_X4_ECC_CORRUPT_GEN2r_CORRUPT_ECC_CL91_BUFFER_BLK1f_GET(r) ((((r).rx_x4_ecc_corrupt_gen2[0]) >> 2) & 0x3)
#define BCMI_TSCF_XGXS_RX_X4_ECC_CORRUPT_GEN2r_CORRUPT_ECC_CL91_BUFFER_BLK1f_SET(r,f) (r).rx_x4_ecc_corrupt_gen2[0]=(((r).rx_x4_ecc_corrupt_gen2[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2)) | (3 << (16 + 2))
#define BCMI_TSCF_XGXS_RX_X4_ECC_CORRUPT_GEN2r_CORRUPT_ECC_CL91_BUFFER_BLK0f_GET(r) (((r).rx_x4_ecc_corrupt_gen2[0]) & 0x3)
#define BCMI_TSCF_XGXS_RX_X4_ECC_CORRUPT_GEN2r_CORRUPT_ECC_CL91_BUFFER_BLK0f_SET(r,f) (r).rx_x4_ecc_corrupt_gen2[0]=(((r).rx_x4_ecc_corrupt_gen2[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access RX_X4_ECC_CORRUPT_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_RX_X4_ECC_CORRUPT_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_CORRUPT_GEN2r,(_r._rx_x4_ecc_corrupt_gen2))
#define BCMI_TSCF_XGXS_WRITE_RX_X4_ECC_CORRUPT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_CORRUPT_GEN2r,(_r._rx_x4_ecc_corrupt_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_RX_X4_ECC_CORRUPT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_CORRUPT_GEN2r,(_r._rx_x4_ecc_corrupt_gen2))
#define BCMI_TSCF_XGXS_READLN_RX_X4_ECC_CORRUPT_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_CORRUPT_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ecc_corrupt_gen2))
#define BCMI_TSCF_XGXS_WRITELN_RX_X4_ECC_CORRUPT_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_CORRUPT_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_x4_ecc_corrupt_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_RX_X4_ECC_CORRUPT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_RX_X4_ECC_CORRUPT_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_x4_ecc_corrupt_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_X4_ECC_CORRUPT_GEN2r BCMI_TSCF_XGXS_RX_X4_ECC_CORRUPT_GEN2r
#define RX_X4_ECC_CORRUPT_GEN2r_SIZE BCMI_TSCF_XGXS_RX_X4_ECC_CORRUPT_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_RX_X4_ECC_CORRUPT_GEN2r_t RX_X4_ECC_CORRUPT_GEN2r_t;
#define RX_X4_ECC_CORRUPT_GEN2r_CLR BCMI_TSCF_XGXS_RX_X4_ECC_CORRUPT_GEN2r_CLR
#define RX_X4_ECC_CORRUPT_GEN2r_SET BCMI_TSCF_XGXS_RX_X4_ECC_CORRUPT_GEN2r_SET
#define RX_X4_ECC_CORRUPT_GEN2r_GET BCMI_TSCF_XGXS_RX_X4_ECC_CORRUPT_GEN2r_GET
#define RX_X4_ECC_CORRUPT_GEN2r_CORRUPT_ECC_DESKEW_MEM_2f_GET BCMI_TSCF_XGXS_RX_X4_ECC_CORRUPT_GEN2r_CORRUPT_ECC_DESKEW_MEM_2f_GET
#define RX_X4_ECC_CORRUPT_GEN2r_CORRUPT_ECC_DESKEW_MEM_2f_SET BCMI_TSCF_XGXS_RX_X4_ECC_CORRUPT_GEN2r_CORRUPT_ECC_DESKEW_MEM_2f_SET
#define RX_X4_ECC_CORRUPT_GEN2r_CORRUPT_ECC_DESKEW_MEM_1f_GET BCMI_TSCF_XGXS_RX_X4_ECC_CORRUPT_GEN2r_CORRUPT_ECC_DESKEW_MEM_1f_GET
#define RX_X4_ECC_CORRUPT_GEN2r_CORRUPT_ECC_DESKEW_MEM_1f_SET BCMI_TSCF_XGXS_RX_X4_ECC_CORRUPT_GEN2r_CORRUPT_ECC_DESKEW_MEM_1f_SET
#define RX_X4_ECC_CORRUPT_GEN2r_CORRUPT_ECC_DESKEW_MEM_0f_GET BCMI_TSCF_XGXS_RX_X4_ECC_CORRUPT_GEN2r_CORRUPT_ECC_DESKEW_MEM_0f_GET
#define RX_X4_ECC_CORRUPT_GEN2r_CORRUPT_ECC_DESKEW_MEM_0f_SET BCMI_TSCF_XGXS_RX_X4_ECC_CORRUPT_GEN2r_CORRUPT_ECC_DESKEW_MEM_0f_SET
#define RX_X4_ECC_CORRUPT_GEN2r_CORRUPT_ECC_CL91_BUFFER_BLK2f_GET BCMI_TSCF_XGXS_RX_X4_ECC_CORRUPT_GEN2r_CORRUPT_ECC_CL91_BUFFER_BLK2f_GET
#define RX_X4_ECC_CORRUPT_GEN2r_CORRUPT_ECC_CL91_BUFFER_BLK2f_SET BCMI_TSCF_XGXS_RX_X4_ECC_CORRUPT_GEN2r_CORRUPT_ECC_CL91_BUFFER_BLK2f_SET
#define RX_X4_ECC_CORRUPT_GEN2r_CORRUPT_ECC_CL91_BUFFER_BLK1f_GET BCMI_TSCF_XGXS_RX_X4_ECC_CORRUPT_GEN2r_CORRUPT_ECC_CL91_BUFFER_BLK1f_GET
#define RX_X4_ECC_CORRUPT_GEN2r_CORRUPT_ECC_CL91_BUFFER_BLK1f_SET BCMI_TSCF_XGXS_RX_X4_ECC_CORRUPT_GEN2r_CORRUPT_ECC_CL91_BUFFER_BLK1f_SET
#define RX_X4_ECC_CORRUPT_GEN2r_CORRUPT_ECC_CL91_BUFFER_BLK0f_GET BCMI_TSCF_XGXS_RX_X4_ECC_CORRUPT_GEN2r_CORRUPT_ECC_CL91_BUFFER_BLK0f_GET
#define RX_X4_ECC_CORRUPT_GEN2r_CORRUPT_ECC_CL91_BUFFER_BLK0f_SET BCMI_TSCF_XGXS_RX_X4_ECC_CORRUPT_GEN2r_CORRUPT_ECC_CL91_BUFFER_BLK0f_SET
#define READ_RX_X4_ECC_CORRUPT_GEN2r BCMI_TSCF_XGXS_READ_RX_X4_ECC_CORRUPT_GEN2r
#define WRITE_RX_X4_ECC_CORRUPT_GEN2r BCMI_TSCF_XGXS_WRITE_RX_X4_ECC_CORRUPT_GEN2r
#define MODIFY_RX_X4_ECC_CORRUPT_GEN2r BCMI_TSCF_XGXS_MODIFY_RX_X4_ECC_CORRUPT_GEN2r
#define READLN_RX_X4_ECC_CORRUPT_GEN2r BCMI_TSCF_XGXS_READLN_RX_X4_ECC_CORRUPT_GEN2r
#define WRITELN_RX_X4_ECC_CORRUPT_GEN2r BCMI_TSCF_XGXS_WRITELN_RX_X4_ECC_CORRUPT_GEN2r
#define WRITEALL_RX_X4_ECC_CORRUPT_GEN2r BCMI_TSCF_XGXS_WRITEALL_RX_X4_ECC_CORRUPT_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_RX_X4_ECC_CORRUPT_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  ACC_CTL_GEN2
 * BLOCKS:   MDIO_CL22_IEEE_COM
 * REGADDR:  0x000d
 * DEVAD:    1
 * DESC:     MMD_access_control
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MDIO_DEVAD       Device address
 *     MDIO_FUNCTION    00 = address01 = data, no post increment10 = data, post increment on reads and write11 = data, post increment on writes only
 */
#define BCMI_TSCF_XGXS_ACC_CTL_GEN2r (0x0001000d | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_ACC_CTL_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program ACC_CTL_GEN2.
 */
typedef union BCMI_TSCF_XGXS_ACC_CTL_GEN2r_s {
	uint32_t v[1];
	uint32_t acc_ctl_gen2[1];
	uint32_t _acc_ctl_gen2;
} BCMI_TSCF_XGXS_ACC_CTL_GEN2r_t;

#define BCMI_TSCF_XGXS_ACC_CTL_GEN2r_CLR(r) (r).acc_ctl_gen2[0] = 0
#define BCMI_TSCF_XGXS_ACC_CTL_GEN2r_SET(r,d) (r).acc_ctl_gen2[0] = d
#define BCMI_TSCF_XGXS_ACC_CTL_GEN2r_GET(r) (r).acc_ctl_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_ACC_CTL_GEN2r_MDIO_FUNCTIONf_GET(r) ((((r).acc_ctl_gen2[0]) >> 14) & 0x3)
#define BCMI_TSCF_XGXS_ACC_CTL_GEN2r_MDIO_FUNCTIONf_SET(r,f) (r).acc_ctl_gen2[0]=(((r).acc_ctl_gen2[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_TSCF_XGXS_ACC_CTL_GEN2r_MDIO_DEVADf_GET(r) (((r).acc_ctl_gen2[0]) & 0x1f)
#define BCMI_TSCF_XGXS_ACC_CTL_GEN2r_MDIO_DEVADf_SET(r,f) (r).acc_ctl_gen2[0]=(((r).acc_ctl_gen2[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access ACC_CTL_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_ACC_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_ACC_CTL_GEN2r,(_r._acc_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITE_ACC_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_ACC_CTL_GEN2r,(_r._acc_ctl_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_ACC_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_ACC_CTL_GEN2r,(_r._acc_ctl_gen2))
#define BCMI_TSCF_XGXS_READLN_ACC_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_ACC_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._acc_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITELN_ACC_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_ACC_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._acc_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_ACC_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_ACC_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._acc_ctl_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define ACC_CTL_GEN2r BCMI_TSCF_XGXS_ACC_CTL_GEN2r
#define ACC_CTL_GEN2r_SIZE BCMI_TSCF_XGXS_ACC_CTL_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_ACC_CTL_GEN2r_t ACC_CTL_GEN2r_t;
#define ACC_CTL_GEN2r_CLR BCMI_TSCF_XGXS_ACC_CTL_GEN2r_CLR
#define ACC_CTL_GEN2r_SET BCMI_TSCF_XGXS_ACC_CTL_GEN2r_SET
#define ACC_CTL_GEN2r_GET BCMI_TSCF_XGXS_ACC_CTL_GEN2r_GET
#define ACC_CTL_GEN2r_MDIO_FUNCTIONf_GET BCMI_TSCF_XGXS_ACC_CTL_GEN2r_MDIO_FUNCTIONf_GET
#define ACC_CTL_GEN2r_MDIO_FUNCTIONf_SET BCMI_TSCF_XGXS_ACC_CTL_GEN2r_MDIO_FUNCTIONf_SET
#define ACC_CTL_GEN2r_MDIO_DEVADf_GET BCMI_TSCF_XGXS_ACC_CTL_GEN2r_MDIO_DEVADf_GET
#define ACC_CTL_GEN2r_MDIO_DEVADf_SET BCMI_TSCF_XGXS_ACC_CTL_GEN2r_MDIO_DEVADf_SET
#define READ_ACC_CTL_GEN2r BCMI_TSCF_XGXS_READ_ACC_CTL_GEN2r
#define WRITE_ACC_CTL_GEN2r BCMI_TSCF_XGXS_WRITE_ACC_CTL_GEN2r
#define MODIFY_ACC_CTL_GEN2r BCMI_TSCF_XGXS_MODIFY_ACC_CTL_GEN2r
#define READLN_ACC_CTL_GEN2r BCMI_TSCF_XGXS_READLN_ACC_CTL_GEN2r
#define WRITELN_ACC_CTL_GEN2r BCMI_TSCF_XGXS_WRITELN_ACC_CTL_GEN2r
#define WRITEALL_ACC_CTL_GEN2r BCMI_TSCF_XGXS_WRITEALL_ACC_CTL_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_ACC_CTL_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  ACC_ADDR_DATA_GEN2
 * BLOCKS:   MDIO_CL22_IEEE_COM
 * REGADDR:  0x000e
 * DEVAD:    1
 * DESC:     MMD_access_addr_data
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MDIO_ADDR_DATA   If function field in PMD access control register is set to 00then this is the address register. Otherwise it is the data register
 */
#define BCMI_TSCF_XGXS_ACC_ADDR_DATA_GEN2r (0x0001000e | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_ACC_ADDR_DATA_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program ACC_ADDR_DATA_GEN2.
 */
typedef union BCMI_TSCF_XGXS_ACC_ADDR_DATA_GEN2r_s {
	uint32_t v[1];
	uint32_t acc_addr_data_gen2[1];
	uint32_t _acc_addr_data_gen2;
} BCMI_TSCF_XGXS_ACC_ADDR_DATA_GEN2r_t;

#define BCMI_TSCF_XGXS_ACC_ADDR_DATA_GEN2r_CLR(r) (r).acc_addr_data_gen2[0] = 0
#define BCMI_TSCF_XGXS_ACC_ADDR_DATA_GEN2r_SET(r,d) (r).acc_addr_data_gen2[0] = d
#define BCMI_TSCF_XGXS_ACC_ADDR_DATA_GEN2r_GET(r) (r).acc_addr_data_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_ACC_ADDR_DATA_GEN2r_MDIO_ADDR_DATAf_GET(r) (((r).acc_addr_data_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_ACC_ADDR_DATA_GEN2r_MDIO_ADDR_DATAf_SET(r,f) (r).acc_addr_data_gen2[0]=(((r).acc_addr_data_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access ACC_ADDR_DATA_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_ACC_ADDR_DATA_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_ACC_ADDR_DATA_GEN2r,(_r._acc_addr_data_gen2))
#define BCMI_TSCF_XGXS_WRITE_ACC_ADDR_DATA_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_ACC_ADDR_DATA_GEN2r,(_r._acc_addr_data_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_ACC_ADDR_DATA_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_ACC_ADDR_DATA_GEN2r,(_r._acc_addr_data_gen2))
#define BCMI_TSCF_XGXS_READLN_ACC_ADDR_DATA_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_ACC_ADDR_DATA_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._acc_addr_data_gen2))
#define BCMI_TSCF_XGXS_WRITELN_ACC_ADDR_DATA_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_ACC_ADDR_DATA_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._acc_addr_data_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_ACC_ADDR_DATA_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_ACC_ADDR_DATA_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._acc_addr_data_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define ACC_ADDR_DATA_GEN2r BCMI_TSCF_XGXS_ACC_ADDR_DATA_GEN2r
#define ACC_ADDR_DATA_GEN2r_SIZE BCMI_TSCF_XGXS_ACC_ADDR_DATA_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_ACC_ADDR_DATA_GEN2r_t ACC_ADDR_DATA_GEN2r_t;
#define ACC_ADDR_DATA_GEN2r_CLR BCMI_TSCF_XGXS_ACC_ADDR_DATA_GEN2r_CLR
#define ACC_ADDR_DATA_GEN2r_SET BCMI_TSCF_XGXS_ACC_ADDR_DATA_GEN2r_SET
#define ACC_ADDR_DATA_GEN2r_GET BCMI_TSCF_XGXS_ACC_ADDR_DATA_GEN2r_GET
#define ACC_ADDR_DATA_GEN2r_MDIO_ADDR_DATAf_GET BCMI_TSCF_XGXS_ACC_ADDR_DATA_GEN2r_MDIO_ADDR_DATAf_GET
#define ACC_ADDR_DATA_GEN2r_MDIO_ADDR_DATAf_SET BCMI_TSCF_XGXS_ACC_ADDR_DATA_GEN2r_MDIO_ADDR_DATAf_SET
#define READ_ACC_ADDR_DATA_GEN2r BCMI_TSCF_XGXS_READ_ACC_ADDR_DATA_GEN2r
#define WRITE_ACC_ADDR_DATA_GEN2r BCMI_TSCF_XGXS_WRITE_ACC_ADDR_DATA_GEN2r
#define MODIFY_ACC_ADDR_DATA_GEN2r BCMI_TSCF_XGXS_MODIFY_ACC_ADDR_DATA_GEN2r
#define READLN_ACC_ADDR_DATA_GEN2r BCMI_TSCF_XGXS_READLN_ACC_ADDR_DATA_GEN2r
#define WRITELN_ACC_ADDR_DATA_GEN2r BCMI_TSCF_XGXS_WRITELN_ACC_ADDR_DATA_GEN2r
#define WRITEALL_ACC_ADDR_DATA_GEN2r BCMI_TSCF_XGXS_WRITEALL_ACC_ADDR_DATA_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_ACC_ADDR_DATA_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  CL93N72_IT_BASE_R_PMD_CTL_150_GEN2
 * BLOCKS:   CL93N72_IEEE_TX
 * REGADDR:  0x0096
 * DEVAD:    1
 * DESC:     BASE-R PMD control register 150
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL93N72_IEEE_RESTART_TRAINING 1 = Restart 10GBASE-KR cl93n72 training0 = Normal operation(self clearing)
 *     CL93N72_IEEE_TRAINING_ENABLE 1 = Enable the 10GBASE-KR start-up protocol0 = Disable the 10GBASE-KR start-up protocol
 */
#define BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r (0x00010096 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_IT_BASE_R_PMD_CTL_150_GEN2.
 */
typedef union BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r_s {
	uint32_t v[1];
	uint32_t cl93n72_it_base_r_pmd_ctl_150_gen2[1];
	uint32_t _cl93n72_it_base_r_pmd_ctl_150_gen2;
} BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r_t;

#define BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r_CLR(r) (r).cl93n72_it_base_r_pmd_ctl_150_gen2[0] = 0
#define BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r_SET(r,d) (r).cl93n72_it_base_r_pmd_ctl_150_gen2[0] = d
#define BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r_GET(r) (r).cl93n72_it_base_r_pmd_ctl_150_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r_CL93N72_IEEE_TRAINING_ENABLEf_GET(r) ((((r).cl93n72_it_base_r_pmd_ctl_150_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r_CL93N72_IEEE_TRAINING_ENABLEf_SET(r,f) (r).cl93n72_it_base_r_pmd_ctl_150_gen2[0]=(((r).cl93n72_it_base_r_pmd_ctl_150_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r_CL93N72_IEEE_RESTART_TRAININGf_GET(r) (((r).cl93n72_it_base_r_pmd_ctl_150_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r_CL93N72_IEEE_RESTART_TRAININGf_SET(r,f) (r).cl93n72_it_base_r_pmd_ctl_150_gen2[0]=(((r).cl93n72_it_base_r_pmd_ctl_150_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access CL93N72_IT_BASE_R_PMD_CTL_150_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r,(_r._cl93n72_it_base_r_pmd_ctl_150_gen2))
#define BCMI_TSCF_XGXS_WRITE_CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r,(_r._cl93n72_it_base_r_pmd_ctl_150_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r,(_r._cl93n72_it_base_r_pmd_ctl_150_gen2))
#define BCMI_TSCF_XGXS_READLN_CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_it_base_r_pmd_ctl_150_gen2))
#define BCMI_TSCF_XGXS_WRITELN_CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_it_base_r_pmd_ctl_150_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_it_base_r_pmd_ctl_150_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r
#define CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r_SIZE BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r_t CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r_t;
#define CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r_CLR BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r_CLR
#define CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r_SET BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r_SET
#define CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r_GET BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r_GET
#define CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r_CL93N72_IEEE_TRAINING_ENABLEf_GET BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r_CL93N72_IEEE_TRAINING_ENABLEf_GET
#define CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r_CL93N72_IEEE_TRAINING_ENABLEf_SET BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r_CL93N72_IEEE_TRAINING_ENABLEf_SET
#define CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r_CL93N72_IEEE_RESTART_TRAININGf_GET BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r_CL93N72_IEEE_RESTART_TRAININGf_GET
#define CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r_CL93N72_IEEE_RESTART_TRAININGf_SET BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r_CL93N72_IEEE_RESTART_TRAININGf_SET
#define READ_CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r BCMI_TSCF_XGXS_READ_CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r
#define WRITE_CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r BCMI_TSCF_XGXS_WRITE_CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r
#define MODIFY_CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r BCMI_TSCF_XGXS_MODIFY_CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r
#define READLN_CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r BCMI_TSCF_XGXS_READLN_CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r
#define WRITELN_CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r BCMI_TSCF_XGXS_WRITELN_CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r
#define WRITEALL_CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r BCMI_TSCF_XGXS_WRITEALL_CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_CTL_150_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  CL93N72_IT_BASE_R_PMD_STS_151_GEN2
 * BLOCKS:   CL93N72_IEEE_TX
 * REGADDR:  0x0097
 * DEVAD:    1
 * DESC:     BASE-R PMD status register 151
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CL93N72_IEEE_RECEIVER_STATUS 1 = Receiver trained and ready to receive data0 = Receiver training
 *     CL93N72_IEEE_FRAME_LOCK 1 = Training frame delineation detected0 = Training frame delineation not detected
 *     CL93N72_IEEE_TRAINING_STATUS 1 = Start-up protocol in progress0 = Start-up protocol complete
 *     CL93N72_IEEE_TRAINING_FAILURE 1 = Training failure has been detected0 = Training failure has not been detected
 */
#define BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r (0x00010097 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_IT_BASE_R_PMD_STS_151_GEN2.
 */
typedef union BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r_s {
	uint32_t v[1];
	uint32_t cl93n72_it_base_r_pmd_sts_151_gen2[1];
	uint32_t _cl93n72_it_base_r_pmd_sts_151_gen2;
} BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r_t;

#define BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r_CLR(r) (r).cl93n72_it_base_r_pmd_sts_151_gen2[0] = 0
#define BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r_SET(r,d) (r).cl93n72_it_base_r_pmd_sts_151_gen2[0] = d
#define BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r_GET(r) (r).cl93n72_it_base_r_pmd_sts_151_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r_CL93N72_IEEE_TRAINING_FAILUREf_GET(r) ((((r).cl93n72_it_base_r_pmd_sts_151_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r_CL93N72_IEEE_TRAINING_FAILUREf_SET(r,f) (r).cl93n72_it_base_r_pmd_sts_151_gen2[0]=(((r).cl93n72_it_base_r_pmd_sts_151_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r_CL93N72_IEEE_TRAINING_STATUSf_GET(r) ((((r).cl93n72_it_base_r_pmd_sts_151_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r_CL93N72_IEEE_TRAINING_STATUSf_SET(r,f) (r).cl93n72_it_base_r_pmd_sts_151_gen2[0]=(((r).cl93n72_it_base_r_pmd_sts_151_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r_CL93N72_IEEE_FRAME_LOCKf_GET(r) ((((r).cl93n72_it_base_r_pmd_sts_151_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r_CL93N72_IEEE_FRAME_LOCKf_SET(r,f) (r).cl93n72_it_base_r_pmd_sts_151_gen2[0]=(((r).cl93n72_it_base_r_pmd_sts_151_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r_CL93N72_IEEE_RECEIVER_STATUSf_GET(r) (((r).cl93n72_it_base_r_pmd_sts_151_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r_CL93N72_IEEE_RECEIVER_STATUSf_SET(r,f) (r).cl93n72_it_base_r_pmd_sts_151_gen2[0]=(((r).cl93n72_it_base_r_pmd_sts_151_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access CL93N72_IT_BASE_R_PMD_STS_151_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r,(_r._cl93n72_it_base_r_pmd_sts_151_gen2))
#define BCMI_TSCF_XGXS_WRITE_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r,(_r._cl93n72_it_base_r_pmd_sts_151_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r,(_r._cl93n72_it_base_r_pmd_sts_151_gen2))
#define BCMI_TSCF_XGXS_READLN_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_it_base_r_pmd_sts_151_gen2))
#define BCMI_TSCF_XGXS_WRITELN_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_it_base_r_pmd_sts_151_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_it_base_r_pmd_sts_151_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_IT_BASE_R_PMD_STS_151_GEN2r BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r
#define CL93N72_IT_BASE_R_PMD_STS_151_GEN2r_SIZE BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r_t CL93N72_IT_BASE_R_PMD_STS_151_GEN2r_t;
#define CL93N72_IT_BASE_R_PMD_STS_151_GEN2r_CLR BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r_CLR
#define CL93N72_IT_BASE_R_PMD_STS_151_GEN2r_SET BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r_SET
#define CL93N72_IT_BASE_R_PMD_STS_151_GEN2r_GET BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r_GET
#define CL93N72_IT_BASE_R_PMD_STS_151_GEN2r_CL93N72_IEEE_TRAINING_FAILUREf_GET BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r_CL93N72_IEEE_TRAINING_FAILUREf_GET
#define CL93N72_IT_BASE_R_PMD_STS_151_GEN2r_CL93N72_IEEE_TRAINING_FAILUREf_SET BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r_CL93N72_IEEE_TRAINING_FAILUREf_SET
#define CL93N72_IT_BASE_R_PMD_STS_151_GEN2r_CL93N72_IEEE_TRAINING_STATUSf_GET BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r_CL93N72_IEEE_TRAINING_STATUSf_GET
#define CL93N72_IT_BASE_R_PMD_STS_151_GEN2r_CL93N72_IEEE_TRAINING_STATUSf_SET BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r_CL93N72_IEEE_TRAINING_STATUSf_SET
#define CL93N72_IT_BASE_R_PMD_STS_151_GEN2r_CL93N72_IEEE_FRAME_LOCKf_GET BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r_CL93N72_IEEE_FRAME_LOCKf_GET
#define CL93N72_IT_BASE_R_PMD_STS_151_GEN2r_CL93N72_IEEE_FRAME_LOCKf_SET BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r_CL93N72_IEEE_FRAME_LOCKf_SET
#define CL93N72_IT_BASE_R_PMD_STS_151_GEN2r_CL93N72_IEEE_RECEIVER_STATUSf_GET BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r_CL93N72_IEEE_RECEIVER_STATUSf_GET
#define CL93N72_IT_BASE_R_PMD_STS_151_GEN2r_CL93N72_IEEE_RECEIVER_STATUSf_SET BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r_CL93N72_IEEE_RECEIVER_STATUSf_SET
#define READ_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r BCMI_TSCF_XGXS_READ_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r
#define WRITE_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r BCMI_TSCF_XGXS_WRITE_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r
#define MODIFY_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r BCMI_TSCF_XGXS_MODIFY_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r
#define READLN_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r BCMI_TSCF_XGXS_READLN_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r
#define WRITELN_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r BCMI_TSCF_XGXS_WRITELN_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r
#define WRITEALL_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r BCMI_TSCF_XGXS_WRITEALL_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_PMD_STS_151_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  CL93N72_IR_BASE_R_LP_COEFF_UPD_152_GEN2
 * BLOCKS:   CL93N72_IEEE_RX
 * REGADDR:  0x0098
 * DEVAD:    1
 * DESC:     BASE-R LP coeff update register 152
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CL93N72_IEEE_LP_COEFF_UPDATE This register reflects the first 16-bit Word of the training framemost recently recieived from the Link PartnerThis register is not writeable when cl93n72 training is disabled asindicated in the IEEE spec.15:14 Reserved13   Preset1 = Preset coefficients0 = Normal operation12   Initialize 1 = Initialize coefficients0 = Normal operation11:6 Reserved5:4  Coefficient (+1) update5 41 1 = reserved0 1 = increment1 0 = decrement0 0 = hold3:2  Coefficient (0) update3 21 1 = reserved0 1 = increment1 0 = decrement0 0 = hold1:0  Coefficient (-1) update1 01 1 = reserved0 1 = increment1 0 = decrement0 0 = hold
 */
#define BCMI_TSCF_XGXS_CL93N72_IR_BASE_R_LP_COEFF_UPD_152_GEN2r (0x00010098 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_CL93N72_IR_BASE_R_LP_COEFF_UPD_152_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_IR_BASE_R_LP_COEFF_UPD_152_GEN2.
 */
typedef union BCMI_TSCF_XGXS_CL93N72_IR_BASE_R_LP_COEFF_UPD_152_GEN2r_s {
	uint32_t v[1];
	uint32_t cl93n72_ir_base_r_lp_coeff_upd_152_gen2[1];
	uint32_t _cl93n72_ir_base_r_lp_coeff_upd_152_gen2;
} BCMI_TSCF_XGXS_CL93N72_IR_BASE_R_LP_COEFF_UPD_152_GEN2r_t;

#define BCMI_TSCF_XGXS_CL93N72_IR_BASE_R_LP_COEFF_UPD_152_GEN2r_CLR(r) (r).cl93n72_ir_base_r_lp_coeff_upd_152_gen2[0] = 0
#define BCMI_TSCF_XGXS_CL93N72_IR_BASE_R_LP_COEFF_UPD_152_GEN2r_SET(r,d) (r).cl93n72_ir_base_r_lp_coeff_upd_152_gen2[0] = d
#define BCMI_TSCF_XGXS_CL93N72_IR_BASE_R_LP_COEFF_UPD_152_GEN2r_GET(r) (r).cl93n72_ir_base_r_lp_coeff_upd_152_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_CL93N72_IR_BASE_R_LP_COEFF_UPD_152_GEN2r_CL93N72_IEEE_LP_COEFF_UPDATEf_GET(r) (((r).cl93n72_ir_base_r_lp_coeff_upd_152_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_CL93N72_IR_BASE_R_LP_COEFF_UPD_152_GEN2r_CL93N72_IEEE_LP_COEFF_UPDATEf_SET(r,f) (r).cl93n72_ir_base_r_lp_coeff_upd_152_gen2[0]=(((r).cl93n72_ir_base_r_lp_coeff_upd_152_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access CL93N72_IR_BASE_R_LP_COEFF_UPD_152_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_CL93N72_IR_BASE_R_LP_COEFF_UPD_152_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL93N72_IR_BASE_R_LP_COEFF_UPD_152_GEN2r,(_r._cl93n72_ir_base_r_lp_coeff_upd_152_gen2))
#define BCMI_TSCF_XGXS_WRITE_CL93N72_IR_BASE_R_LP_COEFF_UPD_152_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_IR_BASE_R_LP_COEFF_UPD_152_GEN2r,(_r._cl93n72_ir_base_r_lp_coeff_upd_152_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_CL93N72_IR_BASE_R_LP_COEFF_UPD_152_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_IR_BASE_R_LP_COEFF_UPD_152_GEN2r,(_r._cl93n72_ir_base_r_lp_coeff_upd_152_gen2))
#define BCMI_TSCF_XGXS_READLN_CL93N72_IR_BASE_R_LP_COEFF_UPD_152_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL93N72_IR_BASE_R_LP_COEFF_UPD_152_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ir_base_r_lp_coeff_upd_152_gen2))
#define BCMI_TSCF_XGXS_WRITELN_CL93N72_IR_BASE_R_LP_COEFF_UPD_152_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_IR_BASE_R_LP_COEFF_UPD_152_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ir_base_r_lp_coeff_upd_152_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_CL93N72_IR_BASE_R_LP_COEFF_UPD_152_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_IR_BASE_R_LP_COEFF_UPD_152_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_ir_base_r_lp_coeff_upd_152_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_IR_BASE_R_LP_COEFF_UPD_152_GEN2r BCMI_TSCF_XGXS_CL93N72_IR_BASE_R_LP_COEFF_UPD_152_GEN2r
#define CL93N72_IR_BASE_R_LP_COEFF_UPD_152_GEN2r_SIZE BCMI_TSCF_XGXS_CL93N72_IR_BASE_R_LP_COEFF_UPD_152_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_CL93N72_IR_BASE_R_LP_COEFF_UPD_152_GEN2r_t CL93N72_IR_BASE_R_LP_COEFF_UPD_152_GEN2r_t;
#define CL93N72_IR_BASE_R_LP_COEFF_UPD_152_GEN2r_CLR BCMI_TSCF_XGXS_CL93N72_IR_BASE_R_LP_COEFF_UPD_152_GEN2r_CLR
#define CL93N72_IR_BASE_R_LP_COEFF_UPD_152_GEN2r_SET BCMI_TSCF_XGXS_CL93N72_IR_BASE_R_LP_COEFF_UPD_152_GEN2r_SET
#define CL93N72_IR_BASE_R_LP_COEFF_UPD_152_GEN2r_GET BCMI_TSCF_XGXS_CL93N72_IR_BASE_R_LP_COEFF_UPD_152_GEN2r_GET
#define CL93N72_IR_BASE_R_LP_COEFF_UPD_152_GEN2r_CL93N72_IEEE_LP_COEFF_UPDATEf_GET BCMI_TSCF_XGXS_CL93N72_IR_BASE_R_LP_COEFF_UPD_152_GEN2r_CL93N72_IEEE_LP_COEFF_UPDATEf_GET
#define CL93N72_IR_BASE_R_LP_COEFF_UPD_152_GEN2r_CL93N72_IEEE_LP_COEFF_UPDATEf_SET BCMI_TSCF_XGXS_CL93N72_IR_BASE_R_LP_COEFF_UPD_152_GEN2r_CL93N72_IEEE_LP_COEFF_UPDATEf_SET
#define READ_CL93N72_IR_BASE_R_LP_COEFF_UPD_152_GEN2r BCMI_TSCF_XGXS_READ_CL93N72_IR_BASE_R_LP_COEFF_UPD_152_GEN2r
#define WRITE_CL93N72_IR_BASE_R_LP_COEFF_UPD_152_GEN2r BCMI_TSCF_XGXS_WRITE_CL93N72_IR_BASE_R_LP_COEFF_UPD_152_GEN2r
#define MODIFY_CL93N72_IR_BASE_R_LP_COEFF_UPD_152_GEN2r BCMI_TSCF_XGXS_MODIFY_CL93N72_IR_BASE_R_LP_COEFF_UPD_152_GEN2r
#define READLN_CL93N72_IR_BASE_R_LP_COEFF_UPD_152_GEN2r BCMI_TSCF_XGXS_READLN_CL93N72_IR_BASE_R_LP_COEFF_UPD_152_GEN2r
#define WRITELN_CL93N72_IR_BASE_R_LP_COEFF_UPD_152_GEN2r BCMI_TSCF_XGXS_WRITELN_CL93N72_IR_BASE_R_LP_COEFF_UPD_152_GEN2r
#define WRITEALL_CL93N72_IR_BASE_R_LP_COEFF_UPD_152_GEN2r BCMI_TSCF_XGXS_WRITEALL_CL93N72_IR_BASE_R_LP_COEFF_UPD_152_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_CL93N72_IR_BASE_R_LP_COEFF_UPD_152_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  CL93N72_IR_BASE_R_LP_STS_REP_153_GEN2
 * BLOCKS:   CL93N72_IEEE_RX
 * REGADDR:  0x0099
 * DEVAD:    1
 * DESC:     BASE-R LP status report register 153
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CL93N72_IEEE_LP_STATUS_REPORT This register reflects the second 16-bit Word of the training framemost recently recieived from the Link Partner15   Receiver Ready1 =  The LP receiver has determined that training iscomplete and is prepared to receive data0 =  The LP receiver is requesting that training continue14:6 Reserved5:4  Coefficient (+1) status5 41 1 = maximum1 0 = minimum0 1 = updated0 0 = not_updated3:2  Coefficient (0) status3 21 1 = maximum1 0 = minimum0 1 = updated0 0 = not_updated1:0  Coefficient (-1) status1 01 1 = maximum1 0 = minimum0 1 = updated0 0 = not_updated
 */
#define BCMI_TSCF_XGXS_CL93N72_IR_BASE_R_LP_STS_REP_153_GEN2r (0x00010099 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_CL93N72_IR_BASE_R_LP_STS_REP_153_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_IR_BASE_R_LP_STS_REP_153_GEN2.
 */
typedef union BCMI_TSCF_XGXS_CL93N72_IR_BASE_R_LP_STS_REP_153_GEN2r_s {
	uint32_t v[1];
	uint32_t cl93n72_ir_base_r_lp_sts_rep_153_gen2[1];
	uint32_t _cl93n72_ir_base_r_lp_sts_rep_153_gen2;
} BCMI_TSCF_XGXS_CL93N72_IR_BASE_R_LP_STS_REP_153_GEN2r_t;

#define BCMI_TSCF_XGXS_CL93N72_IR_BASE_R_LP_STS_REP_153_GEN2r_CLR(r) (r).cl93n72_ir_base_r_lp_sts_rep_153_gen2[0] = 0
#define BCMI_TSCF_XGXS_CL93N72_IR_BASE_R_LP_STS_REP_153_GEN2r_SET(r,d) (r).cl93n72_ir_base_r_lp_sts_rep_153_gen2[0] = d
#define BCMI_TSCF_XGXS_CL93N72_IR_BASE_R_LP_STS_REP_153_GEN2r_GET(r) (r).cl93n72_ir_base_r_lp_sts_rep_153_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_CL93N72_IR_BASE_R_LP_STS_REP_153_GEN2r_CL93N72_IEEE_LP_STATUS_REPORTf_GET(r) (((r).cl93n72_ir_base_r_lp_sts_rep_153_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_CL93N72_IR_BASE_R_LP_STS_REP_153_GEN2r_CL93N72_IEEE_LP_STATUS_REPORTf_SET(r,f) (r).cl93n72_ir_base_r_lp_sts_rep_153_gen2[0]=(((r).cl93n72_ir_base_r_lp_sts_rep_153_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access CL93N72_IR_BASE_R_LP_STS_REP_153_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_CL93N72_IR_BASE_R_LP_STS_REP_153_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL93N72_IR_BASE_R_LP_STS_REP_153_GEN2r,(_r._cl93n72_ir_base_r_lp_sts_rep_153_gen2))
#define BCMI_TSCF_XGXS_WRITE_CL93N72_IR_BASE_R_LP_STS_REP_153_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_IR_BASE_R_LP_STS_REP_153_GEN2r,(_r._cl93n72_ir_base_r_lp_sts_rep_153_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_CL93N72_IR_BASE_R_LP_STS_REP_153_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_IR_BASE_R_LP_STS_REP_153_GEN2r,(_r._cl93n72_ir_base_r_lp_sts_rep_153_gen2))
#define BCMI_TSCF_XGXS_READLN_CL93N72_IR_BASE_R_LP_STS_REP_153_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL93N72_IR_BASE_R_LP_STS_REP_153_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ir_base_r_lp_sts_rep_153_gen2))
#define BCMI_TSCF_XGXS_WRITELN_CL93N72_IR_BASE_R_LP_STS_REP_153_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_IR_BASE_R_LP_STS_REP_153_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ir_base_r_lp_sts_rep_153_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_CL93N72_IR_BASE_R_LP_STS_REP_153_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_IR_BASE_R_LP_STS_REP_153_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_ir_base_r_lp_sts_rep_153_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_IR_BASE_R_LP_STS_REP_153_GEN2r BCMI_TSCF_XGXS_CL93N72_IR_BASE_R_LP_STS_REP_153_GEN2r
#define CL93N72_IR_BASE_R_LP_STS_REP_153_GEN2r_SIZE BCMI_TSCF_XGXS_CL93N72_IR_BASE_R_LP_STS_REP_153_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_CL93N72_IR_BASE_R_LP_STS_REP_153_GEN2r_t CL93N72_IR_BASE_R_LP_STS_REP_153_GEN2r_t;
#define CL93N72_IR_BASE_R_LP_STS_REP_153_GEN2r_CLR BCMI_TSCF_XGXS_CL93N72_IR_BASE_R_LP_STS_REP_153_GEN2r_CLR
#define CL93N72_IR_BASE_R_LP_STS_REP_153_GEN2r_SET BCMI_TSCF_XGXS_CL93N72_IR_BASE_R_LP_STS_REP_153_GEN2r_SET
#define CL93N72_IR_BASE_R_LP_STS_REP_153_GEN2r_GET BCMI_TSCF_XGXS_CL93N72_IR_BASE_R_LP_STS_REP_153_GEN2r_GET
#define CL93N72_IR_BASE_R_LP_STS_REP_153_GEN2r_CL93N72_IEEE_LP_STATUS_REPORTf_GET BCMI_TSCF_XGXS_CL93N72_IR_BASE_R_LP_STS_REP_153_GEN2r_CL93N72_IEEE_LP_STATUS_REPORTf_GET
#define CL93N72_IR_BASE_R_LP_STS_REP_153_GEN2r_CL93N72_IEEE_LP_STATUS_REPORTf_SET BCMI_TSCF_XGXS_CL93N72_IR_BASE_R_LP_STS_REP_153_GEN2r_CL93N72_IEEE_LP_STATUS_REPORTf_SET
#define READ_CL93N72_IR_BASE_R_LP_STS_REP_153_GEN2r BCMI_TSCF_XGXS_READ_CL93N72_IR_BASE_R_LP_STS_REP_153_GEN2r
#define WRITE_CL93N72_IR_BASE_R_LP_STS_REP_153_GEN2r BCMI_TSCF_XGXS_WRITE_CL93N72_IR_BASE_R_LP_STS_REP_153_GEN2r
#define MODIFY_CL93N72_IR_BASE_R_LP_STS_REP_153_GEN2r BCMI_TSCF_XGXS_MODIFY_CL93N72_IR_BASE_R_LP_STS_REP_153_GEN2r
#define READLN_CL93N72_IR_BASE_R_LP_STS_REP_153_GEN2r BCMI_TSCF_XGXS_READLN_CL93N72_IR_BASE_R_LP_STS_REP_153_GEN2r
#define WRITELN_CL93N72_IR_BASE_R_LP_STS_REP_153_GEN2r BCMI_TSCF_XGXS_WRITELN_CL93N72_IR_BASE_R_LP_STS_REP_153_GEN2r
#define WRITEALL_CL93N72_IR_BASE_R_LP_STS_REP_153_GEN2r BCMI_TSCF_XGXS_WRITEALL_CL93N72_IR_BASE_R_LP_STS_REP_153_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_CL93N72_IR_BASE_R_LP_STS_REP_153_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  CL93N72_IT_BASE_R_LD_COEFF_UPD_154_GEN2
 * BLOCKS:   CL93N72_IEEE_TX
 * REGADDR:  0x009a
 * DEVAD:    1
 * DESC:     BASE-R LD coeff update register 154
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CL93N72_IEEE_LD_COEFF_UPDATE This register reflects the first 16-bit Word of the outgoing training framesent by the Local Device15:14 Reserved13   Preset1 = Preset coefficients0 = Normal operation12   Initialize 1 = Initialize coefficients0 = Normal operation11:6 Reserved5:4  Coefficient (+1) update5 41 1 = reserved0 1 = increment1 0 = decrement0 0 = hold3:2  Coefficient (0) update3 21 1 = reserved0 1 = increment1 0 = decrement0 0 = hold1:0  Coefficient (-1) update1 01 1 = reserved0 1 = increment1 0 = decrement0 0 = hold
 */
#define BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_LD_COEFF_UPD_154_GEN2r (0x0001009a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_LD_COEFF_UPD_154_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_IT_BASE_R_LD_COEFF_UPD_154_GEN2.
 */
typedef union BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_LD_COEFF_UPD_154_GEN2r_s {
	uint32_t v[1];
	uint32_t cl93n72_it_base_r_ld_coeff_upd_154_gen2[1];
	uint32_t _cl93n72_it_base_r_ld_coeff_upd_154_gen2;
} BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_LD_COEFF_UPD_154_GEN2r_t;

#define BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_LD_COEFF_UPD_154_GEN2r_CLR(r) (r).cl93n72_it_base_r_ld_coeff_upd_154_gen2[0] = 0
#define BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_LD_COEFF_UPD_154_GEN2r_SET(r,d) (r).cl93n72_it_base_r_ld_coeff_upd_154_gen2[0] = d
#define BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_LD_COEFF_UPD_154_GEN2r_GET(r) (r).cl93n72_it_base_r_ld_coeff_upd_154_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_LD_COEFF_UPD_154_GEN2r_CL93N72_IEEE_LD_COEFF_UPDATEf_GET(r) (((r).cl93n72_it_base_r_ld_coeff_upd_154_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_LD_COEFF_UPD_154_GEN2r_CL93N72_IEEE_LD_COEFF_UPDATEf_SET(r,f) (r).cl93n72_it_base_r_ld_coeff_upd_154_gen2[0]=(((r).cl93n72_it_base_r_ld_coeff_upd_154_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access CL93N72_IT_BASE_R_LD_COEFF_UPD_154_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_CL93N72_IT_BASE_R_LD_COEFF_UPD_154_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_LD_COEFF_UPD_154_GEN2r,(_r._cl93n72_it_base_r_ld_coeff_upd_154_gen2))
#define BCMI_TSCF_XGXS_WRITE_CL93N72_IT_BASE_R_LD_COEFF_UPD_154_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_LD_COEFF_UPD_154_GEN2r,(_r._cl93n72_it_base_r_ld_coeff_upd_154_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_CL93N72_IT_BASE_R_LD_COEFF_UPD_154_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_LD_COEFF_UPD_154_GEN2r,(_r._cl93n72_it_base_r_ld_coeff_upd_154_gen2))
#define BCMI_TSCF_XGXS_READLN_CL93N72_IT_BASE_R_LD_COEFF_UPD_154_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_LD_COEFF_UPD_154_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_it_base_r_ld_coeff_upd_154_gen2))
#define BCMI_TSCF_XGXS_WRITELN_CL93N72_IT_BASE_R_LD_COEFF_UPD_154_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_LD_COEFF_UPD_154_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_it_base_r_ld_coeff_upd_154_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_CL93N72_IT_BASE_R_LD_COEFF_UPD_154_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_LD_COEFF_UPD_154_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_it_base_r_ld_coeff_upd_154_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_IT_BASE_R_LD_COEFF_UPD_154_GEN2r BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_LD_COEFF_UPD_154_GEN2r
#define CL93N72_IT_BASE_R_LD_COEFF_UPD_154_GEN2r_SIZE BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_LD_COEFF_UPD_154_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_LD_COEFF_UPD_154_GEN2r_t CL93N72_IT_BASE_R_LD_COEFF_UPD_154_GEN2r_t;
#define CL93N72_IT_BASE_R_LD_COEFF_UPD_154_GEN2r_CLR BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_LD_COEFF_UPD_154_GEN2r_CLR
#define CL93N72_IT_BASE_R_LD_COEFF_UPD_154_GEN2r_SET BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_LD_COEFF_UPD_154_GEN2r_SET
#define CL93N72_IT_BASE_R_LD_COEFF_UPD_154_GEN2r_GET BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_LD_COEFF_UPD_154_GEN2r_GET
#define CL93N72_IT_BASE_R_LD_COEFF_UPD_154_GEN2r_CL93N72_IEEE_LD_COEFF_UPDATEf_GET BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_LD_COEFF_UPD_154_GEN2r_CL93N72_IEEE_LD_COEFF_UPDATEf_GET
#define CL93N72_IT_BASE_R_LD_COEFF_UPD_154_GEN2r_CL93N72_IEEE_LD_COEFF_UPDATEf_SET BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_LD_COEFF_UPD_154_GEN2r_CL93N72_IEEE_LD_COEFF_UPDATEf_SET
#define READ_CL93N72_IT_BASE_R_LD_COEFF_UPD_154_GEN2r BCMI_TSCF_XGXS_READ_CL93N72_IT_BASE_R_LD_COEFF_UPD_154_GEN2r
#define WRITE_CL93N72_IT_BASE_R_LD_COEFF_UPD_154_GEN2r BCMI_TSCF_XGXS_WRITE_CL93N72_IT_BASE_R_LD_COEFF_UPD_154_GEN2r
#define MODIFY_CL93N72_IT_BASE_R_LD_COEFF_UPD_154_GEN2r BCMI_TSCF_XGXS_MODIFY_CL93N72_IT_BASE_R_LD_COEFF_UPD_154_GEN2r
#define READLN_CL93N72_IT_BASE_R_LD_COEFF_UPD_154_GEN2r BCMI_TSCF_XGXS_READLN_CL93N72_IT_BASE_R_LD_COEFF_UPD_154_GEN2r
#define WRITELN_CL93N72_IT_BASE_R_LD_COEFF_UPD_154_GEN2r BCMI_TSCF_XGXS_WRITELN_CL93N72_IT_BASE_R_LD_COEFF_UPD_154_GEN2r
#define WRITEALL_CL93N72_IT_BASE_R_LD_COEFF_UPD_154_GEN2r BCMI_TSCF_XGXS_WRITEALL_CL93N72_IT_BASE_R_LD_COEFF_UPD_154_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_LD_COEFF_UPD_154_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  CL93N72_IT_BASE_R_LD_STS_REP_155_GEN2
 * BLOCKS:   CL93N72_IEEE_TX
 * REGADDR:  0x009b
 * DEVAD:    1
 * DESC:     BASE-R LD status report register 155
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CL93N72_IEEE_LD_STATUS_REPORT This register reflects the second 16-bit Word of the outgoing training framesent by the Local Device15   Receiver Ready1 =  The LD receiver has determined that training iscomplete and is prepared to receive data0 =  The LD receiver is requesting that training continue14:6 Reserved5:4  Coefficient (+1) status5 41 1 = maximum1 0 = minimum0 1 = updated0 0 = not_updated3:2  Coefficient (0) status3 21 1 = maximum1 0 = minimum0 1 = updated0 0 = not_updated1:0  Coefficient (-1) status1 01 1 = maximum1 0 = minimum0 1 = updated0 0 = not_updated
 */
#define BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_LD_STS_REP_155_GEN2r (0x0001009b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_LD_STS_REP_155_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_IT_BASE_R_LD_STS_REP_155_GEN2.
 */
typedef union BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_LD_STS_REP_155_GEN2r_s {
	uint32_t v[1];
	uint32_t cl93n72_it_base_r_ld_sts_rep_155_gen2[1];
	uint32_t _cl93n72_it_base_r_ld_sts_rep_155_gen2;
} BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_LD_STS_REP_155_GEN2r_t;

#define BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_LD_STS_REP_155_GEN2r_CLR(r) (r).cl93n72_it_base_r_ld_sts_rep_155_gen2[0] = 0
#define BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_LD_STS_REP_155_GEN2r_SET(r,d) (r).cl93n72_it_base_r_ld_sts_rep_155_gen2[0] = d
#define BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_LD_STS_REP_155_GEN2r_GET(r) (r).cl93n72_it_base_r_ld_sts_rep_155_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_LD_STS_REP_155_GEN2r_CL93N72_IEEE_LD_STATUS_REPORTf_GET(r) (((r).cl93n72_it_base_r_ld_sts_rep_155_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_LD_STS_REP_155_GEN2r_CL93N72_IEEE_LD_STATUS_REPORTf_SET(r,f) (r).cl93n72_it_base_r_ld_sts_rep_155_gen2[0]=(((r).cl93n72_it_base_r_ld_sts_rep_155_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access CL93N72_IT_BASE_R_LD_STS_REP_155_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_CL93N72_IT_BASE_R_LD_STS_REP_155_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_LD_STS_REP_155_GEN2r,(_r._cl93n72_it_base_r_ld_sts_rep_155_gen2))
#define BCMI_TSCF_XGXS_WRITE_CL93N72_IT_BASE_R_LD_STS_REP_155_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_LD_STS_REP_155_GEN2r,(_r._cl93n72_it_base_r_ld_sts_rep_155_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_CL93N72_IT_BASE_R_LD_STS_REP_155_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_LD_STS_REP_155_GEN2r,(_r._cl93n72_it_base_r_ld_sts_rep_155_gen2))
#define BCMI_TSCF_XGXS_READLN_CL93N72_IT_BASE_R_LD_STS_REP_155_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_LD_STS_REP_155_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_it_base_r_ld_sts_rep_155_gen2))
#define BCMI_TSCF_XGXS_WRITELN_CL93N72_IT_BASE_R_LD_STS_REP_155_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_LD_STS_REP_155_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_it_base_r_ld_sts_rep_155_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_CL93N72_IT_BASE_R_LD_STS_REP_155_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_LD_STS_REP_155_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_it_base_r_ld_sts_rep_155_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_IT_BASE_R_LD_STS_REP_155_GEN2r BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_LD_STS_REP_155_GEN2r
#define CL93N72_IT_BASE_R_LD_STS_REP_155_GEN2r_SIZE BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_LD_STS_REP_155_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_LD_STS_REP_155_GEN2r_t CL93N72_IT_BASE_R_LD_STS_REP_155_GEN2r_t;
#define CL93N72_IT_BASE_R_LD_STS_REP_155_GEN2r_CLR BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_LD_STS_REP_155_GEN2r_CLR
#define CL93N72_IT_BASE_R_LD_STS_REP_155_GEN2r_SET BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_LD_STS_REP_155_GEN2r_SET
#define CL93N72_IT_BASE_R_LD_STS_REP_155_GEN2r_GET BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_LD_STS_REP_155_GEN2r_GET
#define CL93N72_IT_BASE_R_LD_STS_REP_155_GEN2r_CL93N72_IEEE_LD_STATUS_REPORTf_GET BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_LD_STS_REP_155_GEN2r_CL93N72_IEEE_LD_STATUS_REPORTf_GET
#define CL93N72_IT_BASE_R_LD_STS_REP_155_GEN2r_CL93N72_IEEE_LD_STATUS_REPORTf_SET BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_LD_STS_REP_155_GEN2r_CL93N72_IEEE_LD_STATUS_REPORTf_SET
#define READ_CL93N72_IT_BASE_R_LD_STS_REP_155_GEN2r BCMI_TSCF_XGXS_READ_CL93N72_IT_BASE_R_LD_STS_REP_155_GEN2r
#define WRITE_CL93N72_IT_BASE_R_LD_STS_REP_155_GEN2r BCMI_TSCF_XGXS_WRITE_CL93N72_IT_BASE_R_LD_STS_REP_155_GEN2r
#define MODIFY_CL93N72_IT_BASE_R_LD_STS_REP_155_GEN2r BCMI_TSCF_XGXS_MODIFY_CL93N72_IT_BASE_R_LD_STS_REP_155_GEN2r
#define READLN_CL93N72_IT_BASE_R_LD_STS_REP_155_GEN2r BCMI_TSCF_XGXS_READLN_CL93N72_IT_BASE_R_LD_STS_REP_155_GEN2r
#define WRITELN_CL93N72_IT_BASE_R_LD_STS_REP_155_GEN2r BCMI_TSCF_XGXS_WRITELN_CL93N72_IT_BASE_R_LD_STS_REP_155_GEN2r
#define WRITEALL_CL93N72_IT_BASE_R_LD_STS_REP_155_GEN2r BCMI_TSCF_XGXS_WRITEALL_CL93N72_IT_BASE_R_LD_STS_REP_155_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_CL93N72_IT_BASE_R_LD_STS_REP_155_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_RX_PF_CTL_DC_OFFS_GEN2
 * BLOCKS:   DSC_AFE1
 * REGADDR:  0xd000
 * DEVAD:    1
 * DESC:     rx_pf_ctrl_dc_offset register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RX_PF2_CTRL      DC cut (Low PF),
 *     RX_PF_CTRL       Main Peaking Filter
 */
#define BCMI_TSCF_XGXS_DSC_RX_PF_CTL_DC_OFFS_GEN2r (0x0001d000 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_RX_PF_CTL_DC_OFFS_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_PF_CTL_DC_OFFS_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_RX_PF_CTL_DC_OFFS_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_rx_pf_ctl_dc_offs_gen2[1];
	uint32_t _dsc_rx_pf_ctl_dc_offs_gen2;
} BCMI_TSCF_XGXS_DSC_RX_PF_CTL_DC_OFFS_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_RX_PF_CTL_DC_OFFS_GEN2r_CLR(r) (r).dsc_rx_pf_ctl_dc_offs_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_RX_PF_CTL_DC_OFFS_GEN2r_SET(r,d) (r).dsc_rx_pf_ctl_dc_offs_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_RX_PF_CTL_DC_OFFS_GEN2r_GET(r) (r).dsc_rx_pf_ctl_dc_offs_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_RX_PF_CTL_DC_OFFS_GEN2r_RX_PF_CTRLf_GET(r) ((((r).dsc_rx_pf_ctl_dc_offs_gen2[0]) >> 11) & 0xf)
#define BCMI_TSCF_XGXS_DSC_RX_PF_CTL_DC_OFFS_GEN2r_RX_PF_CTRLf_SET(r,f) (r).dsc_rx_pf_ctl_dc_offs_gen2[0]=(((r).dsc_rx_pf_ctl_dc_offs_gen2[0] & ~((uint32_t)0xf << 11)) | ((((uint32_t)f) & 0xf) << 11)) | (15 << (16 + 11))
#define BCMI_TSCF_XGXS_DSC_RX_PF_CTL_DC_OFFS_GEN2r_RX_PF2_CTRLf_GET(r) ((((r).dsc_rx_pf_ctl_dc_offs_gen2[0]) >> 8) & 0x7)
#define BCMI_TSCF_XGXS_DSC_RX_PF_CTL_DC_OFFS_GEN2r_RX_PF2_CTRLf_SET(r,f) (r).dsc_rx_pf_ctl_dc_offs_gen2[0]=(((r).dsc_rx_pf_ctl_dc_offs_gen2[0] & ~((uint32_t)0x7 << 8)) | ((((uint32_t)f) & 0x7) << 8)) | (7 << (16 + 8))

/*
 * These macros can be used to access DSC_RX_PF_CTL_DC_OFFS_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_RX_PF_CTL_DC_OFFS_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_PF_CTL_DC_OFFS_GEN2r,(_r._dsc_rx_pf_ctl_dc_offs_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_RX_PF_CTL_DC_OFFS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_PF_CTL_DC_OFFS_GEN2r,(_r._dsc_rx_pf_ctl_dc_offs_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_RX_PF_CTL_DC_OFFS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_PF_CTL_DC_OFFS_GEN2r,(_r._dsc_rx_pf_ctl_dc_offs_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_RX_PF_CTL_DC_OFFS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_PF_CTL_DC_OFFS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_pf_ctl_dc_offs_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_RX_PF_CTL_DC_OFFS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_PF_CTL_DC_OFFS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_pf_ctl_dc_offs_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_RX_PF_CTL_DC_OFFS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_PF_CTL_DC_OFFS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_pf_ctl_dc_offs_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_PF_CTL_DC_OFFS_GEN2r BCMI_TSCF_XGXS_DSC_RX_PF_CTL_DC_OFFS_GEN2r
#define DSC_RX_PF_CTL_DC_OFFS_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_RX_PF_CTL_DC_OFFS_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_RX_PF_CTL_DC_OFFS_GEN2r_t DSC_RX_PF_CTL_DC_OFFS_GEN2r_t;
#define DSC_RX_PF_CTL_DC_OFFS_GEN2r_CLR BCMI_TSCF_XGXS_DSC_RX_PF_CTL_DC_OFFS_GEN2r_CLR
#define DSC_RX_PF_CTL_DC_OFFS_GEN2r_SET BCMI_TSCF_XGXS_DSC_RX_PF_CTL_DC_OFFS_GEN2r_SET
#define DSC_RX_PF_CTL_DC_OFFS_GEN2r_GET BCMI_TSCF_XGXS_DSC_RX_PF_CTL_DC_OFFS_GEN2r_GET
#define DSC_RX_PF_CTL_DC_OFFS_GEN2r_RX_PF_CTRLf_GET BCMI_TSCF_XGXS_DSC_RX_PF_CTL_DC_OFFS_GEN2r_RX_PF_CTRLf_GET
#define DSC_RX_PF_CTL_DC_OFFS_GEN2r_RX_PF_CTRLf_SET BCMI_TSCF_XGXS_DSC_RX_PF_CTL_DC_OFFS_GEN2r_RX_PF_CTRLf_SET
#define DSC_RX_PF_CTL_DC_OFFS_GEN2r_RX_PF2_CTRLf_GET BCMI_TSCF_XGXS_DSC_RX_PF_CTL_DC_OFFS_GEN2r_RX_PF2_CTRLf_GET
#define DSC_RX_PF_CTL_DC_OFFS_GEN2r_RX_PF2_CTRLf_SET BCMI_TSCF_XGXS_DSC_RX_PF_CTL_DC_OFFS_GEN2r_RX_PF2_CTRLf_SET
#define READ_DSC_RX_PF_CTL_DC_OFFS_GEN2r BCMI_TSCF_XGXS_READ_DSC_RX_PF_CTL_DC_OFFS_GEN2r
#define WRITE_DSC_RX_PF_CTL_DC_OFFS_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_RX_PF_CTL_DC_OFFS_GEN2r
#define MODIFY_DSC_RX_PF_CTL_DC_OFFS_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_RX_PF_CTL_DC_OFFS_GEN2r
#define READLN_DSC_RX_PF_CTL_DC_OFFS_GEN2r BCMI_TSCF_XGXS_READLN_DSC_RX_PF_CTL_DC_OFFS_GEN2r
#define WRITELN_DSC_RX_PF_CTL_DC_OFFS_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_RX_PF_CTL_DC_OFFS_GEN2r
#define WRITEALL_DSC_RX_PF_CTL_DC_OFFS_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_RX_PF_CTL_DC_OFFS_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_RX_PF_CTL_DC_OFFS_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2
 * BLOCKS:   DSC_AFE1
 * REGADDR:  0xd001
 * DEVAD:    1
 * DESC:     rxa_slicer_offset_adj_dn_dp register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXA_SLICER_OFFSET_ADJ_DP signed 2's complement rxa slicer offset adjust for data_pos[5:0]
 *     RXA_SLICER_OFFSET_ADJ_DN signed 2's complement rxa slicer offset adjust for data_neg[5:0]
 */
#define BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r (0x0001d001 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_rxa_slcr_offs_adj_dn_dp_gen2[1];
	uint32_t _dsc_rxa_slcr_offs_adj_dn_dp_gen2;
} BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r_CLR(r) (r).dsc_rxa_slcr_offs_adj_dn_dp_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r_SET(r,d) (r).dsc_rxa_slcr_offs_adj_dn_dp_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r_GET(r) (r).dsc_rxa_slcr_offs_adj_dn_dp_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r_RXA_SLICER_OFFSET_ADJ_DNf_GET(r) ((((r).dsc_rxa_slcr_offs_adj_dn_dp_gen2[0]) >> 8) & 0x3f)
#define BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r_RXA_SLICER_OFFSET_ADJ_DNf_SET(r,f) (r).dsc_rxa_slcr_offs_adj_dn_dp_gen2[0]=(((r).dsc_rxa_slcr_offs_adj_dn_dp_gen2[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8)) | (63 << (16 + 8))
#define BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r_RXA_SLICER_OFFSET_ADJ_DPf_GET(r) (((r).dsc_rxa_slcr_offs_adj_dn_dp_gen2[0]) & 0x3f)
#define BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r_RXA_SLICER_OFFSET_ADJ_DPf_SET(r,f) (r).dsc_rxa_slcr_offs_adj_dn_dp_gen2[0]=(((r).dsc_rxa_slcr_offs_adj_dn_dp_gen2[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r,(_r._dsc_rxa_slcr_offs_adj_dn_dp_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r,(_r._dsc_rxa_slcr_offs_adj_dn_dp_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r,(_r._dsc_rxa_slcr_offs_adj_dn_dp_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxa_slcr_offs_adj_dn_dp_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxa_slcr_offs_adj_dn_dp_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rxa_slcr_offs_adj_dn_dp_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r
#define DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r_t DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r_t;
#define DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r_CLR BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r_CLR
#define DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r_SET BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r_SET
#define DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r_GET BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r_GET
#define DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r_RXA_SLICER_OFFSET_ADJ_DNf_GET BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r_RXA_SLICER_OFFSET_ADJ_DNf_GET
#define DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r_RXA_SLICER_OFFSET_ADJ_DNf_SET BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r_RXA_SLICER_OFFSET_ADJ_DNf_SET
#define DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r_RXA_SLICER_OFFSET_ADJ_DPf_GET BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r_RXA_SLICER_OFFSET_ADJ_DPf_GET
#define DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r_RXA_SLICER_OFFSET_ADJ_DPf_SET BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r_RXA_SLICER_OFFSET_ADJ_DPf_SET
#define READ_DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r BCMI_TSCF_XGXS_READ_DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r
#define WRITE_DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r
#define MODIFY_DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r
#define READLN_DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r BCMI_TSCF_XGXS_READLN_DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r
#define WRITELN_DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r
#define WRITEALL_DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_DN_DP_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2
 * BLOCKS:   DSC_AFE1
 * REGADDR:  0xd002
 * DEVAD:    1
 * DESC:     rxa_slicer_offset_adj_zn_zp register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXA_SLICER_OFFSET_ADJ_ZP signed 2's complement rxa slicer offset adjust for phs_neg[5:0]
 *     RXA_SLICER_OFFSET_ADJ_ZN signed 2's complement rxa slicer offset adjust for phs_pos[5:0]
 */
#define BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r (0x0001d002 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_rxa_slcr_offs_adj_zn_zp_gen2[1];
	uint32_t _dsc_rxa_slcr_offs_adj_zn_zp_gen2;
} BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_CLR(r) (r).dsc_rxa_slcr_offs_adj_zn_zp_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_SET(r,d) (r).dsc_rxa_slcr_offs_adj_zn_zp_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_GET(r) (r).dsc_rxa_slcr_offs_adj_zn_zp_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_RXA_SLICER_OFFSET_ADJ_ZNf_GET(r) ((((r).dsc_rxa_slcr_offs_adj_zn_zp_gen2[0]) >> 8) & 0x3f)
#define BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_RXA_SLICER_OFFSET_ADJ_ZNf_SET(r,f) (r).dsc_rxa_slcr_offs_adj_zn_zp_gen2[0]=(((r).dsc_rxa_slcr_offs_adj_zn_zp_gen2[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8)) | (63 << (16 + 8))
#define BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_RXA_SLICER_OFFSET_ADJ_ZPf_GET(r) (((r).dsc_rxa_slcr_offs_adj_zn_zp_gen2[0]) & 0x3f)
#define BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_RXA_SLICER_OFFSET_ADJ_ZPf_SET(r,f) (r).dsc_rxa_slcr_offs_adj_zn_zp_gen2[0]=(((r).dsc_rxa_slcr_offs_adj_zn_zp_gen2[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r,(_r._dsc_rxa_slcr_offs_adj_zn_zp_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r,(_r._dsc_rxa_slcr_offs_adj_zn_zp_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r,(_r._dsc_rxa_slcr_offs_adj_zn_zp_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxa_slcr_offs_adj_zn_zp_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxa_slcr_offs_adj_zn_zp_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rxa_slcr_offs_adj_zn_zp_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r
#define DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_t DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_t;
#define DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_CLR BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_CLR
#define DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_SET BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_SET
#define DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_GET BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_GET
#define DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_RXA_SLICER_OFFSET_ADJ_ZNf_GET BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_RXA_SLICER_OFFSET_ADJ_ZNf_GET
#define DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_RXA_SLICER_OFFSET_ADJ_ZNf_SET BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_RXA_SLICER_OFFSET_ADJ_ZNf_SET
#define DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_RXA_SLICER_OFFSET_ADJ_ZPf_GET BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_RXA_SLICER_OFFSET_ADJ_ZPf_GET
#define DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_RXA_SLICER_OFFSET_ADJ_ZPf_SET BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_RXA_SLICER_OFFSET_ADJ_ZPf_SET
#define READ_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r BCMI_TSCF_XGXS_READ_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r
#define WRITE_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r
#define MODIFY_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r
#define READLN_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r BCMI_TSCF_XGXS_READLN_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r
#define WRITELN_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r
#define WRITEALL_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_RXA_SLCR_OFFS_ADJ_ZN_ZP_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2
 * BLOCKS:   DSC_AFE1
 * REGADDR:  0xd003
 * DEVAD:    1
 * DESC:     rxab_slicer_offset_adj_lms register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXB_SLICER_OFFSET_ADJ_LMS signed 2's complement rxb slicer offset adjust for lms[5:0]
 *     RXA_SLICER_OFFSET_ADJ_LMS signed 2's complement rxa slicer offset adjust for lms[5:0]
 */
#define BCMI_TSCF_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r (0x0001d003 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_rxab_slcr_offs_adj_lms_gen2[1];
	uint32_t _dsc_rxab_slcr_offs_adj_lms_gen2;
} BCMI_TSCF_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r_CLR(r) (r).dsc_rxab_slcr_offs_adj_lms_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r_SET(r,d) (r).dsc_rxab_slcr_offs_adj_lms_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r_GET(r) (r).dsc_rxab_slcr_offs_adj_lms_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r_RXA_SLICER_OFFSET_ADJ_LMSf_GET(r) ((((r).dsc_rxab_slcr_offs_adj_lms_gen2[0]) >> 8) & 0x3f)
#define BCMI_TSCF_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r_RXA_SLICER_OFFSET_ADJ_LMSf_SET(r,f) (r).dsc_rxab_slcr_offs_adj_lms_gen2[0]=(((r).dsc_rxab_slcr_offs_adj_lms_gen2[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8)) | (63 << (16 + 8))
#define BCMI_TSCF_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r_RXB_SLICER_OFFSET_ADJ_LMSf_GET(r) (((r).dsc_rxab_slcr_offs_adj_lms_gen2[0]) & 0x3f)
#define BCMI_TSCF_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r_RXB_SLICER_OFFSET_ADJ_LMSf_SET(r,f) (r).dsc_rxab_slcr_offs_adj_lms_gen2[0]=(((r).dsc_rxab_slcr_offs_adj_lms_gen2[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r,(_r._dsc_rxab_slcr_offs_adj_lms_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r,(_r._dsc_rxab_slcr_offs_adj_lms_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r,(_r._dsc_rxab_slcr_offs_adj_lms_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxab_slcr_offs_adj_lms_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxab_slcr_offs_adj_lms_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rxab_slcr_offs_adj_lms_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r BCMI_TSCF_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r
#define DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r_t DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r_t;
#define DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r_CLR BCMI_TSCF_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r_CLR
#define DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r_SET BCMI_TSCF_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r_SET
#define DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r_GET BCMI_TSCF_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r_GET
#define DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r_RXA_SLICER_OFFSET_ADJ_LMSf_GET BCMI_TSCF_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r_RXA_SLICER_OFFSET_ADJ_LMSf_GET
#define DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r_RXA_SLICER_OFFSET_ADJ_LMSf_SET BCMI_TSCF_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r_RXA_SLICER_OFFSET_ADJ_LMSf_SET
#define DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r_RXB_SLICER_OFFSET_ADJ_LMSf_GET BCMI_TSCF_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r_RXB_SLICER_OFFSET_ADJ_LMSf_GET
#define DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r_RXB_SLICER_OFFSET_ADJ_LMSf_SET BCMI_TSCF_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r_RXB_SLICER_OFFSET_ADJ_LMSf_SET
#define READ_DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r BCMI_TSCF_XGXS_READ_DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r
#define WRITE_DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r
#define MODIFY_DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r
#define READLN_DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r BCMI_TSCF_XGXS_READLN_DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r
#define WRITELN_DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r
#define WRITEALL_DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_RXAB_SLCR_OFFS_ADJ_LMS_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2
 * BLOCKS:   DSC_AFE1
 * REGADDR:  0xd004
 * DEVAD:    1
 * DESC:     rxb_slicer_offset_adj_dn_dp register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXB_SLICER_OFFSET_ADJ_DP signed 2's complement rxb slicer offset adjust for data_pos[5:0]
 *     RXB_SLICER_OFFSET_ADJ_DN signed 2's complement rxb slicer offset adjust for data_neg[5:0]
 */
#define BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r (0x0001d004 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_rxb_slcr_offs_adj_dn_dp_gen2[1];
	uint32_t _dsc_rxb_slcr_offs_adj_dn_dp_gen2;
} BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r_CLR(r) (r).dsc_rxb_slcr_offs_adj_dn_dp_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r_SET(r,d) (r).dsc_rxb_slcr_offs_adj_dn_dp_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r_GET(r) (r).dsc_rxb_slcr_offs_adj_dn_dp_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r_RXB_SLICER_OFFSET_ADJ_DNf_GET(r) ((((r).dsc_rxb_slcr_offs_adj_dn_dp_gen2[0]) >> 8) & 0x3f)
#define BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r_RXB_SLICER_OFFSET_ADJ_DNf_SET(r,f) (r).dsc_rxb_slcr_offs_adj_dn_dp_gen2[0]=(((r).dsc_rxb_slcr_offs_adj_dn_dp_gen2[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8)) | (63 << (16 + 8))
#define BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r_RXB_SLICER_OFFSET_ADJ_DPf_GET(r) (((r).dsc_rxb_slcr_offs_adj_dn_dp_gen2[0]) & 0x3f)
#define BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r_RXB_SLICER_OFFSET_ADJ_DPf_SET(r,f) (r).dsc_rxb_slcr_offs_adj_dn_dp_gen2[0]=(((r).dsc_rxb_slcr_offs_adj_dn_dp_gen2[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r,(_r._dsc_rxb_slcr_offs_adj_dn_dp_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r,(_r._dsc_rxb_slcr_offs_adj_dn_dp_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r,(_r._dsc_rxb_slcr_offs_adj_dn_dp_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxb_slcr_offs_adj_dn_dp_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxb_slcr_offs_adj_dn_dp_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rxb_slcr_offs_adj_dn_dp_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r
#define DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r_t DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r_t;
#define DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r_CLR BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r_CLR
#define DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r_SET BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r_SET
#define DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r_GET BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r_GET
#define DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r_RXB_SLICER_OFFSET_ADJ_DNf_GET BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r_RXB_SLICER_OFFSET_ADJ_DNf_GET
#define DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r_RXB_SLICER_OFFSET_ADJ_DNf_SET BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r_RXB_SLICER_OFFSET_ADJ_DNf_SET
#define DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r_RXB_SLICER_OFFSET_ADJ_DPf_GET BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r_RXB_SLICER_OFFSET_ADJ_DPf_GET
#define DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r_RXB_SLICER_OFFSET_ADJ_DPf_SET BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r_RXB_SLICER_OFFSET_ADJ_DPf_SET
#define READ_DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r BCMI_TSCF_XGXS_READ_DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r
#define WRITE_DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r
#define MODIFY_DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r
#define READLN_DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r BCMI_TSCF_XGXS_READLN_DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r
#define WRITELN_DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r
#define WRITEALL_DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_DN_DP_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2
 * BLOCKS:   DSC_AFE1
 * REGADDR:  0xd005
 * DEVAD:    1
 * DESC:     rxb_slicer_offset_adj_zn_zp register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXB_SLICER_OFFSET_ADJ_ZP signed 2's complement rxb slicer offset adjust for phs_pos[5:0]
 *     RXB_SLICER_OFFSET_ADJ_ZN signed 2's complement rxb slicer offset adjust for phs_neg[5:0]
 */
#define BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r (0x0001d005 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_rxb_slcr_offs_adj_zn_zp_gen2[1];
	uint32_t _dsc_rxb_slcr_offs_adj_zn_zp_gen2;
} BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_CLR(r) (r).dsc_rxb_slcr_offs_adj_zn_zp_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_SET(r,d) (r).dsc_rxb_slcr_offs_adj_zn_zp_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_GET(r) (r).dsc_rxb_slcr_offs_adj_zn_zp_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_RXB_SLICER_OFFSET_ADJ_ZNf_GET(r) ((((r).dsc_rxb_slcr_offs_adj_zn_zp_gen2[0]) >> 8) & 0x3f)
#define BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_RXB_SLICER_OFFSET_ADJ_ZNf_SET(r,f) (r).dsc_rxb_slcr_offs_adj_zn_zp_gen2[0]=(((r).dsc_rxb_slcr_offs_adj_zn_zp_gen2[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8)) | (63 << (16 + 8))
#define BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_RXB_SLICER_OFFSET_ADJ_ZPf_GET(r) (((r).dsc_rxb_slcr_offs_adj_zn_zp_gen2[0]) & 0x3f)
#define BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_RXB_SLICER_OFFSET_ADJ_ZPf_SET(r,f) (r).dsc_rxb_slcr_offs_adj_zn_zp_gen2[0]=(((r).dsc_rxb_slcr_offs_adj_zn_zp_gen2[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r,(_r._dsc_rxb_slcr_offs_adj_zn_zp_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r,(_r._dsc_rxb_slcr_offs_adj_zn_zp_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r,(_r._dsc_rxb_slcr_offs_adj_zn_zp_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxb_slcr_offs_adj_zn_zp_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxb_slcr_offs_adj_zn_zp_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rxb_slcr_offs_adj_zn_zp_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r
#define DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_t DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_t;
#define DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_CLR BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_CLR
#define DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_SET BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_SET
#define DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_GET BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_GET
#define DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_RXB_SLICER_OFFSET_ADJ_ZNf_GET BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_RXB_SLICER_OFFSET_ADJ_ZNf_GET
#define DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_RXB_SLICER_OFFSET_ADJ_ZNf_SET BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_RXB_SLICER_OFFSET_ADJ_ZNf_SET
#define DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_RXB_SLICER_OFFSET_ADJ_ZPf_GET BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_RXB_SLICER_OFFSET_ADJ_ZPf_GET
#define DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_RXB_SLICER_OFFSET_ADJ_ZPf_SET BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_RXB_SLICER_OFFSET_ADJ_ZPf_SET
#define READ_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r BCMI_TSCF_XGXS_READ_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r
#define WRITE_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r
#define MODIFY_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r
#define READLN_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r BCMI_TSCF_XGXS_READLN_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r
#define WRITELN_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r
#define WRITEALL_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_RXB_SLCR_OFFS_ADJ_ZN_ZP_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2
 * BLOCKS:   DSC_AFE1
 * REGADDR:  0xd006
 * DEVAD:    1
 * DESC:     rxc_slicer_offset_adj_dn_dp register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXC_SLICER_OFFSET_ADJ_DP signed 2's complement rxc slicer offset adjust for data_pos[5:0]
 *     RXC_SLICER_OFFSET_ADJ_DN signed 2's complement rxc slicer offset adjust for data_neg[5:0]
 */
#define BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r (0x0001d006 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_rxc_slcr_offs_adj_dn_dp_gen2[1];
	uint32_t _dsc_rxc_slcr_offs_adj_dn_dp_gen2;
} BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r_CLR(r) (r).dsc_rxc_slcr_offs_adj_dn_dp_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r_SET(r,d) (r).dsc_rxc_slcr_offs_adj_dn_dp_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r_GET(r) (r).dsc_rxc_slcr_offs_adj_dn_dp_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r_RXC_SLICER_OFFSET_ADJ_DNf_GET(r) ((((r).dsc_rxc_slcr_offs_adj_dn_dp_gen2[0]) >> 8) & 0x3f)
#define BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r_RXC_SLICER_OFFSET_ADJ_DNf_SET(r,f) (r).dsc_rxc_slcr_offs_adj_dn_dp_gen2[0]=(((r).dsc_rxc_slcr_offs_adj_dn_dp_gen2[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8)) | (63 << (16 + 8))
#define BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r_RXC_SLICER_OFFSET_ADJ_DPf_GET(r) (((r).dsc_rxc_slcr_offs_adj_dn_dp_gen2[0]) & 0x3f)
#define BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r_RXC_SLICER_OFFSET_ADJ_DPf_SET(r,f) (r).dsc_rxc_slcr_offs_adj_dn_dp_gen2[0]=(((r).dsc_rxc_slcr_offs_adj_dn_dp_gen2[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r,(_r._dsc_rxc_slcr_offs_adj_dn_dp_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r,(_r._dsc_rxc_slcr_offs_adj_dn_dp_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r,(_r._dsc_rxc_slcr_offs_adj_dn_dp_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxc_slcr_offs_adj_dn_dp_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxc_slcr_offs_adj_dn_dp_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rxc_slcr_offs_adj_dn_dp_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r
#define DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r_t DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r_t;
#define DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r_CLR BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r_CLR
#define DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r_SET BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r_SET
#define DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r_GET BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r_GET
#define DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r_RXC_SLICER_OFFSET_ADJ_DNf_GET BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r_RXC_SLICER_OFFSET_ADJ_DNf_GET
#define DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r_RXC_SLICER_OFFSET_ADJ_DNf_SET BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r_RXC_SLICER_OFFSET_ADJ_DNf_SET
#define DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r_RXC_SLICER_OFFSET_ADJ_DPf_GET BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r_RXC_SLICER_OFFSET_ADJ_DPf_GET
#define DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r_RXC_SLICER_OFFSET_ADJ_DPf_SET BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r_RXC_SLICER_OFFSET_ADJ_DPf_SET
#define READ_DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r BCMI_TSCF_XGXS_READ_DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r
#define WRITE_DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r
#define MODIFY_DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r
#define READLN_DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r BCMI_TSCF_XGXS_READLN_DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r
#define WRITELN_DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r
#define WRITEALL_DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_DN_DP_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2
 * BLOCKS:   DSC_AFE1
 * REGADDR:  0xd007
 * DEVAD:    1
 * DESC:     rxc_slicer_offset_adj_zn_zp register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXC_SLICER_OFFSET_ADJ_ZP signed 2's complement rxc slicer offset adjust for phs_pos[5:0]
 *     RXC_SLICER_OFFSET_ADJ_ZN signed 2's complement rxc slicer offset adjust for phs_neg[5:0]
 */
#define BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r (0x0001d007 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_rxc_slcr_offs_adj_zn_zp_gen2[1];
	uint32_t _dsc_rxc_slcr_offs_adj_zn_zp_gen2;
} BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_CLR(r) (r).dsc_rxc_slcr_offs_adj_zn_zp_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_SET(r,d) (r).dsc_rxc_slcr_offs_adj_zn_zp_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_GET(r) (r).dsc_rxc_slcr_offs_adj_zn_zp_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_RXC_SLICER_OFFSET_ADJ_ZNf_GET(r) ((((r).dsc_rxc_slcr_offs_adj_zn_zp_gen2[0]) >> 8) & 0x3f)
#define BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_RXC_SLICER_OFFSET_ADJ_ZNf_SET(r,f) (r).dsc_rxc_slcr_offs_adj_zn_zp_gen2[0]=(((r).dsc_rxc_slcr_offs_adj_zn_zp_gen2[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8)) | (63 << (16 + 8))
#define BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_RXC_SLICER_OFFSET_ADJ_ZPf_GET(r) (((r).dsc_rxc_slcr_offs_adj_zn_zp_gen2[0]) & 0x3f)
#define BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_RXC_SLICER_OFFSET_ADJ_ZPf_SET(r,f) (r).dsc_rxc_slcr_offs_adj_zn_zp_gen2[0]=(((r).dsc_rxc_slcr_offs_adj_zn_zp_gen2[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r,(_r._dsc_rxc_slcr_offs_adj_zn_zp_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r,(_r._dsc_rxc_slcr_offs_adj_zn_zp_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r,(_r._dsc_rxc_slcr_offs_adj_zn_zp_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxc_slcr_offs_adj_zn_zp_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxc_slcr_offs_adj_zn_zp_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rxc_slcr_offs_adj_zn_zp_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r
#define DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_t DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_t;
#define DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_CLR BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_CLR
#define DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_SET BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_SET
#define DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_GET BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_GET
#define DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_RXC_SLICER_OFFSET_ADJ_ZNf_GET BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_RXC_SLICER_OFFSET_ADJ_ZNf_GET
#define DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_RXC_SLICER_OFFSET_ADJ_ZNf_SET BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_RXC_SLICER_OFFSET_ADJ_ZNf_SET
#define DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_RXC_SLICER_OFFSET_ADJ_ZPf_GET BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_RXC_SLICER_OFFSET_ADJ_ZPf_GET
#define DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_RXC_SLICER_OFFSET_ADJ_ZPf_SET BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_RXC_SLICER_OFFSET_ADJ_ZPf_SET
#define READ_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r BCMI_TSCF_XGXS_READ_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r
#define WRITE_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r
#define MODIFY_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r
#define READLN_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r BCMI_TSCF_XGXS_READLN_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r
#define WRITELN_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r
#define WRITEALL_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_RXC_SLCR_OFFS_ADJ_ZN_ZP_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2
 * BLOCKS:   DSC_AFE1
 * REGADDR:  0xd008
 * DEVAD:    1
 * DESC:     rxcd_slicer_offset_adj_lms register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXD_SLICER_OFFSET_ADJ_LMS signed 2's complement rxd slicer offset adjust for lms[5:0]
 *     RXC_SLICER_OFFSET_ADJ_LMS signed 2's complement rxc slicer offset adjust for lms[5:0]
 */
#define BCMI_TSCF_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r (0x0001d008 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_rxcd_slcr_offs_adj_lms_gen2[1];
	uint32_t _dsc_rxcd_slcr_offs_adj_lms_gen2;
} BCMI_TSCF_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r_CLR(r) (r).dsc_rxcd_slcr_offs_adj_lms_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r_SET(r,d) (r).dsc_rxcd_slcr_offs_adj_lms_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r_GET(r) (r).dsc_rxcd_slcr_offs_adj_lms_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r_RXC_SLICER_OFFSET_ADJ_LMSf_GET(r) ((((r).dsc_rxcd_slcr_offs_adj_lms_gen2[0]) >> 8) & 0x3f)
#define BCMI_TSCF_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r_RXC_SLICER_OFFSET_ADJ_LMSf_SET(r,f) (r).dsc_rxcd_slcr_offs_adj_lms_gen2[0]=(((r).dsc_rxcd_slcr_offs_adj_lms_gen2[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8)) | (63 << (16 + 8))
#define BCMI_TSCF_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r_RXD_SLICER_OFFSET_ADJ_LMSf_GET(r) (((r).dsc_rxcd_slcr_offs_adj_lms_gen2[0]) & 0x3f)
#define BCMI_TSCF_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r_RXD_SLICER_OFFSET_ADJ_LMSf_SET(r,f) (r).dsc_rxcd_slcr_offs_adj_lms_gen2[0]=(((r).dsc_rxcd_slcr_offs_adj_lms_gen2[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r,(_r._dsc_rxcd_slcr_offs_adj_lms_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r,(_r._dsc_rxcd_slcr_offs_adj_lms_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r,(_r._dsc_rxcd_slcr_offs_adj_lms_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxcd_slcr_offs_adj_lms_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxcd_slcr_offs_adj_lms_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rxcd_slcr_offs_adj_lms_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r BCMI_TSCF_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r
#define DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r_t DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r_t;
#define DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r_CLR BCMI_TSCF_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r_CLR
#define DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r_SET BCMI_TSCF_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r_SET
#define DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r_GET BCMI_TSCF_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r_GET
#define DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r_RXC_SLICER_OFFSET_ADJ_LMSf_GET BCMI_TSCF_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r_RXC_SLICER_OFFSET_ADJ_LMSf_GET
#define DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r_RXC_SLICER_OFFSET_ADJ_LMSf_SET BCMI_TSCF_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r_RXC_SLICER_OFFSET_ADJ_LMSf_SET
#define DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r_RXD_SLICER_OFFSET_ADJ_LMSf_GET BCMI_TSCF_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r_RXD_SLICER_OFFSET_ADJ_LMSf_GET
#define DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r_RXD_SLICER_OFFSET_ADJ_LMSf_SET BCMI_TSCF_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r_RXD_SLICER_OFFSET_ADJ_LMSf_SET
#define READ_DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r BCMI_TSCF_XGXS_READ_DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r
#define WRITE_DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r
#define MODIFY_DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r
#define READLN_DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r BCMI_TSCF_XGXS_READLN_DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r
#define WRITELN_DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r
#define WRITEALL_DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_RXCD_SLCR_OFFS_ADJ_LMS_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2
 * BLOCKS:   DSC_AFE1
 * REGADDR:  0xd009
 * DEVAD:    1
 * DESC:     rxd_slicer_offset_adj_dn_dp register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXD_SLICER_OFFSET_ADJ_DP signed 2's complement rxd slicer offset adjust for data_pos[5:0]
 *     RXD_SLICER_OFFSET_ADJ_DN signed 2's complement rxd slicer offset adjust for data_neg[5:0]
 */
#define BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r (0x0001d009 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_rxd_slcr_offs_adj_dn_dp_gen2[1];
	uint32_t _dsc_rxd_slcr_offs_adj_dn_dp_gen2;
} BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r_CLR(r) (r).dsc_rxd_slcr_offs_adj_dn_dp_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r_SET(r,d) (r).dsc_rxd_slcr_offs_adj_dn_dp_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r_GET(r) (r).dsc_rxd_slcr_offs_adj_dn_dp_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r_RXD_SLICER_OFFSET_ADJ_DNf_GET(r) ((((r).dsc_rxd_slcr_offs_adj_dn_dp_gen2[0]) >> 8) & 0x3f)
#define BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r_RXD_SLICER_OFFSET_ADJ_DNf_SET(r,f) (r).dsc_rxd_slcr_offs_adj_dn_dp_gen2[0]=(((r).dsc_rxd_slcr_offs_adj_dn_dp_gen2[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8)) | (63 << (16 + 8))
#define BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r_RXD_SLICER_OFFSET_ADJ_DPf_GET(r) (((r).dsc_rxd_slcr_offs_adj_dn_dp_gen2[0]) & 0x3f)
#define BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r_RXD_SLICER_OFFSET_ADJ_DPf_SET(r,f) (r).dsc_rxd_slcr_offs_adj_dn_dp_gen2[0]=(((r).dsc_rxd_slcr_offs_adj_dn_dp_gen2[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r,(_r._dsc_rxd_slcr_offs_adj_dn_dp_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r,(_r._dsc_rxd_slcr_offs_adj_dn_dp_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r,(_r._dsc_rxd_slcr_offs_adj_dn_dp_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxd_slcr_offs_adj_dn_dp_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxd_slcr_offs_adj_dn_dp_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rxd_slcr_offs_adj_dn_dp_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r
#define DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r_t DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r_t;
#define DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r_CLR BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r_CLR
#define DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r_SET BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r_SET
#define DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r_GET BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r_GET
#define DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r_RXD_SLICER_OFFSET_ADJ_DNf_GET BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r_RXD_SLICER_OFFSET_ADJ_DNf_GET
#define DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r_RXD_SLICER_OFFSET_ADJ_DNf_SET BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r_RXD_SLICER_OFFSET_ADJ_DNf_SET
#define DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r_RXD_SLICER_OFFSET_ADJ_DPf_GET BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r_RXD_SLICER_OFFSET_ADJ_DPf_GET
#define DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r_RXD_SLICER_OFFSET_ADJ_DPf_SET BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r_RXD_SLICER_OFFSET_ADJ_DPf_SET
#define READ_DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r BCMI_TSCF_XGXS_READ_DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r
#define WRITE_DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r
#define MODIFY_DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r
#define READLN_DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r BCMI_TSCF_XGXS_READLN_DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r
#define WRITELN_DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r
#define WRITEALL_DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_DN_DP_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2
 * BLOCKS:   DSC_AFE1
 * REGADDR:  0xd00a
 * DEVAD:    1
 * DESC:     rxd_slicer_offset_adj_zn_zp register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXD_SLICER_OFFSET_ADJ_ZP signed 2's complement rxd slicer offset adjust for phs_pos[5:0]
 *     RXD_SLICER_OFFSET_ADJ_ZN signed 2's complement rxd slicer offset adjust for phs_neg[5:0]
 */
#define BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r (0x0001d00a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_rxd_slcr_offs_adj_zn_zp_gen2[1];
	uint32_t _dsc_rxd_slcr_offs_adj_zn_zp_gen2;
} BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_CLR(r) (r).dsc_rxd_slcr_offs_adj_zn_zp_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_SET(r,d) (r).dsc_rxd_slcr_offs_adj_zn_zp_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_GET(r) (r).dsc_rxd_slcr_offs_adj_zn_zp_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_RXD_SLICER_OFFSET_ADJ_ZNf_GET(r) ((((r).dsc_rxd_slcr_offs_adj_zn_zp_gen2[0]) >> 8) & 0x3f)
#define BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_RXD_SLICER_OFFSET_ADJ_ZNf_SET(r,f) (r).dsc_rxd_slcr_offs_adj_zn_zp_gen2[0]=(((r).dsc_rxd_slcr_offs_adj_zn_zp_gen2[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8)) | (63 << (16 + 8))
#define BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_RXD_SLICER_OFFSET_ADJ_ZPf_GET(r) (((r).dsc_rxd_slcr_offs_adj_zn_zp_gen2[0]) & 0x3f)
#define BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_RXD_SLICER_OFFSET_ADJ_ZPf_SET(r,f) (r).dsc_rxd_slcr_offs_adj_zn_zp_gen2[0]=(((r).dsc_rxd_slcr_offs_adj_zn_zp_gen2[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r,(_r._dsc_rxd_slcr_offs_adj_zn_zp_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r,(_r._dsc_rxd_slcr_offs_adj_zn_zp_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r,(_r._dsc_rxd_slcr_offs_adj_zn_zp_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxd_slcr_offs_adj_zn_zp_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxd_slcr_offs_adj_zn_zp_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rxd_slcr_offs_adj_zn_zp_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r
#define DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_t DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_t;
#define DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_CLR BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_CLR
#define DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_SET BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_SET
#define DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_GET BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_GET
#define DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_RXD_SLICER_OFFSET_ADJ_ZNf_GET BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_RXD_SLICER_OFFSET_ADJ_ZNf_GET
#define DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_RXD_SLICER_OFFSET_ADJ_ZNf_SET BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_RXD_SLICER_OFFSET_ADJ_ZNf_SET
#define DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_RXD_SLICER_OFFSET_ADJ_ZPf_GET BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_RXD_SLICER_OFFSET_ADJ_ZPf_GET
#define DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_RXD_SLICER_OFFSET_ADJ_ZPf_SET BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r_RXD_SLICER_OFFSET_ADJ_ZPf_SET
#define READ_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r BCMI_TSCF_XGXS_READ_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r
#define WRITE_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r
#define MODIFY_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r
#define READLN_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r BCMI_TSCF_XGXS_READLN_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r
#define WRITELN_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r
#define WRITEALL_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_RXD_SLCR_OFFS_ADJ_ZN_ZP_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_RX_PHASE_LMS_THR_SEL_GEN2
 * BLOCKS:   DSC_AFE1
 * REGADDR:  0xd00b
 * DEVAD:    1
 * DESC:     rx_phase_lms_thresh_sel register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RX_LMS_THRESH_SEL signed 2's complement +/-127. 127=300mV
 *     RX_PHASE_THRESH_SEL signed 2's complement -63 to +63. 63=150mV
 */
#define BCMI_TSCF_XGXS_DSC_RX_PHASE_LMS_THR_SEL_GEN2r (0x0001d00b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_RX_PHASE_LMS_THR_SEL_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_PHASE_LMS_THR_SEL_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_RX_PHASE_LMS_THR_SEL_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_rx_phase_lms_thr_sel_gen2[1];
	uint32_t _dsc_rx_phase_lms_thr_sel_gen2;
} BCMI_TSCF_XGXS_DSC_RX_PHASE_LMS_THR_SEL_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_RX_PHASE_LMS_THR_SEL_GEN2r_CLR(r) (r).dsc_rx_phase_lms_thr_sel_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_RX_PHASE_LMS_THR_SEL_GEN2r_SET(r,d) (r).dsc_rx_phase_lms_thr_sel_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_RX_PHASE_LMS_THR_SEL_GEN2r_GET(r) (r).dsc_rx_phase_lms_thr_sel_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_RX_PHASE_LMS_THR_SEL_GEN2r_RX_PHASE_THRESH_SELf_GET(r) ((((r).dsc_rx_phase_lms_thr_sel_gen2[0]) >> 8) & 0x7f)
#define BCMI_TSCF_XGXS_DSC_RX_PHASE_LMS_THR_SEL_GEN2r_RX_PHASE_THRESH_SELf_SET(r,f) (r).dsc_rx_phase_lms_thr_sel_gen2[0]=(((r).dsc_rx_phase_lms_thr_sel_gen2[0] & ~((uint32_t)0x7f << 8)) | ((((uint32_t)f) & 0x7f) << 8)) | (127 << (16 + 8))
#define BCMI_TSCF_XGXS_DSC_RX_PHASE_LMS_THR_SEL_GEN2r_RX_LMS_THRESH_SELf_GET(r) (((r).dsc_rx_phase_lms_thr_sel_gen2[0]) & 0xff)
#define BCMI_TSCF_XGXS_DSC_RX_PHASE_LMS_THR_SEL_GEN2r_RX_LMS_THRESH_SELf_SET(r,f) (r).dsc_rx_phase_lms_thr_sel_gen2[0]=(((r).dsc_rx_phase_lms_thr_sel_gen2[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access DSC_RX_PHASE_LMS_THR_SEL_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_RX_PHASE_LMS_THR_SEL_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_PHASE_LMS_THR_SEL_GEN2r,(_r._dsc_rx_phase_lms_thr_sel_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_RX_PHASE_LMS_THR_SEL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_PHASE_LMS_THR_SEL_GEN2r,(_r._dsc_rx_phase_lms_thr_sel_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_RX_PHASE_LMS_THR_SEL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_PHASE_LMS_THR_SEL_GEN2r,(_r._dsc_rx_phase_lms_thr_sel_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_RX_PHASE_LMS_THR_SEL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_PHASE_LMS_THR_SEL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_phase_lms_thr_sel_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_RX_PHASE_LMS_THR_SEL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_PHASE_LMS_THR_SEL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_phase_lms_thr_sel_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_RX_PHASE_LMS_THR_SEL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_PHASE_LMS_THR_SEL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_phase_lms_thr_sel_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_PHASE_LMS_THR_SEL_GEN2r BCMI_TSCF_XGXS_DSC_RX_PHASE_LMS_THR_SEL_GEN2r
#define DSC_RX_PHASE_LMS_THR_SEL_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_RX_PHASE_LMS_THR_SEL_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_RX_PHASE_LMS_THR_SEL_GEN2r_t DSC_RX_PHASE_LMS_THR_SEL_GEN2r_t;
#define DSC_RX_PHASE_LMS_THR_SEL_GEN2r_CLR BCMI_TSCF_XGXS_DSC_RX_PHASE_LMS_THR_SEL_GEN2r_CLR
#define DSC_RX_PHASE_LMS_THR_SEL_GEN2r_SET BCMI_TSCF_XGXS_DSC_RX_PHASE_LMS_THR_SEL_GEN2r_SET
#define DSC_RX_PHASE_LMS_THR_SEL_GEN2r_GET BCMI_TSCF_XGXS_DSC_RX_PHASE_LMS_THR_SEL_GEN2r_GET
#define DSC_RX_PHASE_LMS_THR_SEL_GEN2r_RX_PHASE_THRESH_SELf_GET BCMI_TSCF_XGXS_DSC_RX_PHASE_LMS_THR_SEL_GEN2r_RX_PHASE_THRESH_SELf_GET
#define DSC_RX_PHASE_LMS_THR_SEL_GEN2r_RX_PHASE_THRESH_SELf_SET BCMI_TSCF_XGXS_DSC_RX_PHASE_LMS_THR_SEL_GEN2r_RX_PHASE_THRESH_SELf_SET
#define DSC_RX_PHASE_LMS_THR_SEL_GEN2r_RX_LMS_THRESH_SELf_GET BCMI_TSCF_XGXS_DSC_RX_PHASE_LMS_THR_SEL_GEN2r_RX_LMS_THRESH_SELf_GET
#define DSC_RX_PHASE_LMS_THR_SEL_GEN2r_RX_LMS_THRESH_SELf_SET BCMI_TSCF_XGXS_DSC_RX_PHASE_LMS_THR_SEL_GEN2r_RX_LMS_THRESH_SELf_SET
#define READ_DSC_RX_PHASE_LMS_THR_SEL_GEN2r BCMI_TSCF_XGXS_READ_DSC_RX_PHASE_LMS_THR_SEL_GEN2r
#define WRITE_DSC_RX_PHASE_LMS_THR_SEL_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_RX_PHASE_LMS_THR_SEL_GEN2r
#define MODIFY_DSC_RX_PHASE_LMS_THR_SEL_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_RX_PHASE_LMS_THR_SEL_GEN2r
#define READLN_DSC_RX_PHASE_LMS_THR_SEL_GEN2r BCMI_TSCF_XGXS_READLN_DSC_RX_PHASE_LMS_THR_SEL_GEN2r
#define WRITELN_DSC_RX_PHASE_LMS_THR_SEL_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_RX_PHASE_LMS_THR_SEL_GEN2r
#define WRITEALL_DSC_RX_PHASE_LMS_THR_SEL_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_RX_PHASE_LMS_THR_SEL_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_RX_PHASE_LMS_THR_SEL_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_RX_DFE_TAP2_AB_GEN2
 * BLOCKS:   DSC_AFE2
 * REGADDR:  0xd010
 * DEVAD:    1
 * DESC:     rx_dfe_tap2_ab register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXB_DFE_TAP2     signed 2's complement  +/-15, 1LSB=150mV/64
 *     RXA_DFE_TAP2     signed 2's complement +/-15, 1LSB=150mV/64
 */
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_AB_GEN2r (0x0001d010 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_AB_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP2_AB_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_AB_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap2_ab_gen2[1];
	uint32_t _dsc_rx_dfe_tap2_ab_gen2;
} BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_AB_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_AB_GEN2r_CLR(r) (r).dsc_rx_dfe_tap2_ab_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_AB_GEN2r_SET(r,d) (r).dsc_rx_dfe_tap2_ab_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_AB_GEN2r_GET(r) (r).dsc_rx_dfe_tap2_ab_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_AB_GEN2r_RXA_DFE_TAP2f_GET(r) ((((r).dsc_rx_dfe_tap2_ab_gen2[0]) >> 8) & 0x1f)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_AB_GEN2r_RXA_DFE_TAP2f_SET(r,f) (r).dsc_rx_dfe_tap2_ab_gen2[0]=(((r).dsc_rx_dfe_tap2_ab_gen2[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8)) | (31 << (16 + 8))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_AB_GEN2r_RXB_DFE_TAP2f_GET(r) (((r).dsc_rx_dfe_tap2_ab_gen2[0]) & 0x1f)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_AB_GEN2r_RXB_DFE_TAP2f_SET(r,f) (r).dsc_rx_dfe_tap2_ab_gen2[0]=(((r).dsc_rx_dfe_tap2_ab_gen2[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access DSC_RX_DFE_TAP2_AB_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_RX_DFE_TAP2_AB_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_AB_GEN2r,(_r._dsc_rx_dfe_tap2_ab_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_RX_DFE_TAP2_AB_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_AB_GEN2r,(_r._dsc_rx_dfe_tap2_ab_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_RX_DFE_TAP2_AB_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_AB_GEN2r,(_r._dsc_rx_dfe_tap2_ab_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_RX_DFE_TAP2_AB_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_AB_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap2_ab_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_RX_DFE_TAP2_AB_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_AB_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap2_ab_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_RX_DFE_TAP2_AB_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_AB_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap2_ab_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP2_AB_GEN2r BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_AB_GEN2r
#define DSC_RX_DFE_TAP2_AB_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_AB_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_AB_GEN2r_t DSC_RX_DFE_TAP2_AB_GEN2r_t;
#define DSC_RX_DFE_TAP2_AB_GEN2r_CLR BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_AB_GEN2r_CLR
#define DSC_RX_DFE_TAP2_AB_GEN2r_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_AB_GEN2r_SET
#define DSC_RX_DFE_TAP2_AB_GEN2r_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_AB_GEN2r_GET
#define DSC_RX_DFE_TAP2_AB_GEN2r_RXA_DFE_TAP2f_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_AB_GEN2r_RXA_DFE_TAP2f_GET
#define DSC_RX_DFE_TAP2_AB_GEN2r_RXA_DFE_TAP2f_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_AB_GEN2r_RXA_DFE_TAP2f_SET
#define DSC_RX_DFE_TAP2_AB_GEN2r_RXB_DFE_TAP2f_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_AB_GEN2r_RXB_DFE_TAP2f_GET
#define DSC_RX_DFE_TAP2_AB_GEN2r_RXB_DFE_TAP2f_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_AB_GEN2r_RXB_DFE_TAP2f_SET
#define READ_DSC_RX_DFE_TAP2_AB_GEN2r BCMI_TSCF_XGXS_READ_DSC_RX_DFE_TAP2_AB_GEN2r
#define WRITE_DSC_RX_DFE_TAP2_AB_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_RX_DFE_TAP2_AB_GEN2r
#define MODIFY_DSC_RX_DFE_TAP2_AB_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_RX_DFE_TAP2_AB_GEN2r
#define READLN_DSC_RX_DFE_TAP2_AB_GEN2r BCMI_TSCF_XGXS_READLN_DSC_RX_DFE_TAP2_AB_GEN2r
#define WRITELN_DSC_RX_DFE_TAP2_AB_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_RX_DFE_TAP2_AB_GEN2r
#define WRITEALL_DSC_RX_DFE_TAP2_AB_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_RX_DFE_TAP2_AB_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_AB_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_RX_DFE_TAP2_CD_GEN2
 * BLOCKS:   DSC_AFE2
 * REGADDR:  0xd011
 * DEVAD:    1
 * DESC:     rx_dfe_tap2_cd register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXD_DFE_TAP2     signed 2's complement +/-15, 1LSB=150mV/64
 *     RXC_DFE_TAP2     signed 2's complement +/-15, 1LSB=150mV/64
 */
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_CD_GEN2r (0x0001d011 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_CD_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP2_CD_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_CD_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap2_cd_gen2[1];
	uint32_t _dsc_rx_dfe_tap2_cd_gen2;
} BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_CD_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_CD_GEN2r_CLR(r) (r).dsc_rx_dfe_tap2_cd_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_CD_GEN2r_SET(r,d) (r).dsc_rx_dfe_tap2_cd_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_CD_GEN2r_GET(r) (r).dsc_rx_dfe_tap2_cd_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_CD_GEN2r_RXC_DFE_TAP2f_GET(r) ((((r).dsc_rx_dfe_tap2_cd_gen2[0]) >> 8) & 0x1f)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_CD_GEN2r_RXC_DFE_TAP2f_SET(r,f) (r).dsc_rx_dfe_tap2_cd_gen2[0]=(((r).dsc_rx_dfe_tap2_cd_gen2[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8)) | (31 << (16 + 8))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_CD_GEN2r_RXD_DFE_TAP2f_GET(r) (((r).dsc_rx_dfe_tap2_cd_gen2[0]) & 0x1f)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_CD_GEN2r_RXD_DFE_TAP2f_SET(r,f) (r).dsc_rx_dfe_tap2_cd_gen2[0]=(((r).dsc_rx_dfe_tap2_cd_gen2[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access DSC_RX_DFE_TAP2_CD_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_RX_DFE_TAP2_CD_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_CD_GEN2r,(_r._dsc_rx_dfe_tap2_cd_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_RX_DFE_TAP2_CD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_CD_GEN2r,(_r._dsc_rx_dfe_tap2_cd_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_RX_DFE_TAP2_CD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_CD_GEN2r,(_r._dsc_rx_dfe_tap2_cd_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_RX_DFE_TAP2_CD_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_CD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap2_cd_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_RX_DFE_TAP2_CD_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_CD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap2_cd_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_RX_DFE_TAP2_CD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_CD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap2_cd_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP2_CD_GEN2r BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_CD_GEN2r
#define DSC_RX_DFE_TAP2_CD_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_CD_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_CD_GEN2r_t DSC_RX_DFE_TAP2_CD_GEN2r_t;
#define DSC_RX_DFE_TAP2_CD_GEN2r_CLR BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_CD_GEN2r_CLR
#define DSC_RX_DFE_TAP2_CD_GEN2r_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_CD_GEN2r_SET
#define DSC_RX_DFE_TAP2_CD_GEN2r_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_CD_GEN2r_GET
#define DSC_RX_DFE_TAP2_CD_GEN2r_RXC_DFE_TAP2f_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_CD_GEN2r_RXC_DFE_TAP2f_GET
#define DSC_RX_DFE_TAP2_CD_GEN2r_RXC_DFE_TAP2f_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_CD_GEN2r_RXC_DFE_TAP2f_SET
#define DSC_RX_DFE_TAP2_CD_GEN2r_RXD_DFE_TAP2f_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_CD_GEN2r_RXD_DFE_TAP2f_GET
#define DSC_RX_DFE_TAP2_CD_GEN2r_RXD_DFE_TAP2f_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_CD_GEN2r_RXD_DFE_TAP2f_SET
#define READ_DSC_RX_DFE_TAP2_CD_GEN2r BCMI_TSCF_XGXS_READ_DSC_RX_DFE_TAP2_CD_GEN2r
#define WRITE_DSC_RX_DFE_TAP2_CD_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_RX_DFE_TAP2_CD_GEN2r
#define MODIFY_DSC_RX_DFE_TAP2_CD_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_RX_DFE_TAP2_CD_GEN2r
#define READLN_DSC_RX_DFE_TAP2_CD_GEN2r BCMI_TSCF_XGXS_READLN_DSC_RX_DFE_TAP2_CD_GEN2r
#define WRITELN_DSC_RX_DFE_TAP2_CD_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_RX_DFE_TAP2_CD_GEN2r
#define WRITEALL_DSC_RX_DFE_TAP2_CD_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_RX_DFE_TAP2_CD_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_RX_DFE_TAP2_CD_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_RX_DFE_TAP3_AB_GEN2
 * BLOCKS:   DSC_AFE2
 * REGADDR:  0xd012
 * DEVAD:    1
 * DESC:     rx_dfe_tap3_ab register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXB_DFE_TAP3     signed 2's complement +/-15, 1LSB=150mV/64
 *     RXA_DFE_TAP3     signed 2's complement +/-15, 1LSB=150mV/64
 */
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_AB_GEN2r (0x0001d012 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_AB_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP3_AB_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_AB_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap3_ab_gen2[1];
	uint32_t _dsc_rx_dfe_tap3_ab_gen2;
} BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_AB_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_AB_GEN2r_CLR(r) (r).dsc_rx_dfe_tap3_ab_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_AB_GEN2r_SET(r,d) (r).dsc_rx_dfe_tap3_ab_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_AB_GEN2r_GET(r) (r).dsc_rx_dfe_tap3_ab_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_AB_GEN2r_RXA_DFE_TAP3f_GET(r) ((((r).dsc_rx_dfe_tap3_ab_gen2[0]) >> 8) & 0x1f)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_AB_GEN2r_RXA_DFE_TAP3f_SET(r,f) (r).dsc_rx_dfe_tap3_ab_gen2[0]=(((r).dsc_rx_dfe_tap3_ab_gen2[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8)) | (31 << (16 + 8))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_AB_GEN2r_RXB_DFE_TAP3f_GET(r) (((r).dsc_rx_dfe_tap3_ab_gen2[0]) & 0x1f)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_AB_GEN2r_RXB_DFE_TAP3f_SET(r,f) (r).dsc_rx_dfe_tap3_ab_gen2[0]=(((r).dsc_rx_dfe_tap3_ab_gen2[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access DSC_RX_DFE_TAP3_AB_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_RX_DFE_TAP3_AB_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_AB_GEN2r,(_r._dsc_rx_dfe_tap3_ab_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_RX_DFE_TAP3_AB_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_AB_GEN2r,(_r._dsc_rx_dfe_tap3_ab_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_RX_DFE_TAP3_AB_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_AB_GEN2r,(_r._dsc_rx_dfe_tap3_ab_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_RX_DFE_TAP3_AB_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_AB_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap3_ab_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_RX_DFE_TAP3_AB_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_AB_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap3_ab_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_RX_DFE_TAP3_AB_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_AB_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap3_ab_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP3_AB_GEN2r BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_AB_GEN2r
#define DSC_RX_DFE_TAP3_AB_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_AB_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_AB_GEN2r_t DSC_RX_DFE_TAP3_AB_GEN2r_t;
#define DSC_RX_DFE_TAP3_AB_GEN2r_CLR BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_AB_GEN2r_CLR
#define DSC_RX_DFE_TAP3_AB_GEN2r_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_AB_GEN2r_SET
#define DSC_RX_DFE_TAP3_AB_GEN2r_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_AB_GEN2r_GET
#define DSC_RX_DFE_TAP3_AB_GEN2r_RXA_DFE_TAP3f_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_AB_GEN2r_RXA_DFE_TAP3f_GET
#define DSC_RX_DFE_TAP3_AB_GEN2r_RXA_DFE_TAP3f_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_AB_GEN2r_RXA_DFE_TAP3f_SET
#define DSC_RX_DFE_TAP3_AB_GEN2r_RXB_DFE_TAP3f_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_AB_GEN2r_RXB_DFE_TAP3f_GET
#define DSC_RX_DFE_TAP3_AB_GEN2r_RXB_DFE_TAP3f_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_AB_GEN2r_RXB_DFE_TAP3f_SET
#define READ_DSC_RX_DFE_TAP3_AB_GEN2r BCMI_TSCF_XGXS_READ_DSC_RX_DFE_TAP3_AB_GEN2r
#define WRITE_DSC_RX_DFE_TAP3_AB_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_RX_DFE_TAP3_AB_GEN2r
#define MODIFY_DSC_RX_DFE_TAP3_AB_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_RX_DFE_TAP3_AB_GEN2r
#define READLN_DSC_RX_DFE_TAP3_AB_GEN2r BCMI_TSCF_XGXS_READLN_DSC_RX_DFE_TAP3_AB_GEN2r
#define WRITELN_DSC_RX_DFE_TAP3_AB_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_RX_DFE_TAP3_AB_GEN2r
#define WRITEALL_DSC_RX_DFE_TAP3_AB_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_RX_DFE_TAP3_AB_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_AB_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_RX_DFE_TAP3_CD_GEN2
 * BLOCKS:   DSC_AFE2
 * REGADDR:  0xd013
 * DEVAD:    1
 * DESC:     rx_dfe_tap3_cd register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXD_DFE_TAP3     signed 2's complement +/-15, 1LSB=150mV/64
 *     RXC_DFE_TAP3     signed 2's complement +/-15, 1LSB=150mV/64
 */
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_CD_GEN2r (0x0001d013 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_CD_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP3_CD_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_CD_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap3_cd_gen2[1];
	uint32_t _dsc_rx_dfe_tap3_cd_gen2;
} BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_CD_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_CD_GEN2r_CLR(r) (r).dsc_rx_dfe_tap3_cd_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_CD_GEN2r_SET(r,d) (r).dsc_rx_dfe_tap3_cd_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_CD_GEN2r_GET(r) (r).dsc_rx_dfe_tap3_cd_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_CD_GEN2r_RXC_DFE_TAP3f_GET(r) ((((r).dsc_rx_dfe_tap3_cd_gen2[0]) >> 8) & 0x1f)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_CD_GEN2r_RXC_DFE_TAP3f_SET(r,f) (r).dsc_rx_dfe_tap3_cd_gen2[0]=(((r).dsc_rx_dfe_tap3_cd_gen2[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8)) | (31 << (16 + 8))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_CD_GEN2r_RXD_DFE_TAP3f_GET(r) (((r).dsc_rx_dfe_tap3_cd_gen2[0]) & 0x1f)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_CD_GEN2r_RXD_DFE_TAP3f_SET(r,f) (r).dsc_rx_dfe_tap3_cd_gen2[0]=(((r).dsc_rx_dfe_tap3_cd_gen2[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access DSC_RX_DFE_TAP3_CD_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_RX_DFE_TAP3_CD_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_CD_GEN2r,(_r._dsc_rx_dfe_tap3_cd_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_RX_DFE_TAP3_CD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_CD_GEN2r,(_r._dsc_rx_dfe_tap3_cd_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_RX_DFE_TAP3_CD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_CD_GEN2r,(_r._dsc_rx_dfe_tap3_cd_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_RX_DFE_TAP3_CD_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_CD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap3_cd_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_RX_DFE_TAP3_CD_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_CD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap3_cd_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_RX_DFE_TAP3_CD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_CD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap3_cd_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP3_CD_GEN2r BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_CD_GEN2r
#define DSC_RX_DFE_TAP3_CD_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_CD_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_CD_GEN2r_t DSC_RX_DFE_TAP3_CD_GEN2r_t;
#define DSC_RX_DFE_TAP3_CD_GEN2r_CLR BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_CD_GEN2r_CLR
#define DSC_RX_DFE_TAP3_CD_GEN2r_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_CD_GEN2r_SET
#define DSC_RX_DFE_TAP3_CD_GEN2r_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_CD_GEN2r_GET
#define DSC_RX_DFE_TAP3_CD_GEN2r_RXC_DFE_TAP3f_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_CD_GEN2r_RXC_DFE_TAP3f_GET
#define DSC_RX_DFE_TAP3_CD_GEN2r_RXC_DFE_TAP3f_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_CD_GEN2r_RXC_DFE_TAP3f_SET
#define DSC_RX_DFE_TAP3_CD_GEN2r_RXD_DFE_TAP3f_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_CD_GEN2r_RXD_DFE_TAP3f_GET
#define DSC_RX_DFE_TAP3_CD_GEN2r_RXD_DFE_TAP3f_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_CD_GEN2r_RXD_DFE_TAP3f_SET
#define READ_DSC_RX_DFE_TAP3_CD_GEN2r BCMI_TSCF_XGXS_READ_DSC_RX_DFE_TAP3_CD_GEN2r
#define WRITE_DSC_RX_DFE_TAP3_CD_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_RX_DFE_TAP3_CD_GEN2r
#define MODIFY_DSC_RX_DFE_TAP3_CD_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_RX_DFE_TAP3_CD_GEN2r
#define READLN_DSC_RX_DFE_TAP3_CD_GEN2r BCMI_TSCF_XGXS_READLN_DSC_RX_DFE_TAP3_CD_GEN2r
#define WRITELN_DSC_RX_DFE_TAP3_CD_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_RX_DFE_TAP3_CD_GEN2r
#define WRITEALL_DSC_RX_DFE_TAP3_CD_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_RX_DFE_TAP3_CD_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_RX_DFE_TAP3_CD_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_RX_DFE_TAP4_ABCD_GEN2
 * BLOCKS:   DSC_AFE2
 * REGADDR:  0xd014
 * DEVAD:    1
 * DESC:     rx_dfe_tap4_abcd register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXD_DFE_TAP4     signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXC_DFE_TAP4     signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXB_DFE_TAP4     signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXA_DFE_TAP4     signed 2's complement +/-7, 1 LSB=150mV/64
 */
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP4_ABCD_GEN2r (0x0001d014 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP4_ABCD_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP4_ABCD_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_RX_DFE_TAP4_ABCD_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap4_abcd_gen2[1];
	uint32_t _dsc_rx_dfe_tap4_abcd_gen2;
} BCMI_TSCF_XGXS_DSC_RX_DFE_TAP4_ABCD_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP4_ABCD_GEN2r_CLR(r) (r).dsc_rx_dfe_tap4_abcd_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP4_ABCD_GEN2r_SET(r,d) (r).dsc_rx_dfe_tap4_abcd_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP4_ABCD_GEN2r_GET(r) (r).dsc_rx_dfe_tap4_abcd_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP4_ABCD_GEN2r_RXA_DFE_TAP4f_GET(r) ((((r).dsc_rx_dfe_tap4_abcd_gen2[0]) >> 12) & 0xf)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP4_ABCD_GEN2r_RXA_DFE_TAP4f_SET(r,f) (r).dsc_rx_dfe_tap4_abcd_gen2[0]=(((r).dsc_rx_dfe_tap4_abcd_gen2[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP4_ABCD_GEN2r_RXB_DFE_TAP4f_GET(r) ((((r).dsc_rx_dfe_tap4_abcd_gen2[0]) >> 8) & 0xf)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP4_ABCD_GEN2r_RXB_DFE_TAP4f_SET(r,f) (r).dsc_rx_dfe_tap4_abcd_gen2[0]=(((r).dsc_rx_dfe_tap4_abcd_gen2[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP4_ABCD_GEN2r_RXC_DFE_TAP4f_GET(r) ((((r).dsc_rx_dfe_tap4_abcd_gen2[0]) >> 4) & 0xf)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP4_ABCD_GEN2r_RXC_DFE_TAP4f_SET(r,f) (r).dsc_rx_dfe_tap4_abcd_gen2[0]=(((r).dsc_rx_dfe_tap4_abcd_gen2[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4)) | (15 << (16 + 4))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP4_ABCD_GEN2r_RXD_DFE_TAP4f_GET(r) (((r).dsc_rx_dfe_tap4_abcd_gen2[0]) & 0xf)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP4_ABCD_GEN2r_RXD_DFE_TAP4f_SET(r,f) (r).dsc_rx_dfe_tap4_abcd_gen2[0]=(((r).dsc_rx_dfe_tap4_abcd_gen2[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access DSC_RX_DFE_TAP4_ABCD_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_RX_DFE_TAP4_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP4_ABCD_GEN2r,(_r._dsc_rx_dfe_tap4_abcd_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_RX_DFE_TAP4_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP4_ABCD_GEN2r,(_r._dsc_rx_dfe_tap4_abcd_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_RX_DFE_TAP4_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP4_ABCD_GEN2r,(_r._dsc_rx_dfe_tap4_abcd_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_RX_DFE_TAP4_ABCD_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP4_ABCD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap4_abcd_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_RX_DFE_TAP4_ABCD_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP4_ABCD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap4_abcd_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_RX_DFE_TAP4_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP4_ABCD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap4_abcd_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP4_ABCD_GEN2r BCMI_TSCF_XGXS_DSC_RX_DFE_TAP4_ABCD_GEN2r
#define DSC_RX_DFE_TAP4_ABCD_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_RX_DFE_TAP4_ABCD_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_RX_DFE_TAP4_ABCD_GEN2r_t DSC_RX_DFE_TAP4_ABCD_GEN2r_t;
#define DSC_RX_DFE_TAP4_ABCD_GEN2r_CLR BCMI_TSCF_XGXS_DSC_RX_DFE_TAP4_ABCD_GEN2r_CLR
#define DSC_RX_DFE_TAP4_ABCD_GEN2r_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP4_ABCD_GEN2r_SET
#define DSC_RX_DFE_TAP4_ABCD_GEN2r_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP4_ABCD_GEN2r_GET
#define DSC_RX_DFE_TAP4_ABCD_GEN2r_RXA_DFE_TAP4f_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP4_ABCD_GEN2r_RXA_DFE_TAP4f_GET
#define DSC_RX_DFE_TAP4_ABCD_GEN2r_RXA_DFE_TAP4f_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP4_ABCD_GEN2r_RXA_DFE_TAP4f_SET
#define DSC_RX_DFE_TAP4_ABCD_GEN2r_RXB_DFE_TAP4f_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP4_ABCD_GEN2r_RXB_DFE_TAP4f_GET
#define DSC_RX_DFE_TAP4_ABCD_GEN2r_RXB_DFE_TAP4f_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP4_ABCD_GEN2r_RXB_DFE_TAP4f_SET
#define DSC_RX_DFE_TAP4_ABCD_GEN2r_RXC_DFE_TAP4f_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP4_ABCD_GEN2r_RXC_DFE_TAP4f_GET
#define DSC_RX_DFE_TAP4_ABCD_GEN2r_RXC_DFE_TAP4f_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP4_ABCD_GEN2r_RXC_DFE_TAP4f_SET
#define DSC_RX_DFE_TAP4_ABCD_GEN2r_RXD_DFE_TAP4f_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP4_ABCD_GEN2r_RXD_DFE_TAP4f_GET
#define DSC_RX_DFE_TAP4_ABCD_GEN2r_RXD_DFE_TAP4f_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP4_ABCD_GEN2r_RXD_DFE_TAP4f_SET
#define READ_DSC_RX_DFE_TAP4_ABCD_GEN2r BCMI_TSCF_XGXS_READ_DSC_RX_DFE_TAP4_ABCD_GEN2r
#define WRITE_DSC_RX_DFE_TAP4_ABCD_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_RX_DFE_TAP4_ABCD_GEN2r
#define MODIFY_DSC_RX_DFE_TAP4_ABCD_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_RX_DFE_TAP4_ABCD_GEN2r
#define READLN_DSC_RX_DFE_TAP4_ABCD_GEN2r BCMI_TSCF_XGXS_READLN_DSC_RX_DFE_TAP4_ABCD_GEN2r
#define WRITELN_DSC_RX_DFE_TAP4_ABCD_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_RX_DFE_TAP4_ABCD_GEN2r
#define WRITEALL_DSC_RX_DFE_TAP4_ABCD_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_RX_DFE_TAP4_ABCD_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_RX_DFE_TAP4_ABCD_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_RX_DFE_TAP5_ABCD_GEN2
 * BLOCKS:   DSC_AFE2
 * REGADDR:  0xd015
 * DEVAD:    1
 * DESC:     rx_dfe_tap5_abcd register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXD_DFE_TAP5     signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXC_DFE_TAP5     signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXB_DFE_TAP5     signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXA_DFE_TAP5     signed 2's complement +/-7, 1 LSB=150mV/64
 */
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP5_ABCD_GEN2r (0x0001d015 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP5_ABCD_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP5_ABCD_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_RX_DFE_TAP5_ABCD_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap5_abcd_gen2[1];
	uint32_t _dsc_rx_dfe_tap5_abcd_gen2;
} BCMI_TSCF_XGXS_DSC_RX_DFE_TAP5_ABCD_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP5_ABCD_GEN2r_CLR(r) (r).dsc_rx_dfe_tap5_abcd_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP5_ABCD_GEN2r_SET(r,d) (r).dsc_rx_dfe_tap5_abcd_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP5_ABCD_GEN2r_GET(r) (r).dsc_rx_dfe_tap5_abcd_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP5_ABCD_GEN2r_RXA_DFE_TAP5f_GET(r) ((((r).dsc_rx_dfe_tap5_abcd_gen2[0]) >> 12) & 0xf)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP5_ABCD_GEN2r_RXA_DFE_TAP5f_SET(r,f) (r).dsc_rx_dfe_tap5_abcd_gen2[0]=(((r).dsc_rx_dfe_tap5_abcd_gen2[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP5_ABCD_GEN2r_RXB_DFE_TAP5f_GET(r) ((((r).dsc_rx_dfe_tap5_abcd_gen2[0]) >> 8) & 0xf)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP5_ABCD_GEN2r_RXB_DFE_TAP5f_SET(r,f) (r).dsc_rx_dfe_tap5_abcd_gen2[0]=(((r).dsc_rx_dfe_tap5_abcd_gen2[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP5_ABCD_GEN2r_RXC_DFE_TAP5f_GET(r) ((((r).dsc_rx_dfe_tap5_abcd_gen2[0]) >> 4) & 0xf)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP5_ABCD_GEN2r_RXC_DFE_TAP5f_SET(r,f) (r).dsc_rx_dfe_tap5_abcd_gen2[0]=(((r).dsc_rx_dfe_tap5_abcd_gen2[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4)) | (15 << (16 + 4))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP5_ABCD_GEN2r_RXD_DFE_TAP5f_GET(r) (((r).dsc_rx_dfe_tap5_abcd_gen2[0]) & 0xf)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP5_ABCD_GEN2r_RXD_DFE_TAP5f_SET(r,f) (r).dsc_rx_dfe_tap5_abcd_gen2[0]=(((r).dsc_rx_dfe_tap5_abcd_gen2[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access DSC_RX_DFE_TAP5_ABCD_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_RX_DFE_TAP5_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP5_ABCD_GEN2r,(_r._dsc_rx_dfe_tap5_abcd_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_RX_DFE_TAP5_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP5_ABCD_GEN2r,(_r._dsc_rx_dfe_tap5_abcd_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_RX_DFE_TAP5_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP5_ABCD_GEN2r,(_r._dsc_rx_dfe_tap5_abcd_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_RX_DFE_TAP5_ABCD_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP5_ABCD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap5_abcd_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_RX_DFE_TAP5_ABCD_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP5_ABCD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap5_abcd_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_RX_DFE_TAP5_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP5_ABCD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap5_abcd_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP5_ABCD_GEN2r BCMI_TSCF_XGXS_DSC_RX_DFE_TAP5_ABCD_GEN2r
#define DSC_RX_DFE_TAP5_ABCD_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_RX_DFE_TAP5_ABCD_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_RX_DFE_TAP5_ABCD_GEN2r_t DSC_RX_DFE_TAP5_ABCD_GEN2r_t;
#define DSC_RX_DFE_TAP5_ABCD_GEN2r_CLR BCMI_TSCF_XGXS_DSC_RX_DFE_TAP5_ABCD_GEN2r_CLR
#define DSC_RX_DFE_TAP5_ABCD_GEN2r_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP5_ABCD_GEN2r_SET
#define DSC_RX_DFE_TAP5_ABCD_GEN2r_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP5_ABCD_GEN2r_GET
#define DSC_RX_DFE_TAP5_ABCD_GEN2r_RXA_DFE_TAP5f_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP5_ABCD_GEN2r_RXA_DFE_TAP5f_GET
#define DSC_RX_DFE_TAP5_ABCD_GEN2r_RXA_DFE_TAP5f_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP5_ABCD_GEN2r_RXA_DFE_TAP5f_SET
#define DSC_RX_DFE_TAP5_ABCD_GEN2r_RXB_DFE_TAP5f_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP5_ABCD_GEN2r_RXB_DFE_TAP5f_GET
#define DSC_RX_DFE_TAP5_ABCD_GEN2r_RXB_DFE_TAP5f_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP5_ABCD_GEN2r_RXB_DFE_TAP5f_SET
#define DSC_RX_DFE_TAP5_ABCD_GEN2r_RXC_DFE_TAP5f_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP5_ABCD_GEN2r_RXC_DFE_TAP5f_GET
#define DSC_RX_DFE_TAP5_ABCD_GEN2r_RXC_DFE_TAP5f_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP5_ABCD_GEN2r_RXC_DFE_TAP5f_SET
#define DSC_RX_DFE_TAP5_ABCD_GEN2r_RXD_DFE_TAP5f_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP5_ABCD_GEN2r_RXD_DFE_TAP5f_GET
#define DSC_RX_DFE_TAP5_ABCD_GEN2r_RXD_DFE_TAP5f_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP5_ABCD_GEN2r_RXD_DFE_TAP5f_SET
#define READ_DSC_RX_DFE_TAP5_ABCD_GEN2r BCMI_TSCF_XGXS_READ_DSC_RX_DFE_TAP5_ABCD_GEN2r
#define WRITE_DSC_RX_DFE_TAP5_ABCD_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_RX_DFE_TAP5_ABCD_GEN2r
#define MODIFY_DSC_RX_DFE_TAP5_ABCD_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_RX_DFE_TAP5_ABCD_GEN2r
#define READLN_DSC_RX_DFE_TAP5_ABCD_GEN2r BCMI_TSCF_XGXS_READLN_DSC_RX_DFE_TAP5_ABCD_GEN2r
#define WRITELN_DSC_RX_DFE_TAP5_ABCD_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_RX_DFE_TAP5_ABCD_GEN2r
#define WRITEALL_DSC_RX_DFE_TAP5_ABCD_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_RX_DFE_TAP5_ABCD_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_RX_DFE_TAP5_ABCD_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_RX_DFE_TAP6_ABCD_GEN2
 * BLOCKS:   DSC_AFE2
 * REGADDR:  0xd016
 * DEVAD:    1
 * DESC:     rx_dfe_tap6_abcd register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXD_DFE_TAP6     signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXC_DFE_TAP6     signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXB_DFE_TAP6     signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXA_DFE_TAP6     signed 2's complement +/-7, 1 LSB=150mV/64
 */
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP6_ABCD_GEN2r (0x0001d016 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP6_ABCD_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP6_ABCD_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_RX_DFE_TAP6_ABCD_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap6_abcd_gen2[1];
	uint32_t _dsc_rx_dfe_tap6_abcd_gen2;
} BCMI_TSCF_XGXS_DSC_RX_DFE_TAP6_ABCD_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP6_ABCD_GEN2r_CLR(r) (r).dsc_rx_dfe_tap6_abcd_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP6_ABCD_GEN2r_SET(r,d) (r).dsc_rx_dfe_tap6_abcd_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP6_ABCD_GEN2r_GET(r) (r).dsc_rx_dfe_tap6_abcd_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP6_ABCD_GEN2r_RXA_DFE_TAP6f_GET(r) ((((r).dsc_rx_dfe_tap6_abcd_gen2[0]) >> 12) & 0xf)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP6_ABCD_GEN2r_RXA_DFE_TAP6f_SET(r,f) (r).dsc_rx_dfe_tap6_abcd_gen2[0]=(((r).dsc_rx_dfe_tap6_abcd_gen2[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP6_ABCD_GEN2r_RXB_DFE_TAP6f_GET(r) ((((r).dsc_rx_dfe_tap6_abcd_gen2[0]) >> 8) & 0xf)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP6_ABCD_GEN2r_RXB_DFE_TAP6f_SET(r,f) (r).dsc_rx_dfe_tap6_abcd_gen2[0]=(((r).dsc_rx_dfe_tap6_abcd_gen2[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP6_ABCD_GEN2r_RXC_DFE_TAP6f_GET(r) ((((r).dsc_rx_dfe_tap6_abcd_gen2[0]) >> 4) & 0xf)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP6_ABCD_GEN2r_RXC_DFE_TAP6f_SET(r,f) (r).dsc_rx_dfe_tap6_abcd_gen2[0]=(((r).dsc_rx_dfe_tap6_abcd_gen2[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4)) | (15 << (16 + 4))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP6_ABCD_GEN2r_RXD_DFE_TAP6f_GET(r) (((r).dsc_rx_dfe_tap6_abcd_gen2[0]) & 0xf)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP6_ABCD_GEN2r_RXD_DFE_TAP6f_SET(r,f) (r).dsc_rx_dfe_tap6_abcd_gen2[0]=(((r).dsc_rx_dfe_tap6_abcd_gen2[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access DSC_RX_DFE_TAP6_ABCD_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_RX_DFE_TAP6_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP6_ABCD_GEN2r,(_r._dsc_rx_dfe_tap6_abcd_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_RX_DFE_TAP6_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP6_ABCD_GEN2r,(_r._dsc_rx_dfe_tap6_abcd_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_RX_DFE_TAP6_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP6_ABCD_GEN2r,(_r._dsc_rx_dfe_tap6_abcd_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_RX_DFE_TAP6_ABCD_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP6_ABCD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap6_abcd_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_RX_DFE_TAP6_ABCD_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP6_ABCD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap6_abcd_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_RX_DFE_TAP6_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP6_ABCD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap6_abcd_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP6_ABCD_GEN2r BCMI_TSCF_XGXS_DSC_RX_DFE_TAP6_ABCD_GEN2r
#define DSC_RX_DFE_TAP6_ABCD_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_RX_DFE_TAP6_ABCD_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_RX_DFE_TAP6_ABCD_GEN2r_t DSC_RX_DFE_TAP6_ABCD_GEN2r_t;
#define DSC_RX_DFE_TAP6_ABCD_GEN2r_CLR BCMI_TSCF_XGXS_DSC_RX_DFE_TAP6_ABCD_GEN2r_CLR
#define DSC_RX_DFE_TAP6_ABCD_GEN2r_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP6_ABCD_GEN2r_SET
#define DSC_RX_DFE_TAP6_ABCD_GEN2r_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP6_ABCD_GEN2r_GET
#define DSC_RX_DFE_TAP6_ABCD_GEN2r_RXA_DFE_TAP6f_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP6_ABCD_GEN2r_RXA_DFE_TAP6f_GET
#define DSC_RX_DFE_TAP6_ABCD_GEN2r_RXA_DFE_TAP6f_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP6_ABCD_GEN2r_RXA_DFE_TAP6f_SET
#define DSC_RX_DFE_TAP6_ABCD_GEN2r_RXB_DFE_TAP6f_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP6_ABCD_GEN2r_RXB_DFE_TAP6f_GET
#define DSC_RX_DFE_TAP6_ABCD_GEN2r_RXB_DFE_TAP6f_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP6_ABCD_GEN2r_RXB_DFE_TAP6f_SET
#define DSC_RX_DFE_TAP6_ABCD_GEN2r_RXC_DFE_TAP6f_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP6_ABCD_GEN2r_RXC_DFE_TAP6f_GET
#define DSC_RX_DFE_TAP6_ABCD_GEN2r_RXC_DFE_TAP6f_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP6_ABCD_GEN2r_RXC_DFE_TAP6f_SET
#define DSC_RX_DFE_TAP6_ABCD_GEN2r_RXD_DFE_TAP6f_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP6_ABCD_GEN2r_RXD_DFE_TAP6f_GET
#define DSC_RX_DFE_TAP6_ABCD_GEN2r_RXD_DFE_TAP6f_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP6_ABCD_GEN2r_RXD_DFE_TAP6f_SET
#define READ_DSC_RX_DFE_TAP6_ABCD_GEN2r BCMI_TSCF_XGXS_READ_DSC_RX_DFE_TAP6_ABCD_GEN2r
#define WRITE_DSC_RX_DFE_TAP6_ABCD_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_RX_DFE_TAP6_ABCD_GEN2r
#define MODIFY_DSC_RX_DFE_TAP6_ABCD_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_RX_DFE_TAP6_ABCD_GEN2r
#define READLN_DSC_RX_DFE_TAP6_ABCD_GEN2r BCMI_TSCF_XGXS_READLN_DSC_RX_DFE_TAP6_ABCD_GEN2r
#define WRITELN_DSC_RX_DFE_TAP6_ABCD_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_RX_DFE_TAP6_ABCD_GEN2r
#define WRITEALL_DSC_RX_DFE_TAP6_ABCD_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_RX_DFE_TAP6_ABCD_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_RX_DFE_TAP6_ABCD_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_RX_DFE_TAP7_ABCD_GEN2
 * BLOCKS:   DSC_AFE2
 * REGADDR:  0xd017
 * DEVAD:    1
 * DESC:     rx_dfe_tap7_abcd register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXD_DFE_TAP7     signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXC_DFE_TAP7     signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXB_DFE_TAP7     signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXA_DFE_TAP7     signed 2's complement +/-7, 1 LSB=150mV/64
 */
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_ABCD_GEN2r (0x0001d017 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_ABCD_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP7_ABCD_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_ABCD_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap7_abcd_gen2[1];
	uint32_t _dsc_rx_dfe_tap7_abcd_gen2;
} BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_ABCD_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_ABCD_GEN2r_CLR(r) (r).dsc_rx_dfe_tap7_abcd_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_ABCD_GEN2r_SET(r,d) (r).dsc_rx_dfe_tap7_abcd_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_ABCD_GEN2r_GET(r) (r).dsc_rx_dfe_tap7_abcd_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_ABCD_GEN2r_RXA_DFE_TAP7f_GET(r) ((((r).dsc_rx_dfe_tap7_abcd_gen2[0]) >> 12) & 0xf)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_ABCD_GEN2r_RXA_DFE_TAP7f_SET(r,f) (r).dsc_rx_dfe_tap7_abcd_gen2[0]=(((r).dsc_rx_dfe_tap7_abcd_gen2[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_ABCD_GEN2r_RXB_DFE_TAP7f_GET(r) ((((r).dsc_rx_dfe_tap7_abcd_gen2[0]) >> 8) & 0xf)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_ABCD_GEN2r_RXB_DFE_TAP7f_SET(r,f) (r).dsc_rx_dfe_tap7_abcd_gen2[0]=(((r).dsc_rx_dfe_tap7_abcd_gen2[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_ABCD_GEN2r_RXC_DFE_TAP7f_GET(r) ((((r).dsc_rx_dfe_tap7_abcd_gen2[0]) >> 4) & 0xf)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_ABCD_GEN2r_RXC_DFE_TAP7f_SET(r,f) (r).dsc_rx_dfe_tap7_abcd_gen2[0]=(((r).dsc_rx_dfe_tap7_abcd_gen2[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4)) | (15 << (16 + 4))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_ABCD_GEN2r_RXD_DFE_TAP7f_GET(r) (((r).dsc_rx_dfe_tap7_abcd_gen2[0]) & 0xf)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_ABCD_GEN2r_RXD_DFE_TAP7f_SET(r,f) (r).dsc_rx_dfe_tap7_abcd_gen2[0]=(((r).dsc_rx_dfe_tap7_abcd_gen2[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access DSC_RX_DFE_TAP7_ABCD_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_RX_DFE_TAP7_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_ABCD_GEN2r,(_r._dsc_rx_dfe_tap7_abcd_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_RX_DFE_TAP7_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_ABCD_GEN2r,(_r._dsc_rx_dfe_tap7_abcd_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_RX_DFE_TAP7_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_ABCD_GEN2r,(_r._dsc_rx_dfe_tap7_abcd_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_RX_DFE_TAP7_ABCD_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_ABCD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap7_abcd_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_RX_DFE_TAP7_ABCD_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_ABCD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap7_abcd_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_RX_DFE_TAP7_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_ABCD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap7_abcd_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP7_ABCD_GEN2r BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_ABCD_GEN2r
#define DSC_RX_DFE_TAP7_ABCD_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_ABCD_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_ABCD_GEN2r_t DSC_RX_DFE_TAP7_ABCD_GEN2r_t;
#define DSC_RX_DFE_TAP7_ABCD_GEN2r_CLR BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_ABCD_GEN2r_CLR
#define DSC_RX_DFE_TAP7_ABCD_GEN2r_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_ABCD_GEN2r_SET
#define DSC_RX_DFE_TAP7_ABCD_GEN2r_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_ABCD_GEN2r_GET
#define DSC_RX_DFE_TAP7_ABCD_GEN2r_RXA_DFE_TAP7f_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_ABCD_GEN2r_RXA_DFE_TAP7f_GET
#define DSC_RX_DFE_TAP7_ABCD_GEN2r_RXA_DFE_TAP7f_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_ABCD_GEN2r_RXA_DFE_TAP7f_SET
#define DSC_RX_DFE_TAP7_ABCD_GEN2r_RXB_DFE_TAP7f_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_ABCD_GEN2r_RXB_DFE_TAP7f_GET
#define DSC_RX_DFE_TAP7_ABCD_GEN2r_RXB_DFE_TAP7f_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_ABCD_GEN2r_RXB_DFE_TAP7f_SET
#define DSC_RX_DFE_TAP7_ABCD_GEN2r_RXC_DFE_TAP7f_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_ABCD_GEN2r_RXC_DFE_TAP7f_GET
#define DSC_RX_DFE_TAP7_ABCD_GEN2r_RXC_DFE_TAP7f_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_ABCD_GEN2r_RXC_DFE_TAP7f_SET
#define DSC_RX_DFE_TAP7_ABCD_GEN2r_RXD_DFE_TAP7f_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_ABCD_GEN2r_RXD_DFE_TAP7f_GET
#define DSC_RX_DFE_TAP7_ABCD_GEN2r_RXD_DFE_TAP7f_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_ABCD_GEN2r_RXD_DFE_TAP7f_SET
#define READ_DSC_RX_DFE_TAP7_ABCD_GEN2r BCMI_TSCF_XGXS_READ_DSC_RX_DFE_TAP7_ABCD_GEN2r
#define WRITE_DSC_RX_DFE_TAP7_ABCD_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_RX_DFE_TAP7_ABCD_GEN2r
#define MODIFY_DSC_RX_DFE_TAP7_ABCD_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_RX_DFE_TAP7_ABCD_GEN2r
#define READLN_DSC_RX_DFE_TAP7_ABCD_GEN2r BCMI_TSCF_XGXS_READLN_DSC_RX_DFE_TAP7_ABCD_GEN2r
#define WRITELN_DSC_RX_DFE_TAP7_ABCD_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_RX_DFE_TAP7_ABCD_GEN2r
#define WRITEALL_DSC_RX_DFE_TAP7_ABCD_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_RX_DFE_TAP7_ABCD_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_ABCD_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_RX_DFE_TAP8_ABCD_GEN2
 * BLOCKS:   DSC_AFE2
 * REGADDR:  0xd018
 * DEVAD:    1
 * DESC:     rx_dfe_tap8_abcd register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXD_DFE_TAP8     signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXC_DFE_TAP8     signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXB_DFE_TAP8     signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXA_DFE_TAP8     signed 2's complement +/-7, 1 LSB=150mV/64
 */
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP8_ABCD_GEN2r (0x0001d018 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP8_ABCD_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP8_ABCD_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_RX_DFE_TAP8_ABCD_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap8_abcd_gen2[1];
	uint32_t _dsc_rx_dfe_tap8_abcd_gen2;
} BCMI_TSCF_XGXS_DSC_RX_DFE_TAP8_ABCD_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP8_ABCD_GEN2r_CLR(r) (r).dsc_rx_dfe_tap8_abcd_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP8_ABCD_GEN2r_SET(r,d) (r).dsc_rx_dfe_tap8_abcd_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP8_ABCD_GEN2r_GET(r) (r).dsc_rx_dfe_tap8_abcd_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP8_ABCD_GEN2r_RXA_DFE_TAP8f_GET(r) ((((r).dsc_rx_dfe_tap8_abcd_gen2[0]) >> 12) & 0xf)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP8_ABCD_GEN2r_RXA_DFE_TAP8f_SET(r,f) (r).dsc_rx_dfe_tap8_abcd_gen2[0]=(((r).dsc_rx_dfe_tap8_abcd_gen2[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP8_ABCD_GEN2r_RXB_DFE_TAP8f_GET(r) ((((r).dsc_rx_dfe_tap8_abcd_gen2[0]) >> 8) & 0xf)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP8_ABCD_GEN2r_RXB_DFE_TAP8f_SET(r,f) (r).dsc_rx_dfe_tap8_abcd_gen2[0]=(((r).dsc_rx_dfe_tap8_abcd_gen2[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP8_ABCD_GEN2r_RXC_DFE_TAP8f_GET(r) ((((r).dsc_rx_dfe_tap8_abcd_gen2[0]) >> 4) & 0xf)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP8_ABCD_GEN2r_RXC_DFE_TAP8f_SET(r,f) (r).dsc_rx_dfe_tap8_abcd_gen2[0]=(((r).dsc_rx_dfe_tap8_abcd_gen2[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4)) | (15 << (16 + 4))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP8_ABCD_GEN2r_RXD_DFE_TAP8f_GET(r) (((r).dsc_rx_dfe_tap8_abcd_gen2[0]) & 0xf)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP8_ABCD_GEN2r_RXD_DFE_TAP8f_SET(r,f) (r).dsc_rx_dfe_tap8_abcd_gen2[0]=(((r).dsc_rx_dfe_tap8_abcd_gen2[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access DSC_RX_DFE_TAP8_ABCD_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_RX_DFE_TAP8_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP8_ABCD_GEN2r,(_r._dsc_rx_dfe_tap8_abcd_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_RX_DFE_TAP8_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP8_ABCD_GEN2r,(_r._dsc_rx_dfe_tap8_abcd_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_RX_DFE_TAP8_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP8_ABCD_GEN2r,(_r._dsc_rx_dfe_tap8_abcd_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_RX_DFE_TAP8_ABCD_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP8_ABCD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap8_abcd_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_RX_DFE_TAP8_ABCD_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP8_ABCD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap8_abcd_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_RX_DFE_TAP8_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP8_ABCD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap8_abcd_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP8_ABCD_GEN2r BCMI_TSCF_XGXS_DSC_RX_DFE_TAP8_ABCD_GEN2r
#define DSC_RX_DFE_TAP8_ABCD_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_RX_DFE_TAP8_ABCD_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_RX_DFE_TAP8_ABCD_GEN2r_t DSC_RX_DFE_TAP8_ABCD_GEN2r_t;
#define DSC_RX_DFE_TAP8_ABCD_GEN2r_CLR BCMI_TSCF_XGXS_DSC_RX_DFE_TAP8_ABCD_GEN2r_CLR
#define DSC_RX_DFE_TAP8_ABCD_GEN2r_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP8_ABCD_GEN2r_SET
#define DSC_RX_DFE_TAP8_ABCD_GEN2r_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP8_ABCD_GEN2r_GET
#define DSC_RX_DFE_TAP8_ABCD_GEN2r_RXA_DFE_TAP8f_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP8_ABCD_GEN2r_RXA_DFE_TAP8f_GET
#define DSC_RX_DFE_TAP8_ABCD_GEN2r_RXA_DFE_TAP8f_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP8_ABCD_GEN2r_RXA_DFE_TAP8f_SET
#define DSC_RX_DFE_TAP8_ABCD_GEN2r_RXB_DFE_TAP8f_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP8_ABCD_GEN2r_RXB_DFE_TAP8f_GET
#define DSC_RX_DFE_TAP8_ABCD_GEN2r_RXB_DFE_TAP8f_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP8_ABCD_GEN2r_RXB_DFE_TAP8f_SET
#define DSC_RX_DFE_TAP8_ABCD_GEN2r_RXC_DFE_TAP8f_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP8_ABCD_GEN2r_RXC_DFE_TAP8f_GET
#define DSC_RX_DFE_TAP8_ABCD_GEN2r_RXC_DFE_TAP8f_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP8_ABCD_GEN2r_RXC_DFE_TAP8f_SET
#define DSC_RX_DFE_TAP8_ABCD_GEN2r_RXD_DFE_TAP8f_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP8_ABCD_GEN2r_RXD_DFE_TAP8f_GET
#define DSC_RX_DFE_TAP8_ABCD_GEN2r_RXD_DFE_TAP8f_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP8_ABCD_GEN2r_RXD_DFE_TAP8f_SET
#define READ_DSC_RX_DFE_TAP8_ABCD_GEN2r BCMI_TSCF_XGXS_READ_DSC_RX_DFE_TAP8_ABCD_GEN2r
#define WRITE_DSC_RX_DFE_TAP8_ABCD_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_RX_DFE_TAP8_ABCD_GEN2r
#define MODIFY_DSC_RX_DFE_TAP8_ABCD_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_RX_DFE_TAP8_ABCD_GEN2r
#define READLN_DSC_RX_DFE_TAP8_ABCD_GEN2r BCMI_TSCF_XGXS_READLN_DSC_RX_DFE_TAP8_ABCD_GEN2r
#define WRITELN_DSC_RX_DFE_TAP8_ABCD_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_RX_DFE_TAP8_ABCD_GEN2r
#define WRITEALL_DSC_RX_DFE_TAP8_ABCD_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_RX_DFE_TAP8_ABCD_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_RX_DFE_TAP8_ABCD_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_RX_DFE_TAP9_ABCD_GEN2
 * BLOCKS:   DSC_AFE2
 * REGADDR:  0xd019
 * DEVAD:    1
 * DESC:     rx_dfe_tap9_abcd register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXD_DFE_TAP9     signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXC_DFE_TAP9     signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXB_DFE_TAP9     signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXA_DFE_TAP9     signed 2's complement +/-7, 1 LSB=150mV/64
 */
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_ABCD_GEN2r (0x0001d019 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_ABCD_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP9_ABCD_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_ABCD_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap9_abcd_gen2[1];
	uint32_t _dsc_rx_dfe_tap9_abcd_gen2;
} BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_ABCD_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_ABCD_GEN2r_CLR(r) (r).dsc_rx_dfe_tap9_abcd_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_ABCD_GEN2r_SET(r,d) (r).dsc_rx_dfe_tap9_abcd_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_ABCD_GEN2r_GET(r) (r).dsc_rx_dfe_tap9_abcd_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_ABCD_GEN2r_RXA_DFE_TAP9f_GET(r) ((((r).dsc_rx_dfe_tap9_abcd_gen2[0]) >> 12) & 0xf)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_ABCD_GEN2r_RXA_DFE_TAP9f_SET(r,f) (r).dsc_rx_dfe_tap9_abcd_gen2[0]=(((r).dsc_rx_dfe_tap9_abcd_gen2[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_ABCD_GEN2r_RXB_DFE_TAP9f_GET(r) ((((r).dsc_rx_dfe_tap9_abcd_gen2[0]) >> 8) & 0xf)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_ABCD_GEN2r_RXB_DFE_TAP9f_SET(r,f) (r).dsc_rx_dfe_tap9_abcd_gen2[0]=(((r).dsc_rx_dfe_tap9_abcd_gen2[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_ABCD_GEN2r_RXC_DFE_TAP9f_GET(r) ((((r).dsc_rx_dfe_tap9_abcd_gen2[0]) >> 4) & 0xf)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_ABCD_GEN2r_RXC_DFE_TAP9f_SET(r,f) (r).dsc_rx_dfe_tap9_abcd_gen2[0]=(((r).dsc_rx_dfe_tap9_abcd_gen2[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4)) | (15 << (16 + 4))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_ABCD_GEN2r_RXD_DFE_TAP9f_GET(r) (((r).dsc_rx_dfe_tap9_abcd_gen2[0]) & 0xf)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_ABCD_GEN2r_RXD_DFE_TAP9f_SET(r,f) (r).dsc_rx_dfe_tap9_abcd_gen2[0]=(((r).dsc_rx_dfe_tap9_abcd_gen2[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access DSC_RX_DFE_TAP9_ABCD_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_RX_DFE_TAP9_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_ABCD_GEN2r,(_r._dsc_rx_dfe_tap9_abcd_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_RX_DFE_TAP9_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_ABCD_GEN2r,(_r._dsc_rx_dfe_tap9_abcd_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_RX_DFE_TAP9_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_ABCD_GEN2r,(_r._dsc_rx_dfe_tap9_abcd_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_RX_DFE_TAP9_ABCD_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_ABCD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap9_abcd_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_RX_DFE_TAP9_ABCD_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_ABCD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap9_abcd_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_RX_DFE_TAP9_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_ABCD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap9_abcd_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP9_ABCD_GEN2r BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_ABCD_GEN2r
#define DSC_RX_DFE_TAP9_ABCD_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_ABCD_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_ABCD_GEN2r_t DSC_RX_DFE_TAP9_ABCD_GEN2r_t;
#define DSC_RX_DFE_TAP9_ABCD_GEN2r_CLR BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_ABCD_GEN2r_CLR
#define DSC_RX_DFE_TAP9_ABCD_GEN2r_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_ABCD_GEN2r_SET
#define DSC_RX_DFE_TAP9_ABCD_GEN2r_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_ABCD_GEN2r_GET
#define DSC_RX_DFE_TAP9_ABCD_GEN2r_RXA_DFE_TAP9f_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_ABCD_GEN2r_RXA_DFE_TAP9f_GET
#define DSC_RX_DFE_TAP9_ABCD_GEN2r_RXA_DFE_TAP9f_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_ABCD_GEN2r_RXA_DFE_TAP9f_SET
#define DSC_RX_DFE_TAP9_ABCD_GEN2r_RXB_DFE_TAP9f_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_ABCD_GEN2r_RXB_DFE_TAP9f_GET
#define DSC_RX_DFE_TAP9_ABCD_GEN2r_RXB_DFE_TAP9f_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_ABCD_GEN2r_RXB_DFE_TAP9f_SET
#define DSC_RX_DFE_TAP9_ABCD_GEN2r_RXC_DFE_TAP9f_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_ABCD_GEN2r_RXC_DFE_TAP9f_GET
#define DSC_RX_DFE_TAP9_ABCD_GEN2r_RXC_DFE_TAP9f_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_ABCD_GEN2r_RXC_DFE_TAP9f_SET
#define DSC_RX_DFE_TAP9_ABCD_GEN2r_RXD_DFE_TAP9f_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_ABCD_GEN2r_RXD_DFE_TAP9f_GET
#define DSC_RX_DFE_TAP9_ABCD_GEN2r_RXD_DFE_TAP9f_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_ABCD_GEN2r_RXD_DFE_TAP9f_SET
#define READ_DSC_RX_DFE_TAP9_ABCD_GEN2r BCMI_TSCF_XGXS_READ_DSC_RX_DFE_TAP9_ABCD_GEN2r
#define WRITE_DSC_RX_DFE_TAP9_ABCD_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_RX_DFE_TAP9_ABCD_GEN2r
#define MODIFY_DSC_RX_DFE_TAP9_ABCD_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_RX_DFE_TAP9_ABCD_GEN2r
#define READLN_DSC_RX_DFE_TAP9_ABCD_GEN2r BCMI_TSCF_XGXS_READLN_DSC_RX_DFE_TAP9_ABCD_GEN2r
#define WRITELN_DSC_RX_DFE_TAP9_ABCD_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_RX_DFE_TAP9_ABCD_GEN2r
#define WRITEALL_DSC_RX_DFE_TAP9_ABCD_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_RX_DFE_TAP9_ABCD_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_ABCD_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_RX_DFE_TAP10_ABCD_GEN2
 * BLOCKS:   DSC_AFE3
 * REGADDR:  0xd020
 * DEVAD:    1
 * DESC:     rx_dfe_tap10_abcd register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXD_DFE_TAP10    signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXC_DFE_TAP10    signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXB_DFE_TAP10    signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXA_DFE_TAP10    signed 2's complement +/-7, 1 LSB=150mV/64
 */
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP10_ABCD_GEN2r (0x0001d020 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP10_ABCD_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP10_ABCD_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_RX_DFE_TAP10_ABCD_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap10_abcd_gen2[1];
	uint32_t _dsc_rx_dfe_tap10_abcd_gen2;
} BCMI_TSCF_XGXS_DSC_RX_DFE_TAP10_ABCD_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP10_ABCD_GEN2r_CLR(r) (r).dsc_rx_dfe_tap10_abcd_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP10_ABCD_GEN2r_SET(r,d) (r).dsc_rx_dfe_tap10_abcd_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP10_ABCD_GEN2r_GET(r) (r).dsc_rx_dfe_tap10_abcd_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP10_ABCD_GEN2r_RXA_DFE_TAP10f_GET(r) ((((r).dsc_rx_dfe_tap10_abcd_gen2[0]) >> 12) & 0xf)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP10_ABCD_GEN2r_RXA_DFE_TAP10f_SET(r,f) (r).dsc_rx_dfe_tap10_abcd_gen2[0]=(((r).dsc_rx_dfe_tap10_abcd_gen2[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP10_ABCD_GEN2r_RXB_DFE_TAP10f_GET(r) ((((r).dsc_rx_dfe_tap10_abcd_gen2[0]) >> 8) & 0xf)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP10_ABCD_GEN2r_RXB_DFE_TAP10f_SET(r,f) (r).dsc_rx_dfe_tap10_abcd_gen2[0]=(((r).dsc_rx_dfe_tap10_abcd_gen2[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP10_ABCD_GEN2r_RXC_DFE_TAP10f_GET(r) ((((r).dsc_rx_dfe_tap10_abcd_gen2[0]) >> 4) & 0xf)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP10_ABCD_GEN2r_RXC_DFE_TAP10f_SET(r,f) (r).dsc_rx_dfe_tap10_abcd_gen2[0]=(((r).dsc_rx_dfe_tap10_abcd_gen2[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4)) | (15 << (16 + 4))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP10_ABCD_GEN2r_RXD_DFE_TAP10f_GET(r) (((r).dsc_rx_dfe_tap10_abcd_gen2[0]) & 0xf)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP10_ABCD_GEN2r_RXD_DFE_TAP10f_SET(r,f) (r).dsc_rx_dfe_tap10_abcd_gen2[0]=(((r).dsc_rx_dfe_tap10_abcd_gen2[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access DSC_RX_DFE_TAP10_ABCD_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_RX_DFE_TAP10_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP10_ABCD_GEN2r,(_r._dsc_rx_dfe_tap10_abcd_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_RX_DFE_TAP10_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP10_ABCD_GEN2r,(_r._dsc_rx_dfe_tap10_abcd_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_RX_DFE_TAP10_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP10_ABCD_GEN2r,(_r._dsc_rx_dfe_tap10_abcd_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_RX_DFE_TAP10_ABCD_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP10_ABCD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap10_abcd_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_RX_DFE_TAP10_ABCD_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP10_ABCD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap10_abcd_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_RX_DFE_TAP10_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP10_ABCD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap10_abcd_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP10_ABCD_GEN2r BCMI_TSCF_XGXS_DSC_RX_DFE_TAP10_ABCD_GEN2r
#define DSC_RX_DFE_TAP10_ABCD_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_RX_DFE_TAP10_ABCD_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_RX_DFE_TAP10_ABCD_GEN2r_t DSC_RX_DFE_TAP10_ABCD_GEN2r_t;
#define DSC_RX_DFE_TAP10_ABCD_GEN2r_CLR BCMI_TSCF_XGXS_DSC_RX_DFE_TAP10_ABCD_GEN2r_CLR
#define DSC_RX_DFE_TAP10_ABCD_GEN2r_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP10_ABCD_GEN2r_SET
#define DSC_RX_DFE_TAP10_ABCD_GEN2r_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP10_ABCD_GEN2r_GET
#define DSC_RX_DFE_TAP10_ABCD_GEN2r_RXA_DFE_TAP10f_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP10_ABCD_GEN2r_RXA_DFE_TAP10f_GET
#define DSC_RX_DFE_TAP10_ABCD_GEN2r_RXA_DFE_TAP10f_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP10_ABCD_GEN2r_RXA_DFE_TAP10f_SET
#define DSC_RX_DFE_TAP10_ABCD_GEN2r_RXB_DFE_TAP10f_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP10_ABCD_GEN2r_RXB_DFE_TAP10f_GET
#define DSC_RX_DFE_TAP10_ABCD_GEN2r_RXB_DFE_TAP10f_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP10_ABCD_GEN2r_RXB_DFE_TAP10f_SET
#define DSC_RX_DFE_TAP10_ABCD_GEN2r_RXC_DFE_TAP10f_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP10_ABCD_GEN2r_RXC_DFE_TAP10f_GET
#define DSC_RX_DFE_TAP10_ABCD_GEN2r_RXC_DFE_TAP10f_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP10_ABCD_GEN2r_RXC_DFE_TAP10f_SET
#define DSC_RX_DFE_TAP10_ABCD_GEN2r_RXD_DFE_TAP10f_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP10_ABCD_GEN2r_RXD_DFE_TAP10f_GET
#define DSC_RX_DFE_TAP10_ABCD_GEN2r_RXD_DFE_TAP10f_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP10_ABCD_GEN2r_RXD_DFE_TAP10f_SET
#define READ_DSC_RX_DFE_TAP10_ABCD_GEN2r BCMI_TSCF_XGXS_READ_DSC_RX_DFE_TAP10_ABCD_GEN2r
#define WRITE_DSC_RX_DFE_TAP10_ABCD_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_RX_DFE_TAP10_ABCD_GEN2r
#define MODIFY_DSC_RX_DFE_TAP10_ABCD_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_RX_DFE_TAP10_ABCD_GEN2r
#define READLN_DSC_RX_DFE_TAP10_ABCD_GEN2r BCMI_TSCF_XGXS_READLN_DSC_RX_DFE_TAP10_ABCD_GEN2r
#define WRITELN_DSC_RX_DFE_TAP10_ABCD_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_RX_DFE_TAP10_ABCD_GEN2r
#define WRITEALL_DSC_RX_DFE_TAP10_ABCD_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_RX_DFE_TAP10_ABCD_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_RX_DFE_TAP10_ABCD_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_RX_DFE_TAP11_ABCD_GEN2
 * BLOCKS:   DSC_AFE3
 * REGADDR:  0xd021
 * DEVAD:    1
 * DESC:     rx_dfe_tap11_abcd register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXD_DFE_TAP11    signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXC_DFE_TAP11    signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXB_DFE_TAP11    signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXA_DFE_TAP11    signed 2's complement +/-7, 1 LSB=150mV/64
 */
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_ABCD_GEN2r (0x0001d021 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_ABCD_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP11_ABCD_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_ABCD_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap11_abcd_gen2[1];
	uint32_t _dsc_rx_dfe_tap11_abcd_gen2;
} BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_ABCD_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_ABCD_GEN2r_CLR(r) (r).dsc_rx_dfe_tap11_abcd_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_ABCD_GEN2r_SET(r,d) (r).dsc_rx_dfe_tap11_abcd_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_ABCD_GEN2r_GET(r) (r).dsc_rx_dfe_tap11_abcd_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_ABCD_GEN2r_RXA_DFE_TAP11f_GET(r) ((((r).dsc_rx_dfe_tap11_abcd_gen2[0]) >> 12) & 0xf)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_ABCD_GEN2r_RXA_DFE_TAP11f_SET(r,f) (r).dsc_rx_dfe_tap11_abcd_gen2[0]=(((r).dsc_rx_dfe_tap11_abcd_gen2[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_ABCD_GEN2r_RXB_DFE_TAP11f_GET(r) ((((r).dsc_rx_dfe_tap11_abcd_gen2[0]) >> 8) & 0xf)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_ABCD_GEN2r_RXB_DFE_TAP11f_SET(r,f) (r).dsc_rx_dfe_tap11_abcd_gen2[0]=(((r).dsc_rx_dfe_tap11_abcd_gen2[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_ABCD_GEN2r_RXC_DFE_TAP11f_GET(r) ((((r).dsc_rx_dfe_tap11_abcd_gen2[0]) >> 4) & 0xf)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_ABCD_GEN2r_RXC_DFE_TAP11f_SET(r,f) (r).dsc_rx_dfe_tap11_abcd_gen2[0]=(((r).dsc_rx_dfe_tap11_abcd_gen2[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4)) | (15 << (16 + 4))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_ABCD_GEN2r_RXD_DFE_TAP11f_GET(r) (((r).dsc_rx_dfe_tap11_abcd_gen2[0]) & 0xf)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_ABCD_GEN2r_RXD_DFE_TAP11f_SET(r,f) (r).dsc_rx_dfe_tap11_abcd_gen2[0]=(((r).dsc_rx_dfe_tap11_abcd_gen2[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access DSC_RX_DFE_TAP11_ABCD_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_RX_DFE_TAP11_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_ABCD_GEN2r,(_r._dsc_rx_dfe_tap11_abcd_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_RX_DFE_TAP11_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_ABCD_GEN2r,(_r._dsc_rx_dfe_tap11_abcd_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_RX_DFE_TAP11_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_ABCD_GEN2r,(_r._dsc_rx_dfe_tap11_abcd_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_RX_DFE_TAP11_ABCD_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_ABCD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap11_abcd_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_RX_DFE_TAP11_ABCD_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_ABCD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap11_abcd_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_RX_DFE_TAP11_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_ABCD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap11_abcd_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP11_ABCD_GEN2r BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_ABCD_GEN2r
#define DSC_RX_DFE_TAP11_ABCD_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_ABCD_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_ABCD_GEN2r_t DSC_RX_DFE_TAP11_ABCD_GEN2r_t;
#define DSC_RX_DFE_TAP11_ABCD_GEN2r_CLR BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_ABCD_GEN2r_CLR
#define DSC_RX_DFE_TAP11_ABCD_GEN2r_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_ABCD_GEN2r_SET
#define DSC_RX_DFE_TAP11_ABCD_GEN2r_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_ABCD_GEN2r_GET
#define DSC_RX_DFE_TAP11_ABCD_GEN2r_RXA_DFE_TAP11f_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_ABCD_GEN2r_RXA_DFE_TAP11f_GET
#define DSC_RX_DFE_TAP11_ABCD_GEN2r_RXA_DFE_TAP11f_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_ABCD_GEN2r_RXA_DFE_TAP11f_SET
#define DSC_RX_DFE_TAP11_ABCD_GEN2r_RXB_DFE_TAP11f_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_ABCD_GEN2r_RXB_DFE_TAP11f_GET
#define DSC_RX_DFE_TAP11_ABCD_GEN2r_RXB_DFE_TAP11f_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_ABCD_GEN2r_RXB_DFE_TAP11f_SET
#define DSC_RX_DFE_TAP11_ABCD_GEN2r_RXC_DFE_TAP11f_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_ABCD_GEN2r_RXC_DFE_TAP11f_GET
#define DSC_RX_DFE_TAP11_ABCD_GEN2r_RXC_DFE_TAP11f_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_ABCD_GEN2r_RXC_DFE_TAP11f_SET
#define DSC_RX_DFE_TAP11_ABCD_GEN2r_RXD_DFE_TAP11f_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_ABCD_GEN2r_RXD_DFE_TAP11f_GET
#define DSC_RX_DFE_TAP11_ABCD_GEN2r_RXD_DFE_TAP11f_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_ABCD_GEN2r_RXD_DFE_TAP11f_SET
#define READ_DSC_RX_DFE_TAP11_ABCD_GEN2r BCMI_TSCF_XGXS_READ_DSC_RX_DFE_TAP11_ABCD_GEN2r
#define WRITE_DSC_RX_DFE_TAP11_ABCD_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_RX_DFE_TAP11_ABCD_GEN2r
#define MODIFY_DSC_RX_DFE_TAP11_ABCD_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_RX_DFE_TAP11_ABCD_GEN2r
#define READLN_DSC_RX_DFE_TAP11_ABCD_GEN2r BCMI_TSCF_XGXS_READLN_DSC_RX_DFE_TAP11_ABCD_GEN2r
#define WRITELN_DSC_RX_DFE_TAP11_ABCD_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_RX_DFE_TAP11_ABCD_GEN2r
#define WRITEALL_DSC_RX_DFE_TAP11_ABCD_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_RX_DFE_TAP11_ABCD_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_ABCD_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_RX_DFE_TAP12_ABCD_GEN2
 * BLOCKS:   DSC_AFE3
 * REGADDR:  0xd022
 * DEVAD:    1
 * DESC:     rx_dfe_tap12_abcd register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXD_DFE_TAP12    signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXC_DFE_TAP12    signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXB_DFE_TAP12    signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXA_DFE_TAP12    signed 2's complement +/-7, 1 LSB=150mV/64
 */
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP12_ABCD_GEN2r (0x0001d022 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP12_ABCD_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP12_ABCD_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_RX_DFE_TAP12_ABCD_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap12_abcd_gen2[1];
	uint32_t _dsc_rx_dfe_tap12_abcd_gen2;
} BCMI_TSCF_XGXS_DSC_RX_DFE_TAP12_ABCD_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP12_ABCD_GEN2r_CLR(r) (r).dsc_rx_dfe_tap12_abcd_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP12_ABCD_GEN2r_SET(r,d) (r).dsc_rx_dfe_tap12_abcd_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP12_ABCD_GEN2r_GET(r) (r).dsc_rx_dfe_tap12_abcd_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP12_ABCD_GEN2r_RXA_DFE_TAP12f_GET(r) ((((r).dsc_rx_dfe_tap12_abcd_gen2[0]) >> 12) & 0xf)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP12_ABCD_GEN2r_RXA_DFE_TAP12f_SET(r,f) (r).dsc_rx_dfe_tap12_abcd_gen2[0]=(((r).dsc_rx_dfe_tap12_abcd_gen2[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP12_ABCD_GEN2r_RXB_DFE_TAP12f_GET(r) ((((r).dsc_rx_dfe_tap12_abcd_gen2[0]) >> 8) & 0xf)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP12_ABCD_GEN2r_RXB_DFE_TAP12f_SET(r,f) (r).dsc_rx_dfe_tap12_abcd_gen2[0]=(((r).dsc_rx_dfe_tap12_abcd_gen2[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP12_ABCD_GEN2r_RXC_DFE_TAP12f_GET(r) ((((r).dsc_rx_dfe_tap12_abcd_gen2[0]) >> 4) & 0xf)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP12_ABCD_GEN2r_RXC_DFE_TAP12f_SET(r,f) (r).dsc_rx_dfe_tap12_abcd_gen2[0]=(((r).dsc_rx_dfe_tap12_abcd_gen2[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4)) | (15 << (16 + 4))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP12_ABCD_GEN2r_RXD_DFE_TAP12f_GET(r) (((r).dsc_rx_dfe_tap12_abcd_gen2[0]) & 0xf)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP12_ABCD_GEN2r_RXD_DFE_TAP12f_SET(r,f) (r).dsc_rx_dfe_tap12_abcd_gen2[0]=(((r).dsc_rx_dfe_tap12_abcd_gen2[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access DSC_RX_DFE_TAP12_ABCD_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_RX_DFE_TAP12_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP12_ABCD_GEN2r,(_r._dsc_rx_dfe_tap12_abcd_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_RX_DFE_TAP12_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP12_ABCD_GEN2r,(_r._dsc_rx_dfe_tap12_abcd_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_RX_DFE_TAP12_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP12_ABCD_GEN2r,(_r._dsc_rx_dfe_tap12_abcd_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_RX_DFE_TAP12_ABCD_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP12_ABCD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap12_abcd_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_RX_DFE_TAP12_ABCD_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP12_ABCD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap12_abcd_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_RX_DFE_TAP12_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP12_ABCD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap12_abcd_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP12_ABCD_GEN2r BCMI_TSCF_XGXS_DSC_RX_DFE_TAP12_ABCD_GEN2r
#define DSC_RX_DFE_TAP12_ABCD_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_RX_DFE_TAP12_ABCD_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_RX_DFE_TAP12_ABCD_GEN2r_t DSC_RX_DFE_TAP12_ABCD_GEN2r_t;
#define DSC_RX_DFE_TAP12_ABCD_GEN2r_CLR BCMI_TSCF_XGXS_DSC_RX_DFE_TAP12_ABCD_GEN2r_CLR
#define DSC_RX_DFE_TAP12_ABCD_GEN2r_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP12_ABCD_GEN2r_SET
#define DSC_RX_DFE_TAP12_ABCD_GEN2r_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP12_ABCD_GEN2r_GET
#define DSC_RX_DFE_TAP12_ABCD_GEN2r_RXA_DFE_TAP12f_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP12_ABCD_GEN2r_RXA_DFE_TAP12f_GET
#define DSC_RX_DFE_TAP12_ABCD_GEN2r_RXA_DFE_TAP12f_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP12_ABCD_GEN2r_RXA_DFE_TAP12f_SET
#define DSC_RX_DFE_TAP12_ABCD_GEN2r_RXB_DFE_TAP12f_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP12_ABCD_GEN2r_RXB_DFE_TAP12f_GET
#define DSC_RX_DFE_TAP12_ABCD_GEN2r_RXB_DFE_TAP12f_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP12_ABCD_GEN2r_RXB_DFE_TAP12f_SET
#define DSC_RX_DFE_TAP12_ABCD_GEN2r_RXC_DFE_TAP12f_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP12_ABCD_GEN2r_RXC_DFE_TAP12f_GET
#define DSC_RX_DFE_TAP12_ABCD_GEN2r_RXC_DFE_TAP12f_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP12_ABCD_GEN2r_RXC_DFE_TAP12f_SET
#define DSC_RX_DFE_TAP12_ABCD_GEN2r_RXD_DFE_TAP12f_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP12_ABCD_GEN2r_RXD_DFE_TAP12f_GET
#define DSC_RX_DFE_TAP12_ABCD_GEN2r_RXD_DFE_TAP12f_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP12_ABCD_GEN2r_RXD_DFE_TAP12f_SET
#define READ_DSC_RX_DFE_TAP12_ABCD_GEN2r BCMI_TSCF_XGXS_READ_DSC_RX_DFE_TAP12_ABCD_GEN2r
#define WRITE_DSC_RX_DFE_TAP12_ABCD_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_RX_DFE_TAP12_ABCD_GEN2r
#define MODIFY_DSC_RX_DFE_TAP12_ABCD_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_RX_DFE_TAP12_ABCD_GEN2r
#define READLN_DSC_RX_DFE_TAP12_ABCD_GEN2r BCMI_TSCF_XGXS_READLN_DSC_RX_DFE_TAP12_ABCD_GEN2r
#define WRITELN_DSC_RX_DFE_TAP12_ABCD_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_RX_DFE_TAP12_ABCD_GEN2r
#define WRITEALL_DSC_RX_DFE_TAP12_ABCD_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_RX_DFE_TAP12_ABCD_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_RX_DFE_TAP12_ABCD_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_RX_DFE_TAP13_ABCD_GEN2
 * BLOCKS:   DSC_AFE3
 * REGADDR:  0xd023
 * DEVAD:    1
 * DESC:     rx_dfe_tap13_abcd register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXD_DFE_TAP13    signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXC_DFE_TAP13    signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXB_DFE_TAP13    signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXA_DFE_TAP13    signed 2's complement +/-7, 1 LSB=150mV/64
 */
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_ABCD_GEN2r (0x0001d023 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_ABCD_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP13_ABCD_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_ABCD_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap13_abcd_gen2[1];
	uint32_t _dsc_rx_dfe_tap13_abcd_gen2;
} BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_ABCD_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_ABCD_GEN2r_CLR(r) (r).dsc_rx_dfe_tap13_abcd_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_ABCD_GEN2r_SET(r,d) (r).dsc_rx_dfe_tap13_abcd_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_ABCD_GEN2r_GET(r) (r).dsc_rx_dfe_tap13_abcd_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_ABCD_GEN2r_RXA_DFE_TAP13f_GET(r) ((((r).dsc_rx_dfe_tap13_abcd_gen2[0]) >> 12) & 0xf)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_ABCD_GEN2r_RXA_DFE_TAP13f_SET(r,f) (r).dsc_rx_dfe_tap13_abcd_gen2[0]=(((r).dsc_rx_dfe_tap13_abcd_gen2[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_ABCD_GEN2r_RXB_DFE_TAP13f_GET(r) ((((r).dsc_rx_dfe_tap13_abcd_gen2[0]) >> 8) & 0xf)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_ABCD_GEN2r_RXB_DFE_TAP13f_SET(r,f) (r).dsc_rx_dfe_tap13_abcd_gen2[0]=(((r).dsc_rx_dfe_tap13_abcd_gen2[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_ABCD_GEN2r_RXC_DFE_TAP13f_GET(r) ((((r).dsc_rx_dfe_tap13_abcd_gen2[0]) >> 4) & 0xf)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_ABCD_GEN2r_RXC_DFE_TAP13f_SET(r,f) (r).dsc_rx_dfe_tap13_abcd_gen2[0]=(((r).dsc_rx_dfe_tap13_abcd_gen2[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4)) | (15 << (16 + 4))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_ABCD_GEN2r_RXD_DFE_TAP13f_GET(r) (((r).dsc_rx_dfe_tap13_abcd_gen2[0]) & 0xf)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_ABCD_GEN2r_RXD_DFE_TAP13f_SET(r,f) (r).dsc_rx_dfe_tap13_abcd_gen2[0]=(((r).dsc_rx_dfe_tap13_abcd_gen2[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access DSC_RX_DFE_TAP13_ABCD_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_RX_DFE_TAP13_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_ABCD_GEN2r,(_r._dsc_rx_dfe_tap13_abcd_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_RX_DFE_TAP13_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_ABCD_GEN2r,(_r._dsc_rx_dfe_tap13_abcd_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_RX_DFE_TAP13_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_ABCD_GEN2r,(_r._dsc_rx_dfe_tap13_abcd_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_RX_DFE_TAP13_ABCD_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_ABCD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap13_abcd_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_RX_DFE_TAP13_ABCD_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_ABCD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap13_abcd_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_RX_DFE_TAP13_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_ABCD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap13_abcd_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP13_ABCD_GEN2r BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_ABCD_GEN2r
#define DSC_RX_DFE_TAP13_ABCD_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_ABCD_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_ABCD_GEN2r_t DSC_RX_DFE_TAP13_ABCD_GEN2r_t;
#define DSC_RX_DFE_TAP13_ABCD_GEN2r_CLR BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_ABCD_GEN2r_CLR
#define DSC_RX_DFE_TAP13_ABCD_GEN2r_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_ABCD_GEN2r_SET
#define DSC_RX_DFE_TAP13_ABCD_GEN2r_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_ABCD_GEN2r_GET
#define DSC_RX_DFE_TAP13_ABCD_GEN2r_RXA_DFE_TAP13f_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_ABCD_GEN2r_RXA_DFE_TAP13f_GET
#define DSC_RX_DFE_TAP13_ABCD_GEN2r_RXA_DFE_TAP13f_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_ABCD_GEN2r_RXA_DFE_TAP13f_SET
#define DSC_RX_DFE_TAP13_ABCD_GEN2r_RXB_DFE_TAP13f_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_ABCD_GEN2r_RXB_DFE_TAP13f_GET
#define DSC_RX_DFE_TAP13_ABCD_GEN2r_RXB_DFE_TAP13f_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_ABCD_GEN2r_RXB_DFE_TAP13f_SET
#define DSC_RX_DFE_TAP13_ABCD_GEN2r_RXC_DFE_TAP13f_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_ABCD_GEN2r_RXC_DFE_TAP13f_GET
#define DSC_RX_DFE_TAP13_ABCD_GEN2r_RXC_DFE_TAP13f_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_ABCD_GEN2r_RXC_DFE_TAP13f_SET
#define DSC_RX_DFE_TAP13_ABCD_GEN2r_RXD_DFE_TAP13f_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_ABCD_GEN2r_RXD_DFE_TAP13f_GET
#define DSC_RX_DFE_TAP13_ABCD_GEN2r_RXD_DFE_TAP13f_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_ABCD_GEN2r_RXD_DFE_TAP13f_SET
#define READ_DSC_RX_DFE_TAP13_ABCD_GEN2r BCMI_TSCF_XGXS_READ_DSC_RX_DFE_TAP13_ABCD_GEN2r
#define WRITE_DSC_RX_DFE_TAP13_ABCD_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_RX_DFE_TAP13_ABCD_GEN2r
#define MODIFY_DSC_RX_DFE_TAP13_ABCD_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_RX_DFE_TAP13_ABCD_GEN2r
#define READLN_DSC_RX_DFE_TAP13_ABCD_GEN2r BCMI_TSCF_XGXS_READLN_DSC_RX_DFE_TAP13_ABCD_GEN2r
#define WRITELN_DSC_RX_DFE_TAP13_ABCD_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_RX_DFE_TAP13_ABCD_GEN2r
#define WRITEALL_DSC_RX_DFE_TAP13_ABCD_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_RX_DFE_TAP13_ABCD_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_ABCD_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_RX_DFE_TAP14_ABCD_GEN2
 * BLOCKS:   DSC_AFE3
 * REGADDR:  0xd024
 * DEVAD:    1
 * DESC:     rx_dfe_tap14_abcd register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXD_DFE_TAP14    signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXC_DFE_TAP14    signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXB_DFE_TAP14    signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXA_DFE_TAP14    signed 2's complement +/-7, 1 LSB=150mV/64
 */
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP14_ABCD_GEN2r (0x0001d024 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP14_ABCD_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP14_ABCD_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_RX_DFE_TAP14_ABCD_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap14_abcd_gen2[1];
	uint32_t _dsc_rx_dfe_tap14_abcd_gen2;
} BCMI_TSCF_XGXS_DSC_RX_DFE_TAP14_ABCD_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP14_ABCD_GEN2r_CLR(r) (r).dsc_rx_dfe_tap14_abcd_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP14_ABCD_GEN2r_SET(r,d) (r).dsc_rx_dfe_tap14_abcd_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP14_ABCD_GEN2r_GET(r) (r).dsc_rx_dfe_tap14_abcd_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP14_ABCD_GEN2r_RXA_DFE_TAP14f_GET(r) ((((r).dsc_rx_dfe_tap14_abcd_gen2[0]) >> 12) & 0xf)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP14_ABCD_GEN2r_RXA_DFE_TAP14f_SET(r,f) (r).dsc_rx_dfe_tap14_abcd_gen2[0]=(((r).dsc_rx_dfe_tap14_abcd_gen2[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP14_ABCD_GEN2r_RXB_DFE_TAP14f_GET(r) ((((r).dsc_rx_dfe_tap14_abcd_gen2[0]) >> 8) & 0xf)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP14_ABCD_GEN2r_RXB_DFE_TAP14f_SET(r,f) (r).dsc_rx_dfe_tap14_abcd_gen2[0]=(((r).dsc_rx_dfe_tap14_abcd_gen2[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP14_ABCD_GEN2r_RXC_DFE_TAP14f_GET(r) ((((r).dsc_rx_dfe_tap14_abcd_gen2[0]) >> 4) & 0xf)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP14_ABCD_GEN2r_RXC_DFE_TAP14f_SET(r,f) (r).dsc_rx_dfe_tap14_abcd_gen2[0]=(((r).dsc_rx_dfe_tap14_abcd_gen2[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4)) | (15 << (16 + 4))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP14_ABCD_GEN2r_RXD_DFE_TAP14f_GET(r) (((r).dsc_rx_dfe_tap14_abcd_gen2[0]) & 0xf)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP14_ABCD_GEN2r_RXD_DFE_TAP14f_SET(r,f) (r).dsc_rx_dfe_tap14_abcd_gen2[0]=(((r).dsc_rx_dfe_tap14_abcd_gen2[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access DSC_RX_DFE_TAP14_ABCD_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_RX_DFE_TAP14_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP14_ABCD_GEN2r,(_r._dsc_rx_dfe_tap14_abcd_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_RX_DFE_TAP14_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP14_ABCD_GEN2r,(_r._dsc_rx_dfe_tap14_abcd_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_RX_DFE_TAP14_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP14_ABCD_GEN2r,(_r._dsc_rx_dfe_tap14_abcd_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_RX_DFE_TAP14_ABCD_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP14_ABCD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap14_abcd_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_RX_DFE_TAP14_ABCD_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP14_ABCD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap14_abcd_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_RX_DFE_TAP14_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP14_ABCD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap14_abcd_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP14_ABCD_GEN2r BCMI_TSCF_XGXS_DSC_RX_DFE_TAP14_ABCD_GEN2r
#define DSC_RX_DFE_TAP14_ABCD_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_RX_DFE_TAP14_ABCD_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_RX_DFE_TAP14_ABCD_GEN2r_t DSC_RX_DFE_TAP14_ABCD_GEN2r_t;
#define DSC_RX_DFE_TAP14_ABCD_GEN2r_CLR BCMI_TSCF_XGXS_DSC_RX_DFE_TAP14_ABCD_GEN2r_CLR
#define DSC_RX_DFE_TAP14_ABCD_GEN2r_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP14_ABCD_GEN2r_SET
#define DSC_RX_DFE_TAP14_ABCD_GEN2r_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP14_ABCD_GEN2r_GET
#define DSC_RX_DFE_TAP14_ABCD_GEN2r_RXA_DFE_TAP14f_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP14_ABCD_GEN2r_RXA_DFE_TAP14f_GET
#define DSC_RX_DFE_TAP14_ABCD_GEN2r_RXA_DFE_TAP14f_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP14_ABCD_GEN2r_RXA_DFE_TAP14f_SET
#define DSC_RX_DFE_TAP14_ABCD_GEN2r_RXB_DFE_TAP14f_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP14_ABCD_GEN2r_RXB_DFE_TAP14f_GET
#define DSC_RX_DFE_TAP14_ABCD_GEN2r_RXB_DFE_TAP14f_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP14_ABCD_GEN2r_RXB_DFE_TAP14f_SET
#define DSC_RX_DFE_TAP14_ABCD_GEN2r_RXC_DFE_TAP14f_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP14_ABCD_GEN2r_RXC_DFE_TAP14f_GET
#define DSC_RX_DFE_TAP14_ABCD_GEN2r_RXC_DFE_TAP14f_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP14_ABCD_GEN2r_RXC_DFE_TAP14f_SET
#define DSC_RX_DFE_TAP14_ABCD_GEN2r_RXD_DFE_TAP14f_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP14_ABCD_GEN2r_RXD_DFE_TAP14f_GET
#define DSC_RX_DFE_TAP14_ABCD_GEN2r_RXD_DFE_TAP14f_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP14_ABCD_GEN2r_RXD_DFE_TAP14f_SET
#define READ_DSC_RX_DFE_TAP14_ABCD_GEN2r BCMI_TSCF_XGXS_READ_DSC_RX_DFE_TAP14_ABCD_GEN2r
#define WRITE_DSC_RX_DFE_TAP14_ABCD_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_RX_DFE_TAP14_ABCD_GEN2r
#define MODIFY_DSC_RX_DFE_TAP14_ABCD_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_RX_DFE_TAP14_ABCD_GEN2r
#define READLN_DSC_RX_DFE_TAP14_ABCD_GEN2r BCMI_TSCF_XGXS_READLN_DSC_RX_DFE_TAP14_ABCD_GEN2r
#define WRITELN_DSC_RX_DFE_TAP14_ABCD_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_RX_DFE_TAP14_ABCD_GEN2r
#define WRITEALL_DSC_RX_DFE_TAP14_ABCD_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_RX_DFE_TAP14_ABCD_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_RX_DFE_TAP14_ABCD_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2
 * BLOCKS:   DSC_AFE3
 * REGADDR:  0xd025
 * DEVAD:    1
 * DESC:     rx_dfe_tap7_8_mux_abcd register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXD_DFE_TAP8_MUX tapN cancels ISI from location (N + 4*value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXD_DFE_TAP7_MUX tapN cancels ISI from location (N + 4*value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXC_DFE_TAP8_MUX tapN cancels ISI from location (N + 4*value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXC_DFE_TAP7_MUX tapN cancels ISI from location (N + 4*value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXB_DFE_TAP8_MUX tapN cancels ISI from location (N + 4*value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXB_DFE_TAP7_MUX tapN cancels ISI from location (N + 4*value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXA_DFE_TAP8_MUX tapN cancels ISI from location (N + 4*value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXA_DFE_TAP7_MUX tapN cancels ISI from location (N + 4*value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 */
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r (0x0001d025 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap7_8_mux_abcd_gen2[1];
	uint32_t _dsc_rx_dfe_tap7_8_mux_abcd_gen2;
} BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_CLR(r) (r).dsc_rx_dfe_tap7_8_mux_abcd_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_SET(r,d) (r).dsc_rx_dfe_tap7_8_mux_abcd_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_GET(r) (r).dsc_rx_dfe_tap7_8_mux_abcd_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_RXA_DFE_TAP7_MUXf_GET(r) ((((r).dsc_rx_dfe_tap7_8_mux_abcd_gen2[0]) >> 14) & 0x3)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_RXA_DFE_TAP7_MUXf_SET(r,f) (r).dsc_rx_dfe_tap7_8_mux_abcd_gen2[0]=(((r).dsc_rx_dfe_tap7_8_mux_abcd_gen2[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_RXA_DFE_TAP8_MUXf_GET(r) ((((r).dsc_rx_dfe_tap7_8_mux_abcd_gen2[0]) >> 12) & 0x3)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_RXA_DFE_TAP8_MUXf_SET(r,f) (r).dsc_rx_dfe_tap7_8_mux_abcd_gen2[0]=(((r).dsc_rx_dfe_tap7_8_mux_abcd_gen2[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12)) | (3 << (16 + 12))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_RXB_DFE_TAP7_MUXf_GET(r) ((((r).dsc_rx_dfe_tap7_8_mux_abcd_gen2[0]) >> 10) & 0x3)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_RXB_DFE_TAP7_MUXf_SET(r,f) (r).dsc_rx_dfe_tap7_8_mux_abcd_gen2[0]=(((r).dsc_rx_dfe_tap7_8_mux_abcd_gen2[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10)) | (3 << (16 + 10))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_RXB_DFE_TAP8_MUXf_GET(r) ((((r).dsc_rx_dfe_tap7_8_mux_abcd_gen2[0]) >> 8) & 0x3)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_RXB_DFE_TAP8_MUXf_SET(r,f) (r).dsc_rx_dfe_tap7_8_mux_abcd_gen2[0]=(((r).dsc_rx_dfe_tap7_8_mux_abcd_gen2[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_RXC_DFE_TAP7_MUXf_GET(r) ((((r).dsc_rx_dfe_tap7_8_mux_abcd_gen2[0]) >> 6) & 0x3)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_RXC_DFE_TAP7_MUXf_SET(r,f) (r).dsc_rx_dfe_tap7_8_mux_abcd_gen2[0]=(((r).dsc_rx_dfe_tap7_8_mux_abcd_gen2[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6)) | (3 << (16 + 6))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_RXC_DFE_TAP8_MUXf_GET(r) ((((r).dsc_rx_dfe_tap7_8_mux_abcd_gen2[0]) >> 4) & 0x3)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_RXC_DFE_TAP8_MUXf_SET(r,f) (r).dsc_rx_dfe_tap7_8_mux_abcd_gen2[0]=(((r).dsc_rx_dfe_tap7_8_mux_abcd_gen2[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_RXD_DFE_TAP7_MUXf_GET(r) ((((r).dsc_rx_dfe_tap7_8_mux_abcd_gen2[0]) >> 2) & 0x3)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_RXD_DFE_TAP7_MUXf_SET(r,f) (r).dsc_rx_dfe_tap7_8_mux_abcd_gen2[0]=(((r).dsc_rx_dfe_tap7_8_mux_abcd_gen2[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2)) | (3 << (16 + 2))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_RXD_DFE_TAP8_MUXf_GET(r) (((r).dsc_rx_dfe_tap7_8_mux_abcd_gen2[0]) & 0x3)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_RXD_DFE_TAP8_MUXf_SET(r,f) (r).dsc_rx_dfe_tap7_8_mux_abcd_gen2[0]=(((r).dsc_rx_dfe_tap7_8_mux_abcd_gen2[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r,(_r._dsc_rx_dfe_tap7_8_mux_abcd_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r,(_r._dsc_rx_dfe_tap7_8_mux_abcd_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r,(_r._dsc_rx_dfe_tap7_8_mux_abcd_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap7_8_mux_abcd_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap7_8_mux_abcd_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap7_8_mux_abcd_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r
#define DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_t DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_t;
#define DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_CLR BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_CLR
#define DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_SET
#define DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_GET
#define DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_RXA_DFE_TAP7_MUXf_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_RXA_DFE_TAP7_MUXf_GET
#define DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_RXA_DFE_TAP7_MUXf_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_RXA_DFE_TAP7_MUXf_SET
#define DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_RXA_DFE_TAP8_MUXf_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_RXA_DFE_TAP8_MUXf_GET
#define DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_RXA_DFE_TAP8_MUXf_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_RXA_DFE_TAP8_MUXf_SET
#define DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_RXB_DFE_TAP7_MUXf_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_RXB_DFE_TAP7_MUXf_GET
#define DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_RXB_DFE_TAP7_MUXf_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_RXB_DFE_TAP7_MUXf_SET
#define DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_RXB_DFE_TAP8_MUXf_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_RXB_DFE_TAP8_MUXf_GET
#define DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_RXB_DFE_TAP8_MUXf_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_RXB_DFE_TAP8_MUXf_SET
#define DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_RXC_DFE_TAP7_MUXf_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_RXC_DFE_TAP7_MUXf_GET
#define DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_RXC_DFE_TAP7_MUXf_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_RXC_DFE_TAP7_MUXf_SET
#define DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_RXC_DFE_TAP8_MUXf_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_RXC_DFE_TAP8_MUXf_GET
#define DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_RXC_DFE_TAP8_MUXf_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_RXC_DFE_TAP8_MUXf_SET
#define DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_RXD_DFE_TAP7_MUXf_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_RXD_DFE_TAP7_MUXf_GET
#define DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_RXD_DFE_TAP7_MUXf_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_RXD_DFE_TAP7_MUXf_SET
#define DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_RXD_DFE_TAP8_MUXf_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_RXD_DFE_TAP8_MUXf_GET
#define DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_RXD_DFE_TAP8_MUXf_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r_RXD_DFE_TAP8_MUXf_SET
#define READ_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r BCMI_TSCF_XGXS_READ_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r
#define WRITE_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r
#define MODIFY_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r
#define READLN_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r BCMI_TSCF_XGXS_READLN_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r
#define WRITELN_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r
#define WRITEALL_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCD_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2
 * BLOCKS:   DSC_AFE3
 * REGADDR:  0xd026
 * DEVAD:    1
 * DESC:     rx_dfe_tap9_10_mux_abcd register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXD_DFE_TAP10_MUX tapN cancels ISI from location (N + 4*value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXD_DFE_TAP9_MUX tapN cancels ISI from location (N + 4*value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXC_DFE_TAP10_MUX tapN cancels ISI from location (N + 4*value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXC_DFE_TAP9_MUX tapN cancels ISI from location (N + 4*value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXB_DFE_TAP10_MUX tapN cancels ISI from location (N + 4*value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXB_DFE_TAP9_MUX tapN cancels ISI from location (N + 4*value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXA_DFE_TAP10_MUX tapN cancels ISI from location (N + 4*value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXA_DFE_TAP9_MUX tapN cancels ISI from location (N + 4*value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 */
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r (0x0001d026 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap9_10_mux_abcd_gen2[1];
	uint32_t _dsc_rx_dfe_tap9_10_mux_abcd_gen2;
} BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_CLR(r) (r).dsc_rx_dfe_tap9_10_mux_abcd_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_SET(r,d) (r).dsc_rx_dfe_tap9_10_mux_abcd_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_GET(r) (r).dsc_rx_dfe_tap9_10_mux_abcd_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_RXA_DFE_TAP9_MUXf_GET(r) ((((r).dsc_rx_dfe_tap9_10_mux_abcd_gen2[0]) >> 14) & 0x3)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_RXA_DFE_TAP9_MUXf_SET(r,f) (r).dsc_rx_dfe_tap9_10_mux_abcd_gen2[0]=(((r).dsc_rx_dfe_tap9_10_mux_abcd_gen2[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_RXA_DFE_TAP10_MUXf_GET(r) ((((r).dsc_rx_dfe_tap9_10_mux_abcd_gen2[0]) >> 12) & 0x3)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_RXA_DFE_TAP10_MUXf_SET(r,f) (r).dsc_rx_dfe_tap9_10_mux_abcd_gen2[0]=(((r).dsc_rx_dfe_tap9_10_mux_abcd_gen2[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12)) | (3 << (16 + 12))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_RXB_DFE_TAP9_MUXf_GET(r) ((((r).dsc_rx_dfe_tap9_10_mux_abcd_gen2[0]) >> 10) & 0x3)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_RXB_DFE_TAP9_MUXf_SET(r,f) (r).dsc_rx_dfe_tap9_10_mux_abcd_gen2[0]=(((r).dsc_rx_dfe_tap9_10_mux_abcd_gen2[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10)) | (3 << (16 + 10))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_RXB_DFE_TAP10_MUXf_GET(r) ((((r).dsc_rx_dfe_tap9_10_mux_abcd_gen2[0]) >> 8) & 0x3)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_RXB_DFE_TAP10_MUXf_SET(r,f) (r).dsc_rx_dfe_tap9_10_mux_abcd_gen2[0]=(((r).dsc_rx_dfe_tap9_10_mux_abcd_gen2[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_RXC_DFE_TAP9_MUXf_GET(r) ((((r).dsc_rx_dfe_tap9_10_mux_abcd_gen2[0]) >> 6) & 0x3)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_RXC_DFE_TAP9_MUXf_SET(r,f) (r).dsc_rx_dfe_tap9_10_mux_abcd_gen2[0]=(((r).dsc_rx_dfe_tap9_10_mux_abcd_gen2[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6)) | (3 << (16 + 6))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_RXC_DFE_TAP10_MUXf_GET(r) ((((r).dsc_rx_dfe_tap9_10_mux_abcd_gen2[0]) >> 4) & 0x3)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_RXC_DFE_TAP10_MUXf_SET(r,f) (r).dsc_rx_dfe_tap9_10_mux_abcd_gen2[0]=(((r).dsc_rx_dfe_tap9_10_mux_abcd_gen2[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_RXD_DFE_TAP9_MUXf_GET(r) ((((r).dsc_rx_dfe_tap9_10_mux_abcd_gen2[0]) >> 2) & 0x3)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_RXD_DFE_TAP9_MUXf_SET(r,f) (r).dsc_rx_dfe_tap9_10_mux_abcd_gen2[0]=(((r).dsc_rx_dfe_tap9_10_mux_abcd_gen2[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2)) | (3 << (16 + 2))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_RXD_DFE_TAP10_MUXf_GET(r) (((r).dsc_rx_dfe_tap9_10_mux_abcd_gen2[0]) & 0x3)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_RXD_DFE_TAP10_MUXf_SET(r,f) (r).dsc_rx_dfe_tap9_10_mux_abcd_gen2[0]=(((r).dsc_rx_dfe_tap9_10_mux_abcd_gen2[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r,(_r._dsc_rx_dfe_tap9_10_mux_abcd_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r,(_r._dsc_rx_dfe_tap9_10_mux_abcd_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r,(_r._dsc_rx_dfe_tap9_10_mux_abcd_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap9_10_mux_abcd_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap9_10_mux_abcd_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap9_10_mux_abcd_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r
#define DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_t DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_t;
#define DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_CLR BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_CLR
#define DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_SET
#define DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_GET
#define DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_RXA_DFE_TAP9_MUXf_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_RXA_DFE_TAP9_MUXf_GET
#define DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_RXA_DFE_TAP9_MUXf_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_RXA_DFE_TAP9_MUXf_SET
#define DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_RXA_DFE_TAP10_MUXf_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_RXA_DFE_TAP10_MUXf_GET
#define DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_RXA_DFE_TAP10_MUXf_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_RXA_DFE_TAP10_MUXf_SET
#define DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_RXB_DFE_TAP9_MUXf_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_RXB_DFE_TAP9_MUXf_GET
#define DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_RXB_DFE_TAP9_MUXf_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_RXB_DFE_TAP9_MUXf_SET
#define DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_RXB_DFE_TAP10_MUXf_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_RXB_DFE_TAP10_MUXf_GET
#define DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_RXB_DFE_TAP10_MUXf_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_RXB_DFE_TAP10_MUXf_SET
#define DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_RXC_DFE_TAP9_MUXf_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_RXC_DFE_TAP9_MUXf_GET
#define DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_RXC_DFE_TAP9_MUXf_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_RXC_DFE_TAP9_MUXf_SET
#define DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_RXC_DFE_TAP10_MUXf_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_RXC_DFE_TAP10_MUXf_GET
#define DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_RXC_DFE_TAP10_MUXf_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_RXC_DFE_TAP10_MUXf_SET
#define DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_RXD_DFE_TAP9_MUXf_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_RXD_DFE_TAP9_MUXf_GET
#define DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_RXD_DFE_TAP9_MUXf_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_RXD_DFE_TAP9_MUXf_SET
#define DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_RXD_DFE_TAP10_MUXf_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_RXD_DFE_TAP10_MUXf_GET
#define DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_RXD_DFE_TAP10_MUXf_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r_RXD_DFE_TAP10_MUXf_SET
#define READ_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r BCMI_TSCF_XGXS_READ_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r
#define WRITE_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r
#define MODIFY_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r
#define READLN_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r BCMI_TSCF_XGXS_READLN_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r
#define WRITELN_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r
#define WRITEALL_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCD_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2
 * BLOCKS:   DSC_AFE3
 * REGADDR:  0xd027
 * DEVAD:    1
 * DESC:     rx_dfe_tap11_12_mux_abcd register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXD_DFE_TAP12_MUX tapN cancels ISI from location (N + 4*value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXD_DFE_TAP11_MUX tapN cancels ISI from location (N + 4*value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXC_DFE_TAP12_MUX tapN cancels ISI from location (N + 4*value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXC_DFE_TAP11_MUX tapN cancels ISI from location (N + 4*value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXB_DFE_TAP12_MUX tapN cancels ISI from location (N + 4*value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXB_DFE_TAP11_MUX tapN cancels ISI from location (N + 4*value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXA_DFE_TAP12_MUX tapN cancels ISI from location (N + 4*value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXA_DFE_TAP11_MUX tapN cancels ISI from location (N + 4*value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 */
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r (0x0001d027 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap11_12_mux_abcd_gen2[1];
	uint32_t _dsc_rx_dfe_tap11_12_mux_abcd_gen2;
} BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_CLR(r) (r).dsc_rx_dfe_tap11_12_mux_abcd_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_SET(r,d) (r).dsc_rx_dfe_tap11_12_mux_abcd_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_GET(r) (r).dsc_rx_dfe_tap11_12_mux_abcd_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_RXA_DFE_TAP11_MUXf_GET(r) ((((r).dsc_rx_dfe_tap11_12_mux_abcd_gen2[0]) >> 14) & 0x3)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_RXA_DFE_TAP11_MUXf_SET(r,f) (r).dsc_rx_dfe_tap11_12_mux_abcd_gen2[0]=(((r).dsc_rx_dfe_tap11_12_mux_abcd_gen2[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_RXA_DFE_TAP12_MUXf_GET(r) ((((r).dsc_rx_dfe_tap11_12_mux_abcd_gen2[0]) >> 12) & 0x3)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_RXA_DFE_TAP12_MUXf_SET(r,f) (r).dsc_rx_dfe_tap11_12_mux_abcd_gen2[0]=(((r).dsc_rx_dfe_tap11_12_mux_abcd_gen2[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12)) | (3 << (16 + 12))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_RXB_DFE_TAP11_MUXf_GET(r) ((((r).dsc_rx_dfe_tap11_12_mux_abcd_gen2[0]) >> 10) & 0x3)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_RXB_DFE_TAP11_MUXf_SET(r,f) (r).dsc_rx_dfe_tap11_12_mux_abcd_gen2[0]=(((r).dsc_rx_dfe_tap11_12_mux_abcd_gen2[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10)) | (3 << (16 + 10))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_RXB_DFE_TAP12_MUXf_GET(r) ((((r).dsc_rx_dfe_tap11_12_mux_abcd_gen2[0]) >> 8) & 0x3)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_RXB_DFE_TAP12_MUXf_SET(r,f) (r).dsc_rx_dfe_tap11_12_mux_abcd_gen2[0]=(((r).dsc_rx_dfe_tap11_12_mux_abcd_gen2[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_RXC_DFE_TAP11_MUXf_GET(r) ((((r).dsc_rx_dfe_tap11_12_mux_abcd_gen2[0]) >> 6) & 0x3)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_RXC_DFE_TAP11_MUXf_SET(r,f) (r).dsc_rx_dfe_tap11_12_mux_abcd_gen2[0]=(((r).dsc_rx_dfe_tap11_12_mux_abcd_gen2[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6)) | (3 << (16 + 6))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_RXC_DFE_TAP12_MUXf_GET(r) ((((r).dsc_rx_dfe_tap11_12_mux_abcd_gen2[0]) >> 4) & 0x3)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_RXC_DFE_TAP12_MUXf_SET(r,f) (r).dsc_rx_dfe_tap11_12_mux_abcd_gen2[0]=(((r).dsc_rx_dfe_tap11_12_mux_abcd_gen2[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_RXD_DFE_TAP11_MUXf_GET(r) ((((r).dsc_rx_dfe_tap11_12_mux_abcd_gen2[0]) >> 2) & 0x3)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_RXD_DFE_TAP11_MUXf_SET(r,f) (r).dsc_rx_dfe_tap11_12_mux_abcd_gen2[0]=(((r).dsc_rx_dfe_tap11_12_mux_abcd_gen2[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2)) | (3 << (16 + 2))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_RXD_DFE_TAP12_MUXf_GET(r) (((r).dsc_rx_dfe_tap11_12_mux_abcd_gen2[0]) & 0x3)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_RXD_DFE_TAP12_MUXf_SET(r,f) (r).dsc_rx_dfe_tap11_12_mux_abcd_gen2[0]=(((r).dsc_rx_dfe_tap11_12_mux_abcd_gen2[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r,(_r._dsc_rx_dfe_tap11_12_mux_abcd_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r,(_r._dsc_rx_dfe_tap11_12_mux_abcd_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r,(_r._dsc_rx_dfe_tap11_12_mux_abcd_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap11_12_mux_abcd_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap11_12_mux_abcd_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap11_12_mux_abcd_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r
#define DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_t DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_t;
#define DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_CLR BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_CLR
#define DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_SET
#define DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_GET
#define DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_RXA_DFE_TAP11_MUXf_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_RXA_DFE_TAP11_MUXf_GET
#define DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_RXA_DFE_TAP11_MUXf_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_RXA_DFE_TAP11_MUXf_SET
#define DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_RXA_DFE_TAP12_MUXf_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_RXA_DFE_TAP12_MUXf_GET
#define DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_RXA_DFE_TAP12_MUXf_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_RXA_DFE_TAP12_MUXf_SET
#define DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_RXB_DFE_TAP11_MUXf_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_RXB_DFE_TAP11_MUXf_GET
#define DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_RXB_DFE_TAP11_MUXf_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_RXB_DFE_TAP11_MUXf_SET
#define DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_RXB_DFE_TAP12_MUXf_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_RXB_DFE_TAP12_MUXf_GET
#define DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_RXB_DFE_TAP12_MUXf_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_RXB_DFE_TAP12_MUXf_SET
#define DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_RXC_DFE_TAP11_MUXf_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_RXC_DFE_TAP11_MUXf_GET
#define DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_RXC_DFE_TAP11_MUXf_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_RXC_DFE_TAP11_MUXf_SET
#define DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_RXC_DFE_TAP12_MUXf_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_RXC_DFE_TAP12_MUXf_GET
#define DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_RXC_DFE_TAP12_MUXf_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_RXC_DFE_TAP12_MUXf_SET
#define DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_RXD_DFE_TAP11_MUXf_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_RXD_DFE_TAP11_MUXf_GET
#define DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_RXD_DFE_TAP11_MUXf_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_RXD_DFE_TAP11_MUXf_SET
#define DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_RXD_DFE_TAP12_MUXf_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_RXD_DFE_TAP12_MUXf_GET
#define DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_RXD_DFE_TAP12_MUXf_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r_RXD_DFE_TAP12_MUXf_SET
#define READ_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r BCMI_TSCF_XGXS_READ_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r
#define WRITE_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r
#define MODIFY_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r
#define READLN_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r BCMI_TSCF_XGXS_READLN_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r
#define WRITELN_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r
#define WRITEALL_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCD_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2
 * BLOCKS:   DSC_AFE3
 * REGADDR:  0xd028
 * DEVAD:    1
 * DESC:     rx_dfe_tap13_14_mux_abcd register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXD_DFE_TAP14_MUX tapN cancels ISI from location (N + 4*value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXD_DFE_TAP13_MUX tapN cancels ISI from location (N + 4*value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXC_DFE_TAP14_MUX tapN cancels ISI from location (N + 4*value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXC_DFE_TAP13_MUX tapN cancels ISI from location (N + 4*value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXB_DFE_TAP14_MUX tapN cancels ISI from location (N + 4*value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXB_DFE_TAP13_MUX tapN cancels ISI from location (N + 4*value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXA_DFE_TAP14_MUX tapN cancels ISI from location (N + 4*value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXA_DFE_TAP13_MUX tapN cancels ISI from location (N + 4*value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 */
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r (0x0001d028 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap13_14_mux_abcd_gen2[1];
	uint32_t _dsc_rx_dfe_tap13_14_mux_abcd_gen2;
} BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_CLR(r) (r).dsc_rx_dfe_tap13_14_mux_abcd_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_SET(r,d) (r).dsc_rx_dfe_tap13_14_mux_abcd_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_GET(r) (r).dsc_rx_dfe_tap13_14_mux_abcd_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_RXA_DFE_TAP13_MUXf_GET(r) ((((r).dsc_rx_dfe_tap13_14_mux_abcd_gen2[0]) >> 14) & 0x3)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_RXA_DFE_TAP13_MUXf_SET(r,f) (r).dsc_rx_dfe_tap13_14_mux_abcd_gen2[0]=(((r).dsc_rx_dfe_tap13_14_mux_abcd_gen2[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_RXA_DFE_TAP14_MUXf_GET(r) ((((r).dsc_rx_dfe_tap13_14_mux_abcd_gen2[0]) >> 12) & 0x3)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_RXA_DFE_TAP14_MUXf_SET(r,f) (r).dsc_rx_dfe_tap13_14_mux_abcd_gen2[0]=(((r).dsc_rx_dfe_tap13_14_mux_abcd_gen2[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12)) | (3 << (16 + 12))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_RXB_DFE_TAP13_MUXf_GET(r) ((((r).dsc_rx_dfe_tap13_14_mux_abcd_gen2[0]) >> 10) & 0x3)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_RXB_DFE_TAP13_MUXf_SET(r,f) (r).dsc_rx_dfe_tap13_14_mux_abcd_gen2[0]=(((r).dsc_rx_dfe_tap13_14_mux_abcd_gen2[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10)) | (3 << (16 + 10))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_RXB_DFE_TAP14_MUXf_GET(r) ((((r).dsc_rx_dfe_tap13_14_mux_abcd_gen2[0]) >> 8) & 0x3)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_RXB_DFE_TAP14_MUXf_SET(r,f) (r).dsc_rx_dfe_tap13_14_mux_abcd_gen2[0]=(((r).dsc_rx_dfe_tap13_14_mux_abcd_gen2[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_RXC_DFE_TAP13_MUXf_GET(r) ((((r).dsc_rx_dfe_tap13_14_mux_abcd_gen2[0]) >> 6) & 0x3)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_RXC_DFE_TAP13_MUXf_SET(r,f) (r).dsc_rx_dfe_tap13_14_mux_abcd_gen2[0]=(((r).dsc_rx_dfe_tap13_14_mux_abcd_gen2[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6)) | (3 << (16 + 6))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_RXC_DFE_TAP14_MUXf_GET(r) ((((r).dsc_rx_dfe_tap13_14_mux_abcd_gen2[0]) >> 4) & 0x3)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_RXC_DFE_TAP14_MUXf_SET(r,f) (r).dsc_rx_dfe_tap13_14_mux_abcd_gen2[0]=(((r).dsc_rx_dfe_tap13_14_mux_abcd_gen2[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_RXD_DFE_TAP13_MUXf_GET(r) ((((r).dsc_rx_dfe_tap13_14_mux_abcd_gen2[0]) >> 2) & 0x3)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_RXD_DFE_TAP13_MUXf_SET(r,f) (r).dsc_rx_dfe_tap13_14_mux_abcd_gen2[0]=(((r).dsc_rx_dfe_tap13_14_mux_abcd_gen2[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2)) | (3 << (16 + 2))
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_RXD_DFE_TAP14_MUXf_GET(r) (((r).dsc_rx_dfe_tap13_14_mux_abcd_gen2[0]) & 0x3)
#define BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_RXD_DFE_TAP14_MUXf_SET(r,f) (r).dsc_rx_dfe_tap13_14_mux_abcd_gen2[0]=(((r).dsc_rx_dfe_tap13_14_mux_abcd_gen2[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r,(_r._dsc_rx_dfe_tap13_14_mux_abcd_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r,(_r._dsc_rx_dfe_tap13_14_mux_abcd_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r,(_r._dsc_rx_dfe_tap13_14_mux_abcd_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap13_14_mux_abcd_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap13_14_mux_abcd_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap13_14_mux_abcd_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r
#define DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_t DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_t;
#define DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_CLR BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_CLR
#define DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_SET
#define DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_GET
#define DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_RXA_DFE_TAP13_MUXf_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_RXA_DFE_TAP13_MUXf_GET
#define DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_RXA_DFE_TAP13_MUXf_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_RXA_DFE_TAP13_MUXf_SET
#define DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_RXA_DFE_TAP14_MUXf_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_RXA_DFE_TAP14_MUXf_GET
#define DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_RXA_DFE_TAP14_MUXf_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_RXA_DFE_TAP14_MUXf_SET
#define DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_RXB_DFE_TAP13_MUXf_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_RXB_DFE_TAP13_MUXf_GET
#define DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_RXB_DFE_TAP13_MUXf_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_RXB_DFE_TAP13_MUXf_SET
#define DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_RXB_DFE_TAP14_MUXf_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_RXB_DFE_TAP14_MUXf_GET
#define DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_RXB_DFE_TAP14_MUXf_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_RXB_DFE_TAP14_MUXf_SET
#define DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_RXC_DFE_TAP13_MUXf_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_RXC_DFE_TAP13_MUXf_GET
#define DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_RXC_DFE_TAP13_MUXf_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_RXC_DFE_TAP13_MUXf_SET
#define DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_RXC_DFE_TAP14_MUXf_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_RXC_DFE_TAP14_MUXf_GET
#define DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_RXC_DFE_TAP14_MUXf_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_RXC_DFE_TAP14_MUXf_SET
#define DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_RXD_DFE_TAP13_MUXf_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_RXD_DFE_TAP13_MUXf_GET
#define DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_RXD_DFE_TAP13_MUXf_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_RXD_DFE_TAP13_MUXf_SET
#define DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_RXD_DFE_TAP14_MUXf_GET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_RXD_DFE_TAP14_MUXf_GET
#define DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_RXD_DFE_TAP14_MUXf_SET BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r_RXD_DFE_TAP14_MUXf_SET
#define READ_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r BCMI_TSCF_XGXS_READ_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r
#define WRITE_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r
#define MODIFY_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r
#define READLN_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r BCMI_TSCF_XGXS_READLN_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r
#define WRITELN_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r
#define WRITEALL_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCD_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_LOAD_PRESETS_GEN2
 * BLOCKS:   DSC_AFE3
 * REGADDR:  0xd029
 * DEVAD:    1
 * DESC:     load_presets.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     PRESET_DSC_AFE_BANK Load presets for analog interface Registers
 */
#define BCMI_TSCF_XGXS_DSC_LOAD_PRESETS_GEN2r (0x0001d029 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_LOAD_PRESETS_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_LOAD_PRESETS_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_LOAD_PRESETS_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_load_presets_gen2[1];
	uint32_t _dsc_load_presets_gen2;
} BCMI_TSCF_XGXS_DSC_LOAD_PRESETS_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_LOAD_PRESETS_GEN2r_CLR(r) (r).dsc_load_presets_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_LOAD_PRESETS_GEN2r_SET(r,d) (r).dsc_load_presets_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_LOAD_PRESETS_GEN2r_GET(r) (r).dsc_load_presets_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_LOAD_PRESETS_GEN2r_PRESET_DSC_AFE_BANKf_GET(r) (((r).dsc_load_presets_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_DSC_LOAD_PRESETS_GEN2r_PRESET_DSC_AFE_BANKf_SET(r,f) (r).dsc_load_presets_gen2[0]=(((r).dsc_load_presets_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access DSC_LOAD_PRESETS_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_LOAD_PRESETS_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_LOAD_PRESETS_GEN2r,(_r._dsc_load_presets_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_LOAD_PRESETS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_LOAD_PRESETS_GEN2r,(_r._dsc_load_presets_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_LOAD_PRESETS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_LOAD_PRESETS_GEN2r,(_r._dsc_load_presets_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_LOAD_PRESETS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_LOAD_PRESETS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_load_presets_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_LOAD_PRESETS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_LOAD_PRESETS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_load_presets_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_LOAD_PRESETS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_LOAD_PRESETS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_load_presets_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_LOAD_PRESETS_GEN2r BCMI_TSCF_XGXS_DSC_LOAD_PRESETS_GEN2r
#define DSC_LOAD_PRESETS_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_LOAD_PRESETS_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_LOAD_PRESETS_GEN2r_t DSC_LOAD_PRESETS_GEN2r_t;
#define DSC_LOAD_PRESETS_GEN2r_CLR BCMI_TSCF_XGXS_DSC_LOAD_PRESETS_GEN2r_CLR
#define DSC_LOAD_PRESETS_GEN2r_SET BCMI_TSCF_XGXS_DSC_LOAD_PRESETS_GEN2r_SET
#define DSC_LOAD_PRESETS_GEN2r_GET BCMI_TSCF_XGXS_DSC_LOAD_PRESETS_GEN2r_GET
#define DSC_LOAD_PRESETS_GEN2r_PRESET_DSC_AFE_BANKf_GET BCMI_TSCF_XGXS_DSC_LOAD_PRESETS_GEN2r_PRESET_DSC_AFE_BANKf_GET
#define DSC_LOAD_PRESETS_GEN2r_PRESET_DSC_AFE_BANKf_SET BCMI_TSCF_XGXS_DSC_LOAD_PRESETS_GEN2r_PRESET_DSC_AFE_BANKf_SET
#define READ_DSC_LOAD_PRESETS_GEN2r BCMI_TSCF_XGXS_READ_DSC_LOAD_PRESETS_GEN2r
#define WRITE_DSC_LOAD_PRESETS_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_LOAD_PRESETS_GEN2r
#define MODIFY_DSC_LOAD_PRESETS_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_LOAD_PRESETS_GEN2r
#define READLN_DSC_LOAD_PRESETS_GEN2r BCMI_TSCF_XGXS_READLN_DSC_LOAD_PRESETS_GEN2r
#define WRITELN_DSC_LOAD_PRESETS_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_LOAD_PRESETS_GEN2r
#define WRITEALL_DSC_LOAD_PRESETS_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_LOAD_PRESETS_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_LOAD_PRESETS_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_UC_CTL_GEN2
 * BLOCKS:   DSC_A
 * REGADDR:  0xd03d
 * DEVAD:    1
 * DESC:     DSC uC Control
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     UC_DSC_GP_UC_REQ gp_uc request
 *     UC_DSC_ERROR_FOUND Error Found.
 *     UC_DSC_READY_FOR_CMD Ready for command.
 *     UC_DSC_SUPP_INFO Supplemental information.
 */
#define BCMI_TSCF_XGXS_DSC_UC_CTL_GEN2r (0x0001d03d | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_UC_CTL_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_UC_CTL_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_UC_CTL_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_uc_ctl_gen2[1];
	uint32_t _dsc_uc_ctl_gen2;
} BCMI_TSCF_XGXS_DSC_UC_CTL_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_UC_CTL_GEN2r_CLR(r) (r).dsc_uc_ctl_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_UC_CTL_GEN2r_SET(r,d) (r).dsc_uc_ctl_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_UC_CTL_GEN2r_GET(r) (r).dsc_uc_ctl_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_UC_CTL_GEN2r_UC_DSC_SUPP_INFOf_GET(r) ((((r).dsc_uc_ctl_gen2[0]) >> 8) & 0xff)
#define BCMI_TSCF_XGXS_DSC_UC_CTL_GEN2r_UC_DSC_SUPP_INFOf_SET(r,f) (r).dsc_uc_ctl_gen2[0]=(((r).dsc_uc_ctl_gen2[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_TSCF_XGXS_DSC_UC_CTL_GEN2r_UC_DSC_READY_FOR_CMDf_GET(r) ((((r).dsc_uc_ctl_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_DSC_UC_CTL_GEN2r_UC_DSC_READY_FOR_CMDf_SET(r,f) (r).dsc_uc_ctl_gen2[0]=(((r).dsc_uc_ctl_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_DSC_UC_CTL_GEN2r_UC_DSC_ERROR_FOUNDf_GET(r) ((((r).dsc_uc_ctl_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_DSC_UC_CTL_GEN2r_UC_DSC_ERROR_FOUNDf_SET(r,f) (r).dsc_uc_ctl_gen2[0]=(((r).dsc_uc_ctl_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_DSC_UC_CTL_GEN2r_UC_DSC_GP_UC_REQf_GET(r) (((r).dsc_uc_ctl_gen2[0]) & 0x3f)
#define BCMI_TSCF_XGXS_DSC_UC_CTL_GEN2r_UC_DSC_GP_UC_REQf_SET(r,f) (r).dsc_uc_ctl_gen2[0]=(((r).dsc_uc_ctl_gen2[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access DSC_UC_CTL_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_UC_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_UC_CTL_GEN2r,(_r._dsc_uc_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_UC_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_UC_CTL_GEN2r,(_r._dsc_uc_ctl_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_UC_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_UC_CTL_GEN2r,(_r._dsc_uc_ctl_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_UC_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_UC_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_uc_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_UC_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_UC_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_uc_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_UC_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_UC_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_uc_ctl_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_UC_CTL_GEN2r BCMI_TSCF_XGXS_DSC_UC_CTL_GEN2r
#define DSC_UC_CTL_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_UC_CTL_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_UC_CTL_GEN2r_t DSC_UC_CTL_GEN2r_t;
#define DSC_UC_CTL_GEN2r_CLR BCMI_TSCF_XGXS_DSC_UC_CTL_GEN2r_CLR
#define DSC_UC_CTL_GEN2r_SET BCMI_TSCF_XGXS_DSC_UC_CTL_GEN2r_SET
#define DSC_UC_CTL_GEN2r_GET BCMI_TSCF_XGXS_DSC_UC_CTL_GEN2r_GET
#define DSC_UC_CTL_GEN2r_UC_DSC_SUPP_INFOf_GET BCMI_TSCF_XGXS_DSC_UC_CTL_GEN2r_UC_DSC_SUPP_INFOf_GET
#define DSC_UC_CTL_GEN2r_UC_DSC_SUPP_INFOf_SET BCMI_TSCF_XGXS_DSC_UC_CTL_GEN2r_UC_DSC_SUPP_INFOf_SET
#define DSC_UC_CTL_GEN2r_UC_DSC_READY_FOR_CMDf_GET BCMI_TSCF_XGXS_DSC_UC_CTL_GEN2r_UC_DSC_READY_FOR_CMDf_GET
#define DSC_UC_CTL_GEN2r_UC_DSC_READY_FOR_CMDf_SET BCMI_TSCF_XGXS_DSC_UC_CTL_GEN2r_UC_DSC_READY_FOR_CMDf_SET
#define DSC_UC_CTL_GEN2r_UC_DSC_ERROR_FOUNDf_GET BCMI_TSCF_XGXS_DSC_UC_CTL_GEN2r_UC_DSC_ERROR_FOUNDf_GET
#define DSC_UC_CTL_GEN2r_UC_DSC_ERROR_FOUNDf_SET BCMI_TSCF_XGXS_DSC_UC_CTL_GEN2r_UC_DSC_ERROR_FOUNDf_SET
#define DSC_UC_CTL_GEN2r_UC_DSC_GP_UC_REQf_GET BCMI_TSCF_XGXS_DSC_UC_CTL_GEN2r_UC_DSC_GP_UC_REQf_GET
#define DSC_UC_CTL_GEN2r_UC_DSC_GP_UC_REQf_SET BCMI_TSCF_XGXS_DSC_UC_CTL_GEN2r_UC_DSC_GP_UC_REQf_SET
#define READ_DSC_UC_CTL_GEN2r BCMI_TSCF_XGXS_READ_DSC_UC_CTL_GEN2r
#define WRITE_DSC_UC_CTL_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_UC_CTL_GEN2r
#define MODIFY_DSC_UC_CTL_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_UC_CTL_GEN2r
#define READLN_DSC_UC_CTL_GEN2r BCMI_TSCF_XGXS_READLN_DSC_UC_CTL_GEN2r
#define WRITELN_DSC_UC_CTL_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_UC_CTL_GEN2r
#define WRITEALL_DSC_UC_CTL_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_UC_CTL_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_UC_CTL_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_SCRATCH_GEN2
 * BLOCKS:   DSC_A
 * REGADDR:  0xd03e
 * DEVAD:    1
 * DESC:     DSC uC Scratch
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     UC_DSC_SCRATCH   DSC scratch register.
 */
#define BCMI_TSCF_XGXS_DSC_SCRATCH_GEN2r (0x0001d03e | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_SCRATCH_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_SCRATCH_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_SCRATCH_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_scratch_gen2[1];
	uint32_t _dsc_scratch_gen2;
} BCMI_TSCF_XGXS_DSC_SCRATCH_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_SCRATCH_GEN2r_CLR(r) (r).dsc_scratch_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_SCRATCH_GEN2r_SET(r,d) (r).dsc_scratch_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_SCRATCH_GEN2r_GET(r) (r).dsc_scratch_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_SCRATCH_GEN2r_UC_DSC_SCRATCHf_GET(r) (((r).dsc_scratch_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_DSC_SCRATCH_GEN2r_UC_DSC_SCRATCHf_SET(r,f) (r).dsc_scratch_gen2[0]=(((r).dsc_scratch_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access DSC_SCRATCH_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_SCRATCH_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_SCRATCH_GEN2r,(_r._dsc_scratch_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_SCRATCH_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SCRATCH_GEN2r,(_r._dsc_scratch_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_SCRATCH_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SCRATCH_GEN2r,(_r._dsc_scratch_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_SCRATCH_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_SCRATCH_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_scratch_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_SCRATCH_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SCRATCH_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_scratch_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_SCRATCH_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SCRATCH_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_scratch_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_SCRATCH_GEN2r BCMI_TSCF_XGXS_DSC_SCRATCH_GEN2r
#define DSC_SCRATCH_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_SCRATCH_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_SCRATCH_GEN2r_t DSC_SCRATCH_GEN2r_t;
#define DSC_SCRATCH_GEN2r_CLR BCMI_TSCF_XGXS_DSC_SCRATCH_GEN2r_CLR
#define DSC_SCRATCH_GEN2r_SET BCMI_TSCF_XGXS_DSC_SCRATCH_GEN2r_SET
#define DSC_SCRATCH_GEN2r_GET BCMI_TSCF_XGXS_DSC_SCRATCH_GEN2r_GET
#define DSC_SCRATCH_GEN2r_UC_DSC_SCRATCHf_GET BCMI_TSCF_XGXS_DSC_SCRATCH_GEN2r_UC_DSC_SCRATCHf_GET
#define DSC_SCRATCH_GEN2r_UC_DSC_SCRATCHf_SET BCMI_TSCF_XGXS_DSC_SCRATCH_GEN2r_UC_DSC_SCRATCHf_SET
#define READ_DSC_SCRATCH_GEN2r BCMI_TSCF_XGXS_READ_DSC_SCRATCH_GEN2r
#define WRITE_DSC_SCRATCH_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_SCRATCH_GEN2r
#define MODIFY_DSC_SCRATCH_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_SCRATCH_GEN2r
#define READLN_DSC_SCRATCH_GEN2r BCMI_TSCF_XGXS_READLN_DSC_SCRATCH_GEN2r
#define WRITELN_DSC_SCRATCH_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_SCRATCH_GEN2r
#define WRITEALL_DSC_SCRATCH_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_SCRATCH_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_SCRATCH_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_TRNSUM_A_LOW_GEN2
 * BLOCKS:   DSC_B
 * REGADDR:  0xd040
 * DEVAD:    1
 * DESC:     trnsum a low register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TRNSUM_A_LOW     Trnsum interleave 'a' LSB result (7:0)
 */
#define BCMI_TSCF_XGXS_DSC_TRNSUM_A_LOW_GEN2r (0x0001d040 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_TRNSUM_A_LOW_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_TRNSUM_A_LOW_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_TRNSUM_A_LOW_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_trnsum_a_low_gen2[1];
	uint32_t _dsc_trnsum_a_low_gen2;
} BCMI_TSCF_XGXS_DSC_TRNSUM_A_LOW_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_TRNSUM_A_LOW_GEN2r_CLR(r) (r).dsc_trnsum_a_low_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_TRNSUM_A_LOW_GEN2r_SET(r,d) (r).dsc_trnsum_a_low_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_TRNSUM_A_LOW_GEN2r_GET(r) (r).dsc_trnsum_a_low_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_TRNSUM_A_LOW_GEN2r_TRNSUM_A_LOWf_GET(r) ((((r).dsc_trnsum_a_low_gen2[0]) >> 8) & 0xff)
#define BCMI_TSCF_XGXS_DSC_TRNSUM_A_LOW_GEN2r_TRNSUM_A_LOWf_SET(r,f) (r).dsc_trnsum_a_low_gen2[0]=(((r).dsc_trnsum_a_low_gen2[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))

/*
 * These macros can be used to access DSC_TRNSUM_A_LOW_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_TRNSUM_A_LOW_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_A_LOW_GEN2r,(_r._dsc_trnsum_a_low_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_TRNSUM_A_LOW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_A_LOW_GEN2r,(_r._dsc_trnsum_a_low_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_TRNSUM_A_LOW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_A_LOW_GEN2r,(_r._dsc_trnsum_a_low_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_TRNSUM_A_LOW_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_A_LOW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_a_low_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_TRNSUM_A_LOW_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_A_LOW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_a_low_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_TRNSUM_A_LOW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_A_LOW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_trnsum_a_low_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_TRNSUM_A_LOW_GEN2r BCMI_TSCF_XGXS_DSC_TRNSUM_A_LOW_GEN2r
#define DSC_TRNSUM_A_LOW_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_TRNSUM_A_LOW_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_TRNSUM_A_LOW_GEN2r_t DSC_TRNSUM_A_LOW_GEN2r_t;
#define DSC_TRNSUM_A_LOW_GEN2r_CLR BCMI_TSCF_XGXS_DSC_TRNSUM_A_LOW_GEN2r_CLR
#define DSC_TRNSUM_A_LOW_GEN2r_SET BCMI_TSCF_XGXS_DSC_TRNSUM_A_LOW_GEN2r_SET
#define DSC_TRNSUM_A_LOW_GEN2r_GET BCMI_TSCF_XGXS_DSC_TRNSUM_A_LOW_GEN2r_GET
#define DSC_TRNSUM_A_LOW_GEN2r_TRNSUM_A_LOWf_GET BCMI_TSCF_XGXS_DSC_TRNSUM_A_LOW_GEN2r_TRNSUM_A_LOWf_GET
#define DSC_TRNSUM_A_LOW_GEN2r_TRNSUM_A_LOWf_SET BCMI_TSCF_XGXS_DSC_TRNSUM_A_LOW_GEN2r_TRNSUM_A_LOWf_SET
#define READ_DSC_TRNSUM_A_LOW_GEN2r BCMI_TSCF_XGXS_READ_DSC_TRNSUM_A_LOW_GEN2r
#define WRITE_DSC_TRNSUM_A_LOW_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_TRNSUM_A_LOW_GEN2r
#define MODIFY_DSC_TRNSUM_A_LOW_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_TRNSUM_A_LOW_GEN2r
#define READLN_DSC_TRNSUM_A_LOW_GEN2r BCMI_TSCF_XGXS_READLN_DSC_TRNSUM_A_LOW_GEN2r
#define WRITELN_DSC_TRNSUM_A_LOW_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_TRNSUM_A_LOW_GEN2r
#define WRITEALL_DSC_TRNSUM_A_LOW_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_TRNSUM_A_LOW_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_TRNSUM_A_LOW_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_TRNSUM_A_GEN2
 * BLOCKS:   DSC_B
 * REGADDR:  0xd041
 * DEVAD:    1
 * DESC:     trnsum a register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TRNSUM_A         Trnsum interleave 'a' result (23:8)
 */
#define BCMI_TSCF_XGXS_DSC_TRNSUM_A_GEN2r (0x0001d041 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_TRNSUM_A_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_TRNSUM_A_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_TRNSUM_A_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_trnsum_a_gen2[1];
	uint32_t _dsc_trnsum_a_gen2;
} BCMI_TSCF_XGXS_DSC_TRNSUM_A_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_TRNSUM_A_GEN2r_CLR(r) (r).dsc_trnsum_a_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_TRNSUM_A_GEN2r_SET(r,d) (r).dsc_trnsum_a_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_TRNSUM_A_GEN2r_GET(r) (r).dsc_trnsum_a_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_TRNSUM_A_GEN2r_TRNSUM_Af_GET(r) (((r).dsc_trnsum_a_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_DSC_TRNSUM_A_GEN2r_TRNSUM_Af_SET(r,f) (r).dsc_trnsum_a_gen2[0]=(((r).dsc_trnsum_a_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access DSC_TRNSUM_A_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_TRNSUM_A_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_A_GEN2r,(_r._dsc_trnsum_a_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_TRNSUM_A_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_A_GEN2r,(_r._dsc_trnsum_a_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_TRNSUM_A_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_A_GEN2r,(_r._dsc_trnsum_a_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_TRNSUM_A_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_A_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_a_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_TRNSUM_A_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_A_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_a_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_TRNSUM_A_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_A_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_trnsum_a_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_TRNSUM_A_GEN2r BCMI_TSCF_XGXS_DSC_TRNSUM_A_GEN2r
#define DSC_TRNSUM_A_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_TRNSUM_A_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_TRNSUM_A_GEN2r_t DSC_TRNSUM_A_GEN2r_t;
#define DSC_TRNSUM_A_GEN2r_CLR BCMI_TSCF_XGXS_DSC_TRNSUM_A_GEN2r_CLR
#define DSC_TRNSUM_A_GEN2r_SET BCMI_TSCF_XGXS_DSC_TRNSUM_A_GEN2r_SET
#define DSC_TRNSUM_A_GEN2r_GET BCMI_TSCF_XGXS_DSC_TRNSUM_A_GEN2r_GET
#define DSC_TRNSUM_A_GEN2r_TRNSUM_Af_GET BCMI_TSCF_XGXS_DSC_TRNSUM_A_GEN2r_TRNSUM_Af_GET
#define DSC_TRNSUM_A_GEN2r_TRNSUM_Af_SET BCMI_TSCF_XGXS_DSC_TRNSUM_A_GEN2r_TRNSUM_Af_SET
#define READ_DSC_TRNSUM_A_GEN2r BCMI_TSCF_XGXS_READ_DSC_TRNSUM_A_GEN2r
#define WRITE_DSC_TRNSUM_A_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_TRNSUM_A_GEN2r
#define MODIFY_DSC_TRNSUM_A_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_TRNSUM_A_GEN2r
#define READLN_DSC_TRNSUM_A_GEN2r BCMI_TSCF_XGXS_READLN_DSC_TRNSUM_A_GEN2r
#define WRITELN_DSC_TRNSUM_A_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_TRNSUM_A_GEN2r
#define WRITEALL_DSC_TRNSUM_A_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_TRNSUM_A_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_TRNSUM_A_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_TRNSUM_B_LOW_GEN2
 * BLOCKS:   DSC_B
 * REGADDR:  0xd042
 * DEVAD:    1
 * DESC:     trnsum b low register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TRNSUM_B_LOW     Trnsum interleave 'b' LSB result (7:0)
 */
#define BCMI_TSCF_XGXS_DSC_TRNSUM_B_LOW_GEN2r (0x0001d042 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_TRNSUM_B_LOW_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_TRNSUM_B_LOW_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_TRNSUM_B_LOW_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_trnsum_b_low_gen2[1];
	uint32_t _dsc_trnsum_b_low_gen2;
} BCMI_TSCF_XGXS_DSC_TRNSUM_B_LOW_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_TRNSUM_B_LOW_GEN2r_CLR(r) (r).dsc_trnsum_b_low_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_TRNSUM_B_LOW_GEN2r_SET(r,d) (r).dsc_trnsum_b_low_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_TRNSUM_B_LOW_GEN2r_GET(r) (r).dsc_trnsum_b_low_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_TRNSUM_B_LOW_GEN2r_TRNSUM_B_LOWf_GET(r) ((((r).dsc_trnsum_b_low_gen2[0]) >> 8) & 0xff)
#define BCMI_TSCF_XGXS_DSC_TRNSUM_B_LOW_GEN2r_TRNSUM_B_LOWf_SET(r,f) (r).dsc_trnsum_b_low_gen2[0]=(((r).dsc_trnsum_b_low_gen2[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))

/*
 * These macros can be used to access DSC_TRNSUM_B_LOW_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_TRNSUM_B_LOW_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_B_LOW_GEN2r,(_r._dsc_trnsum_b_low_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_TRNSUM_B_LOW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_B_LOW_GEN2r,(_r._dsc_trnsum_b_low_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_TRNSUM_B_LOW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_B_LOW_GEN2r,(_r._dsc_trnsum_b_low_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_TRNSUM_B_LOW_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_B_LOW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_b_low_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_TRNSUM_B_LOW_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_B_LOW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_b_low_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_TRNSUM_B_LOW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_B_LOW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_trnsum_b_low_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_TRNSUM_B_LOW_GEN2r BCMI_TSCF_XGXS_DSC_TRNSUM_B_LOW_GEN2r
#define DSC_TRNSUM_B_LOW_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_TRNSUM_B_LOW_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_TRNSUM_B_LOW_GEN2r_t DSC_TRNSUM_B_LOW_GEN2r_t;
#define DSC_TRNSUM_B_LOW_GEN2r_CLR BCMI_TSCF_XGXS_DSC_TRNSUM_B_LOW_GEN2r_CLR
#define DSC_TRNSUM_B_LOW_GEN2r_SET BCMI_TSCF_XGXS_DSC_TRNSUM_B_LOW_GEN2r_SET
#define DSC_TRNSUM_B_LOW_GEN2r_GET BCMI_TSCF_XGXS_DSC_TRNSUM_B_LOW_GEN2r_GET
#define DSC_TRNSUM_B_LOW_GEN2r_TRNSUM_B_LOWf_GET BCMI_TSCF_XGXS_DSC_TRNSUM_B_LOW_GEN2r_TRNSUM_B_LOWf_GET
#define DSC_TRNSUM_B_LOW_GEN2r_TRNSUM_B_LOWf_SET BCMI_TSCF_XGXS_DSC_TRNSUM_B_LOW_GEN2r_TRNSUM_B_LOWf_SET
#define READ_DSC_TRNSUM_B_LOW_GEN2r BCMI_TSCF_XGXS_READ_DSC_TRNSUM_B_LOW_GEN2r
#define WRITE_DSC_TRNSUM_B_LOW_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_TRNSUM_B_LOW_GEN2r
#define MODIFY_DSC_TRNSUM_B_LOW_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_TRNSUM_B_LOW_GEN2r
#define READLN_DSC_TRNSUM_B_LOW_GEN2r BCMI_TSCF_XGXS_READLN_DSC_TRNSUM_B_LOW_GEN2r
#define WRITELN_DSC_TRNSUM_B_LOW_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_TRNSUM_B_LOW_GEN2r
#define WRITEALL_DSC_TRNSUM_B_LOW_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_TRNSUM_B_LOW_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_TRNSUM_B_LOW_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_TRNSUM_B_GEN2
 * BLOCKS:   DSC_B
 * REGADDR:  0xd043
 * DEVAD:    1
 * DESC:     trnsum b register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TRNSUM_B         Trnsum interleave 'b' result (23:8)
 */
#define BCMI_TSCF_XGXS_DSC_TRNSUM_B_GEN2r (0x0001d043 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_TRNSUM_B_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_TRNSUM_B_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_TRNSUM_B_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_trnsum_b_gen2[1];
	uint32_t _dsc_trnsum_b_gen2;
} BCMI_TSCF_XGXS_DSC_TRNSUM_B_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_TRNSUM_B_GEN2r_CLR(r) (r).dsc_trnsum_b_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_TRNSUM_B_GEN2r_SET(r,d) (r).dsc_trnsum_b_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_TRNSUM_B_GEN2r_GET(r) (r).dsc_trnsum_b_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_TRNSUM_B_GEN2r_TRNSUM_Bf_GET(r) (((r).dsc_trnsum_b_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_DSC_TRNSUM_B_GEN2r_TRNSUM_Bf_SET(r,f) (r).dsc_trnsum_b_gen2[0]=(((r).dsc_trnsum_b_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access DSC_TRNSUM_B_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_TRNSUM_B_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_B_GEN2r,(_r._dsc_trnsum_b_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_TRNSUM_B_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_B_GEN2r,(_r._dsc_trnsum_b_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_TRNSUM_B_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_B_GEN2r,(_r._dsc_trnsum_b_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_TRNSUM_B_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_B_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_b_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_TRNSUM_B_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_B_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_b_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_TRNSUM_B_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_B_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_trnsum_b_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_TRNSUM_B_GEN2r BCMI_TSCF_XGXS_DSC_TRNSUM_B_GEN2r
#define DSC_TRNSUM_B_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_TRNSUM_B_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_TRNSUM_B_GEN2r_t DSC_TRNSUM_B_GEN2r_t;
#define DSC_TRNSUM_B_GEN2r_CLR BCMI_TSCF_XGXS_DSC_TRNSUM_B_GEN2r_CLR
#define DSC_TRNSUM_B_GEN2r_SET BCMI_TSCF_XGXS_DSC_TRNSUM_B_GEN2r_SET
#define DSC_TRNSUM_B_GEN2r_GET BCMI_TSCF_XGXS_DSC_TRNSUM_B_GEN2r_GET
#define DSC_TRNSUM_B_GEN2r_TRNSUM_Bf_GET BCMI_TSCF_XGXS_DSC_TRNSUM_B_GEN2r_TRNSUM_Bf_GET
#define DSC_TRNSUM_B_GEN2r_TRNSUM_Bf_SET BCMI_TSCF_XGXS_DSC_TRNSUM_B_GEN2r_TRNSUM_Bf_SET
#define READ_DSC_TRNSUM_B_GEN2r BCMI_TSCF_XGXS_READ_DSC_TRNSUM_B_GEN2r
#define WRITE_DSC_TRNSUM_B_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_TRNSUM_B_GEN2r
#define MODIFY_DSC_TRNSUM_B_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_TRNSUM_B_GEN2r
#define READLN_DSC_TRNSUM_B_GEN2r BCMI_TSCF_XGXS_READLN_DSC_TRNSUM_B_GEN2r
#define WRITELN_DSC_TRNSUM_B_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_TRNSUM_B_GEN2r
#define WRITEALL_DSC_TRNSUM_B_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_TRNSUM_B_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_TRNSUM_B_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_TRNSUM_C_LOW_GEN2
 * BLOCKS:   DSC_B
 * REGADDR:  0xd044
 * DEVAD:    1
 * DESC:     trnsum c low register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TRNSUM_C_LOW     Trnsum interleave 'c' LSB result (7:0)
 */
#define BCMI_TSCF_XGXS_DSC_TRNSUM_C_LOW_GEN2r (0x0001d044 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_TRNSUM_C_LOW_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_TRNSUM_C_LOW_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_TRNSUM_C_LOW_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_trnsum_c_low_gen2[1];
	uint32_t _dsc_trnsum_c_low_gen2;
} BCMI_TSCF_XGXS_DSC_TRNSUM_C_LOW_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_TRNSUM_C_LOW_GEN2r_CLR(r) (r).dsc_trnsum_c_low_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_TRNSUM_C_LOW_GEN2r_SET(r,d) (r).dsc_trnsum_c_low_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_TRNSUM_C_LOW_GEN2r_GET(r) (r).dsc_trnsum_c_low_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_TRNSUM_C_LOW_GEN2r_TRNSUM_C_LOWf_GET(r) ((((r).dsc_trnsum_c_low_gen2[0]) >> 8) & 0xff)
#define BCMI_TSCF_XGXS_DSC_TRNSUM_C_LOW_GEN2r_TRNSUM_C_LOWf_SET(r,f) (r).dsc_trnsum_c_low_gen2[0]=(((r).dsc_trnsum_c_low_gen2[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))

/*
 * These macros can be used to access DSC_TRNSUM_C_LOW_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_TRNSUM_C_LOW_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_C_LOW_GEN2r,(_r._dsc_trnsum_c_low_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_TRNSUM_C_LOW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_C_LOW_GEN2r,(_r._dsc_trnsum_c_low_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_TRNSUM_C_LOW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_C_LOW_GEN2r,(_r._dsc_trnsum_c_low_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_TRNSUM_C_LOW_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_C_LOW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_c_low_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_TRNSUM_C_LOW_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_C_LOW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_c_low_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_TRNSUM_C_LOW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_C_LOW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_trnsum_c_low_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_TRNSUM_C_LOW_GEN2r BCMI_TSCF_XGXS_DSC_TRNSUM_C_LOW_GEN2r
#define DSC_TRNSUM_C_LOW_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_TRNSUM_C_LOW_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_TRNSUM_C_LOW_GEN2r_t DSC_TRNSUM_C_LOW_GEN2r_t;
#define DSC_TRNSUM_C_LOW_GEN2r_CLR BCMI_TSCF_XGXS_DSC_TRNSUM_C_LOW_GEN2r_CLR
#define DSC_TRNSUM_C_LOW_GEN2r_SET BCMI_TSCF_XGXS_DSC_TRNSUM_C_LOW_GEN2r_SET
#define DSC_TRNSUM_C_LOW_GEN2r_GET BCMI_TSCF_XGXS_DSC_TRNSUM_C_LOW_GEN2r_GET
#define DSC_TRNSUM_C_LOW_GEN2r_TRNSUM_C_LOWf_GET BCMI_TSCF_XGXS_DSC_TRNSUM_C_LOW_GEN2r_TRNSUM_C_LOWf_GET
#define DSC_TRNSUM_C_LOW_GEN2r_TRNSUM_C_LOWf_SET BCMI_TSCF_XGXS_DSC_TRNSUM_C_LOW_GEN2r_TRNSUM_C_LOWf_SET
#define READ_DSC_TRNSUM_C_LOW_GEN2r BCMI_TSCF_XGXS_READ_DSC_TRNSUM_C_LOW_GEN2r
#define WRITE_DSC_TRNSUM_C_LOW_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_TRNSUM_C_LOW_GEN2r
#define MODIFY_DSC_TRNSUM_C_LOW_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_TRNSUM_C_LOW_GEN2r
#define READLN_DSC_TRNSUM_C_LOW_GEN2r BCMI_TSCF_XGXS_READLN_DSC_TRNSUM_C_LOW_GEN2r
#define WRITELN_DSC_TRNSUM_C_LOW_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_TRNSUM_C_LOW_GEN2r
#define WRITEALL_DSC_TRNSUM_C_LOW_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_TRNSUM_C_LOW_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_TRNSUM_C_LOW_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_TRNSUM_C_GEN2
 * BLOCKS:   DSC_B
 * REGADDR:  0xd045
 * DEVAD:    1
 * DESC:     trnsum c register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TRNSUM_C         Trnsum interleave 'c' result (23:8)
 */
#define BCMI_TSCF_XGXS_DSC_TRNSUM_C_GEN2r (0x0001d045 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_TRNSUM_C_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_TRNSUM_C_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_TRNSUM_C_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_trnsum_c_gen2[1];
	uint32_t _dsc_trnsum_c_gen2;
} BCMI_TSCF_XGXS_DSC_TRNSUM_C_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_TRNSUM_C_GEN2r_CLR(r) (r).dsc_trnsum_c_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_TRNSUM_C_GEN2r_SET(r,d) (r).dsc_trnsum_c_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_TRNSUM_C_GEN2r_GET(r) (r).dsc_trnsum_c_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_TRNSUM_C_GEN2r_TRNSUM_Cf_GET(r) (((r).dsc_trnsum_c_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_DSC_TRNSUM_C_GEN2r_TRNSUM_Cf_SET(r,f) (r).dsc_trnsum_c_gen2[0]=(((r).dsc_trnsum_c_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access DSC_TRNSUM_C_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_TRNSUM_C_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_C_GEN2r,(_r._dsc_trnsum_c_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_TRNSUM_C_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_C_GEN2r,(_r._dsc_trnsum_c_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_TRNSUM_C_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_C_GEN2r,(_r._dsc_trnsum_c_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_TRNSUM_C_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_C_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_c_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_TRNSUM_C_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_C_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_c_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_TRNSUM_C_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_C_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_trnsum_c_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_TRNSUM_C_GEN2r BCMI_TSCF_XGXS_DSC_TRNSUM_C_GEN2r
#define DSC_TRNSUM_C_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_TRNSUM_C_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_TRNSUM_C_GEN2r_t DSC_TRNSUM_C_GEN2r_t;
#define DSC_TRNSUM_C_GEN2r_CLR BCMI_TSCF_XGXS_DSC_TRNSUM_C_GEN2r_CLR
#define DSC_TRNSUM_C_GEN2r_SET BCMI_TSCF_XGXS_DSC_TRNSUM_C_GEN2r_SET
#define DSC_TRNSUM_C_GEN2r_GET BCMI_TSCF_XGXS_DSC_TRNSUM_C_GEN2r_GET
#define DSC_TRNSUM_C_GEN2r_TRNSUM_Cf_GET BCMI_TSCF_XGXS_DSC_TRNSUM_C_GEN2r_TRNSUM_Cf_GET
#define DSC_TRNSUM_C_GEN2r_TRNSUM_Cf_SET BCMI_TSCF_XGXS_DSC_TRNSUM_C_GEN2r_TRNSUM_Cf_SET
#define READ_DSC_TRNSUM_C_GEN2r BCMI_TSCF_XGXS_READ_DSC_TRNSUM_C_GEN2r
#define WRITE_DSC_TRNSUM_C_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_TRNSUM_C_GEN2r
#define MODIFY_DSC_TRNSUM_C_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_TRNSUM_C_GEN2r
#define READLN_DSC_TRNSUM_C_GEN2r BCMI_TSCF_XGXS_READLN_DSC_TRNSUM_C_GEN2r
#define WRITELN_DSC_TRNSUM_C_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_TRNSUM_C_GEN2r
#define WRITEALL_DSC_TRNSUM_C_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_TRNSUM_C_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_TRNSUM_C_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_TRNSUM_D_LOW_GEN2
 * BLOCKS:   DSC_B
 * REGADDR:  0xd046
 * DEVAD:    1
 * DESC:     trnsum d low register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TRNSUM_D_LOW     Trnsum interleave 'd' LSB result (7:0)
 */
#define BCMI_TSCF_XGXS_DSC_TRNSUM_D_LOW_GEN2r (0x0001d046 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_TRNSUM_D_LOW_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_TRNSUM_D_LOW_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_TRNSUM_D_LOW_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_trnsum_d_low_gen2[1];
	uint32_t _dsc_trnsum_d_low_gen2;
} BCMI_TSCF_XGXS_DSC_TRNSUM_D_LOW_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_TRNSUM_D_LOW_GEN2r_CLR(r) (r).dsc_trnsum_d_low_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_TRNSUM_D_LOW_GEN2r_SET(r,d) (r).dsc_trnsum_d_low_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_TRNSUM_D_LOW_GEN2r_GET(r) (r).dsc_trnsum_d_low_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_TRNSUM_D_LOW_GEN2r_TRNSUM_D_LOWf_GET(r) ((((r).dsc_trnsum_d_low_gen2[0]) >> 8) & 0xff)
#define BCMI_TSCF_XGXS_DSC_TRNSUM_D_LOW_GEN2r_TRNSUM_D_LOWf_SET(r,f) (r).dsc_trnsum_d_low_gen2[0]=(((r).dsc_trnsum_d_low_gen2[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))

/*
 * These macros can be used to access DSC_TRNSUM_D_LOW_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_TRNSUM_D_LOW_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_D_LOW_GEN2r,(_r._dsc_trnsum_d_low_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_TRNSUM_D_LOW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_D_LOW_GEN2r,(_r._dsc_trnsum_d_low_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_TRNSUM_D_LOW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_D_LOW_GEN2r,(_r._dsc_trnsum_d_low_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_TRNSUM_D_LOW_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_D_LOW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_d_low_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_TRNSUM_D_LOW_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_D_LOW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_d_low_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_TRNSUM_D_LOW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_D_LOW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_trnsum_d_low_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_TRNSUM_D_LOW_GEN2r BCMI_TSCF_XGXS_DSC_TRNSUM_D_LOW_GEN2r
#define DSC_TRNSUM_D_LOW_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_TRNSUM_D_LOW_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_TRNSUM_D_LOW_GEN2r_t DSC_TRNSUM_D_LOW_GEN2r_t;
#define DSC_TRNSUM_D_LOW_GEN2r_CLR BCMI_TSCF_XGXS_DSC_TRNSUM_D_LOW_GEN2r_CLR
#define DSC_TRNSUM_D_LOW_GEN2r_SET BCMI_TSCF_XGXS_DSC_TRNSUM_D_LOW_GEN2r_SET
#define DSC_TRNSUM_D_LOW_GEN2r_GET BCMI_TSCF_XGXS_DSC_TRNSUM_D_LOW_GEN2r_GET
#define DSC_TRNSUM_D_LOW_GEN2r_TRNSUM_D_LOWf_GET BCMI_TSCF_XGXS_DSC_TRNSUM_D_LOW_GEN2r_TRNSUM_D_LOWf_GET
#define DSC_TRNSUM_D_LOW_GEN2r_TRNSUM_D_LOWf_SET BCMI_TSCF_XGXS_DSC_TRNSUM_D_LOW_GEN2r_TRNSUM_D_LOWf_SET
#define READ_DSC_TRNSUM_D_LOW_GEN2r BCMI_TSCF_XGXS_READ_DSC_TRNSUM_D_LOW_GEN2r
#define WRITE_DSC_TRNSUM_D_LOW_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_TRNSUM_D_LOW_GEN2r
#define MODIFY_DSC_TRNSUM_D_LOW_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_TRNSUM_D_LOW_GEN2r
#define READLN_DSC_TRNSUM_D_LOW_GEN2r BCMI_TSCF_XGXS_READLN_DSC_TRNSUM_D_LOW_GEN2r
#define WRITELN_DSC_TRNSUM_D_LOW_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_TRNSUM_D_LOW_GEN2r
#define WRITEALL_DSC_TRNSUM_D_LOW_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_TRNSUM_D_LOW_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_TRNSUM_D_LOW_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_TRNSUM_D_GEN2
 * BLOCKS:   DSC_B
 * REGADDR:  0xd047
 * DEVAD:    1
 * DESC:     trnsum d register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TRNSUM_D         Trnsum interleave 'd' result (15:8)
 */
#define BCMI_TSCF_XGXS_DSC_TRNSUM_D_GEN2r (0x0001d047 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_TRNSUM_D_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_TRNSUM_D_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_TRNSUM_D_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_trnsum_d_gen2[1];
	uint32_t _dsc_trnsum_d_gen2;
} BCMI_TSCF_XGXS_DSC_TRNSUM_D_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_TRNSUM_D_GEN2r_CLR(r) (r).dsc_trnsum_d_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_TRNSUM_D_GEN2r_SET(r,d) (r).dsc_trnsum_d_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_TRNSUM_D_GEN2r_GET(r) (r).dsc_trnsum_d_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_TRNSUM_D_GEN2r_TRNSUM_Df_GET(r) (((r).dsc_trnsum_d_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_DSC_TRNSUM_D_GEN2r_TRNSUM_Df_SET(r,f) (r).dsc_trnsum_d_gen2[0]=(((r).dsc_trnsum_d_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access DSC_TRNSUM_D_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_TRNSUM_D_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_D_GEN2r,(_r._dsc_trnsum_d_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_TRNSUM_D_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_D_GEN2r,(_r._dsc_trnsum_d_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_TRNSUM_D_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_D_GEN2r,(_r._dsc_trnsum_d_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_TRNSUM_D_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_D_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_d_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_TRNSUM_D_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_D_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_d_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_TRNSUM_D_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_D_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_trnsum_d_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_TRNSUM_D_GEN2r BCMI_TSCF_XGXS_DSC_TRNSUM_D_GEN2r
#define DSC_TRNSUM_D_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_TRNSUM_D_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_TRNSUM_D_GEN2r_t DSC_TRNSUM_D_GEN2r_t;
#define DSC_TRNSUM_D_GEN2r_CLR BCMI_TSCF_XGXS_DSC_TRNSUM_D_GEN2r_CLR
#define DSC_TRNSUM_D_GEN2r_SET BCMI_TSCF_XGXS_DSC_TRNSUM_D_GEN2r_SET
#define DSC_TRNSUM_D_GEN2r_GET BCMI_TSCF_XGXS_DSC_TRNSUM_D_GEN2r_GET
#define DSC_TRNSUM_D_GEN2r_TRNSUM_Df_GET BCMI_TSCF_XGXS_DSC_TRNSUM_D_GEN2r_TRNSUM_Df_GET
#define DSC_TRNSUM_D_GEN2r_TRNSUM_Df_SET BCMI_TSCF_XGXS_DSC_TRNSUM_D_GEN2r_TRNSUM_Df_SET
#define READ_DSC_TRNSUM_D_GEN2r BCMI_TSCF_XGXS_READ_DSC_TRNSUM_D_GEN2r
#define WRITE_DSC_TRNSUM_D_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_TRNSUM_D_GEN2r
#define MODIFY_DSC_TRNSUM_D_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_TRNSUM_D_GEN2r
#define READLN_DSC_TRNSUM_D_GEN2r BCMI_TSCF_XGXS_READLN_DSC_TRNSUM_D_GEN2r
#define WRITELN_DSC_TRNSUM_D_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_TRNSUM_D_GEN2r
#define WRITEALL_DSC_TRNSUM_D_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_TRNSUM_D_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_TRNSUM_D_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_TRNSUM_LOW_GEN2
 * BLOCKS:   DSC_B
 * REGADDR:  0xd048
 * DEVAD:    1
 * DESC:     trnsum low register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TRNSUM_LOW       Trnsum  LSB result (9:0)
 */
#define BCMI_TSCF_XGXS_DSC_TRNSUM_LOW_GEN2r (0x0001d048 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_TRNSUM_LOW_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_TRNSUM_LOW_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_TRNSUM_LOW_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_trnsum_low_gen2[1];
	uint32_t _dsc_trnsum_low_gen2;
} BCMI_TSCF_XGXS_DSC_TRNSUM_LOW_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_TRNSUM_LOW_GEN2r_CLR(r) (r).dsc_trnsum_low_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_TRNSUM_LOW_GEN2r_SET(r,d) (r).dsc_trnsum_low_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_TRNSUM_LOW_GEN2r_GET(r) (r).dsc_trnsum_low_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_TRNSUM_LOW_GEN2r_TRNSUM_LOWf_GET(r) ((((r).dsc_trnsum_low_gen2[0]) >> 6) & 0x3ff)
#define BCMI_TSCF_XGXS_DSC_TRNSUM_LOW_GEN2r_TRNSUM_LOWf_SET(r,f) (r).dsc_trnsum_low_gen2[0]=(((r).dsc_trnsum_low_gen2[0] & ~((uint32_t)0x3ff << 6)) | ((((uint32_t)f) & 0x3ff) << 6)) | (1023 << (16 + 6))

/*
 * These macros can be used to access DSC_TRNSUM_LOW_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_TRNSUM_LOW_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_LOW_GEN2r,(_r._dsc_trnsum_low_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_TRNSUM_LOW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_LOW_GEN2r,(_r._dsc_trnsum_low_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_TRNSUM_LOW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_LOW_GEN2r,(_r._dsc_trnsum_low_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_TRNSUM_LOW_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_LOW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_low_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_TRNSUM_LOW_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_LOW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_low_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_TRNSUM_LOW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_LOW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_trnsum_low_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_TRNSUM_LOW_GEN2r BCMI_TSCF_XGXS_DSC_TRNSUM_LOW_GEN2r
#define DSC_TRNSUM_LOW_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_TRNSUM_LOW_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_TRNSUM_LOW_GEN2r_t DSC_TRNSUM_LOW_GEN2r_t;
#define DSC_TRNSUM_LOW_GEN2r_CLR BCMI_TSCF_XGXS_DSC_TRNSUM_LOW_GEN2r_CLR
#define DSC_TRNSUM_LOW_GEN2r_SET BCMI_TSCF_XGXS_DSC_TRNSUM_LOW_GEN2r_SET
#define DSC_TRNSUM_LOW_GEN2r_GET BCMI_TSCF_XGXS_DSC_TRNSUM_LOW_GEN2r_GET
#define DSC_TRNSUM_LOW_GEN2r_TRNSUM_LOWf_GET BCMI_TSCF_XGXS_DSC_TRNSUM_LOW_GEN2r_TRNSUM_LOWf_GET
#define DSC_TRNSUM_LOW_GEN2r_TRNSUM_LOWf_SET BCMI_TSCF_XGXS_DSC_TRNSUM_LOW_GEN2r_TRNSUM_LOWf_SET
#define READ_DSC_TRNSUM_LOW_GEN2r BCMI_TSCF_XGXS_READ_DSC_TRNSUM_LOW_GEN2r
#define WRITE_DSC_TRNSUM_LOW_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_TRNSUM_LOW_GEN2r
#define MODIFY_DSC_TRNSUM_LOW_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_TRNSUM_LOW_GEN2r
#define READLN_DSC_TRNSUM_LOW_GEN2r BCMI_TSCF_XGXS_READLN_DSC_TRNSUM_LOW_GEN2r
#define WRITELN_DSC_TRNSUM_LOW_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_TRNSUM_LOW_GEN2r
#define WRITEALL_DSC_TRNSUM_LOW_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_TRNSUM_LOW_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_TRNSUM_LOW_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_TRNSUM_GEN2
 * BLOCKS:   DSC_B
 * REGADDR:  0xd049
 * DEVAD:    1
 * DESC:     trnsum register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TRNSUM           Trnsum result (25:10)
 */
#define BCMI_TSCF_XGXS_DSC_TRNSUM_GEN2r (0x0001d049 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_TRNSUM_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_TRNSUM_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_TRNSUM_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_trnsum_gen2[1];
	uint32_t _dsc_trnsum_gen2;
} BCMI_TSCF_XGXS_DSC_TRNSUM_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_TRNSUM_GEN2r_CLR(r) (r).dsc_trnsum_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_TRNSUM_GEN2r_SET(r,d) (r).dsc_trnsum_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_TRNSUM_GEN2r_GET(r) (r).dsc_trnsum_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_TRNSUM_GEN2r_TRNSUMf_GET(r) (((r).dsc_trnsum_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_DSC_TRNSUM_GEN2r_TRNSUMf_SET(r,f) (r).dsc_trnsum_gen2[0]=(((r).dsc_trnsum_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access DSC_TRNSUM_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_TRNSUM_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_GEN2r,(_r._dsc_trnsum_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_TRNSUM_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_GEN2r,(_r._dsc_trnsum_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_TRNSUM_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_GEN2r,(_r._dsc_trnsum_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_TRNSUM_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_TRNSUM_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_TRNSUM_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_trnsum_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_TRNSUM_GEN2r BCMI_TSCF_XGXS_DSC_TRNSUM_GEN2r
#define DSC_TRNSUM_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_TRNSUM_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_TRNSUM_GEN2r_t DSC_TRNSUM_GEN2r_t;
#define DSC_TRNSUM_GEN2r_CLR BCMI_TSCF_XGXS_DSC_TRNSUM_GEN2r_CLR
#define DSC_TRNSUM_GEN2r_SET BCMI_TSCF_XGXS_DSC_TRNSUM_GEN2r_SET
#define DSC_TRNSUM_GEN2r_GET BCMI_TSCF_XGXS_DSC_TRNSUM_GEN2r_GET
#define DSC_TRNSUM_GEN2r_TRNSUMf_GET BCMI_TSCF_XGXS_DSC_TRNSUM_GEN2r_TRNSUMf_GET
#define DSC_TRNSUM_GEN2r_TRNSUMf_SET BCMI_TSCF_XGXS_DSC_TRNSUM_GEN2r_TRNSUMf_SET
#define READ_DSC_TRNSUM_GEN2r BCMI_TSCF_XGXS_READ_DSC_TRNSUM_GEN2r
#define WRITE_DSC_TRNSUM_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_TRNSUM_GEN2r
#define MODIFY_DSC_TRNSUM_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_TRNSUM_GEN2r
#define READLN_DSC_TRNSUM_GEN2r BCMI_TSCF_XGXS_READLN_DSC_TRNSUM_GEN2r
#define WRITELN_DSC_TRNSUM_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_TRNSUM_GEN2r
#define WRITEALL_DSC_TRNSUM_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_TRNSUM_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_TRNSUM_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_DC_OFFS_STS_GEN2
 * BLOCKS:   DSC_B
 * REGADDR:  0xd04c
 * DEVAD:    1
 * DESC:     dc offset status register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     DC_OFFSET_BIN    rx dc offset
 */
#define BCMI_TSCF_XGXS_DSC_DC_OFFS_STS_GEN2r (0x0001d04c | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_DC_OFFS_STS_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_DC_OFFS_STS_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_DC_OFFS_STS_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_dc_offs_sts_gen2[1];
	uint32_t _dsc_dc_offs_sts_gen2;
} BCMI_TSCF_XGXS_DSC_DC_OFFS_STS_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_DC_OFFS_STS_GEN2r_CLR(r) (r).dsc_dc_offs_sts_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_DC_OFFS_STS_GEN2r_SET(r,d) (r).dsc_dc_offs_sts_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_DC_OFFS_STS_GEN2r_GET(r) (r).dsc_dc_offs_sts_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_DC_OFFS_STS_GEN2r_DC_OFFSET_BINf_GET(r) (((r).dsc_dc_offs_sts_gen2[0]) & 0x7f)
#define BCMI_TSCF_XGXS_DSC_DC_OFFS_STS_GEN2r_DC_OFFSET_BINf_SET(r,f) (r).dsc_dc_offs_sts_gen2[0]=(((r).dsc_dc_offs_sts_gen2[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f)) | (0x7f << 16)

/*
 * These macros can be used to access DSC_DC_OFFS_STS_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_DC_OFFS_STS_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_DC_OFFS_STS_GEN2r,(_r._dsc_dc_offs_sts_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_DC_OFFS_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_DC_OFFS_STS_GEN2r,(_r._dsc_dc_offs_sts_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_DC_OFFS_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_DC_OFFS_STS_GEN2r,(_r._dsc_dc_offs_sts_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_DC_OFFS_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_DC_OFFS_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_dc_offs_sts_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_DC_OFFS_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_DC_OFFS_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_dc_offs_sts_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_DC_OFFS_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_DC_OFFS_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_dc_offs_sts_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_DC_OFFS_STS_GEN2r BCMI_TSCF_XGXS_DSC_DC_OFFS_STS_GEN2r
#define DSC_DC_OFFS_STS_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_DC_OFFS_STS_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_DC_OFFS_STS_GEN2r_t DSC_DC_OFFS_STS_GEN2r_t;
#define DSC_DC_OFFS_STS_GEN2r_CLR BCMI_TSCF_XGXS_DSC_DC_OFFS_STS_GEN2r_CLR
#define DSC_DC_OFFS_STS_GEN2r_SET BCMI_TSCF_XGXS_DSC_DC_OFFS_STS_GEN2r_SET
#define DSC_DC_OFFS_STS_GEN2r_GET BCMI_TSCF_XGXS_DSC_DC_OFFS_STS_GEN2r_GET
#define DSC_DC_OFFS_STS_GEN2r_DC_OFFSET_BINf_GET BCMI_TSCF_XGXS_DSC_DC_OFFS_STS_GEN2r_DC_OFFSET_BINf_GET
#define DSC_DC_OFFS_STS_GEN2r_DC_OFFSET_BINf_SET BCMI_TSCF_XGXS_DSC_DC_OFFS_STS_GEN2r_DC_OFFSET_BINf_SET
#define READ_DSC_DC_OFFS_STS_GEN2r BCMI_TSCF_XGXS_READ_DSC_DC_OFFS_STS_GEN2r
#define WRITE_DSC_DC_OFFS_STS_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_DC_OFFS_STS_GEN2r
#define MODIFY_DSC_DC_OFFS_STS_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_DC_OFFS_STS_GEN2r
#define READLN_DSC_DC_OFFS_STS_GEN2r BCMI_TSCF_XGXS_READLN_DSC_DC_OFFS_STS_GEN2r
#define WRITELN_DSC_DC_OFFS_STS_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_DC_OFFS_STS_GEN2r
#define WRITEALL_DSC_DC_OFFS_STS_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_DC_OFFS_STS_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_DC_OFFS_STS_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_VGA_D_THR_STS_GEN2
 * BLOCKS:   DSC_B
 * REGADDR:  0xd04d
 * DEVAD:    1
 * DESC:     vga gain and data threshold status register.
 * RESETVAL: 0x2700 (9984)
 * ACCESS:   R/O
 * FIELDS:
 *     RX_DATA_THRESH_SEL Read out of the Data Slicer threshold in 2's complement signed format.
 *     RX_VGA_CTRL      Read out of the VGA control.
 */
#define BCMI_TSCF_XGXS_DSC_VGA_D_THR_STS_GEN2r (0x0001d04d | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_VGA_D_THR_STS_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_VGA_D_THR_STS_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_VGA_D_THR_STS_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_vga_d_thr_sts_gen2[1];
	uint32_t _dsc_vga_d_thr_sts_gen2;
} BCMI_TSCF_XGXS_DSC_VGA_D_THR_STS_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_VGA_D_THR_STS_GEN2r_CLR(r) (r).dsc_vga_d_thr_sts_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_VGA_D_THR_STS_GEN2r_SET(r,d) (r).dsc_vga_d_thr_sts_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_VGA_D_THR_STS_GEN2r_GET(r) (r).dsc_vga_d_thr_sts_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_VGA_D_THR_STS_GEN2r_RX_VGA_CTRLf_GET(r) ((((r).dsc_vga_d_thr_sts_gen2[0]) >> 8) & 0x7f)
#define BCMI_TSCF_XGXS_DSC_VGA_D_THR_STS_GEN2r_RX_VGA_CTRLf_SET(r,f) (r).dsc_vga_d_thr_sts_gen2[0]=(((r).dsc_vga_d_thr_sts_gen2[0] & ~((uint32_t)0x7f << 8)) | ((((uint32_t)f) & 0x7f) << 8)) | (127 << (16 + 8))
#define BCMI_TSCF_XGXS_DSC_VGA_D_THR_STS_GEN2r_RX_DATA_THRESH_SELf_GET(r) (((r).dsc_vga_d_thr_sts_gen2[0]) & 0x7f)
#define BCMI_TSCF_XGXS_DSC_VGA_D_THR_STS_GEN2r_RX_DATA_THRESH_SELf_SET(r,f) (r).dsc_vga_d_thr_sts_gen2[0]=(((r).dsc_vga_d_thr_sts_gen2[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f)) | (0x7f << 16)

/*
 * These macros can be used to access DSC_VGA_D_THR_STS_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_VGA_D_THR_STS_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_VGA_D_THR_STS_GEN2r,(_r._dsc_vga_d_thr_sts_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_VGA_D_THR_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_VGA_D_THR_STS_GEN2r,(_r._dsc_vga_d_thr_sts_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_VGA_D_THR_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_VGA_D_THR_STS_GEN2r,(_r._dsc_vga_d_thr_sts_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_VGA_D_THR_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_VGA_D_THR_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_vga_d_thr_sts_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_VGA_D_THR_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_VGA_D_THR_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_vga_d_thr_sts_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_VGA_D_THR_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_VGA_D_THR_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_vga_d_thr_sts_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_VGA_D_THR_STS_GEN2r BCMI_TSCF_XGXS_DSC_VGA_D_THR_STS_GEN2r
#define DSC_VGA_D_THR_STS_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_VGA_D_THR_STS_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_VGA_D_THR_STS_GEN2r_t DSC_VGA_D_THR_STS_GEN2r_t;
#define DSC_VGA_D_THR_STS_GEN2r_CLR BCMI_TSCF_XGXS_DSC_VGA_D_THR_STS_GEN2r_CLR
#define DSC_VGA_D_THR_STS_GEN2r_SET BCMI_TSCF_XGXS_DSC_VGA_D_THR_STS_GEN2r_SET
#define DSC_VGA_D_THR_STS_GEN2r_GET BCMI_TSCF_XGXS_DSC_VGA_D_THR_STS_GEN2r_GET
#define DSC_VGA_D_THR_STS_GEN2r_RX_VGA_CTRLf_GET BCMI_TSCF_XGXS_DSC_VGA_D_THR_STS_GEN2r_RX_VGA_CTRLf_GET
#define DSC_VGA_D_THR_STS_GEN2r_RX_VGA_CTRLf_SET BCMI_TSCF_XGXS_DSC_VGA_D_THR_STS_GEN2r_RX_VGA_CTRLf_SET
#define DSC_VGA_D_THR_STS_GEN2r_RX_DATA_THRESH_SELf_GET BCMI_TSCF_XGXS_DSC_VGA_D_THR_STS_GEN2r_RX_DATA_THRESH_SELf_GET
#define DSC_VGA_D_THR_STS_GEN2r_RX_DATA_THRESH_SELf_SET BCMI_TSCF_XGXS_DSC_VGA_D_THR_STS_GEN2r_RX_DATA_THRESH_SELf_SET
#define READ_DSC_VGA_D_THR_STS_GEN2r BCMI_TSCF_XGXS_READ_DSC_VGA_D_THR_STS_GEN2r
#define WRITE_DSC_VGA_D_THR_STS_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_VGA_D_THR_STS_GEN2r
#define MODIFY_DSC_VGA_D_THR_STS_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_VGA_D_THR_STS_GEN2r
#define READLN_DSC_VGA_D_THR_STS_GEN2r BCMI_TSCF_XGXS_READLN_DSC_VGA_D_THR_STS_GEN2r
#define WRITELN_DSC_VGA_D_THR_STS_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_VGA_D_THR_STS_GEN2r
#define WRITEALL_DSC_VGA_D_THR_STS_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_VGA_D_THR_STS_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_VGA_D_THR_STS_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_CDR_CTL_0_GEN2
 * BLOCKS:   DSC_C
 * REGADDR:  0xd050
 * DEVAD:    1
 * DESC:     cdr control register 0.
 * RESETVAL: 0x9 (9)
 * ACCESS:   R/W
 * FIELDS:
 *     OS_ALL_EDGES     Enables debug mode in OS phase detector (internal debug only).
 *     BR_PD_EN         Enables BR phase detector.
 *     OS_PATTERN_ENHANCED Enables tolerance for unscrambled data sequences.
 *     CDR_FREQ_EN      1: 2nd order loop output to contribute
 *     CDR_INTEG_REG_CLR clear integ Register
 *     CDR_PHASE_ERR_FRZ 1: override phase error to be 0
 *     CDR_INTEG_SAT_SEL 0:(-24576, 24575), 1:(-16384, 16383)
 *     CDR_FREQ_OVERRIDE_EN 1:override integ Register with cdr_freq_override_val
 *     CDR_ZERO_POLARITY inverts the phase slicer information before the phase detector
 */
#define BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r (0x0001d050 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_CDR_CTL_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_cdr_ctl_0_gen2[1];
	uint32_t _dsc_cdr_ctl_0_gen2;
} BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r_CLR(r) (r).dsc_cdr_ctl_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r_SET(r,d) (r).dsc_cdr_ctl_0_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r_GET(r) (r).dsc_cdr_ctl_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r_CDR_ZERO_POLARITYf_GET(r) ((((r).dsc_cdr_ctl_0_gen2[0]) >> 9) & 0x1)
#define BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r_CDR_ZERO_POLARITYf_SET(r,f) (r).dsc_cdr_ctl_0_gen2[0]=(((r).dsc_cdr_ctl_0_gen2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r_CDR_FREQ_OVERRIDE_ENf_GET(r) ((((r).dsc_cdr_ctl_0_gen2[0]) >> 8) & 0x1)
#define BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r_CDR_FREQ_OVERRIDE_ENf_SET(r,f) (r).dsc_cdr_ctl_0_gen2[0]=(((r).dsc_cdr_ctl_0_gen2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r_CDR_INTEG_SAT_SELf_GET(r) ((((r).dsc_cdr_ctl_0_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r_CDR_INTEG_SAT_SELf_SET(r,f) (r).dsc_cdr_ctl_0_gen2[0]=(((r).dsc_cdr_ctl_0_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r_CDR_PHASE_ERR_FRZf_GET(r) ((((r).dsc_cdr_ctl_0_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r_CDR_PHASE_ERR_FRZf_SET(r,f) (r).dsc_cdr_ctl_0_gen2[0]=(((r).dsc_cdr_ctl_0_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r_CDR_INTEG_REG_CLRf_GET(r) ((((r).dsc_cdr_ctl_0_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r_CDR_INTEG_REG_CLRf_SET(r,f) (r).dsc_cdr_ctl_0_gen2[0]=(((r).dsc_cdr_ctl_0_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r_CDR_FREQ_ENf_GET(r) ((((r).dsc_cdr_ctl_0_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r_CDR_FREQ_ENf_SET(r,f) (r).dsc_cdr_ctl_0_gen2[0]=(((r).dsc_cdr_ctl_0_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r_OS_PATTERN_ENHANCEDf_GET(r) ((((r).dsc_cdr_ctl_0_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r_OS_PATTERN_ENHANCEDf_SET(r,f) (r).dsc_cdr_ctl_0_gen2[0]=(((r).dsc_cdr_ctl_0_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r_BR_PD_ENf_GET(r) ((((r).dsc_cdr_ctl_0_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r_BR_PD_ENf_SET(r,f) (r).dsc_cdr_ctl_0_gen2[0]=(((r).dsc_cdr_ctl_0_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r_OS_ALL_EDGESf_GET(r) (((r).dsc_cdr_ctl_0_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r_OS_ALL_EDGESf_SET(r,f) (r).dsc_cdr_ctl_0_gen2[0]=(((r).dsc_cdr_ctl_0_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access DSC_CDR_CTL_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_CDR_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r,(_r._dsc_cdr_ctl_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_CDR_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r,(_r._dsc_cdr_ctl_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_CDR_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r,(_r._dsc_cdr_ctl_0_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_CDR_CTL_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_cdr_ctl_0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_CDR_CTL_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_cdr_ctl_0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_CDR_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_cdr_ctl_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_CDR_CTL_0_GEN2r BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r
#define DSC_CDR_CTL_0_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r_t DSC_CDR_CTL_0_GEN2r_t;
#define DSC_CDR_CTL_0_GEN2r_CLR BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r_CLR
#define DSC_CDR_CTL_0_GEN2r_SET BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r_SET
#define DSC_CDR_CTL_0_GEN2r_GET BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r_GET
#define DSC_CDR_CTL_0_GEN2r_CDR_ZERO_POLARITYf_GET BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r_CDR_ZERO_POLARITYf_GET
#define DSC_CDR_CTL_0_GEN2r_CDR_ZERO_POLARITYf_SET BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r_CDR_ZERO_POLARITYf_SET
#define DSC_CDR_CTL_0_GEN2r_CDR_FREQ_OVERRIDE_ENf_GET BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r_CDR_FREQ_OVERRIDE_ENf_GET
#define DSC_CDR_CTL_0_GEN2r_CDR_FREQ_OVERRIDE_ENf_SET BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r_CDR_FREQ_OVERRIDE_ENf_SET
#define DSC_CDR_CTL_0_GEN2r_CDR_INTEG_SAT_SELf_GET BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r_CDR_INTEG_SAT_SELf_GET
#define DSC_CDR_CTL_0_GEN2r_CDR_INTEG_SAT_SELf_SET BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r_CDR_INTEG_SAT_SELf_SET
#define DSC_CDR_CTL_0_GEN2r_CDR_PHASE_ERR_FRZf_GET BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r_CDR_PHASE_ERR_FRZf_GET
#define DSC_CDR_CTL_0_GEN2r_CDR_PHASE_ERR_FRZf_SET BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r_CDR_PHASE_ERR_FRZf_SET
#define DSC_CDR_CTL_0_GEN2r_CDR_INTEG_REG_CLRf_GET BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r_CDR_INTEG_REG_CLRf_GET
#define DSC_CDR_CTL_0_GEN2r_CDR_INTEG_REG_CLRf_SET BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r_CDR_INTEG_REG_CLRf_SET
#define DSC_CDR_CTL_0_GEN2r_CDR_FREQ_ENf_GET BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r_CDR_FREQ_ENf_GET
#define DSC_CDR_CTL_0_GEN2r_CDR_FREQ_ENf_SET BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r_CDR_FREQ_ENf_SET
#define DSC_CDR_CTL_0_GEN2r_OS_PATTERN_ENHANCEDf_GET BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r_OS_PATTERN_ENHANCEDf_GET
#define DSC_CDR_CTL_0_GEN2r_OS_PATTERN_ENHANCEDf_SET BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r_OS_PATTERN_ENHANCEDf_SET
#define DSC_CDR_CTL_0_GEN2r_BR_PD_ENf_GET BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r_BR_PD_ENf_GET
#define DSC_CDR_CTL_0_GEN2r_BR_PD_ENf_SET BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r_BR_PD_ENf_SET
#define DSC_CDR_CTL_0_GEN2r_OS_ALL_EDGESf_GET BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r_OS_ALL_EDGESf_GET
#define DSC_CDR_CTL_0_GEN2r_OS_ALL_EDGESf_SET BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r_OS_ALL_EDGESf_SET
#define READ_DSC_CDR_CTL_0_GEN2r BCMI_TSCF_XGXS_READ_DSC_CDR_CTL_0_GEN2r
#define WRITE_DSC_CDR_CTL_0_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_CDR_CTL_0_GEN2r
#define MODIFY_DSC_CDR_CTL_0_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_CDR_CTL_0_GEN2r
#define READLN_DSC_CDR_CTL_0_GEN2r BCMI_TSCF_XGXS_READLN_DSC_CDR_CTL_0_GEN2r
#define WRITELN_DSC_CDR_CTL_0_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_CDR_CTL_0_GEN2r
#define WRITEALL_DSC_CDR_CTL_0_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_CDR_CTL_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_CDR_CTL_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_CDR_CTL_1_GEN2
 * BLOCKS:   DSC_C
 * REGADDR:  0xd051
 * DEVAD:    1
 * DESC:     cdr control register 1.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CDR_FREQ_OVERRIDE_VAL Gets loaded into the integ reg @ reset. Also, see alternate use in description of cdr_freq_override_en
 */
#define BCMI_TSCF_XGXS_DSC_CDR_CTL_1_GEN2r (0x0001d051 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_CDR_CTL_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_CDR_CTL_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_CDR_CTL_1_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_cdr_ctl_1_gen2[1];
	uint32_t _dsc_cdr_ctl_1_gen2;
} BCMI_TSCF_XGXS_DSC_CDR_CTL_1_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_CDR_CTL_1_GEN2r_CLR(r) (r).dsc_cdr_ctl_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_CDR_CTL_1_GEN2r_SET(r,d) (r).dsc_cdr_ctl_1_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_CDR_CTL_1_GEN2r_GET(r) (r).dsc_cdr_ctl_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_CDR_CTL_1_GEN2r_CDR_FREQ_OVERRIDE_VALf_GET(r) ((((r).dsc_cdr_ctl_1_gen2[0]) >> 5) & 0x7ff)
#define BCMI_TSCF_XGXS_DSC_CDR_CTL_1_GEN2r_CDR_FREQ_OVERRIDE_VALf_SET(r,f) (r).dsc_cdr_ctl_1_gen2[0]=(((r).dsc_cdr_ctl_1_gen2[0] & ~((uint32_t)0x7ff << 5)) | ((((uint32_t)f) & 0x7ff) << 5)) | (2047 << (16 + 5))

/*
 * These macros can be used to access DSC_CDR_CTL_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_CDR_CTL_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_CDR_CTL_1_GEN2r,(_r._dsc_cdr_ctl_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_CDR_CTL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_CDR_CTL_1_GEN2r,(_r._dsc_cdr_ctl_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_CDR_CTL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_CDR_CTL_1_GEN2r,(_r._dsc_cdr_ctl_1_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_CDR_CTL_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_CDR_CTL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_cdr_ctl_1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_CDR_CTL_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_CDR_CTL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_cdr_ctl_1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_CDR_CTL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_CDR_CTL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_cdr_ctl_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_CDR_CTL_1_GEN2r BCMI_TSCF_XGXS_DSC_CDR_CTL_1_GEN2r
#define DSC_CDR_CTL_1_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_CDR_CTL_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_CDR_CTL_1_GEN2r_t DSC_CDR_CTL_1_GEN2r_t;
#define DSC_CDR_CTL_1_GEN2r_CLR BCMI_TSCF_XGXS_DSC_CDR_CTL_1_GEN2r_CLR
#define DSC_CDR_CTL_1_GEN2r_SET BCMI_TSCF_XGXS_DSC_CDR_CTL_1_GEN2r_SET
#define DSC_CDR_CTL_1_GEN2r_GET BCMI_TSCF_XGXS_DSC_CDR_CTL_1_GEN2r_GET
#define DSC_CDR_CTL_1_GEN2r_CDR_FREQ_OVERRIDE_VALf_GET BCMI_TSCF_XGXS_DSC_CDR_CTL_1_GEN2r_CDR_FREQ_OVERRIDE_VALf_GET
#define DSC_CDR_CTL_1_GEN2r_CDR_FREQ_OVERRIDE_VALf_SET BCMI_TSCF_XGXS_DSC_CDR_CTL_1_GEN2r_CDR_FREQ_OVERRIDE_VALf_SET
#define READ_DSC_CDR_CTL_1_GEN2r BCMI_TSCF_XGXS_READ_DSC_CDR_CTL_1_GEN2r
#define WRITE_DSC_CDR_CTL_1_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_CDR_CTL_1_GEN2r
#define MODIFY_DSC_CDR_CTL_1_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_CDR_CTL_1_GEN2r
#define READLN_DSC_CDR_CTL_1_GEN2r BCMI_TSCF_XGXS_READLN_DSC_CDR_CTL_1_GEN2r
#define WRITELN_DSC_CDR_CTL_1_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_CDR_CTL_1_GEN2r
#define WRITEALL_DSC_CDR_CTL_1_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_CDR_CTL_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_CDR_CTL_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_CDR_CTL_2_GEN2
 * BLOCKS:   DSC_C
 * REGADDR:  0xd052
 * DEVAD:    1
 * DESC:     cdr control register 2
 * RESETVAL: 0x80 (128)
 * ACCESS:   R/W
 * FIELDS:
 *     CDR_LM_THR_SEL   cdr lock monitor looks for integ reg[15:6] to be within sat level - (cdr_lm_thr_sel +1)*512 in magnitude.only bits [2:0] are used - so 0to 7 is valid programmable range.
 *     CDR_1G_SWAP_PZ   When 1, this will swap the peaks and zeros going out as the DME data. It will still use the original peaks and zeros for data recovery.
 *     CDR_1G_FORCE_EN  Forces the enable on the 1g logic. Else it should be enabled with osr mode setting to correct value.
 *     TX_PI_LOOP_TIMING_SRC_SEL 1: Enables phase transfer to TX path.
 *     PHS_SUM_IGNORE_DSC_LOCK Normally the phase summer waits for dsc lock. This bit overrides that wait.
 *     CDR_1G_MANUAL_MODE Puts the 1G CDR in manual mode.
 *     CDR_1G_MANUAL_STROBE Manual Strobe for the 1G CDR.
 */
#define BCMI_TSCF_XGXS_DSC_CDR_CTL_2_GEN2r (0x0001d052 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_CDR_CTL_2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_CDR_CTL_2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_CDR_CTL_2_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_cdr_ctl_2_gen2[1];
	uint32_t _dsc_cdr_ctl_2_gen2;
} BCMI_TSCF_XGXS_DSC_CDR_CTL_2_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_CDR_CTL_2_GEN2r_CLR(r) (r).dsc_cdr_ctl_2_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_CDR_CTL_2_GEN2r_SET(r,d) (r).dsc_cdr_ctl_2_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_CDR_CTL_2_GEN2r_GET(r) (r).dsc_cdr_ctl_2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_CDR_CTL_2_GEN2r_CDR_1G_MANUAL_STROBEf_GET(r) ((((r).dsc_cdr_ctl_2_gen2[0]) >> 9) & 0x1)
#define BCMI_TSCF_XGXS_DSC_CDR_CTL_2_GEN2r_CDR_1G_MANUAL_STROBEf_SET(r,f) (r).dsc_cdr_ctl_2_gen2[0]=(((r).dsc_cdr_ctl_2_gen2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_XGXS_DSC_CDR_CTL_2_GEN2r_CDR_1G_MANUAL_MODEf_GET(r) ((((r).dsc_cdr_ctl_2_gen2[0]) >> 8) & 0x1)
#define BCMI_TSCF_XGXS_DSC_CDR_CTL_2_GEN2r_CDR_1G_MANUAL_MODEf_SET(r,f) (r).dsc_cdr_ctl_2_gen2[0]=(((r).dsc_cdr_ctl_2_gen2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_XGXS_DSC_CDR_CTL_2_GEN2r_PHS_SUM_IGNORE_DSC_LOCKf_GET(r) ((((r).dsc_cdr_ctl_2_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_DSC_CDR_CTL_2_GEN2r_PHS_SUM_IGNORE_DSC_LOCKf_SET(r,f) (r).dsc_cdr_ctl_2_gen2[0]=(((r).dsc_cdr_ctl_2_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_DSC_CDR_CTL_2_GEN2r_TX_PI_LOOP_TIMING_SRC_SELf_GET(r) ((((r).dsc_cdr_ctl_2_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_DSC_CDR_CTL_2_GEN2r_TX_PI_LOOP_TIMING_SRC_SELf_SET(r,f) (r).dsc_cdr_ctl_2_gen2[0]=(((r).dsc_cdr_ctl_2_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_DSC_CDR_CTL_2_GEN2r_CDR_1G_FORCE_ENf_GET(r) ((((r).dsc_cdr_ctl_2_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_DSC_CDR_CTL_2_GEN2r_CDR_1G_FORCE_ENf_SET(r,f) (r).dsc_cdr_ctl_2_gen2[0]=(((r).dsc_cdr_ctl_2_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_DSC_CDR_CTL_2_GEN2r_CDR_1G_SWAP_PZf_GET(r) ((((r).dsc_cdr_ctl_2_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_DSC_CDR_CTL_2_GEN2r_CDR_1G_SWAP_PZf_SET(r,f) (r).dsc_cdr_ctl_2_gen2[0]=(((r).dsc_cdr_ctl_2_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_DSC_CDR_CTL_2_GEN2r_CDR_LM_THR_SELf_GET(r) (((r).dsc_cdr_ctl_2_gen2[0]) & 0xf)
#define BCMI_TSCF_XGXS_DSC_CDR_CTL_2_GEN2r_CDR_LM_THR_SELf_SET(r,f) (r).dsc_cdr_ctl_2_gen2[0]=(((r).dsc_cdr_ctl_2_gen2[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access DSC_CDR_CTL_2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_CDR_CTL_2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_CDR_CTL_2_GEN2r,(_r._dsc_cdr_ctl_2_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_CDR_CTL_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_CDR_CTL_2_GEN2r,(_r._dsc_cdr_ctl_2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_CDR_CTL_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_CDR_CTL_2_GEN2r,(_r._dsc_cdr_ctl_2_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_CDR_CTL_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_CDR_CTL_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_cdr_ctl_2_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_CDR_CTL_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_CDR_CTL_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_cdr_ctl_2_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_CDR_CTL_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_CDR_CTL_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_cdr_ctl_2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_CDR_CTL_2_GEN2r BCMI_TSCF_XGXS_DSC_CDR_CTL_2_GEN2r
#define DSC_CDR_CTL_2_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_CDR_CTL_2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_CDR_CTL_2_GEN2r_t DSC_CDR_CTL_2_GEN2r_t;
#define DSC_CDR_CTL_2_GEN2r_CLR BCMI_TSCF_XGXS_DSC_CDR_CTL_2_GEN2r_CLR
#define DSC_CDR_CTL_2_GEN2r_SET BCMI_TSCF_XGXS_DSC_CDR_CTL_2_GEN2r_SET
#define DSC_CDR_CTL_2_GEN2r_GET BCMI_TSCF_XGXS_DSC_CDR_CTL_2_GEN2r_GET
#define DSC_CDR_CTL_2_GEN2r_CDR_1G_MANUAL_STROBEf_GET BCMI_TSCF_XGXS_DSC_CDR_CTL_2_GEN2r_CDR_1G_MANUAL_STROBEf_GET
#define DSC_CDR_CTL_2_GEN2r_CDR_1G_MANUAL_STROBEf_SET BCMI_TSCF_XGXS_DSC_CDR_CTL_2_GEN2r_CDR_1G_MANUAL_STROBEf_SET
#define DSC_CDR_CTL_2_GEN2r_CDR_1G_MANUAL_MODEf_GET BCMI_TSCF_XGXS_DSC_CDR_CTL_2_GEN2r_CDR_1G_MANUAL_MODEf_GET
#define DSC_CDR_CTL_2_GEN2r_CDR_1G_MANUAL_MODEf_SET BCMI_TSCF_XGXS_DSC_CDR_CTL_2_GEN2r_CDR_1G_MANUAL_MODEf_SET
#define DSC_CDR_CTL_2_GEN2r_PHS_SUM_IGNORE_DSC_LOCKf_GET BCMI_TSCF_XGXS_DSC_CDR_CTL_2_GEN2r_PHS_SUM_IGNORE_DSC_LOCKf_GET
#define DSC_CDR_CTL_2_GEN2r_PHS_SUM_IGNORE_DSC_LOCKf_SET BCMI_TSCF_XGXS_DSC_CDR_CTL_2_GEN2r_PHS_SUM_IGNORE_DSC_LOCKf_SET
#define DSC_CDR_CTL_2_GEN2r_TX_PI_LOOP_TIMING_SRC_SELf_GET BCMI_TSCF_XGXS_DSC_CDR_CTL_2_GEN2r_TX_PI_LOOP_TIMING_SRC_SELf_GET
#define DSC_CDR_CTL_2_GEN2r_TX_PI_LOOP_TIMING_SRC_SELf_SET BCMI_TSCF_XGXS_DSC_CDR_CTL_2_GEN2r_TX_PI_LOOP_TIMING_SRC_SELf_SET
#define DSC_CDR_CTL_2_GEN2r_CDR_1G_FORCE_ENf_GET BCMI_TSCF_XGXS_DSC_CDR_CTL_2_GEN2r_CDR_1G_FORCE_ENf_GET
#define DSC_CDR_CTL_2_GEN2r_CDR_1G_FORCE_ENf_SET BCMI_TSCF_XGXS_DSC_CDR_CTL_2_GEN2r_CDR_1G_FORCE_ENf_SET
#define DSC_CDR_CTL_2_GEN2r_CDR_1G_SWAP_PZf_GET BCMI_TSCF_XGXS_DSC_CDR_CTL_2_GEN2r_CDR_1G_SWAP_PZf_GET
#define DSC_CDR_CTL_2_GEN2r_CDR_1G_SWAP_PZf_SET BCMI_TSCF_XGXS_DSC_CDR_CTL_2_GEN2r_CDR_1G_SWAP_PZf_SET
#define DSC_CDR_CTL_2_GEN2r_CDR_LM_THR_SELf_GET BCMI_TSCF_XGXS_DSC_CDR_CTL_2_GEN2r_CDR_LM_THR_SELf_GET
#define DSC_CDR_CTL_2_GEN2r_CDR_LM_THR_SELf_SET BCMI_TSCF_XGXS_DSC_CDR_CTL_2_GEN2r_CDR_LM_THR_SELf_SET
#define READ_DSC_CDR_CTL_2_GEN2r BCMI_TSCF_XGXS_READ_DSC_CDR_CTL_2_GEN2r
#define WRITE_DSC_CDR_CTL_2_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_CDR_CTL_2_GEN2r
#define MODIFY_DSC_CDR_CTL_2_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_CDR_CTL_2_GEN2r
#define READLN_DSC_CDR_CTL_2_GEN2r BCMI_TSCF_XGXS_READLN_DSC_CDR_CTL_2_GEN2r
#define WRITELN_DSC_CDR_CTL_2_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_CDR_CTL_2_GEN2r
#define WRITEALL_DSC_CDR_CTL_2_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_CDR_CTL_2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_CDR_CTL_2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_RX_PI_CTL_GEN2
 * BLOCKS:   DSC_C
 * REGADDR:  0xd053
 * DEVAD:    1
 * DESC:     rx pi control register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RX_PI_SLICERS_EN bit-vector representing which PI's to adjust: [0] d, [1] dq, [2] p, [3] pq, [4] l, [6] lq
 *     RX_PI_PHASE_STEP_CNT # of steps to adjust: 0..7: [1, 46,52,58,64,70,76,84]
 *     RX_PI_PHASE_STEP_DIR 0: decrement phase, 1: increment phase
 *     RX_PI_MANUAL_MODE 0: normal, 1:disconnect all PI's from CDR when enabled
 *     RX_PI_MANUAL_STROBE perform a manual override over specified number of clocks
 */
#define BCMI_TSCF_XGXS_DSC_RX_PI_CTL_GEN2r (0x0001d053 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_RX_PI_CTL_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_PI_CTL_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_RX_PI_CTL_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_rx_pi_ctl_gen2[1];
	uint32_t _dsc_rx_pi_ctl_gen2;
} BCMI_TSCF_XGXS_DSC_RX_PI_CTL_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_RX_PI_CTL_GEN2r_CLR(r) (r).dsc_rx_pi_ctl_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_RX_PI_CTL_GEN2r_SET(r,d) (r).dsc_rx_pi_ctl_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_RX_PI_CTL_GEN2r_GET(r) (r).dsc_rx_pi_ctl_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_RX_PI_CTL_GEN2r_RX_PI_MANUAL_STROBEf_GET(r) ((((r).dsc_rx_pi_ctl_gen2[0]) >> 11) & 0x1)
#define BCMI_TSCF_XGXS_DSC_RX_PI_CTL_GEN2r_RX_PI_MANUAL_STROBEf_SET(r,f) (r).dsc_rx_pi_ctl_gen2[0]=(((r).dsc_rx_pi_ctl_gen2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_XGXS_DSC_RX_PI_CTL_GEN2r_RX_PI_MANUAL_MODEf_GET(r) ((((r).dsc_rx_pi_ctl_gen2[0]) >> 10) & 0x1)
#define BCMI_TSCF_XGXS_DSC_RX_PI_CTL_GEN2r_RX_PI_MANUAL_MODEf_SET(r,f) (r).dsc_rx_pi_ctl_gen2[0]=(((r).dsc_rx_pi_ctl_gen2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_XGXS_DSC_RX_PI_CTL_GEN2r_RX_PI_PHASE_STEP_DIRf_GET(r) ((((r).dsc_rx_pi_ctl_gen2[0]) >> 9) & 0x1)
#define BCMI_TSCF_XGXS_DSC_RX_PI_CTL_GEN2r_RX_PI_PHASE_STEP_DIRf_SET(r,f) (r).dsc_rx_pi_ctl_gen2[0]=(((r).dsc_rx_pi_ctl_gen2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_XGXS_DSC_RX_PI_CTL_GEN2r_RX_PI_PHASE_STEP_CNTf_GET(r) ((((r).dsc_rx_pi_ctl_gen2[0]) >> 6) & 0x7)
#define BCMI_TSCF_XGXS_DSC_RX_PI_CTL_GEN2r_RX_PI_PHASE_STEP_CNTf_SET(r,f) (r).dsc_rx_pi_ctl_gen2[0]=(((r).dsc_rx_pi_ctl_gen2[0] & ~((uint32_t)0x7 << 6)) | ((((uint32_t)f) & 0x7) << 6)) | (7 << (16 + 6))
#define BCMI_TSCF_XGXS_DSC_RX_PI_CTL_GEN2r_RX_PI_SLICERS_ENf_GET(r) (((r).dsc_rx_pi_ctl_gen2[0]) & 0x3f)
#define BCMI_TSCF_XGXS_DSC_RX_PI_CTL_GEN2r_RX_PI_SLICERS_ENf_SET(r,f) (r).dsc_rx_pi_ctl_gen2[0]=(((r).dsc_rx_pi_ctl_gen2[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access DSC_RX_PI_CTL_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_RX_PI_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_PI_CTL_GEN2r,(_r._dsc_rx_pi_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_RX_PI_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_PI_CTL_GEN2r,(_r._dsc_rx_pi_ctl_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_RX_PI_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_PI_CTL_GEN2r,(_r._dsc_rx_pi_ctl_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_RX_PI_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_PI_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_pi_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_RX_PI_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_PI_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_pi_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_RX_PI_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_PI_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_pi_ctl_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_PI_CTL_GEN2r BCMI_TSCF_XGXS_DSC_RX_PI_CTL_GEN2r
#define DSC_RX_PI_CTL_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_RX_PI_CTL_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_RX_PI_CTL_GEN2r_t DSC_RX_PI_CTL_GEN2r_t;
#define DSC_RX_PI_CTL_GEN2r_CLR BCMI_TSCF_XGXS_DSC_RX_PI_CTL_GEN2r_CLR
#define DSC_RX_PI_CTL_GEN2r_SET BCMI_TSCF_XGXS_DSC_RX_PI_CTL_GEN2r_SET
#define DSC_RX_PI_CTL_GEN2r_GET BCMI_TSCF_XGXS_DSC_RX_PI_CTL_GEN2r_GET
#define DSC_RX_PI_CTL_GEN2r_RX_PI_MANUAL_STROBEf_GET BCMI_TSCF_XGXS_DSC_RX_PI_CTL_GEN2r_RX_PI_MANUAL_STROBEf_GET
#define DSC_RX_PI_CTL_GEN2r_RX_PI_MANUAL_STROBEf_SET BCMI_TSCF_XGXS_DSC_RX_PI_CTL_GEN2r_RX_PI_MANUAL_STROBEf_SET
#define DSC_RX_PI_CTL_GEN2r_RX_PI_MANUAL_MODEf_GET BCMI_TSCF_XGXS_DSC_RX_PI_CTL_GEN2r_RX_PI_MANUAL_MODEf_GET
#define DSC_RX_PI_CTL_GEN2r_RX_PI_MANUAL_MODEf_SET BCMI_TSCF_XGXS_DSC_RX_PI_CTL_GEN2r_RX_PI_MANUAL_MODEf_SET
#define DSC_RX_PI_CTL_GEN2r_RX_PI_PHASE_STEP_DIRf_GET BCMI_TSCF_XGXS_DSC_RX_PI_CTL_GEN2r_RX_PI_PHASE_STEP_DIRf_GET
#define DSC_RX_PI_CTL_GEN2r_RX_PI_PHASE_STEP_DIRf_SET BCMI_TSCF_XGXS_DSC_RX_PI_CTL_GEN2r_RX_PI_PHASE_STEP_DIRf_SET
#define DSC_RX_PI_CTL_GEN2r_RX_PI_PHASE_STEP_CNTf_GET BCMI_TSCF_XGXS_DSC_RX_PI_CTL_GEN2r_RX_PI_PHASE_STEP_CNTf_GET
#define DSC_RX_PI_CTL_GEN2r_RX_PI_PHASE_STEP_CNTf_SET BCMI_TSCF_XGXS_DSC_RX_PI_CTL_GEN2r_RX_PI_PHASE_STEP_CNTf_SET
#define DSC_RX_PI_CTL_GEN2r_RX_PI_SLICERS_ENf_GET BCMI_TSCF_XGXS_DSC_RX_PI_CTL_GEN2r_RX_PI_SLICERS_ENf_GET
#define DSC_RX_PI_CTL_GEN2r_RX_PI_SLICERS_ENf_SET BCMI_TSCF_XGXS_DSC_RX_PI_CTL_GEN2r_RX_PI_SLICERS_ENf_SET
#define READ_DSC_RX_PI_CTL_GEN2r BCMI_TSCF_XGXS_READ_DSC_RX_PI_CTL_GEN2r
#define WRITE_DSC_RX_PI_CTL_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_RX_PI_CTL_GEN2r
#define MODIFY_DSC_RX_PI_CTL_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_RX_PI_CTL_GEN2r
#define READLN_DSC_RX_PI_CTL_GEN2r BCMI_TSCF_XGXS_READLN_DSC_RX_PI_CTL_GEN2r
#define WRITELN_DSC_RX_PI_CTL_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_RX_PI_CTL_GEN2r
#define WRITEALL_DSC_RX_PI_CTL_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_RX_PI_CTL_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_RX_PI_CTL_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_TRNSUM_CTL_GEN2
 * BLOCKS:   DSC_C
 * REGADDR:  0xd055
 * DEVAD:    1
 * DESC:     trnsum control register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TRNSUM_GAIN      bit-vector representing the gain to be applied: [0] 1, [1] 2, [2] 4, [3] 8
 *     TRNSUM_SEL_EMUX  0 selects phase slicer and 1 selects lms slicer
 *     TRNSUM_TAP_RANGE_SEL Taps -32 to 4 are broken into groups of 8 and                        this selects the range
 *     TRNSUM_COR_SEL   00: normal; 01: all 1s instead of emux; 10:                        count number of emux!= data; 11: all 1s instead of d[n-delay]
 *     TRNSUM_QPHASE_MULT_EN Enables cdr phase error to weigh the                        correlator output
 *     TRNSUM_RANDOM_TAPSEL_DISABLE Disables randomizing logic for tap                        selection. Enables sequential selection.
 *     TRNSUM_EYE_CLOSURE_EN When enabled this ands another term to the                        condition. d[n] != emux[n]
 *     TRNSUM_EN        Training sum enable
 */
#define BCMI_TSCF_XGXS_DSC_TRNSUM_CTL_GEN2r (0x0001d055 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_TRNSUM_CTL_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_TRNSUM_CTL_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_TRNSUM_CTL_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_trnsum_ctl_gen2[1];
	uint32_t _dsc_trnsum_ctl_gen2;
} BCMI_TSCF_XGXS_DSC_TRNSUM_CTL_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_TRNSUM_CTL_GEN2r_CLR(r) (r).dsc_trnsum_ctl_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_TRNSUM_CTL_GEN2r_SET(r,d) (r).dsc_trnsum_ctl_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_TRNSUM_CTL_GEN2r_GET(r) (r).dsc_trnsum_ctl_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_TRNSUM_CTL_GEN2r_TRNSUM_ENf_GET(r) ((((r).dsc_trnsum_ctl_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_DSC_TRNSUM_CTL_GEN2r_TRNSUM_ENf_SET(r,f) (r).dsc_trnsum_ctl_gen2[0]=(((r).dsc_trnsum_ctl_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_DSC_TRNSUM_CTL_GEN2r_TRNSUM_EYE_CLOSURE_ENf_GET(r) ((((r).dsc_trnsum_ctl_gen2[0]) >> 14) & 0x1)
#define BCMI_TSCF_XGXS_DSC_TRNSUM_CTL_GEN2r_TRNSUM_EYE_CLOSURE_ENf_SET(r,f) (r).dsc_trnsum_ctl_gen2[0]=(((r).dsc_trnsum_ctl_gen2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_XGXS_DSC_TRNSUM_CTL_GEN2r_TRNSUM_RANDOM_TAPSEL_DISABLEf_GET(r) ((((r).dsc_trnsum_ctl_gen2[0]) >> 13) & 0x1)
#define BCMI_TSCF_XGXS_DSC_TRNSUM_CTL_GEN2r_TRNSUM_RANDOM_TAPSEL_DISABLEf_SET(r,f) (r).dsc_trnsum_ctl_gen2[0]=(((r).dsc_trnsum_ctl_gen2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_XGXS_DSC_TRNSUM_CTL_GEN2r_TRNSUM_QPHASE_MULT_ENf_GET(r) ((((r).dsc_trnsum_ctl_gen2[0]) >> 12) & 0x1)
#define BCMI_TSCF_XGXS_DSC_TRNSUM_CTL_GEN2r_TRNSUM_QPHASE_MULT_ENf_SET(r,f) (r).dsc_trnsum_ctl_gen2[0]=(((r).dsc_trnsum_ctl_gen2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_TSCF_XGXS_DSC_TRNSUM_CTL_GEN2r_TRNSUM_COR_SELf_GET(r) ((((r).dsc_trnsum_ctl_gen2[0]) >> 8) & 0x3)
#define BCMI_TSCF_XGXS_DSC_TRNSUM_CTL_GEN2r_TRNSUM_COR_SELf_SET(r,f) (r).dsc_trnsum_ctl_gen2[0]=(((r).dsc_trnsum_ctl_gen2[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))
#define BCMI_TSCF_XGXS_DSC_TRNSUM_CTL_GEN2r_TRNSUM_TAP_RANGE_SELf_GET(r) ((((r).dsc_trnsum_ctl_gen2[0]) >> 4) & 0x7)
#define BCMI_TSCF_XGXS_DSC_TRNSUM_CTL_GEN2r_TRNSUM_TAP_RANGE_SELf_SET(r,f) (r).dsc_trnsum_ctl_gen2[0]=(((r).dsc_trnsum_ctl_gen2[0] & ~((uint32_t)0x7 << 4)) | ((((uint32_t)f) & 0x7) << 4)) | (7 << (16 + 4))
#define BCMI_TSCF_XGXS_DSC_TRNSUM_CTL_GEN2r_TRNSUM_SEL_EMUXf_GET(r) ((((r).dsc_trnsum_ctl_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_DSC_TRNSUM_CTL_GEN2r_TRNSUM_SEL_EMUXf_SET(r,f) (r).dsc_trnsum_ctl_gen2[0]=(((r).dsc_trnsum_ctl_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_DSC_TRNSUM_CTL_GEN2r_TRNSUM_GAINf_GET(r) (((r).dsc_trnsum_ctl_gen2[0]) & 0x3)
#define BCMI_TSCF_XGXS_DSC_TRNSUM_CTL_GEN2r_TRNSUM_GAINf_SET(r,f) (r).dsc_trnsum_ctl_gen2[0]=(((r).dsc_trnsum_ctl_gen2[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access DSC_TRNSUM_CTL_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_TRNSUM_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_CTL_GEN2r,(_r._dsc_trnsum_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_TRNSUM_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_CTL_GEN2r,(_r._dsc_trnsum_ctl_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_TRNSUM_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_CTL_GEN2r,(_r._dsc_trnsum_ctl_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_TRNSUM_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_TRNSUM_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_TRNSUM_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_trnsum_ctl_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_TRNSUM_CTL_GEN2r BCMI_TSCF_XGXS_DSC_TRNSUM_CTL_GEN2r
#define DSC_TRNSUM_CTL_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_TRNSUM_CTL_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_TRNSUM_CTL_GEN2r_t DSC_TRNSUM_CTL_GEN2r_t;
#define DSC_TRNSUM_CTL_GEN2r_CLR BCMI_TSCF_XGXS_DSC_TRNSUM_CTL_GEN2r_CLR
#define DSC_TRNSUM_CTL_GEN2r_SET BCMI_TSCF_XGXS_DSC_TRNSUM_CTL_GEN2r_SET
#define DSC_TRNSUM_CTL_GEN2r_GET BCMI_TSCF_XGXS_DSC_TRNSUM_CTL_GEN2r_GET
#define DSC_TRNSUM_CTL_GEN2r_TRNSUM_ENf_GET BCMI_TSCF_XGXS_DSC_TRNSUM_CTL_GEN2r_TRNSUM_ENf_GET
#define DSC_TRNSUM_CTL_GEN2r_TRNSUM_ENf_SET BCMI_TSCF_XGXS_DSC_TRNSUM_CTL_GEN2r_TRNSUM_ENf_SET
#define DSC_TRNSUM_CTL_GEN2r_TRNSUM_EYE_CLOSURE_ENf_GET BCMI_TSCF_XGXS_DSC_TRNSUM_CTL_GEN2r_TRNSUM_EYE_CLOSURE_ENf_GET
#define DSC_TRNSUM_CTL_GEN2r_TRNSUM_EYE_CLOSURE_ENf_SET BCMI_TSCF_XGXS_DSC_TRNSUM_CTL_GEN2r_TRNSUM_EYE_CLOSURE_ENf_SET
#define DSC_TRNSUM_CTL_GEN2r_TRNSUM_RANDOM_TAPSEL_DISABLEf_GET BCMI_TSCF_XGXS_DSC_TRNSUM_CTL_GEN2r_TRNSUM_RANDOM_TAPSEL_DISABLEf_GET
#define DSC_TRNSUM_CTL_GEN2r_TRNSUM_RANDOM_TAPSEL_DISABLEf_SET BCMI_TSCF_XGXS_DSC_TRNSUM_CTL_GEN2r_TRNSUM_RANDOM_TAPSEL_DISABLEf_SET
#define DSC_TRNSUM_CTL_GEN2r_TRNSUM_QPHASE_MULT_ENf_GET BCMI_TSCF_XGXS_DSC_TRNSUM_CTL_GEN2r_TRNSUM_QPHASE_MULT_ENf_GET
#define DSC_TRNSUM_CTL_GEN2r_TRNSUM_QPHASE_MULT_ENf_SET BCMI_TSCF_XGXS_DSC_TRNSUM_CTL_GEN2r_TRNSUM_QPHASE_MULT_ENf_SET
#define DSC_TRNSUM_CTL_GEN2r_TRNSUM_COR_SELf_GET BCMI_TSCF_XGXS_DSC_TRNSUM_CTL_GEN2r_TRNSUM_COR_SELf_GET
#define DSC_TRNSUM_CTL_GEN2r_TRNSUM_COR_SELf_SET BCMI_TSCF_XGXS_DSC_TRNSUM_CTL_GEN2r_TRNSUM_COR_SELf_SET
#define DSC_TRNSUM_CTL_GEN2r_TRNSUM_TAP_RANGE_SELf_GET BCMI_TSCF_XGXS_DSC_TRNSUM_CTL_GEN2r_TRNSUM_TAP_RANGE_SELf_GET
#define DSC_TRNSUM_CTL_GEN2r_TRNSUM_TAP_RANGE_SELf_SET BCMI_TSCF_XGXS_DSC_TRNSUM_CTL_GEN2r_TRNSUM_TAP_RANGE_SELf_SET
#define DSC_TRNSUM_CTL_GEN2r_TRNSUM_SEL_EMUXf_GET BCMI_TSCF_XGXS_DSC_TRNSUM_CTL_GEN2r_TRNSUM_SEL_EMUXf_GET
#define DSC_TRNSUM_CTL_GEN2r_TRNSUM_SEL_EMUXf_SET BCMI_TSCF_XGXS_DSC_TRNSUM_CTL_GEN2r_TRNSUM_SEL_EMUXf_SET
#define DSC_TRNSUM_CTL_GEN2r_TRNSUM_GAINf_GET BCMI_TSCF_XGXS_DSC_TRNSUM_CTL_GEN2r_TRNSUM_GAINf_GET
#define DSC_TRNSUM_CTL_GEN2r_TRNSUM_GAINf_SET BCMI_TSCF_XGXS_DSC_TRNSUM_CTL_GEN2r_TRNSUM_GAINf_SET
#define READ_DSC_TRNSUM_CTL_GEN2r BCMI_TSCF_XGXS_READ_DSC_TRNSUM_CTL_GEN2r
#define WRITE_DSC_TRNSUM_CTL_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_TRNSUM_CTL_GEN2r
#define MODIFY_DSC_TRNSUM_CTL_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_TRNSUM_CTL_GEN2r
#define READLN_DSC_TRNSUM_CTL_GEN2r BCMI_TSCF_XGXS_READLN_DSC_TRNSUM_CTL_GEN2r
#define WRITELN_DSC_TRNSUM_CTL_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_TRNSUM_CTL_GEN2r
#define WRITEALL_DSC_TRNSUM_CTL_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_TRNSUM_CTL_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_TRNSUM_CTL_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_TRNSUM_PAT_CTL_1_GEN2
 * BLOCKS:   DSC_C
 * REGADDR:  0xd056
 * DEVAD:    1
 * DESC:     trnsum pattern control 1 register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TRNSUM_PATTERN   pattern to be compared
 *     TRNSUM_PATTERN_FULL_CHECK_OFF enables pattern matching
 *     TRNSUM_EDGE_PATTERN_EN enables pattern matching on edges {-6,-5,-4,-3,-2,-1,data,0,1,2} where a number (eg: -4) represents an edge between d[-4] and d[-3]
 *     TRNSUM_INV_PATTERN_EN enables inverted pattern matching
 */
#define BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_1_GEN2r (0x0001d056 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_TRNSUM_PAT_CTL_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_1_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_trnsum_pat_ctl_1_gen2[1];
	uint32_t _dsc_trnsum_pat_ctl_1_gen2;
} BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_1_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_1_GEN2r_CLR(r) (r).dsc_trnsum_pat_ctl_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_1_GEN2r_SET(r,d) (r).dsc_trnsum_pat_ctl_1_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_1_GEN2r_GET(r) (r).dsc_trnsum_pat_ctl_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_1_GEN2r_TRNSUM_INV_PATTERN_ENf_GET(r) ((((r).dsc_trnsum_pat_ctl_1_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_1_GEN2r_TRNSUM_INV_PATTERN_ENf_SET(r,f) (r).dsc_trnsum_pat_ctl_1_gen2[0]=(((r).dsc_trnsum_pat_ctl_1_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_1_GEN2r_TRNSUM_EDGE_PATTERN_ENf_GET(r) ((((r).dsc_trnsum_pat_ctl_1_gen2[0]) >> 14) & 0x1)
#define BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_1_GEN2r_TRNSUM_EDGE_PATTERN_ENf_SET(r,f) (r).dsc_trnsum_pat_ctl_1_gen2[0]=(((r).dsc_trnsum_pat_ctl_1_gen2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_1_GEN2r_TRNSUM_PATTERN_FULL_CHECK_OFFf_GET(r) ((((r).dsc_trnsum_pat_ctl_1_gen2[0]) >> 12) & 0x1)
#define BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_1_GEN2r_TRNSUM_PATTERN_FULL_CHECK_OFFf_SET(r,f) (r).dsc_trnsum_pat_ctl_1_gen2[0]=(((r).dsc_trnsum_pat_ctl_1_gen2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_1_GEN2r_TRNSUM_PATTERNf_GET(r) (((r).dsc_trnsum_pat_ctl_1_gen2[0]) & 0x3ff)
#define BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_1_GEN2r_TRNSUM_PATTERNf_SET(r,f) (r).dsc_trnsum_pat_ctl_1_gen2[0]=(((r).dsc_trnsum_pat_ctl_1_gen2[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff)) | (0x3ff << 16)

/*
 * These macros can be used to access DSC_TRNSUM_PAT_CTL_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_TRNSUM_PAT_CTL_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_1_GEN2r,(_r._dsc_trnsum_pat_ctl_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_TRNSUM_PAT_CTL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_1_GEN2r,(_r._dsc_trnsum_pat_ctl_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_TRNSUM_PAT_CTL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_1_GEN2r,(_r._dsc_trnsum_pat_ctl_1_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_TRNSUM_PAT_CTL_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_pat_ctl_1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_TRNSUM_PAT_CTL_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_pat_ctl_1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_TRNSUM_PAT_CTL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_trnsum_pat_ctl_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_TRNSUM_PAT_CTL_1_GEN2r BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_1_GEN2r
#define DSC_TRNSUM_PAT_CTL_1_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_1_GEN2r_t DSC_TRNSUM_PAT_CTL_1_GEN2r_t;
#define DSC_TRNSUM_PAT_CTL_1_GEN2r_CLR BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_1_GEN2r_CLR
#define DSC_TRNSUM_PAT_CTL_1_GEN2r_SET BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_1_GEN2r_SET
#define DSC_TRNSUM_PAT_CTL_1_GEN2r_GET BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_1_GEN2r_GET
#define DSC_TRNSUM_PAT_CTL_1_GEN2r_TRNSUM_INV_PATTERN_ENf_GET BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_1_GEN2r_TRNSUM_INV_PATTERN_ENf_GET
#define DSC_TRNSUM_PAT_CTL_1_GEN2r_TRNSUM_INV_PATTERN_ENf_SET BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_1_GEN2r_TRNSUM_INV_PATTERN_ENf_SET
#define DSC_TRNSUM_PAT_CTL_1_GEN2r_TRNSUM_EDGE_PATTERN_ENf_GET BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_1_GEN2r_TRNSUM_EDGE_PATTERN_ENf_GET
#define DSC_TRNSUM_PAT_CTL_1_GEN2r_TRNSUM_EDGE_PATTERN_ENf_SET BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_1_GEN2r_TRNSUM_EDGE_PATTERN_ENf_SET
#define DSC_TRNSUM_PAT_CTL_1_GEN2r_TRNSUM_PATTERN_FULL_CHECK_OFFf_GET BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_1_GEN2r_TRNSUM_PATTERN_FULL_CHECK_OFFf_GET
#define DSC_TRNSUM_PAT_CTL_1_GEN2r_TRNSUM_PATTERN_FULL_CHECK_OFFf_SET BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_1_GEN2r_TRNSUM_PATTERN_FULL_CHECK_OFFf_SET
#define DSC_TRNSUM_PAT_CTL_1_GEN2r_TRNSUM_PATTERNf_GET BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_1_GEN2r_TRNSUM_PATTERNf_GET
#define DSC_TRNSUM_PAT_CTL_1_GEN2r_TRNSUM_PATTERNf_SET BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_1_GEN2r_TRNSUM_PATTERNf_SET
#define READ_DSC_TRNSUM_PAT_CTL_1_GEN2r BCMI_TSCF_XGXS_READ_DSC_TRNSUM_PAT_CTL_1_GEN2r
#define WRITE_DSC_TRNSUM_PAT_CTL_1_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_TRNSUM_PAT_CTL_1_GEN2r
#define MODIFY_DSC_TRNSUM_PAT_CTL_1_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_TRNSUM_PAT_CTL_1_GEN2r
#define READLN_DSC_TRNSUM_PAT_CTL_1_GEN2r BCMI_TSCF_XGXS_READLN_DSC_TRNSUM_PAT_CTL_1_GEN2r
#define WRITELN_DSC_TRNSUM_PAT_CTL_1_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_TRNSUM_PAT_CTL_1_GEN2r
#define WRITEALL_DSC_TRNSUM_PAT_CTL_1_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_TRNSUM_PAT_CTL_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_TRNSUM_PAT_CTL_2_GEN2
 * BLOCKS:   DSC_C
 * REGADDR:  0xd057
 * DEVAD:    1
 * DESC:     trnsum pattern control 2 register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TRNSUM_PATTERN_BIT_EN pattern mask
 */
#define BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_2_GEN2r (0x0001d057 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_TRNSUM_PAT_CTL_2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_2_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_trnsum_pat_ctl_2_gen2[1];
	uint32_t _dsc_trnsum_pat_ctl_2_gen2;
} BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_2_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_2_GEN2r_CLR(r) (r).dsc_trnsum_pat_ctl_2_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_2_GEN2r_SET(r,d) (r).dsc_trnsum_pat_ctl_2_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_2_GEN2r_GET(r) (r).dsc_trnsum_pat_ctl_2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_2_GEN2r_TRNSUM_PATTERN_BIT_ENf_GET(r) (((r).dsc_trnsum_pat_ctl_2_gen2[0]) & 0x3ff)
#define BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_2_GEN2r_TRNSUM_PATTERN_BIT_ENf_SET(r,f) (r).dsc_trnsum_pat_ctl_2_gen2[0]=(((r).dsc_trnsum_pat_ctl_2_gen2[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff)) | (0x3ff << 16)

/*
 * These macros can be used to access DSC_TRNSUM_PAT_CTL_2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_TRNSUM_PAT_CTL_2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_2_GEN2r,(_r._dsc_trnsum_pat_ctl_2_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_TRNSUM_PAT_CTL_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_2_GEN2r,(_r._dsc_trnsum_pat_ctl_2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_TRNSUM_PAT_CTL_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_2_GEN2r,(_r._dsc_trnsum_pat_ctl_2_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_TRNSUM_PAT_CTL_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_pat_ctl_2_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_TRNSUM_PAT_CTL_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_pat_ctl_2_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_TRNSUM_PAT_CTL_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_trnsum_pat_ctl_2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_TRNSUM_PAT_CTL_2_GEN2r BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_2_GEN2r
#define DSC_TRNSUM_PAT_CTL_2_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_2_GEN2r_t DSC_TRNSUM_PAT_CTL_2_GEN2r_t;
#define DSC_TRNSUM_PAT_CTL_2_GEN2r_CLR BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_2_GEN2r_CLR
#define DSC_TRNSUM_PAT_CTL_2_GEN2r_SET BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_2_GEN2r_SET
#define DSC_TRNSUM_PAT_CTL_2_GEN2r_GET BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_2_GEN2r_GET
#define DSC_TRNSUM_PAT_CTL_2_GEN2r_TRNSUM_PATTERN_BIT_ENf_GET BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_2_GEN2r_TRNSUM_PATTERN_BIT_ENf_GET
#define DSC_TRNSUM_PAT_CTL_2_GEN2r_TRNSUM_PATTERN_BIT_ENf_SET BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_2_GEN2r_TRNSUM_PATTERN_BIT_ENf_SET
#define READ_DSC_TRNSUM_PAT_CTL_2_GEN2r BCMI_TSCF_XGXS_READ_DSC_TRNSUM_PAT_CTL_2_GEN2r
#define WRITE_DSC_TRNSUM_PAT_CTL_2_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_TRNSUM_PAT_CTL_2_GEN2r
#define MODIFY_DSC_TRNSUM_PAT_CTL_2_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_TRNSUM_PAT_CTL_2_GEN2r
#define READLN_DSC_TRNSUM_PAT_CTL_2_GEN2r BCMI_TSCF_XGXS_READLN_DSC_TRNSUM_PAT_CTL_2_GEN2r
#define WRITELN_DSC_TRNSUM_PAT_CTL_2_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_TRNSUM_PAT_CTL_2_GEN2r
#define WRITEALL_DSC_TRNSUM_PAT_CTL_2_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_TRNSUM_PAT_CTL_2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_TRNSUM_PAT_CTL_2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_TRNSUM_TAP_CTL_GEN2
 * BLOCKS:   DSC_C
 * REGADDR:  0xd058
 * DEVAD:    1
 * DESC:     trnsum tap control register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TRNSUM_TAP_EN    Training taps enabled (either randomize over                        them or not)
 *     TRNSUM_TAP_SIGN  Sign of the 8 taps in the group
 */
#define BCMI_TSCF_XGXS_DSC_TRNSUM_TAP_CTL_GEN2r (0x0001d058 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_TRNSUM_TAP_CTL_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_TRNSUM_TAP_CTL_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_TRNSUM_TAP_CTL_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_trnsum_tap_ctl_gen2[1];
	uint32_t _dsc_trnsum_tap_ctl_gen2;
} BCMI_TSCF_XGXS_DSC_TRNSUM_TAP_CTL_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_TRNSUM_TAP_CTL_GEN2r_CLR(r) (r).dsc_trnsum_tap_ctl_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_TRNSUM_TAP_CTL_GEN2r_SET(r,d) (r).dsc_trnsum_tap_ctl_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_TRNSUM_TAP_CTL_GEN2r_GET(r) (r).dsc_trnsum_tap_ctl_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_TRNSUM_TAP_CTL_GEN2r_TRNSUM_TAP_SIGNf_GET(r) ((((r).dsc_trnsum_tap_ctl_gen2[0]) >> 8) & 0xff)
#define BCMI_TSCF_XGXS_DSC_TRNSUM_TAP_CTL_GEN2r_TRNSUM_TAP_SIGNf_SET(r,f) (r).dsc_trnsum_tap_ctl_gen2[0]=(((r).dsc_trnsum_tap_ctl_gen2[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_TSCF_XGXS_DSC_TRNSUM_TAP_CTL_GEN2r_TRNSUM_TAP_ENf_GET(r) (((r).dsc_trnsum_tap_ctl_gen2[0]) & 0xff)
#define BCMI_TSCF_XGXS_DSC_TRNSUM_TAP_CTL_GEN2r_TRNSUM_TAP_ENf_SET(r,f) (r).dsc_trnsum_tap_ctl_gen2[0]=(((r).dsc_trnsum_tap_ctl_gen2[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access DSC_TRNSUM_TAP_CTL_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_TRNSUM_TAP_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_TAP_CTL_GEN2r,(_r._dsc_trnsum_tap_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_TRNSUM_TAP_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_TAP_CTL_GEN2r,(_r._dsc_trnsum_tap_ctl_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_TRNSUM_TAP_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_TAP_CTL_GEN2r,(_r._dsc_trnsum_tap_ctl_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_TRNSUM_TAP_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_TAP_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_tap_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_TRNSUM_TAP_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_TAP_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_tap_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_TRNSUM_TAP_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_TAP_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_trnsum_tap_ctl_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_TRNSUM_TAP_CTL_GEN2r BCMI_TSCF_XGXS_DSC_TRNSUM_TAP_CTL_GEN2r
#define DSC_TRNSUM_TAP_CTL_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_TRNSUM_TAP_CTL_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_TRNSUM_TAP_CTL_GEN2r_t DSC_TRNSUM_TAP_CTL_GEN2r_t;
#define DSC_TRNSUM_TAP_CTL_GEN2r_CLR BCMI_TSCF_XGXS_DSC_TRNSUM_TAP_CTL_GEN2r_CLR
#define DSC_TRNSUM_TAP_CTL_GEN2r_SET BCMI_TSCF_XGXS_DSC_TRNSUM_TAP_CTL_GEN2r_SET
#define DSC_TRNSUM_TAP_CTL_GEN2r_GET BCMI_TSCF_XGXS_DSC_TRNSUM_TAP_CTL_GEN2r_GET
#define DSC_TRNSUM_TAP_CTL_GEN2r_TRNSUM_TAP_SIGNf_GET BCMI_TSCF_XGXS_DSC_TRNSUM_TAP_CTL_GEN2r_TRNSUM_TAP_SIGNf_GET
#define DSC_TRNSUM_TAP_CTL_GEN2r_TRNSUM_TAP_SIGNf_SET BCMI_TSCF_XGXS_DSC_TRNSUM_TAP_CTL_GEN2r_TRNSUM_TAP_SIGNf_SET
#define DSC_TRNSUM_TAP_CTL_GEN2r_TRNSUM_TAP_ENf_GET BCMI_TSCF_XGXS_DSC_TRNSUM_TAP_CTL_GEN2r_TRNSUM_TAP_ENf_GET
#define DSC_TRNSUM_TAP_CTL_GEN2r_TRNSUM_TAP_ENf_SET BCMI_TSCF_XGXS_DSC_TRNSUM_TAP_CTL_GEN2r_TRNSUM_TAP_ENf_SET
#define READ_DSC_TRNSUM_TAP_CTL_GEN2r BCMI_TSCF_XGXS_READ_DSC_TRNSUM_TAP_CTL_GEN2r
#define WRITE_DSC_TRNSUM_TAP_CTL_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_TRNSUM_TAP_CTL_GEN2r
#define MODIFY_DSC_TRNSUM_TAP_CTL_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_TRNSUM_TAP_CTL_GEN2r
#define READLN_DSC_TRNSUM_TAP_CTL_GEN2r BCMI_TSCF_XGXS_READLN_DSC_TRNSUM_TAP_CTL_GEN2r
#define WRITELN_DSC_TRNSUM_TAP_CTL_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_TRNSUM_TAP_CTL_GEN2r
#define WRITEALL_DSC_TRNSUM_TAP_CTL_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_TRNSUM_TAP_CTL_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_TRNSUM_TAP_CTL_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_TRNSUM_TDT_CTL_GEN2
 * BLOCKS:   DSC_C
 * REGADDR:  0xd059
 * DEVAD:    1
 * DESC:     trnsum tdt control register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TDT_BIT_SEL      tdt bit select: range is 0 to 39
 *     TDT_PRBS_MODE    enables selection of every 511th bit or 127th bitIf tdt_cycle_sel[0] = 0, then it wraps @ 127, else @ 511
 *     TDT_TRNSUM_EN    enables the tdt featureAt no point should this be disabled in the middle of collecting data over multiple locations.The counters which figure out which cycle to select while this bit is 1.
 *     TDT_CYCLE_SEL    the cycle counter wraps at this number
 *     TDT_CYCLE_BIN    valid range: from 0 to tdt_cycle_sel; this cycle the tdt is enabled on bit indicated by tdt_bit_sel
 */
#define BCMI_TSCF_XGXS_DSC_TRNSUM_TDT_CTL_GEN2r (0x0001d059 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_TRNSUM_TDT_CTL_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_TRNSUM_TDT_CTL_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_TRNSUM_TDT_CTL_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_trnsum_tdt_ctl_gen2[1];
	uint32_t _dsc_trnsum_tdt_ctl_gen2;
} BCMI_TSCF_XGXS_DSC_TRNSUM_TDT_CTL_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_TRNSUM_TDT_CTL_GEN2r_CLR(r) (r).dsc_trnsum_tdt_ctl_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_TRNSUM_TDT_CTL_GEN2r_SET(r,d) (r).dsc_trnsum_tdt_ctl_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_TRNSUM_TDT_CTL_GEN2r_GET(r) (r).dsc_trnsum_tdt_ctl_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_TRNSUM_TDT_CTL_GEN2r_TDT_CYCLE_BINf_GET(r) ((((r).dsc_trnsum_tdt_ctl_gen2[0]) >> 12) & 0xf)
#define BCMI_TSCF_XGXS_DSC_TRNSUM_TDT_CTL_GEN2r_TDT_CYCLE_BINf_SET(r,f) (r).dsc_trnsum_tdt_ctl_gen2[0]=(((r).dsc_trnsum_tdt_ctl_gen2[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_TSCF_XGXS_DSC_TRNSUM_TDT_CTL_GEN2r_TDT_CYCLE_SELf_GET(r) ((((r).dsc_trnsum_tdt_ctl_gen2[0]) >> 8) & 0xf)
#define BCMI_TSCF_XGXS_DSC_TRNSUM_TDT_CTL_GEN2r_TDT_CYCLE_SELf_SET(r,f) (r).dsc_trnsum_tdt_ctl_gen2[0]=(((r).dsc_trnsum_tdt_ctl_gen2[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_XGXS_DSC_TRNSUM_TDT_CTL_GEN2r_TDT_TRNSUM_ENf_GET(r) ((((r).dsc_trnsum_tdt_ctl_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_DSC_TRNSUM_TDT_CTL_GEN2r_TDT_TRNSUM_ENf_SET(r,f) (r).dsc_trnsum_tdt_ctl_gen2[0]=(((r).dsc_trnsum_tdt_ctl_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_DSC_TRNSUM_TDT_CTL_GEN2r_TDT_PRBS_MODEf_GET(r) ((((r).dsc_trnsum_tdt_ctl_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_DSC_TRNSUM_TDT_CTL_GEN2r_TDT_PRBS_MODEf_SET(r,f) (r).dsc_trnsum_tdt_ctl_gen2[0]=(((r).dsc_trnsum_tdt_ctl_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_DSC_TRNSUM_TDT_CTL_GEN2r_TDT_BIT_SELf_GET(r) (((r).dsc_trnsum_tdt_ctl_gen2[0]) & 0x3f)
#define BCMI_TSCF_XGXS_DSC_TRNSUM_TDT_CTL_GEN2r_TDT_BIT_SELf_SET(r,f) (r).dsc_trnsum_tdt_ctl_gen2[0]=(((r).dsc_trnsum_tdt_ctl_gen2[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access DSC_TRNSUM_TDT_CTL_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_TRNSUM_TDT_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_TDT_CTL_GEN2r,(_r._dsc_trnsum_tdt_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_TRNSUM_TDT_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_TDT_CTL_GEN2r,(_r._dsc_trnsum_tdt_ctl_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_TRNSUM_TDT_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_TDT_CTL_GEN2r,(_r._dsc_trnsum_tdt_ctl_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_TRNSUM_TDT_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_TDT_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_tdt_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_TRNSUM_TDT_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_TDT_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_tdt_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_TRNSUM_TDT_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_TDT_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_trnsum_tdt_ctl_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_TRNSUM_TDT_CTL_GEN2r BCMI_TSCF_XGXS_DSC_TRNSUM_TDT_CTL_GEN2r
#define DSC_TRNSUM_TDT_CTL_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_TRNSUM_TDT_CTL_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_TRNSUM_TDT_CTL_GEN2r_t DSC_TRNSUM_TDT_CTL_GEN2r_t;
#define DSC_TRNSUM_TDT_CTL_GEN2r_CLR BCMI_TSCF_XGXS_DSC_TRNSUM_TDT_CTL_GEN2r_CLR
#define DSC_TRNSUM_TDT_CTL_GEN2r_SET BCMI_TSCF_XGXS_DSC_TRNSUM_TDT_CTL_GEN2r_SET
#define DSC_TRNSUM_TDT_CTL_GEN2r_GET BCMI_TSCF_XGXS_DSC_TRNSUM_TDT_CTL_GEN2r_GET
#define DSC_TRNSUM_TDT_CTL_GEN2r_TDT_CYCLE_BINf_GET BCMI_TSCF_XGXS_DSC_TRNSUM_TDT_CTL_GEN2r_TDT_CYCLE_BINf_GET
#define DSC_TRNSUM_TDT_CTL_GEN2r_TDT_CYCLE_BINf_SET BCMI_TSCF_XGXS_DSC_TRNSUM_TDT_CTL_GEN2r_TDT_CYCLE_BINf_SET
#define DSC_TRNSUM_TDT_CTL_GEN2r_TDT_CYCLE_SELf_GET BCMI_TSCF_XGXS_DSC_TRNSUM_TDT_CTL_GEN2r_TDT_CYCLE_SELf_GET
#define DSC_TRNSUM_TDT_CTL_GEN2r_TDT_CYCLE_SELf_SET BCMI_TSCF_XGXS_DSC_TRNSUM_TDT_CTL_GEN2r_TDT_CYCLE_SELf_SET
#define DSC_TRNSUM_TDT_CTL_GEN2r_TDT_TRNSUM_ENf_GET BCMI_TSCF_XGXS_DSC_TRNSUM_TDT_CTL_GEN2r_TDT_TRNSUM_ENf_GET
#define DSC_TRNSUM_TDT_CTL_GEN2r_TDT_TRNSUM_ENf_SET BCMI_TSCF_XGXS_DSC_TRNSUM_TDT_CTL_GEN2r_TDT_TRNSUM_ENf_SET
#define DSC_TRNSUM_TDT_CTL_GEN2r_TDT_PRBS_MODEf_GET BCMI_TSCF_XGXS_DSC_TRNSUM_TDT_CTL_GEN2r_TDT_PRBS_MODEf_GET
#define DSC_TRNSUM_TDT_CTL_GEN2r_TDT_PRBS_MODEf_SET BCMI_TSCF_XGXS_DSC_TRNSUM_TDT_CTL_GEN2r_TDT_PRBS_MODEf_SET
#define DSC_TRNSUM_TDT_CTL_GEN2r_TDT_BIT_SELf_GET BCMI_TSCF_XGXS_DSC_TRNSUM_TDT_CTL_GEN2r_TDT_BIT_SELf_GET
#define DSC_TRNSUM_TDT_CTL_GEN2r_TDT_BIT_SELf_SET BCMI_TSCF_XGXS_DSC_TRNSUM_TDT_CTL_GEN2r_TDT_BIT_SELf_SET
#define READ_DSC_TRNSUM_TDT_CTL_GEN2r BCMI_TSCF_XGXS_READ_DSC_TRNSUM_TDT_CTL_GEN2r
#define WRITE_DSC_TRNSUM_TDT_CTL_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_TRNSUM_TDT_CTL_GEN2r
#define MODIFY_DSC_TRNSUM_TDT_CTL_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_TRNSUM_TDT_CTL_GEN2r
#define READLN_DSC_TRNSUM_TDT_CTL_GEN2r BCMI_TSCF_XGXS_READLN_DSC_TRNSUM_TDT_CTL_GEN2r
#define WRITELN_DSC_TRNSUM_TDT_CTL_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_TRNSUM_TDT_CTL_GEN2r
#define WRITEALL_DSC_TRNSUM_TDT_CTL_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_TRNSUM_TDT_CTL_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_TRNSUM_TDT_CTL_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_TRNSUM_MISC_GEN2
 * BLOCKS:   DSC_C
 * REGADDR:  0xd05a
 * DEVAD:    1
 * DESC:     trnsum misc register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TDT_PRBS_SLIP    tdt bit select: range is 0 to 39self clearing
 *     CDR_1G_TRNSUM_EN Enables accumulation of 1G CDR phase step.This logic is only supported in the repeater application - controlled by a strap bit @ kernel
 */
#define BCMI_TSCF_XGXS_DSC_TRNSUM_MISC_GEN2r (0x0001d05a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_TRNSUM_MISC_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_TRNSUM_MISC_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_TRNSUM_MISC_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_trnsum_misc_gen2[1];
	uint32_t _dsc_trnsum_misc_gen2;
} BCMI_TSCF_XGXS_DSC_TRNSUM_MISC_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_TRNSUM_MISC_GEN2r_CLR(r) (r).dsc_trnsum_misc_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_TRNSUM_MISC_GEN2r_SET(r,d) (r).dsc_trnsum_misc_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_TRNSUM_MISC_GEN2r_GET(r) (r).dsc_trnsum_misc_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_TRNSUM_MISC_GEN2r_CDR_1G_TRNSUM_ENf_GET(r) ((((r).dsc_trnsum_misc_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_DSC_TRNSUM_MISC_GEN2r_CDR_1G_TRNSUM_ENf_SET(r,f) (r).dsc_trnsum_misc_gen2[0]=(((r).dsc_trnsum_misc_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_DSC_TRNSUM_MISC_GEN2r_TDT_PRBS_SLIPf_GET(r) (((r).dsc_trnsum_misc_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_DSC_TRNSUM_MISC_GEN2r_TDT_PRBS_SLIPf_SET(r,f) (r).dsc_trnsum_misc_gen2[0]=(((r).dsc_trnsum_misc_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access DSC_TRNSUM_MISC_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_TRNSUM_MISC_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_MISC_GEN2r,(_r._dsc_trnsum_misc_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_TRNSUM_MISC_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_MISC_GEN2r,(_r._dsc_trnsum_misc_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_TRNSUM_MISC_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_MISC_GEN2r,(_r._dsc_trnsum_misc_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_TRNSUM_MISC_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_MISC_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_misc_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_TRNSUM_MISC_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_MISC_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_trnsum_misc_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_TRNSUM_MISC_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_TRNSUM_MISC_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_trnsum_misc_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_TRNSUM_MISC_GEN2r BCMI_TSCF_XGXS_DSC_TRNSUM_MISC_GEN2r
#define DSC_TRNSUM_MISC_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_TRNSUM_MISC_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_TRNSUM_MISC_GEN2r_t DSC_TRNSUM_MISC_GEN2r_t;
#define DSC_TRNSUM_MISC_GEN2r_CLR BCMI_TSCF_XGXS_DSC_TRNSUM_MISC_GEN2r_CLR
#define DSC_TRNSUM_MISC_GEN2r_SET BCMI_TSCF_XGXS_DSC_TRNSUM_MISC_GEN2r_SET
#define DSC_TRNSUM_MISC_GEN2r_GET BCMI_TSCF_XGXS_DSC_TRNSUM_MISC_GEN2r_GET
#define DSC_TRNSUM_MISC_GEN2r_CDR_1G_TRNSUM_ENf_GET BCMI_TSCF_XGXS_DSC_TRNSUM_MISC_GEN2r_CDR_1G_TRNSUM_ENf_GET
#define DSC_TRNSUM_MISC_GEN2r_CDR_1G_TRNSUM_ENf_SET BCMI_TSCF_XGXS_DSC_TRNSUM_MISC_GEN2r_CDR_1G_TRNSUM_ENf_SET
#define DSC_TRNSUM_MISC_GEN2r_TDT_PRBS_SLIPf_GET BCMI_TSCF_XGXS_DSC_TRNSUM_MISC_GEN2r_TDT_PRBS_SLIPf_GET
#define DSC_TRNSUM_MISC_GEN2r_TDT_PRBS_SLIPf_SET BCMI_TSCF_XGXS_DSC_TRNSUM_MISC_GEN2r_TDT_PRBS_SLIPf_SET
#define READ_DSC_TRNSUM_MISC_GEN2r BCMI_TSCF_XGXS_READ_DSC_TRNSUM_MISC_GEN2r
#define WRITE_DSC_TRNSUM_MISC_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_TRNSUM_MISC_GEN2r
#define MODIFY_DSC_TRNSUM_MISC_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_TRNSUM_MISC_GEN2r
#define READLN_DSC_TRNSUM_MISC_GEN2r BCMI_TSCF_XGXS_READLN_DSC_TRNSUM_MISC_GEN2r
#define WRITELN_DSC_TRNSUM_MISC_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_TRNSUM_MISC_GEN2r
#define WRITEALL_DSC_TRNSUM_MISC_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_TRNSUM_MISC_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_TRNSUM_MISC_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_VGA_CTL_1_GEN2
 * BLOCKS:   DSC_C
 * REGADDR:  0xd05c
 * DEVAD:    1
 * DESC:     vga block control register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     VGA_TIMER_T2     VGA timed write. Wait for  (1,2, ...8) cycles
 *     UC_TRNSUM_EN     1'b1 will move the state from UC_TUNE to MEASURE. This is a self-clear register bit.
 *     DC_OFFS_WRITE_EN self clearing dc offset write strobe
 *     VGA_DEC          self clearing vga dec
 *     VGA_INC          self clearing vga inc
 *     RX_VGA_CTRL_VAL  override val of vga
 *     VGA_WRITE        strobe to write VGA values
 */
#define BCMI_TSCF_XGXS_DSC_VGA_CTL_1_GEN2r (0x0001d05c | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_VGA_CTL_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_VGA_CTL_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_VGA_CTL_1_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_vga_ctl_1_gen2[1];
	uint32_t _dsc_vga_ctl_1_gen2;
} BCMI_TSCF_XGXS_DSC_VGA_CTL_1_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_VGA_CTL_1_GEN2r_CLR(r) (r).dsc_vga_ctl_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_VGA_CTL_1_GEN2r_SET(r,d) (r).dsc_vga_ctl_1_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_VGA_CTL_1_GEN2r_GET(r) (r).dsc_vga_ctl_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_VGA_CTL_1_GEN2r_VGA_WRITEf_GET(r) ((((r).dsc_vga_ctl_1_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_DSC_VGA_CTL_1_GEN2r_VGA_WRITEf_SET(r,f) (r).dsc_vga_ctl_1_gen2[0]=(((r).dsc_vga_ctl_1_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_DSC_VGA_CTL_1_GEN2r_RX_VGA_CTRL_VALf_GET(r) ((((r).dsc_vga_ctl_1_gen2[0]) >> 8) & 0x7f)
#define BCMI_TSCF_XGXS_DSC_VGA_CTL_1_GEN2r_RX_VGA_CTRL_VALf_SET(r,f) (r).dsc_vga_ctl_1_gen2[0]=(((r).dsc_vga_ctl_1_gen2[0] & ~((uint32_t)0x7f << 8)) | ((((uint32_t)f) & 0x7f) << 8)) | (127 << (16 + 8))
#define BCMI_TSCF_XGXS_DSC_VGA_CTL_1_GEN2r_VGA_INCf_GET(r) ((((r).dsc_vga_ctl_1_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_DSC_VGA_CTL_1_GEN2r_VGA_INCf_SET(r,f) (r).dsc_vga_ctl_1_gen2[0]=(((r).dsc_vga_ctl_1_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_DSC_VGA_CTL_1_GEN2r_VGA_DECf_GET(r) ((((r).dsc_vga_ctl_1_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_DSC_VGA_CTL_1_GEN2r_VGA_DECf_SET(r,f) (r).dsc_vga_ctl_1_gen2[0]=(((r).dsc_vga_ctl_1_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_DSC_VGA_CTL_1_GEN2r_DC_OFFS_WRITE_ENf_GET(r) ((((r).dsc_vga_ctl_1_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_DSC_VGA_CTL_1_GEN2r_DC_OFFS_WRITE_ENf_SET(r,f) (r).dsc_vga_ctl_1_gen2[0]=(((r).dsc_vga_ctl_1_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_DSC_VGA_CTL_1_GEN2r_UC_TRNSUM_ENf_GET(r) ((((r).dsc_vga_ctl_1_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_DSC_VGA_CTL_1_GEN2r_UC_TRNSUM_ENf_SET(r,f) (r).dsc_vga_ctl_1_gen2[0]=(((r).dsc_vga_ctl_1_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_DSC_VGA_CTL_1_GEN2r_VGA_TIMER_T2f_GET(r) (((r).dsc_vga_ctl_1_gen2[0]) & 0x7)
#define BCMI_TSCF_XGXS_DSC_VGA_CTL_1_GEN2r_VGA_TIMER_T2f_SET(r,f) (r).dsc_vga_ctl_1_gen2[0]=(((r).dsc_vga_ctl_1_gen2[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access DSC_VGA_CTL_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_VGA_CTL_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_VGA_CTL_1_GEN2r,(_r._dsc_vga_ctl_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_VGA_CTL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_VGA_CTL_1_GEN2r,(_r._dsc_vga_ctl_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_VGA_CTL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_VGA_CTL_1_GEN2r,(_r._dsc_vga_ctl_1_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_VGA_CTL_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_VGA_CTL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_vga_ctl_1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_VGA_CTL_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_VGA_CTL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_vga_ctl_1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_VGA_CTL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_VGA_CTL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_vga_ctl_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_VGA_CTL_1_GEN2r BCMI_TSCF_XGXS_DSC_VGA_CTL_1_GEN2r
#define DSC_VGA_CTL_1_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_VGA_CTL_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_VGA_CTL_1_GEN2r_t DSC_VGA_CTL_1_GEN2r_t;
#define DSC_VGA_CTL_1_GEN2r_CLR BCMI_TSCF_XGXS_DSC_VGA_CTL_1_GEN2r_CLR
#define DSC_VGA_CTL_1_GEN2r_SET BCMI_TSCF_XGXS_DSC_VGA_CTL_1_GEN2r_SET
#define DSC_VGA_CTL_1_GEN2r_GET BCMI_TSCF_XGXS_DSC_VGA_CTL_1_GEN2r_GET
#define DSC_VGA_CTL_1_GEN2r_VGA_WRITEf_GET BCMI_TSCF_XGXS_DSC_VGA_CTL_1_GEN2r_VGA_WRITEf_GET
#define DSC_VGA_CTL_1_GEN2r_VGA_WRITEf_SET BCMI_TSCF_XGXS_DSC_VGA_CTL_1_GEN2r_VGA_WRITEf_SET
#define DSC_VGA_CTL_1_GEN2r_RX_VGA_CTRL_VALf_GET BCMI_TSCF_XGXS_DSC_VGA_CTL_1_GEN2r_RX_VGA_CTRL_VALf_GET
#define DSC_VGA_CTL_1_GEN2r_RX_VGA_CTRL_VALf_SET BCMI_TSCF_XGXS_DSC_VGA_CTL_1_GEN2r_RX_VGA_CTRL_VALf_SET
#define DSC_VGA_CTL_1_GEN2r_VGA_INCf_GET BCMI_TSCF_XGXS_DSC_VGA_CTL_1_GEN2r_VGA_INCf_GET
#define DSC_VGA_CTL_1_GEN2r_VGA_INCf_SET BCMI_TSCF_XGXS_DSC_VGA_CTL_1_GEN2r_VGA_INCf_SET
#define DSC_VGA_CTL_1_GEN2r_VGA_DECf_GET BCMI_TSCF_XGXS_DSC_VGA_CTL_1_GEN2r_VGA_DECf_GET
#define DSC_VGA_CTL_1_GEN2r_VGA_DECf_SET BCMI_TSCF_XGXS_DSC_VGA_CTL_1_GEN2r_VGA_DECf_SET
#define DSC_VGA_CTL_1_GEN2r_DC_OFFS_WRITE_ENf_GET BCMI_TSCF_XGXS_DSC_VGA_CTL_1_GEN2r_DC_OFFS_WRITE_ENf_GET
#define DSC_VGA_CTL_1_GEN2r_DC_OFFS_WRITE_ENf_SET BCMI_TSCF_XGXS_DSC_VGA_CTL_1_GEN2r_DC_OFFS_WRITE_ENf_SET
#define DSC_VGA_CTL_1_GEN2r_UC_TRNSUM_ENf_GET BCMI_TSCF_XGXS_DSC_VGA_CTL_1_GEN2r_UC_TRNSUM_ENf_GET
#define DSC_VGA_CTL_1_GEN2r_UC_TRNSUM_ENf_SET BCMI_TSCF_XGXS_DSC_VGA_CTL_1_GEN2r_UC_TRNSUM_ENf_SET
#define DSC_VGA_CTL_1_GEN2r_VGA_TIMER_T2f_GET BCMI_TSCF_XGXS_DSC_VGA_CTL_1_GEN2r_VGA_TIMER_T2f_GET
#define DSC_VGA_CTL_1_GEN2r_VGA_TIMER_T2f_SET BCMI_TSCF_XGXS_DSC_VGA_CTL_1_GEN2r_VGA_TIMER_T2f_SET
#define READ_DSC_VGA_CTL_1_GEN2r BCMI_TSCF_XGXS_READ_DSC_VGA_CTL_1_GEN2r
#define WRITE_DSC_VGA_CTL_1_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_VGA_CTL_1_GEN2r
#define MODIFY_DSC_VGA_CTL_1_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_VGA_CTL_1_GEN2r
#define READLN_DSC_VGA_CTL_1_GEN2r BCMI_TSCF_XGXS_READLN_DSC_VGA_CTL_1_GEN2r
#define WRITELN_DSC_VGA_CTL_1_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_VGA_CTL_1_GEN2r
#define WRITEALL_DSC_VGA_CTL_1_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_VGA_CTL_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_VGA_CTL_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_DATA_SLCR_THR_CTL_GEN2
 * BLOCKS:   DSC_C
 * REGADDR:  0xd05d
 * DEVAD:    1
 * DESC:     data slicer threshold control register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     THRESH_TIMER_T1  1,2,3,4 - indicates how many cycles to wait for before applying an inc or dec
 *     THRESH_STEP_SIZE 1,2,3 - auto increment step size for threshold
 *     DATA_THRESH_SEL_VAL Override mode value
 *     DATA_THRESH_WRITE self clearing data thresh write (for override mode)
 */
#define BCMI_TSCF_XGXS_DSC_DATA_SLCR_THR_CTL_GEN2r (0x0001d05d | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_DATA_SLCR_THR_CTL_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_DATA_SLCR_THR_CTL_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_DATA_SLCR_THR_CTL_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_data_slcr_thr_ctl_gen2[1];
	uint32_t _dsc_data_slcr_thr_ctl_gen2;
} BCMI_TSCF_XGXS_DSC_DATA_SLCR_THR_CTL_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_DATA_SLCR_THR_CTL_GEN2r_CLR(r) (r).dsc_data_slcr_thr_ctl_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_DATA_SLCR_THR_CTL_GEN2r_SET(r,d) (r).dsc_data_slcr_thr_ctl_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_DATA_SLCR_THR_CTL_GEN2r_GET(r) (r).dsc_data_slcr_thr_ctl_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_DATA_SLCR_THR_CTL_GEN2r_DATA_THRESH_WRITEf_GET(r) ((((r).dsc_data_slcr_thr_ctl_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_DSC_DATA_SLCR_THR_CTL_GEN2r_DATA_THRESH_WRITEf_SET(r,f) (r).dsc_data_slcr_thr_ctl_gen2[0]=(((r).dsc_data_slcr_thr_ctl_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_DSC_DATA_SLCR_THR_CTL_GEN2r_DATA_THRESH_SEL_VALf_GET(r) ((((r).dsc_data_slcr_thr_ctl_gen2[0]) >> 8) & 0x7f)
#define BCMI_TSCF_XGXS_DSC_DATA_SLCR_THR_CTL_GEN2r_DATA_THRESH_SEL_VALf_SET(r,f) (r).dsc_data_slcr_thr_ctl_gen2[0]=(((r).dsc_data_slcr_thr_ctl_gen2[0] & ~((uint32_t)0x7f << 8)) | ((((uint32_t)f) & 0x7f) << 8)) | (127 << (16 + 8))
#define BCMI_TSCF_XGXS_DSC_DATA_SLCR_THR_CTL_GEN2r_THRESH_STEP_SIZEf_GET(r) ((((r).dsc_data_slcr_thr_ctl_gen2[0]) >> 4) & 0x3)
#define BCMI_TSCF_XGXS_DSC_DATA_SLCR_THR_CTL_GEN2r_THRESH_STEP_SIZEf_SET(r,f) (r).dsc_data_slcr_thr_ctl_gen2[0]=(((r).dsc_data_slcr_thr_ctl_gen2[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_XGXS_DSC_DATA_SLCR_THR_CTL_GEN2r_THRESH_TIMER_T1f_GET(r) (((r).dsc_data_slcr_thr_ctl_gen2[0]) & 0x3)
#define BCMI_TSCF_XGXS_DSC_DATA_SLCR_THR_CTL_GEN2r_THRESH_TIMER_T1f_SET(r,f) (r).dsc_data_slcr_thr_ctl_gen2[0]=(((r).dsc_data_slcr_thr_ctl_gen2[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access DSC_DATA_SLCR_THR_CTL_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_DATA_SLCR_THR_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_DATA_SLCR_THR_CTL_GEN2r,(_r._dsc_data_slcr_thr_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_DATA_SLCR_THR_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_DATA_SLCR_THR_CTL_GEN2r,(_r._dsc_data_slcr_thr_ctl_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_DATA_SLCR_THR_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_DATA_SLCR_THR_CTL_GEN2r,(_r._dsc_data_slcr_thr_ctl_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_DATA_SLCR_THR_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_DATA_SLCR_THR_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_data_slcr_thr_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_DATA_SLCR_THR_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_DATA_SLCR_THR_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_data_slcr_thr_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_DATA_SLCR_THR_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_DATA_SLCR_THR_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_data_slcr_thr_ctl_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_DATA_SLCR_THR_CTL_GEN2r BCMI_TSCF_XGXS_DSC_DATA_SLCR_THR_CTL_GEN2r
#define DSC_DATA_SLCR_THR_CTL_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_DATA_SLCR_THR_CTL_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_DATA_SLCR_THR_CTL_GEN2r_t DSC_DATA_SLCR_THR_CTL_GEN2r_t;
#define DSC_DATA_SLCR_THR_CTL_GEN2r_CLR BCMI_TSCF_XGXS_DSC_DATA_SLCR_THR_CTL_GEN2r_CLR
#define DSC_DATA_SLCR_THR_CTL_GEN2r_SET BCMI_TSCF_XGXS_DSC_DATA_SLCR_THR_CTL_GEN2r_SET
#define DSC_DATA_SLCR_THR_CTL_GEN2r_GET BCMI_TSCF_XGXS_DSC_DATA_SLCR_THR_CTL_GEN2r_GET
#define DSC_DATA_SLCR_THR_CTL_GEN2r_DATA_THRESH_WRITEf_GET BCMI_TSCF_XGXS_DSC_DATA_SLCR_THR_CTL_GEN2r_DATA_THRESH_WRITEf_GET
#define DSC_DATA_SLCR_THR_CTL_GEN2r_DATA_THRESH_WRITEf_SET BCMI_TSCF_XGXS_DSC_DATA_SLCR_THR_CTL_GEN2r_DATA_THRESH_WRITEf_SET
#define DSC_DATA_SLCR_THR_CTL_GEN2r_DATA_THRESH_SEL_VALf_GET BCMI_TSCF_XGXS_DSC_DATA_SLCR_THR_CTL_GEN2r_DATA_THRESH_SEL_VALf_GET
#define DSC_DATA_SLCR_THR_CTL_GEN2r_DATA_THRESH_SEL_VALf_SET BCMI_TSCF_XGXS_DSC_DATA_SLCR_THR_CTL_GEN2r_DATA_THRESH_SEL_VALf_SET
#define DSC_DATA_SLCR_THR_CTL_GEN2r_THRESH_STEP_SIZEf_GET BCMI_TSCF_XGXS_DSC_DATA_SLCR_THR_CTL_GEN2r_THRESH_STEP_SIZEf_GET
#define DSC_DATA_SLCR_THR_CTL_GEN2r_THRESH_STEP_SIZEf_SET BCMI_TSCF_XGXS_DSC_DATA_SLCR_THR_CTL_GEN2r_THRESH_STEP_SIZEf_SET
#define DSC_DATA_SLCR_THR_CTL_GEN2r_THRESH_TIMER_T1f_GET BCMI_TSCF_XGXS_DSC_DATA_SLCR_THR_CTL_GEN2r_THRESH_TIMER_T1f_GET
#define DSC_DATA_SLCR_THR_CTL_GEN2r_THRESH_TIMER_T1f_SET BCMI_TSCF_XGXS_DSC_DATA_SLCR_THR_CTL_GEN2r_THRESH_TIMER_T1f_SET
#define READ_DSC_DATA_SLCR_THR_CTL_GEN2r BCMI_TSCF_XGXS_READ_DSC_DATA_SLCR_THR_CTL_GEN2r
#define WRITE_DSC_DATA_SLCR_THR_CTL_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_DATA_SLCR_THR_CTL_GEN2r
#define MODIFY_DSC_DATA_SLCR_THR_CTL_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_DATA_SLCR_THR_CTL_GEN2r
#define READLN_DSC_DATA_SLCR_THR_CTL_GEN2r BCMI_TSCF_XGXS_READLN_DSC_DATA_SLCR_THR_CTL_GEN2r
#define WRITELN_DSC_DATA_SLCR_THR_CTL_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_DATA_SLCR_THR_CTL_GEN2r
#define WRITEALL_DSC_DATA_SLCR_THR_CTL_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_DATA_SLCR_THR_CTL_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_DATA_SLCR_THR_CTL_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_DC_OFFS_CTL_GEN2
 * BLOCKS:   DSC_C
 * REGADDR:  0xd05e
 * DEVAD:    1
 * DESC:     dc offset control register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     DC_OFFS_EN       Enables DC Offset tap for adaptation (still needs trnsum to be un-frozen)
 *     DC_OFFS_HYS_EN   Needs to be 1 for hysteresis to be on
 *     DC_OFFS_HYS_MAG  0: 11th bit <<7; 1: 11th bit <<5
 *     DC_OFFS_GRADIENT_INVERT Inverts the sense of the update (inc,dec swap)
 *     DC_OFFS_GAIN     multiplies the +-40 error by 2^{0,1,2,3}
 *     DC_OFFS_ACC_CLR  Clears the internal state except for the final tap
 *     DC_OFFS_WRITE_VAL write value for the dc offset in override mode.The logic walks to this value @ the start of automatic adaptation
 *     DC_OFFS_WRITE_FRC_EN self clearing dc offset force write strobeThis is simply an override to everything. This write gets sign gray converted and written to the dc_offset register
 */
#define BCMI_TSCF_XGXS_DSC_DC_OFFS_CTL_GEN2r (0x0001d05e | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_DC_OFFS_CTL_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_DC_OFFS_CTL_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_DC_OFFS_CTL_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_dc_offs_ctl_gen2[1];
	uint32_t _dsc_dc_offs_ctl_gen2;
} BCMI_TSCF_XGXS_DSC_DC_OFFS_CTL_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_DC_OFFS_CTL_GEN2r_CLR(r) (r).dsc_dc_offs_ctl_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_DC_OFFS_CTL_GEN2r_SET(r,d) (r).dsc_dc_offs_ctl_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_DC_OFFS_CTL_GEN2r_GET(r) (r).dsc_dc_offs_ctl_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_DC_OFFS_CTL_GEN2r_DC_OFFS_WRITE_FRC_ENf_GET(r) ((((r).dsc_dc_offs_ctl_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_DSC_DC_OFFS_CTL_GEN2r_DC_OFFS_WRITE_FRC_ENf_SET(r,f) (r).dsc_dc_offs_ctl_gen2[0]=(((r).dsc_dc_offs_ctl_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_DSC_DC_OFFS_CTL_GEN2r_DC_OFFS_WRITE_VALf_GET(r) ((((r).dsc_dc_offs_ctl_gen2[0]) >> 8) & 0x7f)
#define BCMI_TSCF_XGXS_DSC_DC_OFFS_CTL_GEN2r_DC_OFFS_WRITE_VALf_SET(r,f) (r).dsc_dc_offs_ctl_gen2[0]=(((r).dsc_dc_offs_ctl_gen2[0] & ~((uint32_t)0x7f << 8)) | ((((uint32_t)f) & 0x7f) << 8)) | (127 << (16 + 8))
#define BCMI_TSCF_XGXS_DSC_DC_OFFS_CTL_GEN2r_DC_OFFS_ACC_CLRf_GET(r) ((((r).dsc_dc_offs_ctl_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_DSC_DC_OFFS_CTL_GEN2r_DC_OFFS_ACC_CLRf_SET(r,f) (r).dsc_dc_offs_ctl_gen2[0]=(((r).dsc_dc_offs_ctl_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_DSC_DC_OFFS_CTL_GEN2r_DC_OFFS_GAINf_GET(r) ((((r).dsc_dc_offs_ctl_gen2[0]) >> 5) & 0x3)
#define BCMI_TSCF_XGXS_DSC_DC_OFFS_CTL_GEN2r_DC_OFFS_GAINf_SET(r,f) (r).dsc_dc_offs_ctl_gen2[0]=(((r).dsc_dc_offs_ctl_gen2[0] & ~((uint32_t)0x3 << 5)) | ((((uint32_t)f) & 0x3) << 5)) | (3 << (16 + 5))
#define BCMI_TSCF_XGXS_DSC_DC_OFFS_CTL_GEN2r_DC_OFFS_GRADIENT_INVERTf_GET(r) ((((r).dsc_dc_offs_ctl_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_DSC_DC_OFFS_CTL_GEN2r_DC_OFFS_GRADIENT_INVERTf_SET(r,f) (r).dsc_dc_offs_ctl_gen2[0]=(((r).dsc_dc_offs_ctl_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_DSC_DC_OFFS_CTL_GEN2r_DC_OFFS_HYS_MAGf_GET(r) ((((r).dsc_dc_offs_ctl_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_DSC_DC_OFFS_CTL_GEN2r_DC_OFFS_HYS_MAGf_SET(r,f) (r).dsc_dc_offs_ctl_gen2[0]=(((r).dsc_dc_offs_ctl_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_DSC_DC_OFFS_CTL_GEN2r_DC_OFFS_HYS_ENf_GET(r) ((((r).dsc_dc_offs_ctl_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_DSC_DC_OFFS_CTL_GEN2r_DC_OFFS_HYS_ENf_SET(r,f) (r).dsc_dc_offs_ctl_gen2[0]=(((r).dsc_dc_offs_ctl_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_DSC_DC_OFFS_CTL_GEN2r_DC_OFFS_ENf_GET(r) (((r).dsc_dc_offs_ctl_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_DSC_DC_OFFS_CTL_GEN2r_DC_OFFS_ENf_SET(r,f) (r).dsc_dc_offs_ctl_gen2[0]=(((r).dsc_dc_offs_ctl_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access DSC_DC_OFFS_CTL_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_DC_OFFS_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_DC_OFFS_CTL_GEN2r,(_r._dsc_dc_offs_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_DC_OFFS_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_DC_OFFS_CTL_GEN2r,(_r._dsc_dc_offs_ctl_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_DC_OFFS_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_DC_OFFS_CTL_GEN2r,(_r._dsc_dc_offs_ctl_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_DC_OFFS_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_DC_OFFS_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_dc_offs_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_DC_OFFS_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_DC_OFFS_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_dc_offs_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_DC_OFFS_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_DC_OFFS_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_dc_offs_ctl_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_DC_OFFS_CTL_GEN2r BCMI_TSCF_XGXS_DSC_DC_OFFS_CTL_GEN2r
#define DSC_DC_OFFS_CTL_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_DC_OFFS_CTL_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_DC_OFFS_CTL_GEN2r_t DSC_DC_OFFS_CTL_GEN2r_t;
#define DSC_DC_OFFS_CTL_GEN2r_CLR BCMI_TSCF_XGXS_DSC_DC_OFFS_CTL_GEN2r_CLR
#define DSC_DC_OFFS_CTL_GEN2r_SET BCMI_TSCF_XGXS_DSC_DC_OFFS_CTL_GEN2r_SET
#define DSC_DC_OFFS_CTL_GEN2r_GET BCMI_TSCF_XGXS_DSC_DC_OFFS_CTL_GEN2r_GET
#define DSC_DC_OFFS_CTL_GEN2r_DC_OFFS_WRITE_FRC_ENf_GET BCMI_TSCF_XGXS_DSC_DC_OFFS_CTL_GEN2r_DC_OFFS_WRITE_FRC_ENf_GET
#define DSC_DC_OFFS_CTL_GEN2r_DC_OFFS_WRITE_FRC_ENf_SET BCMI_TSCF_XGXS_DSC_DC_OFFS_CTL_GEN2r_DC_OFFS_WRITE_FRC_ENf_SET
#define DSC_DC_OFFS_CTL_GEN2r_DC_OFFS_WRITE_VALf_GET BCMI_TSCF_XGXS_DSC_DC_OFFS_CTL_GEN2r_DC_OFFS_WRITE_VALf_GET
#define DSC_DC_OFFS_CTL_GEN2r_DC_OFFS_WRITE_VALf_SET BCMI_TSCF_XGXS_DSC_DC_OFFS_CTL_GEN2r_DC_OFFS_WRITE_VALf_SET
#define DSC_DC_OFFS_CTL_GEN2r_DC_OFFS_ACC_CLRf_GET BCMI_TSCF_XGXS_DSC_DC_OFFS_CTL_GEN2r_DC_OFFS_ACC_CLRf_GET
#define DSC_DC_OFFS_CTL_GEN2r_DC_OFFS_ACC_CLRf_SET BCMI_TSCF_XGXS_DSC_DC_OFFS_CTL_GEN2r_DC_OFFS_ACC_CLRf_SET
#define DSC_DC_OFFS_CTL_GEN2r_DC_OFFS_GAINf_GET BCMI_TSCF_XGXS_DSC_DC_OFFS_CTL_GEN2r_DC_OFFS_GAINf_GET
#define DSC_DC_OFFS_CTL_GEN2r_DC_OFFS_GAINf_SET BCMI_TSCF_XGXS_DSC_DC_OFFS_CTL_GEN2r_DC_OFFS_GAINf_SET
#define DSC_DC_OFFS_CTL_GEN2r_DC_OFFS_GRADIENT_INVERTf_GET BCMI_TSCF_XGXS_DSC_DC_OFFS_CTL_GEN2r_DC_OFFS_GRADIENT_INVERTf_GET
#define DSC_DC_OFFS_CTL_GEN2r_DC_OFFS_GRADIENT_INVERTf_SET BCMI_TSCF_XGXS_DSC_DC_OFFS_CTL_GEN2r_DC_OFFS_GRADIENT_INVERTf_SET
#define DSC_DC_OFFS_CTL_GEN2r_DC_OFFS_HYS_MAGf_GET BCMI_TSCF_XGXS_DSC_DC_OFFS_CTL_GEN2r_DC_OFFS_HYS_MAGf_GET
#define DSC_DC_OFFS_CTL_GEN2r_DC_OFFS_HYS_MAGf_SET BCMI_TSCF_XGXS_DSC_DC_OFFS_CTL_GEN2r_DC_OFFS_HYS_MAGf_SET
#define DSC_DC_OFFS_CTL_GEN2r_DC_OFFS_HYS_ENf_GET BCMI_TSCF_XGXS_DSC_DC_OFFS_CTL_GEN2r_DC_OFFS_HYS_ENf_GET
#define DSC_DC_OFFS_CTL_GEN2r_DC_OFFS_HYS_ENf_SET BCMI_TSCF_XGXS_DSC_DC_OFFS_CTL_GEN2r_DC_OFFS_HYS_ENf_SET
#define DSC_DC_OFFS_CTL_GEN2r_DC_OFFS_ENf_GET BCMI_TSCF_XGXS_DSC_DC_OFFS_CTL_GEN2r_DC_OFFS_ENf_GET
#define DSC_DC_OFFS_CTL_GEN2r_DC_OFFS_ENf_SET BCMI_TSCF_XGXS_DSC_DC_OFFS_CTL_GEN2r_DC_OFFS_ENf_SET
#define READ_DSC_DC_OFFS_CTL_GEN2r BCMI_TSCF_XGXS_READ_DSC_DC_OFFS_CTL_GEN2r
#define WRITE_DSC_DC_OFFS_CTL_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_DC_OFFS_CTL_GEN2r
#define MODIFY_DSC_DC_OFFS_CTL_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_DC_OFFS_CTL_GEN2r
#define READLN_DSC_DC_OFFS_CTL_GEN2r BCMI_TSCF_XGXS_READLN_DSC_DC_OFFS_CTL_GEN2r
#define WRITELN_DSC_DC_OFFS_CTL_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_DC_OFFS_CTL_GEN2r
#define WRITEALL_DSC_DC_OFFS_CTL_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_DC_OFFS_CTL_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_DC_OFFS_CTL_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_SM_CTL_0_GEN2
 * BLOCKS:   DSC_D
 * REGADDR:  0xd060
 * DEVAD:    1
 * DESC:     DSC STATE MACHINE CONTROL 0
 * RESETVAL: 0x8 (8)
 * ACCESS:   R/W
 * FIELDS:
 *     EEE_MODE_EN      1'b1 will enable the EEE mode.
 *     EEE_QUIET_RX_AFE_PWRDWN_VAL 1'b1 will enable the RX AFE powerdown in EEE_QUIET mode.
 *     IGNORE_RX_MODE   If set to 1'b1 then pmd_rx_mode input will be ignored in DSC SM.
 *     CL72_TIMER_EN    If enabled to 1'b1 then LFSR is loaded with 0x01CD else it is loaded with 0x1C1E for all non-EEE and non-MEASURE states.
 *     UC_TUNE_EN       uc_tune_en is used to move in and out of UC_TUNE state. Look for DSC SM state diagram for more details.
 *     HW_TUNE_EN       Should be 1'b1 along with uc_tune_en==1'b1 to move from UC_TUNE to HW_TUNE state.  This is a self-clear register bit.
 *     EEE_MEASURE_EN   1'b1 Enables the measurement during EEE_MEASURE.
 *     UC_ACK_DSC_EEE_DONE 1'b1 will enable the EEE_DONE to DONE transition. This is a self-clear bit.
 *     UC_ACK_DSC_RESTART 1'b1 will enable the RESTART to CONFIG transition. This is a self-clear bit.
 *     UC_ACK_DSC_CONFIG 1'b1 will enable the CONFIG to WAIT_FOR_SIG transition. This is a self-clear bit.
 *     SET_MEAS_INCOMPLETE 1'b1 will force meas_incomplete to be 1'b1 to start a new measurement in EEE mode. This is a self-clear bit.
 */
#define BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r (0x0001d060 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_SM_CTL_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_sm_ctl_0_gen2[1];
	uint32_t _dsc_sm_ctl_0_gen2;
} BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_CLR(r) (r).dsc_sm_ctl_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_SET(r,d) (r).dsc_sm_ctl_0_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_GET(r) (r).dsc_sm_ctl_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_SET_MEAS_INCOMPLETEf_GET(r) ((((r).dsc_sm_ctl_0_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_SET_MEAS_INCOMPLETEf_SET(r,f) (r).dsc_sm_ctl_0_gen2[0]=(((r).dsc_sm_ctl_0_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_UC_ACK_DSC_CONFIGf_GET(r) ((((r).dsc_sm_ctl_0_gen2[0]) >> 14) & 0x1)
#define BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_UC_ACK_DSC_CONFIGf_SET(r,f) (r).dsc_sm_ctl_0_gen2[0]=(((r).dsc_sm_ctl_0_gen2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_UC_ACK_DSC_RESTARTf_GET(r) ((((r).dsc_sm_ctl_0_gen2[0]) >> 13) & 0x1)
#define BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_UC_ACK_DSC_RESTARTf_SET(r,f) (r).dsc_sm_ctl_0_gen2[0]=(((r).dsc_sm_ctl_0_gen2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_UC_ACK_DSC_EEE_DONEf_GET(r) ((((r).dsc_sm_ctl_0_gen2[0]) >> 11) & 0x1)
#define BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_UC_ACK_DSC_EEE_DONEf_SET(r,f) (r).dsc_sm_ctl_0_gen2[0]=(((r).dsc_sm_ctl_0_gen2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_EEE_MEASURE_ENf_GET(r) ((((r).dsc_sm_ctl_0_gen2[0]) >> 8) & 0x1)
#define BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_EEE_MEASURE_ENf_SET(r,f) (r).dsc_sm_ctl_0_gen2[0]=(((r).dsc_sm_ctl_0_gen2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_HW_TUNE_ENf_GET(r) ((((r).dsc_sm_ctl_0_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_HW_TUNE_ENf_SET(r,f) (r).dsc_sm_ctl_0_gen2[0]=(((r).dsc_sm_ctl_0_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_UC_TUNE_ENf_GET(r) ((((r).dsc_sm_ctl_0_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_UC_TUNE_ENf_SET(r,f) (r).dsc_sm_ctl_0_gen2[0]=(((r).dsc_sm_ctl_0_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_CL72_TIMER_ENf_GET(r) ((((r).dsc_sm_ctl_0_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_CL72_TIMER_ENf_SET(r,f) (r).dsc_sm_ctl_0_gen2[0]=(((r).dsc_sm_ctl_0_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_IGNORE_RX_MODEf_GET(r) ((((r).dsc_sm_ctl_0_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_IGNORE_RX_MODEf_SET(r,f) (r).dsc_sm_ctl_0_gen2[0]=(((r).dsc_sm_ctl_0_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_EEE_QUIET_RX_AFE_PWRDWN_VALf_GET(r) ((((r).dsc_sm_ctl_0_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_EEE_QUIET_RX_AFE_PWRDWN_VALf_SET(r,f) (r).dsc_sm_ctl_0_gen2[0]=(((r).dsc_sm_ctl_0_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_EEE_MODE_ENf_GET(r) ((((r).dsc_sm_ctl_0_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_EEE_MODE_ENf_SET(r,f) (r).dsc_sm_ctl_0_gen2[0]=(((r).dsc_sm_ctl_0_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))

/*
 * These macros can be used to access DSC_SM_CTL_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_SM_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r,(_r._dsc_sm_ctl_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_SM_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r,(_r._dsc_sm_ctl_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_SM_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r,(_r._dsc_sm_ctl_0_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_SM_CTL_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_ctl_0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_SM_CTL_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_ctl_0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_SM_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_sm_ctl_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_SM_CTL_0_GEN2r BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r
#define DSC_SM_CTL_0_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_t DSC_SM_CTL_0_GEN2r_t;
#define DSC_SM_CTL_0_GEN2r_CLR BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_CLR
#define DSC_SM_CTL_0_GEN2r_SET BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_SET
#define DSC_SM_CTL_0_GEN2r_GET BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_GET
#define DSC_SM_CTL_0_GEN2r_SET_MEAS_INCOMPLETEf_GET BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_SET_MEAS_INCOMPLETEf_GET
#define DSC_SM_CTL_0_GEN2r_SET_MEAS_INCOMPLETEf_SET BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_SET_MEAS_INCOMPLETEf_SET
#define DSC_SM_CTL_0_GEN2r_UC_ACK_DSC_CONFIGf_GET BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_UC_ACK_DSC_CONFIGf_GET
#define DSC_SM_CTL_0_GEN2r_UC_ACK_DSC_CONFIGf_SET BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_UC_ACK_DSC_CONFIGf_SET
#define DSC_SM_CTL_0_GEN2r_UC_ACK_DSC_RESTARTf_GET BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_UC_ACK_DSC_RESTARTf_GET
#define DSC_SM_CTL_0_GEN2r_UC_ACK_DSC_RESTARTf_SET BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_UC_ACK_DSC_RESTARTf_SET
#define DSC_SM_CTL_0_GEN2r_UC_ACK_DSC_EEE_DONEf_GET BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_UC_ACK_DSC_EEE_DONEf_GET
#define DSC_SM_CTL_0_GEN2r_UC_ACK_DSC_EEE_DONEf_SET BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_UC_ACK_DSC_EEE_DONEf_SET
#define DSC_SM_CTL_0_GEN2r_EEE_MEASURE_ENf_GET BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_EEE_MEASURE_ENf_GET
#define DSC_SM_CTL_0_GEN2r_EEE_MEASURE_ENf_SET BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_EEE_MEASURE_ENf_SET
#define DSC_SM_CTL_0_GEN2r_HW_TUNE_ENf_GET BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_HW_TUNE_ENf_GET
#define DSC_SM_CTL_0_GEN2r_HW_TUNE_ENf_SET BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_HW_TUNE_ENf_SET
#define DSC_SM_CTL_0_GEN2r_UC_TUNE_ENf_GET BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_UC_TUNE_ENf_GET
#define DSC_SM_CTL_0_GEN2r_UC_TUNE_ENf_SET BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_UC_TUNE_ENf_SET
#define DSC_SM_CTL_0_GEN2r_CL72_TIMER_ENf_GET BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_CL72_TIMER_ENf_GET
#define DSC_SM_CTL_0_GEN2r_CL72_TIMER_ENf_SET BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_CL72_TIMER_ENf_SET
#define DSC_SM_CTL_0_GEN2r_IGNORE_RX_MODEf_GET BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_IGNORE_RX_MODEf_GET
#define DSC_SM_CTL_0_GEN2r_IGNORE_RX_MODEf_SET BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_IGNORE_RX_MODEf_SET
#define DSC_SM_CTL_0_GEN2r_EEE_QUIET_RX_AFE_PWRDWN_VALf_GET BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_EEE_QUIET_RX_AFE_PWRDWN_VALf_GET
#define DSC_SM_CTL_0_GEN2r_EEE_QUIET_RX_AFE_PWRDWN_VALf_SET BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_EEE_QUIET_RX_AFE_PWRDWN_VALf_SET
#define DSC_SM_CTL_0_GEN2r_EEE_MODE_ENf_GET BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_EEE_MODE_ENf_GET
#define DSC_SM_CTL_0_GEN2r_EEE_MODE_ENf_SET BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r_EEE_MODE_ENf_SET
#define READ_DSC_SM_CTL_0_GEN2r BCMI_TSCF_XGXS_READ_DSC_SM_CTL_0_GEN2r
#define WRITE_DSC_SM_CTL_0_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_SM_CTL_0_GEN2r
#define MODIFY_DSC_SM_CTL_0_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_SM_CTL_0_GEN2r
#define READLN_DSC_SM_CTL_0_GEN2r BCMI_TSCF_XGXS_READLN_DSC_SM_CTL_0_GEN2r
#define WRITELN_DSC_SM_CTL_0_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_SM_CTL_0_GEN2r
#define WRITEALL_DSC_SM_CTL_0_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_SM_CTL_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_SM_CTL_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_SM_CTL_1_GEN2
 * BLOCKS:   DSC_D
 * REGADDR:  0xd061
 * DEVAD:    1
 * DESC:     DSC STATE MACHINE CONTROL 1
 * RESETVAL: 0x200 (512)
 * ACCESS:   R/W
 * FIELDS:
 *     RX_DSC_LOCK_FRC  rx_dsc_lock force.
 *     RX_DSC_LOCK_FRC_VAL rx_dsc_lock force value.
 *     DSC_CLR_FRC      DSC clear force.
 *     DSC_CLR_FRC_VAL  DSC clear force value.
 *     TRNSUM_FRZ_FRC   Training Sum freeze force.
 *     TRNSUM_FRZ_FRC_VAL raining Sum freeze force value.
 *     TIMER_DONE_FRC   Can be forced to 1'b1 which will disable the H/W timer in HW_TUNE and MEASURE states.
 *     TIMER_DONE_FRC_VAL If timer_done_frc is set to 1'b1 and DSC SM is in HW_TUNE or MEASURE states then setting this bit to 1 will move the state to next state.
 *     FREQ_UPD_EN_FRC  Frequency update force.
 *     FREQ_UPD_EN_FRC_VAL Frequency update force value.
 *     CDR_FRZ_FRC      CDR Freeze force.
 *     CDR_FRZ_FRC_VAL  CDR Freeze force value.
 *     TRNSUM_CLR_FRC   Training Sum freeze force.
 *     TRNSUM_CLR_FRC_VAL raining Sum freeze force value.
 */
#define BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r (0x0001d061 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_SM_CTL_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_sm_ctl_1_gen2[1];
	uint32_t _dsc_sm_ctl_1_gen2;
} BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_CLR(r) (r).dsc_sm_ctl_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_SET(r,d) (r).dsc_sm_ctl_1_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_GET(r) (r).dsc_sm_ctl_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_TRNSUM_CLR_FRC_VALf_GET(r) ((((r).dsc_sm_ctl_1_gen2[0]) >> 13) & 0x1)
#define BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_TRNSUM_CLR_FRC_VALf_SET(r,f) (r).dsc_sm_ctl_1_gen2[0]=(((r).dsc_sm_ctl_1_gen2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_TRNSUM_CLR_FRCf_GET(r) ((((r).dsc_sm_ctl_1_gen2[0]) >> 12) & 0x1)
#define BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_TRNSUM_CLR_FRCf_SET(r,f) (r).dsc_sm_ctl_1_gen2[0]=(((r).dsc_sm_ctl_1_gen2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_CDR_FRZ_FRC_VALf_GET(r) ((((r).dsc_sm_ctl_1_gen2[0]) >> 11) & 0x1)
#define BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_CDR_FRZ_FRC_VALf_SET(r,f) (r).dsc_sm_ctl_1_gen2[0]=(((r).dsc_sm_ctl_1_gen2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_CDR_FRZ_FRCf_GET(r) ((((r).dsc_sm_ctl_1_gen2[0]) >> 10) & 0x1)
#define BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_CDR_FRZ_FRCf_SET(r,f) (r).dsc_sm_ctl_1_gen2[0]=(((r).dsc_sm_ctl_1_gen2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_FREQ_UPD_EN_FRC_VALf_GET(r) ((((r).dsc_sm_ctl_1_gen2[0]) >> 9) & 0x1)
#define BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_FREQ_UPD_EN_FRC_VALf_SET(r,f) (r).dsc_sm_ctl_1_gen2[0]=(((r).dsc_sm_ctl_1_gen2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_FREQ_UPD_EN_FRCf_GET(r) ((((r).dsc_sm_ctl_1_gen2[0]) >> 8) & 0x1)
#define BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_FREQ_UPD_EN_FRCf_SET(r,f) (r).dsc_sm_ctl_1_gen2[0]=(((r).dsc_sm_ctl_1_gen2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_TIMER_DONE_FRC_VALf_GET(r) ((((r).dsc_sm_ctl_1_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_TIMER_DONE_FRC_VALf_SET(r,f) (r).dsc_sm_ctl_1_gen2[0]=(((r).dsc_sm_ctl_1_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_TIMER_DONE_FRCf_GET(r) ((((r).dsc_sm_ctl_1_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_TIMER_DONE_FRCf_SET(r,f) (r).dsc_sm_ctl_1_gen2[0]=(((r).dsc_sm_ctl_1_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_TRNSUM_FRZ_FRC_VALf_GET(r) ((((r).dsc_sm_ctl_1_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_TRNSUM_FRZ_FRC_VALf_SET(r,f) (r).dsc_sm_ctl_1_gen2[0]=(((r).dsc_sm_ctl_1_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_TRNSUM_FRZ_FRCf_GET(r) ((((r).dsc_sm_ctl_1_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_TRNSUM_FRZ_FRCf_SET(r,f) (r).dsc_sm_ctl_1_gen2[0]=(((r).dsc_sm_ctl_1_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_DSC_CLR_FRC_VALf_GET(r) ((((r).dsc_sm_ctl_1_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_DSC_CLR_FRC_VALf_SET(r,f) (r).dsc_sm_ctl_1_gen2[0]=(((r).dsc_sm_ctl_1_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_DSC_CLR_FRCf_GET(r) ((((r).dsc_sm_ctl_1_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_DSC_CLR_FRCf_SET(r,f) (r).dsc_sm_ctl_1_gen2[0]=(((r).dsc_sm_ctl_1_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_RX_DSC_LOCK_FRC_VALf_GET(r) ((((r).dsc_sm_ctl_1_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_RX_DSC_LOCK_FRC_VALf_SET(r,f) (r).dsc_sm_ctl_1_gen2[0]=(((r).dsc_sm_ctl_1_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_RX_DSC_LOCK_FRCf_GET(r) (((r).dsc_sm_ctl_1_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_RX_DSC_LOCK_FRCf_SET(r,f) (r).dsc_sm_ctl_1_gen2[0]=(((r).dsc_sm_ctl_1_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access DSC_SM_CTL_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_SM_CTL_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r,(_r._dsc_sm_ctl_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_SM_CTL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r,(_r._dsc_sm_ctl_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_SM_CTL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r,(_r._dsc_sm_ctl_1_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_SM_CTL_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_ctl_1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_SM_CTL_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_ctl_1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_SM_CTL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_sm_ctl_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_SM_CTL_1_GEN2r BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r
#define DSC_SM_CTL_1_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_t DSC_SM_CTL_1_GEN2r_t;
#define DSC_SM_CTL_1_GEN2r_CLR BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_CLR
#define DSC_SM_CTL_1_GEN2r_SET BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_SET
#define DSC_SM_CTL_1_GEN2r_GET BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_GET
#define DSC_SM_CTL_1_GEN2r_TRNSUM_CLR_FRC_VALf_GET BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_TRNSUM_CLR_FRC_VALf_GET
#define DSC_SM_CTL_1_GEN2r_TRNSUM_CLR_FRC_VALf_SET BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_TRNSUM_CLR_FRC_VALf_SET
#define DSC_SM_CTL_1_GEN2r_TRNSUM_CLR_FRCf_GET BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_TRNSUM_CLR_FRCf_GET
#define DSC_SM_CTL_1_GEN2r_TRNSUM_CLR_FRCf_SET BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_TRNSUM_CLR_FRCf_SET
#define DSC_SM_CTL_1_GEN2r_CDR_FRZ_FRC_VALf_GET BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_CDR_FRZ_FRC_VALf_GET
#define DSC_SM_CTL_1_GEN2r_CDR_FRZ_FRC_VALf_SET BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_CDR_FRZ_FRC_VALf_SET
#define DSC_SM_CTL_1_GEN2r_CDR_FRZ_FRCf_GET BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_CDR_FRZ_FRCf_GET
#define DSC_SM_CTL_1_GEN2r_CDR_FRZ_FRCf_SET BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_CDR_FRZ_FRCf_SET
#define DSC_SM_CTL_1_GEN2r_FREQ_UPD_EN_FRC_VALf_GET BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_FREQ_UPD_EN_FRC_VALf_GET
#define DSC_SM_CTL_1_GEN2r_FREQ_UPD_EN_FRC_VALf_SET BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_FREQ_UPD_EN_FRC_VALf_SET
#define DSC_SM_CTL_1_GEN2r_FREQ_UPD_EN_FRCf_GET BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_FREQ_UPD_EN_FRCf_GET
#define DSC_SM_CTL_1_GEN2r_FREQ_UPD_EN_FRCf_SET BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_FREQ_UPD_EN_FRCf_SET
#define DSC_SM_CTL_1_GEN2r_TIMER_DONE_FRC_VALf_GET BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_TIMER_DONE_FRC_VALf_GET
#define DSC_SM_CTL_1_GEN2r_TIMER_DONE_FRC_VALf_SET BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_TIMER_DONE_FRC_VALf_SET
#define DSC_SM_CTL_1_GEN2r_TIMER_DONE_FRCf_GET BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_TIMER_DONE_FRCf_GET
#define DSC_SM_CTL_1_GEN2r_TIMER_DONE_FRCf_SET BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_TIMER_DONE_FRCf_SET
#define DSC_SM_CTL_1_GEN2r_TRNSUM_FRZ_FRC_VALf_GET BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_TRNSUM_FRZ_FRC_VALf_GET
#define DSC_SM_CTL_1_GEN2r_TRNSUM_FRZ_FRC_VALf_SET BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_TRNSUM_FRZ_FRC_VALf_SET
#define DSC_SM_CTL_1_GEN2r_TRNSUM_FRZ_FRCf_GET BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_TRNSUM_FRZ_FRCf_GET
#define DSC_SM_CTL_1_GEN2r_TRNSUM_FRZ_FRCf_SET BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_TRNSUM_FRZ_FRCf_SET
#define DSC_SM_CTL_1_GEN2r_DSC_CLR_FRC_VALf_GET BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_DSC_CLR_FRC_VALf_GET
#define DSC_SM_CTL_1_GEN2r_DSC_CLR_FRC_VALf_SET BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_DSC_CLR_FRC_VALf_SET
#define DSC_SM_CTL_1_GEN2r_DSC_CLR_FRCf_GET BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_DSC_CLR_FRCf_GET
#define DSC_SM_CTL_1_GEN2r_DSC_CLR_FRCf_SET BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_DSC_CLR_FRCf_SET
#define DSC_SM_CTL_1_GEN2r_RX_DSC_LOCK_FRC_VALf_GET BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_RX_DSC_LOCK_FRC_VALf_GET
#define DSC_SM_CTL_1_GEN2r_RX_DSC_LOCK_FRC_VALf_SET BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_RX_DSC_LOCK_FRC_VALf_SET
#define DSC_SM_CTL_1_GEN2r_RX_DSC_LOCK_FRCf_GET BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_RX_DSC_LOCK_FRCf_GET
#define DSC_SM_CTL_1_GEN2r_RX_DSC_LOCK_FRCf_SET BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r_RX_DSC_LOCK_FRCf_SET
#define READ_DSC_SM_CTL_1_GEN2r BCMI_TSCF_XGXS_READ_DSC_SM_CTL_1_GEN2r
#define WRITE_DSC_SM_CTL_1_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_SM_CTL_1_GEN2r
#define MODIFY_DSC_SM_CTL_1_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_SM_CTL_1_GEN2r
#define READLN_DSC_SM_CTL_1_GEN2r BCMI_TSCF_XGXS_READLN_DSC_SM_CTL_1_GEN2r
#define WRITELN_DSC_SM_CTL_1_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_SM_CTL_1_GEN2r
#define WRITEALL_DSC_SM_CTL_1_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_SM_CTL_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_SM_CTL_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_SM_CTL_2_GEN2
 * BLOCKS:   DSC_D
 * REGADDR:  0xd062
 * DEVAD:    1
 * DESC:     DSC STATE MACHINE CONTROL 2
 * RESETVAL: 0x87 (135)
 * ACCESS:   R/W
 * FIELDS:
 *     EEE_LFSR_CNT     LFSR timer start value for all EEE timers except EEE_MEASURE.
 */
#define BCMI_TSCF_XGXS_DSC_SM_CTL_2_GEN2r (0x0001d062 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_SM_CTL_2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_SM_CTL_2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_SM_CTL_2_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_sm_ctl_2_gen2[1];
	uint32_t _dsc_sm_ctl_2_gen2;
} BCMI_TSCF_XGXS_DSC_SM_CTL_2_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_SM_CTL_2_GEN2r_CLR(r) (r).dsc_sm_ctl_2_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_SM_CTL_2_GEN2r_SET(r,d) (r).dsc_sm_ctl_2_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_SM_CTL_2_GEN2r_GET(r) (r).dsc_sm_ctl_2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_SM_CTL_2_GEN2r_EEE_LFSR_CNTf_GET(r) (((r).dsc_sm_ctl_2_gen2[0]) & 0x1fff)
#define BCMI_TSCF_XGXS_DSC_SM_CTL_2_GEN2r_EEE_LFSR_CNTf_SET(r,f) (r).dsc_sm_ctl_2_gen2[0]=(((r).dsc_sm_ctl_2_gen2[0] & ~((uint32_t)0x1fff)) | (((uint32_t)f) & 0x1fff)) | (0x1fff << 16)

/*
 * These macros can be used to access DSC_SM_CTL_2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_SM_CTL_2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_2_GEN2r,(_r._dsc_sm_ctl_2_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_SM_CTL_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_2_GEN2r,(_r._dsc_sm_ctl_2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_SM_CTL_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_2_GEN2r,(_r._dsc_sm_ctl_2_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_SM_CTL_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_ctl_2_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_SM_CTL_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_ctl_2_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_SM_CTL_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_sm_ctl_2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_SM_CTL_2_GEN2r BCMI_TSCF_XGXS_DSC_SM_CTL_2_GEN2r
#define DSC_SM_CTL_2_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_SM_CTL_2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_SM_CTL_2_GEN2r_t DSC_SM_CTL_2_GEN2r_t;
#define DSC_SM_CTL_2_GEN2r_CLR BCMI_TSCF_XGXS_DSC_SM_CTL_2_GEN2r_CLR
#define DSC_SM_CTL_2_GEN2r_SET BCMI_TSCF_XGXS_DSC_SM_CTL_2_GEN2r_SET
#define DSC_SM_CTL_2_GEN2r_GET BCMI_TSCF_XGXS_DSC_SM_CTL_2_GEN2r_GET
#define DSC_SM_CTL_2_GEN2r_EEE_LFSR_CNTf_GET BCMI_TSCF_XGXS_DSC_SM_CTL_2_GEN2r_EEE_LFSR_CNTf_GET
#define DSC_SM_CTL_2_GEN2r_EEE_LFSR_CNTf_SET BCMI_TSCF_XGXS_DSC_SM_CTL_2_GEN2r_EEE_LFSR_CNTf_SET
#define READ_DSC_SM_CTL_2_GEN2r BCMI_TSCF_XGXS_READ_DSC_SM_CTL_2_GEN2r
#define WRITE_DSC_SM_CTL_2_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_SM_CTL_2_GEN2r
#define MODIFY_DSC_SM_CTL_2_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_SM_CTL_2_GEN2r
#define READLN_DSC_SM_CTL_2_GEN2r BCMI_TSCF_XGXS_READLN_DSC_SM_CTL_2_GEN2r
#define WRITELN_DSC_SM_CTL_2_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_SM_CTL_2_GEN2r
#define WRITEALL_DSC_SM_CTL_2_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_SM_CTL_2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_SM_CTL_2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_SM_CTL_3_GEN2
 * BLOCKS:   DSC_D
 * REGADDR:  0xd063
 * DEVAD:    1
 * DESC:     DSC STATE MACHINE CONTROL 3
 * RESETVAL: 0x1c1e (7198)
 * ACCESS:   R/W
 * FIELDS:
 *     MEASURE_LFSR_CNT LFSR timer start value for MEASURE and EEE_MEASURE state timers.
 */
#define BCMI_TSCF_XGXS_DSC_SM_CTL_3_GEN2r (0x0001d063 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_SM_CTL_3_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_SM_CTL_3_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_SM_CTL_3_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_sm_ctl_3_gen2[1];
	uint32_t _dsc_sm_ctl_3_gen2;
} BCMI_TSCF_XGXS_DSC_SM_CTL_3_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_SM_CTL_3_GEN2r_CLR(r) (r).dsc_sm_ctl_3_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_SM_CTL_3_GEN2r_SET(r,d) (r).dsc_sm_ctl_3_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_SM_CTL_3_GEN2r_GET(r) (r).dsc_sm_ctl_3_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_SM_CTL_3_GEN2r_MEASURE_LFSR_CNTf_GET(r) (((r).dsc_sm_ctl_3_gen2[0]) & 0x1fff)
#define BCMI_TSCF_XGXS_DSC_SM_CTL_3_GEN2r_MEASURE_LFSR_CNTf_SET(r,f) (r).dsc_sm_ctl_3_gen2[0]=(((r).dsc_sm_ctl_3_gen2[0] & ~((uint32_t)0x1fff)) | (((uint32_t)f) & 0x1fff)) | (0x1fff << 16)

/*
 * These macros can be used to access DSC_SM_CTL_3_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_SM_CTL_3_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_3_GEN2r,(_r._dsc_sm_ctl_3_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_SM_CTL_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_3_GEN2r,(_r._dsc_sm_ctl_3_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_SM_CTL_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_3_GEN2r,(_r._dsc_sm_ctl_3_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_SM_CTL_3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_ctl_3_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_SM_CTL_3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_ctl_3_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_SM_CTL_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_sm_ctl_3_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_SM_CTL_3_GEN2r BCMI_TSCF_XGXS_DSC_SM_CTL_3_GEN2r
#define DSC_SM_CTL_3_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_SM_CTL_3_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_SM_CTL_3_GEN2r_t DSC_SM_CTL_3_GEN2r_t;
#define DSC_SM_CTL_3_GEN2r_CLR BCMI_TSCF_XGXS_DSC_SM_CTL_3_GEN2r_CLR
#define DSC_SM_CTL_3_GEN2r_SET BCMI_TSCF_XGXS_DSC_SM_CTL_3_GEN2r_SET
#define DSC_SM_CTL_3_GEN2r_GET BCMI_TSCF_XGXS_DSC_SM_CTL_3_GEN2r_GET
#define DSC_SM_CTL_3_GEN2r_MEASURE_LFSR_CNTf_GET BCMI_TSCF_XGXS_DSC_SM_CTL_3_GEN2r_MEASURE_LFSR_CNTf_GET
#define DSC_SM_CTL_3_GEN2r_MEASURE_LFSR_CNTf_SET BCMI_TSCF_XGXS_DSC_SM_CTL_3_GEN2r_MEASURE_LFSR_CNTf_SET
#define READ_DSC_SM_CTL_3_GEN2r BCMI_TSCF_XGXS_READ_DSC_SM_CTL_3_GEN2r
#define WRITE_DSC_SM_CTL_3_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_SM_CTL_3_GEN2r
#define MODIFY_DSC_SM_CTL_3_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_SM_CTL_3_GEN2r
#define READLN_DSC_SM_CTL_3_GEN2r BCMI_TSCF_XGXS_READLN_DSC_SM_CTL_3_GEN2r
#define WRITELN_DSC_SM_CTL_3_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_SM_CTL_3_GEN2r
#define WRITEALL_DSC_SM_CTL_3_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_SM_CTL_3_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_SM_CTL_3_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_SM_CTL_4_GEN2
 * BLOCKS:   DSC_D
 * REGADDR:  0xd064
 * DEVAD:    1
 * DESC:     DSC STATE MACHINE CONTROL 4
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     ACQ_CDR_TIMEOUT  Defines timeout value for the ACQ_CDR state timer.  Valid range is 0 to 31 which is mapped to 0 to 448 LFSR wraps.
 *     CDR_SETTLE_TIMEOUT Defines timeout value for the CDR_SETTLE state timer.  Valid range is 0 to 31 which is mapped to 0 to 448 LFSR wraps.
 *     HW_TUNE_TIMEOUT  Defines timeout value for the HW_TUNE state timer.  Valid range is 0 to 31 which is mapped to 0 to 448 LFSR wraps.
 */
#define BCMI_TSCF_XGXS_DSC_SM_CTL_4_GEN2r (0x0001d064 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_SM_CTL_4_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_SM_CTL_4_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_SM_CTL_4_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_sm_ctl_4_gen2[1];
	uint32_t _dsc_sm_ctl_4_gen2;
} BCMI_TSCF_XGXS_DSC_SM_CTL_4_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_SM_CTL_4_GEN2r_CLR(r) (r).dsc_sm_ctl_4_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_SM_CTL_4_GEN2r_SET(r,d) (r).dsc_sm_ctl_4_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_SM_CTL_4_GEN2r_GET(r) (r).dsc_sm_ctl_4_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_SM_CTL_4_GEN2r_HW_TUNE_TIMEOUTf_GET(r) ((((r).dsc_sm_ctl_4_gen2[0]) >> 10) & 0x1f)
#define BCMI_TSCF_XGXS_DSC_SM_CTL_4_GEN2r_HW_TUNE_TIMEOUTf_SET(r,f) (r).dsc_sm_ctl_4_gen2[0]=(((r).dsc_sm_ctl_4_gen2[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10)) | (31 << (16 + 10))
#define BCMI_TSCF_XGXS_DSC_SM_CTL_4_GEN2r_CDR_SETTLE_TIMEOUTf_GET(r) ((((r).dsc_sm_ctl_4_gen2[0]) >> 5) & 0x1f)
#define BCMI_TSCF_XGXS_DSC_SM_CTL_4_GEN2r_CDR_SETTLE_TIMEOUTf_SET(r,f) (r).dsc_sm_ctl_4_gen2[0]=(((r).dsc_sm_ctl_4_gen2[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5)) | (31 << (16 + 5))
#define BCMI_TSCF_XGXS_DSC_SM_CTL_4_GEN2r_ACQ_CDR_TIMEOUTf_GET(r) (((r).dsc_sm_ctl_4_gen2[0]) & 0x1f)
#define BCMI_TSCF_XGXS_DSC_SM_CTL_4_GEN2r_ACQ_CDR_TIMEOUTf_SET(r,f) (r).dsc_sm_ctl_4_gen2[0]=(((r).dsc_sm_ctl_4_gen2[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access DSC_SM_CTL_4_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_SM_CTL_4_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_4_GEN2r,(_r._dsc_sm_ctl_4_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_SM_CTL_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_4_GEN2r,(_r._dsc_sm_ctl_4_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_SM_CTL_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_4_GEN2r,(_r._dsc_sm_ctl_4_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_SM_CTL_4_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_ctl_4_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_SM_CTL_4_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_ctl_4_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_SM_CTL_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_sm_ctl_4_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_SM_CTL_4_GEN2r BCMI_TSCF_XGXS_DSC_SM_CTL_4_GEN2r
#define DSC_SM_CTL_4_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_SM_CTL_4_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_SM_CTL_4_GEN2r_t DSC_SM_CTL_4_GEN2r_t;
#define DSC_SM_CTL_4_GEN2r_CLR BCMI_TSCF_XGXS_DSC_SM_CTL_4_GEN2r_CLR
#define DSC_SM_CTL_4_GEN2r_SET BCMI_TSCF_XGXS_DSC_SM_CTL_4_GEN2r_SET
#define DSC_SM_CTL_4_GEN2r_GET BCMI_TSCF_XGXS_DSC_SM_CTL_4_GEN2r_GET
#define DSC_SM_CTL_4_GEN2r_HW_TUNE_TIMEOUTf_GET BCMI_TSCF_XGXS_DSC_SM_CTL_4_GEN2r_HW_TUNE_TIMEOUTf_GET
#define DSC_SM_CTL_4_GEN2r_HW_TUNE_TIMEOUTf_SET BCMI_TSCF_XGXS_DSC_SM_CTL_4_GEN2r_HW_TUNE_TIMEOUTf_SET
#define DSC_SM_CTL_4_GEN2r_CDR_SETTLE_TIMEOUTf_GET BCMI_TSCF_XGXS_DSC_SM_CTL_4_GEN2r_CDR_SETTLE_TIMEOUTf_GET
#define DSC_SM_CTL_4_GEN2r_CDR_SETTLE_TIMEOUTf_SET BCMI_TSCF_XGXS_DSC_SM_CTL_4_GEN2r_CDR_SETTLE_TIMEOUTf_SET
#define DSC_SM_CTL_4_GEN2r_ACQ_CDR_TIMEOUTf_GET BCMI_TSCF_XGXS_DSC_SM_CTL_4_GEN2r_ACQ_CDR_TIMEOUTf_GET
#define DSC_SM_CTL_4_GEN2r_ACQ_CDR_TIMEOUTf_SET BCMI_TSCF_XGXS_DSC_SM_CTL_4_GEN2r_ACQ_CDR_TIMEOUTf_SET
#define READ_DSC_SM_CTL_4_GEN2r BCMI_TSCF_XGXS_READ_DSC_SM_CTL_4_GEN2r
#define WRITE_DSC_SM_CTL_4_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_SM_CTL_4_GEN2r
#define MODIFY_DSC_SM_CTL_4_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_SM_CTL_4_GEN2r
#define READLN_DSC_SM_CTL_4_GEN2r BCMI_TSCF_XGXS_READLN_DSC_SM_CTL_4_GEN2r
#define WRITELN_DSC_SM_CTL_4_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_SM_CTL_4_GEN2r
#define WRITEALL_DSC_SM_CTL_4_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_SM_CTL_4_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_SM_CTL_4_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_SM_CTL_5_GEN2
 * BLOCKS:   DSC_D
 * REGADDR:  0xd065
 * DEVAD:    1
 * DESC:     DSC STATE MACHINE CONTROL 5
 * RESETVAL: 0x35ad (13741)
 * ACCESS:   R/W
 * FIELDS:
 *     MEASURE_TIMEOUT  Defines timeout value for the MEASURE state timer.  Valid range is 0 to 31 which is mapped to 0 to 448 LFSR wraps.
 *     EEE_ACQ_CDR_TIMEOUT Defines timeout value for the EEE_ACQ_CDR state timer.  Valid range is 0 to 31 which is mapped to 0 to 448 LFSR wraps.
 *     EEE_CDR_SETTLE_TIMEOUT Defines timeout value for the EEE_CDR_SETTLE state timer.  Valid range is 0 to 31 which is mapped to 0 to 448 LFSR wraps.
 */
#define BCMI_TSCF_XGXS_DSC_SM_CTL_5_GEN2r (0x0001d065 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_SM_CTL_5_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_SM_CTL_5_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_SM_CTL_5_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_sm_ctl_5_gen2[1];
	uint32_t _dsc_sm_ctl_5_gen2;
} BCMI_TSCF_XGXS_DSC_SM_CTL_5_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_SM_CTL_5_GEN2r_CLR(r) (r).dsc_sm_ctl_5_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_SM_CTL_5_GEN2r_SET(r,d) (r).dsc_sm_ctl_5_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_SM_CTL_5_GEN2r_GET(r) (r).dsc_sm_ctl_5_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_SM_CTL_5_GEN2r_EEE_CDR_SETTLE_TIMEOUTf_GET(r) ((((r).dsc_sm_ctl_5_gen2[0]) >> 10) & 0x1f)
#define BCMI_TSCF_XGXS_DSC_SM_CTL_5_GEN2r_EEE_CDR_SETTLE_TIMEOUTf_SET(r,f) (r).dsc_sm_ctl_5_gen2[0]=(((r).dsc_sm_ctl_5_gen2[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10)) | (31 << (16 + 10))
#define BCMI_TSCF_XGXS_DSC_SM_CTL_5_GEN2r_EEE_ACQ_CDR_TIMEOUTf_GET(r) ((((r).dsc_sm_ctl_5_gen2[0]) >> 5) & 0x1f)
#define BCMI_TSCF_XGXS_DSC_SM_CTL_5_GEN2r_EEE_ACQ_CDR_TIMEOUTf_SET(r,f) (r).dsc_sm_ctl_5_gen2[0]=(((r).dsc_sm_ctl_5_gen2[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5)) | (31 << (16 + 5))
#define BCMI_TSCF_XGXS_DSC_SM_CTL_5_GEN2r_MEASURE_TIMEOUTf_GET(r) (((r).dsc_sm_ctl_5_gen2[0]) & 0x1f)
#define BCMI_TSCF_XGXS_DSC_SM_CTL_5_GEN2r_MEASURE_TIMEOUTf_SET(r,f) (r).dsc_sm_ctl_5_gen2[0]=(((r).dsc_sm_ctl_5_gen2[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access DSC_SM_CTL_5_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_SM_CTL_5_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_5_GEN2r,(_r._dsc_sm_ctl_5_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_SM_CTL_5_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_5_GEN2r,(_r._dsc_sm_ctl_5_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_SM_CTL_5_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_5_GEN2r,(_r._dsc_sm_ctl_5_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_SM_CTL_5_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_5_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_ctl_5_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_SM_CTL_5_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_5_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_ctl_5_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_SM_CTL_5_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_5_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_sm_ctl_5_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_SM_CTL_5_GEN2r BCMI_TSCF_XGXS_DSC_SM_CTL_5_GEN2r
#define DSC_SM_CTL_5_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_SM_CTL_5_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_SM_CTL_5_GEN2r_t DSC_SM_CTL_5_GEN2r_t;
#define DSC_SM_CTL_5_GEN2r_CLR BCMI_TSCF_XGXS_DSC_SM_CTL_5_GEN2r_CLR
#define DSC_SM_CTL_5_GEN2r_SET BCMI_TSCF_XGXS_DSC_SM_CTL_5_GEN2r_SET
#define DSC_SM_CTL_5_GEN2r_GET BCMI_TSCF_XGXS_DSC_SM_CTL_5_GEN2r_GET
#define DSC_SM_CTL_5_GEN2r_EEE_CDR_SETTLE_TIMEOUTf_GET BCMI_TSCF_XGXS_DSC_SM_CTL_5_GEN2r_EEE_CDR_SETTLE_TIMEOUTf_GET
#define DSC_SM_CTL_5_GEN2r_EEE_CDR_SETTLE_TIMEOUTf_SET BCMI_TSCF_XGXS_DSC_SM_CTL_5_GEN2r_EEE_CDR_SETTLE_TIMEOUTf_SET
#define DSC_SM_CTL_5_GEN2r_EEE_ACQ_CDR_TIMEOUTf_GET BCMI_TSCF_XGXS_DSC_SM_CTL_5_GEN2r_EEE_ACQ_CDR_TIMEOUTf_GET
#define DSC_SM_CTL_5_GEN2r_EEE_ACQ_CDR_TIMEOUTf_SET BCMI_TSCF_XGXS_DSC_SM_CTL_5_GEN2r_EEE_ACQ_CDR_TIMEOUTf_SET
#define DSC_SM_CTL_5_GEN2r_MEASURE_TIMEOUTf_GET BCMI_TSCF_XGXS_DSC_SM_CTL_5_GEN2r_MEASURE_TIMEOUTf_GET
#define DSC_SM_CTL_5_GEN2r_MEASURE_TIMEOUTf_SET BCMI_TSCF_XGXS_DSC_SM_CTL_5_GEN2r_MEASURE_TIMEOUTf_SET
#define READ_DSC_SM_CTL_5_GEN2r BCMI_TSCF_XGXS_READ_DSC_SM_CTL_5_GEN2r
#define WRITE_DSC_SM_CTL_5_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_SM_CTL_5_GEN2r
#define MODIFY_DSC_SM_CTL_5_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_SM_CTL_5_GEN2r
#define READLN_DSC_SM_CTL_5_GEN2r BCMI_TSCF_XGXS_READLN_DSC_SM_CTL_5_GEN2r
#define WRITELN_DSC_SM_CTL_5_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_SM_CTL_5_GEN2r
#define WRITEALL_DSC_SM_CTL_5_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_SM_CTL_5_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_SM_CTL_5_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_SM_CTL_6_GEN2
 * BLOCKS:   DSC_D
 * REGADDR:  0xd066
 * DEVAD:    1
 * DESC:     DSC STATE MACHINE CONTROL 6
 * RESETVAL: 0x340d (13325)
 * ACCESS:   R/W
 * FIELDS:
 *     EEE_HW_TUNE_TIMEOUT Defines timeout value for the EEE_HW_TUNE state timer.  Valid range is 0 to 31 which is mapped to 0 to 448 LFSR wraps.
 *     EEE_ANA_PWR_TIMEOUT Defines timeout value for the EEE_ANA_PWR state timer.  Valid range is 0 to 31 which is mapped to 0 to 448 LFSR wraps.
 */
#define BCMI_TSCF_XGXS_DSC_SM_CTL_6_GEN2r (0x0001d066 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_SM_CTL_6_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_SM_CTL_6_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_SM_CTL_6_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_sm_ctl_6_gen2[1];
	uint32_t _dsc_sm_ctl_6_gen2;
} BCMI_TSCF_XGXS_DSC_SM_CTL_6_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_SM_CTL_6_GEN2r_CLR(r) (r).dsc_sm_ctl_6_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_SM_CTL_6_GEN2r_SET(r,d) (r).dsc_sm_ctl_6_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_SM_CTL_6_GEN2r_GET(r) (r).dsc_sm_ctl_6_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_SM_CTL_6_GEN2r_EEE_ANA_PWR_TIMEOUTf_GET(r) ((((r).dsc_sm_ctl_6_gen2[0]) >> 10) & 0x1f)
#define BCMI_TSCF_XGXS_DSC_SM_CTL_6_GEN2r_EEE_ANA_PWR_TIMEOUTf_SET(r,f) (r).dsc_sm_ctl_6_gen2[0]=(((r).dsc_sm_ctl_6_gen2[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10)) | (31 << (16 + 10))
#define BCMI_TSCF_XGXS_DSC_SM_CTL_6_GEN2r_EEE_HW_TUNE_TIMEOUTf_GET(r) (((r).dsc_sm_ctl_6_gen2[0]) & 0x1f)
#define BCMI_TSCF_XGXS_DSC_SM_CTL_6_GEN2r_EEE_HW_TUNE_TIMEOUTf_SET(r,f) (r).dsc_sm_ctl_6_gen2[0]=(((r).dsc_sm_ctl_6_gen2[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access DSC_SM_CTL_6_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_SM_CTL_6_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_6_GEN2r,(_r._dsc_sm_ctl_6_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_SM_CTL_6_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_6_GEN2r,(_r._dsc_sm_ctl_6_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_SM_CTL_6_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_6_GEN2r,(_r._dsc_sm_ctl_6_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_SM_CTL_6_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_6_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_ctl_6_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_SM_CTL_6_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_6_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_ctl_6_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_SM_CTL_6_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_6_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_sm_ctl_6_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_SM_CTL_6_GEN2r BCMI_TSCF_XGXS_DSC_SM_CTL_6_GEN2r
#define DSC_SM_CTL_6_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_SM_CTL_6_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_SM_CTL_6_GEN2r_t DSC_SM_CTL_6_GEN2r_t;
#define DSC_SM_CTL_6_GEN2r_CLR BCMI_TSCF_XGXS_DSC_SM_CTL_6_GEN2r_CLR
#define DSC_SM_CTL_6_GEN2r_SET BCMI_TSCF_XGXS_DSC_SM_CTL_6_GEN2r_SET
#define DSC_SM_CTL_6_GEN2r_GET BCMI_TSCF_XGXS_DSC_SM_CTL_6_GEN2r_GET
#define DSC_SM_CTL_6_GEN2r_EEE_ANA_PWR_TIMEOUTf_GET BCMI_TSCF_XGXS_DSC_SM_CTL_6_GEN2r_EEE_ANA_PWR_TIMEOUTf_GET
#define DSC_SM_CTL_6_GEN2r_EEE_ANA_PWR_TIMEOUTf_SET BCMI_TSCF_XGXS_DSC_SM_CTL_6_GEN2r_EEE_ANA_PWR_TIMEOUTf_SET
#define DSC_SM_CTL_6_GEN2r_EEE_HW_TUNE_TIMEOUTf_GET BCMI_TSCF_XGXS_DSC_SM_CTL_6_GEN2r_EEE_HW_TUNE_TIMEOUTf_GET
#define DSC_SM_CTL_6_GEN2r_EEE_HW_TUNE_TIMEOUTf_SET BCMI_TSCF_XGXS_DSC_SM_CTL_6_GEN2r_EEE_HW_TUNE_TIMEOUTf_SET
#define READ_DSC_SM_CTL_6_GEN2r BCMI_TSCF_XGXS_READ_DSC_SM_CTL_6_GEN2r
#define WRITE_DSC_SM_CTL_6_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_SM_CTL_6_GEN2r
#define MODIFY_DSC_SM_CTL_6_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_SM_CTL_6_GEN2r
#define READLN_DSC_SM_CTL_6_GEN2r BCMI_TSCF_XGXS_READLN_DSC_SM_CTL_6_GEN2r
#define WRITELN_DSC_SM_CTL_6_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_SM_CTL_6_GEN2r
#define WRITEALL_DSC_SM_CTL_6_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_SM_CTL_6_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_SM_CTL_6_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_SM_CTL_7_GEN2
 * BLOCKS:   DSC_D
 * REGADDR:  0xd067
 * DEVAD:    1
 * DESC:     DSC STATE MACHINE CONTROL 7
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CDR_BWSEL_INTEG_ACQCDR CDR 2nd Order Loop Bandwidth select for ACQ_CDR state.{0, 1,2,3} map to {2^0, 2^1, 2^2, 2^-1}
 *     CDR_BWSEL_INTEG_EEE_ACQCDR CDR 2nd Order Loop Bandwidth select for EEE_ACQ_CDR state.{0, 1,2,3} map to {2^0, 2^1, 2^2, 2^-1}
 *     CDR_BWSEL_INTEG_NORM CDR 2nd Order Loop Bandwidth select for non ACQ_CDR and EEE_ACQ_CDR states.{0, 1,2,3} map to {2^0, 2^1, 2^2, 2^-1}
 *     CDR_BWSEL_PROP_ACQCDR CDR Proportional Bandwidth select for ACQ_CDR state.{0, 1} map to {2^0, 2^1}
 *     CDR_BWSEL_PROP_NORM CDR Proportional Bandwidth select for non ACQ_CDR and EEE_ACQ_CDR states.{0, 1} map to {2^0, 2^1}
 */
#define BCMI_TSCF_XGXS_DSC_SM_CTL_7_GEN2r (0x0001d067 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_SM_CTL_7_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_SM_CTL_7_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_SM_CTL_7_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_sm_ctl_7_gen2[1];
	uint32_t _dsc_sm_ctl_7_gen2;
} BCMI_TSCF_XGXS_DSC_SM_CTL_7_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_SM_CTL_7_GEN2r_CLR(r) (r).dsc_sm_ctl_7_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_SM_CTL_7_GEN2r_SET(r,d) (r).dsc_sm_ctl_7_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_SM_CTL_7_GEN2r_GET(r) (r).dsc_sm_ctl_7_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_SM_CTL_7_GEN2r_CDR_BWSEL_PROP_NORMf_GET(r) ((((r).dsc_sm_ctl_7_gen2[0]) >> 14) & 0x1)
#define BCMI_TSCF_XGXS_DSC_SM_CTL_7_GEN2r_CDR_BWSEL_PROP_NORMf_SET(r,f) (r).dsc_sm_ctl_7_gen2[0]=(((r).dsc_sm_ctl_7_gen2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_XGXS_DSC_SM_CTL_7_GEN2r_CDR_BWSEL_PROP_ACQCDRf_GET(r) ((((r).dsc_sm_ctl_7_gen2[0]) >> 12) & 0x1)
#define BCMI_TSCF_XGXS_DSC_SM_CTL_7_GEN2r_CDR_BWSEL_PROP_ACQCDRf_SET(r,f) (r).dsc_sm_ctl_7_gen2[0]=(((r).dsc_sm_ctl_7_gen2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_TSCF_XGXS_DSC_SM_CTL_7_GEN2r_CDR_BWSEL_INTEG_NORMf_GET(r) ((((r).dsc_sm_ctl_7_gen2[0]) >> 8) & 0xf)
#define BCMI_TSCF_XGXS_DSC_SM_CTL_7_GEN2r_CDR_BWSEL_INTEG_NORMf_SET(r,f) (r).dsc_sm_ctl_7_gen2[0]=(((r).dsc_sm_ctl_7_gen2[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_XGXS_DSC_SM_CTL_7_GEN2r_CDR_BWSEL_INTEG_EEE_ACQCDRf_GET(r) ((((r).dsc_sm_ctl_7_gen2[0]) >> 4) & 0xf)
#define BCMI_TSCF_XGXS_DSC_SM_CTL_7_GEN2r_CDR_BWSEL_INTEG_EEE_ACQCDRf_SET(r,f) (r).dsc_sm_ctl_7_gen2[0]=(((r).dsc_sm_ctl_7_gen2[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4)) | (15 << (16 + 4))
#define BCMI_TSCF_XGXS_DSC_SM_CTL_7_GEN2r_CDR_BWSEL_INTEG_ACQCDRf_GET(r) (((r).dsc_sm_ctl_7_gen2[0]) & 0xf)
#define BCMI_TSCF_XGXS_DSC_SM_CTL_7_GEN2r_CDR_BWSEL_INTEG_ACQCDRf_SET(r,f) (r).dsc_sm_ctl_7_gen2[0]=(((r).dsc_sm_ctl_7_gen2[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access DSC_SM_CTL_7_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_SM_CTL_7_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_7_GEN2r,(_r._dsc_sm_ctl_7_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_SM_CTL_7_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_7_GEN2r,(_r._dsc_sm_ctl_7_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_SM_CTL_7_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_7_GEN2r,(_r._dsc_sm_ctl_7_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_SM_CTL_7_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_7_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_ctl_7_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_SM_CTL_7_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_7_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_ctl_7_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_SM_CTL_7_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_7_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_sm_ctl_7_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_SM_CTL_7_GEN2r BCMI_TSCF_XGXS_DSC_SM_CTL_7_GEN2r
#define DSC_SM_CTL_7_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_SM_CTL_7_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_SM_CTL_7_GEN2r_t DSC_SM_CTL_7_GEN2r_t;
#define DSC_SM_CTL_7_GEN2r_CLR BCMI_TSCF_XGXS_DSC_SM_CTL_7_GEN2r_CLR
#define DSC_SM_CTL_7_GEN2r_SET BCMI_TSCF_XGXS_DSC_SM_CTL_7_GEN2r_SET
#define DSC_SM_CTL_7_GEN2r_GET BCMI_TSCF_XGXS_DSC_SM_CTL_7_GEN2r_GET
#define DSC_SM_CTL_7_GEN2r_CDR_BWSEL_PROP_NORMf_GET BCMI_TSCF_XGXS_DSC_SM_CTL_7_GEN2r_CDR_BWSEL_PROP_NORMf_GET
#define DSC_SM_CTL_7_GEN2r_CDR_BWSEL_PROP_NORMf_SET BCMI_TSCF_XGXS_DSC_SM_CTL_7_GEN2r_CDR_BWSEL_PROP_NORMf_SET
#define DSC_SM_CTL_7_GEN2r_CDR_BWSEL_PROP_ACQCDRf_GET BCMI_TSCF_XGXS_DSC_SM_CTL_7_GEN2r_CDR_BWSEL_PROP_ACQCDRf_GET
#define DSC_SM_CTL_7_GEN2r_CDR_BWSEL_PROP_ACQCDRf_SET BCMI_TSCF_XGXS_DSC_SM_CTL_7_GEN2r_CDR_BWSEL_PROP_ACQCDRf_SET
#define DSC_SM_CTL_7_GEN2r_CDR_BWSEL_INTEG_NORMf_GET BCMI_TSCF_XGXS_DSC_SM_CTL_7_GEN2r_CDR_BWSEL_INTEG_NORMf_GET
#define DSC_SM_CTL_7_GEN2r_CDR_BWSEL_INTEG_NORMf_SET BCMI_TSCF_XGXS_DSC_SM_CTL_7_GEN2r_CDR_BWSEL_INTEG_NORMf_SET
#define DSC_SM_CTL_7_GEN2r_CDR_BWSEL_INTEG_EEE_ACQCDRf_GET BCMI_TSCF_XGXS_DSC_SM_CTL_7_GEN2r_CDR_BWSEL_INTEG_EEE_ACQCDRf_GET
#define DSC_SM_CTL_7_GEN2r_CDR_BWSEL_INTEG_EEE_ACQCDRf_SET BCMI_TSCF_XGXS_DSC_SM_CTL_7_GEN2r_CDR_BWSEL_INTEG_EEE_ACQCDRf_SET
#define DSC_SM_CTL_7_GEN2r_CDR_BWSEL_INTEG_ACQCDRf_GET BCMI_TSCF_XGXS_DSC_SM_CTL_7_GEN2r_CDR_BWSEL_INTEG_ACQCDRf_GET
#define DSC_SM_CTL_7_GEN2r_CDR_BWSEL_INTEG_ACQCDRf_SET BCMI_TSCF_XGXS_DSC_SM_CTL_7_GEN2r_CDR_BWSEL_INTEG_ACQCDRf_SET
#define READ_DSC_SM_CTL_7_GEN2r BCMI_TSCF_XGXS_READ_DSC_SM_CTL_7_GEN2r
#define WRITE_DSC_SM_CTL_7_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_SM_CTL_7_GEN2r
#define MODIFY_DSC_SM_CTL_7_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_SM_CTL_7_GEN2r
#define READLN_DSC_SM_CTL_7_GEN2r BCMI_TSCF_XGXS_READLN_DSC_SM_CTL_7_GEN2r
#define WRITELN_DSC_SM_CTL_7_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_SM_CTL_7_GEN2r
#define WRITEALL_DSC_SM_CTL_7_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_SM_CTL_7_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_SM_CTL_7_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_SM_CTL_8_GEN2
 * BLOCKS:   DSC_D
 * REGADDR:  0xd068
 * DEVAD:    1
 * DESC:     DSC STATE MACHINE CONTROL 8
 * RESETVAL: 0x11 (17)
 * ACCESS:   R/W
 * FIELDS:
 *     PHASE_ERR_OFFSET Phase Error Offset for non-EEE_ACQ_CDR states. Signed value. Valid range is -8 to 7. This translates to either -8/2 to 7/2 or -8/4 to 7/4, depending on how rg_phase_err_offset_mult_2 is set. By default is is -8/4 to 7/4 adding into VCO reg.
 *     EEE_PHASE_ERR_OFFSET Phase Error Offset for EEE_ACQ_CDR state. Signed value. Valid range is -8 to 7.
 *     PHASE_ERR_OFFSET_EN Phase Error Offset Enable for non-EEE_ACQ_CDR states.
 *     EEE_PHASE_ERR_OFFSET_EN Phase Error Offset Enable for EEE_ACQ_CDR state.
 *     CDR_BWSEL_PROP_EEE_ACQCDR CDR Proportional Bandwidth select for EEE_ACQ_CDR state.{0, 1} map to {2^0, 2^1}
 */
#define BCMI_TSCF_XGXS_DSC_SM_CTL_8_GEN2r (0x0001d068 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_SM_CTL_8_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_SM_CTL_8_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_SM_CTL_8_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_sm_ctl_8_gen2[1];
	uint32_t _dsc_sm_ctl_8_gen2;
} BCMI_TSCF_XGXS_DSC_SM_CTL_8_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_SM_CTL_8_GEN2r_CLR(r) (r).dsc_sm_ctl_8_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_SM_CTL_8_GEN2r_SET(r,d) (r).dsc_sm_ctl_8_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_SM_CTL_8_GEN2r_GET(r) (r).dsc_sm_ctl_8_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_SM_CTL_8_GEN2r_CDR_BWSEL_PROP_EEE_ACQCDRf_GET(r) ((((r).dsc_sm_ctl_8_gen2[0]) >> 14) & 0x1)
#define BCMI_TSCF_XGXS_DSC_SM_CTL_8_GEN2r_CDR_BWSEL_PROP_EEE_ACQCDRf_SET(r,f) (r).dsc_sm_ctl_8_gen2[0]=(((r).dsc_sm_ctl_8_gen2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_XGXS_DSC_SM_CTL_8_GEN2r_EEE_PHASE_ERR_OFFSET_ENf_GET(r) ((((r).dsc_sm_ctl_8_gen2[0]) >> 10) & 0x3)
#define BCMI_TSCF_XGXS_DSC_SM_CTL_8_GEN2r_EEE_PHASE_ERR_OFFSET_ENf_SET(r,f) (r).dsc_sm_ctl_8_gen2[0]=(((r).dsc_sm_ctl_8_gen2[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10)) | (3 << (16 + 10))
#define BCMI_TSCF_XGXS_DSC_SM_CTL_8_GEN2r_PHASE_ERR_OFFSET_ENf_GET(r) ((((r).dsc_sm_ctl_8_gen2[0]) >> 8) & 0x3)
#define BCMI_TSCF_XGXS_DSC_SM_CTL_8_GEN2r_PHASE_ERR_OFFSET_ENf_SET(r,f) (r).dsc_sm_ctl_8_gen2[0]=(((r).dsc_sm_ctl_8_gen2[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))
#define BCMI_TSCF_XGXS_DSC_SM_CTL_8_GEN2r_EEE_PHASE_ERR_OFFSETf_GET(r) ((((r).dsc_sm_ctl_8_gen2[0]) >> 4) & 0xf)
#define BCMI_TSCF_XGXS_DSC_SM_CTL_8_GEN2r_EEE_PHASE_ERR_OFFSETf_SET(r,f) (r).dsc_sm_ctl_8_gen2[0]=(((r).dsc_sm_ctl_8_gen2[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4)) | (15 << (16 + 4))
#define BCMI_TSCF_XGXS_DSC_SM_CTL_8_GEN2r_PHASE_ERR_OFFSETf_GET(r) (((r).dsc_sm_ctl_8_gen2[0]) & 0xf)
#define BCMI_TSCF_XGXS_DSC_SM_CTL_8_GEN2r_PHASE_ERR_OFFSETf_SET(r,f) (r).dsc_sm_ctl_8_gen2[0]=(((r).dsc_sm_ctl_8_gen2[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access DSC_SM_CTL_8_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_SM_CTL_8_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_8_GEN2r,(_r._dsc_sm_ctl_8_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_SM_CTL_8_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_8_GEN2r,(_r._dsc_sm_ctl_8_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_SM_CTL_8_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_8_GEN2r,(_r._dsc_sm_ctl_8_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_SM_CTL_8_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_8_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_ctl_8_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_SM_CTL_8_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_8_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_ctl_8_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_SM_CTL_8_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_8_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_sm_ctl_8_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_SM_CTL_8_GEN2r BCMI_TSCF_XGXS_DSC_SM_CTL_8_GEN2r
#define DSC_SM_CTL_8_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_SM_CTL_8_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_SM_CTL_8_GEN2r_t DSC_SM_CTL_8_GEN2r_t;
#define DSC_SM_CTL_8_GEN2r_CLR BCMI_TSCF_XGXS_DSC_SM_CTL_8_GEN2r_CLR
#define DSC_SM_CTL_8_GEN2r_SET BCMI_TSCF_XGXS_DSC_SM_CTL_8_GEN2r_SET
#define DSC_SM_CTL_8_GEN2r_GET BCMI_TSCF_XGXS_DSC_SM_CTL_8_GEN2r_GET
#define DSC_SM_CTL_8_GEN2r_CDR_BWSEL_PROP_EEE_ACQCDRf_GET BCMI_TSCF_XGXS_DSC_SM_CTL_8_GEN2r_CDR_BWSEL_PROP_EEE_ACQCDRf_GET
#define DSC_SM_CTL_8_GEN2r_CDR_BWSEL_PROP_EEE_ACQCDRf_SET BCMI_TSCF_XGXS_DSC_SM_CTL_8_GEN2r_CDR_BWSEL_PROP_EEE_ACQCDRf_SET
#define DSC_SM_CTL_8_GEN2r_EEE_PHASE_ERR_OFFSET_ENf_GET BCMI_TSCF_XGXS_DSC_SM_CTL_8_GEN2r_EEE_PHASE_ERR_OFFSET_ENf_GET
#define DSC_SM_CTL_8_GEN2r_EEE_PHASE_ERR_OFFSET_ENf_SET BCMI_TSCF_XGXS_DSC_SM_CTL_8_GEN2r_EEE_PHASE_ERR_OFFSET_ENf_SET
#define DSC_SM_CTL_8_GEN2r_PHASE_ERR_OFFSET_ENf_GET BCMI_TSCF_XGXS_DSC_SM_CTL_8_GEN2r_PHASE_ERR_OFFSET_ENf_GET
#define DSC_SM_CTL_8_GEN2r_PHASE_ERR_OFFSET_ENf_SET BCMI_TSCF_XGXS_DSC_SM_CTL_8_GEN2r_PHASE_ERR_OFFSET_ENf_SET
#define DSC_SM_CTL_8_GEN2r_EEE_PHASE_ERR_OFFSETf_GET BCMI_TSCF_XGXS_DSC_SM_CTL_8_GEN2r_EEE_PHASE_ERR_OFFSETf_GET
#define DSC_SM_CTL_8_GEN2r_EEE_PHASE_ERR_OFFSETf_SET BCMI_TSCF_XGXS_DSC_SM_CTL_8_GEN2r_EEE_PHASE_ERR_OFFSETf_SET
#define DSC_SM_CTL_8_GEN2r_PHASE_ERR_OFFSETf_GET BCMI_TSCF_XGXS_DSC_SM_CTL_8_GEN2r_PHASE_ERR_OFFSETf_GET
#define DSC_SM_CTL_8_GEN2r_PHASE_ERR_OFFSETf_SET BCMI_TSCF_XGXS_DSC_SM_CTL_8_GEN2r_PHASE_ERR_OFFSETf_SET
#define READ_DSC_SM_CTL_8_GEN2r BCMI_TSCF_XGXS_READ_DSC_SM_CTL_8_GEN2r
#define WRITE_DSC_SM_CTL_8_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_SM_CTL_8_GEN2r
#define MODIFY_DSC_SM_CTL_8_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_SM_CTL_8_GEN2r
#define READLN_DSC_SM_CTL_8_GEN2r BCMI_TSCF_XGXS_READLN_DSC_SM_CTL_8_GEN2r
#define WRITELN_DSC_SM_CTL_8_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_SM_CTL_8_GEN2r
#define WRITEALL_DSC_SM_CTL_8_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_SM_CTL_8_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_SM_CTL_8_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_SM_CTL_9_GEN2
 * BLOCKS:   DSC_D
 * REGADDR:  0xd069
 * DEVAD:    1
 * DESC:     DSC STATE MACHINE CONTROL 9
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RX_RESTART_PMD   1: restarts the RX PMD. This is a self-clear register bit.
 *     RX_RESTART_PMD_HOLD 1: restarts the RX PMD and holds it in RESTART state until this bit is cleared.
 */
#define BCMI_TSCF_XGXS_DSC_SM_CTL_9_GEN2r (0x0001d069 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_SM_CTL_9_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_SM_CTL_9_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_SM_CTL_9_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_sm_ctl_9_gen2[1];
	uint32_t _dsc_sm_ctl_9_gen2;
} BCMI_TSCF_XGXS_DSC_SM_CTL_9_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_SM_CTL_9_GEN2r_CLR(r) (r).dsc_sm_ctl_9_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_SM_CTL_9_GEN2r_SET(r,d) (r).dsc_sm_ctl_9_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_SM_CTL_9_GEN2r_GET(r) (r).dsc_sm_ctl_9_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_SM_CTL_9_GEN2r_RX_RESTART_PMD_HOLDf_GET(r) ((((r).dsc_sm_ctl_9_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_DSC_SM_CTL_9_GEN2r_RX_RESTART_PMD_HOLDf_SET(r,f) (r).dsc_sm_ctl_9_gen2[0]=(((r).dsc_sm_ctl_9_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_DSC_SM_CTL_9_GEN2r_RX_RESTART_PMDf_GET(r) (((r).dsc_sm_ctl_9_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_DSC_SM_CTL_9_GEN2r_RX_RESTART_PMDf_SET(r,f) (r).dsc_sm_ctl_9_gen2[0]=(((r).dsc_sm_ctl_9_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access DSC_SM_CTL_9_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_SM_CTL_9_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_9_GEN2r,(_r._dsc_sm_ctl_9_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_SM_CTL_9_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_9_GEN2r,(_r._dsc_sm_ctl_9_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_SM_CTL_9_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_9_GEN2r,(_r._dsc_sm_ctl_9_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_SM_CTL_9_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_9_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_ctl_9_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_SM_CTL_9_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_9_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_ctl_9_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_SM_CTL_9_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_CTL_9_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_sm_ctl_9_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_SM_CTL_9_GEN2r BCMI_TSCF_XGXS_DSC_SM_CTL_9_GEN2r
#define DSC_SM_CTL_9_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_SM_CTL_9_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_SM_CTL_9_GEN2r_t DSC_SM_CTL_9_GEN2r_t;
#define DSC_SM_CTL_9_GEN2r_CLR BCMI_TSCF_XGXS_DSC_SM_CTL_9_GEN2r_CLR
#define DSC_SM_CTL_9_GEN2r_SET BCMI_TSCF_XGXS_DSC_SM_CTL_9_GEN2r_SET
#define DSC_SM_CTL_9_GEN2r_GET BCMI_TSCF_XGXS_DSC_SM_CTL_9_GEN2r_GET
#define DSC_SM_CTL_9_GEN2r_RX_RESTART_PMD_HOLDf_GET BCMI_TSCF_XGXS_DSC_SM_CTL_9_GEN2r_RX_RESTART_PMD_HOLDf_GET
#define DSC_SM_CTL_9_GEN2r_RX_RESTART_PMD_HOLDf_SET BCMI_TSCF_XGXS_DSC_SM_CTL_9_GEN2r_RX_RESTART_PMD_HOLDf_SET
#define DSC_SM_CTL_9_GEN2r_RX_RESTART_PMDf_GET BCMI_TSCF_XGXS_DSC_SM_CTL_9_GEN2r_RX_RESTART_PMDf_GET
#define DSC_SM_CTL_9_GEN2r_RX_RESTART_PMDf_SET BCMI_TSCF_XGXS_DSC_SM_CTL_9_GEN2r_RX_RESTART_PMDf_SET
#define READ_DSC_SM_CTL_9_GEN2r BCMI_TSCF_XGXS_READ_DSC_SM_CTL_9_GEN2r
#define WRITE_DSC_SM_CTL_9_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_SM_CTL_9_GEN2r
#define MODIFY_DSC_SM_CTL_9_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_SM_CTL_9_GEN2r
#define READLN_DSC_SM_CTL_9_GEN2r BCMI_TSCF_XGXS_READLN_DSC_SM_CTL_9_GEN2r
#define WRITELN_DSC_SM_CTL_9_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_SM_CTL_9_GEN2r
#define WRITEALL_DSC_SM_CTL_9_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_SM_CTL_9_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_SM_CTL_9_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_SM_STS_DSC_LOCK_GEN2
 * BLOCKS:   DSC_D
 * REGADDR:  0xd06a
 * DEVAD:    1
 * DESC:     DSC STATE MACHINE DSC_LOCK STATUS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     RX_DSC_LOCK      1 indicates that DSC is locked.
 *     MEAS_INCOMPLETE  1 indicates that measurement is incomplete. 0 indicates that measurement is complete.
 *     EEE_MEASURE_CNT  Indicates the eee_measure_cnt status. This is a debug register.
 */
#define BCMI_TSCF_XGXS_DSC_SM_STS_DSC_LOCK_GEN2r (0x0001d06a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_SM_STS_DSC_LOCK_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_SM_STS_DSC_LOCK_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_SM_STS_DSC_LOCK_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_sm_sts_dsc_lock_gen2[1];
	uint32_t _dsc_sm_sts_dsc_lock_gen2;
} BCMI_TSCF_XGXS_DSC_SM_STS_DSC_LOCK_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_SM_STS_DSC_LOCK_GEN2r_CLR(r) (r).dsc_sm_sts_dsc_lock_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_SM_STS_DSC_LOCK_GEN2r_SET(r,d) (r).dsc_sm_sts_dsc_lock_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_SM_STS_DSC_LOCK_GEN2r_GET(r) (r).dsc_sm_sts_dsc_lock_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_SM_STS_DSC_LOCK_GEN2r_EEE_MEASURE_CNTf_GET(r) ((((r).dsc_sm_sts_dsc_lock_gen2[0]) >> 7) & 0x1ff)
#define BCMI_TSCF_XGXS_DSC_SM_STS_DSC_LOCK_GEN2r_EEE_MEASURE_CNTf_SET(r,f) (r).dsc_sm_sts_dsc_lock_gen2[0]=(((r).dsc_sm_sts_dsc_lock_gen2[0] & ~((uint32_t)0x1ff << 7)) | ((((uint32_t)f) & 0x1ff) << 7)) | (511 << (16 + 7))
#define BCMI_TSCF_XGXS_DSC_SM_STS_DSC_LOCK_GEN2r_MEAS_INCOMPLETEf_GET(r) ((((r).dsc_sm_sts_dsc_lock_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_DSC_SM_STS_DSC_LOCK_GEN2r_MEAS_INCOMPLETEf_SET(r,f) (r).dsc_sm_sts_dsc_lock_gen2[0]=(((r).dsc_sm_sts_dsc_lock_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_DSC_SM_STS_DSC_LOCK_GEN2r_RX_DSC_LOCKf_GET(r) (((r).dsc_sm_sts_dsc_lock_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_DSC_SM_STS_DSC_LOCK_GEN2r_RX_DSC_LOCKf_SET(r,f) (r).dsc_sm_sts_dsc_lock_gen2[0]=(((r).dsc_sm_sts_dsc_lock_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access DSC_SM_STS_DSC_LOCK_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_SM_STS_DSC_LOCK_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_SM_STS_DSC_LOCK_GEN2r,(_r._dsc_sm_sts_dsc_lock_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_SM_STS_DSC_LOCK_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_STS_DSC_LOCK_GEN2r,(_r._dsc_sm_sts_dsc_lock_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_SM_STS_DSC_LOCK_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_STS_DSC_LOCK_GEN2r,(_r._dsc_sm_sts_dsc_lock_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_SM_STS_DSC_LOCK_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_SM_STS_DSC_LOCK_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_sts_dsc_lock_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_SM_STS_DSC_LOCK_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_STS_DSC_LOCK_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_sts_dsc_lock_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_SM_STS_DSC_LOCK_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_STS_DSC_LOCK_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_sm_sts_dsc_lock_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_SM_STS_DSC_LOCK_GEN2r BCMI_TSCF_XGXS_DSC_SM_STS_DSC_LOCK_GEN2r
#define DSC_SM_STS_DSC_LOCK_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_SM_STS_DSC_LOCK_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_SM_STS_DSC_LOCK_GEN2r_t DSC_SM_STS_DSC_LOCK_GEN2r_t;
#define DSC_SM_STS_DSC_LOCK_GEN2r_CLR BCMI_TSCF_XGXS_DSC_SM_STS_DSC_LOCK_GEN2r_CLR
#define DSC_SM_STS_DSC_LOCK_GEN2r_SET BCMI_TSCF_XGXS_DSC_SM_STS_DSC_LOCK_GEN2r_SET
#define DSC_SM_STS_DSC_LOCK_GEN2r_GET BCMI_TSCF_XGXS_DSC_SM_STS_DSC_LOCK_GEN2r_GET
#define DSC_SM_STS_DSC_LOCK_GEN2r_EEE_MEASURE_CNTf_GET BCMI_TSCF_XGXS_DSC_SM_STS_DSC_LOCK_GEN2r_EEE_MEASURE_CNTf_GET
#define DSC_SM_STS_DSC_LOCK_GEN2r_EEE_MEASURE_CNTf_SET BCMI_TSCF_XGXS_DSC_SM_STS_DSC_LOCK_GEN2r_EEE_MEASURE_CNTf_SET
#define DSC_SM_STS_DSC_LOCK_GEN2r_MEAS_INCOMPLETEf_GET BCMI_TSCF_XGXS_DSC_SM_STS_DSC_LOCK_GEN2r_MEAS_INCOMPLETEf_GET
#define DSC_SM_STS_DSC_LOCK_GEN2r_MEAS_INCOMPLETEf_SET BCMI_TSCF_XGXS_DSC_SM_STS_DSC_LOCK_GEN2r_MEAS_INCOMPLETEf_SET
#define DSC_SM_STS_DSC_LOCK_GEN2r_RX_DSC_LOCKf_GET BCMI_TSCF_XGXS_DSC_SM_STS_DSC_LOCK_GEN2r_RX_DSC_LOCKf_GET
#define DSC_SM_STS_DSC_LOCK_GEN2r_RX_DSC_LOCKf_SET BCMI_TSCF_XGXS_DSC_SM_STS_DSC_LOCK_GEN2r_RX_DSC_LOCKf_SET
#define READ_DSC_SM_STS_DSC_LOCK_GEN2r BCMI_TSCF_XGXS_READ_DSC_SM_STS_DSC_LOCK_GEN2r
#define WRITE_DSC_SM_STS_DSC_LOCK_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_SM_STS_DSC_LOCK_GEN2r
#define MODIFY_DSC_SM_STS_DSC_LOCK_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_SM_STS_DSC_LOCK_GEN2r
#define READLN_DSC_SM_STS_DSC_LOCK_GEN2r BCMI_TSCF_XGXS_READLN_DSC_SM_STS_DSC_LOCK_GEN2r
#define WRITELN_DSC_SM_STS_DSC_LOCK_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_SM_STS_DSC_LOCK_GEN2r
#define WRITEALL_DSC_SM_STS_DSC_LOCK_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_SM_STS_DSC_LOCK_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_SM_STS_DSC_LOCK_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_SM_STS_DSC_ST_ONE_HOT_GEN2
 * BLOCKS:   DSC_D
 * REGADDR:  0xd06b
 * DEVAD:    1
 * DESC:     DSC STATE MACHINE STATUS ONE HOT
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     DSC_STATE_ONE_HOT Sticky one-hot coded states. These registers are cleared on read.RESET           =  0RESTART         =  1CONFIG          =  2WAIT_FOR_SIG    =  3ACQ_CDR         =  4CDR_SETTLE      =  5HW_TUNE         =  6UC_TUNE         =  7MEASURE         =  8DONE            =  9
 */
#define BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_ONE_HOT_GEN2r (0x0001d06b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_ONE_HOT_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_SM_STS_DSC_ST_ONE_HOT_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_ONE_HOT_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_sm_sts_dsc_st_one_hot_gen2[1];
	uint32_t _dsc_sm_sts_dsc_st_one_hot_gen2;
} BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_ONE_HOT_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_ONE_HOT_GEN2r_CLR(r) (r).dsc_sm_sts_dsc_st_one_hot_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_ONE_HOT_GEN2r_SET(r,d) (r).dsc_sm_sts_dsc_st_one_hot_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_ONE_HOT_GEN2r_GET(r) (r).dsc_sm_sts_dsc_st_one_hot_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_ONE_HOT_GEN2r_DSC_STATE_ONE_HOTf_GET(r) (((r).dsc_sm_sts_dsc_st_one_hot_gen2[0]) & 0x3ff)
#define BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_ONE_HOT_GEN2r_DSC_STATE_ONE_HOTf_SET(r,f) (r).dsc_sm_sts_dsc_st_one_hot_gen2[0]=(((r).dsc_sm_sts_dsc_st_one_hot_gen2[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff)) | (0x3ff << 16)

/*
 * These macros can be used to access DSC_SM_STS_DSC_ST_ONE_HOT_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_SM_STS_DSC_ST_ONE_HOT_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_ONE_HOT_GEN2r,(_r._dsc_sm_sts_dsc_st_one_hot_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_SM_STS_DSC_ST_ONE_HOT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_ONE_HOT_GEN2r,(_r._dsc_sm_sts_dsc_st_one_hot_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_SM_STS_DSC_ST_ONE_HOT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_ONE_HOT_GEN2r,(_r._dsc_sm_sts_dsc_st_one_hot_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_SM_STS_DSC_ST_ONE_HOT_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_ONE_HOT_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_sts_dsc_st_one_hot_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_SM_STS_DSC_ST_ONE_HOT_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_ONE_HOT_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_sts_dsc_st_one_hot_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_SM_STS_DSC_ST_ONE_HOT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_ONE_HOT_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_sm_sts_dsc_st_one_hot_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_SM_STS_DSC_ST_ONE_HOT_GEN2r BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_ONE_HOT_GEN2r
#define DSC_SM_STS_DSC_ST_ONE_HOT_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_ONE_HOT_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_ONE_HOT_GEN2r_t DSC_SM_STS_DSC_ST_ONE_HOT_GEN2r_t;
#define DSC_SM_STS_DSC_ST_ONE_HOT_GEN2r_CLR BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_ONE_HOT_GEN2r_CLR
#define DSC_SM_STS_DSC_ST_ONE_HOT_GEN2r_SET BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_ONE_HOT_GEN2r_SET
#define DSC_SM_STS_DSC_ST_ONE_HOT_GEN2r_GET BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_ONE_HOT_GEN2r_GET
#define DSC_SM_STS_DSC_ST_ONE_HOT_GEN2r_DSC_STATE_ONE_HOTf_GET BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_ONE_HOT_GEN2r_DSC_STATE_ONE_HOTf_GET
#define DSC_SM_STS_DSC_ST_ONE_HOT_GEN2r_DSC_STATE_ONE_HOTf_SET BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_ONE_HOT_GEN2r_DSC_STATE_ONE_HOTf_SET
#define READ_DSC_SM_STS_DSC_ST_ONE_HOT_GEN2r BCMI_TSCF_XGXS_READ_DSC_SM_STS_DSC_ST_ONE_HOT_GEN2r
#define WRITE_DSC_SM_STS_DSC_ST_ONE_HOT_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_SM_STS_DSC_ST_ONE_HOT_GEN2r
#define MODIFY_DSC_SM_STS_DSC_ST_ONE_HOT_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_SM_STS_DSC_ST_ONE_HOT_GEN2r
#define READLN_DSC_SM_STS_DSC_ST_ONE_HOT_GEN2r BCMI_TSCF_XGXS_READLN_DSC_SM_STS_DSC_ST_ONE_HOT_GEN2r
#define WRITELN_DSC_SM_STS_DSC_ST_ONE_HOT_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_SM_STS_DSC_ST_ONE_HOT_GEN2r
#define WRITEALL_DSC_SM_STS_DSC_ST_ONE_HOT_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_SM_STS_DSC_ST_ONE_HOT_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_ONE_HOT_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_SM_STS_DSC_ST_EEE_ONE_HOT_GEN2
 * BLOCKS:   DSC_D
 * REGADDR:  0xd06c
 * DEVAD:    1
 * DESC:     DSC STATE MACHINE STATUS EEE ONE HOT
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     DSC_STATE_EEE_ONE_HOT Sticky one-hot coded EEE state . These registers are cleared on read.EEE_QUIET       =  0EEE_ANA_PWR     =  1EEE_ACQ_CDR     =  2EEE_CDR_SETTLE  =  3EEE_HW_TUNE     =  4EEE_MEASURE     =  5EEE_DONE        =  6
 */
#define BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_EEE_ONE_HOT_GEN2r (0x0001d06c | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_EEE_ONE_HOT_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_SM_STS_DSC_ST_EEE_ONE_HOT_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_EEE_ONE_HOT_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_sm_sts_dsc_st_eee_one_hot_gen2[1];
	uint32_t _dsc_sm_sts_dsc_st_eee_one_hot_gen2;
} BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_EEE_ONE_HOT_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_EEE_ONE_HOT_GEN2r_CLR(r) (r).dsc_sm_sts_dsc_st_eee_one_hot_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_EEE_ONE_HOT_GEN2r_SET(r,d) (r).dsc_sm_sts_dsc_st_eee_one_hot_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_EEE_ONE_HOT_GEN2r_GET(r) (r).dsc_sm_sts_dsc_st_eee_one_hot_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_EEE_ONE_HOT_GEN2r_DSC_STATE_EEE_ONE_HOTf_GET(r) (((r).dsc_sm_sts_dsc_st_eee_one_hot_gen2[0]) & 0x7f)
#define BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_EEE_ONE_HOT_GEN2r_DSC_STATE_EEE_ONE_HOTf_SET(r,f) (r).dsc_sm_sts_dsc_st_eee_one_hot_gen2[0]=(((r).dsc_sm_sts_dsc_st_eee_one_hot_gen2[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f)) | (0x7f << 16)

/*
 * These macros can be used to access DSC_SM_STS_DSC_ST_EEE_ONE_HOT_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_SM_STS_DSC_ST_EEE_ONE_HOT_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_EEE_ONE_HOT_GEN2r,(_r._dsc_sm_sts_dsc_st_eee_one_hot_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_SM_STS_DSC_ST_EEE_ONE_HOT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_EEE_ONE_HOT_GEN2r,(_r._dsc_sm_sts_dsc_st_eee_one_hot_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_SM_STS_DSC_ST_EEE_ONE_HOT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_EEE_ONE_HOT_GEN2r,(_r._dsc_sm_sts_dsc_st_eee_one_hot_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_SM_STS_DSC_ST_EEE_ONE_HOT_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_EEE_ONE_HOT_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_sts_dsc_st_eee_one_hot_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_SM_STS_DSC_ST_EEE_ONE_HOT_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_EEE_ONE_HOT_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_sts_dsc_st_eee_one_hot_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_SM_STS_DSC_ST_EEE_ONE_HOT_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_EEE_ONE_HOT_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_sm_sts_dsc_st_eee_one_hot_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_SM_STS_DSC_ST_EEE_ONE_HOT_GEN2r BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_EEE_ONE_HOT_GEN2r
#define DSC_SM_STS_DSC_ST_EEE_ONE_HOT_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_EEE_ONE_HOT_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_EEE_ONE_HOT_GEN2r_t DSC_SM_STS_DSC_ST_EEE_ONE_HOT_GEN2r_t;
#define DSC_SM_STS_DSC_ST_EEE_ONE_HOT_GEN2r_CLR BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_EEE_ONE_HOT_GEN2r_CLR
#define DSC_SM_STS_DSC_ST_EEE_ONE_HOT_GEN2r_SET BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_EEE_ONE_HOT_GEN2r_SET
#define DSC_SM_STS_DSC_ST_EEE_ONE_HOT_GEN2r_GET BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_EEE_ONE_HOT_GEN2r_GET
#define DSC_SM_STS_DSC_ST_EEE_ONE_HOT_GEN2r_DSC_STATE_EEE_ONE_HOTf_GET BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_EEE_ONE_HOT_GEN2r_DSC_STATE_EEE_ONE_HOTf_GET
#define DSC_SM_STS_DSC_ST_EEE_ONE_HOT_GEN2r_DSC_STATE_EEE_ONE_HOTf_SET BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_EEE_ONE_HOT_GEN2r_DSC_STATE_EEE_ONE_HOTf_SET
#define READ_DSC_SM_STS_DSC_ST_EEE_ONE_HOT_GEN2r BCMI_TSCF_XGXS_READ_DSC_SM_STS_DSC_ST_EEE_ONE_HOT_GEN2r
#define WRITE_DSC_SM_STS_DSC_ST_EEE_ONE_HOT_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_SM_STS_DSC_ST_EEE_ONE_HOT_GEN2r
#define MODIFY_DSC_SM_STS_DSC_ST_EEE_ONE_HOT_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_SM_STS_DSC_ST_EEE_ONE_HOT_GEN2r
#define READLN_DSC_SM_STS_DSC_ST_EEE_ONE_HOT_GEN2r BCMI_TSCF_XGXS_READLN_DSC_SM_STS_DSC_ST_EEE_ONE_HOT_GEN2r
#define WRITELN_DSC_SM_STS_DSC_ST_EEE_ONE_HOT_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_SM_STS_DSC_ST_EEE_ONE_HOT_GEN2r
#define WRITEALL_DSC_SM_STS_DSC_ST_EEE_ONE_HOT_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_SM_STS_DSC_ST_EEE_ONE_HOT_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_EEE_ONE_HOT_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_SM_STS_RESTART_GEN2
 * BLOCKS:   DSC_D
 * REGADDR:  0xd06d
 * DEVAD:    1
 * DESC:     DSC STATE MACHINE STATUS RESTART
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     RESTART_PI_EXT_MODE Indicates when SM moves to RESTART state due to enabling of RX_PI external control (i.e. digital loopback enable). This is clear on read.
 *     RESTART_SIGDET   Indicates when SM moves to RESTART state due to sigdet==0 and eee_mode_en register is 1'b0. This is clear on read.
 *     RESTART_PMD_RESTART Indicates when SM moves to RESTART state due to assertion of pmd_restart to 1'b1. This is clear on read.
 *     EEE_QUIET_FROM_EEE_STATES Indicates when SM moves from any EEE states to EEE_QUIET state. This is clear on read.
 */
#define BCMI_TSCF_XGXS_DSC_SM_STS_RESTART_GEN2r (0x0001d06d | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_SM_STS_RESTART_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_SM_STS_RESTART_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_SM_STS_RESTART_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_sm_sts_restart_gen2[1];
	uint32_t _dsc_sm_sts_restart_gen2;
} BCMI_TSCF_XGXS_DSC_SM_STS_RESTART_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_SM_STS_RESTART_GEN2r_CLR(r) (r).dsc_sm_sts_restart_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_SM_STS_RESTART_GEN2r_SET(r,d) (r).dsc_sm_sts_restart_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_SM_STS_RESTART_GEN2r_GET(r) (r).dsc_sm_sts_restart_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_SM_STS_RESTART_GEN2r_EEE_QUIET_FROM_EEE_STATESf_GET(r) ((((r).dsc_sm_sts_restart_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_DSC_SM_STS_RESTART_GEN2r_EEE_QUIET_FROM_EEE_STATESf_SET(r,f) (r).dsc_sm_sts_restart_gen2[0]=(((r).dsc_sm_sts_restart_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_DSC_SM_STS_RESTART_GEN2r_RESTART_PMD_RESTARTf_GET(r) ((((r).dsc_sm_sts_restart_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_DSC_SM_STS_RESTART_GEN2r_RESTART_PMD_RESTARTf_SET(r,f) (r).dsc_sm_sts_restart_gen2[0]=(((r).dsc_sm_sts_restart_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_DSC_SM_STS_RESTART_GEN2r_RESTART_SIGDETf_GET(r) ((((r).dsc_sm_sts_restart_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_DSC_SM_STS_RESTART_GEN2r_RESTART_SIGDETf_SET(r,f) (r).dsc_sm_sts_restart_gen2[0]=(((r).dsc_sm_sts_restart_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_DSC_SM_STS_RESTART_GEN2r_RESTART_PI_EXT_MODEf_GET(r) (((r).dsc_sm_sts_restart_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_DSC_SM_STS_RESTART_GEN2r_RESTART_PI_EXT_MODEf_SET(r,f) (r).dsc_sm_sts_restart_gen2[0]=(((r).dsc_sm_sts_restart_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access DSC_SM_STS_RESTART_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_SM_STS_RESTART_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_SM_STS_RESTART_GEN2r,(_r._dsc_sm_sts_restart_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_SM_STS_RESTART_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_STS_RESTART_GEN2r,(_r._dsc_sm_sts_restart_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_SM_STS_RESTART_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_STS_RESTART_GEN2r,(_r._dsc_sm_sts_restart_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_SM_STS_RESTART_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_SM_STS_RESTART_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_sts_restart_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_SM_STS_RESTART_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_STS_RESTART_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_sts_restart_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_SM_STS_RESTART_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_STS_RESTART_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_sm_sts_restart_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_SM_STS_RESTART_GEN2r BCMI_TSCF_XGXS_DSC_SM_STS_RESTART_GEN2r
#define DSC_SM_STS_RESTART_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_SM_STS_RESTART_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_SM_STS_RESTART_GEN2r_t DSC_SM_STS_RESTART_GEN2r_t;
#define DSC_SM_STS_RESTART_GEN2r_CLR BCMI_TSCF_XGXS_DSC_SM_STS_RESTART_GEN2r_CLR
#define DSC_SM_STS_RESTART_GEN2r_SET BCMI_TSCF_XGXS_DSC_SM_STS_RESTART_GEN2r_SET
#define DSC_SM_STS_RESTART_GEN2r_GET BCMI_TSCF_XGXS_DSC_SM_STS_RESTART_GEN2r_GET
#define DSC_SM_STS_RESTART_GEN2r_EEE_QUIET_FROM_EEE_STATESf_GET BCMI_TSCF_XGXS_DSC_SM_STS_RESTART_GEN2r_EEE_QUIET_FROM_EEE_STATESf_GET
#define DSC_SM_STS_RESTART_GEN2r_EEE_QUIET_FROM_EEE_STATESf_SET BCMI_TSCF_XGXS_DSC_SM_STS_RESTART_GEN2r_EEE_QUIET_FROM_EEE_STATESf_SET
#define DSC_SM_STS_RESTART_GEN2r_RESTART_PMD_RESTARTf_GET BCMI_TSCF_XGXS_DSC_SM_STS_RESTART_GEN2r_RESTART_PMD_RESTARTf_GET
#define DSC_SM_STS_RESTART_GEN2r_RESTART_PMD_RESTARTf_SET BCMI_TSCF_XGXS_DSC_SM_STS_RESTART_GEN2r_RESTART_PMD_RESTARTf_SET
#define DSC_SM_STS_RESTART_GEN2r_RESTART_SIGDETf_GET BCMI_TSCF_XGXS_DSC_SM_STS_RESTART_GEN2r_RESTART_SIGDETf_GET
#define DSC_SM_STS_RESTART_GEN2r_RESTART_SIGDETf_SET BCMI_TSCF_XGXS_DSC_SM_STS_RESTART_GEN2r_RESTART_SIGDETf_SET
#define DSC_SM_STS_RESTART_GEN2r_RESTART_PI_EXT_MODEf_GET BCMI_TSCF_XGXS_DSC_SM_STS_RESTART_GEN2r_RESTART_PI_EXT_MODEf_GET
#define DSC_SM_STS_RESTART_GEN2r_RESTART_PI_EXT_MODEf_SET BCMI_TSCF_XGXS_DSC_SM_STS_RESTART_GEN2r_RESTART_PI_EXT_MODEf_SET
#define READ_DSC_SM_STS_RESTART_GEN2r BCMI_TSCF_XGXS_READ_DSC_SM_STS_RESTART_GEN2r
#define WRITE_DSC_SM_STS_RESTART_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_SM_STS_RESTART_GEN2r
#define MODIFY_DSC_SM_STS_RESTART_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_SM_STS_RESTART_GEN2r
#define READLN_DSC_SM_STS_RESTART_GEN2r BCMI_TSCF_XGXS_READLN_DSC_SM_STS_RESTART_GEN2r
#define WRITELN_DSC_SM_STS_RESTART_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_SM_STS_RESTART_GEN2r
#define WRITEALL_DSC_SM_STS_RESTART_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_SM_STS_RESTART_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_SM_STS_RESTART_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_SM_STS_DSC_ST_GEN2
 * BLOCKS:   DSC_D
 * REGADDR:  0xd06e
 * DEVAD:    1
 * DESC:     DSC STATE MACHINE STATUS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     DSC_SM_SCRATCH   4 LSB bits of dsc_scratch
 *     DSC_SM_READY_FOR_CMD Ready for Command.
 *     DSC_SM_GP_UC_REQ gp_uc_req.
 *     DSC_STATE        Live DSC SM state. Following are the state encodings.RESET           =  0RESTART         =  1CONFIG          =  2WAIT_FOR_SIG    =  3ACQ_CDR         =  4CDR_SETTLE      =  5HW_TUNE         =  6UC_TUNE         =  7MEASURE         =  8DONE            =  9EEE_QUIET       =  10EEE_ANA_PWR     =  11EEE_ACQ_CDR     =  12EEE_CDR_SETTLE  =  13EEE_HW_TUNE     =  14EEE_MEASURE     =  15EEE_DONE        =  16
 */
#define BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_GEN2r (0x0001d06e | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_SM_STS_DSC_ST_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_sm_sts_dsc_st_gen2[1];
	uint32_t _dsc_sm_sts_dsc_st_gen2;
} BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_GEN2r_CLR(r) (r).dsc_sm_sts_dsc_st_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_GEN2r_SET(r,d) (r).dsc_sm_sts_dsc_st_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_GEN2r_GET(r) (r).dsc_sm_sts_dsc_st_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_GEN2r_DSC_STATEf_GET(r) ((((r).dsc_sm_sts_dsc_st_gen2[0]) >> 11) & 0x1f)
#define BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_GEN2r_DSC_STATEf_SET(r,f) (r).dsc_sm_sts_dsc_st_gen2[0]=(((r).dsc_sm_sts_dsc_st_gen2[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11)) | (31 << (16 + 11))
#define BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_GEN2r_DSC_SM_GP_UC_REQf_GET(r) ((((r).dsc_sm_sts_dsc_st_gen2[0]) >> 5) & 0x3f)
#define BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_GEN2r_DSC_SM_GP_UC_REQf_SET(r,f) (r).dsc_sm_sts_dsc_st_gen2[0]=(((r).dsc_sm_sts_dsc_st_gen2[0] & ~((uint32_t)0x3f << 5)) | ((((uint32_t)f) & 0x3f) << 5)) | (63 << (16 + 5))
#define BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_GEN2r_DSC_SM_READY_FOR_CMDf_GET(r) ((((r).dsc_sm_sts_dsc_st_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_GEN2r_DSC_SM_READY_FOR_CMDf_SET(r,f) (r).dsc_sm_sts_dsc_st_gen2[0]=(((r).dsc_sm_sts_dsc_st_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_GEN2r_DSC_SM_SCRATCHf_GET(r) (((r).dsc_sm_sts_dsc_st_gen2[0]) & 0xf)
#define BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_GEN2r_DSC_SM_SCRATCHf_SET(r,f) (r).dsc_sm_sts_dsc_st_gen2[0]=(((r).dsc_sm_sts_dsc_st_gen2[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access DSC_SM_STS_DSC_ST_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_SM_STS_DSC_ST_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_GEN2r,(_r._dsc_sm_sts_dsc_st_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_SM_STS_DSC_ST_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_GEN2r,(_r._dsc_sm_sts_dsc_st_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_SM_STS_DSC_ST_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_GEN2r,(_r._dsc_sm_sts_dsc_st_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_SM_STS_DSC_ST_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_sts_dsc_st_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_SM_STS_DSC_ST_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_sts_dsc_st_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_SM_STS_DSC_ST_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_sm_sts_dsc_st_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_SM_STS_DSC_ST_GEN2r BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_GEN2r
#define DSC_SM_STS_DSC_ST_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_GEN2r_t DSC_SM_STS_DSC_ST_GEN2r_t;
#define DSC_SM_STS_DSC_ST_GEN2r_CLR BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_GEN2r_CLR
#define DSC_SM_STS_DSC_ST_GEN2r_SET BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_GEN2r_SET
#define DSC_SM_STS_DSC_ST_GEN2r_GET BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_GEN2r_GET
#define DSC_SM_STS_DSC_ST_GEN2r_DSC_STATEf_GET BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_GEN2r_DSC_STATEf_GET
#define DSC_SM_STS_DSC_ST_GEN2r_DSC_STATEf_SET BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_GEN2r_DSC_STATEf_SET
#define DSC_SM_STS_DSC_ST_GEN2r_DSC_SM_GP_UC_REQf_GET BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_GEN2r_DSC_SM_GP_UC_REQf_GET
#define DSC_SM_STS_DSC_ST_GEN2r_DSC_SM_GP_UC_REQf_SET BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_GEN2r_DSC_SM_GP_UC_REQf_SET
#define DSC_SM_STS_DSC_ST_GEN2r_DSC_SM_READY_FOR_CMDf_GET BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_GEN2r_DSC_SM_READY_FOR_CMDf_GET
#define DSC_SM_STS_DSC_ST_GEN2r_DSC_SM_READY_FOR_CMDf_SET BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_GEN2r_DSC_SM_READY_FOR_CMDf_SET
#define DSC_SM_STS_DSC_ST_GEN2r_DSC_SM_SCRATCHf_GET BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_GEN2r_DSC_SM_SCRATCHf_GET
#define DSC_SM_STS_DSC_ST_GEN2r_DSC_SM_SCRATCHf_SET BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_GEN2r_DSC_SM_SCRATCHf_SET
#define READ_DSC_SM_STS_DSC_ST_GEN2r BCMI_TSCF_XGXS_READ_DSC_SM_STS_DSC_ST_GEN2r
#define WRITE_DSC_SM_STS_DSC_ST_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_SM_STS_DSC_ST_GEN2r
#define MODIFY_DSC_SM_STS_DSC_ST_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_SM_STS_DSC_ST_GEN2r
#define READLN_DSC_SM_STS_DSC_ST_GEN2r BCMI_TSCF_XGXS_READLN_DSC_SM_STS_DSC_ST_GEN2r
#define WRITELN_DSC_SM_STS_DSC_ST_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_SM_STS_DSC_ST_GEN2r
#define WRITEALL_DSC_SM_STS_DSC_ST_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_SM_STS_DSC_ST_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_SM_STS_DSC_ST_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_RX_PI_CNT_BIN_PD_GEN2
 * BLOCKS:   DSC_E
 * REGADDR:  0xd070
 * DEVAD:    1
 * DESC:     rx_pi status register, both p and d.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     RX_PI_CNT_BIN_P_PD PI counter value for phase slicer
 *     RX_PI_CNT_BIN_D_PD PI counter value for phase quadrature slicer
 */
#define BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_PD_GEN2r (0x0001d070 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_PD_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_PI_CNT_BIN_PD_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_PD_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_rx_pi_cnt_bin_pd_gen2[1];
	uint32_t _dsc_rx_pi_cnt_bin_pd_gen2;
} BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_PD_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_PD_GEN2r_CLR(r) (r).dsc_rx_pi_cnt_bin_pd_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_PD_GEN2r_SET(r,d) (r).dsc_rx_pi_cnt_bin_pd_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_PD_GEN2r_GET(r) (r).dsc_rx_pi_cnt_bin_pd_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_PD_GEN2r_RX_PI_CNT_BIN_D_PDf_GET(r) ((((r).dsc_rx_pi_cnt_bin_pd_gen2[0]) >> 8) & 0xff)
#define BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_PD_GEN2r_RX_PI_CNT_BIN_D_PDf_SET(r,f) (r).dsc_rx_pi_cnt_bin_pd_gen2[0]=(((r).dsc_rx_pi_cnt_bin_pd_gen2[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_PD_GEN2r_RX_PI_CNT_BIN_P_PDf_GET(r) (((r).dsc_rx_pi_cnt_bin_pd_gen2[0]) & 0xff)
#define BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_PD_GEN2r_RX_PI_CNT_BIN_P_PDf_SET(r,f) (r).dsc_rx_pi_cnt_bin_pd_gen2[0]=(((r).dsc_rx_pi_cnt_bin_pd_gen2[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access DSC_RX_PI_CNT_BIN_PD_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_RX_PI_CNT_BIN_PD_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_PD_GEN2r,(_r._dsc_rx_pi_cnt_bin_pd_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_RX_PI_CNT_BIN_PD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_PD_GEN2r,(_r._dsc_rx_pi_cnt_bin_pd_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_RX_PI_CNT_BIN_PD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_PD_GEN2r,(_r._dsc_rx_pi_cnt_bin_pd_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_RX_PI_CNT_BIN_PD_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_PD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_pi_cnt_bin_pd_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_RX_PI_CNT_BIN_PD_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_PD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_pi_cnt_bin_pd_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_RX_PI_CNT_BIN_PD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_PD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_pi_cnt_bin_pd_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_PI_CNT_BIN_PD_GEN2r BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_PD_GEN2r
#define DSC_RX_PI_CNT_BIN_PD_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_PD_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_PD_GEN2r_t DSC_RX_PI_CNT_BIN_PD_GEN2r_t;
#define DSC_RX_PI_CNT_BIN_PD_GEN2r_CLR BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_PD_GEN2r_CLR
#define DSC_RX_PI_CNT_BIN_PD_GEN2r_SET BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_PD_GEN2r_SET
#define DSC_RX_PI_CNT_BIN_PD_GEN2r_GET BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_PD_GEN2r_GET
#define DSC_RX_PI_CNT_BIN_PD_GEN2r_RX_PI_CNT_BIN_D_PDf_GET BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_PD_GEN2r_RX_PI_CNT_BIN_D_PDf_GET
#define DSC_RX_PI_CNT_BIN_PD_GEN2r_RX_PI_CNT_BIN_D_PDf_SET BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_PD_GEN2r_RX_PI_CNT_BIN_D_PDf_SET
#define DSC_RX_PI_CNT_BIN_PD_GEN2r_RX_PI_CNT_BIN_P_PDf_GET BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_PD_GEN2r_RX_PI_CNT_BIN_P_PDf_GET
#define DSC_RX_PI_CNT_BIN_PD_GEN2r_RX_PI_CNT_BIN_P_PDf_SET BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_PD_GEN2r_RX_PI_CNT_BIN_P_PDf_SET
#define READ_DSC_RX_PI_CNT_BIN_PD_GEN2r BCMI_TSCF_XGXS_READ_DSC_RX_PI_CNT_BIN_PD_GEN2r
#define WRITE_DSC_RX_PI_CNT_BIN_PD_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_RX_PI_CNT_BIN_PD_GEN2r
#define MODIFY_DSC_RX_PI_CNT_BIN_PD_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_RX_PI_CNT_BIN_PD_GEN2r
#define READLN_DSC_RX_PI_CNT_BIN_PD_GEN2r BCMI_TSCF_XGXS_READLN_DSC_RX_PI_CNT_BIN_PD_GEN2r
#define WRITELN_DSC_RX_PI_CNT_BIN_PD_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_RX_PI_CNT_BIN_PD_GEN2r
#define WRITEALL_DSC_RX_PI_CNT_BIN_PD_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_RX_PI_CNT_BIN_PD_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_PD_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_RX_PI_CNT_BIN_LD_GEN2
 * BLOCKS:   DSC_E
 * REGADDR:  0xd071
 * DEVAD:    1
 * DESC:     rx_pi status register, both l and d.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     RX_PI_CNT_BIN_L_LD PI counter value for LMS slicer
 *     RX_PI_CNT_BIN_D_LD PI counter value for LMS quadrature slicer
 */
#define BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_LD_GEN2r (0x0001d071 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_LD_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_PI_CNT_BIN_LD_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_LD_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_rx_pi_cnt_bin_ld_gen2[1];
	uint32_t _dsc_rx_pi_cnt_bin_ld_gen2;
} BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_LD_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_LD_GEN2r_CLR(r) (r).dsc_rx_pi_cnt_bin_ld_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_LD_GEN2r_SET(r,d) (r).dsc_rx_pi_cnt_bin_ld_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_LD_GEN2r_GET(r) (r).dsc_rx_pi_cnt_bin_ld_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_LD_GEN2r_RX_PI_CNT_BIN_D_LDf_GET(r) ((((r).dsc_rx_pi_cnt_bin_ld_gen2[0]) >> 8) & 0xff)
#define BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_LD_GEN2r_RX_PI_CNT_BIN_D_LDf_SET(r,f) (r).dsc_rx_pi_cnt_bin_ld_gen2[0]=(((r).dsc_rx_pi_cnt_bin_ld_gen2[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_LD_GEN2r_RX_PI_CNT_BIN_L_LDf_GET(r) (((r).dsc_rx_pi_cnt_bin_ld_gen2[0]) & 0xff)
#define BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_LD_GEN2r_RX_PI_CNT_BIN_L_LDf_SET(r,f) (r).dsc_rx_pi_cnt_bin_ld_gen2[0]=(((r).dsc_rx_pi_cnt_bin_ld_gen2[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access DSC_RX_PI_CNT_BIN_LD_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_RX_PI_CNT_BIN_LD_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_LD_GEN2r,(_r._dsc_rx_pi_cnt_bin_ld_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_RX_PI_CNT_BIN_LD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_LD_GEN2r,(_r._dsc_rx_pi_cnt_bin_ld_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_RX_PI_CNT_BIN_LD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_LD_GEN2r,(_r._dsc_rx_pi_cnt_bin_ld_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_RX_PI_CNT_BIN_LD_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_LD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_pi_cnt_bin_ld_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_RX_PI_CNT_BIN_LD_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_LD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_pi_cnt_bin_ld_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_RX_PI_CNT_BIN_LD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_LD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_pi_cnt_bin_ld_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_PI_CNT_BIN_LD_GEN2r BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_LD_GEN2r
#define DSC_RX_PI_CNT_BIN_LD_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_LD_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_LD_GEN2r_t DSC_RX_PI_CNT_BIN_LD_GEN2r_t;
#define DSC_RX_PI_CNT_BIN_LD_GEN2r_CLR BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_LD_GEN2r_CLR
#define DSC_RX_PI_CNT_BIN_LD_GEN2r_SET BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_LD_GEN2r_SET
#define DSC_RX_PI_CNT_BIN_LD_GEN2r_GET BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_LD_GEN2r_GET
#define DSC_RX_PI_CNT_BIN_LD_GEN2r_RX_PI_CNT_BIN_D_LDf_GET BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_LD_GEN2r_RX_PI_CNT_BIN_D_LDf_GET
#define DSC_RX_PI_CNT_BIN_LD_GEN2r_RX_PI_CNT_BIN_D_LDf_SET BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_LD_GEN2r_RX_PI_CNT_BIN_D_LDf_SET
#define DSC_RX_PI_CNT_BIN_LD_GEN2r_RX_PI_CNT_BIN_L_LDf_GET BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_LD_GEN2r_RX_PI_CNT_BIN_L_LDf_GET
#define DSC_RX_PI_CNT_BIN_LD_GEN2r_RX_PI_CNT_BIN_L_LDf_SET BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_LD_GEN2r_RX_PI_CNT_BIN_L_LDf_SET
#define READ_DSC_RX_PI_CNT_BIN_LD_GEN2r BCMI_TSCF_XGXS_READ_DSC_RX_PI_CNT_BIN_LD_GEN2r
#define WRITE_DSC_RX_PI_CNT_BIN_LD_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_RX_PI_CNT_BIN_LD_GEN2r
#define MODIFY_DSC_RX_PI_CNT_BIN_LD_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_RX_PI_CNT_BIN_LD_GEN2r
#define READLN_DSC_RX_PI_CNT_BIN_LD_GEN2r BCMI_TSCF_XGXS_READLN_DSC_RX_PI_CNT_BIN_LD_GEN2r
#define WRITELN_DSC_RX_PI_CNT_BIN_LD_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_RX_PI_CNT_BIN_LD_GEN2r
#define WRITEALL_DSC_RX_PI_CNT_BIN_LD_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_RX_PI_CNT_BIN_LD_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_LD_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_RX_DATA_15_TO_0_GEN2
 * BLOCKS:   DSC_E
 * REGADDR:  0xd072
 * DEVAD:    1
 * DESC:     rx data bits 15 to 0.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     RX_DATA_15_TO_0  Rx data is 40 bit wide in rclk40 domain. These are bits 15 to 0.
 */
#define BCMI_TSCF_XGXS_DSC_RX_DATA_15_TO_0_GEN2r (0x0001d072 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_RX_DATA_15_TO_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DATA_15_TO_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_RX_DATA_15_TO_0_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_rx_data_15_to_0_gen2[1];
	uint32_t _dsc_rx_data_15_to_0_gen2;
} BCMI_TSCF_XGXS_DSC_RX_DATA_15_TO_0_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_RX_DATA_15_TO_0_GEN2r_CLR(r) (r).dsc_rx_data_15_to_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_RX_DATA_15_TO_0_GEN2r_SET(r,d) (r).dsc_rx_data_15_to_0_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_RX_DATA_15_TO_0_GEN2r_GET(r) (r).dsc_rx_data_15_to_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_RX_DATA_15_TO_0_GEN2r_RX_DATA_15_TO_0f_GET(r) (((r).dsc_rx_data_15_to_0_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_DSC_RX_DATA_15_TO_0_GEN2r_RX_DATA_15_TO_0f_SET(r,f) (r).dsc_rx_data_15_to_0_gen2[0]=(((r).dsc_rx_data_15_to_0_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access DSC_RX_DATA_15_TO_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_RX_DATA_15_TO_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_DATA_15_TO_0_GEN2r,(_r._dsc_rx_data_15_to_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_RX_DATA_15_TO_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DATA_15_TO_0_GEN2r,(_r._dsc_rx_data_15_to_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_RX_DATA_15_TO_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DATA_15_TO_0_GEN2r,(_r._dsc_rx_data_15_to_0_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_RX_DATA_15_TO_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_DATA_15_TO_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_data_15_to_0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_RX_DATA_15_TO_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DATA_15_TO_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_data_15_to_0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_RX_DATA_15_TO_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DATA_15_TO_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_data_15_to_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DATA_15_TO_0_GEN2r BCMI_TSCF_XGXS_DSC_RX_DATA_15_TO_0_GEN2r
#define DSC_RX_DATA_15_TO_0_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_RX_DATA_15_TO_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_RX_DATA_15_TO_0_GEN2r_t DSC_RX_DATA_15_TO_0_GEN2r_t;
#define DSC_RX_DATA_15_TO_0_GEN2r_CLR BCMI_TSCF_XGXS_DSC_RX_DATA_15_TO_0_GEN2r_CLR
#define DSC_RX_DATA_15_TO_0_GEN2r_SET BCMI_TSCF_XGXS_DSC_RX_DATA_15_TO_0_GEN2r_SET
#define DSC_RX_DATA_15_TO_0_GEN2r_GET BCMI_TSCF_XGXS_DSC_RX_DATA_15_TO_0_GEN2r_GET
#define DSC_RX_DATA_15_TO_0_GEN2r_RX_DATA_15_TO_0f_GET BCMI_TSCF_XGXS_DSC_RX_DATA_15_TO_0_GEN2r_RX_DATA_15_TO_0f_GET
#define DSC_RX_DATA_15_TO_0_GEN2r_RX_DATA_15_TO_0f_SET BCMI_TSCF_XGXS_DSC_RX_DATA_15_TO_0_GEN2r_RX_DATA_15_TO_0f_SET
#define READ_DSC_RX_DATA_15_TO_0_GEN2r BCMI_TSCF_XGXS_READ_DSC_RX_DATA_15_TO_0_GEN2r
#define WRITE_DSC_RX_DATA_15_TO_0_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_RX_DATA_15_TO_0_GEN2r
#define MODIFY_DSC_RX_DATA_15_TO_0_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_RX_DATA_15_TO_0_GEN2r
#define READLN_DSC_RX_DATA_15_TO_0_GEN2r BCMI_TSCF_XGXS_READLN_DSC_RX_DATA_15_TO_0_GEN2r
#define WRITELN_DSC_RX_DATA_15_TO_0_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_RX_DATA_15_TO_0_GEN2r
#define WRITEALL_DSC_RX_DATA_15_TO_0_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_RX_DATA_15_TO_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_RX_DATA_15_TO_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_RX_DATA_35_TO_20_GEN2
 * BLOCKS:   DSC_E
 * REGADDR:  0xd073
 * DEVAD:    1
 * DESC:     rx data bits 35 to 20.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     RX_DATA_35_TO_20 Rx data is 40 bit wide in rclk40 domain. These are bits 35 to 20.
 */
#define BCMI_TSCF_XGXS_DSC_RX_DATA_35_TO_20_GEN2r (0x0001d073 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_RX_DATA_35_TO_20_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DATA_35_TO_20_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_RX_DATA_35_TO_20_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_rx_data_35_to_20_gen2[1];
	uint32_t _dsc_rx_data_35_to_20_gen2;
} BCMI_TSCF_XGXS_DSC_RX_DATA_35_TO_20_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_RX_DATA_35_TO_20_GEN2r_CLR(r) (r).dsc_rx_data_35_to_20_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_RX_DATA_35_TO_20_GEN2r_SET(r,d) (r).dsc_rx_data_35_to_20_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_RX_DATA_35_TO_20_GEN2r_GET(r) (r).dsc_rx_data_35_to_20_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_RX_DATA_35_TO_20_GEN2r_RX_DATA_35_TO_20f_GET(r) (((r).dsc_rx_data_35_to_20_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_DSC_RX_DATA_35_TO_20_GEN2r_RX_DATA_35_TO_20f_SET(r,f) (r).dsc_rx_data_35_to_20_gen2[0]=(((r).dsc_rx_data_35_to_20_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access DSC_RX_DATA_35_TO_20_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_RX_DATA_35_TO_20_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_DATA_35_TO_20_GEN2r,(_r._dsc_rx_data_35_to_20_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_RX_DATA_35_TO_20_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DATA_35_TO_20_GEN2r,(_r._dsc_rx_data_35_to_20_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_RX_DATA_35_TO_20_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DATA_35_TO_20_GEN2r,(_r._dsc_rx_data_35_to_20_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_RX_DATA_35_TO_20_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_DATA_35_TO_20_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_data_35_to_20_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_RX_DATA_35_TO_20_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DATA_35_TO_20_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_data_35_to_20_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_RX_DATA_35_TO_20_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_DATA_35_TO_20_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_data_35_to_20_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DATA_35_TO_20_GEN2r BCMI_TSCF_XGXS_DSC_RX_DATA_35_TO_20_GEN2r
#define DSC_RX_DATA_35_TO_20_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_RX_DATA_35_TO_20_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_RX_DATA_35_TO_20_GEN2r_t DSC_RX_DATA_35_TO_20_GEN2r_t;
#define DSC_RX_DATA_35_TO_20_GEN2r_CLR BCMI_TSCF_XGXS_DSC_RX_DATA_35_TO_20_GEN2r_CLR
#define DSC_RX_DATA_35_TO_20_GEN2r_SET BCMI_TSCF_XGXS_DSC_RX_DATA_35_TO_20_GEN2r_SET
#define DSC_RX_DATA_35_TO_20_GEN2r_GET BCMI_TSCF_XGXS_DSC_RX_DATA_35_TO_20_GEN2r_GET
#define DSC_RX_DATA_35_TO_20_GEN2r_RX_DATA_35_TO_20f_GET BCMI_TSCF_XGXS_DSC_RX_DATA_35_TO_20_GEN2r_RX_DATA_35_TO_20f_GET
#define DSC_RX_DATA_35_TO_20_GEN2r_RX_DATA_35_TO_20f_SET BCMI_TSCF_XGXS_DSC_RX_DATA_35_TO_20_GEN2r_RX_DATA_35_TO_20f_SET
#define READ_DSC_RX_DATA_35_TO_20_GEN2r BCMI_TSCF_XGXS_READ_DSC_RX_DATA_35_TO_20_GEN2r
#define WRITE_DSC_RX_DATA_35_TO_20_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_RX_DATA_35_TO_20_GEN2r
#define MODIFY_DSC_RX_DATA_35_TO_20_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_RX_DATA_35_TO_20_GEN2r
#define READLN_DSC_RX_DATA_35_TO_20_GEN2r BCMI_TSCF_XGXS_READLN_DSC_RX_DATA_35_TO_20_GEN2r
#define WRITELN_DSC_RX_DATA_35_TO_20_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_RX_DATA_35_TO_20_GEN2r
#define WRITEALL_DSC_RX_DATA_35_TO_20_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_RX_DATA_35_TO_20_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_RX_DATA_35_TO_20_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_CDR_STS_PHASE_ERR_GEN2
 * BLOCKS:   DSC_E
 * REGADDR:  0xd074
 * DEVAD:    1
 * DESC:     cdr status register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CDR_PHASE_ERROR  shadowed version of phase error value
 *     CDR_VCO_REG      shadowed version of cdr_vco_reg[3:0]
 */
#define BCMI_TSCF_XGXS_DSC_CDR_STS_PHASE_ERR_GEN2r (0x0001d074 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_CDR_STS_PHASE_ERR_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_CDR_STS_PHASE_ERR_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_CDR_STS_PHASE_ERR_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_cdr_sts_phase_err_gen2[1];
	uint32_t _dsc_cdr_sts_phase_err_gen2;
} BCMI_TSCF_XGXS_DSC_CDR_STS_PHASE_ERR_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_CDR_STS_PHASE_ERR_GEN2r_CLR(r) (r).dsc_cdr_sts_phase_err_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_CDR_STS_PHASE_ERR_GEN2r_SET(r,d) (r).dsc_cdr_sts_phase_err_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_CDR_STS_PHASE_ERR_GEN2r_GET(r) (r).dsc_cdr_sts_phase_err_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_CDR_STS_PHASE_ERR_GEN2r_CDR_VCO_REGf_GET(r) ((((r).dsc_cdr_sts_phase_err_gen2[0]) >> 12) & 0xf)
#define BCMI_TSCF_XGXS_DSC_CDR_STS_PHASE_ERR_GEN2r_CDR_VCO_REGf_SET(r,f) (r).dsc_cdr_sts_phase_err_gen2[0]=(((r).dsc_cdr_sts_phase_err_gen2[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_TSCF_XGXS_DSC_CDR_STS_PHASE_ERR_GEN2r_CDR_PHASE_ERRORf_GET(r) (((r).dsc_cdr_sts_phase_err_gen2[0]) & 0x3f)
#define BCMI_TSCF_XGXS_DSC_CDR_STS_PHASE_ERR_GEN2r_CDR_PHASE_ERRORf_SET(r,f) (r).dsc_cdr_sts_phase_err_gen2[0]=(((r).dsc_cdr_sts_phase_err_gen2[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access DSC_CDR_STS_PHASE_ERR_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_CDR_STS_PHASE_ERR_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_CDR_STS_PHASE_ERR_GEN2r,(_r._dsc_cdr_sts_phase_err_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_CDR_STS_PHASE_ERR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_CDR_STS_PHASE_ERR_GEN2r,(_r._dsc_cdr_sts_phase_err_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_CDR_STS_PHASE_ERR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_CDR_STS_PHASE_ERR_GEN2r,(_r._dsc_cdr_sts_phase_err_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_CDR_STS_PHASE_ERR_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_CDR_STS_PHASE_ERR_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_cdr_sts_phase_err_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_CDR_STS_PHASE_ERR_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_CDR_STS_PHASE_ERR_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_cdr_sts_phase_err_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_CDR_STS_PHASE_ERR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_CDR_STS_PHASE_ERR_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_cdr_sts_phase_err_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_CDR_STS_PHASE_ERR_GEN2r BCMI_TSCF_XGXS_DSC_CDR_STS_PHASE_ERR_GEN2r
#define DSC_CDR_STS_PHASE_ERR_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_CDR_STS_PHASE_ERR_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_CDR_STS_PHASE_ERR_GEN2r_t DSC_CDR_STS_PHASE_ERR_GEN2r_t;
#define DSC_CDR_STS_PHASE_ERR_GEN2r_CLR BCMI_TSCF_XGXS_DSC_CDR_STS_PHASE_ERR_GEN2r_CLR
#define DSC_CDR_STS_PHASE_ERR_GEN2r_SET BCMI_TSCF_XGXS_DSC_CDR_STS_PHASE_ERR_GEN2r_SET
#define DSC_CDR_STS_PHASE_ERR_GEN2r_GET BCMI_TSCF_XGXS_DSC_CDR_STS_PHASE_ERR_GEN2r_GET
#define DSC_CDR_STS_PHASE_ERR_GEN2r_CDR_VCO_REGf_GET BCMI_TSCF_XGXS_DSC_CDR_STS_PHASE_ERR_GEN2r_CDR_VCO_REGf_GET
#define DSC_CDR_STS_PHASE_ERR_GEN2r_CDR_VCO_REGf_SET BCMI_TSCF_XGXS_DSC_CDR_STS_PHASE_ERR_GEN2r_CDR_VCO_REGf_SET
#define DSC_CDR_STS_PHASE_ERR_GEN2r_CDR_PHASE_ERRORf_GET BCMI_TSCF_XGXS_DSC_CDR_STS_PHASE_ERR_GEN2r_CDR_PHASE_ERRORf_GET
#define DSC_CDR_STS_PHASE_ERR_GEN2r_CDR_PHASE_ERRORf_SET BCMI_TSCF_XGXS_DSC_CDR_STS_PHASE_ERR_GEN2r_CDR_PHASE_ERRORf_SET
#define READ_DSC_CDR_STS_PHASE_ERR_GEN2r BCMI_TSCF_XGXS_READ_DSC_CDR_STS_PHASE_ERR_GEN2r
#define WRITE_DSC_CDR_STS_PHASE_ERR_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_CDR_STS_PHASE_ERR_GEN2r
#define MODIFY_DSC_CDR_STS_PHASE_ERR_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_CDR_STS_PHASE_ERR_GEN2r
#define READLN_DSC_CDR_STS_PHASE_ERR_GEN2r BCMI_TSCF_XGXS_READLN_DSC_CDR_STS_PHASE_ERR_GEN2r
#define WRITELN_DSC_CDR_STS_PHASE_ERR_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_CDR_STS_PHASE_ERR_GEN2r
#define WRITEALL_DSC_CDR_STS_PHASE_ERR_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_CDR_STS_PHASE_ERR_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_CDR_STS_PHASE_ERR_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_RX_PI_CNT_BIN_D_GEN2
 * BLOCKS:   DSC_E
 * REGADDR:  0xd075
 * DEVAD:    1
 * DESC:     rx_pi status register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     RX_PI_CNT_BIN_D  PI counter value for data slicer
 *     RX_PI_CNT_BIN_DQ PI counter value for data quadrature slicer
 */
#define BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_D_GEN2r (0x0001d075 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_D_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_PI_CNT_BIN_D_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_D_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_rx_pi_cnt_bin_d_gen2[1];
	uint32_t _dsc_rx_pi_cnt_bin_d_gen2;
} BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_D_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_D_GEN2r_CLR(r) (r).dsc_rx_pi_cnt_bin_d_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_D_GEN2r_SET(r,d) (r).dsc_rx_pi_cnt_bin_d_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_D_GEN2r_GET(r) (r).dsc_rx_pi_cnt_bin_d_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_D_GEN2r_RX_PI_CNT_BIN_DQf_GET(r) ((((r).dsc_rx_pi_cnt_bin_d_gen2[0]) >> 8) & 0xff)
#define BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_D_GEN2r_RX_PI_CNT_BIN_DQf_SET(r,f) (r).dsc_rx_pi_cnt_bin_d_gen2[0]=(((r).dsc_rx_pi_cnt_bin_d_gen2[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_D_GEN2r_RX_PI_CNT_BIN_Df_GET(r) (((r).dsc_rx_pi_cnt_bin_d_gen2[0]) & 0xff)
#define BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_D_GEN2r_RX_PI_CNT_BIN_Df_SET(r,f) (r).dsc_rx_pi_cnt_bin_d_gen2[0]=(((r).dsc_rx_pi_cnt_bin_d_gen2[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access DSC_RX_PI_CNT_BIN_D_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_RX_PI_CNT_BIN_D_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_D_GEN2r,(_r._dsc_rx_pi_cnt_bin_d_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_RX_PI_CNT_BIN_D_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_D_GEN2r,(_r._dsc_rx_pi_cnt_bin_d_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_RX_PI_CNT_BIN_D_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_D_GEN2r,(_r._dsc_rx_pi_cnt_bin_d_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_RX_PI_CNT_BIN_D_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_D_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_pi_cnt_bin_d_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_RX_PI_CNT_BIN_D_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_D_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_pi_cnt_bin_d_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_RX_PI_CNT_BIN_D_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_D_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_pi_cnt_bin_d_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_PI_CNT_BIN_D_GEN2r BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_D_GEN2r
#define DSC_RX_PI_CNT_BIN_D_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_D_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_D_GEN2r_t DSC_RX_PI_CNT_BIN_D_GEN2r_t;
#define DSC_RX_PI_CNT_BIN_D_GEN2r_CLR BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_D_GEN2r_CLR
#define DSC_RX_PI_CNT_BIN_D_GEN2r_SET BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_D_GEN2r_SET
#define DSC_RX_PI_CNT_BIN_D_GEN2r_GET BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_D_GEN2r_GET
#define DSC_RX_PI_CNT_BIN_D_GEN2r_RX_PI_CNT_BIN_DQf_GET BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_D_GEN2r_RX_PI_CNT_BIN_DQf_GET
#define DSC_RX_PI_CNT_BIN_D_GEN2r_RX_PI_CNT_BIN_DQf_SET BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_D_GEN2r_RX_PI_CNT_BIN_DQf_SET
#define DSC_RX_PI_CNT_BIN_D_GEN2r_RX_PI_CNT_BIN_Df_GET BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_D_GEN2r_RX_PI_CNT_BIN_Df_GET
#define DSC_RX_PI_CNT_BIN_D_GEN2r_RX_PI_CNT_BIN_Df_SET BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_D_GEN2r_RX_PI_CNT_BIN_Df_SET
#define READ_DSC_RX_PI_CNT_BIN_D_GEN2r BCMI_TSCF_XGXS_READ_DSC_RX_PI_CNT_BIN_D_GEN2r
#define WRITE_DSC_RX_PI_CNT_BIN_D_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_RX_PI_CNT_BIN_D_GEN2r
#define MODIFY_DSC_RX_PI_CNT_BIN_D_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_RX_PI_CNT_BIN_D_GEN2r
#define READLN_DSC_RX_PI_CNT_BIN_D_GEN2r BCMI_TSCF_XGXS_READLN_DSC_RX_PI_CNT_BIN_D_GEN2r
#define WRITELN_DSC_RX_PI_CNT_BIN_D_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_RX_PI_CNT_BIN_D_GEN2r
#define WRITEALL_DSC_RX_PI_CNT_BIN_D_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_RX_PI_CNT_BIN_D_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_D_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_RX_PI_CNT_BIN_P_GEN2
 * BLOCKS:   DSC_E
 * REGADDR:  0xd076
 * DEVAD:    1
 * DESC:     rx_pi status register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     RX_PI_CNT_BIN_P  PI counter value for phase slicer
 *     RX_PI_CNT_BIN_PQ PI counter value for phase quadrature slicer
 */
#define BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_P_GEN2r (0x0001d076 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_P_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_PI_CNT_BIN_P_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_P_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_rx_pi_cnt_bin_p_gen2[1];
	uint32_t _dsc_rx_pi_cnt_bin_p_gen2;
} BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_P_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_P_GEN2r_CLR(r) (r).dsc_rx_pi_cnt_bin_p_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_P_GEN2r_SET(r,d) (r).dsc_rx_pi_cnt_bin_p_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_P_GEN2r_GET(r) (r).dsc_rx_pi_cnt_bin_p_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_P_GEN2r_RX_PI_CNT_BIN_PQf_GET(r) ((((r).dsc_rx_pi_cnt_bin_p_gen2[0]) >> 8) & 0xff)
#define BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_P_GEN2r_RX_PI_CNT_BIN_PQf_SET(r,f) (r).dsc_rx_pi_cnt_bin_p_gen2[0]=(((r).dsc_rx_pi_cnt_bin_p_gen2[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_P_GEN2r_RX_PI_CNT_BIN_Pf_GET(r) (((r).dsc_rx_pi_cnt_bin_p_gen2[0]) & 0xff)
#define BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_P_GEN2r_RX_PI_CNT_BIN_Pf_SET(r,f) (r).dsc_rx_pi_cnt_bin_p_gen2[0]=(((r).dsc_rx_pi_cnt_bin_p_gen2[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access DSC_RX_PI_CNT_BIN_P_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_RX_PI_CNT_BIN_P_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_P_GEN2r,(_r._dsc_rx_pi_cnt_bin_p_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_RX_PI_CNT_BIN_P_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_P_GEN2r,(_r._dsc_rx_pi_cnt_bin_p_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_RX_PI_CNT_BIN_P_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_P_GEN2r,(_r._dsc_rx_pi_cnt_bin_p_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_RX_PI_CNT_BIN_P_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_P_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_pi_cnt_bin_p_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_RX_PI_CNT_BIN_P_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_P_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_pi_cnt_bin_p_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_RX_PI_CNT_BIN_P_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_P_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_pi_cnt_bin_p_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_PI_CNT_BIN_P_GEN2r BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_P_GEN2r
#define DSC_RX_PI_CNT_BIN_P_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_P_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_P_GEN2r_t DSC_RX_PI_CNT_BIN_P_GEN2r_t;
#define DSC_RX_PI_CNT_BIN_P_GEN2r_CLR BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_P_GEN2r_CLR
#define DSC_RX_PI_CNT_BIN_P_GEN2r_SET BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_P_GEN2r_SET
#define DSC_RX_PI_CNT_BIN_P_GEN2r_GET BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_P_GEN2r_GET
#define DSC_RX_PI_CNT_BIN_P_GEN2r_RX_PI_CNT_BIN_PQf_GET BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_P_GEN2r_RX_PI_CNT_BIN_PQf_GET
#define DSC_RX_PI_CNT_BIN_P_GEN2r_RX_PI_CNT_BIN_PQf_SET BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_P_GEN2r_RX_PI_CNT_BIN_PQf_SET
#define DSC_RX_PI_CNT_BIN_P_GEN2r_RX_PI_CNT_BIN_Pf_GET BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_P_GEN2r_RX_PI_CNT_BIN_Pf_GET
#define DSC_RX_PI_CNT_BIN_P_GEN2r_RX_PI_CNT_BIN_Pf_SET BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_P_GEN2r_RX_PI_CNT_BIN_Pf_SET
#define READ_DSC_RX_PI_CNT_BIN_P_GEN2r BCMI_TSCF_XGXS_READ_DSC_RX_PI_CNT_BIN_P_GEN2r
#define WRITE_DSC_RX_PI_CNT_BIN_P_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_RX_PI_CNT_BIN_P_GEN2r
#define MODIFY_DSC_RX_PI_CNT_BIN_P_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_RX_PI_CNT_BIN_P_GEN2r
#define READLN_DSC_RX_PI_CNT_BIN_P_GEN2r BCMI_TSCF_XGXS_READLN_DSC_RX_PI_CNT_BIN_P_GEN2r
#define WRITELN_DSC_RX_PI_CNT_BIN_P_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_RX_PI_CNT_BIN_P_GEN2r
#define WRITEALL_DSC_RX_PI_CNT_BIN_P_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_RX_PI_CNT_BIN_P_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_P_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_RX_PI_CNT_BIN_L_GEN2
 * BLOCKS:   DSC_E
 * REGADDR:  0xd077
 * DEVAD:    1
 * DESC:     rx_pi status register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     RX_PI_CNT_BIN_L  PI counter value for LMS slicer
 *     RX_PI_CNT_BIN_LQ PI counter value for LMS quadrature slicer
 */
#define BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_L_GEN2r (0x0001d077 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_L_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_PI_CNT_BIN_L_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_L_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_rx_pi_cnt_bin_l_gen2[1];
	uint32_t _dsc_rx_pi_cnt_bin_l_gen2;
} BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_L_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_L_GEN2r_CLR(r) (r).dsc_rx_pi_cnt_bin_l_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_L_GEN2r_SET(r,d) (r).dsc_rx_pi_cnt_bin_l_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_L_GEN2r_GET(r) (r).dsc_rx_pi_cnt_bin_l_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_L_GEN2r_RX_PI_CNT_BIN_LQf_GET(r) ((((r).dsc_rx_pi_cnt_bin_l_gen2[0]) >> 8) & 0xff)
#define BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_L_GEN2r_RX_PI_CNT_BIN_LQf_SET(r,f) (r).dsc_rx_pi_cnt_bin_l_gen2[0]=(((r).dsc_rx_pi_cnt_bin_l_gen2[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_L_GEN2r_RX_PI_CNT_BIN_Lf_GET(r) (((r).dsc_rx_pi_cnt_bin_l_gen2[0]) & 0xff)
#define BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_L_GEN2r_RX_PI_CNT_BIN_Lf_SET(r,f) (r).dsc_rx_pi_cnt_bin_l_gen2[0]=(((r).dsc_rx_pi_cnt_bin_l_gen2[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access DSC_RX_PI_CNT_BIN_L_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_RX_PI_CNT_BIN_L_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_L_GEN2r,(_r._dsc_rx_pi_cnt_bin_l_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_RX_PI_CNT_BIN_L_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_L_GEN2r,(_r._dsc_rx_pi_cnt_bin_l_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_RX_PI_CNT_BIN_L_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_L_GEN2r,(_r._dsc_rx_pi_cnt_bin_l_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_RX_PI_CNT_BIN_L_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_L_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_pi_cnt_bin_l_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_RX_PI_CNT_BIN_L_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_L_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_pi_cnt_bin_l_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_RX_PI_CNT_BIN_L_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_L_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_pi_cnt_bin_l_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_PI_CNT_BIN_L_GEN2r BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_L_GEN2r
#define DSC_RX_PI_CNT_BIN_L_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_L_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_L_GEN2r_t DSC_RX_PI_CNT_BIN_L_GEN2r_t;
#define DSC_RX_PI_CNT_BIN_L_GEN2r_CLR BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_L_GEN2r_CLR
#define DSC_RX_PI_CNT_BIN_L_GEN2r_SET BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_L_GEN2r_SET
#define DSC_RX_PI_CNT_BIN_L_GEN2r_GET BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_L_GEN2r_GET
#define DSC_RX_PI_CNT_BIN_L_GEN2r_RX_PI_CNT_BIN_LQf_GET BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_L_GEN2r_RX_PI_CNT_BIN_LQf_GET
#define DSC_RX_PI_CNT_BIN_L_GEN2r_RX_PI_CNT_BIN_LQf_SET BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_L_GEN2r_RX_PI_CNT_BIN_LQf_SET
#define DSC_RX_PI_CNT_BIN_L_GEN2r_RX_PI_CNT_BIN_Lf_GET BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_L_GEN2r_RX_PI_CNT_BIN_Lf_GET
#define DSC_RX_PI_CNT_BIN_L_GEN2r_RX_PI_CNT_BIN_Lf_SET BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_L_GEN2r_RX_PI_CNT_BIN_Lf_SET
#define READ_DSC_RX_PI_CNT_BIN_L_GEN2r BCMI_TSCF_XGXS_READ_DSC_RX_PI_CNT_BIN_L_GEN2r
#define WRITE_DSC_RX_PI_CNT_BIN_L_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_RX_PI_CNT_BIN_L_GEN2r
#define MODIFY_DSC_RX_PI_CNT_BIN_L_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_RX_PI_CNT_BIN_L_GEN2r
#define READLN_DSC_RX_PI_CNT_BIN_L_GEN2r BCMI_TSCF_XGXS_READLN_DSC_RX_PI_CNT_BIN_L_GEN2r
#define WRITELN_DSC_RX_PI_CNT_BIN_L_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_RX_PI_CNT_BIN_L_GEN2r
#define WRITEALL_DSC_RX_PI_CNT_BIN_L_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_RX_PI_CNT_BIN_L_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_RX_PI_CNT_BIN_L_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_CDR_STS_INTEG_GEN2
 * BLOCKS:   DSC_E
 * REGADDR:  0xd078
 * DEVAD:    1
 * DESC:     cdr status register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CDR_INTEG_REG    Divide this by 83.886 to get the approximate ppm frequency offset the CDR is tracking. (The CDR must settle first - rx_dsc_lock asserted high).
 */
#define BCMI_TSCF_XGXS_DSC_CDR_STS_INTEG_GEN2r (0x0001d078 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_CDR_STS_INTEG_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_CDR_STS_INTEG_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_CDR_STS_INTEG_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_cdr_sts_integ_gen2[1];
	uint32_t _dsc_cdr_sts_integ_gen2;
} BCMI_TSCF_XGXS_DSC_CDR_STS_INTEG_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_CDR_STS_INTEG_GEN2r_CLR(r) (r).dsc_cdr_sts_integ_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_CDR_STS_INTEG_GEN2r_SET(r,d) (r).dsc_cdr_sts_integ_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_CDR_STS_INTEG_GEN2r_GET(r) (r).dsc_cdr_sts_integ_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_CDR_STS_INTEG_GEN2r_CDR_INTEG_REGf_GET(r) (((r).dsc_cdr_sts_integ_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_DSC_CDR_STS_INTEG_GEN2r_CDR_INTEG_REGf_SET(r,f) (r).dsc_cdr_sts_integ_gen2[0]=(((r).dsc_cdr_sts_integ_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access DSC_CDR_STS_INTEG_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_CDR_STS_INTEG_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_CDR_STS_INTEG_GEN2r,(_r._dsc_cdr_sts_integ_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_CDR_STS_INTEG_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_CDR_STS_INTEG_GEN2r,(_r._dsc_cdr_sts_integ_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_CDR_STS_INTEG_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_CDR_STS_INTEG_GEN2r,(_r._dsc_cdr_sts_integ_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_CDR_STS_INTEG_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_CDR_STS_INTEG_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_cdr_sts_integ_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_CDR_STS_INTEG_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_CDR_STS_INTEG_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_cdr_sts_integ_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_CDR_STS_INTEG_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_CDR_STS_INTEG_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_cdr_sts_integ_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_CDR_STS_INTEG_GEN2r BCMI_TSCF_XGXS_DSC_CDR_STS_INTEG_GEN2r
#define DSC_CDR_STS_INTEG_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_CDR_STS_INTEG_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_CDR_STS_INTEG_GEN2r_t DSC_CDR_STS_INTEG_GEN2r_t;
#define DSC_CDR_STS_INTEG_GEN2r_CLR BCMI_TSCF_XGXS_DSC_CDR_STS_INTEG_GEN2r_CLR
#define DSC_CDR_STS_INTEG_GEN2r_SET BCMI_TSCF_XGXS_DSC_CDR_STS_INTEG_GEN2r_SET
#define DSC_CDR_STS_INTEG_GEN2r_GET BCMI_TSCF_XGXS_DSC_CDR_STS_INTEG_GEN2r_GET
#define DSC_CDR_STS_INTEG_GEN2r_CDR_INTEG_REGf_GET BCMI_TSCF_XGXS_DSC_CDR_STS_INTEG_GEN2r_CDR_INTEG_REGf_GET
#define DSC_CDR_STS_INTEG_GEN2r_CDR_INTEG_REGf_SET BCMI_TSCF_XGXS_DSC_CDR_STS_INTEG_GEN2r_CDR_INTEG_REGf_SET
#define READ_DSC_CDR_STS_INTEG_GEN2r BCMI_TSCF_XGXS_READ_DSC_CDR_STS_INTEG_GEN2r
#define WRITE_DSC_CDR_STS_INTEG_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_CDR_STS_INTEG_GEN2r
#define MODIFY_DSC_CDR_STS_INTEG_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_CDR_STS_INTEG_GEN2r
#define READLN_DSC_CDR_STS_INTEG_GEN2r BCMI_TSCF_XGXS_READLN_DSC_CDR_STS_INTEG_GEN2r
#define WRITELN_DSC_CDR_STS_INTEG_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_CDR_STS_INTEG_GEN2r
#define WRITEALL_DSC_CDR_STS_INTEG_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_CDR_STS_INTEG_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_CDR_STS_INTEG_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_CDR_STS_MISC_GEN2
 * BLOCKS:   DSC_E
 * REGADDR:  0xd079
 * DEVAD:    1
 * DESC:     cdr status miscellaneous register.
 * RESETVAL: 0x1 (1)
 * ACCESS:   R/O
 * FIELDS:
 *     CDR_LM_OUTOFLOCK CDR Lock Monitor loss of lock (1 implies a potential loss of lock). This bit sets itself on register read.And if the cdr_integ_reg is within bounds it clears itself in the next cycle from which it detects within bounds. Note: Set on readThe valid bounds on the cdr_integ_reg are programmed using cdr_lm_thr_selHas more meaning after rx_dsc_lock is asserted.
 */
#define BCMI_TSCF_XGXS_DSC_CDR_STS_MISC_GEN2r (0x0001d079 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_CDR_STS_MISC_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_CDR_STS_MISC_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_CDR_STS_MISC_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_cdr_sts_misc_gen2[1];
	uint32_t _dsc_cdr_sts_misc_gen2;
} BCMI_TSCF_XGXS_DSC_CDR_STS_MISC_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_CDR_STS_MISC_GEN2r_CLR(r) (r).dsc_cdr_sts_misc_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_CDR_STS_MISC_GEN2r_SET(r,d) (r).dsc_cdr_sts_misc_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_CDR_STS_MISC_GEN2r_GET(r) (r).dsc_cdr_sts_misc_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_CDR_STS_MISC_GEN2r_CDR_LM_OUTOFLOCKf_GET(r) (((r).dsc_cdr_sts_misc_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_DSC_CDR_STS_MISC_GEN2r_CDR_LM_OUTOFLOCKf_SET(r,f) (r).dsc_cdr_sts_misc_gen2[0]=(((r).dsc_cdr_sts_misc_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access DSC_CDR_STS_MISC_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_CDR_STS_MISC_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_CDR_STS_MISC_GEN2r,(_r._dsc_cdr_sts_misc_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_CDR_STS_MISC_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_CDR_STS_MISC_GEN2r,(_r._dsc_cdr_sts_misc_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_CDR_STS_MISC_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_CDR_STS_MISC_GEN2r,(_r._dsc_cdr_sts_misc_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_CDR_STS_MISC_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_CDR_STS_MISC_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_cdr_sts_misc_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_CDR_STS_MISC_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_CDR_STS_MISC_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_cdr_sts_misc_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_CDR_STS_MISC_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_CDR_STS_MISC_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_cdr_sts_misc_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_CDR_STS_MISC_GEN2r BCMI_TSCF_XGXS_DSC_CDR_STS_MISC_GEN2r
#define DSC_CDR_STS_MISC_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_CDR_STS_MISC_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_CDR_STS_MISC_GEN2r_t DSC_CDR_STS_MISC_GEN2r_t;
#define DSC_CDR_STS_MISC_GEN2r_CLR BCMI_TSCF_XGXS_DSC_CDR_STS_MISC_GEN2r_CLR
#define DSC_CDR_STS_MISC_GEN2r_SET BCMI_TSCF_XGXS_DSC_CDR_STS_MISC_GEN2r_SET
#define DSC_CDR_STS_MISC_GEN2r_GET BCMI_TSCF_XGXS_DSC_CDR_STS_MISC_GEN2r_GET
#define DSC_CDR_STS_MISC_GEN2r_CDR_LM_OUTOFLOCKf_GET BCMI_TSCF_XGXS_DSC_CDR_STS_MISC_GEN2r_CDR_LM_OUTOFLOCKf_GET
#define DSC_CDR_STS_MISC_GEN2r_CDR_LM_OUTOFLOCKf_SET BCMI_TSCF_XGXS_DSC_CDR_STS_MISC_GEN2r_CDR_LM_OUTOFLOCKf_SET
#define READ_DSC_CDR_STS_MISC_GEN2r BCMI_TSCF_XGXS_READ_DSC_CDR_STS_MISC_GEN2r
#define WRITE_DSC_CDR_STS_MISC_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_CDR_STS_MISC_GEN2r
#define MODIFY_DSC_CDR_STS_MISC_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_CDR_STS_MISC_GEN2r
#define READLN_DSC_CDR_STS_MISC_GEN2r BCMI_TSCF_XGXS_READLN_DSC_CDR_STS_MISC_GEN2r
#define WRITELN_DSC_CDR_STS_MISC_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_CDR_STS_MISC_GEN2r
#define WRITEALL_DSC_CDR_STS_MISC_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_CDR_STS_MISC_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_CDR_STS_MISC_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_CDR_1G_STS_GEN2
 * BLOCKS:   DSC_E
 * REGADDR:  0xd07a
 * DEVAD:    1
 * DESC:     1g cdr status reg
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CDR_1G_PHASE_POINTER 1G phase pointer - currently wraps @ 33. Not used for 20.625
 */
#define BCMI_TSCF_XGXS_DSC_CDR_1G_STS_GEN2r (0x0001d07a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_CDR_1G_STS_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_CDR_1G_STS_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_CDR_1G_STS_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_cdr_1g_sts_gen2[1];
	uint32_t _dsc_cdr_1g_sts_gen2;
} BCMI_TSCF_XGXS_DSC_CDR_1G_STS_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_CDR_1G_STS_GEN2r_CLR(r) (r).dsc_cdr_1g_sts_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_CDR_1G_STS_GEN2r_SET(r,d) (r).dsc_cdr_1g_sts_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_CDR_1G_STS_GEN2r_GET(r) (r).dsc_cdr_1g_sts_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_CDR_1G_STS_GEN2r_CDR_1G_PHASE_POINTERf_GET(r) (((r).dsc_cdr_1g_sts_gen2[0]) & 0xff)
#define BCMI_TSCF_XGXS_DSC_CDR_1G_STS_GEN2r_CDR_1G_PHASE_POINTERf_SET(r,f) (r).dsc_cdr_1g_sts_gen2[0]=(((r).dsc_cdr_1g_sts_gen2[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access DSC_CDR_1G_STS_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_CDR_1G_STS_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_CDR_1G_STS_GEN2r,(_r._dsc_cdr_1g_sts_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_CDR_1G_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_CDR_1G_STS_GEN2r,(_r._dsc_cdr_1g_sts_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_CDR_1G_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_CDR_1G_STS_GEN2r,(_r._dsc_cdr_1g_sts_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_CDR_1G_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_CDR_1G_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_cdr_1g_sts_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_CDR_1G_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_CDR_1G_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_cdr_1g_sts_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_CDR_1G_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_CDR_1G_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_cdr_1g_sts_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_CDR_1G_STS_GEN2r BCMI_TSCF_XGXS_DSC_CDR_1G_STS_GEN2r
#define DSC_CDR_1G_STS_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_CDR_1G_STS_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_CDR_1G_STS_GEN2r_t DSC_CDR_1G_STS_GEN2r_t;
#define DSC_CDR_1G_STS_GEN2r_CLR BCMI_TSCF_XGXS_DSC_CDR_1G_STS_GEN2r_CLR
#define DSC_CDR_1G_STS_GEN2r_SET BCMI_TSCF_XGXS_DSC_CDR_1G_STS_GEN2r_SET
#define DSC_CDR_1G_STS_GEN2r_GET BCMI_TSCF_XGXS_DSC_CDR_1G_STS_GEN2r_GET
#define DSC_CDR_1G_STS_GEN2r_CDR_1G_PHASE_POINTERf_GET BCMI_TSCF_XGXS_DSC_CDR_1G_STS_GEN2r_CDR_1G_PHASE_POINTERf_GET
#define DSC_CDR_1G_STS_GEN2r_CDR_1G_PHASE_POINTERf_SET BCMI_TSCF_XGXS_DSC_CDR_1G_STS_GEN2r_CDR_1G_PHASE_POINTERf_SET
#define READ_DSC_CDR_1G_STS_GEN2r BCMI_TSCF_XGXS_READ_DSC_CDR_1G_STS_GEN2r
#define WRITE_DSC_CDR_1G_STS_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_CDR_1G_STS_GEN2r
#define MODIFY_DSC_CDR_1G_STS_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_CDR_1G_STS_GEN2r
#define READLN_DSC_CDR_1G_STS_GEN2r BCMI_TSCF_XGXS_READLN_DSC_CDR_1G_STS_GEN2r
#define WRITELN_DSC_CDR_1G_STS_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_CDR_1G_STS_GEN2r
#define WRITEALL_DSC_CDR_1G_STS_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_CDR_1G_STS_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_CDR_1G_STS_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DSC_PRESET_GEN2
 * BLOCKS:   DSC_E
 * REGADDR:  0xd07e
 * DEVAD:    1
 * DESC:     preset register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     PRESET_DSC_C_BANK Preset bit 1. Hooked up to dsc_sm bank
 *     PRESET_DSC_D_BANK Preset bit 2. Hooked up to CDR trnsum bank
 *     PRESET_DSC_A_BANK Preset bit 3. Hooked up to gen purpose bank a
 */
#define BCMI_TSCF_XGXS_DSC_PRESET_GEN2r (0x0001d07e | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DSC_PRESET_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_PRESET_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DSC_PRESET_GEN2r_s {
	uint32_t v[1];
	uint32_t dsc_preset_gen2[1];
	uint32_t _dsc_preset_gen2;
} BCMI_TSCF_XGXS_DSC_PRESET_GEN2r_t;

#define BCMI_TSCF_XGXS_DSC_PRESET_GEN2r_CLR(r) (r).dsc_preset_gen2[0] = 0
#define BCMI_TSCF_XGXS_DSC_PRESET_GEN2r_SET(r,d) (r).dsc_preset_gen2[0] = d
#define BCMI_TSCF_XGXS_DSC_PRESET_GEN2r_GET(r) (r).dsc_preset_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DSC_PRESET_GEN2r_PRESET_DSC_A_BANKf_GET(r) ((((r).dsc_preset_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_DSC_PRESET_GEN2r_PRESET_DSC_A_BANKf_SET(r,f) (r).dsc_preset_gen2[0]=(((r).dsc_preset_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_DSC_PRESET_GEN2r_PRESET_DSC_D_BANKf_GET(r) ((((r).dsc_preset_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_DSC_PRESET_GEN2r_PRESET_DSC_D_BANKf_SET(r,f) (r).dsc_preset_gen2[0]=(((r).dsc_preset_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_DSC_PRESET_GEN2r_PRESET_DSC_C_BANKf_GET(r) (((r).dsc_preset_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_DSC_PRESET_GEN2r_PRESET_DSC_C_BANKf_SET(r,f) (r).dsc_preset_gen2[0]=(((r).dsc_preset_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access DSC_PRESET_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DSC_PRESET_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_PRESET_GEN2r,(_r._dsc_preset_gen2))
#define BCMI_TSCF_XGXS_WRITE_DSC_PRESET_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_PRESET_GEN2r,(_r._dsc_preset_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DSC_PRESET_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_PRESET_GEN2r,(_r._dsc_preset_gen2))
#define BCMI_TSCF_XGXS_READLN_DSC_PRESET_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DSC_PRESET_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_preset_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DSC_PRESET_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_PRESET_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_preset_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DSC_PRESET_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DSC_PRESET_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_preset_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_PRESET_GEN2r BCMI_TSCF_XGXS_DSC_PRESET_GEN2r
#define DSC_PRESET_GEN2r_SIZE BCMI_TSCF_XGXS_DSC_PRESET_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DSC_PRESET_GEN2r_t DSC_PRESET_GEN2r_t;
#define DSC_PRESET_GEN2r_CLR BCMI_TSCF_XGXS_DSC_PRESET_GEN2r_CLR
#define DSC_PRESET_GEN2r_SET BCMI_TSCF_XGXS_DSC_PRESET_GEN2r_SET
#define DSC_PRESET_GEN2r_GET BCMI_TSCF_XGXS_DSC_PRESET_GEN2r_GET
#define DSC_PRESET_GEN2r_PRESET_DSC_A_BANKf_GET BCMI_TSCF_XGXS_DSC_PRESET_GEN2r_PRESET_DSC_A_BANKf_GET
#define DSC_PRESET_GEN2r_PRESET_DSC_A_BANKf_SET BCMI_TSCF_XGXS_DSC_PRESET_GEN2r_PRESET_DSC_A_BANKf_SET
#define DSC_PRESET_GEN2r_PRESET_DSC_D_BANKf_GET BCMI_TSCF_XGXS_DSC_PRESET_GEN2r_PRESET_DSC_D_BANKf_GET
#define DSC_PRESET_GEN2r_PRESET_DSC_D_BANKf_SET BCMI_TSCF_XGXS_DSC_PRESET_GEN2r_PRESET_DSC_D_BANKf_SET
#define DSC_PRESET_GEN2r_PRESET_DSC_C_BANKf_GET BCMI_TSCF_XGXS_DSC_PRESET_GEN2r_PRESET_DSC_C_BANKf_GET
#define DSC_PRESET_GEN2r_PRESET_DSC_C_BANKf_SET BCMI_TSCF_XGXS_DSC_PRESET_GEN2r_PRESET_DSC_C_BANKf_SET
#define READ_DSC_PRESET_GEN2r BCMI_TSCF_XGXS_READ_DSC_PRESET_GEN2r
#define WRITE_DSC_PRESET_GEN2r BCMI_TSCF_XGXS_WRITE_DSC_PRESET_GEN2r
#define MODIFY_DSC_PRESET_GEN2r BCMI_TSCF_XGXS_MODIFY_DSC_PRESET_GEN2r
#define READLN_DSC_PRESET_GEN2r BCMI_TSCF_XGXS_READLN_DSC_PRESET_GEN2r
#define WRITELN_DSC_PRESET_GEN2r BCMI_TSCF_XGXS_WRITELN_DSC_PRESET_GEN2r
#define WRITEALL_DSC_PRESET_GEN2r BCMI_TSCF_XGXS_WRITEALL_DSC_PRESET_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DSC_PRESET_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  CL93N72_UR_CTL0_GEN2
 * BLOCKS:   CL93N72_USER_RX
 * REGADDR:  0xd080
 * DEVAD:    1
 * DESC:     Control 0 Register
 * RESETVAL: 0x4 (4)
 * ACCESS:   R/W
 * FIELDS:
 *     CL93N72_RX_TRAINING_EN RX Training EnableEnables the frame lock fsm on the RX sides
 *     CL93N72_TR_COARSE_LOCK Set to TRUE (1'b1) by the micro when coarse lock to recovered clock has occured.Cl93n72_pmd, then, proceeds with establishing frame_lock.
 *     CL93N72_RX_SIGNAL_OK Firmware sets this bit to 1'b0 when the training is in progressand sets this bit to 1'b1 when the training is complete
 */
#define BCMI_TSCF_XGXS_CL93N72_UR_CTL0_GEN2r (0x0001d080 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_CL93N72_UR_CTL0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_UR_CTL0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_CL93N72_UR_CTL0_GEN2r_s {
	uint32_t v[1];
	uint32_t cl93n72_ur_ctl0_gen2[1];
	uint32_t _cl93n72_ur_ctl0_gen2;
} BCMI_TSCF_XGXS_CL93N72_UR_CTL0_GEN2r_t;

#define BCMI_TSCF_XGXS_CL93N72_UR_CTL0_GEN2r_CLR(r) (r).cl93n72_ur_ctl0_gen2[0] = 0
#define BCMI_TSCF_XGXS_CL93N72_UR_CTL0_GEN2r_SET(r,d) (r).cl93n72_ur_ctl0_gen2[0] = d
#define BCMI_TSCF_XGXS_CL93N72_UR_CTL0_GEN2r_GET(r) (r).cl93n72_ur_ctl0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_CL93N72_UR_CTL0_GEN2r_CL93N72_RX_SIGNAL_OKf_GET(r) ((((r).cl93n72_ur_ctl0_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_CL93N72_UR_CTL0_GEN2r_CL93N72_RX_SIGNAL_OKf_SET(r,f) (r).cl93n72_ur_ctl0_gen2[0]=(((r).cl93n72_ur_ctl0_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_CL93N72_UR_CTL0_GEN2r_CL93N72_TR_COARSE_LOCKf_GET(r) ((((r).cl93n72_ur_ctl0_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_CL93N72_UR_CTL0_GEN2r_CL93N72_TR_COARSE_LOCKf_SET(r,f) (r).cl93n72_ur_ctl0_gen2[0]=(((r).cl93n72_ur_ctl0_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_CL93N72_UR_CTL0_GEN2r_CL93N72_RX_TRAINING_ENf_GET(r) (((r).cl93n72_ur_ctl0_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_CL93N72_UR_CTL0_GEN2r_CL93N72_RX_TRAINING_ENf_SET(r,f) (r).cl93n72_ur_ctl0_gen2[0]=(((r).cl93n72_ur_ctl0_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access CL93N72_UR_CTL0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_CL93N72_UR_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL93N72_UR_CTL0_GEN2r,(_r._cl93n72_ur_ctl0_gen2))
#define BCMI_TSCF_XGXS_WRITE_CL93N72_UR_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UR_CTL0_GEN2r,(_r._cl93n72_ur_ctl0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_CL93N72_UR_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UR_CTL0_GEN2r,(_r._cl93n72_ur_ctl0_gen2))
#define BCMI_TSCF_XGXS_READLN_CL93N72_UR_CTL0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL93N72_UR_CTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ur_ctl0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_CL93N72_UR_CTL0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UR_CTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ur_ctl0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_CL93N72_UR_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UR_CTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_ur_ctl0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_UR_CTL0_GEN2r BCMI_TSCF_XGXS_CL93N72_UR_CTL0_GEN2r
#define CL93N72_UR_CTL0_GEN2r_SIZE BCMI_TSCF_XGXS_CL93N72_UR_CTL0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_CL93N72_UR_CTL0_GEN2r_t CL93N72_UR_CTL0_GEN2r_t;
#define CL93N72_UR_CTL0_GEN2r_CLR BCMI_TSCF_XGXS_CL93N72_UR_CTL0_GEN2r_CLR
#define CL93N72_UR_CTL0_GEN2r_SET BCMI_TSCF_XGXS_CL93N72_UR_CTL0_GEN2r_SET
#define CL93N72_UR_CTL0_GEN2r_GET BCMI_TSCF_XGXS_CL93N72_UR_CTL0_GEN2r_GET
#define CL93N72_UR_CTL0_GEN2r_CL93N72_RX_SIGNAL_OKf_GET BCMI_TSCF_XGXS_CL93N72_UR_CTL0_GEN2r_CL93N72_RX_SIGNAL_OKf_GET
#define CL93N72_UR_CTL0_GEN2r_CL93N72_RX_SIGNAL_OKf_SET BCMI_TSCF_XGXS_CL93N72_UR_CTL0_GEN2r_CL93N72_RX_SIGNAL_OKf_SET
#define CL93N72_UR_CTL0_GEN2r_CL93N72_TR_COARSE_LOCKf_GET BCMI_TSCF_XGXS_CL93N72_UR_CTL0_GEN2r_CL93N72_TR_COARSE_LOCKf_GET
#define CL93N72_UR_CTL0_GEN2r_CL93N72_TR_COARSE_LOCKf_SET BCMI_TSCF_XGXS_CL93N72_UR_CTL0_GEN2r_CL93N72_TR_COARSE_LOCKf_SET
#define CL93N72_UR_CTL0_GEN2r_CL93N72_RX_TRAINING_ENf_GET BCMI_TSCF_XGXS_CL93N72_UR_CTL0_GEN2r_CL93N72_RX_TRAINING_ENf_GET
#define CL93N72_UR_CTL0_GEN2r_CL93N72_RX_TRAINING_ENf_SET BCMI_TSCF_XGXS_CL93N72_UR_CTL0_GEN2r_CL93N72_RX_TRAINING_ENf_SET
#define READ_CL93N72_UR_CTL0_GEN2r BCMI_TSCF_XGXS_READ_CL93N72_UR_CTL0_GEN2r
#define WRITE_CL93N72_UR_CTL0_GEN2r BCMI_TSCF_XGXS_WRITE_CL93N72_UR_CTL0_GEN2r
#define MODIFY_CL93N72_UR_CTL0_GEN2r BCMI_TSCF_XGXS_MODIFY_CL93N72_UR_CTL0_GEN2r
#define READLN_CL93N72_UR_CTL0_GEN2r BCMI_TSCF_XGXS_READLN_CL93N72_UR_CTL0_GEN2r
#define WRITELN_CL93N72_UR_CTL0_GEN2r BCMI_TSCF_XGXS_WRITELN_CL93N72_UR_CTL0_GEN2r
#define WRITEALL_CL93N72_UR_CTL0_GEN2r BCMI_TSCF_XGXS_WRITEALL_CL93N72_UR_CTL0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_CL93N72_UR_CTL0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  CL93N72_UR_CTL1_GEN2
 * BLOCKS:   CL93N72_USER_RX
 * REGADDR:  0xd081
 * DEVAD:    1
 * DESC:     Control 1 Register
 * RESETVAL: 0x52 (82)
 * ACCESS:   R/W
 * FIELDS:
 *     CL93N72_GOOD_MARKER_CNT Number of good marker to checkbefore enabling frame lock
 *     CL93N72_BAD_MARKER_CNT Number of bad marker to checkbefore losing frame lock
 */
#define BCMI_TSCF_XGXS_CL93N72_UR_CTL1_GEN2r (0x0001d081 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_CL93N72_UR_CTL1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_UR_CTL1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_CL93N72_UR_CTL1_GEN2r_s {
	uint32_t v[1];
	uint32_t cl93n72_ur_ctl1_gen2[1];
	uint32_t _cl93n72_ur_ctl1_gen2;
} BCMI_TSCF_XGXS_CL93N72_UR_CTL1_GEN2r_t;

#define BCMI_TSCF_XGXS_CL93N72_UR_CTL1_GEN2r_CLR(r) (r).cl93n72_ur_ctl1_gen2[0] = 0
#define BCMI_TSCF_XGXS_CL93N72_UR_CTL1_GEN2r_SET(r,d) (r).cl93n72_ur_ctl1_gen2[0] = d
#define BCMI_TSCF_XGXS_CL93N72_UR_CTL1_GEN2r_GET(r) (r).cl93n72_ur_ctl1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_CL93N72_UR_CTL1_GEN2r_CL93N72_BAD_MARKER_CNTf_GET(r) ((((r).cl93n72_ur_ctl1_gen2[0]) >> 4) & 0x7)
#define BCMI_TSCF_XGXS_CL93N72_UR_CTL1_GEN2r_CL93N72_BAD_MARKER_CNTf_SET(r,f) (r).cl93n72_ur_ctl1_gen2[0]=(((r).cl93n72_ur_ctl1_gen2[0] & ~((uint32_t)0x7 << 4)) | ((((uint32_t)f) & 0x7) << 4)) | (7 << (16 + 4))
#define BCMI_TSCF_XGXS_CL93N72_UR_CTL1_GEN2r_CL93N72_GOOD_MARKER_CNTf_GET(r) (((r).cl93n72_ur_ctl1_gen2[0]) & 0x3)
#define BCMI_TSCF_XGXS_CL93N72_UR_CTL1_GEN2r_CL93N72_GOOD_MARKER_CNTf_SET(r,f) (r).cl93n72_ur_ctl1_gen2[0]=(((r).cl93n72_ur_ctl1_gen2[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access CL93N72_UR_CTL1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_CL93N72_UR_CTL1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL93N72_UR_CTL1_GEN2r,(_r._cl93n72_ur_ctl1_gen2))
#define BCMI_TSCF_XGXS_WRITE_CL93N72_UR_CTL1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UR_CTL1_GEN2r,(_r._cl93n72_ur_ctl1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_CL93N72_UR_CTL1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UR_CTL1_GEN2r,(_r._cl93n72_ur_ctl1_gen2))
#define BCMI_TSCF_XGXS_READLN_CL93N72_UR_CTL1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL93N72_UR_CTL1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ur_ctl1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_CL93N72_UR_CTL1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UR_CTL1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ur_ctl1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_CL93N72_UR_CTL1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UR_CTL1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_ur_ctl1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_UR_CTL1_GEN2r BCMI_TSCF_XGXS_CL93N72_UR_CTL1_GEN2r
#define CL93N72_UR_CTL1_GEN2r_SIZE BCMI_TSCF_XGXS_CL93N72_UR_CTL1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_CL93N72_UR_CTL1_GEN2r_t CL93N72_UR_CTL1_GEN2r_t;
#define CL93N72_UR_CTL1_GEN2r_CLR BCMI_TSCF_XGXS_CL93N72_UR_CTL1_GEN2r_CLR
#define CL93N72_UR_CTL1_GEN2r_SET BCMI_TSCF_XGXS_CL93N72_UR_CTL1_GEN2r_SET
#define CL93N72_UR_CTL1_GEN2r_GET BCMI_TSCF_XGXS_CL93N72_UR_CTL1_GEN2r_GET
#define CL93N72_UR_CTL1_GEN2r_CL93N72_BAD_MARKER_CNTf_GET BCMI_TSCF_XGXS_CL93N72_UR_CTL1_GEN2r_CL93N72_BAD_MARKER_CNTf_GET
#define CL93N72_UR_CTL1_GEN2r_CL93N72_BAD_MARKER_CNTf_SET BCMI_TSCF_XGXS_CL93N72_UR_CTL1_GEN2r_CL93N72_BAD_MARKER_CNTf_SET
#define CL93N72_UR_CTL1_GEN2r_CL93N72_GOOD_MARKER_CNTf_GET BCMI_TSCF_XGXS_CL93N72_UR_CTL1_GEN2r_CL93N72_GOOD_MARKER_CNTf_GET
#define CL93N72_UR_CTL1_GEN2r_CL93N72_GOOD_MARKER_CNTf_SET BCMI_TSCF_XGXS_CL93N72_UR_CTL1_GEN2r_CL93N72_GOOD_MARKER_CNTf_SET
#define READ_CL93N72_UR_CTL1_GEN2r BCMI_TSCF_XGXS_READ_CL93N72_UR_CTL1_GEN2r
#define WRITE_CL93N72_UR_CTL1_GEN2r BCMI_TSCF_XGXS_WRITE_CL93N72_UR_CTL1_GEN2r
#define MODIFY_CL93N72_UR_CTL1_GEN2r BCMI_TSCF_XGXS_MODIFY_CL93N72_UR_CTL1_GEN2r
#define READLN_CL93N72_UR_CTL1_GEN2r BCMI_TSCF_XGXS_READLN_CL93N72_UR_CTL1_GEN2r
#define WRITELN_CL93N72_UR_CTL1_GEN2r BCMI_TSCF_XGXS_WRITELN_CL93N72_UR_CTL1_GEN2r
#define WRITEALL_CL93N72_UR_CTL1_GEN2r BCMI_TSCF_XGXS_WRITEALL_CL93N72_UR_CTL1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_CL93N72_UR_CTL1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  CL93N72_UR_CTL2_GEN2
 * BLOCKS:   CL93N72_USER_RX
 * REGADDR:  0xd082
 * DEVAD:    1
 * DESC:     Control 2 Register
 * RESETVAL: 0x310 (784)
 * ACCESS:   R/W
 * FIELDS:
 *     CL93N72_CTRL_FRAME_DLY 0   : dis1-7 : early delay w.r.t cl93n72 rcvd data (7 vals)8  : sync to cl93n72 rcvd data9-15 : late delay w.r.t cl93n72 rcvd data (7 vals)
 *     CL93N72_DME_CELL_BOUNDARY_CHK Check for DME cell boundary transitions
 *     CL93N72_STRICT_DME_CHK Check for std. specified dme
 *     CL93N72_STRICT_MARKER_CHK Check for std. specified marker
 *     CL93N72_PPM_OFFSET_EN if enabled, cl93n72 tracks ppm offset of incoming datawhile checking from frame lock, one bit offset ineither direction for every frame (~4384 bits)
 *     CL93N72_RX_DP_LN_CLK_EN Cl93n72 Rx datapath lane clock enable0 - disabled1 - enabled
 *     CL93N72_FRAME_CONSISTENCY_CHK_EN Cl93n72 frame consistency check enable0 - disabled1 - enabled - checks that three consective frames from the link partnerhas the same status response/coffcient update request informationbefore it set the sets the latched status bits
 */
#define BCMI_TSCF_XGXS_CL93N72_UR_CTL2_GEN2r (0x0001d082 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_CL93N72_UR_CTL2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_UR_CTL2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_CL93N72_UR_CTL2_GEN2r_s {
	uint32_t v[1];
	uint32_t cl93n72_ur_ctl2_gen2[1];
	uint32_t _cl93n72_ur_ctl2_gen2;
} BCMI_TSCF_XGXS_CL93N72_UR_CTL2_GEN2r_t;

#define BCMI_TSCF_XGXS_CL93N72_UR_CTL2_GEN2r_CLR(r) (r).cl93n72_ur_ctl2_gen2[0] = 0
#define BCMI_TSCF_XGXS_CL93N72_UR_CTL2_GEN2r_SET(r,d) (r).cl93n72_ur_ctl2_gen2[0] = d
#define BCMI_TSCF_XGXS_CL93N72_UR_CTL2_GEN2r_GET(r) (r).cl93n72_ur_ctl2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_CL93N72_UR_CTL2_GEN2r_CL93N72_FRAME_CONSISTENCY_CHK_ENf_GET(r) ((((r).cl93n72_ur_ctl2_gen2[0]) >> 9) & 0x1)
#define BCMI_TSCF_XGXS_CL93N72_UR_CTL2_GEN2r_CL93N72_FRAME_CONSISTENCY_CHK_ENf_SET(r,f) (r).cl93n72_ur_ctl2_gen2[0]=(((r).cl93n72_ur_ctl2_gen2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_XGXS_CL93N72_UR_CTL2_GEN2r_CL93N72_RX_DP_LN_CLK_ENf_GET(r) ((((r).cl93n72_ur_ctl2_gen2[0]) >> 8) & 0x1)
#define BCMI_TSCF_XGXS_CL93N72_UR_CTL2_GEN2r_CL93N72_RX_DP_LN_CLK_ENf_SET(r,f) (r).cl93n72_ur_ctl2_gen2[0]=(((r).cl93n72_ur_ctl2_gen2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_XGXS_CL93N72_UR_CTL2_GEN2r_CL93N72_PPM_OFFSET_ENf_GET(r) ((((r).cl93n72_ur_ctl2_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_CL93N72_UR_CTL2_GEN2r_CL93N72_PPM_OFFSET_ENf_SET(r,f) (r).cl93n72_ur_ctl2_gen2[0]=(((r).cl93n72_ur_ctl2_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_CL93N72_UR_CTL2_GEN2r_CL93N72_STRICT_MARKER_CHKf_GET(r) ((((r).cl93n72_ur_ctl2_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_CL93N72_UR_CTL2_GEN2r_CL93N72_STRICT_MARKER_CHKf_SET(r,f) (r).cl93n72_ur_ctl2_gen2[0]=(((r).cl93n72_ur_ctl2_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_CL93N72_UR_CTL2_GEN2r_CL93N72_STRICT_DME_CHKf_GET(r) ((((r).cl93n72_ur_ctl2_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_CL93N72_UR_CTL2_GEN2r_CL93N72_STRICT_DME_CHKf_SET(r,f) (r).cl93n72_ur_ctl2_gen2[0]=(((r).cl93n72_ur_ctl2_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_CL93N72_UR_CTL2_GEN2r_CL93N72_DME_CELL_BOUNDARY_CHKf_GET(r) ((((r).cl93n72_ur_ctl2_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_CL93N72_UR_CTL2_GEN2r_CL93N72_DME_CELL_BOUNDARY_CHKf_SET(r,f) (r).cl93n72_ur_ctl2_gen2[0]=(((r).cl93n72_ur_ctl2_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_CL93N72_UR_CTL2_GEN2r_CL93N72_CTRL_FRAME_DLYf_GET(r) (((r).cl93n72_ur_ctl2_gen2[0]) & 0xf)
#define BCMI_TSCF_XGXS_CL93N72_UR_CTL2_GEN2r_CL93N72_CTRL_FRAME_DLYf_SET(r,f) (r).cl93n72_ur_ctl2_gen2[0]=(((r).cl93n72_ur_ctl2_gen2[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access CL93N72_UR_CTL2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_CL93N72_UR_CTL2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL93N72_UR_CTL2_GEN2r,(_r._cl93n72_ur_ctl2_gen2))
#define BCMI_TSCF_XGXS_WRITE_CL93N72_UR_CTL2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UR_CTL2_GEN2r,(_r._cl93n72_ur_ctl2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_CL93N72_UR_CTL2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UR_CTL2_GEN2r,(_r._cl93n72_ur_ctl2_gen2))
#define BCMI_TSCF_XGXS_READLN_CL93N72_UR_CTL2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL93N72_UR_CTL2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ur_ctl2_gen2))
#define BCMI_TSCF_XGXS_WRITELN_CL93N72_UR_CTL2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UR_CTL2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ur_ctl2_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_CL93N72_UR_CTL2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UR_CTL2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_ur_ctl2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_UR_CTL2_GEN2r BCMI_TSCF_XGXS_CL93N72_UR_CTL2_GEN2r
#define CL93N72_UR_CTL2_GEN2r_SIZE BCMI_TSCF_XGXS_CL93N72_UR_CTL2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_CL93N72_UR_CTL2_GEN2r_t CL93N72_UR_CTL2_GEN2r_t;
#define CL93N72_UR_CTL2_GEN2r_CLR BCMI_TSCF_XGXS_CL93N72_UR_CTL2_GEN2r_CLR
#define CL93N72_UR_CTL2_GEN2r_SET BCMI_TSCF_XGXS_CL93N72_UR_CTL2_GEN2r_SET
#define CL93N72_UR_CTL2_GEN2r_GET BCMI_TSCF_XGXS_CL93N72_UR_CTL2_GEN2r_GET
#define CL93N72_UR_CTL2_GEN2r_CL93N72_FRAME_CONSISTENCY_CHK_ENf_GET BCMI_TSCF_XGXS_CL93N72_UR_CTL2_GEN2r_CL93N72_FRAME_CONSISTENCY_CHK_ENf_GET
#define CL93N72_UR_CTL2_GEN2r_CL93N72_FRAME_CONSISTENCY_CHK_ENf_SET BCMI_TSCF_XGXS_CL93N72_UR_CTL2_GEN2r_CL93N72_FRAME_CONSISTENCY_CHK_ENf_SET
#define CL93N72_UR_CTL2_GEN2r_CL93N72_RX_DP_LN_CLK_ENf_GET BCMI_TSCF_XGXS_CL93N72_UR_CTL2_GEN2r_CL93N72_RX_DP_LN_CLK_ENf_GET
#define CL93N72_UR_CTL2_GEN2r_CL93N72_RX_DP_LN_CLK_ENf_SET BCMI_TSCF_XGXS_CL93N72_UR_CTL2_GEN2r_CL93N72_RX_DP_LN_CLK_ENf_SET
#define CL93N72_UR_CTL2_GEN2r_CL93N72_PPM_OFFSET_ENf_GET BCMI_TSCF_XGXS_CL93N72_UR_CTL2_GEN2r_CL93N72_PPM_OFFSET_ENf_GET
#define CL93N72_UR_CTL2_GEN2r_CL93N72_PPM_OFFSET_ENf_SET BCMI_TSCF_XGXS_CL93N72_UR_CTL2_GEN2r_CL93N72_PPM_OFFSET_ENf_SET
#define CL93N72_UR_CTL2_GEN2r_CL93N72_STRICT_MARKER_CHKf_GET BCMI_TSCF_XGXS_CL93N72_UR_CTL2_GEN2r_CL93N72_STRICT_MARKER_CHKf_GET
#define CL93N72_UR_CTL2_GEN2r_CL93N72_STRICT_MARKER_CHKf_SET BCMI_TSCF_XGXS_CL93N72_UR_CTL2_GEN2r_CL93N72_STRICT_MARKER_CHKf_SET
#define CL93N72_UR_CTL2_GEN2r_CL93N72_STRICT_DME_CHKf_GET BCMI_TSCF_XGXS_CL93N72_UR_CTL2_GEN2r_CL93N72_STRICT_DME_CHKf_GET
#define CL93N72_UR_CTL2_GEN2r_CL93N72_STRICT_DME_CHKf_SET BCMI_TSCF_XGXS_CL93N72_UR_CTL2_GEN2r_CL93N72_STRICT_DME_CHKf_SET
#define CL93N72_UR_CTL2_GEN2r_CL93N72_DME_CELL_BOUNDARY_CHKf_GET BCMI_TSCF_XGXS_CL93N72_UR_CTL2_GEN2r_CL93N72_DME_CELL_BOUNDARY_CHKf_GET
#define CL93N72_UR_CTL2_GEN2r_CL93N72_DME_CELL_BOUNDARY_CHKf_SET BCMI_TSCF_XGXS_CL93N72_UR_CTL2_GEN2r_CL93N72_DME_CELL_BOUNDARY_CHKf_SET
#define CL93N72_UR_CTL2_GEN2r_CL93N72_CTRL_FRAME_DLYf_GET BCMI_TSCF_XGXS_CL93N72_UR_CTL2_GEN2r_CL93N72_CTRL_FRAME_DLYf_GET
#define CL93N72_UR_CTL2_GEN2r_CL93N72_CTRL_FRAME_DLYf_SET BCMI_TSCF_XGXS_CL93N72_UR_CTL2_GEN2r_CL93N72_CTRL_FRAME_DLYf_SET
#define READ_CL93N72_UR_CTL2_GEN2r BCMI_TSCF_XGXS_READ_CL93N72_UR_CTL2_GEN2r
#define WRITE_CL93N72_UR_CTL2_GEN2r BCMI_TSCF_XGXS_WRITE_CL93N72_UR_CTL2_GEN2r
#define MODIFY_CL93N72_UR_CTL2_GEN2r BCMI_TSCF_XGXS_MODIFY_CL93N72_UR_CTL2_GEN2r
#define READLN_CL93N72_UR_CTL2_GEN2r BCMI_TSCF_XGXS_READLN_CL93N72_UR_CTL2_GEN2r
#define WRITELN_CL93N72_UR_CTL2_GEN2r BCMI_TSCF_XGXS_WRITELN_CL93N72_UR_CTL2_GEN2r
#define WRITEALL_CL93N72_UR_CTL2_GEN2r BCMI_TSCF_XGXS_WRITEALL_CL93N72_UR_CTL2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_CL93N72_UR_CTL2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  CL93N72_UR_STS0_GEN2
 * BLOCKS:   CL93N72_USER_RX
 * REGADDR:  0xd083
 * DEVAD:    1
 * DESC:     Status 0 Register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CL93N72_FRAME_LOCK Frame Lock signal statusThis bit provides status of the frame lock signal from the frame lock fsm.1 - frame locked0 - frame not lockedThe status bit in the IEEE registers space is set by firmware
 */
#define BCMI_TSCF_XGXS_CL93N72_UR_STS0_GEN2r (0x0001d083 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_CL93N72_UR_STS0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_UR_STS0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_CL93N72_UR_STS0_GEN2r_s {
	uint32_t v[1];
	uint32_t cl93n72_ur_sts0_gen2[1];
	uint32_t _cl93n72_ur_sts0_gen2;
} BCMI_TSCF_XGXS_CL93N72_UR_STS0_GEN2r_t;

#define BCMI_TSCF_XGXS_CL93N72_UR_STS0_GEN2r_CLR(r) (r).cl93n72_ur_sts0_gen2[0] = 0
#define BCMI_TSCF_XGXS_CL93N72_UR_STS0_GEN2r_SET(r,d) (r).cl93n72_ur_sts0_gen2[0] = d
#define BCMI_TSCF_XGXS_CL93N72_UR_STS0_GEN2r_GET(r) (r).cl93n72_ur_sts0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_CL93N72_UR_STS0_GEN2r_CL93N72_FRAME_LOCKf_GET(r) (((r).cl93n72_ur_sts0_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_CL93N72_UR_STS0_GEN2r_CL93N72_FRAME_LOCKf_SET(r,f) (r).cl93n72_ur_sts0_gen2[0]=(((r).cl93n72_ur_sts0_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access CL93N72_UR_STS0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_CL93N72_UR_STS0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL93N72_UR_STS0_GEN2r,(_r._cl93n72_ur_sts0_gen2))
#define BCMI_TSCF_XGXS_WRITE_CL93N72_UR_STS0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UR_STS0_GEN2r,(_r._cl93n72_ur_sts0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_CL93N72_UR_STS0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UR_STS0_GEN2r,(_r._cl93n72_ur_sts0_gen2))
#define BCMI_TSCF_XGXS_READLN_CL93N72_UR_STS0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL93N72_UR_STS0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ur_sts0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_CL93N72_UR_STS0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UR_STS0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ur_sts0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_CL93N72_UR_STS0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UR_STS0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_ur_sts0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_UR_STS0_GEN2r BCMI_TSCF_XGXS_CL93N72_UR_STS0_GEN2r
#define CL93N72_UR_STS0_GEN2r_SIZE BCMI_TSCF_XGXS_CL93N72_UR_STS0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_CL93N72_UR_STS0_GEN2r_t CL93N72_UR_STS0_GEN2r_t;
#define CL93N72_UR_STS0_GEN2r_CLR BCMI_TSCF_XGXS_CL93N72_UR_STS0_GEN2r_CLR
#define CL93N72_UR_STS0_GEN2r_SET BCMI_TSCF_XGXS_CL93N72_UR_STS0_GEN2r_SET
#define CL93N72_UR_STS0_GEN2r_GET BCMI_TSCF_XGXS_CL93N72_UR_STS0_GEN2r_GET
#define CL93N72_UR_STS0_GEN2r_CL93N72_FRAME_LOCKf_GET BCMI_TSCF_XGXS_CL93N72_UR_STS0_GEN2r_CL93N72_FRAME_LOCKf_GET
#define CL93N72_UR_STS0_GEN2r_CL93N72_FRAME_LOCKf_SET BCMI_TSCF_XGXS_CL93N72_UR_STS0_GEN2r_CL93N72_FRAME_LOCKf_SET
#define READ_CL93N72_UR_STS0_GEN2r BCMI_TSCF_XGXS_READ_CL93N72_UR_STS0_GEN2r
#define WRITE_CL93N72_UR_STS0_GEN2r BCMI_TSCF_XGXS_WRITE_CL93N72_UR_STS0_GEN2r
#define MODIFY_CL93N72_UR_STS0_GEN2r BCMI_TSCF_XGXS_MODIFY_CL93N72_UR_STS0_GEN2r
#define READLN_CL93N72_UR_STS0_GEN2r BCMI_TSCF_XGXS_READLN_CL93N72_UR_STS0_GEN2r
#define WRITELN_CL93N72_UR_STS0_GEN2r BCMI_TSCF_XGXS_WRITELN_CL93N72_UR_STS0_GEN2r
#define WRITEALL_CL93N72_UR_STS0_GEN2r BCMI_TSCF_XGXS_WRITEALL_CL93N72_UR_STS0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_CL93N72_UR_STS0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  CL93N72_UR_UC_INTR_CTL0_GEN2
 * BLOCKS:   CL93N72_USER_RX
 * REGADDR:  0xd084
 * DEVAD:    1
 * DESC:     Micro Interrupt Control 0 Register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL93N72_MICRO_UPDATE_CHG_INT_EN Update field micro interrupt enable. Enables an interrupt when the update field value changes in the training frame received from Link PartnerThe Link parnter request a change to the Local Device TX FIR tap values via the update field1 - Enable. Generates an interrupt when cl93n72_micro_lstatus_update_chg = 1'b1.0 - Disable
 *     CL93N72_MICRO_STATUS_CHG_INT_EN Status field change micro interrupt enable. Enables an interrupt when the status field value changes in the training frame received from Link PartnerWhen the Local Devices requests Link Partner to change its TX FIR tap values, then the Link Partner updatestaps and sends a response on the stataus field of the training frame1 - Enable. Generates an interrupt when cl93n72_micro_lstatus_status_chg = 1'b1.0 - Disable
 *     CL93N72_MICRO_FRAME_LOCK_INT_EN frame_lock change micro interrupt enable.1 - Enable0 - Disable
 */
#define BCMI_TSCF_XGXS_CL93N72_UR_UC_INTR_CTL0_GEN2r (0x0001d084 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_CL93N72_UR_UC_INTR_CTL0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_UR_UC_INTR_CTL0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_CL93N72_UR_UC_INTR_CTL0_GEN2r_s {
	uint32_t v[1];
	uint32_t cl93n72_ur_uc_intr_ctl0_gen2[1];
	uint32_t _cl93n72_ur_uc_intr_ctl0_gen2;
} BCMI_TSCF_XGXS_CL93N72_UR_UC_INTR_CTL0_GEN2r_t;

#define BCMI_TSCF_XGXS_CL93N72_UR_UC_INTR_CTL0_GEN2r_CLR(r) (r).cl93n72_ur_uc_intr_ctl0_gen2[0] = 0
#define BCMI_TSCF_XGXS_CL93N72_UR_UC_INTR_CTL0_GEN2r_SET(r,d) (r).cl93n72_ur_uc_intr_ctl0_gen2[0] = d
#define BCMI_TSCF_XGXS_CL93N72_UR_UC_INTR_CTL0_GEN2r_GET(r) (r).cl93n72_ur_uc_intr_ctl0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_CL93N72_UR_UC_INTR_CTL0_GEN2r_CL93N72_MICRO_FRAME_LOCK_INT_ENf_GET(r) ((((r).cl93n72_ur_uc_intr_ctl0_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_CL93N72_UR_UC_INTR_CTL0_GEN2r_CL93N72_MICRO_FRAME_LOCK_INT_ENf_SET(r,f) (r).cl93n72_ur_uc_intr_ctl0_gen2[0]=(((r).cl93n72_ur_uc_intr_ctl0_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_CL93N72_UR_UC_INTR_CTL0_GEN2r_CL93N72_MICRO_STATUS_CHG_INT_ENf_GET(r) ((((r).cl93n72_ur_uc_intr_ctl0_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_CL93N72_UR_UC_INTR_CTL0_GEN2r_CL93N72_MICRO_STATUS_CHG_INT_ENf_SET(r,f) (r).cl93n72_ur_uc_intr_ctl0_gen2[0]=(((r).cl93n72_ur_uc_intr_ctl0_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_CL93N72_UR_UC_INTR_CTL0_GEN2r_CL93N72_MICRO_UPDATE_CHG_INT_ENf_GET(r) (((r).cl93n72_ur_uc_intr_ctl0_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_CL93N72_UR_UC_INTR_CTL0_GEN2r_CL93N72_MICRO_UPDATE_CHG_INT_ENf_SET(r,f) (r).cl93n72_ur_uc_intr_ctl0_gen2[0]=(((r).cl93n72_ur_uc_intr_ctl0_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access CL93N72_UR_UC_INTR_CTL0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_CL93N72_UR_UC_INTR_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL93N72_UR_UC_INTR_CTL0_GEN2r,(_r._cl93n72_ur_uc_intr_ctl0_gen2))
#define BCMI_TSCF_XGXS_WRITE_CL93N72_UR_UC_INTR_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UR_UC_INTR_CTL0_GEN2r,(_r._cl93n72_ur_uc_intr_ctl0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_CL93N72_UR_UC_INTR_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UR_UC_INTR_CTL0_GEN2r,(_r._cl93n72_ur_uc_intr_ctl0_gen2))
#define BCMI_TSCF_XGXS_READLN_CL93N72_UR_UC_INTR_CTL0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL93N72_UR_UC_INTR_CTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ur_uc_intr_ctl0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_CL93N72_UR_UC_INTR_CTL0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UR_UC_INTR_CTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ur_uc_intr_ctl0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_CL93N72_UR_UC_INTR_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UR_UC_INTR_CTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_ur_uc_intr_ctl0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_UR_UC_INTR_CTL0_GEN2r BCMI_TSCF_XGXS_CL93N72_UR_UC_INTR_CTL0_GEN2r
#define CL93N72_UR_UC_INTR_CTL0_GEN2r_SIZE BCMI_TSCF_XGXS_CL93N72_UR_UC_INTR_CTL0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_CL93N72_UR_UC_INTR_CTL0_GEN2r_t CL93N72_UR_UC_INTR_CTL0_GEN2r_t;
#define CL93N72_UR_UC_INTR_CTL0_GEN2r_CLR BCMI_TSCF_XGXS_CL93N72_UR_UC_INTR_CTL0_GEN2r_CLR
#define CL93N72_UR_UC_INTR_CTL0_GEN2r_SET BCMI_TSCF_XGXS_CL93N72_UR_UC_INTR_CTL0_GEN2r_SET
#define CL93N72_UR_UC_INTR_CTL0_GEN2r_GET BCMI_TSCF_XGXS_CL93N72_UR_UC_INTR_CTL0_GEN2r_GET
#define CL93N72_UR_UC_INTR_CTL0_GEN2r_CL93N72_MICRO_FRAME_LOCK_INT_ENf_GET BCMI_TSCF_XGXS_CL93N72_UR_UC_INTR_CTL0_GEN2r_CL93N72_MICRO_FRAME_LOCK_INT_ENf_GET
#define CL93N72_UR_UC_INTR_CTL0_GEN2r_CL93N72_MICRO_FRAME_LOCK_INT_ENf_SET BCMI_TSCF_XGXS_CL93N72_UR_UC_INTR_CTL0_GEN2r_CL93N72_MICRO_FRAME_LOCK_INT_ENf_SET
#define CL93N72_UR_UC_INTR_CTL0_GEN2r_CL93N72_MICRO_STATUS_CHG_INT_ENf_GET BCMI_TSCF_XGXS_CL93N72_UR_UC_INTR_CTL0_GEN2r_CL93N72_MICRO_STATUS_CHG_INT_ENf_GET
#define CL93N72_UR_UC_INTR_CTL0_GEN2r_CL93N72_MICRO_STATUS_CHG_INT_ENf_SET BCMI_TSCF_XGXS_CL93N72_UR_UC_INTR_CTL0_GEN2r_CL93N72_MICRO_STATUS_CHG_INT_ENf_SET
#define CL93N72_UR_UC_INTR_CTL0_GEN2r_CL93N72_MICRO_UPDATE_CHG_INT_ENf_GET BCMI_TSCF_XGXS_CL93N72_UR_UC_INTR_CTL0_GEN2r_CL93N72_MICRO_UPDATE_CHG_INT_ENf_GET
#define CL93N72_UR_UC_INTR_CTL0_GEN2r_CL93N72_MICRO_UPDATE_CHG_INT_ENf_SET BCMI_TSCF_XGXS_CL93N72_UR_UC_INTR_CTL0_GEN2r_CL93N72_MICRO_UPDATE_CHG_INT_ENf_SET
#define READ_CL93N72_UR_UC_INTR_CTL0_GEN2r BCMI_TSCF_XGXS_READ_CL93N72_UR_UC_INTR_CTL0_GEN2r
#define WRITE_CL93N72_UR_UC_INTR_CTL0_GEN2r BCMI_TSCF_XGXS_WRITE_CL93N72_UR_UC_INTR_CTL0_GEN2r
#define MODIFY_CL93N72_UR_UC_INTR_CTL0_GEN2r BCMI_TSCF_XGXS_MODIFY_CL93N72_UR_UC_INTR_CTL0_GEN2r
#define READLN_CL93N72_UR_UC_INTR_CTL0_GEN2r BCMI_TSCF_XGXS_READLN_CL93N72_UR_UC_INTR_CTL0_GEN2r
#define WRITELN_CL93N72_UR_UC_INTR_CTL0_GEN2r BCMI_TSCF_XGXS_WRITELN_CL93N72_UR_UC_INTR_CTL0_GEN2r
#define WRITEALL_CL93N72_UR_UC_INTR_CTL0_GEN2r BCMI_TSCF_XGXS_WRITEALL_CL93N72_UR_UC_INTR_CTL0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_CL93N72_UR_UC_INTR_CTL0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  CL93N72_UR_UC_STS0_GEN2
 * BLOCKS:   CL93N72_USER_RX
 * REGADDR:  0xd085
 * DEVAD:    1
 * DESC:     Micro Status 0 Register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CL93N72_MICRO_UPDATE_CHG_LSTATUS coeffcient update field change latched status -  This bit is set to 1'b1 when the update field value changes in thetraining frame received from the Link Partner.This bit cleared when this register is read.
 */
#define BCMI_TSCF_XGXS_CL93N72_UR_UC_STS0_GEN2r (0x0001d085 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_CL93N72_UR_UC_STS0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_UR_UC_STS0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_CL93N72_UR_UC_STS0_GEN2r_s {
	uint32_t v[1];
	uint32_t cl93n72_ur_uc_sts0_gen2[1];
	uint32_t _cl93n72_ur_uc_sts0_gen2;
} BCMI_TSCF_XGXS_CL93N72_UR_UC_STS0_GEN2r_t;

#define BCMI_TSCF_XGXS_CL93N72_UR_UC_STS0_GEN2r_CLR(r) (r).cl93n72_ur_uc_sts0_gen2[0] = 0
#define BCMI_TSCF_XGXS_CL93N72_UR_UC_STS0_GEN2r_SET(r,d) (r).cl93n72_ur_uc_sts0_gen2[0] = d
#define BCMI_TSCF_XGXS_CL93N72_UR_UC_STS0_GEN2r_GET(r) (r).cl93n72_ur_uc_sts0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_CL93N72_UR_UC_STS0_GEN2r_CL93N72_MICRO_UPDATE_CHG_LSTATUSf_GET(r) (((r).cl93n72_ur_uc_sts0_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_CL93N72_UR_UC_STS0_GEN2r_CL93N72_MICRO_UPDATE_CHG_LSTATUSf_SET(r,f) (r).cl93n72_ur_uc_sts0_gen2[0]=(((r).cl93n72_ur_uc_sts0_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access CL93N72_UR_UC_STS0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_CL93N72_UR_UC_STS0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL93N72_UR_UC_STS0_GEN2r,(_r._cl93n72_ur_uc_sts0_gen2))
#define BCMI_TSCF_XGXS_WRITE_CL93N72_UR_UC_STS0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UR_UC_STS0_GEN2r,(_r._cl93n72_ur_uc_sts0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_CL93N72_UR_UC_STS0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UR_UC_STS0_GEN2r,(_r._cl93n72_ur_uc_sts0_gen2))
#define BCMI_TSCF_XGXS_READLN_CL93N72_UR_UC_STS0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL93N72_UR_UC_STS0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ur_uc_sts0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_CL93N72_UR_UC_STS0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UR_UC_STS0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ur_uc_sts0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_CL93N72_UR_UC_STS0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UR_UC_STS0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_ur_uc_sts0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_UR_UC_STS0_GEN2r BCMI_TSCF_XGXS_CL93N72_UR_UC_STS0_GEN2r
#define CL93N72_UR_UC_STS0_GEN2r_SIZE BCMI_TSCF_XGXS_CL93N72_UR_UC_STS0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_CL93N72_UR_UC_STS0_GEN2r_t CL93N72_UR_UC_STS0_GEN2r_t;
#define CL93N72_UR_UC_STS0_GEN2r_CLR BCMI_TSCF_XGXS_CL93N72_UR_UC_STS0_GEN2r_CLR
#define CL93N72_UR_UC_STS0_GEN2r_SET BCMI_TSCF_XGXS_CL93N72_UR_UC_STS0_GEN2r_SET
#define CL93N72_UR_UC_STS0_GEN2r_GET BCMI_TSCF_XGXS_CL93N72_UR_UC_STS0_GEN2r_GET
#define CL93N72_UR_UC_STS0_GEN2r_CL93N72_MICRO_UPDATE_CHG_LSTATUSf_GET BCMI_TSCF_XGXS_CL93N72_UR_UC_STS0_GEN2r_CL93N72_MICRO_UPDATE_CHG_LSTATUSf_GET
#define CL93N72_UR_UC_STS0_GEN2r_CL93N72_MICRO_UPDATE_CHG_LSTATUSf_SET BCMI_TSCF_XGXS_CL93N72_UR_UC_STS0_GEN2r_CL93N72_MICRO_UPDATE_CHG_LSTATUSf_SET
#define READ_CL93N72_UR_UC_STS0_GEN2r BCMI_TSCF_XGXS_READ_CL93N72_UR_UC_STS0_GEN2r
#define WRITE_CL93N72_UR_UC_STS0_GEN2r BCMI_TSCF_XGXS_WRITE_CL93N72_UR_UC_STS0_GEN2r
#define MODIFY_CL93N72_UR_UC_STS0_GEN2r BCMI_TSCF_XGXS_MODIFY_CL93N72_UR_UC_STS0_GEN2r
#define READLN_CL93N72_UR_UC_STS0_GEN2r BCMI_TSCF_XGXS_READLN_CL93N72_UR_UC_STS0_GEN2r
#define WRITELN_CL93N72_UR_UC_STS0_GEN2r BCMI_TSCF_XGXS_WRITELN_CL93N72_UR_UC_STS0_GEN2r
#define WRITEALL_CL93N72_UR_UC_STS0_GEN2r BCMI_TSCF_XGXS_WRITEALL_CL93N72_UR_UC_STS0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_CL93N72_UR_UC_STS0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  CL93N72_UR_UC_STS1_GEN2
 * BLOCKS:   CL93N72_USER_RX
 * REGADDR:  0xd086
 * DEVAD:    1
 * DESC:     Micro Status 1 Register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CL93N72_MICRO_STATUS_CHG_LSTATUS coeffcient status field latched status - This bit is set to 1'b1 when the status field value changes in thetraining frame received from the Link Partner.This bit cleared when this register is read.
 *     CL93N72_MICRO_FRAME_LOCK_LSTATUS Frame lock change latched status - This bit is set to 1'b1 when a change is detected on the frame lock signalThis bit cleared when this register is read.
 */
#define BCMI_TSCF_XGXS_CL93N72_UR_UC_STS1_GEN2r (0x0001d086 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_CL93N72_UR_UC_STS1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_UR_UC_STS1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_CL93N72_UR_UC_STS1_GEN2r_s {
	uint32_t v[1];
	uint32_t cl93n72_ur_uc_sts1_gen2[1];
	uint32_t _cl93n72_ur_uc_sts1_gen2;
} BCMI_TSCF_XGXS_CL93N72_UR_UC_STS1_GEN2r_t;

#define BCMI_TSCF_XGXS_CL93N72_UR_UC_STS1_GEN2r_CLR(r) (r).cl93n72_ur_uc_sts1_gen2[0] = 0
#define BCMI_TSCF_XGXS_CL93N72_UR_UC_STS1_GEN2r_SET(r,d) (r).cl93n72_ur_uc_sts1_gen2[0] = d
#define BCMI_TSCF_XGXS_CL93N72_UR_UC_STS1_GEN2r_GET(r) (r).cl93n72_ur_uc_sts1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_CL93N72_UR_UC_STS1_GEN2r_CL93N72_MICRO_FRAME_LOCK_LSTATUSf_GET(r) ((((r).cl93n72_ur_uc_sts1_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_CL93N72_UR_UC_STS1_GEN2r_CL93N72_MICRO_FRAME_LOCK_LSTATUSf_SET(r,f) (r).cl93n72_ur_uc_sts1_gen2[0]=(((r).cl93n72_ur_uc_sts1_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_CL93N72_UR_UC_STS1_GEN2r_CL93N72_MICRO_STATUS_CHG_LSTATUSf_GET(r) (((r).cl93n72_ur_uc_sts1_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_CL93N72_UR_UC_STS1_GEN2r_CL93N72_MICRO_STATUS_CHG_LSTATUSf_SET(r,f) (r).cl93n72_ur_uc_sts1_gen2[0]=(((r).cl93n72_ur_uc_sts1_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access CL93N72_UR_UC_STS1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_CL93N72_UR_UC_STS1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL93N72_UR_UC_STS1_GEN2r,(_r._cl93n72_ur_uc_sts1_gen2))
#define BCMI_TSCF_XGXS_WRITE_CL93N72_UR_UC_STS1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UR_UC_STS1_GEN2r,(_r._cl93n72_ur_uc_sts1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_CL93N72_UR_UC_STS1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UR_UC_STS1_GEN2r,(_r._cl93n72_ur_uc_sts1_gen2))
#define BCMI_TSCF_XGXS_READLN_CL93N72_UR_UC_STS1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL93N72_UR_UC_STS1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ur_uc_sts1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_CL93N72_UR_UC_STS1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UR_UC_STS1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ur_uc_sts1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_CL93N72_UR_UC_STS1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UR_UC_STS1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_ur_uc_sts1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_UR_UC_STS1_GEN2r BCMI_TSCF_XGXS_CL93N72_UR_UC_STS1_GEN2r
#define CL93N72_UR_UC_STS1_GEN2r_SIZE BCMI_TSCF_XGXS_CL93N72_UR_UC_STS1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_CL93N72_UR_UC_STS1_GEN2r_t CL93N72_UR_UC_STS1_GEN2r_t;
#define CL93N72_UR_UC_STS1_GEN2r_CLR BCMI_TSCF_XGXS_CL93N72_UR_UC_STS1_GEN2r_CLR
#define CL93N72_UR_UC_STS1_GEN2r_SET BCMI_TSCF_XGXS_CL93N72_UR_UC_STS1_GEN2r_SET
#define CL93N72_UR_UC_STS1_GEN2r_GET BCMI_TSCF_XGXS_CL93N72_UR_UC_STS1_GEN2r_GET
#define CL93N72_UR_UC_STS1_GEN2r_CL93N72_MICRO_FRAME_LOCK_LSTATUSf_GET BCMI_TSCF_XGXS_CL93N72_UR_UC_STS1_GEN2r_CL93N72_MICRO_FRAME_LOCK_LSTATUSf_GET
#define CL93N72_UR_UC_STS1_GEN2r_CL93N72_MICRO_FRAME_LOCK_LSTATUSf_SET BCMI_TSCF_XGXS_CL93N72_UR_UC_STS1_GEN2r_CL93N72_MICRO_FRAME_LOCK_LSTATUSf_SET
#define CL93N72_UR_UC_STS1_GEN2r_CL93N72_MICRO_STATUS_CHG_LSTATUSf_GET BCMI_TSCF_XGXS_CL93N72_UR_UC_STS1_GEN2r_CL93N72_MICRO_STATUS_CHG_LSTATUSf_GET
#define CL93N72_UR_UC_STS1_GEN2r_CL93N72_MICRO_STATUS_CHG_LSTATUSf_SET BCMI_TSCF_XGXS_CL93N72_UR_UC_STS1_GEN2r_CL93N72_MICRO_STATUS_CHG_LSTATUSf_SET
#define READ_CL93N72_UR_UC_STS1_GEN2r BCMI_TSCF_XGXS_READ_CL93N72_UR_UC_STS1_GEN2r
#define WRITE_CL93N72_UR_UC_STS1_GEN2r BCMI_TSCF_XGXS_WRITE_CL93N72_UR_UC_STS1_GEN2r
#define MODIFY_CL93N72_UR_UC_STS1_GEN2r BCMI_TSCF_XGXS_MODIFY_CL93N72_UR_UC_STS1_GEN2r
#define READLN_CL93N72_UR_UC_STS1_GEN2r BCMI_TSCF_XGXS_READLN_CL93N72_UR_UC_STS1_GEN2r
#define WRITELN_CL93N72_UR_UC_STS1_GEN2r BCMI_TSCF_XGXS_WRITELN_CL93N72_UR_UC_STS1_GEN2r
#define WRITEALL_CL93N72_UR_UC_STS1_GEN2r BCMI_TSCF_XGXS_WRITEALL_CL93N72_UR_UC_STS1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_CL93N72_UR_UC_STS1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  CL93N72_UT_XMT_UPD_PAGE_GEN2
 * BLOCKS:   CL93N72_USER_TX
 * REGADDR:  0xd090
 * DEVAD:    1
 * DESC:     CL93N72 Send Coefficient Update Request to Link Partner Register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL93N72_XMT_UPDATE_PAGE Local Device (LD) Coefficient Update registerContains correction information from the local receiverto the link partner transmit equalizer.Bit15:14   Reserved Transmitted as 0, ignored on reception.13   Preset1 = Preset coefficients0 = Normal operation12   Initialize 1 = Initialize coefficients0 = Normal operation11:6 Reserved Transmitted as 0, ignored on reception.5:4  Coefficient (+1) update5 41 1 = reserved0 1 = increment1 0 = decrement0 0 = hold3:2  Coefficient (0) update3 21 1 = reserved0 1 = increment1 0 = decrement0 0 = hold1:0  Coefficient (-1) update1 01 1 = reserved0 1 = increment1 0 = decrement0 0 = hold
 */
#define BCMI_TSCF_XGXS_CL93N72_UT_XMT_UPD_PAGE_GEN2r (0x0001d090 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_CL93N72_UT_XMT_UPD_PAGE_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_UT_XMT_UPD_PAGE_GEN2.
 */
typedef union BCMI_TSCF_XGXS_CL93N72_UT_XMT_UPD_PAGE_GEN2r_s {
	uint32_t v[1];
	uint32_t cl93n72_ut_xmt_upd_page_gen2[1];
	uint32_t _cl93n72_ut_xmt_upd_page_gen2;
} BCMI_TSCF_XGXS_CL93N72_UT_XMT_UPD_PAGE_GEN2r_t;

#define BCMI_TSCF_XGXS_CL93N72_UT_XMT_UPD_PAGE_GEN2r_CLR(r) (r).cl93n72_ut_xmt_upd_page_gen2[0] = 0
#define BCMI_TSCF_XGXS_CL93N72_UT_XMT_UPD_PAGE_GEN2r_SET(r,d) (r).cl93n72_ut_xmt_upd_page_gen2[0] = d
#define BCMI_TSCF_XGXS_CL93N72_UT_XMT_UPD_PAGE_GEN2r_GET(r) (r).cl93n72_ut_xmt_upd_page_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_CL93N72_UT_XMT_UPD_PAGE_GEN2r_CL93N72_XMT_UPDATE_PAGEf_GET(r) (((r).cl93n72_ut_xmt_upd_page_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_CL93N72_UT_XMT_UPD_PAGE_GEN2r_CL93N72_XMT_UPDATE_PAGEf_SET(r,f) (r).cl93n72_ut_xmt_upd_page_gen2[0]=(((r).cl93n72_ut_xmt_upd_page_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access CL93N72_UT_XMT_UPD_PAGE_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_CL93N72_UT_XMT_UPD_PAGE_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL93N72_UT_XMT_UPD_PAGE_GEN2r,(_r._cl93n72_ut_xmt_upd_page_gen2))
#define BCMI_TSCF_XGXS_WRITE_CL93N72_UT_XMT_UPD_PAGE_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UT_XMT_UPD_PAGE_GEN2r,(_r._cl93n72_ut_xmt_upd_page_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_CL93N72_UT_XMT_UPD_PAGE_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UT_XMT_UPD_PAGE_GEN2r,(_r._cl93n72_ut_xmt_upd_page_gen2))
#define BCMI_TSCF_XGXS_READLN_CL93N72_UT_XMT_UPD_PAGE_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL93N72_UT_XMT_UPD_PAGE_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ut_xmt_upd_page_gen2))
#define BCMI_TSCF_XGXS_WRITELN_CL93N72_UT_XMT_UPD_PAGE_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UT_XMT_UPD_PAGE_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ut_xmt_upd_page_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_CL93N72_UT_XMT_UPD_PAGE_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UT_XMT_UPD_PAGE_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_ut_xmt_upd_page_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_UT_XMT_UPD_PAGE_GEN2r BCMI_TSCF_XGXS_CL93N72_UT_XMT_UPD_PAGE_GEN2r
#define CL93N72_UT_XMT_UPD_PAGE_GEN2r_SIZE BCMI_TSCF_XGXS_CL93N72_UT_XMT_UPD_PAGE_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_CL93N72_UT_XMT_UPD_PAGE_GEN2r_t CL93N72_UT_XMT_UPD_PAGE_GEN2r_t;
#define CL93N72_UT_XMT_UPD_PAGE_GEN2r_CLR BCMI_TSCF_XGXS_CL93N72_UT_XMT_UPD_PAGE_GEN2r_CLR
#define CL93N72_UT_XMT_UPD_PAGE_GEN2r_SET BCMI_TSCF_XGXS_CL93N72_UT_XMT_UPD_PAGE_GEN2r_SET
#define CL93N72_UT_XMT_UPD_PAGE_GEN2r_GET BCMI_TSCF_XGXS_CL93N72_UT_XMT_UPD_PAGE_GEN2r_GET
#define CL93N72_UT_XMT_UPD_PAGE_GEN2r_CL93N72_XMT_UPDATE_PAGEf_GET BCMI_TSCF_XGXS_CL93N72_UT_XMT_UPD_PAGE_GEN2r_CL93N72_XMT_UPDATE_PAGEf_GET
#define CL93N72_UT_XMT_UPD_PAGE_GEN2r_CL93N72_XMT_UPDATE_PAGEf_SET BCMI_TSCF_XGXS_CL93N72_UT_XMT_UPD_PAGE_GEN2r_CL93N72_XMT_UPDATE_PAGEf_SET
#define READ_CL93N72_UT_XMT_UPD_PAGE_GEN2r BCMI_TSCF_XGXS_READ_CL93N72_UT_XMT_UPD_PAGE_GEN2r
#define WRITE_CL93N72_UT_XMT_UPD_PAGE_GEN2r BCMI_TSCF_XGXS_WRITE_CL93N72_UT_XMT_UPD_PAGE_GEN2r
#define MODIFY_CL93N72_UT_XMT_UPD_PAGE_GEN2r BCMI_TSCF_XGXS_MODIFY_CL93N72_UT_XMT_UPD_PAGE_GEN2r
#define READLN_CL93N72_UT_XMT_UPD_PAGE_GEN2r BCMI_TSCF_XGXS_READLN_CL93N72_UT_XMT_UPD_PAGE_GEN2r
#define WRITELN_CL93N72_UT_XMT_UPD_PAGE_GEN2r BCMI_TSCF_XGXS_WRITELN_CL93N72_UT_XMT_UPD_PAGE_GEN2r
#define WRITEALL_CL93N72_UT_XMT_UPD_PAGE_GEN2r BCMI_TSCF_XGXS_WRITEALL_CL93N72_UT_XMT_UPD_PAGE_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_CL93N72_UT_XMT_UPD_PAGE_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  CL93N72_UT_LD_XMT_STS_PAGE_GEN2
 * BLOCKS:   CL93N72_USER_TX
 * REGADDR:  0xd091
 * DEVAD:    1
 * DESC:     CL93N72 Send Local Device's Coeffcient Status to Link Partner Register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL93N72_LD_XMT_STATUS_PAGE Local Device's transmit status page
 */
#define BCMI_TSCF_XGXS_CL93N72_UT_LD_XMT_STS_PAGE_GEN2r (0x0001d091 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_CL93N72_UT_LD_XMT_STS_PAGE_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_UT_LD_XMT_STS_PAGE_GEN2.
 */
typedef union BCMI_TSCF_XGXS_CL93N72_UT_LD_XMT_STS_PAGE_GEN2r_s {
	uint32_t v[1];
	uint32_t cl93n72_ut_ld_xmt_sts_page_gen2[1];
	uint32_t _cl93n72_ut_ld_xmt_sts_page_gen2;
} BCMI_TSCF_XGXS_CL93N72_UT_LD_XMT_STS_PAGE_GEN2r_t;

#define BCMI_TSCF_XGXS_CL93N72_UT_LD_XMT_STS_PAGE_GEN2r_CLR(r) (r).cl93n72_ut_ld_xmt_sts_page_gen2[0] = 0
#define BCMI_TSCF_XGXS_CL93N72_UT_LD_XMT_STS_PAGE_GEN2r_SET(r,d) (r).cl93n72_ut_ld_xmt_sts_page_gen2[0] = d
#define BCMI_TSCF_XGXS_CL93N72_UT_LD_XMT_STS_PAGE_GEN2r_GET(r) (r).cl93n72_ut_ld_xmt_sts_page_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_CL93N72_UT_LD_XMT_STS_PAGE_GEN2r_CL93N72_LD_XMT_STATUS_PAGEf_GET(r) (((r).cl93n72_ut_ld_xmt_sts_page_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_CL93N72_UT_LD_XMT_STS_PAGE_GEN2r_CL93N72_LD_XMT_STATUS_PAGEf_SET(r,f) (r).cl93n72_ut_ld_xmt_sts_page_gen2[0]=(((r).cl93n72_ut_ld_xmt_sts_page_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access CL93N72_UT_LD_XMT_STS_PAGE_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_CL93N72_UT_LD_XMT_STS_PAGE_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL93N72_UT_LD_XMT_STS_PAGE_GEN2r,(_r._cl93n72_ut_ld_xmt_sts_page_gen2))
#define BCMI_TSCF_XGXS_WRITE_CL93N72_UT_LD_XMT_STS_PAGE_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UT_LD_XMT_STS_PAGE_GEN2r,(_r._cl93n72_ut_ld_xmt_sts_page_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_CL93N72_UT_LD_XMT_STS_PAGE_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UT_LD_XMT_STS_PAGE_GEN2r,(_r._cl93n72_ut_ld_xmt_sts_page_gen2))
#define BCMI_TSCF_XGXS_READLN_CL93N72_UT_LD_XMT_STS_PAGE_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL93N72_UT_LD_XMT_STS_PAGE_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ut_ld_xmt_sts_page_gen2))
#define BCMI_TSCF_XGXS_WRITELN_CL93N72_UT_LD_XMT_STS_PAGE_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UT_LD_XMT_STS_PAGE_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ut_ld_xmt_sts_page_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_CL93N72_UT_LD_XMT_STS_PAGE_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UT_LD_XMT_STS_PAGE_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_ut_ld_xmt_sts_page_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_UT_LD_XMT_STS_PAGE_GEN2r BCMI_TSCF_XGXS_CL93N72_UT_LD_XMT_STS_PAGE_GEN2r
#define CL93N72_UT_LD_XMT_STS_PAGE_GEN2r_SIZE BCMI_TSCF_XGXS_CL93N72_UT_LD_XMT_STS_PAGE_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_CL93N72_UT_LD_XMT_STS_PAGE_GEN2r_t CL93N72_UT_LD_XMT_STS_PAGE_GEN2r_t;
#define CL93N72_UT_LD_XMT_STS_PAGE_GEN2r_CLR BCMI_TSCF_XGXS_CL93N72_UT_LD_XMT_STS_PAGE_GEN2r_CLR
#define CL93N72_UT_LD_XMT_STS_PAGE_GEN2r_SET BCMI_TSCF_XGXS_CL93N72_UT_LD_XMT_STS_PAGE_GEN2r_SET
#define CL93N72_UT_LD_XMT_STS_PAGE_GEN2r_GET BCMI_TSCF_XGXS_CL93N72_UT_LD_XMT_STS_PAGE_GEN2r_GET
#define CL93N72_UT_LD_XMT_STS_PAGE_GEN2r_CL93N72_LD_XMT_STATUS_PAGEf_GET BCMI_TSCF_XGXS_CL93N72_UT_LD_XMT_STS_PAGE_GEN2r_CL93N72_LD_XMT_STATUS_PAGEf_GET
#define CL93N72_UT_LD_XMT_STS_PAGE_GEN2r_CL93N72_LD_XMT_STATUS_PAGEf_SET BCMI_TSCF_XGXS_CL93N72_UT_LD_XMT_STS_PAGE_GEN2r_CL93N72_LD_XMT_STATUS_PAGEf_SET
#define READ_CL93N72_UT_LD_XMT_STS_PAGE_GEN2r BCMI_TSCF_XGXS_READ_CL93N72_UT_LD_XMT_STS_PAGE_GEN2r
#define WRITE_CL93N72_UT_LD_XMT_STS_PAGE_GEN2r BCMI_TSCF_XGXS_WRITE_CL93N72_UT_LD_XMT_STS_PAGE_GEN2r
#define MODIFY_CL93N72_UT_LD_XMT_STS_PAGE_GEN2r BCMI_TSCF_XGXS_MODIFY_CL93N72_UT_LD_XMT_STS_PAGE_GEN2r
#define READLN_CL93N72_UT_LD_XMT_STS_PAGE_GEN2r BCMI_TSCF_XGXS_READLN_CL93N72_UT_LD_XMT_STS_PAGE_GEN2r
#define WRITELN_CL93N72_UT_LD_XMT_STS_PAGE_GEN2r BCMI_TSCF_XGXS_WRITELN_CL93N72_UT_LD_XMT_STS_PAGE_GEN2r
#define WRITEALL_CL93N72_UT_LD_XMT_STS_PAGE_GEN2r BCMI_TSCF_XGXS_WRITEALL_CL93N72_UT_LD_XMT_STS_PAGE_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_CL93N72_UT_LD_XMT_STS_PAGE_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  CL93N72_UT_CTL0_GEN2
 * BLOCKS:   CL93N72_USER_TX
 * REGADDR:  0xd092
 * DEVAD:    1
 * DESC:     CL93N72 Control 0 Register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CL93N72_SW_RX_TRAINED Set to TRUE (1'b1) by the micro when the remote transmitand local equalizers have been optimized and normal datatransmission may commence; set to FALSE (1'b0) otherwise.
 *     CL93N72_SW_FRAME_LOCK Set to TRUE (1'b1) by the micro to indicate to the training fsmframe lock has been achieved
 *     CL93N72_SW_REMOTE_RX_READY Set to TRUE (1'b1) by the micro to indicate to the training fsmlink parnter rx ready bit is set. It indicates that the remote is trained
 */
#define BCMI_TSCF_XGXS_CL93N72_UT_CTL0_GEN2r (0x0001d092 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_CL93N72_UT_CTL0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_UT_CTL0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_CL93N72_UT_CTL0_GEN2r_s {
	uint32_t v[1];
	uint32_t cl93n72_ut_ctl0_gen2[1];
	uint32_t _cl93n72_ut_ctl0_gen2;
} BCMI_TSCF_XGXS_CL93N72_UT_CTL0_GEN2r_t;

#define BCMI_TSCF_XGXS_CL93N72_UT_CTL0_GEN2r_CLR(r) (r).cl93n72_ut_ctl0_gen2[0] = 0
#define BCMI_TSCF_XGXS_CL93N72_UT_CTL0_GEN2r_SET(r,d) (r).cl93n72_ut_ctl0_gen2[0] = d
#define BCMI_TSCF_XGXS_CL93N72_UT_CTL0_GEN2r_GET(r) (r).cl93n72_ut_ctl0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_CL93N72_UT_CTL0_GEN2r_CL93N72_SW_REMOTE_RX_READYf_GET(r) ((((r).cl93n72_ut_ctl0_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_CL93N72_UT_CTL0_GEN2r_CL93N72_SW_REMOTE_RX_READYf_SET(r,f) (r).cl93n72_ut_ctl0_gen2[0]=(((r).cl93n72_ut_ctl0_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_CL93N72_UT_CTL0_GEN2r_CL93N72_SW_FRAME_LOCKf_GET(r) ((((r).cl93n72_ut_ctl0_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_CL93N72_UT_CTL0_GEN2r_CL93N72_SW_FRAME_LOCKf_SET(r,f) (r).cl93n72_ut_ctl0_gen2[0]=(((r).cl93n72_ut_ctl0_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_CL93N72_UT_CTL0_GEN2r_CL93N72_SW_RX_TRAINEDf_GET(r) (((r).cl93n72_ut_ctl0_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_CL93N72_UT_CTL0_GEN2r_CL93N72_SW_RX_TRAINEDf_SET(r,f) (r).cl93n72_ut_ctl0_gen2[0]=(((r).cl93n72_ut_ctl0_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access CL93N72_UT_CTL0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_CL93N72_UT_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL93N72_UT_CTL0_GEN2r,(_r._cl93n72_ut_ctl0_gen2))
#define BCMI_TSCF_XGXS_WRITE_CL93N72_UT_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UT_CTL0_GEN2r,(_r._cl93n72_ut_ctl0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_CL93N72_UT_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UT_CTL0_GEN2r,(_r._cl93n72_ut_ctl0_gen2))
#define BCMI_TSCF_XGXS_READLN_CL93N72_UT_CTL0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL93N72_UT_CTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ut_ctl0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_CL93N72_UT_CTL0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UT_CTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ut_ctl0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_CL93N72_UT_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UT_CTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_ut_ctl0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_UT_CTL0_GEN2r BCMI_TSCF_XGXS_CL93N72_UT_CTL0_GEN2r
#define CL93N72_UT_CTL0_GEN2r_SIZE BCMI_TSCF_XGXS_CL93N72_UT_CTL0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_CL93N72_UT_CTL0_GEN2r_t CL93N72_UT_CTL0_GEN2r_t;
#define CL93N72_UT_CTL0_GEN2r_CLR BCMI_TSCF_XGXS_CL93N72_UT_CTL0_GEN2r_CLR
#define CL93N72_UT_CTL0_GEN2r_SET BCMI_TSCF_XGXS_CL93N72_UT_CTL0_GEN2r_SET
#define CL93N72_UT_CTL0_GEN2r_GET BCMI_TSCF_XGXS_CL93N72_UT_CTL0_GEN2r_GET
#define CL93N72_UT_CTL0_GEN2r_CL93N72_SW_REMOTE_RX_READYf_GET BCMI_TSCF_XGXS_CL93N72_UT_CTL0_GEN2r_CL93N72_SW_REMOTE_RX_READYf_GET
#define CL93N72_UT_CTL0_GEN2r_CL93N72_SW_REMOTE_RX_READYf_SET BCMI_TSCF_XGXS_CL93N72_UT_CTL0_GEN2r_CL93N72_SW_REMOTE_RX_READYf_SET
#define CL93N72_UT_CTL0_GEN2r_CL93N72_SW_FRAME_LOCKf_GET BCMI_TSCF_XGXS_CL93N72_UT_CTL0_GEN2r_CL93N72_SW_FRAME_LOCKf_GET
#define CL93N72_UT_CTL0_GEN2r_CL93N72_SW_FRAME_LOCKf_SET BCMI_TSCF_XGXS_CL93N72_UT_CTL0_GEN2r_CL93N72_SW_FRAME_LOCKf_SET
#define CL93N72_UT_CTL0_GEN2r_CL93N72_SW_RX_TRAINEDf_GET BCMI_TSCF_XGXS_CL93N72_UT_CTL0_GEN2r_CL93N72_SW_RX_TRAINEDf_GET
#define CL93N72_UT_CTL0_GEN2r_CL93N72_SW_RX_TRAINEDf_SET BCMI_TSCF_XGXS_CL93N72_UT_CTL0_GEN2r_CL93N72_SW_RX_TRAINEDf_SET
#define READ_CL93N72_UT_CTL0_GEN2r BCMI_TSCF_XGXS_READ_CL93N72_UT_CTL0_GEN2r
#define WRITE_CL93N72_UT_CTL0_GEN2r BCMI_TSCF_XGXS_WRITE_CL93N72_UT_CTL0_GEN2r
#define MODIFY_CL93N72_UT_CTL0_GEN2r BCMI_TSCF_XGXS_MODIFY_CL93N72_UT_CTL0_GEN2r
#define READLN_CL93N72_UT_CTL0_GEN2r BCMI_TSCF_XGXS_READLN_CL93N72_UT_CTL0_GEN2r
#define WRITELN_CL93N72_UT_CTL0_GEN2r BCMI_TSCF_XGXS_WRITELN_CL93N72_UT_CTL0_GEN2r
#define WRITEALL_CL93N72_UT_CTL0_GEN2r BCMI_TSCF_XGXS_WRITEALL_CL93N72_UT_CTL0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_CL93N72_UT_CTL0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  CL93N72_UT_CTL1_GEN2
 * BLOCKS:   CL93N72_USER_TX
 * REGADDR:  0xd093
 * DEVAD:    1
 * DESC:     CL93N72 Control 1 Register
 * RESETVAL: 0x4 (4)
 * ACCESS:   R/W
 * FIELDS:
 *     CL93N72_BRK_RING_OSC PRBS 11 Ring Oscillator control1: No oscillating - low power mode0: Osciallate - normal mode
 *     CL93N72_DIS_MAX_WAIT_TIMER disable max wait timer1 = max wait timer disabled0 = max wait timer enabled
 *     CL93N72_TX_DP_LN_CLK_EN Cl93n72 Tx Datapath lane clock enable0 - disabled1 - enabled
 */
#define BCMI_TSCF_XGXS_CL93N72_UT_CTL1_GEN2r (0x0001d093 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_CL93N72_UT_CTL1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_UT_CTL1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_CL93N72_UT_CTL1_GEN2r_s {
	uint32_t v[1];
	uint32_t cl93n72_ut_ctl1_gen2[1];
	uint32_t _cl93n72_ut_ctl1_gen2;
} BCMI_TSCF_XGXS_CL93N72_UT_CTL1_GEN2r_t;

#define BCMI_TSCF_XGXS_CL93N72_UT_CTL1_GEN2r_CLR(r) (r).cl93n72_ut_ctl1_gen2[0] = 0
#define BCMI_TSCF_XGXS_CL93N72_UT_CTL1_GEN2r_SET(r,d) (r).cl93n72_ut_ctl1_gen2[0] = d
#define BCMI_TSCF_XGXS_CL93N72_UT_CTL1_GEN2r_GET(r) (r).cl93n72_ut_ctl1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_CL93N72_UT_CTL1_GEN2r_CL93N72_TX_DP_LN_CLK_ENf_GET(r) ((((r).cl93n72_ut_ctl1_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_CL93N72_UT_CTL1_GEN2r_CL93N72_TX_DP_LN_CLK_ENf_SET(r,f) (r).cl93n72_ut_ctl1_gen2[0]=(((r).cl93n72_ut_ctl1_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_CL93N72_UT_CTL1_GEN2r_CL93N72_DIS_MAX_WAIT_TIMERf_GET(r) ((((r).cl93n72_ut_ctl1_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_CL93N72_UT_CTL1_GEN2r_CL93N72_DIS_MAX_WAIT_TIMERf_SET(r,f) (r).cl93n72_ut_ctl1_gen2[0]=(((r).cl93n72_ut_ctl1_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_CL93N72_UT_CTL1_GEN2r_CL93N72_BRK_RING_OSCf_GET(r) (((r).cl93n72_ut_ctl1_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_CL93N72_UT_CTL1_GEN2r_CL93N72_BRK_RING_OSCf_SET(r,f) (r).cl93n72_ut_ctl1_gen2[0]=(((r).cl93n72_ut_ctl1_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access CL93N72_UT_CTL1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_CL93N72_UT_CTL1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL93N72_UT_CTL1_GEN2r,(_r._cl93n72_ut_ctl1_gen2))
#define BCMI_TSCF_XGXS_WRITE_CL93N72_UT_CTL1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UT_CTL1_GEN2r,(_r._cl93n72_ut_ctl1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_CL93N72_UT_CTL1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UT_CTL1_GEN2r,(_r._cl93n72_ut_ctl1_gen2))
#define BCMI_TSCF_XGXS_READLN_CL93N72_UT_CTL1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL93N72_UT_CTL1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ut_ctl1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_CL93N72_UT_CTL1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UT_CTL1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ut_ctl1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_CL93N72_UT_CTL1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UT_CTL1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_ut_ctl1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_UT_CTL1_GEN2r BCMI_TSCF_XGXS_CL93N72_UT_CTL1_GEN2r
#define CL93N72_UT_CTL1_GEN2r_SIZE BCMI_TSCF_XGXS_CL93N72_UT_CTL1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_CL93N72_UT_CTL1_GEN2r_t CL93N72_UT_CTL1_GEN2r_t;
#define CL93N72_UT_CTL1_GEN2r_CLR BCMI_TSCF_XGXS_CL93N72_UT_CTL1_GEN2r_CLR
#define CL93N72_UT_CTL1_GEN2r_SET BCMI_TSCF_XGXS_CL93N72_UT_CTL1_GEN2r_SET
#define CL93N72_UT_CTL1_GEN2r_GET BCMI_TSCF_XGXS_CL93N72_UT_CTL1_GEN2r_GET
#define CL93N72_UT_CTL1_GEN2r_CL93N72_TX_DP_LN_CLK_ENf_GET BCMI_TSCF_XGXS_CL93N72_UT_CTL1_GEN2r_CL93N72_TX_DP_LN_CLK_ENf_GET
#define CL93N72_UT_CTL1_GEN2r_CL93N72_TX_DP_LN_CLK_ENf_SET BCMI_TSCF_XGXS_CL93N72_UT_CTL1_GEN2r_CL93N72_TX_DP_LN_CLK_ENf_SET
#define CL93N72_UT_CTL1_GEN2r_CL93N72_DIS_MAX_WAIT_TIMERf_GET BCMI_TSCF_XGXS_CL93N72_UT_CTL1_GEN2r_CL93N72_DIS_MAX_WAIT_TIMERf_GET
#define CL93N72_UT_CTL1_GEN2r_CL93N72_DIS_MAX_WAIT_TIMERf_SET BCMI_TSCF_XGXS_CL93N72_UT_CTL1_GEN2r_CL93N72_DIS_MAX_WAIT_TIMERf_SET
#define CL93N72_UT_CTL1_GEN2r_CL93N72_BRK_RING_OSCf_GET BCMI_TSCF_XGXS_CL93N72_UT_CTL1_GEN2r_CL93N72_BRK_RING_OSCf_GET
#define CL93N72_UT_CTL1_GEN2r_CL93N72_BRK_RING_OSCf_SET BCMI_TSCF_XGXS_CL93N72_UT_CTL1_GEN2r_CL93N72_BRK_RING_OSCf_SET
#define READ_CL93N72_UT_CTL1_GEN2r BCMI_TSCF_XGXS_READ_CL93N72_UT_CTL1_GEN2r
#define WRITE_CL93N72_UT_CTL1_GEN2r BCMI_TSCF_XGXS_WRITE_CL93N72_UT_CTL1_GEN2r
#define MODIFY_CL93N72_UT_CTL1_GEN2r BCMI_TSCF_XGXS_MODIFY_CL93N72_UT_CTL1_GEN2r
#define READLN_CL93N72_UT_CTL1_GEN2r BCMI_TSCF_XGXS_READLN_CL93N72_UT_CTL1_GEN2r
#define WRITELN_CL93N72_UT_CTL1_GEN2r BCMI_TSCF_XGXS_WRITELN_CL93N72_UT_CTL1_GEN2r
#define WRITEALL_CL93N72_UT_CTL1_GEN2r BCMI_TSCF_XGXS_WRITEALL_CL93N72_UT_CTL1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_CL93N72_UT_CTL1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  CL93N72_UT_CTL2_GEN2
 * BLOCKS:   CL93N72_USER_TX
 * REGADDR:  0xd094
 * DEVAD:    1
 * DESC:     CL93N72 Control 2 Register
 * RESETVAL: 0x500 (1280)
 * ACCESS:   R/W
 * FIELDS:
 *     CL93N72_TXFIR_PRE pre cursor tap coeeficient value.
 *     CL93N72_TXFIR_POST post cursor tap coeeficient value.
 */
#define BCMI_TSCF_XGXS_CL93N72_UT_CTL2_GEN2r (0x0001d094 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_CL93N72_UT_CTL2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_UT_CTL2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_CL93N72_UT_CTL2_GEN2r_s {
	uint32_t v[1];
	uint32_t cl93n72_ut_ctl2_gen2[1];
	uint32_t _cl93n72_ut_ctl2_gen2;
} BCMI_TSCF_XGXS_CL93N72_UT_CTL2_GEN2r_t;

#define BCMI_TSCF_XGXS_CL93N72_UT_CTL2_GEN2r_CLR(r) (r).cl93n72_ut_ctl2_gen2[0] = 0
#define BCMI_TSCF_XGXS_CL93N72_UT_CTL2_GEN2r_SET(r,d) (r).cl93n72_ut_ctl2_gen2[0] = d
#define BCMI_TSCF_XGXS_CL93N72_UT_CTL2_GEN2r_GET(r) (r).cl93n72_ut_ctl2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_CL93N72_UT_CTL2_GEN2r_CL93N72_TXFIR_POSTf_GET(r) ((((r).cl93n72_ut_ctl2_gen2[0]) >> 8) & 0x3f)
#define BCMI_TSCF_XGXS_CL93N72_UT_CTL2_GEN2r_CL93N72_TXFIR_POSTf_SET(r,f) (r).cl93n72_ut_ctl2_gen2[0]=(((r).cl93n72_ut_ctl2_gen2[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8)) | (63 << (16 + 8))
#define BCMI_TSCF_XGXS_CL93N72_UT_CTL2_GEN2r_CL93N72_TXFIR_PREf_GET(r) (((r).cl93n72_ut_ctl2_gen2[0]) & 0x1f)
#define BCMI_TSCF_XGXS_CL93N72_UT_CTL2_GEN2r_CL93N72_TXFIR_PREf_SET(r,f) (r).cl93n72_ut_ctl2_gen2[0]=(((r).cl93n72_ut_ctl2_gen2[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access CL93N72_UT_CTL2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_CL93N72_UT_CTL2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL93N72_UT_CTL2_GEN2r,(_r._cl93n72_ut_ctl2_gen2))
#define BCMI_TSCF_XGXS_WRITE_CL93N72_UT_CTL2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UT_CTL2_GEN2r,(_r._cl93n72_ut_ctl2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_CL93N72_UT_CTL2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UT_CTL2_GEN2r,(_r._cl93n72_ut_ctl2_gen2))
#define BCMI_TSCF_XGXS_READLN_CL93N72_UT_CTL2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL93N72_UT_CTL2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ut_ctl2_gen2))
#define BCMI_TSCF_XGXS_WRITELN_CL93N72_UT_CTL2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UT_CTL2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ut_ctl2_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_CL93N72_UT_CTL2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UT_CTL2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_ut_ctl2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_UT_CTL2_GEN2r BCMI_TSCF_XGXS_CL93N72_UT_CTL2_GEN2r
#define CL93N72_UT_CTL2_GEN2r_SIZE BCMI_TSCF_XGXS_CL93N72_UT_CTL2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_CL93N72_UT_CTL2_GEN2r_t CL93N72_UT_CTL2_GEN2r_t;
#define CL93N72_UT_CTL2_GEN2r_CLR BCMI_TSCF_XGXS_CL93N72_UT_CTL2_GEN2r_CLR
#define CL93N72_UT_CTL2_GEN2r_SET BCMI_TSCF_XGXS_CL93N72_UT_CTL2_GEN2r_SET
#define CL93N72_UT_CTL2_GEN2r_GET BCMI_TSCF_XGXS_CL93N72_UT_CTL2_GEN2r_GET
#define CL93N72_UT_CTL2_GEN2r_CL93N72_TXFIR_POSTf_GET BCMI_TSCF_XGXS_CL93N72_UT_CTL2_GEN2r_CL93N72_TXFIR_POSTf_GET
#define CL93N72_UT_CTL2_GEN2r_CL93N72_TXFIR_POSTf_SET BCMI_TSCF_XGXS_CL93N72_UT_CTL2_GEN2r_CL93N72_TXFIR_POSTf_SET
#define CL93N72_UT_CTL2_GEN2r_CL93N72_TXFIR_PREf_GET BCMI_TSCF_XGXS_CL93N72_UT_CTL2_GEN2r_CL93N72_TXFIR_PREf_GET
#define CL93N72_UT_CTL2_GEN2r_CL93N72_TXFIR_PREf_SET BCMI_TSCF_XGXS_CL93N72_UT_CTL2_GEN2r_CL93N72_TXFIR_PREf_SET
#define READ_CL93N72_UT_CTL2_GEN2r BCMI_TSCF_XGXS_READ_CL93N72_UT_CTL2_GEN2r
#define WRITE_CL93N72_UT_CTL2_GEN2r BCMI_TSCF_XGXS_WRITE_CL93N72_UT_CTL2_GEN2r
#define MODIFY_CL93N72_UT_CTL2_GEN2r BCMI_TSCF_XGXS_MODIFY_CL93N72_UT_CTL2_GEN2r
#define READLN_CL93N72_UT_CTL2_GEN2r BCMI_TSCF_XGXS_READLN_CL93N72_UT_CTL2_GEN2r
#define WRITELN_CL93N72_UT_CTL2_GEN2r BCMI_TSCF_XGXS_WRITELN_CL93N72_UT_CTL2_GEN2r
#define WRITEALL_CL93N72_UT_CTL2_GEN2r BCMI_TSCF_XGXS_WRITEALL_CL93N72_UT_CTL2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_CL93N72_UT_CTL2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  CL93N72_UT_CTL3_GEN2
 * BLOCKS:   CL93N72_USER_TX
 * REGADDR:  0xd095
 * DEVAD:    1
 * DESC:     CL93N72 Control 3 Register
 * RESETVAL: 0x2b (43)
 * ACCESS:   R/W
 * FIELDS:
 *     CL93N72_TXFIR_MAIN main cursor tap coeeficient value.
 */
#define BCMI_TSCF_XGXS_CL93N72_UT_CTL3_GEN2r (0x0001d095 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_CL93N72_UT_CTL3_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_UT_CTL3_GEN2.
 */
typedef union BCMI_TSCF_XGXS_CL93N72_UT_CTL3_GEN2r_s {
	uint32_t v[1];
	uint32_t cl93n72_ut_ctl3_gen2[1];
	uint32_t _cl93n72_ut_ctl3_gen2;
} BCMI_TSCF_XGXS_CL93N72_UT_CTL3_GEN2r_t;

#define BCMI_TSCF_XGXS_CL93N72_UT_CTL3_GEN2r_CLR(r) (r).cl93n72_ut_ctl3_gen2[0] = 0
#define BCMI_TSCF_XGXS_CL93N72_UT_CTL3_GEN2r_SET(r,d) (r).cl93n72_ut_ctl3_gen2[0] = d
#define BCMI_TSCF_XGXS_CL93N72_UT_CTL3_GEN2r_GET(r) (r).cl93n72_ut_ctl3_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_CL93N72_UT_CTL3_GEN2r_CL93N72_TXFIR_MAINf_GET(r) (((r).cl93n72_ut_ctl3_gen2[0]) & 0x7f)
#define BCMI_TSCF_XGXS_CL93N72_UT_CTL3_GEN2r_CL93N72_TXFIR_MAINf_SET(r,f) (r).cl93n72_ut_ctl3_gen2[0]=(((r).cl93n72_ut_ctl3_gen2[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f)) | (0x7f << 16)

/*
 * These macros can be used to access CL93N72_UT_CTL3_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_CL93N72_UT_CTL3_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL93N72_UT_CTL3_GEN2r,(_r._cl93n72_ut_ctl3_gen2))
#define BCMI_TSCF_XGXS_WRITE_CL93N72_UT_CTL3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UT_CTL3_GEN2r,(_r._cl93n72_ut_ctl3_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_CL93N72_UT_CTL3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UT_CTL3_GEN2r,(_r._cl93n72_ut_ctl3_gen2))
#define BCMI_TSCF_XGXS_READLN_CL93N72_UT_CTL3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL93N72_UT_CTL3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ut_ctl3_gen2))
#define BCMI_TSCF_XGXS_WRITELN_CL93N72_UT_CTL3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UT_CTL3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ut_ctl3_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_CL93N72_UT_CTL3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UT_CTL3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_ut_ctl3_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_UT_CTL3_GEN2r BCMI_TSCF_XGXS_CL93N72_UT_CTL3_GEN2r
#define CL93N72_UT_CTL3_GEN2r_SIZE BCMI_TSCF_XGXS_CL93N72_UT_CTL3_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_CL93N72_UT_CTL3_GEN2r_t CL93N72_UT_CTL3_GEN2r_t;
#define CL93N72_UT_CTL3_GEN2r_CLR BCMI_TSCF_XGXS_CL93N72_UT_CTL3_GEN2r_CLR
#define CL93N72_UT_CTL3_GEN2r_SET BCMI_TSCF_XGXS_CL93N72_UT_CTL3_GEN2r_SET
#define CL93N72_UT_CTL3_GEN2r_GET BCMI_TSCF_XGXS_CL93N72_UT_CTL3_GEN2r_GET
#define CL93N72_UT_CTL3_GEN2r_CL93N72_TXFIR_MAINf_GET BCMI_TSCF_XGXS_CL93N72_UT_CTL3_GEN2r_CL93N72_TXFIR_MAINf_GET
#define CL93N72_UT_CTL3_GEN2r_CL93N72_TXFIR_MAINf_SET BCMI_TSCF_XGXS_CL93N72_UT_CTL3_GEN2r_CL93N72_TXFIR_MAINf_SET
#define READ_CL93N72_UT_CTL3_GEN2r BCMI_TSCF_XGXS_READ_CL93N72_UT_CTL3_GEN2r
#define WRITE_CL93N72_UT_CTL3_GEN2r BCMI_TSCF_XGXS_WRITE_CL93N72_UT_CTL3_GEN2r
#define MODIFY_CL93N72_UT_CTL3_GEN2r BCMI_TSCF_XGXS_MODIFY_CL93N72_UT_CTL3_GEN2r
#define READLN_CL93N72_UT_CTL3_GEN2r BCMI_TSCF_XGXS_READLN_CL93N72_UT_CTL3_GEN2r
#define WRITELN_CL93N72_UT_CTL3_GEN2r BCMI_TSCF_XGXS_WRITELN_CL93N72_UT_CTL3_GEN2r
#define WRITEALL_CL93N72_UT_CTL3_GEN2r BCMI_TSCF_XGXS_WRITEALL_CL93N72_UT_CTL3_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_CL93N72_UT_CTL3_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  CL93N72_UT_STS0_GEN2
 * BLOCKS:   CL93N72_USER_TX
 * REGADDR:  0xd096
 * DEVAD:    1
 * DESC:     CL93N72 Status 0 Register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CL93N72_LOCAL_RX_READY Set to TRUE (1'b1) by the FSM when the remote transmitand local equalizers have been optimized and normal datatransmission may commence; set to FALSE (1'b0) otherwise.
 *     CL93N72_TRAINING_FSM_SIGNAL_DETECT 1 - CL93N72 is in SEND_DATA state0 - CL93N72 is in training state
 */
#define BCMI_TSCF_XGXS_CL93N72_UT_STS0_GEN2r (0x0001d096 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_CL93N72_UT_STS0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_UT_STS0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_CL93N72_UT_STS0_GEN2r_s {
	uint32_t v[1];
	uint32_t cl93n72_ut_sts0_gen2[1];
	uint32_t _cl93n72_ut_sts0_gen2;
} BCMI_TSCF_XGXS_CL93N72_UT_STS0_GEN2r_t;

#define BCMI_TSCF_XGXS_CL93N72_UT_STS0_GEN2r_CLR(r) (r).cl93n72_ut_sts0_gen2[0] = 0
#define BCMI_TSCF_XGXS_CL93N72_UT_STS0_GEN2r_SET(r,d) (r).cl93n72_ut_sts0_gen2[0] = d
#define BCMI_TSCF_XGXS_CL93N72_UT_STS0_GEN2r_GET(r) (r).cl93n72_ut_sts0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_CL93N72_UT_STS0_GEN2r_CL93N72_TRAINING_FSM_SIGNAL_DETECTf_GET(r) ((((r).cl93n72_ut_sts0_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_CL93N72_UT_STS0_GEN2r_CL93N72_TRAINING_FSM_SIGNAL_DETECTf_SET(r,f) (r).cl93n72_ut_sts0_gen2[0]=(((r).cl93n72_ut_sts0_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_CL93N72_UT_STS0_GEN2r_CL93N72_LOCAL_RX_READYf_GET(r) (((r).cl93n72_ut_sts0_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_CL93N72_UT_STS0_GEN2r_CL93N72_LOCAL_RX_READYf_SET(r,f) (r).cl93n72_ut_sts0_gen2[0]=(((r).cl93n72_ut_sts0_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access CL93N72_UT_STS0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_CL93N72_UT_STS0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL93N72_UT_STS0_GEN2r,(_r._cl93n72_ut_sts0_gen2))
#define BCMI_TSCF_XGXS_WRITE_CL93N72_UT_STS0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UT_STS0_GEN2r,(_r._cl93n72_ut_sts0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_CL93N72_UT_STS0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UT_STS0_GEN2r,(_r._cl93n72_ut_sts0_gen2))
#define BCMI_TSCF_XGXS_READLN_CL93N72_UT_STS0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL93N72_UT_STS0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ut_sts0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_CL93N72_UT_STS0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UT_STS0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ut_sts0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_CL93N72_UT_STS0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UT_STS0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_ut_sts0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_UT_STS0_GEN2r BCMI_TSCF_XGXS_CL93N72_UT_STS0_GEN2r
#define CL93N72_UT_STS0_GEN2r_SIZE BCMI_TSCF_XGXS_CL93N72_UT_STS0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_CL93N72_UT_STS0_GEN2r_t CL93N72_UT_STS0_GEN2r_t;
#define CL93N72_UT_STS0_GEN2r_CLR BCMI_TSCF_XGXS_CL93N72_UT_STS0_GEN2r_CLR
#define CL93N72_UT_STS0_GEN2r_SET BCMI_TSCF_XGXS_CL93N72_UT_STS0_GEN2r_SET
#define CL93N72_UT_STS0_GEN2r_GET BCMI_TSCF_XGXS_CL93N72_UT_STS0_GEN2r_GET
#define CL93N72_UT_STS0_GEN2r_CL93N72_TRAINING_FSM_SIGNAL_DETECTf_GET BCMI_TSCF_XGXS_CL93N72_UT_STS0_GEN2r_CL93N72_TRAINING_FSM_SIGNAL_DETECTf_GET
#define CL93N72_UT_STS0_GEN2r_CL93N72_TRAINING_FSM_SIGNAL_DETECTf_SET BCMI_TSCF_XGXS_CL93N72_UT_STS0_GEN2r_CL93N72_TRAINING_FSM_SIGNAL_DETECTf_SET
#define CL93N72_UT_STS0_GEN2r_CL93N72_LOCAL_RX_READYf_GET BCMI_TSCF_XGXS_CL93N72_UT_STS0_GEN2r_CL93N72_LOCAL_RX_READYf_GET
#define CL93N72_UT_STS0_GEN2r_CL93N72_LOCAL_RX_READYf_SET BCMI_TSCF_XGXS_CL93N72_UT_STS0_GEN2r_CL93N72_LOCAL_RX_READYf_SET
#define READ_CL93N72_UT_STS0_GEN2r BCMI_TSCF_XGXS_READ_CL93N72_UT_STS0_GEN2r
#define WRITE_CL93N72_UT_STS0_GEN2r BCMI_TSCF_XGXS_WRITE_CL93N72_UT_STS0_GEN2r
#define MODIFY_CL93N72_UT_STS0_GEN2r BCMI_TSCF_XGXS_MODIFY_CL93N72_UT_STS0_GEN2r
#define READLN_CL93N72_UT_STS0_GEN2r BCMI_TSCF_XGXS_READLN_CL93N72_UT_STS0_GEN2r
#define WRITELN_CL93N72_UT_STS0_GEN2r BCMI_TSCF_XGXS_WRITELN_CL93N72_UT_STS0_GEN2r
#define WRITEALL_CL93N72_UT_STS0_GEN2r BCMI_TSCF_XGXS_WRITEALL_CL93N72_UT_STS0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_CL93N72_UT_STS0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  CL93N72_UT_CTL4_GEN2
 * BLOCKS:   CL93N72_USER_TX
 * REGADDR:  0xd097
 * DEVAD:    1
 * DESC:     CL93N72 Control 4 Register
 * RESETVAL: 0x23f5 (9205)
 * ACCESS:   R/W
 * FIELDS:
 *     CL93N72_PRBS_SEED_VAL prbs seed valueThese bits can be used to specify the cl72/cl93 prbs seed valuesPLEASE NOTE: The default value of these register bits for each lane is unique. The IEEE P802.3bj/D2.1defines the following default seed values for each lane:Lane 0 - 11'h3F5Lane 1 - 11'h513Lane 2 - 11'h5A7Lane 3 - 11'h36F
 *     CL93N72_CL93PRBS_POLY_SEL cl93 mode prbs polynomial selectThese bits are used to select the following prbs polynomials when prbs_mode_sel field is set to 1'b1:2'b00: 1 + x5 + x6 + x10 + x112'b01: 1 + x5 + x6 + x9  + x112'b10: 1 + x4 + x6 + x8  + x112'b11: 1 + x4 + x6 + x7  + x11PLEASE NOTE:The default value of these register bits for each lane is unique. The IEEE P802.3bj/D2.1defines the following default seed values for each lane:Lane 0 - 2'b00Lane 1 - 2'b01Lane 2 - 2'b10Lane 3 - 2'b11
 *     CL93N72_PRBS_MODE_SEL This field is used to select prbs mode0 - cl72 mode. Uses 1 + x9  + x11 prbs polynomial1 - cl93 mode. The prbs polynomial is specified by the  cl93n72_cl93prbs_poly_sel field
 *     CL93N72_PRBS_SEED_SEL These bits used to select the seed for prbs generator during the training sequence:2'b00 - cl72 mode - random seed every frame, cl93 mode - seed specified by the cl93n72_prbs_seed_val field2'b01 - random seed every frame2'b10 - random seed first frame only and then same seed every frame2'b11 - seed specified by the prbs_seed_val field
 */
#define BCMI_TSCF_XGXS_CL93N72_UT_CTL4_GEN2r (0x0001d097 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_CL93N72_UT_CTL4_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program CL93N72_UT_CTL4_GEN2.
 */
typedef union BCMI_TSCF_XGXS_CL93N72_UT_CTL4_GEN2r_s {
	uint32_t v[1];
	uint32_t cl93n72_ut_ctl4_gen2[1];
	uint32_t _cl93n72_ut_ctl4_gen2;
} BCMI_TSCF_XGXS_CL93N72_UT_CTL4_GEN2r_t;

#define BCMI_TSCF_XGXS_CL93N72_UT_CTL4_GEN2r_CLR(r) (r).cl93n72_ut_ctl4_gen2[0] = 0
#define BCMI_TSCF_XGXS_CL93N72_UT_CTL4_GEN2r_SET(r,d) (r).cl93n72_ut_ctl4_gen2[0] = d
#define BCMI_TSCF_XGXS_CL93N72_UT_CTL4_GEN2r_GET(r) (r).cl93n72_ut_ctl4_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_CL93N72_UT_CTL4_GEN2r_CL93N72_PRBS_SEED_SELf_GET(r) ((((r).cl93n72_ut_ctl4_gen2[0]) >> 14) & 0x3)
#define BCMI_TSCF_XGXS_CL93N72_UT_CTL4_GEN2r_CL93N72_PRBS_SEED_SELf_SET(r,f) (r).cl93n72_ut_ctl4_gen2[0]=(((r).cl93n72_ut_ctl4_gen2[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_TSCF_XGXS_CL93N72_UT_CTL4_GEN2r_CL93N72_PRBS_MODE_SELf_GET(r) ((((r).cl93n72_ut_ctl4_gen2[0]) >> 13) & 0x1)
#define BCMI_TSCF_XGXS_CL93N72_UT_CTL4_GEN2r_CL93N72_PRBS_MODE_SELf_SET(r,f) (r).cl93n72_ut_ctl4_gen2[0]=(((r).cl93n72_ut_ctl4_gen2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_XGXS_CL93N72_UT_CTL4_GEN2r_CL93N72_CL93PRBS_POLY_SELf_GET(r) ((((r).cl93n72_ut_ctl4_gen2[0]) >> 11) & 0x3)
#define BCMI_TSCF_XGXS_CL93N72_UT_CTL4_GEN2r_CL93N72_CL93PRBS_POLY_SELf_SET(r,f) (r).cl93n72_ut_ctl4_gen2[0]=(((r).cl93n72_ut_ctl4_gen2[0] & ~((uint32_t)0x3 << 11)) | ((((uint32_t)f) & 0x3) << 11)) | (3 << (16 + 11))
#define BCMI_TSCF_XGXS_CL93N72_UT_CTL4_GEN2r_CL93N72_PRBS_SEED_VALf_GET(r) (((r).cl93n72_ut_ctl4_gen2[0]) & 0x7ff)
#define BCMI_TSCF_XGXS_CL93N72_UT_CTL4_GEN2r_CL93N72_PRBS_SEED_VALf_SET(r,f) (r).cl93n72_ut_ctl4_gen2[0]=(((r).cl93n72_ut_ctl4_gen2[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff)) | (0x7ff << 16)

/*
 * These macros can be used to access CL93N72_UT_CTL4_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_CL93N72_UT_CTL4_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL93N72_UT_CTL4_GEN2r,(_r._cl93n72_ut_ctl4_gen2))
#define BCMI_TSCF_XGXS_WRITE_CL93N72_UT_CTL4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UT_CTL4_GEN2r,(_r._cl93n72_ut_ctl4_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_CL93N72_UT_CTL4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UT_CTL4_GEN2r,(_r._cl93n72_ut_ctl4_gen2))
#define BCMI_TSCF_XGXS_READLN_CL93N72_UT_CTL4_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CL93N72_UT_CTL4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ut_ctl4_gen2))
#define BCMI_TSCF_XGXS_WRITELN_CL93N72_UT_CTL4_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UT_CTL4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._cl93n72_ut_ctl4_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_CL93N72_UT_CTL4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CL93N72_UT_CTL4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._cl93n72_ut_ctl4_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define CL93N72_UT_CTL4_GEN2r BCMI_TSCF_XGXS_CL93N72_UT_CTL4_GEN2r
#define CL93N72_UT_CTL4_GEN2r_SIZE BCMI_TSCF_XGXS_CL93N72_UT_CTL4_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_CL93N72_UT_CTL4_GEN2r_t CL93N72_UT_CTL4_GEN2r_t;
#define CL93N72_UT_CTL4_GEN2r_CLR BCMI_TSCF_XGXS_CL93N72_UT_CTL4_GEN2r_CLR
#define CL93N72_UT_CTL4_GEN2r_SET BCMI_TSCF_XGXS_CL93N72_UT_CTL4_GEN2r_SET
#define CL93N72_UT_CTL4_GEN2r_GET BCMI_TSCF_XGXS_CL93N72_UT_CTL4_GEN2r_GET
#define CL93N72_UT_CTL4_GEN2r_CL93N72_PRBS_SEED_SELf_GET BCMI_TSCF_XGXS_CL93N72_UT_CTL4_GEN2r_CL93N72_PRBS_SEED_SELf_GET
#define CL93N72_UT_CTL4_GEN2r_CL93N72_PRBS_SEED_SELf_SET BCMI_TSCF_XGXS_CL93N72_UT_CTL4_GEN2r_CL93N72_PRBS_SEED_SELf_SET
#define CL93N72_UT_CTL4_GEN2r_CL93N72_PRBS_MODE_SELf_GET BCMI_TSCF_XGXS_CL93N72_UT_CTL4_GEN2r_CL93N72_PRBS_MODE_SELf_GET
#define CL93N72_UT_CTL4_GEN2r_CL93N72_PRBS_MODE_SELf_SET BCMI_TSCF_XGXS_CL93N72_UT_CTL4_GEN2r_CL93N72_PRBS_MODE_SELf_SET
#define CL93N72_UT_CTL4_GEN2r_CL93N72_CL93PRBS_POLY_SELf_GET BCMI_TSCF_XGXS_CL93N72_UT_CTL4_GEN2r_CL93N72_CL93PRBS_POLY_SELf_GET
#define CL93N72_UT_CTL4_GEN2r_CL93N72_CL93PRBS_POLY_SELf_SET BCMI_TSCF_XGXS_CL93N72_UT_CTL4_GEN2r_CL93N72_CL93PRBS_POLY_SELf_SET
#define CL93N72_UT_CTL4_GEN2r_CL93N72_PRBS_SEED_VALf_GET BCMI_TSCF_XGXS_CL93N72_UT_CTL4_GEN2r_CL93N72_PRBS_SEED_VALf_GET
#define CL93N72_UT_CTL4_GEN2r_CL93N72_PRBS_SEED_VALf_SET BCMI_TSCF_XGXS_CL93N72_UT_CTL4_GEN2r_CL93N72_PRBS_SEED_VALf_SET
#define READ_CL93N72_UT_CTL4_GEN2r BCMI_TSCF_XGXS_READ_CL93N72_UT_CTL4_GEN2r
#define WRITE_CL93N72_UT_CTL4_GEN2r BCMI_TSCF_XGXS_WRITE_CL93N72_UT_CTL4_GEN2r
#define MODIFY_CL93N72_UT_CTL4_GEN2r BCMI_TSCF_XGXS_MODIFY_CL93N72_UT_CTL4_GEN2r
#define READLN_CL93N72_UT_CTL4_GEN2r BCMI_TSCF_XGXS_READLN_CL93N72_UT_CTL4_GEN2r
#define WRITELN_CL93N72_UT_CTL4_GEN2r BCMI_TSCF_XGXS_WRITELN_CL93N72_UT_CTL4_GEN2r
#define WRITEALL_CL93N72_UT_CTL4_GEN2r BCMI_TSCF_XGXS_WRITEALL_CL93N72_UT_CTL4_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_CL93N72_UT_CTL4_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TX_PI_PMD_CTL_0_GEN2
 * BLOCKS:   TX_PI_PMD_COM
 * REGADDR:  0xd0a0
 * DEVAD:    1
 * DESC:     TX Phase Interpolator Control 0
 * RESETVAL: 0x7000 (28672)
 * ACCESS:   R/W
 * FIELDS:
 *     TX_PI_EN         Transmit Phase Interpolator Enable. If 1'b0 will gate off the TX PI clock and also freeze the PI code.
 *     TX_PI_JITTER_FILTER_EN This enables the IIR filter for the phase_sum_val logic from the CDR ( or external CDR in case of Repeater ) .
 *     TX_PI_EXT_CTRL_EN Enable for the phase error (inc/dec) from the remote loopback ( or HS Phase FIFO in case of Repeater )
 *     TX_PI_FREQ_OVERRIDE_EN Enable for the frequency override mode. It should be 1'b1 for fixed frequency and jitter generation modes.
 *     TX_PI_SJ_GEN_EN  Sinusoidal Jitter (SJ) Enable. This has priority over tx_pi_ssc_gen_en if both are enabled simultaneously.
 *     TX_PI_SSC_GEN_EN Spread Spectrum Jitter (SSC) Enable. This has priority over tx_pi_ssc_gen_en if both are enabled simultaneously.
 *     TX_PI_JIT_SSC_FREQ_MODE SSJ Mode Select:1'b1 : 10G SSC mode and 1'b0: 6G SSC mode
 *     TX_PI_SECOND_ORDER_LOOP_EN 2nd Order Loop Enable. 1'b1 will enable the 2nd order loop of the IIR filter. 1'b0 will reset the all the flops related to the 2nd order loop.This bit is only valid when tx_pi_jitter_filter_en is set to 1'b1.
 *     TX_PI_FIRST_ORDER_BWSEL_INTEG First order bandwidth control.2'd0 -  80 KHz2'd1 - 160 KHz2'd2 - 321 KHz2'd3 - 642 KHz
 *     TX_PI_SECOND_ORDER_BWSEL_INTEG Second order bandwidth control. Valid values are 0, 1, 2 and 3.
 *     TX_PI_EXT_PHASE_BWSEL_INTEG External Phase bandwidth control. Valid values are 0 to 7.
 */
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r (0x0001d0a0 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TX_PI_PMD_CTL_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_s {
	uint32_t v[1];
	uint32_t tx_pi_pmd_ctl_0_gen2[1];
	uint32_t _tx_pi_pmd_ctl_0_gen2;
} BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_t;

#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_CLR(r) (r).tx_pi_pmd_ctl_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_SET(r,d) (r).tx_pi_pmd_ctl_0_gen2[0] = d
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_GET(r) (r).tx_pi_pmd_ctl_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_TX_PI_EXT_PHASE_BWSEL_INTEGf_GET(r) ((((r).tx_pi_pmd_ctl_0_gen2[0]) >> 12) & 0x7)
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_TX_PI_EXT_PHASE_BWSEL_INTEGf_SET(r,f) (r).tx_pi_pmd_ctl_0_gen2[0]=(((r).tx_pi_pmd_ctl_0_gen2[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12)) | (7 << (16 + 12))
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_TX_PI_SECOND_ORDER_BWSEL_INTEGf_GET(r) ((((r).tx_pi_pmd_ctl_0_gen2[0]) >> 10) & 0x3)
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_TX_PI_SECOND_ORDER_BWSEL_INTEGf_SET(r,f) (r).tx_pi_pmd_ctl_0_gen2[0]=(((r).tx_pi_pmd_ctl_0_gen2[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10)) | (3 << (16 + 10))
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_TX_PI_FIRST_ORDER_BWSEL_INTEGf_GET(r) ((((r).tx_pi_pmd_ctl_0_gen2[0]) >> 8) & 0x3)
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_TX_PI_FIRST_ORDER_BWSEL_INTEGf_SET(r,f) (r).tx_pi_pmd_ctl_0_gen2[0]=(((r).tx_pi_pmd_ctl_0_gen2[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_TX_PI_SECOND_ORDER_LOOP_ENf_GET(r) ((((r).tx_pi_pmd_ctl_0_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_TX_PI_SECOND_ORDER_LOOP_ENf_SET(r,f) (r).tx_pi_pmd_ctl_0_gen2[0]=(((r).tx_pi_pmd_ctl_0_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_TX_PI_JIT_SSC_FREQ_MODEf_GET(r) ((((r).tx_pi_pmd_ctl_0_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_TX_PI_JIT_SSC_FREQ_MODEf_SET(r,f) (r).tx_pi_pmd_ctl_0_gen2[0]=(((r).tx_pi_pmd_ctl_0_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_TX_PI_SSC_GEN_ENf_GET(r) ((((r).tx_pi_pmd_ctl_0_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_TX_PI_SSC_GEN_ENf_SET(r,f) (r).tx_pi_pmd_ctl_0_gen2[0]=(((r).tx_pi_pmd_ctl_0_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_TX_PI_SJ_GEN_ENf_GET(r) ((((r).tx_pi_pmd_ctl_0_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_TX_PI_SJ_GEN_ENf_SET(r,f) (r).tx_pi_pmd_ctl_0_gen2[0]=(((r).tx_pi_pmd_ctl_0_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_TX_PI_FREQ_OVERRIDE_ENf_GET(r) ((((r).tx_pi_pmd_ctl_0_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_TX_PI_FREQ_OVERRIDE_ENf_SET(r,f) (r).tx_pi_pmd_ctl_0_gen2[0]=(((r).tx_pi_pmd_ctl_0_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_TX_PI_EXT_CTRL_ENf_GET(r) ((((r).tx_pi_pmd_ctl_0_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_TX_PI_EXT_CTRL_ENf_SET(r,f) (r).tx_pi_pmd_ctl_0_gen2[0]=(((r).tx_pi_pmd_ctl_0_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_TX_PI_JITTER_FILTER_ENf_GET(r) ((((r).tx_pi_pmd_ctl_0_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_TX_PI_JITTER_FILTER_ENf_SET(r,f) (r).tx_pi_pmd_ctl_0_gen2[0]=(((r).tx_pi_pmd_ctl_0_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_TX_PI_ENf_GET(r) (((r).tx_pi_pmd_ctl_0_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_TX_PI_ENf_SET(r,f) (r).tx_pi_pmd_ctl_0_gen2[0]=(((r).tx_pi_pmd_ctl_0_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TX_PI_PMD_CTL_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TX_PI_PMD_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r,(_r._tx_pi_pmd_ctl_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_TX_PI_PMD_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r,(_r._tx_pi_pmd_ctl_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TX_PI_PMD_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r,(_r._tx_pi_pmd_ctl_0_gen2))
#define BCMI_TSCF_XGXS_READLN_TX_PI_PMD_CTL_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_pmd_ctl_0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TX_PI_PMD_CTL_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_pmd_ctl_0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TX_PI_PMD_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_pi_pmd_ctl_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TX_PI_PMD_CTL_0_GEN2r BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r
#define TX_PI_PMD_CTL_0_GEN2r_SIZE BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_t TX_PI_PMD_CTL_0_GEN2r_t;
#define TX_PI_PMD_CTL_0_GEN2r_CLR BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_CLR
#define TX_PI_PMD_CTL_0_GEN2r_SET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_SET
#define TX_PI_PMD_CTL_0_GEN2r_GET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_GET
#define TX_PI_PMD_CTL_0_GEN2r_TX_PI_EXT_PHASE_BWSEL_INTEGf_GET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_TX_PI_EXT_PHASE_BWSEL_INTEGf_GET
#define TX_PI_PMD_CTL_0_GEN2r_TX_PI_EXT_PHASE_BWSEL_INTEGf_SET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_TX_PI_EXT_PHASE_BWSEL_INTEGf_SET
#define TX_PI_PMD_CTL_0_GEN2r_TX_PI_SECOND_ORDER_BWSEL_INTEGf_GET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_TX_PI_SECOND_ORDER_BWSEL_INTEGf_GET
#define TX_PI_PMD_CTL_0_GEN2r_TX_PI_SECOND_ORDER_BWSEL_INTEGf_SET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_TX_PI_SECOND_ORDER_BWSEL_INTEGf_SET
#define TX_PI_PMD_CTL_0_GEN2r_TX_PI_FIRST_ORDER_BWSEL_INTEGf_GET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_TX_PI_FIRST_ORDER_BWSEL_INTEGf_GET
#define TX_PI_PMD_CTL_0_GEN2r_TX_PI_FIRST_ORDER_BWSEL_INTEGf_SET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_TX_PI_FIRST_ORDER_BWSEL_INTEGf_SET
#define TX_PI_PMD_CTL_0_GEN2r_TX_PI_SECOND_ORDER_LOOP_ENf_GET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_TX_PI_SECOND_ORDER_LOOP_ENf_GET
#define TX_PI_PMD_CTL_0_GEN2r_TX_PI_SECOND_ORDER_LOOP_ENf_SET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_TX_PI_SECOND_ORDER_LOOP_ENf_SET
#define TX_PI_PMD_CTL_0_GEN2r_TX_PI_JIT_SSC_FREQ_MODEf_GET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_TX_PI_JIT_SSC_FREQ_MODEf_GET
#define TX_PI_PMD_CTL_0_GEN2r_TX_PI_JIT_SSC_FREQ_MODEf_SET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_TX_PI_JIT_SSC_FREQ_MODEf_SET
#define TX_PI_PMD_CTL_0_GEN2r_TX_PI_SSC_GEN_ENf_GET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_TX_PI_SSC_GEN_ENf_GET
#define TX_PI_PMD_CTL_0_GEN2r_TX_PI_SSC_GEN_ENf_SET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_TX_PI_SSC_GEN_ENf_SET
#define TX_PI_PMD_CTL_0_GEN2r_TX_PI_SJ_GEN_ENf_GET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_TX_PI_SJ_GEN_ENf_GET
#define TX_PI_PMD_CTL_0_GEN2r_TX_PI_SJ_GEN_ENf_SET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_TX_PI_SJ_GEN_ENf_SET
#define TX_PI_PMD_CTL_0_GEN2r_TX_PI_FREQ_OVERRIDE_ENf_GET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_TX_PI_FREQ_OVERRIDE_ENf_GET
#define TX_PI_PMD_CTL_0_GEN2r_TX_PI_FREQ_OVERRIDE_ENf_SET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_TX_PI_FREQ_OVERRIDE_ENf_SET
#define TX_PI_PMD_CTL_0_GEN2r_TX_PI_EXT_CTRL_ENf_GET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_TX_PI_EXT_CTRL_ENf_GET
#define TX_PI_PMD_CTL_0_GEN2r_TX_PI_EXT_CTRL_ENf_SET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_TX_PI_EXT_CTRL_ENf_SET
#define TX_PI_PMD_CTL_0_GEN2r_TX_PI_JITTER_FILTER_ENf_GET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_TX_PI_JITTER_FILTER_ENf_GET
#define TX_PI_PMD_CTL_0_GEN2r_TX_PI_JITTER_FILTER_ENf_SET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_TX_PI_JITTER_FILTER_ENf_SET
#define TX_PI_PMD_CTL_0_GEN2r_TX_PI_ENf_GET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_TX_PI_ENf_GET
#define TX_PI_PMD_CTL_0_GEN2r_TX_PI_ENf_SET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r_TX_PI_ENf_SET
#define READ_TX_PI_PMD_CTL_0_GEN2r BCMI_TSCF_XGXS_READ_TX_PI_PMD_CTL_0_GEN2r
#define WRITE_TX_PI_PMD_CTL_0_GEN2r BCMI_TSCF_XGXS_WRITE_TX_PI_PMD_CTL_0_GEN2r
#define MODIFY_TX_PI_PMD_CTL_0_GEN2r BCMI_TSCF_XGXS_MODIFY_TX_PI_PMD_CTL_0_GEN2r
#define READLN_TX_PI_PMD_CTL_0_GEN2r BCMI_TSCF_XGXS_READLN_TX_PI_PMD_CTL_0_GEN2r
#define WRITELN_TX_PI_PMD_CTL_0_GEN2r BCMI_TSCF_XGXS_WRITELN_TX_PI_PMD_CTL_0_GEN2r
#define WRITEALL_TX_PI_PMD_CTL_0_GEN2r BCMI_TSCF_XGXS_WRITEALL_TX_PI_PMD_CTL_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TX_PI_PMD_CTL_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TX_PI_PMD_CTL_1_GEN2
 * BLOCKS:   TX_PI_PMD_COM
 * REGADDR:  0xd0a1
 * DEVAD:    1
 * DESC:     TX Phase Interpolator Control 1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TX_PI_FREQ_OVERRIDE_VAL Fixed Frequncy Override Value: Valid values are -8192 to +8192. Register tx_pi_freq_override_en should be 1'b1 to enable the Fixed Frequncy Override mode.+8192 (-8192) value in this register will result into 1 TX PI phase inc (dec) every 20T tclk. This results into (1/64 * 1/20)UI phase inc (or dec) per UI = 781.25(-781.25) ppm. So 1 ppm = 10.486 value.If tx_pi_jit_gen_en is set to 1'b1 then this register provides initilization value for Jitter Gen Integ Reg. Valid values in jitter generation mode are -8192 to +8191
 */
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_1_GEN2r (0x0001d0a1 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TX_PI_PMD_CTL_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TX_PI_PMD_CTL_1_GEN2r_s {
	uint32_t v[1];
	uint32_t tx_pi_pmd_ctl_1_gen2[1];
	uint32_t _tx_pi_pmd_ctl_1_gen2;
} BCMI_TSCF_XGXS_TX_PI_PMD_CTL_1_GEN2r_t;

#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_1_GEN2r_CLR(r) (r).tx_pi_pmd_ctl_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_1_GEN2r_SET(r,d) (r).tx_pi_pmd_ctl_1_gen2[0] = d
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_1_GEN2r_GET(r) (r).tx_pi_pmd_ctl_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_1_GEN2r_TX_PI_FREQ_OVERRIDE_VALf_GET(r) (((r).tx_pi_pmd_ctl_1_gen2[0]) & 0x7fff)
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_1_GEN2r_TX_PI_FREQ_OVERRIDE_VALf_SET(r,f) (r).tx_pi_pmd_ctl_1_gen2[0]=(((r).tx_pi_pmd_ctl_1_gen2[0] & ~((uint32_t)0x7fff)) | (((uint32_t)f) & 0x7fff)) | (0x7fff << 16)

/*
 * These macros can be used to access TX_PI_PMD_CTL_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TX_PI_PMD_CTL_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_CTL_1_GEN2r,(_r._tx_pi_pmd_ctl_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_TX_PI_PMD_CTL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_CTL_1_GEN2r,(_r._tx_pi_pmd_ctl_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TX_PI_PMD_CTL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_CTL_1_GEN2r,(_r._tx_pi_pmd_ctl_1_gen2))
#define BCMI_TSCF_XGXS_READLN_TX_PI_PMD_CTL_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_CTL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_pmd_ctl_1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TX_PI_PMD_CTL_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_CTL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_pmd_ctl_1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TX_PI_PMD_CTL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_CTL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_pi_pmd_ctl_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TX_PI_PMD_CTL_1_GEN2r BCMI_TSCF_XGXS_TX_PI_PMD_CTL_1_GEN2r
#define TX_PI_PMD_CTL_1_GEN2r_SIZE BCMI_TSCF_XGXS_TX_PI_PMD_CTL_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TX_PI_PMD_CTL_1_GEN2r_t TX_PI_PMD_CTL_1_GEN2r_t;
#define TX_PI_PMD_CTL_1_GEN2r_CLR BCMI_TSCF_XGXS_TX_PI_PMD_CTL_1_GEN2r_CLR
#define TX_PI_PMD_CTL_1_GEN2r_SET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_1_GEN2r_SET
#define TX_PI_PMD_CTL_1_GEN2r_GET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_1_GEN2r_GET
#define TX_PI_PMD_CTL_1_GEN2r_TX_PI_FREQ_OVERRIDE_VALf_GET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_1_GEN2r_TX_PI_FREQ_OVERRIDE_VALf_GET
#define TX_PI_PMD_CTL_1_GEN2r_TX_PI_FREQ_OVERRIDE_VALf_SET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_1_GEN2r_TX_PI_FREQ_OVERRIDE_VALf_SET
#define READ_TX_PI_PMD_CTL_1_GEN2r BCMI_TSCF_XGXS_READ_TX_PI_PMD_CTL_1_GEN2r
#define WRITE_TX_PI_PMD_CTL_1_GEN2r BCMI_TSCF_XGXS_WRITE_TX_PI_PMD_CTL_1_GEN2r
#define MODIFY_TX_PI_PMD_CTL_1_GEN2r BCMI_TSCF_XGXS_MODIFY_TX_PI_PMD_CTL_1_GEN2r
#define READLN_TX_PI_PMD_CTL_1_GEN2r BCMI_TSCF_XGXS_READLN_TX_PI_PMD_CTL_1_GEN2r
#define WRITELN_TX_PI_PMD_CTL_1_GEN2r BCMI_TSCF_XGXS_WRITELN_TX_PI_PMD_CTL_1_GEN2r
#define WRITEALL_TX_PI_PMD_CTL_1_GEN2r BCMI_TSCF_XGXS_WRITEALL_TX_PI_PMD_CTL_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TX_PI_PMD_CTL_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TX_PI_PMD_CTL_2_GEN2
 * BLOCKS:   TX_PI_PMD_COM
 * REGADDR:  0xd0a2
 * DEVAD:    1
 * DESC:     TX Phase Interpolator Control 2
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TX_PI_JIT_FREQ_IDX Jitter Generator Frequency Index. Valid values are from 0 to 63. Each value maps to a table into the spec which then provides various Jitter generator parameters.In SJ  mode: It provides ndiv, Nsj (or Nsj_div_ndiv), sj_gain1 and sj_gain2. Refer Jitter Generator spec for the table details.In SSC mode: It provides Nssc.                                               Refer Jitter Generator spec for the table details.
 *     TX_PI_JIT_AMP    Jitter Generator Amplification Factor. Valid values are 0 to 63.
 */
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_2_GEN2r (0x0001d0a2 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TX_PI_PMD_CTL_2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TX_PI_PMD_CTL_2_GEN2r_s {
	uint32_t v[1];
	uint32_t tx_pi_pmd_ctl_2_gen2[1];
	uint32_t _tx_pi_pmd_ctl_2_gen2;
} BCMI_TSCF_XGXS_TX_PI_PMD_CTL_2_GEN2r_t;

#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_2_GEN2r_CLR(r) (r).tx_pi_pmd_ctl_2_gen2[0] = 0
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_2_GEN2r_SET(r,d) (r).tx_pi_pmd_ctl_2_gen2[0] = d
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_2_GEN2r_GET(r) (r).tx_pi_pmd_ctl_2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_2_GEN2r_TX_PI_JIT_AMPf_GET(r) ((((r).tx_pi_pmd_ctl_2_gen2[0]) >> 8) & 0x3f)
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_2_GEN2r_TX_PI_JIT_AMPf_SET(r,f) (r).tx_pi_pmd_ctl_2_gen2[0]=(((r).tx_pi_pmd_ctl_2_gen2[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8)) | (63 << (16 + 8))
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_2_GEN2r_TX_PI_JIT_FREQ_IDXf_GET(r) (((r).tx_pi_pmd_ctl_2_gen2[0]) & 0x3f)
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_2_GEN2r_TX_PI_JIT_FREQ_IDXf_SET(r,f) (r).tx_pi_pmd_ctl_2_gen2[0]=(((r).tx_pi_pmd_ctl_2_gen2[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access TX_PI_PMD_CTL_2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TX_PI_PMD_CTL_2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_CTL_2_GEN2r,(_r._tx_pi_pmd_ctl_2_gen2))
#define BCMI_TSCF_XGXS_WRITE_TX_PI_PMD_CTL_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_CTL_2_GEN2r,(_r._tx_pi_pmd_ctl_2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TX_PI_PMD_CTL_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_CTL_2_GEN2r,(_r._tx_pi_pmd_ctl_2_gen2))
#define BCMI_TSCF_XGXS_READLN_TX_PI_PMD_CTL_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_CTL_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_pmd_ctl_2_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TX_PI_PMD_CTL_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_CTL_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_pmd_ctl_2_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TX_PI_PMD_CTL_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_CTL_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_pi_pmd_ctl_2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TX_PI_PMD_CTL_2_GEN2r BCMI_TSCF_XGXS_TX_PI_PMD_CTL_2_GEN2r
#define TX_PI_PMD_CTL_2_GEN2r_SIZE BCMI_TSCF_XGXS_TX_PI_PMD_CTL_2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TX_PI_PMD_CTL_2_GEN2r_t TX_PI_PMD_CTL_2_GEN2r_t;
#define TX_PI_PMD_CTL_2_GEN2r_CLR BCMI_TSCF_XGXS_TX_PI_PMD_CTL_2_GEN2r_CLR
#define TX_PI_PMD_CTL_2_GEN2r_SET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_2_GEN2r_SET
#define TX_PI_PMD_CTL_2_GEN2r_GET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_2_GEN2r_GET
#define TX_PI_PMD_CTL_2_GEN2r_TX_PI_JIT_AMPf_GET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_2_GEN2r_TX_PI_JIT_AMPf_GET
#define TX_PI_PMD_CTL_2_GEN2r_TX_PI_JIT_AMPf_SET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_2_GEN2r_TX_PI_JIT_AMPf_SET
#define TX_PI_PMD_CTL_2_GEN2r_TX_PI_JIT_FREQ_IDXf_GET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_2_GEN2r_TX_PI_JIT_FREQ_IDXf_GET
#define TX_PI_PMD_CTL_2_GEN2r_TX_PI_JIT_FREQ_IDXf_SET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_2_GEN2r_TX_PI_JIT_FREQ_IDXf_SET
#define READ_TX_PI_PMD_CTL_2_GEN2r BCMI_TSCF_XGXS_READ_TX_PI_PMD_CTL_2_GEN2r
#define WRITE_TX_PI_PMD_CTL_2_GEN2r BCMI_TSCF_XGXS_WRITE_TX_PI_PMD_CTL_2_GEN2r
#define MODIFY_TX_PI_PMD_CTL_2_GEN2r BCMI_TSCF_XGXS_MODIFY_TX_PI_PMD_CTL_2_GEN2r
#define READLN_TX_PI_PMD_CTL_2_GEN2r BCMI_TSCF_XGXS_READLN_TX_PI_PMD_CTL_2_GEN2r
#define WRITELN_TX_PI_PMD_CTL_2_GEN2r BCMI_TSCF_XGXS_WRITELN_TX_PI_PMD_CTL_2_GEN2r
#define WRITEALL_TX_PI_PMD_CTL_2_GEN2r BCMI_TSCF_XGXS_WRITEALL_TX_PI_PMD_CTL_2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TX_PI_PMD_CTL_2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TX_PI_PMD_CTL_3_GEN2
 * BLOCKS:   TX_PI_PMD_COM
 * REGADDR:  0xd0a3
 * DEVAD:    1
 * DESC:     TX Phase Interpolator Control 3
 * RESETVAL: 0x100 (256)
 * ACCESS:   R/W
 * FIELDS:
 *     TX_PI_PHASE_OVERRIDE Manual Phase Override Mode. When 1'b1 the PI phase can be moved manually using registers. All the filter logic is bypassed during manual mode.
 *     TX_PI_PHASE_STROBE Manual Phase strobe. When set to 1'b1 then it will generate 1 phase step (inc/dec depending on tx_pi_phase_step_dir) or multiple phase steps if tx_pi_phase_step_osr is 1'b1.If tx_pi_phase_override is 1'b0 then manual phase steps will be added with the output of the IIR filter phase steps during the time when there is no phase steps from the IIR filter.Self Clearing Register. Must be polled for 1'b0 before writing it to 1'b1 again for correct Manual Phase Step Shift.
 *     TX_PI_PHASE_STEP_DIR Manual Phase Step direction.1'b0: Increment1'b1: Decrement
 *     TX_PI_PHASE_INVERT 1'b1 : will invert (i.e. swap) the final inc and dec before the PI code shifter logic.
 *     TX_PI_PHASE_STEP_NUM Defines the number of phase steps movement for every manual strobe. Valid values are 1 to 15.
 */
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_3_GEN2r (0x0001d0a3 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_3_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TX_PI_PMD_CTL_3_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TX_PI_PMD_CTL_3_GEN2r_s {
	uint32_t v[1];
	uint32_t tx_pi_pmd_ctl_3_gen2[1];
	uint32_t _tx_pi_pmd_ctl_3_gen2;
} BCMI_TSCF_XGXS_TX_PI_PMD_CTL_3_GEN2r_t;

#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_3_GEN2r_CLR(r) (r).tx_pi_pmd_ctl_3_gen2[0] = 0
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_3_GEN2r_SET(r,d) (r).tx_pi_pmd_ctl_3_gen2[0] = d
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_3_GEN2r_GET(r) (r).tx_pi_pmd_ctl_3_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_3_GEN2r_TX_PI_PHASE_STEP_NUMf_GET(r) ((((r).tx_pi_pmd_ctl_3_gen2[0]) >> 8) & 0xf)
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_3_GEN2r_TX_PI_PHASE_STEP_NUMf_SET(r,f) (r).tx_pi_pmd_ctl_3_gen2[0]=(((r).tx_pi_pmd_ctl_3_gen2[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_3_GEN2r_TX_PI_PHASE_INVERTf_GET(r) ((((r).tx_pi_pmd_ctl_3_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_3_GEN2r_TX_PI_PHASE_INVERTf_SET(r,f) (r).tx_pi_pmd_ctl_3_gen2[0]=(((r).tx_pi_pmd_ctl_3_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_3_GEN2r_TX_PI_PHASE_STEP_DIRf_GET(r) ((((r).tx_pi_pmd_ctl_3_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_3_GEN2r_TX_PI_PHASE_STEP_DIRf_SET(r,f) (r).tx_pi_pmd_ctl_3_gen2[0]=(((r).tx_pi_pmd_ctl_3_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_3_GEN2r_TX_PI_PHASE_STROBEf_GET(r) ((((r).tx_pi_pmd_ctl_3_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_3_GEN2r_TX_PI_PHASE_STROBEf_SET(r,f) (r).tx_pi_pmd_ctl_3_gen2[0]=(((r).tx_pi_pmd_ctl_3_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_3_GEN2r_TX_PI_PHASE_OVERRIDEf_GET(r) (((r).tx_pi_pmd_ctl_3_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_3_GEN2r_TX_PI_PHASE_OVERRIDEf_SET(r,f) (r).tx_pi_pmd_ctl_3_gen2[0]=(((r).tx_pi_pmd_ctl_3_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TX_PI_PMD_CTL_3_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TX_PI_PMD_CTL_3_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_CTL_3_GEN2r,(_r._tx_pi_pmd_ctl_3_gen2))
#define BCMI_TSCF_XGXS_WRITE_TX_PI_PMD_CTL_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_CTL_3_GEN2r,(_r._tx_pi_pmd_ctl_3_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TX_PI_PMD_CTL_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_CTL_3_GEN2r,(_r._tx_pi_pmd_ctl_3_gen2))
#define BCMI_TSCF_XGXS_READLN_TX_PI_PMD_CTL_3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_CTL_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_pmd_ctl_3_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TX_PI_PMD_CTL_3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_CTL_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_pmd_ctl_3_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TX_PI_PMD_CTL_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_CTL_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_pi_pmd_ctl_3_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TX_PI_PMD_CTL_3_GEN2r BCMI_TSCF_XGXS_TX_PI_PMD_CTL_3_GEN2r
#define TX_PI_PMD_CTL_3_GEN2r_SIZE BCMI_TSCF_XGXS_TX_PI_PMD_CTL_3_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TX_PI_PMD_CTL_3_GEN2r_t TX_PI_PMD_CTL_3_GEN2r_t;
#define TX_PI_PMD_CTL_3_GEN2r_CLR BCMI_TSCF_XGXS_TX_PI_PMD_CTL_3_GEN2r_CLR
#define TX_PI_PMD_CTL_3_GEN2r_SET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_3_GEN2r_SET
#define TX_PI_PMD_CTL_3_GEN2r_GET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_3_GEN2r_GET
#define TX_PI_PMD_CTL_3_GEN2r_TX_PI_PHASE_STEP_NUMf_GET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_3_GEN2r_TX_PI_PHASE_STEP_NUMf_GET
#define TX_PI_PMD_CTL_3_GEN2r_TX_PI_PHASE_STEP_NUMf_SET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_3_GEN2r_TX_PI_PHASE_STEP_NUMf_SET
#define TX_PI_PMD_CTL_3_GEN2r_TX_PI_PHASE_INVERTf_GET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_3_GEN2r_TX_PI_PHASE_INVERTf_GET
#define TX_PI_PMD_CTL_3_GEN2r_TX_PI_PHASE_INVERTf_SET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_3_GEN2r_TX_PI_PHASE_INVERTf_SET
#define TX_PI_PMD_CTL_3_GEN2r_TX_PI_PHASE_STEP_DIRf_GET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_3_GEN2r_TX_PI_PHASE_STEP_DIRf_GET
#define TX_PI_PMD_CTL_3_GEN2r_TX_PI_PHASE_STEP_DIRf_SET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_3_GEN2r_TX_PI_PHASE_STEP_DIRf_SET
#define TX_PI_PMD_CTL_3_GEN2r_TX_PI_PHASE_STROBEf_GET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_3_GEN2r_TX_PI_PHASE_STROBEf_GET
#define TX_PI_PMD_CTL_3_GEN2r_TX_PI_PHASE_STROBEf_SET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_3_GEN2r_TX_PI_PHASE_STROBEf_SET
#define TX_PI_PMD_CTL_3_GEN2r_TX_PI_PHASE_OVERRIDEf_GET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_3_GEN2r_TX_PI_PHASE_OVERRIDEf_GET
#define TX_PI_PMD_CTL_3_GEN2r_TX_PI_PHASE_OVERRIDEf_SET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_3_GEN2r_TX_PI_PHASE_OVERRIDEf_SET
#define READ_TX_PI_PMD_CTL_3_GEN2r BCMI_TSCF_XGXS_READ_TX_PI_PMD_CTL_3_GEN2r
#define WRITE_TX_PI_PMD_CTL_3_GEN2r BCMI_TSCF_XGXS_WRITE_TX_PI_PMD_CTL_3_GEN2r
#define MODIFY_TX_PI_PMD_CTL_3_GEN2r BCMI_TSCF_XGXS_MODIFY_TX_PI_PMD_CTL_3_GEN2r
#define READLN_TX_PI_PMD_CTL_3_GEN2r BCMI_TSCF_XGXS_READLN_TX_PI_PMD_CTL_3_GEN2r
#define WRITELN_TX_PI_PMD_CTL_3_GEN2r BCMI_TSCF_XGXS_WRITELN_TX_PI_PMD_CTL_3_GEN2r
#define WRITEALL_TX_PI_PMD_CTL_3_GEN2r BCMI_TSCF_XGXS_WRITEALL_TX_PI_PMD_CTL_3_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TX_PI_PMD_CTL_3_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TX_PI_PMD_CTL_4_GEN2
 * BLOCKS:   TX_PI_PMD_COM
 * REGADDR:  0xd0a4
 * DEVAD:    1
 * DESC:     TX Phase Interpolator Control 4
 * RESETVAL: 0x4 (4)
 * ACCESS:   R/W
 * FIELDS:
 *     TX_PI_FRZ_FRC    IIR filter freeze control by force. 1'b1 will force the freeze value indicated by tx_pi_frz_frc_val otherwise Normal IIR operation.
 *     TX_PI_FRZ_FRC_VAL Force value for the IIR filter freeze. 1'b1 is freeze, 1'b0 is normal IIR operation.
 *     TX_PI_FRZ_MODE   Freeze Mode. 1'b1 will freeze the integ2 reg so that during the freeze, TX PI will generate the phase steps based on the integ2 freeze value.1'b1 will freeze the integ2 reg so that during the freeze, TX PI will generate the phase steps based on the integ2 freeze value.1'b0 will force the phase_sum_val input from the CDR loop timing path of the IIR filter to 0s which will result in slowly bringing the TX clock to 0 ppm from PLL/VCO clock.
 *     TX_PI_RESET_CODE_DBG Debug register.Resets the TX PI code going to AFE. This is just a debug register and is not recommended to be used during normal operation of TX PI.
 *     TX_PI_RMT_LPBK_BYPASS_FLT 1'b1 will enable filter bypass for inc/dec indication from Remote loopback PD to quicker phase locking time. This mode is recommended for faster simulation time.Note that it is only applicable if tx_pi_ext_ctrl_en is 1'b1 and tx_pi_pass_thru_sel is 1'b0.
 */
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_4_GEN2r (0x0001d0a4 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_4_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TX_PI_PMD_CTL_4_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TX_PI_PMD_CTL_4_GEN2r_s {
	uint32_t v[1];
	uint32_t tx_pi_pmd_ctl_4_gen2[1];
	uint32_t _tx_pi_pmd_ctl_4_gen2;
} BCMI_TSCF_XGXS_TX_PI_PMD_CTL_4_GEN2r_t;

#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_4_GEN2r_CLR(r) (r).tx_pi_pmd_ctl_4_gen2[0] = 0
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_4_GEN2r_SET(r,d) (r).tx_pi_pmd_ctl_4_gen2[0] = d
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_4_GEN2r_GET(r) (r).tx_pi_pmd_ctl_4_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_4_GEN2r_TX_PI_RMT_LPBK_BYPASS_FLTf_GET(r) ((((r).tx_pi_pmd_ctl_4_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_4_GEN2r_TX_PI_RMT_LPBK_BYPASS_FLTf_SET(r,f) (r).tx_pi_pmd_ctl_4_gen2[0]=(((r).tx_pi_pmd_ctl_4_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_4_GEN2r_TX_PI_RESET_CODE_DBGf_GET(r) ((((r).tx_pi_pmd_ctl_4_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_4_GEN2r_TX_PI_RESET_CODE_DBGf_SET(r,f) (r).tx_pi_pmd_ctl_4_gen2[0]=(((r).tx_pi_pmd_ctl_4_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_4_GEN2r_TX_PI_FRZ_MODEf_GET(r) ((((r).tx_pi_pmd_ctl_4_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_4_GEN2r_TX_PI_FRZ_MODEf_SET(r,f) (r).tx_pi_pmd_ctl_4_gen2[0]=(((r).tx_pi_pmd_ctl_4_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_4_GEN2r_TX_PI_FRZ_FRC_VALf_GET(r) ((((r).tx_pi_pmd_ctl_4_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_4_GEN2r_TX_PI_FRZ_FRC_VALf_SET(r,f) (r).tx_pi_pmd_ctl_4_gen2[0]=(((r).tx_pi_pmd_ctl_4_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_4_GEN2r_TX_PI_FRZ_FRCf_GET(r) (((r).tx_pi_pmd_ctl_4_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_TX_PI_PMD_CTL_4_GEN2r_TX_PI_FRZ_FRCf_SET(r,f) (r).tx_pi_pmd_ctl_4_gen2[0]=(((r).tx_pi_pmd_ctl_4_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TX_PI_PMD_CTL_4_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TX_PI_PMD_CTL_4_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_CTL_4_GEN2r,(_r._tx_pi_pmd_ctl_4_gen2))
#define BCMI_TSCF_XGXS_WRITE_TX_PI_PMD_CTL_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_CTL_4_GEN2r,(_r._tx_pi_pmd_ctl_4_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TX_PI_PMD_CTL_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_CTL_4_GEN2r,(_r._tx_pi_pmd_ctl_4_gen2))
#define BCMI_TSCF_XGXS_READLN_TX_PI_PMD_CTL_4_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_CTL_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_pmd_ctl_4_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TX_PI_PMD_CTL_4_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_CTL_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_pmd_ctl_4_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TX_PI_PMD_CTL_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_CTL_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_pi_pmd_ctl_4_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TX_PI_PMD_CTL_4_GEN2r BCMI_TSCF_XGXS_TX_PI_PMD_CTL_4_GEN2r
#define TX_PI_PMD_CTL_4_GEN2r_SIZE BCMI_TSCF_XGXS_TX_PI_PMD_CTL_4_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TX_PI_PMD_CTL_4_GEN2r_t TX_PI_PMD_CTL_4_GEN2r_t;
#define TX_PI_PMD_CTL_4_GEN2r_CLR BCMI_TSCF_XGXS_TX_PI_PMD_CTL_4_GEN2r_CLR
#define TX_PI_PMD_CTL_4_GEN2r_SET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_4_GEN2r_SET
#define TX_PI_PMD_CTL_4_GEN2r_GET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_4_GEN2r_GET
#define TX_PI_PMD_CTL_4_GEN2r_TX_PI_RMT_LPBK_BYPASS_FLTf_GET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_4_GEN2r_TX_PI_RMT_LPBK_BYPASS_FLTf_GET
#define TX_PI_PMD_CTL_4_GEN2r_TX_PI_RMT_LPBK_BYPASS_FLTf_SET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_4_GEN2r_TX_PI_RMT_LPBK_BYPASS_FLTf_SET
#define TX_PI_PMD_CTL_4_GEN2r_TX_PI_RESET_CODE_DBGf_GET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_4_GEN2r_TX_PI_RESET_CODE_DBGf_GET
#define TX_PI_PMD_CTL_4_GEN2r_TX_PI_RESET_CODE_DBGf_SET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_4_GEN2r_TX_PI_RESET_CODE_DBGf_SET
#define TX_PI_PMD_CTL_4_GEN2r_TX_PI_FRZ_MODEf_GET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_4_GEN2r_TX_PI_FRZ_MODEf_GET
#define TX_PI_PMD_CTL_4_GEN2r_TX_PI_FRZ_MODEf_SET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_4_GEN2r_TX_PI_FRZ_MODEf_SET
#define TX_PI_PMD_CTL_4_GEN2r_TX_PI_FRZ_FRC_VALf_GET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_4_GEN2r_TX_PI_FRZ_FRC_VALf_GET
#define TX_PI_PMD_CTL_4_GEN2r_TX_PI_FRZ_FRC_VALf_SET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_4_GEN2r_TX_PI_FRZ_FRC_VALf_SET
#define TX_PI_PMD_CTL_4_GEN2r_TX_PI_FRZ_FRCf_GET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_4_GEN2r_TX_PI_FRZ_FRCf_GET
#define TX_PI_PMD_CTL_4_GEN2r_TX_PI_FRZ_FRCf_SET BCMI_TSCF_XGXS_TX_PI_PMD_CTL_4_GEN2r_TX_PI_FRZ_FRCf_SET
#define READ_TX_PI_PMD_CTL_4_GEN2r BCMI_TSCF_XGXS_READ_TX_PI_PMD_CTL_4_GEN2r
#define WRITE_TX_PI_PMD_CTL_4_GEN2r BCMI_TSCF_XGXS_WRITE_TX_PI_PMD_CTL_4_GEN2r
#define MODIFY_TX_PI_PMD_CTL_4_GEN2r BCMI_TSCF_XGXS_MODIFY_TX_PI_PMD_CTL_4_GEN2r
#define READLN_TX_PI_PMD_CTL_4_GEN2r BCMI_TSCF_XGXS_READLN_TX_PI_PMD_CTL_4_GEN2r
#define WRITELN_TX_PI_PMD_CTL_4_GEN2r BCMI_TSCF_XGXS_WRITELN_TX_PI_PMD_CTL_4_GEN2r
#define WRITEALL_TX_PI_PMD_CTL_4_GEN2r BCMI_TSCF_XGXS_WRITEALL_TX_PI_PMD_CTL_4_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TX_PI_PMD_CTL_4_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TX_PI_PMD_STS_0_GEN2
 * BLOCKS:   TX_PI_PMD_COM
 * REGADDR:  0xd0a8
 * DEVAD:    1
 * DESC:     TX Phase Interpolator Status 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TX_PI_PHASE_CNTR TX PI Phase Counter. Signed Value.
 */
#define BCMI_TSCF_XGXS_TX_PI_PMD_STS_0_GEN2r (0x0001d0a8 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TX_PI_PMD_STS_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TX_PI_PMD_STS_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TX_PI_PMD_STS_0_GEN2r_s {
	uint32_t v[1];
	uint32_t tx_pi_pmd_sts_0_gen2[1];
	uint32_t _tx_pi_pmd_sts_0_gen2;
} BCMI_TSCF_XGXS_TX_PI_PMD_STS_0_GEN2r_t;

#define BCMI_TSCF_XGXS_TX_PI_PMD_STS_0_GEN2r_CLR(r) (r).tx_pi_pmd_sts_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_TX_PI_PMD_STS_0_GEN2r_SET(r,d) (r).tx_pi_pmd_sts_0_gen2[0] = d
#define BCMI_TSCF_XGXS_TX_PI_PMD_STS_0_GEN2r_GET(r) (r).tx_pi_pmd_sts_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TX_PI_PMD_STS_0_GEN2r_TX_PI_PHASE_CNTRf_GET(r) (((r).tx_pi_pmd_sts_0_gen2[0]) & 0x7f)
#define BCMI_TSCF_XGXS_TX_PI_PMD_STS_0_GEN2r_TX_PI_PHASE_CNTRf_SET(r,f) (r).tx_pi_pmd_sts_0_gen2[0]=(((r).tx_pi_pmd_sts_0_gen2[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f)) | (0x7f << 16)

/*
 * These macros can be used to access TX_PI_PMD_STS_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TX_PI_PMD_STS_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_STS_0_GEN2r,(_r._tx_pi_pmd_sts_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_TX_PI_PMD_STS_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_STS_0_GEN2r,(_r._tx_pi_pmd_sts_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TX_PI_PMD_STS_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_STS_0_GEN2r,(_r._tx_pi_pmd_sts_0_gen2))
#define BCMI_TSCF_XGXS_READLN_TX_PI_PMD_STS_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_STS_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_pmd_sts_0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TX_PI_PMD_STS_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_STS_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_pmd_sts_0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TX_PI_PMD_STS_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_STS_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_pi_pmd_sts_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TX_PI_PMD_STS_0_GEN2r BCMI_TSCF_XGXS_TX_PI_PMD_STS_0_GEN2r
#define TX_PI_PMD_STS_0_GEN2r_SIZE BCMI_TSCF_XGXS_TX_PI_PMD_STS_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TX_PI_PMD_STS_0_GEN2r_t TX_PI_PMD_STS_0_GEN2r_t;
#define TX_PI_PMD_STS_0_GEN2r_CLR BCMI_TSCF_XGXS_TX_PI_PMD_STS_0_GEN2r_CLR
#define TX_PI_PMD_STS_0_GEN2r_SET BCMI_TSCF_XGXS_TX_PI_PMD_STS_0_GEN2r_SET
#define TX_PI_PMD_STS_0_GEN2r_GET BCMI_TSCF_XGXS_TX_PI_PMD_STS_0_GEN2r_GET
#define TX_PI_PMD_STS_0_GEN2r_TX_PI_PHASE_CNTRf_GET BCMI_TSCF_XGXS_TX_PI_PMD_STS_0_GEN2r_TX_PI_PHASE_CNTRf_GET
#define TX_PI_PMD_STS_0_GEN2r_TX_PI_PHASE_CNTRf_SET BCMI_TSCF_XGXS_TX_PI_PMD_STS_0_GEN2r_TX_PI_PHASE_CNTRf_SET
#define READ_TX_PI_PMD_STS_0_GEN2r BCMI_TSCF_XGXS_READ_TX_PI_PMD_STS_0_GEN2r
#define WRITE_TX_PI_PMD_STS_0_GEN2r BCMI_TSCF_XGXS_WRITE_TX_PI_PMD_STS_0_GEN2r
#define MODIFY_TX_PI_PMD_STS_0_GEN2r BCMI_TSCF_XGXS_MODIFY_TX_PI_PMD_STS_0_GEN2r
#define READLN_TX_PI_PMD_STS_0_GEN2r BCMI_TSCF_XGXS_READLN_TX_PI_PMD_STS_0_GEN2r
#define WRITELN_TX_PI_PMD_STS_0_GEN2r BCMI_TSCF_XGXS_WRITELN_TX_PI_PMD_STS_0_GEN2r
#define WRITEALL_TX_PI_PMD_STS_0_GEN2r BCMI_TSCF_XGXS_WRITEALL_TX_PI_PMD_STS_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TX_PI_PMD_STS_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TX_PI_PMD_STS_1_GEN2
 * BLOCKS:   TX_PI_PMD_COM
 * REGADDR:  0xd0a9
 * DEVAD:    1
 * DESC:     TX Phase Interpolator Status 1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TX_PI_INTEG1_REG TX PI integ1 register. Signed Value.This field is meant for internal debug only.
 */
#define BCMI_TSCF_XGXS_TX_PI_PMD_STS_1_GEN2r (0x0001d0a9 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TX_PI_PMD_STS_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TX_PI_PMD_STS_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TX_PI_PMD_STS_1_GEN2r_s {
	uint32_t v[1];
	uint32_t tx_pi_pmd_sts_1_gen2[1];
	uint32_t _tx_pi_pmd_sts_1_gen2;
} BCMI_TSCF_XGXS_TX_PI_PMD_STS_1_GEN2r_t;

#define BCMI_TSCF_XGXS_TX_PI_PMD_STS_1_GEN2r_CLR(r) (r).tx_pi_pmd_sts_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_TX_PI_PMD_STS_1_GEN2r_SET(r,d) (r).tx_pi_pmd_sts_1_gen2[0] = d
#define BCMI_TSCF_XGXS_TX_PI_PMD_STS_1_GEN2r_GET(r) (r).tx_pi_pmd_sts_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TX_PI_PMD_STS_1_GEN2r_TX_PI_INTEG1_REGf_GET(r) (((r).tx_pi_pmd_sts_1_gen2[0]) & 0x3fff)
#define BCMI_TSCF_XGXS_TX_PI_PMD_STS_1_GEN2r_TX_PI_INTEG1_REGf_SET(r,f) (r).tx_pi_pmd_sts_1_gen2[0]=(((r).tx_pi_pmd_sts_1_gen2[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff)) | (0x3fff << 16)

/*
 * These macros can be used to access TX_PI_PMD_STS_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TX_PI_PMD_STS_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_STS_1_GEN2r,(_r._tx_pi_pmd_sts_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_TX_PI_PMD_STS_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_STS_1_GEN2r,(_r._tx_pi_pmd_sts_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TX_PI_PMD_STS_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_STS_1_GEN2r,(_r._tx_pi_pmd_sts_1_gen2))
#define BCMI_TSCF_XGXS_READLN_TX_PI_PMD_STS_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_STS_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_pmd_sts_1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TX_PI_PMD_STS_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_STS_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_pmd_sts_1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TX_PI_PMD_STS_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_STS_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_pi_pmd_sts_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TX_PI_PMD_STS_1_GEN2r BCMI_TSCF_XGXS_TX_PI_PMD_STS_1_GEN2r
#define TX_PI_PMD_STS_1_GEN2r_SIZE BCMI_TSCF_XGXS_TX_PI_PMD_STS_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TX_PI_PMD_STS_1_GEN2r_t TX_PI_PMD_STS_1_GEN2r_t;
#define TX_PI_PMD_STS_1_GEN2r_CLR BCMI_TSCF_XGXS_TX_PI_PMD_STS_1_GEN2r_CLR
#define TX_PI_PMD_STS_1_GEN2r_SET BCMI_TSCF_XGXS_TX_PI_PMD_STS_1_GEN2r_SET
#define TX_PI_PMD_STS_1_GEN2r_GET BCMI_TSCF_XGXS_TX_PI_PMD_STS_1_GEN2r_GET
#define TX_PI_PMD_STS_1_GEN2r_TX_PI_INTEG1_REGf_GET BCMI_TSCF_XGXS_TX_PI_PMD_STS_1_GEN2r_TX_PI_INTEG1_REGf_GET
#define TX_PI_PMD_STS_1_GEN2r_TX_PI_INTEG1_REGf_SET BCMI_TSCF_XGXS_TX_PI_PMD_STS_1_GEN2r_TX_PI_INTEG1_REGf_SET
#define READ_TX_PI_PMD_STS_1_GEN2r BCMI_TSCF_XGXS_READ_TX_PI_PMD_STS_1_GEN2r
#define WRITE_TX_PI_PMD_STS_1_GEN2r BCMI_TSCF_XGXS_WRITE_TX_PI_PMD_STS_1_GEN2r
#define MODIFY_TX_PI_PMD_STS_1_GEN2r BCMI_TSCF_XGXS_MODIFY_TX_PI_PMD_STS_1_GEN2r
#define READLN_TX_PI_PMD_STS_1_GEN2r BCMI_TSCF_XGXS_READLN_TX_PI_PMD_STS_1_GEN2r
#define WRITELN_TX_PI_PMD_STS_1_GEN2r BCMI_TSCF_XGXS_WRITELN_TX_PI_PMD_STS_1_GEN2r
#define WRITEALL_TX_PI_PMD_STS_1_GEN2r BCMI_TSCF_XGXS_WRITEALL_TX_PI_PMD_STS_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TX_PI_PMD_STS_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TX_PI_PMD_STS_2_GEN2
 * BLOCKS:   TX_PI_PMD_COM
 * REGADDR:  0xd0aa
 * DEVAD:    1
 * DESC:     TX Phase Interpolator Status 2
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TX_PI_INTEG2_REG TX PI integ2 register. Signed Value. Once settled, it can provide the information of the ppm on the TX clock w.r.t. PLL/VCO clock.+8192 (-8192) is equal to +781.25 (-781.25) ppm which means tclk is slower (faster) w.r.t. PLL/VCO clock.Divide this register value by 10.485 to get the tclk ppm.
 */
#define BCMI_TSCF_XGXS_TX_PI_PMD_STS_2_GEN2r (0x0001d0aa | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TX_PI_PMD_STS_2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TX_PI_PMD_STS_2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TX_PI_PMD_STS_2_GEN2r_s {
	uint32_t v[1];
	uint32_t tx_pi_pmd_sts_2_gen2[1];
	uint32_t _tx_pi_pmd_sts_2_gen2;
} BCMI_TSCF_XGXS_TX_PI_PMD_STS_2_GEN2r_t;

#define BCMI_TSCF_XGXS_TX_PI_PMD_STS_2_GEN2r_CLR(r) (r).tx_pi_pmd_sts_2_gen2[0] = 0
#define BCMI_TSCF_XGXS_TX_PI_PMD_STS_2_GEN2r_SET(r,d) (r).tx_pi_pmd_sts_2_gen2[0] = d
#define BCMI_TSCF_XGXS_TX_PI_PMD_STS_2_GEN2r_GET(r) (r).tx_pi_pmd_sts_2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TX_PI_PMD_STS_2_GEN2r_TX_PI_INTEG2_REGf_GET(r) (((r).tx_pi_pmd_sts_2_gen2[0]) & 0x7fff)
#define BCMI_TSCF_XGXS_TX_PI_PMD_STS_2_GEN2r_TX_PI_INTEG2_REGf_SET(r,f) (r).tx_pi_pmd_sts_2_gen2[0]=(((r).tx_pi_pmd_sts_2_gen2[0] & ~((uint32_t)0x7fff)) | (((uint32_t)f) & 0x7fff)) | (0x7fff << 16)

/*
 * These macros can be used to access TX_PI_PMD_STS_2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TX_PI_PMD_STS_2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_STS_2_GEN2r,(_r._tx_pi_pmd_sts_2_gen2))
#define BCMI_TSCF_XGXS_WRITE_TX_PI_PMD_STS_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_STS_2_GEN2r,(_r._tx_pi_pmd_sts_2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TX_PI_PMD_STS_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_STS_2_GEN2r,(_r._tx_pi_pmd_sts_2_gen2))
#define BCMI_TSCF_XGXS_READLN_TX_PI_PMD_STS_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_STS_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_pmd_sts_2_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TX_PI_PMD_STS_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_STS_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_pmd_sts_2_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TX_PI_PMD_STS_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_STS_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_pi_pmd_sts_2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TX_PI_PMD_STS_2_GEN2r BCMI_TSCF_XGXS_TX_PI_PMD_STS_2_GEN2r
#define TX_PI_PMD_STS_2_GEN2r_SIZE BCMI_TSCF_XGXS_TX_PI_PMD_STS_2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TX_PI_PMD_STS_2_GEN2r_t TX_PI_PMD_STS_2_GEN2r_t;
#define TX_PI_PMD_STS_2_GEN2r_CLR BCMI_TSCF_XGXS_TX_PI_PMD_STS_2_GEN2r_CLR
#define TX_PI_PMD_STS_2_GEN2r_SET BCMI_TSCF_XGXS_TX_PI_PMD_STS_2_GEN2r_SET
#define TX_PI_PMD_STS_2_GEN2r_GET BCMI_TSCF_XGXS_TX_PI_PMD_STS_2_GEN2r_GET
#define TX_PI_PMD_STS_2_GEN2r_TX_PI_INTEG2_REGf_GET BCMI_TSCF_XGXS_TX_PI_PMD_STS_2_GEN2r_TX_PI_INTEG2_REGf_GET
#define TX_PI_PMD_STS_2_GEN2r_TX_PI_INTEG2_REGf_SET BCMI_TSCF_XGXS_TX_PI_PMD_STS_2_GEN2r_TX_PI_INTEG2_REGf_SET
#define READ_TX_PI_PMD_STS_2_GEN2r BCMI_TSCF_XGXS_READ_TX_PI_PMD_STS_2_GEN2r
#define WRITE_TX_PI_PMD_STS_2_GEN2r BCMI_TSCF_XGXS_WRITE_TX_PI_PMD_STS_2_GEN2r
#define MODIFY_TX_PI_PMD_STS_2_GEN2r BCMI_TSCF_XGXS_MODIFY_TX_PI_PMD_STS_2_GEN2r
#define READLN_TX_PI_PMD_STS_2_GEN2r BCMI_TSCF_XGXS_READLN_TX_PI_PMD_STS_2_GEN2r
#define WRITELN_TX_PI_PMD_STS_2_GEN2r BCMI_TSCF_XGXS_WRITELN_TX_PI_PMD_STS_2_GEN2r
#define WRITEALL_TX_PI_PMD_STS_2_GEN2r BCMI_TSCF_XGXS_WRITEALL_TX_PI_PMD_STS_2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TX_PI_PMD_STS_2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TX_PI_PMD_STS_3_GEN2
 * BLOCKS:   TX_PI_PMD_COM
 * REGADDR:  0xd0ab
 * DEVAD:    1
 * DESC:     TX Phase Interpolator Status 3
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TX_PI_PHASE_ERR  TX PI Phase Error. Signed Value. Valid values are -8 to +8.
 */
#define BCMI_TSCF_XGXS_TX_PI_PMD_STS_3_GEN2r (0x0001d0ab | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TX_PI_PMD_STS_3_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TX_PI_PMD_STS_3_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TX_PI_PMD_STS_3_GEN2r_s {
	uint32_t v[1];
	uint32_t tx_pi_pmd_sts_3_gen2[1];
	uint32_t _tx_pi_pmd_sts_3_gen2;
} BCMI_TSCF_XGXS_TX_PI_PMD_STS_3_GEN2r_t;

#define BCMI_TSCF_XGXS_TX_PI_PMD_STS_3_GEN2r_CLR(r) (r).tx_pi_pmd_sts_3_gen2[0] = 0
#define BCMI_TSCF_XGXS_TX_PI_PMD_STS_3_GEN2r_SET(r,d) (r).tx_pi_pmd_sts_3_gen2[0] = d
#define BCMI_TSCF_XGXS_TX_PI_PMD_STS_3_GEN2r_GET(r) (r).tx_pi_pmd_sts_3_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TX_PI_PMD_STS_3_GEN2r_TX_PI_PHASE_ERRf_GET(r) (((r).tx_pi_pmd_sts_3_gen2[0]) & 0x3f)
#define BCMI_TSCF_XGXS_TX_PI_PMD_STS_3_GEN2r_TX_PI_PHASE_ERRf_SET(r,f) (r).tx_pi_pmd_sts_3_gen2[0]=(((r).tx_pi_pmd_sts_3_gen2[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access TX_PI_PMD_STS_3_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TX_PI_PMD_STS_3_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_STS_3_GEN2r,(_r._tx_pi_pmd_sts_3_gen2))
#define BCMI_TSCF_XGXS_WRITE_TX_PI_PMD_STS_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_STS_3_GEN2r,(_r._tx_pi_pmd_sts_3_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TX_PI_PMD_STS_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_STS_3_GEN2r,(_r._tx_pi_pmd_sts_3_gen2))
#define BCMI_TSCF_XGXS_READLN_TX_PI_PMD_STS_3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_STS_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_pmd_sts_3_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TX_PI_PMD_STS_3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_STS_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_pmd_sts_3_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TX_PI_PMD_STS_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_PI_PMD_STS_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_pi_pmd_sts_3_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TX_PI_PMD_STS_3_GEN2r BCMI_TSCF_XGXS_TX_PI_PMD_STS_3_GEN2r
#define TX_PI_PMD_STS_3_GEN2r_SIZE BCMI_TSCF_XGXS_TX_PI_PMD_STS_3_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TX_PI_PMD_STS_3_GEN2r_t TX_PI_PMD_STS_3_GEN2r_t;
#define TX_PI_PMD_STS_3_GEN2r_CLR BCMI_TSCF_XGXS_TX_PI_PMD_STS_3_GEN2r_CLR
#define TX_PI_PMD_STS_3_GEN2r_SET BCMI_TSCF_XGXS_TX_PI_PMD_STS_3_GEN2r_SET
#define TX_PI_PMD_STS_3_GEN2r_GET BCMI_TSCF_XGXS_TX_PI_PMD_STS_3_GEN2r_GET
#define TX_PI_PMD_STS_3_GEN2r_TX_PI_PHASE_ERRf_GET BCMI_TSCF_XGXS_TX_PI_PMD_STS_3_GEN2r_TX_PI_PHASE_ERRf_GET
#define TX_PI_PMD_STS_3_GEN2r_TX_PI_PHASE_ERRf_SET BCMI_TSCF_XGXS_TX_PI_PMD_STS_3_GEN2r_TX_PI_PHASE_ERRf_SET
#define READ_TX_PI_PMD_STS_3_GEN2r BCMI_TSCF_XGXS_READ_TX_PI_PMD_STS_3_GEN2r
#define WRITE_TX_PI_PMD_STS_3_GEN2r BCMI_TSCF_XGXS_WRITE_TX_PI_PMD_STS_3_GEN2r
#define MODIFY_TX_PI_PMD_STS_3_GEN2r BCMI_TSCF_XGXS_MODIFY_TX_PI_PMD_STS_3_GEN2r
#define READLN_TX_PI_PMD_STS_3_GEN2r BCMI_TSCF_XGXS_READLN_TX_PI_PMD_STS_3_GEN2r
#define WRITELN_TX_PI_PMD_STS_3_GEN2r BCMI_TSCF_XGXS_WRITELN_TX_PI_PMD_STS_3_GEN2r
#define WRITEALL_TX_PI_PMD_STS_3_GEN2r BCMI_TSCF_XGXS_WRITEALL_TX_PI_PMD_STS_3_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TX_PI_PMD_STS_3_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  CKRST_OSR_MODE_CTL_GEN2
 * BLOCKS:   CKRST_CTRL_PMD
 * REGADDR:  0xd0b0
 * DEVAD:    1
 * DESC:     OSR_MODE_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     OSR_MODE_FRC_VAL oversample (OS) mode Decoding of this register is as follows.OSX1          4'd0OSX2          4'd1OSX4          4'd2OSX16P5       4'd8OSX20P625     4'd12
 *     OSR_MODE_FRC     oversample (OS) mode force. Setting this bit will allow the register value to be used for OS mode.Othersise, the pin input values are used for OS mode
 */
#define BCMI_TSCF_XGXS_CKRST_OSR_MODE_CTL_GEN2r (0x0001d0b0 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_CKRST_OSR_MODE_CTL_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program CKRST_OSR_MODE_CTL_GEN2.
 */
typedef union BCMI_TSCF_XGXS_CKRST_OSR_MODE_CTL_GEN2r_s {
	uint32_t v[1];
	uint32_t ckrst_osr_mode_ctl_gen2[1];
	uint32_t _ckrst_osr_mode_ctl_gen2;
} BCMI_TSCF_XGXS_CKRST_OSR_MODE_CTL_GEN2r_t;

#define BCMI_TSCF_XGXS_CKRST_OSR_MODE_CTL_GEN2r_CLR(r) (r).ckrst_osr_mode_ctl_gen2[0] = 0
#define BCMI_TSCF_XGXS_CKRST_OSR_MODE_CTL_GEN2r_SET(r,d) (r).ckrst_osr_mode_ctl_gen2[0] = d
#define BCMI_TSCF_XGXS_CKRST_OSR_MODE_CTL_GEN2r_GET(r) (r).ckrst_osr_mode_ctl_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_CKRST_OSR_MODE_CTL_GEN2r_OSR_MODE_FRCf_GET(r) ((((r).ckrst_osr_mode_ctl_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_CKRST_OSR_MODE_CTL_GEN2r_OSR_MODE_FRCf_SET(r,f) (r).ckrst_osr_mode_ctl_gen2[0]=(((r).ckrst_osr_mode_ctl_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_CKRST_OSR_MODE_CTL_GEN2r_OSR_MODE_FRC_VALf_GET(r) (((r).ckrst_osr_mode_ctl_gen2[0]) & 0xf)
#define BCMI_TSCF_XGXS_CKRST_OSR_MODE_CTL_GEN2r_OSR_MODE_FRC_VALf_SET(r,f) (r).ckrst_osr_mode_ctl_gen2[0]=(((r).ckrst_osr_mode_ctl_gen2[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access CKRST_OSR_MODE_CTL_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_CKRST_OSR_MODE_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CKRST_OSR_MODE_CTL_GEN2r,(_r._ckrst_osr_mode_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITE_CKRST_OSR_MODE_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_OSR_MODE_CTL_GEN2r,(_r._ckrst_osr_mode_ctl_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_CKRST_OSR_MODE_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_OSR_MODE_CTL_GEN2r,(_r._ckrst_osr_mode_ctl_gen2))
#define BCMI_TSCF_XGXS_READLN_CKRST_OSR_MODE_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CKRST_OSR_MODE_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ckrst_osr_mode_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITELN_CKRST_OSR_MODE_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_OSR_MODE_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ckrst_osr_mode_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_CKRST_OSR_MODE_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_OSR_MODE_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ckrst_osr_mode_ctl_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define CKRST_OSR_MODE_CTL_GEN2r BCMI_TSCF_XGXS_CKRST_OSR_MODE_CTL_GEN2r
#define CKRST_OSR_MODE_CTL_GEN2r_SIZE BCMI_TSCF_XGXS_CKRST_OSR_MODE_CTL_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_CKRST_OSR_MODE_CTL_GEN2r_t CKRST_OSR_MODE_CTL_GEN2r_t;
#define CKRST_OSR_MODE_CTL_GEN2r_CLR BCMI_TSCF_XGXS_CKRST_OSR_MODE_CTL_GEN2r_CLR
#define CKRST_OSR_MODE_CTL_GEN2r_SET BCMI_TSCF_XGXS_CKRST_OSR_MODE_CTL_GEN2r_SET
#define CKRST_OSR_MODE_CTL_GEN2r_GET BCMI_TSCF_XGXS_CKRST_OSR_MODE_CTL_GEN2r_GET
#define CKRST_OSR_MODE_CTL_GEN2r_OSR_MODE_FRCf_GET BCMI_TSCF_XGXS_CKRST_OSR_MODE_CTL_GEN2r_OSR_MODE_FRCf_GET
#define CKRST_OSR_MODE_CTL_GEN2r_OSR_MODE_FRCf_SET BCMI_TSCF_XGXS_CKRST_OSR_MODE_CTL_GEN2r_OSR_MODE_FRCf_SET
#define CKRST_OSR_MODE_CTL_GEN2r_OSR_MODE_FRC_VALf_GET BCMI_TSCF_XGXS_CKRST_OSR_MODE_CTL_GEN2r_OSR_MODE_FRC_VALf_GET
#define CKRST_OSR_MODE_CTL_GEN2r_OSR_MODE_FRC_VALf_SET BCMI_TSCF_XGXS_CKRST_OSR_MODE_CTL_GEN2r_OSR_MODE_FRC_VALf_SET
#define READ_CKRST_OSR_MODE_CTL_GEN2r BCMI_TSCF_XGXS_READ_CKRST_OSR_MODE_CTL_GEN2r
#define WRITE_CKRST_OSR_MODE_CTL_GEN2r BCMI_TSCF_XGXS_WRITE_CKRST_OSR_MODE_CTL_GEN2r
#define MODIFY_CKRST_OSR_MODE_CTL_GEN2r BCMI_TSCF_XGXS_MODIFY_CKRST_OSR_MODE_CTL_GEN2r
#define READLN_CKRST_OSR_MODE_CTL_GEN2r BCMI_TSCF_XGXS_READLN_CKRST_OSR_MODE_CTL_GEN2r
#define WRITELN_CKRST_OSR_MODE_CTL_GEN2r BCMI_TSCF_XGXS_WRITELN_CKRST_OSR_MODE_CTL_GEN2r
#define WRITEALL_CKRST_OSR_MODE_CTL_GEN2r BCMI_TSCF_XGXS_WRITEALL_CKRST_OSR_MODE_CTL_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_CKRST_OSR_MODE_CTL_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2
 * BLOCKS:   CKRST_CTRL_PMD
 * REGADDR:  0xd0b1
 * DEVAD:    1
 * DESC:     LANE_CLK_RESET_N_POWERDOWN_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LN_DP_S_RSTB     Active Low Lane Soft Reset for datapath. If asserted by writing to 1'b0 will reset the datapath for a lane.This soft reset is equivalent to the hard reset input pin pmd_ln_dp_h_rstb_i.
 *     LN_RX_S_PWRDN    Active High Power Down control for RX Lane.If asserted by writing to 1'b1 will power down the RX Lane.
 *     LN_TX_S_PWRDN    Active High Power Down control for TX Lane.If asserted by writing to 1'b1 will power down the TX Lane.
 *     AFE_SIGDET_PWRDN Power Down for Signal Detect. 1=power down
 */
#define BCMI_TSCF_XGXS_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r (0x0001d0b1 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2.
 */
typedef union BCMI_TSCF_XGXS_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r_s {
	uint32_t v[1];
	uint32_t ckrst_ln_clk_rst_n_pwrdwn_ctl_gen2[1];
	uint32_t _ckrst_ln_clk_rst_n_pwrdwn_ctl_gen2;
} BCMI_TSCF_XGXS_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r_t;

#define BCMI_TSCF_XGXS_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r_CLR(r) (r).ckrst_ln_clk_rst_n_pwrdwn_ctl_gen2[0] = 0
#define BCMI_TSCF_XGXS_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r_SET(r,d) (r).ckrst_ln_clk_rst_n_pwrdwn_ctl_gen2[0] = d
#define BCMI_TSCF_XGXS_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r_GET(r) (r).ckrst_ln_clk_rst_n_pwrdwn_ctl_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r_AFE_SIGDET_PWRDNf_GET(r) ((((r).ckrst_ln_clk_rst_n_pwrdwn_ctl_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r_AFE_SIGDET_PWRDNf_SET(r,f) (r).ckrst_ln_clk_rst_n_pwrdwn_ctl_gen2[0]=(((r).ckrst_ln_clk_rst_n_pwrdwn_ctl_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r_LN_TX_S_PWRDNf_GET(r) ((((r).ckrst_ln_clk_rst_n_pwrdwn_ctl_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r_LN_TX_S_PWRDNf_SET(r,f) (r).ckrst_ln_clk_rst_n_pwrdwn_ctl_gen2[0]=(((r).ckrst_ln_clk_rst_n_pwrdwn_ctl_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r_LN_RX_S_PWRDNf_GET(r) ((((r).ckrst_ln_clk_rst_n_pwrdwn_ctl_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r_LN_RX_S_PWRDNf_SET(r,f) (r).ckrst_ln_clk_rst_n_pwrdwn_ctl_gen2[0]=(((r).ckrst_ln_clk_rst_n_pwrdwn_ctl_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r_LN_DP_S_RSTBf_GET(r) ((((r).ckrst_ln_clk_rst_n_pwrdwn_ctl_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r_LN_DP_S_RSTBf_SET(r,f) (r).ckrst_ln_clk_rst_n_pwrdwn_ctl_gen2[0]=(((r).ckrst_ln_clk_rst_n_pwrdwn_ctl_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))

/*
 * These macros can be used to access CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r,(_r._ckrst_ln_clk_rst_n_pwrdwn_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITE_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r,(_r._ckrst_ln_clk_rst_n_pwrdwn_ctl_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r,(_r._ckrst_ln_clk_rst_n_pwrdwn_ctl_gen2))
#define BCMI_TSCF_XGXS_READLN_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ckrst_ln_clk_rst_n_pwrdwn_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITELN_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ckrst_ln_clk_rst_n_pwrdwn_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ckrst_ln_clk_rst_n_pwrdwn_ctl_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r BCMI_TSCF_XGXS_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r
#define CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r_SIZE BCMI_TSCF_XGXS_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r_t CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r_t;
#define CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r_CLR BCMI_TSCF_XGXS_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r_CLR
#define CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r_SET BCMI_TSCF_XGXS_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r_SET
#define CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r_GET BCMI_TSCF_XGXS_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r_GET
#define CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r_AFE_SIGDET_PWRDNf_GET BCMI_TSCF_XGXS_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r_AFE_SIGDET_PWRDNf_GET
#define CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r_AFE_SIGDET_PWRDNf_SET BCMI_TSCF_XGXS_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r_AFE_SIGDET_PWRDNf_SET
#define CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r_LN_TX_S_PWRDNf_GET BCMI_TSCF_XGXS_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r_LN_TX_S_PWRDNf_GET
#define CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r_LN_TX_S_PWRDNf_SET BCMI_TSCF_XGXS_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r_LN_TX_S_PWRDNf_SET
#define CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r_LN_RX_S_PWRDNf_GET BCMI_TSCF_XGXS_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r_LN_RX_S_PWRDNf_GET
#define CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r_LN_RX_S_PWRDNf_SET BCMI_TSCF_XGXS_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r_LN_RX_S_PWRDNf_SET
#define CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r_LN_DP_S_RSTBf_GET BCMI_TSCF_XGXS_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r_LN_DP_S_RSTBf_GET
#define CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r_LN_DP_S_RSTBf_SET BCMI_TSCF_XGXS_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r_LN_DP_S_RSTBf_SET
#define READ_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r BCMI_TSCF_XGXS_READ_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r
#define WRITE_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r BCMI_TSCF_XGXS_WRITE_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r
#define MODIFY_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r BCMI_TSCF_XGXS_MODIFY_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r
#define READLN_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r BCMI_TSCF_XGXS_READLN_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r
#define WRITELN_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r BCMI_TSCF_XGXS_WRITELN_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r
#define WRITEALL_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r BCMI_TSCF_XGXS_WRITEALL_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_CKRST_LN_CLK_RST_N_PWRDWN_CTL_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2
 * BLOCKS:   CKRST_CTRL_PMD
 * REGADDR:  0xd0b2
 * DEVAD:    1
 * DESC:     LANE_AFE_RESET_PWRDWN_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AFE_RX_PWRDN_FRC AFE RX Lane powerdown force.
 *     AFE_RX_PWRDN_FRC_VAL AFE RX Lane powerdown force value.
 *     AFE_RX_RESET_FRC AFE RX Lane reset force.
 *     AFE_RX_RESET_FRC_VAL AFE RX Lane reset force value.
 *     AFE_TX_PWRDN_FRC AFE TX Lane powerdown force.
 *     AFE_TX_PWRDN_FRC_VAL AFE TX Lane powerdown force value.
 *     AFE_TX_RESET_FRC AFE TX Lane reset force.
 *     AFE_TX_RESET_FRC_VAL AFE TX Lane reset force value.
 *     AFE_RX_RCLK20_PWRDN_FRC AFE RX Lane rx_rclk20_pwrdwn force.
 *     AFE_RX_RCLK20_PWRDN_FRC_VAL AFE RX Lane rx_rclk20_pwrdwn force value.
 */
#define BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r (0x0001d0b2 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2.
 */
typedef union BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_s {
	uint32_t v[1];
	uint32_t ckrst_ln_afe_rst_pwrdwn_ctl_gen2[1];
	uint32_t _ckrst_ln_afe_rst_pwrdwn_ctl_gen2;
} BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_t;

#define BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_CLR(r) (r).ckrst_ln_afe_rst_pwrdwn_ctl_gen2[0] = 0
#define BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_SET(r,d) (r).ckrst_ln_afe_rst_pwrdwn_ctl_gen2[0] = d
#define BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_GET(r) (r).ckrst_ln_afe_rst_pwrdwn_ctl_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_RX_RCLK20_PWRDN_FRC_VALf_GET(r) ((((r).ckrst_ln_afe_rst_pwrdwn_ctl_gen2[0]) >> 9) & 0x1)
#define BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_RX_RCLK20_PWRDN_FRC_VALf_SET(r,f) (r).ckrst_ln_afe_rst_pwrdwn_ctl_gen2[0]=(((r).ckrst_ln_afe_rst_pwrdwn_ctl_gen2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_RX_RCLK20_PWRDN_FRCf_GET(r) ((((r).ckrst_ln_afe_rst_pwrdwn_ctl_gen2[0]) >> 8) & 0x1)
#define BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_RX_RCLK20_PWRDN_FRCf_SET(r,f) (r).ckrst_ln_afe_rst_pwrdwn_ctl_gen2[0]=(((r).ckrst_ln_afe_rst_pwrdwn_ctl_gen2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_TX_RESET_FRC_VALf_GET(r) ((((r).ckrst_ln_afe_rst_pwrdwn_ctl_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_TX_RESET_FRC_VALf_SET(r,f) (r).ckrst_ln_afe_rst_pwrdwn_ctl_gen2[0]=(((r).ckrst_ln_afe_rst_pwrdwn_ctl_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_TX_RESET_FRCf_GET(r) ((((r).ckrst_ln_afe_rst_pwrdwn_ctl_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_TX_RESET_FRCf_SET(r,f) (r).ckrst_ln_afe_rst_pwrdwn_ctl_gen2[0]=(((r).ckrst_ln_afe_rst_pwrdwn_ctl_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_TX_PWRDN_FRC_VALf_GET(r) ((((r).ckrst_ln_afe_rst_pwrdwn_ctl_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_TX_PWRDN_FRC_VALf_SET(r,f) (r).ckrst_ln_afe_rst_pwrdwn_ctl_gen2[0]=(((r).ckrst_ln_afe_rst_pwrdwn_ctl_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_TX_PWRDN_FRCf_GET(r) ((((r).ckrst_ln_afe_rst_pwrdwn_ctl_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_TX_PWRDN_FRCf_SET(r,f) (r).ckrst_ln_afe_rst_pwrdwn_ctl_gen2[0]=(((r).ckrst_ln_afe_rst_pwrdwn_ctl_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_RX_RESET_FRC_VALf_GET(r) ((((r).ckrst_ln_afe_rst_pwrdwn_ctl_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_RX_RESET_FRC_VALf_SET(r,f) (r).ckrst_ln_afe_rst_pwrdwn_ctl_gen2[0]=(((r).ckrst_ln_afe_rst_pwrdwn_ctl_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_RX_RESET_FRCf_GET(r) ((((r).ckrst_ln_afe_rst_pwrdwn_ctl_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_RX_RESET_FRCf_SET(r,f) (r).ckrst_ln_afe_rst_pwrdwn_ctl_gen2[0]=(((r).ckrst_ln_afe_rst_pwrdwn_ctl_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_RX_PWRDN_FRC_VALf_GET(r) ((((r).ckrst_ln_afe_rst_pwrdwn_ctl_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_RX_PWRDN_FRC_VALf_SET(r,f) (r).ckrst_ln_afe_rst_pwrdwn_ctl_gen2[0]=(((r).ckrst_ln_afe_rst_pwrdwn_ctl_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_RX_PWRDN_FRCf_GET(r) (((r).ckrst_ln_afe_rst_pwrdwn_ctl_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_RX_PWRDN_FRCf_SET(r,f) (r).ckrst_ln_afe_rst_pwrdwn_ctl_gen2[0]=(((r).ckrst_ln_afe_rst_pwrdwn_ctl_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r,(_r._ckrst_ln_afe_rst_pwrdwn_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITE_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r,(_r._ckrst_ln_afe_rst_pwrdwn_ctl_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r,(_r._ckrst_ln_afe_rst_pwrdwn_ctl_gen2))
#define BCMI_TSCF_XGXS_READLN_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ckrst_ln_afe_rst_pwrdwn_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITELN_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ckrst_ln_afe_rst_pwrdwn_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ckrst_ln_afe_rst_pwrdwn_ctl_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r
#define CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_SIZE BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_t CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_t;
#define CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_CLR BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_CLR
#define CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_SET BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_SET
#define CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_GET BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_GET
#define CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_RX_RCLK20_PWRDN_FRC_VALf_GET BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_RX_RCLK20_PWRDN_FRC_VALf_GET
#define CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_RX_RCLK20_PWRDN_FRC_VALf_SET BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_RX_RCLK20_PWRDN_FRC_VALf_SET
#define CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_RX_RCLK20_PWRDN_FRCf_GET BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_RX_RCLK20_PWRDN_FRCf_GET
#define CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_RX_RCLK20_PWRDN_FRCf_SET BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_RX_RCLK20_PWRDN_FRCf_SET
#define CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_TX_RESET_FRC_VALf_GET BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_TX_RESET_FRC_VALf_GET
#define CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_TX_RESET_FRC_VALf_SET BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_TX_RESET_FRC_VALf_SET
#define CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_TX_RESET_FRCf_GET BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_TX_RESET_FRCf_GET
#define CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_TX_RESET_FRCf_SET BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_TX_RESET_FRCf_SET
#define CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_TX_PWRDN_FRC_VALf_GET BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_TX_PWRDN_FRC_VALf_GET
#define CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_TX_PWRDN_FRC_VALf_SET BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_TX_PWRDN_FRC_VALf_SET
#define CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_TX_PWRDN_FRCf_GET BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_TX_PWRDN_FRCf_GET
#define CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_TX_PWRDN_FRCf_SET BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_TX_PWRDN_FRCf_SET
#define CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_RX_RESET_FRC_VALf_GET BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_RX_RESET_FRC_VALf_GET
#define CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_RX_RESET_FRC_VALf_SET BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_RX_RESET_FRC_VALf_SET
#define CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_RX_RESET_FRCf_GET BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_RX_RESET_FRCf_GET
#define CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_RX_RESET_FRCf_SET BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_RX_RESET_FRCf_SET
#define CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_RX_PWRDN_FRC_VALf_GET BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_RX_PWRDN_FRC_VALf_GET
#define CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_RX_PWRDN_FRC_VALf_SET BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_RX_PWRDN_FRC_VALf_SET
#define CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_RX_PWRDN_FRCf_GET BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_RX_PWRDN_FRCf_GET
#define CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_RX_PWRDN_FRCf_SET BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r_AFE_RX_PWRDN_FRCf_SET
#define READ_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r BCMI_TSCF_XGXS_READ_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r
#define WRITE_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r BCMI_TSCF_XGXS_WRITE_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r
#define MODIFY_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r BCMI_TSCF_XGXS_MODIFY_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r
#define READLN_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r BCMI_TSCF_XGXS_READLN_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r
#define WRITELN_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r BCMI_TSCF_XGXS_WRITELN_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r
#define WRITEALL_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r BCMI_TSCF_XGXS_WRITEALL_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_CKRST_LN_AFE_RST_PWRDWN_CTL_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2
 * BLOCKS:   CKRST_CTRL_PMD
 * REGADDR:  0xd0b3
 * DEVAD:    1
 * DESC:     LANE_RESET_N_PWRDN_PIN_KILL_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     PMD_LN_H_RSTB_PKILL 1'b1 will disable the pmd_ln_h_rstb input pin.
 *     PMD_LN_DP_H_RSTB_PKILL 1'b1 will disable the pmd_ln_dp_h_rstb input pin.
 *     PMD_LN_RX_H_PWRDN_PKILL 1'b1 will disable the pmd_ln_rx_h_pwrdn input pin.
 *     PMD_LN_TX_H_PWRDN_PKILL 1'b1 will disable the pmd_ln_tx_h_pwrdn input pin.
 */
#define BCMI_TSCF_XGXS_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r (0x0001d0b3 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2.
 */
typedef union BCMI_TSCF_XGXS_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r_s {
	uint32_t v[1];
	uint32_t ckrst_ln_rst_n_pwrdn_pin_kill_ctl_gen2[1];
	uint32_t _ckrst_ln_rst_n_pwrdn_pin_kill_ctl_gen2;
} BCMI_TSCF_XGXS_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r_t;

#define BCMI_TSCF_XGXS_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r_CLR(r) (r).ckrst_ln_rst_n_pwrdn_pin_kill_ctl_gen2[0] = 0
#define BCMI_TSCF_XGXS_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r_SET(r,d) (r).ckrst_ln_rst_n_pwrdn_pin_kill_ctl_gen2[0] = d
#define BCMI_TSCF_XGXS_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r_GET(r) (r).ckrst_ln_rst_n_pwrdn_pin_kill_ctl_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r_PMD_LN_TX_H_PWRDN_PKILLf_GET(r) ((((r).ckrst_ln_rst_n_pwrdn_pin_kill_ctl_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r_PMD_LN_TX_H_PWRDN_PKILLf_SET(r,f) (r).ckrst_ln_rst_n_pwrdn_pin_kill_ctl_gen2[0]=(((r).ckrst_ln_rst_n_pwrdn_pin_kill_ctl_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r_PMD_LN_RX_H_PWRDN_PKILLf_GET(r) ((((r).ckrst_ln_rst_n_pwrdn_pin_kill_ctl_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r_PMD_LN_RX_H_PWRDN_PKILLf_SET(r,f) (r).ckrst_ln_rst_n_pwrdn_pin_kill_ctl_gen2[0]=(((r).ckrst_ln_rst_n_pwrdn_pin_kill_ctl_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r_PMD_LN_DP_H_RSTB_PKILLf_GET(r) ((((r).ckrst_ln_rst_n_pwrdn_pin_kill_ctl_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r_PMD_LN_DP_H_RSTB_PKILLf_SET(r,f) (r).ckrst_ln_rst_n_pwrdn_pin_kill_ctl_gen2[0]=(((r).ckrst_ln_rst_n_pwrdn_pin_kill_ctl_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r_PMD_LN_H_RSTB_PKILLf_GET(r) (((r).ckrst_ln_rst_n_pwrdn_pin_kill_ctl_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r_PMD_LN_H_RSTB_PKILLf_SET(r,f) (r).ckrst_ln_rst_n_pwrdn_pin_kill_ctl_gen2[0]=(((r).ckrst_ln_rst_n_pwrdn_pin_kill_ctl_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r,(_r._ckrst_ln_rst_n_pwrdn_pin_kill_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITE_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r,(_r._ckrst_ln_rst_n_pwrdn_pin_kill_ctl_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r,(_r._ckrst_ln_rst_n_pwrdn_pin_kill_ctl_gen2))
#define BCMI_TSCF_XGXS_READLN_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ckrst_ln_rst_n_pwrdn_pin_kill_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITELN_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ckrst_ln_rst_n_pwrdn_pin_kill_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ckrst_ln_rst_n_pwrdn_pin_kill_ctl_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r BCMI_TSCF_XGXS_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r
#define CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r_SIZE BCMI_TSCF_XGXS_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r_t CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r_t;
#define CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r_CLR BCMI_TSCF_XGXS_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r_CLR
#define CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r_SET BCMI_TSCF_XGXS_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r_SET
#define CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r_GET BCMI_TSCF_XGXS_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r_GET
#define CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r_PMD_LN_TX_H_PWRDN_PKILLf_GET BCMI_TSCF_XGXS_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r_PMD_LN_TX_H_PWRDN_PKILLf_GET
#define CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r_PMD_LN_TX_H_PWRDN_PKILLf_SET BCMI_TSCF_XGXS_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r_PMD_LN_TX_H_PWRDN_PKILLf_SET
#define CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r_PMD_LN_RX_H_PWRDN_PKILLf_GET BCMI_TSCF_XGXS_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r_PMD_LN_RX_H_PWRDN_PKILLf_GET
#define CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r_PMD_LN_RX_H_PWRDN_PKILLf_SET BCMI_TSCF_XGXS_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r_PMD_LN_RX_H_PWRDN_PKILLf_SET
#define CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r_PMD_LN_DP_H_RSTB_PKILLf_GET BCMI_TSCF_XGXS_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r_PMD_LN_DP_H_RSTB_PKILLf_GET
#define CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r_PMD_LN_DP_H_RSTB_PKILLf_SET BCMI_TSCF_XGXS_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r_PMD_LN_DP_H_RSTB_PKILLf_SET
#define CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r_PMD_LN_H_RSTB_PKILLf_GET BCMI_TSCF_XGXS_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r_PMD_LN_H_RSTB_PKILLf_GET
#define CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r_PMD_LN_H_RSTB_PKILLf_SET BCMI_TSCF_XGXS_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r_PMD_LN_H_RSTB_PKILLf_SET
#define READ_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r BCMI_TSCF_XGXS_READ_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r
#define WRITE_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r BCMI_TSCF_XGXS_WRITE_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r
#define MODIFY_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r BCMI_TSCF_XGXS_MODIFY_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r
#define READLN_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r BCMI_TSCF_XGXS_READLN_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r
#define WRITELN_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r BCMI_TSCF_XGXS_WRITELN_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r
#define WRITEALL_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r BCMI_TSCF_XGXS_WRITEALL_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_CKRST_LN_RST_N_PWRDN_PIN_KILL_CTL_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  CKRST_LN_DBG_RST_CTL_GEN2
 * BLOCKS:   CKRST_CTRL_PMD
 * REGADDR:  0xd0b4
 * DEVAD:    1
 * DESC:     LANE_DEBUG_RESET_CONTROL
 * RESETVAL: 0x303 (771)
 * ACCESS:   R/W
 * FIELDS:
 *     LN_RX_S_RSTB     Active Low Lane Soft Reset for RX datapath and registers. If asserted by writing to 1'b0 will reset the RX registers and datapath for a lane.This is a debug only register and it is not handled by FW-HW handshake
 *     LN_RX_DP_S_RSTB  Active Low Lane Soft Reset for RX datapath. If asserted by writing to 1'b0 will reset the RX datapath for a lane.This is a debug only register and it is not handled by FW-HW handshake
 *     SIGDET_DP_RSTB_EN If asserted by writing to 1'b1 then lane datapath reset will also reset the sigdet filetr logic alomg with lane register reset.
 *     LN_TX_S_RSTB     Active Low Lane Soft Reset for TX datapath and registers. If asserted by writing to 1'b0 will reset the TX registers and datapath for a lane.This is a debug only register and it is not handled by FW-HW handshake
 *     LN_TX_DP_S_RSTB  Active Low Lane Soft Reset for TX datapath. If asserted by writing to 1'b0 will reset the TX datapath for a lane.This is a debug only register and it is not handled by FW-HW handshake
 */
#define BCMI_TSCF_XGXS_CKRST_LN_DBG_RST_CTL_GEN2r (0x0001d0b4 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_CKRST_LN_DBG_RST_CTL_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program CKRST_LN_DBG_RST_CTL_GEN2.
 */
typedef union BCMI_TSCF_XGXS_CKRST_LN_DBG_RST_CTL_GEN2r_s {
	uint32_t v[1];
	uint32_t ckrst_ln_dbg_rst_ctl_gen2[1];
	uint32_t _ckrst_ln_dbg_rst_ctl_gen2;
} BCMI_TSCF_XGXS_CKRST_LN_DBG_RST_CTL_GEN2r_t;

#define BCMI_TSCF_XGXS_CKRST_LN_DBG_RST_CTL_GEN2r_CLR(r) (r).ckrst_ln_dbg_rst_ctl_gen2[0] = 0
#define BCMI_TSCF_XGXS_CKRST_LN_DBG_RST_CTL_GEN2r_SET(r,d) (r).ckrst_ln_dbg_rst_ctl_gen2[0] = d
#define BCMI_TSCF_XGXS_CKRST_LN_DBG_RST_CTL_GEN2r_GET(r) (r).ckrst_ln_dbg_rst_ctl_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_CKRST_LN_DBG_RST_CTL_GEN2r_LN_TX_DP_S_RSTBf_GET(r) ((((r).ckrst_ln_dbg_rst_ctl_gen2[0]) >> 9) & 0x1)
#define BCMI_TSCF_XGXS_CKRST_LN_DBG_RST_CTL_GEN2r_LN_TX_DP_S_RSTBf_SET(r,f) (r).ckrst_ln_dbg_rst_ctl_gen2[0]=(((r).ckrst_ln_dbg_rst_ctl_gen2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_XGXS_CKRST_LN_DBG_RST_CTL_GEN2r_LN_TX_S_RSTBf_GET(r) ((((r).ckrst_ln_dbg_rst_ctl_gen2[0]) >> 8) & 0x1)
#define BCMI_TSCF_XGXS_CKRST_LN_DBG_RST_CTL_GEN2r_LN_TX_S_RSTBf_SET(r,f) (r).ckrst_ln_dbg_rst_ctl_gen2[0]=(((r).ckrst_ln_dbg_rst_ctl_gen2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_XGXS_CKRST_LN_DBG_RST_CTL_GEN2r_SIGDET_DP_RSTB_ENf_GET(r) ((((r).ckrst_ln_dbg_rst_ctl_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_CKRST_LN_DBG_RST_CTL_GEN2r_SIGDET_DP_RSTB_ENf_SET(r,f) (r).ckrst_ln_dbg_rst_ctl_gen2[0]=(((r).ckrst_ln_dbg_rst_ctl_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_CKRST_LN_DBG_RST_CTL_GEN2r_LN_RX_DP_S_RSTBf_GET(r) ((((r).ckrst_ln_dbg_rst_ctl_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_CKRST_LN_DBG_RST_CTL_GEN2r_LN_RX_DP_S_RSTBf_SET(r,f) (r).ckrst_ln_dbg_rst_ctl_gen2[0]=(((r).ckrst_ln_dbg_rst_ctl_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_CKRST_LN_DBG_RST_CTL_GEN2r_LN_RX_S_RSTBf_GET(r) (((r).ckrst_ln_dbg_rst_ctl_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_CKRST_LN_DBG_RST_CTL_GEN2r_LN_RX_S_RSTBf_SET(r,f) (r).ckrst_ln_dbg_rst_ctl_gen2[0]=(((r).ckrst_ln_dbg_rst_ctl_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access CKRST_LN_DBG_RST_CTL_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_CKRST_LN_DBG_RST_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CKRST_LN_DBG_RST_CTL_GEN2r,(_r._ckrst_ln_dbg_rst_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITE_CKRST_LN_DBG_RST_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_LN_DBG_RST_CTL_GEN2r,(_r._ckrst_ln_dbg_rst_ctl_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_CKRST_LN_DBG_RST_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_LN_DBG_RST_CTL_GEN2r,(_r._ckrst_ln_dbg_rst_ctl_gen2))
#define BCMI_TSCF_XGXS_READLN_CKRST_LN_DBG_RST_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CKRST_LN_DBG_RST_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ckrst_ln_dbg_rst_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITELN_CKRST_LN_DBG_RST_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_LN_DBG_RST_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ckrst_ln_dbg_rst_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_CKRST_LN_DBG_RST_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_LN_DBG_RST_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ckrst_ln_dbg_rst_ctl_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define CKRST_LN_DBG_RST_CTL_GEN2r BCMI_TSCF_XGXS_CKRST_LN_DBG_RST_CTL_GEN2r
#define CKRST_LN_DBG_RST_CTL_GEN2r_SIZE BCMI_TSCF_XGXS_CKRST_LN_DBG_RST_CTL_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_CKRST_LN_DBG_RST_CTL_GEN2r_t CKRST_LN_DBG_RST_CTL_GEN2r_t;
#define CKRST_LN_DBG_RST_CTL_GEN2r_CLR BCMI_TSCF_XGXS_CKRST_LN_DBG_RST_CTL_GEN2r_CLR
#define CKRST_LN_DBG_RST_CTL_GEN2r_SET BCMI_TSCF_XGXS_CKRST_LN_DBG_RST_CTL_GEN2r_SET
#define CKRST_LN_DBG_RST_CTL_GEN2r_GET BCMI_TSCF_XGXS_CKRST_LN_DBG_RST_CTL_GEN2r_GET
#define CKRST_LN_DBG_RST_CTL_GEN2r_LN_TX_DP_S_RSTBf_GET BCMI_TSCF_XGXS_CKRST_LN_DBG_RST_CTL_GEN2r_LN_TX_DP_S_RSTBf_GET
#define CKRST_LN_DBG_RST_CTL_GEN2r_LN_TX_DP_S_RSTBf_SET BCMI_TSCF_XGXS_CKRST_LN_DBG_RST_CTL_GEN2r_LN_TX_DP_S_RSTBf_SET
#define CKRST_LN_DBG_RST_CTL_GEN2r_LN_TX_S_RSTBf_GET BCMI_TSCF_XGXS_CKRST_LN_DBG_RST_CTL_GEN2r_LN_TX_S_RSTBf_GET
#define CKRST_LN_DBG_RST_CTL_GEN2r_LN_TX_S_RSTBf_SET BCMI_TSCF_XGXS_CKRST_LN_DBG_RST_CTL_GEN2r_LN_TX_S_RSTBf_SET
#define CKRST_LN_DBG_RST_CTL_GEN2r_SIGDET_DP_RSTB_ENf_GET BCMI_TSCF_XGXS_CKRST_LN_DBG_RST_CTL_GEN2r_SIGDET_DP_RSTB_ENf_GET
#define CKRST_LN_DBG_RST_CTL_GEN2r_SIGDET_DP_RSTB_ENf_SET BCMI_TSCF_XGXS_CKRST_LN_DBG_RST_CTL_GEN2r_SIGDET_DP_RSTB_ENf_SET
#define CKRST_LN_DBG_RST_CTL_GEN2r_LN_RX_DP_S_RSTBf_GET BCMI_TSCF_XGXS_CKRST_LN_DBG_RST_CTL_GEN2r_LN_RX_DP_S_RSTBf_GET
#define CKRST_LN_DBG_RST_CTL_GEN2r_LN_RX_DP_S_RSTBf_SET BCMI_TSCF_XGXS_CKRST_LN_DBG_RST_CTL_GEN2r_LN_RX_DP_S_RSTBf_SET
#define CKRST_LN_DBG_RST_CTL_GEN2r_LN_RX_S_RSTBf_GET BCMI_TSCF_XGXS_CKRST_LN_DBG_RST_CTL_GEN2r_LN_RX_S_RSTBf_GET
#define CKRST_LN_DBG_RST_CTL_GEN2r_LN_RX_S_RSTBf_SET BCMI_TSCF_XGXS_CKRST_LN_DBG_RST_CTL_GEN2r_LN_RX_S_RSTBf_SET
#define READ_CKRST_LN_DBG_RST_CTL_GEN2r BCMI_TSCF_XGXS_READ_CKRST_LN_DBG_RST_CTL_GEN2r
#define WRITE_CKRST_LN_DBG_RST_CTL_GEN2r BCMI_TSCF_XGXS_WRITE_CKRST_LN_DBG_RST_CTL_GEN2r
#define MODIFY_CKRST_LN_DBG_RST_CTL_GEN2r BCMI_TSCF_XGXS_MODIFY_CKRST_LN_DBG_RST_CTL_GEN2r
#define READLN_CKRST_LN_DBG_RST_CTL_GEN2r BCMI_TSCF_XGXS_READLN_CKRST_LN_DBG_RST_CTL_GEN2r
#define WRITELN_CKRST_LN_DBG_RST_CTL_GEN2r BCMI_TSCF_XGXS_WRITELN_CKRST_LN_DBG_RST_CTL_GEN2r
#define WRITEALL_CKRST_LN_DBG_RST_CTL_GEN2r BCMI_TSCF_XGXS_WRITEALL_CKRST_LN_DBG_RST_CTL_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_CKRST_LN_DBG_RST_CTL_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  CKRST_UC_ACK_LN_CTL_GEN2
 * BLOCKS:   CKRST_CTRL_PMD
 * REGADDR:  0xd0b5
 * DEVAD:    1
 * DESC:     UC_ACK_LANE_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     UC_ACK_LANE_CFG_DONE uC will write this to 1 to indicate it's configuration of the lane is complete. Writing to 1'b1 willshould release internal hold on lane_dp_reset, only if lane_dp_reset_state is 3'b001.
 *     UC_ACK_LANE_DP_RESET uC will write this to 1 to acknowledge a reset event after seeing "lane_dp_reset_coccured".
 */
#define BCMI_TSCF_XGXS_CKRST_UC_ACK_LN_CTL_GEN2r (0x0001d0b5 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_CKRST_UC_ACK_LN_CTL_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program CKRST_UC_ACK_LN_CTL_GEN2.
 */
typedef union BCMI_TSCF_XGXS_CKRST_UC_ACK_LN_CTL_GEN2r_s {
	uint32_t v[1];
	uint32_t ckrst_uc_ack_ln_ctl_gen2[1];
	uint32_t _ckrst_uc_ack_ln_ctl_gen2;
} BCMI_TSCF_XGXS_CKRST_UC_ACK_LN_CTL_GEN2r_t;

#define BCMI_TSCF_XGXS_CKRST_UC_ACK_LN_CTL_GEN2r_CLR(r) (r).ckrst_uc_ack_ln_ctl_gen2[0] = 0
#define BCMI_TSCF_XGXS_CKRST_UC_ACK_LN_CTL_GEN2r_SET(r,d) (r).ckrst_uc_ack_ln_ctl_gen2[0] = d
#define BCMI_TSCF_XGXS_CKRST_UC_ACK_LN_CTL_GEN2r_GET(r) (r).ckrst_uc_ack_ln_ctl_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_CKRST_UC_ACK_LN_CTL_GEN2r_UC_ACK_LANE_DP_RESETf_GET(r) ((((r).ckrst_uc_ack_ln_ctl_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_CKRST_UC_ACK_LN_CTL_GEN2r_UC_ACK_LANE_DP_RESETf_SET(r,f) (r).ckrst_uc_ack_ln_ctl_gen2[0]=(((r).ckrst_uc_ack_ln_ctl_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_CKRST_UC_ACK_LN_CTL_GEN2r_UC_ACK_LANE_CFG_DONEf_GET(r) (((r).ckrst_uc_ack_ln_ctl_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_CKRST_UC_ACK_LN_CTL_GEN2r_UC_ACK_LANE_CFG_DONEf_SET(r,f) (r).ckrst_uc_ack_ln_ctl_gen2[0]=(((r).ckrst_uc_ack_ln_ctl_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access CKRST_UC_ACK_LN_CTL_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_CKRST_UC_ACK_LN_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CKRST_UC_ACK_LN_CTL_GEN2r,(_r._ckrst_uc_ack_ln_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITE_CKRST_UC_ACK_LN_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_UC_ACK_LN_CTL_GEN2r,(_r._ckrst_uc_ack_ln_ctl_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_CKRST_UC_ACK_LN_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_UC_ACK_LN_CTL_GEN2r,(_r._ckrst_uc_ack_ln_ctl_gen2))
#define BCMI_TSCF_XGXS_READLN_CKRST_UC_ACK_LN_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CKRST_UC_ACK_LN_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ckrst_uc_ack_ln_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITELN_CKRST_UC_ACK_LN_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_UC_ACK_LN_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ckrst_uc_ack_ln_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_CKRST_UC_ACK_LN_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_UC_ACK_LN_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ckrst_uc_ack_ln_ctl_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define CKRST_UC_ACK_LN_CTL_GEN2r BCMI_TSCF_XGXS_CKRST_UC_ACK_LN_CTL_GEN2r
#define CKRST_UC_ACK_LN_CTL_GEN2r_SIZE BCMI_TSCF_XGXS_CKRST_UC_ACK_LN_CTL_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_CKRST_UC_ACK_LN_CTL_GEN2r_t CKRST_UC_ACK_LN_CTL_GEN2r_t;
#define CKRST_UC_ACK_LN_CTL_GEN2r_CLR BCMI_TSCF_XGXS_CKRST_UC_ACK_LN_CTL_GEN2r_CLR
#define CKRST_UC_ACK_LN_CTL_GEN2r_SET BCMI_TSCF_XGXS_CKRST_UC_ACK_LN_CTL_GEN2r_SET
#define CKRST_UC_ACK_LN_CTL_GEN2r_GET BCMI_TSCF_XGXS_CKRST_UC_ACK_LN_CTL_GEN2r_GET
#define CKRST_UC_ACK_LN_CTL_GEN2r_UC_ACK_LANE_DP_RESETf_GET BCMI_TSCF_XGXS_CKRST_UC_ACK_LN_CTL_GEN2r_UC_ACK_LANE_DP_RESETf_GET
#define CKRST_UC_ACK_LN_CTL_GEN2r_UC_ACK_LANE_DP_RESETf_SET BCMI_TSCF_XGXS_CKRST_UC_ACK_LN_CTL_GEN2r_UC_ACK_LANE_DP_RESETf_SET
#define CKRST_UC_ACK_LN_CTL_GEN2r_UC_ACK_LANE_CFG_DONEf_GET BCMI_TSCF_XGXS_CKRST_UC_ACK_LN_CTL_GEN2r_UC_ACK_LANE_CFG_DONEf_GET
#define CKRST_UC_ACK_LN_CTL_GEN2r_UC_ACK_LANE_CFG_DONEf_SET BCMI_TSCF_XGXS_CKRST_UC_ACK_LN_CTL_GEN2r_UC_ACK_LANE_CFG_DONEf_SET
#define READ_CKRST_UC_ACK_LN_CTL_GEN2r BCMI_TSCF_XGXS_READ_CKRST_UC_ACK_LN_CTL_GEN2r
#define WRITE_CKRST_UC_ACK_LN_CTL_GEN2r BCMI_TSCF_XGXS_WRITE_CKRST_UC_ACK_LN_CTL_GEN2r
#define MODIFY_CKRST_UC_ACK_LN_CTL_GEN2r BCMI_TSCF_XGXS_MODIFY_CKRST_UC_ACK_LN_CTL_GEN2r
#define READLN_CKRST_UC_ACK_LN_CTL_GEN2r BCMI_TSCF_XGXS_READLN_CKRST_UC_ACK_LN_CTL_GEN2r
#define WRITELN_CKRST_UC_ACK_LN_CTL_GEN2r BCMI_TSCF_XGXS_WRITELN_CKRST_UC_ACK_LN_CTL_GEN2r
#define WRITEALL_CKRST_UC_ACK_LN_CTL_GEN2r BCMI_TSCF_XGXS_WRITEALL_CKRST_UC_ACK_LN_CTL_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_CKRST_UC_ACK_LN_CTL_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  CKRST_LN_RST_OCC_CTL_GEN2
 * BLOCKS:   CKRST_CTRL_PMD
 * REGADDR:  0xd0b6
 * DEVAD:    1
 * DESC:     LANE_REG_RESET_OCCURRED_CONTROL
 * RESETVAL: 0x1 (1)
 * ACCESS:   R/W
 * FIELDS:
 *     LANE_REG_RESET_OCCURRED Set to 1'b1 upon lane level register reset and remains so until cleared by register write from uC.
 */
#define BCMI_TSCF_XGXS_CKRST_LN_RST_OCC_CTL_GEN2r (0x0001d0b6 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_CKRST_LN_RST_OCC_CTL_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program CKRST_LN_RST_OCC_CTL_GEN2.
 */
typedef union BCMI_TSCF_XGXS_CKRST_LN_RST_OCC_CTL_GEN2r_s {
	uint32_t v[1];
	uint32_t ckrst_ln_rst_occ_ctl_gen2[1];
	uint32_t _ckrst_ln_rst_occ_ctl_gen2;
} BCMI_TSCF_XGXS_CKRST_LN_RST_OCC_CTL_GEN2r_t;

#define BCMI_TSCF_XGXS_CKRST_LN_RST_OCC_CTL_GEN2r_CLR(r) (r).ckrst_ln_rst_occ_ctl_gen2[0] = 0
#define BCMI_TSCF_XGXS_CKRST_LN_RST_OCC_CTL_GEN2r_SET(r,d) (r).ckrst_ln_rst_occ_ctl_gen2[0] = d
#define BCMI_TSCF_XGXS_CKRST_LN_RST_OCC_CTL_GEN2r_GET(r) (r).ckrst_ln_rst_occ_ctl_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_CKRST_LN_RST_OCC_CTL_GEN2r_LANE_REG_RESET_OCCURREDf_GET(r) (((r).ckrst_ln_rst_occ_ctl_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_CKRST_LN_RST_OCC_CTL_GEN2r_LANE_REG_RESET_OCCURREDf_SET(r,f) (r).ckrst_ln_rst_occ_ctl_gen2[0]=(((r).ckrst_ln_rst_occ_ctl_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access CKRST_LN_RST_OCC_CTL_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_CKRST_LN_RST_OCC_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CKRST_LN_RST_OCC_CTL_GEN2r,(_r._ckrst_ln_rst_occ_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITE_CKRST_LN_RST_OCC_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_LN_RST_OCC_CTL_GEN2r,(_r._ckrst_ln_rst_occ_ctl_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_CKRST_LN_RST_OCC_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_LN_RST_OCC_CTL_GEN2r,(_r._ckrst_ln_rst_occ_ctl_gen2))
#define BCMI_TSCF_XGXS_READLN_CKRST_LN_RST_OCC_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CKRST_LN_RST_OCC_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ckrst_ln_rst_occ_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITELN_CKRST_LN_RST_OCC_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_LN_RST_OCC_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ckrst_ln_rst_occ_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_CKRST_LN_RST_OCC_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_LN_RST_OCC_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ckrst_ln_rst_occ_ctl_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define CKRST_LN_RST_OCC_CTL_GEN2r BCMI_TSCF_XGXS_CKRST_LN_RST_OCC_CTL_GEN2r
#define CKRST_LN_RST_OCC_CTL_GEN2r_SIZE BCMI_TSCF_XGXS_CKRST_LN_RST_OCC_CTL_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_CKRST_LN_RST_OCC_CTL_GEN2r_t CKRST_LN_RST_OCC_CTL_GEN2r_t;
#define CKRST_LN_RST_OCC_CTL_GEN2r_CLR BCMI_TSCF_XGXS_CKRST_LN_RST_OCC_CTL_GEN2r_CLR
#define CKRST_LN_RST_OCC_CTL_GEN2r_SET BCMI_TSCF_XGXS_CKRST_LN_RST_OCC_CTL_GEN2r_SET
#define CKRST_LN_RST_OCC_CTL_GEN2r_GET BCMI_TSCF_XGXS_CKRST_LN_RST_OCC_CTL_GEN2r_GET
#define CKRST_LN_RST_OCC_CTL_GEN2r_LANE_REG_RESET_OCCURREDf_GET BCMI_TSCF_XGXS_CKRST_LN_RST_OCC_CTL_GEN2r_LANE_REG_RESET_OCCURREDf_GET
#define CKRST_LN_RST_OCC_CTL_GEN2r_LANE_REG_RESET_OCCURREDf_SET BCMI_TSCF_XGXS_CKRST_LN_RST_OCC_CTL_GEN2r_LANE_REG_RESET_OCCURREDf_SET
#define READ_CKRST_LN_RST_OCC_CTL_GEN2r BCMI_TSCF_XGXS_READ_CKRST_LN_RST_OCC_CTL_GEN2r
#define WRITE_CKRST_LN_RST_OCC_CTL_GEN2r BCMI_TSCF_XGXS_WRITE_CKRST_LN_RST_OCC_CTL_GEN2r
#define MODIFY_CKRST_LN_RST_OCC_CTL_GEN2r BCMI_TSCF_XGXS_MODIFY_CKRST_LN_RST_OCC_CTL_GEN2r
#define READLN_CKRST_LN_RST_OCC_CTL_GEN2r BCMI_TSCF_XGXS_READLN_CKRST_LN_RST_OCC_CTL_GEN2r
#define WRITELN_CKRST_LN_RST_OCC_CTL_GEN2r BCMI_TSCF_XGXS_WRITELN_CKRST_LN_RST_OCC_CTL_GEN2r
#define WRITEALL_CKRST_LN_RST_OCC_CTL_GEN2r BCMI_TSCF_XGXS_WRITEALL_CKRST_LN_RST_OCC_CTL_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_CKRST_LN_RST_OCC_CTL_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  CKRST_CLK_N_RST_DBG_CTL_GEN2
 * BLOCKS:   CKRST_CTRL_PMD
 * REGADDR:  0xd0b7
 * DEVAD:    1
 * DESC:     CLOCK_N_RESET_DEBUG_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LN_RX_S_CLKGATE_FRC_ON Active High Lane clock gate control for RX clock gator.It is recommended for user to force pmd_rx_clk_vld to 1'b0 while ln_rx_s_clkgate_frc_on is asserted to 1'b1by using pmd_rx_clk_vld_frc/frc_val registers.
 *     LN_RX_S_COMCLK_SEL Mux control for selection of comclk for RX Lane clocks.If asserted by writing to 1'b1 will select the comclk for the lane clocks.It is recommended for user to force pmd_rx_clk_vld to 1'b0 while ln_rx_s_comclk_sel is asserted to 1'b1by using pmd_rx_clk_vld_frc/frc_val registers.
 *     LN_RX_S_COMCLK_FRC_ON Mux control for selection of comclk for RX Lane clocks by force.If asserted by writing to 1'b1 will select the comclk for the lane clocks. This is a debug bit and should be used only for recovery from a dead AFE lane clock. Use of this bit with an active AFE clock can cause clock glitches.It is recommended for user to force pmd_rx_clk_vld to 1'b0 while ln_rx_s_comclk_frc_on is asserted to 1'b1by using pmd_rx_clk_vld_frc/frc_val registers.
 *     PMD_RX_CLK_VLD_FRC pmd_rx_clk_vld core output pin force.
 *     PMD_RX_CLK_VLD_FRC_VAL pmd_rx_clk_vld core output pin force value.
 */
#define BCMI_TSCF_XGXS_CKRST_CLK_N_RST_DBG_CTL_GEN2r (0x0001d0b7 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_CKRST_CLK_N_RST_DBG_CTL_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program CKRST_CLK_N_RST_DBG_CTL_GEN2.
 */
typedef union BCMI_TSCF_XGXS_CKRST_CLK_N_RST_DBG_CTL_GEN2r_s {
	uint32_t v[1];
	uint32_t ckrst_clk_n_rst_dbg_ctl_gen2[1];
	uint32_t _ckrst_clk_n_rst_dbg_ctl_gen2;
} BCMI_TSCF_XGXS_CKRST_CLK_N_RST_DBG_CTL_GEN2r_t;

#define BCMI_TSCF_XGXS_CKRST_CLK_N_RST_DBG_CTL_GEN2r_CLR(r) (r).ckrst_clk_n_rst_dbg_ctl_gen2[0] = 0
#define BCMI_TSCF_XGXS_CKRST_CLK_N_RST_DBG_CTL_GEN2r_SET(r,d) (r).ckrst_clk_n_rst_dbg_ctl_gen2[0] = d
#define BCMI_TSCF_XGXS_CKRST_CLK_N_RST_DBG_CTL_GEN2r_GET(r) (r).ckrst_clk_n_rst_dbg_ctl_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_CKRST_CLK_N_RST_DBG_CTL_GEN2r_PMD_RX_CLK_VLD_FRC_VALf_GET(r) ((((r).ckrst_clk_n_rst_dbg_ctl_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_CKRST_CLK_N_RST_DBG_CTL_GEN2r_PMD_RX_CLK_VLD_FRC_VALf_SET(r,f) (r).ckrst_clk_n_rst_dbg_ctl_gen2[0]=(((r).ckrst_clk_n_rst_dbg_ctl_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_CKRST_CLK_N_RST_DBG_CTL_GEN2r_PMD_RX_CLK_VLD_FRCf_GET(r) ((((r).ckrst_clk_n_rst_dbg_ctl_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_CKRST_CLK_N_RST_DBG_CTL_GEN2r_PMD_RX_CLK_VLD_FRCf_SET(r,f) (r).ckrst_clk_n_rst_dbg_ctl_gen2[0]=(((r).ckrst_clk_n_rst_dbg_ctl_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_CKRST_CLK_N_RST_DBG_CTL_GEN2r_LN_RX_S_COMCLK_FRC_ONf_GET(r) ((((r).ckrst_clk_n_rst_dbg_ctl_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_CKRST_CLK_N_RST_DBG_CTL_GEN2r_LN_RX_S_COMCLK_FRC_ONf_SET(r,f) (r).ckrst_clk_n_rst_dbg_ctl_gen2[0]=(((r).ckrst_clk_n_rst_dbg_ctl_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_CKRST_CLK_N_RST_DBG_CTL_GEN2r_LN_RX_S_COMCLK_SELf_GET(r) ((((r).ckrst_clk_n_rst_dbg_ctl_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_CKRST_CLK_N_RST_DBG_CTL_GEN2r_LN_RX_S_COMCLK_SELf_SET(r,f) (r).ckrst_clk_n_rst_dbg_ctl_gen2[0]=(((r).ckrst_clk_n_rst_dbg_ctl_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_CKRST_CLK_N_RST_DBG_CTL_GEN2r_LN_RX_S_CLKGATE_FRC_ONf_GET(r) (((r).ckrst_clk_n_rst_dbg_ctl_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_CKRST_CLK_N_RST_DBG_CTL_GEN2r_LN_RX_S_CLKGATE_FRC_ONf_SET(r,f) (r).ckrst_clk_n_rst_dbg_ctl_gen2[0]=(((r).ckrst_clk_n_rst_dbg_ctl_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access CKRST_CLK_N_RST_DBG_CTL_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_CKRST_CLK_N_RST_DBG_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CKRST_CLK_N_RST_DBG_CTL_GEN2r,(_r._ckrst_clk_n_rst_dbg_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITE_CKRST_CLK_N_RST_DBG_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_CLK_N_RST_DBG_CTL_GEN2r,(_r._ckrst_clk_n_rst_dbg_ctl_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_CKRST_CLK_N_RST_DBG_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_CLK_N_RST_DBG_CTL_GEN2r,(_r._ckrst_clk_n_rst_dbg_ctl_gen2))
#define BCMI_TSCF_XGXS_READLN_CKRST_CLK_N_RST_DBG_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CKRST_CLK_N_RST_DBG_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ckrst_clk_n_rst_dbg_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITELN_CKRST_CLK_N_RST_DBG_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_CLK_N_RST_DBG_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ckrst_clk_n_rst_dbg_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_CKRST_CLK_N_RST_DBG_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_CLK_N_RST_DBG_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ckrst_clk_n_rst_dbg_ctl_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define CKRST_CLK_N_RST_DBG_CTL_GEN2r BCMI_TSCF_XGXS_CKRST_CLK_N_RST_DBG_CTL_GEN2r
#define CKRST_CLK_N_RST_DBG_CTL_GEN2r_SIZE BCMI_TSCF_XGXS_CKRST_CLK_N_RST_DBG_CTL_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_CKRST_CLK_N_RST_DBG_CTL_GEN2r_t CKRST_CLK_N_RST_DBG_CTL_GEN2r_t;
#define CKRST_CLK_N_RST_DBG_CTL_GEN2r_CLR BCMI_TSCF_XGXS_CKRST_CLK_N_RST_DBG_CTL_GEN2r_CLR
#define CKRST_CLK_N_RST_DBG_CTL_GEN2r_SET BCMI_TSCF_XGXS_CKRST_CLK_N_RST_DBG_CTL_GEN2r_SET
#define CKRST_CLK_N_RST_DBG_CTL_GEN2r_GET BCMI_TSCF_XGXS_CKRST_CLK_N_RST_DBG_CTL_GEN2r_GET
#define CKRST_CLK_N_RST_DBG_CTL_GEN2r_PMD_RX_CLK_VLD_FRC_VALf_GET BCMI_TSCF_XGXS_CKRST_CLK_N_RST_DBG_CTL_GEN2r_PMD_RX_CLK_VLD_FRC_VALf_GET
#define CKRST_CLK_N_RST_DBG_CTL_GEN2r_PMD_RX_CLK_VLD_FRC_VALf_SET BCMI_TSCF_XGXS_CKRST_CLK_N_RST_DBG_CTL_GEN2r_PMD_RX_CLK_VLD_FRC_VALf_SET
#define CKRST_CLK_N_RST_DBG_CTL_GEN2r_PMD_RX_CLK_VLD_FRCf_GET BCMI_TSCF_XGXS_CKRST_CLK_N_RST_DBG_CTL_GEN2r_PMD_RX_CLK_VLD_FRCf_GET
#define CKRST_CLK_N_RST_DBG_CTL_GEN2r_PMD_RX_CLK_VLD_FRCf_SET BCMI_TSCF_XGXS_CKRST_CLK_N_RST_DBG_CTL_GEN2r_PMD_RX_CLK_VLD_FRCf_SET
#define CKRST_CLK_N_RST_DBG_CTL_GEN2r_LN_RX_S_COMCLK_FRC_ONf_GET BCMI_TSCF_XGXS_CKRST_CLK_N_RST_DBG_CTL_GEN2r_LN_RX_S_COMCLK_FRC_ONf_GET
#define CKRST_CLK_N_RST_DBG_CTL_GEN2r_LN_RX_S_COMCLK_FRC_ONf_SET BCMI_TSCF_XGXS_CKRST_CLK_N_RST_DBG_CTL_GEN2r_LN_RX_S_COMCLK_FRC_ONf_SET
#define CKRST_CLK_N_RST_DBG_CTL_GEN2r_LN_RX_S_COMCLK_SELf_GET BCMI_TSCF_XGXS_CKRST_CLK_N_RST_DBG_CTL_GEN2r_LN_RX_S_COMCLK_SELf_GET
#define CKRST_CLK_N_RST_DBG_CTL_GEN2r_LN_RX_S_COMCLK_SELf_SET BCMI_TSCF_XGXS_CKRST_CLK_N_RST_DBG_CTL_GEN2r_LN_RX_S_COMCLK_SELf_SET
#define CKRST_CLK_N_RST_DBG_CTL_GEN2r_LN_RX_S_CLKGATE_FRC_ONf_GET BCMI_TSCF_XGXS_CKRST_CLK_N_RST_DBG_CTL_GEN2r_LN_RX_S_CLKGATE_FRC_ONf_GET
#define CKRST_CLK_N_RST_DBG_CTL_GEN2r_LN_RX_S_CLKGATE_FRC_ONf_SET BCMI_TSCF_XGXS_CKRST_CLK_N_RST_DBG_CTL_GEN2r_LN_RX_S_CLKGATE_FRC_ONf_SET
#define READ_CKRST_CLK_N_RST_DBG_CTL_GEN2r BCMI_TSCF_XGXS_READ_CKRST_CLK_N_RST_DBG_CTL_GEN2r
#define WRITE_CKRST_CLK_N_RST_DBG_CTL_GEN2r BCMI_TSCF_XGXS_WRITE_CKRST_CLK_N_RST_DBG_CTL_GEN2r
#define MODIFY_CKRST_CLK_N_RST_DBG_CTL_GEN2r BCMI_TSCF_XGXS_MODIFY_CKRST_CLK_N_RST_DBG_CTL_GEN2r
#define READLN_CKRST_CLK_N_RST_DBG_CTL_GEN2r BCMI_TSCF_XGXS_READLN_CKRST_CLK_N_RST_DBG_CTL_GEN2r
#define WRITELN_CKRST_CLK_N_RST_DBG_CTL_GEN2r BCMI_TSCF_XGXS_WRITELN_CKRST_CLK_N_RST_DBG_CTL_GEN2r
#define WRITEALL_CKRST_CLK_N_RST_DBG_CTL_GEN2r BCMI_TSCF_XGXS_WRITEALL_CKRST_CLK_N_RST_DBG_CTL_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_CKRST_CLK_N_RST_DBG_CTL_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  CKRST_PMD_LN_MODE_STS_GEN2
 * BLOCKS:   CKRST_CTRL_PMD
 * REGADDR:  0xd0b8
 * DEVAD:    1
 * DESC:     PMD_LANE_MODE_STATUS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     PMD_LANE_MODE    This indicates the status of the core input pin pmd_lane_mode.This is driven from PCS and used for communication between PCS and PMD Micro code.
 */
#define BCMI_TSCF_XGXS_CKRST_PMD_LN_MODE_STS_GEN2r (0x0001d0b8 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_CKRST_PMD_LN_MODE_STS_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program CKRST_PMD_LN_MODE_STS_GEN2.
 */
typedef union BCMI_TSCF_XGXS_CKRST_PMD_LN_MODE_STS_GEN2r_s {
	uint32_t v[1];
	uint32_t ckrst_pmd_ln_mode_sts_gen2[1];
	uint32_t _ckrst_pmd_ln_mode_sts_gen2;
} BCMI_TSCF_XGXS_CKRST_PMD_LN_MODE_STS_GEN2r_t;

#define BCMI_TSCF_XGXS_CKRST_PMD_LN_MODE_STS_GEN2r_CLR(r) (r).ckrst_pmd_ln_mode_sts_gen2[0] = 0
#define BCMI_TSCF_XGXS_CKRST_PMD_LN_MODE_STS_GEN2r_SET(r,d) (r).ckrst_pmd_ln_mode_sts_gen2[0] = d
#define BCMI_TSCF_XGXS_CKRST_PMD_LN_MODE_STS_GEN2r_GET(r) (r).ckrst_pmd_ln_mode_sts_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_CKRST_PMD_LN_MODE_STS_GEN2r_PMD_LANE_MODEf_GET(r) (((r).ckrst_pmd_ln_mode_sts_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_CKRST_PMD_LN_MODE_STS_GEN2r_PMD_LANE_MODEf_SET(r,f) (r).ckrst_pmd_ln_mode_sts_gen2[0]=(((r).ckrst_pmd_ln_mode_sts_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access CKRST_PMD_LN_MODE_STS_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_CKRST_PMD_LN_MODE_STS_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CKRST_PMD_LN_MODE_STS_GEN2r,(_r._ckrst_pmd_ln_mode_sts_gen2))
#define BCMI_TSCF_XGXS_WRITE_CKRST_PMD_LN_MODE_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_PMD_LN_MODE_STS_GEN2r,(_r._ckrst_pmd_ln_mode_sts_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_CKRST_PMD_LN_MODE_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_PMD_LN_MODE_STS_GEN2r,(_r._ckrst_pmd_ln_mode_sts_gen2))
#define BCMI_TSCF_XGXS_READLN_CKRST_PMD_LN_MODE_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CKRST_PMD_LN_MODE_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ckrst_pmd_ln_mode_sts_gen2))
#define BCMI_TSCF_XGXS_WRITELN_CKRST_PMD_LN_MODE_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_PMD_LN_MODE_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ckrst_pmd_ln_mode_sts_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_CKRST_PMD_LN_MODE_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_PMD_LN_MODE_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ckrst_pmd_ln_mode_sts_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define CKRST_PMD_LN_MODE_STS_GEN2r BCMI_TSCF_XGXS_CKRST_PMD_LN_MODE_STS_GEN2r
#define CKRST_PMD_LN_MODE_STS_GEN2r_SIZE BCMI_TSCF_XGXS_CKRST_PMD_LN_MODE_STS_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_CKRST_PMD_LN_MODE_STS_GEN2r_t CKRST_PMD_LN_MODE_STS_GEN2r_t;
#define CKRST_PMD_LN_MODE_STS_GEN2r_CLR BCMI_TSCF_XGXS_CKRST_PMD_LN_MODE_STS_GEN2r_CLR
#define CKRST_PMD_LN_MODE_STS_GEN2r_SET BCMI_TSCF_XGXS_CKRST_PMD_LN_MODE_STS_GEN2r_SET
#define CKRST_PMD_LN_MODE_STS_GEN2r_GET BCMI_TSCF_XGXS_CKRST_PMD_LN_MODE_STS_GEN2r_GET
#define CKRST_PMD_LN_MODE_STS_GEN2r_PMD_LANE_MODEf_GET BCMI_TSCF_XGXS_CKRST_PMD_LN_MODE_STS_GEN2r_PMD_LANE_MODEf_GET
#define CKRST_PMD_LN_MODE_STS_GEN2r_PMD_LANE_MODEf_SET BCMI_TSCF_XGXS_CKRST_PMD_LN_MODE_STS_GEN2r_PMD_LANE_MODEf_SET
#define READ_CKRST_PMD_LN_MODE_STS_GEN2r BCMI_TSCF_XGXS_READ_CKRST_PMD_LN_MODE_STS_GEN2r
#define WRITE_CKRST_PMD_LN_MODE_STS_GEN2r BCMI_TSCF_XGXS_WRITE_CKRST_PMD_LN_MODE_STS_GEN2r
#define MODIFY_CKRST_PMD_LN_MODE_STS_GEN2r BCMI_TSCF_XGXS_MODIFY_CKRST_PMD_LN_MODE_STS_GEN2r
#define READLN_CKRST_PMD_LN_MODE_STS_GEN2r BCMI_TSCF_XGXS_READLN_CKRST_PMD_LN_MODE_STS_GEN2r
#define WRITELN_CKRST_PMD_LN_MODE_STS_GEN2r BCMI_TSCF_XGXS_WRITELN_CKRST_PMD_LN_MODE_STS_GEN2r
#define WRITEALL_CKRST_PMD_LN_MODE_STS_GEN2r BCMI_TSCF_XGXS_WRITEALL_CKRST_PMD_LN_MODE_STS_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_CKRST_PMD_LN_MODE_STS_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  CKRST_LN_DP_RST_ST_STS_GEN2
 * BLOCKS:   CKRST_CTRL_PMD
 * REGADDR:  0xd0b9
 * DEVAD:    1
 * DESC:     LANE_DP_RESET_STATE_STATUS
 * RESETVAL: 0x7 (7)
 * ACCESS:   R/O
 * FIELDS:
 *     LANE_DP_RESET_STATE Bit 2: lane_dp_reset_active   : Set to 1'b1 whenenver lane_dp_reset is currently requested through any register or pin controls.Bit 1: lane_dp_reset_occurred : Set to 1'b1 whenenver lane_dp_reset is currently requested through any register or pin controls and is latched high.Bit 0: lane_dp_reset_held     : Set to 1'b1 whenenver lane_dp_reset is internally held. Cleared to 1'b0, only if lane_dp_reset_state==001 and uc_ack_lane_cfg_done == 1.
 */
#define BCMI_TSCF_XGXS_CKRST_LN_DP_RST_ST_STS_GEN2r (0x0001d0b9 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_CKRST_LN_DP_RST_ST_STS_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program CKRST_LN_DP_RST_ST_STS_GEN2.
 */
typedef union BCMI_TSCF_XGXS_CKRST_LN_DP_RST_ST_STS_GEN2r_s {
	uint32_t v[1];
	uint32_t ckrst_ln_dp_rst_st_sts_gen2[1];
	uint32_t _ckrst_ln_dp_rst_st_sts_gen2;
} BCMI_TSCF_XGXS_CKRST_LN_DP_RST_ST_STS_GEN2r_t;

#define BCMI_TSCF_XGXS_CKRST_LN_DP_RST_ST_STS_GEN2r_CLR(r) (r).ckrst_ln_dp_rst_st_sts_gen2[0] = 0
#define BCMI_TSCF_XGXS_CKRST_LN_DP_RST_ST_STS_GEN2r_SET(r,d) (r).ckrst_ln_dp_rst_st_sts_gen2[0] = d
#define BCMI_TSCF_XGXS_CKRST_LN_DP_RST_ST_STS_GEN2r_GET(r) (r).ckrst_ln_dp_rst_st_sts_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_CKRST_LN_DP_RST_ST_STS_GEN2r_LANE_DP_RESET_STATEf_GET(r) (((r).ckrst_ln_dp_rst_st_sts_gen2[0]) & 0x7)
#define BCMI_TSCF_XGXS_CKRST_LN_DP_RST_ST_STS_GEN2r_LANE_DP_RESET_STATEf_SET(r,f) (r).ckrst_ln_dp_rst_st_sts_gen2[0]=(((r).ckrst_ln_dp_rst_st_sts_gen2[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access CKRST_LN_DP_RST_ST_STS_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_CKRST_LN_DP_RST_ST_STS_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CKRST_LN_DP_RST_ST_STS_GEN2r,(_r._ckrst_ln_dp_rst_st_sts_gen2))
#define BCMI_TSCF_XGXS_WRITE_CKRST_LN_DP_RST_ST_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_LN_DP_RST_ST_STS_GEN2r,(_r._ckrst_ln_dp_rst_st_sts_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_CKRST_LN_DP_RST_ST_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_LN_DP_RST_ST_STS_GEN2r,(_r._ckrst_ln_dp_rst_st_sts_gen2))
#define BCMI_TSCF_XGXS_READLN_CKRST_LN_DP_RST_ST_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CKRST_LN_DP_RST_ST_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ckrst_ln_dp_rst_st_sts_gen2))
#define BCMI_TSCF_XGXS_WRITELN_CKRST_LN_DP_RST_ST_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_LN_DP_RST_ST_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ckrst_ln_dp_rst_st_sts_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_CKRST_LN_DP_RST_ST_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_LN_DP_RST_ST_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ckrst_ln_dp_rst_st_sts_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define CKRST_LN_DP_RST_ST_STS_GEN2r BCMI_TSCF_XGXS_CKRST_LN_DP_RST_ST_STS_GEN2r
#define CKRST_LN_DP_RST_ST_STS_GEN2r_SIZE BCMI_TSCF_XGXS_CKRST_LN_DP_RST_ST_STS_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_CKRST_LN_DP_RST_ST_STS_GEN2r_t CKRST_LN_DP_RST_ST_STS_GEN2r_t;
#define CKRST_LN_DP_RST_ST_STS_GEN2r_CLR BCMI_TSCF_XGXS_CKRST_LN_DP_RST_ST_STS_GEN2r_CLR
#define CKRST_LN_DP_RST_ST_STS_GEN2r_SET BCMI_TSCF_XGXS_CKRST_LN_DP_RST_ST_STS_GEN2r_SET
#define CKRST_LN_DP_RST_ST_STS_GEN2r_GET BCMI_TSCF_XGXS_CKRST_LN_DP_RST_ST_STS_GEN2r_GET
#define CKRST_LN_DP_RST_ST_STS_GEN2r_LANE_DP_RESET_STATEf_GET BCMI_TSCF_XGXS_CKRST_LN_DP_RST_ST_STS_GEN2r_LANE_DP_RESET_STATEf_GET
#define CKRST_LN_DP_RST_ST_STS_GEN2r_LANE_DP_RESET_STATEf_SET BCMI_TSCF_XGXS_CKRST_LN_DP_RST_ST_STS_GEN2r_LANE_DP_RESET_STATEf_SET
#define READ_CKRST_LN_DP_RST_ST_STS_GEN2r BCMI_TSCF_XGXS_READ_CKRST_LN_DP_RST_ST_STS_GEN2r
#define WRITE_CKRST_LN_DP_RST_ST_STS_GEN2r BCMI_TSCF_XGXS_WRITE_CKRST_LN_DP_RST_ST_STS_GEN2r
#define MODIFY_CKRST_LN_DP_RST_ST_STS_GEN2r BCMI_TSCF_XGXS_MODIFY_CKRST_LN_DP_RST_ST_STS_GEN2r
#define READLN_CKRST_LN_DP_RST_ST_STS_GEN2r BCMI_TSCF_XGXS_READLN_CKRST_LN_DP_RST_ST_STS_GEN2r
#define WRITELN_CKRST_LN_DP_RST_ST_STS_GEN2r BCMI_TSCF_XGXS_WRITELN_CKRST_LN_DP_RST_ST_STS_GEN2r
#define WRITEALL_CKRST_LN_DP_RST_ST_STS_GEN2r BCMI_TSCF_XGXS_WRITEALL_CKRST_LN_DP_RST_ST_STS_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_CKRST_LN_DP_RST_ST_STS_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  CKRST_LN_MCST_MASK_CTL_GEN2
 * BLOCKS:   CKRST_CTRL_PMD
 * REGADDR:  0xd0ba
 * DEVAD:    1
 * DESC:     LANE_MULTICAST_MASK_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LANE_MULTICAST_MASK_CONTROL This masks the lane from a broadcast or multicast write operation.
 */
#define BCMI_TSCF_XGXS_CKRST_LN_MCST_MASK_CTL_GEN2r (0x0001d0ba | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_CKRST_LN_MCST_MASK_CTL_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program CKRST_LN_MCST_MASK_CTL_GEN2.
 */
typedef union BCMI_TSCF_XGXS_CKRST_LN_MCST_MASK_CTL_GEN2r_s {
	uint32_t v[1];
	uint32_t ckrst_ln_mcst_mask_ctl_gen2[1];
	uint32_t _ckrst_ln_mcst_mask_ctl_gen2;
} BCMI_TSCF_XGXS_CKRST_LN_MCST_MASK_CTL_GEN2r_t;

#define BCMI_TSCF_XGXS_CKRST_LN_MCST_MASK_CTL_GEN2r_CLR(r) (r).ckrst_ln_mcst_mask_ctl_gen2[0] = 0
#define BCMI_TSCF_XGXS_CKRST_LN_MCST_MASK_CTL_GEN2r_SET(r,d) (r).ckrst_ln_mcst_mask_ctl_gen2[0] = d
#define BCMI_TSCF_XGXS_CKRST_LN_MCST_MASK_CTL_GEN2r_GET(r) (r).ckrst_ln_mcst_mask_ctl_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_CKRST_LN_MCST_MASK_CTL_GEN2r_LANE_MULTICAST_MASK_CONTROLf_GET(r) (((r).ckrst_ln_mcst_mask_ctl_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_CKRST_LN_MCST_MASK_CTL_GEN2r_LANE_MULTICAST_MASK_CONTROLf_SET(r,f) (r).ckrst_ln_mcst_mask_ctl_gen2[0]=(((r).ckrst_ln_mcst_mask_ctl_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access CKRST_LN_MCST_MASK_CTL_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_CKRST_LN_MCST_MASK_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CKRST_LN_MCST_MASK_CTL_GEN2r,(_r._ckrst_ln_mcst_mask_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITE_CKRST_LN_MCST_MASK_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_LN_MCST_MASK_CTL_GEN2r,(_r._ckrst_ln_mcst_mask_ctl_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_CKRST_LN_MCST_MASK_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_LN_MCST_MASK_CTL_GEN2r,(_r._ckrst_ln_mcst_mask_ctl_gen2))
#define BCMI_TSCF_XGXS_READLN_CKRST_LN_MCST_MASK_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CKRST_LN_MCST_MASK_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ckrst_ln_mcst_mask_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITELN_CKRST_LN_MCST_MASK_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_LN_MCST_MASK_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ckrst_ln_mcst_mask_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_CKRST_LN_MCST_MASK_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_LN_MCST_MASK_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ckrst_ln_mcst_mask_ctl_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define CKRST_LN_MCST_MASK_CTL_GEN2r BCMI_TSCF_XGXS_CKRST_LN_MCST_MASK_CTL_GEN2r
#define CKRST_LN_MCST_MASK_CTL_GEN2r_SIZE BCMI_TSCF_XGXS_CKRST_LN_MCST_MASK_CTL_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_CKRST_LN_MCST_MASK_CTL_GEN2r_t CKRST_LN_MCST_MASK_CTL_GEN2r_t;
#define CKRST_LN_MCST_MASK_CTL_GEN2r_CLR BCMI_TSCF_XGXS_CKRST_LN_MCST_MASK_CTL_GEN2r_CLR
#define CKRST_LN_MCST_MASK_CTL_GEN2r_SET BCMI_TSCF_XGXS_CKRST_LN_MCST_MASK_CTL_GEN2r_SET
#define CKRST_LN_MCST_MASK_CTL_GEN2r_GET BCMI_TSCF_XGXS_CKRST_LN_MCST_MASK_CTL_GEN2r_GET
#define CKRST_LN_MCST_MASK_CTL_GEN2r_LANE_MULTICAST_MASK_CONTROLf_GET BCMI_TSCF_XGXS_CKRST_LN_MCST_MASK_CTL_GEN2r_LANE_MULTICAST_MASK_CONTROLf_GET
#define CKRST_LN_MCST_MASK_CTL_GEN2r_LANE_MULTICAST_MASK_CONTROLf_SET BCMI_TSCF_XGXS_CKRST_LN_MCST_MASK_CTL_GEN2r_LANE_MULTICAST_MASK_CONTROLf_SET
#define READ_CKRST_LN_MCST_MASK_CTL_GEN2r BCMI_TSCF_XGXS_READ_CKRST_LN_MCST_MASK_CTL_GEN2r
#define WRITE_CKRST_LN_MCST_MASK_CTL_GEN2r BCMI_TSCF_XGXS_WRITE_CKRST_LN_MCST_MASK_CTL_GEN2r
#define MODIFY_CKRST_LN_MCST_MASK_CTL_GEN2r BCMI_TSCF_XGXS_MODIFY_CKRST_LN_MCST_MASK_CTL_GEN2r
#define READLN_CKRST_LN_MCST_MASK_CTL_GEN2r BCMI_TSCF_XGXS_READLN_CKRST_LN_MCST_MASK_CTL_GEN2r
#define WRITELN_CKRST_LN_MCST_MASK_CTL_GEN2r BCMI_TSCF_XGXS_WRITELN_CKRST_LN_MCST_MASK_CTL_GEN2r
#define WRITEALL_CKRST_LN_MCST_MASK_CTL_GEN2r BCMI_TSCF_XGXS_WRITEALL_CKRST_LN_MCST_MASK_CTL_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_CKRST_LN_MCST_MASK_CTL_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  CKRST_OSR_MODE_STS_GEN2
 * BLOCKS:   CKRST_CTRL_PMD
 * REGADDR:  0xd0bb
 * DEVAD:    1
 * DESC:     OSR_MODE_STATUS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     OSR_MODE         OSR Mode status after the mux.OSR Mode status after the osr_mode_frc/frc_val mux.OSX1          4'd0OSX2          4'd1OSX4          4'd2OSX16P5       4'd8OSX20P625     4'd12
 */
#define BCMI_TSCF_XGXS_CKRST_OSR_MODE_STS_GEN2r (0x0001d0bb | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_CKRST_OSR_MODE_STS_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program CKRST_OSR_MODE_STS_GEN2.
 */
typedef union BCMI_TSCF_XGXS_CKRST_OSR_MODE_STS_GEN2r_s {
	uint32_t v[1];
	uint32_t ckrst_osr_mode_sts_gen2[1];
	uint32_t _ckrst_osr_mode_sts_gen2;
} BCMI_TSCF_XGXS_CKRST_OSR_MODE_STS_GEN2r_t;

#define BCMI_TSCF_XGXS_CKRST_OSR_MODE_STS_GEN2r_CLR(r) (r).ckrst_osr_mode_sts_gen2[0] = 0
#define BCMI_TSCF_XGXS_CKRST_OSR_MODE_STS_GEN2r_SET(r,d) (r).ckrst_osr_mode_sts_gen2[0] = d
#define BCMI_TSCF_XGXS_CKRST_OSR_MODE_STS_GEN2r_GET(r) (r).ckrst_osr_mode_sts_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_CKRST_OSR_MODE_STS_GEN2r_OSR_MODEf_GET(r) (((r).ckrst_osr_mode_sts_gen2[0]) & 0xf)
#define BCMI_TSCF_XGXS_CKRST_OSR_MODE_STS_GEN2r_OSR_MODEf_SET(r,f) (r).ckrst_osr_mode_sts_gen2[0]=(((r).ckrst_osr_mode_sts_gen2[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access CKRST_OSR_MODE_STS_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_CKRST_OSR_MODE_STS_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CKRST_OSR_MODE_STS_GEN2r,(_r._ckrst_osr_mode_sts_gen2))
#define BCMI_TSCF_XGXS_WRITE_CKRST_OSR_MODE_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_OSR_MODE_STS_GEN2r,(_r._ckrst_osr_mode_sts_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_CKRST_OSR_MODE_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_OSR_MODE_STS_GEN2r,(_r._ckrst_osr_mode_sts_gen2))
#define BCMI_TSCF_XGXS_READLN_CKRST_OSR_MODE_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CKRST_OSR_MODE_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ckrst_osr_mode_sts_gen2))
#define BCMI_TSCF_XGXS_WRITELN_CKRST_OSR_MODE_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_OSR_MODE_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ckrst_osr_mode_sts_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_CKRST_OSR_MODE_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_OSR_MODE_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ckrst_osr_mode_sts_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define CKRST_OSR_MODE_STS_GEN2r BCMI_TSCF_XGXS_CKRST_OSR_MODE_STS_GEN2r
#define CKRST_OSR_MODE_STS_GEN2r_SIZE BCMI_TSCF_XGXS_CKRST_OSR_MODE_STS_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_CKRST_OSR_MODE_STS_GEN2r_t CKRST_OSR_MODE_STS_GEN2r_t;
#define CKRST_OSR_MODE_STS_GEN2r_CLR BCMI_TSCF_XGXS_CKRST_OSR_MODE_STS_GEN2r_CLR
#define CKRST_OSR_MODE_STS_GEN2r_SET BCMI_TSCF_XGXS_CKRST_OSR_MODE_STS_GEN2r_SET
#define CKRST_OSR_MODE_STS_GEN2r_GET BCMI_TSCF_XGXS_CKRST_OSR_MODE_STS_GEN2r_GET
#define CKRST_OSR_MODE_STS_GEN2r_OSR_MODEf_GET BCMI_TSCF_XGXS_CKRST_OSR_MODE_STS_GEN2r_OSR_MODEf_GET
#define CKRST_OSR_MODE_STS_GEN2r_OSR_MODEf_SET BCMI_TSCF_XGXS_CKRST_OSR_MODE_STS_GEN2r_OSR_MODEf_SET
#define READ_CKRST_OSR_MODE_STS_GEN2r BCMI_TSCF_XGXS_READ_CKRST_OSR_MODE_STS_GEN2r
#define WRITE_CKRST_OSR_MODE_STS_GEN2r BCMI_TSCF_XGXS_WRITE_CKRST_OSR_MODE_STS_GEN2r
#define MODIFY_CKRST_OSR_MODE_STS_GEN2r BCMI_TSCF_XGXS_MODIFY_CKRST_OSR_MODE_STS_GEN2r
#define READLN_CKRST_OSR_MODE_STS_GEN2r BCMI_TSCF_XGXS_READLN_CKRST_OSR_MODE_STS_GEN2r
#define WRITELN_CKRST_OSR_MODE_STS_GEN2r BCMI_TSCF_XGXS_WRITELN_CKRST_OSR_MODE_STS_GEN2r
#define WRITEALL_CKRST_OSR_MODE_STS_GEN2r BCMI_TSCF_XGXS_WRITEALL_CKRST_OSR_MODE_STS_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_CKRST_OSR_MODE_STS_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  CKRST_OSR_MODE_PIN_STS_GEN2
 * BLOCKS:   CKRST_CTRL_PMD
 * REGADDR:  0xd0bc
 * DEVAD:    1
 * DESC:     OSR_MODE_PIN_STATUS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     OSR_MODE_PIN     Indicates the status of the pmd_osr_mode input pin.Decoding of pmd_osr_mode[3:0] pin and osr_mode registers are as follows.OSX1          4'd0OSX2          4'd1OSX4          4'd2OSX16P5       4'd8OSX20P625     4'd12
 */
#define BCMI_TSCF_XGXS_CKRST_OSR_MODE_PIN_STS_GEN2r (0x0001d0bc | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_CKRST_OSR_MODE_PIN_STS_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program CKRST_OSR_MODE_PIN_STS_GEN2.
 */
typedef union BCMI_TSCF_XGXS_CKRST_OSR_MODE_PIN_STS_GEN2r_s {
	uint32_t v[1];
	uint32_t ckrst_osr_mode_pin_sts_gen2[1];
	uint32_t _ckrst_osr_mode_pin_sts_gen2;
} BCMI_TSCF_XGXS_CKRST_OSR_MODE_PIN_STS_GEN2r_t;

#define BCMI_TSCF_XGXS_CKRST_OSR_MODE_PIN_STS_GEN2r_CLR(r) (r).ckrst_osr_mode_pin_sts_gen2[0] = 0
#define BCMI_TSCF_XGXS_CKRST_OSR_MODE_PIN_STS_GEN2r_SET(r,d) (r).ckrst_osr_mode_pin_sts_gen2[0] = d
#define BCMI_TSCF_XGXS_CKRST_OSR_MODE_PIN_STS_GEN2r_GET(r) (r).ckrst_osr_mode_pin_sts_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_CKRST_OSR_MODE_PIN_STS_GEN2r_OSR_MODE_PINf_GET(r) (((r).ckrst_osr_mode_pin_sts_gen2[0]) & 0xf)
#define BCMI_TSCF_XGXS_CKRST_OSR_MODE_PIN_STS_GEN2r_OSR_MODE_PINf_SET(r,f) (r).ckrst_osr_mode_pin_sts_gen2[0]=(((r).ckrst_osr_mode_pin_sts_gen2[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access CKRST_OSR_MODE_PIN_STS_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_CKRST_OSR_MODE_PIN_STS_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CKRST_OSR_MODE_PIN_STS_GEN2r,(_r._ckrst_osr_mode_pin_sts_gen2))
#define BCMI_TSCF_XGXS_WRITE_CKRST_OSR_MODE_PIN_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_OSR_MODE_PIN_STS_GEN2r,(_r._ckrst_osr_mode_pin_sts_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_CKRST_OSR_MODE_PIN_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_OSR_MODE_PIN_STS_GEN2r,(_r._ckrst_osr_mode_pin_sts_gen2))
#define BCMI_TSCF_XGXS_READLN_CKRST_OSR_MODE_PIN_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CKRST_OSR_MODE_PIN_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ckrst_osr_mode_pin_sts_gen2))
#define BCMI_TSCF_XGXS_WRITELN_CKRST_OSR_MODE_PIN_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_OSR_MODE_PIN_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ckrst_osr_mode_pin_sts_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_CKRST_OSR_MODE_PIN_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_OSR_MODE_PIN_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ckrst_osr_mode_pin_sts_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define CKRST_OSR_MODE_PIN_STS_GEN2r BCMI_TSCF_XGXS_CKRST_OSR_MODE_PIN_STS_GEN2r
#define CKRST_OSR_MODE_PIN_STS_GEN2r_SIZE BCMI_TSCF_XGXS_CKRST_OSR_MODE_PIN_STS_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_CKRST_OSR_MODE_PIN_STS_GEN2r_t CKRST_OSR_MODE_PIN_STS_GEN2r_t;
#define CKRST_OSR_MODE_PIN_STS_GEN2r_CLR BCMI_TSCF_XGXS_CKRST_OSR_MODE_PIN_STS_GEN2r_CLR
#define CKRST_OSR_MODE_PIN_STS_GEN2r_SET BCMI_TSCF_XGXS_CKRST_OSR_MODE_PIN_STS_GEN2r_SET
#define CKRST_OSR_MODE_PIN_STS_GEN2r_GET BCMI_TSCF_XGXS_CKRST_OSR_MODE_PIN_STS_GEN2r_GET
#define CKRST_OSR_MODE_PIN_STS_GEN2r_OSR_MODE_PINf_GET BCMI_TSCF_XGXS_CKRST_OSR_MODE_PIN_STS_GEN2r_OSR_MODE_PINf_GET
#define CKRST_OSR_MODE_PIN_STS_GEN2r_OSR_MODE_PINf_SET BCMI_TSCF_XGXS_CKRST_OSR_MODE_PIN_STS_GEN2r_OSR_MODE_PINf_SET
#define READ_CKRST_OSR_MODE_PIN_STS_GEN2r BCMI_TSCF_XGXS_READ_CKRST_OSR_MODE_PIN_STS_GEN2r
#define WRITE_CKRST_OSR_MODE_PIN_STS_GEN2r BCMI_TSCF_XGXS_WRITE_CKRST_OSR_MODE_PIN_STS_GEN2r
#define MODIFY_CKRST_OSR_MODE_PIN_STS_GEN2r BCMI_TSCF_XGXS_MODIFY_CKRST_OSR_MODE_PIN_STS_GEN2r
#define READLN_CKRST_OSR_MODE_PIN_STS_GEN2r BCMI_TSCF_XGXS_READLN_CKRST_OSR_MODE_PIN_STS_GEN2r
#define WRITELN_CKRST_OSR_MODE_PIN_STS_GEN2r BCMI_TSCF_XGXS_WRITELN_CKRST_OSR_MODE_PIN_STS_GEN2r
#define WRITEALL_CKRST_OSR_MODE_PIN_STS_GEN2r BCMI_TSCF_XGXS_WRITEALL_CKRST_OSR_MODE_PIN_STS_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_CKRST_OSR_MODE_PIN_STS_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  CKRST_LN_S_RSTB_CTL_GEN2
 * BLOCKS:   CKRST_CTRL_PMD
 * REGADDR:  0xd0be
 * DEVAD:    1
 * DESC:     LN_S_RSTB_CONTROL
 * RESETVAL: 0x1 (1)
 * ACCESS:   R/W
 * FIELDS:
 *     LN_S_RSTB        Active Low Lane Soft Reset. If asserted by writing to 1'b0 will reset the registers and datapath for a lane.This soft reset is equivalent to the hard reset input pin pmd_ln_h_rstb_i.
 */
#define BCMI_TSCF_XGXS_CKRST_LN_S_RSTB_CTL_GEN2r (0x0001d0be | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_CKRST_LN_S_RSTB_CTL_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program CKRST_LN_S_RSTB_CTL_GEN2.
 */
typedef union BCMI_TSCF_XGXS_CKRST_LN_S_RSTB_CTL_GEN2r_s {
	uint32_t v[1];
	uint32_t ckrst_ln_s_rstb_ctl_gen2[1];
	uint32_t _ckrst_ln_s_rstb_ctl_gen2;
} BCMI_TSCF_XGXS_CKRST_LN_S_RSTB_CTL_GEN2r_t;

#define BCMI_TSCF_XGXS_CKRST_LN_S_RSTB_CTL_GEN2r_CLR(r) (r).ckrst_ln_s_rstb_ctl_gen2[0] = 0
#define BCMI_TSCF_XGXS_CKRST_LN_S_RSTB_CTL_GEN2r_SET(r,d) (r).ckrst_ln_s_rstb_ctl_gen2[0] = d
#define BCMI_TSCF_XGXS_CKRST_LN_S_RSTB_CTL_GEN2r_GET(r) (r).ckrst_ln_s_rstb_ctl_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_CKRST_LN_S_RSTB_CTL_GEN2r_LN_S_RSTBf_GET(r) (((r).ckrst_ln_s_rstb_ctl_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_CKRST_LN_S_RSTB_CTL_GEN2r_LN_S_RSTBf_SET(r,f) (r).ckrst_ln_s_rstb_ctl_gen2[0]=(((r).ckrst_ln_s_rstb_ctl_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access CKRST_LN_S_RSTB_CTL_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_CKRST_LN_S_RSTB_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CKRST_LN_S_RSTB_CTL_GEN2r,(_r._ckrst_ln_s_rstb_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITE_CKRST_LN_S_RSTB_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_LN_S_RSTB_CTL_GEN2r,(_r._ckrst_ln_s_rstb_ctl_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_CKRST_LN_S_RSTB_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_LN_S_RSTB_CTL_GEN2r,(_r._ckrst_ln_s_rstb_ctl_gen2))
#define BCMI_TSCF_XGXS_READLN_CKRST_LN_S_RSTB_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_CKRST_LN_S_RSTB_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ckrst_ln_s_rstb_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITELN_CKRST_LN_S_RSTB_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_LN_S_RSTB_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ckrst_ln_s_rstb_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_CKRST_LN_S_RSTB_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_CKRST_LN_S_RSTB_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ckrst_ln_s_rstb_ctl_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define CKRST_LN_S_RSTB_CTL_GEN2r BCMI_TSCF_XGXS_CKRST_LN_S_RSTB_CTL_GEN2r
#define CKRST_LN_S_RSTB_CTL_GEN2r_SIZE BCMI_TSCF_XGXS_CKRST_LN_S_RSTB_CTL_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_CKRST_LN_S_RSTB_CTL_GEN2r_t CKRST_LN_S_RSTB_CTL_GEN2r_t;
#define CKRST_LN_S_RSTB_CTL_GEN2r_CLR BCMI_TSCF_XGXS_CKRST_LN_S_RSTB_CTL_GEN2r_CLR
#define CKRST_LN_S_RSTB_CTL_GEN2r_SET BCMI_TSCF_XGXS_CKRST_LN_S_RSTB_CTL_GEN2r_SET
#define CKRST_LN_S_RSTB_CTL_GEN2r_GET BCMI_TSCF_XGXS_CKRST_LN_S_RSTB_CTL_GEN2r_GET
#define CKRST_LN_S_RSTB_CTL_GEN2r_LN_S_RSTBf_GET BCMI_TSCF_XGXS_CKRST_LN_S_RSTB_CTL_GEN2r_LN_S_RSTBf_GET
#define CKRST_LN_S_RSTB_CTL_GEN2r_LN_S_RSTBf_SET BCMI_TSCF_XGXS_CKRST_LN_S_RSTB_CTL_GEN2r_LN_S_RSTBf_SET
#define READ_CKRST_LN_S_RSTB_CTL_GEN2r BCMI_TSCF_XGXS_READ_CKRST_LN_S_RSTB_CTL_GEN2r
#define WRITE_CKRST_LN_S_RSTB_CTL_GEN2r BCMI_TSCF_XGXS_WRITE_CKRST_LN_S_RSTB_CTL_GEN2r
#define MODIFY_CKRST_LN_S_RSTB_CTL_GEN2r BCMI_TSCF_XGXS_MODIFY_CKRST_LN_S_RSTB_CTL_GEN2r
#define READLN_CKRST_LN_S_RSTB_CTL_GEN2r BCMI_TSCF_XGXS_READLN_CKRST_LN_S_RSTB_CTL_GEN2r
#define WRITELN_CKRST_LN_S_RSTB_CTL_GEN2r BCMI_TSCF_XGXS_WRITELN_CKRST_LN_S_RSTB_CTL_GEN2r
#define WRITEALL_CKRST_LN_S_RSTB_CTL_GEN2r BCMI_TSCF_XGXS_WRITEALL_CKRST_LN_S_RSTB_CTL_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_CKRST_LN_S_RSTB_CTL_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AMS_RX_CTL_0_GEN2
 * BLOCKS:   AMS_RX
 * REGADDR:  0xd0c0
 * DEVAD:    1
 * DESC:     AMS RX CONTROL_0
 * RESETVAL: 0x10 (16)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_RX_MASTER_DIODES_IBIAS master diodes ibias (max, mode, min)
 *     AMS_RX_SIGDET_THRESHOLD NA. Please use afe_sigdet_thresh from sigdet module.
 *     AMS_RX_SIGDET_PWRDN default=0 for enable signal detector
 *     AMS_RX_SIGDET_BYPASS force sigdet output = 1
 *     AMS_RX_TPORT_EN  output rx_rclk20 to PLL test port
 *     AMS_RX_VGA_10G_BW enables lower freq EQ peaking used in 10G mode
 *     AMS_RX_EQ_LZ_EN  DFE summer and buffer for non-DFE modes
 *     AMS_RX_DFE_HGAIN_EN enables high, fixed gain for the DFE summer and buffer.
 *     AMS_RX_DC_COUPLE for QSGMII DC mode with 50 Ohm pull-up to RVDD1p0
 *     AMS_RX_PEAKING_FILTER_IBIAS peaking filter ibias (max, mode, min)
 */
#define BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r (0x0001d0c0 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AMS_RX_CTL_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r_s {
	uint32_t v[1];
	uint32_t ams_rx_ctl_0_gen2[1];
	uint32_t _ams_rx_ctl_0_gen2;
} BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r_t;

#define BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r_CLR(r) (r).ams_rx_ctl_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r_SET(r,d) (r).ams_rx_ctl_0_gen2[0] = d
#define BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r_GET(r) (r).ams_rx_ctl_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r_AMS_RX_PEAKING_FILTER_IBIASf_GET(r) ((((r).ams_rx_ctl_0_gen2[0]) >> 13) & 0x7)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r_AMS_RX_PEAKING_FILTER_IBIASf_SET(r,f) (r).ams_rx_ctl_0_gen2[0]=(((r).ams_rx_ctl_0_gen2[0] & ~((uint32_t)0x7 << 13)) | ((((uint32_t)f) & 0x7) << 13)) | (7 << (16 + 13))
#define BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r_AMS_RX_DC_COUPLEf_GET(r) ((((r).ams_rx_ctl_0_gen2[0]) >> 12) & 0x1)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r_AMS_RX_DC_COUPLEf_SET(r,f) (r).ams_rx_ctl_0_gen2[0]=(((r).ams_rx_ctl_0_gen2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r_AMS_RX_DFE_HGAIN_ENf_GET(r) ((((r).ams_rx_ctl_0_gen2[0]) >> 11) & 0x1)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r_AMS_RX_DFE_HGAIN_ENf_SET(r,f) (r).ams_rx_ctl_0_gen2[0]=(((r).ams_rx_ctl_0_gen2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r_AMS_RX_EQ_LZ_ENf_GET(r) ((((r).ams_rx_ctl_0_gen2[0]) >> 10) & 0x1)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r_AMS_RX_EQ_LZ_ENf_SET(r,f) (r).ams_rx_ctl_0_gen2[0]=(((r).ams_rx_ctl_0_gen2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r_AMS_RX_VGA_10G_BWf_GET(r) ((((r).ams_rx_ctl_0_gen2[0]) >> 9) & 0x1)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r_AMS_RX_VGA_10G_BWf_SET(r,f) (r).ams_rx_ctl_0_gen2[0]=(((r).ams_rx_ctl_0_gen2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r_AMS_RX_TPORT_ENf_GET(r) ((((r).ams_rx_ctl_0_gen2[0]) >> 8) & 0x1)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r_AMS_RX_TPORT_ENf_SET(r,f) (r).ams_rx_ctl_0_gen2[0]=(((r).ams_rx_ctl_0_gen2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r_AMS_RX_SIGDET_BYPASSf_GET(r) ((((r).ams_rx_ctl_0_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r_AMS_RX_SIGDET_BYPASSf_SET(r,f) (r).ams_rx_ctl_0_gen2[0]=(((r).ams_rx_ctl_0_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r_AMS_RX_SIGDET_PWRDNf_GET(r) ((((r).ams_rx_ctl_0_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r_AMS_RX_SIGDET_PWRDNf_SET(r,f) (r).ams_rx_ctl_0_gen2[0]=(((r).ams_rx_ctl_0_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r_AMS_RX_SIGDET_THRESHOLDf_GET(r) ((((r).ams_rx_ctl_0_gen2[0]) >> 3) & 0x7)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r_AMS_RX_SIGDET_THRESHOLDf_SET(r,f) (r).ams_rx_ctl_0_gen2[0]=(((r).ams_rx_ctl_0_gen2[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3)) | (7 << (16 + 3))
#define BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r_AMS_RX_MASTER_DIODES_IBIASf_GET(r) (((r).ams_rx_ctl_0_gen2[0]) & 0x7)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r_AMS_RX_MASTER_DIODES_IBIASf_SET(r,f) (r).ams_rx_ctl_0_gen2[0]=(((r).ams_rx_ctl_0_gen2[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access AMS_RX_CTL_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AMS_RX_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r,(_r._ams_rx_ctl_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_AMS_RX_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r,(_r._ams_rx_ctl_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AMS_RX_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r,(_r._ams_rx_ctl_0_gen2))
#define BCMI_TSCF_XGXS_READLN_AMS_RX_CTL_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_ctl_0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AMS_RX_CTL_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_ctl_0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AMS_RX_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_rx_ctl_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_RX_CTL_0_GEN2r BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r
#define AMS_RX_CTL_0_GEN2r_SIZE BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r_t AMS_RX_CTL_0_GEN2r_t;
#define AMS_RX_CTL_0_GEN2r_CLR BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r_CLR
#define AMS_RX_CTL_0_GEN2r_SET BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r_SET
#define AMS_RX_CTL_0_GEN2r_GET BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r_GET
#define AMS_RX_CTL_0_GEN2r_AMS_RX_PEAKING_FILTER_IBIASf_GET BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r_AMS_RX_PEAKING_FILTER_IBIASf_GET
#define AMS_RX_CTL_0_GEN2r_AMS_RX_PEAKING_FILTER_IBIASf_SET BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r_AMS_RX_PEAKING_FILTER_IBIASf_SET
#define AMS_RX_CTL_0_GEN2r_AMS_RX_DC_COUPLEf_GET BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r_AMS_RX_DC_COUPLEf_GET
#define AMS_RX_CTL_0_GEN2r_AMS_RX_DC_COUPLEf_SET BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r_AMS_RX_DC_COUPLEf_SET
#define AMS_RX_CTL_0_GEN2r_AMS_RX_DFE_HGAIN_ENf_GET BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r_AMS_RX_DFE_HGAIN_ENf_GET
#define AMS_RX_CTL_0_GEN2r_AMS_RX_DFE_HGAIN_ENf_SET BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r_AMS_RX_DFE_HGAIN_ENf_SET
#define AMS_RX_CTL_0_GEN2r_AMS_RX_EQ_LZ_ENf_GET BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r_AMS_RX_EQ_LZ_ENf_GET
#define AMS_RX_CTL_0_GEN2r_AMS_RX_EQ_LZ_ENf_SET BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r_AMS_RX_EQ_LZ_ENf_SET
#define AMS_RX_CTL_0_GEN2r_AMS_RX_VGA_10G_BWf_GET BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r_AMS_RX_VGA_10G_BWf_GET
#define AMS_RX_CTL_0_GEN2r_AMS_RX_VGA_10G_BWf_SET BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r_AMS_RX_VGA_10G_BWf_SET
#define AMS_RX_CTL_0_GEN2r_AMS_RX_TPORT_ENf_GET BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r_AMS_RX_TPORT_ENf_GET
#define AMS_RX_CTL_0_GEN2r_AMS_RX_TPORT_ENf_SET BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r_AMS_RX_TPORT_ENf_SET
#define AMS_RX_CTL_0_GEN2r_AMS_RX_SIGDET_BYPASSf_GET BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r_AMS_RX_SIGDET_BYPASSf_GET
#define AMS_RX_CTL_0_GEN2r_AMS_RX_SIGDET_BYPASSf_SET BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r_AMS_RX_SIGDET_BYPASSf_SET
#define AMS_RX_CTL_0_GEN2r_AMS_RX_SIGDET_PWRDNf_GET BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r_AMS_RX_SIGDET_PWRDNf_GET
#define AMS_RX_CTL_0_GEN2r_AMS_RX_SIGDET_PWRDNf_SET BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r_AMS_RX_SIGDET_PWRDNf_SET
#define AMS_RX_CTL_0_GEN2r_AMS_RX_SIGDET_THRESHOLDf_GET BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r_AMS_RX_SIGDET_THRESHOLDf_GET
#define AMS_RX_CTL_0_GEN2r_AMS_RX_SIGDET_THRESHOLDf_SET BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r_AMS_RX_SIGDET_THRESHOLDf_SET
#define AMS_RX_CTL_0_GEN2r_AMS_RX_MASTER_DIODES_IBIASf_GET BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r_AMS_RX_MASTER_DIODES_IBIASf_GET
#define AMS_RX_CTL_0_GEN2r_AMS_RX_MASTER_DIODES_IBIASf_SET BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r_AMS_RX_MASTER_DIODES_IBIASf_SET
#define READ_AMS_RX_CTL_0_GEN2r BCMI_TSCF_XGXS_READ_AMS_RX_CTL_0_GEN2r
#define WRITE_AMS_RX_CTL_0_GEN2r BCMI_TSCF_XGXS_WRITE_AMS_RX_CTL_0_GEN2r
#define MODIFY_AMS_RX_CTL_0_GEN2r BCMI_TSCF_XGXS_MODIFY_AMS_RX_CTL_0_GEN2r
#define READLN_AMS_RX_CTL_0_GEN2r BCMI_TSCF_XGXS_READLN_AMS_RX_CTL_0_GEN2r
#define WRITELN_AMS_RX_CTL_0_GEN2r BCMI_TSCF_XGXS_WRITELN_AMS_RX_CTL_0_GEN2r
#define WRITEALL_AMS_RX_CTL_0_GEN2r BCMI_TSCF_XGXS_WRITEALL_AMS_RX_CTL_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AMS_RX_CTL_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AMS_RX_CTL_1_GEN2
 * BLOCKS:   AMS_RX
 * REGADDR:  0xd0c1
 * DEVAD:    1
 * DESC:     AMS RX CONTROL_1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_RX_SPARE_16  ams rx reserved [16]
 *     AMS_RX_VGA0_IBIAS VGA0 ibias (max, mode, min)
 *     AMS_RX_VGA1_IBIAS VGA1 ibias (max, mode, min)
 *     AMS_RX_VGA2_IBIAS VGA2 ibias (max, mode, min)
 *     AMS_RX_VGA3_IBIAS VGA3 ibias (max, mode, min)
 *     AMS_RX_CM_VOLTAGE_IBIAS input CM voltage ibias (max, mode, min)
 */
#define BCMI_TSCF_XGXS_AMS_RX_CTL_1_GEN2r (0x0001d0c1 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AMS_RX_CTL_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AMS_RX_CTL_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AMS_RX_CTL_1_GEN2r_s {
	uint32_t v[1];
	uint32_t ams_rx_ctl_1_gen2[1];
	uint32_t _ams_rx_ctl_1_gen2;
} BCMI_TSCF_XGXS_AMS_RX_CTL_1_GEN2r_t;

#define BCMI_TSCF_XGXS_AMS_RX_CTL_1_GEN2r_CLR(r) (r).ams_rx_ctl_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_AMS_RX_CTL_1_GEN2r_SET(r,d) (r).ams_rx_ctl_1_gen2[0] = d
#define BCMI_TSCF_XGXS_AMS_RX_CTL_1_GEN2r_GET(r) (r).ams_rx_ctl_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AMS_RX_CTL_1_GEN2r_AMS_RX_CM_VOLTAGE_IBIASf_GET(r) ((((r).ams_rx_ctl_1_gen2[0]) >> 13) & 0x7)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_1_GEN2r_AMS_RX_CM_VOLTAGE_IBIASf_SET(r,f) (r).ams_rx_ctl_1_gen2[0]=(((r).ams_rx_ctl_1_gen2[0] & ~((uint32_t)0x7 << 13)) | ((((uint32_t)f) & 0x7) << 13)) | (7 << (16 + 13))
#define BCMI_TSCF_XGXS_AMS_RX_CTL_1_GEN2r_AMS_RX_VGA3_IBIASf_GET(r) ((((r).ams_rx_ctl_1_gen2[0]) >> 10) & 0x7)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_1_GEN2r_AMS_RX_VGA3_IBIASf_SET(r,f) (r).ams_rx_ctl_1_gen2[0]=(((r).ams_rx_ctl_1_gen2[0] & ~((uint32_t)0x7 << 10)) | ((((uint32_t)f) & 0x7) << 10)) | (7 << (16 + 10))
#define BCMI_TSCF_XGXS_AMS_RX_CTL_1_GEN2r_AMS_RX_VGA2_IBIASf_GET(r) ((((r).ams_rx_ctl_1_gen2[0]) >> 7) & 0x7)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_1_GEN2r_AMS_RX_VGA2_IBIASf_SET(r,f) (r).ams_rx_ctl_1_gen2[0]=(((r).ams_rx_ctl_1_gen2[0] & ~((uint32_t)0x7 << 7)) | ((((uint32_t)f) & 0x7) << 7)) | (7 << (16 + 7))
#define BCMI_TSCF_XGXS_AMS_RX_CTL_1_GEN2r_AMS_RX_VGA1_IBIASf_GET(r) ((((r).ams_rx_ctl_1_gen2[0]) >> 4) & 0x7)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_1_GEN2r_AMS_RX_VGA1_IBIASf_SET(r,f) (r).ams_rx_ctl_1_gen2[0]=(((r).ams_rx_ctl_1_gen2[0] & ~((uint32_t)0x7 << 4)) | ((((uint32_t)f) & 0x7) << 4)) | (7 << (16 + 4))
#define BCMI_TSCF_XGXS_AMS_RX_CTL_1_GEN2r_AMS_RX_VGA0_IBIASf_GET(r) ((((r).ams_rx_ctl_1_gen2[0]) >> 1) & 0x7)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_1_GEN2r_AMS_RX_VGA0_IBIASf_SET(r,f) (r).ams_rx_ctl_1_gen2[0]=(((r).ams_rx_ctl_1_gen2[0] & ~((uint32_t)0x7 << 1)) | ((((uint32_t)f) & 0x7) << 1)) | (7 << (16 + 1))
#define BCMI_TSCF_XGXS_AMS_RX_CTL_1_GEN2r_AMS_RX_SPARE_16f_GET(r) (((r).ams_rx_ctl_1_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_1_GEN2r_AMS_RX_SPARE_16f_SET(r,f) (r).ams_rx_ctl_1_gen2[0]=(((r).ams_rx_ctl_1_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AMS_RX_CTL_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AMS_RX_CTL_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_1_GEN2r,(_r._ams_rx_ctl_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_AMS_RX_CTL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_1_GEN2r,(_r._ams_rx_ctl_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AMS_RX_CTL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_1_GEN2r,(_r._ams_rx_ctl_1_gen2))
#define BCMI_TSCF_XGXS_READLN_AMS_RX_CTL_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_ctl_1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AMS_RX_CTL_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_ctl_1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AMS_RX_CTL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_rx_ctl_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_RX_CTL_1_GEN2r BCMI_TSCF_XGXS_AMS_RX_CTL_1_GEN2r
#define AMS_RX_CTL_1_GEN2r_SIZE BCMI_TSCF_XGXS_AMS_RX_CTL_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AMS_RX_CTL_1_GEN2r_t AMS_RX_CTL_1_GEN2r_t;
#define AMS_RX_CTL_1_GEN2r_CLR BCMI_TSCF_XGXS_AMS_RX_CTL_1_GEN2r_CLR
#define AMS_RX_CTL_1_GEN2r_SET BCMI_TSCF_XGXS_AMS_RX_CTL_1_GEN2r_SET
#define AMS_RX_CTL_1_GEN2r_GET BCMI_TSCF_XGXS_AMS_RX_CTL_1_GEN2r_GET
#define AMS_RX_CTL_1_GEN2r_AMS_RX_CM_VOLTAGE_IBIASf_GET BCMI_TSCF_XGXS_AMS_RX_CTL_1_GEN2r_AMS_RX_CM_VOLTAGE_IBIASf_GET
#define AMS_RX_CTL_1_GEN2r_AMS_RX_CM_VOLTAGE_IBIASf_SET BCMI_TSCF_XGXS_AMS_RX_CTL_1_GEN2r_AMS_RX_CM_VOLTAGE_IBIASf_SET
#define AMS_RX_CTL_1_GEN2r_AMS_RX_VGA3_IBIASf_GET BCMI_TSCF_XGXS_AMS_RX_CTL_1_GEN2r_AMS_RX_VGA3_IBIASf_GET
#define AMS_RX_CTL_1_GEN2r_AMS_RX_VGA3_IBIASf_SET BCMI_TSCF_XGXS_AMS_RX_CTL_1_GEN2r_AMS_RX_VGA3_IBIASf_SET
#define AMS_RX_CTL_1_GEN2r_AMS_RX_VGA2_IBIASf_GET BCMI_TSCF_XGXS_AMS_RX_CTL_1_GEN2r_AMS_RX_VGA2_IBIASf_GET
#define AMS_RX_CTL_1_GEN2r_AMS_RX_VGA2_IBIASf_SET BCMI_TSCF_XGXS_AMS_RX_CTL_1_GEN2r_AMS_RX_VGA2_IBIASf_SET
#define AMS_RX_CTL_1_GEN2r_AMS_RX_VGA1_IBIASf_GET BCMI_TSCF_XGXS_AMS_RX_CTL_1_GEN2r_AMS_RX_VGA1_IBIASf_GET
#define AMS_RX_CTL_1_GEN2r_AMS_RX_VGA1_IBIASf_SET BCMI_TSCF_XGXS_AMS_RX_CTL_1_GEN2r_AMS_RX_VGA1_IBIASf_SET
#define AMS_RX_CTL_1_GEN2r_AMS_RX_VGA0_IBIASf_GET BCMI_TSCF_XGXS_AMS_RX_CTL_1_GEN2r_AMS_RX_VGA0_IBIASf_GET
#define AMS_RX_CTL_1_GEN2r_AMS_RX_VGA0_IBIASf_SET BCMI_TSCF_XGXS_AMS_RX_CTL_1_GEN2r_AMS_RX_VGA0_IBIASf_SET
#define AMS_RX_CTL_1_GEN2r_AMS_RX_SPARE_16f_GET BCMI_TSCF_XGXS_AMS_RX_CTL_1_GEN2r_AMS_RX_SPARE_16f_GET
#define AMS_RX_CTL_1_GEN2r_AMS_RX_SPARE_16f_SET BCMI_TSCF_XGXS_AMS_RX_CTL_1_GEN2r_AMS_RX_SPARE_16f_SET
#define READ_AMS_RX_CTL_1_GEN2r BCMI_TSCF_XGXS_READ_AMS_RX_CTL_1_GEN2r
#define WRITE_AMS_RX_CTL_1_GEN2r BCMI_TSCF_XGXS_WRITE_AMS_RX_CTL_1_GEN2r
#define MODIFY_AMS_RX_CTL_1_GEN2r BCMI_TSCF_XGXS_MODIFY_AMS_RX_CTL_1_GEN2r
#define READLN_AMS_RX_CTL_1_GEN2r BCMI_TSCF_XGXS_READLN_AMS_RX_CTL_1_GEN2r
#define WRITELN_AMS_RX_CTL_1_GEN2r BCMI_TSCF_XGXS_WRITELN_AMS_RX_CTL_1_GEN2r
#define WRITEALL_AMS_RX_CTL_1_GEN2r BCMI_TSCF_XGXS_WRITEALL_AMS_RX_CTL_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AMS_RX_CTL_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AMS_RX_CTL_2_GEN2
 * BLOCKS:   AMS_RX
 * REGADDR:  0xd0c2
 * DEVAD:    1
 * DESC:     AMS RX CONTROL_2
 * RESETVAL: 0xe00 (3584)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_RX_SIGDET_IBIAS signal detect ibias (max, mode, min)
 *     AMS_RX_PHASE_INTERPOLATORS_IBIAS phase interpolators ibias (max, mode, min)
 *     AMS_RX_DFE_TAP_WEIGHT_IBIAS DFE tap weight ibias (max, mode, min)
 *     AMS_RX_SEL_UGBW  unity gain buffer BW
 *     AMS_RX_SEL_TH4DFE DFE tap threshold voltage
 *     AMS_RX_PD_CH_P1  powers down the p1
 *     AMS_RX_SIGDET_POWER_SAVE see AMS
 *     AMS_RX_PWRDN_FTAP power down for floating taps
 */
#define BCMI_TSCF_XGXS_AMS_RX_CTL_2_GEN2r (0x0001d0c2 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AMS_RX_CTL_2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AMS_RX_CTL_2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AMS_RX_CTL_2_GEN2r_s {
	uint32_t v[1];
	uint32_t ams_rx_ctl_2_gen2[1];
	uint32_t _ams_rx_ctl_2_gen2;
} BCMI_TSCF_XGXS_AMS_RX_CTL_2_GEN2r_t;

#define BCMI_TSCF_XGXS_AMS_RX_CTL_2_GEN2r_CLR(r) (r).ams_rx_ctl_2_gen2[0] = 0
#define BCMI_TSCF_XGXS_AMS_RX_CTL_2_GEN2r_SET(r,d) (r).ams_rx_ctl_2_gen2[0] = d
#define BCMI_TSCF_XGXS_AMS_RX_CTL_2_GEN2r_GET(r) (r).ams_rx_ctl_2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AMS_RX_CTL_2_GEN2r_AMS_RX_PWRDN_FTAPf_GET(r) ((((r).ams_rx_ctl_2_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_2_GEN2r_AMS_RX_PWRDN_FTAPf_SET(r,f) (r).ams_rx_ctl_2_gen2[0]=(((r).ams_rx_ctl_2_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_AMS_RX_CTL_2_GEN2r_AMS_RX_SIGDET_POWER_SAVEf_GET(r) ((((r).ams_rx_ctl_2_gen2[0]) >> 14) & 0x1)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_2_GEN2r_AMS_RX_SIGDET_POWER_SAVEf_SET(r,f) (r).ams_rx_ctl_2_gen2[0]=(((r).ams_rx_ctl_2_gen2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_XGXS_AMS_RX_CTL_2_GEN2r_AMS_RX_PD_CH_P1f_GET(r) ((((r).ams_rx_ctl_2_gen2[0]) >> 13) & 0x1)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_2_GEN2r_AMS_RX_PD_CH_P1f_SET(r,f) (r).ams_rx_ctl_2_gen2[0]=(((r).ams_rx_ctl_2_gen2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_XGXS_AMS_RX_CTL_2_GEN2r_AMS_RX_SEL_TH4DFEf_GET(r) ((((r).ams_rx_ctl_2_gen2[0]) >> 11) & 0x3)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_2_GEN2r_AMS_RX_SEL_TH4DFEf_SET(r,f) (r).ams_rx_ctl_2_gen2[0]=(((r).ams_rx_ctl_2_gen2[0] & ~((uint32_t)0x3 << 11)) | ((((uint32_t)f) & 0x3) << 11)) | (3 << (16 + 11))
#define BCMI_TSCF_XGXS_AMS_RX_CTL_2_GEN2r_AMS_RX_SEL_UGBWf_GET(r) ((((r).ams_rx_ctl_2_gen2[0]) >> 9) & 0x3)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_2_GEN2r_AMS_RX_SEL_UGBWf_SET(r,f) (r).ams_rx_ctl_2_gen2[0]=(((r).ams_rx_ctl_2_gen2[0] & ~((uint32_t)0x3 << 9)) | ((((uint32_t)f) & 0x3) << 9)) | (3 << (16 + 9))
#define BCMI_TSCF_XGXS_AMS_RX_CTL_2_GEN2r_AMS_RX_DFE_TAP_WEIGHT_IBIASf_GET(r) ((((r).ams_rx_ctl_2_gen2[0]) >> 6) & 0x7)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_2_GEN2r_AMS_RX_DFE_TAP_WEIGHT_IBIASf_SET(r,f) (r).ams_rx_ctl_2_gen2[0]=(((r).ams_rx_ctl_2_gen2[0] & ~((uint32_t)0x7 << 6)) | ((((uint32_t)f) & 0x7) << 6)) | (7 << (16 + 6))
#define BCMI_TSCF_XGXS_AMS_RX_CTL_2_GEN2r_AMS_RX_PHASE_INTERPOLATORS_IBIASf_GET(r) ((((r).ams_rx_ctl_2_gen2[0]) >> 3) & 0x7)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_2_GEN2r_AMS_RX_PHASE_INTERPOLATORS_IBIASf_SET(r,f) (r).ams_rx_ctl_2_gen2[0]=(((r).ams_rx_ctl_2_gen2[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3)) | (7 << (16 + 3))
#define BCMI_TSCF_XGXS_AMS_RX_CTL_2_GEN2r_AMS_RX_SIGDET_IBIASf_GET(r) (((r).ams_rx_ctl_2_gen2[0]) & 0x7)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_2_GEN2r_AMS_RX_SIGDET_IBIASf_SET(r,f) (r).ams_rx_ctl_2_gen2[0]=(((r).ams_rx_ctl_2_gen2[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access AMS_RX_CTL_2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AMS_RX_CTL_2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_2_GEN2r,(_r._ams_rx_ctl_2_gen2))
#define BCMI_TSCF_XGXS_WRITE_AMS_RX_CTL_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_2_GEN2r,(_r._ams_rx_ctl_2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AMS_RX_CTL_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_2_GEN2r,(_r._ams_rx_ctl_2_gen2))
#define BCMI_TSCF_XGXS_READLN_AMS_RX_CTL_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_ctl_2_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AMS_RX_CTL_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_ctl_2_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AMS_RX_CTL_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_rx_ctl_2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_RX_CTL_2_GEN2r BCMI_TSCF_XGXS_AMS_RX_CTL_2_GEN2r
#define AMS_RX_CTL_2_GEN2r_SIZE BCMI_TSCF_XGXS_AMS_RX_CTL_2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AMS_RX_CTL_2_GEN2r_t AMS_RX_CTL_2_GEN2r_t;
#define AMS_RX_CTL_2_GEN2r_CLR BCMI_TSCF_XGXS_AMS_RX_CTL_2_GEN2r_CLR
#define AMS_RX_CTL_2_GEN2r_SET BCMI_TSCF_XGXS_AMS_RX_CTL_2_GEN2r_SET
#define AMS_RX_CTL_2_GEN2r_GET BCMI_TSCF_XGXS_AMS_RX_CTL_2_GEN2r_GET
#define AMS_RX_CTL_2_GEN2r_AMS_RX_PWRDN_FTAPf_GET BCMI_TSCF_XGXS_AMS_RX_CTL_2_GEN2r_AMS_RX_PWRDN_FTAPf_GET
#define AMS_RX_CTL_2_GEN2r_AMS_RX_PWRDN_FTAPf_SET BCMI_TSCF_XGXS_AMS_RX_CTL_2_GEN2r_AMS_RX_PWRDN_FTAPf_SET
#define AMS_RX_CTL_2_GEN2r_AMS_RX_SIGDET_POWER_SAVEf_GET BCMI_TSCF_XGXS_AMS_RX_CTL_2_GEN2r_AMS_RX_SIGDET_POWER_SAVEf_GET
#define AMS_RX_CTL_2_GEN2r_AMS_RX_SIGDET_POWER_SAVEf_SET BCMI_TSCF_XGXS_AMS_RX_CTL_2_GEN2r_AMS_RX_SIGDET_POWER_SAVEf_SET
#define AMS_RX_CTL_2_GEN2r_AMS_RX_PD_CH_P1f_GET BCMI_TSCF_XGXS_AMS_RX_CTL_2_GEN2r_AMS_RX_PD_CH_P1f_GET
#define AMS_RX_CTL_2_GEN2r_AMS_RX_PD_CH_P1f_SET BCMI_TSCF_XGXS_AMS_RX_CTL_2_GEN2r_AMS_RX_PD_CH_P1f_SET
#define AMS_RX_CTL_2_GEN2r_AMS_RX_SEL_TH4DFEf_GET BCMI_TSCF_XGXS_AMS_RX_CTL_2_GEN2r_AMS_RX_SEL_TH4DFEf_GET
#define AMS_RX_CTL_2_GEN2r_AMS_RX_SEL_TH4DFEf_SET BCMI_TSCF_XGXS_AMS_RX_CTL_2_GEN2r_AMS_RX_SEL_TH4DFEf_SET
#define AMS_RX_CTL_2_GEN2r_AMS_RX_SEL_UGBWf_GET BCMI_TSCF_XGXS_AMS_RX_CTL_2_GEN2r_AMS_RX_SEL_UGBWf_GET
#define AMS_RX_CTL_2_GEN2r_AMS_RX_SEL_UGBWf_SET BCMI_TSCF_XGXS_AMS_RX_CTL_2_GEN2r_AMS_RX_SEL_UGBWf_SET
#define AMS_RX_CTL_2_GEN2r_AMS_RX_DFE_TAP_WEIGHT_IBIASf_GET BCMI_TSCF_XGXS_AMS_RX_CTL_2_GEN2r_AMS_RX_DFE_TAP_WEIGHT_IBIASf_GET
#define AMS_RX_CTL_2_GEN2r_AMS_RX_DFE_TAP_WEIGHT_IBIASf_SET BCMI_TSCF_XGXS_AMS_RX_CTL_2_GEN2r_AMS_RX_DFE_TAP_WEIGHT_IBIASf_SET
#define AMS_RX_CTL_2_GEN2r_AMS_RX_PHASE_INTERPOLATORS_IBIASf_GET BCMI_TSCF_XGXS_AMS_RX_CTL_2_GEN2r_AMS_RX_PHASE_INTERPOLATORS_IBIASf_GET
#define AMS_RX_CTL_2_GEN2r_AMS_RX_PHASE_INTERPOLATORS_IBIASf_SET BCMI_TSCF_XGXS_AMS_RX_CTL_2_GEN2r_AMS_RX_PHASE_INTERPOLATORS_IBIASf_SET
#define AMS_RX_CTL_2_GEN2r_AMS_RX_SIGDET_IBIASf_GET BCMI_TSCF_XGXS_AMS_RX_CTL_2_GEN2r_AMS_RX_SIGDET_IBIASf_GET
#define AMS_RX_CTL_2_GEN2r_AMS_RX_SIGDET_IBIASf_SET BCMI_TSCF_XGXS_AMS_RX_CTL_2_GEN2r_AMS_RX_SIGDET_IBIASf_SET
#define READ_AMS_RX_CTL_2_GEN2r BCMI_TSCF_XGXS_READ_AMS_RX_CTL_2_GEN2r
#define WRITE_AMS_RX_CTL_2_GEN2r BCMI_TSCF_XGXS_WRITE_AMS_RX_CTL_2_GEN2r
#define MODIFY_AMS_RX_CTL_2_GEN2r BCMI_TSCF_XGXS_MODIFY_AMS_RX_CTL_2_GEN2r
#define READLN_AMS_RX_CTL_2_GEN2r BCMI_TSCF_XGXS_READLN_AMS_RX_CTL_2_GEN2r
#define WRITELN_AMS_RX_CTL_2_GEN2r BCMI_TSCF_XGXS_WRITELN_AMS_RX_CTL_2_GEN2r
#define WRITEALL_AMS_RX_CTL_2_GEN2r BCMI_TSCF_XGXS_WRITEALL_AMS_RX_CTL_2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AMS_RX_CTL_2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AMS_RX_CTL_3_GEN2
 * BLOCKS:   AMS_RX
 * REGADDR:  0xd0c3
 * DEVAD:    1
 * DESC:     AMS RX CONTROL_3
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_RX_MET_R_IBIAS met R ibias (max, mode, min)
 *     AMS_RX_DLL_IBIAS DLL ibias (max, mode, min)
 *     AMS_RX_OFFSET_CORRECTION_IBIAS offset correction ibias (max, mode, min)
 *     AMS_RX_DFE_SUM_BUF_IBIAS DFE sum/buf ibias (max, mode, min)
 *     AMS_RX_DFE_SLICER_IBIAS dfe_slicer_ibias
 *     AMS_RX_SPARE_63  ams rx reserved[63]
 */
#define BCMI_TSCF_XGXS_AMS_RX_CTL_3_GEN2r (0x0001d0c3 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AMS_RX_CTL_3_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AMS_RX_CTL_3_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AMS_RX_CTL_3_GEN2r_s {
	uint32_t v[1];
	uint32_t ams_rx_ctl_3_gen2[1];
	uint32_t _ams_rx_ctl_3_gen2;
} BCMI_TSCF_XGXS_AMS_RX_CTL_3_GEN2r_t;

#define BCMI_TSCF_XGXS_AMS_RX_CTL_3_GEN2r_CLR(r) (r).ams_rx_ctl_3_gen2[0] = 0
#define BCMI_TSCF_XGXS_AMS_RX_CTL_3_GEN2r_SET(r,d) (r).ams_rx_ctl_3_gen2[0] = d
#define BCMI_TSCF_XGXS_AMS_RX_CTL_3_GEN2r_GET(r) (r).ams_rx_ctl_3_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AMS_RX_CTL_3_GEN2r_AMS_RX_SPARE_63f_GET(r) ((((r).ams_rx_ctl_3_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_3_GEN2r_AMS_RX_SPARE_63f_SET(r,f) (r).ams_rx_ctl_3_gen2[0]=(((r).ams_rx_ctl_3_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_AMS_RX_CTL_3_GEN2r_AMS_RX_DFE_SLICER_IBIASf_GET(r) ((((r).ams_rx_ctl_3_gen2[0]) >> 12) & 0x7)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_3_GEN2r_AMS_RX_DFE_SLICER_IBIASf_SET(r,f) (r).ams_rx_ctl_3_gen2[0]=(((r).ams_rx_ctl_3_gen2[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12)) | (7 << (16 + 12))
#define BCMI_TSCF_XGXS_AMS_RX_CTL_3_GEN2r_AMS_RX_DFE_SUM_BUF_IBIASf_GET(r) ((((r).ams_rx_ctl_3_gen2[0]) >> 9) & 0x7)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_3_GEN2r_AMS_RX_DFE_SUM_BUF_IBIASf_SET(r,f) (r).ams_rx_ctl_3_gen2[0]=(((r).ams_rx_ctl_3_gen2[0] & ~((uint32_t)0x7 << 9)) | ((((uint32_t)f) & 0x7) << 9)) | (7 << (16 + 9))
#define BCMI_TSCF_XGXS_AMS_RX_CTL_3_GEN2r_AMS_RX_OFFSET_CORRECTION_IBIASf_GET(r) ((((r).ams_rx_ctl_3_gen2[0]) >> 6) & 0x7)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_3_GEN2r_AMS_RX_OFFSET_CORRECTION_IBIASf_SET(r,f) (r).ams_rx_ctl_3_gen2[0]=(((r).ams_rx_ctl_3_gen2[0] & ~((uint32_t)0x7 << 6)) | ((((uint32_t)f) & 0x7) << 6)) | (7 << (16 + 6))
#define BCMI_TSCF_XGXS_AMS_RX_CTL_3_GEN2r_AMS_RX_DLL_IBIASf_GET(r) ((((r).ams_rx_ctl_3_gen2[0]) >> 3) & 0x7)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_3_GEN2r_AMS_RX_DLL_IBIASf_SET(r,f) (r).ams_rx_ctl_3_gen2[0]=(((r).ams_rx_ctl_3_gen2[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3)) | (7 << (16 + 3))
#define BCMI_TSCF_XGXS_AMS_RX_CTL_3_GEN2r_AMS_RX_MET_R_IBIASf_GET(r) (((r).ams_rx_ctl_3_gen2[0]) & 0x7)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_3_GEN2r_AMS_RX_MET_R_IBIASf_SET(r,f) (r).ams_rx_ctl_3_gen2[0]=(((r).ams_rx_ctl_3_gen2[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access AMS_RX_CTL_3_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AMS_RX_CTL_3_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_3_GEN2r,(_r._ams_rx_ctl_3_gen2))
#define BCMI_TSCF_XGXS_WRITE_AMS_RX_CTL_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_3_GEN2r,(_r._ams_rx_ctl_3_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AMS_RX_CTL_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_3_GEN2r,(_r._ams_rx_ctl_3_gen2))
#define BCMI_TSCF_XGXS_READLN_AMS_RX_CTL_3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_ctl_3_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AMS_RX_CTL_3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_ctl_3_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AMS_RX_CTL_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_rx_ctl_3_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_RX_CTL_3_GEN2r BCMI_TSCF_XGXS_AMS_RX_CTL_3_GEN2r
#define AMS_RX_CTL_3_GEN2r_SIZE BCMI_TSCF_XGXS_AMS_RX_CTL_3_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AMS_RX_CTL_3_GEN2r_t AMS_RX_CTL_3_GEN2r_t;
#define AMS_RX_CTL_3_GEN2r_CLR BCMI_TSCF_XGXS_AMS_RX_CTL_3_GEN2r_CLR
#define AMS_RX_CTL_3_GEN2r_SET BCMI_TSCF_XGXS_AMS_RX_CTL_3_GEN2r_SET
#define AMS_RX_CTL_3_GEN2r_GET BCMI_TSCF_XGXS_AMS_RX_CTL_3_GEN2r_GET
#define AMS_RX_CTL_3_GEN2r_AMS_RX_SPARE_63f_GET BCMI_TSCF_XGXS_AMS_RX_CTL_3_GEN2r_AMS_RX_SPARE_63f_GET
#define AMS_RX_CTL_3_GEN2r_AMS_RX_SPARE_63f_SET BCMI_TSCF_XGXS_AMS_RX_CTL_3_GEN2r_AMS_RX_SPARE_63f_SET
#define AMS_RX_CTL_3_GEN2r_AMS_RX_DFE_SLICER_IBIASf_GET BCMI_TSCF_XGXS_AMS_RX_CTL_3_GEN2r_AMS_RX_DFE_SLICER_IBIASf_GET
#define AMS_RX_CTL_3_GEN2r_AMS_RX_DFE_SLICER_IBIASf_SET BCMI_TSCF_XGXS_AMS_RX_CTL_3_GEN2r_AMS_RX_DFE_SLICER_IBIASf_SET
#define AMS_RX_CTL_3_GEN2r_AMS_RX_DFE_SUM_BUF_IBIASf_GET BCMI_TSCF_XGXS_AMS_RX_CTL_3_GEN2r_AMS_RX_DFE_SUM_BUF_IBIASf_GET
#define AMS_RX_CTL_3_GEN2r_AMS_RX_DFE_SUM_BUF_IBIASf_SET BCMI_TSCF_XGXS_AMS_RX_CTL_3_GEN2r_AMS_RX_DFE_SUM_BUF_IBIASf_SET
#define AMS_RX_CTL_3_GEN2r_AMS_RX_OFFSET_CORRECTION_IBIASf_GET BCMI_TSCF_XGXS_AMS_RX_CTL_3_GEN2r_AMS_RX_OFFSET_CORRECTION_IBIASf_GET
#define AMS_RX_CTL_3_GEN2r_AMS_RX_OFFSET_CORRECTION_IBIASf_SET BCMI_TSCF_XGXS_AMS_RX_CTL_3_GEN2r_AMS_RX_OFFSET_CORRECTION_IBIASf_SET
#define AMS_RX_CTL_3_GEN2r_AMS_RX_DLL_IBIASf_GET BCMI_TSCF_XGXS_AMS_RX_CTL_3_GEN2r_AMS_RX_DLL_IBIASf_GET
#define AMS_RX_CTL_3_GEN2r_AMS_RX_DLL_IBIASf_SET BCMI_TSCF_XGXS_AMS_RX_CTL_3_GEN2r_AMS_RX_DLL_IBIASf_SET
#define AMS_RX_CTL_3_GEN2r_AMS_RX_MET_R_IBIASf_GET BCMI_TSCF_XGXS_AMS_RX_CTL_3_GEN2r_AMS_RX_MET_R_IBIASf_GET
#define AMS_RX_CTL_3_GEN2r_AMS_RX_MET_R_IBIASf_SET BCMI_TSCF_XGXS_AMS_RX_CTL_3_GEN2r_AMS_RX_MET_R_IBIASf_SET
#define READ_AMS_RX_CTL_3_GEN2r BCMI_TSCF_XGXS_READ_AMS_RX_CTL_3_GEN2r
#define WRITE_AMS_RX_CTL_3_GEN2r BCMI_TSCF_XGXS_WRITE_AMS_RX_CTL_3_GEN2r
#define MODIFY_AMS_RX_CTL_3_GEN2r BCMI_TSCF_XGXS_MODIFY_AMS_RX_CTL_3_GEN2r
#define READLN_AMS_RX_CTL_3_GEN2r BCMI_TSCF_XGXS_READLN_AMS_RX_CTL_3_GEN2r
#define WRITELN_AMS_RX_CTL_3_GEN2r BCMI_TSCF_XGXS_WRITELN_AMS_RX_CTL_3_GEN2r
#define WRITEALL_AMS_RX_CTL_3_GEN2r BCMI_TSCF_XGXS_WRITEALL_AMS_RX_CTL_3_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AMS_RX_CTL_3_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AMS_RX_CTL_4_GEN2
 * BLOCKS:   AMS_RX
 * REGADDR:  0xd0c4
 * DEVAD:    1
 * DESC:     AMS RX CONTROL_4
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_RX_DFE_SLICER_CAL_IBIAS DFE slicer cal ibias (max, mode, min)
 *     AMS_RX_TBD_IBIAS TBD ibias (max, mode, min)
 *     AMS_RX_VGA0_RESCAL_MUX VGA0 rescal mux (force, ctrl[3:0]) - rescal override
 *     AMS_RX_VGA1_RESCAL_MUX VGA1 rescal mux (force, ctrl[3:0]) - rescal override
 */
#define BCMI_TSCF_XGXS_AMS_RX_CTL_4_GEN2r (0x0001d0c4 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AMS_RX_CTL_4_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AMS_RX_CTL_4_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AMS_RX_CTL_4_GEN2r_s {
	uint32_t v[1];
	uint32_t ams_rx_ctl_4_gen2[1];
	uint32_t _ams_rx_ctl_4_gen2;
} BCMI_TSCF_XGXS_AMS_RX_CTL_4_GEN2r_t;

#define BCMI_TSCF_XGXS_AMS_RX_CTL_4_GEN2r_CLR(r) (r).ams_rx_ctl_4_gen2[0] = 0
#define BCMI_TSCF_XGXS_AMS_RX_CTL_4_GEN2r_SET(r,d) (r).ams_rx_ctl_4_gen2[0] = d
#define BCMI_TSCF_XGXS_AMS_RX_CTL_4_GEN2r_GET(r) (r).ams_rx_ctl_4_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AMS_RX_CTL_4_GEN2r_AMS_RX_VGA1_RESCAL_MUXf_GET(r) ((((r).ams_rx_ctl_4_gen2[0]) >> 11) & 0x1f)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_4_GEN2r_AMS_RX_VGA1_RESCAL_MUXf_SET(r,f) (r).ams_rx_ctl_4_gen2[0]=(((r).ams_rx_ctl_4_gen2[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11)) | (31 << (16 + 11))
#define BCMI_TSCF_XGXS_AMS_RX_CTL_4_GEN2r_AMS_RX_VGA0_RESCAL_MUXf_GET(r) ((((r).ams_rx_ctl_4_gen2[0]) >> 6) & 0x1f)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_4_GEN2r_AMS_RX_VGA0_RESCAL_MUXf_SET(r,f) (r).ams_rx_ctl_4_gen2[0]=(((r).ams_rx_ctl_4_gen2[0] & ~((uint32_t)0x1f << 6)) | ((((uint32_t)f) & 0x1f) << 6)) | (31 << (16 + 6))
#define BCMI_TSCF_XGXS_AMS_RX_CTL_4_GEN2r_AMS_RX_TBD_IBIASf_GET(r) ((((r).ams_rx_ctl_4_gen2[0]) >> 3) & 0x7)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_4_GEN2r_AMS_RX_TBD_IBIASf_SET(r,f) (r).ams_rx_ctl_4_gen2[0]=(((r).ams_rx_ctl_4_gen2[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3)) | (7 << (16 + 3))
#define BCMI_TSCF_XGXS_AMS_RX_CTL_4_GEN2r_AMS_RX_DFE_SLICER_CAL_IBIASf_GET(r) (((r).ams_rx_ctl_4_gen2[0]) & 0x7)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_4_GEN2r_AMS_RX_DFE_SLICER_CAL_IBIASf_SET(r,f) (r).ams_rx_ctl_4_gen2[0]=(((r).ams_rx_ctl_4_gen2[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access AMS_RX_CTL_4_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AMS_RX_CTL_4_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_4_GEN2r,(_r._ams_rx_ctl_4_gen2))
#define BCMI_TSCF_XGXS_WRITE_AMS_RX_CTL_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_4_GEN2r,(_r._ams_rx_ctl_4_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AMS_RX_CTL_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_4_GEN2r,(_r._ams_rx_ctl_4_gen2))
#define BCMI_TSCF_XGXS_READLN_AMS_RX_CTL_4_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_ctl_4_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AMS_RX_CTL_4_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_ctl_4_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AMS_RX_CTL_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_rx_ctl_4_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_RX_CTL_4_GEN2r BCMI_TSCF_XGXS_AMS_RX_CTL_4_GEN2r
#define AMS_RX_CTL_4_GEN2r_SIZE BCMI_TSCF_XGXS_AMS_RX_CTL_4_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AMS_RX_CTL_4_GEN2r_t AMS_RX_CTL_4_GEN2r_t;
#define AMS_RX_CTL_4_GEN2r_CLR BCMI_TSCF_XGXS_AMS_RX_CTL_4_GEN2r_CLR
#define AMS_RX_CTL_4_GEN2r_SET BCMI_TSCF_XGXS_AMS_RX_CTL_4_GEN2r_SET
#define AMS_RX_CTL_4_GEN2r_GET BCMI_TSCF_XGXS_AMS_RX_CTL_4_GEN2r_GET
#define AMS_RX_CTL_4_GEN2r_AMS_RX_VGA1_RESCAL_MUXf_GET BCMI_TSCF_XGXS_AMS_RX_CTL_4_GEN2r_AMS_RX_VGA1_RESCAL_MUXf_GET
#define AMS_RX_CTL_4_GEN2r_AMS_RX_VGA1_RESCAL_MUXf_SET BCMI_TSCF_XGXS_AMS_RX_CTL_4_GEN2r_AMS_RX_VGA1_RESCAL_MUXf_SET
#define AMS_RX_CTL_4_GEN2r_AMS_RX_VGA0_RESCAL_MUXf_GET BCMI_TSCF_XGXS_AMS_RX_CTL_4_GEN2r_AMS_RX_VGA0_RESCAL_MUXf_GET
#define AMS_RX_CTL_4_GEN2r_AMS_RX_VGA0_RESCAL_MUXf_SET BCMI_TSCF_XGXS_AMS_RX_CTL_4_GEN2r_AMS_RX_VGA0_RESCAL_MUXf_SET
#define AMS_RX_CTL_4_GEN2r_AMS_RX_TBD_IBIASf_GET BCMI_TSCF_XGXS_AMS_RX_CTL_4_GEN2r_AMS_RX_TBD_IBIASf_GET
#define AMS_RX_CTL_4_GEN2r_AMS_RX_TBD_IBIASf_SET BCMI_TSCF_XGXS_AMS_RX_CTL_4_GEN2r_AMS_RX_TBD_IBIASf_SET
#define AMS_RX_CTL_4_GEN2r_AMS_RX_DFE_SLICER_CAL_IBIASf_GET BCMI_TSCF_XGXS_AMS_RX_CTL_4_GEN2r_AMS_RX_DFE_SLICER_CAL_IBIASf_GET
#define AMS_RX_CTL_4_GEN2r_AMS_RX_DFE_SLICER_CAL_IBIASf_SET BCMI_TSCF_XGXS_AMS_RX_CTL_4_GEN2r_AMS_RX_DFE_SLICER_CAL_IBIASf_SET
#define READ_AMS_RX_CTL_4_GEN2r BCMI_TSCF_XGXS_READ_AMS_RX_CTL_4_GEN2r
#define WRITE_AMS_RX_CTL_4_GEN2r BCMI_TSCF_XGXS_WRITE_AMS_RX_CTL_4_GEN2r
#define MODIFY_AMS_RX_CTL_4_GEN2r BCMI_TSCF_XGXS_MODIFY_AMS_RX_CTL_4_GEN2r
#define READLN_AMS_RX_CTL_4_GEN2r BCMI_TSCF_XGXS_READLN_AMS_RX_CTL_4_GEN2r
#define WRITELN_AMS_RX_CTL_4_GEN2r BCMI_TSCF_XGXS_WRITELN_AMS_RX_CTL_4_GEN2r
#define WRITEALL_AMS_RX_CTL_4_GEN2r BCMI_TSCF_XGXS_WRITEALL_AMS_RX_CTL_4_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AMS_RX_CTL_4_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AMS_RX_CTL_5_GEN2
 * BLOCKS:   AMS_RX
 * REGADDR:  0xd0c5
 * DEVAD:    1
 * DESC:     AMS RX CONTROL_5
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_RX_VGA2_RESCAL_MUX VGA2 rescal mux (force, ctrl[3:0]) - rescal override
 *     AMS_RX_VGA3_RESCAL_MUX VGA3 rescal mux (force, ctrl[3:0]) - rescal override
 *     AMS_RX_SPARE_94_90 ams_rx_reserved[94:90]
 *     AMS_RX_SPARE_95  ams_rx reserved[95]
 */
#define BCMI_TSCF_XGXS_AMS_RX_CTL_5_GEN2r (0x0001d0c5 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AMS_RX_CTL_5_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AMS_RX_CTL_5_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AMS_RX_CTL_5_GEN2r_s {
	uint32_t v[1];
	uint32_t ams_rx_ctl_5_gen2[1];
	uint32_t _ams_rx_ctl_5_gen2;
} BCMI_TSCF_XGXS_AMS_RX_CTL_5_GEN2r_t;

#define BCMI_TSCF_XGXS_AMS_RX_CTL_5_GEN2r_CLR(r) (r).ams_rx_ctl_5_gen2[0] = 0
#define BCMI_TSCF_XGXS_AMS_RX_CTL_5_GEN2r_SET(r,d) (r).ams_rx_ctl_5_gen2[0] = d
#define BCMI_TSCF_XGXS_AMS_RX_CTL_5_GEN2r_GET(r) (r).ams_rx_ctl_5_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AMS_RX_CTL_5_GEN2r_AMS_RX_SPARE_95f_GET(r) ((((r).ams_rx_ctl_5_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_5_GEN2r_AMS_RX_SPARE_95f_SET(r,f) (r).ams_rx_ctl_5_gen2[0]=(((r).ams_rx_ctl_5_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_AMS_RX_CTL_5_GEN2r_AMS_RX_SPARE_94_90f_GET(r) ((((r).ams_rx_ctl_5_gen2[0]) >> 10) & 0x1f)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_5_GEN2r_AMS_RX_SPARE_94_90f_SET(r,f) (r).ams_rx_ctl_5_gen2[0]=(((r).ams_rx_ctl_5_gen2[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10)) | (31 << (16 + 10))
#define BCMI_TSCF_XGXS_AMS_RX_CTL_5_GEN2r_AMS_RX_VGA3_RESCAL_MUXf_GET(r) ((((r).ams_rx_ctl_5_gen2[0]) >> 5) & 0x1f)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_5_GEN2r_AMS_RX_VGA3_RESCAL_MUXf_SET(r,f) (r).ams_rx_ctl_5_gen2[0]=(((r).ams_rx_ctl_5_gen2[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5)) | (31 << (16 + 5))
#define BCMI_TSCF_XGXS_AMS_RX_CTL_5_GEN2r_AMS_RX_VGA2_RESCAL_MUXf_GET(r) (((r).ams_rx_ctl_5_gen2[0]) & 0x1f)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_5_GEN2r_AMS_RX_VGA2_RESCAL_MUXf_SET(r,f) (r).ams_rx_ctl_5_gen2[0]=(((r).ams_rx_ctl_5_gen2[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access AMS_RX_CTL_5_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AMS_RX_CTL_5_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_5_GEN2r,(_r._ams_rx_ctl_5_gen2))
#define BCMI_TSCF_XGXS_WRITE_AMS_RX_CTL_5_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_5_GEN2r,(_r._ams_rx_ctl_5_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AMS_RX_CTL_5_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_5_GEN2r,(_r._ams_rx_ctl_5_gen2))
#define BCMI_TSCF_XGXS_READLN_AMS_RX_CTL_5_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_5_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_ctl_5_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AMS_RX_CTL_5_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_5_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_ctl_5_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AMS_RX_CTL_5_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_5_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_rx_ctl_5_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_RX_CTL_5_GEN2r BCMI_TSCF_XGXS_AMS_RX_CTL_5_GEN2r
#define AMS_RX_CTL_5_GEN2r_SIZE BCMI_TSCF_XGXS_AMS_RX_CTL_5_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AMS_RX_CTL_5_GEN2r_t AMS_RX_CTL_5_GEN2r_t;
#define AMS_RX_CTL_5_GEN2r_CLR BCMI_TSCF_XGXS_AMS_RX_CTL_5_GEN2r_CLR
#define AMS_RX_CTL_5_GEN2r_SET BCMI_TSCF_XGXS_AMS_RX_CTL_5_GEN2r_SET
#define AMS_RX_CTL_5_GEN2r_GET BCMI_TSCF_XGXS_AMS_RX_CTL_5_GEN2r_GET
#define AMS_RX_CTL_5_GEN2r_AMS_RX_SPARE_95f_GET BCMI_TSCF_XGXS_AMS_RX_CTL_5_GEN2r_AMS_RX_SPARE_95f_GET
#define AMS_RX_CTL_5_GEN2r_AMS_RX_SPARE_95f_SET BCMI_TSCF_XGXS_AMS_RX_CTL_5_GEN2r_AMS_RX_SPARE_95f_SET
#define AMS_RX_CTL_5_GEN2r_AMS_RX_SPARE_94_90f_GET BCMI_TSCF_XGXS_AMS_RX_CTL_5_GEN2r_AMS_RX_SPARE_94_90f_GET
#define AMS_RX_CTL_5_GEN2r_AMS_RX_SPARE_94_90f_SET BCMI_TSCF_XGXS_AMS_RX_CTL_5_GEN2r_AMS_RX_SPARE_94_90f_SET
#define AMS_RX_CTL_5_GEN2r_AMS_RX_VGA3_RESCAL_MUXf_GET BCMI_TSCF_XGXS_AMS_RX_CTL_5_GEN2r_AMS_RX_VGA3_RESCAL_MUXf_GET
#define AMS_RX_CTL_5_GEN2r_AMS_RX_VGA3_RESCAL_MUXf_SET BCMI_TSCF_XGXS_AMS_RX_CTL_5_GEN2r_AMS_RX_VGA3_RESCAL_MUXf_SET
#define AMS_RX_CTL_5_GEN2r_AMS_RX_VGA2_RESCAL_MUXf_GET BCMI_TSCF_XGXS_AMS_RX_CTL_5_GEN2r_AMS_RX_VGA2_RESCAL_MUXf_GET
#define AMS_RX_CTL_5_GEN2r_AMS_RX_VGA2_RESCAL_MUXf_SET BCMI_TSCF_XGXS_AMS_RX_CTL_5_GEN2r_AMS_RX_VGA2_RESCAL_MUXf_SET
#define READ_AMS_RX_CTL_5_GEN2r BCMI_TSCF_XGXS_READ_AMS_RX_CTL_5_GEN2r
#define WRITE_AMS_RX_CTL_5_GEN2r BCMI_TSCF_XGXS_WRITE_AMS_RX_CTL_5_GEN2r
#define MODIFY_AMS_RX_CTL_5_GEN2r BCMI_TSCF_XGXS_MODIFY_AMS_RX_CTL_5_GEN2r
#define READLN_AMS_RX_CTL_5_GEN2r BCMI_TSCF_XGXS_READLN_AMS_RX_CTL_5_GEN2r
#define WRITELN_AMS_RX_CTL_5_GEN2r BCMI_TSCF_XGXS_WRITELN_AMS_RX_CTL_5_GEN2r
#define WRITEALL_AMS_RX_CTL_5_GEN2r BCMI_TSCF_XGXS_WRITEALL_AMS_RX_CTL_5_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AMS_RX_CTL_5_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AMS_RX_CTL_6_GEN2
 * BLOCKS:   AMS_RX
 * REGADDR:  0xd0c6
 * DEVAD:    1
 * DESC:     AMS RX CONTROL_6
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_RX_PEAKING_FILTER_RESCAL_MUX peaking filter rescal mux- (force, ctrl[3:1]) -rescal override
 *     AMS_RX_OFFSET_CORRECTION_RESCAL_MUX offset correction rescal mux (force, ctrl[3:1]) -rescal override
 *     AMS_RX_SPARE_111_104 ams rx reserved[111:104]
 */
#define BCMI_TSCF_XGXS_AMS_RX_CTL_6_GEN2r (0x0001d0c6 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AMS_RX_CTL_6_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AMS_RX_CTL_6_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AMS_RX_CTL_6_GEN2r_s {
	uint32_t v[1];
	uint32_t ams_rx_ctl_6_gen2[1];
	uint32_t _ams_rx_ctl_6_gen2;
} BCMI_TSCF_XGXS_AMS_RX_CTL_6_GEN2r_t;

#define BCMI_TSCF_XGXS_AMS_RX_CTL_6_GEN2r_CLR(r) (r).ams_rx_ctl_6_gen2[0] = 0
#define BCMI_TSCF_XGXS_AMS_RX_CTL_6_GEN2r_SET(r,d) (r).ams_rx_ctl_6_gen2[0] = d
#define BCMI_TSCF_XGXS_AMS_RX_CTL_6_GEN2r_GET(r) (r).ams_rx_ctl_6_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AMS_RX_CTL_6_GEN2r_AMS_RX_SPARE_111_104f_GET(r) ((((r).ams_rx_ctl_6_gen2[0]) >> 8) & 0xff)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_6_GEN2r_AMS_RX_SPARE_111_104f_SET(r,f) (r).ams_rx_ctl_6_gen2[0]=(((r).ams_rx_ctl_6_gen2[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_TSCF_XGXS_AMS_RX_CTL_6_GEN2r_AMS_RX_OFFSET_CORRECTION_RESCAL_MUXf_GET(r) ((((r).ams_rx_ctl_6_gen2[0]) >> 4) & 0xf)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_6_GEN2r_AMS_RX_OFFSET_CORRECTION_RESCAL_MUXf_SET(r,f) (r).ams_rx_ctl_6_gen2[0]=(((r).ams_rx_ctl_6_gen2[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4)) | (15 << (16 + 4))
#define BCMI_TSCF_XGXS_AMS_RX_CTL_6_GEN2r_AMS_RX_PEAKING_FILTER_RESCAL_MUXf_GET(r) (((r).ams_rx_ctl_6_gen2[0]) & 0xf)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_6_GEN2r_AMS_RX_PEAKING_FILTER_RESCAL_MUXf_SET(r,f) (r).ams_rx_ctl_6_gen2[0]=(((r).ams_rx_ctl_6_gen2[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access AMS_RX_CTL_6_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AMS_RX_CTL_6_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_6_GEN2r,(_r._ams_rx_ctl_6_gen2))
#define BCMI_TSCF_XGXS_WRITE_AMS_RX_CTL_6_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_6_GEN2r,(_r._ams_rx_ctl_6_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AMS_RX_CTL_6_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_6_GEN2r,(_r._ams_rx_ctl_6_gen2))
#define BCMI_TSCF_XGXS_READLN_AMS_RX_CTL_6_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_6_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_ctl_6_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AMS_RX_CTL_6_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_6_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_ctl_6_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AMS_RX_CTL_6_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_6_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_rx_ctl_6_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_RX_CTL_6_GEN2r BCMI_TSCF_XGXS_AMS_RX_CTL_6_GEN2r
#define AMS_RX_CTL_6_GEN2r_SIZE BCMI_TSCF_XGXS_AMS_RX_CTL_6_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AMS_RX_CTL_6_GEN2r_t AMS_RX_CTL_6_GEN2r_t;
#define AMS_RX_CTL_6_GEN2r_CLR BCMI_TSCF_XGXS_AMS_RX_CTL_6_GEN2r_CLR
#define AMS_RX_CTL_6_GEN2r_SET BCMI_TSCF_XGXS_AMS_RX_CTL_6_GEN2r_SET
#define AMS_RX_CTL_6_GEN2r_GET BCMI_TSCF_XGXS_AMS_RX_CTL_6_GEN2r_GET
#define AMS_RX_CTL_6_GEN2r_AMS_RX_SPARE_111_104f_GET BCMI_TSCF_XGXS_AMS_RX_CTL_6_GEN2r_AMS_RX_SPARE_111_104f_GET
#define AMS_RX_CTL_6_GEN2r_AMS_RX_SPARE_111_104f_SET BCMI_TSCF_XGXS_AMS_RX_CTL_6_GEN2r_AMS_RX_SPARE_111_104f_SET
#define AMS_RX_CTL_6_GEN2r_AMS_RX_OFFSET_CORRECTION_RESCAL_MUXf_GET BCMI_TSCF_XGXS_AMS_RX_CTL_6_GEN2r_AMS_RX_OFFSET_CORRECTION_RESCAL_MUXf_GET
#define AMS_RX_CTL_6_GEN2r_AMS_RX_OFFSET_CORRECTION_RESCAL_MUXf_SET BCMI_TSCF_XGXS_AMS_RX_CTL_6_GEN2r_AMS_RX_OFFSET_CORRECTION_RESCAL_MUXf_SET
#define AMS_RX_CTL_6_GEN2r_AMS_RX_PEAKING_FILTER_RESCAL_MUXf_GET BCMI_TSCF_XGXS_AMS_RX_CTL_6_GEN2r_AMS_RX_PEAKING_FILTER_RESCAL_MUXf_GET
#define AMS_RX_CTL_6_GEN2r_AMS_RX_PEAKING_FILTER_RESCAL_MUXf_SET BCMI_TSCF_XGXS_AMS_RX_CTL_6_GEN2r_AMS_RX_PEAKING_FILTER_RESCAL_MUXf_SET
#define READ_AMS_RX_CTL_6_GEN2r BCMI_TSCF_XGXS_READ_AMS_RX_CTL_6_GEN2r
#define WRITE_AMS_RX_CTL_6_GEN2r BCMI_TSCF_XGXS_WRITE_AMS_RX_CTL_6_GEN2r
#define MODIFY_AMS_RX_CTL_6_GEN2r BCMI_TSCF_XGXS_MODIFY_AMS_RX_CTL_6_GEN2r
#define READLN_AMS_RX_CTL_6_GEN2r BCMI_TSCF_XGXS_READLN_AMS_RX_CTL_6_GEN2r
#define WRITELN_AMS_RX_CTL_6_GEN2r BCMI_TSCF_XGXS_WRITELN_AMS_RX_CTL_6_GEN2r
#define WRITEALL_AMS_RX_CTL_6_GEN2r BCMI_TSCF_XGXS_WRITEALL_AMS_RX_CTL_6_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AMS_RX_CTL_6_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AMS_RX_CTL_7_GEN2
 * BLOCKS:   AMS_RX
 * REGADDR:  0xd0c7
 * DEVAD:    1
 * DESC:     AMS RX CONTROL_7
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_RX_DC_OFFSET dc_offset
 *     AMS_RX_FORCE_DC_OFFSET enables override using register bits
 *     AMS_RX_DC_OFFSET_RANGE dc_offset range, 2x
 *     AMS_RX_RX_OFFSET_PD pwrdn AFE offset cancellation DAC
 *     AMS_RX_SHORT_VGA_OUTPUT used for slicer calibration
 *     AMS_RX_SPARE_123 ams rx reserved [123]
 *     AMS_RX_VGA_LOW_GAIN extends low gain range by ~ -4dB per stage
 *     AMS_RX_VGA_STEP_MODE stage sequential. See AMS
 */
#define BCMI_TSCF_XGXS_AMS_RX_CTL_7_GEN2r (0x0001d0c7 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AMS_RX_CTL_7_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AMS_RX_CTL_7_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AMS_RX_CTL_7_GEN2r_s {
	uint32_t v[1];
	uint32_t ams_rx_ctl_7_gen2[1];
	uint32_t _ams_rx_ctl_7_gen2;
} BCMI_TSCF_XGXS_AMS_RX_CTL_7_GEN2r_t;

#define BCMI_TSCF_XGXS_AMS_RX_CTL_7_GEN2r_CLR(r) (r).ams_rx_ctl_7_gen2[0] = 0
#define BCMI_TSCF_XGXS_AMS_RX_CTL_7_GEN2r_SET(r,d) (r).ams_rx_ctl_7_gen2[0] = d
#define BCMI_TSCF_XGXS_AMS_RX_CTL_7_GEN2r_GET(r) (r).ams_rx_ctl_7_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AMS_RX_CTL_7_GEN2r_AMS_RX_VGA_STEP_MODEf_GET(r) ((((r).ams_rx_ctl_7_gen2[0]) >> 14) & 0x3)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_7_GEN2r_AMS_RX_VGA_STEP_MODEf_SET(r,f) (r).ams_rx_ctl_7_gen2[0]=(((r).ams_rx_ctl_7_gen2[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_TSCF_XGXS_AMS_RX_CTL_7_GEN2r_AMS_RX_VGA_LOW_GAINf_GET(r) ((((r).ams_rx_ctl_7_gen2[0]) >> 12) & 0x3)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_7_GEN2r_AMS_RX_VGA_LOW_GAINf_SET(r,f) (r).ams_rx_ctl_7_gen2[0]=(((r).ams_rx_ctl_7_gen2[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12)) | (3 << (16 + 12))
#define BCMI_TSCF_XGXS_AMS_RX_CTL_7_GEN2r_AMS_RX_SPARE_123f_GET(r) ((((r).ams_rx_ctl_7_gen2[0]) >> 11) & 0x1)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_7_GEN2r_AMS_RX_SPARE_123f_SET(r,f) (r).ams_rx_ctl_7_gen2[0]=(((r).ams_rx_ctl_7_gen2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_XGXS_AMS_RX_CTL_7_GEN2r_AMS_RX_SHORT_VGA_OUTPUTf_GET(r) ((((r).ams_rx_ctl_7_gen2[0]) >> 10) & 0x1)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_7_GEN2r_AMS_RX_SHORT_VGA_OUTPUTf_SET(r,f) (r).ams_rx_ctl_7_gen2[0]=(((r).ams_rx_ctl_7_gen2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_XGXS_AMS_RX_CTL_7_GEN2r_AMS_RX_RX_OFFSET_PDf_GET(r) ((((r).ams_rx_ctl_7_gen2[0]) >> 9) & 0x1)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_7_GEN2r_AMS_RX_RX_OFFSET_PDf_SET(r,f) (r).ams_rx_ctl_7_gen2[0]=(((r).ams_rx_ctl_7_gen2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_XGXS_AMS_RX_CTL_7_GEN2r_AMS_RX_DC_OFFSET_RANGEf_GET(r) ((((r).ams_rx_ctl_7_gen2[0]) >> 8) & 0x1)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_7_GEN2r_AMS_RX_DC_OFFSET_RANGEf_SET(r,f) (r).ams_rx_ctl_7_gen2[0]=(((r).ams_rx_ctl_7_gen2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_XGXS_AMS_RX_CTL_7_GEN2r_AMS_RX_FORCE_DC_OFFSETf_GET(r) ((((r).ams_rx_ctl_7_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_7_GEN2r_AMS_RX_FORCE_DC_OFFSETf_SET(r,f) (r).ams_rx_ctl_7_gen2[0]=(((r).ams_rx_ctl_7_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_AMS_RX_CTL_7_GEN2r_AMS_RX_DC_OFFSETf_GET(r) (((r).ams_rx_ctl_7_gen2[0]) & 0x7f)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_7_GEN2r_AMS_RX_DC_OFFSETf_SET(r,f) (r).ams_rx_ctl_7_gen2[0]=(((r).ams_rx_ctl_7_gen2[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f)) | (0x7f << 16)

/*
 * These macros can be used to access AMS_RX_CTL_7_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AMS_RX_CTL_7_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_7_GEN2r,(_r._ams_rx_ctl_7_gen2))
#define BCMI_TSCF_XGXS_WRITE_AMS_RX_CTL_7_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_7_GEN2r,(_r._ams_rx_ctl_7_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AMS_RX_CTL_7_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_7_GEN2r,(_r._ams_rx_ctl_7_gen2))
#define BCMI_TSCF_XGXS_READLN_AMS_RX_CTL_7_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_7_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_ctl_7_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AMS_RX_CTL_7_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_7_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_ctl_7_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AMS_RX_CTL_7_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_7_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_rx_ctl_7_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_RX_CTL_7_GEN2r BCMI_TSCF_XGXS_AMS_RX_CTL_7_GEN2r
#define AMS_RX_CTL_7_GEN2r_SIZE BCMI_TSCF_XGXS_AMS_RX_CTL_7_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AMS_RX_CTL_7_GEN2r_t AMS_RX_CTL_7_GEN2r_t;
#define AMS_RX_CTL_7_GEN2r_CLR BCMI_TSCF_XGXS_AMS_RX_CTL_7_GEN2r_CLR
#define AMS_RX_CTL_7_GEN2r_SET BCMI_TSCF_XGXS_AMS_RX_CTL_7_GEN2r_SET
#define AMS_RX_CTL_7_GEN2r_GET BCMI_TSCF_XGXS_AMS_RX_CTL_7_GEN2r_GET
#define AMS_RX_CTL_7_GEN2r_AMS_RX_VGA_STEP_MODEf_GET BCMI_TSCF_XGXS_AMS_RX_CTL_7_GEN2r_AMS_RX_VGA_STEP_MODEf_GET
#define AMS_RX_CTL_7_GEN2r_AMS_RX_VGA_STEP_MODEf_SET BCMI_TSCF_XGXS_AMS_RX_CTL_7_GEN2r_AMS_RX_VGA_STEP_MODEf_SET
#define AMS_RX_CTL_7_GEN2r_AMS_RX_VGA_LOW_GAINf_GET BCMI_TSCF_XGXS_AMS_RX_CTL_7_GEN2r_AMS_RX_VGA_LOW_GAINf_GET
#define AMS_RX_CTL_7_GEN2r_AMS_RX_VGA_LOW_GAINf_SET BCMI_TSCF_XGXS_AMS_RX_CTL_7_GEN2r_AMS_RX_VGA_LOW_GAINf_SET
#define AMS_RX_CTL_7_GEN2r_AMS_RX_SPARE_123f_GET BCMI_TSCF_XGXS_AMS_RX_CTL_7_GEN2r_AMS_RX_SPARE_123f_GET
#define AMS_RX_CTL_7_GEN2r_AMS_RX_SPARE_123f_SET BCMI_TSCF_XGXS_AMS_RX_CTL_7_GEN2r_AMS_RX_SPARE_123f_SET
#define AMS_RX_CTL_7_GEN2r_AMS_RX_SHORT_VGA_OUTPUTf_GET BCMI_TSCF_XGXS_AMS_RX_CTL_7_GEN2r_AMS_RX_SHORT_VGA_OUTPUTf_GET
#define AMS_RX_CTL_7_GEN2r_AMS_RX_SHORT_VGA_OUTPUTf_SET BCMI_TSCF_XGXS_AMS_RX_CTL_7_GEN2r_AMS_RX_SHORT_VGA_OUTPUTf_SET
#define AMS_RX_CTL_7_GEN2r_AMS_RX_RX_OFFSET_PDf_GET BCMI_TSCF_XGXS_AMS_RX_CTL_7_GEN2r_AMS_RX_RX_OFFSET_PDf_GET
#define AMS_RX_CTL_7_GEN2r_AMS_RX_RX_OFFSET_PDf_SET BCMI_TSCF_XGXS_AMS_RX_CTL_7_GEN2r_AMS_RX_RX_OFFSET_PDf_SET
#define AMS_RX_CTL_7_GEN2r_AMS_RX_DC_OFFSET_RANGEf_GET BCMI_TSCF_XGXS_AMS_RX_CTL_7_GEN2r_AMS_RX_DC_OFFSET_RANGEf_GET
#define AMS_RX_CTL_7_GEN2r_AMS_RX_DC_OFFSET_RANGEf_SET BCMI_TSCF_XGXS_AMS_RX_CTL_7_GEN2r_AMS_RX_DC_OFFSET_RANGEf_SET
#define AMS_RX_CTL_7_GEN2r_AMS_RX_FORCE_DC_OFFSETf_GET BCMI_TSCF_XGXS_AMS_RX_CTL_7_GEN2r_AMS_RX_FORCE_DC_OFFSETf_GET
#define AMS_RX_CTL_7_GEN2r_AMS_RX_FORCE_DC_OFFSETf_SET BCMI_TSCF_XGXS_AMS_RX_CTL_7_GEN2r_AMS_RX_FORCE_DC_OFFSETf_SET
#define AMS_RX_CTL_7_GEN2r_AMS_RX_DC_OFFSETf_GET BCMI_TSCF_XGXS_AMS_RX_CTL_7_GEN2r_AMS_RX_DC_OFFSETf_GET
#define AMS_RX_CTL_7_GEN2r_AMS_RX_DC_OFFSETf_SET BCMI_TSCF_XGXS_AMS_RX_CTL_7_GEN2r_AMS_RX_DC_OFFSETf_SET
#define READ_AMS_RX_CTL_7_GEN2r BCMI_TSCF_XGXS_READ_AMS_RX_CTL_7_GEN2r
#define WRITE_AMS_RX_CTL_7_GEN2r BCMI_TSCF_XGXS_WRITE_AMS_RX_CTL_7_GEN2r
#define MODIFY_AMS_RX_CTL_7_GEN2r BCMI_TSCF_XGXS_MODIFY_AMS_RX_CTL_7_GEN2r
#define READLN_AMS_RX_CTL_7_GEN2r BCMI_TSCF_XGXS_READLN_AMS_RX_CTL_7_GEN2r
#define WRITELN_AMS_RX_CTL_7_GEN2r BCMI_TSCF_XGXS_WRITELN_AMS_RX_CTL_7_GEN2r
#define WRITEALL_AMS_RX_CTL_7_GEN2r BCMI_TSCF_XGXS_WRITEALL_AMS_RX_CTL_7_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AMS_RX_CTL_7_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AMS_RX_CTL_8_GEN2
 * BLOCKS:   AMS_RX
 * REGADDR:  0xd0c8
 * DEVAD:    1
 * DESC:     AMS RX CONTROL_8
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_RX_DAC4CK_LMS dac4ck_lms
 *     AMS_RX_SPARE_135_134 ams rx reserved[135:134]
 *     AMS_RX_DAC4CK_PHS dac4ck_phs
 *     AMS_RX_SPARE_143_142 ams rx reserved[143:142]
 */
#define BCMI_TSCF_XGXS_AMS_RX_CTL_8_GEN2r (0x0001d0c8 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AMS_RX_CTL_8_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AMS_RX_CTL_8_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AMS_RX_CTL_8_GEN2r_s {
	uint32_t v[1];
	uint32_t ams_rx_ctl_8_gen2[1];
	uint32_t _ams_rx_ctl_8_gen2;
} BCMI_TSCF_XGXS_AMS_RX_CTL_8_GEN2r_t;

#define BCMI_TSCF_XGXS_AMS_RX_CTL_8_GEN2r_CLR(r) (r).ams_rx_ctl_8_gen2[0] = 0
#define BCMI_TSCF_XGXS_AMS_RX_CTL_8_GEN2r_SET(r,d) (r).ams_rx_ctl_8_gen2[0] = d
#define BCMI_TSCF_XGXS_AMS_RX_CTL_8_GEN2r_GET(r) (r).ams_rx_ctl_8_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AMS_RX_CTL_8_GEN2r_AMS_RX_SPARE_143_142f_GET(r) ((((r).ams_rx_ctl_8_gen2[0]) >> 14) & 0x3)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_8_GEN2r_AMS_RX_SPARE_143_142f_SET(r,f) (r).ams_rx_ctl_8_gen2[0]=(((r).ams_rx_ctl_8_gen2[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_TSCF_XGXS_AMS_RX_CTL_8_GEN2r_AMS_RX_DAC4CK_PHSf_GET(r) ((((r).ams_rx_ctl_8_gen2[0]) >> 8) & 0x3f)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_8_GEN2r_AMS_RX_DAC4CK_PHSf_SET(r,f) (r).ams_rx_ctl_8_gen2[0]=(((r).ams_rx_ctl_8_gen2[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8)) | (63 << (16 + 8))
#define BCMI_TSCF_XGXS_AMS_RX_CTL_8_GEN2r_AMS_RX_SPARE_135_134f_GET(r) ((((r).ams_rx_ctl_8_gen2[0]) >> 6) & 0x3)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_8_GEN2r_AMS_RX_SPARE_135_134f_SET(r,f) (r).ams_rx_ctl_8_gen2[0]=(((r).ams_rx_ctl_8_gen2[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6)) | (3 << (16 + 6))
#define BCMI_TSCF_XGXS_AMS_RX_CTL_8_GEN2r_AMS_RX_DAC4CK_LMSf_GET(r) (((r).ams_rx_ctl_8_gen2[0]) & 0x3f)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_8_GEN2r_AMS_RX_DAC4CK_LMSf_SET(r,f) (r).ams_rx_ctl_8_gen2[0]=(((r).ams_rx_ctl_8_gen2[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access AMS_RX_CTL_8_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AMS_RX_CTL_8_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_8_GEN2r,(_r._ams_rx_ctl_8_gen2))
#define BCMI_TSCF_XGXS_WRITE_AMS_RX_CTL_8_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_8_GEN2r,(_r._ams_rx_ctl_8_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AMS_RX_CTL_8_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_8_GEN2r,(_r._ams_rx_ctl_8_gen2))
#define BCMI_TSCF_XGXS_READLN_AMS_RX_CTL_8_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_8_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_ctl_8_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AMS_RX_CTL_8_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_8_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_ctl_8_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AMS_RX_CTL_8_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_8_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_rx_ctl_8_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_RX_CTL_8_GEN2r BCMI_TSCF_XGXS_AMS_RX_CTL_8_GEN2r
#define AMS_RX_CTL_8_GEN2r_SIZE BCMI_TSCF_XGXS_AMS_RX_CTL_8_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AMS_RX_CTL_8_GEN2r_t AMS_RX_CTL_8_GEN2r_t;
#define AMS_RX_CTL_8_GEN2r_CLR BCMI_TSCF_XGXS_AMS_RX_CTL_8_GEN2r_CLR
#define AMS_RX_CTL_8_GEN2r_SET BCMI_TSCF_XGXS_AMS_RX_CTL_8_GEN2r_SET
#define AMS_RX_CTL_8_GEN2r_GET BCMI_TSCF_XGXS_AMS_RX_CTL_8_GEN2r_GET
#define AMS_RX_CTL_8_GEN2r_AMS_RX_SPARE_143_142f_GET BCMI_TSCF_XGXS_AMS_RX_CTL_8_GEN2r_AMS_RX_SPARE_143_142f_GET
#define AMS_RX_CTL_8_GEN2r_AMS_RX_SPARE_143_142f_SET BCMI_TSCF_XGXS_AMS_RX_CTL_8_GEN2r_AMS_RX_SPARE_143_142f_SET
#define AMS_RX_CTL_8_GEN2r_AMS_RX_DAC4CK_PHSf_GET BCMI_TSCF_XGXS_AMS_RX_CTL_8_GEN2r_AMS_RX_DAC4CK_PHSf_GET
#define AMS_RX_CTL_8_GEN2r_AMS_RX_DAC4CK_PHSf_SET BCMI_TSCF_XGXS_AMS_RX_CTL_8_GEN2r_AMS_RX_DAC4CK_PHSf_SET
#define AMS_RX_CTL_8_GEN2r_AMS_RX_SPARE_135_134f_GET BCMI_TSCF_XGXS_AMS_RX_CTL_8_GEN2r_AMS_RX_SPARE_135_134f_GET
#define AMS_RX_CTL_8_GEN2r_AMS_RX_SPARE_135_134f_SET BCMI_TSCF_XGXS_AMS_RX_CTL_8_GEN2r_AMS_RX_SPARE_135_134f_SET
#define AMS_RX_CTL_8_GEN2r_AMS_RX_DAC4CK_LMSf_GET BCMI_TSCF_XGXS_AMS_RX_CTL_8_GEN2r_AMS_RX_DAC4CK_LMSf_GET
#define AMS_RX_CTL_8_GEN2r_AMS_RX_DAC4CK_LMSf_SET BCMI_TSCF_XGXS_AMS_RX_CTL_8_GEN2r_AMS_RX_DAC4CK_LMSf_SET
#define READ_AMS_RX_CTL_8_GEN2r BCMI_TSCF_XGXS_READ_AMS_RX_CTL_8_GEN2r
#define WRITE_AMS_RX_CTL_8_GEN2r BCMI_TSCF_XGXS_WRITE_AMS_RX_CTL_8_GEN2r
#define MODIFY_AMS_RX_CTL_8_GEN2r BCMI_TSCF_XGXS_MODIFY_AMS_RX_CTL_8_GEN2r
#define READLN_AMS_RX_CTL_8_GEN2r BCMI_TSCF_XGXS_READLN_AMS_RX_CTL_8_GEN2r
#define WRITELN_AMS_RX_CTL_8_GEN2r BCMI_TSCF_XGXS_WRITELN_AMS_RX_CTL_8_GEN2r
#define WRITEALL_AMS_RX_CTL_8_GEN2r BCMI_TSCF_XGXS_WRITEALL_AMS_RX_CTL_8_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AMS_RX_CTL_8_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AMS_RX_CTL_9_GEN2
 * BLOCKS:   AMS_RX
 * REGADDR:  0xd0c9
 * DEVAD:    1
 * DESC:     AMS RX CONTROL_9
 * RESETVAL: 0x300 (768)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_RX_DAC4CK_DAT dac4ck_dat
 *     AMS_RX_SPARE_151_150 ams rx reserved[151:150]
 *     AMS_RX_CLK_BW_CTRL clk_bw_ctrl<1:0> for 20G to 28G
 *     AMS_RX_EN_TAP9DELAY 0 less delay for 25-28g
 *     AMS_RX_SEL_D2CLP 0, high power for 25-28g
 *     AMS_RX_D2C_CLKBUF_IBIAS d2c and clock buffer ibias (max, mode, min)
 *     AMS_RX_SPARE_159 ams rx reserved[159]
 */
#define BCMI_TSCF_XGXS_AMS_RX_CTL_9_GEN2r (0x0001d0c9 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AMS_RX_CTL_9_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AMS_RX_CTL_9_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AMS_RX_CTL_9_GEN2r_s {
	uint32_t v[1];
	uint32_t ams_rx_ctl_9_gen2[1];
	uint32_t _ams_rx_ctl_9_gen2;
} BCMI_TSCF_XGXS_AMS_RX_CTL_9_GEN2r_t;

#define BCMI_TSCF_XGXS_AMS_RX_CTL_9_GEN2r_CLR(r) (r).ams_rx_ctl_9_gen2[0] = 0
#define BCMI_TSCF_XGXS_AMS_RX_CTL_9_GEN2r_SET(r,d) (r).ams_rx_ctl_9_gen2[0] = d
#define BCMI_TSCF_XGXS_AMS_RX_CTL_9_GEN2r_GET(r) (r).ams_rx_ctl_9_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AMS_RX_CTL_9_GEN2r_AMS_RX_SPARE_159f_GET(r) ((((r).ams_rx_ctl_9_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_9_GEN2r_AMS_RX_SPARE_159f_SET(r,f) (r).ams_rx_ctl_9_gen2[0]=(((r).ams_rx_ctl_9_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_AMS_RX_CTL_9_GEN2r_AMS_RX_D2C_CLKBUF_IBIASf_GET(r) ((((r).ams_rx_ctl_9_gen2[0]) >> 12) & 0x7)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_9_GEN2r_AMS_RX_D2C_CLKBUF_IBIASf_SET(r,f) (r).ams_rx_ctl_9_gen2[0]=(((r).ams_rx_ctl_9_gen2[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12)) | (7 << (16 + 12))
#define BCMI_TSCF_XGXS_AMS_RX_CTL_9_GEN2r_AMS_RX_SEL_D2CLPf_GET(r) ((((r).ams_rx_ctl_9_gen2[0]) >> 11) & 0x1)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_9_GEN2r_AMS_RX_SEL_D2CLPf_SET(r,f) (r).ams_rx_ctl_9_gen2[0]=(((r).ams_rx_ctl_9_gen2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_XGXS_AMS_RX_CTL_9_GEN2r_AMS_RX_EN_TAP9DELAYf_GET(r) ((((r).ams_rx_ctl_9_gen2[0]) >> 10) & 0x1)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_9_GEN2r_AMS_RX_EN_TAP9DELAYf_SET(r,f) (r).ams_rx_ctl_9_gen2[0]=(((r).ams_rx_ctl_9_gen2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_XGXS_AMS_RX_CTL_9_GEN2r_AMS_RX_CLK_BW_CTRLf_GET(r) ((((r).ams_rx_ctl_9_gen2[0]) >> 8) & 0x3)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_9_GEN2r_AMS_RX_CLK_BW_CTRLf_SET(r,f) (r).ams_rx_ctl_9_gen2[0]=(((r).ams_rx_ctl_9_gen2[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))
#define BCMI_TSCF_XGXS_AMS_RX_CTL_9_GEN2r_AMS_RX_SPARE_151_150f_GET(r) ((((r).ams_rx_ctl_9_gen2[0]) >> 6) & 0x3)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_9_GEN2r_AMS_RX_SPARE_151_150f_SET(r,f) (r).ams_rx_ctl_9_gen2[0]=(((r).ams_rx_ctl_9_gen2[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6)) | (3 << (16 + 6))
#define BCMI_TSCF_XGXS_AMS_RX_CTL_9_GEN2r_AMS_RX_DAC4CK_DATf_GET(r) (((r).ams_rx_ctl_9_gen2[0]) & 0x3f)
#define BCMI_TSCF_XGXS_AMS_RX_CTL_9_GEN2r_AMS_RX_DAC4CK_DATf_SET(r,f) (r).ams_rx_ctl_9_gen2[0]=(((r).ams_rx_ctl_9_gen2[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access AMS_RX_CTL_9_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AMS_RX_CTL_9_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_9_GEN2r,(_r._ams_rx_ctl_9_gen2))
#define BCMI_TSCF_XGXS_WRITE_AMS_RX_CTL_9_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_9_GEN2r,(_r._ams_rx_ctl_9_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AMS_RX_CTL_9_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_9_GEN2r,(_r._ams_rx_ctl_9_gen2))
#define BCMI_TSCF_XGXS_READLN_AMS_RX_CTL_9_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_9_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_ctl_9_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AMS_RX_CTL_9_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_9_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_ctl_9_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AMS_RX_CTL_9_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_RX_CTL_9_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_rx_ctl_9_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_RX_CTL_9_GEN2r BCMI_TSCF_XGXS_AMS_RX_CTL_9_GEN2r
#define AMS_RX_CTL_9_GEN2r_SIZE BCMI_TSCF_XGXS_AMS_RX_CTL_9_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AMS_RX_CTL_9_GEN2r_t AMS_RX_CTL_9_GEN2r_t;
#define AMS_RX_CTL_9_GEN2r_CLR BCMI_TSCF_XGXS_AMS_RX_CTL_9_GEN2r_CLR
#define AMS_RX_CTL_9_GEN2r_SET BCMI_TSCF_XGXS_AMS_RX_CTL_9_GEN2r_SET
#define AMS_RX_CTL_9_GEN2r_GET BCMI_TSCF_XGXS_AMS_RX_CTL_9_GEN2r_GET
#define AMS_RX_CTL_9_GEN2r_AMS_RX_SPARE_159f_GET BCMI_TSCF_XGXS_AMS_RX_CTL_9_GEN2r_AMS_RX_SPARE_159f_GET
#define AMS_RX_CTL_9_GEN2r_AMS_RX_SPARE_159f_SET BCMI_TSCF_XGXS_AMS_RX_CTL_9_GEN2r_AMS_RX_SPARE_159f_SET
#define AMS_RX_CTL_9_GEN2r_AMS_RX_D2C_CLKBUF_IBIASf_GET BCMI_TSCF_XGXS_AMS_RX_CTL_9_GEN2r_AMS_RX_D2C_CLKBUF_IBIASf_GET
#define AMS_RX_CTL_9_GEN2r_AMS_RX_D2C_CLKBUF_IBIASf_SET BCMI_TSCF_XGXS_AMS_RX_CTL_9_GEN2r_AMS_RX_D2C_CLKBUF_IBIASf_SET
#define AMS_RX_CTL_9_GEN2r_AMS_RX_SEL_D2CLPf_GET BCMI_TSCF_XGXS_AMS_RX_CTL_9_GEN2r_AMS_RX_SEL_D2CLPf_GET
#define AMS_RX_CTL_9_GEN2r_AMS_RX_SEL_D2CLPf_SET BCMI_TSCF_XGXS_AMS_RX_CTL_9_GEN2r_AMS_RX_SEL_D2CLPf_SET
#define AMS_RX_CTL_9_GEN2r_AMS_RX_EN_TAP9DELAYf_GET BCMI_TSCF_XGXS_AMS_RX_CTL_9_GEN2r_AMS_RX_EN_TAP9DELAYf_GET
#define AMS_RX_CTL_9_GEN2r_AMS_RX_EN_TAP9DELAYf_SET BCMI_TSCF_XGXS_AMS_RX_CTL_9_GEN2r_AMS_RX_EN_TAP9DELAYf_SET
#define AMS_RX_CTL_9_GEN2r_AMS_RX_CLK_BW_CTRLf_GET BCMI_TSCF_XGXS_AMS_RX_CTL_9_GEN2r_AMS_RX_CLK_BW_CTRLf_GET
#define AMS_RX_CTL_9_GEN2r_AMS_RX_CLK_BW_CTRLf_SET BCMI_TSCF_XGXS_AMS_RX_CTL_9_GEN2r_AMS_RX_CLK_BW_CTRLf_SET
#define AMS_RX_CTL_9_GEN2r_AMS_RX_SPARE_151_150f_GET BCMI_TSCF_XGXS_AMS_RX_CTL_9_GEN2r_AMS_RX_SPARE_151_150f_GET
#define AMS_RX_CTL_9_GEN2r_AMS_RX_SPARE_151_150f_SET BCMI_TSCF_XGXS_AMS_RX_CTL_9_GEN2r_AMS_RX_SPARE_151_150f_SET
#define AMS_RX_CTL_9_GEN2r_AMS_RX_DAC4CK_DATf_GET BCMI_TSCF_XGXS_AMS_RX_CTL_9_GEN2r_AMS_RX_DAC4CK_DATf_GET
#define AMS_RX_CTL_9_GEN2r_AMS_RX_DAC4CK_DATf_SET BCMI_TSCF_XGXS_AMS_RX_CTL_9_GEN2r_AMS_RX_DAC4CK_DATf_SET
#define READ_AMS_RX_CTL_9_GEN2r BCMI_TSCF_XGXS_READ_AMS_RX_CTL_9_GEN2r
#define WRITE_AMS_RX_CTL_9_GEN2r BCMI_TSCF_XGXS_WRITE_AMS_RX_CTL_9_GEN2r
#define MODIFY_AMS_RX_CTL_9_GEN2r BCMI_TSCF_XGXS_MODIFY_AMS_RX_CTL_9_GEN2r
#define READLN_AMS_RX_CTL_9_GEN2r BCMI_TSCF_XGXS_READLN_AMS_RX_CTL_9_GEN2r
#define WRITELN_AMS_RX_CTL_9_GEN2r BCMI_TSCF_XGXS_WRITELN_AMS_RX_CTL_9_GEN2r
#define WRITEALL_AMS_RX_CTL_9_GEN2r BCMI_TSCF_XGXS_WRITEALL_AMS_RX_CTL_9_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AMS_RX_CTL_9_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AMS_RX_STS_GEN2
 * BLOCKS:   AMS_RX
 * REGADDR:  0xd0cb
 * DEVAD:    1
 * DESC:     AMS RX STATUS
 * RESETVAL: 0x14 (20)
 * ACCESS:   R/O
 * FIELDS:
 *     AMS_RX_VGA_CTRL_GRAY Copy of VGA control vga_ctrl[4:0]
 *     AMS_RX_TAP1_DATA_THRESH_SEL_GRAY Copy of tap1 data threshold select in Gray code
 *     AMS_RX_PF_CTRL_GRAY Copy of peaking filter control rx_pf_ctrl[3:0]
 *     AMS_RX_SIGDET    Signal Detect status
 */
#define BCMI_TSCF_XGXS_AMS_RX_STS_GEN2r (0x0001d0cb | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AMS_RX_STS_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AMS_RX_STS_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AMS_RX_STS_GEN2r_s {
	uint32_t v[1];
	uint32_t ams_rx_sts_gen2[1];
	uint32_t _ams_rx_sts_gen2;
} BCMI_TSCF_XGXS_AMS_RX_STS_GEN2r_t;

#define BCMI_TSCF_XGXS_AMS_RX_STS_GEN2r_CLR(r) (r).ams_rx_sts_gen2[0] = 0
#define BCMI_TSCF_XGXS_AMS_RX_STS_GEN2r_SET(r,d) (r).ams_rx_sts_gen2[0] = d
#define BCMI_TSCF_XGXS_AMS_RX_STS_GEN2r_GET(r) (r).ams_rx_sts_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AMS_RX_STS_GEN2r_AMS_RX_SIGDETf_GET(r) ((((r).ams_rx_sts_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_AMS_RX_STS_GEN2r_AMS_RX_SIGDETf_SET(r,f) (r).ams_rx_sts_gen2[0]=(((r).ams_rx_sts_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_AMS_RX_STS_GEN2r_AMS_RX_PF_CTRL_GRAYf_GET(r) ((((r).ams_rx_sts_gen2[0]) >> 11) & 0xf)
#define BCMI_TSCF_XGXS_AMS_RX_STS_GEN2r_AMS_RX_PF_CTRL_GRAYf_SET(r,f) (r).ams_rx_sts_gen2[0]=(((r).ams_rx_sts_gen2[0] & ~((uint32_t)0xf << 11)) | ((((uint32_t)f) & 0xf) << 11)) | (15 << (16 + 11))
#define BCMI_TSCF_XGXS_AMS_RX_STS_GEN2r_AMS_RX_TAP1_DATA_THRESH_SEL_GRAYf_GET(r) ((((r).ams_rx_sts_gen2[0]) >> 5) & 0x3f)
#define BCMI_TSCF_XGXS_AMS_RX_STS_GEN2r_AMS_RX_TAP1_DATA_THRESH_SEL_GRAYf_SET(r,f) (r).ams_rx_sts_gen2[0]=(((r).ams_rx_sts_gen2[0] & ~((uint32_t)0x3f << 5)) | ((((uint32_t)f) & 0x3f) << 5)) | (63 << (16 + 5))
#define BCMI_TSCF_XGXS_AMS_RX_STS_GEN2r_AMS_RX_VGA_CTRL_GRAYf_GET(r) (((r).ams_rx_sts_gen2[0]) & 0x1f)
#define BCMI_TSCF_XGXS_AMS_RX_STS_GEN2r_AMS_RX_VGA_CTRL_GRAYf_SET(r,f) (r).ams_rx_sts_gen2[0]=(((r).ams_rx_sts_gen2[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access AMS_RX_STS_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AMS_RX_STS_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AMS_RX_STS_GEN2r,(_r._ams_rx_sts_gen2))
#define BCMI_TSCF_XGXS_WRITE_AMS_RX_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_RX_STS_GEN2r,(_r._ams_rx_sts_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AMS_RX_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_RX_STS_GEN2r,(_r._ams_rx_sts_gen2))
#define BCMI_TSCF_XGXS_READLN_AMS_RX_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AMS_RX_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_sts_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AMS_RX_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_RX_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_sts_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AMS_RX_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_RX_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_rx_sts_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_RX_STS_GEN2r BCMI_TSCF_XGXS_AMS_RX_STS_GEN2r
#define AMS_RX_STS_GEN2r_SIZE BCMI_TSCF_XGXS_AMS_RX_STS_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AMS_RX_STS_GEN2r_t AMS_RX_STS_GEN2r_t;
#define AMS_RX_STS_GEN2r_CLR BCMI_TSCF_XGXS_AMS_RX_STS_GEN2r_CLR
#define AMS_RX_STS_GEN2r_SET BCMI_TSCF_XGXS_AMS_RX_STS_GEN2r_SET
#define AMS_RX_STS_GEN2r_GET BCMI_TSCF_XGXS_AMS_RX_STS_GEN2r_GET
#define AMS_RX_STS_GEN2r_AMS_RX_SIGDETf_GET BCMI_TSCF_XGXS_AMS_RX_STS_GEN2r_AMS_RX_SIGDETf_GET
#define AMS_RX_STS_GEN2r_AMS_RX_SIGDETf_SET BCMI_TSCF_XGXS_AMS_RX_STS_GEN2r_AMS_RX_SIGDETf_SET
#define AMS_RX_STS_GEN2r_AMS_RX_PF_CTRL_GRAYf_GET BCMI_TSCF_XGXS_AMS_RX_STS_GEN2r_AMS_RX_PF_CTRL_GRAYf_GET
#define AMS_RX_STS_GEN2r_AMS_RX_PF_CTRL_GRAYf_SET BCMI_TSCF_XGXS_AMS_RX_STS_GEN2r_AMS_RX_PF_CTRL_GRAYf_SET
#define AMS_RX_STS_GEN2r_AMS_RX_TAP1_DATA_THRESH_SEL_GRAYf_GET BCMI_TSCF_XGXS_AMS_RX_STS_GEN2r_AMS_RX_TAP1_DATA_THRESH_SEL_GRAYf_GET
#define AMS_RX_STS_GEN2r_AMS_RX_TAP1_DATA_THRESH_SEL_GRAYf_SET BCMI_TSCF_XGXS_AMS_RX_STS_GEN2r_AMS_RX_TAP1_DATA_THRESH_SEL_GRAYf_SET
#define AMS_RX_STS_GEN2r_AMS_RX_VGA_CTRL_GRAYf_GET BCMI_TSCF_XGXS_AMS_RX_STS_GEN2r_AMS_RX_VGA_CTRL_GRAYf_GET
#define AMS_RX_STS_GEN2r_AMS_RX_VGA_CTRL_GRAYf_SET BCMI_TSCF_XGXS_AMS_RX_STS_GEN2r_AMS_RX_VGA_CTRL_GRAYf_SET
#define READ_AMS_RX_STS_GEN2r BCMI_TSCF_XGXS_READ_AMS_RX_STS_GEN2r
#define WRITE_AMS_RX_STS_GEN2r BCMI_TSCF_XGXS_WRITE_AMS_RX_STS_GEN2r
#define MODIFY_AMS_RX_STS_GEN2r BCMI_TSCF_XGXS_MODIFY_AMS_RX_STS_GEN2r
#define READLN_AMS_RX_STS_GEN2r BCMI_TSCF_XGXS_READLN_AMS_RX_STS_GEN2r
#define WRITELN_AMS_RX_STS_GEN2r BCMI_TSCF_XGXS_WRITELN_AMS_RX_STS_GEN2r
#define WRITEALL_AMS_RX_STS_GEN2r BCMI_TSCF_XGXS_WRITEALL_AMS_RX_STS_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AMS_RX_STS_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AMS_TX_CTL_0_GEN2
 * BLOCKS:   AMS_TX
 * REGADDR:  0xd0d0
 * DEVAD:    1
 * DESC:     AMS TX CONTROL_0
 * RESETVAL: 0xc0 (192)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_TX_SPARE_0   AMS reserved[0]
 *     AMS_TX_SPARE_3_1 AMS reserved[3:1]
 *     AMS_TX_TEST_DATA generates output pattern
 *     AMS_TX_TICKSEL   timing control of load signal at ana/dig interface
 *     AMS_TX_VDDR_BGB  bias mode control
 *     AMS_TX_DCC_SEL   select DCC mode. 0=using DCC circuit. 1= signle ended
 *     AMS_TX_DCC_DIS   disable DCC
 *     AMS_TX_CAL_OFF   disable RESCAL[3:0], enable cal_aux[3:0]
 *     AMS_TX_CAL_AUX   Rescal manual control when cal_off=1
 */
#define BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r (0x0001d0d0 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AMS_TX_CTL_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r_s {
	uint32_t v[1];
	uint32_t ams_tx_ctl_0_gen2[1];
	uint32_t _ams_tx_ctl_0_gen2;
} BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r_t;

#define BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r_CLR(r) (r).ams_tx_ctl_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r_SET(r,d) (r).ams_tx_ctl_0_gen2[0] = d
#define BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r_GET(r) (r).ams_tx_ctl_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r_AMS_TX_CAL_AUXf_GET(r) ((((r).ams_tx_ctl_0_gen2[0]) >> 12) & 0xf)
#define BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r_AMS_TX_CAL_AUXf_SET(r,f) (r).ams_tx_ctl_0_gen2[0]=(((r).ams_tx_ctl_0_gen2[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r_AMS_TX_CAL_OFFf_GET(r) ((((r).ams_tx_ctl_0_gen2[0]) >> 11) & 0x1)
#define BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r_AMS_TX_CAL_OFFf_SET(r,f) (r).ams_tx_ctl_0_gen2[0]=(((r).ams_tx_ctl_0_gen2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r_AMS_TX_DCC_DISf_GET(r) ((((r).ams_tx_ctl_0_gen2[0]) >> 10) & 0x1)
#define BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r_AMS_TX_DCC_DISf_SET(r,f) (r).ams_tx_ctl_0_gen2[0]=(((r).ams_tx_ctl_0_gen2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r_AMS_TX_DCC_SELf_GET(r) ((((r).ams_tx_ctl_0_gen2[0]) >> 9) & 0x1)
#define BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r_AMS_TX_DCC_SELf_SET(r,f) (r).ams_tx_ctl_0_gen2[0]=(((r).ams_tx_ctl_0_gen2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r_AMS_TX_VDDR_BGBf_GET(r) ((((r).ams_tx_ctl_0_gen2[0]) >> 8) & 0x1)
#define BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r_AMS_TX_VDDR_BGBf_SET(r,f) (r).ams_tx_ctl_0_gen2[0]=(((r).ams_tx_ctl_0_gen2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r_AMS_TX_TICKSELf_GET(r) ((((r).ams_tx_ctl_0_gen2[0]) >> 6) & 0x3)
#define BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r_AMS_TX_TICKSELf_SET(r,f) (r).ams_tx_ctl_0_gen2[0]=(((r).ams_tx_ctl_0_gen2[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6)) | (3 << (16 + 6))
#define BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r_AMS_TX_TEST_DATAf_GET(r) ((((r).ams_tx_ctl_0_gen2[0]) >> 4) & 0x3)
#define BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r_AMS_TX_TEST_DATAf_SET(r,f) (r).ams_tx_ctl_0_gen2[0]=(((r).ams_tx_ctl_0_gen2[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r_AMS_TX_SPARE_3_1f_GET(r) ((((r).ams_tx_ctl_0_gen2[0]) >> 1) & 0x7)
#define BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r_AMS_TX_SPARE_3_1f_SET(r,f) (r).ams_tx_ctl_0_gen2[0]=(((r).ams_tx_ctl_0_gen2[0] & ~((uint32_t)0x7 << 1)) | ((((uint32_t)f) & 0x7) << 1)) | (7 << (16 + 1))
#define BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r_AMS_TX_SPARE_0f_GET(r) (((r).ams_tx_ctl_0_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r_AMS_TX_SPARE_0f_SET(r,f) (r).ams_tx_ctl_0_gen2[0]=(((r).ams_tx_ctl_0_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AMS_TX_CTL_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AMS_TX_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r,(_r._ams_tx_ctl_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_AMS_TX_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r,(_r._ams_tx_ctl_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AMS_TX_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r,(_r._ams_tx_ctl_0_gen2))
#define BCMI_TSCF_XGXS_READLN_AMS_TX_CTL_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_tx_ctl_0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AMS_TX_CTL_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_tx_ctl_0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AMS_TX_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_tx_ctl_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_TX_CTL_0_GEN2r BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r
#define AMS_TX_CTL_0_GEN2r_SIZE BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r_t AMS_TX_CTL_0_GEN2r_t;
#define AMS_TX_CTL_0_GEN2r_CLR BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r_CLR
#define AMS_TX_CTL_0_GEN2r_SET BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r_SET
#define AMS_TX_CTL_0_GEN2r_GET BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r_GET
#define AMS_TX_CTL_0_GEN2r_AMS_TX_CAL_AUXf_GET BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r_AMS_TX_CAL_AUXf_GET
#define AMS_TX_CTL_0_GEN2r_AMS_TX_CAL_AUXf_SET BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r_AMS_TX_CAL_AUXf_SET
#define AMS_TX_CTL_0_GEN2r_AMS_TX_CAL_OFFf_GET BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r_AMS_TX_CAL_OFFf_GET
#define AMS_TX_CTL_0_GEN2r_AMS_TX_CAL_OFFf_SET BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r_AMS_TX_CAL_OFFf_SET
#define AMS_TX_CTL_0_GEN2r_AMS_TX_DCC_DISf_GET BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r_AMS_TX_DCC_DISf_GET
#define AMS_TX_CTL_0_GEN2r_AMS_TX_DCC_DISf_SET BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r_AMS_TX_DCC_DISf_SET
#define AMS_TX_CTL_0_GEN2r_AMS_TX_DCC_SELf_GET BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r_AMS_TX_DCC_SELf_GET
#define AMS_TX_CTL_0_GEN2r_AMS_TX_DCC_SELf_SET BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r_AMS_TX_DCC_SELf_SET
#define AMS_TX_CTL_0_GEN2r_AMS_TX_VDDR_BGBf_GET BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r_AMS_TX_VDDR_BGBf_GET
#define AMS_TX_CTL_0_GEN2r_AMS_TX_VDDR_BGBf_SET BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r_AMS_TX_VDDR_BGBf_SET
#define AMS_TX_CTL_0_GEN2r_AMS_TX_TICKSELf_GET BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r_AMS_TX_TICKSELf_GET
#define AMS_TX_CTL_0_GEN2r_AMS_TX_TICKSELf_SET BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r_AMS_TX_TICKSELf_SET
#define AMS_TX_CTL_0_GEN2r_AMS_TX_TEST_DATAf_GET BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r_AMS_TX_TEST_DATAf_GET
#define AMS_TX_CTL_0_GEN2r_AMS_TX_TEST_DATAf_SET BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r_AMS_TX_TEST_DATAf_SET
#define AMS_TX_CTL_0_GEN2r_AMS_TX_SPARE_3_1f_GET BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r_AMS_TX_SPARE_3_1f_GET
#define AMS_TX_CTL_0_GEN2r_AMS_TX_SPARE_3_1f_SET BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r_AMS_TX_SPARE_3_1f_SET
#define AMS_TX_CTL_0_GEN2r_AMS_TX_SPARE_0f_GET BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r_AMS_TX_SPARE_0f_GET
#define AMS_TX_CTL_0_GEN2r_AMS_TX_SPARE_0f_SET BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r_AMS_TX_SPARE_0f_SET
#define READ_AMS_TX_CTL_0_GEN2r BCMI_TSCF_XGXS_READ_AMS_TX_CTL_0_GEN2r
#define WRITE_AMS_TX_CTL_0_GEN2r BCMI_TSCF_XGXS_WRITE_AMS_TX_CTL_0_GEN2r
#define MODIFY_AMS_TX_CTL_0_GEN2r BCMI_TSCF_XGXS_MODIFY_AMS_TX_CTL_0_GEN2r
#define READLN_AMS_TX_CTL_0_GEN2r BCMI_TSCF_XGXS_READLN_AMS_TX_CTL_0_GEN2r
#define WRITELN_AMS_TX_CTL_0_GEN2r BCMI_TSCF_XGXS_WRITELN_AMS_TX_CTL_0_GEN2r
#define WRITEALL_AMS_TX_CTL_0_GEN2r BCMI_TSCF_XGXS_WRITEALL_AMS_TX_CTL_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AMS_TX_CTL_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AMS_TX_CTL_1_GEN2
 * BLOCKS:   AMS_TX
 * REGADDR:  0xd0d1
 * DEVAD:    1
 * DESC:     AMS TX CONTROL_1
 * RESETVAL: 0x2000 (8192)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_TX_IBIAS     master bias diode
 *     AMS_TX_SPARE_21_19 AMS reserved [21:19]
 *     AMS_TX_ICML      clock input buffer current control
 *     AMS_TX_ILDO      LDO bias current control
 *     AMS_TX_LDO_VREF  Vref. Adjustment
 *     AMS_TX_SEL_EMPH_MODE KR pre-emphasis mode enable
 *     AMS_TX_SPARE_31  AMS reserved[31]
 */
#define BCMI_TSCF_XGXS_AMS_TX_CTL_1_GEN2r (0x0001d0d1 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AMS_TX_CTL_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AMS_TX_CTL_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AMS_TX_CTL_1_GEN2r_s {
	uint32_t v[1];
	uint32_t ams_tx_ctl_1_gen2[1];
	uint32_t _ams_tx_ctl_1_gen2;
} BCMI_TSCF_XGXS_AMS_TX_CTL_1_GEN2r_t;

#define BCMI_TSCF_XGXS_AMS_TX_CTL_1_GEN2r_CLR(r) (r).ams_tx_ctl_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_AMS_TX_CTL_1_GEN2r_SET(r,d) (r).ams_tx_ctl_1_gen2[0] = d
#define BCMI_TSCF_XGXS_AMS_TX_CTL_1_GEN2r_GET(r) (r).ams_tx_ctl_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AMS_TX_CTL_1_GEN2r_AMS_TX_SPARE_31f_GET(r) ((((r).ams_tx_ctl_1_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_AMS_TX_CTL_1_GEN2r_AMS_TX_SPARE_31f_SET(r,f) (r).ams_tx_ctl_1_gen2[0]=(((r).ams_tx_ctl_1_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_AMS_TX_CTL_1_GEN2r_AMS_TX_SEL_EMPH_MODEf_GET(r) ((((r).ams_tx_ctl_1_gen2[0]) >> 14) & 0x1)
#define BCMI_TSCF_XGXS_AMS_TX_CTL_1_GEN2r_AMS_TX_SEL_EMPH_MODEf_SET(r,f) (r).ams_tx_ctl_1_gen2[0]=(((r).ams_tx_ctl_1_gen2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_XGXS_AMS_TX_CTL_1_GEN2r_AMS_TX_LDO_VREFf_GET(r) ((((r).ams_tx_ctl_1_gen2[0]) >> 12) & 0x3)
#define BCMI_TSCF_XGXS_AMS_TX_CTL_1_GEN2r_AMS_TX_LDO_VREFf_SET(r,f) (r).ams_tx_ctl_1_gen2[0]=(((r).ams_tx_ctl_1_gen2[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12)) | (3 << (16 + 12))
#define BCMI_TSCF_XGXS_AMS_TX_CTL_1_GEN2r_AMS_TX_ILDOf_GET(r) ((((r).ams_tx_ctl_1_gen2[0]) >> 9) & 0x7)
#define BCMI_TSCF_XGXS_AMS_TX_CTL_1_GEN2r_AMS_TX_ILDOf_SET(r,f) (r).ams_tx_ctl_1_gen2[0]=(((r).ams_tx_ctl_1_gen2[0] & ~((uint32_t)0x7 << 9)) | ((((uint32_t)f) & 0x7) << 9)) | (7 << (16 + 9))
#define BCMI_TSCF_XGXS_AMS_TX_CTL_1_GEN2r_AMS_TX_ICMLf_GET(r) ((((r).ams_tx_ctl_1_gen2[0]) >> 6) & 0x7)
#define BCMI_TSCF_XGXS_AMS_TX_CTL_1_GEN2r_AMS_TX_ICMLf_SET(r,f) (r).ams_tx_ctl_1_gen2[0]=(((r).ams_tx_ctl_1_gen2[0] & ~((uint32_t)0x7 << 6)) | ((((uint32_t)f) & 0x7) << 6)) | (7 << (16 + 6))
#define BCMI_TSCF_XGXS_AMS_TX_CTL_1_GEN2r_AMS_TX_SPARE_21_19f_GET(r) ((((r).ams_tx_ctl_1_gen2[0]) >> 3) & 0x7)
#define BCMI_TSCF_XGXS_AMS_TX_CTL_1_GEN2r_AMS_TX_SPARE_21_19f_SET(r,f) (r).ams_tx_ctl_1_gen2[0]=(((r).ams_tx_ctl_1_gen2[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3)) | (7 << (16 + 3))
#define BCMI_TSCF_XGXS_AMS_TX_CTL_1_GEN2r_AMS_TX_IBIASf_GET(r) (((r).ams_tx_ctl_1_gen2[0]) & 0x7)
#define BCMI_TSCF_XGXS_AMS_TX_CTL_1_GEN2r_AMS_TX_IBIASf_SET(r,f) (r).ams_tx_ctl_1_gen2[0]=(((r).ams_tx_ctl_1_gen2[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access AMS_TX_CTL_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AMS_TX_CTL_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AMS_TX_CTL_1_GEN2r,(_r._ams_tx_ctl_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_AMS_TX_CTL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_TX_CTL_1_GEN2r,(_r._ams_tx_ctl_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AMS_TX_CTL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_TX_CTL_1_GEN2r,(_r._ams_tx_ctl_1_gen2))
#define BCMI_TSCF_XGXS_READLN_AMS_TX_CTL_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AMS_TX_CTL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_tx_ctl_1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AMS_TX_CTL_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_TX_CTL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_tx_ctl_1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AMS_TX_CTL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_TX_CTL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_tx_ctl_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_TX_CTL_1_GEN2r BCMI_TSCF_XGXS_AMS_TX_CTL_1_GEN2r
#define AMS_TX_CTL_1_GEN2r_SIZE BCMI_TSCF_XGXS_AMS_TX_CTL_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AMS_TX_CTL_1_GEN2r_t AMS_TX_CTL_1_GEN2r_t;
#define AMS_TX_CTL_1_GEN2r_CLR BCMI_TSCF_XGXS_AMS_TX_CTL_1_GEN2r_CLR
#define AMS_TX_CTL_1_GEN2r_SET BCMI_TSCF_XGXS_AMS_TX_CTL_1_GEN2r_SET
#define AMS_TX_CTL_1_GEN2r_GET BCMI_TSCF_XGXS_AMS_TX_CTL_1_GEN2r_GET
#define AMS_TX_CTL_1_GEN2r_AMS_TX_SPARE_31f_GET BCMI_TSCF_XGXS_AMS_TX_CTL_1_GEN2r_AMS_TX_SPARE_31f_GET
#define AMS_TX_CTL_1_GEN2r_AMS_TX_SPARE_31f_SET BCMI_TSCF_XGXS_AMS_TX_CTL_1_GEN2r_AMS_TX_SPARE_31f_SET
#define AMS_TX_CTL_1_GEN2r_AMS_TX_SEL_EMPH_MODEf_GET BCMI_TSCF_XGXS_AMS_TX_CTL_1_GEN2r_AMS_TX_SEL_EMPH_MODEf_GET
#define AMS_TX_CTL_1_GEN2r_AMS_TX_SEL_EMPH_MODEf_SET BCMI_TSCF_XGXS_AMS_TX_CTL_1_GEN2r_AMS_TX_SEL_EMPH_MODEf_SET
#define AMS_TX_CTL_1_GEN2r_AMS_TX_LDO_VREFf_GET BCMI_TSCF_XGXS_AMS_TX_CTL_1_GEN2r_AMS_TX_LDO_VREFf_GET
#define AMS_TX_CTL_1_GEN2r_AMS_TX_LDO_VREFf_SET BCMI_TSCF_XGXS_AMS_TX_CTL_1_GEN2r_AMS_TX_LDO_VREFf_SET
#define AMS_TX_CTL_1_GEN2r_AMS_TX_ILDOf_GET BCMI_TSCF_XGXS_AMS_TX_CTL_1_GEN2r_AMS_TX_ILDOf_GET
#define AMS_TX_CTL_1_GEN2r_AMS_TX_ILDOf_SET BCMI_TSCF_XGXS_AMS_TX_CTL_1_GEN2r_AMS_TX_ILDOf_SET
#define AMS_TX_CTL_1_GEN2r_AMS_TX_ICMLf_GET BCMI_TSCF_XGXS_AMS_TX_CTL_1_GEN2r_AMS_TX_ICMLf_GET
#define AMS_TX_CTL_1_GEN2r_AMS_TX_ICMLf_SET BCMI_TSCF_XGXS_AMS_TX_CTL_1_GEN2r_AMS_TX_ICMLf_SET
#define AMS_TX_CTL_1_GEN2r_AMS_TX_SPARE_21_19f_GET BCMI_TSCF_XGXS_AMS_TX_CTL_1_GEN2r_AMS_TX_SPARE_21_19f_GET
#define AMS_TX_CTL_1_GEN2r_AMS_TX_SPARE_21_19f_SET BCMI_TSCF_XGXS_AMS_TX_CTL_1_GEN2r_AMS_TX_SPARE_21_19f_SET
#define AMS_TX_CTL_1_GEN2r_AMS_TX_IBIASf_GET BCMI_TSCF_XGXS_AMS_TX_CTL_1_GEN2r_AMS_TX_IBIASf_GET
#define AMS_TX_CTL_1_GEN2r_AMS_TX_IBIASf_SET BCMI_TSCF_XGXS_AMS_TX_CTL_1_GEN2r_AMS_TX_IBIASf_SET
#define READ_AMS_TX_CTL_1_GEN2r BCMI_TSCF_XGXS_READ_AMS_TX_CTL_1_GEN2r
#define WRITE_AMS_TX_CTL_1_GEN2r BCMI_TSCF_XGXS_WRITE_AMS_TX_CTL_1_GEN2r
#define MODIFY_AMS_TX_CTL_1_GEN2r BCMI_TSCF_XGXS_MODIFY_AMS_TX_CTL_1_GEN2r
#define READLN_AMS_TX_CTL_1_GEN2r BCMI_TSCF_XGXS_READLN_AMS_TX_CTL_1_GEN2r
#define WRITELN_AMS_TX_CTL_1_GEN2r BCMI_TSCF_XGXS_WRITELN_AMS_TX_CTL_1_GEN2r
#define WRITEALL_AMS_TX_CTL_1_GEN2r BCMI_TSCF_XGXS_WRITEALL_AMS_TX_CTL_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AMS_TX_CTL_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AMS_TX_CTL_2_GEN2
 * BLOCKS:   AMS_TX
 * REGADDR:  0xd0d2
 * DEVAD:    1
 * DESC:     AMS TX CONTROL_2
 * RESETVAL: 0xf (15)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_TX_AMP_CTL   master amplitude control
 *     AMS_TX_POST3_COEF Donot use. ( driven by hardware)
 *     AMS_TX_SIGN_POST3 Donot use. ( driven by hardware)
 *     AMS_TX_POST2_COEF Donot use. ( driven by hardware)
 *     AMS_TX_SIGN_POST2 Donot use. ( driven by hardware)
 *     AMS_TX_DRIVERMODE half amplitude / double resolution for main tap
 *     AMS_TX_ELEC_IDLE_AUX force electrical idle mode
 */
#define BCMI_TSCF_XGXS_AMS_TX_CTL_2_GEN2r (0x0001d0d2 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AMS_TX_CTL_2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AMS_TX_CTL_2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AMS_TX_CTL_2_GEN2r_s {
	uint32_t v[1];
	uint32_t ams_tx_ctl_2_gen2[1];
	uint32_t _ams_tx_ctl_2_gen2;
} BCMI_TSCF_XGXS_AMS_TX_CTL_2_GEN2r_t;

#define BCMI_TSCF_XGXS_AMS_TX_CTL_2_GEN2r_CLR(r) (r).ams_tx_ctl_2_gen2[0] = 0
#define BCMI_TSCF_XGXS_AMS_TX_CTL_2_GEN2r_SET(r,d) (r).ams_tx_ctl_2_gen2[0] = d
#define BCMI_TSCF_XGXS_AMS_TX_CTL_2_GEN2r_GET(r) (r).ams_tx_ctl_2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AMS_TX_CTL_2_GEN2r_AMS_TX_ELEC_IDLE_AUXf_GET(r) ((((r).ams_tx_ctl_2_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_AMS_TX_CTL_2_GEN2r_AMS_TX_ELEC_IDLE_AUXf_SET(r,f) (r).ams_tx_ctl_2_gen2[0]=(((r).ams_tx_ctl_2_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_AMS_TX_CTL_2_GEN2r_AMS_TX_DRIVERMODEf_GET(r) ((((r).ams_tx_ctl_2_gen2[0]) >> 13) & 0x3)
#define BCMI_TSCF_XGXS_AMS_TX_CTL_2_GEN2r_AMS_TX_DRIVERMODEf_SET(r,f) (r).ams_tx_ctl_2_gen2[0]=(((r).ams_tx_ctl_2_gen2[0] & ~((uint32_t)0x3 << 13)) | ((((uint32_t)f) & 0x3) << 13)) | (3 << (16 + 13))
#define BCMI_TSCF_XGXS_AMS_TX_CTL_2_GEN2r_AMS_TX_SIGN_POST2f_GET(r) ((((r).ams_tx_ctl_2_gen2[0]) >> 12) & 0x1)
#define BCMI_TSCF_XGXS_AMS_TX_CTL_2_GEN2r_AMS_TX_SIGN_POST2f_SET(r,f) (r).ams_tx_ctl_2_gen2[0]=(((r).ams_tx_ctl_2_gen2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_TSCF_XGXS_AMS_TX_CTL_2_GEN2r_AMS_TX_POST2_COEFf_GET(r) ((((r).ams_tx_ctl_2_gen2[0]) >> 8) & 0xf)
#define BCMI_TSCF_XGXS_AMS_TX_CTL_2_GEN2r_AMS_TX_POST2_COEFf_SET(r,f) (r).ams_tx_ctl_2_gen2[0]=(((r).ams_tx_ctl_2_gen2[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_XGXS_AMS_TX_CTL_2_GEN2r_AMS_TX_SIGN_POST3f_GET(r) ((((r).ams_tx_ctl_2_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_AMS_TX_CTL_2_GEN2r_AMS_TX_SIGN_POST3f_SET(r,f) (r).ams_tx_ctl_2_gen2[0]=(((r).ams_tx_ctl_2_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_AMS_TX_CTL_2_GEN2r_AMS_TX_POST3_COEFf_GET(r) ((((r).ams_tx_ctl_2_gen2[0]) >> 4) & 0x7)
#define BCMI_TSCF_XGXS_AMS_TX_CTL_2_GEN2r_AMS_TX_POST3_COEFf_SET(r,f) (r).ams_tx_ctl_2_gen2[0]=(((r).ams_tx_ctl_2_gen2[0] & ~((uint32_t)0x7 << 4)) | ((((uint32_t)f) & 0x7) << 4)) | (7 << (16 + 4))
#define BCMI_TSCF_XGXS_AMS_TX_CTL_2_GEN2r_AMS_TX_AMP_CTLf_GET(r) (((r).ams_tx_ctl_2_gen2[0]) & 0xf)
#define BCMI_TSCF_XGXS_AMS_TX_CTL_2_GEN2r_AMS_TX_AMP_CTLf_SET(r,f) (r).ams_tx_ctl_2_gen2[0]=(((r).ams_tx_ctl_2_gen2[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access AMS_TX_CTL_2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AMS_TX_CTL_2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AMS_TX_CTL_2_GEN2r,(_r._ams_tx_ctl_2_gen2))
#define BCMI_TSCF_XGXS_WRITE_AMS_TX_CTL_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_TX_CTL_2_GEN2r,(_r._ams_tx_ctl_2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AMS_TX_CTL_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_TX_CTL_2_GEN2r,(_r._ams_tx_ctl_2_gen2))
#define BCMI_TSCF_XGXS_READLN_AMS_TX_CTL_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AMS_TX_CTL_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_tx_ctl_2_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AMS_TX_CTL_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_TX_CTL_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_tx_ctl_2_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AMS_TX_CTL_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_TX_CTL_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_tx_ctl_2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_TX_CTL_2_GEN2r BCMI_TSCF_XGXS_AMS_TX_CTL_2_GEN2r
#define AMS_TX_CTL_2_GEN2r_SIZE BCMI_TSCF_XGXS_AMS_TX_CTL_2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AMS_TX_CTL_2_GEN2r_t AMS_TX_CTL_2_GEN2r_t;
#define AMS_TX_CTL_2_GEN2r_CLR BCMI_TSCF_XGXS_AMS_TX_CTL_2_GEN2r_CLR
#define AMS_TX_CTL_2_GEN2r_SET BCMI_TSCF_XGXS_AMS_TX_CTL_2_GEN2r_SET
#define AMS_TX_CTL_2_GEN2r_GET BCMI_TSCF_XGXS_AMS_TX_CTL_2_GEN2r_GET
#define AMS_TX_CTL_2_GEN2r_AMS_TX_ELEC_IDLE_AUXf_GET BCMI_TSCF_XGXS_AMS_TX_CTL_2_GEN2r_AMS_TX_ELEC_IDLE_AUXf_GET
#define AMS_TX_CTL_2_GEN2r_AMS_TX_ELEC_IDLE_AUXf_SET BCMI_TSCF_XGXS_AMS_TX_CTL_2_GEN2r_AMS_TX_ELEC_IDLE_AUXf_SET
#define AMS_TX_CTL_2_GEN2r_AMS_TX_DRIVERMODEf_GET BCMI_TSCF_XGXS_AMS_TX_CTL_2_GEN2r_AMS_TX_DRIVERMODEf_GET
#define AMS_TX_CTL_2_GEN2r_AMS_TX_DRIVERMODEf_SET BCMI_TSCF_XGXS_AMS_TX_CTL_2_GEN2r_AMS_TX_DRIVERMODEf_SET
#define AMS_TX_CTL_2_GEN2r_AMS_TX_SIGN_POST2f_GET BCMI_TSCF_XGXS_AMS_TX_CTL_2_GEN2r_AMS_TX_SIGN_POST2f_GET
#define AMS_TX_CTL_2_GEN2r_AMS_TX_SIGN_POST2f_SET BCMI_TSCF_XGXS_AMS_TX_CTL_2_GEN2r_AMS_TX_SIGN_POST2f_SET
#define AMS_TX_CTL_2_GEN2r_AMS_TX_POST2_COEFf_GET BCMI_TSCF_XGXS_AMS_TX_CTL_2_GEN2r_AMS_TX_POST2_COEFf_GET
#define AMS_TX_CTL_2_GEN2r_AMS_TX_POST2_COEFf_SET BCMI_TSCF_XGXS_AMS_TX_CTL_2_GEN2r_AMS_TX_POST2_COEFf_SET
#define AMS_TX_CTL_2_GEN2r_AMS_TX_SIGN_POST3f_GET BCMI_TSCF_XGXS_AMS_TX_CTL_2_GEN2r_AMS_TX_SIGN_POST3f_GET
#define AMS_TX_CTL_2_GEN2r_AMS_TX_SIGN_POST3f_SET BCMI_TSCF_XGXS_AMS_TX_CTL_2_GEN2r_AMS_TX_SIGN_POST3f_SET
#define AMS_TX_CTL_2_GEN2r_AMS_TX_POST3_COEFf_GET BCMI_TSCF_XGXS_AMS_TX_CTL_2_GEN2r_AMS_TX_POST3_COEFf_GET
#define AMS_TX_CTL_2_GEN2r_AMS_TX_POST3_COEFf_SET BCMI_TSCF_XGXS_AMS_TX_CTL_2_GEN2r_AMS_TX_POST3_COEFf_SET
#define AMS_TX_CTL_2_GEN2r_AMS_TX_AMP_CTLf_GET BCMI_TSCF_XGXS_AMS_TX_CTL_2_GEN2r_AMS_TX_AMP_CTLf_GET
#define AMS_TX_CTL_2_GEN2r_AMS_TX_AMP_CTLf_SET BCMI_TSCF_XGXS_AMS_TX_CTL_2_GEN2r_AMS_TX_AMP_CTLf_SET
#define READ_AMS_TX_CTL_2_GEN2r BCMI_TSCF_XGXS_READ_AMS_TX_CTL_2_GEN2r
#define WRITE_AMS_TX_CTL_2_GEN2r BCMI_TSCF_XGXS_WRITE_AMS_TX_CTL_2_GEN2r
#define MODIFY_AMS_TX_CTL_2_GEN2r BCMI_TSCF_XGXS_MODIFY_AMS_TX_CTL_2_GEN2r
#define READLN_AMS_TX_CTL_2_GEN2r BCMI_TSCF_XGXS_READLN_AMS_TX_CTL_2_GEN2r
#define WRITELN_AMS_TX_CTL_2_GEN2r BCMI_TSCF_XGXS_WRITELN_AMS_TX_CTL_2_GEN2r
#define WRITEALL_AMS_TX_CTL_2_GEN2r BCMI_TSCF_XGXS_WRITEALL_AMS_TX_CTL_2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AMS_TX_CTL_2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AMS_TX_CTL_3_GEN2
 * BLOCKS:   AMS_TX
 * REGADDR:  0xd0d3
 * DEVAD:    1
 * DESC:     AMS TX CONTROL_3
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_TX_SPARE_63_48 AMS reserved[63:48]
 */
#define BCMI_TSCF_XGXS_AMS_TX_CTL_3_GEN2r (0x0001d0d3 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AMS_TX_CTL_3_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AMS_TX_CTL_3_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AMS_TX_CTL_3_GEN2r_s {
	uint32_t v[1];
	uint32_t ams_tx_ctl_3_gen2[1];
	uint32_t _ams_tx_ctl_3_gen2;
} BCMI_TSCF_XGXS_AMS_TX_CTL_3_GEN2r_t;

#define BCMI_TSCF_XGXS_AMS_TX_CTL_3_GEN2r_CLR(r) (r).ams_tx_ctl_3_gen2[0] = 0
#define BCMI_TSCF_XGXS_AMS_TX_CTL_3_GEN2r_SET(r,d) (r).ams_tx_ctl_3_gen2[0] = d
#define BCMI_TSCF_XGXS_AMS_TX_CTL_3_GEN2r_GET(r) (r).ams_tx_ctl_3_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AMS_TX_CTL_3_GEN2r_AMS_TX_SPARE_63_48f_GET(r) (((r).ams_tx_ctl_3_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_AMS_TX_CTL_3_GEN2r_AMS_TX_SPARE_63_48f_SET(r,f) (r).ams_tx_ctl_3_gen2[0]=(((r).ams_tx_ctl_3_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AMS_TX_CTL_3_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AMS_TX_CTL_3_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AMS_TX_CTL_3_GEN2r,(_r._ams_tx_ctl_3_gen2))
#define BCMI_TSCF_XGXS_WRITE_AMS_TX_CTL_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_TX_CTL_3_GEN2r,(_r._ams_tx_ctl_3_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AMS_TX_CTL_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_TX_CTL_3_GEN2r,(_r._ams_tx_ctl_3_gen2))
#define BCMI_TSCF_XGXS_READLN_AMS_TX_CTL_3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AMS_TX_CTL_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_tx_ctl_3_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AMS_TX_CTL_3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_TX_CTL_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_tx_ctl_3_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AMS_TX_CTL_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_TX_CTL_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_tx_ctl_3_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_TX_CTL_3_GEN2r BCMI_TSCF_XGXS_AMS_TX_CTL_3_GEN2r
#define AMS_TX_CTL_3_GEN2r_SIZE BCMI_TSCF_XGXS_AMS_TX_CTL_3_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AMS_TX_CTL_3_GEN2r_t AMS_TX_CTL_3_GEN2r_t;
#define AMS_TX_CTL_3_GEN2r_CLR BCMI_TSCF_XGXS_AMS_TX_CTL_3_GEN2r_CLR
#define AMS_TX_CTL_3_GEN2r_SET BCMI_TSCF_XGXS_AMS_TX_CTL_3_GEN2r_SET
#define AMS_TX_CTL_3_GEN2r_GET BCMI_TSCF_XGXS_AMS_TX_CTL_3_GEN2r_GET
#define AMS_TX_CTL_3_GEN2r_AMS_TX_SPARE_63_48f_GET BCMI_TSCF_XGXS_AMS_TX_CTL_3_GEN2r_AMS_TX_SPARE_63_48f_GET
#define AMS_TX_CTL_3_GEN2r_AMS_TX_SPARE_63_48f_SET BCMI_TSCF_XGXS_AMS_TX_CTL_3_GEN2r_AMS_TX_SPARE_63_48f_SET
#define READ_AMS_TX_CTL_3_GEN2r BCMI_TSCF_XGXS_READ_AMS_TX_CTL_3_GEN2r
#define WRITE_AMS_TX_CTL_3_GEN2r BCMI_TSCF_XGXS_WRITE_AMS_TX_CTL_3_GEN2r
#define MODIFY_AMS_TX_CTL_3_GEN2r BCMI_TSCF_XGXS_MODIFY_AMS_TX_CTL_3_GEN2r
#define READLN_AMS_TX_CTL_3_GEN2r BCMI_TSCF_XGXS_READLN_AMS_TX_CTL_3_GEN2r
#define WRITELN_AMS_TX_CTL_3_GEN2r BCMI_TSCF_XGXS_WRITELN_AMS_TX_CTL_3_GEN2r
#define WRITEALL_AMS_TX_CTL_3_GEN2r BCMI_TSCF_XGXS_WRITEALL_AMS_TX_CTL_3_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AMS_TX_CTL_3_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AMS_TX_STS_GEN2
 * BLOCKS:   AMS_TX
 * REGADDR:  0xd0d8
 * DEVAD:    1
 * DESC:     AMS TX STATUS
 * RESETVAL: 0x6a0 (1696)
 * ACCESS:   R/O
 * FIELDS:
 *     AMS_TX_VERSION_ID AMS Version ID.  Used to track the core version.
 *     AMS_TX_ANA_RESCAL Copy of ana_rescal bus. Control code for global resistor calibration. See AMS for more details
 *     AMS_TX_DRV_HV_DISABLE Copy of tx_drv_hv_disable. By default, assume high voltage driver (HVD) mode and 1.25V
 *     AMS_TX_LANE_ID   TX Lane ID
 */
#define BCMI_TSCF_XGXS_AMS_TX_STS_GEN2r (0x0001d0d8 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AMS_TX_STS_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AMS_TX_STS_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AMS_TX_STS_GEN2r_s {
	uint32_t v[1];
	uint32_t ams_tx_sts_gen2[1];
	uint32_t _ams_tx_sts_gen2;
} BCMI_TSCF_XGXS_AMS_TX_STS_GEN2r_t;

#define BCMI_TSCF_XGXS_AMS_TX_STS_GEN2r_CLR(r) (r).ams_tx_sts_gen2[0] = 0
#define BCMI_TSCF_XGXS_AMS_TX_STS_GEN2r_SET(r,d) (r).ams_tx_sts_gen2[0] = d
#define BCMI_TSCF_XGXS_AMS_TX_STS_GEN2r_GET(r) (r).ams_tx_sts_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AMS_TX_STS_GEN2r_AMS_TX_LANE_IDf_GET(r) ((((r).ams_tx_sts_gen2[0]) >> 14) & 0x3)
#define BCMI_TSCF_XGXS_AMS_TX_STS_GEN2r_AMS_TX_LANE_IDf_SET(r,f) (r).ams_tx_sts_gen2[0]=(((r).ams_tx_sts_gen2[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_TSCF_XGXS_AMS_TX_STS_GEN2r_AMS_TX_DRV_HV_DISABLEf_GET(r) ((((r).ams_tx_sts_gen2[0]) >> 12) & 0x1)
#define BCMI_TSCF_XGXS_AMS_TX_STS_GEN2r_AMS_TX_DRV_HV_DISABLEf_SET(r,f) (r).ams_tx_sts_gen2[0]=(((r).ams_tx_sts_gen2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_TSCF_XGXS_AMS_TX_STS_GEN2r_AMS_TX_ANA_RESCALf_GET(r) ((((r).ams_tx_sts_gen2[0]) >> 8) & 0xf)
#define BCMI_TSCF_XGXS_AMS_TX_STS_GEN2r_AMS_TX_ANA_RESCALf_SET(r,f) (r).ams_tx_sts_gen2[0]=(((r).ams_tx_sts_gen2[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_XGXS_AMS_TX_STS_GEN2r_AMS_TX_VERSION_IDf_GET(r) (((r).ams_tx_sts_gen2[0]) & 0xff)
#define BCMI_TSCF_XGXS_AMS_TX_STS_GEN2r_AMS_TX_VERSION_IDf_SET(r,f) (r).ams_tx_sts_gen2[0]=(((r).ams_tx_sts_gen2[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access AMS_TX_STS_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AMS_TX_STS_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AMS_TX_STS_GEN2r,(_r._ams_tx_sts_gen2))
#define BCMI_TSCF_XGXS_WRITE_AMS_TX_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_TX_STS_GEN2r,(_r._ams_tx_sts_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AMS_TX_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_TX_STS_GEN2r,(_r._ams_tx_sts_gen2))
#define BCMI_TSCF_XGXS_READLN_AMS_TX_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AMS_TX_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_tx_sts_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AMS_TX_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_TX_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_tx_sts_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AMS_TX_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_TX_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_tx_sts_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_TX_STS_GEN2r BCMI_TSCF_XGXS_AMS_TX_STS_GEN2r
#define AMS_TX_STS_GEN2r_SIZE BCMI_TSCF_XGXS_AMS_TX_STS_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AMS_TX_STS_GEN2r_t AMS_TX_STS_GEN2r_t;
#define AMS_TX_STS_GEN2r_CLR BCMI_TSCF_XGXS_AMS_TX_STS_GEN2r_CLR
#define AMS_TX_STS_GEN2r_SET BCMI_TSCF_XGXS_AMS_TX_STS_GEN2r_SET
#define AMS_TX_STS_GEN2r_GET BCMI_TSCF_XGXS_AMS_TX_STS_GEN2r_GET
#define AMS_TX_STS_GEN2r_AMS_TX_LANE_IDf_GET BCMI_TSCF_XGXS_AMS_TX_STS_GEN2r_AMS_TX_LANE_IDf_GET
#define AMS_TX_STS_GEN2r_AMS_TX_LANE_IDf_SET BCMI_TSCF_XGXS_AMS_TX_STS_GEN2r_AMS_TX_LANE_IDf_SET
#define AMS_TX_STS_GEN2r_AMS_TX_DRV_HV_DISABLEf_GET BCMI_TSCF_XGXS_AMS_TX_STS_GEN2r_AMS_TX_DRV_HV_DISABLEf_GET
#define AMS_TX_STS_GEN2r_AMS_TX_DRV_HV_DISABLEf_SET BCMI_TSCF_XGXS_AMS_TX_STS_GEN2r_AMS_TX_DRV_HV_DISABLEf_SET
#define AMS_TX_STS_GEN2r_AMS_TX_ANA_RESCALf_GET BCMI_TSCF_XGXS_AMS_TX_STS_GEN2r_AMS_TX_ANA_RESCALf_GET
#define AMS_TX_STS_GEN2r_AMS_TX_ANA_RESCALf_SET BCMI_TSCF_XGXS_AMS_TX_STS_GEN2r_AMS_TX_ANA_RESCALf_SET
#define AMS_TX_STS_GEN2r_AMS_TX_VERSION_IDf_GET BCMI_TSCF_XGXS_AMS_TX_STS_GEN2r_AMS_TX_VERSION_IDf_GET
#define AMS_TX_STS_GEN2r_AMS_TX_VERSION_IDf_SET BCMI_TSCF_XGXS_AMS_TX_STS_GEN2r_AMS_TX_VERSION_IDf_SET
#define READ_AMS_TX_STS_GEN2r BCMI_TSCF_XGXS_READ_AMS_TX_STS_GEN2r
#define WRITE_AMS_TX_STS_GEN2r BCMI_TSCF_XGXS_WRITE_AMS_TX_STS_GEN2r
#define MODIFY_AMS_TX_STS_GEN2r BCMI_TSCF_XGXS_MODIFY_AMS_TX_STS_GEN2r
#define READLN_AMS_TX_STS_GEN2r BCMI_TSCF_XGXS_READLN_AMS_TX_STS_GEN2r
#define WRITELN_AMS_TX_STS_GEN2r BCMI_TSCF_XGXS_WRITELN_AMS_TX_STS_GEN2r
#define WRITEALL_AMS_TX_STS_GEN2r BCMI_TSCF_XGXS_WRITEALL_AMS_TX_STS_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AMS_TX_STS_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SIGDET_CTL_0_GEN2
 * BLOCKS:   SIGDET
 * REGADDR:  0xd0e0
 * DEVAD:    1
 * DESC:     CTRL_0
 * RESETVAL: 0x1109 (4361)
 * ACCESS:   R/W
 * FIELDS:
 *     SIGNAL_DETECT_FILTER_COUNT Defines the width of the signal_detect==1'b1 pulses which will be filtered. Valid range is 0 to 31which maps to 0 to 448 clock cycles. Refer PMD spec for more details about the mapping.
 *     LOS_FILTER_COUNT Defines the width of the signal_detect==1'b0 pulses which will be filtered. Valid range is 0 to 31which maps to 0 to 448 clock cycles. Refer PMD spec for more details about the mapping.
 */
#define BCMI_TSCF_XGXS_SIGDET_CTL_0_GEN2r (0x0001d0e0 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SIGDET_CTL_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SIGDET_CTL_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SIGDET_CTL_0_GEN2r_s {
	uint32_t v[1];
	uint32_t sigdet_ctl_0_gen2[1];
	uint32_t _sigdet_ctl_0_gen2;
} BCMI_TSCF_XGXS_SIGDET_CTL_0_GEN2r_t;

#define BCMI_TSCF_XGXS_SIGDET_CTL_0_GEN2r_CLR(r) (r).sigdet_ctl_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_SIGDET_CTL_0_GEN2r_SET(r,d) (r).sigdet_ctl_0_gen2[0] = d
#define BCMI_TSCF_XGXS_SIGDET_CTL_0_GEN2r_GET(r) (r).sigdet_ctl_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SIGDET_CTL_0_GEN2r_LOS_FILTER_COUNTf_GET(r) ((((r).sigdet_ctl_0_gen2[0]) >> 8) & 0x1f)
#define BCMI_TSCF_XGXS_SIGDET_CTL_0_GEN2r_LOS_FILTER_COUNTf_SET(r,f) (r).sigdet_ctl_0_gen2[0]=(((r).sigdet_ctl_0_gen2[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8)) | (31 << (16 + 8))
#define BCMI_TSCF_XGXS_SIGDET_CTL_0_GEN2r_SIGNAL_DETECT_FILTER_COUNTf_GET(r) (((r).sigdet_ctl_0_gen2[0]) & 0x1f)
#define BCMI_TSCF_XGXS_SIGDET_CTL_0_GEN2r_SIGNAL_DETECT_FILTER_COUNTf_SET(r,f) (r).sigdet_ctl_0_gen2[0]=(((r).sigdet_ctl_0_gen2[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access SIGDET_CTL_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SIGDET_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SIGDET_CTL_0_GEN2r,(_r._sigdet_ctl_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_SIGDET_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SIGDET_CTL_0_GEN2r,(_r._sigdet_ctl_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SIGDET_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SIGDET_CTL_0_GEN2r,(_r._sigdet_ctl_0_gen2))
#define BCMI_TSCF_XGXS_READLN_SIGDET_CTL_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SIGDET_CTL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sigdet_ctl_0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_SIGDET_CTL_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SIGDET_CTL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sigdet_ctl_0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_SIGDET_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SIGDET_CTL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sigdet_ctl_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SIGDET_CTL_0_GEN2r BCMI_TSCF_XGXS_SIGDET_CTL_0_GEN2r
#define SIGDET_CTL_0_GEN2r_SIZE BCMI_TSCF_XGXS_SIGDET_CTL_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SIGDET_CTL_0_GEN2r_t SIGDET_CTL_0_GEN2r_t;
#define SIGDET_CTL_0_GEN2r_CLR BCMI_TSCF_XGXS_SIGDET_CTL_0_GEN2r_CLR
#define SIGDET_CTL_0_GEN2r_SET BCMI_TSCF_XGXS_SIGDET_CTL_0_GEN2r_SET
#define SIGDET_CTL_0_GEN2r_GET BCMI_TSCF_XGXS_SIGDET_CTL_0_GEN2r_GET
#define SIGDET_CTL_0_GEN2r_LOS_FILTER_COUNTf_GET BCMI_TSCF_XGXS_SIGDET_CTL_0_GEN2r_LOS_FILTER_COUNTf_GET
#define SIGDET_CTL_0_GEN2r_LOS_FILTER_COUNTf_SET BCMI_TSCF_XGXS_SIGDET_CTL_0_GEN2r_LOS_FILTER_COUNTf_SET
#define SIGDET_CTL_0_GEN2r_SIGNAL_DETECT_FILTER_COUNTf_GET BCMI_TSCF_XGXS_SIGDET_CTL_0_GEN2r_SIGNAL_DETECT_FILTER_COUNTf_GET
#define SIGDET_CTL_0_GEN2r_SIGNAL_DETECT_FILTER_COUNTf_SET BCMI_TSCF_XGXS_SIGDET_CTL_0_GEN2r_SIGNAL_DETECT_FILTER_COUNTf_SET
#define READ_SIGDET_CTL_0_GEN2r BCMI_TSCF_XGXS_READ_SIGDET_CTL_0_GEN2r
#define WRITE_SIGDET_CTL_0_GEN2r BCMI_TSCF_XGXS_WRITE_SIGDET_CTL_0_GEN2r
#define MODIFY_SIGDET_CTL_0_GEN2r BCMI_TSCF_XGXS_MODIFY_SIGDET_CTL_0_GEN2r
#define READLN_SIGDET_CTL_0_GEN2r BCMI_TSCF_XGXS_READLN_SIGDET_CTL_0_GEN2r
#define WRITELN_SIGDET_CTL_0_GEN2r BCMI_TSCF_XGXS_WRITELN_SIGDET_CTL_0_GEN2r
#define WRITEALL_SIGDET_CTL_0_GEN2r BCMI_TSCF_XGXS_WRITEALL_SIGDET_CTL_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SIGDET_CTL_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SIGDET_CTL_1_GEN2
 * BLOCKS:   SIGDET
 * REGADDR:  0xd0e1
 * DEVAD:    1
 * DESC:     CTRL_1
 * RESETVAL: 0xa008 (40968)
 * ACCESS:   R/W
 * FIELDS:
 *     AFE_SIGNAL_DETECT_DIS 1'b1 will disable the signal_detect from AFE.
 *     EXT_LOS_EN       1'b1 will enable the external (optical) LOS path into the sigdet filter.
 *     EXT_LOS_INV      1'b1 will invert the polarity of the pmd_ext_los pin.
 *     IGNORE_LP_MODE   1'b1 will ignore the pmd_rx_mode (low power mode) input pin. Set to 1'b0 if EEE mode is supported by the PCS
 *     SIGNAL_DETECT_FILTER_1US 1'b1 will use 1us heartbeat for los_count counter instead of comclk.
 *     ENERGY_DETECT_FRC pmd_energy_detect Force.
 *     ENERGY_DETECT_FRC_VAL pmd_energy_detect Force Value.
 *     SIGNAL_DETECT_FRC pmd_signal_detect Force.
 *     SIGNAL_DETECT_FRC_VAL pmd_signal_detect Force Value.
 *     ENERGY_DETECT_MASK_COUNT Defines the mask_count timer for energy_detect. Valid range is 0 to 31which maps to 0 to 448 clock cycles. Refer PMD spec for more details about the mapping.
 */
#define BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r (0x0001d0e1 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SIGDET_CTL_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r_s {
	uint32_t v[1];
	uint32_t sigdet_ctl_1_gen2[1];
	uint32_t _sigdet_ctl_1_gen2;
} BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r_t;

#define BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r_CLR(r) (r).sigdet_ctl_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r_SET(r,d) (r).sigdet_ctl_1_gen2[0] = d
#define BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r_GET(r) (r).sigdet_ctl_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r_ENERGY_DETECT_MASK_COUNTf_GET(r) ((((r).sigdet_ctl_1_gen2[0]) >> 11) & 0x1f)
#define BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r_ENERGY_DETECT_MASK_COUNTf_SET(r,f) (r).sigdet_ctl_1_gen2[0]=(((r).sigdet_ctl_1_gen2[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11)) | (31 << (16 + 11))
#define BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r_SIGNAL_DETECT_FRC_VALf_GET(r) ((((r).sigdet_ctl_1_gen2[0]) >> 8) & 0x1)
#define BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r_SIGNAL_DETECT_FRC_VALf_SET(r,f) (r).sigdet_ctl_1_gen2[0]=(((r).sigdet_ctl_1_gen2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r_SIGNAL_DETECT_FRCf_GET(r) ((((r).sigdet_ctl_1_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r_SIGNAL_DETECT_FRCf_SET(r,f) (r).sigdet_ctl_1_gen2[0]=(((r).sigdet_ctl_1_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r_ENERGY_DETECT_FRC_VALf_GET(r) ((((r).sigdet_ctl_1_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r_ENERGY_DETECT_FRC_VALf_SET(r,f) (r).sigdet_ctl_1_gen2[0]=(((r).sigdet_ctl_1_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r_ENERGY_DETECT_FRCf_GET(r) ((((r).sigdet_ctl_1_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r_ENERGY_DETECT_FRCf_SET(r,f) (r).sigdet_ctl_1_gen2[0]=(((r).sigdet_ctl_1_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r_SIGNAL_DETECT_FILTER_1USf_GET(r) ((((r).sigdet_ctl_1_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r_SIGNAL_DETECT_FILTER_1USf_SET(r,f) (r).sigdet_ctl_1_gen2[0]=(((r).sigdet_ctl_1_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r_IGNORE_LP_MODEf_GET(r) ((((r).sigdet_ctl_1_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r_IGNORE_LP_MODEf_SET(r,f) (r).sigdet_ctl_1_gen2[0]=(((r).sigdet_ctl_1_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r_EXT_LOS_INVf_GET(r) ((((r).sigdet_ctl_1_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r_EXT_LOS_INVf_SET(r,f) (r).sigdet_ctl_1_gen2[0]=(((r).sigdet_ctl_1_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r_EXT_LOS_ENf_GET(r) ((((r).sigdet_ctl_1_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r_EXT_LOS_ENf_SET(r,f) (r).sigdet_ctl_1_gen2[0]=(((r).sigdet_ctl_1_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r_AFE_SIGNAL_DETECT_DISf_GET(r) (((r).sigdet_ctl_1_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r_AFE_SIGNAL_DETECT_DISf_SET(r,f) (r).sigdet_ctl_1_gen2[0]=(((r).sigdet_ctl_1_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access SIGDET_CTL_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SIGDET_CTL_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r,(_r._sigdet_ctl_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_SIGDET_CTL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r,(_r._sigdet_ctl_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SIGDET_CTL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r,(_r._sigdet_ctl_1_gen2))
#define BCMI_TSCF_XGXS_READLN_SIGDET_CTL_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sigdet_ctl_1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_SIGDET_CTL_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sigdet_ctl_1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_SIGDET_CTL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sigdet_ctl_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SIGDET_CTL_1_GEN2r BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r
#define SIGDET_CTL_1_GEN2r_SIZE BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r_t SIGDET_CTL_1_GEN2r_t;
#define SIGDET_CTL_1_GEN2r_CLR BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r_CLR
#define SIGDET_CTL_1_GEN2r_SET BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r_SET
#define SIGDET_CTL_1_GEN2r_GET BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r_GET
#define SIGDET_CTL_1_GEN2r_ENERGY_DETECT_MASK_COUNTf_GET BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r_ENERGY_DETECT_MASK_COUNTf_GET
#define SIGDET_CTL_1_GEN2r_ENERGY_DETECT_MASK_COUNTf_SET BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r_ENERGY_DETECT_MASK_COUNTf_SET
#define SIGDET_CTL_1_GEN2r_SIGNAL_DETECT_FRC_VALf_GET BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r_SIGNAL_DETECT_FRC_VALf_GET
#define SIGDET_CTL_1_GEN2r_SIGNAL_DETECT_FRC_VALf_SET BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r_SIGNAL_DETECT_FRC_VALf_SET
#define SIGDET_CTL_1_GEN2r_SIGNAL_DETECT_FRCf_GET BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r_SIGNAL_DETECT_FRCf_GET
#define SIGDET_CTL_1_GEN2r_SIGNAL_DETECT_FRCf_SET BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r_SIGNAL_DETECT_FRCf_SET
#define SIGDET_CTL_1_GEN2r_ENERGY_DETECT_FRC_VALf_GET BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r_ENERGY_DETECT_FRC_VALf_GET
#define SIGDET_CTL_1_GEN2r_ENERGY_DETECT_FRC_VALf_SET BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r_ENERGY_DETECT_FRC_VALf_SET
#define SIGDET_CTL_1_GEN2r_ENERGY_DETECT_FRCf_GET BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r_ENERGY_DETECT_FRCf_GET
#define SIGDET_CTL_1_GEN2r_ENERGY_DETECT_FRCf_SET BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r_ENERGY_DETECT_FRCf_SET
#define SIGDET_CTL_1_GEN2r_SIGNAL_DETECT_FILTER_1USf_GET BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r_SIGNAL_DETECT_FILTER_1USf_GET
#define SIGDET_CTL_1_GEN2r_SIGNAL_DETECT_FILTER_1USf_SET BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r_SIGNAL_DETECT_FILTER_1USf_SET
#define SIGDET_CTL_1_GEN2r_IGNORE_LP_MODEf_GET BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r_IGNORE_LP_MODEf_GET
#define SIGDET_CTL_1_GEN2r_IGNORE_LP_MODEf_SET BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r_IGNORE_LP_MODEf_SET
#define SIGDET_CTL_1_GEN2r_EXT_LOS_INVf_GET BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r_EXT_LOS_INVf_GET
#define SIGDET_CTL_1_GEN2r_EXT_LOS_INVf_SET BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r_EXT_LOS_INVf_SET
#define SIGDET_CTL_1_GEN2r_EXT_LOS_ENf_GET BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r_EXT_LOS_ENf_GET
#define SIGDET_CTL_1_GEN2r_EXT_LOS_ENf_SET BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r_EXT_LOS_ENf_SET
#define SIGDET_CTL_1_GEN2r_AFE_SIGNAL_DETECT_DISf_GET BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r_AFE_SIGNAL_DETECT_DISf_GET
#define SIGDET_CTL_1_GEN2r_AFE_SIGNAL_DETECT_DISf_SET BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r_AFE_SIGNAL_DETECT_DISf_SET
#define READ_SIGDET_CTL_1_GEN2r BCMI_TSCF_XGXS_READ_SIGDET_CTL_1_GEN2r
#define WRITE_SIGDET_CTL_1_GEN2r BCMI_TSCF_XGXS_WRITE_SIGDET_CTL_1_GEN2r
#define MODIFY_SIGDET_CTL_1_GEN2r BCMI_TSCF_XGXS_MODIFY_SIGDET_CTL_1_GEN2r
#define READLN_SIGDET_CTL_1_GEN2r BCMI_TSCF_XGXS_READLN_SIGDET_CTL_1_GEN2r
#define WRITELN_SIGDET_CTL_1_GEN2r BCMI_TSCF_XGXS_WRITELN_SIGDET_CTL_1_GEN2r
#define WRITEALL_SIGDET_CTL_1_GEN2r BCMI_TSCF_XGXS_WRITEALL_SIGDET_CTL_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SIGDET_CTL_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SIGDET_CTL_2_GEN2
 * BLOCKS:   SIGDET
 * REGADDR:  0xd0e2
 * DEVAD:    1
 * DESC:     CTRL_2
 * RESETVAL: 0x3f22 (16162)
 * ACCESS:   R/W
 * FIELDS:
 *     LOS_THRESH       AFE signal detect threshold to be used when filtered signal_detect == 1.
 *     SIGNAL_DETECT_THRESH AFE signal detect threshold to be used when filtered signal_detect == 0.
 *     HOLD_LOS_COUNT   HOLD_LOS state counter. Value 0 to 7 maps to 2 to 16 in increments of 2.
 *     HOLD_SD_COUNT    HOLD_SD state counter. Value 0 to 7 maps to 2 to 16 in increments of 2.
 */
#define BCMI_TSCF_XGXS_SIGDET_CTL_2_GEN2r (0x0001d0e2 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SIGDET_CTL_2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SIGDET_CTL_2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SIGDET_CTL_2_GEN2r_s {
	uint32_t v[1];
	uint32_t sigdet_ctl_2_gen2[1];
	uint32_t _sigdet_ctl_2_gen2;
} BCMI_TSCF_XGXS_SIGDET_CTL_2_GEN2r_t;

#define BCMI_TSCF_XGXS_SIGDET_CTL_2_GEN2r_CLR(r) (r).sigdet_ctl_2_gen2[0] = 0
#define BCMI_TSCF_XGXS_SIGDET_CTL_2_GEN2r_SET(r,d) (r).sigdet_ctl_2_gen2[0] = d
#define BCMI_TSCF_XGXS_SIGDET_CTL_2_GEN2r_GET(r) (r).sigdet_ctl_2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SIGDET_CTL_2_GEN2r_HOLD_SD_COUNTf_GET(r) ((((r).sigdet_ctl_2_gen2[0]) >> 11) & 0x7)
#define BCMI_TSCF_XGXS_SIGDET_CTL_2_GEN2r_HOLD_SD_COUNTf_SET(r,f) (r).sigdet_ctl_2_gen2[0]=(((r).sigdet_ctl_2_gen2[0] & ~((uint32_t)0x7 << 11)) | ((((uint32_t)f) & 0x7) << 11)) | (7 << (16 + 11))
#define BCMI_TSCF_XGXS_SIGDET_CTL_2_GEN2r_HOLD_LOS_COUNTf_GET(r) ((((r).sigdet_ctl_2_gen2[0]) >> 8) & 0x7)
#define BCMI_TSCF_XGXS_SIGDET_CTL_2_GEN2r_HOLD_LOS_COUNTf_SET(r,f) (r).sigdet_ctl_2_gen2[0]=(((r).sigdet_ctl_2_gen2[0] & ~((uint32_t)0x7 << 8)) | ((((uint32_t)f) & 0x7) << 8)) | (7 << (16 + 8))
#define BCMI_TSCF_XGXS_SIGDET_CTL_2_GEN2r_SIGNAL_DETECT_THRESHf_GET(r) ((((r).sigdet_ctl_2_gen2[0]) >> 4) & 0x7)
#define BCMI_TSCF_XGXS_SIGDET_CTL_2_GEN2r_SIGNAL_DETECT_THRESHf_SET(r,f) (r).sigdet_ctl_2_gen2[0]=(((r).sigdet_ctl_2_gen2[0] & ~((uint32_t)0x7 << 4)) | ((((uint32_t)f) & 0x7) << 4)) | (7 << (16 + 4))
#define BCMI_TSCF_XGXS_SIGDET_CTL_2_GEN2r_LOS_THRESHf_GET(r) (((r).sigdet_ctl_2_gen2[0]) & 0x7)
#define BCMI_TSCF_XGXS_SIGDET_CTL_2_GEN2r_LOS_THRESHf_SET(r,f) (r).sigdet_ctl_2_gen2[0]=(((r).sigdet_ctl_2_gen2[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access SIGDET_CTL_2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SIGDET_CTL_2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SIGDET_CTL_2_GEN2r,(_r._sigdet_ctl_2_gen2))
#define BCMI_TSCF_XGXS_WRITE_SIGDET_CTL_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SIGDET_CTL_2_GEN2r,(_r._sigdet_ctl_2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SIGDET_CTL_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SIGDET_CTL_2_GEN2r,(_r._sigdet_ctl_2_gen2))
#define BCMI_TSCF_XGXS_READLN_SIGDET_CTL_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SIGDET_CTL_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sigdet_ctl_2_gen2))
#define BCMI_TSCF_XGXS_WRITELN_SIGDET_CTL_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SIGDET_CTL_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sigdet_ctl_2_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_SIGDET_CTL_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SIGDET_CTL_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sigdet_ctl_2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SIGDET_CTL_2_GEN2r BCMI_TSCF_XGXS_SIGDET_CTL_2_GEN2r
#define SIGDET_CTL_2_GEN2r_SIZE BCMI_TSCF_XGXS_SIGDET_CTL_2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SIGDET_CTL_2_GEN2r_t SIGDET_CTL_2_GEN2r_t;
#define SIGDET_CTL_2_GEN2r_CLR BCMI_TSCF_XGXS_SIGDET_CTL_2_GEN2r_CLR
#define SIGDET_CTL_2_GEN2r_SET BCMI_TSCF_XGXS_SIGDET_CTL_2_GEN2r_SET
#define SIGDET_CTL_2_GEN2r_GET BCMI_TSCF_XGXS_SIGDET_CTL_2_GEN2r_GET
#define SIGDET_CTL_2_GEN2r_HOLD_SD_COUNTf_GET BCMI_TSCF_XGXS_SIGDET_CTL_2_GEN2r_HOLD_SD_COUNTf_GET
#define SIGDET_CTL_2_GEN2r_HOLD_SD_COUNTf_SET BCMI_TSCF_XGXS_SIGDET_CTL_2_GEN2r_HOLD_SD_COUNTf_SET
#define SIGDET_CTL_2_GEN2r_HOLD_LOS_COUNTf_GET BCMI_TSCF_XGXS_SIGDET_CTL_2_GEN2r_HOLD_LOS_COUNTf_GET
#define SIGDET_CTL_2_GEN2r_HOLD_LOS_COUNTf_SET BCMI_TSCF_XGXS_SIGDET_CTL_2_GEN2r_HOLD_LOS_COUNTf_SET
#define SIGDET_CTL_2_GEN2r_SIGNAL_DETECT_THRESHf_GET BCMI_TSCF_XGXS_SIGDET_CTL_2_GEN2r_SIGNAL_DETECT_THRESHf_GET
#define SIGDET_CTL_2_GEN2r_SIGNAL_DETECT_THRESHf_SET BCMI_TSCF_XGXS_SIGDET_CTL_2_GEN2r_SIGNAL_DETECT_THRESHf_SET
#define SIGDET_CTL_2_GEN2r_LOS_THRESHf_GET BCMI_TSCF_XGXS_SIGDET_CTL_2_GEN2r_LOS_THRESHf_GET
#define SIGDET_CTL_2_GEN2r_LOS_THRESHf_SET BCMI_TSCF_XGXS_SIGDET_CTL_2_GEN2r_LOS_THRESHf_SET
#define READ_SIGDET_CTL_2_GEN2r BCMI_TSCF_XGXS_READ_SIGDET_CTL_2_GEN2r
#define WRITE_SIGDET_CTL_2_GEN2r BCMI_TSCF_XGXS_WRITE_SIGDET_CTL_2_GEN2r
#define MODIFY_SIGDET_CTL_2_GEN2r BCMI_TSCF_XGXS_MODIFY_SIGDET_CTL_2_GEN2r
#define READLN_SIGDET_CTL_2_GEN2r BCMI_TSCF_XGXS_READLN_SIGDET_CTL_2_GEN2r
#define WRITELN_SIGDET_CTL_2_GEN2r BCMI_TSCF_XGXS_WRITELN_SIGDET_CTL_2_GEN2r
#define WRITEALL_SIGDET_CTL_2_GEN2r BCMI_TSCF_XGXS_WRITEALL_SIGDET_CTL_2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SIGDET_CTL_2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  SIGDET_STS_0_GEN2
 * BLOCKS:   SIGDET
 * REGADDR:  0xd0e8
 * DEVAD:    1
 * DESC:     STATUS_0
 * RESETVAL: 0x200 (512)
 * ACCESS:   R/O
 * FIELDS:
 *     SIGNAL_DETECT    Filtered version of Signal Detect after frc/frc_val.
 *     SIGNAL_DETECT_CHANGE This latches the transition on signal_detect and cleared on read.
 *     ENERGY_DETECT    Filtered version of Energy Detect after frc/frc_val.
 *     ENERGY_DETECT_CHANGE This latches the transition on energy_detect and cleared on read.
 *     SIGNAL_DETECT_RAW Raw version of Signal Detect going into the filter.
 *     SIGNAL_DETECT_RAW_CHANGE This latches the transition on signal_detect_raw and cleared on read.
 *     AFE_SIGDET_THRESH Live status of sigdet_thresh going to AFE.
 */
#define BCMI_TSCF_XGXS_SIGDET_STS_0_GEN2r (0x0001d0e8 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_SIGDET_STS_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program SIGDET_STS_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_SIGDET_STS_0_GEN2r_s {
	uint32_t v[1];
	uint32_t sigdet_sts_0_gen2[1];
	uint32_t _sigdet_sts_0_gen2;
} BCMI_TSCF_XGXS_SIGDET_STS_0_GEN2r_t;

#define BCMI_TSCF_XGXS_SIGDET_STS_0_GEN2r_CLR(r) (r).sigdet_sts_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_SIGDET_STS_0_GEN2r_SET(r,d) (r).sigdet_sts_0_gen2[0] = d
#define BCMI_TSCF_XGXS_SIGDET_STS_0_GEN2r_GET(r) (r).sigdet_sts_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_SIGDET_STS_0_GEN2r_AFE_SIGDET_THRESHf_GET(r) ((((r).sigdet_sts_0_gen2[0]) >> 8) & 0x7)
#define BCMI_TSCF_XGXS_SIGDET_STS_0_GEN2r_AFE_SIGDET_THRESHf_SET(r,f) (r).sigdet_sts_0_gen2[0]=(((r).sigdet_sts_0_gen2[0] & ~((uint32_t)0x7 << 8)) | ((((uint32_t)f) & 0x7) << 8)) | (7 << (16 + 8))
#define BCMI_TSCF_XGXS_SIGDET_STS_0_GEN2r_SIGNAL_DETECT_RAW_CHANGEf_GET(r) ((((r).sigdet_sts_0_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_SIGDET_STS_0_GEN2r_SIGNAL_DETECT_RAW_CHANGEf_SET(r,f) (r).sigdet_sts_0_gen2[0]=(((r).sigdet_sts_0_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_SIGDET_STS_0_GEN2r_SIGNAL_DETECT_RAWf_GET(r) ((((r).sigdet_sts_0_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_SIGDET_STS_0_GEN2r_SIGNAL_DETECT_RAWf_SET(r,f) (r).sigdet_sts_0_gen2[0]=(((r).sigdet_sts_0_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_SIGDET_STS_0_GEN2r_ENERGY_DETECT_CHANGEf_GET(r) ((((r).sigdet_sts_0_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_SIGDET_STS_0_GEN2r_ENERGY_DETECT_CHANGEf_SET(r,f) (r).sigdet_sts_0_gen2[0]=(((r).sigdet_sts_0_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_SIGDET_STS_0_GEN2r_ENERGY_DETECTf_GET(r) ((((r).sigdet_sts_0_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_SIGDET_STS_0_GEN2r_ENERGY_DETECTf_SET(r,f) (r).sigdet_sts_0_gen2[0]=(((r).sigdet_sts_0_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_SIGDET_STS_0_GEN2r_SIGNAL_DETECT_CHANGEf_GET(r) ((((r).sigdet_sts_0_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_SIGDET_STS_0_GEN2r_SIGNAL_DETECT_CHANGEf_SET(r,f) (r).sigdet_sts_0_gen2[0]=(((r).sigdet_sts_0_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_SIGDET_STS_0_GEN2r_SIGNAL_DETECTf_GET(r) (((r).sigdet_sts_0_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_SIGDET_STS_0_GEN2r_SIGNAL_DETECTf_SET(r,f) (r).sigdet_sts_0_gen2[0]=(((r).sigdet_sts_0_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access SIGDET_STS_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_SIGDET_STS_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SIGDET_STS_0_GEN2r,(_r._sigdet_sts_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_SIGDET_STS_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SIGDET_STS_0_GEN2r,(_r._sigdet_sts_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_SIGDET_STS_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SIGDET_STS_0_GEN2r,(_r._sigdet_sts_0_gen2))
#define BCMI_TSCF_XGXS_READLN_SIGDET_STS_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_SIGDET_STS_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sigdet_sts_0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_SIGDET_STS_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SIGDET_STS_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sigdet_sts_0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_SIGDET_STS_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_SIGDET_STS_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sigdet_sts_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SIGDET_STS_0_GEN2r BCMI_TSCF_XGXS_SIGDET_STS_0_GEN2r
#define SIGDET_STS_0_GEN2r_SIZE BCMI_TSCF_XGXS_SIGDET_STS_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_SIGDET_STS_0_GEN2r_t SIGDET_STS_0_GEN2r_t;
#define SIGDET_STS_0_GEN2r_CLR BCMI_TSCF_XGXS_SIGDET_STS_0_GEN2r_CLR
#define SIGDET_STS_0_GEN2r_SET BCMI_TSCF_XGXS_SIGDET_STS_0_GEN2r_SET
#define SIGDET_STS_0_GEN2r_GET BCMI_TSCF_XGXS_SIGDET_STS_0_GEN2r_GET
#define SIGDET_STS_0_GEN2r_AFE_SIGDET_THRESHf_GET BCMI_TSCF_XGXS_SIGDET_STS_0_GEN2r_AFE_SIGDET_THRESHf_GET
#define SIGDET_STS_0_GEN2r_AFE_SIGDET_THRESHf_SET BCMI_TSCF_XGXS_SIGDET_STS_0_GEN2r_AFE_SIGDET_THRESHf_SET
#define SIGDET_STS_0_GEN2r_SIGNAL_DETECT_RAW_CHANGEf_GET BCMI_TSCF_XGXS_SIGDET_STS_0_GEN2r_SIGNAL_DETECT_RAW_CHANGEf_GET
#define SIGDET_STS_0_GEN2r_SIGNAL_DETECT_RAW_CHANGEf_SET BCMI_TSCF_XGXS_SIGDET_STS_0_GEN2r_SIGNAL_DETECT_RAW_CHANGEf_SET
#define SIGDET_STS_0_GEN2r_SIGNAL_DETECT_RAWf_GET BCMI_TSCF_XGXS_SIGDET_STS_0_GEN2r_SIGNAL_DETECT_RAWf_GET
#define SIGDET_STS_0_GEN2r_SIGNAL_DETECT_RAWf_SET BCMI_TSCF_XGXS_SIGDET_STS_0_GEN2r_SIGNAL_DETECT_RAWf_SET
#define SIGDET_STS_0_GEN2r_ENERGY_DETECT_CHANGEf_GET BCMI_TSCF_XGXS_SIGDET_STS_0_GEN2r_ENERGY_DETECT_CHANGEf_GET
#define SIGDET_STS_0_GEN2r_ENERGY_DETECT_CHANGEf_SET BCMI_TSCF_XGXS_SIGDET_STS_0_GEN2r_ENERGY_DETECT_CHANGEf_SET
#define SIGDET_STS_0_GEN2r_ENERGY_DETECTf_GET BCMI_TSCF_XGXS_SIGDET_STS_0_GEN2r_ENERGY_DETECTf_GET
#define SIGDET_STS_0_GEN2r_ENERGY_DETECTf_SET BCMI_TSCF_XGXS_SIGDET_STS_0_GEN2r_ENERGY_DETECTf_SET
#define SIGDET_STS_0_GEN2r_SIGNAL_DETECT_CHANGEf_GET BCMI_TSCF_XGXS_SIGDET_STS_0_GEN2r_SIGNAL_DETECT_CHANGEf_GET
#define SIGDET_STS_0_GEN2r_SIGNAL_DETECT_CHANGEf_SET BCMI_TSCF_XGXS_SIGDET_STS_0_GEN2r_SIGNAL_DETECT_CHANGEf_SET
#define SIGDET_STS_0_GEN2r_SIGNAL_DETECTf_GET BCMI_TSCF_XGXS_SIGDET_STS_0_GEN2r_SIGNAL_DETECTf_GET
#define SIGDET_STS_0_GEN2r_SIGNAL_DETECTf_SET BCMI_TSCF_XGXS_SIGDET_STS_0_GEN2r_SIGNAL_DETECTf_SET
#define READ_SIGDET_STS_0_GEN2r BCMI_TSCF_XGXS_READ_SIGDET_STS_0_GEN2r
#define WRITE_SIGDET_STS_0_GEN2r BCMI_TSCF_XGXS_WRITE_SIGDET_STS_0_GEN2r
#define MODIFY_SIGDET_STS_0_GEN2r BCMI_TSCF_XGXS_MODIFY_SIGDET_STS_0_GEN2r
#define READLN_SIGDET_STS_0_GEN2r BCMI_TSCF_XGXS_READLN_SIGDET_STS_0_GEN2r
#define WRITELN_SIGDET_STS_0_GEN2r BCMI_TSCF_XGXS_WRITELN_SIGDET_STS_0_GEN2r
#define WRITEALL_SIGDET_STS_0_GEN2r BCMI_TSCF_XGXS_WRITEALL_SIGDET_STS_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_SIGDET_STS_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DIG_REVID0_GEN2
 * BLOCKS:   DIG_COM
 * REGADDR:  0xd100
 * DEVAD:    1
 * DESC:     REVID0
 * RESETVAL: 0x2db (731)
 * ACCESS:   R/O
 * FIELDS:
 *     REVID_MODEL      model number
 *     REVID_PROCESS    technology process0 = 90nm1 = 65nm2 = 40nm3 = 28nm4 = 20nm5 = 16nm6-7 = reserved
 *     REVID_BONDING    bonding0 = wire bond1 = flip chip2-3 = reserved
 *     REVID_REV_NUMBER Metal mask revision number
 *     REVID_REV_LETTER All layer revision letter0 = revA1 = revB2 = revC3 = revD
 */
#define BCMI_TSCF_XGXS_DIG_REVID0_GEN2r (0x0001d100 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DIG_REVID0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DIG_REVID0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DIG_REVID0_GEN2r_s {
	uint32_t v[1];
	uint32_t dig_revid0_gen2[1];
	uint32_t _dig_revid0_gen2;
} BCMI_TSCF_XGXS_DIG_REVID0_GEN2r_t;

#define BCMI_TSCF_XGXS_DIG_REVID0_GEN2r_CLR(r) (r).dig_revid0_gen2[0] = 0
#define BCMI_TSCF_XGXS_DIG_REVID0_GEN2r_SET(r,d) (r).dig_revid0_gen2[0] = d
#define BCMI_TSCF_XGXS_DIG_REVID0_GEN2r_GET(r) (r).dig_revid0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DIG_REVID0_GEN2r_REVID_REV_LETTERf_GET(r) ((((r).dig_revid0_gen2[0]) >> 14) & 0x3)
#define BCMI_TSCF_XGXS_DIG_REVID0_GEN2r_REVID_REV_LETTERf_SET(r,f) (r).dig_revid0_gen2[0]=(((r).dig_revid0_gen2[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_TSCF_XGXS_DIG_REVID0_GEN2r_REVID_REV_NUMBERf_GET(r) ((((r).dig_revid0_gen2[0]) >> 11) & 0x7)
#define BCMI_TSCF_XGXS_DIG_REVID0_GEN2r_REVID_REV_NUMBERf_SET(r,f) (r).dig_revid0_gen2[0]=(((r).dig_revid0_gen2[0] & ~((uint32_t)0x7 << 11)) | ((((uint32_t)f) & 0x7) << 11)) | (7 << (16 + 11))
#define BCMI_TSCF_XGXS_DIG_REVID0_GEN2r_REVID_BONDINGf_GET(r) ((((r).dig_revid0_gen2[0]) >> 9) & 0x3)
#define BCMI_TSCF_XGXS_DIG_REVID0_GEN2r_REVID_BONDINGf_SET(r,f) (r).dig_revid0_gen2[0]=(((r).dig_revid0_gen2[0] & ~((uint32_t)0x3 << 9)) | ((((uint32_t)f) & 0x3) << 9)) | (3 << (16 + 9))
#define BCMI_TSCF_XGXS_DIG_REVID0_GEN2r_REVID_PROCESSf_GET(r) ((((r).dig_revid0_gen2[0]) >> 6) & 0x7)
#define BCMI_TSCF_XGXS_DIG_REVID0_GEN2r_REVID_PROCESSf_SET(r,f) (r).dig_revid0_gen2[0]=(((r).dig_revid0_gen2[0] & ~((uint32_t)0x7 << 6)) | ((((uint32_t)f) & 0x7) << 6)) | (7 << (16 + 6))
#define BCMI_TSCF_XGXS_DIG_REVID0_GEN2r_REVID_MODELf_GET(r) (((r).dig_revid0_gen2[0]) & 0x3f)
#define BCMI_TSCF_XGXS_DIG_REVID0_GEN2r_REVID_MODELf_SET(r,f) (r).dig_revid0_gen2[0]=(((r).dig_revid0_gen2[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access DIG_REVID0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DIG_REVID0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DIG_REVID0_GEN2r,(_r._dig_revid0_gen2))
#define BCMI_TSCF_XGXS_WRITE_DIG_REVID0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_REVID0_GEN2r,(_r._dig_revid0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DIG_REVID0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_REVID0_GEN2r,(_r._dig_revid0_gen2))
#define BCMI_TSCF_XGXS_READLN_DIG_REVID0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DIG_REVID0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_revid0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DIG_REVID0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_REVID0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_revid0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DIG_REVID0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_REVID0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dig_revid0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DIG_REVID0_GEN2r BCMI_TSCF_XGXS_DIG_REVID0_GEN2r
#define DIG_REVID0_GEN2r_SIZE BCMI_TSCF_XGXS_DIG_REVID0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DIG_REVID0_GEN2r_t DIG_REVID0_GEN2r_t;
#define DIG_REVID0_GEN2r_CLR BCMI_TSCF_XGXS_DIG_REVID0_GEN2r_CLR
#define DIG_REVID0_GEN2r_SET BCMI_TSCF_XGXS_DIG_REVID0_GEN2r_SET
#define DIG_REVID0_GEN2r_GET BCMI_TSCF_XGXS_DIG_REVID0_GEN2r_GET
#define DIG_REVID0_GEN2r_REVID_REV_LETTERf_GET BCMI_TSCF_XGXS_DIG_REVID0_GEN2r_REVID_REV_LETTERf_GET
#define DIG_REVID0_GEN2r_REVID_REV_LETTERf_SET BCMI_TSCF_XGXS_DIG_REVID0_GEN2r_REVID_REV_LETTERf_SET
#define DIG_REVID0_GEN2r_REVID_REV_NUMBERf_GET BCMI_TSCF_XGXS_DIG_REVID0_GEN2r_REVID_REV_NUMBERf_GET
#define DIG_REVID0_GEN2r_REVID_REV_NUMBERf_SET BCMI_TSCF_XGXS_DIG_REVID0_GEN2r_REVID_REV_NUMBERf_SET
#define DIG_REVID0_GEN2r_REVID_BONDINGf_GET BCMI_TSCF_XGXS_DIG_REVID0_GEN2r_REVID_BONDINGf_GET
#define DIG_REVID0_GEN2r_REVID_BONDINGf_SET BCMI_TSCF_XGXS_DIG_REVID0_GEN2r_REVID_BONDINGf_SET
#define DIG_REVID0_GEN2r_REVID_PROCESSf_GET BCMI_TSCF_XGXS_DIG_REVID0_GEN2r_REVID_PROCESSf_GET
#define DIG_REVID0_GEN2r_REVID_PROCESSf_SET BCMI_TSCF_XGXS_DIG_REVID0_GEN2r_REVID_PROCESSf_SET
#define DIG_REVID0_GEN2r_REVID_MODELf_GET BCMI_TSCF_XGXS_DIG_REVID0_GEN2r_REVID_MODELf_GET
#define DIG_REVID0_GEN2r_REVID_MODELf_SET BCMI_TSCF_XGXS_DIG_REVID0_GEN2r_REVID_MODELf_SET
#define READ_DIG_REVID0_GEN2r BCMI_TSCF_XGXS_READ_DIG_REVID0_GEN2r
#define WRITE_DIG_REVID0_GEN2r BCMI_TSCF_XGXS_WRITE_DIG_REVID0_GEN2r
#define MODIFY_DIG_REVID0_GEN2r BCMI_TSCF_XGXS_MODIFY_DIG_REVID0_GEN2r
#define READLN_DIG_REVID0_GEN2r BCMI_TSCF_XGXS_READLN_DIG_REVID0_GEN2r
#define WRITELN_DIG_REVID0_GEN2r BCMI_TSCF_XGXS_WRITELN_DIG_REVID0_GEN2r
#define WRITEALL_DIG_REVID0_GEN2r BCMI_TSCF_XGXS_WRITEALL_DIG_REVID0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DIG_REVID0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DIG_RST_CTL_PMD_GEN2
 * BLOCKS:   DIG_COM
 * REGADDR:  0xd101
 * DEVAD:    1
 * DESC:     RESET_CONTROL_PMD
 * RESETVAL: 0x1 (1)
 * ACCESS:   R/W
 * FIELDS:
 *     CORE_S_RSTB      Active Low Core Level Soft Reset. If asserted by writing to 1'b0 will reset the whole core.This soft reset is equivalent to the hard reset input pin pmd_por_h_rstb. This regiter bit can only bereset by assertion of the hard reset input pin pmd_por_h_rstb
 */
#define BCMI_TSCF_XGXS_DIG_RST_CTL_PMD_GEN2r (0x0001d101 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DIG_RST_CTL_PMD_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DIG_RST_CTL_PMD_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DIG_RST_CTL_PMD_GEN2r_s {
	uint32_t v[1];
	uint32_t dig_rst_ctl_pmd_gen2[1];
	uint32_t _dig_rst_ctl_pmd_gen2;
} BCMI_TSCF_XGXS_DIG_RST_CTL_PMD_GEN2r_t;

#define BCMI_TSCF_XGXS_DIG_RST_CTL_PMD_GEN2r_CLR(r) (r).dig_rst_ctl_pmd_gen2[0] = 0
#define BCMI_TSCF_XGXS_DIG_RST_CTL_PMD_GEN2r_SET(r,d) (r).dig_rst_ctl_pmd_gen2[0] = d
#define BCMI_TSCF_XGXS_DIG_RST_CTL_PMD_GEN2r_GET(r) (r).dig_rst_ctl_pmd_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DIG_RST_CTL_PMD_GEN2r_CORE_S_RSTBf_GET(r) (((r).dig_rst_ctl_pmd_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_DIG_RST_CTL_PMD_GEN2r_CORE_S_RSTBf_SET(r,f) (r).dig_rst_ctl_pmd_gen2[0]=(((r).dig_rst_ctl_pmd_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access DIG_RST_CTL_PMD_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DIG_RST_CTL_PMD_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DIG_RST_CTL_PMD_GEN2r,(_r._dig_rst_ctl_pmd_gen2))
#define BCMI_TSCF_XGXS_WRITE_DIG_RST_CTL_PMD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_RST_CTL_PMD_GEN2r,(_r._dig_rst_ctl_pmd_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DIG_RST_CTL_PMD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_RST_CTL_PMD_GEN2r,(_r._dig_rst_ctl_pmd_gen2))
#define BCMI_TSCF_XGXS_READLN_DIG_RST_CTL_PMD_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DIG_RST_CTL_PMD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_rst_ctl_pmd_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DIG_RST_CTL_PMD_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_RST_CTL_PMD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_rst_ctl_pmd_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DIG_RST_CTL_PMD_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_RST_CTL_PMD_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dig_rst_ctl_pmd_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DIG_RST_CTL_PMD_GEN2r BCMI_TSCF_XGXS_DIG_RST_CTL_PMD_GEN2r
#define DIG_RST_CTL_PMD_GEN2r_SIZE BCMI_TSCF_XGXS_DIG_RST_CTL_PMD_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DIG_RST_CTL_PMD_GEN2r_t DIG_RST_CTL_PMD_GEN2r_t;
#define DIG_RST_CTL_PMD_GEN2r_CLR BCMI_TSCF_XGXS_DIG_RST_CTL_PMD_GEN2r_CLR
#define DIG_RST_CTL_PMD_GEN2r_SET BCMI_TSCF_XGXS_DIG_RST_CTL_PMD_GEN2r_SET
#define DIG_RST_CTL_PMD_GEN2r_GET BCMI_TSCF_XGXS_DIG_RST_CTL_PMD_GEN2r_GET
#define DIG_RST_CTL_PMD_GEN2r_CORE_S_RSTBf_GET BCMI_TSCF_XGXS_DIG_RST_CTL_PMD_GEN2r_CORE_S_RSTBf_GET
#define DIG_RST_CTL_PMD_GEN2r_CORE_S_RSTBf_SET BCMI_TSCF_XGXS_DIG_RST_CTL_PMD_GEN2r_CORE_S_RSTBf_SET
#define READ_DIG_RST_CTL_PMD_GEN2r BCMI_TSCF_XGXS_READ_DIG_RST_CTL_PMD_GEN2r
#define WRITE_DIG_RST_CTL_PMD_GEN2r BCMI_TSCF_XGXS_WRITE_DIG_RST_CTL_PMD_GEN2r
#define MODIFY_DIG_RST_CTL_PMD_GEN2r BCMI_TSCF_XGXS_MODIFY_DIG_RST_CTL_PMD_GEN2r
#define READLN_DIG_RST_CTL_PMD_GEN2r BCMI_TSCF_XGXS_READLN_DIG_RST_CTL_PMD_GEN2r
#define WRITELN_DIG_RST_CTL_PMD_GEN2r BCMI_TSCF_XGXS_WRITELN_DIG_RST_CTL_PMD_GEN2r
#define WRITEALL_DIG_RST_CTL_PMD_GEN2r BCMI_TSCF_XGXS_WRITEALL_DIG_RST_CTL_PMD_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DIG_RST_CTL_PMD_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DIG_RST_CTL_CORE_DP_GEN2
 * BLOCKS:   DIG_COM
 * REGADDR:  0xd102
 * DEVAD:    1
 * DESC:     RESET_CONTROL_CORE_DP
 * RESETVAL: 0x4000 (16384)
 * ACCESS:   R/W
 * FIELDS:
 *     PMD_CORE_DP_H_RSTB_PKILL 1'b1 will disable the pmd_core_dp_h_rstb pin.
 *     SUP_RST_SEQ_FRC_VAL Suppress reset sequence force value.
 *     SUP_RST_SEQ_FRC  Suppress reset sequence force.
 *     PMD_MDIO_TRANS_PKILL 1'b1 will disable the pmd_mdio_trans pin.
 *     PMD_TX_CLK_VLD_FRC pmd_tx_clk_vld core output pin force.
 *     PMD_TX_CLK_VLD_FRC_VAL pmd_tx_clk_vld core output pin force value.
 *     TX_S_COMCLK_SEL  Mux control for selection of comclk for TX Lane clocks.If asserted by writing to 1'b1 will select the comclk for the lane clocks.It is recommended for user to force pmd_tx_clk_vld to 1'b0 while tx_s_comclk_sel is asserted to 1'b1by using pmd_tx_clk_vld_frc/frc_val registers.
 *     TX_S_COMCLK_FRC_ON Mux control for selection of comclk for TX Lane clocks by force.If asserted by writing to 1'b1 will select the comclk for the TX lane clocks. This is a debug bit and should be only used if lane clock from AFE is dead.It is recommended for user to force pmd_tx_clk_vld to 1'b0 while tx_s_comclk_frc_on is asserted to 1'b1by using pmd_tx_clk_vld_frc/frc_val registers.
 *     TX_S_CLKGATE_FRC_ON TX Active High Lane clock gator enable. If 1'1b1 then tx lane clock will be gated off. It does not affect the tclk goingto RMIC block so tx lane based registers can still be readable but not writable.It is recommended for user to force pmd_tx_clk_vld to 1'b0 while tx_s_clkgate_frc_on is asserted to 1'b1by using pmd_tx_clk_vld_frc/frc_val registers.
 *     AFE_S_PLL_RESET_FRC_VAL Active High PLL Reset force value control.
 *     AFE_S_PLL_RESET_FRC Active High PLL Reset force control.
 *     TX_PI_LOOP_FILTER_STABLE This register bit is ANDed with pmd_tx_clk_vld before frc/frc_val mux. This register will be controlled by the firmware when TX_PI is enabled.When TX_PI is enabled then this register will be written to 1'b0 while TX_PI is acquiring the lock with the source clock and will be written to 1'b1 by firmwareto indicate that clocks are locked. It indicates to chip level via pmd_tx_clk_vld to reset any datapath FIFOs and come out of reset when TX clock is stable.
 */
#define BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r (0x0001d102 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DIG_RST_CTL_CORE_DP_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_s {
	uint32_t v[1];
	uint32_t dig_rst_ctl_core_dp_gen2[1];
	uint32_t _dig_rst_ctl_core_dp_gen2;
} BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_t;

#define BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_CLR(r) (r).dig_rst_ctl_core_dp_gen2[0] = 0
#define BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_SET(r,d) (r).dig_rst_ctl_core_dp_gen2[0] = d
#define BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_GET(r) (r).dig_rst_ctl_core_dp_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_TX_PI_LOOP_FILTER_STABLEf_GET(r) ((((r).dig_rst_ctl_core_dp_gen2[0]) >> 14) & 0x1)
#define BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_TX_PI_LOOP_FILTER_STABLEf_SET(r,f) (r).dig_rst_ctl_core_dp_gen2[0]=(((r).dig_rst_ctl_core_dp_gen2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_AFE_S_PLL_RESET_FRCf_GET(r) ((((r).dig_rst_ctl_core_dp_gen2[0]) >> 13) & 0x1)
#define BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_AFE_S_PLL_RESET_FRCf_SET(r,f) (r).dig_rst_ctl_core_dp_gen2[0]=(((r).dig_rst_ctl_core_dp_gen2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_AFE_S_PLL_RESET_FRC_VALf_GET(r) ((((r).dig_rst_ctl_core_dp_gen2[0]) >> 12) & 0x1)
#define BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_AFE_S_PLL_RESET_FRC_VALf_SET(r,f) (r).dig_rst_ctl_core_dp_gen2[0]=(((r).dig_rst_ctl_core_dp_gen2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_TX_S_CLKGATE_FRC_ONf_GET(r) ((((r).dig_rst_ctl_core_dp_gen2[0]) >> 11) & 0x1)
#define BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_TX_S_CLKGATE_FRC_ONf_SET(r,f) (r).dig_rst_ctl_core_dp_gen2[0]=(((r).dig_rst_ctl_core_dp_gen2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_TX_S_COMCLK_FRC_ONf_GET(r) ((((r).dig_rst_ctl_core_dp_gen2[0]) >> 10) & 0x1)
#define BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_TX_S_COMCLK_FRC_ONf_SET(r,f) (r).dig_rst_ctl_core_dp_gen2[0]=(((r).dig_rst_ctl_core_dp_gen2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_TX_S_COMCLK_SELf_GET(r) ((((r).dig_rst_ctl_core_dp_gen2[0]) >> 9) & 0x1)
#define BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_TX_S_COMCLK_SELf_SET(r,f) (r).dig_rst_ctl_core_dp_gen2[0]=(((r).dig_rst_ctl_core_dp_gen2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_PMD_TX_CLK_VLD_FRC_VALf_GET(r) ((((r).dig_rst_ctl_core_dp_gen2[0]) >> 8) & 0x1)
#define BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_PMD_TX_CLK_VLD_FRC_VALf_SET(r,f) (r).dig_rst_ctl_core_dp_gen2[0]=(((r).dig_rst_ctl_core_dp_gen2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_PMD_TX_CLK_VLD_FRCf_GET(r) ((((r).dig_rst_ctl_core_dp_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_PMD_TX_CLK_VLD_FRCf_SET(r,f) (r).dig_rst_ctl_core_dp_gen2[0]=(((r).dig_rst_ctl_core_dp_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_PMD_MDIO_TRANS_PKILLf_GET(r) ((((r).dig_rst_ctl_core_dp_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_PMD_MDIO_TRANS_PKILLf_SET(r,f) (r).dig_rst_ctl_core_dp_gen2[0]=(((r).dig_rst_ctl_core_dp_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_SUP_RST_SEQ_FRCf_GET(r) ((((r).dig_rst_ctl_core_dp_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_SUP_RST_SEQ_FRCf_SET(r,f) (r).dig_rst_ctl_core_dp_gen2[0]=(((r).dig_rst_ctl_core_dp_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_SUP_RST_SEQ_FRC_VALf_GET(r) ((((r).dig_rst_ctl_core_dp_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_SUP_RST_SEQ_FRC_VALf_SET(r,f) (r).dig_rst_ctl_core_dp_gen2[0]=(((r).dig_rst_ctl_core_dp_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_PMD_CORE_DP_H_RSTB_PKILLf_GET(r) ((((r).dig_rst_ctl_core_dp_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_PMD_CORE_DP_H_RSTB_PKILLf_SET(r,f) (r).dig_rst_ctl_core_dp_gen2[0]=(((r).dig_rst_ctl_core_dp_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))

/*
 * These macros can be used to access DIG_RST_CTL_CORE_DP_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DIG_RST_CTL_CORE_DP_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r,(_r._dig_rst_ctl_core_dp_gen2))
#define BCMI_TSCF_XGXS_WRITE_DIG_RST_CTL_CORE_DP_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r,(_r._dig_rst_ctl_core_dp_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DIG_RST_CTL_CORE_DP_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r,(_r._dig_rst_ctl_core_dp_gen2))
#define BCMI_TSCF_XGXS_READLN_DIG_RST_CTL_CORE_DP_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_rst_ctl_core_dp_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DIG_RST_CTL_CORE_DP_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_rst_ctl_core_dp_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DIG_RST_CTL_CORE_DP_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dig_rst_ctl_core_dp_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DIG_RST_CTL_CORE_DP_GEN2r BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r
#define DIG_RST_CTL_CORE_DP_GEN2r_SIZE BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_t DIG_RST_CTL_CORE_DP_GEN2r_t;
#define DIG_RST_CTL_CORE_DP_GEN2r_CLR BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_CLR
#define DIG_RST_CTL_CORE_DP_GEN2r_SET BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_SET
#define DIG_RST_CTL_CORE_DP_GEN2r_GET BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_GET
#define DIG_RST_CTL_CORE_DP_GEN2r_TX_PI_LOOP_FILTER_STABLEf_GET BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_TX_PI_LOOP_FILTER_STABLEf_GET
#define DIG_RST_CTL_CORE_DP_GEN2r_TX_PI_LOOP_FILTER_STABLEf_SET BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_TX_PI_LOOP_FILTER_STABLEf_SET
#define DIG_RST_CTL_CORE_DP_GEN2r_AFE_S_PLL_RESET_FRCf_GET BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_AFE_S_PLL_RESET_FRCf_GET
#define DIG_RST_CTL_CORE_DP_GEN2r_AFE_S_PLL_RESET_FRCf_SET BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_AFE_S_PLL_RESET_FRCf_SET
#define DIG_RST_CTL_CORE_DP_GEN2r_AFE_S_PLL_RESET_FRC_VALf_GET BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_AFE_S_PLL_RESET_FRC_VALf_GET
#define DIG_RST_CTL_CORE_DP_GEN2r_AFE_S_PLL_RESET_FRC_VALf_SET BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_AFE_S_PLL_RESET_FRC_VALf_SET
#define DIG_RST_CTL_CORE_DP_GEN2r_TX_S_CLKGATE_FRC_ONf_GET BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_TX_S_CLKGATE_FRC_ONf_GET
#define DIG_RST_CTL_CORE_DP_GEN2r_TX_S_CLKGATE_FRC_ONf_SET BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_TX_S_CLKGATE_FRC_ONf_SET
#define DIG_RST_CTL_CORE_DP_GEN2r_TX_S_COMCLK_FRC_ONf_GET BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_TX_S_COMCLK_FRC_ONf_GET
#define DIG_RST_CTL_CORE_DP_GEN2r_TX_S_COMCLK_FRC_ONf_SET BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_TX_S_COMCLK_FRC_ONf_SET
#define DIG_RST_CTL_CORE_DP_GEN2r_TX_S_COMCLK_SELf_GET BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_TX_S_COMCLK_SELf_GET
#define DIG_RST_CTL_CORE_DP_GEN2r_TX_S_COMCLK_SELf_SET BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_TX_S_COMCLK_SELf_SET
#define DIG_RST_CTL_CORE_DP_GEN2r_PMD_TX_CLK_VLD_FRC_VALf_GET BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_PMD_TX_CLK_VLD_FRC_VALf_GET
#define DIG_RST_CTL_CORE_DP_GEN2r_PMD_TX_CLK_VLD_FRC_VALf_SET BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_PMD_TX_CLK_VLD_FRC_VALf_SET
#define DIG_RST_CTL_CORE_DP_GEN2r_PMD_TX_CLK_VLD_FRCf_GET BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_PMD_TX_CLK_VLD_FRCf_GET
#define DIG_RST_CTL_CORE_DP_GEN2r_PMD_TX_CLK_VLD_FRCf_SET BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_PMD_TX_CLK_VLD_FRCf_SET
#define DIG_RST_CTL_CORE_DP_GEN2r_PMD_MDIO_TRANS_PKILLf_GET BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_PMD_MDIO_TRANS_PKILLf_GET
#define DIG_RST_CTL_CORE_DP_GEN2r_PMD_MDIO_TRANS_PKILLf_SET BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_PMD_MDIO_TRANS_PKILLf_SET
#define DIG_RST_CTL_CORE_DP_GEN2r_SUP_RST_SEQ_FRCf_GET BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_SUP_RST_SEQ_FRCf_GET
#define DIG_RST_CTL_CORE_DP_GEN2r_SUP_RST_SEQ_FRCf_SET BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_SUP_RST_SEQ_FRCf_SET
#define DIG_RST_CTL_CORE_DP_GEN2r_SUP_RST_SEQ_FRC_VALf_GET BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_SUP_RST_SEQ_FRC_VALf_GET
#define DIG_RST_CTL_CORE_DP_GEN2r_SUP_RST_SEQ_FRC_VALf_SET BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_SUP_RST_SEQ_FRC_VALf_SET
#define DIG_RST_CTL_CORE_DP_GEN2r_PMD_CORE_DP_H_RSTB_PKILLf_GET BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_PMD_CORE_DP_H_RSTB_PKILLf_GET
#define DIG_RST_CTL_CORE_DP_GEN2r_PMD_CORE_DP_H_RSTB_PKILLf_SET BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r_PMD_CORE_DP_H_RSTB_PKILLf_SET
#define READ_DIG_RST_CTL_CORE_DP_GEN2r BCMI_TSCF_XGXS_READ_DIG_RST_CTL_CORE_DP_GEN2r
#define WRITE_DIG_RST_CTL_CORE_DP_GEN2r BCMI_TSCF_XGXS_WRITE_DIG_RST_CTL_CORE_DP_GEN2r
#define MODIFY_DIG_RST_CTL_CORE_DP_GEN2r BCMI_TSCF_XGXS_MODIFY_DIG_RST_CTL_CORE_DP_GEN2r
#define READLN_DIG_RST_CTL_CORE_DP_GEN2r BCMI_TSCF_XGXS_READLN_DIG_RST_CTL_CORE_DP_GEN2r
#define WRITELN_DIG_RST_CTL_CORE_DP_GEN2r BCMI_TSCF_XGXS_WRITELN_DIG_RST_CTL_CORE_DP_GEN2r
#define WRITEALL_DIG_RST_CTL_CORE_DP_GEN2r BCMI_TSCF_XGXS_WRITEALL_DIG_RST_CTL_CORE_DP_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DIG_RST_CTL_CORE_DP_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DIG_CORE_MCST_MASK_CONRTOL_GEN2
 * BLOCKS:   DIG_COM
 * REGADDR:  0xd103
 * DEVAD:    1
 * DESC:     CORE_MULTICAST_MASK_CONRTOL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CORE_MULTICAST_MASK_CONTROL This masks the lane from a broadcast or multicast write operation.
 */
#define BCMI_TSCF_XGXS_DIG_CORE_MCST_MASK_CONRTOL_GEN2r (0x0001d103 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DIG_CORE_MCST_MASK_CONRTOL_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DIG_CORE_MCST_MASK_CONRTOL_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DIG_CORE_MCST_MASK_CONRTOL_GEN2r_s {
	uint32_t v[1];
	uint32_t dig_core_mcst_mask_conrtol_gen2[1];
	uint32_t _dig_core_mcst_mask_conrtol_gen2;
} BCMI_TSCF_XGXS_DIG_CORE_MCST_MASK_CONRTOL_GEN2r_t;

#define BCMI_TSCF_XGXS_DIG_CORE_MCST_MASK_CONRTOL_GEN2r_CLR(r) (r).dig_core_mcst_mask_conrtol_gen2[0] = 0
#define BCMI_TSCF_XGXS_DIG_CORE_MCST_MASK_CONRTOL_GEN2r_SET(r,d) (r).dig_core_mcst_mask_conrtol_gen2[0] = d
#define BCMI_TSCF_XGXS_DIG_CORE_MCST_MASK_CONRTOL_GEN2r_GET(r) (r).dig_core_mcst_mask_conrtol_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DIG_CORE_MCST_MASK_CONRTOL_GEN2r_CORE_MULTICAST_MASK_CONTROLf_GET(r) (((r).dig_core_mcst_mask_conrtol_gen2[0]) & 0xf)
#define BCMI_TSCF_XGXS_DIG_CORE_MCST_MASK_CONRTOL_GEN2r_CORE_MULTICAST_MASK_CONTROLf_SET(r,f) (r).dig_core_mcst_mask_conrtol_gen2[0]=(((r).dig_core_mcst_mask_conrtol_gen2[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access DIG_CORE_MCST_MASK_CONRTOL_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DIG_CORE_MCST_MASK_CONRTOL_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DIG_CORE_MCST_MASK_CONRTOL_GEN2r,(_r._dig_core_mcst_mask_conrtol_gen2))
#define BCMI_TSCF_XGXS_WRITE_DIG_CORE_MCST_MASK_CONRTOL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_CORE_MCST_MASK_CONRTOL_GEN2r,(_r._dig_core_mcst_mask_conrtol_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DIG_CORE_MCST_MASK_CONRTOL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_CORE_MCST_MASK_CONRTOL_GEN2r,(_r._dig_core_mcst_mask_conrtol_gen2))
#define BCMI_TSCF_XGXS_READLN_DIG_CORE_MCST_MASK_CONRTOL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DIG_CORE_MCST_MASK_CONRTOL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_core_mcst_mask_conrtol_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DIG_CORE_MCST_MASK_CONRTOL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_CORE_MCST_MASK_CONRTOL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_core_mcst_mask_conrtol_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DIG_CORE_MCST_MASK_CONRTOL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_CORE_MCST_MASK_CONRTOL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dig_core_mcst_mask_conrtol_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DIG_CORE_MCST_MASK_CONRTOL_GEN2r BCMI_TSCF_XGXS_DIG_CORE_MCST_MASK_CONRTOL_GEN2r
#define DIG_CORE_MCST_MASK_CONRTOL_GEN2r_SIZE BCMI_TSCF_XGXS_DIG_CORE_MCST_MASK_CONRTOL_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DIG_CORE_MCST_MASK_CONRTOL_GEN2r_t DIG_CORE_MCST_MASK_CONRTOL_GEN2r_t;
#define DIG_CORE_MCST_MASK_CONRTOL_GEN2r_CLR BCMI_TSCF_XGXS_DIG_CORE_MCST_MASK_CONRTOL_GEN2r_CLR
#define DIG_CORE_MCST_MASK_CONRTOL_GEN2r_SET BCMI_TSCF_XGXS_DIG_CORE_MCST_MASK_CONRTOL_GEN2r_SET
#define DIG_CORE_MCST_MASK_CONRTOL_GEN2r_GET BCMI_TSCF_XGXS_DIG_CORE_MCST_MASK_CONRTOL_GEN2r_GET
#define DIG_CORE_MCST_MASK_CONRTOL_GEN2r_CORE_MULTICAST_MASK_CONTROLf_GET BCMI_TSCF_XGXS_DIG_CORE_MCST_MASK_CONRTOL_GEN2r_CORE_MULTICAST_MASK_CONTROLf_GET
#define DIG_CORE_MCST_MASK_CONRTOL_GEN2r_CORE_MULTICAST_MASK_CONTROLf_SET BCMI_TSCF_XGXS_DIG_CORE_MCST_MASK_CONRTOL_GEN2r_CORE_MULTICAST_MASK_CONTROLf_SET
#define READ_DIG_CORE_MCST_MASK_CONRTOL_GEN2r BCMI_TSCF_XGXS_READ_DIG_CORE_MCST_MASK_CONRTOL_GEN2r
#define WRITE_DIG_CORE_MCST_MASK_CONRTOL_GEN2r BCMI_TSCF_XGXS_WRITE_DIG_CORE_MCST_MASK_CONRTOL_GEN2r
#define MODIFY_DIG_CORE_MCST_MASK_CONRTOL_GEN2r BCMI_TSCF_XGXS_MODIFY_DIG_CORE_MCST_MASK_CONRTOL_GEN2r
#define READLN_DIG_CORE_MCST_MASK_CONRTOL_GEN2r BCMI_TSCF_XGXS_READLN_DIG_CORE_MCST_MASK_CONRTOL_GEN2r
#define WRITELN_DIG_CORE_MCST_MASK_CONRTOL_GEN2r BCMI_TSCF_XGXS_WRITELN_DIG_CORE_MCST_MASK_CONRTOL_GEN2r
#define WRITEALL_DIG_CORE_MCST_MASK_CONRTOL_GEN2r BCMI_TSCF_XGXS_WRITEALL_DIG_CORE_MCST_MASK_CONRTOL_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DIG_CORE_MCST_MASK_CONRTOL_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DIG_TOP_USER_CTL_0_GEN2
 * BLOCKS:   DIG_COM
 * REGADDR:  0xd104
 * DEVAD:    1
 * DESC:     TOP_USER_CONTROL_0
 * RESETVAL: 0x271 (625)
 * ACCESS:   R/W
 * FIELDS:
 *     HEARTBEAT_COUNT_1US Heartbeat timer count in comclk cycles to create 1us heartbeat_1us period. It should be programmed to the nearest increment of 0.25Mhz value of the comclk frequency in Mhz.For example, for comclk of 125 Mhz, it should be programmed to 10'd500. For 156.25 Mhz comclk, it should be programmed to 10'd625 and similarly for any other comclk frequency.
 *     CORE_DP_S_RSTB   Active Low Core Level Datapath Soft Reset. If asserted by writingto 1'b0 will reset datapath logic of all the lanes. This soft resetis equivalent to the hard reset input pin core_dp_h_rstb. Assertion of this
 *     AFE_S_PLL_PWRDN  Active High PLL Power Down control.
 *     UC_ACTIVE        When set to 1'b1 then Hardware should wait for uC handshakes to wake up from datapath resetWhen set to 1'b0 then Hardware can internally assume that uc_ack_* = 1.
 */
#define BCMI_TSCF_XGXS_DIG_TOP_USER_CTL_0_GEN2r (0x0001d104 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DIG_TOP_USER_CTL_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DIG_TOP_USER_CTL_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DIG_TOP_USER_CTL_0_GEN2r_s {
	uint32_t v[1];
	uint32_t dig_top_user_ctl_0_gen2[1];
	uint32_t _dig_top_user_ctl_0_gen2;
} BCMI_TSCF_XGXS_DIG_TOP_USER_CTL_0_GEN2r_t;

#define BCMI_TSCF_XGXS_DIG_TOP_USER_CTL_0_GEN2r_CLR(r) (r).dig_top_user_ctl_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_DIG_TOP_USER_CTL_0_GEN2r_SET(r,d) (r).dig_top_user_ctl_0_gen2[0] = d
#define BCMI_TSCF_XGXS_DIG_TOP_USER_CTL_0_GEN2r_GET(r) (r).dig_top_user_ctl_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DIG_TOP_USER_CTL_0_GEN2r_UC_ACTIVEf_GET(r) ((((r).dig_top_user_ctl_0_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_DIG_TOP_USER_CTL_0_GEN2r_UC_ACTIVEf_SET(r,f) (r).dig_top_user_ctl_0_gen2[0]=(((r).dig_top_user_ctl_0_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_DIG_TOP_USER_CTL_0_GEN2r_AFE_S_PLL_PWRDNf_GET(r) ((((r).dig_top_user_ctl_0_gen2[0]) >> 14) & 0x1)
#define BCMI_TSCF_XGXS_DIG_TOP_USER_CTL_0_GEN2r_AFE_S_PLL_PWRDNf_SET(r,f) (r).dig_top_user_ctl_0_gen2[0]=(((r).dig_top_user_ctl_0_gen2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_XGXS_DIG_TOP_USER_CTL_0_GEN2r_CORE_DP_S_RSTBf_GET(r) ((((r).dig_top_user_ctl_0_gen2[0]) >> 13) & 0x1)
#define BCMI_TSCF_XGXS_DIG_TOP_USER_CTL_0_GEN2r_CORE_DP_S_RSTBf_SET(r,f) (r).dig_top_user_ctl_0_gen2[0]=(((r).dig_top_user_ctl_0_gen2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_XGXS_DIG_TOP_USER_CTL_0_GEN2r_HEARTBEAT_COUNT_1USf_GET(r) (((r).dig_top_user_ctl_0_gen2[0]) & 0x3ff)
#define BCMI_TSCF_XGXS_DIG_TOP_USER_CTL_0_GEN2r_HEARTBEAT_COUNT_1USf_SET(r,f) (r).dig_top_user_ctl_0_gen2[0]=(((r).dig_top_user_ctl_0_gen2[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff)) | (0x3ff << 16)

/*
 * These macros can be used to access DIG_TOP_USER_CTL_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DIG_TOP_USER_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DIG_TOP_USER_CTL_0_GEN2r,(_r._dig_top_user_ctl_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_DIG_TOP_USER_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_TOP_USER_CTL_0_GEN2r,(_r._dig_top_user_ctl_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DIG_TOP_USER_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_TOP_USER_CTL_0_GEN2r,(_r._dig_top_user_ctl_0_gen2))
#define BCMI_TSCF_XGXS_READLN_DIG_TOP_USER_CTL_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DIG_TOP_USER_CTL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_top_user_ctl_0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DIG_TOP_USER_CTL_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_TOP_USER_CTL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_top_user_ctl_0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DIG_TOP_USER_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_TOP_USER_CTL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dig_top_user_ctl_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DIG_TOP_USER_CTL_0_GEN2r BCMI_TSCF_XGXS_DIG_TOP_USER_CTL_0_GEN2r
#define DIG_TOP_USER_CTL_0_GEN2r_SIZE BCMI_TSCF_XGXS_DIG_TOP_USER_CTL_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DIG_TOP_USER_CTL_0_GEN2r_t DIG_TOP_USER_CTL_0_GEN2r_t;
#define DIG_TOP_USER_CTL_0_GEN2r_CLR BCMI_TSCF_XGXS_DIG_TOP_USER_CTL_0_GEN2r_CLR
#define DIG_TOP_USER_CTL_0_GEN2r_SET BCMI_TSCF_XGXS_DIG_TOP_USER_CTL_0_GEN2r_SET
#define DIG_TOP_USER_CTL_0_GEN2r_GET BCMI_TSCF_XGXS_DIG_TOP_USER_CTL_0_GEN2r_GET
#define DIG_TOP_USER_CTL_0_GEN2r_UC_ACTIVEf_GET BCMI_TSCF_XGXS_DIG_TOP_USER_CTL_0_GEN2r_UC_ACTIVEf_GET
#define DIG_TOP_USER_CTL_0_GEN2r_UC_ACTIVEf_SET BCMI_TSCF_XGXS_DIG_TOP_USER_CTL_0_GEN2r_UC_ACTIVEf_SET
#define DIG_TOP_USER_CTL_0_GEN2r_AFE_S_PLL_PWRDNf_GET BCMI_TSCF_XGXS_DIG_TOP_USER_CTL_0_GEN2r_AFE_S_PLL_PWRDNf_GET
#define DIG_TOP_USER_CTL_0_GEN2r_AFE_S_PLL_PWRDNf_SET BCMI_TSCF_XGXS_DIG_TOP_USER_CTL_0_GEN2r_AFE_S_PLL_PWRDNf_SET
#define DIG_TOP_USER_CTL_0_GEN2r_CORE_DP_S_RSTBf_GET BCMI_TSCF_XGXS_DIG_TOP_USER_CTL_0_GEN2r_CORE_DP_S_RSTBf_GET
#define DIG_TOP_USER_CTL_0_GEN2r_CORE_DP_S_RSTBf_SET BCMI_TSCF_XGXS_DIG_TOP_USER_CTL_0_GEN2r_CORE_DP_S_RSTBf_SET
#define DIG_TOP_USER_CTL_0_GEN2r_HEARTBEAT_COUNT_1USf_GET BCMI_TSCF_XGXS_DIG_TOP_USER_CTL_0_GEN2r_HEARTBEAT_COUNT_1USf_GET
#define DIG_TOP_USER_CTL_0_GEN2r_HEARTBEAT_COUNT_1USf_SET BCMI_TSCF_XGXS_DIG_TOP_USER_CTL_0_GEN2r_HEARTBEAT_COUNT_1USf_SET
#define READ_DIG_TOP_USER_CTL_0_GEN2r BCMI_TSCF_XGXS_READ_DIG_TOP_USER_CTL_0_GEN2r
#define WRITE_DIG_TOP_USER_CTL_0_GEN2r BCMI_TSCF_XGXS_WRITE_DIG_TOP_USER_CTL_0_GEN2r
#define MODIFY_DIG_TOP_USER_CTL_0_GEN2r BCMI_TSCF_XGXS_MODIFY_DIG_TOP_USER_CTL_0_GEN2r
#define READLN_DIG_TOP_USER_CTL_0_GEN2r BCMI_TSCF_XGXS_READLN_DIG_TOP_USER_CTL_0_GEN2r
#define WRITELN_DIG_TOP_USER_CTL_0_GEN2r BCMI_TSCF_XGXS_WRITELN_DIG_TOP_USER_CTL_0_GEN2r
#define WRITEALL_DIG_TOP_USER_CTL_0_GEN2r BCMI_TSCF_XGXS_WRITEALL_DIG_TOP_USER_CTL_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DIG_TOP_USER_CTL_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DIG_UC_ACK_CORE_CTL_GEN2
 * BLOCKS:   DIG_COM
 * REGADDR:  0xd105
 * DEVAD:    1
 * DESC:     UC_ACK_CORE_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     UC_ACK_CORE_CFG_DONE uC will write this to 1 to indicate it's configuration of the core is complete. Writing to 1'b1 willshould release internal hold on core_dp_reset, only if core_dp_reset_state is 3'b001.
 *     UC_ACK_CORE_DP_RESET uC will write this to 1 to acknowledge a reset event after seeing "core_dp_reset_coccured".
 */
#define BCMI_TSCF_XGXS_DIG_UC_ACK_CORE_CTL_GEN2r (0x0001d105 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DIG_UC_ACK_CORE_CTL_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DIG_UC_ACK_CORE_CTL_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DIG_UC_ACK_CORE_CTL_GEN2r_s {
	uint32_t v[1];
	uint32_t dig_uc_ack_core_ctl_gen2[1];
	uint32_t _dig_uc_ack_core_ctl_gen2;
} BCMI_TSCF_XGXS_DIG_UC_ACK_CORE_CTL_GEN2r_t;

#define BCMI_TSCF_XGXS_DIG_UC_ACK_CORE_CTL_GEN2r_CLR(r) (r).dig_uc_ack_core_ctl_gen2[0] = 0
#define BCMI_TSCF_XGXS_DIG_UC_ACK_CORE_CTL_GEN2r_SET(r,d) (r).dig_uc_ack_core_ctl_gen2[0] = d
#define BCMI_TSCF_XGXS_DIG_UC_ACK_CORE_CTL_GEN2r_GET(r) (r).dig_uc_ack_core_ctl_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DIG_UC_ACK_CORE_CTL_GEN2r_UC_ACK_CORE_DP_RESETf_GET(r) ((((r).dig_uc_ack_core_ctl_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_DIG_UC_ACK_CORE_CTL_GEN2r_UC_ACK_CORE_DP_RESETf_SET(r,f) (r).dig_uc_ack_core_ctl_gen2[0]=(((r).dig_uc_ack_core_ctl_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_DIG_UC_ACK_CORE_CTL_GEN2r_UC_ACK_CORE_CFG_DONEf_GET(r) (((r).dig_uc_ack_core_ctl_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_DIG_UC_ACK_CORE_CTL_GEN2r_UC_ACK_CORE_CFG_DONEf_SET(r,f) (r).dig_uc_ack_core_ctl_gen2[0]=(((r).dig_uc_ack_core_ctl_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access DIG_UC_ACK_CORE_CTL_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DIG_UC_ACK_CORE_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DIG_UC_ACK_CORE_CTL_GEN2r,(_r._dig_uc_ack_core_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITE_DIG_UC_ACK_CORE_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_UC_ACK_CORE_CTL_GEN2r,(_r._dig_uc_ack_core_ctl_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DIG_UC_ACK_CORE_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_UC_ACK_CORE_CTL_GEN2r,(_r._dig_uc_ack_core_ctl_gen2))
#define BCMI_TSCF_XGXS_READLN_DIG_UC_ACK_CORE_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DIG_UC_ACK_CORE_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_uc_ack_core_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DIG_UC_ACK_CORE_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_UC_ACK_CORE_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_uc_ack_core_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DIG_UC_ACK_CORE_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_UC_ACK_CORE_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dig_uc_ack_core_ctl_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DIG_UC_ACK_CORE_CTL_GEN2r BCMI_TSCF_XGXS_DIG_UC_ACK_CORE_CTL_GEN2r
#define DIG_UC_ACK_CORE_CTL_GEN2r_SIZE BCMI_TSCF_XGXS_DIG_UC_ACK_CORE_CTL_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DIG_UC_ACK_CORE_CTL_GEN2r_t DIG_UC_ACK_CORE_CTL_GEN2r_t;
#define DIG_UC_ACK_CORE_CTL_GEN2r_CLR BCMI_TSCF_XGXS_DIG_UC_ACK_CORE_CTL_GEN2r_CLR
#define DIG_UC_ACK_CORE_CTL_GEN2r_SET BCMI_TSCF_XGXS_DIG_UC_ACK_CORE_CTL_GEN2r_SET
#define DIG_UC_ACK_CORE_CTL_GEN2r_GET BCMI_TSCF_XGXS_DIG_UC_ACK_CORE_CTL_GEN2r_GET
#define DIG_UC_ACK_CORE_CTL_GEN2r_UC_ACK_CORE_DP_RESETf_GET BCMI_TSCF_XGXS_DIG_UC_ACK_CORE_CTL_GEN2r_UC_ACK_CORE_DP_RESETf_GET
#define DIG_UC_ACK_CORE_CTL_GEN2r_UC_ACK_CORE_DP_RESETf_SET BCMI_TSCF_XGXS_DIG_UC_ACK_CORE_CTL_GEN2r_UC_ACK_CORE_DP_RESETf_SET
#define DIG_UC_ACK_CORE_CTL_GEN2r_UC_ACK_CORE_CFG_DONEf_GET BCMI_TSCF_XGXS_DIG_UC_ACK_CORE_CTL_GEN2r_UC_ACK_CORE_CFG_DONEf_GET
#define DIG_UC_ACK_CORE_CTL_GEN2r_UC_ACK_CORE_CFG_DONEf_SET BCMI_TSCF_XGXS_DIG_UC_ACK_CORE_CTL_GEN2r_UC_ACK_CORE_CFG_DONEf_SET
#define READ_DIG_UC_ACK_CORE_CTL_GEN2r BCMI_TSCF_XGXS_READ_DIG_UC_ACK_CORE_CTL_GEN2r
#define WRITE_DIG_UC_ACK_CORE_CTL_GEN2r BCMI_TSCF_XGXS_WRITE_DIG_UC_ACK_CORE_CTL_GEN2r
#define MODIFY_DIG_UC_ACK_CORE_CTL_GEN2r BCMI_TSCF_XGXS_MODIFY_DIG_UC_ACK_CORE_CTL_GEN2r
#define READLN_DIG_UC_ACK_CORE_CTL_GEN2r BCMI_TSCF_XGXS_READLN_DIG_UC_ACK_CORE_CTL_GEN2r
#define WRITELN_DIG_UC_ACK_CORE_CTL_GEN2r BCMI_TSCF_XGXS_WRITELN_DIG_UC_ACK_CORE_CTL_GEN2r
#define WRITEALL_DIG_UC_ACK_CORE_CTL_GEN2r BCMI_TSCF_XGXS_WRITEALL_DIG_UC_ACK_CORE_CTL_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DIG_UC_ACK_CORE_CTL_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DIG_CORE_RST_OCC_CTL_GEN2
 * BLOCKS:   DIG_COM
 * REGADDR:  0xd106
 * DEVAD:    1
 * DESC:     CORE_REG_RESET_OCCURRED_CONTROL
 * RESETVAL: 0x1 (1)
 * ACCESS:   R/W
 * FIELDS:
 *     CORE_REG_RESET_OCCURRED Set to 1'b1 upon core level register reset and remains so until cleared by register write from uC.
 */
#define BCMI_TSCF_XGXS_DIG_CORE_RST_OCC_CTL_GEN2r (0x0001d106 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DIG_CORE_RST_OCC_CTL_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DIG_CORE_RST_OCC_CTL_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DIG_CORE_RST_OCC_CTL_GEN2r_s {
	uint32_t v[1];
	uint32_t dig_core_rst_occ_ctl_gen2[1];
	uint32_t _dig_core_rst_occ_ctl_gen2;
} BCMI_TSCF_XGXS_DIG_CORE_RST_OCC_CTL_GEN2r_t;

#define BCMI_TSCF_XGXS_DIG_CORE_RST_OCC_CTL_GEN2r_CLR(r) (r).dig_core_rst_occ_ctl_gen2[0] = 0
#define BCMI_TSCF_XGXS_DIG_CORE_RST_OCC_CTL_GEN2r_SET(r,d) (r).dig_core_rst_occ_ctl_gen2[0] = d
#define BCMI_TSCF_XGXS_DIG_CORE_RST_OCC_CTL_GEN2r_GET(r) (r).dig_core_rst_occ_ctl_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DIG_CORE_RST_OCC_CTL_GEN2r_CORE_REG_RESET_OCCURREDf_GET(r) (((r).dig_core_rst_occ_ctl_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_DIG_CORE_RST_OCC_CTL_GEN2r_CORE_REG_RESET_OCCURREDf_SET(r,f) (r).dig_core_rst_occ_ctl_gen2[0]=(((r).dig_core_rst_occ_ctl_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access DIG_CORE_RST_OCC_CTL_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DIG_CORE_RST_OCC_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DIG_CORE_RST_OCC_CTL_GEN2r,(_r._dig_core_rst_occ_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITE_DIG_CORE_RST_OCC_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_CORE_RST_OCC_CTL_GEN2r,(_r._dig_core_rst_occ_ctl_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DIG_CORE_RST_OCC_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_CORE_RST_OCC_CTL_GEN2r,(_r._dig_core_rst_occ_ctl_gen2))
#define BCMI_TSCF_XGXS_READLN_DIG_CORE_RST_OCC_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DIG_CORE_RST_OCC_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_core_rst_occ_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DIG_CORE_RST_OCC_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_CORE_RST_OCC_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_core_rst_occ_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DIG_CORE_RST_OCC_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_CORE_RST_OCC_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dig_core_rst_occ_ctl_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DIG_CORE_RST_OCC_CTL_GEN2r BCMI_TSCF_XGXS_DIG_CORE_RST_OCC_CTL_GEN2r
#define DIG_CORE_RST_OCC_CTL_GEN2r_SIZE BCMI_TSCF_XGXS_DIG_CORE_RST_OCC_CTL_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DIG_CORE_RST_OCC_CTL_GEN2r_t DIG_CORE_RST_OCC_CTL_GEN2r_t;
#define DIG_CORE_RST_OCC_CTL_GEN2r_CLR BCMI_TSCF_XGXS_DIG_CORE_RST_OCC_CTL_GEN2r_CLR
#define DIG_CORE_RST_OCC_CTL_GEN2r_SET BCMI_TSCF_XGXS_DIG_CORE_RST_OCC_CTL_GEN2r_SET
#define DIG_CORE_RST_OCC_CTL_GEN2r_GET BCMI_TSCF_XGXS_DIG_CORE_RST_OCC_CTL_GEN2r_GET
#define DIG_CORE_RST_OCC_CTL_GEN2r_CORE_REG_RESET_OCCURREDf_GET BCMI_TSCF_XGXS_DIG_CORE_RST_OCC_CTL_GEN2r_CORE_REG_RESET_OCCURREDf_GET
#define DIG_CORE_RST_OCC_CTL_GEN2r_CORE_REG_RESET_OCCURREDf_SET BCMI_TSCF_XGXS_DIG_CORE_RST_OCC_CTL_GEN2r_CORE_REG_RESET_OCCURREDf_SET
#define READ_DIG_CORE_RST_OCC_CTL_GEN2r BCMI_TSCF_XGXS_READ_DIG_CORE_RST_OCC_CTL_GEN2r
#define WRITE_DIG_CORE_RST_OCC_CTL_GEN2r BCMI_TSCF_XGXS_WRITE_DIG_CORE_RST_OCC_CTL_GEN2r
#define MODIFY_DIG_CORE_RST_OCC_CTL_GEN2r BCMI_TSCF_XGXS_MODIFY_DIG_CORE_RST_OCC_CTL_GEN2r
#define READLN_DIG_CORE_RST_OCC_CTL_GEN2r BCMI_TSCF_XGXS_READLN_DIG_CORE_RST_OCC_CTL_GEN2r
#define WRITELN_DIG_CORE_RST_OCC_CTL_GEN2r BCMI_TSCF_XGXS_WRITELN_DIG_CORE_RST_OCC_CTL_GEN2r
#define WRITEALL_DIG_CORE_RST_OCC_CTL_GEN2r BCMI_TSCF_XGXS_WRITEALL_DIG_CORE_RST_OCC_CTL_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DIG_CORE_RST_OCC_CTL_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DIG_RST_SEQ_TMR_CTL_GEN2
 * BLOCKS:   DIG_COM
 * REGADDR:  0xd107
 * DEVAD:    1
 * DESC:     RST_SEQ_TIMER_CONTROL
 * RESETVAL: 0x8304 (33540)
 * ACCESS:   R/W
 * FIELDS:
 *     RST_SEQ_TIMER    Defines the number of comclk cycles between de-assertion of AFE RX/TX lane reset and clock muxing from comclk to lane clock.Valid value range is from 0 to 7 which will provide from 2 to 16 clock cycles between de-assertion of AFE RX/TX lane resetand clock muxing from comclk to lane clock. Wait_time = 2 * (rst_seq_timer + 1).
 *     PWRDN_SEQ_TIMER  Defines the number of comclk cycles between de-assertion of AFE RX/TX lane pwrdn and clock muxing from comclk to lane clock.Valid value range is from 0 to 7 which will provide from 8 to 64 clock cycles between de-assertion of AFE RX/TX lane pwrdnand clock muxing from comclk to lane clock. Wait_time = 8 * (pwrdn_seq_timer + 1).
 *     RST_SEQ_DIS_FLT_MODE Defines the filter mode for rst_seq_dis/pmd_mdio_trans pin.2'd0 - filter is bypassed where input is passed to output untouched.2'd1 - filter output is 16 comclk cycles if input is > 16 comclk cycles else output is same as input signal.2'd2 - filter output is 20 comclk cycles if input is > 20 comclk cycles else output is same as input signal.2'd3 - filter output is 24 comclk cycles if input is > 24 comclk cycles else output is same as input signal.
 */
#define BCMI_TSCF_XGXS_DIG_RST_SEQ_TMR_CTL_GEN2r (0x0001d107 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DIG_RST_SEQ_TMR_CTL_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DIG_RST_SEQ_TMR_CTL_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DIG_RST_SEQ_TMR_CTL_GEN2r_s {
	uint32_t v[1];
	uint32_t dig_rst_seq_tmr_ctl_gen2[1];
	uint32_t _dig_rst_seq_tmr_ctl_gen2;
} BCMI_TSCF_XGXS_DIG_RST_SEQ_TMR_CTL_GEN2r_t;

#define BCMI_TSCF_XGXS_DIG_RST_SEQ_TMR_CTL_GEN2r_CLR(r) (r).dig_rst_seq_tmr_ctl_gen2[0] = 0
#define BCMI_TSCF_XGXS_DIG_RST_SEQ_TMR_CTL_GEN2r_SET(r,d) (r).dig_rst_seq_tmr_ctl_gen2[0] = d
#define BCMI_TSCF_XGXS_DIG_RST_SEQ_TMR_CTL_GEN2r_GET(r) (r).dig_rst_seq_tmr_ctl_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DIG_RST_SEQ_TMR_CTL_GEN2r_RST_SEQ_DIS_FLT_MODEf_GET(r) ((((r).dig_rst_seq_tmr_ctl_gen2[0]) >> 14) & 0x3)
#define BCMI_TSCF_XGXS_DIG_RST_SEQ_TMR_CTL_GEN2r_RST_SEQ_DIS_FLT_MODEf_SET(r,f) (r).dig_rst_seq_tmr_ctl_gen2[0]=(((r).dig_rst_seq_tmr_ctl_gen2[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_TSCF_XGXS_DIG_RST_SEQ_TMR_CTL_GEN2r_PWRDN_SEQ_TIMERf_GET(r) ((((r).dig_rst_seq_tmr_ctl_gen2[0]) >> 8) & 0x7)
#define BCMI_TSCF_XGXS_DIG_RST_SEQ_TMR_CTL_GEN2r_PWRDN_SEQ_TIMERf_SET(r,f) (r).dig_rst_seq_tmr_ctl_gen2[0]=(((r).dig_rst_seq_tmr_ctl_gen2[0] & ~((uint32_t)0x7 << 8)) | ((((uint32_t)f) & 0x7) << 8)) | (7 << (16 + 8))
#define BCMI_TSCF_XGXS_DIG_RST_SEQ_TMR_CTL_GEN2r_RST_SEQ_TIMERf_GET(r) (((r).dig_rst_seq_tmr_ctl_gen2[0]) & 0x7)
#define BCMI_TSCF_XGXS_DIG_RST_SEQ_TMR_CTL_GEN2r_RST_SEQ_TIMERf_SET(r,f) (r).dig_rst_seq_tmr_ctl_gen2[0]=(((r).dig_rst_seq_tmr_ctl_gen2[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access DIG_RST_SEQ_TMR_CTL_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DIG_RST_SEQ_TMR_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DIG_RST_SEQ_TMR_CTL_GEN2r,(_r._dig_rst_seq_tmr_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITE_DIG_RST_SEQ_TMR_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_RST_SEQ_TMR_CTL_GEN2r,(_r._dig_rst_seq_tmr_ctl_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DIG_RST_SEQ_TMR_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_RST_SEQ_TMR_CTL_GEN2r,(_r._dig_rst_seq_tmr_ctl_gen2))
#define BCMI_TSCF_XGXS_READLN_DIG_RST_SEQ_TMR_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DIG_RST_SEQ_TMR_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_rst_seq_tmr_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DIG_RST_SEQ_TMR_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_RST_SEQ_TMR_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_rst_seq_tmr_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DIG_RST_SEQ_TMR_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_RST_SEQ_TMR_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dig_rst_seq_tmr_ctl_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DIG_RST_SEQ_TMR_CTL_GEN2r BCMI_TSCF_XGXS_DIG_RST_SEQ_TMR_CTL_GEN2r
#define DIG_RST_SEQ_TMR_CTL_GEN2r_SIZE BCMI_TSCF_XGXS_DIG_RST_SEQ_TMR_CTL_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DIG_RST_SEQ_TMR_CTL_GEN2r_t DIG_RST_SEQ_TMR_CTL_GEN2r_t;
#define DIG_RST_SEQ_TMR_CTL_GEN2r_CLR BCMI_TSCF_XGXS_DIG_RST_SEQ_TMR_CTL_GEN2r_CLR
#define DIG_RST_SEQ_TMR_CTL_GEN2r_SET BCMI_TSCF_XGXS_DIG_RST_SEQ_TMR_CTL_GEN2r_SET
#define DIG_RST_SEQ_TMR_CTL_GEN2r_GET BCMI_TSCF_XGXS_DIG_RST_SEQ_TMR_CTL_GEN2r_GET
#define DIG_RST_SEQ_TMR_CTL_GEN2r_RST_SEQ_DIS_FLT_MODEf_GET BCMI_TSCF_XGXS_DIG_RST_SEQ_TMR_CTL_GEN2r_RST_SEQ_DIS_FLT_MODEf_GET
#define DIG_RST_SEQ_TMR_CTL_GEN2r_RST_SEQ_DIS_FLT_MODEf_SET BCMI_TSCF_XGXS_DIG_RST_SEQ_TMR_CTL_GEN2r_RST_SEQ_DIS_FLT_MODEf_SET
#define DIG_RST_SEQ_TMR_CTL_GEN2r_PWRDN_SEQ_TIMERf_GET BCMI_TSCF_XGXS_DIG_RST_SEQ_TMR_CTL_GEN2r_PWRDN_SEQ_TIMERf_GET
#define DIG_RST_SEQ_TMR_CTL_GEN2r_PWRDN_SEQ_TIMERf_SET BCMI_TSCF_XGXS_DIG_RST_SEQ_TMR_CTL_GEN2r_PWRDN_SEQ_TIMERf_SET
#define DIG_RST_SEQ_TMR_CTL_GEN2r_RST_SEQ_TIMERf_GET BCMI_TSCF_XGXS_DIG_RST_SEQ_TMR_CTL_GEN2r_RST_SEQ_TIMERf_GET
#define DIG_RST_SEQ_TMR_CTL_GEN2r_RST_SEQ_TIMERf_SET BCMI_TSCF_XGXS_DIG_RST_SEQ_TMR_CTL_GEN2r_RST_SEQ_TIMERf_SET
#define READ_DIG_RST_SEQ_TMR_CTL_GEN2r BCMI_TSCF_XGXS_READ_DIG_RST_SEQ_TMR_CTL_GEN2r
#define WRITE_DIG_RST_SEQ_TMR_CTL_GEN2r BCMI_TSCF_XGXS_WRITE_DIG_RST_SEQ_TMR_CTL_GEN2r
#define MODIFY_DIG_RST_SEQ_TMR_CTL_GEN2r BCMI_TSCF_XGXS_MODIFY_DIG_RST_SEQ_TMR_CTL_GEN2r
#define READLN_DIG_RST_SEQ_TMR_CTL_GEN2r BCMI_TSCF_XGXS_READLN_DIG_RST_SEQ_TMR_CTL_GEN2r
#define WRITELN_DIG_RST_SEQ_TMR_CTL_GEN2r BCMI_TSCF_XGXS_WRITELN_DIG_RST_SEQ_TMR_CTL_GEN2r
#define WRITEALL_DIG_RST_SEQ_TMR_CTL_GEN2r BCMI_TSCF_XGXS_WRITEALL_DIG_RST_SEQ_TMR_CTL_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DIG_RST_SEQ_TMR_CTL_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DIG_CORE_DP_RST_ST_STS_GEN2
 * BLOCKS:   DIG_COM
 * REGADDR:  0xd108
 * DEVAD:    1
 * DESC:     CORE_DP_RESET_STATE_STATUS
 * RESETVAL: 0x7 (7)
 * ACCESS:   R/O
 * FIELDS:
 *     CORE_DP_RESET_STATE Bit 2: core_dp_reset_active   : Set to 1'b1 whenenver core_dp_reset is currently requested through any register or pin controls.Bit 1: core_dp_reset_occurred : Set to 1'b1 whenenver core_dp_reset is currently requested through any register or pin controls and is latched high.Bit 0: core_dp_reset_held     : Set to 1'b1 whenenver core_dp_reset is internally held. Cleared to 1'b0, only if core_dp_reset_state==001 and uc_ack_core_cfg_done == 1.
 *     LANE_RESET_RELEASED_INDEX Index of the lane number of the first lane in lane_reset_released state.
 *     LANE_RESET_RELEASED indicates if a lane is currently at {lane_dp_reset_active, lane_dp_reset_occurred} = 01.
 */
#define BCMI_TSCF_XGXS_DIG_CORE_DP_RST_ST_STS_GEN2r (0x0001d108 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DIG_CORE_DP_RST_ST_STS_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DIG_CORE_DP_RST_ST_STS_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DIG_CORE_DP_RST_ST_STS_GEN2r_s {
	uint32_t v[1];
	uint32_t dig_core_dp_rst_st_sts_gen2[1];
	uint32_t _dig_core_dp_rst_st_sts_gen2;
} BCMI_TSCF_XGXS_DIG_CORE_DP_RST_ST_STS_GEN2r_t;

#define BCMI_TSCF_XGXS_DIG_CORE_DP_RST_ST_STS_GEN2r_CLR(r) (r).dig_core_dp_rst_st_sts_gen2[0] = 0
#define BCMI_TSCF_XGXS_DIG_CORE_DP_RST_ST_STS_GEN2r_SET(r,d) (r).dig_core_dp_rst_st_sts_gen2[0] = d
#define BCMI_TSCF_XGXS_DIG_CORE_DP_RST_ST_STS_GEN2r_GET(r) (r).dig_core_dp_rst_st_sts_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DIG_CORE_DP_RST_ST_STS_GEN2r_LANE_RESET_RELEASEDf_GET(r) ((((r).dig_core_dp_rst_st_sts_gen2[0]) >> 14) & 0x1)
#define BCMI_TSCF_XGXS_DIG_CORE_DP_RST_ST_STS_GEN2r_LANE_RESET_RELEASEDf_SET(r,f) (r).dig_core_dp_rst_st_sts_gen2[0]=(((r).dig_core_dp_rst_st_sts_gen2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_XGXS_DIG_CORE_DP_RST_ST_STS_GEN2r_LANE_RESET_RELEASED_INDEXf_GET(r) ((((r).dig_core_dp_rst_st_sts_gen2[0]) >> 8) & 0x1f)
#define BCMI_TSCF_XGXS_DIG_CORE_DP_RST_ST_STS_GEN2r_LANE_RESET_RELEASED_INDEXf_SET(r,f) (r).dig_core_dp_rst_st_sts_gen2[0]=(((r).dig_core_dp_rst_st_sts_gen2[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8)) | (31 << (16 + 8))
#define BCMI_TSCF_XGXS_DIG_CORE_DP_RST_ST_STS_GEN2r_CORE_DP_RESET_STATEf_GET(r) (((r).dig_core_dp_rst_st_sts_gen2[0]) & 0x7)
#define BCMI_TSCF_XGXS_DIG_CORE_DP_RST_ST_STS_GEN2r_CORE_DP_RESET_STATEf_SET(r,f) (r).dig_core_dp_rst_st_sts_gen2[0]=(((r).dig_core_dp_rst_st_sts_gen2[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access DIG_CORE_DP_RST_ST_STS_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DIG_CORE_DP_RST_ST_STS_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DIG_CORE_DP_RST_ST_STS_GEN2r,(_r._dig_core_dp_rst_st_sts_gen2))
#define BCMI_TSCF_XGXS_WRITE_DIG_CORE_DP_RST_ST_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_CORE_DP_RST_ST_STS_GEN2r,(_r._dig_core_dp_rst_st_sts_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DIG_CORE_DP_RST_ST_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_CORE_DP_RST_ST_STS_GEN2r,(_r._dig_core_dp_rst_st_sts_gen2))
#define BCMI_TSCF_XGXS_READLN_DIG_CORE_DP_RST_ST_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DIG_CORE_DP_RST_ST_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_core_dp_rst_st_sts_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DIG_CORE_DP_RST_ST_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_CORE_DP_RST_ST_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_core_dp_rst_st_sts_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DIG_CORE_DP_RST_ST_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_CORE_DP_RST_ST_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dig_core_dp_rst_st_sts_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DIG_CORE_DP_RST_ST_STS_GEN2r BCMI_TSCF_XGXS_DIG_CORE_DP_RST_ST_STS_GEN2r
#define DIG_CORE_DP_RST_ST_STS_GEN2r_SIZE BCMI_TSCF_XGXS_DIG_CORE_DP_RST_ST_STS_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DIG_CORE_DP_RST_ST_STS_GEN2r_t DIG_CORE_DP_RST_ST_STS_GEN2r_t;
#define DIG_CORE_DP_RST_ST_STS_GEN2r_CLR BCMI_TSCF_XGXS_DIG_CORE_DP_RST_ST_STS_GEN2r_CLR
#define DIG_CORE_DP_RST_ST_STS_GEN2r_SET BCMI_TSCF_XGXS_DIG_CORE_DP_RST_ST_STS_GEN2r_SET
#define DIG_CORE_DP_RST_ST_STS_GEN2r_GET BCMI_TSCF_XGXS_DIG_CORE_DP_RST_ST_STS_GEN2r_GET
#define DIG_CORE_DP_RST_ST_STS_GEN2r_LANE_RESET_RELEASEDf_GET BCMI_TSCF_XGXS_DIG_CORE_DP_RST_ST_STS_GEN2r_LANE_RESET_RELEASEDf_GET
#define DIG_CORE_DP_RST_ST_STS_GEN2r_LANE_RESET_RELEASEDf_SET BCMI_TSCF_XGXS_DIG_CORE_DP_RST_ST_STS_GEN2r_LANE_RESET_RELEASEDf_SET
#define DIG_CORE_DP_RST_ST_STS_GEN2r_LANE_RESET_RELEASED_INDEXf_GET BCMI_TSCF_XGXS_DIG_CORE_DP_RST_ST_STS_GEN2r_LANE_RESET_RELEASED_INDEXf_GET
#define DIG_CORE_DP_RST_ST_STS_GEN2r_LANE_RESET_RELEASED_INDEXf_SET BCMI_TSCF_XGXS_DIG_CORE_DP_RST_ST_STS_GEN2r_LANE_RESET_RELEASED_INDEXf_SET
#define DIG_CORE_DP_RST_ST_STS_GEN2r_CORE_DP_RESET_STATEf_GET BCMI_TSCF_XGXS_DIG_CORE_DP_RST_ST_STS_GEN2r_CORE_DP_RESET_STATEf_GET
#define DIG_CORE_DP_RST_ST_STS_GEN2r_CORE_DP_RESET_STATEf_SET BCMI_TSCF_XGXS_DIG_CORE_DP_RST_ST_STS_GEN2r_CORE_DP_RESET_STATEf_SET
#define READ_DIG_CORE_DP_RST_ST_STS_GEN2r BCMI_TSCF_XGXS_READ_DIG_CORE_DP_RST_ST_STS_GEN2r
#define WRITE_DIG_CORE_DP_RST_ST_STS_GEN2r BCMI_TSCF_XGXS_WRITE_DIG_CORE_DP_RST_ST_STS_GEN2r
#define MODIFY_DIG_CORE_DP_RST_ST_STS_GEN2r BCMI_TSCF_XGXS_MODIFY_DIG_CORE_DP_RST_ST_STS_GEN2r
#define READLN_DIG_CORE_DP_RST_ST_STS_GEN2r BCMI_TSCF_XGXS_READLN_DIG_CORE_DP_RST_ST_STS_GEN2r
#define WRITELN_DIG_CORE_DP_RST_ST_STS_GEN2r BCMI_TSCF_XGXS_WRITELN_DIG_CORE_DP_RST_ST_STS_GEN2r
#define WRITEALL_DIG_CORE_DP_RST_ST_STS_GEN2r BCMI_TSCF_XGXS_WRITEALL_DIG_CORE_DP_RST_ST_STS_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DIG_CORE_DP_RST_ST_STS_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DIG_PMD_CORE_MODE_STS_GEN2
 * BLOCKS:   DIG_COM
 * REGADDR:  0xd109
 * DEVAD:    1
 * DESC:     PMD_CORE_MODE_STATUS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     PMD_CORE_MODE    This indicates the status of the core input pin pmd_core_mode.This is driven from PCS and used for communication between PCS and PMD Micro code.
 */
#define BCMI_TSCF_XGXS_DIG_PMD_CORE_MODE_STS_GEN2r (0x0001d109 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DIG_PMD_CORE_MODE_STS_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DIG_PMD_CORE_MODE_STS_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DIG_PMD_CORE_MODE_STS_GEN2r_s {
	uint32_t v[1];
	uint32_t dig_pmd_core_mode_sts_gen2[1];
	uint32_t _dig_pmd_core_mode_sts_gen2;
} BCMI_TSCF_XGXS_DIG_PMD_CORE_MODE_STS_GEN2r_t;

#define BCMI_TSCF_XGXS_DIG_PMD_CORE_MODE_STS_GEN2r_CLR(r) (r).dig_pmd_core_mode_sts_gen2[0] = 0
#define BCMI_TSCF_XGXS_DIG_PMD_CORE_MODE_STS_GEN2r_SET(r,d) (r).dig_pmd_core_mode_sts_gen2[0] = d
#define BCMI_TSCF_XGXS_DIG_PMD_CORE_MODE_STS_GEN2r_GET(r) (r).dig_pmd_core_mode_sts_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DIG_PMD_CORE_MODE_STS_GEN2r_PMD_CORE_MODEf_GET(r) (((r).dig_pmd_core_mode_sts_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_DIG_PMD_CORE_MODE_STS_GEN2r_PMD_CORE_MODEf_SET(r,f) (r).dig_pmd_core_mode_sts_gen2[0]=(((r).dig_pmd_core_mode_sts_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access DIG_PMD_CORE_MODE_STS_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DIG_PMD_CORE_MODE_STS_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DIG_PMD_CORE_MODE_STS_GEN2r,(_r._dig_pmd_core_mode_sts_gen2))
#define BCMI_TSCF_XGXS_WRITE_DIG_PMD_CORE_MODE_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_PMD_CORE_MODE_STS_GEN2r,(_r._dig_pmd_core_mode_sts_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DIG_PMD_CORE_MODE_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_PMD_CORE_MODE_STS_GEN2r,(_r._dig_pmd_core_mode_sts_gen2))
#define BCMI_TSCF_XGXS_READLN_DIG_PMD_CORE_MODE_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DIG_PMD_CORE_MODE_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_pmd_core_mode_sts_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DIG_PMD_CORE_MODE_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_PMD_CORE_MODE_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_pmd_core_mode_sts_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DIG_PMD_CORE_MODE_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_PMD_CORE_MODE_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dig_pmd_core_mode_sts_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DIG_PMD_CORE_MODE_STS_GEN2r BCMI_TSCF_XGXS_DIG_PMD_CORE_MODE_STS_GEN2r
#define DIG_PMD_CORE_MODE_STS_GEN2r_SIZE BCMI_TSCF_XGXS_DIG_PMD_CORE_MODE_STS_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DIG_PMD_CORE_MODE_STS_GEN2r_t DIG_PMD_CORE_MODE_STS_GEN2r_t;
#define DIG_PMD_CORE_MODE_STS_GEN2r_CLR BCMI_TSCF_XGXS_DIG_PMD_CORE_MODE_STS_GEN2r_CLR
#define DIG_PMD_CORE_MODE_STS_GEN2r_SET BCMI_TSCF_XGXS_DIG_PMD_CORE_MODE_STS_GEN2r_SET
#define DIG_PMD_CORE_MODE_STS_GEN2r_GET BCMI_TSCF_XGXS_DIG_PMD_CORE_MODE_STS_GEN2r_GET
#define DIG_PMD_CORE_MODE_STS_GEN2r_PMD_CORE_MODEf_GET BCMI_TSCF_XGXS_DIG_PMD_CORE_MODE_STS_GEN2r_PMD_CORE_MODEf_GET
#define DIG_PMD_CORE_MODE_STS_GEN2r_PMD_CORE_MODEf_SET BCMI_TSCF_XGXS_DIG_PMD_CORE_MODE_STS_GEN2r_PMD_CORE_MODEf_SET
#define READ_DIG_PMD_CORE_MODE_STS_GEN2r BCMI_TSCF_XGXS_READ_DIG_PMD_CORE_MODE_STS_GEN2r
#define WRITE_DIG_PMD_CORE_MODE_STS_GEN2r BCMI_TSCF_XGXS_WRITE_DIG_PMD_CORE_MODE_STS_GEN2r
#define MODIFY_DIG_PMD_CORE_MODE_STS_GEN2r BCMI_TSCF_XGXS_MODIFY_DIG_PMD_CORE_MODE_STS_GEN2r
#define READLN_DIG_PMD_CORE_MODE_STS_GEN2r BCMI_TSCF_XGXS_READLN_DIG_PMD_CORE_MODE_STS_GEN2r
#define WRITELN_DIG_PMD_CORE_MODE_STS_GEN2r BCMI_TSCF_XGXS_WRITELN_DIG_PMD_CORE_MODE_STS_GEN2r
#define WRITEALL_DIG_PMD_CORE_MODE_STS_GEN2r BCMI_TSCF_XGXS_WRITEALL_DIG_PMD_CORE_MODE_STS_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DIG_PMD_CORE_MODE_STS_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DIG_REVID1_GEN2
 * BLOCKS:   DIG_COM
 * REGADDR:  0xd10a
 * DEVAD:    1
 * DESC:     REVID1
 * RESETVAL: 0x403c (16444)
 * ACCESS:   R/O
 * FIELDS:
 *     REVID_EEE        EEE support present in core
 *     REVID_LLP        Ultra low latency path present in core
 *     REVID_PIR        PCS interface retiming flops present in core
 *     REVID_CL72       Clause 72 present in core
 *     REVID_MICRO      Microcontroller present in core
 *     REVID_MDIO       MDIO interface present in core
 *     REVID_MULTIPLICITY Number of lanes
 */
#define BCMI_TSCF_XGXS_DIG_REVID1_GEN2r (0x0001d10a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DIG_REVID1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DIG_REVID1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DIG_REVID1_GEN2r_s {
	uint32_t v[1];
	uint32_t dig_revid1_gen2[1];
	uint32_t _dig_revid1_gen2;
} BCMI_TSCF_XGXS_DIG_REVID1_GEN2r_t;

#define BCMI_TSCF_XGXS_DIG_REVID1_GEN2r_CLR(r) (r).dig_revid1_gen2[0] = 0
#define BCMI_TSCF_XGXS_DIG_REVID1_GEN2r_SET(r,d) (r).dig_revid1_gen2[0] = d
#define BCMI_TSCF_XGXS_DIG_REVID1_GEN2r_GET(r) (r).dig_revid1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DIG_REVID1_GEN2r_REVID_MULTIPLICITYf_GET(r) ((((r).dig_revid1_gen2[0]) >> 12) & 0xf)
#define BCMI_TSCF_XGXS_DIG_REVID1_GEN2r_REVID_MULTIPLICITYf_SET(r,f) (r).dig_revid1_gen2[0]=(((r).dig_revid1_gen2[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_TSCF_XGXS_DIG_REVID1_GEN2r_REVID_MDIOf_GET(r) ((((r).dig_revid1_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_DIG_REVID1_GEN2r_REVID_MDIOf_SET(r,f) (r).dig_revid1_gen2[0]=(((r).dig_revid1_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_DIG_REVID1_GEN2r_REVID_MICROf_GET(r) ((((r).dig_revid1_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_DIG_REVID1_GEN2r_REVID_MICROf_SET(r,f) (r).dig_revid1_gen2[0]=(((r).dig_revid1_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_DIG_REVID1_GEN2r_REVID_CL72f_GET(r) ((((r).dig_revid1_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_DIG_REVID1_GEN2r_REVID_CL72f_SET(r,f) (r).dig_revid1_gen2[0]=(((r).dig_revid1_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_DIG_REVID1_GEN2r_REVID_PIRf_GET(r) ((((r).dig_revid1_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_DIG_REVID1_GEN2r_REVID_PIRf_SET(r,f) (r).dig_revid1_gen2[0]=(((r).dig_revid1_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_DIG_REVID1_GEN2r_REVID_LLPf_GET(r) ((((r).dig_revid1_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_DIG_REVID1_GEN2r_REVID_LLPf_SET(r,f) (r).dig_revid1_gen2[0]=(((r).dig_revid1_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_DIG_REVID1_GEN2r_REVID_EEEf_GET(r) (((r).dig_revid1_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_DIG_REVID1_GEN2r_REVID_EEEf_SET(r,f) (r).dig_revid1_gen2[0]=(((r).dig_revid1_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access DIG_REVID1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DIG_REVID1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DIG_REVID1_GEN2r,(_r._dig_revid1_gen2))
#define BCMI_TSCF_XGXS_WRITE_DIG_REVID1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_REVID1_GEN2r,(_r._dig_revid1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DIG_REVID1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_REVID1_GEN2r,(_r._dig_revid1_gen2))
#define BCMI_TSCF_XGXS_READLN_DIG_REVID1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DIG_REVID1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_revid1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DIG_REVID1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_REVID1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_revid1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DIG_REVID1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_REVID1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dig_revid1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DIG_REVID1_GEN2r BCMI_TSCF_XGXS_DIG_REVID1_GEN2r
#define DIG_REVID1_GEN2r_SIZE BCMI_TSCF_XGXS_DIG_REVID1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DIG_REVID1_GEN2r_t DIG_REVID1_GEN2r_t;
#define DIG_REVID1_GEN2r_CLR BCMI_TSCF_XGXS_DIG_REVID1_GEN2r_CLR
#define DIG_REVID1_GEN2r_SET BCMI_TSCF_XGXS_DIG_REVID1_GEN2r_SET
#define DIG_REVID1_GEN2r_GET BCMI_TSCF_XGXS_DIG_REVID1_GEN2r_GET
#define DIG_REVID1_GEN2r_REVID_MULTIPLICITYf_GET BCMI_TSCF_XGXS_DIG_REVID1_GEN2r_REVID_MULTIPLICITYf_GET
#define DIG_REVID1_GEN2r_REVID_MULTIPLICITYf_SET BCMI_TSCF_XGXS_DIG_REVID1_GEN2r_REVID_MULTIPLICITYf_SET
#define DIG_REVID1_GEN2r_REVID_MDIOf_GET BCMI_TSCF_XGXS_DIG_REVID1_GEN2r_REVID_MDIOf_GET
#define DIG_REVID1_GEN2r_REVID_MDIOf_SET BCMI_TSCF_XGXS_DIG_REVID1_GEN2r_REVID_MDIOf_SET
#define DIG_REVID1_GEN2r_REVID_MICROf_GET BCMI_TSCF_XGXS_DIG_REVID1_GEN2r_REVID_MICROf_GET
#define DIG_REVID1_GEN2r_REVID_MICROf_SET BCMI_TSCF_XGXS_DIG_REVID1_GEN2r_REVID_MICROf_SET
#define DIG_REVID1_GEN2r_REVID_CL72f_GET BCMI_TSCF_XGXS_DIG_REVID1_GEN2r_REVID_CL72f_GET
#define DIG_REVID1_GEN2r_REVID_CL72f_SET BCMI_TSCF_XGXS_DIG_REVID1_GEN2r_REVID_CL72f_SET
#define DIG_REVID1_GEN2r_REVID_PIRf_GET BCMI_TSCF_XGXS_DIG_REVID1_GEN2r_REVID_PIRf_GET
#define DIG_REVID1_GEN2r_REVID_PIRf_SET BCMI_TSCF_XGXS_DIG_REVID1_GEN2r_REVID_PIRf_SET
#define DIG_REVID1_GEN2r_REVID_LLPf_GET BCMI_TSCF_XGXS_DIG_REVID1_GEN2r_REVID_LLPf_GET
#define DIG_REVID1_GEN2r_REVID_LLPf_SET BCMI_TSCF_XGXS_DIG_REVID1_GEN2r_REVID_LLPf_SET
#define DIG_REVID1_GEN2r_REVID_EEEf_GET BCMI_TSCF_XGXS_DIG_REVID1_GEN2r_REVID_EEEf_GET
#define DIG_REVID1_GEN2r_REVID_EEEf_SET BCMI_TSCF_XGXS_DIG_REVID1_GEN2r_REVID_EEEf_SET
#define READ_DIG_REVID1_GEN2r BCMI_TSCF_XGXS_READ_DIG_REVID1_GEN2r
#define WRITE_DIG_REVID1_GEN2r BCMI_TSCF_XGXS_WRITE_DIG_REVID1_GEN2r
#define MODIFY_DIG_REVID1_GEN2r BCMI_TSCF_XGXS_MODIFY_DIG_REVID1_GEN2r
#define READLN_DIG_REVID1_GEN2r BCMI_TSCF_XGXS_READLN_DIG_REVID1_GEN2r
#define WRITELN_DIG_REVID1_GEN2r BCMI_TSCF_XGXS_WRITELN_DIG_REVID1_GEN2r
#define WRITEALL_DIG_REVID1_GEN2r BCMI_TSCF_XGXS_WRITEALL_DIG_REVID1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DIG_REVID1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DIG_TX_LN_MAP_0_1_2_GEN2
 * BLOCKS:   DIG_COM
 * REGADDR:  0xd10b
 * DEVAD:    1
 * DESC:     TX_LANE_MAP_0_1_2
 * RESETVAL: 0x820 (2080)
 * ACCESS:   R/W
 * FIELDS:
 *     TX_LANE_MAP_0    Physical PMD pin index indicated by value of this register will be mapped to the physical TX AFE Lane Number 0
 *     TX_LANE_MAP_1    Physical PMD pin index indicated by value of this register will be mapped to the physical TX AFE Lane Number 1
 *     TX_LANE_MAP_2    Physical PMD pin index indicated by value of this register will be mapped to the physical TX AFE Lane Number 2
 */
#define BCMI_TSCF_XGXS_DIG_TX_LN_MAP_0_1_2_GEN2r (0x0001d10b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DIG_TX_LN_MAP_0_1_2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DIG_TX_LN_MAP_0_1_2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DIG_TX_LN_MAP_0_1_2_GEN2r_s {
	uint32_t v[1];
	uint32_t dig_tx_ln_map_0_1_2_gen2[1];
	uint32_t _dig_tx_ln_map_0_1_2_gen2;
} BCMI_TSCF_XGXS_DIG_TX_LN_MAP_0_1_2_GEN2r_t;

#define BCMI_TSCF_XGXS_DIG_TX_LN_MAP_0_1_2_GEN2r_CLR(r) (r).dig_tx_ln_map_0_1_2_gen2[0] = 0
#define BCMI_TSCF_XGXS_DIG_TX_LN_MAP_0_1_2_GEN2r_SET(r,d) (r).dig_tx_ln_map_0_1_2_gen2[0] = d
#define BCMI_TSCF_XGXS_DIG_TX_LN_MAP_0_1_2_GEN2r_GET(r) (r).dig_tx_ln_map_0_1_2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DIG_TX_LN_MAP_0_1_2_GEN2r_TX_LANE_MAP_2f_GET(r) ((((r).dig_tx_ln_map_0_1_2_gen2[0]) >> 10) & 0x1f)
#define BCMI_TSCF_XGXS_DIG_TX_LN_MAP_0_1_2_GEN2r_TX_LANE_MAP_2f_SET(r,f) (r).dig_tx_ln_map_0_1_2_gen2[0]=(((r).dig_tx_ln_map_0_1_2_gen2[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10)) | (31 << (16 + 10))
#define BCMI_TSCF_XGXS_DIG_TX_LN_MAP_0_1_2_GEN2r_TX_LANE_MAP_1f_GET(r) ((((r).dig_tx_ln_map_0_1_2_gen2[0]) >> 5) & 0x1f)
#define BCMI_TSCF_XGXS_DIG_TX_LN_MAP_0_1_2_GEN2r_TX_LANE_MAP_1f_SET(r,f) (r).dig_tx_ln_map_0_1_2_gen2[0]=(((r).dig_tx_ln_map_0_1_2_gen2[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5)) | (31 << (16 + 5))
#define BCMI_TSCF_XGXS_DIG_TX_LN_MAP_0_1_2_GEN2r_TX_LANE_MAP_0f_GET(r) (((r).dig_tx_ln_map_0_1_2_gen2[0]) & 0x1f)
#define BCMI_TSCF_XGXS_DIG_TX_LN_MAP_0_1_2_GEN2r_TX_LANE_MAP_0f_SET(r,f) (r).dig_tx_ln_map_0_1_2_gen2[0]=(((r).dig_tx_ln_map_0_1_2_gen2[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access DIG_TX_LN_MAP_0_1_2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DIG_TX_LN_MAP_0_1_2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DIG_TX_LN_MAP_0_1_2_GEN2r,(_r._dig_tx_ln_map_0_1_2_gen2))
#define BCMI_TSCF_XGXS_WRITE_DIG_TX_LN_MAP_0_1_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_TX_LN_MAP_0_1_2_GEN2r,(_r._dig_tx_ln_map_0_1_2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DIG_TX_LN_MAP_0_1_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_TX_LN_MAP_0_1_2_GEN2r,(_r._dig_tx_ln_map_0_1_2_gen2))
#define BCMI_TSCF_XGXS_READLN_DIG_TX_LN_MAP_0_1_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DIG_TX_LN_MAP_0_1_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_tx_ln_map_0_1_2_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DIG_TX_LN_MAP_0_1_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_TX_LN_MAP_0_1_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_tx_ln_map_0_1_2_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DIG_TX_LN_MAP_0_1_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_TX_LN_MAP_0_1_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dig_tx_ln_map_0_1_2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DIG_TX_LN_MAP_0_1_2_GEN2r BCMI_TSCF_XGXS_DIG_TX_LN_MAP_0_1_2_GEN2r
#define DIG_TX_LN_MAP_0_1_2_GEN2r_SIZE BCMI_TSCF_XGXS_DIG_TX_LN_MAP_0_1_2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DIG_TX_LN_MAP_0_1_2_GEN2r_t DIG_TX_LN_MAP_0_1_2_GEN2r_t;
#define DIG_TX_LN_MAP_0_1_2_GEN2r_CLR BCMI_TSCF_XGXS_DIG_TX_LN_MAP_0_1_2_GEN2r_CLR
#define DIG_TX_LN_MAP_0_1_2_GEN2r_SET BCMI_TSCF_XGXS_DIG_TX_LN_MAP_0_1_2_GEN2r_SET
#define DIG_TX_LN_MAP_0_1_2_GEN2r_GET BCMI_TSCF_XGXS_DIG_TX_LN_MAP_0_1_2_GEN2r_GET
#define DIG_TX_LN_MAP_0_1_2_GEN2r_TX_LANE_MAP_2f_GET BCMI_TSCF_XGXS_DIG_TX_LN_MAP_0_1_2_GEN2r_TX_LANE_MAP_2f_GET
#define DIG_TX_LN_MAP_0_1_2_GEN2r_TX_LANE_MAP_2f_SET BCMI_TSCF_XGXS_DIG_TX_LN_MAP_0_1_2_GEN2r_TX_LANE_MAP_2f_SET
#define DIG_TX_LN_MAP_0_1_2_GEN2r_TX_LANE_MAP_1f_GET BCMI_TSCF_XGXS_DIG_TX_LN_MAP_0_1_2_GEN2r_TX_LANE_MAP_1f_GET
#define DIG_TX_LN_MAP_0_1_2_GEN2r_TX_LANE_MAP_1f_SET BCMI_TSCF_XGXS_DIG_TX_LN_MAP_0_1_2_GEN2r_TX_LANE_MAP_1f_SET
#define DIG_TX_LN_MAP_0_1_2_GEN2r_TX_LANE_MAP_0f_GET BCMI_TSCF_XGXS_DIG_TX_LN_MAP_0_1_2_GEN2r_TX_LANE_MAP_0f_GET
#define DIG_TX_LN_MAP_0_1_2_GEN2r_TX_LANE_MAP_0f_SET BCMI_TSCF_XGXS_DIG_TX_LN_MAP_0_1_2_GEN2r_TX_LANE_MAP_0f_SET
#define READ_DIG_TX_LN_MAP_0_1_2_GEN2r BCMI_TSCF_XGXS_READ_DIG_TX_LN_MAP_0_1_2_GEN2r
#define WRITE_DIG_TX_LN_MAP_0_1_2_GEN2r BCMI_TSCF_XGXS_WRITE_DIG_TX_LN_MAP_0_1_2_GEN2r
#define MODIFY_DIG_TX_LN_MAP_0_1_2_GEN2r BCMI_TSCF_XGXS_MODIFY_DIG_TX_LN_MAP_0_1_2_GEN2r
#define READLN_DIG_TX_LN_MAP_0_1_2_GEN2r BCMI_TSCF_XGXS_READLN_DIG_TX_LN_MAP_0_1_2_GEN2r
#define WRITELN_DIG_TX_LN_MAP_0_1_2_GEN2r BCMI_TSCF_XGXS_WRITELN_DIG_TX_LN_MAP_0_1_2_GEN2r
#define WRITEALL_DIG_TX_LN_MAP_0_1_2_GEN2r BCMI_TSCF_XGXS_WRITEALL_DIG_TX_LN_MAP_0_1_2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DIG_TX_LN_MAP_0_1_2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2
 * BLOCKS:   DIG_COM
 * REGADDR:  0xd10c
 * DEVAD:    1
 * DESC:     TX_LANE_MAP_3_N_LANE_ADDR_0_1
 * RESETVAL: 0x403 (1027)
 * ACCESS:   R/W
 * FIELDS:
 *     TX_LANE_MAP_3    Physical PMD pin index indicated by value of this register will be mapped to the physical TX AFE Lane Number 3
 *     LANE_ADDR_0      Determines the logical address associated with the PMD lane with physical index  "_0" at the PCS interface.lane_addr_0 is the logical address of the lane with pins at the PCS interface labeled "_0".
 *     LANE_ADDR_1      Determines the logical address associated with the PMD lane with physical index  "_1" at the PCS interface.lane_addr_1 is the logical address of the lane with pins at the PCS interface labeled "_1".
 */
#define BCMI_TSCF_XGXS_DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r (0x0001d10c | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r_s {
	uint32_t v[1];
	uint32_t dig_tx_ln_map_3_n_ln_addr_0_1_gen2[1];
	uint32_t _dig_tx_ln_map_3_n_ln_addr_0_1_gen2;
} BCMI_TSCF_XGXS_DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r_t;

#define BCMI_TSCF_XGXS_DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r_CLR(r) (r).dig_tx_ln_map_3_n_ln_addr_0_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r_SET(r,d) (r).dig_tx_ln_map_3_n_ln_addr_0_1_gen2[0] = d
#define BCMI_TSCF_XGXS_DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r_GET(r) (r).dig_tx_ln_map_3_n_ln_addr_0_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r_LANE_ADDR_1f_GET(r) ((((r).dig_tx_ln_map_3_n_ln_addr_0_1_gen2[0]) >> 10) & 0x1f)
#define BCMI_TSCF_XGXS_DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r_LANE_ADDR_1f_SET(r,f) (r).dig_tx_ln_map_3_n_ln_addr_0_1_gen2[0]=(((r).dig_tx_ln_map_3_n_ln_addr_0_1_gen2[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10)) | (31 << (16 + 10))
#define BCMI_TSCF_XGXS_DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r_LANE_ADDR_0f_GET(r) ((((r).dig_tx_ln_map_3_n_ln_addr_0_1_gen2[0]) >> 5) & 0x1f)
#define BCMI_TSCF_XGXS_DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r_LANE_ADDR_0f_SET(r,f) (r).dig_tx_ln_map_3_n_ln_addr_0_1_gen2[0]=(((r).dig_tx_ln_map_3_n_ln_addr_0_1_gen2[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5)) | (31 << (16 + 5))
#define BCMI_TSCF_XGXS_DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r_TX_LANE_MAP_3f_GET(r) (((r).dig_tx_ln_map_3_n_ln_addr_0_1_gen2[0]) & 0x1f)
#define BCMI_TSCF_XGXS_DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r_TX_LANE_MAP_3f_SET(r,f) (r).dig_tx_ln_map_3_n_ln_addr_0_1_gen2[0]=(((r).dig_tx_ln_map_3_n_ln_addr_0_1_gen2[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r,(_r._dig_tx_ln_map_3_n_ln_addr_0_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r,(_r._dig_tx_ln_map_3_n_ln_addr_0_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r,(_r._dig_tx_ln_map_3_n_ln_addr_0_1_gen2))
#define BCMI_TSCF_XGXS_READLN_DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_tx_ln_map_3_n_ln_addr_0_1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_tx_ln_map_3_n_ln_addr_0_1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dig_tx_ln_map_3_n_ln_addr_0_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r BCMI_TSCF_XGXS_DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r
#define DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r_SIZE BCMI_TSCF_XGXS_DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r_t DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r_t;
#define DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r_CLR BCMI_TSCF_XGXS_DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r_CLR
#define DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r_SET BCMI_TSCF_XGXS_DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r_SET
#define DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r_GET BCMI_TSCF_XGXS_DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r_GET
#define DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r_LANE_ADDR_1f_GET BCMI_TSCF_XGXS_DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r_LANE_ADDR_1f_GET
#define DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r_LANE_ADDR_1f_SET BCMI_TSCF_XGXS_DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r_LANE_ADDR_1f_SET
#define DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r_LANE_ADDR_0f_GET BCMI_TSCF_XGXS_DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r_LANE_ADDR_0f_GET
#define DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r_LANE_ADDR_0f_SET BCMI_TSCF_XGXS_DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r_LANE_ADDR_0f_SET
#define DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r_TX_LANE_MAP_3f_GET BCMI_TSCF_XGXS_DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r_TX_LANE_MAP_3f_GET
#define DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r_TX_LANE_MAP_3f_SET BCMI_TSCF_XGXS_DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r_TX_LANE_MAP_3f_SET
#define READ_DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r BCMI_TSCF_XGXS_READ_DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r
#define WRITE_DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r BCMI_TSCF_XGXS_WRITE_DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r
#define MODIFY_DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r BCMI_TSCF_XGXS_MODIFY_DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r
#define READLN_DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r BCMI_TSCF_XGXS_READLN_DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r
#define WRITELN_DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r BCMI_TSCF_XGXS_WRITELN_DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r
#define WRITEALL_DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r BCMI_TSCF_XGXS_WRITEALL_DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DIG_TX_LN_MAP_3_N_LN_ADDR_0_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DIG_LN_ADDR_2_3_GEN2
 * BLOCKS:   DIG_COM
 * REGADDR:  0xd10d
 * DEVAD:    1
 * DESC:     LANE_ADDR_2_3
 * RESETVAL: 0x302 (770)
 * ACCESS:   R/W
 * FIELDS:
 *     LANE_ADDR_2      Determines the logical address associated with the PMD lane with physical index  "_2" at the PCS interface.lane_addr_2 is the logical address of the lane with pins at the PCS interface labeled "_2".
 *     LANE_ADDR_3      Determines the logical address associated with the PMD lane with physical index  "_3" at the PCS interface.lane_addr_3 is the logical address of the lane with pins at the PCS interface labeled "_3".
 */
#define BCMI_TSCF_XGXS_DIG_LN_ADDR_2_3_GEN2r (0x0001d10d | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DIG_LN_ADDR_2_3_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DIG_LN_ADDR_2_3_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DIG_LN_ADDR_2_3_GEN2r_s {
	uint32_t v[1];
	uint32_t dig_ln_addr_2_3_gen2[1];
	uint32_t _dig_ln_addr_2_3_gen2;
} BCMI_TSCF_XGXS_DIG_LN_ADDR_2_3_GEN2r_t;

#define BCMI_TSCF_XGXS_DIG_LN_ADDR_2_3_GEN2r_CLR(r) (r).dig_ln_addr_2_3_gen2[0] = 0
#define BCMI_TSCF_XGXS_DIG_LN_ADDR_2_3_GEN2r_SET(r,d) (r).dig_ln_addr_2_3_gen2[0] = d
#define BCMI_TSCF_XGXS_DIG_LN_ADDR_2_3_GEN2r_GET(r) (r).dig_ln_addr_2_3_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DIG_LN_ADDR_2_3_GEN2r_LANE_ADDR_3f_GET(r) ((((r).dig_ln_addr_2_3_gen2[0]) >> 8) & 0x1f)
#define BCMI_TSCF_XGXS_DIG_LN_ADDR_2_3_GEN2r_LANE_ADDR_3f_SET(r,f) (r).dig_ln_addr_2_3_gen2[0]=(((r).dig_ln_addr_2_3_gen2[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8)) | (31 << (16 + 8))
#define BCMI_TSCF_XGXS_DIG_LN_ADDR_2_3_GEN2r_LANE_ADDR_2f_GET(r) (((r).dig_ln_addr_2_3_gen2[0]) & 0x1f)
#define BCMI_TSCF_XGXS_DIG_LN_ADDR_2_3_GEN2r_LANE_ADDR_2f_SET(r,f) (r).dig_ln_addr_2_3_gen2[0]=(((r).dig_ln_addr_2_3_gen2[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access DIG_LN_ADDR_2_3_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DIG_LN_ADDR_2_3_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DIG_LN_ADDR_2_3_GEN2r,(_r._dig_ln_addr_2_3_gen2))
#define BCMI_TSCF_XGXS_WRITE_DIG_LN_ADDR_2_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_LN_ADDR_2_3_GEN2r,(_r._dig_ln_addr_2_3_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DIG_LN_ADDR_2_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_LN_ADDR_2_3_GEN2r,(_r._dig_ln_addr_2_3_gen2))
#define BCMI_TSCF_XGXS_READLN_DIG_LN_ADDR_2_3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DIG_LN_ADDR_2_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_ln_addr_2_3_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DIG_LN_ADDR_2_3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_LN_ADDR_2_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_ln_addr_2_3_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DIG_LN_ADDR_2_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_LN_ADDR_2_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dig_ln_addr_2_3_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DIG_LN_ADDR_2_3_GEN2r BCMI_TSCF_XGXS_DIG_LN_ADDR_2_3_GEN2r
#define DIG_LN_ADDR_2_3_GEN2r_SIZE BCMI_TSCF_XGXS_DIG_LN_ADDR_2_3_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DIG_LN_ADDR_2_3_GEN2r_t DIG_LN_ADDR_2_3_GEN2r_t;
#define DIG_LN_ADDR_2_3_GEN2r_CLR BCMI_TSCF_XGXS_DIG_LN_ADDR_2_3_GEN2r_CLR
#define DIG_LN_ADDR_2_3_GEN2r_SET BCMI_TSCF_XGXS_DIG_LN_ADDR_2_3_GEN2r_SET
#define DIG_LN_ADDR_2_3_GEN2r_GET BCMI_TSCF_XGXS_DIG_LN_ADDR_2_3_GEN2r_GET
#define DIG_LN_ADDR_2_3_GEN2r_LANE_ADDR_3f_GET BCMI_TSCF_XGXS_DIG_LN_ADDR_2_3_GEN2r_LANE_ADDR_3f_GET
#define DIG_LN_ADDR_2_3_GEN2r_LANE_ADDR_3f_SET BCMI_TSCF_XGXS_DIG_LN_ADDR_2_3_GEN2r_LANE_ADDR_3f_SET
#define DIG_LN_ADDR_2_3_GEN2r_LANE_ADDR_2f_GET BCMI_TSCF_XGXS_DIG_LN_ADDR_2_3_GEN2r_LANE_ADDR_2f_GET
#define DIG_LN_ADDR_2_3_GEN2r_LANE_ADDR_2f_SET BCMI_TSCF_XGXS_DIG_LN_ADDR_2_3_GEN2r_LANE_ADDR_2f_SET
#define READ_DIG_LN_ADDR_2_3_GEN2r BCMI_TSCF_XGXS_READ_DIG_LN_ADDR_2_3_GEN2r
#define WRITE_DIG_LN_ADDR_2_3_GEN2r BCMI_TSCF_XGXS_WRITE_DIG_LN_ADDR_2_3_GEN2r
#define MODIFY_DIG_LN_ADDR_2_3_GEN2r BCMI_TSCF_XGXS_MODIFY_DIG_LN_ADDR_2_3_GEN2r
#define READLN_DIG_LN_ADDR_2_3_GEN2r BCMI_TSCF_XGXS_READLN_DIG_LN_ADDR_2_3_GEN2r
#define WRITELN_DIG_LN_ADDR_2_3_GEN2r BCMI_TSCF_XGXS_WRITELN_DIG_LN_ADDR_2_3_GEN2r
#define WRITEALL_DIG_LN_ADDR_2_3_GEN2r BCMI_TSCF_XGXS_WRITEALL_DIG_LN_ADDR_2_3_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DIG_LN_ADDR_2_3_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  DIG_REVID2_GEN2
 * BLOCKS:   DIG_COM
 * REGADDR:  0xd10e
 * DEVAD:    1
 * DESC:     REVID2
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     REVID2           Revision ID2 code
 */
#define BCMI_TSCF_XGXS_DIG_REVID2_GEN2r (0x0001d10e | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_DIG_REVID2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program DIG_REVID2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_DIG_REVID2_GEN2r_s {
	uint32_t v[1];
	uint32_t dig_revid2_gen2[1];
	uint32_t _dig_revid2_gen2;
} BCMI_TSCF_XGXS_DIG_REVID2_GEN2r_t;

#define BCMI_TSCF_XGXS_DIG_REVID2_GEN2r_CLR(r) (r).dig_revid2_gen2[0] = 0
#define BCMI_TSCF_XGXS_DIG_REVID2_GEN2r_SET(r,d) (r).dig_revid2_gen2[0] = d
#define BCMI_TSCF_XGXS_DIG_REVID2_GEN2r_GET(r) (r).dig_revid2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_DIG_REVID2_GEN2r_REVID2f_GET(r) (((r).dig_revid2_gen2[0]) & 0xf)
#define BCMI_TSCF_XGXS_DIG_REVID2_GEN2r_REVID2f_SET(r,f) (r).dig_revid2_gen2[0]=(((r).dig_revid2_gen2[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access DIG_REVID2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_DIG_REVID2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DIG_REVID2_GEN2r,(_r._dig_revid2_gen2))
#define BCMI_TSCF_XGXS_WRITE_DIG_REVID2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_REVID2_GEN2r,(_r._dig_revid2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_DIG_REVID2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_REVID2_GEN2r,(_r._dig_revid2_gen2))
#define BCMI_TSCF_XGXS_READLN_DIG_REVID2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_DIG_REVID2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_revid2_gen2))
#define BCMI_TSCF_XGXS_WRITELN_DIG_REVID2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_REVID2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_revid2_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_DIG_REVID2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_DIG_REVID2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dig_revid2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DIG_REVID2_GEN2r BCMI_TSCF_XGXS_DIG_REVID2_GEN2r
#define DIG_REVID2_GEN2r_SIZE BCMI_TSCF_XGXS_DIG_REVID2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_DIG_REVID2_GEN2r_t DIG_REVID2_GEN2r_t;
#define DIG_REVID2_GEN2r_CLR BCMI_TSCF_XGXS_DIG_REVID2_GEN2r_CLR
#define DIG_REVID2_GEN2r_SET BCMI_TSCF_XGXS_DIG_REVID2_GEN2r_SET
#define DIG_REVID2_GEN2r_GET BCMI_TSCF_XGXS_DIG_REVID2_GEN2r_GET
#define DIG_REVID2_GEN2r_REVID2f_GET BCMI_TSCF_XGXS_DIG_REVID2_GEN2r_REVID2f_GET
#define DIG_REVID2_GEN2r_REVID2f_SET BCMI_TSCF_XGXS_DIG_REVID2_GEN2r_REVID2f_SET
#define READ_DIG_REVID2_GEN2r BCMI_TSCF_XGXS_READ_DIG_REVID2_GEN2r
#define WRITE_DIG_REVID2_GEN2r BCMI_TSCF_XGXS_WRITE_DIG_REVID2_GEN2r
#define MODIFY_DIG_REVID2_GEN2r BCMI_TSCF_XGXS_MODIFY_DIG_REVID2_GEN2r
#define READLN_DIG_REVID2_GEN2r BCMI_TSCF_XGXS_READLN_DIG_REVID2_GEN2r
#define WRITELN_DIG_REVID2_GEN2r BCMI_TSCF_XGXS_WRITELN_DIG_REVID2_GEN2r
#define WRITEALL_DIG_REVID2_GEN2r BCMI_TSCF_XGXS_WRITEALL_DIG_REVID2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_DIG_REVID2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AMS_PLL_CTL_0_GEN2
 * BLOCKS:   AMS_COM
 * REGADDR:  0xd110
 * DEVAD:    1
 * DESC:     AMS PLL CONTROL_0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_PLL_SET_CLK4TSC program clk freq for TSC clk
 *     AMS_PLL_IMIN_ICLKINT see AMS
 *     AMS_PLL_IMAX_ICLKINT see AMS
 *     AMS_PLL_IMODE_ICLKINT Interpolator bias current control
 *     AMS_PLL_IMIN_ICLKODRV1 see AMS
 *     AMS_PLL_IMAX_ICLKODRV1 see AMS
 *     AMS_PLL_IMODE_ICLKODRV1 Current control for output CML
 *     AMS_PLL_IMIN_ICLKIDRV1 see AMS
 *     AMS_PLL_IMAX_ICLKIDRV1 see AMS
 *     AMS_PLL_IMODE_ICLKIDRV1 Current control for input CML
 *     AMS_PLL_CAL_OFF  Turns off ResCal, turns on cal_aux[3:0]
 *     AMS_PLL_CAL_AUX  see AMS
 */
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r (0x0001d110 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AMS_PLL_CTL_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_s {
	uint32_t v[1];
	uint32_t ams_pll_ctl_0_gen2[1];
	uint32_t _ams_pll_ctl_0_gen2;
} BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_t;

#define BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_CLR(r) (r).ams_pll_ctl_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_SET(r,d) (r).ams_pll_ctl_0_gen2[0] = d
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_GET(r) (r).ams_pll_ctl_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_AMS_PLL_CAL_AUXf_GET(r) ((((r).ams_pll_ctl_0_gen2[0]) >> 12) & 0xf)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_AMS_PLL_CAL_AUXf_SET(r,f) (r).ams_pll_ctl_0_gen2[0]=(((r).ams_pll_ctl_0_gen2[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_AMS_PLL_CAL_OFFf_GET(r) ((((r).ams_pll_ctl_0_gen2[0]) >> 11) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_AMS_PLL_CAL_OFFf_SET(r,f) (r).ams_pll_ctl_0_gen2[0]=(((r).ams_pll_ctl_0_gen2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMODE_ICLKIDRV1f_GET(r) ((((r).ams_pll_ctl_0_gen2[0]) >> 10) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMODE_ICLKIDRV1f_SET(r,f) (r).ams_pll_ctl_0_gen2[0]=(((r).ams_pll_ctl_0_gen2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMAX_ICLKIDRV1f_GET(r) ((((r).ams_pll_ctl_0_gen2[0]) >> 9) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMAX_ICLKIDRV1f_SET(r,f) (r).ams_pll_ctl_0_gen2[0]=(((r).ams_pll_ctl_0_gen2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMIN_ICLKIDRV1f_GET(r) ((((r).ams_pll_ctl_0_gen2[0]) >> 8) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMIN_ICLKIDRV1f_SET(r,f) (r).ams_pll_ctl_0_gen2[0]=(((r).ams_pll_ctl_0_gen2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMODE_ICLKODRV1f_GET(r) ((((r).ams_pll_ctl_0_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMODE_ICLKODRV1f_SET(r,f) (r).ams_pll_ctl_0_gen2[0]=(((r).ams_pll_ctl_0_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMAX_ICLKODRV1f_GET(r) ((((r).ams_pll_ctl_0_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMAX_ICLKODRV1f_SET(r,f) (r).ams_pll_ctl_0_gen2[0]=(((r).ams_pll_ctl_0_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMIN_ICLKODRV1f_GET(r) ((((r).ams_pll_ctl_0_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMIN_ICLKODRV1f_SET(r,f) (r).ams_pll_ctl_0_gen2[0]=(((r).ams_pll_ctl_0_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMODE_ICLKINTf_GET(r) ((((r).ams_pll_ctl_0_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMODE_ICLKINTf_SET(r,f) (r).ams_pll_ctl_0_gen2[0]=(((r).ams_pll_ctl_0_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMAX_ICLKINTf_GET(r) ((((r).ams_pll_ctl_0_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMAX_ICLKINTf_SET(r,f) (r).ams_pll_ctl_0_gen2[0]=(((r).ams_pll_ctl_0_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMIN_ICLKINTf_GET(r) ((((r).ams_pll_ctl_0_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMIN_ICLKINTf_SET(r,f) (r).ams_pll_ctl_0_gen2[0]=(((r).ams_pll_ctl_0_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_AMS_PLL_SET_CLK4TSCf_GET(r) (((r).ams_pll_ctl_0_gen2[0]) & 0x3)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_AMS_PLL_SET_CLK4TSCf_SET(r,f) (r).ams_pll_ctl_0_gen2[0]=(((r).ams_pll_ctl_0_gen2[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access AMS_PLL_CTL_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AMS_PLL_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r,(_r._ams_pll_ctl_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_AMS_PLL_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r,(_r._ams_pll_ctl_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AMS_PLL_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r,(_r._ams_pll_ctl_0_gen2))
#define BCMI_TSCF_XGXS_READLN_AMS_PLL_CTL_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_ctl_0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AMS_PLL_CTL_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_ctl_0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AMS_PLL_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_pll_ctl_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_PLL_CTL_0_GEN2r BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r
#define AMS_PLL_CTL_0_GEN2r_SIZE BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_t AMS_PLL_CTL_0_GEN2r_t;
#define AMS_PLL_CTL_0_GEN2r_CLR BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_CLR
#define AMS_PLL_CTL_0_GEN2r_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_SET
#define AMS_PLL_CTL_0_GEN2r_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_GET
#define AMS_PLL_CTL_0_GEN2r_AMS_PLL_CAL_AUXf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_AMS_PLL_CAL_AUXf_GET
#define AMS_PLL_CTL_0_GEN2r_AMS_PLL_CAL_AUXf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_AMS_PLL_CAL_AUXf_SET
#define AMS_PLL_CTL_0_GEN2r_AMS_PLL_CAL_OFFf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_AMS_PLL_CAL_OFFf_GET
#define AMS_PLL_CTL_0_GEN2r_AMS_PLL_CAL_OFFf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_AMS_PLL_CAL_OFFf_SET
#define AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMODE_ICLKIDRV1f_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMODE_ICLKIDRV1f_GET
#define AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMODE_ICLKIDRV1f_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMODE_ICLKIDRV1f_SET
#define AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMAX_ICLKIDRV1f_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMAX_ICLKIDRV1f_GET
#define AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMAX_ICLKIDRV1f_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMAX_ICLKIDRV1f_SET
#define AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMIN_ICLKIDRV1f_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMIN_ICLKIDRV1f_GET
#define AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMIN_ICLKIDRV1f_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMIN_ICLKIDRV1f_SET
#define AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMODE_ICLKODRV1f_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMODE_ICLKODRV1f_GET
#define AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMODE_ICLKODRV1f_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMODE_ICLKODRV1f_SET
#define AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMAX_ICLKODRV1f_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMAX_ICLKODRV1f_GET
#define AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMAX_ICLKODRV1f_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMAX_ICLKODRV1f_SET
#define AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMIN_ICLKODRV1f_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMIN_ICLKODRV1f_GET
#define AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMIN_ICLKODRV1f_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMIN_ICLKODRV1f_SET
#define AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMODE_ICLKINTf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMODE_ICLKINTf_GET
#define AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMODE_ICLKINTf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMODE_ICLKINTf_SET
#define AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMAX_ICLKINTf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMAX_ICLKINTf_GET
#define AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMAX_ICLKINTf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMAX_ICLKINTf_SET
#define AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMIN_ICLKINTf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMIN_ICLKINTf_GET
#define AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMIN_ICLKINTf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_AMS_PLL_IMIN_ICLKINTf_SET
#define AMS_PLL_CTL_0_GEN2r_AMS_PLL_SET_CLK4TSCf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_AMS_PLL_SET_CLK4TSCf_GET
#define AMS_PLL_CTL_0_GEN2r_AMS_PLL_SET_CLK4TSCf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r_AMS_PLL_SET_CLK4TSCf_SET
#define READ_AMS_PLL_CTL_0_GEN2r BCMI_TSCF_XGXS_READ_AMS_PLL_CTL_0_GEN2r
#define WRITE_AMS_PLL_CTL_0_GEN2r BCMI_TSCF_XGXS_WRITE_AMS_PLL_CTL_0_GEN2r
#define MODIFY_AMS_PLL_CTL_0_GEN2r BCMI_TSCF_XGXS_MODIFY_AMS_PLL_CTL_0_GEN2r
#define READLN_AMS_PLL_CTL_0_GEN2r BCMI_TSCF_XGXS_READLN_AMS_PLL_CTL_0_GEN2r
#define WRITELN_AMS_PLL_CTL_0_GEN2r BCMI_TSCF_XGXS_WRITELN_AMS_PLL_CTL_0_GEN2r
#define WRITEALL_AMS_PLL_CTL_0_GEN2r BCMI_TSCF_XGXS_WRITEALL_AMS_PLL_CTL_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AMS_PLL_CTL_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AMS_PLL_CTL_1_GEN2
 * BLOCKS:   AMS_COM
 * REGADDR:  0xd111
 * DEVAD:    1
 * DESC:     AMS PLL CONTROL_1
 * RESETVAL: 0x8000 (32768)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_PLL_IMIN_ICKGEN see AMS
 *     AMS_PLL_IMAX_ICKGEN see AMS
 *     AMS_PLL_IMODE_ICKGEN Master current mirror control
 *     AMS_PLL_DRV_HV_DISABLE see AMS
 *     AMS_PLL_TEST_BG_OPAMP_BIAS test BG opamp bias[1:0]
 *     AMS_PLL_SPARE_23_22 AMS reserved[23:22]
 *     AMS_PLL_VCOICTRL adjusts VCO bias current
 *     AMS_PLL_VCO_INDICATOR enables transformer mode
 *     AMS_PLL_IVCO     see AMS
 *     AMS_PLL_RESET    active high
 *     AMS_PLL_ENABLE_FTUNE see AMS
 */
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r (0x0001d111 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AMS_PLL_CTL_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_s {
	uint32_t v[1];
	uint32_t ams_pll_ctl_1_gen2[1];
	uint32_t _ams_pll_ctl_1_gen2;
} BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_t;

#define BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_CLR(r) (r).ams_pll_ctl_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_SET(r,d) (r).ams_pll_ctl_1_gen2[0] = d
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_GET(r) (r).ams_pll_ctl_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_AMS_PLL_ENABLE_FTUNEf_GET(r) ((((r).ams_pll_ctl_1_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_AMS_PLL_ENABLE_FTUNEf_SET(r,f) (r).ams_pll_ctl_1_gen2[0]=(((r).ams_pll_ctl_1_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_AMS_PLL_RESETf_GET(r) ((((r).ams_pll_ctl_1_gen2[0]) >> 14) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_AMS_PLL_RESETf_SET(r,f) (r).ams_pll_ctl_1_gen2[0]=(((r).ams_pll_ctl_1_gen2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_AMS_PLL_IVCOf_GET(r) ((((r).ams_pll_ctl_1_gen2[0]) >> 11) & 0x7)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_AMS_PLL_IVCOf_SET(r,f) (r).ams_pll_ctl_1_gen2[0]=(((r).ams_pll_ctl_1_gen2[0] & ~((uint32_t)0x7 << 11)) | ((((uint32_t)f) & 0x7) << 11)) | (7 << (16 + 11))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_AMS_PLL_VCO_INDICATORf_GET(r) ((((r).ams_pll_ctl_1_gen2[0]) >> 10) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_AMS_PLL_VCO_INDICATORf_SET(r,f) (r).ams_pll_ctl_1_gen2[0]=(((r).ams_pll_ctl_1_gen2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_AMS_PLL_VCOICTRLf_GET(r) ((((r).ams_pll_ctl_1_gen2[0]) >> 8) & 0x3)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_AMS_PLL_VCOICTRLf_SET(r,f) (r).ams_pll_ctl_1_gen2[0]=(((r).ams_pll_ctl_1_gen2[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_AMS_PLL_SPARE_23_22f_GET(r) ((((r).ams_pll_ctl_1_gen2[0]) >> 6) & 0x3)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_AMS_PLL_SPARE_23_22f_SET(r,f) (r).ams_pll_ctl_1_gen2[0]=(((r).ams_pll_ctl_1_gen2[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6)) | (3 << (16 + 6))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_AMS_PLL_TEST_BG_OPAMP_BIASf_GET(r) ((((r).ams_pll_ctl_1_gen2[0]) >> 4) & 0x3)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_AMS_PLL_TEST_BG_OPAMP_BIASf_SET(r,f) (r).ams_pll_ctl_1_gen2[0]=(((r).ams_pll_ctl_1_gen2[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_AMS_PLL_DRV_HV_DISABLEf_GET(r) ((((r).ams_pll_ctl_1_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_AMS_PLL_DRV_HV_DISABLEf_SET(r,f) (r).ams_pll_ctl_1_gen2[0]=(((r).ams_pll_ctl_1_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_AMS_PLL_IMODE_ICKGENf_GET(r) ((((r).ams_pll_ctl_1_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_AMS_PLL_IMODE_ICKGENf_SET(r,f) (r).ams_pll_ctl_1_gen2[0]=(((r).ams_pll_ctl_1_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_AMS_PLL_IMAX_ICKGENf_GET(r) ((((r).ams_pll_ctl_1_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_AMS_PLL_IMAX_ICKGENf_SET(r,f) (r).ams_pll_ctl_1_gen2[0]=(((r).ams_pll_ctl_1_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_AMS_PLL_IMIN_ICKGENf_GET(r) (((r).ams_pll_ctl_1_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_AMS_PLL_IMIN_ICKGENf_SET(r,f) (r).ams_pll_ctl_1_gen2[0]=(((r).ams_pll_ctl_1_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AMS_PLL_CTL_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AMS_PLL_CTL_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r,(_r._ams_pll_ctl_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_AMS_PLL_CTL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r,(_r._ams_pll_ctl_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AMS_PLL_CTL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r,(_r._ams_pll_ctl_1_gen2))
#define BCMI_TSCF_XGXS_READLN_AMS_PLL_CTL_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_ctl_1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AMS_PLL_CTL_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_ctl_1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AMS_PLL_CTL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_pll_ctl_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_PLL_CTL_1_GEN2r BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r
#define AMS_PLL_CTL_1_GEN2r_SIZE BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_t AMS_PLL_CTL_1_GEN2r_t;
#define AMS_PLL_CTL_1_GEN2r_CLR BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_CLR
#define AMS_PLL_CTL_1_GEN2r_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_SET
#define AMS_PLL_CTL_1_GEN2r_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_GET
#define AMS_PLL_CTL_1_GEN2r_AMS_PLL_ENABLE_FTUNEf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_AMS_PLL_ENABLE_FTUNEf_GET
#define AMS_PLL_CTL_1_GEN2r_AMS_PLL_ENABLE_FTUNEf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_AMS_PLL_ENABLE_FTUNEf_SET
#define AMS_PLL_CTL_1_GEN2r_AMS_PLL_RESETf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_AMS_PLL_RESETf_GET
#define AMS_PLL_CTL_1_GEN2r_AMS_PLL_RESETf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_AMS_PLL_RESETf_SET
#define AMS_PLL_CTL_1_GEN2r_AMS_PLL_IVCOf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_AMS_PLL_IVCOf_GET
#define AMS_PLL_CTL_1_GEN2r_AMS_PLL_IVCOf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_AMS_PLL_IVCOf_SET
#define AMS_PLL_CTL_1_GEN2r_AMS_PLL_VCO_INDICATORf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_AMS_PLL_VCO_INDICATORf_GET
#define AMS_PLL_CTL_1_GEN2r_AMS_PLL_VCO_INDICATORf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_AMS_PLL_VCO_INDICATORf_SET
#define AMS_PLL_CTL_1_GEN2r_AMS_PLL_VCOICTRLf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_AMS_PLL_VCOICTRLf_GET
#define AMS_PLL_CTL_1_GEN2r_AMS_PLL_VCOICTRLf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_AMS_PLL_VCOICTRLf_SET
#define AMS_PLL_CTL_1_GEN2r_AMS_PLL_SPARE_23_22f_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_AMS_PLL_SPARE_23_22f_GET
#define AMS_PLL_CTL_1_GEN2r_AMS_PLL_SPARE_23_22f_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_AMS_PLL_SPARE_23_22f_SET
#define AMS_PLL_CTL_1_GEN2r_AMS_PLL_TEST_BG_OPAMP_BIASf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_AMS_PLL_TEST_BG_OPAMP_BIASf_GET
#define AMS_PLL_CTL_1_GEN2r_AMS_PLL_TEST_BG_OPAMP_BIASf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_AMS_PLL_TEST_BG_OPAMP_BIASf_SET
#define AMS_PLL_CTL_1_GEN2r_AMS_PLL_DRV_HV_DISABLEf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_AMS_PLL_DRV_HV_DISABLEf_GET
#define AMS_PLL_CTL_1_GEN2r_AMS_PLL_DRV_HV_DISABLEf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_AMS_PLL_DRV_HV_DISABLEf_SET
#define AMS_PLL_CTL_1_GEN2r_AMS_PLL_IMODE_ICKGENf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_AMS_PLL_IMODE_ICKGENf_GET
#define AMS_PLL_CTL_1_GEN2r_AMS_PLL_IMODE_ICKGENf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_AMS_PLL_IMODE_ICKGENf_SET
#define AMS_PLL_CTL_1_GEN2r_AMS_PLL_IMAX_ICKGENf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_AMS_PLL_IMAX_ICKGENf_GET
#define AMS_PLL_CTL_1_GEN2r_AMS_PLL_IMAX_ICKGENf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_AMS_PLL_IMAX_ICKGENf_SET
#define AMS_PLL_CTL_1_GEN2r_AMS_PLL_IMIN_ICKGENf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_AMS_PLL_IMIN_ICKGENf_GET
#define AMS_PLL_CTL_1_GEN2r_AMS_PLL_IMIN_ICKGENf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r_AMS_PLL_IMIN_ICKGENf_SET
#define READ_AMS_PLL_CTL_1_GEN2r BCMI_TSCF_XGXS_READ_AMS_PLL_CTL_1_GEN2r
#define WRITE_AMS_PLL_CTL_1_GEN2r BCMI_TSCF_XGXS_WRITE_AMS_PLL_CTL_1_GEN2r
#define MODIFY_AMS_PLL_CTL_1_GEN2r BCMI_TSCF_XGXS_MODIFY_AMS_PLL_CTL_1_GEN2r
#define READLN_AMS_PLL_CTL_1_GEN2r BCMI_TSCF_XGXS_READLN_AMS_PLL_CTL_1_GEN2r
#define WRITELN_AMS_PLL_CTL_1_GEN2r BCMI_TSCF_XGXS_WRITELN_AMS_PLL_CTL_1_GEN2r
#define WRITEALL_AMS_PLL_CTL_1_GEN2r BCMI_TSCF_XGXS_WRITEALL_AMS_PLL_CTL_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AMS_PLL_CTL_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AMS_PLL_CTL_2_GEN2
 * BLOCKS:   AMS_COM
 * REGADDR:  0xd112
 * DEVAD:    1
 * DESC:     AMS PLL CONTROL_2
 * RESETVAL: 0x1e (30)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_PLL_EN_HRZ   increases Rz, 2.4K ==> 4.8K
 *     AMS_PLL_IQP      charge pump current, 50,100,150,..800uA
 *     AMS_PLL_REFL_PLL see AMS
 *     AMS_PLL_REFH_PLL see AMS
 *     AMS_PLL_IMIN_IBIAS see AMS
 *     AMS_PLL_IMODE_IBIAS see AMS
 *     AMS_PLL_IMAX_IBIAS ibias all 6 above
 *     AMS_PLL_IMIN_ICP see AMS
 *     AMS_PLL_IMODE_ICP see AMS
 *     AMS_PLL_IMAX_ICP charge pump
 *     AMS_PLL_IMIN_ICK see AMS
 *     AMS_PLL_IMODE_ICK see AMS
 *     AMS_PLL_IMAX_ICK fref buffer
 */
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r (0x0001d112 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AMS_PLL_CTL_2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_s {
	uint32_t v[1];
	uint32_t ams_pll_ctl_2_gen2[1];
	uint32_t _ams_pll_ctl_2_gen2;
} BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_t;

#define BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_CLR(r) (r).ams_pll_ctl_2_gen2[0] = 0
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_SET(r,d) (r).ams_pll_ctl_2_gen2[0] = d
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_GET(r) (r).ams_pll_ctl_2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMAX_ICKf_GET(r) ((((r).ams_pll_ctl_2_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMAX_ICKf_SET(r,f) (r).ams_pll_ctl_2_gen2[0]=(((r).ams_pll_ctl_2_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMODE_ICKf_GET(r) ((((r).ams_pll_ctl_2_gen2[0]) >> 14) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMODE_ICKf_SET(r,f) (r).ams_pll_ctl_2_gen2[0]=(((r).ams_pll_ctl_2_gen2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMIN_ICKf_GET(r) ((((r).ams_pll_ctl_2_gen2[0]) >> 13) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMIN_ICKf_SET(r,f) (r).ams_pll_ctl_2_gen2[0]=(((r).ams_pll_ctl_2_gen2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMAX_ICPf_GET(r) ((((r).ams_pll_ctl_2_gen2[0]) >> 12) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMAX_ICPf_SET(r,f) (r).ams_pll_ctl_2_gen2[0]=(((r).ams_pll_ctl_2_gen2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMODE_ICPf_GET(r) ((((r).ams_pll_ctl_2_gen2[0]) >> 11) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMODE_ICPf_SET(r,f) (r).ams_pll_ctl_2_gen2[0]=(((r).ams_pll_ctl_2_gen2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMIN_ICPf_GET(r) ((((r).ams_pll_ctl_2_gen2[0]) >> 10) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMIN_ICPf_SET(r,f) (r).ams_pll_ctl_2_gen2[0]=(((r).ams_pll_ctl_2_gen2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMAX_IBIASf_GET(r) ((((r).ams_pll_ctl_2_gen2[0]) >> 9) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMAX_IBIASf_SET(r,f) (r).ams_pll_ctl_2_gen2[0]=(((r).ams_pll_ctl_2_gen2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMODE_IBIASf_GET(r) ((((r).ams_pll_ctl_2_gen2[0]) >> 8) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMODE_IBIASf_SET(r,f) (r).ams_pll_ctl_2_gen2[0]=(((r).ams_pll_ctl_2_gen2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMIN_IBIASf_GET(r) ((((r).ams_pll_ctl_2_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMIN_IBIASf_SET(r,f) (r).ams_pll_ctl_2_gen2[0]=(((r).ams_pll_ctl_2_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_AMS_PLL_REFH_PLLf_GET(r) ((((r).ams_pll_ctl_2_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_AMS_PLL_REFH_PLLf_SET(r,f) (r).ams_pll_ctl_2_gen2[0]=(((r).ams_pll_ctl_2_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_AMS_PLL_REFL_PLLf_GET(r) ((((r).ams_pll_ctl_2_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_AMS_PLL_REFL_PLLf_SET(r,f) (r).ams_pll_ctl_2_gen2[0]=(((r).ams_pll_ctl_2_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_AMS_PLL_IQPf_GET(r) ((((r).ams_pll_ctl_2_gen2[0]) >> 1) & 0xf)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_AMS_PLL_IQPf_SET(r,f) (r).ams_pll_ctl_2_gen2[0]=(((r).ams_pll_ctl_2_gen2[0] & ~((uint32_t)0xf << 1)) | ((((uint32_t)f) & 0xf) << 1)) | (15 << (16 + 1))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_AMS_PLL_EN_HRZf_GET(r) (((r).ams_pll_ctl_2_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_AMS_PLL_EN_HRZf_SET(r,f) (r).ams_pll_ctl_2_gen2[0]=(((r).ams_pll_ctl_2_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AMS_PLL_CTL_2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AMS_PLL_CTL_2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r,(_r._ams_pll_ctl_2_gen2))
#define BCMI_TSCF_XGXS_WRITE_AMS_PLL_CTL_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r,(_r._ams_pll_ctl_2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AMS_PLL_CTL_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r,(_r._ams_pll_ctl_2_gen2))
#define BCMI_TSCF_XGXS_READLN_AMS_PLL_CTL_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_ctl_2_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AMS_PLL_CTL_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_ctl_2_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AMS_PLL_CTL_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_pll_ctl_2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_PLL_CTL_2_GEN2r BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r
#define AMS_PLL_CTL_2_GEN2r_SIZE BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_t AMS_PLL_CTL_2_GEN2r_t;
#define AMS_PLL_CTL_2_GEN2r_CLR BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_CLR
#define AMS_PLL_CTL_2_GEN2r_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_SET
#define AMS_PLL_CTL_2_GEN2r_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_GET
#define AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMAX_ICKf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMAX_ICKf_GET
#define AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMAX_ICKf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMAX_ICKf_SET
#define AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMODE_ICKf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMODE_ICKf_GET
#define AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMODE_ICKf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMODE_ICKf_SET
#define AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMIN_ICKf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMIN_ICKf_GET
#define AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMIN_ICKf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMIN_ICKf_SET
#define AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMAX_ICPf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMAX_ICPf_GET
#define AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMAX_ICPf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMAX_ICPf_SET
#define AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMODE_ICPf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMODE_ICPf_GET
#define AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMODE_ICPf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMODE_ICPf_SET
#define AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMIN_ICPf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMIN_ICPf_GET
#define AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMIN_ICPf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMIN_ICPf_SET
#define AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMAX_IBIASf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMAX_IBIASf_GET
#define AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMAX_IBIASf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMAX_IBIASf_SET
#define AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMODE_IBIASf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMODE_IBIASf_GET
#define AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMODE_IBIASf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMODE_IBIASf_SET
#define AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMIN_IBIASf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMIN_IBIASf_GET
#define AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMIN_IBIASf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_AMS_PLL_IMIN_IBIASf_SET
#define AMS_PLL_CTL_2_GEN2r_AMS_PLL_REFH_PLLf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_AMS_PLL_REFH_PLLf_GET
#define AMS_PLL_CTL_2_GEN2r_AMS_PLL_REFH_PLLf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_AMS_PLL_REFH_PLLf_SET
#define AMS_PLL_CTL_2_GEN2r_AMS_PLL_REFL_PLLf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_AMS_PLL_REFL_PLLf_GET
#define AMS_PLL_CTL_2_GEN2r_AMS_PLL_REFL_PLLf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_AMS_PLL_REFL_PLLf_SET
#define AMS_PLL_CTL_2_GEN2r_AMS_PLL_IQPf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_AMS_PLL_IQPf_GET
#define AMS_PLL_CTL_2_GEN2r_AMS_PLL_IQPf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_AMS_PLL_IQPf_SET
#define AMS_PLL_CTL_2_GEN2r_AMS_PLL_EN_HRZf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_AMS_PLL_EN_HRZf_GET
#define AMS_PLL_CTL_2_GEN2r_AMS_PLL_EN_HRZf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r_AMS_PLL_EN_HRZf_SET
#define READ_AMS_PLL_CTL_2_GEN2r BCMI_TSCF_XGXS_READ_AMS_PLL_CTL_2_GEN2r
#define WRITE_AMS_PLL_CTL_2_GEN2r BCMI_TSCF_XGXS_WRITE_AMS_PLL_CTL_2_GEN2r
#define MODIFY_AMS_PLL_CTL_2_GEN2r BCMI_TSCF_XGXS_MODIFY_AMS_PLL_CTL_2_GEN2r
#define READLN_AMS_PLL_CTL_2_GEN2r BCMI_TSCF_XGXS_READLN_AMS_PLL_CTL_2_GEN2r
#define WRITELN_AMS_PLL_CTL_2_GEN2r BCMI_TSCF_XGXS_WRITELN_AMS_PLL_CTL_2_GEN2r
#define WRITEALL_AMS_PLL_CTL_2_GEN2r BCMI_TSCF_XGXS_WRITEALL_AMS_PLL_CTL_2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AMS_PLL_CTL_2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AMS_PLL_CTL_3_GEN2
 * BLOCKS:   AMS_COM
 * REGADDR:  0xd113
 * DEVAD:    1
 * DESC:     AMS PLL CONTROL_3
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_PLL_IMIN_IRXCLKBUF see AMS
 *     AMS_PLL_IMODE_IRXCLKBUF see AMS
 *     AMS_PLL_IMAX_IRXCLKBUF rxclk buf
 *     AMS_PLL_IMIN_ICMLDIV see AMS
 *     AMS_PLL_IMODE_ICMLDIV see AMS
 *     AMS_PLL_IMAX_ICMLDIV VCO divider/buffer
 *     AMS_PLL_IMIN_ICOMP see AMS
 *     AMS_PLL_IMODE_ICOMP see AMS
 *     AMS_PLL_IMAX_ICOMP VCO comparator
 *     AMS_PLL_IMIN_IOP see AMS
 *     AMS_PLL_IMODE_IOP see AMS
 *     AMS_PLL_IMAX_IOP test current
 *     AMS_PLL_TEST_VREF see AMS
 *     AMS_PLL_TEST_VC  test Vcontrol
 *     AMS_PLL_TEST_PLL test LC
 *     AMS_PLL_TEST_RX  send RX word ck to PLL test port
 */
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r (0x0001d113 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AMS_PLL_CTL_3_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_s {
	uint32_t v[1];
	uint32_t ams_pll_ctl_3_gen2[1];
	uint32_t _ams_pll_ctl_3_gen2;
} BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_t;

#define BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_CLR(r) (r).ams_pll_ctl_3_gen2[0] = 0
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_SET(r,d) (r).ams_pll_ctl_3_gen2[0] = d
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_GET(r) (r).ams_pll_ctl_3_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_TEST_RXf_GET(r) ((((r).ams_pll_ctl_3_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_TEST_RXf_SET(r,f) (r).ams_pll_ctl_3_gen2[0]=(((r).ams_pll_ctl_3_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_TEST_PLLf_GET(r) ((((r).ams_pll_ctl_3_gen2[0]) >> 14) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_TEST_PLLf_SET(r,f) (r).ams_pll_ctl_3_gen2[0]=(((r).ams_pll_ctl_3_gen2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_TEST_VCf_GET(r) ((((r).ams_pll_ctl_3_gen2[0]) >> 13) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_TEST_VCf_SET(r,f) (r).ams_pll_ctl_3_gen2[0]=(((r).ams_pll_ctl_3_gen2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_TEST_VREFf_GET(r) ((((r).ams_pll_ctl_3_gen2[0]) >> 12) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_TEST_VREFf_SET(r,f) (r).ams_pll_ctl_3_gen2[0]=(((r).ams_pll_ctl_3_gen2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMAX_IOPf_GET(r) ((((r).ams_pll_ctl_3_gen2[0]) >> 11) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMAX_IOPf_SET(r,f) (r).ams_pll_ctl_3_gen2[0]=(((r).ams_pll_ctl_3_gen2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMODE_IOPf_GET(r) ((((r).ams_pll_ctl_3_gen2[0]) >> 10) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMODE_IOPf_SET(r,f) (r).ams_pll_ctl_3_gen2[0]=(((r).ams_pll_ctl_3_gen2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMIN_IOPf_GET(r) ((((r).ams_pll_ctl_3_gen2[0]) >> 9) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMIN_IOPf_SET(r,f) (r).ams_pll_ctl_3_gen2[0]=(((r).ams_pll_ctl_3_gen2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMAX_ICOMPf_GET(r) ((((r).ams_pll_ctl_3_gen2[0]) >> 8) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMAX_ICOMPf_SET(r,f) (r).ams_pll_ctl_3_gen2[0]=(((r).ams_pll_ctl_3_gen2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMODE_ICOMPf_GET(r) ((((r).ams_pll_ctl_3_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMODE_ICOMPf_SET(r,f) (r).ams_pll_ctl_3_gen2[0]=(((r).ams_pll_ctl_3_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMIN_ICOMPf_GET(r) ((((r).ams_pll_ctl_3_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMIN_ICOMPf_SET(r,f) (r).ams_pll_ctl_3_gen2[0]=(((r).ams_pll_ctl_3_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMAX_ICMLDIVf_GET(r) ((((r).ams_pll_ctl_3_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMAX_ICMLDIVf_SET(r,f) (r).ams_pll_ctl_3_gen2[0]=(((r).ams_pll_ctl_3_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMODE_ICMLDIVf_GET(r) ((((r).ams_pll_ctl_3_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMODE_ICMLDIVf_SET(r,f) (r).ams_pll_ctl_3_gen2[0]=(((r).ams_pll_ctl_3_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMIN_ICMLDIVf_GET(r) ((((r).ams_pll_ctl_3_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMIN_ICMLDIVf_SET(r,f) (r).ams_pll_ctl_3_gen2[0]=(((r).ams_pll_ctl_3_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMAX_IRXCLKBUFf_GET(r) ((((r).ams_pll_ctl_3_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMAX_IRXCLKBUFf_SET(r,f) (r).ams_pll_ctl_3_gen2[0]=(((r).ams_pll_ctl_3_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMODE_IRXCLKBUFf_GET(r) ((((r).ams_pll_ctl_3_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMODE_IRXCLKBUFf_SET(r,f) (r).ams_pll_ctl_3_gen2[0]=(((r).ams_pll_ctl_3_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMIN_IRXCLKBUFf_GET(r) (((r).ams_pll_ctl_3_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMIN_IRXCLKBUFf_SET(r,f) (r).ams_pll_ctl_3_gen2[0]=(((r).ams_pll_ctl_3_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AMS_PLL_CTL_3_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AMS_PLL_CTL_3_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r,(_r._ams_pll_ctl_3_gen2))
#define BCMI_TSCF_XGXS_WRITE_AMS_PLL_CTL_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r,(_r._ams_pll_ctl_3_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AMS_PLL_CTL_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r,(_r._ams_pll_ctl_3_gen2))
#define BCMI_TSCF_XGXS_READLN_AMS_PLL_CTL_3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_ctl_3_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AMS_PLL_CTL_3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_ctl_3_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AMS_PLL_CTL_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_pll_ctl_3_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_PLL_CTL_3_GEN2r BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r
#define AMS_PLL_CTL_3_GEN2r_SIZE BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_t AMS_PLL_CTL_3_GEN2r_t;
#define AMS_PLL_CTL_3_GEN2r_CLR BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_CLR
#define AMS_PLL_CTL_3_GEN2r_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_SET
#define AMS_PLL_CTL_3_GEN2r_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_GET
#define AMS_PLL_CTL_3_GEN2r_AMS_PLL_TEST_RXf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_TEST_RXf_GET
#define AMS_PLL_CTL_3_GEN2r_AMS_PLL_TEST_RXf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_TEST_RXf_SET
#define AMS_PLL_CTL_3_GEN2r_AMS_PLL_TEST_PLLf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_TEST_PLLf_GET
#define AMS_PLL_CTL_3_GEN2r_AMS_PLL_TEST_PLLf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_TEST_PLLf_SET
#define AMS_PLL_CTL_3_GEN2r_AMS_PLL_TEST_VCf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_TEST_VCf_GET
#define AMS_PLL_CTL_3_GEN2r_AMS_PLL_TEST_VCf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_TEST_VCf_SET
#define AMS_PLL_CTL_3_GEN2r_AMS_PLL_TEST_VREFf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_TEST_VREFf_GET
#define AMS_PLL_CTL_3_GEN2r_AMS_PLL_TEST_VREFf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_TEST_VREFf_SET
#define AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMAX_IOPf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMAX_IOPf_GET
#define AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMAX_IOPf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMAX_IOPf_SET
#define AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMODE_IOPf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMODE_IOPf_GET
#define AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMODE_IOPf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMODE_IOPf_SET
#define AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMIN_IOPf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMIN_IOPf_GET
#define AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMIN_IOPf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMIN_IOPf_SET
#define AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMAX_ICOMPf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMAX_ICOMPf_GET
#define AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMAX_ICOMPf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMAX_ICOMPf_SET
#define AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMODE_ICOMPf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMODE_ICOMPf_GET
#define AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMODE_ICOMPf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMODE_ICOMPf_SET
#define AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMIN_ICOMPf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMIN_ICOMPf_GET
#define AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMIN_ICOMPf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMIN_ICOMPf_SET
#define AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMAX_ICMLDIVf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMAX_ICMLDIVf_GET
#define AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMAX_ICMLDIVf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMAX_ICMLDIVf_SET
#define AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMODE_ICMLDIVf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMODE_ICMLDIVf_GET
#define AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMODE_ICMLDIVf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMODE_ICMLDIVf_SET
#define AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMIN_ICMLDIVf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMIN_ICMLDIVf_GET
#define AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMIN_ICMLDIVf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMIN_ICMLDIVf_SET
#define AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMAX_IRXCLKBUFf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMAX_IRXCLKBUFf_GET
#define AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMAX_IRXCLKBUFf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMAX_IRXCLKBUFf_SET
#define AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMODE_IRXCLKBUFf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMODE_IRXCLKBUFf_GET
#define AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMODE_IRXCLKBUFf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMODE_IRXCLKBUFf_SET
#define AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMIN_IRXCLKBUFf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMIN_IRXCLKBUFf_GET
#define AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMIN_IRXCLKBUFf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r_AMS_PLL_IMIN_IRXCLKBUFf_SET
#define READ_AMS_PLL_CTL_3_GEN2r BCMI_TSCF_XGXS_READ_AMS_PLL_CTL_3_GEN2r
#define WRITE_AMS_PLL_CTL_3_GEN2r BCMI_TSCF_XGXS_WRITE_AMS_PLL_CTL_3_GEN2r
#define MODIFY_AMS_PLL_CTL_3_GEN2r BCMI_TSCF_XGXS_MODIFY_AMS_PLL_CTL_3_GEN2r
#define READLN_AMS_PLL_CTL_3_GEN2r BCMI_TSCF_XGXS_READLN_AMS_PLL_CTL_3_GEN2r
#define WRITELN_AMS_PLL_CTL_3_GEN2r BCMI_TSCF_XGXS_WRITELN_AMS_PLL_CTL_3_GEN2r
#define WRITEALL_AMS_PLL_CTL_3_GEN2r BCMI_TSCF_XGXS_WRITEALL_AMS_PLL_CTL_3_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AMS_PLL_CTL_3_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AMS_PLL_CTL_4_GEN2
 * BLOCKS:   AMS_COM
 * REGADDR:  0xd114
 * DEVAD:    1
 * DESC:     AMS PLL CONTROL_4
 * RESETVAL: 0x77 (119)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_PLL_BGR_PTATADJ BG bias, same decoder as CTAT
 *     AMS_PLL_BGR_CTATADJ BG CTAT bias control
 *     AMS_PLL_PLL2RX_CLKBW pll2rx_clkbw[1] controls BW of PLL output buffer
 *     AMS_PLL_COMP_VTH tuning comparator threshold
 *     AMS_PLL_VDDR_BGB select between PVDD or BG Vbias
 *     AMS_PLL_KVH_FORCE force Kvco, override tuning control
 *     AMS_PLL_FORCE_KVH_BW enable force kvh and bw modes
 *     AMS_PLL_FORCE_RESCAL force_rescal with pll_ctrl<15:12>
 */
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_4_GEN2r (0x0001d114 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AMS_PLL_CTL_4_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AMS_PLL_CTL_4_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AMS_PLL_CTL_4_GEN2r_s {
	uint32_t v[1];
	uint32_t ams_pll_ctl_4_gen2[1];
	uint32_t _ams_pll_ctl_4_gen2;
} BCMI_TSCF_XGXS_AMS_PLL_CTL_4_GEN2r_t;

#define BCMI_TSCF_XGXS_AMS_PLL_CTL_4_GEN2r_CLR(r) (r).ams_pll_ctl_4_gen2[0] = 0
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_4_GEN2r_SET(r,d) (r).ams_pll_ctl_4_gen2[0] = d
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_4_GEN2r_GET(r) (r).ams_pll_ctl_4_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_4_GEN2r_AMS_PLL_FORCE_RESCALf_GET(r) ((((r).ams_pll_ctl_4_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_4_GEN2r_AMS_PLL_FORCE_RESCALf_SET(r,f) (r).ams_pll_ctl_4_gen2[0]=(((r).ams_pll_ctl_4_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_4_GEN2r_AMS_PLL_FORCE_KVH_BWf_GET(r) ((((r).ams_pll_ctl_4_gen2[0]) >> 14) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_4_GEN2r_AMS_PLL_FORCE_KVH_BWf_SET(r,f) (r).ams_pll_ctl_4_gen2[0]=(((r).ams_pll_ctl_4_gen2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_4_GEN2r_AMS_PLL_KVH_FORCEf_GET(r) ((((r).ams_pll_ctl_4_gen2[0]) >> 12) & 0x3)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_4_GEN2r_AMS_PLL_KVH_FORCEf_SET(r,f) (r).ams_pll_ctl_4_gen2[0]=(((r).ams_pll_ctl_4_gen2[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12)) | (3 << (16 + 12))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_4_GEN2r_AMS_PLL_VDDR_BGBf_GET(r) ((((r).ams_pll_ctl_4_gen2[0]) >> 11) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_4_GEN2r_AMS_PLL_VDDR_BGBf_SET(r,f) (r).ams_pll_ctl_4_gen2[0]=(((r).ams_pll_ctl_4_gen2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_4_GEN2r_AMS_PLL_COMP_VTHf_GET(r) ((((r).ams_pll_ctl_4_gen2[0]) >> 10) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_4_GEN2r_AMS_PLL_COMP_VTHf_SET(r,f) (r).ams_pll_ctl_4_gen2[0]=(((r).ams_pll_ctl_4_gen2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_4_GEN2r_AMS_PLL_PLL2RX_CLKBWf_GET(r) ((((r).ams_pll_ctl_4_gen2[0]) >> 8) & 0x3)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_4_GEN2r_AMS_PLL_PLL2RX_CLKBWf_SET(r,f) (r).ams_pll_ctl_4_gen2[0]=(((r).ams_pll_ctl_4_gen2[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_4_GEN2r_AMS_PLL_BGR_CTATADJf_GET(r) ((((r).ams_pll_ctl_4_gen2[0]) >> 4) & 0xf)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_4_GEN2r_AMS_PLL_BGR_CTATADJf_SET(r,f) (r).ams_pll_ctl_4_gen2[0]=(((r).ams_pll_ctl_4_gen2[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4)) | (15 << (16 + 4))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_4_GEN2r_AMS_PLL_BGR_PTATADJf_GET(r) (((r).ams_pll_ctl_4_gen2[0]) & 0xf)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_4_GEN2r_AMS_PLL_BGR_PTATADJf_SET(r,f) (r).ams_pll_ctl_4_gen2[0]=(((r).ams_pll_ctl_4_gen2[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access AMS_PLL_CTL_4_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AMS_PLL_CTL_4_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AMS_PLL_CTL_4_GEN2r,(_r._ams_pll_ctl_4_gen2))
#define BCMI_TSCF_XGXS_WRITE_AMS_PLL_CTL_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_PLL_CTL_4_GEN2r,(_r._ams_pll_ctl_4_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AMS_PLL_CTL_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_PLL_CTL_4_GEN2r,(_r._ams_pll_ctl_4_gen2))
#define BCMI_TSCF_XGXS_READLN_AMS_PLL_CTL_4_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AMS_PLL_CTL_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_ctl_4_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AMS_PLL_CTL_4_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_PLL_CTL_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_ctl_4_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AMS_PLL_CTL_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_PLL_CTL_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_pll_ctl_4_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_PLL_CTL_4_GEN2r BCMI_TSCF_XGXS_AMS_PLL_CTL_4_GEN2r
#define AMS_PLL_CTL_4_GEN2r_SIZE BCMI_TSCF_XGXS_AMS_PLL_CTL_4_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AMS_PLL_CTL_4_GEN2r_t AMS_PLL_CTL_4_GEN2r_t;
#define AMS_PLL_CTL_4_GEN2r_CLR BCMI_TSCF_XGXS_AMS_PLL_CTL_4_GEN2r_CLR
#define AMS_PLL_CTL_4_GEN2r_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_4_GEN2r_SET
#define AMS_PLL_CTL_4_GEN2r_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_4_GEN2r_GET
#define AMS_PLL_CTL_4_GEN2r_AMS_PLL_FORCE_RESCALf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_4_GEN2r_AMS_PLL_FORCE_RESCALf_GET
#define AMS_PLL_CTL_4_GEN2r_AMS_PLL_FORCE_RESCALf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_4_GEN2r_AMS_PLL_FORCE_RESCALf_SET
#define AMS_PLL_CTL_4_GEN2r_AMS_PLL_FORCE_KVH_BWf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_4_GEN2r_AMS_PLL_FORCE_KVH_BWf_GET
#define AMS_PLL_CTL_4_GEN2r_AMS_PLL_FORCE_KVH_BWf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_4_GEN2r_AMS_PLL_FORCE_KVH_BWf_SET
#define AMS_PLL_CTL_4_GEN2r_AMS_PLL_KVH_FORCEf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_4_GEN2r_AMS_PLL_KVH_FORCEf_GET
#define AMS_PLL_CTL_4_GEN2r_AMS_PLL_KVH_FORCEf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_4_GEN2r_AMS_PLL_KVH_FORCEf_SET
#define AMS_PLL_CTL_4_GEN2r_AMS_PLL_VDDR_BGBf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_4_GEN2r_AMS_PLL_VDDR_BGBf_GET
#define AMS_PLL_CTL_4_GEN2r_AMS_PLL_VDDR_BGBf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_4_GEN2r_AMS_PLL_VDDR_BGBf_SET
#define AMS_PLL_CTL_4_GEN2r_AMS_PLL_COMP_VTHf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_4_GEN2r_AMS_PLL_COMP_VTHf_GET
#define AMS_PLL_CTL_4_GEN2r_AMS_PLL_COMP_VTHf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_4_GEN2r_AMS_PLL_COMP_VTHf_SET
#define AMS_PLL_CTL_4_GEN2r_AMS_PLL_PLL2RX_CLKBWf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_4_GEN2r_AMS_PLL_PLL2RX_CLKBWf_GET
#define AMS_PLL_CTL_4_GEN2r_AMS_PLL_PLL2RX_CLKBWf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_4_GEN2r_AMS_PLL_PLL2RX_CLKBWf_SET
#define AMS_PLL_CTL_4_GEN2r_AMS_PLL_BGR_CTATADJf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_4_GEN2r_AMS_PLL_BGR_CTATADJf_GET
#define AMS_PLL_CTL_4_GEN2r_AMS_PLL_BGR_CTATADJf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_4_GEN2r_AMS_PLL_BGR_CTATADJf_SET
#define AMS_PLL_CTL_4_GEN2r_AMS_PLL_BGR_PTATADJf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_4_GEN2r_AMS_PLL_BGR_PTATADJf_GET
#define AMS_PLL_CTL_4_GEN2r_AMS_PLL_BGR_PTATADJf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_4_GEN2r_AMS_PLL_BGR_PTATADJf_SET
#define READ_AMS_PLL_CTL_4_GEN2r BCMI_TSCF_XGXS_READ_AMS_PLL_CTL_4_GEN2r
#define WRITE_AMS_PLL_CTL_4_GEN2r BCMI_TSCF_XGXS_WRITE_AMS_PLL_CTL_4_GEN2r
#define MODIFY_AMS_PLL_CTL_4_GEN2r BCMI_TSCF_XGXS_MODIFY_AMS_PLL_CTL_4_GEN2r
#define READLN_AMS_PLL_CTL_4_GEN2r BCMI_TSCF_XGXS_READLN_AMS_PLL_CTL_4_GEN2r
#define WRITELN_AMS_PLL_CTL_4_GEN2r BCMI_TSCF_XGXS_WRITELN_AMS_PLL_CTL_4_GEN2r
#define WRITEALL_AMS_PLL_CTL_4_GEN2r BCMI_TSCF_XGXS_WRITEALL_AMS_PLL_CTL_4_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AMS_PLL_CTL_4_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AMS_PLL_CTL_5_GEN2
 * BLOCKS:   AMS_COM
 * REGADDR:  0xd115
 * DEVAD:    1
 * DESC:     AMS PLL CONTROL_5
 * RESETVAL: 0x1f00 (7936)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_PLL_TEST_PORT_MAX_AMPLITUDE test port max amplitude
 *     AMS_PLL_BGIP     test, measure Ibg internal PMOS current
 *     AMS_PLL_BGINT    test, measure Vbg internal
 *     AMS_PLL_VBYPASS  test, bypass test port opamp buffer
 *     AMS_PLL_TEST_PNP see AMS
 *     AMS_PLL_MIX3P1C_CALR_CTATADJ bias control for Mix3P1C/calR
 *     AMS_PLL_MIX3P1C_CALR_PTATADJ bias control for Mix3P1C/calR
 */
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_5_GEN2r (0x0001d115 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AMS_PLL_CTL_5_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AMS_PLL_CTL_5_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AMS_PLL_CTL_5_GEN2r_s {
	uint32_t v[1];
	uint32_t ams_pll_ctl_5_gen2[1];
	uint32_t _ams_pll_ctl_5_gen2;
} BCMI_TSCF_XGXS_AMS_PLL_CTL_5_GEN2r_t;

#define BCMI_TSCF_XGXS_AMS_PLL_CTL_5_GEN2r_CLR(r) (r).ams_pll_ctl_5_gen2[0] = 0
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_5_GEN2r_SET(r,d) (r).ams_pll_ctl_5_gen2[0] = d
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_5_GEN2r_GET(r) (r).ams_pll_ctl_5_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_5_GEN2r_AMS_PLL_MIX3P1C_CALR_PTATADJf_GET(r) ((((r).ams_pll_ctl_5_gen2[0]) >> 11) & 0x1f)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_5_GEN2r_AMS_PLL_MIX3P1C_CALR_PTATADJf_SET(r,f) (r).ams_pll_ctl_5_gen2[0]=(((r).ams_pll_ctl_5_gen2[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11)) | (31 << (16 + 11))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_5_GEN2r_AMS_PLL_MIX3P1C_CALR_CTATADJf_GET(r) ((((r).ams_pll_ctl_5_gen2[0]) >> 6) & 0x1f)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_5_GEN2r_AMS_PLL_MIX3P1C_CALR_CTATADJf_SET(r,f) (r).ams_pll_ctl_5_gen2[0]=(((r).ams_pll_ctl_5_gen2[0] & ~((uint32_t)0x1f << 6)) | ((((uint32_t)f) & 0x1f) << 6)) | (31 << (16 + 6))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_5_GEN2r_AMS_PLL_TEST_PNPf_GET(r) ((((r).ams_pll_ctl_5_gen2[0]) >> 4) & 0x3)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_5_GEN2r_AMS_PLL_TEST_PNPf_SET(r,f) (r).ams_pll_ctl_5_gen2[0]=(((r).ams_pll_ctl_5_gen2[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_5_GEN2r_AMS_PLL_VBYPASSf_GET(r) ((((r).ams_pll_ctl_5_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_5_GEN2r_AMS_PLL_VBYPASSf_SET(r,f) (r).ams_pll_ctl_5_gen2[0]=(((r).ams_pll_ctl_5_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_5_GEN2r_AMS_PLL_BGINTf_GET(r) ((((r).ams_pll_ctl_5_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_5_GEN2r_AMS_PLL_BGINTf_SET(r,f) (r).ams_pll_ctl_5_gen2[0]=(((r).ams_pll_ctl_5_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_5_GEN2r_AMS_PLL_BGIPf_GET(r) ((((r).ams_pll_ctl_5_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_5_GEN2r_AMS_PLL_BGIPf_SET(r,f) (r).ams_pll_ctl_5_gen2[0]=(((r).ams_pll_ctl_5_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_5_GEN2r_AMS_PLL_TEST_PORT_MAX_AMPLITUDEf_GET(r) (((r).ams_pll_ctl_5_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_5_GEN2r_AMS_PLL_TEST_PORT_MAX_AMPLITUDEf_SET(r,f) (r).ams_pll_ctl_5_gen2[0]=(((r).ams_pll_ctl_5_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AMS_PLL_CTL_5_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AMS_PLL_CTL_5_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AMS_PLL_CTL_5_GEN2r,(_r._ams_pll_ctl_5_gen2))
#define BCMI_TSCF_XGXS_WRITE_AMS_PLL_CTL_5_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_PLL_CTL_5_GEN2r,(_r._ams_pll_ctl_5_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AMS_PLL_CTL_5_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_PLL_CTL_5_GEN2r,(_r._ams_pll_ctl_5_gen2))
#define BCMI_TSCF_XGXS_READLN_AMS_PLL_CTL_5_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AMS_PLL_CTL_5_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_ctl_5_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AMS_PLL_CTL_5_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_PLL_CTL_5_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_ctl_5_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AMS_PLL_CTL_5_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_PLL_CTL_5_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_pll_ctl_5_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_PLL_CTL_5_GEN2r BCMI_TSCF_XGXS_AMS_PLL_CTL_5_GEN2r
#define AMS_PLL_CTL_5_GEN2r_SIZE BCMI_TSCF_XGXS_AMS_PLL_CTL_5_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AMS_PLL_CTL_5_GEN2r_t AMS_PLL_CTL_5_GEN2r_t;
#define AMS_PLL_CTL_5_GEN2r_CLR BCMI_TSCF_XGXS_AMS_PLL_CTL_5_GEN2r_CLR
#define AMS_PLL_CTL_5_GEN2r_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_5_GEN2r_SET
#define AMS_PLL_CTL_5_GEN2r_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_5_GEN2r_GET
#define AMS_PLL_CTL_5_GEN2r_AMS_PLL_MIX3P1C_CALR_PTATADJf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_5_GEN2r_AMS_PLL_MIX3P1C_CALR_PTATADJf_GET
#define AMS_PLL_CTL_5_GEN2r_AMS_PLL_MIX3P1C_CALR_PTATADJf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_5_GEN2r_AMS_PLL_MIX3P1C_CALR_PTATADJf_SET
#define AMS_PLL_CTL_5_GEN2r_AMS_PLL_MIX3P1C_CALR_CTATADJf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_5_GEN2r_AMS_PLL_MIX3P1C_CALR_CTATADJf_GET
#define AMS_PLL_CTL_5_GEN2r_AMS_PLL_MIX3P1C_CALR_CTATADJf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_5_GEN2r_AMS_PLL_MIX3P1C_CALR_CTATADJf_SET
#define AMS_PLL_CTL_5_GEN2r_AMS_PLL_TEST_PNPf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_5_GEN2r_AMS_PLL_TEST_PNPf_GET
#define AMS_PLL_CTL_5_GEN2r_AMS_PLL_TEST_PNPf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_5_GEN2r_AMS_PLL_TEST_PNPf_SET
#define AMS_PLL_CTL_5_GEN2r_AMS_PLL_VBYPASSf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_5_GEN2r_AMS_PLL_VBYPASSf_GET
#define AMS_PLL_CTL_5_GEN2r_AMS_PLL_VBYPASSf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_5_GEN2r_AMS_PLL_VBYPASSf_SET
#define AMS_PLL_CTL_5_GEN2r_AMS_PLL_BGINTf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_5_GEN2r_AMS_PLL_BGINTf_GET
#define AMS_PLL_CTL_5_GEN2r_AMS_PLL_BGINTf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_5_GEN2r_AMS_PLL_BGINTf_SET
#define AMS_PLL_CTL_5_GEN2r_AMS_PLL_BGIPf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_5_GEN2r_AMS_PLL_BGIPf_GET
#define AMS_PLL_CTL_5_GEN2r_AMS_PLL_BGIPf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_5_GEN2r_AMS_PLL_BGIPf_SET
#define AMS_PLL_CTL_5_GEN2r_AMS_PLL_TEST_PORT_MAX_AMPLITUDEf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_5_GEN2r_AMS_PLL_TEST_PORT_MAX_AMPLITUDEf_GET
#define AMS_PLL_CTL_5_GEN2r_AMS_PLL_TEST_PORT_MAX_AMPLITUDEf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_5_GEN2r_AMS_PLL_TEST_PORT_MAX_AMPLITUDEf_SET
#define READ_AMS_PLL_CTL_5_GEN2r BCMI_TSCF_XGXS_READ_AMS_PLL_CTL_5_GEN2r
#define WRITE_AMS_PLL_CTL_5_GEN2r BCMI_TSCF_XGXS_WRITE_AMS_PLL_CTL_5_GEN2r
#define MODIFY_AMS_PLL_CTL_5_GEN2r BCMI_TSCF_XGXS_MODIFY_AMS_PLL_CTL_5_GEN2r
#define READLN_AMS_PLL_CTL_5_GEN2r BCMI_TSCF_XGXS_READLN_AMS_PLL_CTL_5_GEN2r
#define WRITELN_AMS_PLL_CTL_5_GEN2r BCMI_TSCF_XGXS_WRITELN_AMS_PLL_CTL_5_GEN2r
#define WRITEALL_AMS_PLL_CTL_5_GEN2r BCMI_TSCF_XGXS_WRITEALL_AMS_PLL_CTL_5_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AMS_PLL_CTL_5_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AMS_PLL_CTL_6_GEN2
 * BLOCKS:   AMS_COM
 * REGADDR:  0xd116
 * DEVAD:    1
 * DESC:     AMS PLL CONTROL_6
 * RESETVAL: 0xc1c0 (49600)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_PLL_SPARE_101_96 AMS reserved[101:96]
 *     AMS_PLL_MIX1P2CR_CTATADJ CTAT bias control for Mix1P2C/R
 *     AMS_PLL_MIX1P2CR_PTATADJ PTAT bias control for Mix1P2C/R
 */
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_6_GEN2r (0x0001d116 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AMS_PLL_CTL_6_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AMS_PLL_CTL_6_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AMS_PLL_CTL_6_GEN2r_s {
	uint32_t v[1];
	uint32_t ams_pll_ctl_6_gen2[1];
	uint32_t _ams_pll_ctl_6_gen2;
} BCMI_TSCF_XGXS_AMS_PLL_CTL_6_GEN2r_t;

#define BCMI_TSCF_XGXS_AMS_PLL_CTL_6_GEN2r_CLR(r) (r).ams_pll_ctl_6_gen2[0] = 0
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_6_GEN2r_SET(r,d) (r).ams_pll_ctl_6_gen2[0] = d
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_6_GEN2r_GET(r) (r).ams_pll_ctl_6_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_6_GEN2r_AMS_PLL_MIX1P2CR_PTATADJf_GET(r) ((((r).ams_pll_ctl_6_gen2[0]) >> 11) & 0x1f)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_6_GEN2r_AMS_PLL_MIX1P2CR_PTATADJf_SET(r,f) (r).ams_pll_ctl_6_gen2[0]=(((r).ams_pll_ctl_6_gen2[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11)) | (31 << (16 + 11))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_6_GEN2r_AMS_PLL_MIX1P2CR_CTATADJf_GET(r) ((((r).ams_pll_ctl_6_gen2[0]) >> 6) & 0x1f)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_6_GEN2r_AMS_PLL_MIX1P2CR_CTATADJf_SET(r,f) (r).ams_pll_ctl_6_gen2[0]=(((r).ams_pll_ctl_6_gen2[0] & ~((uint32_t)0x1f << 6)) | ((((uint32_t)f) & 0x1f) << 6)) | (31 << (16 + 6))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_6_GEN2r_AMS_PLL_SPARE_101_96f_GET(r) (((r).ams_pll_ctl_6_gen2[0]) & 0x3f)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_6_GEN2r_AMS_PLL_SPARE_101_96f_SET(r,f) (r).ams_pll_ctl_6_gen2[0]=(((r).ams_pll_ctl_6_gen2[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access AMS_PLL_CTL_6_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AMS_PLL_CTL_6_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AMS_PLL_CTL_6_GEN2r,(_r._ams_pll_ctl_6_gen2))
#define BCMI_TSCF_XGXS_WRITE_AMS_PLL_CTL_6_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_PLL_CTL_6_GEN2r,(_r._ams_pll_ctl_6_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AMS_PLL_CTL_6_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_PLL_CTL_6_GEN2r,(_r._ams_pll_ctl_6_gen2))
#define BCMI_TSCF_XGXS_READLN_AMS_PLL_CTL_6_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AMS_PLL_CTL_6_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_ctl_6_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AMS_PLL_CTL_6_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_PLL_CTL_6_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_ctl_6_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AMS_PLL_CTL_6_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_PLL_CTL_6_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_pll_ctl_6_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_PLL_CTL_6_GEN2r BCMI_TSCF_XGXS_AMS_PLL_CTL_6_GEN2r
#define AMS_PLL_CTL_6_GEN2r_SIZE BCMI_TSCF_XGXS_AMS_PLL_CTL_6_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AMS_PLL_CTL_6_GEN2r_t AMS_PLL_CTL_6_GEN2r_t;
#define AMS_PLL_CTL_6_GEN2r_CLR BCMI_TSCF_XGXS_AMS_PLL_CTL_6_GEN2r_CLR
#define AMS_PLL_CTL_6_GEN2r_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_6_GEN2r_SET
#define AMS_PLL_CTL_6_GEN2r_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_6_GEN2r_GET
#define AMS_PLL_CTL_6_GEN2r_AMS_PLL_MIX1P2CR_PTATADJf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_6_GEN2r_AMS_PLL_MIX1P2CR_PTATADJf_GET
#define AMS_PLL_CTL_6_GEN2r_AMS_PLL_MIX1P2CR_PTATADJf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_6_GEN2r_AMS_PLL_MIX1P2CR_PTATADJf_SET
#define AMS_PLL_CTL_6_GEN2r_AMS_PLL_MIX1P2CR_CTATADJf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_6_GEN2r_AMS_PLL_MIX1P2CR_CTATADJf_GET
#define AMS_PLL_CTL_6_GEN2r_AMS_PLL_MIX1P2CR_CTATADJf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_6_GEN2r_AMS_PLL_MIX1P2CR_CTATADJf_SET
#define AMS_PLL_CTL_6_GEN2r_AMS_PLL_SPARE_101_96f_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_6_GEN2r_AMS_PLL_SPARE_101_96f_GET
#define AMS_PLL_CTL_6_GEN2r_AMS_PLL_SPARE_101_96f_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_6_GEN2r_AMS_PLL_SPARE_101_96f_SET
#define READ_AMS_PLL_CTL_6_GEN2r BCMI_TSCF_XGXS_READ_AMS_PLL_CTL_6_GEN2r
#define WRITE_AMS_PLL_CTL_6_GEN2r BCMI_TSCF_XGXS_WRITE_AMS_PLL_CTL_6_GEN2r
#define MODIFY_AMS_PLL_CTL_6_GEN2r BCMI_TSCF_XGXS_MODIFY_AMS_PLL_CTL_6_GEN2r
#define READLN_AMS_PLL_CTL_6_GEN2r BCMI_TSCF_XGXS_READLN_AMS_PLL_CTL_6_GEN2r
#define WRITELN_AMS_PLL_CTL_6_GEN2r BCMI_TSCF_XGXS_WRITELN_AMS_PLL_CTL_6_GEN2r
#define WRITEALL_AMS_PLL_CTL_6_GEN2r BCMI_TSCF_XGXS_WRITEALL_AMS_PLL_CTL_6_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AMS_PLL_CTL_6_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AMS_PLL_CTL_7_GEN2
 * BLOCKS:   AMS_COM
 * REGADDR:  0xd117
 * DEVAD:    1
 * DESC:     AMS PLL CONTROL_7
 * RESETVAL: 0x1f00 (7936)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_PLL_SPARE_117_112 AMS reserved[117:112]
 *     AMS_PLL_MIX3P1CR_CTATADJ CTAT bias control for Mix3P1C/R
 *     AMS_PLL_MIX3P1CR_PTATADJ PTAT bias control for Mix3P1C/R
 */
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_7_GEN2r (0x0001d117 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AMS_PLL_CTL_7_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AMS_PLL_CTL_7_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AMS_PLL_CTL_7_GEN2r_s {
	uint32_t v[1];
	uint32_t ams_pll_ctl_7_gen2[1];
	uint32_t _ams_pll_ctl_7_gen2;
} BCMI_TSCF_XGXS_AMS_PLL_CTL_7_GEN2r_t;

#define BCMI_TSCF_XGXS_AMS_PLL_CTL_7_GEN2r_CLR(r) (r).ams_pll_ctl_7_gen2[0] = 0
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_7_GEN2r_SET(r,d) (r).ams_pll_ctl_7_gen2[0] = d
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_7_GEN2r_GET(r) (r).ams_pll_ctl_7_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_7_GEN2r_AMS_PLL_MIX3P1CR_PTATADJf_GET(r) ((((r).ams_pll_ctl_7_gen2[0]) >> 11) & 0x1f)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_7_GEN2r_AMS_PLL_MIX3P1CR_PTATADJf_SET(r,f) (r).ams_pll_ctl_7_gen2[0]=(((r).ams_pll_ctl_7_gen2[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11)) | (31 << (16 + 11))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_7_GEN2r_AMS_PLL_MIX3P1CR_CTATADJf_GET(r) ((((r).ams_pll_ctl_7_gen2[0]) >> 6) & 0x1f)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_7_GEN2r_AMS_PLL_MIX3P1CR_CTATADJf_SET(r,f) (r).ams_pll_ctl_7_gen2[0]=(((r).ams_pll_ctl_7_gen2[0] & ~((uint32_t)0x1f << 6)) | ((((uint32_t)f) & 0x1f) << 6)) | (31 << (16 + 6))
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_7_GEN2r_AMS_PLL_SPARE_117_112f_GET(r) (((r).ams_pll_ctl_7_gen2[0]) & 0x3f)
#define BCMI_TSCF_XGXS_AMS_PLL_CTL_7_GEN2r_AMS_PLL_SPARE_117_112f_SET(r,f) (r).ams_pll_ctl_7_gen2[0]=(((r).ams_pll_ctl_7_gen2[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access AMS_PLL_CTL_7_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AMS_PLL_CTL_7_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AMS_PLL_CTL_7_GEN2r,(_r._ams_pll_ctl_7_gen2))
#define BCMI_TSCF_XGXS_WRITE_AMS_PLL_CTL_7_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_PLL_CTL_7_GEN2r,(_r._ams_pll_ctl_7_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AMS_PLL_CTL_7_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_PLL_CTL_7_GEN2r,(_r._ams_pll_ctl_7_gen2))
#define BCMI_TSCF_XGXS_READLN_AMS_PLL_CTL_7_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AMS_PLL_CTL_7_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_ctl_7_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AMS_PLL_CTL_7_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_PLL_CTL_7_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_ctl_7_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AMS_PLL_CTL_7_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_PLL_CTL_7_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_pll_ctl_7_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_PLL_CTL_7_GEN2r BCMI_TSCF_XGXS_AMS_PLL_CTL_7_GEN2r
#define AMS_PLL_CTL_7_GEN2r_SIZE BCMI_TSCF_XGXS_AMS_PLL_CTL_7_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AMS_PLL_CTL_7_GEN2r_t AMS_PLL_CTL_7_GEN2r_t;
#define AMS_PLL_CTL_7_GEN2r_CLR BCMI_TSCF_XGXS_AMS_PLL_CTL_7_GEN2r_CLR
#define AMS_PLL_CTL_7_GEN2r_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_7_GEN2r_SET
#define AMS_PLL_CTL_7_GEN2r_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_7_GEN2r_GET
#define AMS_PLL_CTL_7_GEN2r_AMS_PLL_MIX3P1CR_PTATADJf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_7_GEN2r_AMS_PLL_MIX3P1CR_PTATADJf_GET
#define AMS_PLL_CTL_7_GEN2r_AMS_PLL_MIX3P1CR_PTATADJf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_7_GEN2r_AMS_PLL_MIX3P1CR_PTATADJf_SET
#define AMS_PLL_CTL_7_GEN2r_AMS_PLL_MIX3P1CR_CTATADJf_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_7_GEN2r_AMS_PLL_MIX3P1CR_CTATADJf_GET
#define AMS_PLL_CTL_7_GEN2r_AMS_PLL_MIX3P1CR_CTATADJf_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_7_GEN2r_AMS_PLL_MIX3P1CR_CTATADJf_SET
#define AMS_PLL_CTL_7_GEN2r_AMS_PLL_SPARE_117_112f_GET BCMI_TSCF_XGXS_AMS_PLL_CTL_7_GEN2r_AMS_PLL_SPARE_117_112f_GET
#define AMS_PLL_CTL_7_GEN2r_AMS_PLL_SPARE_117_112f_SET BCMI_TSCF_XGXS_AMS_PLL_CTL_7_GEN2r_AMS_PLL_SPARE_117_112f_SET
#define READ_AMS_PLL_CTL_7_GEN2r BCMI_TSCF_XGXS_READ_AMS_PLL_CTL_7_GEN2r
#define WRITE_AMS_PLL_CTL_7_GEN2r BCMI_TSCF_XGXS_WRITE_AMS_PLL_CTL_7_GEN2r
#define MODIFY_AMS_PLL_CTL_7_GEN2r BCMI_TSCF_XGXS_MODIFY_AMS_PLL_CTL_7_GEN2r
#define READLN_AMS_PLL_CTL_7_GEN2r BCMI_TSCF_XGXS_READLN_AMS_PLL_CTL_7_GEN2r
#define WRITELN_AMS_PLL_CTL_7_GEN2r BCMI_TSCF_XGXS_WRITELN_AMS_PLL_CTL_7_GEN2r
#define WRITEALL_AMS_PLL_CTL_7_GEN2r BCMI_TSCF_XGXS_WRITEALL_AMS_PLL_CTL_7_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AMS_PLL_CTL_7_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  AMS_PLL_STS_GEN2
 * BLOCKS:   AMS_COM
 * REGADDR:  0xd119
 * DEVAD:    1
 * DESC:     AMS PLL STATUS
 * RESETVAL: 0x7 (7)
 * ACCESS:   R/O
 * FIELDS:
 *     AMS_PLL_NDIV     Copy of pll_mode[3:0] bits
 *     AMS_PLL_LOW      VCO turning output, HI when VCO Vctrl is low or PLL freq is too low
 *     AMS_PLL_RANGE    VCO frequency range control (8 bits)
 *     AMS_PLL_KVH      KVH[1:0]
 */
#define BCMI_TSCF_XGXS_AMS_PLL_STS_GEN2r (0x0001d119 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_AMS_PLL_STS_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program AMS_PLL_STS_GEN2.
 */
typedef union BCMI_TSCF_XGXS_AMS_PLL_STS_GEN2r_s {
	uint32_t v[1];
	uint32_t ams_pll_sts_gen2[1];
	uint32_t _ams_pll_sts_gen2;
} BCMI_TSCF_XGXS_AMS_PLL_STS_GEN2r_t;

#define BCMI_TSCF_XGXS_AMS_PLL_STS_GEN2r_CLR(r) (r).ams_pll_sts_gen2[0] = 0
#define BCMI_TSCF_XGXS_AMS_PLL_STS_GEN2r_SET(r,d) (r).ams_pll_sts_gen2[0] = d
#define BCMI_TSCF_XGXS_AMS_PLL_STS_GEN2r_GET(r) (r).ams_pll_sts_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_AMS_PLL_STS_GEN2r_AMS_PLL_KVHf_GET(r) ((((r).ams_pll_sts_gen2[0]) >> 14) & 0x3)
#define BCMI_TSCF_XGXS_AMS_PLL_STS_GEN2r_AMS_PLL_KVHf_SET(r,f) (r).ams_pll_sts_gen2[0]=(((r).ams_pll_sts_gen2[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_TSCF_XGXS_AMS_PLL_STS_GEN2r_AMS_PLL_RANGEf_GET(r) ((((r).ams_pll_sts_gen2[0]) >> 6) & 0xff)
#define BCMI_TSCF_XGXS_AMS_PLL_STS_GEN2r_AMS_PLL_RANGEf_SET(r,f) (r).ams_pll_sts_gen2[0]=(((r).ams_pll_sts_gen2[0] & ~((uint32_t)0xff << 6)) | ((((uint32_t)f) & 0xff) << 6)) | (255 << (16 + 6))
#define BCMI_TSCF_XGXS_AMS_PLL_STS_GEN2r_AMS_PLL_LOWf_GET(r) ((((r).ams_pll_sts_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_AMS_PLL_STS_GEN2r_AMS_PLL_LOWf_SET(r,f) (r).ams_pll_sts_gen2[0]=(((r).ams_pll_sts_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_AMS_PLL_STS_GEN2r_AMS_PLL_NDIVf_GET(r) (((r).ams_pll_sts_gen2[0]) & 0xf)
#define BCMI_TSCF_XGXS_AMS_PLL_STS_GEN2r_AMS_PLL_NDIVf_SET(r,f) (r).ams_pll_sts_gen2[0]=(((r).ams_pll_sts_gen2[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access AMS_PLL_STS_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_AMS_PLL_STS_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AMS_PLL_STS_GEN2r,(_r._ams_pll_sts_gen2))
#define BCMI_TSCF_XGXS_WRITE_AMS_PLL_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_PLL_STS_GEN2r,(_r._ams_pll_sts_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_AMS_PLL_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_PLL_STS_GEN2r,(_r._ams_pll_sts_gen2))
#define BCMI_TSCF_XGXS_READLN_AMS_PLL_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_AMS_PLL_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_sts_gen2))
#define BCMI_TSCF_XGXS_WRITELN_AMS_PLL_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_PLL_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_sts_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_AMS_PLL_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_AMS_PLL_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_pll_sts_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_PLL_STS_GEN2r BCMI_TSCF_XGXS_AMS_PLL_STS_GEN2r
#define AMS_PLL_STS_GEN2r_SIZE BCMI_TSCF_XGXS_AMS_PLL_STS_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_AMS_PLL_STS_GEN2r_t AMS_PLL_STS_GEN2r_t;
#define AMS_PLL_STS_GEN2r_CLR BCMI_TSCF_XGXS_AMS_PLL_STS_GEN2r_CLR
#define AMS_PLL_STS_GEN2r_SET BCMI_TSCF_XGXS_AMS_PLL_STS_GEN2r_SET
#define AMS_PLL_STS_GEN2r_GET BCMI_TSCF_XGXS_AMS_PLL_STS_GEN2r_GET
#define AMS_PLL_STS_GEN2r_AMS_PLL_KVHf_GET BCMI_TSCF_XGXS_AMS_PLL_STS_GEN2r_AMS_PLL_KVHf_GET
#define AMS_PLL_STS_GEN2r_AMS_PLL_KVHf_SET BCMI_TSCF_XGXS_AMS_PLL_STS_GEN2r_AMS_PLL_KVHf_SET
#define AMS_PLL_STS_GEN2r_AMS_PLL_RANGEf_GET BCMI_TSCF_XGXS_AMS_PLL_STS_GEN2r_AMS_PLL_RANGEf_GET
#define AMS_PLL_STS_GEN2r_AMS_PLL_RANGEf_SET BCMI_TSCF_XGXS_AMS_PLL_STS_GEN2r_AMS_PLL_RANGEf_SET
#define AMS_PLL_STS_GEN2r_AMS_PLL_LOWf_GET BCMI_TSCF_XGXS_AMS_PLL_STS_GEN2r_AMS_PLL_LOWf_GET
#define AMS_PLL_STS_GEN2r_AMS_PLL_LOWf_SET BCMI_TSCF_XGXS_AMS_PLL_STS_GEN2r_AMS_PLL_LOWf_SET
#define AMS_PLL_STS_GEN2r_AMS_PLL_NDIVf_GET BCMI_TSCF_XGXS_AMS_PLL_STS_GEN2r_AMS_PLL_NDIVf_GET
#define AMS_PLL_STS_GEN2r_AMS_PLL_NDIVf_SET BCMI_TSCF_XGXS_AMS_PLL_STS_GEN2r_AMS_PLL_NDIVf_SET
#define READ_AMS_PLL_STS_GEN2r BCMI_TSCF_XGXS_READ_AMS_PLL_STS_GEN2r
#define WRITE_AMS_PLL_STS_GEN2r BCMI_TSCF_XGXS_WRITE_AMS_PLL_STS_GEN2r
#define MODIFY_AMS_PLL_STS_GEN2r BCMI_TSCF_XGXS_MODIFY_AMS_PLL_STS_GEN2r
#define READLN_AMS_PLL_STS_GEN2r BCMI_TSCF_XGXS_READLN_AMS_PLL_STS_GEN2r
#define WRITELN_AMS_PLL_STS_GEN2r BCMI_TSCF_XGXS_WRITELN_AMS_PLL_STS_GEN2r
#define WRITEALL_AMS_PLL_STS_GEN2r BCMI_TSCF_XGXS_WRITEALL_AMS_PLL_STS_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_AMS_PLL_STS_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PATT_GEN_SEQ_0_GEN2
 * BLOCKS:   PATT_GEN_COM
 * REGADDR:  0xd120
 * DEVAD:    1
 * DESC:     Pattern Generator Sequence Word 0
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/W
 * FIELDS:
 *     PATT_GEN_SEQ_0   Fixed Pattern Generator Sequence Word 0. MSB bits will be transmitted first on serial transmit lane in both shared and slice mode. This word will be transmitted last.
 */
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_0_GEN2r (0x0001d120 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PATT_GEN_SEQ_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PATT_GEN_SEQ_0_GEN2r_s {
	uint32_t v[1];
	uint32_t patt_gen_seq_0_gen2[1];
	uint32_t _patt_gen_seq_0_gen2;
} BCMI_TSCF_XGXS_PATT_GEN_SEQ_0_GEN2r_t;

#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_0_GEN2r_CLR(r) (r).patt_gen_seq_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_0_GEN2r_SET(r,d) (r).patt_gen_seq_0_gen2[0] = d
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_0_GEN2r_GET(r) (r).patt_gen_seq_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_0_GEN2r_PATT_GEN_SEQ_0f_GET(r) (((r).patt_gen_seq_0_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_0_GEN2r_PATT_GEN_SEQ_0f_SET(r,f) (r).patt_gen_seq_0_gen2[0]=(((r).patt_gen_seq_0_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PATT_GEN_SEQ_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PATT_GEN_SEQ_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_0_GEN2r,(_r._patt_gen_seq_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_PATT_GEN_SEQ_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_0_GEN2r,(_r._patt_gen_seq_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PATT_GEN_SEQ_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_0_GEN2r,(_r._patt_gen_seq_0_gen2))
#define BCMI_TSCF_XGXS_READLN_PATT_GEN_SEQ_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_seq_0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_PATT_GEN_SEQ_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_seq_0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_PATT_GEN_SEQ_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._patt_gen_seq_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PATT_GEN_SEQ_0_GEN2r BCMI_TSCF_XGXS_PATT_GEN_SEQ_0_GEN2r
#define PATT_GEN_SEQ_0_GEN2r_SIZE BCMI_TSCF_XGXS_PATT_GEN_SEQ_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PATT_GEN_SEQ_0_GEN2r_t PATT_GEN_SEQ_0_GEN2r_t;
#define PATT_GEN_SEQ_0_GEN2r_CLR BCMI_TSCF_XGXS_PATT_GEN_SEQ_0_GEN2r_CLR
#define PATT_GEN_SEQ_0_GEN2r_SET BCMI_TSCF_XGXS_PATT_GEN_SEQ_0_GEN2r_SET
#define PATT_GEN_SEQ_0_GEN2r_GET BCMI_TSCF_XGXS_PATT_GEN_SEQ_0_GEN2r_GET
#define PATT_GEN_SEQ_0_GEN2r_PATT_GEN_SEQ_0f_GET BCMI_TSCF_XGXS_PATT_GEN_SEQ_0_GEN2r_PATT_GEN_SEQ_0f_GET
#define PATT_GEN_SEQ_0_GEN2r_PATT_GEN_SEQ_0f_SET BCMI_TSCF_XGXS_PATT_GEN_SEQ_0_GEN2r_PATT_GEN_SEQ_0f_SET
#define READ_PATT_GEN_SEQ_0_GEN2r BCMI_TSCF_XGXS_READ_PATT_GEN_SEQ_0_GEN2r
#define WRITE_PATT_GEN_SEQ_0_GEN2r BCMI_TSCF_XGXS_WRITE_PATT_GEN_SEQ_0_GEN2r
#define MODIFY_PATT_GEN_SEQ_0_GEN2r BCMI_TSCF_XGXS_MODIFY_PATT_GEN_SEQ_0_GEN2r
#define READLN_PATT_GEN_SEQ_0_GEN2r BCMI_TSCF_XGXS_READLN_PATT_GEN_SEQ_0_GEN2r
#define WRITELN_PATT_GEN_SEQ_0_GEN2r BCMI_TSCF_XGXS_WRITELN_PATT_GEN_SEQ_0_GEN2r
#define WRITEALL_PATT_GEN_SEQ_0_GEN2r BCMI_TSCF_XGXS_WRITEALL_PATT_GEN_SEQ_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PATT_GEN_SEQ_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PATT_GEN_SEQ_1_GEN2
 * BLOCKS:   PATT_GEN_COM
 * REGADDR:  0xd121
 * DEVAD:    1
 * DESC:     Pattern Generator Sequence Word 1
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/W
 * FIELDS:
 *     PATT_GEN_SEQ_1   Fixed Pattern Generator Sequence Word 1. MSB bits will be transmitted first on serial transmit lane in both shared and slice mode.
 */
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_1_GEN2r (0x0001d121 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PATT_GEN_SEQ_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PATT_GEN_SEQ_1_GEN2r_s {
	uint32_t v[1];
	uint32_t patt_gen_seq_1_gen2[1];
	uint32_t _patt_gen_seq_1_gen2;
} BCMI_TSCF_XGXS_PATT_GEN_SEQ_1_GEN2r_t;

#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_1_GEN2r_CLR(r) (r).patt_gen_seq_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_1_GEN2r_SET(r,d) (r).patt_gen_seq_1_gen2[0] = d
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_1_GEN2r_GET(r) (r).patt_gen_seq_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_1_GEN2r_PATT_GEN_SEQ_1f_GET(r) (((r).patt_gen_seq_1_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_1_GEN2r_PATT_GEN_SEQ_1f_SET(r,f) (r).patt_gen_seq_1_gen2[0]=(((r).patt_gen_seq_1_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PATT_GEN_SEQ_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PATT_GEN_SEQ_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_1_GEN2r,(_r._patt_gen_seq_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_PATT_GEN_SEQ_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_1_GEN2r,(_r._patt_gen_seq_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PATT_GEN_SEQ_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_1_GEN2r,(_r._patt_gen_seq_1_gen2))
#define BCMI_TSCF_XGXS_READLN_PATT_GEN_SEQ_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_seq_1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_PATT_GEN_SEQ_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_seq_1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_PATT_GEN_SEQ_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._patt_gen_seq_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PATT_GEN_SEQ_1_GEN2r BCMI_TSCF_XGXS_PATT_GEN_SEQ_1_GEN2r
#define PATT_GEN_SEQ_1_GEN2r_SIZE BCMI_TSCF_XGXS_PATT_GEN_SEQ_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PATT_GEN_SEQ_1_GEN2r_t PATT_GEN_SEQ_1_GEN2r_t;
#define PATT_GEN_SEQ_1_GEN2r_CLR BCMI_TSCF_XGXS_PATT_GEN_SEQ_1_GEN2r_CLR
#define PATT_GEN_SEQ_1_GEN2r_SET BCMI_TSCF_XGXS_PATT_GEN_SEQ_1_GEN2r_SET
#define PATT_GEN_SEQ_1_GEN2r_GET BCMI_TSCF_XGXS_PATT_GEN_SEQ_1_GEN2r_GET
#define PATT_GEN_SEQ_1_GEN2r_PATT_GEN_SEQ_1f_GET BCMI_TSCF_XGXS_PATT_GEN_SEQ_1_GEN2r_PATT_GEN_SEQ_1f_GET
#define PATT_GEN_SEQ_1_GEN2r_PATT_GEN_SEQ_1f_SET BCMI_TSCF_XGXS_PATT_GEN_SEQ_1_GEN2r_PATT_GEN_SEQ_1f_SET
#define READ_PATT_GEN_SEQ_1_GEN2r BCMI_TSCF_XGXS_READ_PATT_GEN_SEQ_1_GEN2r
#define WRITE_PATT_GEN_SEQ_1_GEN2r BCMI_TSCF_XGXS_WRITE_PATT_GEN_SEQ_1_GEN2r
#define MODIFY_PATT_GEN_SEQ_1_GEN2r BCMI_TSCF_XGXS_MODIFY_PATT_GEN_SEQ_1_GEN2r
#define READLN_PATT_GEN_SEQ_1_GEN2r BCMI_TSCF_XGXS_READLN_PATT_GEN_SEQ_1_GEN2r
#define WRITELN_PATT_GEN_SEQ_1_GEN2r BCMI_TSCF_XGXS_WRITELN_PATT_GEN_SEQ_1_GEN2r
#define WRITEALL_PATT_GEN_SEQ_1_GEN2r BCMI_TSCF_XGXS_WRITEALL_PATT_GEN_SEQ_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PATT_GEN_SEQ_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PATT_GEN_SEQ_2_GEN2
 * BLOCKS:   PATT_GEN_COM
 * REGADDR:  0xd122
 * DEVAD:    1
 * DESC:     Pattern Generator Sequence Word 2
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/W
 * FIELDS:
 *     PATT_GEN_SEQ_2   Fixed Pattern Generator Sequence Word 2. MSB bits will be transmitted first on serial transmit lane in both shared and slice mode.
 */
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_2_GEN2r (0x0001d122 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PATT_GEN_SEQ_2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PATT_GEN_SEQ_2_GEN2r_s {
	uint32_t v[1];
	uint32_t patt_gen_seq_2_gen2[1];
	uint32_t _patt_gen_seq_2_gen2;
} BCMI_TSCF_XGXS_PATT_GEN_SEQ_2_GEN2r_t;

#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_2_GEN2r_CLR(r) (r).patt_gen_seq_2_gen2[0] = 0
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_2_GEN2r_SET(r,d) (r).patt_gen_seq_2_gen2[0] = d
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_2_GEN2r_GET(r) (r).patt_gen_seq_2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_2_GEN2r_PATT_GEN_SEQ_2f_GET(r) (((r).patt_gen_seq_2_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_2_GEN2r_PATT_GEN_SEQ_2f_SET(r,f) (r).patt_gen_seq_2_gen2[0]=(((r).patt_gen_seq_2_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PATT_GEN_SEQ_2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PATT_GEN_SEQ_2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_2_GEN2r,(_r._patt_gen_seq_2_gen2))
#define BCMI_TSCF_XGXS_WRITE_PATT_GEN_SEQ_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_2_GEN2r,(_r._patt_gen_seq_2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PATT_GEN_SEQ_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_2_GEN2r,(_r._patt_gen_seq_2_gen2))
#define BCMI_TSCF_XGXS_READLN_PATT_GEN_SEQ_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_seq_2_gen2))
#define BCMI_TSCF_XGXS_WRITELN_PATT_GEN_SEQ_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_seq_2_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_PATT_GEN_SEQ_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._patt_gen_seq_2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PATT_GEN_SEQ_2_GEN2r BCMI_TSCF_XGXS_PATT_GEN_SEQ_2_GEN2r
#define PATT_GEN_SEQ_2_GEN2r_SIZE BCMI_TSCF_XGXS_PATT_GEN_SEQ_2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PATT_GEN_SEQ_2_GEN2r_t PATT_GEN_SEQ_2_GEN2r_t;
#define PATT_GEN_SEQ_2_GEN2r_CLR BCMI_TSCF_XGXS_PATT_GEN_SEQ_2_GEN2r_CLR
#define PATT_GEN_SEQ_2_GEN2r_SET BCMI_TSCF_XGXS_PATT_GEN_SEQ_2_GEN2r_SET
#define PATT_GEN_SEQ_2_GEN2r_GET BCMI_TSCF_XGXS_PATT_GEN_SEQ_2_GEN2r_GET
#define PATT_GEN_SEQ_2_GEN2r_PATT_GEN_SEQ_2f_GET BCMI_TSCF_XGXS_PATT_GEN_SEQ_2_GEN2r_PATT_GEN_SEQ_2f_GET
#define PATT_GEN_SEQ_2_GEN2r_PATT_GEN_SEQ_2f_SET BCMI_TSCF_XGXS_PATT_GEN_SEQ_2_GEN2r_PATT_GEN_SEQ_2f_SET
#define READ_PATT_GEN_SEQ_2_GEN2r BCMI_TSCF_XGXS_READ_PATT_GEN_SEQ_2_GEN2r
#define WRITE_PATT_GEN_SEQ_2_GEN2r BCMI_TSCF_XGXS_WRITE_PATT_GEN_SEQ_2_GEN2r
#define MODIFY_PATT_GEN_SEQ_2_GEN2r BCMI_TSCF_XGXS_MODIFY_PATT_GEN_SEQ_2_GEN2r
#define READLN_PATT_GEN_SEQ_2_GEN2r BCMI_TSCF_XGXS_READLN_PATT_GEN_SEQ_2_GEN2r
#define WRITELN_PATT_GEN_SEQ_2_GEN2r BCMI_TSCF_XGXS_WRITELN_PATT_GEN_SEQ_2_GEN2r
#define WRITEALL_PATT_GEN_SEQ_2_GEN2r BCMI_TSCF_XGXS_WRITEALL_PATT_GEN_SEQ_2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PATT_GEN_SEQ_2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PATT_GEN_SEQ_3_GEN2
 * BLOCKS:   PATT_GEN_COM
 * REGADDR:  0xd123
 * DEVAD:    1
 * DESC:     Pattern Generator Sequence Word 3
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/W
 * FIELDS:
 *     PATT_GEN_SEQ_3   Fixed Pattern Generator Sequence Word 3. MSB bits will be transmitted first on serial transmit lane in both shared and slice mode.
 */
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_3_GEN2r (0x0001d123 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_3_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PATT_GEN_SEQ_3_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PATT_GEN_SEQ_3_GEN2r_s {
	uint32_t v[1];
	uint32_t patt_gen_seq_3_gen2[1];
	uint32_t _patt_gen_seq_3_gen2;
} BCMI_TSCF_XGXS_PATT_GEN_SEQ_3_GEN2r_t;

#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_3_GEN2r_CLR(r) (r).patt_gen_seq_3_gen2[0] = 0
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_3_GEN2r_SET(r,d) (r).patt_gen_seq_3_gen2[0] = d
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_3_GEN2r_GET(r) (r).patt_gen_seq_3_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_3_GEN2r_PATT_GEN_SEQ_3f_GET(r) (((r).patt_gen_seq_3_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_3_GEN2r_PATT_GEN_SEQ_3f_SET(r,f) (r).patt_gen_seq_3_gen2[0]=(((r).patt_gen_seq_3_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PATT_GEN_SEQ_3_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PATT_GEN_SEQ_3_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_3_GEN2r,(_r._patt_gen_seq_3_gen2))
#define BCMI_TSCF_XGXS_WRITE_PATT_GEN_SEQ_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_3_GEN2r,(_r._patt_gen_seq_3_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PATT_GEN_SEQ_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_3_GEN2r,(_r._patt_gen_seq_3_gen2))
#define BCMI_TSCF_XGXS_READLN_PATT_GEN_SEQ_3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_seq_3_gen2))
#define BCMI_TSCF_XGXS_WRITELN_PATT_GEN_SEQ_3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_seq_3_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_PATT_GEN_SEQ_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._patt_gen_seq_3_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PATT_GEN_SEQ_3_GEN2r BCMI_TSCF_XGXS_PATT_GEN_SEQ_3_GEN2r
#define PATT_GEN_SEQ_3_GEN2r_SIZE BCMI_TSCF_XGXS_PATT_GEN_SEQ_3_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PATT_GEN_SEQ_3_GEN2r_t PATT_GEN_SEQ_3_GEN2r_t;
#define PATT_GEN_SEQ_3_GEN2r_CLR BCMI_TSCF_XGXS_PATT_GEN_SEQ_3_GEN2r_CLR
#define PATT_GEN_SEQ_3_GEN2r_SET BCMI_TSCF_XGXS_PATT_GEN_SEQ_3_GEN2r_SET
#define PATT_GEN_SEQ_3_GEN2r_GET BCMI_TSCF_XGXS_PATT_GEN_SEQ_3_GEN2r_GET
#define PATT_GEN_SEQ_3_GEN2r_PATT_GEN_SEQ_3f_GET BCMI_TSCF_XGXS_PATT_GEN_SEQ_3_GEN2r_PATT_GEN_SEQ_3f_GET
#define PATT_GEN_SEQ_3_GEN2r_PATT_GEN_SEQ_3f_SET BCMI_TSCF_XGXS_PATT_GEN_SEQ_3_GEN2r_PATT_GEN_SEQ_3f_SET
#define READ_PATT_GEN_SEQ_3_GEN2r BCMI_TSCF_XGXS_READ_PATT_GEN_SEQ_3_GEN2r
#define WRITE_PATT_GEN_SEQ_3_GEN2r BCMI_TSCF_XGXS_WRITE_PATT_GEN_SEQ_3_GEN2r
#define MODIFY_PATT_GEN_SEQ_3_GEN2r BCMI_TSCF_XGXS_MODIFY_PATT_GEN_SEQ_3_GEN2r
#define READLN_PATT_GEN_SEQ_3_GEN2r BCMI_TSCF_XGXS_READLN_PATT_GEN_SEQ_3_GEN2r
#define WRITELN_PATT_GEN_SEQ_3_GEN2r BCMI_TSCF_XGXS_WRITELN_PATT_GEN_SEQ_3_GEN2r
#define WRITEALL_PATT_GEN_SEQ_3_GEN2r BCMI_TSCF_XGXS_WRITEALL_PATT_GEN_SEQ_3_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PATT_GEN_SEQ_3_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PATT_GEN_SEQ_4_GEN2
 * BLOCKS:   PATT_GEN_COM
 * REGADDR:  0xd124
 * DEVAD:    1
 * DESC:     Pattern Generator Sequence Word 4
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/W
 * FIELDS:
 *     PATT_GEN_SEQ_4   Fixed Pattern Generator Sequence Word 4. MSB bits will be transmitted first on serial transmit lane in both shared and slice mode.
 */
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_4_GEN2r (0x0001d124 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_4_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PATT_GEN_SEQ_4_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PATT_GEN_SEQ_4_GEN2r_s {
	uint32_t v[1];
	uint32_t patt_gen_seq_4_gen2[1];
	uint32_t _patt_gen_seq_4_gen2;
} BCMI_TSCF_XGXS_PATT_GEN_SEQ_4_GEN2r_t;

#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_4_GEN2r_CLR(r) (r).patt_gen_seq_4_gen2[0] = 0
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_4_GEN2r_SET(r,d) (r).patt_gen_seq_4_gen2[0] = d
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_4_GEN2r_GET(r) (r).patt_gen_seq_4_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_4_GEN2r_PATT_GEN_SEQ_4f_GET(r) (((r).patt_gen_seq_4_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_4_GEN2r_PATT_GEN_SEQ_4f_SET(r,f) (r).patt_gen_seq_4_gen2[0]=(((r).patt_gen_seq_4_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PATT_GEN_SEQ_4_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PATT_GEN_SEQ_4_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_4_GEN2r,(_r._patt_gen_seq_4_gen2))
#define BCMI_TSCF_XGXS_WRITE_PATT_GEN_SEQ_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_4_GEN2r,(_r._patt_gen_seq_4_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PATT_GEN_SEQ_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_4_GEN2r,(_r._patt_gen_seq_4_gen2))
#define BCMI_TSCF_XGXS_READLN_PATT_GEN_SEQ_4_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_seq_4_gen2))
#define BCMI_TSCF_XGXS_WRITELN_PATT_GEN_SEQ_4_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_seq_4_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_PATT_GEN_SEQ_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._patt_gen_seq_4_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PATT_GEN_SEQ_4_GEN2r BCMI_TSCF_XGXS_PATT_GEN_SEQ_4_GEN2r
#define PATT_GEN_SEQ_4_GEN2r_SIZE BCMI_TSCF_XGXS_PATT_GEN_SEQ_4_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PATT_GEN_SEQ_4_GEN2r_t PATT_GEN_SEQ_4_GEN2r_t;
#define PATT_GEN_SEQ_4_GEN2r_CLR BCMI_TSCF_XGXS_PATT_GEN_SEQ_4_GEN2r_CLR
#define PATT_GEN_SEQ_4_GEN2r_SET BCMI_TSCF_XGXS_PATT_GEN_SEQ_4_GEN2r_SET
#define PATT_GEN_SEQ_4_GEN2r_GET BCMI_TSCF_XGXS_PATT_GEN_SEQ_4_GEN2r_GET
#define PATT_GEN_SEQ_4_GEN2r_PATT_GEN_SEQ_4f_GET BCMI_TSCF_XGXS_PATT_GEN_SEQ_4_GEN2r_PATT_GEN_SEQ_4f_GET
#define PATT_GEN_SEQ_4_GEN2r_PATT_GEN_SEQ_4f_SET BCMI_TSCF_XGXS_PATT_GEN_SEQ_4_GEN2r_PATT_GEN_SEQ_4f_SET
#define READ_PATT_GEN_SEQ_4_GEN2r BCMI_TSCF_XGXS_READ_PATT_GEN_SEQ_4_GEN2r
#define WRITE_PATT_GEN_SEQ_4_GEN2r BCMI_TSCF_XGXS_WRITE_PATT_GEN_SEQ_4_GEN2r
#define MODIFY_PATT_GEN_SEQ_4_GEN2r BCMI_TSCF_XGXS_MODIFY_PATT_GEN_SEQ_4_GEN2r
#define READLN_PATT_GEN_SEQ_4_GEN2r BCMI_TSCF_XGXS_READLN_PATT_GEN_SEQ_4_GEN2r
#define WRITELN_PATT_GEN_SEQ_4_GEN2r BCMI_TSCF_XGXS_WRITELN_PATT_GEN_SEQ_4_GEN2r
#define WRITEALL_PATT_GEN_SEQ_4_GEN2r BCMI_TSCF_XGXS_WRITEALL_PATT_GEN_SEQ_4_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PATT_GEN_SEQ_4_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PATT_GEN_SEQ_5_GEN2
 * BLOCKS:   PATT_GEN_COM
 * REGADDR:  0xd125
 * DEVAD:    1
 * DESC:     Pattern Generator Sequence Word 5
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/W
 * FIELDS:
 *     PATT_GEN_SEQ_5   Fixed Pattern Generator Sequence Word 5. MSB bits will be transmitted first on serial transmit lane in both shared and slice mode.
 */
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_5_GEN2r (0x0001d125 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_5_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PATT_GEN_SEQ_5_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PATT_GEN_SEQ_5_GEN2r_s {
	uint32_t v[1];
	uint32_t patt_gen_seq_5_gen2[1];
	uint32_t _patt_gen_seq_5_gen2;
} BCMI_TSCF_XGXS_PATT_GEN_SEQ_5_GEN2r_t;

#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_5_GEN2r_CLR(r) (r).patt_gen_seq_5_gen2[0] = 0
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_5_GEN2r_SET(r,d) (r).patt_gen_seq_5_gen2[0] = d
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_5_GEN2r_GET(r) (r).patt_gen_seq_5_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_5_GEN2r_PATT_GEN_SEQ_5f_GET(r) (((r).patt_gen_seq_5_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_5_GEN2r_PATT_GEN_SEQ_5f_SET(r,f) (r).patt_gen_seq_5_gen2[0]=(((r).patt_gen_seq_5_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PATT_GEN_SEQ_5_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PATT_GEN_SEQ_5_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_5_GEN2r,(_r._patt_gen_seq_5_gen2))
#define BCMI_TSCF_XGXS_WRITE_PATT_GEN_SEQ_5_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_5_GEN2r,(_r._patt_gen_seq_5_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PATT_GEN_SEQ_5_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_5_GEN2r,(_r._patt_gen_seq_5_gen2))
#define BCMI_TSCF_XGXS_READLN_PATT_GEN_SEQ_5_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_5_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_seq_5_gen2))
#define BCMI_TSCF_XGXS_WRITELN_PATT_GEN_SEQ_5_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_5_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_seq_5_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_PATT_GEN_SEQ_5_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_5_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._patt_gen_seq_5_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PATT_GEN_SEQ_5_GEN2r BCMI_TSCF_XGXS_PATT_GEN_SEQ_5_GEN2r
#define PATT_GEN_SEQ_5_GEN2r_SIZE BCMI_TSCF_XGXS_PATT_GEN_SEQ_5_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PATT_GEN_SEQ_5_GEN2r_t PATT_GEN_SEQ_5_GEN2r_t;
#define PATT_GEN_SEQ_5_GEN2r_CLR BCMI_TSCF_XGXS_PATT_GEN_SEQ_5_GEN2r_CLR
#define PATT_GEN_SEQ_5_GEN2r_SET BCMI_TSCF_XGXS_PATT_GEN_SEQ_5_GEN2r_SET
#define PATT_GEN_SEQ_5_GEN2r_GET BCMI_TSCF_XGXS_PATT_GEN_SEQ_5_GEN2r_GET
#define PATT_GEN_SEQ_5_GEN2r_PATT_GEN_SEQ_5f_GET BCMI_TSCF_XGXS_PATT_GEN_SEQ_5_GEN2r_PATT_GEN_SEQ_5f_GET
#define PATT_GEN_SEQ_5_GEN2r_PATT_GEN_SEQ_5f_SET BCMI_TSCF_XGXS_PATT_GEN_SEQ_5_GEN2r_PATT_GEN_SEQ_5f_SET
#define READ_PATT_GEN_SEQ_5_GEN2r BCMI_TSCF_XGXS_READ_PATT_GEN_SEQ_5_GEN2r
#define WRITE_PATT_GEN_SEQ_5_GEN2r BCMI_TSCF_XGXS_WRITE_PATT_GEN_SEQ_5_GEN2r
#define MODIFY_PATT_GEN_SEQ_5_GEN2r BCMI_TSCF_XGXS_MODIFY_PATT_GEN_SEQ_5_GEN2r
#define READLN_PATT_GEN_SEQ_5_GEN2r BCMI_TSCF_XGXS_READLN_PATT_GEN_SEQ_5_GEN2r
#define WRITELN_PATT_GEN_SEQ_5_GEN2r BCMI_TSCF_XGXS_WRITELN_PATT_GEN_SEQ_5_GEN2r
#define WRITEALL_PATT_GEN_SEQ_5_GEN2r BCMI_TSCF_XGXS_WRITEALL_PATT_GEN_SEQ_5_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PATT_GEN_SEQ_5_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PATT_GEN_SEQ_6_GEN2
 * BLOCKS:   PATT_GEN_COM
 * REGADDR:  0xd126
 * DEVAD:    1
 * DESC:     Pattern Generator Sequence Word 6
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/W
 * FIELDS:
 *     PATT_GEN_SEQ_6   Fixed Pattern Generator Sequence Word 6. MSB bits will be transmitted first on serial transmit lane in both shared and slice mode.
 */
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_6_GEN2r (0x0001d126 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_6_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PATT_GEN_SEQ_6_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PATT_GEN_SEQ_6_GEN2r_s {
	uint32_t v[1];
	uint32_t patt_gen_seq_6_gen2[1];
	uint32_t _patt_gen_seq_6_gen2;
} BCMI_TSCF_XGXS_PATT_GEN_SEQ_6_GEN2r_t;

#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_6_GEN2r_CLR(r) (r).patt_gen_seq_6_gen2[0] = 0
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_6_GEN2r_SET(r,d) (r).patt_gen_seq_6_gen2[0] = d
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_6_GEN2r_GET(r) (r).patt_gen_seq_6_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_6_GEN2r_PATT_GEN_SEQ_6f_GET(r) (((r).patt_gen_seq_6_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_6_GEN2r_PATT_GEN_SEQ_6f_SET(r,f) (r).patt_gen_seq_6_gen2[0]=(((r).patt_gen_seq_6_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PATT_GEN_SEQ_6_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PATT_GEN_SEQ_6_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_6_GEN2r,(_r._patt_gen_seq_6_gen2))
#define BCMI_TSCF_XGXS_WRITE_PATT_GEN_SEQ_6_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_6_GEN2r,(_r._patt_gen_seq_6_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PATT_GEN_SEQ_6_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_6_GEN2r,(_r._patt_gen_seq_6_gen2))
#define BCMI_TSCF_XGXS_READLN_PATT_GEN_SEQ_6_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_6_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_seq_6_gen2))
#define BCMI_TSCF_XGXS_WRITELN_PATT_GEN_SEQ_6_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_6_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_seq_6_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_PATT_GEN_SEQ_6_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_6_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._patt_gen_seq_6_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PATT_GEN_SEQ_6_GEN2r BCMI_TSCF_XGXS_PATT_GEN_SEQ_6_GEN2r
#define PATT_GEN_SEQ_6_GEN2r_SIZE BCMI_TSCF_XGXS_PATT_GEN_SEQ_6_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PATT_GEN_SEQ_6_GEN2r_t PATT_GEN_SEQ_6_GEN2r_t;
#define PATT_GEN_SEQ_6_GEN2r_CLR BCMI_TSCF_XGXS_PATT_GEN_SEQ_6_GEN2r_CLR
#define PATT_GEN_SEQ_6_GEN2r_SET BCMI_TSCF_XGXS_PATT_GEN_SEQ_6_GEN2r_SET
#define PATT_GEN_SEQ_6_GEN2r_GET BCMI_TSCF_XGXS_PATT_GEN_SEQ_6_GEN2r_GET
#define PATT_GEN_SEQ_6_GEN2r_PATT_GEN_SEQ_6f_GET BCMI_TSCF_XGXS_PATT_GEN_SEQ_6_GEN2r_PATT_GEN_SEQ_6f_GET
#define PATT_GEN_SEQ_6_GEN2r_PATT_GEN_SEQ_6f_SET BCMI_TSCF_XGXS_PATT_GEN_SEQ_6_GEN2r_PATT_GEN_SEQ_6f_SET
#define READ_PATT_GEN_SEQ_6_GEN2r BCMI_TSCF_XGXS_READ_PATT_GEN_SEQ_6_GEN2r
#define WRITE_PATT_GEN_SEQ_6_GEN2r BCMI_TSCF_XGXS_WRITE_PATT_GEN_SEQ_6_GEN2r
#define MODIFY_PATT_GEN_SEQ_6_GEN2r BCMI_TSCF_XGXS_MODIFY_PATT_GEN_SEQ_6_GEN2r
#define READLN_PATT_GEN_SEQ_6_GEN2r BCMI_TSCF_XGXS_READLN_PATT_GEN_SEQ_6_GEN2r
#define WRITELN_PATT_GEN_SEQ_6_GEN2r BCMI_TSCF_XGXS_WRITELN_PATT_GEN_SEQ_6_GEN2r
#define WRITEALL_PATT_GEN_SEQ_6_GEN2r BCMI_TSCF_XGXS_WRITEALL_PATT_GEN_SEQ_6_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PATT_GEN_SEQ_6_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PATT_GEN_SEQ_7_GEN2
 * BLOCKS:   PATT_GEN_COM
 * REGADDR:  0xd127
 * DEVAD:    1
 * DESC:     Pattern Generator Sequence Word 7
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/W
 * FIELDS:
 *     PATT_GEN_SEQ_7   Fixed Pattern Generator Sequence Word 7. MSB bits will be transmitted first on serial transmit lane in both shared and slice mode.
 */
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_7_GEN2r (0x0001d127 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_7_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PATT_GEN_SEQ_7_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PATT_GEN_SEQ_7_GEN2r_s {
	uint32_t v[1];
	uint32_t patt_gen_seq_7_gen2[1];
	uint32_t _patt_gen_seq_7_gen2;
} BCMI_TSCF_XGXS_PATT_GEN_SEQ_7_GEN2r_t;

#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_7_GEN2r_CLR(r) (r).patt_gen_seq_7_gen2[0] = 0
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_7_GEN2r_SET(r,d) (r).patt_gen_seq_7_gen2[0] = d
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_7_GEN2r_GET(r) (r).patt_gen_seq_7_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_7_GEN2r_PATT_GEN_SEQ_7f_GET(r) (((r).patt_gen_seq_7_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_7_GEN2r_PATT_GEN_SEQ_7f_SET(r,f) (r).patt_gen_seq_7_gen2[0]=(((r).patt_gen_seq_7_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PATT_GEN_SEQ_7_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PATT_GEN_SEQ_7_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_7_GEN2r,(_r._patt_gen_seq_7_gen2))
#define BCMI_TSCF_XGXS_WRITE_PATT_GEN_SEQ_7_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_7_GEN2r,(_r._patt_gen_seq_7_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PATT_GEN_SEQ_7_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_7_GEN2r,(_r._patt_gen_seq_7_gen2))
#define BCMI_TSCF_XGXS_READLN_PATT_GEN_SEQ_7_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_7_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_seq_7_gen2))
#define BCMI_TSCF_XGXS_WRITELN_PATT_GEN_SEQ_7_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_7_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_seq_7_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_PATT_GEN_SEQ_7_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_7_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._patt_gen_seq_7_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PATT_GEN_SEQ_7_GEN2r BCMI_TSCF_XGXS_PATT_GEN_SEQ_7_GEN2r
#define PATT_GEN_SEQ_7_GEN2r_SIZE BCMI_TSCF_XGXS_PATT_GEN_SEQ_7_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PATT_GEN_SEQ_7_GEN2r_t PATT_GEN_SEQ_7_GEN2r_t;
#define PATT_GEN_SEQ_7_GEN2r_CLR BCMI_TSCF_XGXS_PATT_GEN_SEQ_7_GEN2r_CLR
#define PATT_GEN_SEQ_7_GEN2r_SET BCMI_TSCF_XGXS_PATT_GEN_SEQ_7_GEN2r_SET
#define PATT_GEN_SEQ_7_GEN2r_GET BCMI_TSCF_XGXS_PATT_GEN_SEQ_7_GEN2r_GET
#define PATT_GEN_SEQ_7_GEN2r_PATT_GEN_SEQ_7f_GET BCMI_TSCF_XGXS_PATT_GEN_SEQ_7_GEN2r_PATT_GEN_SEQ_7f_GET
#define PATT_GEN_SEQ_7_GEN2r_PATT_GEN_SEQ_7f_SET BCMI_TSCF_XGXS_PATT_GEN_SEQ_7_GEN2r_PATT_GEN_SEQ_7f_SET
#define READ_PATT_GEN_SEQ_7_GEN2r BCMI_TSCF_XGXS_READ_PATT_GEN_SEQ_7_GEN2r
#define WRITE_PATT_GEN_SEQ_7_GEN2r BCMI_TSCF_XGXS_WRITE_PATT_GEN_SEQ_7_GEN2r
#define MODIFY_PATT_GEN_SEQ_7_GEN2r BCMI_TSCF_XGXS_MODIFY_PATT_GEN_SEQ_7_GEN2r
#define READLN_PATT_GEN_SEQ_7_GEN2r BCMI_TSCF_XGXS_READLN_PATT_GEN_SEQ_7_GEN2r
#define WRITELN_PATT_GEN_SEQ_7_GEN2r BCMI_TSCF_XGXS_WRITELN_PATT_GEN_SEQ_7_GEN2r
#define WRITEALL_PATT_GEN_SEQ_7_GEN2r BCMI_TSCF_XGXS_WRITEALL_PATT_GEN_SEQ_7_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PATT_GEN_SEQ_7_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PATT_GEN_SEQ_8_GEN2
 * BLOCKS:   PATT_GEN_COM
 * REGADDR:  0xd128
 * DEVAD:    1
 * DESC:     Pattern Generator Sequence Word 8
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/W
 * FIELDS:
 *     PATT_GEN_SEQ_8   Fixed Pattern Generator Sequence Word 8. MSB bits will be transmitted first on serial transmit lane in both shared and slice mode.
 */
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_8_GEN2r (0x0001d128 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_8_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PATT_GEN_SEQ_8_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PATT_GEN_SEQ_8_GEN2r_s {
	uint32_t v[1];
	uint32_t patt_gen_seq_8_gen2[1];
	uint32_t _patt_gen_seq_8_gen2;
} BCMI_TSCF_XGXS_PATT_GEN_SEQ_8_GEN2r_t;

#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_8_GEN2r_CLR(r) (r).patt_gen_seq_8_gen2[0] = 0
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_8_GEN2r_SET(r,d) (r).patt_gen_seq_8_gen2[0] = d
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_8_GEN2r_GET(r) (r).patt_gen_seq_8_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_8_GEN2r_PATT_GEN_SEQ_8f_GET(r) (((r).patt_gen_seq_8_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_8_GEN2r_PATT_GEN_SEQ_8f_SET(r,f) (r).patt_gen_seq_8_gen2[0]=(((r).patt_gen_seq_8_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PATT_GEN_SEQ_8_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PATT_GEN_SEQ_8_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_8_GEN2r,(_r._patt_gen_seq_8_gen2))
#define BCMI_TSCF_XGXS_WRITE_PATT_GEN_SEQ_8_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_8_GEN2r,(_r._patt_gen_seq_8_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PATT_GEN_SEQ_8_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_8_GEN2r,(_r._patt_gen_seq_8_gen2))
#define BCMI_TSCF_XGXS_READLN_PATT_GEN_SEQ_8_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_8_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_seq_8_gen2))
#define BCMI_TSCF_XGXS_WRITELN_PATT_GEN_SEQ_8_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_8_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_seq_8_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_PATT_GEN_SEQ_8_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_8_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._patt_gen_seq_8_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PATT_GEN_SEQ_8_GEN2r BCMI_TSCF_XGXS_PATT_GEN_SEQ_8_GEN2r
#define PATT_GEN_SEQ_8_GEN2r_SIZE BCMI_TSCF_XGXS_PATT_GEN_SEQ_8_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PATT_GEN_SEQ_8_GEN2r_t PATT_GEN_SEQ_8_GEN2r_t;
#define PATT_GEN_SEQ_8_GEN2r_CLR BCMI_TSCF_XGXS_PATT_GEN_SEQ_8_GEN2r_CLR
#define PATT_GEN_SEQ_8_GEN2r_SET BCMI_TSCF_XGXS_PATT_GEN_SEQ_8_GEN2r_SET
#define PATT_GEN_SEQ_8_GEN2r_GET BCMI_TSCF_XGXS_PATT_GEN_SEQ_8_GEN2r_GET
#define PATT_GEN_SEQ_8_GEN2r_PATT_GEN_SEQ_8f_GET BCMI_TSCF_XGXS_PATT_GEN_SEQ_8_GEN2r_PATT_GEN_SEQ_8f_GET
#define PATT_GEN_SEQ_8_GEN2r_PATT_GEN_SEQ_8f_SET BCMI_TSCF_XGXS_PATT_GEN_SEQ_8_GEN2r_PATT_GEN_SEQ_8f_SET
#define READ_PATT_GEN_SEQ_8_GEN2r BCMI_TSCF_XGXS_READ_PATT_GEN_SEQ_8_GEN2r
#define WRITE_PATT_GEN_SEQ_8_GEN2r BCMI_TSCF_XGXS_WRITE_PATT_GEN_SEQ_8_GEN2r
#define MODIFY_PATT_GEN_SEQ_8_GEN2r BCMI_TSCF_XGXS_MODIFY_PATT_GEN_SEQ_8_GEN2r
#define READLN_PATT_GEN_SEQ_8_GEN2r BCMI_TSCF_XGXS_READLN_PATT_GEN_SEQ_8_GEN2r
#define WRITELN_PATT_GEN_SEQ_8_GEN2r BCMI_TSCF_XGXS_WRITELN_PATT_GEN_SEQ_8_GEN2r
#define WRITEALL_PATT_GEN_SEQ_8_GEN2r BCMI_TSCF_XGXS_WRITEALL_PATT_GEN_SEQ_8_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PATT_GEN_SEQ_8_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PATT_GEN_SEQ_9_GEN2
 * BLOCKS:   PATT_GEN_COM
 * REGADDR:  0xd129
 * DEVAD:    1
 * DESC:     Pattern Generator Sequence Word 9
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/W
 * FIELDS:
 *     PATT_GEN_SEQ_9   Fixed Pattern Generator Sequence Word 9. MSB bits will be transmitted first on serial transmit lane in both shared and slice mode.
 */
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_9_GEN2r (0x0001d129 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_9_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PATT_GEN_SEQ_9_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PATT_GEN_SEQ_9_GEN2r_s {
	uint32_t v[1];
	uint32_t patt_gen_seq_9_gen2[1];
	uint32_t _patt_gen_seq_9_gen2;
} BCMI_TSCF_XGXS_PATT_GEN_SEQ_9_GEN2r_t;

#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_9_GEN2r_CLR(r) (r).patt_gen_seq_9_gen2[0] = 0
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_9_GEN2r_SET(r,d) (r).patt_gen_seq_9_gen2[0] = d
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_9_GEN2r_GET(r) (r).patt_gen_seq_9_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_9_GEN2r_PATT_GEN_SEQ_9f_GET(r) (((r).patt_gen_seq_9_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_9_GEN2r_PATT_GEN_SEQ_9f_SET(r,f) (r).patt_gen_seq_9_gen2[0]=(((r).patt_gen_seq_9_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PATT_GEN_SEQ_9_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PATT_GEN_SEQ_9_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_9_GEN2r,(_r._patt_gen_seq_9_gen2))
#define BCMI_TSCF_XGXS_WRITE_PATT_GEN_SEQ_9_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_9_GEN2r,(_r._patt_gen_seq_9_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PATT_GEN_SEQ_9_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_9_GEN2r,(_r._patt_gen_seq_9_gen2))
#define BCMI_TSCF_XGXS_READLN_PATT_GEN_SEQ_9_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_9_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_seq_9_gen2))
#define BCMI_TSCF_XGXS_WRITELN_PATT_GEN_SEQ_9_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_9_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_seq_9_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_PATT_GEN_SEQ_9_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_9_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._patt_gen_seq_9_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PATT_GEN_SEQ_9_GEN2r BCMI_TSCF_XGXS_PATT_GEN_SEQ_9_GEN2r
#define PATT_GEN_SEQ_9_GEN2r_SIZE BCMI_TSCF_XGXS_PATT_GEN_SEQ_9_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PATT_GEN_SEQ_9_GEN2r_t PATT_GEN_SEQ_9_GEN2r_t;
#define PATT_GEN_SEQ_9_GEN2r_CLR BCMI_TSCF_XGXS_PATT_GEN_SEQ_9_GEN2r_CLR
#define PATT_GEN_SEQ_9_GEN2r_SET BCMI_TSCF_XGXS_PATT_GEN_SEQ_9_GEN2r_SET
#define PATT_GEN_SEQ_9_GEN2r_GET BCMI_TSCF_XGXS_PATT_GEN_SEQ_9_GEN2r_GET
#define PATT_GEN_SEQ_9_GEN2r_PATT_GEN_SEQ_9f_GET BCMI_TSCF_XGXS_PATT_GEN_SEQ_9_GEN2r_PATT_GEN_SEQ_9f_GET
#define PATT_GEN_SEQ_9_GEN2r_PATT_GEN_SEQ_9f_SET BCMI_TSCF_XGXS_PATT_GEN_SEQ_9_GEN2r_PATT_GEN_SEQ_9f_SET
#define READ_PATT_GEN_SEQ_9_GEN2r BCMI_TSCF_XGXS_READ_PATT_GEN_SEQ_9_GEN2r
#define WRITE_PATT_GEN_SEQ_9_GEN2r BCMI_TSCF_XGXS_WRITE_PATT_GEN_SEQ_9_GEN2r
#define MODIFY_PATT_GEN_SEQ_9_GEN2r BCMI_TSCF_XGXS_MODIFY_PATT_GEN_SEQ_9_GEN2r
#define READLN_PATT_GEN_SEQ_9_GEN2r BCMI_TSCF_XGXS_READLN_PATT_GEN_SEQ_9_GEN2r
#define WRITELN_PATT_GEN_SEQ_9_GEN2r BCMI_TSCF_XGXS_WRITELN_PATT_GEN_SEQ_9_GEN2r
#define WRITEALL_PATT_GEN_SEQ_9_GEN2r BCMI_TSCF_XGXS_WRITEALL_PATT_GEN_SEQ_9_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PATT_GEN_SEQ_9_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PATT_GEN_SEQ_10_GEN2
 * BLOCKS:   PATT_GEN_COM
 * REGADDR:  0xd12a
 * DEVAD:    1
 * DESC:     Pattern Generator Sequence Word 10
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/W
 * FIELDS:
 *     PATT_GEN_SEQ_10  Fixed Pattern Generator Sequence Word 10. MSB bits will be transmitted first on serial transmit lane in both shared and slice mode.
 */
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_10_GEN2r (0x0001d12a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_10_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PATT_GEN_SEQ_10_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PATT_GEN_SEQ_10_GEN2r_s {
	uint32_t v[1];
	uint32_t patt_gen_seq_10_gen2[1];
	uint32_t _patt_gen_seq_10_gen2;
} BCMI_TSCF_XGXS_PATT_GEN_SEQ_10_GEN2r_t;

#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_10_GEN2r_CLR(r) (r).patt_gen_seq_10_gen2[0] = 0
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_10_GEN2r_SET(r,d) (r).patt_gen_seq_10_gen2[0] = d
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_10_GEN2r_GET(r) (r).patt_gen_seq_10_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_10_GEN2r_PATT_GEN_SEQ_10f_GET(r) (((r).patt_gen_seq_10_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_10_GEN2r_PATT_GEN_SEQ_10f_SET(r,f) (r).patt_gen_seq_10_gen2[0]=(((r).patt_gen_seq_10_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PATT_GEN_SEQ_10_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PATT_GEN_SEQ_10_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_10_GEN2r,(_r._patt_gen_seq_10_gen2))
#define BCMI_TSCF_XGXS_WRITE_PATT_GEN_SEQ_10_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_10_GEN2r,(_r._patt_gen_seq_10_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PATT_GEN_SEQ_10_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_10_GEN2r,(_r._patt_gen_seq_10_gen2))
#define BCMI_TSCF_XGXS_READLN_PATT_GEN_SEQ_10_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_10_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_seq_10_gen2))
#define BCMI_TSCF_XGXS_WRITELN_PATT_GEN_SEQ_10_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_10_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_seq_10_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_PATT_GEN_SEQ_10_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_10_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._patt_gen_seq_10_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PATT_GEN_SEQ_10_GEN2r BCMI_TSCF_XGXS_PATT_GEN_SEQ_10_GEN2r
#define PATT_GEN_SEQ_10_GEN2r_SIZE BCMI_TSCF_XGXS_PATT_GEN_SEQ_10_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PATT_GEN_SEQ_10_GEN2r_t PATT_GEN_SEQ_10_GEN2r_t;
#define PATT_GEN_SEQ_10_GEN2r_CLR BCMI_TSCF_XGXS_PATT_GEN_SEQ_10_GEN2r_CLR
#define PATT_GEN_SEQ_10_GEN2r_SET BCMI_TSCF_XGXS_PATT_GEN_SEQ_10_GEN2r_SET
#define PATT_GEN_SEQ_10_GEN2r_GET BCMI_TSCF_XGXS_PATT_GEN_SEQ_10_GEN2r_GET
#define PATT_GEN_SEQ_10_GEN2r_PATT_GEN_SEQ_10f_GET BCMI_TSCF_XGXS_PATT_GEN_SEQ_10_GEN2r_PATT_GEN_SEQ_10f_GET
#define PATT_GEN_SEQ_10_GEN2r_PATT_GEN_SEQ_10f_SET BCMI_TSCF_XGXS_PATT_GEN_SEQ_10_GEN2r_PATT_GEN_SEQ_10f_SET
#define READ_PATT_GEN_SEQ_10_GEN2r BCMI_TSCF_XGXS_READ_PATT_GEN_SEQ_10_GEN2r
#define WRITE_PATT_GEN_SEQ_10_GEN2r BCMI_TSCF_XGXS_WRITE_PATT_GEN_SEQ_10_GEN2r
#define MODIFY_PATT_GEN_SEQ_10_GEN2r BCMI_TSCF_XGXS_MODIFY_PATT_GEN_SEQ_10_GEN2r
#define READLN_PATT_GEN_SEQ_10_GEN2r BCMI_TSCF_XGXS_READLN_PATT_GEN_SEQ_10_GEN2r
#define WRITELN_PATT_GEN_SEQ_10_GEN2r BCMI_TSCF_XGXS_WRITELN_PATT_GEN_SEQ_10_GEN2r
#define WRITEALL_PATT_GEN_SEQ_10_GEN2r BCMI_TSCF_XGXS_WRITEALL_PATT_GEN_SEQ_10_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PATT_GEN_SEQ_10_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PATT_GEN_SEQ_11_GEN2
 * BLOCKS:   PATT_GEN_COM
 * REGADDR:  0xd12b
 * DEVAD:    1
 * DESC:     Pattern Generator Sequence Word 11
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/W
 * FIELDS:
 *     PATT_GEN_SEQ_11  Fixed Pattern Generator Sequence Word 11. MSB bits will be transmitted first on serial transmit lane in both shared and slice mode.
 */
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_11_GEN2r (0x0001d12b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_11_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PATT_GEN_SEQ_11_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PATT_GEN_SEQ_11_GEN2r_s {
	uint32_t v[1];
	uint32_t patt_gen_seq_11_gen2[1];
	uint32_t _patt_gen_seq_11_gen2;
} BCMI_TSCF_XGXS_PATT_GEN_SEQ_11_GEN2r_t;

#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_11_GEN2r_CLR(r) (r).patt_gen_seq_11_gen2[0] = 0
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_11_GEN2r_SET(r,d) (r).patt_gen_seq_11_gen2[0] = d
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_11_GEN2r_GET(r) (r).patt_gen_seq_11_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_11_GEN2r_PATT_GEN_SEQ_11f_GET(r) (((r).patt_gen_seq_11_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_11_GEN2r_PATT_GEN_SEQ_11f_SET(r,f) (r).patt_gen_seq_11_gen2[0]=(((r).patt_gen_seq_11_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PATT_GEN_SEQ_11_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PATT_GEN_SEQ_11_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_11_GEN2r,(_r._patt_gen_seq_11_gen2))
#define BCMI_TSCF_XGXS_WRITE_PATT_GEN_SEQ_11_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_11_GEN2r,(_r._patt_gen_seq_11_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PATT_GEN_SEQ_11_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_11_GEN2r,(_r._patt_gen_seq_11_gen2))
#define BCMI_TSCF_XGXS_READLN_PATT_GEN_SEQ_11_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_11_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_seq_11_gen2))
#define BCMI_TSCF_XGXS_WRITELN_PATT_GEN_SEQ_11_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_11_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_seq_11_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_PATT_GEN_SEQ_11_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_11_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._patt_gen_seq_11_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PATT_GEN_SEQ_11_GEN2r BCMI_TSCF_XGXS_PATT_GEN_SEQ_11_GEN2r
#define PATT_GEN_SEQ_11_GEN2r_SIZE BCMI_TSCF_XGXS_PATT_GEN_SEQ_11_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PATT_GEN_SEQ_11_GEN2r_t PATT_GEN_SEQ_11_GEN2r_t;
#define PATT_GEN_SEQ_11_GEN2r_CLR BCMI_TSCF_XGXS_PATT_GEN_SEQ_11_GEN2r_CLR
#define PATT_GEN_SEQ_11_GEN2r_SET BCMI_TSCF_XGXS_PATT_GEN_SEQ_11_GEN2r_SET
#define PATT_GEN_SEQ_11_GEN2r_GET BCMI_TSCF_XGXS_PATT_GEN_SEQ_11_GEN2r_GET
#define PATT_GEN_SEQ_11_GEN2r_PATT_GEN_SEQ_11f_GET BCMI_TSCF_XGXS_PATT_GEN_SEQ_11_GEN2r_PATT_GEN_SEQ_11f_GET
#define PATT_GEN_SEQ_11_GEN2r_PATT_GEN_SEQ_11f_SET BCMI_TSCF_XGXS_PATT_GEN_SEQ_11_GEN2r_PATT_GEN_SEQ_11f_SET
#define READ_PATT_GEN_SEQ_11_GEN2r BCMI_TSCF_XGXS_READ_PATT_GEN_SEQ_11_GEN2r
#define WRITE_PATT_GEN_SEQ_11_GEN2r BCMI_TSCF_XGXS_WRITE_PATT_GEN_SEQ_11_GEN2r
#define MODIFY_PATT_GEN_SEQ_11_GEN2r BCMI_TSCF_XGXS_MODIFY_PATT_GEN_SEQ_11_GEN2r
#define READLN_PATT_GEN_SEQ_11_GEN2r BCMI_TSCF_XGXS_READLN_PATT_GEN_SEQ_11_GEN2r
#define WRITELN_PATT_GEN_SEQ_11_GEN2r BCMI_TSCF_XGXS_WRITELN_PATT_GEN_SEQ_11_GEN2r
#define WRITEALL_PATT_GEN_SEQ_11_GEN2r BCMI_TSCF_XGXS_WRITEALL_PATT_GEN_SEQ_11_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PATT_GEN_SEQ_11_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PATT_GEN_SEQ_12_GEN2
 * BLOCKS:   PATT_GEN_COM
 * REGADDR:  0xd12c
 * DEVAD:    1
 * DESC:     Pattern Generator Sequence Word 12
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/W
 * FIELDS:
 *     PATT_GEN_SEQ_12  Fixed Pattern Generator Sequence Word 12. MSB bits will be transmitted first on serial transmit lane in both shared and slice mode.
 */
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_12_GEN2r (0x0001d12c | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_12_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PATT_GEN_SEQ_12_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PATT_GEN_SEQ_12_GEN2r_s {
	uint32_t v[1];
	uint32_t patt_gen_seq_12_gen2[1];
	uint32_t _patt_gen_seq_12_gen2;
} BCMI_TSCF_XGXS_PATT_GEN_SEQ_12_GEN2r_t;

#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_12_GEN2r_CLR(r) (r).patt_gen_seq_12_gen2[0] = 0
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_12_GEN2r_SET(r,d) (r).patt_gen_seq_12_gen2[0] = d
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_12_GEN2r_GET(r) (r).patt_gen_seq_12_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_12_GEN2r_PATT_GEN_SEQ_12f_GET(r) (((r).patt_gen_seq_12_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_12_GEN2r_PATT_GEN_SEQ_12f_SET(r,f) (r).patt_gen_seq_12_gen2[0]=(((r).patt_gen_seq_12_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PATT_GEN_SEQ_12_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PATT_GEN_SEQ_12_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_12_GEN2r,(_r._patt_gen_seq_12_gen2))
#define BCMI_TSCF_XGXS_WRITE_PATT_GEN_SEQ_12_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_12_GEN2r,(_r._patt_gen_seq_12_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PATT_GEN_SEQ_12_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_12_GEN2r,(_r._patt_gen_seq_12_gen2))
#define BCMI_TSCF_XGXS_READLN_PATT_GEN_SEQ_12_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_12_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_seq_12_gen2))
#define BCMI_TSCF_XGXS_WRITELN_PATT_GEN_SEQ_12_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_12_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_seq_12_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_PATT_GEN_SEQ_12_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_12_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._patt_gen_seq_12_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PATT_GEN_SEQ_12_GEN2r BCMI_TSCF_XGXS_PATT_GEN_SEQ_12_GEN2r
#define PATT_GEN_SEQ_12_GEN2r_SIZE BCMI_TSCF_XGXS_PATT_GEN_SEQ_12_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PATT_GEN_SEQ_12_GEN2r_t PATT_GEN_SEQ_12_GEN2r_t;
#define PATT_GEN_SEQ_12_GEN2r_CLR BCMI_TSCF_XGXS_PATT_GEN_SEQ_12_GEN2r_CLR
#define PATT_GEN_SEQ_12_GEN2r_SET BCMI_TSCF_XGXS_PATT_GEN_SEQ_12_GEN2r_SET
#define PATT_GEN_SEQ_12_GEN2r_GET BCMI_TSCF_XGXS_PATT_GEN_SEQ_12_GEN2r_GET
#define PATT_GEN_SEQ_12_GEN2r_PATT_GEN_SEQ_12f_GET BCMI_TSCF_XGXS_PATT_GEN_SEQ_12_GEN2r_PATT_GEN_SEQ_12f_GET
#define PATT_GEN_SEQ_12_GEN2r_PATT_GEN_SEQ_12f_SET BCMI_TSCF_XGXS_PATT_GEN_SEQ_12_GEN2r_PATT_GEN_SEQ_12f_SET
#define READ_PATT_GEN_SEQ_12_GEN2r BCMI_TSCF_XGXS_READ_PATT_GEN_SEQ_12_GEN2r
#define WRITE_PATT_GEN_SEQ_12_GEN2r BCMI_TSCF_XGXS_WRITE_PATT_GEN_SEQ_12_GEN2r
#define MODIFY_PATT_GEN_SEQ_12_GEN2r BCMI_TSCF_XGXS_MODIFY_PATT_GEN_SEQ_12_GEN2r
#define READLN_PATT_GEN_SEQ_12_GEN2r BCMI_TSCF_XGXS_READLN_PATT_GEN_SEQ_12_GEN2r
#define WRITELN_PATT_GEN_SEQ_12_GEN2r BCMI_TSCF_XGXS_WRITELN_PATT_GEN_SEQ_12_GEN2r
#define WRITEALL_PATT_GEN_SEQ_12_GEN2r BCMI_TSCF_XGXS_WRITEALL_PATT_GEN_SEQ_12_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PATT_GEN_SEQ_12_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PATT_GEN_SEQ_13_GEN2
 * BLOCKS:   PATT_GEN_COM
 * REGADDR:  0xd12d
 * DEVAD:    1
 * DESC:     Pattern Generator Sequence Word 13
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/W
 * FIELDS:
 *     PATT_GEN_SEQ_13  Fixed Pattern Generator Sequence Word 13. MSB bits will be transmitted first on serial transmit lane in both shared and slice mode.
 */
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_13_GEN2r (0x0001d12d | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_13_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PATT_GEN_SEQ_13_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PATT_GEN_SEQ_13_GEN2r_s {
	uint32_t v[1];
	uint32_t patt_gen_seq_13_gen2[1];
	uint32_t _patt_gen_seq_13_gen2;
} BCMI_TSCF_XGXS_PATT_GEN_SEQ_13_GEN2r_t;

#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_13_GEN2r_CLR(r) (r).patt_gen_seq_13_gen2[0] = 0
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_13_GEN2r_SET(r,d) (r).patt_gen_seq_13_gen2[0] = d
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_13_GEN2r_GET(r) (r).patt_gen_seq_13_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_13_GEN2r_PATT_GEN_SEQ_13f_GET(r) (((r).patt_gen_seq_13_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_13_GEN2r_PATT_GEN_SEQ_13f_SET(r,f) (r).patt_gen_seq_13_gen2[0]=(((r).patt_gen_seq_13_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PATT_GEN_SEQ_13_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PATT_GEN_SEQ_13_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_13_GEN2r,(_r._patt_gen_seq_13_gen2))
#define BCMI_TSCF_XGXS_WRITE_PATT_GEN_SEQ_13_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_13_GEN2r,(_r._patt_gen_seq_13_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PATT_GEN_SEQ_13_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_13_GEN2r,(_r._patt_gen_seq_13_gen2))
#define BCMI_TSCF_XGXS_READLN_PATT_GEN_SEQ_13_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_13_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_seq_13_gen2))
#define BCMI_TSCF_XGXS_WRITELN_PATT_GEN_SEQ_13_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_13_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_seq_13_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_PATT_GEN_SEQ_13_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_13_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._patt_gen_seq_13_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PATT_GEN_SEQ_13_GEN2r BCMI_TSCF_XGXS_PATT_GEN_SEQ_13_GEN2r
#define PATT_GEN_SEQ_13_GEN2r_SIZE BCMI_TSCF_XGXS_PATT_GEN_SEQ_13_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PATT_GEN_SEQ_13_GEN2r_t PATT_GEN_SEQ_13_GEN2r_t;
#define PATT_GEN_SEQ_13_GEN2r_CLR BCMI_TSCF_XGXS_PATT_GEN_SEQ_13_GEN2r_CLR
#define PATT_GEN_SEQ_13_GEN2r_SET BCMI_TSCF_XGXS_PATT_GEN_SEQ_13_GEN2r_SET
#define PATT_GEN_SEQ_13_GEN2r_GET BCMI_TSCF_XGXS_PATT_GEN_SEQ_13_GEN2r_GET
#define PATT_GEN_SEQ_13_GEN2r_PATT_GEN_SEQ_13f_GET BCMI_TSCF_XGXS_PATT_GEN_SEQ_13_GEN2r_PATT_GEN_SEQ_13f_GET
#define PATT_GEN_SEQ_13_GEN2r_PATT_GEN_SEQ_13f_SET BCMI_TSCF_XGXS_PATT_GEN_SEQ_13_GEN2r_PATT_GEN_SEQ_13f_SET
#define READ_PATT_GEN_SEQ_13_GEN2r BCMI_TSCF_XGXS_READ_PATT_GEN_SEQ_13_GEN2r
#define WRITE_PATT_GEN_SEQ_13_GEN2r BCMI_TSCF_XGXS_WRITE_PATT_GEN_SEQ_13_GEN2r
#define MODIFY_PATT_GEN_SEQ_13_GEN2r BCMI_TSCF_XGXS_MODIFY_PATT_GEN_SEQ_13_GEN2r
#define READLN_PATT_GEN_SEQ_13_GEN2r BCMI_TSCF_XGXS_READLN_PATT_GEN_SEQ_13_GEN2r
#define WRITELN_PATT_GEN_SEQ_13_GEN2r BCMI_TSCF_XGXS_WRITELN_PATT_GEN_SEQ_13_GEN2r
#define WRITEALL_PATT_GEN_SEQ_13_GEN2r BCMI_TSCF_XGXS_WRITEALL_PATT_GEN_SEQ_13_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PATT_GEN_SEQ_13_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PATT_GEN_SEQ_14_GEN2
 * BLOCKS:   PATT_GEN_COM
 * REGADDR:  0xd12e
 * DEVAD:    1
 * DESC:     Pattern Generator Sequence Word 14
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/W
 * FIELDS:
 *     PATT_GEN_SEQ_14  Fixed Pattern Generator Sequence Word 14. MSB bits will be transmitted first on serial transmit lane in both shared and slice mode. This word will be transmitted first.
 */
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_14_GEN2r (0x0001d12e | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_14_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PATT_GEN_SEQ_14_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PATT_GEN_SEQ_14_GEN2r_s {
	uint32_t v[1];
	uint32_t patt_gen_seq_14_gen2[1];
	uint32_t _patt_gen_seq_14_gen2;
} BCMI_TSCF_XGXS_PATT_GEN_SEQ_14_GEN2r_t;

#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_14_GEN2r_CLR(r) (r).patt_gen_seq_14_gen2[0] = 0
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_14_GEN2r_SET(r,d) (r).patt_gen_seq_14_gen2[0] = d
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_14_GEN2r_GET(r) (r).patt_gen_seq_14_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_14_GEN2r_PATT_GEN_SEQ_14f_GET(r) (((r).patt_gen_seq_14_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_PATT_GEN_SEQ_14_GEN2r_PATT_GEN_SEQ_14f_SET(r,f) (r).patt_gen_seq_14_gen2[0]=(((r).patt_gen_seq_14_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PATT_GEN_SEQ_14_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PATT_GEN_SEQ_14_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_14_GEN2r,(_r._patt_gen_seq_14_gen2))
#define BCMI_TSCF_XGXS_WRITE_PATT_GEN_SEQ_14_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_14_GEN2r,(_r._patt_gen_seq_14_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PATT_GEN_SEQ_14_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_14_GEN2r,(_r._patt_gen_seq_14_gen2))
#define BCMI_TSCF_XGXS_READLN_PATT_GEN_SEQ_14_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_14_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_seq_14_gen2))
#define BCMI_TSCF_XGXS_WRITELN_PATT_GEN_SEQ_14_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_14_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patt_gen_seq_14_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_PATT_GEN_SEQ_14_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PATT_GEN_SEQ_14_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._patt_gen_seq_14_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PATT_GEN_SEQ_14_GEN2r BCMI_TSCF_XGXS_PATT_GEN_SEQ_14_GEN2r
#define PATT_GEN_SEQ_14_GEN2r_SIZE BCMI_TSCF_XGXS_PATT_GEN_SEQ_14_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PATT_GEN_SEQ_14_GEN2r_t PATT_GEN_SEQ_14_GEN2r_t;
#define PATT_GEN_SEQ_14_GEN2r_CLR BCMI_TSCF_XGXS_PATT_GEN_SEQ_14_GEN2r_CLR
#define PATT_GEN_SEQ_14_GEN2r_SET BCMI_TSCF_XGXS_PATT_GEN_SEQ_14_GEN2r_SET
#define PATT_GEN_SEQ_14_GEN2r_GET BCMI_TSCF_XGXS_PATT_GEN_SEQ_14_GEN2r_GET
#define PATT_GEN_SEQ_14_GEN2r_PATT_GEN_SEQ_14f_GET BCMI_TSCF_XGXS_PATT_GEN_SEQ_14_GEN2r_PATT_GEN_SEQ_14f_GET
#define PATT_GEN_SEQ_14_GEN2r_PATT_GEN_SEQ_14f_SET BCMI_TSCF_XGXS_PATT_GEN_SEQ_14_GEN2r_PATT_GEN_SEQ_14f_SET
#define READ_PATT_GEN_SEQ_14_GEN2r BCMI_TSCF_XGXS_READ_PATT_GEN_SEQ_14_GEN2r
#define WRITE_PATT_GEN_SEQ_14_GEN2r BCMI_TSCF_XGXS_WRITE_PATT_GEN_SEQ_14_GEN2r
#define MODIFY_PATT_GEN_SEQ_14_GEN2r BCMI_TSCF_XGXS_MODIFY_PATT_GEN_SEQ_14_GEN2r
#define READLN_PATT_GEN_SEQ_14_GEN2r BCMI_TSCF_XGXS_READLN_PATT_GEN_SEQ_14_GEN2r
#define WRITELN_PATT_GEN_SEQ_14_GEN2r BCMI_TSCF_XGXS_WRITELN_PATT_GEN_SEQ_14_GEN2r
#define WRITEALL_PATT_GEN_SEQ_14_GEN2r BCMI_TSCF_XGXS_WRITEALL_PATT_GEN_SEQ_14_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PATT_GEN_SEQ_14_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TXFIR_CTL0_GEN2
 * BLOCKS:   TX_FED
 * REGADDR:  0xd130
 * DEVAD:    1
 * DESC:     TX FIR Control0 Register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TXFIR_PRE_OFFSET tx fir pre tap offset values -8 to +7 (2's complement format)This field is used to adjust the Pre tap values
 *     TXFIR_MAIN_OFFSET tx fir main tap offset value -8 to +7 (2's complement format)This field is used to adjust the Main tap values
 *     TXFIR_POST_OFFSET tx fir post tap offset value -8 to +7 (2's complement format)This field is used to adjust the Post tap values
 */
#define BCMI_TSCF_XGXS_TXFIR_CTL0_GEN2r (0x0001d130 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TXFIR_CTL0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TXFIR_CTL0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TXFIR_CTL0_GEN2r_s {
	uint32_t v[1];
	uint32_t txfir_ctl0_gen2[1];
	uint32_t _txfir_ctl0_gen2;
} BCMI_TSCF_XGXS_TXFIR_CTL0_GEN2r_t;

#define BCMI_TSCF_XGXS_TXFIR_CTL0_GEN2r_CLR(r) (r).txfir_ctl0_gen2[0] = 0
#define BCMI_TSCF_XGXS_TXFIR_CTL0_GEN2r_SET(r,d) (r).txfir_ctl0_gen2[0] = d
#define BCMI_TSCF_XGXS_TXFIR_CTL0_GEN2r_GET(r) (r).txfir_ctl0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TXFIR_CTL0_GEN2r_TXFIR_POST_OFFSETf_GET(r) ((((r).txfir_ctl0_gen2[0]) >> 8) & 0xf)
#define BCMI_TSCF_XGXS_TXFIR_CTL0_GEN2r_TXFIR_POST_OFFSETf_SET(r,f) (r).txfir_ctl0_gen2[0]=(((r).txfir_ctl0_gen2[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_XGXS_TXFIR_CTL0_GEN2r_TXFIR_MAIN_OFFSETf_GET(r) ((((r).txfir_ctl0_gen2[0]) >> 4) & 0xf)
#define BCMI_TSCF_XGXS_TXFIR_CTL0_GEN2r_TXFIR_MAIN_OFFSETf_SET(r,f) (r).txfir_ctl0_gen2[0]=(((r).txfir_ctl0_gen2[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4)) | (15 << (16 + 4))
#define BCMI_TSCF_XGXS_TXFIR_CTL0_GEN2r_TXFIR_PRE_OFFSETf_GET(r) (((r).txfir_ctl0_gen2[0]) & 0xf)
#define BCMI_TSCF_XGXS_TXFIR_CTL0_GEN2r_TXFIR_PRE_OFFSETf_SET(r,f) (r).txfir_ctl0_gen2[0]=(((r).txfir_ctl0_gen2[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access TXFIR_CTL0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TXFIR_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TXFIR_CTL0_GEN2r,(_r._txfir_ctl0_gen2))
#define BCMI_TSCF_XGXS_WRITE_TXFIR_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TXFIR_CTL0_GEN2r,(_r._txfir_ctl0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TXFIR_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TXFIR_CTL0_GEN2r,(_r._txfir_ctl0_gen2))
#define BCMI_TSCF_XGXS_READLN_TXFIR_CTL0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TXFIR_CTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_ctl0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TXFIR_CTL0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TXFIR_CTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_ctl0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TXFIR_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TXFIR_CTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txfir_ctl0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TXFIR_CTL0_GEN2r BCMI_TSCF_XGXS_TXFIR_CTL0_GEN2r
#define TXFIR_CTL0_GEN2r_SIZE BCMI_TSCF_XGXS_TXFIR_CTL0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TXFIR_CTL0_GEN2r_t TXFIR_CTL0_GEN2r_t;
#define TXFIR_CTL0_GEN2r_CLR BCMI_TSCF_XGXS_TXFIR_CTL0_GEN2r_CLR
#define TXFIR_CTL0_GEN2r_SET BCMI_TSCF_XGXS_TXFIR_CTL0_GEN2r_SET
#define TXFIR_CTL0_GEN2r_GET BCMI_TSCF_XGXS_TXFIR_CTL0_GEN2r_GET
#define TXFIR_CTL0_GEN2r_TXFIR_POST_OFFSETf_GET BCMI_TSCF_XGXS_TXFIR_CTL0_GEN2r_TXFIR_POST_OFFSETf_GET
#define TXFIR_CTL0_GEN2r_TXFIR_POST_OFFSETf_SET BCMI_TSCF_XGXS_TXFIR_CTL0_GEN2r_TXFIR_POST_OFFSETf_SET
#define TXFIR_CTL0_GEN2r_TXFIR_MAIN_OFFSETf_GET BCMI_TSCF_XGXS_TXFIR_CTL0_GEN2r_TXFIR_MAIN_OFFSETf_GET
#define TXFIR_CTL0_GEN2r_TXFIR_MAIN_OFFSETf_SET BCMI_TSCF_XGXS_TXFIR_CTL0_GEN2r_TXFIR_MAIN_OFFSETf_SET
#define TXFIR_CTL0_GEN2r_TXFIR_PRE_OFFSETf_GET BCMI_TSCF_XGXS_TXFIR_CTL0_GEN2r_TXFIR_PRE_OFFSETf_GET
#define TXFIR_CTL0_GEN2r_TXFIR_PRE_OFFSETf_SET BCMI_TSCF_XGXS_TXFIR_CTL0_GEN2r_TXFIR_PRE_OFFSETf_SET
#define READ_TXFIR_CTL0_GEN2r BCMI_TSCF_XGXS_READ_TXFIR_CTL0_GEN2r
#define WRITE_TXFIR_CTL0_GEN2r BCMI_TSCF_XGXS_WRITE_TXFIR_CTL0_GEN2r
#define MODIFY_TXFIR_CTL0_GEN2r BCMI_TSCF_XGXS_MODIFY_TXFIR_CTL0_GEN2r
#define READLN_TXFIR_CTL0_GEN2r BCMI_TSCF_XGXS_READLN_TXFIR_CTL0_GEN2r
#define WRITELN_TXFIR_CTL0_GEN2r BCMI_TSCF_XGXS_WRITELN_TXFIR_CTL0_GEN2r
#define WRITEALL_TXFIR_CTL0_GEN2r BCMI_TSCF_XGXS_WRITEALL_TXFIR_CTL0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TXFIR_CTL0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TXFIR_CTL1_GEN2
 * BLOCKS:   TX_FED
 * REGADDR:  0xd131
 * DEVAD:    1
 * DESC:     TX FIR Control1 Register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TXFIR_POST2      tx fir post2 tap value -16 ..+15 (2's complement format)Post2 tap value only driven from a register
 *     TXFIR_POST2_OFFSET tx fir post2 tap offset value -8 to +7 (2's complement format)This field is used to adjust the Post2 tap values
 */
#define BCMI_TSCF_XGXS_TXFIR_CTL1_GEN2r (0x0001d131 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TXFIR_CTL1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TXFIR_CTL1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TXFIR_CTL1_GEN2r_s {
	uint32_t v[1];
	uint32_t txfir_ctl1_gen2[1];
	uint32_t _txfir_ctl1_gen2;
} BCMI_TSCF_XGXS_TXFIR_CTL1_GEN2r_t;

#define BCMI_TSCF_XGXS_TXFIR_CTL1_GEN2r_CLR(r) (r).txfir_ctl1_gen2[0] = 0
#define BCMI_TSCF_XGXS_TXFIR_CTL1_GEN2r_SET(r,d) (r).txfir_ctl1_gen2[0] = d
#define BCMI_TSCF_XGXS_TXFIR_CTL1_GEN2r_GET(r) (r).txfir_ctl1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TXFIR_CTL1_GEN2r_TXFIR_POST2_OFFSETf_GET(r) ((((r).txfir_ctl1_gen2[0]) >> 8) & 0xf)
#define BCMI_TSCF_XGXS_TXFIR_CTL1_GEN2r_TXFIR_POST2_OFFSETf_SET(r,f) (r).txfir_ctl1_gen2[0]=(((r).txfir_ctl1_gen2[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_XGXS_TXFIR_CTL1_GEN2r_TXFIR_POST2f_GET(r) (((r).txfir_ctl1_gen2[0]) & 0x1f)
#define BCMI_TSCF_XGXS_TXFIR_CTL1_GEN2r_TXFIR_POST2f_SET(r,f) (r).txfir_ctl1_gen2[0]=(((r).txfir_ctl1_gen2[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access TXFIR_CTL1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TXFIR_CTL1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TXFIR_CTL1_GEN2r,(_r._txfir_ctl1_gen2))
#define BCMI_TSCF_XGXS_WRITE_TXFIR_CTL1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TXFIR_CTL1_GEN2r,(_r._txfir_ctl1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TXFIR_CTL1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TXFIR_CTL1_GEN2r,(_r._txfir_ctl1_gen2))
#define BCMI_TSCF_XGXS_READLN_TXFIR_CTL1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TXFIR_CTL1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_ctl1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TXFIR_CTL1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TXFIR_CTL1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_ctl1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TXFIR_CTL1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TXFIR_CTL1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txfir_ctl1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TXFIR_CTL1_GEN2r BCMI_TSCF_XGXS_TXFIR_CTL1_GEN2r
#define TXFIR_CTL1_GEN2r_SIZE BCMI_TSCF_XGXS_TXFIR_CTL1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TXFIR_CTL1_GEN2r_t TXFIR_CTL1_GEN2r_t;
#define TXFIR_CTL1_GEN2r_CLR BCMI_TSCF_XGXS_TXFIR_CTL1_GEN2r_CLR
#define TXFIR_CTL1_GEN2r_SET BCMI_TSCF_XGXS_TXFIR_CTL1_GEN2r_SET
#define TXFIR_CTL1_GEN2r_GET BCMI_TSCF_XGXS_TXFIR_CTL1_GEN2r_GET
#define TXFIR_CTL1_GEN2r_TXFIR_POST2_OFFSETf_GET BCMI_TSCF_XGXS_TXFIR_CTL1_GEN2r_TXFIR_POST2_OFFSETf_GET
#define TXFIR_CTL1_GEN2r_TXFIR_POST2_OFFSETf_SET BCMI_TSCF_XGXS_TXFIR_CTL1_GEN2r_TXFIR_POST2_OFFSETf_SET
#define TXFIR_CTL1_GEN2r_TXFIR_POST2f_GET BCMI_TSCF_XGXS_TXFIR_CTL1_GEN2r_TXFIR_POST2f_GET
#define TXFIR_CTL1_GEN2r_TXFIR_POST2f_SET BCMI_TSCF_XGXS_TXFIR_CTL1_GEN2r_TXFIR_POST2f_SET
#define READ_TXFIR_CTL1_GEN2r BCMI_TSCF_XGXS_READ_TXFIR_CTL1_GEN2r
#define WRITE_TXFIR_CTL1_GEN2r BCMI_TSCF_XGXS_WRITE_TXFIR_CTL1_GEN2r
#define MODIFY_TXFIR_CTL1_GEN2r BCMI_TSCF_XGXS_MODIFY_TXFIR_CTL1_GEN2r
#define READLN_TXFIR_CTL1_GEN2r BCMI_TSCF_XGXS_READLN_TXFIR_CTL1_GEN2r
#define WRITELN_TXFIR_CTL1_GEN2r BCMI_TSCF_XGXS_WRITELN_TXFIR_CTL1_GEN2r
#define WRITEALL_TXFIR_CTL1_GEN2r BCMI_TSCF_XGXS_WRITEALL_TXFIR_CTL1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TXFIR_CTL1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TXFIR_CTL2_GEN2
 * BLOCKS:   TX_FED
 * REGADDR:  0xd132
 * DEVAD:    1
 * DESC:     TX FIR Control2 Register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TXFIR_POST3      tx fir post3 tap value.Post3 tap value only driven from a registerThe value range is -8 ..+7 and it is in 2's complement format
 *     TXFIR_POST3_OFFSET tx fir post3 tap offset value -8 to +7 (2's complement format)This field is used to adjust the Post3 tap values
 */
#define BCMI_TSCF_XGXS_TXFIR_CTL2_GEN2r (0x0001d132 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TXFIR_CTL2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TXFIR_CTL2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TXFIR_CTL2_GEN2r_s {
	uint32_t v[1];
	uint32_t txfir_ctl2_gen2[1];
	uint32_t _txfir_ctl2_gen2;
} BCMI_TSCF_XGXS_TXFIR_CTL2_GEN2r_t;

#define BCMI_TSCF_XGXS_TXFIR_CTL2_GEN2r_CLR(r) (r).txfir_ctl2_gen2[0] = 0
#define BCMI_TSCF_XGXS_TXFIR_CTL2_GEN2r_SET(r,d) (r).txfir_ctl2_gen2[0] = d
#define BCMI_TSCF_XGXS_TXFIR_CTL2_GEN2r_GET(r) (r).txfir_ctl2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TXFIR_CTL2_GEN2r_TXFIR_POST3_OFFSETf_GET(r) ((((r).txfir_ctl2_gen2[0]) >> 8) & 0xf)
#define BCMI_TSCF_XGXS_TXFIR_CTL2_GEN2r_TXFIR_POST3_OFFSETf_SET(r,f) (r).txfir_ctl2_gen2[0]=(((r).txfir_ctl2_gen2[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_XGXS_TXFIR_CTL2_GEN2r_TXFIR_POST3f_GET(r) (((r).txfir_ctl2_gen2[0]) & 0xf)
#define BCMI_TSCF_XGXS_TXFIR_CTL2_GEN2r_TXFIR_POST3f_SET(r,f) (r).txfir_ctl2_gen2[0]=(((r).txfir_ctl2_gen2[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access TXFIR_CTL2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TXFIR_CTL2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TXFIR_CTL2_GEN2r,(_r._txfir_ctl2_gen2))
#define BCMI_TSCF_XGXS_WRITE_TXFIR_CTL2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TXFIR_CTL2_GEN2r,(_r._txfir_ctl2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TXFIR_CTL2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TXFIR_CTL2_GEN2r,(_r._txfir_ctl2_gen2))
#define BCMI_TSCF_XGXS_READLN_TXFIR_CTL2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TXFIR_CTL2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_ctl2_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TXFIR_CTL2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TXFIR_CTL2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_ctl2_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TXFIR_CTL2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TXFIR_CTL2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txfir_ctl2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TXFIR_CTL2_GEN2r BCMI_TSCF_XGXS_TXFIR_CTL2_GEN2r
#define TXFIR_CTL2_GEN2r_SIZE BCMI_TSCF_XGXS_TXFIR_CTL2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TXFIR_CTL2_GEN2r_t TXFIR_CTL2_GEN2r_t;
#define TXFIR_CTL2_GEN2r_CLR BCMI_TSCF_XGXS_TXFIR_CTL2_GEN2r_CLR
#define TXFIR_CTL2_GEN2r_SET BCMI_TSCF_XGXS_TXFIR_CTL2_GEN2r_SET
#define TXFIR_CTL2_GEN2r_GET BCMI_TSCF_XGXS_TXFIR_CTL2_GEN2r_GET
#define TXFIR_CTL2_GEN2r_TXFIR_POST3_OFFSETf_GET BCMI_TSCF_XGXS_TXFIR_CTL2_GEN2r_TXFIR_POST3_OFFSETf_GET
#define TXFIR_CTL2_GEN2r_TXFIR_POST3_OFFSETf_SET BCMI_TSCF_XGXS_TXFIR_CTL2_GEN2r_TXFIR_POST3_OFFSETf_SET
#define TXFIR_CTL2_GEN2r_TXFIR_POST3f_GET BCMI_TSCF_XGXS_TXFIR_CTL2_GEN2r_TXFIR_POST3f_GET
#define TXFIR_CTL2_GEN2r_TXFIR_POST3f_SET BCMI_TSCF_XGXS_TXFIR_CTL2_GEN2r_TXFIR_POST3f_SET
#define READ_TXFIR_CTL2_GEN2r BCMI_TSCF_XGXS_READ_TXFIR_CTL2_GEN2r
#define WRITE_TXFIR_CTL2_GEN2r BCMI_TSCF_XGXS_WRITE_TXFIR_CTL2_GEN2r
#define MODIFY_TXFIR_CTL2_GEN2r BCMI_TSCF_XGXS_MODIFY_TXFIR_CTL2_GEN2r
#define READLN_TXFIR_CTL2_GEN2r BCMI_TSCF_XGXS_READLN_TXFIR_CTL2_GEN2r
#define WRITELN_TXFIR_CTL2_GEN2r BCMI_TSCF_XGXS_WRITELN_TXFIR_CTL2_GEN2r
#define WRITEALL_TXFIR_CTL2_GEN2r BCMI_TSCF_XGXS_WRITEALL_TXFIR_CTL2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TXFIR_CTL2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TXFIR_STS0_GEN2
 * BLOCKS:   TX_FED
 * REGADDR:  0xd133
 * DEVAD:    1
 * DESC:     TX FIR Status0 Register
 * RESETVAL: 0x500 (1280)
 * ACCESS:   R/O
 * FIELDS:
 *     TXFIR_PRE_AFTER_OVR tx fir pre tap value after override mux. status
 *     TXFIR_POST_AFTER_OVR tx fir post tap value after override mux. status
 */
#define BCMI_TSCF_XGXS_TXFIR_STS0_GEN2r (0x0001d133 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TXFIR_STS0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TXFIR_STS0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TXFIR_STS0_GEN2r_s {
	uint32_t v[1];
	uint32_t txfir_sts0_gen2[1];
	uint32_t _txfir_sts0_gen2;
} BCMI_TSCF_XGXS_TXFIR_STS0_GEN2r_t;

#define BCMI_TSCF_XGXS_TXFIR_STS0_GEN2r_CLR(r) (r).txfir_sts0_gen2[0] = 0
#define BCMI_TSCF_XGXS_TXFIR_STS0_GEN2r_SET(r,d) (r).txfir_sts0_gen2[0] = d
#define BCMI_TSCF_XGXS_TXFIR_STS0_GEN2r_GET(r) (r).txfir_sts0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TXFIR_STS0_GEN2r_TXFIR_POST_AFTER_OVRf_GET(r) ((((r).txfir_sts0_gen2[0]) >> 8) & 0x3f)
#define BCMI_TSCF_XGXS_TXFIR_STS0_GEN2r_TXFIR_POST_AFTER_OVRf_SET(r,f) (r).txfir_sts0_gen2[0]=(((r).txfir_sts0_gen2[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8)) | (63 << (16 + 8))
#define BCMI_TSCF_XGXS_TXFIR_STS0_GEN2r_TXFIR_PRE_AFTER_OVRf_GET(r) (((r).txfir_sts0_gen2[0]) & 0x1f)
#define BCMI_TSCF_XGXS_TXFIR_STS0_GEN2r_TXFIR_PRE_AFTER_OVRf_SET(r,f) (r).txfir_sts0_gen2[0]=(((r).txfir_sts0_gen2[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access TXFIR_STS0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TXFIR_STS0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TXFIR_STS0_GEN2r,(_r._txfir_sts0_gen2))
#define BCMI_TSCF_XGXS_WRITE_TXFIR_STS0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TXFIR_STS0_GEN2r,(_r._txfir_sts0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TXFIR_STS0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TXFIR_STS0_GEN2r,(_r._txfir_sts0_gen2))
#define BCMI_TSCF_XGXS_READLN_TXFIR_STS0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TXFIR_STS0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_sts0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TXFIR_STS0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TXFIR_STS0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_sts0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TXFIR_STS0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TXFIR_STS0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txfir_sts0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TXFIR_STS0_GEN2r BCMI_TSCF_XGXS_TXFIR_STS0_GEN2r
#define TXFIR_STS0_GEN2r_SIZE BCMI_TSCF_XGXS_TXFIR_STS0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TXFIR_STS0_GEN2r_t TXFIR_STS0_GEN2r_t;
#define TXFIR_STS0_GEN2r_CLR BCMI_TSCF_XGXS_TXFIR_STS0_GEN2r_CLR
#define TXFIR_STS0_GEN2r_SET BCMI_TSCF_XGXS_TXFIR_STS0_GEN2r_SET
#define TXFIR_STS0_GEN2r_GET BCMI_TSCF_XGXS_TXFIR_STS0_GEN2r_GET
#define TXFIR_STS0_GEN2r_TXFIR_POST_AFTER_OVRf_GET BCMI_TSCF_XGXS_TXFIR_STS0_GEN2r_TXFIR_POST_AFTER_OVRf_GET
#define TXFIR_STS0_GEN2r_TXFIR_POST_AFTER_OVRf_SET BCMI_TSCF_XGXS_TXFIR_STS0_GEN2r_TXFIR_POST_AFTER_OVRf_SET
#define TXFIR_STS0_GEN2r_TXFIR_PRE_AFTER_OVRf_GET BCMI_TSCF_XGXS_TXFIR_STS0_GEN2r_TXFIR_PRE_AFTER_OVRf_GET
#define TXFIR_STS0_GEN2r_TXFIR_PRE_AFTER_OVRf_SET BCMI_TSCF_XGXS_TXFIR_STS0_GEN2r_TXFIR_PRE_AFTER_OVRf_SET
#define READ_TXFIR_STS0_GEN2r BCMI_TSCF_XGXS_READ_TXFIR_STS0_GEN2r
#define WRITE_TXFIR_STS0_GEN2r BCMI_TSCF_XGXS_WRITE_TXFIR_STS0_GEN2r
#define MODIFY_TXFIR_STS0_GEN2r BCMI_TSCF_XGXS_MODIFY_TXFIR_STS0_GEN2r
#define READLN_TXFIR_STS0_GEN2r BCMI_TSCF_XGXS_READLN_TXFIR_STS0_GEN2r
#define WRITELN_TXFIR_STS0_GEN2r BCMI_TSCF_XGXS_WRITELN_TXFIR_STS0_GEN2r
#define WRITEALL_TXFIR_STS0_GEN2r BCMI_TSCF_XGXS_WRITEALL_TXFIR_STS0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TXFIR_STS0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TXFIR_STS1_GEN2
 * BLOCKS:   TX_FED
 * REGADDR:  0xd134
 * DEVAD:    1
 * DESC:     TX FIR Status1 Register
 * RESETVAL: 0x2b (43)
 * ACCESS:   R/O
 * FIELDS:
 *     TXFIR_MAIN_AFTER_OVR tx fir main tap value after override mux. status
 */
#define BCMI_TSCF_XGXS_TXFIR_STS1_GEN2r (0x0001d134 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TXFIR_STS1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TXFIR_STS1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TXFIR_STS1_GEN2r_s {
	uint32_t v[1];
	uint32_t txfir_sts1_gen2[1];
	uint32_t _txfir_sts1_gen2;
} BCMI_TSCF_XGXS_TXFIR_STS1_GEN2r_t;

#define BCMI_TSCF_XGXS_TXFIR_STS1_GEN2r_CLR(r) (r).txfir_sts1_gen2[0] = 0
#define BCMI_TSCF_XGXS_TXFIR_STS1_GEN2r_SET(r,d) (r).txfir_sts1_gen2[0] = d
#define BCMI_TSCF_XGXS_TXFIR_STS1_GEN2r_GET(r) (r).txfir_sts1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TXFIR_STS1_GEN2r_TXFIR_MAIN_AFTER_OVRf_GET(r) (((r).txfir_sts1_gen2[0]) & 0x7f)
#define BCMI_TSCF_XGXS_TXFIR_STS1_GEN2r_TXFIR_MAIN_AFTER_OVRf_SET(r,f) (r).txfir_sts1_gen2[0]=(((r).txfir_sts1_gen2[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f)) | (0x7f << 16)

/*
 * These macros can be used to access TXFIR_STS1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TXFIR_STS1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TXFIR_STS1_GEN2r,(_r._txfir_sts1_gen2))
#define BCMI_TSCF_XGXS_WRITE_TXFIR_STS1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TXFIR_STS1_GEN2r,(_r._txfir_sts1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TXFIR_STS1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TXFIR_STS1_GEN2r,(_r._txfir_sts1_gen2))
#define BCMI_TSCF_XGXS_READLN_TXFIR_STS1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TXFIR_STS1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_sts1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TXFIR_STS1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TXFIR_STS1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_sts1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TXFIR_STS1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TXFIR_STS1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txfir_sts1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TXFIR_STS1_GEN2r BCMI_TSCF_XGXS_TXFIR_STS1_GEN2r
#define TXFIR_STS1_GEN2r_SIZE BCMI_TSCF_XGXS_TXFIR_STS1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TXFIR_STS1_GEN2r_t TXFIR_STS1_GEN2r_t;
#define TXFIR_STS1_GEN2r_CLR BCMI_TSCF_XGXS_TXFIR_STS1_GEN2r_CLR
#define TXFIR_STS1_GEN2r_SET BCMI_TSCF_XGXS_TXFIR_STS1_GEN2r_SET
#define TXFIR_STS1_GEN2r_GET BCMI_TSCF_XGXS_TXFIR_STS1_GEN2r_GET
#define TXFIR_STS1_GEN2r_TXFIR_MAIN_AFTER_OVRf_GET BCMI_TSCF_XGXS_TXFIR_STS1_GEN2r_TXFIR_MAIN_AFTER_OVRf_GET
#define TXFIR_STS1_GEN2r_TXFIR_MAIN_AFTER_OVRf_SET BCMI_TSCF_XGXS_TXFIR_STS1_GEN2r_TXFIR_MAIN_AFTER_OVRf_SET
#define READ_TXFIR_STS1_GEN2r BCMI_TSCF_XGXS_READ_TXFIR_STS1_GEN2r
#define WRITE_TXFIR_STS1_GEN2r BCMI_TSCF_XGXS_WRITE_TXFIR_STS1_GEN2r
#define MODIFY_TXFIR_STS1_GEN2r BCMI_TSCF_XGXS_MODIFY_TXFIR_STS1_GEN2r
#define READLN_TXFIR_STS1_GEN2r BCMI_TSCF_XGXS_READLN_TXFIR_STS1_GEN2r
#define WRITELN_TXFIR_STS1_GEN2r BCMI_TSCF_XGXS_WRITELN_TXFIR_STS1_GEN2r
#define WRITEALL_TXFIR_STS1_GEN2r BCMI_TSCF_XGXS_WRITEALL_TXFIR_STS1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TXFIR_STS1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TXFIR_STS2_GEN2
 * BLOCKS:   TX_FED
 * REGADDR:  0xd135
 * DEVAD:    1
 * DESC:     TX FIR Status2 Register
 * RESETVAL: 0x500 (1280)
 * ACCESS:   R/O
 * FIELDS:
 *     TXFIR_PRE_ADJUSTED tx fir pre tap value after offset adjustment. status
 *     TXFIR_POST_ADJUSTED tx fir post tap value after offset adjustment. status
 */
#define BCMI_TSCF_XGXS_TXFIR_STS2_GEN2r (0x0001d135 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TXFIR_STS2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TXFIR_STS2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TXFIR_STS2_GEN2r_s {
	uint32_t v[1];
	uint32_t txfir_sts2_gen2[1];
	uint32_t _txfir_sts2_gen2;
} BCMI_TSCF_XGXS_TXFIR_STS2_GEN2r_t;

#define BCMI_TSCF_XGXS_TXFIR_STS2_GEN2r_CLR(r) (r).txfir_sts2_gen2[0] = 0
#define BCMI_TSCF_XGXS_TXFIR_STS2_GEN2r_SET(r,d) (r).txfir_sts2_gen2[0] = d
#define BCMI_TSCF_XGXS_TXFIR_STS2_GEN2r_GET(r) (r).txfir_sts2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TXFIR_STS2_GEN2r_TXFIR_POST_ADJUSTEDf_GET(r) ((((r).txfir_sts2_gen2[0]) >> 8) & 0x3f)
#define BCMI_TSCF_XGXS_TXFIR_STS2_GEN2r_TXFIR_POST_ADJUSTEDf_SET(r,f) (r).txfir_sts2_gen2[0]=(((r).txfir_sts2_gen2[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8)) | (63 << (16 + 8))
#define BCMI_TSCF_XGXS_TXFIR_STS2_GEN2r_TXFIR_PRE_ADJUSTEDf_GET(r) (((r).txfir_sts2_gen2[0]) & 0x1f)
#define BCMI_TSCF_XGXS_TXFIR_STS2_GEN2r_TXFIR_PRE_ADJUSTEDf_SET(r,f) (r).txfir_sts2_gen2[0]=(((r).txfir_sts2_gen2[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access TXFIR_STS2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TXFIR_STS2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TXFIR_STS2_GEN2r,(_r._txfir_sts2_gen2))
#define BCMI_TSCF_XGXS_WRITE_TXFIR_STS2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TXFIR_STS2_GEN2r,(_r._txfir_sts2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TXFIR_STS2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TXFIR_STS2_GEN2r,(_r._txfir_sts2_gen2))
#define BCMI_TSCF_XGXS_READLN_TXFIR_STS2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TXFIR_STS2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_sts2_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TXFIR_STS2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TXFIR_STS2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_sts2_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TXFIR_STS2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TXFIR_STS2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txfir_sts2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TXFIR_STS2_GEN2r BCMI_TSCF_XGXS_TXFIR_STS2_GEN2r
#define TXFIR_STS2_GEN2r_SIZE BCMI_TSCF_XGXS_TXFIR_STS2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TXFIR_STS2_GEN2r_t TXFIR_STS2_GEN2r_t;
#define TXFIR_STS2_GEN2r_CLR BCMI_TSCF_XGXS_TXFIR_STS2_GEN2r_CLR
#define TXFIR_STS2_GEN2r_SET BCMI_TSCF_XGXS_TXFIR_STS2_GEN2r_SET
#define TXFIR_STS2_GEN2r_GET BCMI_TSCF_XGXS_TXFIR_STS2_GEN2r_GET
#define TXFIR_STS2_GEN2r_TXFIR_POST_ADJUSTEDf_GET BCMI_TSCF_XGXS_TXFIR_STS2_GEN2r_TXFIR_POST_ADJUSTEDf_GET
#define TXFIR_STS2_GEN2r_TXFIR_POST_ADJUSTEDf_SET BCMI_TSCF_XGXS_TXFIR_STS2_GEN2r_TXFIR_POST_ADJUSTEDf_SET
#define TXFIR_STS2_GEN2r_TXFIR_PRE_ADJUSTEDf_GET BCMI_TSCF_XGXS_TXFIR_STS2_GEN2r_TXFIR_PRE_ADJUSTEDf_GET
#define TXFIR_STS2_GEN2r_TXFIR_PRE_ADJUSTEDf_SET BCMI_TSCF_XGXS_TXFIR_STS2_GEN2r_TXFIR_PRE_ADJUSTEDf_SET
#define READ_TXFIR_STS2_GEN2r BCMI_TSCF_XGXS_READ_TXFIR_STS2_GEN2r
#define WRITE_TXFIR_STS2_GEN2r BCMI_TSCF_XGXS_WRITE_TXFIR_STS2_GEN2r
#define MODIFY_TXFIR_STS2_GEN2r BCMI_TSCF_XGXS_MODIFY_TXFIR_STS2_GEN2r
#define READLN_TXFIR_STS2_GEN2r BCMI_TSCF_XGXS_READLN_TXFIR_STS2_GEN2r
#define WRITELN_TXFIR_STS2_GEN2r BCMI_TSCF_XGXS_WRITELN_TXFIR_STS2_GEN2r
#define WRITEALL_TXFIR_STS2_GEN2r BCMI_TSCF_XGXS_WRITEALL_TXFIR_STS2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TXFIR_STS2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TXFIR_STS3_GEN2
 * BLOCKS:   TX_FED
 * REGADDR:  0xd136
 * DEVAD:    1
 * DESC:     TX FIR Status3 Register
 * RESETVAL: 0x2b (43)
 * ACCESS:   R/O
 * FIELDS:
 *     TXFIR_MAIN_ADJUSTED tx fir main tap value after offset adjustment. status
 *     TXFIR_POST2_ADJUSTED tx fir post2 tap value after offset adjustment. statusThe value range is -16 ..+15 and it is in 2's complement format
 */
#define BCMI_TSCF_XGXS_TXFIR_STS3_GEN2r (0x0001d136 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TXFIR_STS3_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TXFIR_STS3_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TXFIR_STS3_GEN2r_s {
	uint32_t v[1];
	uint32_t txfir_sts3_gen2[1];
	uint32_t _txfir_sts3_gen2;
} BCMI_TSCF_XGXS_TXFIR_STS3_GEN2r_t;

#define BCMI_TSCF_XGXS_TXFIR_STS3_GEN2r_CLR(r) (r).txfir_sts3_gen2[0] = 0
#define BCMI_TSCF_XGXS_TXFIR_STS3_GEN2r_SET(r,d) (r).txfir_sts3_gen2[0] = d
#define BCMI_TSCF_XGXS_TXFIR_STS3_GEN2r_GET(r) (r).txfir_sts3_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TXFIR_STS3_GEN2r_TXFIR_POST2_ADJUSTEDf_GET(r) ((((r).txfir_sts3_gen2[0]) >> 8) & 0x1f)
#define BCMI_TSCF_XGXS_TXFIR_STS3_GEN2r_TXFIR_POST2_ADJUSTEDf_SET(r,f) (r).txfir_sts3_gen2[0]=(((r).txfir_sts3_gen2[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8)) | (31 << (16 + 8))
#define BCMI_TSCF_XGXS_TXFIR_STS3_GEN2r_TXFIR_MAIN_ADJUSTEDf_GET(r) (((r).txfir_sts3_gen2[0]) & 0x7f)
#define BCMI_TSCF_XGXS_TXFIR_STS3_GEN2r_TXFIR_MAIN_ADJUSTEDf_SET(r,f) (r).txfir_sts3_gen2[0]=(((r).txfir_sts3_gen2[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f)) | (0x7f << 16)

/*
 * These macros can be used to access TXFIR_STS3_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TXFIR_STS3_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TXFIR_STS3_GEN2r,(_r._txfir_sts3_gen2))
#define BCMI_TSCF_XGXS_WRITE_TXFIR_STS3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TXFIR_STS3_GEN2r,(_r._txfir_sts3_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TXFIR_STS3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TXFIR_STS3_GEN2r,(_r._txfir_sts3_gen2))
#define BCMI_TSCF_XGXS_READLN_TXFIR_STS3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TXFIR_STS3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_sts3_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TXFIR_STS3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TXFIR_STS3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_sts3_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TXFIR_STS3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TXFIR_STS3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txfir_sts3_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TXFIR_STS3_GEN2r BCMI_TSCF_XGXS_TXFIR_STS3_GEN2r
#define TXFIR_STS3_GEN2r_SIZE BCMI_TSCF_XGXS_TXFIR_STS3_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TXFIR_STS3_GEN2r_t TXFIR_STS3_GEN2r_t;
#define TXFIR_STS3_GEN2r_CLR BCMI_TSCF_XGXS_TXFIR_STS3_GEN2r_CLR
#define TXFIR_STS3_GEN2r_SET BCMI_TSCF_XGXS_TXFIR_STS3_GEN2r_SET
#define TXFIR_STS3_GEN2r_GET BCMI_TSCF_XGXS_TXFIR_STS3_GEN2r_GET
#define TXFIR_STS3_GEN2r_TXFIR_POST2_ADJUSTEDf_GET BCMI_TSCF_XGXS_TXFIR_STS3_GEN2r_TXFIR_POST2_ADJUSTEDf_GET
#define TXFIR_STS3_GEN2r_TXFIR_POST2_ADJUSTEDf_SET BCMI_TSCF_XGXS_TXFIR_STS3_GEN2r_TXFIR_POST2_ADJUSTEDf_SET
#define TXFIR_STS3_GEN2r_TXFIR_MAIN_ADJUSTEDf_GET BCMI_TSCF_XGXS_TXFIR_STS3_GEN2r_TXFIR_MAIN_ADJUSTEDf_GET
#define TXFIR_STS3_GEN2r_TXFIR_MAIN_ADJUSTEDf_SET BCMI_TSCF_XGXS_TXFIR_STS3_GEN2r_TXFIR_MAIN_ADJUSTEDf_SET
#define READ_TXFIR_STS3_GEN2r BCMI_TSCF_XGXS_READ_TXFIR_STS3_GEN2r
#define WRITE_TXFIR_STS3_GEN2r BCMI_TSCF_XGXS_WRITE_TXFIR_STS3_GEN2r
#define MODIFY_TXFIR_STS3_GEN2r BCMI_TSCF_XGXS_MODIFY_TXFIR_STS3_GEN2r
#define READLN_TXFIR_STS3_GEN2r BCMI_TSCF_XGXS_READLN_TXFIR_STS3_GEN2r
#define WRITELN_TXFIR_STS3_GEN2r BCMI_TSCF_XGXS_WRITELN_TXFIR_STS3_GEN2r
#define WRITEALL_TXFIR_STS3_GEN2r BCMI_TSCF_XGXS_WRITEALL_TXFIR_STS3_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TXFIR_STS3_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TXFIR_STS4_GEN2
 * BLOCKS:   TX_FED
 * REGADDR:  0xd137
 * DEVAD:    1
 * DESC:     TX FIR Status4 Register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TXFIR_POST3_ADJUSTED tx fir post3 tap value after offset adjustment. statusThe value range is -8 ..+7 and it is in 2's complement format
 */
#define BCMI_TSCF_XGXS_TXFIR_STS4_GEN2r (0x0001d137 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TXFIR_STS4_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TXFIR_STS4_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TXFIR_STS4_GEN2r_s {
	uint32_t v[1];
	uint32_t txfir_sts4_gen2[1];
	uint32_t _txfir_sts4_gen2;
} BCMI_TSCF_XGXS_TXFIR_STS4_GEN2r_t;

#define BCMI_TSCF_XGXS_TXFIR_STS4_GEN2r_CLR(r) (r).txfir_sts4_gen2[0] = 0
#define BCMI_TSCF_XGXS_TXFIR_STS4_GEN2r_SET(r,d) (r).txfir_sts4_gen2[0] = d
#define BCMI_TSCF_XGXS_TXFIR_STS4_GEN2r_GET(r) (r).txfir_sts4_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TXFIR_STS4_GEN2r_TXFIR_POST3_ADJUSTEDf_GET(r) (((r).txfir_sts4_gen2[0]) & 0xf)
#define BCMI_TSCF_XGXS_TXFIR_STS4_GEN2r_TXFIR_POST3_ADJUSTEDf_SET(r,f) (r).txfir_sts4_gen2[0]=(((r).txfir_sts4_gen2[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access TXFIR_STS4_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TXFIR_STS4_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TXFIR_STS4_GEN2r,(_r._txfir_sts4_gen2))
#define BCMI_TSCF_XGXS_WRITE_TXFIR_STS4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TXFIR_STS4_GEN2r,(_r._txfir_sts4_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TXFIR_STS4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TXFIR_STS4_GEN2r,(_r._txfir_sts4_gen2))
#define BCMI_TSCF_XGXS_READLN_TXFIR_STS4_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TXFIR_STS4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_sts4_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TXFIR_STS4_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TXFIR_STS4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_sts4_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TXFIR_STS4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TXFIR_STS4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txfir_sts4_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TXFIR_STS4_GEN2r BCMI_TSCF_XGXS_TXFIR_STS4_GEN2r
#define TXFIR_STS4_GEN2r_SIZE BCMI_TSCF_XGXS_TXFIR_STS4_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TXFIR_STS4_GEN2r_t TXFIR_STS4_GEN2r_t;
#define TXFIR_STS4_GEN2r_CLR BCMI_TSCF_XGXS_TXFIR_STS4_GEN2r_CLR
#define TXFIR_STS4_GEN2r_SET BCMI_TSCF_XGXS_TXFIR_STS4_GEN2r_SET
#define TXFIR_STS4_GEN2r_GET BCMI_TSCF_XGXS_TXFIR_STS4_GEN2r_GET
#define TXFIR_STS4_GEN2r_TXFIR_POST3_ADJUSTEDf_GET BCMI_TSCF_XGXS_TXFIR_STS4_GEN2r_TXFIR_POST3_ADJUSTEDf_GET
#define TXFIR_STS4_GEN2r_TXFIR_POST3_ADJUSTEDf_SET BCMI_TSCF_XGXS_TXFIR_STS4_GEN2r_TXFIR_POST3_ADJUSTEDf_SET
#define READ_TXFIR_STS4_GEN2r BCMI_TSCF_XGXS_READ_TXFIR_STS4_GEN2r
#define WRITE_TXFIR_STS4_GEN2r BCMI_TSCF_XGXS_WRITE_TXFIR_STS4_GEN2r
#define MODIFY_TXFIR_STS4_GEN2r BCMI_TSCF_XGXS_MODIFY_TXFIR_STS4_GEN2r
#define READLN_TXFIR_STS4_GEN2r BCMI_TSCF_XGXS_READLN_TXFIR_STS4_GEN2r
#define WRITELN_TXFIR_STS4_GEN2r BCMI_TSCF_XGXS_WRITELN_TXFIR_STS4_GEN2r
#define WRITEALL_TXFIR_STS4_GEN2r BCMI_TSCF_XGXS_WRITEALL_TXFIR_STS4_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TXFIR_STS4_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TXFIR_UC_CTL0_GEN2
 * BLOCKS:   TX_FED
 * REGADDR:  0xd138
 * DEVAD:    1
 * DESC:     Micro Control 0 Register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_TX_DISABLE micro tx disableThis field is used by the Microcontroller for tx disable control during CL72 forced modePlease see Eagle & Merlin PMD Internal Functional Specification for details
 */
#define BCMI_TSCF_XGXS_TXFIR_UC_CTL0_GEN2r (0x0001d138 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TXFIR_UC_CTL0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TXFIR_UC_CTL0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TXFIR_UC_CTL0_GEN2r_s {
	uint32_t v[1];
	uint32_t txfir_uc_ctl0_gen2[1];
	uint32_t _txfir_uc_ctl0_gen2;
} BCMI_TSCF_XGXS_TXFIR_UC_CTL0_GEN2r_t;

#define BCMI_TSCF_XGXS_TXFIR_UC_CTL0_GEN2r_CLR(r) (r).txfir_uc_ctl0_gen2[0] = 0
#define BCMI_TSCF_XGXS_TXFIR_UC_CTL0_GEN2r_SET(r,d) (r).txfir_uc_ctl0_gen2[0] = d
#define BCMI_TSCF_XGXS_TXFIR_UC_CTL0_GEN2r_GET(r) (r).txfir_uc_ctl0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TXFIR_UC_CTL0_GEN2r_MICRO_TX_DISABLEf_GET(r) (((r).txfir_uc_ctl0_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_TXFIR_UC_CTL0_GEN2r_MICRO_TX_DISABLEf_SET(r,f) (r).txfir_uc_ctl0_gen2[0]=(((r).txfir_uc_ctl0_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TXFIR_UC_CTL0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TXFIR_UC_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TXFIR_UC_CTL0_GEN2r,(_r._txfir_uc_ctl0_gen2))
#define BCMI_TSCF_XGXS_WRITE_TXFIR_UC_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TXFIR_UC_CTL0_GEN2r,(_r._txfir_uc_ctl0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TXFIR_UC_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TXFIR_UC_CTL0_GEN2r,(_r._txfir_uc_ctl0_gen2))
#define BCMI_TSCF_XGXS_READLN_TXFIR_UC_CTL0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TXFIR_UC_CTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_uc_ctl0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TXFIR_UC_CTL0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TXFIR_UC_CTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_uc_ctl0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TXFIR_UC_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TXFIR_UC_CTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txfir_uc_ctl0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TXFIR_UC_CTL0_GEN2r BCMI_TSCF_XGXS_TXFIR_UC_CTL0_GEN2r
#define TXFIR_UC_CTL0_GEN2r_SIZE BCMI_TSCF_XGXS_TXFIR_UC_CTL0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TXFIR_UC_CTL0_GEN2r_t TXFIR_UC_CTL0_GEN2r_t;
#define TXFIR_UC_CTL0_GEN2r_CLR BCMI_TSCF_XGXS_TXFIR_UC_CTL0_GEN2r_CLR
#define TXFIR_UC_CTL0_GEN2r_SET BCMI_TSCF_XGXS_TXFIR_UC_CTL0_GEN2r_SET
#define TXFIR_UC_CTL0_GEN2r_GET BCMI_TSCF_XGXS_TXFIR_UC_CTL0_GEN2r_GET
#define TXFIR_UC_CTL0_GEN2r_MICRO_TX_DISABLEf_GET BCMI_TSCF_XGXS_TXFIR_UC_CTL0_GEN2r_MICRO_TX_DISABLEf_GET
#define TXFIR_UC_CTL0_GEN2r_MICRO_TX_DISABLEf_SET BCMI_TSCF_XGXS_TXFIR_UC_CTL0_GEN2r_MICRO_TX_DISABLEf_SET
#define READ_TXFIR_UC_CTL0_GEN2r BCMI_TSCF_XGXS_READ_TXFIR_UC_CTL0_GEN2r
#define WRITE_TXFIR_UC_CTL0_GEN2r BCMI_TSCF_XGXS_WRITE_TXFIR_UC_CTL0_GEN2r
#define MODIFY_TXFIR_UC_CTL0_GEN2r BCMI_TSCF_XGXS_MODIFY_TXFIR_UC_CTL0_GEN2r
#define READLN_TXFIR_UC_CTL0_GEN2r BCMI_TSCF_XGXS_READLN_TXFIR_UC_CTL0_GEN2r
#define WRITELN_TXFIR_UC_CTL0_GEN2r BCMI_TSCF_XGXS_WRITELN_TXFIR_UC_CTL0_GEN2r
#define WRITEALL_TXFIR_UC_CTL0_GEN2r BCMI_TSCF_XGXS_WRITEALL_TXFIR_UC_CTL0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TXFIR_UC_CTL0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TXFIR_MISC_CTL1_GEN2
 * BLOCKS:   TX_FED
 * REGADDR:  0xd139
 * DEVAD:    1
 * DESC:     Misc Control 1 Register
 * RESETVAL: 0x300 (768)
 * ACCESS:   R/W
 * FIELDS:
 *     SDK_TX_DISABLE   sdk tx disableThis tx disable control field is for SDK use during TX programmingPlease see Eagle & Merlin PMD Internal Functional Specification for details
 *     PMD_TX_DISABLE_PKILL Tx disable using the pmd_tx_disable pin disable control0 - enable tx disable from pmd_tx_disable pin1 - disable tx disable from pmd_tx_disable pin
 *     TX_DISABLE_TIMER_CTRL tx_disable timer value controlstx_disable_timer_ctrl[5] (MSB) selects the timer units0 - 2us units1 - 1ms unitstx_disable_timer_ctrl[4:0] (LSB[4:0]) = controls the number of units perthe list below0                 0 units1                 1 units2                 2 units3                 3 units4                 4 units5                 5 units6                 6 units7                 7 units8                 8 units9                10 units10               12 units11               14 units12               16 units13               20 units14               24 units15               28 units16               32 units17               40 units18               48 units19               56 units20               64 units21               80 units22               96 units23              112 units24              128 units25              160 units26              192 units27              224 units28              256 units29              320 units30              384 units31              448 units
 *     TX_EEE_QUIET_EN  Tx eee quiet mode control1 - Enable eee quiet mode when pmd_tx_mode (input pins) == 2'b010 - Disable eee quiet mode
 *     TX_EEE_ALERT_EN  Tx eee alert mode control1 - Enable eee alert mode when pmd_tx_mode (input pins) == 2'b100 - Disable eee alert mode
 *     TX_DISABLE_OUTPUT_SEL These bits select tx disable output function2'b00 - send electrical idles2'b01 - send power down2'b10 - send ones2'b11 - send zeroes
 *     DP_RESET_TX_DISABLE_DIS Tx disable based on data path reset0 - Enable tx disable based on data path reset1 - Disable tx disable based on data path reset
 */
#define BCMI_TSCF_XGXS_TXFIR_MISC_CTL1_GEN2r (0x0001d139 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TXFIR_MISC_CTL1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TXFIR_MISC_CTL1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TXFIR_MISC_CTL1_GEN2r_s {
	uint32_t v[1];
	uint32_t txfir_misc_ctl1_gen2[1];
	uint32_t _txfir_misc_ctl1_gen2;
} BCMI_TSCF_XGXS_TXFIR_MISC_CTL1_GEN2r_t;

#define BCMI_TSCF_XGXS_TXFIR_MISC_CTL1_GEN2r_CLR(r) (r).txfir_misc_ctl1_gen2[0] = 0
#define BCMI_TSCF_XGXS_TXFIR_MISC_CTL1_GEN2r_SET(r,d) (r).txfir_misc_ctl1_gen2[0] = d
#define BCMI_TSCF_XGXS_TXFIR_MISC_CTL1_GEN2r_GET(r) (r).txfir_misc_ctl1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TXFIR_MISC_CTL1_GEN2r_DP_RESET_TX_DISABLE_DISf_GET(r) ((((r).txfir_misc_ctl1_gen2[0]) >> 12) & 0x1)
#define BCMI_TSCF_XGXS_TXFIR_MISC_CTL1_GEN2r_DP_RESET_TX_DISABLE_DISf_SET(r,f) (r).txfir_misc_ctl1_gen2[0]=(((r).txfir_misc_ctl1_gen2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_TSCF_XGXS_TXFIR_MISC_CTL1_GEN2r_TX_DISABLE_OUTPUT_SELf_GET(r) ((((r).txfir_misc_ctl1_gen2[0]) >> 10) & 0x3)
#define BCMI_TSCF_XGXS_TXFIR_MISC_CTL1_GEN2r_TX_DISABLE_OUTPUT_SELf_SET(r,f) (r).txfir_misc_ctl1_gen2[0]=(((r).txfir_misc_ctl1_gen2[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10)) | (3 << (16 + 10))
#define BCMI_TSCF_XGXS_TXFIR_MISC_CTL1_GEN2r_TX_EEE_ALERT_ENf_GET(r) ((((r).txfir_misc_ctl1_gen2[0]) >> 9) & 0x1)
#define BCMI_TSCF_XGXS_TXFIR_MISC_CTL1_GEN2r_TX_EEE_ALERT_ENf_SET(r,f) (r).txfir_misc_ctl1_gen2[0]=(((r).txfir_misc_ctl1_gen2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_XGXS_TXFIR_MISC_CTL1_GEN2r_TX_EEE_QUIET_ENf_GET(r) ((((r).txfir_misc_ctl1_gen2[0]) >> 8) & 0x1)
#define BCMI_TSCF_XGXS_TXFIR_MISC_CTL1_GEN2r_TX_EEE_QUIET_ENf_SET(r,f) (r).txfir_misc_ctl1_gen2[0]=(((r).txfir_misc_ctl1_gen2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_XGXS_TXFIR_MISC_CTL1_GEN2r_TX_DISABLE_TIMER_CTRLf_GET(r) ((((r).txfir_misc_ctl1_gen2[0]) >> 2) & 0x3f)
#define BCMI_TSCF_XGXS_TXFIR_MISC_CTL1_GEN2r_TX_DISABLE_TIMER_CTRLf_SET(r,f) (r).txfir_misc_ctl1_gen2[0]=(((r).txfir_misc_ctl1_gen2[0] & ~((uint32_t)0x3f << 2)) | ((((uint32_t)f) & 0x3f) << 2)) | (63 << (16 + 2))
#define BCMI_TSCF_XGXS_TXFIR_MISC_CTL1_GEN2r_PMD_TX_DISABLE_PKILLf_GET(r) ((((r).txfir_misc_ctl1_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_TXFIR_MISC_CTL1_GEN2r_PMD_TX_DISABLE_PKILLf_SET(r,f) (r).txfir_misc_ctl1_gen2[0]=(((r).txfir_misc_ctl1_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_TXFIR_MISC_CTL1_GEN2r_SDK_TX_DISABLEf_GET(r) (((r).txfir_misc_ctl1_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_TXFIR_MISC_CTL1_GEN2r_SDK_TX_DISABLEf_SET(r,f) (r).txfir_misc_ctl1_gen2[0]=(((r).txfir_misc_ctl1_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TXFIR_MISC_CTL1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TXFIR_MISC_CTL1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TXFIR_MISC_CTL1_GEN2r,(_r._txfir_misc_ctl1_gen2))
#define BCMI_TSCF_XGXS_WRITE_TXFIR_MISC_CTL1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TXFIR_MISC_CTL1_GEN2r,(_r._txfir_misc_ctl1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TXFIR_MISC_CTL1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TXFIR_MISC_CTL1_GEN2r,(_r._txfir_misc_ctl1_gen2))
#define BCMI_TSCF_XGXS_READLN_TXFIR_MISC_CTL1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TXFIR_MISC_CTL1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_misc_ctl1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TXFIR_MISC_CTL1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TXFIR_MISC_CTL1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_misc_ctl1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TXFIR_MISC_CTL1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TXFIR_MISC_CTL1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txfir_misc_ctl1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TXFIR_MISC_CTL1_GEN2r BCMI_TSCF_XGXS_TXFIR_MISC_CTL1_GEN2r
#define TXFIR_MISC_CTL1_GEN2r_SIZE BCMI_TSCF_XGXS_TXFIR_MISC_CTL1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TXFIR_MISC_CTL1_GEN2r_t TXFIR_MISC_CTL1_GEN2r_t;
#define TXFIR_MISC_CTL1_GEN2r_CLR BCMI_TSCF_XGXS_TXFIR_MISC_CTL1_GEN2r_CLR
#define TXFIR_MISC_CTL1_GEN2r_SET BCMI_TSCF_XGXS_TXFIR_MISC_CTL1_GEN2r_SET
#define TXFIR_MISC_CTL1_GEN2r_GET BCMI_TSCF_XGXS_TXFIR_MISC_CTL1_GEN2r_GET
#define TXFIR_MISC_CTL1_GEN2r_DP_RESET_TX_DISABLE_DISf_GET BCMI_TSCF_XGXS_TXFIR_MISC_CTL1_GEN2r_DP_RESET_TX_DISABLE_DISf_GET
#define TXFIR_MISC_CTL1_GEN2r_DP_RESET_TX_DISABLE_DISf_SET BCMI_TSCF_XGXS_TXFIR_MISC_CTL1_GEN2r_DP_RESET_TX_DISABLE_DISf_SET
#define TXFIR_MISC_CTL1_GEN2r_TX_DISABLE_OUTPUT_SELf_GET BCMI_TSCF_XGXS_TXFIR_MISC_CTL1_GEN2r_TX_DISABLE_OUTPUT_SELf_GET
#define TXFIR_MISC_CTL1_GEN2r_TX_DISABLE_OUTPUT_SELf_SET BCMI_TSCF_XGXS_TXFIR_MISC_CTL1_GEN2r_TX_DISABLE_OUTPUT_SELf_SET
#define TXFIR_MISC_CTL1_GEN2r_TX_EEE_ALERT_ENf_GET BCMI_TSCF_XGXS_TXFIR_MISC_CTL1_GEN2r_TX_EEE_ALERT_ENf_GET
#define TXFIR_MISC_CTL1_GEN2r_TX_EEE_ALERT_ENf_SET BCMI_TSCF_XGXS_TXFIR_MISC_CTL1_GEN2r_TX_EEE_ALERT_ENf_SET
#define TXFIR_MISC_CTL1_GEN2r_TX_EEE_QUIET_ENf_GET BCMI_TSCF_XGXS_TXFIR_MISC_CTL1_GEN2r_TX_EEE_QUIET_ENf_GET
#define TXFIR_MISC_CTL1_GEN2r_TX_EEE_QUIET_ENf_SET BCMI_TSCF_XGXS_TXFIR_MISC_CTL1_GEN2r_TX_EEE_QUIET_ENf_SET
#define TXFIR_MISC_CTL1_GEN2r_TX_DISABLE_TIMER_CTRLf_GET BCMI_TSCF_XGXS_TXFIR_MISC_CTL1_GEN2r_TX_DISABLE_TIMER_CTRLf_GET
#define TXFIR_MISC_CTL1_GEN2r_TX_DISABLE_TIMER_CTRLf_SET BCMI_TSCF_XGXS_TXFIR_MISC_CTL1_GEN2r_TX_DISABLE_TIMER_CTRLf_SET
#define TXFIR_MISC_CTL1_GEN2r_PMD_TX_DISABLE_PKILLf_GET BCMI_TSCF_XGXS_TXFIR_MISC_CTL1_GEN2r_PMD_TX_DISABLE_PKILLf_GET
#define TXFIR_MISC_CTL1_GEN2r_PMD_TX_DISABLE_PKILLf_SET BCMI_TSCF_XGXS_TXFIR_MISC_CTL1_GEN2r_PMD_TX_DISABLE_PKILLf_SET
#define TXFIR_MISC_CTL1_GEN2r_SDK_TX_DISABLEf_GET BCMI_TSCF_XGXS_TXFIR_MISC_CTL1_GEN2r_SDK_TX_DISABLEf_GET
#define TXFIR_MISC_CTL1_GEN2r_SDK_TX_DISABLEf_SET BCMI_TSCF_XGXS_TXFIR_MISC_CTL1_GEN2r_SDK_TX_DISABLEf_SET
#define READ_TXFIR_MISC_CTL1_GEN2r BCMI_TSCF_XGXS_READ_TXFIR_MISC_CTL1_GEN2r
#define WRITE_TXFIR_MISC_CTL1_GEN2r BCMI_TSCF_XGXS_WRITE_TXFIR_MISC_CTL1_GEN2r
#define MODIFY_TXFIR_MISC_CTL1_GEN2r BCMI_TSCF_XGXS_MODIFY_TXFIR_MISC_CTL1_GEN2r
#define READLN_TXFIR_MISC_CTL1_GEN2r BCMI_TSCF_XGXS_READLN_TXFIR_MISC_CTL1_GEN2r
#define WRITELN_TXFIR_MISC_CTL1_GEN2r BCMI_TSCF_XGXS_WRITELN_TXFIR_MISC_CTL1_GEN2r
#define WRITEALL_TXFIR_MISC_CTL1_GEN2r BCMI_TSCF_XGXS_WRITEALL_TXFIR_MISC_CTL1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TXFIR_MISC_CTL1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PLL_CAL_CTL_0_GEN2
 * BLOCKS:   PLL_CAL_COM
 * REGADDR:  0xd140
 * DEVAD:    1
 * DESC:     PLL CAL Configuration Registers 0.
 * RESETVAL: 0xc803 (51203)
 * ACCESS:   R/W
 * FIELDS:
 *     VCO_STEP_TIME    VCO time between iterations
 *     VCO_START_TIME   VCO powerup wait time
 */
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_0_GEN2r (0x0001d140 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PLL_CAL_CTL_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PLL_CAL_CTL_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PLL_CAL_CTL_0_GEN2r_s {
	uint32_t v[1];
	uint32_t pll_cal_ctl_0_gen2[1];
	uint32_t _pll_cal_ctl_0_gen2;
} BCMI_TSCF_XGXS_PLL_CAL_CTL_0_GEN2r_t;

#define BCMI_TSCF_XGXS_PLL_CAL_CTL_0_GEN2r_CLR(r) (r).pll_cal_ctl_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_0_GEN2r_SET(r,d) (r).pll_cal_ctl_0_gen2[0] = d
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_0_GEN2r_GET(r) (r).pll_cal_ctl_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_0_GEN2r_VCO_START_TIMEf_GET(r) ((((r).pll_cal_ctl_0_gen2[0]) >> 8) & 0xff)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_0_GEN2r_VCO_START_TIMEf_SET(r,f) (r).pll_cal_ctl_0_gen2[0]=(((r).pll_cal_ctl_0_gen2[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_0_GEN2r_VCO_STEP_TIMEf_GET(r) (((r).pll_cal_ctl_0_gen2[0]) & 0xff)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_0_GEN2r_VCO_STEP_TIMEf_SET(r,f) (r).pll_cal_ctl_0_gen2[0]=(((r).pll_cal_ctl_0_gen2[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access PLL_CAL_CTL_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PLL_CAL_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_0_GEN2r,(_r._pll_cal_ctl_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_PLL_CAL_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_0_GEN2r,(_r._pll_cal_ctl_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PLL_CAL_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_0_GEN2r,(_r._pll_cal_ctl_0_gen2))
#define BCMI_TSCF_XGXS_READLN_PLL_CAL_CTL_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_cal_ctl_0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_PLL_CAL_CTL_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_cal_ctl_0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_PLL_CAL_CTL_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._pll_cal_ctl_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PLL_CAL_CTL_0_GEN2r BCMI_TSCF_XGXS_PLL_CAL_CTL_0_GEN2r
#define PLL_CAL_CTL_0_GEN2r_SIZE BCMI_TSCF_XGXS_PLL_CAL_CTL_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PLL_CAL_CTL_0_GEN2r_t PLL_CAL_CTL_0_GEN2r_t;
#define PLL_CAL_CTL_0_GEN2r_CLR BCMI_TSCF_XGXS_PLL_CAL_CTL_0_GEN2r_CLR
#define PLL_CAL_CTL_0_GEN2r_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_0_GEN2r_SET
#define PLL_CAL_CTL_0_GEN2r_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_0_GEN2r_GET
#define PLL_CAL_CTL_0_GEN2r_VCO_START_TIMEf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_0_GEN2r_VCO_START_TIMEf_GET
#define PLL_CAL_CTL_0_GEN2r_VCO_START_TIMEf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_0_GEN2r_VCO_START_TIMEf_SET
#define PLL_CAL_CTL_0_GEN2r_VCO_STEP_TIMEf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_0_GEN2r_VCO_STEP_TIMEf_GET
#define PLL_CAL_CTL_0_GEN2r_VCO_STEP_TIMEf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_0_GEN2r_VCO_STEP_TIMEf_SET
#define READ_PLL_CAL_CTL_0_GEN2r BCMI_TSCF_XGXS_READ_PLL_CAL_CTL_0_GEN2r
#define WRITE_PLL_CAL_CTL_0_GEN2r BCMI_TSCF_XGXS_WRITE_PLL_CAL_CTL_0_GEN2r
#define MODIFY_PLL_CAL_CTL_0_GEN2r BCMI_TSCF_XGXS_MODIFY_PLL_CAL_CTL_0_GEN2r
#define READLN_PLL_CAL_CTL_0_GEN2r BCMI_TSCF_XGXS_READLN_PLL_CAL_CTL_0_GEN2r
#define WRITELN_PLL_CAL_CTL_0_GEN2r BCMI_TSCF_XGXS_WRITELN_PLL_CAL_CTL_0_GEN2r
#define WRITEALL_PLL_CAL_CTL_0_GEN2r BCMI_TSCF_XGXS_WRITEALL_PLL_CAL_CTL_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PLL_CAL_CTL_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PLL_CAL_CTL_1_GEN2
 * BLOCKS:   PLL_CAL_COM
 * REGADDR:  0xd141
 * DEVAD:    1
 * DESC:     PLL CAL Configuration Registers 1.
 * RESETVAL: 0xc8ff (51455)
 * ACCESS:   R/W
 * FIELDS:
 *     RETRY_TIME       retry wait time
 *     PRE_FREQ_DET_TIME wait time prior to freq det
 */
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_1_GEN2r (0x0001d141 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PLL_CAL_CTL_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PLL_CAL_CTL_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PLL_CAL_CTL_1_GEN2r_s {
	uint32_t v[1];
	uint32_t pll_cal_ctl_1_gen2[1];
	uint32_t _pll_cal_ctl_1_gen2;
} BCMI_TSCF_XGXS_PLL_CAL_CTL_1_GEN2r_t;

#define BCMI_TSCF_XGXS_PLL_CAL_CTL_1_GEN2r_CLR(r) (r).pll_cal_ctl_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_1_GEN2r_SET(r,d) (r).pll_cal_ctl_1_gen2[0] = d
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_1_GEN2r_GET(r) (r).pll_cal_ctl_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_1_GEN2r_PRE_FREQ_DET_TIMEf_GET(r) ((((r).pll_cal_ctl_1_gen2[0]) >> 8) & 0xff)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_1_GEN2r_PRE_FREQ_DET_TIMEf_SET(r,f) (r).pll_cal_ctl_1_gen2[0]=(((r).pll_cal_ctl_1_gen2[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_1_GEN2r_RETRY_TIMEf_GET(r) (((r).pll_cal_ctl_1_gen2[0]) & 0xff)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_1_GEN2r_RETRY_TIMEf_SET(r,f) (r).pll_cal_ctl_1_gen2[0]=(((r).pll_cal_ctl_1_gen2[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access PLL_CAL_CTL_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PLL_CAL_CTL_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_1_GEN2r,(_r._pll_cal_ctl_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_PLL_CAL_CTL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_1_GEN2r,(_r._pll_cal_ctl_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PLL_CAL_CTL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_1_GEN2r,(_r._pll_cal_ctl_1_gen2))
#define BCMI_TSCF_XGXS_READLN_PLL_CAL_CTL_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_cal_ctl_1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_PLL_CAL_CTL_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_cal_ctl_1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_PLL_CAL_CTL_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._pll_cal_ctl_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PLL_CAL_CTL_1_GEN2r BCMI_TSCF_XGXS_PLL_CAL_CTL_1_GEN2r
#define PLL_CAL_CTL_1_GEN2r_SIZE BCMI_TSCF_XGXS_PLL_CAL_CTL_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PLL_CAL_CTL_1_GEN2r_t PLL_CAL_CTL_1_GEN2r_t;
#define PLL_CAL_CTL_1_GEN2r_CLR BCMI_TSCF_XGXS_PLL_CAL_CTL_1_GEN2r_CLR
#define PLL_CAL_CTL_1_GEN2r_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_1_GEN2r_SET
#define PLL_CAL_CTL_1_GEN2r_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_1_GEN2r_GET
#define PLL_CAL_CTL_1_GEN2r_PRE_FREQ_DET_TIMEf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_1_GEN2r_PRE_FREQ_DET_TIMEf_GET
#define PLL_CAL_CTL_1_GEN2r_PRE_FREQ_DET_TIMEf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_1_GEN2r_PRE_FREQ_DET_TIMEf_SET
#define PLL_CAL_CTL_1_GEN2r_RETRY_TIMEf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_1_GEN2r_RETRY_TIMEf_GET
#define PLL_CAL_CTL_1_GEN2r_RETRY_TIMEf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_1_GEN2r_RETRY_TIMEf_SET
#define READ_PLL_CAL_CTL_1_GEN2r BCMI_TSCF_XGXS_READ_PLL_CAL_CTL_1_GEN2r
#define WRITE_PLL_CAL_CTL_1_GEN2r BCMI_TSCF_XGXS_WRITE_PLL_CAL_CTL_1_GEN2r
#define MODIFY_PLL_CAL_CTL_1_GEN2r BCMI_TSCF_XGXS_MODIFY_PLL_CAL_CTL_1_GEN2r
#define READLN_PLL_CAL_CTL_1_GEN2r BCMI_TSCF_XGXS_READLN_PLL_CAL_CTL_1_GEN2r
#define WRITELN_PLL_CAL_CTL_1_GEN2r BCMI_TSCF_XGXS_WRITELN_PLL_CAL_CTL_1_GEN2r
#define WRITEALL_PLL_CAL_CTL_1_GEN2r BCMI_TSCF_XGXS_WRITEALL_PLL_CAL_CTL_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PLL_CAL_CTL_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PLL_CAL_CTL_2_GEN2
 * BLOCKS:   PLL_CAL_COM
 * REGADDR:  0xd142
 * DEVAD:    1
 * DESC:     PLL CAL Configuration Registers 2.
 * RESETVAL: 0xff01 (65281)
 * ACCESS:   R/W
 * FIELDS:
 *     WIN_CAL_CNTR     freq. counter's 8-lsbits stoping value
 *     RES_CAL_CNTR     freq. counter's 8-msbits starting value
 */
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_2_GEN2r (0x0001d142 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PLL_CAL_CTL_2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PLL_CAL_CTL_2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PLL_CAL_CTL_2_GEN2r_s {
	uint32_t v[1];
	uint32_t pll_cal_ctl_2_gen2[1];
	uint32_t _pll_cal_ctl_2_gen2;
} BCMI_TSCF_XGXS_PLL_CAL_CTL_2_GEN2r_t;

#define BCMI_TSCF_XGXS_PLL_CAL_CTL_2_GEN2r_CLR(r) (r).pll_cal_ctl_2_gen2[0] = 0
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_2_GEN2r_SET(r,d) (r).pll_cal_ctl_2_gen2[0] = d
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_2_GEN2r_GET(r) (r).pll_cal_ctl_2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_2_GEN2r_RES_CAL_CNTRf_GET(r) ((((r).pll_cal_ctl_2_gen2[0]) >> 8) & 0xff)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_2_GEN2r_RES_CAL_CNTRf_SET(r,f) (r).pll_cal_ctl_2_gen2[0]=(((r).pll_cal_ctl_2_gen2[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_2_GEN2r_WIN_CAL_CNTRf_GET(r) (((r).pll_cal_ctl_2_gen2[0]) & 0xff)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_2_GEN2r_WIN_CAL_CNTRf_SET(r,f) (r).pll_cal_ctl_2_gen2[0]=(((r).pll_cal_ctl_2_gen2[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access PLL_CAL_CTL_2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PLL_CAL_CTL_2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_2_GEN2r,(_r._pll_cal_ctl_2_gen2))
#define BCMI_TSCF_XGXS_WRITE_PLL_CAL_CTL_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_2_GEN2r,(_r._pll_cal_ctl_2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PLL_CAL_CTL_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_2_GEN2r,(_r._pll_cal_ctl_2_gen2))
#define BCMI_TSCF_XGXS_READLN_PLL_CAL_CTL_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_cal_ctl_2_gen2))
#define BCMI_TSCF_XGXS_WRITELN_PLL_CAL_CTL_2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_cal_ctl_2_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_PLL_CAL_CTL_2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._pll_cal_ctl_2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PLL_CAL_CTL_2_GEN2r BCMI_TSCF_XGXS_PLL_CAL_CTL_2_GEN2r
#define PLL_CAL_CTL_2_GEN2r_SIZE BCMI_TSCF_XGXS_PLL_CAL_CTL_2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PLL_CAL_CTL_2_GEN2r_t PLL_CAL_CTL_2_GEN2r_t;
#define PLL_CAL_CTL_2_GEN2r_CLR BCMI_TSCF_XGXS_PLL_CAL_CTL_2_GEN2r_CLR
#define PLL_CAL_CTL_2_GEN2r_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_2_GEN2r_SET
#define PLL_CAL_CTL_2_GEN2r_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_2_GEN2r_GET
#define PLL_CAL_CTL_2_GEN2r_RES_CAL_CNTRf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_2_GEN2r_RES_CAL_CNTRf_GET
#define PLL_CAL_CTL_2_GEN2r_RES_CAL_CNTRf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_2_GEN2r_RES_CAL_CNTRf_SET
#define PLL_CAL_CTL_2_GEN2r_WIN_CAL_CNTRf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_2_GEN2r_WIN_CAL_CNTRf_GET
#define PLL_CAL_CTL_2_GEN2r_WIN_CAL_CNTRf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_2_GEN2r_WIN_CAL_CNTRf_SET
#define READ_PLL_CAL_CTL_2_GEN2r BCMI_TSCF_XGXS_READ_PLL_CAL_CTL_2_GEN2r
#define WRITE_PLL_CAL_CTL_2_GEN2r BCMI_TSCF_XGXS_WRITE_PLL_CAL_CTL_2_GEN2r
#define MODIFY_PLL_CAL_CTL_2_GEN2r BCMI_TSCF_XGXS_MODIFY_PLL_CAL_CTL_2_GEN2r
#define READLN_PLL_CAL_CTL_2_GEN2r BCMI_TSCF_XGXS_READLN_PLL_CAL_CTL_2_GEN2r
#define WRITELN_PLL_CAL_CTL_2_GEN2r BCMI_TSCF_XGXS_WRITELN_PLL_CAL_CTL_2_GEN2r
#define WRITEALL_PLL_CAL_CTL_2_GEN2r BCMI_TSCF_XGXS_WRITEALL_PLL_CAL_CTL_2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PLL_CAL_CTL_2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PLL_CAL_CTL_3_GEN2
 * BLOCKS:   PLL_CAL_COM
 * REGADDR:  0xd143
 * DEVAD:    1
 * DESC:     PLL CAL Configuration Registers 3.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     FAST_SEARCH_MODE force cap sequencer using select_m value for fast searching
 *     CAP_CNT_MASK_EN  masks cap count to allow control of max value
 *     CAP_SEQ_CYA      cya bit to revert cap sequencer back to original hyper/xaui sequence
 *     CAP_RESTART      force cap sequencer to restart, set to high then low
 *     CAP_RETRY_EN     enable retry on cap search failure
 *     CAP_FORCE_SLOWDOWN slowdown force value
 *     CAP_FORCE_SLOWDOWN_EN slowdown force enable
 *     CAP_SELECT_M_EN  Manual vco cap value mode, force using pll_range force value
 *     CAP_SELECT_M     Manual vco cap value (i.e pll_range[7:0])
 */
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r (0x0001d143 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PLL_CAL_CTL_3_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r_s {
	uint32_t v[1];
	uint32_t pll_cal_ctl_3_gen2[1];
	uint32_t _pll_cal_ctl_3_gen2;
} BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r_t;

#define BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r_CLR(r) (r).pll_cal_ctl_3_gen2[0] = 0
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r_SET(r,d) (r).pll_cal_ctl_3_gen2[0] = d
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r_GET(r) (r).pll_cal_ctl_3_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r_CAP_SELECT_Mf_GET(r) ((((r).pll_cal_ctl_3_gen2[0]) >> 8) & 0xff)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r_CAP_SELECT_Mf_SET(r,f) (r).pll_cal_ctl_3_gen2[0]=(((r).pll_cal_ctl_3_gen2[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r_CAP_SELECT_M_ENf_GET(r) ((((r).pll_cal_ctl_3_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r_CAP_SELECT_M_ENf_SET(r,f) (r).pll_cal_ctl_3_gen2[0]=(((r).pll_cal_ctl_3_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r_CAP_FORCE_SLOWDOWN_ENf_GET(r) ((((r).pll_cal_ctl_3_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r_CAP_FORCE_SLOWDOWN_ENf_SET(r,f) (r).pll_cal_ctl_3_gen2[0]=(((r).pll_cal_ctl_3_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r_CAP_FORCE_SLOWDOWNf_GET(r) ((((r).pll_cal_ctl_3_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r_CAP_FORCE_SLOWDOWNf_SET(r,f) (r).pll_cal_ctl_3_gen2[0]=(((r).pll_cal_ctl_3_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r_CAP_RETRY_ENf_GET(r) ((((r).pll_cal_ctl_3_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r_CAP_RETRY_ENf_SET(r,f) (r).pll_cal_ctl_3_gen2[0]=(((r).pll_cal_ctl_3_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r_CAP_RESTARTf_GET(r) ((((r).pll_cal_ctl_3_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r_CAP_RESTARTf_SET(r,f) (r).pll_cal_ctl_3_gen2[0]=(((r).pll_cal_ctl_3_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r_CAP_SEQ_CYAf_GET(r) ((((r).pll_cal_ctl_3_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r_CAP_SEQ_CYAf_SET(r,f) (r).pll_cal_ctl_3_gen2[0]=(((r).pll_cal_ctl_3_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r_CAP_CNT_MASK_ENf_GET(r) ((((r).pll_cal_ctl_3_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r_CAP_CNT_MASK_ENf_SET(r,f) (r).pll_cal_ctl_3_gen2[0]=(((r).pll_cal_ctl_3_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r_FAST_SEARCH_MODEf_GET(r) (((r).pll_cal_ctl_3_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r_FAST_SEARCH_MODEf_SET(r,f) (r).pll_cal_ctl_3_gen2[0]=(((r).pll_cal_ctl_3_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access PLL_CAL_CTL_3_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PLL_CAL_CTL_3_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r,(_r._pll_cal_ctl_3_gen2))
#define BCMI_TSCF_XGXS_WRITE_PLL_CAL_CTL_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r,(_r._pll_cal_ctl_3_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PLL_CAL_CTL_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r,(_r._pll_cal_ctl_3_gen2))
#define BCMI_TSCF_XGXS_READLN_PLL_CAL_CTL_3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_cal_ctl_3_gen2))
#define BCMI_TSCF_XGXS_WRITELN_PLL_CAL_CTL_3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_cal_ctl_3_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_PLL_CAL_CTL_3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._pll_cal_ctl_3_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PLL_CAL_CTL_3_GEN2r BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r
#define PLL_CAL_CTL_3_GEN2r_SIZE BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r_t PLL_CAL_CTL_3_GEN2r_t;
#define PLL_CAL_CTL_3_GEN2r_CLR BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r_CLR
#define PLL_CAL_CTL_3_GEN2r_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r_SET
#define PLL_CAL_CTL_3_GEN2r_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r_GET
#define PLL_CAL_CTL_3_GEN2r_CAP_SELECT_Mf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r_CAP_SELECT_Mf_GET
#define PLL_CAL_CTL_3_GEN2r_CAP_SELECT_Mf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r_CAP_SELECT_Mf_SET
#define PLL_CAL_CTL_3_GEN2r_CAP_SELECT_M_ENf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r_CAP_SELECT_M_ENf_GET
#define PLL_CAL_CTL_3_GEN2r_CAP_SELECT_M_ENf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r_CAP_SELECT_M_ENf_SET
#define PLL_CAL_CTL_3_GEN2r_CAP_FORCE_SLOWDOWN_ENf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r_CAP_FORCE_SLOWDOWN_ENf_GET
#define PLL_CAL_CTL_3_GEN2r_CAP_FORCE_SLOWDOWN_ENf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r_CAP_FORCE_SLOWDOWN_ENf_SET
#define PLL_CAL_CTL_3_GEN2r_CAP_FORCE_SLOWDOWNf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r_CAP_FORCE_SLOWDOWNf_GET
#define PLL_CAL_CTL_3_GEN2r_CAP_FORCE_SLOWDOWNf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r_CAP_FORCE_SLOWDOWNf_SET
#define PLL_CAL_CTL_3_GEN2r_CAP_RETRY_ENf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r_CAP_RETRY_ENf_GET
#define PLL_CAL_CTL_3_GEN2r_CAP_RETRY_ENf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r_CAP_RETRY_ENf_SET
#define PLL_CAL_CTL_3_GEN2r_CAP_RESTARTf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r_CAP_RESTARTf_GET
#define PLL_CAL_CTL_3_GEN2r_CAP_RESTARTf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r_CAP_RESTARTf_SET
#define PLL_CAL_CTL_3_GEN2r_CAP_SEQ_CYAf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r_CAP_SEQ_CYAf_GET
#define PLL_CAL_CTL_3_GEN2r_CAP_SEQ_CYAf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r_CAP_SEQ_CYAf_SET
#define PLL_CAL_CTL_3_GEN2r_CAP_CNT_MASK_ENf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r_CAP_CNT_MASK_ENf_GET
#define PLL_CAL_CTL_3_GEN2r_CAP_CNT_MASK_ENf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r_CAP_CNT_MASK_ENf_SET
#define PLL_CAL_CTL_3_GEN2r_FAST_SEARCH_MODEf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r_FAST_SEARCH_MODEf_GET
#define PLL_CAL_CTL_3_GEN2r_FAST_SEARCH_MODEf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r_FAST_SEARCH_MODEf_SET
#define READ_PLL_CAL_CTL_3_GEN2r BCMI_TSCF_XGXS_READ_PLL_CAL_CTL_3_GEN2r
#define WRITE_PLL_CAL_CTL_3_GEN2r BCMI_TSCF_XGXS_WRITE_PLL_CAL_CTL_3_GEN2r
#define MODIFY_PLL_CAL_CTL_3_GEN2r BCMI_TSCF_XGXS_MODIFY_PLL_CAL_CTL_3_GEN2r
#define READLN_PLL_CAL_CTL_3_GEN2r BCMI_TSCF_XGXS_READLN_PLL_CAL_CTL_3_GEN2r
#define WRITELN_PLL_CAL_CTL_3_GEN2r BCMI_TSCF_XGXS_WRITELN_PLL_CAL_CTL_3_GEN2r
#define WRITEALL_PLL_CAL_CTL_3_GEN2r BCMI_TSCF_XGXS_WRITEALL_PLL_CAL_CTL_3_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PLL_CAL_CTL_3_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PLL_CAL_CTL_4_GEN2
 * BLOCKS:   PLL_CAL_COM
 * REGADDR:  0xd144
 * DEVAD:    1
 * DESC:     PLL CAL Configuration Registers 4.
 * RESETVAL: 0xa80d (43021)
 * ACCESS:   R/W
 * FIELDS:
 *     PLL_LOCK_FRC_VAL force pll lock value
 *     PLL_LOCK_FRC     force pll lock
 *     PLL_FORCE_CAP_PASS force cappass
 *     PLL_FORCE_CAP_PASS_EN enable pllforcecappass
 *     PLL_FORCE_CAP_DONE force capdone
 *     PLL_FORCE_CAP_DONE_EN enable pllforcecapdone
 *     PLL_FORCE_FPASS  force freqpass
 *     PLL_FORCE_FDONE  force freqdone
 *     PLL_FORCE_FDONE_EN enable pllforcefdone & pllforcefpass into pllseq
 *     VCO_RST_EN       enable pll reset when state machine is in start state. For debug only, use core_dp_s/h_rstb to restart PLL calibration
 *     SLOWDN_XOR       invert sense of the slowdn/pll_low input from AFE
 *     FREQ_MONITOR_EN  continuously monitor vco freq
 *     FREQ_DET_RESTART_EN enable restart when not freq locked
 *     FREQ_DET_RETRY_EN enable retry on freq det failure
 *     VCO_DONE_EN      enable vco_done status bit
 *     PLL_SEQ_START    start pll sequencer by writing to 1'b0 followed by writing to 1'b1. For debug only, use core_dp_s/h_rstb to restart PLL calibration
 */
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r (0x0001d144 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PLL_CAL_CTL_4_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_s {
	uint32_t v[1];
	uint32_t pll_cal_ctl_4_gen2[1];
	uint32_t _pll_cal_ctl_4_gen2;
} BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_t;

#define BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_CLR(r) (r).pll_cal_ctl_4_gen2[0] = 0
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_SET(r,d) (r).pll_cal_ctl_4_gen2[0] = d
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_GET(r) (r).pll_cal_ctl_4_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_PLL_SEQ_STARTf_GET(r) ((((r).pll_cal_ctl_4_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_PLL_SEQ_STARTf_SET(r,f) (r).pll_cal_ctl_4_gen2[0]=(((r).pll_cal_ctl_4_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_VCO_DONE_ENf_GET(r) ((((r).pll_cal_ctl_4_gen2[0]) >> 14) & 0x1)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_VCO_DONE_ENf_SET(r,f) (r).pll_cal_ctl_4_gen2[0]=(((r).pll_cal_ctl_4_gen2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_FREQ_DET_RETRY_ENf_GET(r) ((((r).pll_cal_ctl_4_gen2[0]) >> 13) & 0x1)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_FREQ_DET_RETRY_ENf_SET(r,f) (r).pll_cal_ctl_4_gen2[0]=(((r).pll_cal_ctl_4_gen2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_FREQ_DET_RESTART_ENf_GET(r) ((((r).pll_cal_ctl_4_gen2[0]) >> 12) & 0x1)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_FREQ_DET_RESTART_ENf_SET(r,f) (r).pll_cal_ctl_4_gen2[0]=(((r).pll_cal_ctl_4_gen2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_FREQ_MONITOR_ENf_GET(r) ((((r).pll_cal_ctl_4_gen2[0]) >> 11) & 0x1)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_FREQ_MONITOR_ENf_SET(r,f) (r).pll_cal_ctl_4_gen2[0]=(((r).pll_cal_ctl_4_gen2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_SLOWDN_XORf_GET(r) ((((r).pll_cal_ctl_4_gen2[0]) >> 10) & 0x1)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_SLOWDN_XORf_SET(r,f) (r).pll_cal_ctl_4_gen2[0]=(((r).pll_cal_ctl_4_gen2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_VCO_RST_ENf_GET(r) ((((r).pll_cal_ctl_4_gen2[0]) >> 9) & 0x1)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_VCO_RST_ENf_SET(r,f) (r).pll_cal_ctl_4_gen2[0]=(((r).pll_cal_ctl_4_gen2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_PLL_FORCE_FDONE_ENf_GET(r) ((((r).pll_cal_ctl_4_gen2[0]) >> 8) & 0x1)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_PLL_FORCE_FDONE_ENf_SET(r,f) (r).pll_cal_ctl_4_gen2[0]=(((r).pll_cal_ctl_4_gen2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_PLL_FORCE_FDONEf_GET(r) ((((r).pll_cal_ctl_4_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_PLL_FORCE_FDONEf_SET(r,f) (r).pll_cal_ctl_4_gen2[0]=(((r).pll_cal_ctl_4_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_PLL_FORCE_FPASSf_GET(r) ((((r).pll_cal_ctl_4_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_PLL_FORCE_FPASSf_SET(r,f) (r).pll_cal_ctl_4_gen2[0]=(((r).pll_cal_ctl_4_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_PLL_FORCE_CAP_DONE_ENf_GET(r) ((((r).pll_cal_ctl_4_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_PLL_FORCE_CAP_DONE_ENf_SET(r,f) (r).pll_cal_ctl_4_gen2[0]=(((r).pll_cal_ctl_4_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_PLL_FORCE_CAP_DONEf_GET(r) ((((r).pll_cal_ctl_4_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_PLL_FORCE_CAP_DONEf_SET(r,f) (r).pll_cal_ctl_4_gen2[0]=(((r).pll_cal_ctl_4_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_PLL_FORCE_CAP_PASS_ENf_GET(r) ((((r).pll_cal_ctl_4_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_PLL_FORCE_CAP_PASS_ENf_SET(r,f) (r).pll_cal_ctl_4_gen2[0]=(((r).pll_cal_ctl_4_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_PLL_FORCE_CAP_PASSf_GET(r) ((((r).pll_cal_ctl_4_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_PLL_FORCE_CAP_PASSf_SET(r,f) (r).pll_cal_ctl_4_gen2[0]=(((r).pll_cal_ctl_4_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_PLL_LOCK_FRCf_GET(r) ((((r).pll_cal_ctl_4_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_PLL_LOCK_FRCf_SET(r,f) (r).pll_cal_ctl_4_gen2[0]=(((r).pll_cal_ctl_4_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_PLL_LOCK_FRC_VALf_GET(r) (((r).pll_cal_ctl_4_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_PLL_LOCK_FRC_VALf_SET(r,f) (r).pll_cal_ctl_4_gen2[0]=(((r).pll_cal_ctl_4_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access PLL_CAL_CTL_4_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PLL_CAL_CTL_4_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r,(_r._pll_cal_ctl_4_gen2))
#define BCMI_TSCF_XGXS_WRITE_PLL_CAL_CTL_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r,(_r._pll_cal_ctl_4_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PLL_CAL_CTL_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r,(_r._pll_cal_ctl_4_gen2))
#define BCMI_TSCF_XGXS_READLN_PLL_CAL_CTL_4_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_cal_ctl_4_gen2))
#define BCMI_TSCF_XGXS_WRITELN_PLL_CAL_CTL_4_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_cal_ctl_4_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_PLL_CAL_CTL_4_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._pll_cal_ctl_4_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PLL_CAL_CTL_4_GEN2r BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r
#define PLL_CAL_CTL_4_GEN2r_SIZE BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_t PLL_CAL_CTL_4_GEN2r_t;
#define PLL_CAL_CTL_4_GEN2r_CLR BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_CLR
#define PLL_CAL_CTL_4_GEN2r_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_SET
#define PLL_CAL_CTL_4_GEN2r_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_GET
#define PLL_CAL_CTL_4_GEN2r_PLL_SEQ_STARTf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_PLL_SEQ_STARTf_GET
#define PLL_CAL_CTL_4_GEN2r_PLL_SEQ_STARTf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_PLL_SEQ_STARTf_SET
#define PLL_CAL_CTL_4_GEN2r_VCO_DONE_ENf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_VCO_DONE_ENf_GET
#define PLL_CAL_CTL_4_GEN2r_VCO_DONE_ENf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_VCO_DONE_ENf_SET
#define PLL_CAL_CTL_4_GEN2r_FREQ_DET_RETRY_ENf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_FREQ_DET_RETRY_ENf_GET
#define PLL_CAL_CTL_4_GEN2r_FREQ_DET_RETRY_ENf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_FREQ_DET_RETRY_ENf_SET
#define PLL_CAL_CTL_4_GEN2r_FREQ_DET_RESTART_ENf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_FREQ_DET_RESTART_ENf_GET
#define PLL_CAL_CTL_4_GEN2r_FREQ_DET_RESTART_ENf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_FREQ_DET_RESTART_ENf_SET
#define PLL_CAL_CTL_4_GEN2r_FREQ_MONITOR_ENf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_FREQ_MONITOR_ENf_GET
#define PLL_CAL_CTL_4_GEN2r_FREQ_MONITOR_ENf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_FREQ_MONITOR_ENf_SET
#define PLL_CAL_CTL_4_GEN2r_SLOWDN_XORf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_SLOWDN_XORf_GET
#define PLL_CAL_CTL_4_GEN2r_SLOWDN_XORf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_SLOWDN_XORf_SET
#define PLL_CAL_CTL_4_GEN2r_VCO_RST_ENf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_VCO_RST_ENf_GET
#define PLL_CAL_CTL_4_GEN2r_VCO_RST_ENf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_VCO_RST_ENf_SET
#define PLL_CAL_CTL_4_GEN2r_PLL_FORCE_FDONE_ENf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_PLL_FORCE_FDONE_ENf_GET
#define PLL_CAL_CTL_4_GEN2r_PLL_FORCE_FDONE_ENf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_PLL_FORCE_FDONE_ENf_SET
#define PLL_CAL_CTL_4_GEN2r_PLL_FORCE_FDONEf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_PLL_FORCE_FDONEf_GET
#define PLL_CAL_CTL_4_GEN2r_PLL_FORCE_FDONEf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_PLL_FORCE_FDONEf_SET
#define PLL_CAL_CTL_4_GEN2r_PLL_FORCE_FPASSf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_PLL_FORCE_FPASSf_GET
#define PLL_CAL_CTL_4_GEN2r_PLL_FORCE_FPASSf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_PLL_FORCE_FPASSf_SET
#define PLL_CAL_CTL_4_GEN2r_PLL_FORCE_CAP_DONE_ENf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_PLL_FORCE_CAP_DONE_ENf_GET
#define PLL_CAL_CTL_4_GEN2r_PLL_FORCE_CAP_DONE_ENf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_PLL_FORCE_CAP_DONE_ENf_SET
#define PLL_CAL_CTL_4_GEN2r_PLL_FORCE_CAP_DONEf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_PLL_FORCE_CAP_DONEf_GET
#define PLL_CAL_CTL_4_GEN2r_PLL_FORCE_CAP_DONEf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_PLL_FORCE_CAP_DONEf_SET
#define PLL_CAL_CTL_4_GEN2r_PLL_FORCE_CAP_PASS_ENf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_PLL_FORCE_CAP_PASS_ENf_GET
#define PLL_CAL_CTL_4_GEN2r_PLL_FORCE_CAP_PASS_ENf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_PLL_FORCE_CAP_PASS_ENf_SET
#define PLL_CAL_CTL_4_GEN2r_PLL_FORCE_CAP_PASSf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_PLL_FORCE_CAP_PASSf_GET
#define PLL_CAL_CTL_4_GEN2r_PLL_FORCE_CAP_PASSf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_PLL_FORCE_CAP_PASSf_SET
#define PLL_CAL_CTL_4_GEN2r_PLL_LOCK_FRCf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_PLL_LOCK_FRCf_GET
#define PLL_CAL_CTL_4_GEN2r_PLL_LOCK_FRCf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_PLL_LOCK_FRCf_SET
#define PLL_CAL_CTL_4_GEN2r_PLL_LOCK_FRC_VALf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_PLL_LOCK_FRC_VALf_GET
#define PLL_CAL_CTL_4_GEN2r_PLL_LOCK_FRC_VALf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r_PLL_LOCK_FRC_VALf_SET
#define READ_PLL_CAL_CTL_4_GEN2r BCMI_TSCF_XGXS_READ_PLL_CAL_CTL_4_GEN2r
#define WRITE_PLL_CAL_CTL_4_GEN2r BCMI_TSCF_XGXS_WRITE_PLL_CAL_CTL_4_GEN2r
#define MODIFY_PLL_CAL_CTL_4_GEN2r BCMI_TSCF_XGXS_MODIFY_PLL_CAL_CTL_4_GEN2r
#define READLN_PLL_CAL_CTL_4_GEN2r BCMI_TSCF_XGXS_READLN_PLL_CAL_CTL_4_GEN2r
#define WRITELN_PLL_CAL_CTL_4_GEN2r BCMI_TSCF_XGXS_WRITELN_PLL_CAL_CTL_4_GEN2r
#define WRITEALL_PLL_CAL_CTL_4_GEN2r BCMI_TSCF_XGXS_WRITEALL_PLL_CAL_CTL_4_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PLL_CAL_CTL_4_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PLL_CAL_CTL_5_GEN2
 * BLOCKS:   PLL_CAL_COM
 * REGADDR:  0xd145
 * DEVAD:    1
 * DESC:     PLL CAL Configuration Registers 5.
 * RESETVAL: 0x27 (39)
 * ACCESS:   R/W
 * FIELDS:
 *     REFCLK_DIVCNT    Refclk Divider Count to generate a slower divided refclk enable pulse for the PLL calibration logic.Most of the PLL calibration logic including PLL calibration state machines uses this divided version of the refclk clock signal.PLL calibration time is proportional to this register value.
 */
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_5_GEN2r (0x0001d145 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PLL_CAL_CTL_5_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PLL_CAL_CTL_5_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PLL_CAL_CTL_5_GEN2r_s {
	uint32_t v[1];
	uint32_t pll_cal_ctl_5_gen2[1];
	uint32_t _pll_cal_ctl_5_gen2;
} BCMI_TSCF_XGXS_PLL_CAL_CTL_5_GEN2r_t;

#define BCMI_TSCF_XGXS_PLL_CAL_CTL_5_GEN2r_CLR(r) (r).pll_cal_ctl_5_gen2[0] = 0
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_5_GEN2r_SET(r,d) (r).pll_cal_ctl_5_gen2[0] = d
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_5_GEN2r_GET(r) (r).pll_cal_ctl_5_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_5_GEN2r_REFCLK_DIVCNTf_GET(r) (((r).pll_cal_ctl_5_gen2[0]) & 0x3fff)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_5_GEN2r_REFCLK_DIVCNTf_SET(r,f) (r).pll_cal_ctl_5_gen2[0]=(((r).pll_cal_ctl_5_gen2[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff)) | (0x3fff << 16)

/*
 * These macros can be used to access PLL_CAL_CTL_5_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PLL_CAL_CTL_5_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_5_GEN2r,(_r._pll_cal_ctl_5_gen2))
#define BCMI_TSCF_XGXS_WRITE_PLL_CAL_CTL_5_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_5_GEN2r,(_r._pll_cal_ctl_5_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PLL_CAL_CTL_5_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_5_GEN2r,(_r._pll_cal_ctl_5_gen2))
#define BCMI_TSCF_XGXS_READLN_PLL_CAL_CTL_5_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_5_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_cal_ctl_5_gen2))
#define BCMI_TSCF_XGXS_WRITELN_PLL_CAL_CTL_5_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_5_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_cal_ctl_5_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_PLL_CAL_CTL_5_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_5_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._pll_cal_ctl_5_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PLL_CAL_CTL_5_GEN2r BCMI_TSCF_XGXS_PLL_CAL_CTL_5_GEN2r
#define PLL_CAL_CTL_5_GEN2r_SIZE BCMI_TSCF_XGXS_PLL_CAL_CTL_5_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PLL_CAL_CTL_5_GEN2r_t PLL_CAL_CTL_5_GEN2r_t;
#define PLL_CAL_CTL_5_GEN2r_CLR BCMI_TSCF_XGXS_PLL_CAL_CTL_5_GEN2r_CLR
#define PLL_CAL_CTL_5_GEN2r_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_5_GEN2r_SET
#define PLL_CAL_CTL_5_GEN2r_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_5_GEN2r_GET
#define PLL_CAL_CTL_5_GEN2r_REFCLK_DIVCNTf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_5_GEN2r_REFCLK_DIVCNTf_GET
#define PLL_CAL_CTL_5_GEN2r_REFCLK_DIVCNTf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_5_GEN2r_REFCLK_DIVCNTf_SET
#define READ_PLL_CAL_CTL_5_GEN2r BCMI_TSCF_XGXS_READ_PLL_CAL_CTL_5_GEN2r
#define WRITE_PLL_CAL_CTL_5_GEN2r BCMI_TSCF_XGXS_WRITE_PLL_CAL_CTL_5_GEN2r
#define MODIFY_PLL_CAL_CTL_5_GEN2r BCMI_TSCF_XGXS_MODIFY_PLL_CAL_CTL_5_GEN2r
#define READLN_PLL_CAL_CTL_5_GEN2r BCMI_TSCF_XGXS_READLN_PLL_CAL_CTL_5_GEN2r
#define WRITELN_PLL_CAL_CTL_5_GEN2r BCMI_TSCF_XGXS_WRITELN_PLL_CAL_CTL_5_GEN2r
#define WRITEALL_PLL_CAL_CTL_5_GEN2r BCMI_TSCF_XGXS_WRITEALL_PLL_CAL_CTL_5_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PLL_CAL_CTL_5_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PLL_CAL_CTL_6_GEN2
 * BLOCKS:   PLL_CAL_COM
 * REGADDR:  0xd146
 * DEVAD:    1
 * DESC:     PLL CAL Configuration Registers 6.
 * RESETVAL: 0x7 (7)
 * ACCESS:   R/W
 * FIELDS:
 *     REFCLK_DIVCNT_SEL Refclk Divider Mode Select.Value 7: will select refclk_divcnt[13:0] as refclk divider value which has max value of 16383.Value 0 to 6 are reserved for future use and should not be selected.
 */
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_6_GEN2r (0x0001d146 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PLL_CAL_CTL_6_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PLL_CAL_CTL_6_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PLL_CAL_CTL_6_GEN2r_s {
	uint32_t v[1];
	uint32_t pll_cal_ctl_6_gen2[1];
	uint32_t _pll_cal_ctl_6_gen2;
} BCMI_TSCF_XGXS_PLL_CAL_CTL_6_GEN2r_t;

#define BCMI_TSCF_XGXS_PLL_CAL_CTL_6_GEN2r_CLR(r) (r).pll_cal_ctl_6_gen2[0] = 0
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_6_GEN2r_SET(r,d) (r).pll_cal_ctl_6_gen2[0] = d
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_6_GEN2r_GET(r) (r).pll_cal_ctl_6_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_6_GEN2r_REFCLK_DIVCNT_SELf_GET(r) (((r).pll_cal_ctl_6_gen2[0]) & 0x7)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_6_GEN2r_REFCLK_DIVCNT_SELf_SET(r,f) (r).pll_cal_ctl_6_gen2[0]=(((r).pll_cal_ctl_6_gen2[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access PLL_CAL_CTL_6_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PLL_CAL_CTL_6_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_6_GEN2r,(_r._pll_cal_ctl_6_gen2))
#define BCMI_TSCF_XGXS_WRITE_PLL_CAL_CTL_6_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_6_GEN2r,(_r._pll_cal_ctl_6_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PLL_CAL_CTL_6_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_6_GEN2r,(_r._pll_cal_ctl_6_gen2))
#define BCMI_TSCF_XGXS_READLN_PLL_CAL_CTL_6_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_6_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_cal_ctl_6_gen2))
#define BCMI_TSCF_XGXS_WRITELN_PLL_CAL_CTL_6_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_6_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_cal_ctl_6_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_PLL_CAL_CTL_6_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_6_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._pll_cal_ctl_6_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PLL_CAL_CTL_6_GEN2r BCMI_TSCF_XGXS_PLL_CAL_CTL_6_GEN2r
#define PLL_CAL_CTL_6_GEN2r_SIZE BCMI_TSCF_XGXS_PLL_CAL_CTL_6_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PLL_CAL_CTL_6_GEN2r_t PLL_CAL_CTL_6_GEN2r_t;
#define PLL_CAL_CTL_6_GEN2r_CLR BCMI_TSCF_XGXS_PLL_CAL_CTL_6_GEN2r_CLR
#define PLL_CAL_CTL_6_GEN2r_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_6_GEN2r_SET
#define PLL_CAL_CTL_6_GEN2r_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_6_GEN2r_GET
#define PLL_CAL_CTL_6_GEN2r_REFCLK_DIVCNT_SELf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_6_GEN2r_REFCLK_DIVCNT_SELf_GET
#define PLL_CAL_CTL_6_GEN2r_REFCLK_DIVCNT_SELf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_6_GEN2r_REFCLK_DIVCNT_SELf_SET
#define READ_PLL_CAL_CTL_6_GEN2r BCMI_TSCF_XGXS_READ_PLL_CAL_CTL_6_GEN2r
#define WRITE_PLL_CAL_CTL_6_GEN2r BCMI_TSCF_XGXS_WRITE_PLL_CAL_CTL_6_GEN2r
#define MODIFY_PLL_CAL_CTL_6_GEN2r BCMI_TSCF_XGXS_MODIFY_PLL_CAL_CTL_6_GEN2r
#define READLN_PLL_CAL_CTL_6_GEN2r BCMI_TSCF_XGXS_READLN_PLL_CAL_CTL_6_GEN2r
#define WRITELN_PLL_CAL_CTL_6_GEN2r BCMI_TSCF_XGXS_WRITELN_PLL_CAL_CTL_6_GEN2r
#define WRITEALL_PLL_CAL_CTL_6_GEN2r BCMI_TSCF_XGXS_WRITEALL_PLL_CAL_CTL_6_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PLL_CAL_CTL_6_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PLL_CAL_CTL_7_GEN2
 * BLOCKS:   PLL_CAL_COM
 * REGADDR:  0xd147
 * DEVAD:    1
 * DESC:     PLL CAL Configuration Registers 7.
 * RESETVAL: 0x7 (7)
 * ACCESS:   R/W
 * FIELDS:
 *     PLL_MODE         PLL Multiplier.0000  = 64;0000  = 96;0001  = 66;0001  = 120;0010  = 80;0011  = 128;0100  = 132;0101  = 140;0110  = 160;0111  = 165;1000  = 168;1001  = 170;1010  = 175;1011  = 180;1100  = 184;1101  = 200;1110  = 224;1111  = 264;
 *     RESCAL_FRC_VAL   rescal force value.
 *     RESCAL_FRC       rescal force to use rescal force value.
 *     VCO_RANGE_ADJUST signed 2's complement by firmware for current temperature
 */
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_7_GEN2r (0x0001d147 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PLL_CAL_CTL_7_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PLL_CAL_CTL_7_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PLL_CAL_CTL_7_GEN2r_s {
	uint32_t v[1];
	uint32_t pll_cal_ctl_7_gen2[1];
	uint32_t _pll_cal_ctl_7_gen2;
} BCMI_TSCF_XGXS_PLL_CAL_CTL_7_GEN2r_t;

#define BCMI_TSCF_XGXS_PLL_CAL_CTL_7_GEN2r_CLR(r) (r).pll_cal_ctl_7_gen2[0] = 0
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_7_GEN2r_SET(r,d) (r).pll_cal_ctl_7_gen2[0] = d
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_7_GEN2r_GET(r) (r).pll_cal_ctl_7_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_7_GEN2r_VCO_RANGE_ADJUSTf_GET(r) ((((r).pll_cal_ctl_7_gen2[0]) >> 9) & 0x1f)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_7_GEN2r_VCO_RANGE_ADJUSTf_SET(r,f) (r).pll_cal_ctl_7_gen2[0]=(((r).pll_cal_ctl_7_gen2[0] & ~((uint32_t)0x1f << 9)) | ((((uint32_t)f) & 0x1f) << 9)) | (31 << (16 + 9))
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_7_GEN2r_RESCAL_FRCf_GET(r) ((((r).pll_cal_ctl_7_gen2[0]) >> 8) & 0x1)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_7_GEN2r_RESCAL_FRCf_SET(r,f) (r).pll_cal_ctl_7_gen2[0]=(((r).pll_cal_ctl_7_gen2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_7_GEN2r_RESCAL_FRC_VALf_GET(r) ((((r).pll_cal_ctl_7_gen2[0]) >> 4) & 0xf)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_7_GEN2r_RESCAL_FRC_VALf_SET(r,f) (r).pll_cal_ctl_7_gen2[0]=(((r).pll_cal_ctl_7_gen2[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4)) | (15 << (16 + 4))
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_7_GEN2r_PLL_MODEf_GET(r) (((r).pll_cal_ctl_7_gen2[0]) & 0xf)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_7_GEN2r_PLL_MODEf_SET(r,f) (r).pll_cal_ctl_7_gen2[0]=(((r).pll_cal_ctl_7_gen2[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access PLL_CAL_CTL_7_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PLL_CAL_CTL_7_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_7_GEN2r,(_r._pll_cal_ctl_7_gen2))
#define BCMI_TSCF_XGXS_WRITE_PLL_CAL_CTL_7_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_7_GEN2r,(_r._pll_cal_ctl_7_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PLL_CAL_CTL_7_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_7_GEN2r,(_r._pll_cal_ctl_7_gen2))
#define BCMI_TSCF_XGXS_READLN_PLL_CAL_CTL_7_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_7_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_cal_ctl_7_gen2))
#define BCMI_TSCF_XGXS_WRITELN_PLL_CAL_CTL_7_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_7_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_cal_ctl_7_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_PLL_CAL_CTL_7_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_7_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._pll_cal_ctl_7_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PLL_CAL_CTL_7_GEN2r BCMI_TSCF_XGXS_PLL_CAL_CTL_7_GEN2r
#define PLL_CAL_CTL_7_GEN2r_SIZE BCMI_TSCF_XGXS_PLL_CAL_CTL_7_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PLL_CAL_CTL_7_GEN2r_t PLL_CAL_CTL_7_GEN2r_t;
#define PLL_CAL_CTL_7_GEN2r_CLR BCMI_TSCF_XGXS_PLL_CAL_CTL_7_GEN2r_CLR
#define PLL_CAL_CTL_7_GEN2r_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_7_GEN2r_SET
#define PLL_CAL_CTL_7_GEN2r_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_7_GEN2r_GET
#define PLL_CAL_CTL_7_GEN2r_VCO_RANGE_ADJUSTf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_7_GEN2r_VCO_RANGE_ADJUSTf_GET
#define PLL_CAL_CTL_7_GEN2r_VCO_RANGE_ADJUSTf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_7_GEN2r_VCO_RANGE_ADJUSTf_SET
#define PLL_CAL_CTL_7_GEN2r_RESCAL_FRCf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_7_GEN2r_RESCAL_FRCf_GET
#define PLL_CAL_CTL_7_GEN2r_RESCAL_FRCf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_7_GEN2r_RESCAL_FRCf_SET
#define PLL_CAL_CTL_7_GEN2r_RESCAL_FRC_VALf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_7_GEN2r_RESCAL_FRC_VALf_GET
#define PLL_CAL_CTL_7_GEN2r_RESCAL_FRC_VALf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_7_GEN2r_RESCAL_FRC_VALf_SET
#define PLL_CAL_CTL_7_GEN2r_PLL_MODEf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_7_GEN2r_PLL_MODEf_GET
#define PLL_CAL_CTL_7_GEN2r_PLL_MODEf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_7_GEN2r_PLL_MODEf_SET
#define READ_PLL_CAL_CTL_7_GEN2r BCMI_TSCF_XGXS_READ_PLL_CAL_CTL_7_GEN2r
#define WRITE_PLL_CAL_CTL_7_GEN2r BCMI_TSCF_XGXS_WRITE_PLL_CAL_CTL_7_GEN2r
#define MODIFY_PLL_CAL_CTL_7_GEN2r BCMI_TSCF_XGXS_MODIFY_PLL_CAL_CTL_7_GEN2r
#define READLN_PLL_CAL_CTL_7_GEN2r BCMI_TSCF_XGXS_READLN_PLL_CAL_CTL_7_GEN2r
#define WRITELN_PLL_CAL_CTL_7_GEN2r BCMI_TSCF_XGXS_WRITELN_PLL_CAL_CTL_7_GEN2r
#define WRITEALL_PLL_CAL_CTL_7_GEN2r BCMI_TSCF_XGXS_WRITEALL_PLL_CAL_CTL_7_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PLL_CAL_CTL_7_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PLL_CAL_CTL_STS_0_GEN2
 * BLOCKS:   PLL_CAL_COM
 * REGADDR:  0xd148
 * DEVAD:    1
 * DESC:     PLL CAL status registers register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     PLL_LOCK_LH_LL   indicates change on pll_lock status bit. It is clear on read status register
 *     PLL_SEQ_PASS_LH_LL indicates change on pll_seq_pass status bit. It is clear on read status register
 *     PLL_SEQ_DONE_LH_LL indicates change on pll_seq_done status bit. It is clear on read status register
 *     FREQ_PASS_SM_LH_LL indicates change on freq_pass_sm status bit. It is clear on read status register
 *     FREQ_DONE_SM_LH_LL indicates change on freq_done_sm status bit. It is clear on read status register
 *     CAP_PASS_LH_LL   indicates change on cap_pass status bit. It is clear on read status register
 *     CAP_DONE_LH_LL   indicates change on cap_done status bit. It is clear on read status register
 *     PLL_LOCK         status bit indicating PLL is locked
 *     PLL_SEQ_PASS     status bit indicating pll sequencer finised successfully
 *     PLL_SEQ_DONE     status bit indicating pll sequencer is done
 *     FREQ_PASS_SM     status bit indicating frequency lock
 *     FREQ_DONE_SM     status bit indicating freq det is done
 *     CAP_PASS         status indicating cap value was found
 *     CAP_DONE         status indicating cap sequencer is done
 *     LOST_PLL_LOCK_SM status bit indicating pll_lock was lost, clear on read
 */
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r (0x0001d148 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PLL_CAL_CTL_STS_0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_s {
	uint32_t v[1];
	uint32_t pll_cal_ctl_sts_0_gen2[1];
	uint32_t _pll_cal_ctl_sts_0_gen2;
} BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_t;

#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_CLR(r) (r).pll_cal_ctl_sts_0_gen2[0] = 0
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_SET(r,d) (r).pll_cal_ctl_sts_0_gen2[0] = d
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_GET(r) (r).pll_cal_ctl_sts_0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_LOST_PLL_LOCK_SMf_GET(r) ((((r).pll_cal_ctl_sts_0_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_LOST_PLL_LOCK_SMf_SET(r,f) (r).pll_cal_ctl_sts_0_gen2[0]=(((r).pll_cal_ctl_sts_0_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_CAP_DONEf_GET(r) ((((r).pll_cal_ctl_sts_0_gen2[0]) >> 14) & 0x1)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_CAP_DONEf_SET(r,f) (r).pll_cal_ctl_sts_0_gen2[0]=(((r).pll_cal_ctl_sts_0_gen2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_CAP_PASSf_GET(r) ((((r).pll_cal_ctl_sts_0_gen2[0]) >> 13) & 0x1)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_CAP_PASSf_SET(r,f) (r).pll_cal_ctl_sts_0_gen2[0]=(((r).pll_cal_ctl_sts_0_gen2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_FREQ_DONE_SMf_GET(r) ((((r).pll_cal_ctl_sts_0_gen2[0]) >> 12) & 0x1)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_FREQ_DONE_SMf_SET(r,f) (r).pll_cal_ctl_sts_0_gen2[0]=(((r).pll_cal_ctl_sts_0_gen2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_FREQ_PASS_SMf_GET(r) ((((r).pll_cal_ctl_sts_0_gen2[0]) >> 11) & 0x1)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_FREQ_PASS_SMf_SET(r,f) (r).pll_cal_ctl_sts_0_gen2[0]=(((r).pll_cal_ctl_sts_0_gen2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_PLL_SEQ_DONEf_GET(r) ((((r).pll_cal_ctl_sts_0_gen2[0]) >> 10) & 0x1)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_PLL_SEQ_DONEf_SET(r,f) (r).pll_cal_ctl_sts_0_gen2[0]=(((r).pll_cal_ctl_sts_0_gen2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_PLL_SEQ_PASSf_GET(r) ((((r).pll_cal_ctl_sts_0_gen2[0]) >> 9) & 0x1)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_PLL_SEQ_PASSf_SET(r,f) (r).pll_cal_ctl_sts_0_gen2[0]=(((r).pll_cal_ctl_sts_0_gen2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_PLL_LOCKf_GET(r) ((((r).pll_cal_ctl_sts_0_gen2[0]) >> 8) & 0x1)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_PLL_LOCKf_SET(r,f) (r).pll_cal_ctl_sts_0_gen2[0]=(((r).pll_cal_ctl_sts_0_gen2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_CAP_DONE_LH_LLf_GET(r) ((((r).pll_cal_ctl_sts_0_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_CAP_DONE_LH_LLf_SET(r,f) (r).pll_cal_ctl_sts_0_gen2[0]=(((r).pll_cal_ctl_sts_0_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_CAP_PASS_LH_LLf_GET(r) ((((r).pll_cal_ctl_sts_0_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_CAP_PASS_LH_LLf_SET(r,f) (r).pll_cal_ctl_sts_0_gen2[0]=(((r).pll_cal_ctl_sts_0_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_FREQ_DONE_SM_LH_LLf_GET(r) ((((r).pll_cal_ctl_sts_0_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_FREQ_DONE_SM_LH_LLf_SET(r,f) (r).pll_cal_ctl_sts_0_gen2[0]=(((r).pll_cal_ctl_sts_0_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_FREQ_PASS_SM_LH_LLf_GET(r) ((((r).pll_cal_ctl_sts_0_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_FREQ_PASS_SM_LH_LLf_SET(r,f) (r).pll_cal_ctl_sts_0_gen2[0]=(((r).pll_cal_ctl_sts_0_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_PLL_SEQ_DONE_LH_LLf_GET(r) ((((r).pll_cal_ctl_sts_0_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_PLL_SEQ_DONE_LH_LLf_SET(r,f) (r).pll_cal_ctl_sts_0_gen2[0]=(((r).pll_cal_ctl_sts_0_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_PLL_SEQ_PASS_LH_LLf_GET(r) ((((r).pll_cal_ctl_sts_0_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_PLL_SEQ_PASS_LH_LLf_SET(r,f) (r).pll_cal_ctl_sts_0_gen2[0]=(((r).pll_cal_ctl_sts_0_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_PLL_LOCK_LH_LLf_GET(r) (((r).pll_cal_ctl_sts_0_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_PLL_LOCK_LH_LLf_SET(r,f) (r).pll_cal_ctl_sts_0_gen2[0]=(((r).pll_cal_ctl_sts_0_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access PLL_CAL_CTL_STS_0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PLL_CAL_CTL_STS_0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r,(_r._pll_cal_ctl_sts_0_gen2))
#define BCMI_TSCF_XGXS_WRITE_PLL_CAL_CTL_STS_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r,(_r._pll_cal_ctl_sts_0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PLL_CAL_CTL_STS_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r,(_r._pll_cal_ctl_sts_0_gen2))
#define BCMI_TSCF_XGXS_READLN_PLL_CAL_CTL_STS_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_cal_ctl_sts_0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_PLL_CAL_CTL_STS_0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_cal_ctl_sts_0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_PLL_CAL_CTL_STS_0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._pll_cal_ctl_sts_0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PLL_CAL_CTL_STS_0_GEN2r BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r
#define PLL_CAL_CTL_STS_0_GEN2r_SIZE BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_t PLL_CAL_CTL_STS_0_GEN2r_t;
#define PLL_CAL_CTL_STS_0_GEN2r_CLR BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_CLR
#define PLL_CAL_CTL_STS_0_GEN2r_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_SET
#define PLL_CAL_CTL_STS_0_GEN2r_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_GET
#define PLL_CAL_CTL_STS_0_GEN2r_LOST_PLL_LOCK_SMf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_LOST_PLL_LOCK_SMf_GET
#define PLL_CAL_CTL_STS_0_GEN2r_LOST_PLL_LOCK_SMf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_LOST_PLL_LOCK_SMf_SET
#define PLL_CAL_CTL_STS_0_GEN2r_CAP_DONEf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_CAP_DONEf_GET
#define PLL_CAL_CTL_STS_0_GEN2r_CAP_DONEf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_CAP_DONEf_SET
#define PLL_CAL_CTL_STS_0_GEN2r_CAP_PASSf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_CAP_PASSf_GET
#define PLL_CAL_CTL_STS_0_GEN2r_CAP_PASSf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_CAP_PASSf_SET
#define PLL_CAL_CTL_STS_0_GEN2r_FREQ_DONE_SMf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_FREQ_DONE_SMf_GET
#define PLL_CAL_CTL_STS_0_GEN2r_FREQ_DONE_SMf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_FREQ_DONE_SMf_SET
#define PLL_CAL_CTL_STS_0_GEN2r_FREQ_PASS_SMf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_FREQ_PASS_SMf_GET
#define PLL_CAL_CTL_STS_0_GEN2r_FREQ_PASS_SMf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_FREQ_PASS_SMf_SET
#define PLL_CAL_CTL_STS_0_GEN2r_PLL_SEQ_DONEf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_PLL_SEQ_DONEf_GET
#define PLL_CAL_CTL_STS_0_GEN2r_PLL_SEQ_DONEf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_PLL_SEQ_DONEf_SET
#define PLL_CAL_CTL_STS_0_GEN2r_PLL_SEQ_PASSf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_PLL_SEQ_PASSf_GET
#define PLL_CAL_CTL_STS_0_GEN2r_PLL_SEQ_PASSf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_PLL_SEQ_PASSf_SET
#define PLL_CAL_CTL_STS_0_GEN2r_PLL_LOCKf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_PLL_LOCKf_GET
#define PLL_CAL_CTL_STS_0_GEN2r_PLL_LOCKf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_PLL_LOCKf_SET
#define PLL_CAL_CTL_STS_0_GEN2r_CAP_DONE_LH_LLf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_CAP_DONE_LH_LLf_GET
#define PLL_CAL_CTL_STS_0_GEN2r_CAP_DONE_LH_LLf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_CAP_DONE_LH_LLf_SET
#define PLL_CAL_CTL_STS_0_GEN2r_CAP_PASS_LH_LLf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_CAP_PASS_LH_LLf_GET
#define PLL_CAL_CTL_STS_0_GEN2r_CAP_PASS_LH_LLf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_CAP_PASS_LH_LLf_SET
#define PLL_CAL_CTL_STS_0_GEN2r_FREQ_DONE_SM_LH_LLf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_FREQ_DONE_SM_LH_LLf_GET
#define PLL_CAL_CTL_STS_0_GEN2r_FREQ_DONE_SM_LH_LLf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_FREQ_DONE_SM_LH_LLf_SET
#define PLL_CAL_CTL_STS_0_GEN2r_FREQ_PASS_SM_LH_LLf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_FREQ_PASS_SM_LH_LLf_GET
#define PLL_CAL_CTL_STS_0_GEN2r_FREQ_PASS_SM_LH_LLf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_FREQ_PASS_SM_LH_LLf_SET
#define PLL_CAL_CTL_STS_0_GEN2r_PLL_SEQ_DONE_LH_LLf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_PLL_SEQ_DONE_LH_LLf_GET
#define PLL_CAL_CTL_STS_0_GEN2r_PLL_SEQ_DONE_LH_LLf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_PLL_SEQ_DONE_LH_LLf_SET
#define PLL_CAL_CTL_STS_0_GEN2r_PLL_SEQ_PASS_LH_LLf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_PLL_SEQ_PASS_LH_LLf_GET
#define PLL_CAL_CTL_STS_0_GEN2r_PLL_SEQ_PASS_LH_LLf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_PLL_SEQ_PASS_LH_LLf_SET
#define PLL_CAL_CTL_STS_0_GEN2r_PLL_LOCK_LH_LLf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_PLL_LOCK_LH_LLf_GET
#define PLL_CAL_CTL_STS_0_GEN2r_PLL_LOCK_LH_LLf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r_PLL_LOCK_LH_LLf_SET
#define READ_PLL_CAL_CTL_STS_0_GEN2r BCMI_TSCF_XGXS_READ_PLL_CAL_CTL_STS_0_GEN2r
#define WRITE_PLL_CAL_CTL_STS_0_GEN2r BCMI_TSCF_XGXS_WRITE_PLL_CAL_CTL_STS_0_GEN2r
#define MODIFY_PLL_CAL_CTL_STS_0_GEN2r BCMI_TSCF_XGXS_MODIFY_PLL_CAL_CTL_STS_0_GEN2r
#define READLN_PLL_CAL_CTL_STS_0_GEN2r BCMI_TSCF_XGXS_READLN_PLL_CAL_CTL_STS_0_GEN2r
#define WRITELN_PLL_CAL_CTL_STS_0_GEN2r BCMI_TSCF_XGXS_WRITELN_PLL_CAL_CTL_STS_0_GEN2r
#define WRITEALL_PLL_CAL_CTL_STS_0_GEN2r BCMI_TSCF_XGXS_WRITEALL_PLL_CAL_CTL_STS_0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PLL_CAL_CTL_STS_1_GEN2
 * BLOCKS:   PLL_CAL_COM
 * REGADDR:  0xd149
 * DEVAD:    1
 * DESC:     PLL CAL status registers register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CAP_SELECT       status bit indicating the selected cap value (i.e. pll_range[7:0])
 *     RESCAL_IN        rescal input value
 */
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_1_GEN2r (0x0001d149 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PLL_CAL_CTL_STS_1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_1_GEN2r_s {
	uint32_t v[1];
	uint32_t pll_cal_ctl_sts_1_gen2[1];
	uint32_t _pll_cal_ctl_sts_1_gen2;
} BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_1_GEN2r_t;

#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_1_GEN2r_CLR(r) (r).pll_cal_ctl_sts_1_gen2[0] = 0
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_1_GEN2r_SET(r,d) (r).pll_cal_ctl_sts_1_gen2[0] = d
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_1_GEN2r_GET(r) (r).pll_cal_ctl_sts_1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_1_GEN2r_RESCAL_INf_GET(r) ((((r).pll_cal_ctl_sts_1_gen2[0]) >> 8) & 0xf)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_1_GEN2r_RESCAL_INf_SET(r,f) (r).pll_cal_ctl_sts_1_gen2[0]=(((r).pll_cal_ctl_sts_1_gen2[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_1_GEN2r_CAP_SELECTf_GET(r) (((r).pll_cal_ctl_sts_1_gen2[0]) & 0xff)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_1_GEN2r_CAP_SELECTf_SET(r,f) (r).pll_cal_ctl_sts_1_gen2[0]=(((r).pll_cal_ctl_sts_1_gen2[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access PLL_CAL_CTL_STS_1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PLL_CAL_CTL_STS_1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_1_GEN2r,(_r._pll_cal_ctl_sts_1_gen2))
#define BCMI_TSCF_XGXS_WRITE_PLL_CAL_CTL_STS_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_1_GEN2r,(_r._pll_cal_ctl_sts_1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PLL_CAL_CTL_STS_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_1_GEN2r,(_r._pll_cal_ctl_sts_1_gen2))
#define BCMI_TSCF_XGXS_READLN_PLL_CAL_CTL_STS_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_cal_ctl_sts_1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_PLL_CAL_CTL_STS_1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_cal_ctl_sts_1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_PLL_CAL_CTL_STS_1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._pll_cal_ctl_sts_1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PLL_CAL_CTL_STS_1_GEN2r BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_1_GEN2r
#define PLL_CAL_CTL_STS_1_GEN2r_SIZE BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_1_GEN2r_t PLL_CAL_CTL_STS_1_GEN2r_t;
#define PLL_CAL_CTL_STS_1_GEN2r_CLR BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_1_GEN2r_CLR
#define PLL_CAL_CTL_STS_1_GEN2r_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_1_GEN2r_SET
#define PLL_CAL_CTL_STS_1_GEN2r_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_1_GEN2r_GET
#define PLL_CAL_CTL_STS_1_GEN2r_RESCAL_INf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_1_GEN2r_RESCAL_INf_GET
#define PLL_CAL_CTL_STS_1_GEN2r_RESCAL_INf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_1_GEN2r_RESCAL_INf_SET
#define PLL_CAL_CTL_STS_1_GEN2r_CAP_SELECTf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_1_GEN2r_CAP_SELECTf_GET
#define PLL_CAL_CTL_STS_1_GEN2r_CAP_SELECTf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_1_GEN2r_CAP_SELECTf_SET
#define READ_PLL_CAL_CTL_STS_1_GEN2r BCMI_TSCF_XGXS_READ_PLL_CAL_CTL_STS_1_GEN2r
#define WRITE_PLL_CAL_CTL_STS_1_GEN2r BCMI_TSCF_XGXS_WRITE_PLL_CAL_CTL_STS_1_GEN2r
#define MODIFY_PLL_CAL_CTL_STS_1_GEN2r BCMI_TSCF_XGXS_MODIFY_PLL_CAL_CTL_STS_1_GEN2r
#define READLN_PLL_CAL_CTL_STS_1_GEN2r BCMI_TSCF_XGXS_READLN_PLL_CAL_CTL_STS_1_GEN2r
#define WRITELN_PLL_CAL_CTL_STS_1_GEN2r BCMI_TSCF_XGXS_WRITELN_PLL_CAL_CTL_STS_1_GEN2r
#define WRITEALL_PLL_CAL_CTL_STS_1_GEN2r BCMI_TSCF_XGXS_WRITEALL_PLL_CAL_CTL_STS_1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  PLL_CAL_CTL_STS_DBG_GEN2
 * BLOCKS:   PLL_CAL_COM
 * REGADDR:  0xd14a
 * DEVAD:    1
 * DESC:     PLL CAL debug status registers register.
 * RESETVAL: 0x1 (1)
 * ACCESS:   R/O
 * FIELDS:
 *     DBG_SLOWDN       Indicates AFE pll_low/slowdn output signal status.
 *     DBG_SLOWDN_CHANGE Indicates change on AFE pll_low/slowdn output signal. It is clear on read status register
 *     DBG_FDBCK        Indicates change on AFE fdbck output signal. clear on read status register.Will be used to see if fdbck clock from AFE is toggling and alive
 *     DBG_CAP_STATE_ONE_HOT Indicates one hot encoded Cap Sequence State Machines states. clear on read register.Following are the one-hot state assignments.State    dbg_cap_state_one_hot[x] where x is :==================================================Start          0WaitAmpL       1WaitSpeedL     2IncCapL        3Finish         4
 *     DBG_PLL_STATE_ONE_HOT Indicates one hot encoded PLL Sequence State Machines states. clear on read register.Following are the one-hot state assignments.State   dbg_pll_state_one_hot[x] where x is :==============================================Start          0WaitVco        1VcoAdjust      2WaitFreq       3FreqDet        4Fail           5FreqMon        6Finish         7
 */
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_DBG_GEN2r (0x0001d14a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_DBG_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program PLL_CAL_CTL_STS_DBG_GEN2.
 */
typedef union BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_DBG_GEN2r_s {
	uint32_t v[1];
	uint32_t pll_cal_ctl_sts_dbg_gen2[1];
	uint32_t _pll_cal_ctl_sts_dbg_gen2;
} BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_DBG_GEN2r_t;

#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_DBG_GEN2r_CLR(r) (r).pll_cal_ctl_sts_dbg_gen2[0] = 0
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_DBG_GEN2r_SET(r,d) (r).pll_cal_ctl_sts_dbg_gen2[0] = d
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_DBG_GEN2r_GET(r) (r).pll_cal_ctl_sts_dbg_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_DBG_GEN2r_DBG_PLL_STATE_ONE_HOTf_GET(r) ((((r).pll_cal_ctl_sts_dbg_gen2[0]) >> 8) & 0xff)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_DBG_GEN2r_DBG_PLL_STATE_ONE_HOTf_SET(r,f) (r).pll_cal_ctl_sts_dbg_gen2[0]=(((r).pll_cal_ctl_sts_dbg_gen2[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_DBG_GEN2r_DBG_CAP_STATE_ONE_HOTf_GET(r) ((((r).pll_cal_ctl_sts_dbg_gen2[0]) >> 3) & 0x1f)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_DBG_GEN2r_DBG_CAP_STATE_ONE_HOTf_SET(r,f) (r).pll_cal_ctl_sts_dbg_gen2[0]=(((r).pll_cal_ctl_sts_dbg_gen2[0] & ~((uint32_t)0x1f << 3)) | ((((uint32_t)f) & 0x1f) << 3)) | (31 << (16 + 3))
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_DBG_GEN2r_DBG_FDBCKf_GET(r) ((((r).pll_cal_ctl_sts_dbg_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_DBG_GEN2r_DBG_FDBCKf_SET(r,f) (r).pll_cal_ctl_sts_dbg_gen2[0]=(((r).pll_cal_ctl_sts_dbg_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_DBG_GEN2r_DBG_SLOWDN_CHANGEf_GET(r) ((((r).pll_cal_ctl_sts_dbg_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_DBG_GEN2r_DBG_SLOWDN_CHANGEf_SET(r,f) (r).pll_cal_ctl_sts_dbg_gen2[0]=(((r).pll_cal_ctl_sts_dbg_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_DBG_GEN2r_DBG_SLOWDNf_GET(r) (((r).pll_cal_ctl_sts_dbg_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_DBG_GEN2r_DBG_SLOWDNf_SET(r,f) (r).pll_cal_ctl_sts_dbg_gen2[0]=(((r).pll_cal_ctl_sts_dbg_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access PLL_CAL_CTL_STS_DBG_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_PLL_CAL_CTL_STS_DBG_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_DBG_GEN2r,(_r._pll_cal_ctl_sts_dbg_gen2))
#define BCMI_TSCF_XGXS_WRITE_PLL_CAL_CTL_STS_DBG_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_DBG_GEN2r,(_r._pll_cal_ctl_sts_dbg_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_PLL_CAL_CTL_STS_DBG_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_DBG_GEN2r,(_r._pll_cal_ctl_sts_dbg_gen2))
#define BCMI_TSCF_XGXS_READLN_PLL_CAL_CTL_STS_DBG_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_DBG_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_cal_ctl_sts_dbg_gen2))
#define BCMI_TSCF_XGXS_WRITELN_PLL_CAL_CTL_STS_DBG_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_DBG_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_cal_ctl_sts_dbg_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_PLL_CAL_CTL_STS_DBG_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_DBG_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._pll_cal_ctl_sts_dbg_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PLL_CAL_CTL_STS_DBG_GEN2r BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_DBG_GEN2r
#define PLL_CAL_CTL_STS_DBG_GEN2r_SIZE BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_DBG_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_DBG_GEN2r_t PLL_CAL_CTL_STS_DBG_GEN2r_t;
#define PLL_CAL_CTL_STS_DBG_GEN2r_CLR BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_DBG_GEN2r_CLR
#define PLL_CAL_CTL_STS_DBG_GEN2r_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_DBG_GEN2r_SET
#define PLL_CAL_CTL_STS_DBG_GEN2r_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_DBG_GEN2r_GET
#define PLL_CAL_CTL_STS_DBG_GEN2r_DBG_PLL_STATE_ONE_HOTf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_DBG_GEN2r_DBG_PLL_STATE_ONE_HOTf_GET
#define PLL_CAL_CTL_STS_DBG_GEN2r_DBG_PLL_STATE_ONE_HOTf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_DBG_GEN2r_DBG_PLL_STATE_ONE_HOTf_SET
#define PLL_CAL_CTL_STS_DBG_GEN2r_DBG_CAP_STATE_ONE_HOTf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_DBG_GEN2r_DBG_CAP_STATE_ONE_HOTf_GET
#define PLL_CAL_CTL_STS_DBG_GEN2r_DBG_CAP_STATE_ONE_HOTf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_DBG_GEN2r_DBG_CAP_STATE_ONE_HOTf_SET
#define PLL_CAL_CTL_STS_DBG_GEN2r_DBG_FDBCKf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_DBG_GEN2r_DBG_FDBCKf_GET
#define PLL_CAL_CTL_STS_DBG_GEN2r_DBG_FDBCKf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_DBG_GEN2r_DBG_FDBCKf_SET
#define PLL_CAL_CTL_STS_DBG_GEN2r_DBG_SLOWDN_CHANGEf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_DBG_GEN2r_DBG_SLOWDN_CHANGEf_GET
#define PLL_CAL_CTL_STS_DBG_GEN2r_DBG_SLOWDN_CHANGEf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_DBG_GEN2r_DBG_SLOWDN_CHANGEf_SET
#define PLL_CAL_CTL_STS_DBG_GEN2r_DBG_SLOWDNf_GET BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_DBG_GEN2r_DBG_SLOWDNf_GET
#define PLL_CAL_CTL_STS_DBG_GEN2r_DBG_SLOWDNf_SET BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_DBG_GEN2r_DBG_SLOWDNf_SET
#define READ_PLL_CAL_CTL_STS_DBG_GEN2r BCMI_TSCF_XGXS_READ_PLL_CAL_CTL_STS_DBG_GEN2r
#define WRITE_PLL_CAL_CTL_STS_DBG_GEN2r BCMI_TSCF_XGXS_WRITE_PLL_CAL_CTL_STS_DBG_GEN2r
#define MODIFY_PLL_CAL_CTL_STS_DBG_GEN2r BCMI_TSCF_XGXS_MODIFY_PLL_CAL_CTL_STS_DBG_GEN2r
#define READLN_PLL_CAL_CTL_STS_DBG_GEN2r BCMI_TSCF_XGXS_READLN_PLL_CAL_CTL_STS_DBG_GEN2r
#define WRITELN_PLL_CAL_CTL_STS_DBG_GEN2r BCMI_TSCF_XGXS_WRITELN_PLL_CAL_CTL_STS_DBG_GEN2r
#define WRITEALL_PLL_CAL_CTL_STS_DBG_GEN2r BCMI_TSCF_XGXS_WRITEALL_PLL_CAL_CTL_STS_DBG_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_PLL_CAL_CTL_STS_DBG_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TX_CTL0_GEN2
 * BLOCKS:   TX_COM
 * REGADDR:  0xd150
 * DEVAD:    1
 * DESC:     TX common control 0 register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TXCOM_POST_TAP_ALERT_VAL txfir post tap value during EEE alert mode
 *     TXCOM_PRE_TAP_ALERT_VAL txfir pre tap value during EEE alert mode
 */
#define BCMI_TSCF_XGXS_TX_CTL0_GEN2r (0x0001d150 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TX_CTL0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TX_CTL0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TX_CTL0_GEN2r_s {
	uint32_t v[1];
	uint32_t tx_ctl0_gen2[1];
	uint32_t _tx_ctl0_gen2;
} BCMI_TSCF_XGXS_TX_CTL0_GEN2r_t;

#define BCMI_TSCF_XGXS_TX_CTL0_GEN2r_CLR(r) (r).tx_ctl0_gen2[0] = 0
#define BCMI_TSCF_XGXS_TX_CTL0_GEN2r_SET(r,d) (r).tx_ctl0_gen2[0] = d
#define BCMI_TSCF_XGXS_TX_CTL0_GEN2r_GET(r) (r).tx_ctl0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TX_CTL0_GEN2r_TXCOM_PRE_TAP_ALERT_VALf_GET(r) ((((r).tx_ctl0_gen2[0]) >> 8) & 0x1f)
#define BCMI_TSCF_XGXS_TX_CTL0_GEN2r_TXCOM_PRE_TAP_ALERT_VALf_SET(r,f) (r).tx_ctl0_gen2[0]=(((r).tx_ctl0_gen2[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8)) | (31 << (16 + 8))
#define BCMI_TSCF_XGXS_TX_CTL0_GEN2r_TXCOM_POST_TAP_ALERT_VALf_GET(r) (((r).tx_ctl0_gen2[0]) & 0x3f)
#define BCMI_TSCF_XGXS_TX_CTL0_GEN2r_TXCOM_POST_TAP_ALERT_VALf_SET(r,f) (r).tx_ctl0_gen2[0]=(((r).tx_ctl0_gen2[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access TX_CTL0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TX_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_CTL0_GEN2r,(_r._tx_ctl0_gen2))
#define BCMI_TSCF_XGXS_WRITE_TX_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_CTL0_GEN2r,(_r._tx_ctl0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TX_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_CTL0_GEN2r,(_r._tx_ctl0_gen2))
#define BCMI_TSCF_XGXS_READLN_TX_CTL0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_CTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_ctl0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TX_CTL0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_CTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_ctl0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TX_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_CTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_ctl0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TX_CTL0_GEN2r BCMI_TSCF_XGXS_TX_CTL0_GEN2r
#define TX_CTL0_GEN2r_SIZE BCMI_TSCF_XGXS_TX_CTL0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TX_CTL0_GEN2r_t TX_CTL0_GEN2r_t;
#define TX_CTL0_GEN2r_CLR BCMI_TSCF_XGXS_TX_CTL0_GEN2r_CLR
#define TX_CTL0_GEN2r_SET BCMI_TSCF_XGXS_TX_CTL0_GEN2r_SET
#define TX_CTL0_GEN2r_GET BCMI_TSCF_XGXS_TX_CTL0_GEN2r_GET
#define TX_CTL0_GEN2r_TXCOM_PRE_TAP_ALERT_VALf_GET BCMI_TSCF_XGXS_TX_CTL0_GEN2r_TXCOM_PRE_TAP_ALERT_VALf_GET
#define TX_CTL0_GEN2r_TXCOM_PRE_TAP_ALERT_VALf_SET BCMI_TSCF_XGXS_TX_CTL0_GEN2r_TXCOM_PRE_TAP_ALERT_VALf_SET
#define TX_CTL0_GEN2r_TXCOM_POST_TAP_ALERT_VALf_GET BCMI_TSCF_XGXS_TX_CTL0_GEN2r_TXCOM_POST_TAP_ALERT_VALf_GET
#define TX_CTL0_GEN2r_TXCOM_POST_TAP_ALERT_VALf_SET BCMI_TSCF_XGXS_TX_CTL0_GEN2r_TXCOM_POST_TAP_ALERT_VALf_SET
#define READ_TX_CTL0_GEN2r BCMI_TSCF_XGXS_READ_TX_CTL0_GEN2r
#define WRITE_TX_CTL0_GEN2r BCMI_TSCF_XGXS_WRITE_TX_CTL0_GEN2r
#define MODIFY_TX_CTL0_GEN2r BCMI_TSCF_XGXS_MODIFY_TX_CTL0_GEN2r
#define READLN_TX_CTL0_GEN2r BCMI_TSCF_XGXS_READLN_TX_CTL0_GEN2r
#define WRITELN_TX_CTL0_GEN2r BCMI_TSCF_XGXS_WRITELN_TX_CTL0_GEN2r
#define WRITEALL_TX_CTL0_GEN2r BCMI_TSCF_XGXS_WRITEALL_TX_CTL0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TX_CTL0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TX_CTL1_GEN2
 * BLOCKS:   TX_COM
 * REGADDR:  0xd151
 * DEVAD:    1
 * DESC:     TX common control 1 register
 * RESETVAL: 0x70 (112)
 * ACCESS:   R/W
 * FIELDS:
 *     TXCOM_MAIN_TAP_ALERT_VAL txfir main tap value during EEE alert mode
 */
#define BCMI_TSCF_XGXS_TX_CTL1_GEN2r (0x0001d151 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TX_CTL1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TX_CTL1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TX_CTL1_GEN2r_s {
	uint32_t v[1];
	uint32_t tx_ctl1_gen2[1];
	uint32_t _tx_ctl1_gen2;
} BCMI_TSCF_XGXS_TX_CTL1_GEN2r_t;

#define BCMI_TSCF_XGXS_TX_CTL1_GEN2r_CLR(r) (r).tx_ctl1_gen2[0] = 0
#define BCMI_TSCF_XGXS_TX_CTL1_GEN2r_SET(r,d) (r).tx_ctl1_gen2[0] = d
#define BCMI_TSCF_XGXS_TX_CTL1_GEN2r_GET(r) (r).tx_ctl1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TX_CTL1_GEN2r_TXCOM_MAIN_TAP_ALERT_VALf_GET(r) (((r).tx_ctl1_gen2[0]) & 0x7f)
#define BCMI_TSCF_XGXS_TX_CTL1_GEN2r_TXCOM_MAIN_TAP_ALERT_VALf_SET(r,f) (r).tx_ctl1_gen2[0]=(((r).tx_ctl1_gen2[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f)) | (0x7f << 16)

/*
 * These macros can be used to access TX_CTL1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TX_CTL1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_CTL1_GEN2r,(_r._tx_ctl1_gen2))
#define BCMI_TSCF_XGXS_WRITE_TX_CTL1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_CTL1_GEN2r,(_r._tx_ctl1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TX_CTL1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_CTL1_GEN2r,(_r._tx_ctl1_gen2))
#define BCMI_TSCF_XGXS_READLN_TX_CTL1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_CTL1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_ctl1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TX_CTL1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_CTL1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_ctl1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TX_CTL1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_CTL1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_ctl1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TX_CTL1_GEN2r BCMI_TSCF_XGXS_TX_CTL1_GEN2r
#define TX_CTL1_GEN2r_SIZE BCMI_TSCF_XGXS_TX_CTL1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TX_CTL1_GEN2r_t TX_CTL1_GEN2r_t;
#define TX_CTL1_GEN2r_CLR BCMI_TSCF_XGXS_TX_CTL1_GEN2r_CLR
#define TX_CTL1_GEN2r_SET BCMI_TSCF_XGXS_TX_CTL1_GEN2r_SET
#define TX_CTL1_GEN2r_GET BCMI_TSCF_XGXS_TX_CTL1_GEN2r_GET
#define TX_CTL1_GEN2r_TXCOM_MAIN_TAP_ALERT_VALf_GET BCMI_TSCF_XGXS_TX_CTL1_GEN2r_TXCOM_MAIN_TAP_ALERT_VALf_GET
#define TX_CTL1_GEN2r_TXCOM_MAIN_TAP_ALERT_VALf_SET BCMI_TSCF_XGXS_TX_CTL1_GEN2r_TXCOM_MAIN_TAP_ALERT_VALf_SET
#define READ_TX_CTL1_GEN2r BCMI_TSCF_XGXS_READ_TX_CTL1_GEN2r
#define WRITE_TX_CTL1_GEN2r BCMI_TSCF_XGXS_WRITE_TX_CTL1_GEN2r
#define MODIFY_TX_CTL1_GEN2r BCMI_TSCF_XGXS_MODIFY_TX_CTL1_GEN2r
#define READLN_TX_CTL1_GEN2r BCMI_TSCF_XGXS_READLN_TX_CTL1_GEN2r
#define WRITELN_TX_CTL1_GEN2r BCMI_TSCF_XGXS_WRITELN_TX_CTL1_GEN2r
#define WRITEALL_TX_CTL1_GEN2r BCMI_TSCF_XGXS_WRITEALL_TX_CTL1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TX_CTL1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TX_CTL2_GEN2
 * BLOCKS:   TX_COM
 * REGADDR:  0xd152
 * DEVAD:    1
 * DESC:     TX common control 2 register
 * RESETVAL: 0x1f4 (500)
 * ACCESS:   R/W
 * FIELDS:
 *     TXCOM_CL93N72_MAX_WAIT_TIMER_PERIOD Maximum Training Time in msPeriod/range is 500 ms
 */
#define BCMI_TSCF_XGXS_TX_CTL2_GEN2r (0x0001d152 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TX_CTL2_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TX_CTL2_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TX_CTL2_GEN2r_s {
	uint32_t v[1];
	uint32_t tx_ctl2_gen2[1];
	uint32_t _tx_ctl2_gen2;
} BCMI_TSCF_XGXS_TX_CTL2_GEN2r_t;

#define BCMI_TSCF_XGXS_TX_CTL2_GEN2r_CLR(r) (r).tx_ctl2_gen2[0] = 0
#define BCMI_TSCF_XGXS_TX_CTL2_GEN2r_SET(r,d) (r).tx_ctl2_gen2[0] = d
#define BCMI_TSCF_XGXS_TX_CTL2_GEN2r_GET(r) (r).tx_ctl2_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TX_CTL2_GEN2r_TXCOM_CL93N72_MAX_WAIT_TIMER_PERIODf_GET(r) (((r).tx_ctl2_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_TX_CTL2_GEN2r_TXCOM_CL93N72_MAX_WAIT_TIMER_PERIODf_SET(r,f) (r).tx_ctl2_gen2[0]=(((r).tx_ctl2_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access TX_CTL2_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TX_CTL2_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_CTL2_GEN2r,(_r._tx_ctl2_gen2))
#define BCMI_TSCF_XGXS_WRITE_TX_CTL2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_CTL2_GEN2r,(_r._tx_ctl2_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TX_CTL2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_CTL2_GEN2r,(_r._tx_ctl2_gen2))
#define BCMI_TSCF_XGXS_READLN_TX_CTL2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_CTL2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_ctl2_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TX_CTL2_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_CTL2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_ctl2_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TX_CTL2_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_CTL2_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_ctl2_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TX_CTL2_GEN2r BCMI_TSCF_XGXS_TX_CTL2_GEN2r
#define TX_CTL2_GEN2r_SIZE BCMI_TSCF_XGXS_TX_CTL2_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TX_CTL2_GEN2r_t TX_CTL2_GEN2r_t;
#define TX_CTL2_GEN2r_CLR BCMI_TSCF_XGXS_TX_CTL2_GEN2r_CLR
#define TX_CTL2_GEN2r_SET BCMI_TSCF_XGXS_TX_CTL2_GEN2r_SET
#define TX_CTL2_GEN2r_GET BCMI_TSCF_XGXS_TX_CTL2_GEN2r_GET
#define TX_CTL2_GEN2r_TXCOM_CL93N72_MAX_WAIT_TIMER_PERIODf_GET BCMI_TSCF_XGXS_TX_CTL2_GEN2r_TXCOM_CL93N72_MAX_WAIT_TIMER_PERIODf_GET
#define TX_CTL2_GEN2r_TXCOM_CL93N72_MAX_WAIT_TIMER_PERIODf_SET BCMI_TSCF_XGXS_TX_CTL2_GEN2r_TXCOM_CL93N72_MAX_WAIT_TIMER_PERIODf_SET
#define READ_TX_CTL2_GEN2r BCMI_TSCF_XGXS_READ_TX_CTL2_GEN2r
#define WRITE_TX_CTL2_GEN2r BCMI_TSCF_XGXS_WRITE_TX_CTL2_GEN2r
#define MODIFY_TX_CTL2_GEN2r BCMI_TSCF_XGXS_MODIFY_TX_CTL2_GEN2r
#define READLN_TX_CTL2_GEN2r BCMI_TSCF_XGXS_READLN_TX_CTL2_GEN2r
#define WRITELN_TX_CTL2_GEN2r BCMI_TSCF_XGXS_WRITELN_TX_CTL2_GEN2r
#define WRITEALL_TX_CTL2_GEN2r BCMI_TSCF_XGXS_WRITEALL_TX_CTL2_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TX_CTL2_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TX_CTL3_GEN2
 * BLOCKS:   TX_COM
 * REGADDR:  0xd153
 * DEVAD:    1
 * DESC:     TX common control 3 register
 * RESETVAL: 0xc8 (200)
 * ACCESS:   R/W
 * FIELDS:
 *     TXCOM_CL93N72_WAIT_CNTR_LIMIT Period/range is 100-300 framesPeriod to keep transiming frames after the local device has completed trainingThe units are training pages.
 */
#define BCMI_TSCF_XGXS_TX_CTL3_GEN2r (0x0001d153 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TX_CTL3_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TX_CTL3_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TX_CTL3_GEN2r_s {
	uint32_t v[1];
	uint32_t tx_ctl3_gen2[1];
	uint32_t _tx_ctl3_gen2;
} BCMI_TSCF_XGXS_TX_CTL3_GEN2r_t;

#define BCMI_TSCF_XGXS_TX_CTL3_GEN2r_CLR(r) (r).tx_ctl3_gen2[0] = 0
#define BCMI_TSCF_XGXS_TX_CTL3_GEN2r_SET(r,d) (r).tx_ctl3_gen2[0] = d
#define BCMI_TSCF_XGXS_TX_CTL3_GEN2r_GET(r) (r).tx_ctl3_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TX_CTL3_GEN2r_TXCOM_CL93N72_WAIT_CNTR_LIMITf_GET(r) (((r).tx_ctl3_gen2[0]) & 0x1ff)
#define BCMI_TSCF_XGXS_TX_CTL3_GEN2r_TXCOM_CL93N72_WAIT_CNTR_LIMITf_SET(r,f) (r).tx_ctl3_gen2[0]=(((r).tx_ctl3_gen2[0] & ~((uint32_t)0x1ff)) | (((uint32_t)f) & 0x1ff)) | (0x1ff << 16)

/*
 * These macros can be used to access TX_CTL3_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TX_CTL3_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_CTL3_GEN2r,(_r._tx_ctl3_gen2))
#define BCMI_TSCF_XGXS_WRITE_TX_CTL3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_CTL3_GEN2r,(_r._tx_ctl3_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TX_CTL3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_CTL3_GEN2r,(_r._tx_ctl3_gen2))
#define BCMI_TSCF_XGXS_READLN_TX_CTL3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TX_CTL3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_ctl3_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TX_CTL3_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_CTL3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_ctl3_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TX_CTL3_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TX_CTL3_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_ctl3_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TX_CTL3_GEN2r BCMI_TSCF_XGXS_TX_CTL3_GEN2r
#define TX_CTL3_GEN2r_SIZE BCMI_TSCF_XGXS_TX_CTL3_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TX_CTL3_GEN2r_t TX_CTL3_GEN2r_t;
#define TX_CTL3_GEN2r_CLR BCMI_TSCF_XGXS_TX_CTL3_GEN2r_CLR
#define TX_CTL3_GEN2r_SET BCMI_TSCF_XGXS_TX_CTL3_GEN2r_SET
#define TX_CTL3_GEN2r_GET BCMI_TSCF_XGXS_TX_CTL3_GEN2r_GET
#define TX_CTL3_GEN2r_TXCOM_CL93N72_WAIT_CNTR_LIMITf_GET BCMI_TSCF_XGXS_TX_CTL3_GEN2r_TXCOM_CL93N72_WAIT_CNTR_LIMITf_GET
#define TX_CTL3_GEN2r_TXCOM_CL93N72_WAIT_CNTR_LIMITf_SET BCMI_TSCF_XGXS_TX_CTL3_GEN2r_TXCOM_CL93N72_WAIT_CNTR_LIMITf_SET
#define READ_TX_CTL3_GEN2r BCMI_TSCF_XGXS_READ_TX_CTL3_GEN2r
#define WRITE_TX_CTL3_GEN2r BCMI_TSCF_XGXS_WRITE_TX_CTL3_GEN2r
#define MODIFY_TX_CTL3_GEN2r BCMI_TSCF_XGXS_MODIFY_TX_CTL3_GEN2r
#define READLN_TX_CTL3_GEN2r BCMI_TSCF_XGXS_READLN_TX_CTL3_GEN2r
#define WRITELN_TX_CTL3_GEN2r BCMI_TSCF_XGXS_WRITELN_TX_CTL3_GEN2r
#define WRITEALL_TX_CTL3_GEN2r BCMI_TSCF_XGXS_WRITEALL_TX_CTL3_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TX_CTL3_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TLB_RX_PRBS_CHK_CNT_CFG_GEN2
 * BLOCKS:   TLB_RX
 * REGADDR:  0xd160
 * DEVAD:    1
 * DESC:     PRBS Checker Count Control
 * RESETVAL: 0x602 (1538)
 * ACCESS:   R/W
 * FIELDS:
 *     PRBS_CHK_LOCK_CNT specifies the number of consecutive valid clock cycles without any bit errorfor PRBS checker to go into PRBS lock state. Valid values are 0 to 31 where0 indicate that PRBS will lock as soon as it gets the first clock cycle with no bit error.likewise 31 indicates that PRBS will lock as soon as it gets the 32 consecutive clocks with no error.
 *     PRBS_CHK_OOL_CNT specifies the number of consecutive valid clock cycles with 1 or more bit errorsfor PRBS checker to go out of PRBS lock state. Valid values are 0 to 31 where0 indicate that PRBS will go out of lock as soon as it gets the first clock cycle with 1 or more bit errors.likewise 31 indicates that PRBS will go out of lock as soon as it gets the 32 consecutive clocks with 1 or more errors.
 */
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CNT_CFG_GEN2r (0x0001d160 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CNT_CFG_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TLB_RX_PRBS_CHK_CNT_CFG_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CNT_CFG_GEN2r_s {
	uint32_t v[1];
	uint32_t tlb_rx_prbs_chk_cnt_cfg_gen2[1];
	uint32_t _tlb_rx_prbs_chk_cnt_cfg_gen2;
} BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CNT_CFG_GEN2r_t;

#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CNT_CFG_GEN2r_CLR(r) (r).tlb_rx_prbs_chk_cnt_cfg_gen2[0] = 0
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CNT_CFG_GEN2r_SET(r,d) (r).tlb_rx_prbs_chk_cnt_cfg_gen2[0] = d
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CNT_CFG_GEN2r_GET(r) (r).tlb_rx_prbs_chk_cnt_cfg_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CNT_CFG_GEN2r_PRBS_CHK_OOL_CNTf_GET(r) ((((r).tlb_rx_prbs_chk_cnt_cfg_gen2[0]) >> 8) & 0x1f)
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CNT_CFG_GEN2r_PRBS_CHK_OOL_CNTf_SET(r,f) (r).tlb_rx_prbs_chk_cnt_cfg_gen2[0]=(((r).tlb_rx_prbs_chk_cnt_cfg_gen2[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8)) | (31 << (16 + 8))
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CNT_CFG_GEN2r_PRBS_CHK_LOCK_CNTf_GET(r) (((r).tlb_rx_prbs_chk_cnt_cfg_gen2[0]) & 0x1f)
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CNT_CFG_GEN2r_PRBS_CHK_LOCK_CNTf_SET(r,f) (r).tlb_rx_prbs_chk_cnt_cfg_gen2[0]=(((r).tlb_rx_prbs_chk_cnt_cfg_gen2[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access TLB_RX_PRBS_CHK_CNT_CFG_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TLB_RX_PRBS_CHK_CNT_CFG_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CNT_CFG_GEN2r,(_r._tlb_rx_prbs_chk_cnt_cfg_gen2))
#define BCMI_TSCF_XGXS_WRITE_TLB_RX_PRBS_CHK_CNT_CFG_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CNT_CFG_GEN2r,(_r._tlb_rx_prbs_chk_cnt_cfg_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TLB_RX_PRBS_CHK_CNT_CFG_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CNT_CFG_GEN2r,(_r._tlb_rx_prbs_chk_cnt_cfg_gen2))
#define BCMI_TSCF_XGXS_READLN_TLB_RX_PRBS_CHK_CNT_CFG_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CNT_CFG_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_prbs_chk_cnt_cfg_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TLB_RX_PRBS_CHK_CNT_CFG_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CNT_CFG_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_prbs_chk_cnt_cfg_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TLB_RX_PRBS_CHK_CNT_CFG_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CNT_CFG_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_rx_prbs_chk_cnt_cfg_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TLB_RX_PRBS_CHK_CNT_CFG_GEN2r BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CNT_CFG_GEN2r
#define TLB_RX_PRBS_CHK_CNT_CFG_GEN2r_SIZE BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CNT_CFG_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CNT_CFG_GEN2r_t TLB_RX_PRBS_CHK_CNT_CFG_GEN2r_t;
#define TLB_RX_PRBS_CHK_CNT_CFG_GEN2r_CLR BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CNT_CFG_GEN2r_CLR
#define TLB_RX_PRBS_CHK_CNT_CFG_GEN2r_SET BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CNT_CFG_GEN2r_SET
#define TLB_RX_PRBS_CHK_CNT_CFG_GEN2r_GET BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CNT_CFG_GEN2r_GET
#define TLB_RX_PRBS_CHK_CNT_CFG_GEN2r_PRBS_CHK_OOL_CNTf_GET BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CNT_CFG_GEN2r_PRBS_CHK_OOL_CNTf_GET
#define TLB_RX_PRBS_CHK_CNT_CFG_GEN2r_PRBS_CHK_OOL_CNTf_SET BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CNT_CFG_GEN2r_PRBS_CHK_OOL_CNTf_SET
#define TLB_RX_PRBS_CHK_CNT_CFG_GEN2r_PRBS_CHK_LOCK_CNTf_GET BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CNT_CFG_GEN2r_PRBS_CHK_LOCK_CNTf_GET
#define TLB_RX_PRBS_CHK_CNT_CFG_GEN2r_PRBS_CHK_LOCK_CNTf_SET BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CNT_CFG_GEN2r_PRBS_CHK_LOCK_CNTf_SET
#define READ_TLB_RX_PRBS_CHK_CNT_CFG_GEN2r BCMI_TSCF_XGXS_READ_TLB_RX_PRBS_CHK_CNT_CFG_GEN2r
#define WRITE_TLB_RX_PRBS_CHK_CNT_CFG_GEN2r BCMI_TSCF_XGXS_WRITE_TLB_RX_PRBS_CHK_CNT_CFG_GEN2r
#define MODIFY_TLB_RX_PRBS_CHK_CNT_CFG_GEN2r BCMI_TSCF_XGXS_MODIFY_TLB_RX_PRBS_CHK_CNT_CFG_GEN2r
#define READLN_TLB_RX_PRBS_CHK_CNT_CFG_GEN2r BCMI_TSCF_XGXS_READLN_TLB_RX_PRBS_CHK_CNT_CFG_GEN2r
#define WRITELN_TLB_RX_PRBS_CHK_CNT_CFG_GEN2r BCMI_TSCF_XGXS_WRITELN_TLB_RX_PRBS_CHK_CNT_CFG_GEN2r
#define WRITEALL_TLB_RX_PRBS_CHK_CNT_CFG_GEN2r BCMI_TSCF_XGXS_WRITEALL_TLB_RX_PRBS_CHK_CNT_CFG_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CNT_CFG_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TLB_RX_PRBS_CHK_CFG_GEN2
 * BLOCKS:   TLB_RX
 * REGADDR:  0xd161
 * DEVAD:    1
 * DESC:     PRBS Checker Control
 * RESETVAL: 0x10a (266)
 * ACCESS:   R/W
 * FIELDS:
 *     PRBS_CHK_EN      PRBS checker enable.1 => enable  the PRBS checker.0 => disable the PRBS checker.
 *     PRBS_CHK_MODE_SEL PRBS checker mode select. Selects the PRBS polynomial as shown below3'd0 -> PRBS 73'd1 -> PRBS 93'd2 -> PRBS 113'd3 -> PRBS 153'd4 -> PRBS 233'd5 -> PRBS 313'd6 -> PRBS 58 (1 + x^39 + x^58)3'd7 -> reserved for future use.
 *     PRBS_CHK_INV     PRBS Invert enable.1 => will invert all the data bits to the PRBS checker.0 => will send normal data to the PRBS checker.
 *     PRBS_CHK_MODE    PRBS LOCK state machine select.2'd0 -> Self-sync mode w/ hysteresis. PRBS seed register is continuously seeded with previous received bits.This mode results in faster locking, but bit errors are counted multiple times (often by 3x).2'd1 -> Initial seed mode w/ hysteresis. PRBS seed registers is seeded with previous received bits only till PRBS lock isacquired and then they run locally independently from the received data until the checker goes out of PRBS lock.2'd2 -> Initial seed mode w/o hysteresis. Similar to mode 1 above except once locked it stays locked until PRBS is disabled.2'd3 -> reserved for future use.
 *     PRBS_CHK_EN_AUTO_MODE PRBS Checker Enable Mode Control.1 => select (rx_dsc_lock & prbs_chk_en) as PRBS checker enable control.0 => select                prbs_chk_en  as PRBS checker enable control.
 *     PRBS_BURST_LEN_CHK_EN 0 => disbale, 1=> enable (default)
 *     PRBS_CHK_ERR_CNT_BURST_MODE PRBS Error Counter Mode.1 => Each busrt of error will be counted as 1 error in the error counter. Each error busrt must be separated by 1 error-free cycle of data which in worst case should be 39 bits.0 => Each bit error will be counted.
 *     TRNSUM_ERROR_COUNT_EN Training sum error counter Mode enable.1 => will make the PRBS error counter used as trnsum_error counter. PRBS checker can not be used during this mode.0 => PRBS checker mode.
 *     PRBS_CHK_CLK_EN_FRC_ON PRBS checker clock enable.1'b1 will enable the PRBS checker clock. Recommended to be enabled before enabling the prbs_chk_en.
 */
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r (0x0001d161 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TLB_RX_PRBS_CHK_CFG_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r_s {
	uint32_t v[1];
	uint32_t tlb_rx_prbs_chk_cfg_gen2[1];
	uint32_t _tlb_rx_prbs_chk_cfg_gen2;
} BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r_t;

#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r_CLR(r) (r).tlb_rx_prbs_chk_cfg_gen2[0] = 0
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r_SET(r,d) (r).tlb_rx_prbs_chk_cfg_gen2[0] = d
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r_GET(r) (r).tlb_rx_prbs_chk_cfg_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r_PRBS_CHK_CLK_EN_FRC_ONf_GET(r) ((((r).tlb_rx_prbs_chk_cfg_gen2[0]) >> 11) & 0x1)
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r_PRBS_CHK_CLK_EN_FRC_ONf_SET(r,f) (r).tlb_rx_prbs_chk_cfg_gen2[0]=(((r).tlb_rx_prbs_chk_cfg_gen2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r_TRNSUM_ERROR_COUNT_ENf_GET(r) ((((r).tlb_rx_prbs_chk_cfg_gen2[0]) >> 10) & 0x1)
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r_TRNSUM_ERROR_COUNT_ENf_SET(r,f) (r).tlb_rx_prbs_chk_cfg_gen2[0]=(((r).tlb_rx_prbs_chk_cfg_gen2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r_PRBS_CHK_ERR_CNT_BURST_MODEf_GET(r) ((((r).tlb_rx_prbs_chk_cfg_gen2[0]) >> 9) & 0x1)
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r_PRBS_CHK_ERR_CNT_BURST_MODEf_SET(r,f) (r).tlb_rx_prbs_chk_cfg_gen2[0]=(((r).tlb_rx_prbs_chk_cfg_gen2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r_PRBS_BURST_LEN_CHK_ENf_GET(r) ((((r).tlb_rx_prbs_chk_cfg_gen2[0]) >> 8) & 0x1)
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r_PRBS_BURST_LEN_CHK_ENf_SET(r,f) (r).tlb_rx_prbs_chk_cfg_gen2[0]=(((r).tlb_rx_prbs_chk_cfg_gen2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r_PRBS_CHK_EN_AUTO_MODEf_GET(r) ((((r).tlb_rx_prbs_chk_cfg_gen2[0]) >> 7) & 0x1)
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r_PRBS_CHK_EN_AUTO_MODEf_SET(r,f) (r).tlb_rx_prbs_chk_cfg_gen2[0]=(((r).tlb_rx_prbs_chk_cfg_gen2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r_PRBS_CHK_MODEf_GET(r) ((((r).tlb_rx_prbs_chk_cfg_gen2[0]) >> 5) & 0x3)
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r_PRBS_CHK_MODEf_SET(r,f) (r).tlb_rx_prbs_chk_cfg_gen2[0]=(((r).tlb_rx_prbs_chk_cfg_gen2[0] & ~((uint32_t)0x3 << 5)) | ((((uint32_t)f) & 0x3) << 5)) | (3 << (16 + 5))
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r_PRBS_CHK_INVf_GET(r) ((((r).tlb_rx_prbs_chk_cfg_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r_PRBS_CHK_INVf_SET(r,f) (r).tlb_rx_prbs_chk_cfg_gen2[0]=(((r).tlb_rx_prbs_chk_cfg_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r_PRBS_CHK_MODE_SELf_GET(r) ((((r).tlb_rx_prbs_chk_cfg_gen2[0]) >> 1) & 0x7)
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r_PRBS_CHK_MODE_SELf_SET(r,f) (r).tlb_rx_prbs_chk_cfg_gen2[0]=(((r).tlb_rx_prbs_chk_cfg_gen2[0] & ~((uint32_t)0x7 << 1)) | ((((uint32_t)f) & 0x7) << 1)) | (7 << (16 + 1))
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r_PRBS_CHK_ENf_GET(r) (((r).tlb_rx_prbs_chk_cfg_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r_PRBS_CHK_ENf_SET(r,f) (r).tlb_rx_prbs_chk_cfg_gen2[0]=(((r).tlb_rx_prbs_chk_cfg_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TLB_RX_PRBS_CHK_CFG_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TLB_RX_PRBS_CHK_CFG_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r,(_r._tlb_rx_prbs_chk_cfg_gen2))
#define BCMI_TSCF_XGXS_WRITE_TLB_RX_PRBS_CHK_CFG_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r,(_r._tlb_rx_prbs_chk_cfg_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TLB_RX_PRBS_CHK_CFG_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r,(_r._tlb_rx_prbs_chk_cfg_gen2))
#define BCMI_TSCF_XGXS_READLN_TLB_RX_PRBS_CHK_CFG_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_prbs_chk_cfg_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TLB_RX_PRBS_CHK_CFG_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_prbs_chk_cfg_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TLB_RX_PRBS_CHK_CFG_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_rx_prbs_chk_cfg_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TLB_RX_PRBS_CHK_CFG_GEN2r BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r
#define TLB_RX_PRBS_CHK_CFG_GEN2r_SIZE BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r_t TLB_RX_PRBS_CHK_CFG_GEN2r_t;
#define TLB_RX_PRBS_CHK_CFG_GEN2r_CLR BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r_CLR
#define TLB_RX_PRBS_CHK_CFG_GEN2r_SET BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r_SET
#define TLB_RX_PRBS_CHK_CFG_GEN2r_GET BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r_GET
#define TLB_RX_PRBS_CHK_CFG_GEN2r_PRBS_CHK_CLK_EN_FRC_ONf_GET BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r_PRBS_CHK_CLK_EN_FRC_ONf_GET
#define TLB_RX_PRBS_CHK_CFG_GEN2r_PRBS_CHK_CLK_EN_FRC_ONf_SET BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r_PRBS_CHK_CLK_EN_FRC_ONf_SET
#define TLB_RX_PRBS_CHK_CFG_GEN2r_TRNSUM_ERROR_COUNT_ENf_GET BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r_TRNSUM_ERROR_COUNT_ENf_GET
#define TLB_RX_PRBS_CHK_CFG_GEN2r_TRNSUM_ERROR_COUNT_ENf_SET BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r_TRNSUM_ERROR_COUNT_ENf_SET
#define TLB_RX_PRBS_CHK_CFG_GEN2r_PRBS_CHK_ERR_CNT_BURST_MODEf_GET BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r_PRBS_CHK_ERR_CNT_BURST_MODEf_GET
#define TLB_RX_PRBS_CHK_CFG_GEN2r_PRBS_CHK_ERR_CNT_BURST_MODEf_SET BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r_PRBS_CHK_ERR_CNT_BURST_MODEf_SET
#define TLB_RX_PRBS_CHK_CFG_GEN2r_PRBS_BURST_LEN_CHK_ENf_GET BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r_PRBS_BURST_LEN_CHK_ENf_GET
#define TLB_RX_PRBS_CHK_CFG_GEN2r_PRBS_BURST_LEN_CHK_ENf_SET BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r_PRBS_BURST_LEN_CHK_ENf_SET
#define TLB_RX_PRBS_CHK_CFG_GEN2r_PRBS_CHK_EN_AUTO_MODEf_GET BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r_PRBS_CHK_EN_AUTO_MODEf_GET
#define TLB_RX_PRBS_CHK_CFG_GEN2r_PRBS_CHK_EN_AUTO_MODEf_SET BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r_PRBS_CHK_EN_AUTO_MODEf_SET
#define TLB_RX_PRBS_CHK_CFG_GEN2r_PRBS_CHK_MODEf_GET BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r_PRBS_CHK_MODEf_GET
#define TLB_RX_PRBS_CHK_CFG_GEN2r_PRBS_CHK_MODEf_SET BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r_PRBS_CHK_MODEf_SET
#define TLB_RX_PRBS_CHK_CFG_GEN2r_PRBS_CHK_INVf_GET BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r_PRBS_CHK_INVf_GET
#define TLB_RX_PRBS_CHK_CFG_GEN2r_PRBS_CHK_INVf_SET BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r_PRBS_CHK_INVf_SET
#define TLB_RX_PRBS_CHK_CFG_GEN2r_PRBS_CHK_MODE_SELf_GET BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r_PRBS_CHK_MODE_SELf_GET
#define TLB_RX_PRBS_CHK_CFG_GEN2r_PRBS_CHK_MODE_SELf_SET BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r_PRBS_CHK_MODE_SELf_SET
#define TLB_RX_PRBS_CHK_CFG_GEN2r_PRBS_CHK_ENf_GET BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r_PRBS_CHK_ENf_GET
#define TLB_RX_PRBS_CHK_CFG_GEN2r_PRBS_CHK_ENf_SET BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r_PRBS_CHK_ENf_SET
#define READ_TLB_RX_PRBS_CHK_CFG_GEN2r BCMI_TSCF_XGXS_READ_TLB_RX_PRBS_CHK_CFG_GEN2r
#define WRITE_TLB_RX_PRBS_CHK_CFG_GEN2r BCMI_TSCF_XGXS_WRITE_TLB_RX_PRBS_CHK_CFG_GEN2r
#define MODIFY_TLB_RX_PRBS_CHK_CFG_GEN2r BCMI_TSCF_XGXS_MODIFY_TLB_RX_PRBS_CHK_CFG_GEN2r
#define READLN_TLB_RX_PRBS_CHK_CFG_GEN2r BCMI_TSCF_XGXS_READLN_TLB_RX_PRBS_CHK_CFG_GEN2r
#define WRITELN_TLB_RX_PRBS_CHK_CFG_GEN2r BCMI_TSCF_XGXS_WRITELN_TLB_RX_PRBS_CHK_CFG_GEN2r
#define WRITEALL_TLB_RX_PRBS_CHK_CFG_GEN2r BCMI_TSCF_XGXS_WRITEALL_TLB_RX_PRBS_CHK_CFG_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_CFG_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TLB_RX_DIG_LPBK_CFG_GEN2
 * BLOCKS:   TLB_RX
 * REGADDR:  0xd162
 * DEVAD:    1
 * DESC:     Digital Loopback Control
 * RESETVAL: 0xa (10)
 * ACCESS:   R/W
 * FIELDS:
 *     DIG_LPBK_EN      TX to RX Parallel Loopback (Digital Loopback) Enable.1 => Loopback is Enabled.0 => Loopback is Disabled.
 *     DIG_LPBK_PD_MODE Digital Loopback Phase Detector Mode. For normal operating conditions keep it at the default value of 1'b1.1'b0 - swap inc/dec. 1'b1 - normal mode.
 *     DIG_LPBK_PD_BIAS_EN 1'b1 will enable PD inc bias mode where there will be inc generated every 16th clock cycle..1'b0 will disable the PD bias mode so inc/dec will be generated based on the PD output.
 */
#define BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_CFG_GEN2r (0x0001d162 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_CFG_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TLB_RX_DIG_LPBK_CFG_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_CFG_GEN2r_s {
	uint32_t v[1];
	uint32_t tlb_rx_dig_lpbk_cfg_gen2[1];
	uint32_t _tlb_rx_dig_lpbk_cfg_gen2;
} BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_CFG_GEN2r_t;

#define BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_CFG_GEN2r_CLR(r) (r).tlb_rx_dig_lpbk_cfg_gen2[0] = 0
#define BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_CFG_GEN2r_SET(r,d) (r).tlb_rx_dig_lpbk_cfg_gen2[0] = d
#define BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_CFG_GEN2r_GET(r) (r).tlb_rx_dig_lpbk_cfg_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_CFG_GEN2r_DIG_LPBK_PD_BIAS_ENf_GET(r) ((((r).tlb_rx_dig_lpbk_cfg_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_CFG_GEN2r_DIG_LPBK_PD_BIAS_ENf_SET(r,f) (r).tlb_rx_dig_lpbk_cfg_gen2[0]=(((r).tlb_rx_dig_lpbk_cfg_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_CFG_GEN2r_DIG_LPBK_PD_MODEf_GET(r) ((((r).tlb_rx_dig_lpbk_cfg_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_CFG_GEN2r_DIG_LPBK_PD_MODEf_SET(r,f) (r).tlb_rx_dig_lpbk_cfg_gen2[0]=(((r).tlb_rx_dig_lpbk_cfg_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_CFG_GEN2r_DIG_LPBK_ENf_GET(r) (((r).tlb_rx_dig_lpbk_cfg_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_CFG_GEN2r_DIG_LPBK_ENf_SET(r,f) (r).tlb_rx_dig_lpbk_cfg_gen2[0]=(((r).tlb_rx_dig_lpbk_cfg_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TLB_RX_DIG_LPBK_CFG_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TLB_RX_DIG_LPBK_CFG_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_CFG_GEN2r,(_r._tlb_rx_dig_lpbk_cfg_gen2))
#define BCMI_TSCF_XGXS_WRITE_TLB_RX_DIG_LPBK_CFG_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_CFG_GEN2r,(_r._tlb_rx_dig_lpbk_cfg_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TLB_RX_DIG_LPBK_CFG_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_CFG_GEN2r,(_r._tlb_rx_dig_lpbk_cfg_gen2))
#define BCMI_TSCF_XGXS_READLN_TLB_RX_DIG_LPBK_CFG_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_CFG_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_dig_lpbk_cfg_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TLB_RX_DIG_LPBK_CFG_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_CFG_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_dig_lpbk_cfg_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TLB_RX_DIG_LPBK_CFG_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_CFG_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_rx_dig_lpbk_cfg_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TLB_RX_DIG_LPBK_CFG_GEN2r BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_CFG_GEN2r
#define TLB_RX_DIG_LPBK_CFG_GEN2r_SIZE BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_CFG_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_CFG_GEN2r_t TLB_RX_DIG_LPBK_CFG_GEN2r_t;
#define TLB_RX_DIG_LPBK_CFG_GEN2r_CLR BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_CFG_GEN2r_CLR
#define TLB_RX_DIG_LPBK_CFG_GEN2r_SET BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_CFG_GEN2r_SET
#define TLB_RX_DIG_LPBK_CFG_GEN2r_GET BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_CFG_GEN2r_GET
#define TLB_RX_DIG_LPBK_CFG_GEN2r_DIG_LPBK_PD_BIAS_ENf_GET BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_CFG_GEN2r_DIG_LPBK_PD_BIAS_ENf_GET
#define TLB_RX_DIG_LPBK_CFG_GEN2r_DIG_LPBK_PD_BIAS_ENf_SET BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_CFG_GEN2r_DIG_LPBK_PD_BIAS_ENf_SET
#define TLB_RX_DIG_LPBK_CFG_GEN2r_DIG_LPBK_PD_MODEf_GET BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_CFG_GEN2r_DIG_LPBK_PD_MODEf_GET
#define TLB_RX_DIG_LPBK_CFG_GEN2r_DIG_LPBK_PD_MODEf_SET BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_CFG_GEN2r_DIG_LPBK_PD_MODEf_SET
#define TLB_RX_DIG_LPBK_CFG_GEN2r_DIG_LPBK_ENf_GET BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_CFG_GEN2r_DIG_LPBK_ENf_GET
#define TLB_RX_DIG_LPBK_CFG_GEN2r_DIG_LPBK_ENf_SET BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_CFG_GEN2r_DIG_LPBK_ENf_SET
#define READ_TLB_RX_DIG_LPBK_CFG_GEN2r BCMI_TSCF_XGXS_READ_TLB_RX_DIG_LPBK_CFG_GEN2r
#define WRITE_TLB_RX_DIG_LPBK_CFG_GEN2r BCMI_TSCF_XGXS_WRITE_TLB_RX_DIG_LPBK_CFG_GEN2r
#define MODIFY_TLB_RX_DIG_LPBK_CFG_GEN2r BCMI_TSCF_XGXS_MODIFY_TLB_RX_DIG_LPBK_CFG_GEN2r
#define READLN_TLB_RX_DIG_LPBK_CFG_GEN2r BCMI_TSCF_XGXS_READLN_TLB_RX_DIG_LPBK_CFG_GEN2r
#define WRITELN_TLB_RX_DIG_LPBK_CFG_GEN2r BCMI_TSCF_XGXS_WRITELN_TLB_RX_DIG_LPBK_CFG_GEN2r
#define WRITEALL_TLB_RX_DIG_LPBK_CFG_GEN2r BCMI_TSCF_XGXS_WRITEALL_TLB_RX_DIG_LPBK_CFG_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_CFG_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TLB_RX_MISC_CFG_GEN2
 * BLOCKS:   TLB_RX
 * REGADDR:  0xd163
 * DEVAD:    1
 * DESC:     TLB RX Misc. Control
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RX_PMD_DP_INVERT RX PMD Datapath Invert Control.When Enabled by writing to 1'b1, it will invert all the datapath bits of the logical lane.Recommended for use in case P and N pads are swapped on the PCB board.
 *     DBG_MASK_DIG_LPBK_EN Mask bit for dig_lpbk_en in the pmd_rx_lock equation. This is a debug register.1 => pmd_rx_lock will be forced to 1'b0 during digital loopback.0 => pmd_rx_lock will be forced to 1'b1 during digital loopback.
 *     TLB_RX_DIFF_DEC_EN 1'b1 will enable the Differential Decoder for pmd_rx_data. Only applicable to PCS RX data in OS1, 2 and 4 modes.Write it to 1'b0 for 1G OSR modes 16P5 and 20P625.
 */
#define BCMI_TSCF_XGXS_TLB_RX_MISC_CFG_GEN2r (0x0001d163 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TLB_RX_MISC_CFG_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TLB_RX_MISC_CFG_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TLB_RX_MISC_CFG_GEN2r_s {
	uint32_t v[1];
	uint32_t tlb_rx_misc_cfg_gen2[1];
	uint32_t _tlb_rx_misc_cfg_gen2;
} BCMI_TSCF_XGXS_TLB_RX_MISC_CFG_GEN2r_t;

#define BCMI_TSCF_XGXS_TLB_RX_MISC_CFG_GEN2r_CLR(r) (r).tlb_rx_misc_cfg_gen2[0] = 0
#define BCMI_TSCF_XGXS_TLB_RX_MISC_CFG_GEN2r_SET(r,d) (r).tlb_rx_misc_cfg_gen2[0] = d
#define BCMI_TSCF_XGXS_TLB_RX_MISC_CFG_GEN2r_GET(r) (r).tlb_rx_misc_cfg_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TLB_RX_MISC_CFG_GEN2r_TLB_RX_DIFF_DEC_ENf_GET(r) ((((r).tlb_rx_misc_cfg_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_TLB_RX_MISC_CFG_GEN2r_TLB_RX_DIFF_DEC_ENf_SET(r,f) (r).tlb_rx_misc_cfg_gen2[0]=(((r).tlb_rx_misc_cfg_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_TLB_RX_MISC_CFG_GEN2r_DBG_MASK_DIG_LPBK_ENf_GET(r) ((((r).tlb_rx_misc_cfg_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_TLB_RX_MISC_CFG_GEN2r_DBG_MASK_DIG_LPBK_ENf_SET(r,f) (r).tlb_rx_misc_cfg_gen2[0]=(((r).tlb_rx_misc_cfg_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_TLB_RX_MISC_CFG_GEN2r_RX_PMD_DP_INVERTf_GET(r) (((r).tlb_rx_misc_cfg_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_TLB_RX_MISC_CFG_GEN2r_RX_PMD_DP_INVERTf_SET(r,f) (r).tlb_rx_misc_cfg_gen2[0]=(((r).tlb_rx_misc_cfg_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TLB_RX_MISC_CFG_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TLB_RX_MISC_CFG_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TLB_RX_MISC_CFG_GEN2r,(_r._tlb_rx_misc_cfg_gen2))
#define BCMI_TSCF_XGXS_WRITE_TLB_RX_MISC_CFG_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_RX_MISC_CFG_GEN2r,(_r._tlb_rx_misc_cfg_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TLB_RX_MISC_CFG_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_RX_MISC_CFG_GEN2r,(_r._tlb_rx_misc_cfg_gen2))
#define BCMI_TSCF_XGXS_READLN_TLB_RX_MISC_CFG_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TLB_RX_MISC_CFG_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_misc_cfg_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TLB_RX_MISC_CFG_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_RX_MISC_CFG_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_misc_cfg_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TLB_RX_MISC_CFG_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_RX_MISC_CFG_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_rx_misc_cfg_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TLB_RX_MISC_CFG_GEN2r BCMI_TSCF_XGXS_TLB_RX_MISC_CFG_GEN2r
#define TLB_RX_MISC_CFG_GEN2r_SIZE BCMI_TSCF_XGXS_TLB_RX_MISC_CFG_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TLB_RX_MISC_CFG_GEN2r_t TLB_RX_MISC_CFG_GEN2r_t;
#define TLB_RX_MISC_CFG_GEN2r_CLR BCMI_TSCF_XGXS_TLB_RX_MISC_CFG_GEN2r_CLR
#define TLB_RX_MISC_CFG_GEN2r_SET BCMI_TSCF_XGXS_TLB_RX_MISC_CFG_GEN2r_SET
#define TLB_RX_MISC_CFG_GEN2r_GET BCMI_TSCF_XGXS_TLB_RX_MISC_CFG_GEN2r_GET
#define TLB_RX_MISC_CFG_GEN2r_TLB_RX_DIFF_DEC_ENf_GET BCMI_TSCF_XGXS_TLB_RX_MISC_CFG_GEN2r_TLB_RX_DIFF_DEC_ENf_GET
#define TLB_RX_MISC_CFG_GEN2r_TLB_RX_DIFF_DEC_ENf_SET BCMI_TSCF_XGXS_TLB_RX_MISC_CFG_GEN2r_TLB_RX_DIFF_DEC_ENf_SET
#define TLB_RX_MISC_CFG_GEN2r_DBG_MASK_DIG_LPBK_ENf_GET BCMI_TSCF_XGXS_TLB_RX_MISC_CFG_GEN2r_DBG_MASK_DIG_LPBK_ENf_GET
#define TLB_RX_MISC_CFG_GEN2r_DBG_MASK_DIG_LPBK_ENf_SET BCMI_TSCF_XGXS_TLB_RX_MISC_CFG_GEN2r_DBG_MASK_DIG_LPBK_ENf_SET
#define TLB_RX_MISC_CFG_GEN2r_RX_PMD_DP_INVERTf_GET BCMI_TSCF_XGXS_TLB_RX_MISC_CFG_GEN2r_RX_PMD_DP_INVERTf_GET
#define TLB_RX_MISC_CFG_GEN2r_RX_PMD_DP_INVERTf_SET BCMI_TSCF_XGXS_TLB_RX_MISC_CFG_GEN2r_RX_PMD_DP_INVERTf_SET
#define READ_TLB_RX_MISC_CFG_GEN2r BCMI_TSCF_XGXS_READ_TLB_RX_MISC_CFG_GEN2r
#define WRITE_TLB_RX_MISC_CFG_GEN2r BCMI_TSCF_XGXS_WRITE_TLB_RX_MISC_CFG_GEN2r
#define MODIFY_TLB_RX_MISC_CFG_GEN2r BCMI_TSCF_XGXS_MODIFY_TLB_RX_MISC_CFG_GEN2r
#define READLN_TLB_RX_MISC_CFG_GEN2r BCMI_TSCF_XGXS_READLN_TLB_RX_MISC_CFG_GEN2r
#define WRITELN_TLB_RX_MISC_CFG_GEN2r BCMI_TSCF_XGXS_WRITELN_TLB_RX_MISC_CFG_GEN2r
#define WRITEALL_TLB_RX_MISC_CFG_GEN2r BCMI_TSCF_XGXS_WRITEALL_TLB_RX_MISC_CFG_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TLB_RX_MISC_CFG_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2
 * BLOCKS:   TLB_RX
 * REGADDR:  0xd164
 * DEVAD:    1
 * DESC:     TLB RX PRBS Checker Enable Timer Control
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     PRBS_CHK_EN_TIMER_MODE prbs_chk_en timer mode.2'b0x => prbs_chk_en timer is disabled and PRBS checker mode is enabled as per prbs_chk_en register.2'b10 => use heartbeat_toggle_1us for the timer.2'b11 => use heartbeat_toggle_1ms for the timer.
 *     PRBS_CHK_EN_TIMEOUT PRBS timer timeout value.Valid range 0 to 31 which maps to 0 to 448. Should be programmed before enabling the PRBS checker in timer mode.
 */
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r (0x0001d164 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r_s {
	uint32_t v[1];
	uint32_t tlb_rx_prbs_chk_en_tmr_ctl_gen2[1];
	uint32_t _tlb_rx_prbs_chk_en_tmr_ctl_gen2;
} BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r_t;

#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r_CLR(r) (r).tlb_rx_prbs_chk_en_tmr_ctl_gen2[0] = 0
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r_SET(r,d) (r).tlb_rx_prbs_chk_en_tmr_ctl_gen2[0] = d
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r_GET(r) (r).tlb_rx_prbs_chk_en_tmr_ctl_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r_PRBS_CHK_EN_TIMEOUTf_GET(r) ((((r).tlb_rx_prbs_chk_en_tmr_ctl_gen2[0]) >> 8) & 0x1f)
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r_PRBS_CHK_EN_TIMEOUTf_SET(r,f) (r).tlb_rx_prbs_chk_en_tmr_ctl_gen2[0]=(((r).tlb_rx_prbs_chk_en_tmr_ctl_gen2[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8)) | (31 << (16 + 8))
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r_PRBS_CHK_EN_TIMER_MODEf_GET(r) (((r).tlb_rx_prbs_chk_en_tmr_ctl_gen2[0]) & 0x3)
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r_PRBS_CHK_EN_TIMER_MODEf_SET(r,f) (r).tlb_rx_prbs_chk_en_tmr_ctl_gen2[0]=(((r).tlb_rx_prbs_chk_en_tmr_ctl_gen2[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r,(_r._tlb_rx_prbs_chk_en_tmr_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITE_TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r,(_r._tlb_rx_prbs_chk_en_tmr_ctl_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r,(_r._tlb_rx_prbs_chk_en_tmr_ctl_gen2))
#define BCMI_TSCF_XGXS_READLN_TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_prbs_chk_en_tmr_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_prbs_chk_en_tmr_ctl_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_rx_prbs_chk_en_tmr_ctl_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r
#define TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r_SIZE BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r_t TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r_t;
#define TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r_CLR BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r_CLR
#define TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r_SET BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r_SET
#define TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r_GET BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r_GET
#define TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r_PRBS_CHK_EN_TIMEOUTf_GET BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r_PRBS_CHK_EN_TIMEOUTf_GET
#define TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r_PRBS_CHK_EN_TIMEOUTf_SET BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r_PRBS_CHK_EN_TIMEOUTf_SET
#define TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r_PRBS_CHK_EN_TIMER_MODEf_GET BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r_PRBS_CHK_EN_TIMER_MODEf_GET
#define TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r_PRBS_CHK_EN_TIMER_MODEf_SET BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r_PRBS_CHK_EN_TIMER_MODEf_SET
#define READ_TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r BCMI_TSCF_XGXS_READ_TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r
#define WRITE_TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r BCMI_TSCF_XGXS_WRITE_TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r
#define MODIFY_TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r BCMI_TSCF_XGXS_MODIFY_TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r
#define READLN_TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r BCMI_TSCF_XGXS_READLN_TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r
#define WRITELN_TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r BCMI_TSCF_XGXS_WRITELN_TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r
#define WRITEALL_TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r BCMI_TSCF_XGXS_WRITEALL_TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTL_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TLB_RX_DIG_LPBK_PD_STS_GEN2
 * BLOCKS:   TLB_RX
 * REGADDR:  0xd168
 * DEVAD:    1
 * DESC:     Digital Loopback Status
 * RESETVAL: 0x2 (2)
 * ACCESS:   R/O
 * FIELDS:
 *     DIG_LPBK_PD_LATE_IND 1 means dp_rclk20 is sampling data late so reduce the delay of the dp_rclk20 clock phase. This will result in RX PI phase step decrement.
 *     DIG_LPBK_PD_EARLY_IND 1 means dp_rclk20 is sampling data earlier so delay the dp_rclk20 clock phase. This will result in RX PI phase step increment.
 */
#define BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_PD_STS_GEN2r (0x0001d168 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_PD_STS_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TLB_RX_DIG_LPBK_PD_STS_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_PD_STS_GEN2r_s {
	uint32_t v[1];
	uint32_t tlb_rx_dig_lpbk_pd_sts_gen2[1];
	uint32_t _tlb_rx_dig_lpbk_pd_sts_gen2;
} BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_PD_STS_GEN2r_t;

#define BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_PD_STS_GEN2r_CLR(r) (r).tlb_rx_dig_lpbk_pd_sts_gen2[0] = 0
#define BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_PD_STS_GEN2r_SET(r,d) (r).tlb_rx_dig_lpbk_pd_sts_gen2[0] = d
#define BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_PD_STS_GEN2r_GET(r) (r).tlb_rx_dig_lpbk_pd_sts_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_PD_STS_GEN2r_DIG_LPBK_PD_EARLY_INDf_GET(r) ((((r).tlb_rx_dig_lpbk_pd_sts_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_PD_STS_GEN2r_DIG_LPBK_PD_EARLY_INDf_SET(r,f) (r).tlb_rx_dig_lpbk_pd_sts_gen2[0]=(((r).tlb_rx_dig_lpbk_pd_sts_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_PD_STS_GEN2r_DIG_LPBK_PD_LATE_INDf_GET(r) (((r).tlb_rx_dig_lpbk_pd_sts_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_PD_STS_GEN2r_DIG_LPBK_PD_LATE_INDf_SET(r,f) (r).tlb_rx_dig_lpbk_pd_sts_gen2[0]=(((r).tlb_rx_dig_lpbk_pd_sts_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TLB_RX_DIG_LPBK_PD_STS_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TLB_RX_DIG_LPBK_PD_STS_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_PD_STS_GEN2r,(_r._tlb_rx_dig_lpbk_pd_sts_gen2))
#define BCMI_TSCF_XGXS_WRITE_TLB_RX_DIG_LPBK_PD_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_PD_STS_GEN2r,(_r._tlb_rx_dig_lpbk_pd_sts_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TLB_RX_DIG_LPBK_PD_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_PD_STS_GEN2r,(_r._tlb_rx_dig_lpbk_pd_sts_gen2))
#define BCMI_TSCF_XGXS_READLN_TLB_RX_DIG_LPBK_PD_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_PD_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_dig_lpbk_pd_sts_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TLB_RX_DIG_LPBK_PD_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_PD_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_dig_lpbk_pd_sts_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TLB_RX_DIG_LPBK_PD_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_PD_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_rx_dig_lpbk_pd_sts_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TLB_RX_DIG_LPBK_PD_STS_GEN2r BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_PD_STS_GEN2r
#define TLB_RX_DIG_LPBK_PD_STS_GEN2r_SIZE BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_PD_STS_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_PD_STS_GEN2r_t TLB_RX_DIG_LPBK_PD_STS_GEN2r_t;
#define TLB_RX_DIG_LPBK_PD_STS_GEN2r_CLR BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_PD_STS_GEN2r_CLR
#define TLB_RX_DIG_LPBK_PD_STS_GEN2r_SET BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_PD_STS_GEN2r_SET
#define TLB_RX_DIG_LPBK_PD_STS_GEN2r_GET BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_PD_STS_GEN2r_GET
#define TLB_RX_DIG_LPBK_PD_STS_GEN2r_DIG_LPBK_PD_EARLY_INDf_GET BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_PD_STS_GEN2r_DIG_LPBK_PD_EARLY_INDf_GET
#define TLB_RX_DIG_LPBK_PD_STS_GEN2r_DIG_LPBK_PD_EARLY_INDf_SET BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_PD_STS_GEN2r_DIG_LPBK_PD_EARLY_INDf_SET
#define TLB_RX_DIG_LPBK_PD_STS_GEN2r_DIG_LPBK_PD_LATE_INDf_GET BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_PD_STS_GEN2r_DIG_LPBK_PD_LATE_INDf_GET
#define TLB_RX_DIG_LPBK_PD_STS_GEN2r_DIG_LPBK_PD_LATE_INDf_SET BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_PD_STS_GEN2r_DIG_LPBK_PD_LATE_INDf_SET
#define READ_TLB_RX_DIG_LPBK_PD_STS_GEN2r BCMI_TSCF_XGXS_READ_TLB_RX_DIG_LPBK_PD_STS_GEN2r
#define WRITE_TLB_RX_DIG_LPBK_PD_STS_GEN2r BCMI_TSCF_XGXS_WRITE_TLB_RX_DIG_LPBK_PD_STS_GEN2r
#define MODIFY_TLB_RX_DIG_LPBK_PD_STS_GEN2r BCMI_TSCF_XGXS_MODIFY_TLB_RX_DIG_LPBK_PD_STS_GEN2r
#define READLN_TLB_RX_DIG_LPBK_PD_STS_GEN2r BCMI_TSCF_XGXS_READLN_TLB_RX_DIG_LPBK_PD_STS_GEN2r
#define WRITELN_TLB_RX_DIG_LPBK_PD_STS_GEN2r BCMI_TSCF_XGXS_WRITELN_TLB_RX_DIG_LPBK_PD_STS_GEN2r
#define WRITEALL_TLB_RX_DIG_LPBK_PD_STS_GEN2r BCMI_TSCF_XGXS_WRITEALL_TLB_RX_DIG_LPBK_PD_STS_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TLB_RX_DIG_LPBK_PD_STS_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TLB_RX_PRBS_CHK_LOCK_STS_GEN2
 * BLOCKS:   TLB_RX
 * REGADDR:  0xd169
 * DEVAD:    1
 * DESC:     PRBS Checker LOCK Status
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     PRBS_CHK_LOCK    PRBS Checker LOCK Indication. This is a live indication of the status of the PRBS Checker state machine.1 => PRBS Checker is in LOCKED state.0 => PRBS Checker is out of LOCK state and state machine is searching for a LOCK.
 */
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_LOCK_STS_GEN2r (0x0001d169 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_LOCK_STS_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TLB_RX_PRBS_CHK_LOCK_STS_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_LOCK_STS_GEN2r_s {
	uint32_t v[1];
	uint32_t tlb_rx_prbs_chk_lock_sts_gen2[1];
	uint32_t _tlb_rx_prbs_chk_lock_sts_gen2;
} BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_LOCK_STS_GEN2r_t;

#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_LOCK_STS_GEN2r_CLR(r) (r).tlb_rx_prbs_chk_lock_sts_gen2[0] = 0
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_LOCK_STS_GEN2r_SET(r,d) (r).tlb_rx_prbs_chk_lock_sts_gen2[0] = d
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_LOCK_STS_GEN2r_GET(r) (r).tlb_rx_prbs_chk_lock_sts_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_LOCK_STS_GEN2r_PRBS_CHK_LOCKf_GET(r) (((r).tlb_rx_prbs_chk_lock_sts_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_LOCK_STS_GEN2r_PRBS_CHK_LOCKf_SET(r,f) (r).tlb_rx_prbs_chk_lock_sts_gen2[0]=(((r).tlb_rx_prbs_chk_lock_sts_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TLB_RX_PRBS_CHK_LOCK_STS_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TLB_RX_PRBS_CHK_LOCK_STS_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_LOCK_STS_GEN2r,(_r._tlb_rx_prbs_chk_lock_sts_gen2))
#define BCMI_TSCF_XGXS_WRITE_TLB_RX_PRBS_CHK_LOCK_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_LOCK_STS_GEN2r,(_r._tlb_rx_prbs_chk_lock_sts_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TLB_RX_PRBS_CHK_LOCK_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_LOCK_STS_GEN2r,(_r._tlb_rx_prbs_chk_lock_sts_gen2))
#define BCMI_TSCF_XGXS_READLN_TLB_RX_PRBS_CHK_LOCK_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_LOCK_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_prbs_chk_lock_sts_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TLB_RX_PRBS_CHK_LOCK_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_LOCK_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_prbs_chk_lock_sts_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TLB_RX_PRBS_CHK_LOCK_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_LOCK_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_rx_prbs_chk_lock_sts_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TLB_RX_PRBS_CHK_LOCK_STS_GEN2r BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_LOCK_STS_GEN2r
#define TLB_RX_PRBS_CHK_LOCK_STS_GEN2r_SIZE BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_LOCK_STS_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_LOCK_STS_GEN2r_t TLB_RX_PRBS_CHK_LOCK_STS_GEN2r_t;
#define TLB_RX_PRBS_CHK_LOCK_STS_GEN2r_CLR BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_LOCK_STS_GEN2r_CLR
#define TLB_RX_PRBS_CHK_LOCK_STS_GEN2r_SET BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_LOCK_STS_GEN2r_SET
#define TLB_RX_PRBS_CHK_LOCK_STS_GEN2r_GET BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_LOCK_STS_GEN2r_GET
#define TLB_RX_PRBS_CHK_LOCK_STS_GEN2r_PRBS_CHK_LOCKf_GET BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_LOCK_STS_GEN2r_PRBS_CHK_LOCKf_GET
#define TLB_RX_PRBS_CHK_LOCK_STS_GEN2r_PRBS_CHK_LOCKf_SET BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_LOCK_STS_GEN2r_PRBS_CHK_LOCKf_SET
#define READ_TLB_RX_PRBS_CHK_LOCK_STS_GEN2r BCMI_TSCF_XGXS_READ_TLB_RX_PRBS_CHK_LOCK_STS_GEN2r
#define WRITE_TLB_RX_PRBS_CHK_LOCK_STS_GEN2r BCMI_TSCF_XGXS_WRITE_TLB_RX_PRBS_CHK_LOCK_STS_GEN2r
#define MODIFY_TLB_RX_PRBS_CHK_LOCK_STS_GEN2r BCMI_TSCF_XGXS_MODIFY_TLB_RX_PRBS_CHK_LOCK_STS_GEN2r
#define READLN_TLB_RX_PRBS_CHK_LOCK_STS_GEN2r BCMI_TSCF_XGXS_READLN_TLB_RX_PRBS_CHK_LOCK_STS_GEN2r
#define WRITELN_TLB_RX_PRBS_CHK_LOCK_STS_GEN2r BCMI_TSCF_XGXS_WRITELN_TLB_RX_PRBS_CHK_LOCK_STS_GEN2r
#define WRITEALL_TLB_RX_PRBS_CHK_LOCK_STS_GEN2r BCMI_TSCF_XGXS_WRITEALL_TLB_RX_PRBS_CHK_LOCK_STS_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_LOCK_STS_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2
 * BLOCKS:   TLB_RX
 * REGADDR:  0xd16a
 * DEVAD:    1
 * DESC:     PRBS Checker Error Counter MSB Status
 * RESETVAL: 0x8000 (32768)
 * ACCESS:   R/O
 * FIELDS:
 *     PRBS_CHK_ERR_CNT_MSB 15 bits MSB portion of PRBS Checker Error Counter Status Register. It is a clear on read register.Once MSB bits [30:16] of the counter are read then LSB bits [15:0] of the error counter is loadedinto a holding register and internal PRBS error counter's all bits are cleared to 0s(or if there are any error in that particular clock cycle then that will be loaded).MSB portion must be read first before reading the LSB portion of the error counter.
 *     PRBS_CHK_LOCK_LOST_LH PRBS Checker LOCK_LOST Latch High Indication. This register captures the 1->0 transition on theprbs_chk_lock live status register and keep it latched until read. This is a clear on read status registers.
 */
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r (0x0001d16a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r_s {
	uint32_t v[1];
	uint32_t tlb_rx_prbs_chk_err_cnt_msb_sts_gen2[1];
	uint32_t _tlb_rx_prbs_chk_err_cnt_msb_sts_gen2;
} BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r_t;

#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r_CLR(r) (r).tlb_rx_prbs_chk_err_cnt_msb_sts_gen2[0] = 0
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r_SET(r,d) (r).tlb_rx_prbs_chk_err_cnt_msb_sts_gen2[0] = d
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r_GET(r) (r).tlb_rx_prbs_chk_err_cnt_msb_sts_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r_PRBS_CHK_LOCK_LOST_LHf_GET(r) ((((r).tlb_rx_prbs_chk_err_cnt_msb_sts_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r_PRBS_CHK_LOCK_LOST_LHf_SET(r,f) (r).tlb_rx_prbs_chk_err_cnt_msb_sts_gen2[0]=(((r).tlb_rx_prbs_chk_err_cnt_msb_sts_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r_PRBS_CHK_ERR_CNT_MSBf_GET(r) (((r).tlb_rx_prbs_chk_err_cnt_msb_sts_gen2[0]) & 0x7fff)
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r_PRBS_CHK_ERR_CNT_MSBf_SET(r,f) (r).tlb_rx_prbs_chk_err_cnt_msb_sts_gen2[0]=(((r).tlb_rx_prbs_chk_err_cnt_msb_sts_gen2[0] & ~((uint32_t)0x7fff)) | (((uint32_t)f) & 0x7fff)) | (0x7fff << 16)

/*
 * These macros can be used to access TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r,(_r._tlb_rx_prbs_chk_err_cnt_msb_sts_gen2))
#define BCMI_TSCF_XGXS_WRITE_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r,(_r._tlb_rx_prbs_chk_err_cnt_msb_sts_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r,(_r._tlb_rx_prbs_chk_err_cnt_msb_sts_gen2))
#define BCMI_TSCF_XGXS_READLN_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_prbs_chk_err_cnt_msb_sts_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_prbs_chk_err_cnt_msb_sts_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_rx_prbs_chk_err_cnt_msb_sts_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r
#define TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r_SIZE BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r_t TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r_t;
#define TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r_CLR BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r_CLR
#define TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r_SET BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r_SET
#define TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r_GET BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r_GET
#define TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r_PRBS_CHK_LOCK_LOST_LHf_GET BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r_PRBS_CHK_LOCK_LOST_LHf_GET
#define TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r_PRBS_CHK_LOCK_LOST_LHf_SET BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r_PRBS_CHK_LOCK_LOST_LHf_SET
#define TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r_PRBS_CHK_ERR_CNT_MSBf_GET BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r_PRBS_CHK_ERR_CNT_MSBf_GET
#define TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r_PRBS_CHK_ERR_CNT_MSBf_SET BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r_PRBS_CHK_ERR_CNT_MSBf_SET
#define READ_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r BCMI_TSCF_XGXS_READ_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r
#define WRITE_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r BCMI_TSCF_XGXS_WRITE_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r
#define MODIFY_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r BCMI_TSCF_XGXS_MODIFY_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r
#define READLN_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r BCMI_TSCF_XGXS_READLN_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r
#define WRITELN_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r BCMI_TSCF_XGXS_WRITELN_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r
#define WRITEALL_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r BCMI_TSCF_XGXS_WRITEALL_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS_GEN2
 * BLOCKS:   TLB_RX
 * REGADDR:  0xd16b
 * DEVAD:    1
 * DESC:     PRBS Checker Error Counter LSB Status
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     PRBS_CHK_ERR_CNT_LSB 16 bits LSB portion of PRBS Checker Error Counter Status Register. This register indicatesthe value in the holding register when MSB portion [30:16] of the error counter are read.MSB portion must be read first before reading the LSB portion of the error counter.
 */
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS_GEN2r (0x0001d16b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS_GEN2r_s {
	uint32_t v[1];
	uint32_t tlb_rx_prbs_chk_err_cnt_lsb_sts_gen2[1];
	uint32_t _tlb_rx_prbs_chk_err_cnt_lsb_sts_gen2;
} BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS_GEN2r_t;

#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS_GEN2r_CLR(r) (r).tlb_rx_prbs_chk_err_cnt_lsb_sts_gen2[0] = 0
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS_GEN2r_SET(r,d) (r).tlb_rx_prbs_chk_err_cnt_lsb_sts_gen2[0] = d
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS_GEN2r_GET(r) (r).tlb_rx_prbs_chk_err_cnt_lsb_sts_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS_GEN2r_PRBS_CHK_ERR_CNT_LSBf_GET(r) (((r).tlb_rx_prbs_chk_err_cnt_lsb_sts_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS_GEN2r_PRBS_CHK_ERR_CNT_LSBf_SET(r,f) (r).tlb_rx_prbs_chk_err_cnt_lsb_sts_gen2[0]=(((r).tlb_rx_prbs_chk_err_cnt_lsb_sts_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS_GEN2r,(_r._tlb_rx_prbs_chk_err_cnt_lsb_sts_gen2))
#define BCMI_TSCF_XGXS_WRITE_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS_GEN2r,(_r._tlb_rx_prbs_chk_err_cnt_lsb_sts_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS_GEN2r,(_r._tlb_rx_prbs_chk_err_cnt_lsb_sts_gen2))
#define BCMI_TSCF_XGXS_READLN_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_prbs_chk_err_cnt_lsb_sts_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_prbs_chk_err_cnt_lsb_sts_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_rx_prbs_chk_err_cnt_lsb_sts_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS_GEN2r BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS_GEN2r
#define TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS_GEN2r_SIZE BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS_GEN2r_t TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS_GEN2r_t;
#define TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS_GEN2r_CLR BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS_GEN2r_CLR
#define TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS_GEN2r_SET BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS_GEN2r_SET
#define TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS_GEN2r_GET BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS_GEN2r_GET
#define TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS_GEN2r_PRBS_CHK_ERR_CNT_LSBf_GET BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS_GEN2r_PRBS_CHK_ERR_CNT_LSBf_GET
#define TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS_GEN2r_PRBS_CHK_ERR_CNT_LSBf_SET BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS_GEN2r_PRBS_CHK_ERR_CNT_LSBf_SET
#define READ_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS_GEN2r BCMI_TSCF_XGXS_READ_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS_GEN2r
#define WRITE_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS_GEN2r BCMI_TSCF_XGXS_WRITE_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS_GEN2r
#define MODIFY_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS_GEN2r BCMI_TSCF_XGXS_MODIFY_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS_GEN2r
#define READLN_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS_GEN2r BCMI_TSCF_XGXS_READLN_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS_GEN2r
#define WRITELN_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS_GEN2r BCMI_TSCF_XGXS_WRITELN_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS_GEN2r
#define WRITEALL_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS_GEN2r BCMI_TSCF_XGXS_WRITEALL_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TLB_RX_PMD_RX_LOCK_STS_GEN2
 * BLOCKS:   TLB_RX
 * REGADDR:  0xd16c
 * DEVAD:    1
 * DESC:     PMD RX LOCK Status
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     PMD_RX_LOCK      PMD RX LOCK Indication. This is a live indication of the status of the pmd_rx_lock output port.1 => PMD is in LOCKED state and RX PCS data should have acceptable BER.0 => PMD is not LOCKED yet.
 *     PMD_RX_LOCK_CHANGE Set to 1'b1 when change/transition on PMD RX LOCK. This is a sticky bit and cleared upon read.
 */
#define BCMI_TSCF_XGXS_TLB_RX_PMD_RX_LOCK_STS_GEN2r (0x0001d16c | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TLB_RX_PMD_RX_LOCK_STS_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TLB_RX_PMD_RX_LOCK_STS_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TLB_RX_PMD_RX_LOCK_STS_GEN2r_s {
	uint32_t v[1];
	uint32_t tlb_rx_pmd_rx_lock_sts_gen2[1];
	uint32_t _tlb_rx_pmd_rx_lock_sts_gen2;
} BCMI_TSCF_XGXS_TLB_RX_PMD_RX_LOCK_STS_GEN2r_t;

#define BCMI_TSCF_XGXS_TLB_RX_PMD_RX_LOCK_STS_GEN2r_CLR(r) (r).tlb_rx_pmd_rx_lock_sts_gen2[0] = 0
#define BCMI_TSCF_XGXS_TLB_RX_PMD_RX_LOCK_STS_GEN2r_SET(r,d) (r).tlb_rx_pmd_rx_lock_sts_gen2[0] = d
#define BCMI_TSCF_XGXS_TLB_RX_PMD_RX_LOCK_STS_GEN2r_GET(r) (r).tlb_rx_pmd_rx_lock_sts_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TLB_RX_PMD_RX_LOCK_STS_GEN2r_PMD_RX_LOCK_CHANGEf_GET(r) ((((r).tlb_rx_pmd_rx_lock_sts_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_TLB_RX_PMD_RX_LOCK_STS_GEN2r_PMD_RX_LOCK_CHANGEf_SET(r,f) (r).tlb_rx_pmd_rx_lock_sts_gen2[0]=(((r).tlb_rx_pmd_rx_lock_sts_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_TLB_RX_PMD_RX_LOCK_STS_GEN2r_PMD_RX_LOCKf_GET(r) (((r).tlb_rx_pmd_rx_lock_sts_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_TLB_RX_PMD_RX_LOCK_STS_GEN2r_PMD_RX_LOCKf_SET(r,f) (r).tlb_rx_pmd_rx_lock_sts_gen2[0]=(((r).tlb_rx_pmd_rx_lock_sts_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TLB_RX_PMD_RX_LOCK_STS_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TLB_RX_PMD_RX_LOCK_STS_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TLB_RX_PMD_RX_LOCK_STS_GEN2r,(_r._tlb_rx_pmd_rx_lock_sts_gen2))
#define BCMI_TSCF_XGXS_WRITE_TLB_RX_PMD_RX_LOCK_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_RX_PMD_RX_LOCK_STS_GEN2r,(_r._tlb_rx_pmd_rx_lock_sts_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TLB_RX_PMD_RX_LOCK_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_RX_PMD_RX_LOCK_STS_GEN2r,(_r._tlb_rx_pmd_rx_lock_sts_gen2))
#define BCMI_TSCF_XGXS_READLN_TLB_RX_PMD_RX_LOCK_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TLB_RX_PMD_RX_LOCK_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_pmd_rx_lock_sts_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TLB_RX_PMD_RX_LOCK_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_RX_PMD_RX_LOCK_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_pmd_rx_lock_sts_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TLB_RX_PMD_RX_LOCK_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_RX_PMD_RX_LOCK_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_rx_pmd_rx_lock_sts_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TLB_RX_PMD_RX_LOCK_STS_GEN2r BCMI_TSCF_XGXS_TLB_RX_PMD_RX_LOCK_STS_GEN2r
#define TLB_RX_PMD_RX_LOCK_STS_GEN2r_SIZE BCMI_TSCF_XGXS_TLB_RX_PMD_RX_LOCK_STS_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TLB_RX_PMD_RX_LOCK_STS_GEN2r_t TLB_RX_PMD_RX_LOCK_STS_GEN2r_t;
#define TLB_RX_PMD_RX_LOCK_STS_GEN2r_CLR BCMI_TSCF_XGXS_TLB_RX_PMD_RX_LOCK_STS_GEN2r_CLR
#define TLB_RX_PMD_RX_LOCK_STS_GEN2r_SET BCMI_TSCF_XGXS_TLB_RX_PMD_RX_LOCK_STS_GEN2r_SET
#define TLB_RX_PMD_RX_LOCK_STS_GEN2r_GET BCMI_TSCF_XGXS_TLB_RX_PMD_RX_LOCK_STS_GEN2r_GET
#define TLB_RX_PMD_RX_LOCK_STS_GEN2r_PMD_RX_LOCK_CHANGEf_GET BCMI_TSCF_XGXS_TLB_RX_PMD_RX_LOCK_STS_GEN2r_PMD_RX_LOCK_CHANGEf_GET
#define TLB_RX_PMD_RX_LOCK_STS_GEN2r_PMD_RX_LOCK_CHANGEf_SET BCMI_TSCF_XGXS_TLB_RX_PMD_RX_LOCK_STS_GEN2r_PMD_RX_LOCK_CHANGEf_SET
#define TLB_RX_PMD_RX_LOCK_STS_GEN2r_PMD_RX_LOCKf_GET BCMI_TSCF_XGXS_TLB_RX_PMD_RX_LOCK_STS_GEN2r_PMD_RX_LOCKf_GET
#define TLB_RX_PMD_RX_LOCK_STS_GEN2r_PMD_RX_LOCKf_SET BCMI_TSCF_XGXS_TLB_RX_PMD_RX_LOCK_STS_GEN2r_PMD_RX_LOCKf_SET
#define READ_TLB_RX_PMD_RX_LOCK_STS_GEN2r BCMI_TSCF_XGXS_READ_TLB_RX_PMD_RX_LOCK_STS_GEN2r
#define WRITE_TLB_RX_PMD_RX_LOCK_STS_GEN2r BCMI_TSCF_XGXS_WRITE_TLB_RX_PMD_RX_LOCK_STS_GEN2r
#define MODIFY_TLB_RX_PMD_RX_LOCK_STS_GEN2r BCMI_TSCF_XGXS_MODIFY_TLB_RX_PMD_RX_LOCK_STS_GEN2r
#define READLN_TLB_RX_PMD_RX_LOCK_STS_GEN2r BCMI_TSCF_XGXS_READLN_TLB_RX_PMD_RX_LOCK_STS_GEN2r
#define WRITELN_TLB_RX_PMD_RX_LOCK_STS_GEN2r BCMI_TSCF_XGXS_WRITELN_TLB_RX_PMD_RX_LOCK_STS_GEN2r
#define WRITEALL_TLB_RX_PMD_RX_LOCK_STS_GEN2r BCMI_TSCF_XGXS_WRITEALL_TLB_RX_PMD_RX_LOCK_STS_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TLB_RX_PMD_RX_LOCK_STS_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TLB_RX_PRBS_BURST_ERR_LEN_STS_GEN2
 * BLOCKS:   TLB_RX
 * REGADDR:  0xd16d
 * DEVAD:    1
 * DESC:     PRBS Burst Error Length Status
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     PRBS_BURST_ERR_LENGTH_STATUS PRBS burst error length count. This the live indication of the live status of the PRBS burst error length and max at 6'd63. This register is cleared upon read.This register is only supported for OSR modes OS1, OS2 and OS4.
 */
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STS_GEN2r (0x0001d16d | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STS_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TLB_RX_PRBS_BURST_ERR_LEN_STS_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STS_GEN2r_s {
	uint32_t v[1];
	uint32_t tlb_rx_prbs_burst_err_len_sts_gen2[1];
	uint32_t _tlb_rx_prbs_burst_err_len_sts_gen2;
} BCMI_TSCF_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STS_GEN2r_t;

#define BCMI_TSCF_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STS_GEN2r_CLR(r) (r).tlb_rx_prbs_burst_err_len_sts_gen2[0] = 0
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STS_GEN2r_SET(r,d) (r).tlb_rx_prbs_burst_err_len_sts_gen2[0] = d
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STS_GEN2r_GET(r) (r).tlb_rx_prbs_burst_err_len_sts_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STS_GEN2r_PRBS_BURST_ERR_LENGTH_STATUSf_GET(r) (((r).tlb_rx_prbs_burst_err_len_sts_gen2[0]) & 0x3f)
#define BCMI_TSCF_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STS_GEN2r_PRBS_BURST_ERR_LENGTH_STATUSf_SET(r,f) (r).tlb_rx_prbs_burst_err_len_sts_gen2[0]=(((r).tlb_rx_prbs_burst_err_len_sts_gen2[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access TLB_RX_PRBS_BURST_ERR_LEN_STS_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TLB_RX_PRBS_BURST_ERR_LEN_STS_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STS_GEN2r,(_r._tlb_rx_prbs_burst_err_len_sts_gen2))
#define BCMI_TSCF_XGXS_WRITE_TLB_RX_PRBS_BURST_ERR_LEN_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STS_GEN2r,(_r._tlb_rx_prbs_burst_err_len_sts_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TLB_RX_PRBS_BURST_ERR_LEN_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STS_GEN2r,(_r._tlb_rx_prbs_burst_err_len_sts_gen2))
#define BCMI_TSCF_XGXS_READLN_TLB_RX_PRBS_BURST_ERR_LEN_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_prbs_burst_err_len_sts_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TLB_RX_PRBS_BURST_ERR_LEN_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_prbs_burst_err_len_sts_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TLB_RX_PRBS_BURST_ERR_LEN_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_rx_prbs_burst_err_len_sts_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TLB_RX_PRBS_BURST_ERR_LEN_STS_GEN2r BCMI_TSCF_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STS_GEN2r
#define TLB_RX_PRBS_BURST_ERR_LEN_STS_GEN2r_SIZE BCMI_TSCF_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STS_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STS_GEN2r_t TLB_RX_PRBS_BURST_ERR_LEN_STS_GEN2r_t;
#define TLB_RX_PRBS_BURST_ERR_LEN_STS_GEN2r_CLR BCMI_TSCF_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STS_GEN2r_CLR
#define TLB_RX_PRBS_BURST_ERR_LEN_STS_GEN2r_SET BCMI_TSCF_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STS_GEN2r_SET
#define TLB_RX_PRBS_BURST_ERR_LEN_STS_GEN2r_GET BCMI_TSCF_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STS_GEN2r_GET
#define TLB_RX_PRBS_BURST_ERR_LEN_STS_GEN2r_PRBS_BURST_ERR_LENGTH_STATUSf_GET BCMI_TSCF_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STS_GEN2r_PRBS_BURST_ERR_LENGTH_STATUSf_GET
#define TLB_RX_PRBS_BURST_ERR_LEN_STS_GEN2r_PRBS_BURST_ERR_LENGTH_STATUSf_SET BCMI_TSCF_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STS_GEN2r_PRBS_BURST_ERR_LENGTH_STATUSf_SET
#define READ_TLB_RX_PRBS_BURST_ERR_LEN_STS_GEN2r BCMI_TSCF_XGXS_READ_TLB_RX_PRBS_BURST_ERR_LEN_STS_GEN2r
#define WRITE_TLB_RX_PRBS_BURST_ERR_LEN_STS_GEN2r BCMI_TSCF_XGXS_WRITE_TLB_RX_PRBS_BURST_ERR_LEN_STS_GEN2r
#define MODIFY_TLB_RX_PRBS_BURST_ERR_LEN_STS_GEN2r BCMI_TSCF_XGXS_MODIFY_TLB_RX_PRBS_BURST_ERR_LEN_STS_GEN2r
#define READLN_TLB_RX_PRBS_BURST_ERR_LEN_STS_GEN2r BCMI_TSCF_XGXS_READLN_TLB_RX_PRBS_BURST_ERR_LEN_STS_GEN2r
#define WRITELN_TLB_RX_PRBS_BURST_ERR_LEN_STS_GEN2r BCMI_TSCF_XGXS_WRITELN_TLB_RX_PRBS_BURST_ERR_LEN_STS_GEN2r
#define WRITEALL_TLB_RX_PRBS_BURST_ERR_LEN_STS_GEN2r BCMI_TSCF_XGXS_WRITEALL_TLB_RX_PRBS_BURST_ERR_LEN_STS_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STS_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS_GEN2
 * BLOCKS:   TLB_RX
 * REGADDR:  0xd16e
 * DEVAD:    1
 * DESC:     PRBS Burst Error Maximum Length Status
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MAX_PRBS_BURST_ERR_LENGTH_STATUS PRBS burst error max length count. This the status of the PRBS burst error max length and max at 6'd63. This register is cleared upon read.This register is only supported for OSR modes OS1, OS2 and OS4.
 */
#define BCMI_TSCF_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS_GEN2r (0x0001d16e | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS_GEN2r_s {
	uint32_t v[1];
	uint32_t tlb_rx_max_prbs_burst_err_len_sts_gen2[1];
	uint32_t _tlb_rx_max_prbs_burst_err_len_sts_gen2;
} BCMI_TSCF_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS_GEN2r_t;

#define BCMI_TSCF_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS_GEN2r_CLR(r) (r).tlb_rx_max_prbs_burst_err_len_sts_gen2[0] = 0
#define BCMI_TSCF_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS_GEN2r_SET(r,d) (r).tlb_rx_max_prbs_burst_err_len_sts_gen2[0] = d
#define BCMI_TSCF_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS_GEN2r_GET(r) (r).tlb_rx_max_prbs_burst_err_len_sts_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS_GEN2r_MAX_PRBS_BURST_ERR_LENGTH_STATUSf_GET(r) (((r).tlb_rx_max_prbs_burst_err_len_sts_gen2[0]) & 0x3f)
#define BCMI_TSCF_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS_GEN2r_MAX_PRBS_BURST_ERR_LENGTH_STATUSf_SET(r,f) (r).tlb_rx_max_prbs_burst_err_len_sts_gen2[0]=(((r).tlb_rx_max_prbs_burst_err_len_sts_gen2[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS_GEN2r,(_r._tlb_rx_max_prbs_burst_err_len_sts_gen2))
#define BCMI_TSCF_XGXS_WRITE_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS_GEN2r,(_r._tlb_rx_max_prbs_burst_err_len_sts_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS_GEN2r,(_r._tlb_rx_max_prbs_burst_err_len_sts_gen2))
#define BCMI_TSCF_XGXS_READLN_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_max_prbs_burst_err_len_sts_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_max_prbs_burst_err_len_sts_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_rx_max_prbs_burst_err_len_sts_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS_GEN2r BCMI_TSCF_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS_GEN2r
#define TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS_GEN2r_SIZE BCMI_TSCF_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS_GEN2r_t TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS_GEN2r_t;
#define TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS_GEN2r_CLR BCMI_TSCF_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS_GEN2r_CLR
#define TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS_GEN2r_SET BCMI_TSCF_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS_GEN2r_SET
#define TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS_GEN2r_GET BCMI_TSCF_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS_GEN2r_GET
#define TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS_GEN2r_MAX_PRBS_BURST_ERR_LENGTH_STATUSf_GET BCMI_TSCF_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS_GEN2r_MAX_PRBS_BURST_ERR_LENGTH_STATUSf_GET
#define TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS_GEN2r_MAX_PRBS_BURST_ERR_LENGTH_STATUSf_SET BCMI_TSCF_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS_GEN2r_MAX_PRBS_BURST_ERR_LENGTH_STATUSf_SET
#define READ_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS_GEN2r BCMI_TSCF_XGXS_READ_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS_GEN2r
#define WRITE_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS_GEN2r BCMI_TSCF_XGXS_WRITE_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS_GEN2r
#define MODIFY_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS_GEN2r BCMI_TSCF_XGXS_MODIFY_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS_GEN2r
#define READLN_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS_GEN2r BCMI_TSCF_XGXS_READLN_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS_GEN2r
#define WRITELN_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS_GEN2r BCMI_TSCF_XGXS_WRITELN_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS_GEN2r
#define WRITEALL_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS_GEN2r BCMI_TSCF_XGXS_WRITEALL_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TLB_TX_PATT_GEN_CFG_GEN2
 * BLOCKS:   TLB_TX
 * REGADDR:  0xd170
 * DEVAD:    1
 * DESC:     Pattern Generator Control
 * RESETVAL: 0xb000 (45056)
 * ACCESS:   R/W
 * FIELDS:
 *     PATT_GEN_EN      Fixed pattern generator enable.1 => enable  the fixed pattern generator.0 => disable the fixed pattern generator.
 *     PATT_GEN_STOP_POS Valid values are 11 to 0. Defines the stop  position of the pattern in 20 bit chunks.This register value should be less than or equal to rg_patt_gen_start_pos.11 means stop at bit  220,10 means stop at bit  200, ...,0 means stop at bit    0so stop  bit is (rg_patt_gen_stop_pos*20).
 *     PATT_GEN_START_POS Valid values are 11 to 0. Defines the start position of the pattern in 20 bit chunks.11 means start at bit 239,10 means start at bit 219, ...,0 means start at bit  19so start bit is (rg_patt_gen_start_pos*20 + 19).
 */
#define BCMI_TSCF_XGXS_TLB_TX_PATT_GEN_CFG_GEN2r (0x0001d170 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TLB_TX_PATT_GEN_CFG_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TLB_TX_PATT_GEN_CFG_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TLB_TX_PATT_GEN_CFG_GEN2r_s {
	uint32_t v[1];
	uint32_t tlb_tx_patt_gen_cfg_gen2[1];
	uint32_t _tlb_tx_patt_gen_cfg_gen2;
} BCMI_TSCF_XGXS_TLB_TX_PATT_GEN_CFG_GEN2r_t;

#define BCMI_TSCF_XGXS_TLB_TX_PATT_GEN_CFG_GEN2r_CLR(r) (r).tlb_tx_patt_gen_cfg_gen2[0] = 0
#define BCMI_TSCF_XGXS_TLB_TX_PATT_GEN_CFG_GEN2r_SET(r,d) (r).tlb_tx_patt_gen_cfg_gen2[0] = d
#define BCMI_TSCF_XGXS_TLB_TX_PATT_GEN_CFG_GEN2r_GET(r) (r).tlb_tx_patt_gen_cfg_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TLB_TX_PATT_GEN_CFG_GEN2r_PATT_GEN_START_POSf_GET(r) ((((r).tlb_tx_patt_gen_cfg_gen2[0]) >> 12) & 0xf)
#define BCMI_TSCF_XGXS_TLB_TX_PATT_GEN_CFG_GEN2r_PATT_GEN_START_POSf_SET(r,f) (r).tlb_tx_patt_gen_cfg_gen2[0]=(((r).tlb_tx_patt_gen_cfg_gen2[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_TSCF_XGXS_TLB_TX_PATT_GEN_CFG_GEN2r_PATT_GEN_STOP_POSf_GET(r) ((((r).tlb_tx_patt_gen_cfg_gen2[0]) >> 8) & 0xf)
#define BCMI_TSCF_XGXS_TLB_TX_PATT_GEN_CFG_GEN2r_PATT_GEN_STOP_POSf_SET(r,f) (r).tlb_tx_patt_gen_cfg_gen2[0]=(((r).tlb_tx_patt_gen_cfg_gen2[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_TSCF_XGXS_TLB_TX_PATT_GEN_CFG_GEN2r_PATT_GEN_ENf_GET(r) (((r).tlb_tx_patt_gen_cfg_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_TLB_TX_PATT_GEN_CFG_GEN2r_PATT_GEN_ENf_SET(r,f) (r).tlb_tx_patt_gen_cfg_gen2[0]=(((r).tlb_tx_patt_gen_cfg_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TLB_TX_PATT_GEN_CFG_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TLB_TX_PATT_GEN_CFG_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TLB_TX_PATT_GEN_CFG_GEN2r,(_r._tlb_tx_patt_gen_cfg_gen2))
#define BCMI_TSCF_XGXS_WRITE_TLB_TX_PATT_GEN_CFG_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_TX_PATT_GEN_CFG_GEN2r,(_r._tlb_tx_patt_gen_cfg_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TLB_TX_PATT_GEN_CFG_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_TX_PATT_GEN_CFG_GEN2r,(_r._tlb_tx_patt_gen_cfg_gen2))
#define BCMI_TSCF_XGXS_READLN_TLB_TX_PATT_GEN_CFG_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TLB_TX_PATT_GEN_CFG_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_tx_patt_gen_cfg_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TLB_TX_PATT_GEN_CFG_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_TX_PATT_GEN_CFG_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_tx_patt_gen_cfg_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TLB_TX_PATT_GEN_CFG_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_TX_PATT_GEN_CFG_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_tx_patt_gen_cfg_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TLB_TX_PATT_GEN_CFG_GEN2r BCMI_TSCF_XGXS_TLB_TX_PATT_GEN_CFG_GEN2r
#define TLB_TX_PATT_GEN_CFG_GEN2r_SIZE BCMI_TSCF_XGXS_TLB_TX_PATT_GEN_CFG_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TLB_TX_PATT_GEN_CFG_GEN2r_t TLB_TX_PATT_GEN_CFG_GEN2r_t;
#define TLB_TX_PATT_GEN_CFG_GEN2r_CLR BCMI_TSCF_XGXS_TLB_TX_PATT_GEN_CFG_GEN2r_CLR
#define TLB_TX_PATT_GEN_CFG_GEN2r_SET BCMI_TSCF_XGXS_TLB_TX_PATT_GEN_CFG_GEN2r_SET
#define TLB_TX_PATT_GEN_CFG_GEN2r_GET BCMI_TSCF_XGXS_TLB_TX_PATT_GEN_CFG_GEN2r_GET
#define TLB_TX_PATT_GEN_CFG_GEN2r_PATT_GEN_START_POSf_GET BCMI_TSCF_XGXS_TLB_TX_PATT_GEN_CFG_GEN2r_PATT_GEN_START_POSf_GET
#define TLB_TX_PATT_GEN_CFG_GEN2r_PATT_GEN_START_POSf_SET BCMI_TSCF_XGXS_TLB_TX_PATT_GEN_CFG_GEN2r_PATT_GEN_START_POSf_SET
#define TLB_TX_PATT_GEN_CFG_GEN2r_PATT_GEN_STOP_POSf_GET BCMI_TSCF_XGXS_TLB_TX_PATT_GEN_CFG_GEN2r_PATT_GEN_STOP_POSf_GET
#define TLB_TX_PATT_GEN_CFG_GEN2r_PATT_GEN_STOP_POSf_SET BCMI_TSCF_XGXS_TLB_TX_PATT_GEN_CFG_GEN2r_PATT_GEN_STOP_POSf_SET
#define TLB_TX_PATT_GEN_CFG_GEN2r_PATT_GEN_ENf_GET BCMI_TSCF_XGXS_TLB_TX_PATT_GEN_CFG_GEN2r_PATT_GEN_ENf_GET
#define TLB_TX_PATT_GEN_CFG_GEN2r_PATT_GEN_ENf_SET BCMI_TSCF_XGXS_TLB_TX_PATT_GEN_CFG_GEN2r_PATT_GEN_ENf_SET
#define READ_TLB_TX_PATT_GEN_CFG_GEN2r BCMI_TSCF_XGXS_READ_TLB_TX_PATT_GEN_CFG_GEN2r
#define WRITE_TLB_TX_PATT_GEN_CFG_GEN2r BCMI_TSCF_XGXS_WRITE_TLB_TX_PATT_GEN_CFG_GEN2r
#define MODIFY_TLB_TX_PATT_GEN_CFG_GEN2r BCMI_TSCF_XGXS_MODIFY_TLB_TX_PATT_GEN_CFG_GEN2r
#define READLN_TLB_TX_PATT_GEN_CFG_GEN2r BCMI_TSCF_XGXS_READLN_TLB_TX_PATT_GEN_CFG_GEN2r
#define WRITELN_TLB_TX_PATT_GEN_CFG_GEN2r BCMI_TSCF_XGXS_WRITELN_TLB_TX_PATT_GEN_CFG_GEN2r
#define WRITEALL_TLB_TX_PATT_GEN_CFG_GEN2r BCMI_TSCF_XGXS_WRITEALL_TLB_TX_PATT_GEN_CFG_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TLB_TX_PATT_GEN_CFG_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TLB_TX_PRBS_GEN_CFG_GEN2
 * BLOCKS:   TLB_TX
 * REGADDR:  0xd171
 * DEVAD:    1
 * DESC:     PRBS Generator Control
 * RESETVAL: 0xa (10)
 * ACCESS:   R/W
 * FIELDS:
 *     PRBS_GEN_EN      PRBS generator enable.1 => enable  the PRBS generator.0 => disable the PRBS generator.
 *     PRBS_GEN_MODE_SEL PRBS generator mode select. Selects the PRBS polynomial as shown below3'd0 -> PRBS 73'd1 -> PRBS 93'd2 -> PRBS 113'd3 -> PRBS 153'd4 -> PRBS 233'd5 -> PRBS 313'd6 -> PRBS 58 (1 + x^39 + x^58)3'd7 -> reserved for future use.
 *     PRBS_GEN_INV     PRBS Invert enable.1 => will invert all the data bits from the PRBS generator.0 => will send normal data from the PRBS generator.
 *     PRBS_GEN_ERR_INS PRBS Error Insert.0 to 1 transition on this signal will insert single bit error in the MSB bit of the data bus.
 */
#define BCMI_TSCF_XGXS_TLB_TX_PRBS_GEN_CFG_GEN2r (0x0001d171 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TLB_TX_PRBS_GEN_CFG_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TLB_TX_PRBS_GEN_CFG_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TLB_TX_PRBS_GEN_CFG_GEN2r_s {
	uint32_t v[1];
	uint32_t tlb_tx_prbs_gen_cfg_gen2[1];
	uint32_t _tlb_tx_prbs_gen_cfg_gen2;
} BCMI_TSCF_XGXS_TLB_TX_PRBS_GEN_CFG_GEN2r_t;

#define BCMI_TSCF_XGXS_TLB_TX_PRBS_GEN_CFG_GEN2r_CLR(r) (r).tlb_tx_prbs_gen_cfg_gen2[0] = 0
#define BCMI_TSCF_XGXS_TLB_TX_PRBS_GEN_CFG_GEN2r_SET(r,d) (r).tlb_tx_prbs_gen_cfg_gen2[0] = d
#define BCMI_TSCF_XGXS_TLB_TX_PRBS_GEN_CFG_GEN2r_GET(r) (r).tlb_tx_prbs_gen_cfg_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TLB_TX_PRBS_GEN_CFG_GEN2r_PRBS_GEN_ERR_INSf_GET(r) ((((r).tlb_tx_prbs_gen_cfg_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_TLB_TX_PRBS_GEN_CFG_GEN2r_PRBS_GEN_ERR_INSf_SET(r,f) (r).tlb_tx_prbs_gen_cfg_gen2[0]=(((r).tlb_tx_prbs_gen_cfg_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_TLB_TX_PRBS_GEN_CFG_GEN2r_PRBS_GEN_INVf_GET(r) ((((r).tlb_tx_prbs_gen_cfg_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_TLB_TX_PRBS_GEN_CFG_GEN2r_PRBS_GEN_INVf_SET(r,f) (r).tlb_tx_prbs_gen_cfg_gen2[0]=(((r).tlb_tx_prbs_gen_cfg_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_TLB_TX_PRBS_GEN_CFG_GEN2r_PRBS_GEN_MODE_SELf_GET(r) ((((r).tlb_tx_prbs_gen_cfg_gen2[0]) >> 1) & 0x7)
#define BCMI_TSCF_XGXS_TLB_TX_PRBS_GEN_CFG_GEN2r_PRBS_GEN_MODE_SELf_SET(r,f) (r).tlb_tx_prbs_gen_cfg_gen2[0]=(((r).tlb_tx_prbs_gen_cfg_gen2[0] & ~((uint32_t)0x7 << 1)) | ((((uint32_t)f) & 0x7) << 1)) | (7 << (16 + 1))
#define BCMI_TSCF_XGXS_TLB_TX_PRBS_GEN_CFG_GEN2r_PRBS_GEN_ENf_GET(r) (((r).tlb_tx_prbs_gen_cfg_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_TLB_TX_PRBS_GEN_CFG_GEN2r_PRBS_GEN_ENf_SET(r,f) (r).tlb_tx_prbs_gen_cfg_gen2[0]=(((r).tlb_tx_prbs_gen_cfg_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TLB_TX_PRBS_GEN_CFG_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TLB_TX_PRBS_GEN_CFG_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TLB_TX_PRBS_GEN_CFG_GEN2r,(_r._tlb_tx_prbs_gen_cfg_gen2))
#define BCMI_TSCF_XGXS_WRITE_TLB_TX_PRBS_GEN_CFG_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_TX_PRBS_GEN_CFG_GEN2r,(_r._tlb_tx_prbs_gen_cfg_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TLB_TX_PRBS_GEN_CFG_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_TX_PRBS_GEN_CFG_GEN2r,(_r._tlb_tx_prbs_gen_cfg_gen2))
#define BCMI_TSCF_XGXS_READLN_TLB_TX_PRBS_GEN_CFG_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TLB_TX_PRBS_GEN_CFG_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_tx_prbs_gen_cfg_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TLB_TX_PRBS_GEN_CFG_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_TX_PRBS_GEN_CFG_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_tx_prbs_gen_cfg_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TLB_TX_PRBS_GEN_CFG_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_TX_PRBS_GEN_CFG_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_tx_prbs_gen_cfg_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TLB_TX_PRBS_GEN_CFG_GEN2r BCMI_TSCF_XGXS_TLB_TX_PRBS_GEN_CFG_GEN2r
#define TLB_TX_PRBS_GEN_CFG_GEN2r_SIZE BCMI_TSCF_XGXS_TLB_TX_PRBS_GEN_CFG_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TLB_TX_PRBS_GEN_CFG_GEN2r_t TLB_TX_PRBS_GEN_CFG_GEN2r_t;
#define TLB_TX_PRBS_GEN_CFG_GEN2r_CLR BCMI_TSCF_XGXS_TLB_TX_PRBS_GEN_CFG_GEN2r_CLR
#define TLB_TX_PRBS_GEN_CFG_GEN2r_SET BCMI_TSCF_XGXS_TLB_TX_PRBS_GEN_CFG_GEN2r_SET
#define TLB_TX_PRBS_GEN_CFG_GEN2r_GET BCMI_TSCF_XGXS_TLB_TX_PRBS_GEN_CFG_GEN2r_GET
#define TLB_TX_PRBS_GEN_CFG_GEN2r_PRBS_GEN_ERR_INSf_GET BCMI_TSCF_XGXS_TLB_TX_PRBS_GEN_CFG_GEN2r_PRBS_GEN_ERR_INSf_GET
#define TLB_TX_PRBS_GEN_CFG_GEN2r_PRBS_GEN_ERR_INSf_SET BCMI_TSCF_XGXS_TLB_TX_PRBS_GEN_CFG_GEN2r_PRBS_GEN_ERR_INSf_SET
#define TLB_TX_PRBS_GEN_CFG_GEN2r_PRBS_GEN_INVf_GET BCMI_TSCF_XGXS_TLB_TX_PRBS_GEN_CFG_GEN2r_PRBS_GEN_INVf_GET
#define TLB_TX_PRBS_GEN_CFG_GEN2r_PRBS_GEN_INVf_SET BCMI_TSCF_XGXS_TLB_TX_PRBS_GEN_CFG_GEN2r_PRBS_GEN_INVf_SET
#define TLB_TX_PRBS_GEN_CFG_GEN2r_PRBS_GEN_MODE_SELf_GET BCMI_TSCF_XGXS_TLB_TX_PRBS_GEN_CFG_GEN2r_PRBS_GEN_MODE_SELf_GET
#define TLB_TX_PRBS_GEN_CFG_GEN2r_PRBS_GEN_MODE_SELf_SET BCMI_TSCF_XGXS_TLB_TX_PRBS_GEN_CFG_GEN2r_PRBS_GEN_MODE_SELf_SET
#define TLB_TX_PRBS_GEN_CFG_GEN2r_PRBS_GEN_ENf_GET BCMI_TSCF_XGXS_TLB_TX_PRBS_GEN_CFG_GEN2r_PRBS_GEN_ENf_GET
#define TLB_TX_PRBS_GEN_CFG_GEN2r_PRBS_GEN_ENf_SET BCMI_TSCF_XGXS_TLB_TX_PRBS_GEN_CFG_GEN2r_PRBS_GEN_ENf_SET
#define READ_TLB_TX_PRBS_GEN_CFG_GEN2r BCMI_TSCF_XGXS_READ_TLB_TX_PRBS_GEN_CFG_GEN2r
#define WRITE_TLB_TX_PRBS_GEN_CFG_GEN2r BCMI_TSCF_XGXS_WRITE_TLB_TX_PRBS_GEN_CFG_GEN2r
#define MODIFY_TLB_TX_PRBS_GEN_CFG_GEN2r BCMI_TSCF_XGXS_MODIFY_TLB_TX_PRBS_GEN_CFG_GEN2r
#define READLN_TLB_TX_PRBS_GEN_CFG_GEN2r BCMI_TSCF_XGXS_READLN_TLB_TX_PRBS_GEN_CFG_GEN2r
#define WRITELN_TLB_TX_PRBS_GEN_CFG_GEN2r BCMI_TSCF_XGXS_WRITELN_TLB_TX_PRBS_GEN_CFG_GEN2r
#define WRITEALL_TLB_TX_PRBS_GEN_CFG_GEN2r BCMI_TSCF_XGXS_WRITEALL_TLB_TX_PRBS_GEN_CFG_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TLB_TX_PRBS_GEN_CFG_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TLB_TX_RMT_LPBK_CFG_GEN2
 * BLOCKS:   TLB_TX
 * REGADDR:  0xd172
 * DEVAD:    1
 * DESC:     Remote Loopback Control
 * RESETVAL: 0x2 (2)
 * ACCESS:   R/W
 * FIELDS:
 *     RMT_LPBK_EN      RX to TX Parallel Loopback (Remote Loopback) Enable.1 => Loopback is Enabled.0 => Loopback is Disabled.
 *     RMT_LPBK_PD_MODE Remote Loopback Phase Detector Mode. For normal operating conditions keep it at the default value of 1'b1.1'b0 - swap inc/dec. 1'b1 - normal mode.
 *     RMT_LPBK_PD_FRC_ON Remote loopback PD enable by force irrespective of rg_rmt_lpbk_en.1'b1 - enable the phase detector without the remote loopback enable. Can be used to lock RX and TXclock phases when there is a remote loopback outside PMD
 */
#define BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_CFG_GEN2r (0x0001d172 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_CFG_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TLB_TX_RMT_LPBK_CFG_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_CFG_GEN2r_s {
	uint32_t v[1];
	uint32_t tlb_tx_rmt_lpbk_cfg_gen2[1];
	uint32_t _tlb_tx_rmt_lpbk_cfg_gen2;
} BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_CFG_GEN2r_t;

#define BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_CFG_GEN2r_CLR(r) (r).tlb_tx_rmt_lpbk_cfg_gen2[0] = 0
#define BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_CFG_GEN2r_SET(r,d) (r).tlb_tx_rmt_lpbk_cfg_gen2[0] = d
#define BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_CFG_GEN2r_GET(r) (r).tlb_tx_rmt_lpbk_cfg_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_CFG_GEN2r_RMT_LPBK_PD_FRC_ONf_GET(r) ((((r).tlb_tx_rmt_lpbk_cfg_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_CFG_GEN2r_RMT_LPBK_PD_FRC_ONf_SET(r,f) (r).tlb_tx_rmt_lpbk_cfg_gen2[0]=(((r).tlb_tx_rmt_lpbk_cfg_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_CFG_GEN2r_RMT_LPBK_PD_MODEf_GET(r) ((((r).tlb_tx_rmt_lpbk_cfg_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_CFG_GEN2r_RMT_LPBK_PD_MODEf_SET(r,f) (r).tlb_tx_rmt_lpbk_cfg_gen2[0]=(((r).tlb_tx_rmt_lpbk_cfg_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_CFG_GEN2r_RMT_LPBK_ENf_GET(r) (((r).tlb_tx_rmt_lpbk_cfg_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_CFG_GEN2r_RMT_LPBK_ENf_SET(r,f) (r).tlb_tx_rmt_lpbk_cfg_gen2[0]=(((r).tlb_tx_rmt_lpbk_cfg_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TLB_TX_RMT_LPBK_CFG_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TLB_TX_RMT_LPBK_CFG_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_CFG_GEN2r,(_r._tlb_tx_rmt_lpbk_cfg_gen2))
#define BCMI_TSCF_XGXS_WRITE_TLB_TX_RMT_LPBK_CFG_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_CFG_GEN2r,(_r._tlb_tx_rmt_lpbk_cfg_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TLB_TX_RMT_LPBK_CFG_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_CFG_GEN2r,(_r._tlb_tx_rmt_lpbk_cfg_gen2))
#define BCMI_TSCF_XGXS_READLN_TLB_TX_RMT_LPBK_CFG_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_CFG_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_tx_rmt_lpbk_cfg_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TLB_TX_RMT_LPBK_CFG_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_CFG_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_tx_rmt_lpbk_cfg_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TLB_TX_RMT_LPBK_CFG_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_CFG_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_tx_rmt_lpbk_cfg_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TLB_TX_RMT_LPBK_CFG_GEN2r BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_CFG_GEN2r
#define TLB_TX_RMT_LPBK_CFG_GEN2r_SIZE BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_CFG_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_CFG_GEN2r_t TLB_TX_RMT_LPBK_CFG_GEN2r_t;
#define TLB_TX_RMT_LPBK_CFG_GEN2r_CLR BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_CFG_GEN2r_CLR
#define TLB_TX_RMT_LPBK_CFG_GEN2r_SET BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_CFG_GEN2r_SET
#define TLB_TX_RMT_LPBK_CFG_GEN2r_GET BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_CFG_GEN2r_GET
#define TLB_TX_RMT_LPBK_CFG_GEN2r_RMT_LPBK_PD_FRC_ONf_GET BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_CFG_GEN2r_RMT_LPBK_PD_FRC_ONf_GET
#define TLB_TX_RMT_LPBK_CFG_GEN2r_RMT_LPBK_PD_FRC_ONf_SET BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_CFG_GEN2r_RMT_LPBK_PD_FRC_ONf_SET
#define TLB_TX_RMT_LPBK_CFG_GEN2r_RMT_LPBK_PD_MODEf_GET BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_CFG_GEN2r_RMT_LPBK_PD_MODEf_GET
#define TLB_TX_RMT_LPBK_CFG_GEN2r_RMT_LPBK_PD_MODEf_SET BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_CFG_GEN2r_RMT_LPBK_PD_MODEf_SET
#define TLB_TX_RMT_LPBK_CFG_GEN2r_RMT_LPBK_ENf_GET BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_CFG_GEN2r_RMT_LPBK_ENf_GET
#define TLB_TX_RMT_LPBK_CFG_GEN2r_RMT_LPBK_ENf_SET BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_CFG_GEN2r_RMT_LPBK_ENf_SET
#define READ_TLB_TX_RMT_LPBK_CFG_GEN2r BCMI_TSCF_XGXS_READ_TLB_TX_RMT_LPBK_CFG_GEN2r
#define WRITE_TLB_TX_RMT_LPBK_CFG_GEN2r BCMI_TSCF_XGXS_WRITE_TLB_TX_RMT_LPBK_CFG_GEN2r
#define MODIFY_TLB_TX_RMT_LPBK_CFG_GEN2r BCMI_TSCF_XGXS_MODIFY_TLB_TX_RMT_LPBK_CFG_GEN2r
#define READLN_TLB_TX_RMT_LPBK_CFG_GEN2r BCMI_TSCF_XGXS_READLN_TLB_TX_RMT_LPBK_CFG_GEN2r
#define WRITELN_TLB_TX_RMT_LPBK_CFG_GEN2r BCMI_TSCF_XGXS_WRITELN_TLB_TX_RMT_LPBK_CFG_GEN2r
#define WRITEALL_TLB_TX_RMT_LPBK_CFG_GEN2r BCMI_TSCF_XGXS_WRITEALL_TLB_TX_RMT_LPBK_CFG_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_CFG_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TLB_TX_MISC_CFG_GEN2
 * BLOCKS:   TLB_TX
 * REGADDR:  0xd173
 * DEVAD:    1
 * DESC:     TLB TX Misc. Control
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TX_PMD_DP_INVERT TX PMD Datapath Invert Control.When Enabled by writing to 1'b1, it will invert all the datapath bits of the logical lane.Recommended for use in case P and N pads are swapped on the PCB board.
 *     TX_PCS_NATIVE_ANA_FRMT_EN TX PCS Interface Native Analog Format Enable.1 => TX PCS Interface is enabled in the Native Analog Format mode. TX PCS sends the over-sampled data in this mode which is sent directly to AFE.0 => Raw Data Mode where for every data request TX PCS will send 20 bits of valid data.
 *     TX_MUX_SEL_ORDER TX Data MUX Select Priority Order. When 1'b1 then priority of Pattern and PRBS generators are swapped w.r.t. CL72.0 => TX Data Mux select order from higher to lower priority is {rmt_lpbk, patt_gen, cl72_tx, prbs_gen, tx_pcs}.1 => TX Data Mux select order from higher to lower priority is {rmt_lpbk, prbs_gen, cl72_tx, patt_gen, tx_pcs}.
 *     TLB_TX_DIFF_ENC_EN 1'b1 will enable the Differential Encoder for pmd_tx_data. Only applicable to PCS TX data in OS1, 2 and 4 modes.Write it to 1'b0 for 1G OSR modes 16P5 and 20P625.
 */
#define BCMI_TSCF_XGXS_TLB_TX_MISC_CFG_GEN2r (0x0001d173 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TLB_TX_MISC_CFG_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TLB_TX_MISC_CFG_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TLB_TX_MISC_CFG_GEN2r_s {
	uint32_t v[1];
	uint32_t tlb_tx_misc_cfg_gen2[1];
	uint32_t _tlb_tx_misc_cfg_gen2;
} BCMI_TSCF_XGXS_TLB_TX_MISC_CFG_GEN2r_t;

#define BCMI_TSCF_XGXS_TLB_TX_MISC_CFG_GEN2r_CLR(r) (r).tlb_tx_misc_cfg_gen2[0] = 0
#define BCMI_TSCF_XGXS_TLB_TX_MISC_CFG_GEN2r_SET(r,d) (r).tlb_tx_misc_cfg_gen2[0] = d
#define BCMI_TSCF_XGXS_TLB_TX_MISC_CFG_GEN2r_GET(r) (r).tlb_tx_misc_cfg_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TLB_TX_MISC_CFG_GEN2r_TLB_TX_DIFF_ENC_ENf_GET(r) ((((r).tlb_tx_misc_cfg_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_TLB_TX_MISC_CFG_GEN2r_TLB_TX_DIFF_ENC_ENf_SET(r,f) (r).tlb_tx_misc_cfg_gen2[0]=(((r).tlb_tx_misc_cfg_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_TLB_TX_MISC_CFG_GEN2r_TX_MUX_SEL_ORDERf_GET(r) ((((r).tlb_tx_misc_cfg_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_TLB_TX_MISC_CFG_GEN2r_TX_MUX_SEL_ORDERf_SET(r,f) (r).tlb_tx_misc_cfg_gen2[0]=(((r).tlb_tx_misc_cfg_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_TLB_TX_MISC_CFG_GEN2r_TX_PCS_NATIVE_ANA_FRMT_ENf_GET(r) ((((r).tlb_tx_misc_cfg_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_TLB_TX_MISC_CFG_GEN2r_TX_PCS_NATIVE_ANA_FRMT_ENf_SET(r,f) (r).tlb_tx_misc_cfg_gen2[0]=(((r).tlb_tx_misc_cfg_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_TLB_TX_MISC_CFG_GEN2r_TX_PMD_DP_INVERTf_GET(r) (((r).tlb_tx_misc_cfg_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_TLB_TX_MISC_CFG_GEN2r_TX_PMD_DP_INVERTf_SET(r,f) (r).tlb_tx_misc_cfg_gen2[0]=(((r).tlb_tx_misc_cfg_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TLB_TX_MISC_CFG_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TLB_TX_MISC_CFG_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TLB_TX_MISC_CFG_GEN2r,(_r._tlb_tx_misc_cfg_gen2))
#define BCMI_TSCF_XGXS_WRITE_TLB_TX_MISC_CFG_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_TX_MISC_CFG_GEN2r,(_r._tlb_tx_misc_cfg_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TLB_TX_MISC_CFG_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_TX_MISC_CFG_GEN2r,(_r._tlb_tx_misc_cfg_gen2))
#define BCMI_TSCF_XGXS_READLN_TLB_TX_MISC_CFG_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TLB_TX_MISC_CFG_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_tx_misc_cfg_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TLB_TX_MISC_CFG_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_TX_MISC_CFG_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_tx_misc_cfg_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TLB_TX_MISC_CFG_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_TX_MISC_CFG_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_tx_misc_cfg_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TLB_TX_MISC_CFG_GEN2r BCMI_TSCF_XGXS_TLB_TX_MISC_CFG_GEN2r
#define TLB_TX_MISC_CFG_GEN2r_SIZE BCMI_TSCF_XGXS_TLB_TX_MISC_CFG_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TLB_TX_MISC_CFG_GEN2r_t TLB_TX_MISC_CFG_GEN2r_t;
#define TLB_TX_MISC_CFG_GEN2r_CLR BCMI_TSCF_XGXS_TLB_TX_MISC_CFG_GEN2r_CLR
#define TLB_TX_MISC_CFG_GEN2r_SET BCMI_TSCF_XGXS_TLB_TX_MISC_CFG_GEN2r_SET
#define TLB_TX_MISC_CFG_GEN2r_GET BCMI_TSCF_XGXS_TLB_TX_MISC_CFG_GEN2r_GET
#define TLB_TX_MISC_CFG_GEN2r_TLB_TX_DIFF_ENC_ENf_GET BCMI_TSCF_XGXS_TLB_TX_MISC_CFG_GEN2r_TLB_TX_DIFF_ENC_ENf_GET
#define TLB_TX_MISC_CFG_GEN2r_TLB_TX_DIFF_ENC_ENf_SET BCMI_TSCF_XGXS_TLB_TX_MISC_CFG_GEN2r_TLB_TX_DIFF_ENC_ENf_SET
#define TLB_TX_MISC_CFG_GEN2r_TX_MUX_SEL_ORDERf_GET BCMI_TSCF_XGXS_TLB_TX_MISC_CFG_GEN2r_TX_MUX_SEL_ORDERf_GET
#define TLB_TX_MISC_CFG_GEN2r_TX_MUX_SEL_ORDERf_SET BCMI_TSCF_XGXS_TLB_TX_MISC_CFG_GEN2r_TX_MUX_SEL_ORDERf_SET
#define TLB_TX_MISC_CFG_GEN2r_TX_PCS_NATIVE_ANA_FRMT_ENf_GET BCMI_TSCF_XGXS_TLB_TX_MISC_CFG_GEN2r_TX_PCS_NATIVE_ANA_FRMT_ENf_GET
#define TLB_TX_MISC_CFG_GEN2r_TX_PCS_NATIVE_ANA_FRMT_ENf_SET BCMI_TSCF_XGXS_TLB_TX_MISC_CFG_GEN2r_TX_PCS_NATIVE_ANA_FRMT_ENf_SET
#define TLB_TX_MISC_CFG_GEN2r_TX_PMD_DP_INVERTf_GET BCMI_TSCF_XGXS_TLB_TX_MISC_CFG_GEN2r_TX_PMD_DP_INVERTf_GET
#define TLB_TX_MISC_CFG_GEN2r_TX_PMD_DP_INVERTf_SET BCMI_TSCF_XGXS_TLB_TX_MISC_CFG_GEN2r_TX_PMD_DP_INVERTf_SET
#define READ_TLB_TX_MISC_CFG_GEN2r BCMI_TSCF_XGXS_READ_TLB_TX_MISC_CFG_GEN2r
#define WRITE_TLB_TX_MISC_CFG_GEN2r BCMI_TSCF_XGXS_WRITE_TLB_TX_MISC_CFG_GEN2r
#define MODIFY_TLB_TX_MISC_CFG_GEN2r BCMI_TSCF_XGXS_MODIFY_TLB_TX_MISC_CFG_GEN2r
#define READLN_TLB_TX_MISC_CFG_GEN2r BCMI_TSCF_XGXS_READLN_TLB_TX_MISC_CFG_GEN2r
#define WRITELN_TLB_TX_MISC_CFG_GEN2r BCMI_TSCF_XGXS_WRITELN_TLB_TX_MISC_CFG_GEN2r
#define WRITEALL_TLB_TX_MISC_CFG_GEN2r BCMI_TSCF_XGXS_WRITEALL_TLB_TX_MISC_CFG_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TLB_TX_MISC_CFG_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  TLB_TX_RMT_LPBK_PD_STS_GEN2
 * BLOCKS:   TLB_TX
 * REGADDR:  0xd178
 * DEVAD:    1
 * DESC:     Remote Loopback Status
 * RESETVAL: 0x2 (2)
 * ACCESS:   R/O
 * FIELDS:
 *     RMT_LPBK_PD_LATE_IND 1 means dp_tclk20 is sampling data late so reduce the delay of the dp_tclk20 clock phase. This will result in TX PI phase step decrement.
 *     RMT_LPBK_PD_EARLY_IND 1 means dp_tclk20 is sampling data earlier so delay the dp_tclk20 clock phase. This will result in TX PI phase step increment.
 */
#define BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_PD_STS_GEN2r (0x0001d178 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_PD_STS_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program TLB_TX_RMT_LPBK_PD_STS_GEN2.
 */
typedef union BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_PD_STS_GEN2r_s {
	uint32_t v[1];
	uint32_t tlb_tx_rmt_lpbk_pd_sts_gen2[1];
	uint32_t _tlb_tx_rmt_lpbk_pd_sts_gen2;
} BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_PD_STS_GEN2r_t;

#define BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_PD_STS_GEN2r_CLR(r) (r).tlb_tx_rmt_lpbk_pd_sts_gen2[0] = 0
#define BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_PD_STS_GEN2r_SET(r,d) (r).tlb_tx_rmt_lpbk_pd_sts_gen2[0] = d
#define BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_PD_STS_GEN2r_GET(r) (r).tlb_tx_rmt_lpbk_pd_sts_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_PD_STS_GEN2r_RMT_LPBK_PD_EARLY_INDf_GET(r) ((((r).tlb_tx_rmt_lpbk_pd_sts_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_PD_STS_GEN2r_RMT_LPBK_PD_EARLY_INDf_SET(r,f) (r).tlb_tx_rmt_lpbk_pd_sts_gen2[0]=(((r).tlb_tx_rmt_lpbk_pd_sts_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_PD_STS_GEN2r_RMT_LPBK_PD_LATE_INDf_GET(r) (((r).tlb_tx_rmt_lpbk_pd_sts_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_PD_STS_GEN2r_RMT_LPBK_PD_LATE_INDf_SET(r,f) (r).tlb_tx_rmt_lpbk_pd_sts_gen2[0]=(((r).tlb_tx_rmt_lpbk_pd_sts_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TLB_TX_RMT_LPBK_PD_STS_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_TLB_TX_RMT_LPBK_PD_STS_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_PD_STS_GEN2r,(_r._tlb_tx_rmt_lpbk_pd_sts_gen2))
#define BCMI_TSCF_XGXS_WRITE_TLB_TX_RMT_LPBK_PD_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_PD_STS_GEN2r,(_r._tlb_tx_rmt_lpbk_pd_sts_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_TLB_TX_RMT_LPBK_PD_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_PD_STS_GEN2r,(_r._tlb_tx_rmt_lpbk_pd_sts_gen2))
#define BCMI_TSCF_XGXS_READLN_TLB_TX_RMT_LPBK_PD_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_PD_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_tx_rmt_lpbk_pd_sts_gen2))
#define BCMI_TSCF_XGXS_WRITELN_TLB_TX_RMT_LPBK_PD_STS_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_PD_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_tx_rmt_lpbk_pd_sts_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_TLB_TX_RMT_LPBK_PD_STS_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_PD_STS_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_tx_rmt_lpbk_pd_sts_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TLB_TX_RMT_LPBK_PD_STS_GEN2r BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_PD_STS_GEN2r
#define TLB_TX_RMT_LPBK_PD_STS_GEN2r_SIZE BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_PD_STS_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_PD_STS_GEN2r_t TLB_TX_RMT_LPBK_PD_STS_GEN2r_t;
#define TLB_TX_RMT_LPBK_PD_STS_GEN2r_CLR BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_PD_STS_GEN2r_CLR
#define TLB_TX_RMT_LPBK_PD_STS_GEN2r_SET BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_PD_STS_GEN2r_SET
#define TLB_TX_RMT_LPBK_PD_STS_GEN2r_GET BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_PD_STS_GEN2r_GET
#define TLB_TX_RMT_LPBK_PD_STS_GEN2r_RMT_LPBK_PD_EARLY_INDf_GET BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_PD_STS_GEN2r_RMT_LPBK_PD_EARLY_INDf_GET
#define TLB_TX_RMT_LPBK_PD_STS_GEN2r_RMT_LPBK_PD_EARLY_INDf_SET BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_PD_STS_GEN2r_RMT_LPBK_PD_EARLY_INDf_SET
#define TLB_TX_RMT_LPBK_PD_STS_GEN2r_RMT_LPBK_PD_LATE_INDf_GET BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_PD_STS_GEN2r_RMT_LPBK_PD_LATE_INDf_GET
#define TLB_TX_RMT_LPBK_PD_STS_GEN2r_RMT_LPBK_PD_LATE_INDf_SET BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_PD_STS_GEN2r_RMT_LPBK_PD_LATE_INDf_SET
#define READ_TLB_TX_RMT_LPBK_PD_STS_GEN2r BCMI_TSCF_XGXS_READ_TLB_TX_RMT_LPBK_PD_STS_GEN2r
#define WRITE_TLB_TX_RMT_LPBK_PD_STS_GEN2r BCMI_TSCF_XGXS_WRITE_TLB_TX_RMT_LPBK_PD_STS_GEN2r
#define MODIFY_TLB_TX_RMT_LPBK_PD_STS_GEN2r BCMI_TSCF_XGXS_MODIFY_TLB_TX_RMT_LPBK_PD_STS_GEN2r
#define READLN_TLB_TX_RMT_LPBK_PD_STS_GEN2r BCMI_TSCF_XGXS_READLN_TLB_TX_RMT_LPBK_PD_STS_GEN2r
#define WRITELN_TLB_TX_RMT_LPBK_PD_STS_GEN2r BCMI_TSCF_XGXS_WRITELN_TLB_TX_RMT_LPBK_PD_STS_GEN2r
#define WRITEALL_TLB_TX_RMT_LPBK_PD_STS_GEN2r BCMI_TSCF_XGXS_WRITEALL_TLB_TX_RMT_LPBK_PD_STS_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_TLB_TX_RMT_LPBK_PD_STS_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  UC_CLK_CTL0_GEN2
 * BLOCKS:   MICRO_A_COM
 * REGADDR:  0xd200
 * DEVAD:    1
 * DESC:     Clock control registers 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_MASTER_CLK_EN master clock enable:By default the clock to micro sub-system is disabled andonly the micro control and status registers can be accessed throughthe RMIC interface. Setting this field to 1'b1 enable the master clock0 - disabled1 - enables
 *     MICRO_CORE_CLK_EN micro core clock enable (m0):While the micro-code is being loaded into the code RAM, the clock tomicro_core (m0) is normally disabled and a reset is asserted0 - disabled1 - enables
 */
#define BCMI_TSCF_XGXS_UC_CLK_CTL0_GEN2r (0x0001d200 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_UC_CLK_CTL0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program UC_CLK_CTL0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_UC_CLK_CTL0_GEN2r_s {
	uint32_t v[1];
	uint32_t uc_clk_ctl0_gen2[1];
	uint32_t _uc_clk_ctl0_gen2;
} BCMI_TSCF_XGXS_UC_CLK_CTL0_GEN2r_t;

#define BCMI_TSCF_XGXS_UC_CLK_CTL0_GEN2r_CLR(r) (r).uc_clk_ctl0_gen2[0] = 0
#define BCMI_TSCF_XGXS_UC_CLK_CTL0_GEN2r_SET(r,d) (r).uc_clk_ctl0_gen2[0] = d
#define BCMI_TSCF_XGXS_UC_CLK_CTL0_GEN2r_GET(r) (r).uc_clk_ctl0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_UC_CLK_CTL0_GEN2r_MICRO_CORE_CLK_ENf_GET(r) ((((r).uc_clk_ctl0_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_UC_CLK_CTL0_GEN2r_MICRO_CORE_CLK_ENf_SET(r,f) (r).uc_clk_ctl0_gen2[0]=(((r).uc_clk_ctl0_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_UC_CLK_CTL0_GEN2r_MICRO_MASTER_CLK_ENf_GET(r) (((r).uc_clk_ctl0_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_UC_CLK_CTL0_GEN2r_MICRO_MASTER_CLK_ENf_SET(r,f) (r).uc_clk_ctl0_gen2[0]=(((r).uc_clk_ctl0_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access UC_CLK_CTL0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_UC_CLK_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_CLK_CTL0_GEN2r,(_r._uc_clk_ctl0_gen2))
#define BCMI_TSCF_XGXS_WRITE_UC_CLK_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_CLK_CTL0_GEN2r,(_r._uc_clk_ctl0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_UC_CLK_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_CLK_CTL0_GEN2r,(_r._uc_clk_ctl0_gen2))
#define BCMI_TSCF_XGXS_READLN_UC_CLK_CTL0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_CLK_CTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_clk_ctl0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_UC_CLK_CTL0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_CLK_CTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_clk_ctl0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_UC_CLK_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_CLK_CTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_clk_ctl0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_CLK_CTL0_GEN2r BCMI_TSCF_XGXS_UC_CLK_CTL0_GEN2r
#define UC_CLK_CTL0_GEN2r_SIZE BCMI_TSCF_XGXS_UC_CLK_CTL0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_UC_CLK_CTL0_GEN2r_t UC_CLK_CTL0_GEN2r_t;
#define UC_CLK_CTL0_GEN2r_CLR BCMI_TSCF_XGXS_UC_CLK_CTL0_GEN2r_CLR
#define UC_CLK_CTL0_GEN2r_SET BCMI_TSCF_XGXS_UC_CLK_CTL0_GEN2r_SET
#define UC_CLK_CTL0_GEN2r_GET BCMI_TSCF_XGXS_UC_CLK_CTL0_GEN2r_GET
#define UC_CLK_CTL0_GEN2r_MICRO_CORE_CLK_ENf_GET BCMI_TSCF_XGXS_UC_CLK_CTL0_GEN2r_MICRO_CORE_CLK_ENf_GET
#define UC_CLK_CTL0_GEN2r_MICRO_CORE_CLK_ENf_SET BCMI_TSCF_XGXS_UC_CLK_CTL0_GEN2r_MICRO_CORE_CLK_ENf_SET
#define UC_CLK_CTL0_GEN2r_MICRO_MASTER_CLK_ENf_GET BCMI_TSCF_XGXS_UC_CLK_CTL0_GEN2r_MICRO_MASTER_CLK_ENf_GET
#define UC_CLK_CTL0_GEN2r_MICRO_MASTER_CLK_ENf_SET BCMI_TSCF_XGXS_UC_CLK_CTL0_GEN2r_MICRO_MASTER_CLK_ENf_SET
#define READ_UC_CLK_CTL0_GEN2r BCMI_TSCF_XGXS_READ_UC_CLK_CTL0_GEN2r
#define WRITE_UC_CLK_CTL0_GEN2r BCMI_TSCF_XGXS_WRITE_UC_CLK_CTL0_GEN2r
#define MODIFY_UC_CLK_CTL0_GEN2r BCMI_TSCF_XGXS_MODIFY_UC_CLK_CTL0_GEN2r
#define READLN_UC_CLK_CTL0_GEN2r BCMI_TSCF_XGXS_READLN_UC_CLK_CTL0_GEN2r
#define WRITELN_UC_CLK_CTL0_GEN2r BCMI_TSCF_XGXS_WRITELN_UC_CLK_CTL0_GEN2r
#define WRITEALL_UC_CLK_CTL0_GEN2r BCMI_TSCF_XGXS_WRITEALL_UC_CLK_CTL0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_UC_CLK_CTL0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  UC_RST_CTL0_GEN2
 * BLOCKS:   MICRO_A_COM
 * REGADDR:  0xd201
 * DEVAD:    1
 * DESC:     Reset control registers 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_MASTER_RSTB master reset :By default a reset to micro controller sub-system is asserted, andonly the micro control and status registers can be accessed throughthe RMIC interface. Setting this field to 1'b1 de-assert a reset to the micro-subsystem0 - asserted1 - de-asserted
 *     MICRO_CORE_RSTB  micro core reset (m0):While the micro-code is being loaded into the code RAM, the clock tomicro_core (m0) is normally disabled and a reset is asserted.Setting this field to 1'b1 de-asserts a reset to the micro.0 - disabled1 - enables
 *     MICRO_PRAM_IF_RSTB PRAM interface reset :By default a reset to the PRAM interface is asserted, andonly the micro control and status registers can be accessed throughthe RMIC interface. Setting this field to 1'b1 de-assert a reset to the PRAM interface0 - asserted1 - de-asserted
 */
#define BCMI_TSCF_XGXS_UC_RST_CTL0_GEN2r (0x0001d201 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_UC_RST_CTL0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program UC_RST_CTL0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_UC_RST_CTL0_GEN2r_s {
	uint32_t v[1];
	uint32_t uc_rst_ctl0_gen2[1];
	uint32_t _uc_rst_ctl0_gen2;
} BCMI_TSCF_XGXS_UC_RST_CTL0_GEN2r_t;

#define BCMI_TSCF_XGXS_UC_RST_CTL0_GEN2r_CLR(r) (r).uc_rst_ctl0_gen2[0] = 0
#define BCMI_TSCF_XGXS_UC_RST_CTL0_GEN2r_SET(r,d) (r).uc_rst_ctl0_gen2[0] = d
#define BCMI_TSCF_XGXS_UC_RST_CTL0_GEN2r_GET(r) (r).uc_rst_ctl0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_UC_RST_CTL0_GEN2r_MICRO_PRAM_IF_RSTBf_GET(r) ((((r).uc_rst_ctl0_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_UC_RST_CTL0_GEN2r_MICRO_PRAM_IF_RSTBf_SET(r,f) (r).uc_rst_ctl0_gen2[0]=(((r).uc_rst_ctl0_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_UC_RST_CTL0_GEN2r_MICRO_CORE_RSTBf_GET(r) ((((r).uc_rst_ctl0_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_UC_RST_CTL0_GEN2r_MICRO_CORE_RSTBf_SET(r,f) (r).uc_rst_ctl0_gen2[0]=(((r).uc_rst_ctl0_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_UC_RST_CTL0_GEN2r_MICRO_MASTER_RSTBf_GET(r) (((r).uc_rst_ctl0_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_UC_RST_CTL0_GEN2r_MICRO_MASTER_RSTBf_SET(r,f) (r).uc_rst_ctl0_gen2[0]=(((r).uc_rst_ctl0_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access UC_RST_CTL0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_UC_RST_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_RST_CTL0_GEN2r,(_r._uc_rst_ctl0_gen2))
#define BCMI_TSCF_XGXS_WRITE_UC_RST_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_RST_CTL0_GEN2r,(_r._uc_rst_ctl0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_UC_RST_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_RST_CTL0_GEN2r,(_r._uc_rst_ctl0_gen2))
#define BCMI_TSCF_XGXS_READLN_UC_RST_CTL0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_RST_CTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rst_ctl0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_UC_RST_CTL0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_RST_CTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rst_ctl0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_UC_RST_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_RST_CTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_rst_ctl0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_RST_CTL0_GEN2r BCMI_TSCF_XGXS_UC_RST_CTL0_GEN2r
#define UC_RST_CTL0_GEN2r_SIZE BCMI_TSCF_XGXS_UC_RST_CTL0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_UC_RST_CTL0_GEN2r_t UC_RST_CTL0_GEN2r_t;
#define UC_RST_CTL0_GEN2r_CLR BCMI_TSCF_XGXS_UC_RST_CTL0_GEN2r_CLR
#define UC_RST_CTL0_GEN2r_SET BCMI_TSCF_XGXS_UC_RST_CTL0_GEN2r_SET
#define UC_RST_CTL0_GEN2r_GET BCMI_TSCF_XGXS_UC_RST_CTL0_GEN2r_GET
#define UC_RST_CTL0_GEN2r_MICRO_PRAM_IF_RSTBf_GET BCMI_TSCF_XGXS_UC_RST_CTL0_GEN2r_MICRO_PRAM_IF_RSTBf_GET
#define UC_RST_CTL0_GEN2r_MICRO_PRAM_IF_RSTBf_SET BCMI_TSCF_XGXS_UC_RST_CTL0_GEN2r_MICRO_PRAM_IF_RSTBf_SET
#define UC_RST_CTL0_GEN2r_MICRO_CORE_RSTBf_GET BCMI_TSCF_XGXS_UC_RST_CTL0_GEN2r_MICRO_CORE_RSTBf_GET
#define UC_RST_CTL0_GEN2r_MICRO_CORE_RSTBf_SET BCMI_TSCF_XGXS_UC_RST_CTL0_GEN2r_MICRO_CORE_RSTBf_SET
#define UC_RST_CTL0_GEN2r_MICRO_MASTER_RSTBf_GET BCMI_TSCF_XGXS_UC_RST_CTL0_GEN2r_MICRO_MASTER_RSTBf_GET
#define UC_RST_CTL0_GEN2r_MICRO_MASTER_RSTBf_SET BCMI_TSCF_XGXS_UC_RST_CTL0_GEN2r_MICRO_MASTER_RSTBf_SET
#define READ_UC_RST_CTL0_GEN2r BCMI_TSCF_XGXS_READ_UC_RST_CTL0_GEN2r
#define WRITE_UC_RST_CTL0_GEN2r BCMI_TSCF_XGXS_WRITE_UC_RST_CTL0_GEN2r
#define MODIFY_UC_RST_CTL0_GEN2r BCMI_TSCF_XGXS_MODIFY_UC_RST_CTL0_GEN2r
#define READLN_UC_RST_CTL0_GEN2r BCMI_TSCF_XGXS_READLN_UC_RST_CTL0_GEN2r
#define WRITELN_UC_RST_CTL0_GEN2r BCMI_TSCF_XGXS_WRITELN_UC_RST_CTL0_GEN2r
#define WRITEALL_UC_RST_CTL0_GEN2r BCMI_TSCF_XGXS_WRITEALL_UC_RST_CTL0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_UC_RST_CTL0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  UC_AHB_CTL0_GEN2
 * BLOCKS:   MICRO_A_COM
 * REGADDR:  0xd202
 * DEVAD:    1
 * DESC:     rmi to ahb control registers 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_RA_WRDATASIZE write data size select'd0 : 8-bit'd1 : 16-bit'd2 : 32-bit'd3 : reserved
 *     MICRO_RA_RDDATASIZE read data size select'd0 : 8-bit'd1 : 16-bit'd2 : 32-bit'd3 : reserved
 *     MICRO_RA_INIT    Intialize code/data RAM2'b01: initailize code RAM - write zeroes to all locations2'b10: initialize data RAM - write zeroes to all loactions2'b00, 2'b11: ignored
 *     MICRO_AUTOINC_WRADDR_EN Automatic increment write address enable0 - disabled, micro_ra_wraddr_lsw and micro_ra_wraddr_msw field specify the constant addresswhere the data from the micro_ra_wrdata_msw and micro_ra_wrdata_lsw is written.1 - enabled, micro_ra_wraddr_lsw and micro_ra_wraddr_msw field specify the start addresswhere the data from the micro_ra_wrdata_msw and micro_ra_wrdata_lsw is written.the address automatically increments based on the micro_ra_wrdatasize field afterthe write has been performed
 *     MICRO_AUTOINC_RDADDR_EN Automatic increment read address enable0 - disabled, micro_ra_rdaddr_lsw and micro_ra_rdaddr_msw field specify the constant addresswhere the data is read via the micro_ra_rddata_msw and micro_ra_rddata_lsw fileds1 - enabled, micro_ra_rdaddr_lsw and micro_ra_rdaddr_msw field specify the start addresswhere the data is read via the micro_ra_rddata_msw and micro_ra_rddata_lsw filedsthe address automatically increments based on the micro_ra_rddatasize field afterthe read has been performed
 */
#define BCMI_TSCF_XGXS_UC_AHB_CTL0_GEN2r (0x0001d202 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_UC_AHB_CTL0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program UC_AHB_CTL0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_UC_AHB_CTL0_GEN2r_s {
	uint32_t v[1];
	uint32_t uc_ahb_ctl0_gen2[1];
	uint32_t _uc_ahb_ctl0_gen2;
} BCMI_TSCF_XGXS_UC_AHB_CTL0_GEN2r_t;

#define BCMI_TSCF_XGXS_UC_AHB_CTL0_GEN2r_CLR(r) (r).uc_ahb_ctl0_gen2[0] = 0
#define BCMI_TSCF_XGXS_UC_AHB_CTL0_GEN2r_SET(r,d) (r).uc_ahb_ctl0_gen2[0] = d
#define BCMI_TSCF_XGXS_UC_AHB_CTL0_GEN2r_GET(r) (r).uc_ahb_ctl0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_UC_AHB_CTL0_GEN2r_MICRO_AUTOINC_RDADDR_ENf_GET(r) ((((r).uc_ahb_ctl0_gen2[0]) >> 13) & 0x1)
#define BCMI_TSCF_XGXS_UC_AHB_CTL0_GEN2r_MICRO_AUTOINC_RDADDR_ENf_SET(r,f) (r).uc_ahb_ctl0_gen2[0]=(((r).uc_ahb_ctl0_gen2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_TSCF_XGXS_UC_AHB_CTL0_GEN2r_MICRO_AUTOINC_WRADDR_ENf_GET(r) ((((r).uc_ahb_ctl0_gen2[0]) >> 12) & 0x1)
#define BCMI_TSCF_XGXS_UC_AHB_CTL0_GEN2r_MICRO_AUTOINC_WRADDR_ENf_SET(r,f) (r).uc_ahb_ctl0_gen2[0]=(((r).uc_ahb_ctl0_gen2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_TSCF_XGXS_UC_AHB_CTL0_GEN2r_MICRO_RA_INITf_GET(r) ((((r).uc_ahb_ctl0_gen2[0]) >> 8) & 0x3)
#define BCMI_TSCF_XGXS_UC_AHB_CTL0_GEN2r_MICRO_RA_INITf_SET(r,f) (r).uc_ahb_ctl0_gen2[0]=(((r).uc_ahb_ctl0_gen2[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))
#define BCMI_TSCF_XGXS_UC_AHB_CTL0_GEN2r_MICRO_RA_RDDATASIZEf_GET(r) ((((r).uc_ahb_ctl0_gen2[0]) >> 4) & 0x3)
#define BCMI_TSCF_XGXS_UC_AHB_CTL0_GEN2r_MICRO_RA_RDDATASIZEf_SET(r,f) (r).uc_ahb_ctl0_gen2[0]=(((r).uc_ahb_ctl0_gen2[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_XGXS_UC_AHB_CTL0_GEN2r_MICRO_RA_WRDATASIZEf_GET(r) (((r).uc_ahb_ctl0_gen2[0]) & 0x3)
#define BCMI_TSCF_XGXS_UC_AHB_CTL0_GEN2r_MICRO_RA_WRDATASIZEf_SET(r,f) (r).uc_ahb_ctl0_gen2[0]=(((r).uc_ahb_ctl0_gen2[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access UC_AHB_CTL0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_UC_AHB_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_AHB_CTL0_GEN2r,(_r._uc_ahb_ctl0_gen2))
#define BCMI_TSCF_XGXS_WRITE_UC_AHB_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_AHB_CTL0_GEN2r,(_r._uc_ahb_ctl0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_UC_AHB_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_AHB_CTL0_GEN2r,(_r._uc_ahb_ctl0_gen2))
#define BCMI_TSCF_XGXS_READLN_UC_AHB_CTL0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_AHB_CTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_ctl0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_UC_AHB_CTL0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_AHB_CTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_ctl0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_UC_AHB_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_AHB_CTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_ahb_ctl0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_AHB_CTL0_GEN2r BCMI_TSCF_XGXS_UC_AHB_CTL0_GEN2r
#define UC_AHB_CTL0_GEN2r_SIZE BCMI_TSCF_XGXS_UC_AHB_CTL0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_UC_AHB_CTL0_GEN2r_t UC_AHB_CTL0_GEN2r_t;
#define UC_AHB_CTL0_GEN2r_CLR BCMI_TSCF_XGXS_UC_AHB_CTL0_GEN2r_CLR
#define UC_AHB_CTL0_GEN2r_SET BCMI_TSCF_XGXS_UC_AHB_CTL0_GEN2r_SET
#define UC_AHB_CTL0_GEN2r_GET BCMI_TSCF_XGXS_UC_AHB_CTL0_GEN2r_GET
#define UC_AHB_CTL0_GEN2r_MICRO_AUTOINC_RDADDR_ENf_GET BCMI_TSCF_XGXS_UC_AHB_CTL0_GEN2r_MICRO_AUTOINC_RDADDR_ENf_GET
#define UC_AHB_CTL0_GEN2r_MICRO_AUTOINC_RDADDR_ENf_SET BCMI_TSCF_XGXS_UC_AHB_CTL0_GEN2r_MICRO_AUTOINC_RDADDR_ENf_SET
#define UC_AHB_CTL0_GEN2r_MICRO_AUTOINC_WRADDR_ENf_GET BCMI_TSCF_XGXS_UC_AHB_CTL0_GEN2r_MICRO_AUTOINC_WRADDR_ENf_GET
#define UC_AHB_CTL0_GEN2r_MICRO_AUTOINC_WRADDR_ENf_SET BCMI_TSCF_XGXS_UC_AHB_CTL0_GEN2r_MICRO_AUTOINC_WRADDR_ENf_SET
#define UC_AHB_CTL0_GEN2r_MICRO_RA_INITf_GET BCMI_TSCF_XGXS_UC_AHB_CTL0_GEN2r_MICRO_RA_INITf_GET
#define UC_AHB_CTL0_GEN2r_MICRO_RA_INITf_SET BCMI_TSCF_XGXS_UC_AHB_CTL0_GEN2r_MICRO_RA_INITf_SET
#define UC_AHB_CTL0_GEN2r_MICRO_RA_RDDATASIZEf_GET BCMI_TSCF_XGXS_UC_AHB_CTL0_GEN2r_MICRO_RA_RDDATASIZEf_GET
#define UC_AHB_CTL0_GEN2r_MICRO_RA_RDDATASIZEf_SET BCMI_TSCF_XGXS_UC_AHB_CTL0_GEN2r_MICRO_RA_RDDATASIZEf_SET
#define UC_AHB_CTL0_GEN2r_MICRO_RA_WRDATASIZEf_GET BCMI_TSCF_XGXS_UC_AHB_CTL0_GEN2r_MICRO_RA_WRDATASIZEf_GET
#define UC_AHB_CTL0_GEN2r_MICRO_RA_WRDATASIZEf_SET BCMI_TSCF_XGXS_UC_AHB_CTL0_GEN2r_MICRO_RA_WRDATASIZEf_SET
#define READ_UC_AHB_CTL0_GEN2r BCMI_TSCF_XGXS_READ_UC_AHB_CTL0_GEN2r
#define WRITE_UC_AHB_CTL0_GEN2r BCMI_TSCF_XGXS_WRITE_UC_AHB_CTL0_GEN2r
#define MODIFY_UC_AHB_CTL0_GEN2r BCMI_TSCF_XGXS_MODIFY_UC_AHB_CTL0_GEN2r
#define READLN_UC_AHB_CTL0_GEN2r BCMI_TSCF_XGXS_READLN_UC_AHB_CTL0_GEN2r
#define WRITELN_UC_AHB_CTL0_GEN2r BCMI_TSCF_XGXS_WRITELN_UC_AHB_CTL0_GEN2r
#define WRITEALL_UC_AHB_CTL0_GEN2r BCMI_TSCF_XGXS_WRITEALL_UC_AHB_CTL0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_UC_AHB_CTL0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  UC_AHB_STS0_GEN2
 * BLOCKS:   MICRO_A_COM
 * REGADDR:  0xd203
 * DEVAD:    1
 * DESC:     rmi to ahb status registers 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MICRO_RA_INITDONE When this bit is set, it indicate that code/data RAM initialization process is completeThis reamins set until
 */
#define BCMI_TSCF_XGXS_UC_AHB_STS0_GEN2r (0x0001d203 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_UC_AHB_STS0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program UC_AHB_STS0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_UC_AHB_STS0_GEN2r_s {
	uint32_t v[1];
	uint32_t uc_ahb_sts0_gen2[1];
	uint32_t _uc_ahb_sts0_gen2;
} BCMI_TSCF_XGXS_UC_AHB_STS0_GEN2r_t;

#define BCMI_TSCF_XGXS_UC_AHB_STS0_GEN2r_CLR(r) (r).uc_ahb_sts0_gen2[0] = 0
#define BCMI_TSCF_XGXS_UC_AHB_STS0_GEN2r_SET(r,d) (r).uc_ahb_sts0_gen2[0] = d
#define BCMI_TSCF_XGXS_UC_AHB_STS0_GEN2r_GET(r) (r).uc_ahb_sts0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_UC_AHB_STS0_GEN2r_MICRO_RA_INITDONEf_GET(r) (((r).uc_ahb_sts0_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_UC_AHB_STS0_GEN2r_MICRO_RA_INITDONEf_SET(r,f) (r).uc_ahb_sts0_gen2[0]=(((r).uc_ahb_sts0_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access UC_AHB_STS0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_UC_AHB_STS0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_AHB_STS0_GEN2r,(_r._uc_ahb_sts0_gen2))
#define BCMI_TSCF_XGXS_WRITE_UC_AHB_STS0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_AHB_STS0_GEN2r,(_r._uc_ahb_sts0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_UC_AHB_STS0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_AHB_STS0_GEN2r,(_r._uc_ahb_sts0_gen2))
#define BCMI_TSCF_XGXS_READLN_UC_AHB_STS0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_AHB_STS0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_sts0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_UC_AHB_STS0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_AHB_STS0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_sts0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_UC_AHB_STS0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_AHB_STS0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_ahb_sts0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_AHB_STS0_GEN2r BCMI_TSCF_XGXS_UC_AHB_STS0_GEN2r
#define UC_AHB_STS0_GEN2r_SIZE BCMI_TSCF_XGXS_UC_AHB_STS0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_UC_AHB_STS0_GEN2r_t UC_AHB_STS0_GEN2r_t;
#define UC_AHB_STS0_GEN2r_CLR BCMI_TSCF_XGXS_UC_AHB_STS0_GEN2r_CLR
#define UC_AHB_STS0_GEN2r_SET BCMI_TSCF_XGXS_UC_AHB_STS0_GEN2r_SET
#define UC_AHB_STS0_GEN2r_GET BCMI_TSCF_XGXS_UC_AHB_STS0_GEN2r_GET
#define UC_AHB_STS0_GEN2r_MICRO_RA_INITDONEf_GET BCMI_TSCF_XGXS_UC_AHB_STS0_GEN2r_MICRO_RA_INITDONEf_GET
#define UC_AHB_STS0_GEN2r_MICRO_RA_INITDONEf_SET BCMI_TSCF_XGXS_UC_AHB_STS0_GEN2r_MICRO_RA_INITDONEf_SET
#define READ_UC_AHB_STS0_GEN2r BCMI_TSCF_XGXS_READ_UC_AHB_STS0_GEN2r
#define WRITE_UC_AHB_STS0_GEN2r BCMI_TSCF_XGXS_WRITE_UC_AHB_STS0_GEN2r
#define MODIFY_UC_AHB_STS0_GEN2r BCMI_TSCF_XGXS_MODIFY_UC_AHB_STS0_GEN2r
#define READLN_UC_AHB_STS0_GEN2r BCMI_TSCF_XGXS_READLN_UC_AHB_STS0_GEN2r
#define WRITELN_UC_AHB_STS0_GEN2r BCMI_TSCF_XGXS_WRITELN_UC_AHB_STS0_GEN2r
#define WRITEALL_UC_AHB_STS0_GEN2r BCMI_TSCF_XGXS_WRITEALL_UC_AHB_STS0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_UC_AHB_STS0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  UC_AHB_WRADDR_LSW_GEN2
 * BLOCKS:   MICRO_A_COM
 * REGADDR:  0xd204
 * DEVAD:    1
 * DESC:     rmi to ahb write address LSW (bits 15:0) register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_RA_WRADDR_LSW These bits are used to generate the lower 16-bits of the address on the AHB-Lite bus during write transactionsbit 0 is not used during 16-bit transactions andbits[1:0] are not used during 32-bit transactions
 */
#define BCMI_TSCF_XGXS_UC_AHB_WRADDR_LSW_GEN2r (0x0001d204 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_UC_AHB_WRADDR_LSW_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program UC_AHB_WRADDR_LSW_GEN2.
 */
typedef union BCMI_TSCF_XGXS_UC_AHB_WRADDR_LSW_GEN2r_s {
	uint32_t v[1];
	uint32_t uc_ahb_wraddr_lsw_gen2[1];
	uint32_t _uc_ahb_wraddr_lsw_gen2;
} BCMI_TSCF_XGXS_UC_AHB_WRADDR_LSW_GEN2r_t;

#define BCMI_TSCF_XGXS_UC_AHB_WRADDR_LSW_GEN2r_CLR(r) (r).uc_ahb_wraddr_lsw_gen2[0] = 0
#define BCMI_TSCF_XGXS_UC_AHB_WRADDR_LSW_GEN2r_SET(r,d) (r).uc_ahb_wraddr_lsw_gen2[0] = d
#define BCMI_TSCF_XGXS_UC_AHB_WRADDR_LSW_GEN2r_GET(r) (r).uc_ahb_wraddr_lsw_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_UC_AHB_WRADDR_LSW_GEN2r_MICRO_RA_WRADDR_LSWf_GET(r) (((r).uc_ahb_wraddr_lsw_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_UC_AHB_WRADDR_LSW_GEN2r_MICRO_RA_WRADDR_LSWf_SET(r,f) (r).uc_ahb_wraddr_lsw_gen2[0]=(((r).uc_ahb_wraddr_lsw_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_AHB_WRADDR_LSW_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_UC_AHB_WRADDR_LSW_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_AHB_WRADDR_LSW_GEN2r,(_r._uc_ahb_wraddr_lsw_gen2))
#define BCMI_TSCF_XGXS_WRITE_UC_AHB_WRADDR_LSW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_AHB_WRADDR_LSW_GEN2r,(_r._uc_ahb_wraddr_lsw_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_UC_AHB_WRADDR_LSW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_AHB_WRADDR_LSW_GEN2r,(_r._uc_ahb_wraddr_lsw_gen2))
#define BCMI_TSCF_XGXS_READLN_UC_AHB_WRADDR_LSW_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_AHB_WRADDR_LSW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_wraddr_lsw_gen2))
#define BCMI_TSCF_XGXS_WRITELN_UC_AHB_WRADDR_LSW_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_AHB_WRADDR_LSW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_wraddr_lsw_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_UC_AHB_WRADDR_LSW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_AHB_WRADDR_LSW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_ahb_wraddr_lsw_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_AHB_WRADDR_LSW_GEN2r BCMI_TSCF_XGXS_UC_AHB_WRADDR_LSW_GEN2r
#define UC_AHB_WRADDR_LSW_GEN2r_SIZE BCMI_TSCF_XGXS_UC_AHB_WRADDR_LSW_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_UC_AHB_WRADDR_LSW_GEN2r_t UC_AHB_WRADDR_LSW_GEN2r_t;
#define UC_AHB_WRADDR_LSW_GEN2r_CLR BCMI_TSCF_XGXS_UC_AHB_WRADDR_LSW_GEN2r_CLR
#define UC_AHB_WRADDR_LSW_GEN2r_SET BCMI_TSCF_XGXS_UC_AHB_WRADDR_LSW_GEN2r_SET
#define UC_AHB_WRADDR_LSW_GEN2r_GET BCMI_TSCF_XGXS_UC_AHB_WRADDR_LSW_GEN2r_GET
#define UC_AHB_WRADDR_LSW_GEN2r_MICRO_RA_WRADDR_LSWf_GET BCMI_TSCF_XGXS_UC_AHB_WRADDR_LSW_GEN2r_MICRO_RA_WRADDR_LSWf_GET
#define UC_AHB_WRADDR_LSW_GEN2r_MICRO_RA_WRADDR_LSWf_SET BCMI_TSCF_XGXS_UC_AHB_WRADDR_LSW_GEN2r_MICRO_RA_WRADDR_LSWf_SET
#define READ_UC_AHB_WRADDR_LSW_GEN2r BCMI_TSCF_XGXS_READ_UC_AHB_WRADDR_LSW_GEN2r
#define WRITE_UC_AHB_WRADDR_LSW_GEN2r BCMI_TSCF_XGXS_WRITE_UC_AHB_WRADDR_LSW_GEN2r
#define MODIFY_UC_AHB_WRADDR_LSW_GEN2r BCMI_TSCF_XGXS_MODIFY_UC_AHB_WRADDR_LSW_GEN2r
#define READLN_UC_AHB_WRADDR_LSW_GEN2r BCMI_TSCF_XGXS_READLN_UC_AHB_WRADDR_LSW_GEN2r
#define WRITELN_UC_AHB_WRADDR_LSW_GEN2r BCMI_TSCF_XGXS_WRITELN_UC_AHB_WRADDR_LSW_GEN2r
#define WRITEALL_UC_AHB_WRADDR_LSW_GEN2r BCMI_TSCF_XGXS_WRITEALL_UC_AHB_WRADDR_LSW_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_UC_AHB_WRADDR_LSW_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  UC_AHB_WRADDR_MSW_GEN2
 * BLOCKS:   MICRO_A_COM
 * REGADDR:  0xd205
 * DEVAD:    1
 * DESC:     rmi to ahb write address MSW (bits 31:16) register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_RA_WRADDR_MSW These bits are used to generate the upper 16-bits of the address on the AHB-Lite bus during write transactions
 */
#define BCMI_TSCF_XGXS_UC_AHB_WRADDR_MSW_GEN2r (0x0001d205 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_UC_AHB_WRADDR_MSW_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program UC_AHB_WRADDR_MSW_GEN2.
 */
typedef union BCMI_TSCF_XGXS_UC_AHB_WRADDR_MSW_GEN2r_s {
	uint32_t v[1];
	uint32_t uc_ahb_wraddr_msw_gen2[1];
	uint32_t _uc_ahb_wraddr_msw_gen2;
} BCMI_TSCF_XGXS_UC_AHB_WRADDR_MSW_GEN2r_t;

#define BCMI_TSCF_XGXS_UC_AHB_WRADDR_MSW_GEN2r_CLR(r) (r).uc_ahb_wraddr_msw_gen2[0] = 0
#define BCMI_TSCF_XGXS_UC_AHB_WRADDR_MSW_GEN2r_SET(r,d) (r).uc_ahb_wraddr_msw_gen2[0] = d
#define BCMI_TSCF_XGXS_UC_AHB_WRADDR_MSW_GEN2r_GET(r) (r).uc_ahb_wraddr_msw_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_UC_AHB_WRADDR_MSW_GEN2r_MICRO_RA_WRADDR_MSWf_GET(r) (((r).uc_ahb_wraddr_msw_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_UC_AHB_WRADDR_MSW_GEN2r_MICRO_RA_WRADDR_MSWf_SET(r,f) (r).uc_ahb_wraddr_msw_gen2[0]=(((r).uc_ahb_wraddr_msw_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_AHB_WRADDR_MSW_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_UC_AHB_WRADDR_MSW_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_AHB_WRADDR_MSW_GEN2r,(_r._uc_ahb_wraddr_msw_gen2))
#define BCMI_TSCF_XGXS_WRITE_UC_AHB_WRADDR_MSW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_AHB_WRADDR_MSW_GEN2r,(_r._uc_ahb_wraddr_msw_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_UC_AHB_WRADDR_MSW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_AHB_WRADDR_MSW_GEN2r,(_r._uc_ahb_wraddr_msw_gen2))
#define BCMI_TSCF_XGXS_READLN_UC_AHB_WRADDR_MSW_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_AHB_WRADDR_MSW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_wraddr_msw_gen2))
#define BCMI_TSCF_XGXS_WRITELN_UC_AHB_WRADDR_MSW_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_AHB_WRADDR_MSW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_wraddr_msw_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_UC_AHB_WRADDR_MSW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_AHB_WRADDR_MSW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_ahb_wraddr_msw_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_AHB_WRADDR_MSW_GEN2r BCMI_TSCF_XGXS_UC_AHB_WRADDR_MSW_GEN2r
#define UC_AHB_WRADDR_MSW_GEN2r_SIZE BCMI_TSCF_XGXS_UC_AHB_WRADDR_MSW_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_UC_AHB_WRADDR_MSW_GEN2r_t UC_AHB_WRADDR_MSW_GEN2r_t;
#define UC_AHB_WRADDR_MSW_GEN2r_CLR BCMI_TSCF_XGXS_UC_AHB_WRADDR_MSW_GEN2r_CLR
#define UC_AHB_WRADDR_MSW_GEN2r_SET BCMI_TSCF_XGXS_UC_AHB_WRADDR_MSW_GEN2r_SET
#define UC_AHB_WRADDR_MSW_GEN2r_GET BCMI_TSCF_XGXS_UC_AHB_WRADDR_MSW_GEN2r_GET
#define UC_AHB_WRADDR_MSW_GEN2r_MICRO_RA_WRADDR_MSWf_GET BCMI_TSCF_XGXS_UC_AHB_WRADDR_MSW_GEN2r_MICRO_RA_WRADDR_MSWf_GET
#define UC_AHB_WRADDR_MSW_GEN2r_MICRO_RA_WRADDR_MSWf_SET BCMI_TSCF_XGXS_UC_AHB_WRADDR_MSW_GEN2r_MICRO_RA_WRADDR_MSWf_SET
#define READ_UC_AHB_WRADDR_MSW_GEN2r BCMI_TSCF_XGXS_READ_UC_AHB_WRADDR_MSW_GEN2r
#define WRITE_UC_AHB_WRADDR_MSW_GEN2r BCMI_TSCF_XGXS_WRITE_UC_AHB_WRADDR_MSW_GEN2r
#define MODIFY_UC_AHB_WRADDR_MSW_GEN2r BCMI_TSCF_XGXS_MODIFY_UC_AHB_WRADDR_MSW_GEN2r
#define READLN_UC_AHB_WRADDR_MSW_GEN2r BCMI_TSCF_XGXS_READLN_UC_AHB_WRADDR_MSW_GEN2r
#define WRITELN_UC_AHB_WRADDR_MSW_GEN2r BCMI_TSCF_XGXS_WRITELN_UC_AHB_WRADDR_MSW_GEN2r
#define WRITEALL_UC_AHB_WRADDR_MSW_GEN2r BCMI_TSCF_XGXS_WRITEALL_UC_AHB_WRADDR_MSW_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_UC_AHB_WRADDR_MSW_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  UC_AHB_WRDATA_LSW_GEN2
 * BLOCKS:   MICRO_A_COM
 * REGADDR:  0xd206
 * DEVAD:    1
 * DESC:     rmi to ahb write data LSW (bits 15:0) register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_RA_WRDATA_LSW These bits are used to generate the lower 16-bits of the data on the AHB-Lite bus during write transactionsWrite transaction on the AHB-Lite is initiated when this register is written
 */
#define BCMI_TSCF_XGXS_UC_AHB_WRDATA_LSW_GEN2r (0x0001d206 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_UC_AHB_WRDATA_LSW_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program UC_AHB_WRDATA_LSW_GEN2.
 */
typedef union BCMI_TSCF_XGXS_UC_AHB_WRDATA_LSW_GEN2r_s {
	uint32_t v[1];
	uint32_t uc_ahb_wrdata_lsw_gen2[1];
	uint32_t _uc_ahb_wrdata_lsw_gen2;
} BCMI_TSCF_XGXS_UC_AHB_WRDATA_LSW_GEN2r_t;

#define BCMI_TSCF_XGXS_UC_AHB_WRDATA_LSW_GEN2r_CLR(r) (r).uc_ahb_wrdata_lsw_gen2[0] = 0
#define BCMI_TSCF_XGXS_UC_AHB_WRDATA_LSW_GEN2r_SET(r,d) (r).uc_ahb_wrdata_lsw_gen2[0] = d
#define BCMI_TSCF_XGXS_UC_AHB_WRDATA_LSW_GEN2r_GET(r) (r).uc_ahb_wrdata_lsw_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_UC_AHB_WRDATA_LSW_GEN2r_MICRO_RA_WRDATA_LSWf_GET(r) (((r).uc_ahb_wrdata_lsw_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_UC_AHB_WRDATA_LSW_GEN2r_MICRO_RA_WRDATA_LSWf_SET(r,f) (r).uc_ahb_wrdata_lsw_gen2[0]=(((r).uc_ahb_wrdata_lsw_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_AHB_WRDATA_LSW_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_UC_AHB_WRDATA_LSW_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_AHB_WRDATA_LSW_GEN2r,(_r._uc_ahb_wrdata_lsw_gen2))
#define BCMI_TSCF_XGXS_WRITE_UC_AHB_WRDATA_LSW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_AHB_WRDATA_LSW_GEN2r,(_r._uc_ahb_wrdata_lsw_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_UC_AHB_WRDATA_LSW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_AHB_WRDATA_LSW_GEN2r,(_r._uc_ahb_wrdata_lsw_gen2))
#define BCMI_TSCF_XGXS_READLN_UC_AHB_WRDATA_LSW_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_AHB_WRDATA_LSW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_wrdata_lsw_gen2))
#define BCMI_TSCF_XGXS_WRITELN_UC_AHB_WRDATA_LSW_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_AHB_WRDATA_LSW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_wrdata_lsw_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_UC_AHB_WRDATA_LSW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_AHB_WRDATA_LSW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_ahb_wrdata_lsw_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_AHB_WRDATA_LSW_GEN2r BCMI_TSCF_XGXS_UC_AHB_WRDATA_LSW_GEN2r
#define UC_AHB_WRDATA_LSW_GEN2r_SIZE BCMI_TSCF_XGXS_UC_AHB_WRDATA_LSW_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_UC_AHB_WRDATA_LSW_GEN2r_t UC_AHB_WRDATA_LSW_GEN2r_t;
#define UC_AHB_WRDATA_LSW_GEN2r_CLR BCMI_TSCF_XGXS_UC_AHB_WRDATA_LSW_GEN2r_CLR
#define UC_AHB_WRDATA_LSW_GEN2r_SET BCMI_TSCF_XGXS_UC_AHB_WRDATA_LSW_GEN2r_SET
#define UC_AHB_WRDATA_LSW_GEN2r_GET BCMI_TSCF_XGXS_UC_AHB_WRDATA_LSW_GEN2r_GET
#define UC_AHB_WRDATA_LSW_GEN2r_MICRO_RA_WRDATA_LSWf_GET BCMI_TSCF_XGXS_UC_AHB_WRDATA_LSW_GEN2r_MICRO_RA_WRDATA_LSWf_GET
#define UC_AHB_WRDATA_LSW_GEN2r_MICRO_RA_WRDATA_LSWf_SET BCMI_TSCF_XGXS_UC_AHB_WRDATA_LSW_GEN2r_MICRO_RA_WRDATA_LSWf_SET
#define READ_UC_AHB_WRDATA_LSW_GEN2r BCMI_TSCF_XGXS_READ_UC_AHB_WRDATA_LSW_GEN2r
#define WRITE_UC_AHB_WRDATA_LSW_GEN2r BCMI_TSCF_XGXS_WRITE_UC_AHB_WRDATA_LSW_GEN2r
#define MODIFY_UC_AHB_WRDATA_LSW_GEN2r BCMI_TSCF_XGXS_MODIFY_UC_AHB_WRDATA_LSW_GEN2r
#define READLN_UC_AHB_WRDATA_LSW_GEN2r BCMI_TSCF_XGXS_READLN_UC_AHB_WRDATA_LSW_GEN2r
#define WRITELN_UC_AHB_WRDATA_LSW_GEN2r BCMI_TSCF_XGXS_WRITELN_UC_AHB_WRDATA_LSW_GEN2r
#define WRITEALL_UC_AHB_WRDATA_LSW_GEN2r BCMI_TSCF_XGXS_WRITEALL_UC_AHB_WRDATA_LSW_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_UC_AHB_WRDATA_LSW_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  UC_AHB_WRDATA_MSW_GEN2
 * BLOCKS:   MICRO_A_COM
 * REGADDR:  0xd207
 * DEVAD:    1
 * DESC:     rmi to ahb write data MSW (bits 31:16) register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_RA_WRDATA_MSW These bits are used  to generate the upper 16-bits of the data on the AHB-Lite bus during write transactions
 */
#define BCMI_TSCF_XGXS_UC_AHB_WRDATA_MSW_GEN2r (0x0001d207 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_UC_AHB_WRDATA_MSW_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program UC_AHB_WRDATA_MSW_GEN2.
 */
typedef union BCMI_TSCF_XGXS_UC_AHB_WRDATA_MSW_GEN2r_s {
	uint32_t v[1];
	uint32_t uc_ahb_wrdata_msw_gen2[1];
	uint32_t _uc_ahb_wrdata_msw_gen2;
} BCMI_TSCF_XGXS_UC_AHB_WRDATA_MSW_GEN2r_t;

#define BCMI_TSCF_XGXS_UC_AHB_WRDATA_MSW_GEN2r_CLR(r) (r).uc_ahb_wrdata_msw_gen2[0] = 0
#define BCMI_TSCF_XGXS_UC_AHB_WRDATA_MSW_GEN2r_SET(r,d) (r).uc_ahb_wrdata_msw_gen2[0] = d
#define BCMI_TSCF_XGXS_UC_AHB_WRDATA_MSW_GEN2r_GET(r) (r).uc_ahb_wrdata_msw_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_UC_AHB_WRDATA_MSW_GEN2r_MICRO_RA_WRDATA_MSWf_GET(r) (((r).uc_ahb_wrdata_msw_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_UC_AHB_WRDATA_MSW_GEN2r_MICRO_RA_WRDATA_MSWf_SET(r,f) (r).uc_ahb_wrdata_msw_gen2[0]=(((r).uc_ahb_wrdata_msw_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_AHB_WRDATA_MSW_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_UC_AHB_WRDATA_MSW_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_AHB_WRDATA_MSW_GEN2r,(_r._uc_ahb_wrdata_msw_gen2))
#define BCMI_TSCF_XGXS_WRITE_UC_AHB_WRDATA_MSW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_AHB_WRDATA_MSW_GEN2r,(_r._uc_ahb_wrdata_msw_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_UC_AHB_WRDATA_MSW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_AHB_WRDATA_MSW_GEN2r,(_r._uc_ahb_wrdata_msw_gen2))
#define BCMI_TSCF_XGXS_READLN_UC_AHB_WRDATA_MSW_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_AHB_WRDATA_MSW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_wrdata_msw_gen2))
#define BCMI_TSCF_XGXS_WRITELN_UC_AHB_WRDATA_MSW_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_AHB_WRDATA_MSW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_wrdata_msw_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_UC_AHB_WRDATA_MSW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_AHB_WRDATA_MSW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_ahb_wrdata_msw_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_AHB_WRDATA_MSW_GEN2r BCMI_TSCF_XGXS_UC_AHB_WRDATA_MSW_GEN2r
#define UC_AHB_WRDATA_MSW_GEN2r_SIZE BCMI_TSCF_XGXS_UC_AHB_WRDATA_MSW_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_UC_AHB_WRDATA_MSW_GEN2r_t UC_AHB_WRDATA_MSW_GEN2r_t;
#define UC_AHB_WRDATA_MSW_GEN2r_CLR BCMI_TSCF_XGXS_UC_AHB_WRDATA_MSW_GEN2r_CLR
#define UC_AHB_WRDATA_MSW_GEN2r_SET BCMI_TSCF_XGXS_UC_AHB_WRDATA_MSW_GEN2r_SET
#define UC_AHB_WRDATA_MSW_GEN2r_GET BCMI_TSCF_XGXS_UC_AHB_WRDATA_MSW_GEN2r_GET
#define UC_AHB_WRDATA_MSW_GEN2r_MICRO_RA_WRDATA_MSWf_GET BCMI_TSCF_XGXS_UC_AHB_WRDATA_MSW_GEN2r_MICRO_RA_WRDATA_MSWf_GET
#define UC_AHB_WRDATA_MSW_GEN2r_MICRO_RA_WRDATA_MSWf_SET BCMI_TSCF_XGXS_UC_AHB_WRDATA_MSW_GEN2r_MICRO_RA_WRDATA_MSWf_SET
#define READ_UC_AHB_WRDATA_MSW_GEN2r BCMI_TSCF_XGXS_READ_UC_AHB_WRDATA_MSW_GEN2r
#define WRITE_UC_AHB_WRDATA_MSW_GEN2r BCMI_TSCF_XGXS_WRITE_UC_AHB_WRDATA_MSW_GEN2r
#define MODIFY_UC_AHB_WRDATA_MSW_GEN2r BCMI_TSCF_XGXS_MODIFY_UC_AHB_WRDATA_MSW_GEN2r
#define READLN_UC_AHB_WRDATA_MSW_GEN2r BCMI_TSCF_XGXS_READLN_UC_AHB_WRDATA_MSW_GEN2r
#define WRITELN_UC_AHB_WRDATA_MSW_GEN2r BCMI_TSCF_XGXS_WRITELN_UC_AHB_WRDATA_MSW_GEN2r
#define WRITEALL_UC_AHB_WRDATA_MSW_GEN2r BCMI_TSCF_XGXS_WRITEALL_UC_AHB_WRDATA_MSW_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_UC_AHB_WRDATA_MSW_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  UC_AHB_RDADDR_LSW_GEN2
 * BLOCKS:   MICRO_A_COM
 * REGADDR:  0xd208
 * DEVAD:    1
 * DESC:     rmi to ahb read address LSW (bits 15:0) register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_RA_RDADDR_LSW These bits are used to generate the lower 16-bits of the address on the AHB-Lite bus during read transactionsbit 0 is not used during 16-bit transactions andbits[1:0] are not used during 32-bit transactionsRead transaction is initiated on the AHB-Lite when this register is written
 */
#define BCMI_TSCF_XGXS_UC_AHB_RDADDR_LSW_GEN2r (0x0001d208 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_UC_AHB_RDADDR_LSW_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program UC_AHB_RDADDR_LSW_GEN2.
 */
typedef union BCMI_TSCF_XGXS_UC_AHB_RDADDR_LSW_GEN2r_s {
	uint32_t v[1];
	uint32_t uc_ahb_rdaddr_lsw_gen2[1];
	uint32_t _uc_ahb_rdaddr_lsw_gen2;
} BCMI_TSCF_XGXS_UC_AHB_RDADDR_LSW_GEN2r_t;

#define BCMI_TSCF_XGXS_UC_AHB_RDADDR_LSW_GEN2r_CLR(r) (r).uc_ahb_rdaddr_lsw_gen2[0] = 0
#define BCMI_TSCF_XGXS_UC_AHB_RDADDR_LSW_GEN2r_SET(r,d) (r).uc_ahb_rdaddr_lsw_gen2[0] = d
#define BCMI_TSCF_XGXS_UC_AHB_RDADDR_LSW_GEN2r_GET(r) (r).uc_ahb_rdaddr_lsw_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_UC_AHB_RDADDR_LSW_GEN2r_MICRO_RA_RDADDR_LSWf_GET(r) (((r).uc_ahb_rdaddr_lsw_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_UC_AHB_RDADDR_LSW_GEN2r_MICRO_RA_RDADDR_LSWf_SET(r,f) (r).uc_ahb_rdaddr_lsw_gen2[0]=(((r).uc_ahb_rdaddr_lsw_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_AHB_RDADDR_LSW_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_UC_AHB_RDADDR_LSW_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_AHB_RDADDR_LSW_GEN2r,(_r._uc_ahb_rdaddr_lsw_gen2))
#define BCMI_TSCF_XGXS_WRITE_UC_AHB_RDADDR_LSW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_AHB_RDADDR_LSW_GEN2r,(_r._uc_ahb_rdaddr_lsw_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_UC_AHB_RDADDR_LSW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_AHB_RDADDR_LSW_GEN2r,(_r._uc_ahb_rdaddr_lsw_gen2))
#define BCMI_TSCF_XGXS_READLN_UC_AHB_RDADDR_LSW_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_AHB_RDADDR_LSW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_rdaddr_lsw_gen2))
#define BCMI_TSCF_XGXS_WRITELN_UC_AHB_RDADDR_LSW_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_AHB_RDADDR_LSW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_rdaddr_lsw_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_UC_AHB_RDADDR_LSW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_AHB_RDADDR_LSW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_ahb_rdaddr_lsw_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_AHB_RDADDR_LSW_GEN2r BCMI_TSCF_XGXS_UC_AHB_RDADDR_LSW_GEN2r
#define UC_AHB_RDADDR_LSW_GEN2r_SIZE BCMI_TSCF_XGXS_UC_AHB_RDADDR_LSW_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_UC_AHB_RDADDR_LSW_GEN2r_t UC_AHB_RDADDR_LSW_GEN2r_t;
#define UC_AHB_RDADDR_LSW_GEN2r_CLR BCMI_TSCF_XGXS_UC_AHB_RDADDR_LSW_GEN2r_CLR
#define UC_AHB_RDADDR_LSW_GEN2r_SET BCMI_TSCF_XGXS_UC_AHB_RDADDR_LSW_GEN2r_SET
#define UC_AHB_RDADDR_LSW_GEN2r_GET BCMI_TSCF_XGXS_UC_AHB_RDADDR_LSW_GEN2r_GET
#define UC_AHB_RDADDR_LSW_GEN2r_MICRO_RA_RDADDR_LSWf_GET BCMI_TSCF_XGXS_UC_AHB_RDADDR_LSW_GEN2r_MICRO_RA_RDADDR_LSWf_GET
#define UC_AHB_RDADDR_LSW_GEN2r_MICRO_RA_RDADDR_LSWf_SET BCMI_TSCF_XGXS_UC_AHB_RDADDR_LSW_GEN2r_MICRO_RA_RDADDR_LSWf_SET
#define READ_UC_AHB_RDADDR_LSW_GEN2r BCMI_TSCF_XGXS_READ_UC_AHB_RDADDR_LSW_GEN2r
#define WRITE_UC_AHB_RDADDR_LSW_GEN2r BCMI_TSCF_XGXS_WRITE_UC_AHB_RDADDR_LSW_GEN2r
#define MODIFY_UC_AHB_RDADDR_LSW_GEN2r BCMI_TSCF_XGXS_MODIFY_UC_AHB_RDADDR_LSW_GEN2r
#define READLN_UC_AHB_RDADDR_LSW_GEN2r BCMI_TSCF_XGXS_READLN_UC_AHB_RDADDR_LSW_GEN2r
#define WRITELN_UC_AHB_RDADDR_LSW_GEN2r BCMI_TSCF_XGXS_WRITELN_UC_AHB_RDADDR_LSW_GEN2r
#define WRITEALL_UC_AHB_RDADDR_LSW_GEN2r BCMI_TSCF_XGXS_WRITEALL_UC_AHB_RDADDR_LSW_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_UC_AHB_RDADDR_LSW_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  UC_AHB_RDADDR_MSW_GEN2
 * BLOCKS:   MICRO_A_COM
 * REGADDR:  0xd209
 * DEVAD:    1
 * DESC:     rmi to ahb read address MSW (bits 31:16) register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_RA_RDADDR_MSW These bits are used by to generate the upper 16-bits of the address on the AHB-Lite bus during read transactions
 */
#define BCMI_TSCF_XGXS_UC_AHB_RDADDR_MSW_GEN2r (0x0001d209 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_UC_AHB_RDADDR_MSW_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program UC_AHB_RDADDR_MSW_GEN2.
 */
typedef union BCMI_TSCF_XGXS_UC_AHB_RDADDR_MSW_GEN2r_s {
	uint32_t v[1];
	uint32_t uc_ahb_rdaddr_msw_gen2[1];
	uint32_t _uc_ahb_rdaddr_msw_gen2;
} BCMI_TSCF_XGXS_UC_AHB_RDADDR_MSW_GEN2r_t;

#define BCMI_TSCF_XGXS_UC_AHB_RDADDR_MSW_GEN2r_CLR(r) (r).uc_ahb_rdaddr_msw_gen2[0] = 0
#define BCMI_TSCF_XGXS_UC_AHB_RDADDR_MSW_GEN2r_SET(r,d) (r).uc_ahb_rdaddr_msw_gen2[0] = d
#define BCMI_TSCF_XGXS_UC_AHB_RDADDR_MSW_GEN2r_GET(r) (r).uc_ahb_rdaddr_msw_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_UC_AHB_RDADDR_MSW_GEN2r_MICRO_RA_RDADDR_MSWf_GET(r) (((r).uc_ahb_rdaddr_msw_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_UC_AHB_RDADDR_MSW_GEN2r_MICRO_RA_RDADDR_MSWf_SET(r,f) (r).uc_ahb_rdaddr_msw_gen2[0]=(((r).uc_ahb_rdaddr_msw_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_AHB_RDADDR_MSW_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_UC_AHB_RDADDR_MSW_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_AHB_RDADDR_MSW_GEN2r,(_r._uc_ahb_rdaddr_msw_gen2))
#define BCMI_TSCF_XGXS_WRITE_UC_AHB_RDADDR_MSW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_AHB_RDADDR_MSW_GEN2r,(_r._uc_ahb_rdaddr_msw_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_UC_AHB_RDADDR_MSW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_AHB_RDADDR_MSW_GEN2r,(_r._uc_ahb_rdaddr_msw_gen2))
#define BCMI_TSCF_XGXS_READLN_UC_AHB_RDADDR_MSW_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_AHB_RDADDR_MSW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_rdaddr_msw_gen2))
#define BCMI_TSCF_XGXS_WRITELN_UC_AHB_RDADDR_MSW_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_AHB_RDADDR_MSW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_rdaddr_msw_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_UC_AHB_RDADDR_MSW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_AHB_RDADDR_MSW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_ahb_rdaddr_msw_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_AHB_RDADDR_MSW_GEN2r BCMI_TSCF_XGXS_UC_AHB_RDADDR_MSW_GEN2r
#define UC_AHB_RDADDR_MSW_GEN2r_SIZE BCMI_TSCF_XGXS_UC_AHB_RDADDR_MSW_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_UC_AHB_RDADDR_MSW_GEN2r_t UC_AHB_RDADDR_MSW_GEN2r_t;
#define UC_AHB_RDADDR_MSW_GEN2r_CLR BCMI_TSCF_XGXS_UC_AHB_RDADDR_MSW_GEN2r_CLR
#define UC_AHB_RDADDR_MSW_GEN2r_SET BCMI_TSCF_XGXS_UC_AHB_RDADDR_MSW_GEN2r_SET
#define UC_AHB_RDADDR_MSW_GEN2r_GET BCMI_TSCF_XGXS_UC_AHB_RDADDR_MSW_GEN2r_GET
#define UC_AHB_RDADDR_MSW_GEN2r_MICRO_RA_RDADDR_MSWf_GET BCMI_TSCF_XGXS_UC_AHB_RDADDR_MSW_GEN2r_MICRO_RA_RDADDR_MSWf_GET
#define UC_AHB_RDADDR_MSW_GEN2r_MICRO_RA_RDADDR_MSWf_SET BCMI_TSCF_XGXS_UC_AHB_RDADDR_MSW_GEN2r_MICRO_RA_RDADDR_MSWf_SET
#define READ_UC_AHB_RDADDR_MSW_GEN2r BCMI_TSCF_XGXS_READ_UC_AHB_RDADDR_MSW_GEN2r
#define WRITE_UC_AHB_RDADDR_MSW_GEN2r BCMI_TSCF_XGXS_WRITE_UC_AHB_RDADDR_MSW_GEN2r
#define MODIFY_UC_AHB_RDADDR_MSW_GEN2r BCMI_TSCF_XGXS_MODIFY_UC_AHB_RDADDR_MSW_GEN2r
#define READLN_UC_AHB_RDADDR_MSW_GEN2r BCMI_TSCF_XGXS_READLN_UC_AHB_RDADDR_MSW_GEN2r
#define WRITELN_UC_AHB_RDADDR_MSW_GEN2r BCMI_TSCF_XGXS_WRITELN_UC_AHB_RDADDR_MSW_GEN2r
#define WRITEALL_UC_AHB_RDADDR_MSW_GEN2r BCMI_TSCF_XGXS_WRITEALL_UC_AHB_RDADDR_MSW_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_UC_AHB_RDADDR_MSW_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  UC_AHB_RDDATA_LSW_GEN2
 * BLOCKS:   MICRO_A_COM
 * REGADDR:  0xd20a
 * DEVAD:    1
 * DESC:     rmi to ahb read data LSW (bits 15:0) register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MICRO_RA_RDDATA_LSW These are the lower 16-bits of the read data from the AHB-Lite slave deviceRead transaction is initiated on the AHB-Lite when this register is read
 */
#define BCMI_TSCF_XGXS_UC_AHB_RDDATA_LSW_GEN2r (0x0001d20a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_UC_AHB_RDDATA_LSW_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program UC_AHB_RDDATA_LSW_GEN2.
 */
typedef union BCMI_TSCF_XGXS_UC_AHB_RDDATA_LSW_GEN2r_s {
	uint32_t v[1];
	uint32_t uc_ahb_rddata_lsw_gen2[1];
	uint32_t _uc_ahb_rddata_lsw_gen2;
} BCMI_TSCF_XGXS_UC_AHB_RDDATA_LSW_GEN2r_t;

#define BCMI_TSCF_XGXS_UC_AHB_RDDATA_LSW_GEN2r_CLR(r) (r).uc_ahb_rddata_lsw_gen2[0] = 0
#define BCMI_TSCF_XGXS_UC_AHB_RDDATA_LSW_GEN2r_SET(r,d) (r).uc_ahb_rddata_lsw_gen2[0] = d
#define BCMI_TSCF_XGXS_UC_AHB_RDDATA_LSW_GEN2r_GET(r) (r).uc_ahb_rddata_lsw_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_UC_AHB_RDDATA_LSW_GEN2r_MICRO_RA_RDDATA_LSWf_GET(r) (((r).uc_ahb_rddata_lsw_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_UC_AHB_RDDATA_LSW_GEN2r_MICRO_RA_RDDATA_LSWf_SET(r,f) (r).uc_ahb_rddata_lsw_gen2[0]=(((r).uc_ahb_rddata_lsw_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_AHB_RDDATA_LSW_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_UC_AHB_RDDATA_LSW_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_AHB_RDDATA_LSW_GEN2r,(_r._uc_ahb_rddata_lsw_gen2))
#define BCMI_TSCF_XGXS_WRITE_UC_AHB_RDDATA_LSW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_AHB_RDDATA_LSW_GEN2r,(_r._uc_ahb_rddata_lsw_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_UC_AHB_RDDATA_LSW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_AHB_RDDATA_LSW_GEN2r,(_r._uc_ahb_rddata_lsw_gen2))
#define BCMI_TSCF_XGXS_READLN_UC_AHB_RDDATA_LSW_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_AHB_RDDATA_LSW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_rddata_lsw_gen2))
#define BCMI_TSCF_XGXS_WRITELN_UC_AHB_RDDATA_LSW_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_AHB_RDDATA_LSW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_rddata_lsw_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_UC_AHB_RDDATA_LSW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_AHB_RDDATA_LSW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_ahb_rddata_lsw_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_AHB_RDDATA_LSW_GEN2r BCMI_TSCF_XGXS_UC_AHB_RDDATA_LSW_GEN2r
#define UC_AHB_RDDATA_LSW_GEN2r_SIZE BCMI_TSCF_XGXS_UC_AHB_RDDATA_LSW_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_UC_AHB_RDDATA_LSW_GEN2r_t UC_AHB_RDDATA_LSW_GEN2r_t;
#define UC_AHB_RDDATA_LSW_GEN2r_CLR BCMI_TSCF_XGXS_UC_AHB_RDDATA_LSW_GEN2r_CLR
#define UC_AHB_RDDATA_LSW_GEN2r_SET BCMI_TSCF_XGXS_UC_AHB_RDDATA_LSW_GEN2r_SET
#define UC_AHB_RDDATA_LSW_GEN2r_GET BCMI_TSCF_XGXS_UC_AHB_RDDATA_LSW_GEN2r_GET
#define UC_AHB_RDDATA_LSW_GEN2r_MICRO_RA_RDDATA_LSWf_GET BCMI_TSCF_XGXS_UC_AHB_RDDATA_LSW_GEN2r_MICRO_RA_RDDATA_LSWf_GET
#define UC_AHB_RDDATA_LSW_GEN2r_MICRO_RA_RDDATA_LSWf_SET BCMI_TSCF_XGXS_UC_AHB_RDDATA_LSW_GEN2r_MICRO_RA_RDDATA_LSWf_SET
#define READ_UC_AHB_RDDATA_LSW_GEN2r BCMI_TSCF_XGXS_READ_UC_AHB_RDDATA_LSW_GEN2r
#define WRITE_UC_AHB_RDDATA_LSW_GEN2r BCMI_TSCF_XGXS_WRITE_UC_AHB_RDDATA_LSW_GEN2r
#define MODIFY_UC_AHB_RDDATA_LSW_GEN2r BCMI_TSCF_XGXS_MODIFY_UC_AHB_RDDATA_LSW_GEN2r
#define READLN_UC_AHB_RDDATA_LSW_GEN2r BCMI_TSCF_XGXS_READLN_UC_AHB_RDDATA_LSW_GEN2r
#define WRITELN_UC_AHB_RDDATA_LSW_GEN2r BCMI_TSCF_XGXS_WRITELN_UC_AHB_RDDATA_LSW_GEN2r
#define WRITEALL_UC_AHB_RDDATA_LSW_GEN2r BCMI_TSCF_XGXS_WRITEALL_UC_AHB_RDDATA_LSW_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_UC_AHB_RDDATA_LSW_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  UC_AHB_RDDATA_MSW_GEN2
 * BLOCKS:   MICRO_A_COM
 * REGADDR:  0xd20b
 * DEVAD:    1
 * DESC:     rmi to ahb read data MSW (bits 31:16) register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MICRO_RA_RDDATA_MSW These are the upper 16-bits of the read data from the AHB-Lite slave device
 */
#define BCMI_TSCF_XGXS_UC_AHB_RDDATA_MSW_GEN2r (0x0001d20b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_UC_AHB_RDDATA_MSW_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program UC_AHB_RDDATA_MSW_GEN2.
 */
typedef union BCMI_TSCF_XGXS_UC_AHB_RDDATA_MSW_GEN2r_s {
	uint32_t v[1];
	uint32_t uc_ahb_rddata_msw_gen2[1];
	uint32_t _uc_ahb_rddata_msw_gen2;
} BCMI_TSCF_XGXS_UC_AHB_RDDATA_MSW_GEN2r_t;

#define BCMI_TSCF_XGXS_UC_AHB_RDDATA_MSW_GEN2r_CLR(r) (r).uc_ahb_rddata_msw_gen2[0] = 0
#define BCMI_TSCF_XGXS_UC_AHB_RDDATA_MSW_GEN2r_SET(r,d) (r).uc_ahb_rddata_msw_gen2[0] = d
#define BCMI_TSCF_XGXS_UC_AHB_RDDATA_MSW_GEN2r_GET(r) (r).uc_ahb_rddata_msw_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_UC_AHB_RDDATA_MSW_GEN2r_MICRO_RA_RDDATA_MSWf_GET(r) (((r).uc_ahb_rddata_msw_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_UC_AHB_RDDATA_MSW_GEN2r_MICRO_RA_RDDATA_MSWf_SET(r,f) (r).uc_ahb_rddata_msw_gen2[0]=(((r).uc_ahb_rddata_msw_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_AHB_RDDATA_MSW_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_UC_AHB_RDDATA_MSW_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_AHB_RDDATA_MSW_GEN2r,(_r._uc_ahb_rddata_msw_gen2))
#define BCMI_TSCF_XGXS_WRITE_UC_AHB_RDDATA_MSW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_AHB_RDDATA_MSW_GEN2r,(_r._uc_ahb_rddata_msw_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_UC_AHB_RDDATA_MSW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_AHB_RDDATA_MSW_GEN2r,(_r._uc_ahb_rddata_msw_gen2))
#define BCMI_TSCF_XGXS_READLN_UC_AHB_RDDATA_MSW_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_AHB_RDDATA_MSW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_rddata_msw_gen2))
#define BCMI_TSCF_XGXS_WRITELN_UC_AHB_RDDATA_MSW_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_AHB_RDDATA_MSW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_rddata_msw_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_UC_AHB_RDDATA_MSW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_AHB_RDDATA_MSW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_ahb_rddata_msw_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_AHB_RDDATA_MSW_GEN2r BCMI_TSCF_XGXS_UC_AHB_RDDATA_MSW_GEN2r
#define UC_AHB_RDDATA_MSW_GEN2r_SIZE BCMI_TSCF_XGXS_UC_AHB_RDDATA_MSW_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_UC_AHB_RDDATA_MSW_GEN2r_t UC_AHB_RDDATA_MSW_GEN2r_t;
#define UC_AHB_RDDATA_MSW_GEN2r_CLR BCMI_TSCF_XGXS_UC_AHB_RDDATA_MSW_GEN2r_CLR
#define UC_AHB_RDDATA_MSW_GEN2r_SET BCMI_TSCF_XGXS_UC_AHB_RDDATA_MSW_GEN2r_SET
#define UC_AHB_RDDATA_MSW_GEN2r_GET BCMI_TSCF_XGXS_UC_AHB_RDDATA_MSW_GEN2r_GET
#define UC_AHB_RDDATA_MSW_GEN2r_MICRO_RA_RDDATA_MSWf_GET BCMI_TSCF_XGXS_UC_AHB_RDDATA_MSW_GEN2r_MICRO_RA_RDDATA_MSWf_GET
#define UC_AHB_RDDATA_MSW_GEN2r_MICRO_RA_RDDATA_MSWf_SET BCMI_TSCF_XGXS_UC_AHB_RDDATA_MSW_GEN2r_MICRO_RA_RDDATA_MSWf_SET
#define READ_UC_AHB_RDDATA_MSW_GEN2r BCMI_TSCF_XGXS_READ_UC_AHB_RDDATA_MSW_GEN2r
#define WRITE_UC_AHB_RDDATA_MSW_GEN2r BCMI_TSCF_XGXS_WRITE_UC_AHB_RDDATA_MSW_GEN2r
#define MODIFY_UC_AHB_RDDATA_MSW_GEN2r BCMI_TSCF_XGXS_MODIFY_UC_AHB_RDDATA_MSW_GEN2r
#define READLN_UC_AHB_RDDATA_MSW_GEN2r BCMI_TSCF_XGXS_READLN_UC_AHB_RDDATA_MSW_GEN2r
#define WRITELN_UC_AHB_RDDATA_MSW_GEN2r BCMI_TSCF_XGXS_WRITELN_UC_AHB_RDDATA_MSW_GEN2r
#define WRITEALL_UC_AHB_RDDATA_MSW_GEN2r BCMI_TSCF_XGXS_WRITEALL_UC_AHB_RDDATA_MSW_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_UC_AHB_RDDATA_MSW_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  UC_PRAMIF_CTL0_GEN2
 * BLOCKS:   MICRO_A_COM
 * REGADDR:  0xd20c
 * DEVAD:    1
 * DESC:     pram i/f to ahb control registers 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_PRAMIF_EN  When this bit is set, pram if interface can generate write transactions on theAHB-Lite bus, the start address of the transaction is specifieldin the pramif_ahb_wraddr_lsw and pramif_ahb_wraddr_msw fields
 */
#define BCMI_TSCF_XGXS_UC_PRAMIF_CTL0_GEN2r (0x0001d20c | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_UC_PRAMIF_CTL0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program UC_PRAMIF_CTL0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_UC_PRAMIF_CTL0_GEN2r_s {
	uint32_t v[1];
	uint32_t uc_pramif_ctl0_gen2[1];
	uint32_t _uc_pramif_ctl0_gen2;
} BCMI_TSCF_XGXS_UC_PRAMIF_CTL0_GEN2r_t;

#define BCMI_TSCF_XGXS_UC_PRAMIF_CTL0_GEN2r_CLR(r) (r).uc_pramif_ctl0_gen2[0] = 0
#define BCMI_TSCF_XGXS_UC_PRAMIF_CTL0_GEN2r_SET(r,d) (r).uc_pramif_ctl0_gen2[0] = d
#define BCMI_TSCF_XGXS_UC_PRAMIF_CTL0_GEN2r_GET(r) (r).uc_pramif_ctl0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_UC_PRAMIF_CTL0_GEN2r_MICRO_PRAMIF_ENf_GET(r) (((r).uc_pramif_ctl0_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_UC_PRAMIF_CTL0_GEN2r_MICRO_PRAMIF_ENf_SET(r,f) (r).uc_pramif_ctl0_gen2[0]=(((r).uc_pramif_ctl0_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access UC_PRAMIF_CTL0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_UC_PRAMIF_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_PRAMIF_CTL0_GEN2r,(_r._uc_pramif_ctl0_gen2))
#define BCMI_TSCF_XGXS_WRITE_UC_PRAMIF_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_PRAMIF_CTL0_GEN2r,(_r._uc_pramif_ctl0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_UC_PRAMIF_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_PRAMIF_CTL0_GEN2r,(_r._uc_pramif_ctl0_gen2))
#define BCMI_TSCF_XGXS_READLN_UC_PRAMIF_CTL0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_PRAMIF_CTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_pramif_ctl0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_UC_PRAMIF_CTL0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_PRAMIF_CTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_pramif_ctl0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_UC_PRAMIF_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_PRAMIF_CTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_pramif_ctl0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_PRAMIF_CTL0_GEN2r BCMI_TSCF_XGXS_UC_PRAMIF_CTL0_GEN2r
#define UC_PRAMIF_CTL0_GEN2r_SIZE BCMI_TSCF_XGXS_UC_PRAMIF_CTL0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_UC_PRAMIF_CTL0_GEN2r_t UC_PRAMIF_CTL0_GEN2r_t;
#define UC_PRAMIF_CTL0_GEN2r_CLR BCMI_TSCF_XGXS_UC_PRAMIF_CTL0_GEN2r_CLR
#define UC_PRAMIF_CTL0_GEN2r_SET BCMI_TSCF_XGXS_UC_PRAMIF_CTL0_GEN2r_SET
#define UC_PRAMIF_CTL0_GEN2r_GET BCMI_TSCF_XGXS_UC_PRAMIF_CTL0_GEN2r_GET
#define UC_PRAMIF_CTL0_GEN2r_MICRO_PRAMIF_ENf_GET BCMI_TSCF_XGXS_UC_PRAMIF_CTL0_GEN2r_MICRO_PRAMIF_ENf_GET
#define UC_PRAMIF_CTL0_GEN2r_MICRO_PRAMIF_ENf_SET BCMI_TSCF_XGXS_UC_PRAMIF_CTL0_GEN2r_MICRO_PRAMIF_ENf_SET
#define READ_UC_PRAMIF_CTL0_GEN2r BCMI_TSCF_XGXS_READ_UC_PRAMIF_CTL0_GEN2r
#define WRITE_UC_PRAMIF_CTL0_GEN2r BCMI_TSCF_XGXS_WRITE_UC_PRAMIF_CTL0_GEN2r
#define MODIFY_UC_PRAMIF_CTL0_GEN2r BCMI_TSCF_XGXS_MODIFY_UC_PRAMIF_CTL0_GEN2r
#define READLN_UC_PRAMIF_CTL0_GEN2r BCMI_TSCF_XGXS_READLN_UC_PRAMIF_CTL0_GEN2r
#define WRITELN_UC_PRAMIF_CTL0_GEN2r BCMI_TSCF_XGXS_WRITELN_UC_PRAMIF_CTL0_GEN2r
#define WRITEALL_UC_PRAMIF_CTL0_GEN2r BCMI_TSCF_XGXS_WRITEALL_UC_PRAMIF_CTL0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_UC_PRAMIF_CTL0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  UC_PRAMIF_AHB_WRADDR_LSW_GEN2
 * BLOCKS:   MICRO_A_COM
 * REGADDR:  0xd20d
 * DEVAD:    1
 * DESC:     pram i/f to ahb write address LSW (bits 15:0) register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_PRAMIF_AHB_WRADDR_LSW These bits are used to generate the lower 14-bits of the address on the AHB-Lite bus during pram interface write transactionsbits[1:0] are not used for 32 transactions
 */
#define BCMI_TSCF_XGXS_UC_PRAMIF_AHB_WRADDR_LSW_GEN2r (0x0001d20d | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_UC_PRAMIF_AHB_WRADDR_LSW_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program UC_PRAMIF_AHB_WRADDR_LSW_GEN2.
 */
typedef union BCMI_TSCF_XGXS_UC_PRAMIF_AHB_WRADDR_LSW_GEN2r_s {
	uint32_t v[1];
	uint32_t uc_pramif_ahb_wraddr_lsw_gen2[1];
	uint32_t _uc_pramif_ahb_wraddr_lsw_gen2;
} BCMI_TSCF_XGXS_UC_PRAMIF_AHB_WRADDR_LSW_GEN2r_t;

#define BCMI_TSCF_XGXS_UC_PRAMIF_AHB_WRADDR_LSW_GEN2r_CLR(r) (r).uc_pramif_ahb_wraddr_lsw_gen2[0] = 0
#define BCMI_TSCF_XGXS_UC_PRAMIF_AHB_WRADDR_LSW_GEN2r_SET(r,d) (r).uc_pramif_ahb_wraddr_lsw_gen2[0] = d
#define BCMI_TSCF_XGXS_UC_PRAMIF_AHB_WRADDR_LSW_GEN2r_GET(r) (r).uc_pramif_ahb_wraddr_lsw_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_UC_PRAMIF_AHB_WRADDR_LSW_GEN2r_MICRO_PRAMIF_AHB_WRADDR_LSWf_GET(r) ((((r).uc_pramif_ahb_wraddr_lsw_gen2[0]) >> 2) & 0x3fff)
#define BCMI_TSCF_XGXS_UC_PRAMIF_AHB_WRADDR_LSW_GEN2r_MICRO_PRAMIF_AHB_WRADDR_LSWf_SET(r,f) (r).uc_pramif_ahb_wraddr_lsw_gen2[0]=(((r).uc_pramif_ahb_wraddr_lsw_gen2[0] & ~((uint32_t)0x3fff << 2)) | ((((uint32_t)f) & 0x3fff) << 2)) | (16383 << (16 + 2))

/*
 * These macros can be used to access UC_PRAMIF_AHB_WRADDR_LSW_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_UC_PRAMIF_AHB_WRADDR_LSW_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_PRAMIF_AHB_WRADDR_LSW_GEN2r,(_r._uc_pramif_ahb_wraddr_lsw_gen2))
#define BCMI_TSCF_XGXS_WRITE_UC_PRAMIF_AHB_WRADDR_LSW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_PRAMIF_AHB_WRADDR_LSW_GEN2r,(_r._uc_pramif_ahb_wraddr_lsw_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_UC_PRAMIF_AHB_WRADDR_LSW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_PRAMIF_AHB_WRADDR_LSW_GEN2r,(_r._uc_pramif_ahb_wraddr_lsw_gen2))
#define BCMI_TSCF_XGXS_READLN_UC_PRAMIF_AHB_WRADDR_LSW_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_PRAMIF_AHB_WRADDR_LSW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_pramif_ahb_wraddr_lsw_gen2))
#define BCMI_TSCF_XGXS_WRITELN_UC_PRAMIF_AHB_WRADDR_LSW_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_PRAMIF_AHB_WRADDR_LSW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_pramif_ahb_wraddr_lsw_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_UC_PRAMIF_AHB_WRADDR_LSW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_PRAMIF_AHB_WRADDR_LSW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_pramif_ahb_wraddr_lsw_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_PRAMIF_AHB_WRADDR_LSW_GEN2r BCMI_TSCF_XGXS_UC_PRAMIF_AHB_WRADDR_LSW_GEN2r
#define UC_PRAMIF_AHB_WRADDR_LSW_GEN2r_SIZE BCMI_TSCF_XGXS_UC_PRAMIF_AHB_WRADDR_LSW_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_UC_PRAMIF_AHB_WRADDR_LSW_GEN2r_t UC_PRAMIF_AHB_WRADDR_LSW_GEN2r_t;
#define UC_PRAMIF_AHB_WRADDR_LSW_GEN2r_CLR BCMI_TSCF_XGXS_UC_PRAMIF_AHB_WRADDR_LSW_GEN2r_CLR
#define UC_PRAMIF_AHB_WRADDR_LSW_GEN2r_SET BCMI_TSCF_XGXS_UC_PRAMIF_AHB_WRADDR_LSW_GEN2r_SET
#define UC_PRAMIF_AHB_WRADDR_LSW_GEN2r_GET BCMI_TSCF_XGXS_UC_PRAMIF_AHB_WRADDR_LSW_GEN2r_GET
#define UC_PRAMIF_AHB_WRADDR_LSW_GEN2r_MICRO_PRAMIF_AHB_WRADDR_LSWf_GET BCMI_TSCF_XGXS_UC_PRAMIF_AHB_WRADDR_LSW_GEN2r_MICRO_PRAMIF_AHB_WRADDR_LSWf_GET
#define UC_PRAMIF_AHB_WRADDR_LSW_GEN2r_MICRO_PRAMIF_AHB_WRADDR_LSWf_SET BCMI_TSCF_XGXS_UC_PRAMIF_AHB_WRADDR_LSW_GEN2r_MICRO_PRAMIF_AHB_WRADDR_LSWf_SET
#define READ_UC_PRAMIF_AHB_WRADDR_LSW_GEN2r BCMI_TSCF_XGXS_READ_UC_PRAMIF_AHB_WRADDR_LSW_GEN2r
#define WRITE_UC_PRAMIF_AHB_WRADDR_LSW_GEN2r BCMI_TSCF_XGXS_WRITE_UC_PRAMIF_AHB_WRADDR_LSW_GEN2r
#define MODIFY_UC_PRAMIF_AHB_WRADDR_LSW_GEN2r BCMI_TSCF_XGXS_MODIFY_UC_PRAMIF_AHB_WRADDR_LSW_GEN2r
#define READLN_UC_PRAMIF_AHB_WRADDR_LSW_GEN2r BCMI_TSCF_XGXS_READLN_UC_PRAMIF_AHB_WRADDR_LSW_GEN2r
#define WRITELN_UC_PRAMIF_AHB_WRADDR_LSW_GEN2r BCMI_TSCF_XGXS_WRITELN_UC_PRAMIF_AHB_WRADDR_LSW_GEN2r
#define WRITEALL_UC_PRAMIF_AHB_WRADDR_LSW_GEN2r BCMI_TSCF_XGXS_WRITEALL_UC_PRAMIF_AHB_WRADDR_LSW_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_UC_PRAMIF_AHB_WRADDR_LSW_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  UC_PRAMIF_AHB_WRADDR_MSW_GEN2
 * BLOCKS:   MICRO_A_COM
 * REGADDR:  0xd20e
 * DEVAD:    1
 * DESC:     pram i/f to ahb write address MSW (bits 31:16) register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_PRAMIF_AHB_WRADDR_MSW These bits are used to generate the upper 16-bits of the address on the AHB-Lite bus during pram interface write transactions
 */
#define BCMI_TSCF_XGXS_UC_PRAMIF_AHB_WRADDR_MSW_GEN2r (0x0001d20e | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_UC_PRAMIF_AHB_WRADDR_MSW_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program UC_PRAMIF_AHB_WRADDR_MSW_GEN2.
 */
typedef union BCMI_TSCF_XGXS_UC_PRAMIF_AHB_WRADDR_MSW_GEN2r_s {
	uint32_t v[1];
	uint32_t uc_pramif_ahb_wraddr_msw_gen2[1];
	uint32_t _uc_pramif_ahb_wraddr_msw_gen2;
} BCMI_TSCF_XGXS_UC_PRAMIF_AHB_WRADDR_MSW_GEN2r_t;

#define BCMI_TSCF_XGXS_UC_PRAMIF_AHB_WRADDR_MSW_GEN2r_CLR(r) (r).uc_pramif_ahb_wraddr_msw_gen2[0] = 0
#define BCMI_TSCF_XGXS_UC_PRAMIF_AHB_WRADDR_MSW_GEN2r_SET(r,d) (r).uc_pramif_ahb_wraddr_msw_gen2[0] = d
#define BCMI_TSCF_XGXS_UC_PRAMIF_AHB_WRADDR_MSW_GEN2r_GET(r) (r).uc_pramif_ahb_wraddr_msw_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_UC_PRAMIF_AHB_WRADDR_MSW_GEN2r_MICRO_PRAMIF_AHB_WRADDR_MSWf_GET(r) (((r).uc_pramif_ahb_wraddr_msw_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_UC_PRAMIF_AHB_WRADDR_MSW_GEN2r_MICRO_PRAMIF_AHB_WRADDR_MSWf_SET(r,f) (r).uc_pramif_ahb_wraddr_msw_gen2[0]=(((r).uc_pramif_ahb_wraddr_msw_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_PRAMIF_AHB_WRADDR_MSW_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_UC_PRAMIF_AHB_WRADDR_MSW_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_PRAMIF_AHB_WRADDR_MSW_GEN2r,(_r._uc_pramif_ahb_wraddr_msw_gen2))
#define BCMI_TSCF_XGXS_WRITE_UC_PRAMIF_AHB_WRADDR_MSW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_PRAMIF_AHB_WRADDR_MSW_GEN2r,(_r._uc_pramif_ahb_wraddr_msw_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_UC_PRAMIF_AHB_WRADDR_MSW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_PRAMIF_AHB_WRADDR_MSW_GEN2r,(_r._uc_pramif_ahb_wraddr_msw_gen2))
#define BCMI_TSCF_XGXS_READLN_UC_PRAMIF_AHB_WRADDR_MSW_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_PRAMIF_AHB_WRADDR_MSW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_pramif_ahb_wraddr_msw_gen2))
#define BCMI_TSCF_XGXS_WRITELN_UC_PRAMIF_AHB_WRADDR_MSW_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_PRAMIF_AHB_WRADDR_MSW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_pramif_ahb_wraddr_msw_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_UC_PRAMIF_AHB_WRADDR_MSW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_PRAMIF_AHB_WRADDR_MSW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_pramif_ahb_wraddr_msw_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_PRAMIF_AHB_WRADDR_MSW_GEN2r BCMI_TSCF_XGXS_UC_PRAMIF_AHB_WRADDR_MSW_GEN2r
#define UC_PRAMIF_AHB_WRADDR_MSW_GEN2r_SIZE BCMI_TSCF_XGXS_UC_PRAMIF_AHB_WRADDR_MSW_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_UC_PRAMIF_AHB_WRADDR_MSW_GEN2r_t UC_PRAMIF_AHB_WRADDR_MSW_GEN2r_t;
#define UC_PRAMIF_AHB_WRADDR_MSW_GEN2r_CLR BCMI_TSCF_XGXS_UC_PRAMIF_AHB_WRADDR_MSW_GEN2r_CLR
#define UC_PRAMIF_AHB_WRADDR_MSW_GEN2r_SET BCMI_TSCF_XGXS_UC_PRAMIF_AHB_WRADDR_MSW_GEN2r_SET
#define UC_PRAMIF_AHB_WRADDR_MSW_GEN2r_GET BCMI_TSCF_XGXS_UC_PRAMIF_AHB_WRADDR_MSW_GEN2r_GET
#define UC_PRAMIF_AHB_WRADDR_MSW_GEN2r_MICRO_PRAMIF_AHB_WRADDR_MSWf_GET BCMI_TSCF_XGXS_UC_PRAMIF_AHB_WRADDR_MSW_GEN2r_MICRO_PRAMIF_AHB_WRADDR_MSWf_GET
#define UC_PRAMIF_AHB_WRADDR_MSW_GEN2r_MICRO_PRAMIF_AHB_WRADDR_MSWf_SET BCMI_TSCF_XGXS_UC_PRAMIF_AHB_WRADDR_MSW_GEN2r_MICRO_PRAMIF_AHB_WRADDR_MSWf_SET
#define READ_UC_PRAMIF_AHB_WRADDR_MSW_GEN2r BCMI_TSCF_XGXS_READ_UC_PRAMIF_AHB_WRADDR_MSW_GEN2r
#define WRITE_UC_PRAMIF_AHB_WRADDR_MSW_GEN2r BCMI_TSCF_XGXS_WRITE_UC_PRAMIF_AHB_WRADDR_MSW_GEN2r
#define MODIFY_UC_PRAMIF_AHB_WRADDR_MSW_GEN2r BCMI_TSCF_XGXS_MODIFY_UC_PRAMIF_AHB_WRADDR_MSW_GEN2r
#define READLN_UC_PRAMIF_AHB_WRADDR_MSW_GEN2r BCMI_TSCF_XGXS_READLN_UC_PRAMIF_AHB_WRADDR_MSW_GEN2r
#define WRITELN_UC_PRAMIF_AHB_WRADDR_MSW_GEN2r BCMI_TSCF_XGXS_WRITELN_UC_PRAMIF_AHB_WRADDR_MSW_GEN2r
#define WRITEALL_UC_PRAMIF_AHB_WRADDR_MSW_GEN2r BCMI_TSCF_XGXS_WRITEALL_UC_PRAMIF_AHB_WRADDR_MSW_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_UC_PRAMIF_AHB_WRADDR_MSW_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  UC_PVT_STS0_GEN2
 * BLOCKS:   MICRO_B_COM
 * REGADDR:  0xd210
 * DEVAD:    1
 * DESC:     pvt temperature status register 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MICRO_PVT_TEMPDATA_RMI temperature data{6'd0,tempearture_data[9:0]}reads the current value of the temperature data capatured
 */
#define BCMI_TSCF_XGXS_UC_PVT_STS0_GEN2r (0x0001d210 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_UC_PVT_STS0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program UC_PVT_STS0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_UC_PVT_STS0_GEN2r_s {
	uint32_t v[1];
	uint32_t uc_pvt_sts0_gen2[1];
	uint32_t _uc_pvt_sts0_gen2;
} BCMI_TSCF_XGXS_UC_PVT_STS0_GEN2r_t;

#define BCMI_TSCF_XGXS_UC_PVT_STS0_GEN2r_CLR(r) (r).uc_pvt_sts0_gen2[0] = 0
#define BCMI_TSCF_XGXS_UC_PVT_STS0_GEN2r_SET(r,d) (r).uc_pvt_sts0_gen2[0] = d
#define BCMI_TSCF_XGXS_UC_PVT_STS0_GEN2r_GET(r) (r).uc_pvt_sts0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_UC_PVT_STS0_GEN2r_MICRO_PVT_TEMPDATA_RMIf_GET(r) (((r).uc_pvt_sts0_gen2[0]) & 0x3ff)
#define BCMI_TSCF_XGXS_UC_PVT_STS0_GEN2r_MICRO_PVT_TEMPDATA_RMIf_SET(r,f) (r).uc_pvt_sts0_gen2[0]=(((r).uc_pvt_sts0_gen2[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff)) | (0x3ff << 16)

/*
 * These macros can be used to access UC_PVT_STS0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_UC_PVT_STS0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_PVT_STS0_GEN2r,(_r._uc_pvt_sts0_gen2))
#define BCMI_TSCF_XGXS_WRITE_UC_PVT_STS0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_PVT_STS0_GEN2r,(_r._uc_pvt_sts0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_UC_PVT_STS0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_PVT_STS0_GEN2r,(_r._uc_pvt_sts0_gen2))
#define BCMI_TSCF_XGXS_READLN_UC_PVT_STS0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_PVT_STS0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_pvt_sts0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_UC_PVT_STS0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_PVT_STS0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_pvt_sts0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_UC_PVT_STS0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_PVT_STS0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_pvt_sts0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_PVT_STS0_GEN2r BCMI_TSCF_XGXS_UC_PVT_STS0_GEN2r
#define UC_PVT_STS0_GEN2r_SIZE BCMI_TSCF_XGXS_UC_PVT_STS0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_UC_PVT_STS0_GEN2r_t UC_PVT_STS0_GEN2r_t;
#define UC_PVT_STS0_GEN2r_CLR BCMI_TSCF_XGXS_UC_PVT_STS0_GEN2r_CLR
#define UC_PVT_STS0_GEN2r_SET BCMI_TSCF_XGXS_UC_PVT_STS0_GEN2r_SET
#define UC_PVT_STS0_GEN2r_GET BCMI_TSCF_XGXS_UC_PVT_STS0_GEN2r_GET
#define UC_PVT_STS0_GEN2r_MICRO_PVT_TEMPDATA_RMIf_GET BCMI_TSCF_XGXS_UC_PVT_STS0_GEN2r_MICRO_PVT_TEMPDATA_RMIf_GET
#define UC_PVT_STS0_GEN2r_MICRO_PVT_TEMPDATA_RMIf_SET BCMI_TSCF_XGXS_UC_PVT_STS0_GEN2r_MICRO_PVT_TEMPDATA_RMIf_SET
#define READ_UC_PVT_STS0_GEN2r BCMI_TSCF_XGXS_READ_UC_PVT_STS0_GEN2r
#define WRITE_UC_PVT_STS0_GEN2r BCMI_TSCF_XGXS_WRITE_UC_PVT_STS0_GEN2r
#define MODIFY_UC_PVT_STS0_GEN2r BCMI_TSCF_XGXS_MODIFY_UC_PVT_STS0_GEN2r
#define READLN_UC_PVT_STS0_GEN2r BCMI_TSCF_XGXS_READLN_UC_PVT_STS0_GEN2r
#define WRITELN_UC_PVT_STS0_GEN2r BCMI_TSCF_XGXS_WRITELN_UC_PVT_STS0_GEN2r
#define WRITEALL_UC_PVT_STS0_GEN2r BCMI_TSCF_XGXS_WRITEALL_UC_PVT_STS0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_UC_PVT_STS0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  UC_RMI_TO_UC_MBOX0_GEN2
 * BLOCKS:   MICRO_B_COM
 * REGADDR:  0xd211
 * DEVAD:    1
 * DESC:     rmi to micro mailbox register 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_RMI_TO_MICRO_MBOX0 There bits represents bits [15:0] of the message from rmi to microWrite to this registers can optionaly generate an interrupt to the micro
 */
#define BCMI_TSCF_XGXS_UC_RMI_TO_UC_MBOX0_GEN2r (0x0001d211 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_UC_RMI_TO_UC_MBOX0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program UC_RMI_TO_UC_MBOX0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_UC_RMI_TO_UC_MBOX0_GEN2r_s {
	uint32_t v[1];
	uint32_t uc_rmi_to_uc_mbox0_gen2[1];
	uint32_t _uc_rmi_to_uc_mbox0_gen2;
} BCMI_TSCF_XGXS_UC_RMI_TO_UC_MBOX0_GEN2r_t;

#define BCMI_TSCF_XGXS_UC_RMI_TO_UC_MBOX0_GEN2r_CLR(r) (r).uc_rmi_to_uc_mbox0_gen2[0] = 0
#define BCMI_TSCF_XGXS_UC_RMI_TO_UC_MBOX0_GEN2r_SET(r,d) (r).uc_rmi_to_uc_mbox0_gen2[0] = d
#define BCMI_TSCF_XGXS_UC_RMI_TO_UC_MBOX0_GEN2r_GET(r) (r).uc_rmi_to_uc_mbox0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_UC_RMI_TO_UC_MBOX0_GEN2r_MICRO_RMI_TO_MICRO_MBOX0f_GET(r) (((r).uc_rmi_to_uc_mbox0_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_UC_RMI_TO_UC_MBOX0_GEN2r_MICRO_RMI_TO_MICRO_MBOX0f_SET(r,f) (r).uc_rmi_to_uc_mbox0_gen2[0]=(((r).uc_rmi_to_uc_mbox0_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_RMI_TO_UC_MBOX0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_UC_RMI_TO_UC_MBOX0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_RMI_TO_UC_MBOX0_GEN2r,(_r._uc_rmi_to_uc_mbox0_gen2))
#define BCMI_TSCF_XGXS_WRITE_UC_RMI_TO_UC_MBOX0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_RMI_TO_UC_MBOX0_GEN2r,(_r._uc_rmi_to_uc_mbox0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_UC_RMI_TO_UC_MBOX0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_RMI_TO_UC_MBOX0_GEN2r,(_r._uc_rmi_to_uc_mbox0_gen2))
#define BCMI_TSCF_XGXS_READLN_UC_RMI_TO_UC_MBOX0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_RMI_TO_UC_MBOX0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_to_uc_mbox0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_UC_RMI_TO_UC_MBOX0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_RMI_TO_UC_MBOX0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_to_uc_mbox0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_UC_RMI_TO_UC_MBOX0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_RMI_TO_UC_MBOX0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_rmi_to_uc_mbox0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_RMI_TO_UC_MBOX0_GEN2r BCMI_TSCF_XGXS_UC_RMI_TO_UC_MBOX0_GEN2r
#define UC_RMI_TO_UC_MBOX0_GEN2r_SIZE BCMI_TSCF_XGXS_UC_RMI_TO_UC_MBOX0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_UC_RMI_TO_UC_MBOX0_GEN2r_t UC_RMI_TO_UC_MBOX0_GEN2r_t;
#define UC_RMI_TO_UC_MBOX0_GEN2r_CLR BCMI_TSCF_XGXS_UC_RMI_TO_UC_MBOX0_GEN2r_CLR
#define UC_RMI_TO_UC_MBOX0_GEN2r_SET BCMI_TSCF_XGXS_UC_RMI_TO_UC_MBOX0_GEN2r_SET
#define UC_RMI_TO_UC_MBOX0_GEN2r_GET BCMI_TSCF_XGXS_UC_RMI_TO_UC_MBOX0_GEN2r_GET
#define UC_RMI_TO_UC_MBOX0_GEN2r_MICRO_RMI_TO_MICRO_MBOX0f_GET BCMI_TSCF_XGXS_UC_RMI_TO_UC_MBOX0_GEN2r_MICRO_RMI_TO_MICRO_MBOX0f_GET
#define UC_RMI_TO_UC_MBOX0_GEN2r_MICRO_RMI_TO_MICRO_MBOX0f_SET BCMI_TSCF_XGXS_UC_RMI_TO_UC_MBOX0_GEN2r_MICRO_RMI_TO_MICRO_MBOX0f_SET
#define READ_UC_RMI_TO_UC_MBOX0_GEN2r BCMI_TSCF_XGXS_READ_UC_RMI_TO_UC_MBOX0_GEN2r
#define WRITE_UC_RMI_TO_UC_MBOX0_GEN2r BCMI_TSCF_XGXS_WRITE_UC_RMI_TO_UC_MBOX0_GEN2r
#define MODIFY_UC_RMI_TO_UC_MBOX0_GEN2r BCMI_TSCF_XGXS_MODIFY_UC_RMI_TO_UC_MBOX0_GEN2r
#define READLN_UC_RMI_TO_UC_MBOX0_GEN2r BCMI_TSCF_XGXS_READLN_UC_RMI_TO_UC_MBOX0_GEN2r
#define WRITELN_UC_RMI_TO_UC_MBOX0_GEN2r BCMI_TSCF_XGXS_WRITELN_UC_RMI_TO_UC_MBOX0_GEN2r
#define WRITEALL_UC_RMI_TO_UC_MBOX0_GEN2r BCMI_TSCF_XGXS_WRITEALL_UC_RMI_TO_UC_MBOX0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_UC_RMI_TO_UC_MBOX0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  UC_RMI_TO_UC_MBOX1_GEN2
 * BLOCKS:   MICRO_B_COM
 * REGADDR:  0xd212
 * DEVAD:    1
 * DESC:     rmi to micro mailbox register 1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_RMI_TO_MICRO_MBOX1 There bits represents bits [31:16] of the message from rmi to micro
 */
#define BCMI_TSCF_XGXS_UC_RMI_TO_UC_MBOX1_GEN2r (0x0001d212 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_UC_RMI_TO_UC_MBOX1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program UC_RMI_TO_UC_MBOX1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_UC_RMI_TO_UC_MBOX1_GEN2r_s {
	uint32_t v[1];
	uint32_t uc_rmi_to_uc_mbox1_gen2[1];
	uint32_t _uc_rmi_to_uc_mbox1_gen2;
} BCMI_TSCF_XGXS_UC_RMI_TO_UC_MBOX1_GEN2r_t;

#define BCMI_TSCF_XGXS_UC_RMI_TO_UC_MBOX1_GEN2r_CLR(r) (r).uc_rmi_to_uc_mbox1_gen2[0] = 0
#define BCMI_TSCF_XGXS_UC_RMI_TO_UC_MBOX1_GEN2r_SET(r,d) (r).uc_rmi_to_uc_mbox1_gen2[0] = d
#define BCMI_TSCF_XGXS_UC_RMI_TO_UC_MBOX1_GEN2r_GET(r) (r).uc_rmi_to_uc_mbox1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_UC_RMI_TO_UC_MBOX1_GEN2r_MICRO_RMI_TO_MICRO_MBOX1f_GET(r) (((r).uc_rmi_to_uc_mbox1_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_UC_RMI_TO_UC_MBOX1_GEN2r_MICRO_RMI_TO_MICRO_MBOX1f_SET(r,f) (r).uc_rmi_to_uc_mbox1_gen2[0]=(((r).uc_rmi_to_uc_mbox1_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_RMI_TO_UC_MBOX1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_UC_RMI_TO_UC_MBOX1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_RMI_TO_UC_MBOX1_GEN2r,(_r._uc_rmi_to_uc_mbox1_gen2))
#define BCMI_TSCF_XGXS_WRITE_UC_RMI_TO_UC_MBOX1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_RMI_TO_UC_MBOX1_GEN2r,(_r._uc_rmi_to_uc_mbox1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_UC_RMI_TO_UC_MBOX1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_RMI_TO_UC_MBOX1_GEN2r,(_r._uc_rmi_to_uc_mbox1_gen2))
#define BCMI_TSCF_XGXS_READLN_UC_RMI_TO_UC_MBOX1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_RMI_TO_UC_MBOX1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_to_uc_mbox1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_UC_RMI_TO_UC_MBOX1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_RMI_TO_UC_MBOX1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_to_uc_mbox1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_UC_RMI_TO_UC_MBOX1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_RMI_TO_UC_MBOX1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_rmi_to_uc_mbox1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_RMI_TO_UC_MBOX1_GEN2r BCMI_TSCF_XGXS_UC_RMI_TO_UC_MBOX1_GEN2r
#define UC_RMI_TO_UC_MBOX1_GEN2r_SIZE BCMI_TSCF_XGXS_UC_RMI_TO_UC_MBOX1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_UC_RMI_TO_UC_MBOX1_GEN2r_t UC_RMI_TO_UC_MBOX1_GEN2r_t;
#define UC_RMI_TO_UC_MBOX1_GEN2r_CLR BCMI_TSCF_XGXS_UC_RMI_TO_UC_MBOX1_GEN2r_CLR
#define UC_RMI_TO_UC_MBOX1_GEN2r_SET BCMI_TSCF_XGXS_UC_RMI_TO_UC_MBOX1_GEN2r_SET
#define UC_RMI_TO_UC_MBOX1_GEN2r_GET BCMI_TSCF_XGXS_UC_RMI_TO_UC_MBOX1_GEN2r_GET
#define UC_RMI_TO_UC_MBOX1_GEN2r_MICRO_RMI_TO_MICRO_MBOX1f_GET BCMI_TSCF_XGXS_UC_RMI_TO_UC_MBOX1_GEN2r_MICRO_RMI_TO_MICRO_MBOX1f_GET
#define UC_RMI_TO_UC_MBOX1_GEN2r_MICRO_RMI_TO_MICRO_MBOX1f_SET BCMI_TSCF_XGXS_UC_RMI_TO_UC_MBOX1_GEN2r_MICRO_RMI_TO_MICRO_MBOX1f_SET
#define READ_UC_RMI_TO_UC_MBOX1_GEN2r BCMI_TSCF_XGXS_READ_UC_RMI_TO_UC_MBOX1_GEN2r
#define WRITE_UC_RMI_TO_UC_MBOX1_GEN2r BCMI_TSCF_XGXS_WRITE_UC_RMI_TO_UC_MBOX1_GEN2r
#define MODIFY_UC_RMI_TO_UC_MBOX1_GEN2r BCMI_TSCF_XGXS_MODIFY_UC_RMI_TO_UC_MBOX1_GEN2r
#define READLN_UC_RMI_TO_UC_MBOX1_GEN2r BCMI_TSCF_XGXS_READLN_UC_RMI_TO_UC_MBOX1_GEN2r
#define WRITELN_UC_RMI_TO_UC_MBOX1_GEN2r BCMI_TSCF_XGXS_WRITELN_UC_RMI_TO_UC_MBOX1_GEN2r
#define WRITEALL_UC_RMI_TO_UC_MBOX1_GEN2r BCMI_TSCF_XGXS_WRITEALL_UC_RMI_TO_UC_MBOX1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_UC_RMI_TO_UC_MBOX1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  UC_UC_TO_RMI_MBOX0_GEN2
 * BLOCKS:   MICRO_B_COM
 * REGADDR:  0xd213
 * DEVAD:    1
 * DESC:     micro to rmi mailbox register 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MICRO_TO_RMI_MBOX0 There bits represents bits [15:0] of the message from rmi to micro
 */
#define BCMI_TSCF_XGXS_UC_UC_TO_RMI_MBOX0_GEN2r (0x0001d213 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_UC_UC_TO_RMI_MBOX0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program UC_UC_TO_RMI_MBOX0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_UC_UC_TO_RMI_MBOX0_GEN2r_s {
	uint32_t v[1];
	uint32_t uc_uc_to_rmi_mbox0_gen2[1];
	uint32_t _uc_uc_to_rmi_mbox0_gen2;
} BCMI_TSCF_XGXS_UC_UC_TO_RMI_MBOX0_GEN2r_t;

#define BCMI_TSCF_XGXS_UC_UC_TO_RMI_MBOX0_GEN2r_CLR(r) (r).uc_uc_to_rmi_mbox0_gen2[0] = 0
#define BCMI_TSCF_XGXS_UC_UC_TO_RMI_MBOX0_GEN2r_SET(r,d) (r).uc_uc_to_rmi_mbox0_gen2[0] = d
#define BCMI_TSCF_XGXS_UC_UC_TO_RMI_MBOX0_GEN2r_GET(r) (r).uc_uc_to_rmi_mbox0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_UC_UC_TO_RMI_MBOX0_GEN2r_MICRO_TO_RMI_MBOX0f_GET(r) (((r).uc_uc_to_rmi_mbox0_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_UC_UC_TO_RMI_MBOX0_GEN2r_MICRO_TO_RMI_MBOX0f_SET(r,f) (r).uc_uc_to_rmi_mbox0_gen2[0]=(((r).uc_uc_to_rmi_mbox0_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_UC_TO_RMI_MBOX0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_UC_UC_TO_RMI_MBOX0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_UC_TO_RMI_MBOX0_GEN2r,(_r._uc_uc_to_rmi_mbox0_gen2))
#define BCMI_TSCF_XGXS_WRITE_UC_UC_TO_RMI_MBOX0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_UC_TO_RMI_MBOX0_GEN2r,(_r._uc_uc_to_rmi_mbox0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_UC_UC_TO_RMI_MBOX0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_UC_TO_RMI_MBOX0_GEN2r,(_r._uc_uc_to_rmi_mbox0_gen2))
#define BCMI_TSCF_XGXS_READLN_UC_UC_TO_RMI_MBOX0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_UC_TO_RMI_MBOX0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_uc_to_rmi_mbox0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_UC_UC_TO_RMI_MBOX0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_UC_TO_RMI_MBOX0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_uc_to_rmi_mbox0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_UC_UC_TO_RMI_MBOX0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_UC_TO_RMI_MBOX0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_uc_to_rmi_mbox0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_UC_TO_RMI_MBOX0_GEN2r BCMI_TSCF_XGXS_UC_UC_TO_RMI_MBOX0_GEN2r
#define UC_UC_TO_RMI_MBOX0_GEN2r_SIZE BCMI_TSCF_XGXS_UC_UC_TO_RMI_MBOX0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_UC_UC_TO_RMI_MBOX0_GEN2r_t UC_UC_TO_RMI_MBOX0_GEN2r_t;
#define UC_UC_TO_RMI_MBOX0_GEN2r_CLR BCMI_TSCF_XGXS_UC_UC_TO_RMI_MBOX0_GEN2r_CLR
#define UC_UC_TO_RMI_MBOX0_GEN2r_SET BCMI_TSCF_XGXS_UC_UC_TO_RMI_MBOX0_GEN2r_SET
#define UC_UC_TO_RMI_MBOX0_GEN2r_GET BCMI_TSCF_XGXS_UC_UC_TO_RMI_MBOX0_GEN2r_GET
#define UC_UC_TO_RMI_MBOX0_GEN2r_MICRO_TO_RMI_MBOX0f_GET BCMI_TSCF_XGXS_UC_UC_TO_RMI_MBOX0_GEN2r_MICRO_TO_RMI_MBOX0f_GET
#define UC_UC_TO_RMI_MBOX0_GEN2r_MICRO_TO_RMI_MBOX0f_SET BCMI_TSCF_XGXS_UC_UC_TO_RMI_MBOX0_GEN2r_MICRO_TO_RMI_MBOX0f_SET
#define READ_UC_UC_TO_RMI_MBOX0_GEN2r BCMI_TSCF_XGXS_READ_UC_UC_TO_RMI_MBOX0_GEN2r
#define WRITE_UC_UC_TO_RMI_MBOX0_GEN2r BCMI_TSCF_XGXS_WRITE_UC_UC_TO_RMI_MBOX0_GEN2r
#define MODIFY_UC_UC_TO_RMI_MBOX0_GEN2r BCMI_TSCF_XGXS_MODIFY_UC_UC_TO_RMI_MBOX0_GEN2r
#define READLN_UC_UC_TO_RMI_MBOX0_GEN2r BCMI_TSCF_XGXS_READLN_UC_UC_TO_RMI_MBOX0_GEN2r
#define WRITELN_UC_UC_TO_RMI_MBOX0_GEN2r BCMI_TSCF_XGXS_WRITELN_UC_UC_TO_RMI_MBOX0_GEN2r
#define WRITEALL_UC_UC_TO_RMI_MBOX0_GEN2r BCMI_TSCF_XGXS_WRITEALL_UC_UC_TO_RMI_MBOX0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_UC_UC_TO_RMI_MBOX0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  UC_UC_TO_RMI_MBOX1_GEN2
 * BLOCKS:   MICRO_B_COM
 * REGADDR:  0xd214
 * DEVAD:    1
 * DESC:     micro to rmi mailbox register 1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MICRO_TO_RMI_MBOX1 There bits represents bits [31:16] of the message from rmi to micro
 */
#define BCMI_TSCF_XGXS_UC_UC_TO_RMI_MBOX1_GEN2r (0x0001d214 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_UC_UC_TO_RMI_MBOX1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program UC_UC_TO_RMI_MBOX1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_UC_UC_TO_RMI_MBOX1_GEN2r_s {
	uint32_t v[1];
	uint32_t uc_uc_to_rmi_mbox1_gen2[1];
	uint32_t _uc_uc_to_rmi_mbox1_gen2;
} BCMI_TSCF_XGXS_UC_UC_TO_RMI_MBOX1_GEN2r_t;

#define BCMI_TSCF_XGXS_UC_UC_TO_RMI_MBOX1_GEN2r_CLR(r) (r).uc_uc_to_rmi_mbox1_gen2[0] = 0
#define BCMI_TSCF_XGXS_UC_UC_TO_RMI_MBOX1_GEN2r_SET(r,d) (r).uc_uc_to_rmi_mbox1_gen2[0] = d
#define BCMI_TSCF_XGXS_UC_UC_TO_RMI_MBOX1_GEN2r_GET(r) (r).uc_uc_to_rmi_mbox1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_UC_UC_TO_RMI_MBOX1_GEN2r_MICRO_TO_RMI_MBOX1f_GET(r) (((r).uc_uc_to_rmi_mbox1_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_UC_UC_TO_RMI_MBOX1_GEN2r_MICRO_TO_RMI_MBOX1f_SET(r,f) (r).uc_uc_to_rmi_mbox1_gen2[0]=(((r).uc_uc_to_rmi_mbox1_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_UC_TO_RMI_MBOX1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_UC_UC_TO_RMI_MBOX1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_UC_TO_RMI_MBOX1_GEN2r,(_r._uc_uc_to_rmi_mbox1_gen2))
#define BCMI_TSCF_XGXS_WRITE_UC_UC_TO_RMI_MBOX1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_UC_TO_RMI_MBOX1_GEN2r,(_r._uc_uc_to_rmi_mbox1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_UC_UC_TO_RMI_MBOX1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_UC_TO_RMI_MBOX1_GEN2r,(_r._uc_uc_to_rmi_mbox1_gen2))
#define BCMI_TSCF_XGXS_READLN_UC_UC_TO_RMI_MBOX1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_UC_TO_RMI_MBOX1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_uc_to_rmi_mbox1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_UC_UC_TO_RMI_MBOX1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_UC_TO_RMI_MBOX1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_uc_to_rmi_mbox1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_UC_UC_TO_RMI_MBOX1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_UC_TO_RMI_MBOX1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_uc_to_rmi_mbox1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_UC_TO_RMI_MBOX1_GEN2r BCMI_TSCF_XGXS_UC_UC_TO_RMI_MBOX1_GEN2r
#define UC_UC_TO_RMI_MBOX1_GEN2r_SIZE BCMI_TSCF_XGXS_UC_UC_TO_RMI_MBOX1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_UC_UC_TO_RMI_MBOX1_GEN2r_t UC_UC_TO_RMI_MBOX1_GEN2r_t;
#define UC_UC_TO_RMI_MBOX1_GEN2r_CLR BCMI_TSCF_XGXS_UC_UC_TO_RMI_MBOX1_GEN2r_CLR
#define UC_UC_TO_RMI_MBOX1_GEN2r_SET BCMI_TSCF_XGXS_UC_UC_TO_RMI_MBOX1_GEN2r_SET
#define UC_UC_TO_RMI_MBOX1_GEN2r_GET BCMI_TSCF_XGXS_UC_UC_TO_RMI_MBOX1_GEN2r_GET
#define UC_UC_TO_RMI_MBOX1_GEN2r_MICRO_TO_RMI_MBOX1f_GET BCMI_TSCF_XGXS_UC_UC_TO_RMI_MBOX1_GEN2r_MICRO_TO_RMI_MBOX1f_GET
#define UC_UC_TO_RMI_MBOX1_GEN2r_MICRO_TO_RMI_MBOX1f_SET BCMI_TSCF_XGXS_UC_UC_TO_RMI_MBOX1_GEN2r_MICRO_TO_RMI_MBOX1f_SET
#define READ_UC_UC_TO_RMI_MBOX1_GEN2r BCMI_TSCF_XGXS_READ_UC_UC_TO_RMI_MBOX1_GEN2r
#define WRITE_UC_UC_TO_RMI_MBOX1_GEN2r BCMI_TSCF_XGXS_WRITE_UC_UC_TO_RMI_MBOX1_GEN2r
#define MODIFY_UC_UC_TO_RMI_MBOX1_GEN2r BCMI_TSCF_XGXS_MODIFY_UC_UC_TO_RMI_MBOX1_GEN2r
#define READLN_UC_UC_TO_RMI_MBOX1_GEN2r BCMI_TSCF_XGXS_READLN_UC_UC_TO_RMI_MBOX1_GEN2r
#define WRITELN_UC_UC_TO_RMI_MBOX1_GEN2r BCMI_TSCF_XGXS_WRITELN_UC_UC_TO_RMI_MBOX1_GEN2r
#define WRITEALL_UC_UC_TO_RMI_MBOX1_GEN2r BCMI_TSCF_XGXS_WRITEALL_UC_UC_TO_RMI_MBOX1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_UC_UC_TO_RMI_MBOX1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  UC_RMI_MBOX_CTL0_GEN2
 * BLOCKS:   MICRO_B_COM
 * REGADDR:  0xd215
 * DEVAD:    1
 * DESC:     rmi mailbox control register 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_RMI_MBOX_SEND_MSGIN Send message in (to the micro)This field is set by the RMIC to indicate to the Micro that the message in thermi_to_micro_mbox1, and rmi_to_micro_mbox0 regiters is valid.
 *     MICRO_GEN_INTR_RMI_MBOX0WR Generate interrupt when micro_rmi_to_micro_mbox0 field is written0 - disabled1 - enbled
 *     MICRO_GEN_INTR_RMI_MBOX1WR Generate interrupt when micro_rmi_to_micro_mbox1 field is written0 - disabled1 - enbled
 */
#define BCMI_TSCF_XGXS_UC_RMI_MBOX_CTL0_GEN2r (0x0001d215 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_UC_RMI_MBOX_CTL0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program UC_RMI_MBOX_CTL0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_UC_RMI_MBOX_CTL0_GEN2r_s {
	uint32_t v[1];
	uint32_t uc_rmi_mbox_ctl0_gen2[1];
	uint32_t _uc_rmi_mbox_ctl0_gen2;
} BCMI_TSCF_XGXS_UC_RMI_MBOX_CTL0_GEN2r_t;

#define BCMI_TSCF_XGXS_UC_RMI_MBOX_CTL0_GEN2r_CLR(r) (r).uc_rmi_mbox_ctl0_gen2[0] = 0
#define BCMI_TSCF_XGXS_UC_RMI_MBOX_CTL0_GEN2r_SET(r,d) (r).uc_rmi_mbox_ctl0_gen2[0] = d
#define BCMI_TSCF_XGXS_UC_RMI_MBOX_CTL0_GEN2r_GET(r) (r).uc_rmi_mbox_ctl0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_UC_RMI_MBOX_CTL0_GEN2r_MICRO_GEN_INTR_RMI_MBOX1WRf_GET(r) ((((r).uc_rmi_mbox_ctl0_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_UC_RMI_MBOX_CTL0_GEN2r_MICRO_GEN_INTR_RMI_MBOX1WRf_SET(r,f) (r).uc_rmi_mbox_ctl0_gen2[0]=(((r).uc_rmi_mbox_ctl0_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_UC_RMI_MBOX_CTL0_GEN2r_MICRO_GEN_INTR_RMI_MBOX0WRf_GET(r) ((((r).uc_rmi_mbox_ctl0_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_UC_RMI_MBOX_CTL0_GEN2r_MICRO_GEN_INTR_RMI_MBOX0WRf_SET(r,f) (r).uc_rmi_mbox_ctl0_gen2[0]=(((r).uc_rmi_mbox_ctl0_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_UC_RMI_MBOX_CTL0_GEN2r_MICRO_RMI_MBOX_SEND_MSGINf_GET(r) (((r).uc_rmi_mbox_ctl0_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_UC_RMI_MBOX_CTL0_GEN2r_MICRO_RMI_MBOX_SEND_MSGINf_SET(r,f) (r).uc_rmi_mbox_ctl0_gen2[0]=(((r).uc_rmi_mbox_ctl0_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access UC_RMI_MBOX_CTL0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_UC_RMI_MBOX_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_RMI_MBOX_CTL0_GEN2r,(_r._uc_rmi_mbox_ctl0_gen2))
#define BCMI_TSCF_XGXS_WRITE_UC_RMI_MBOX_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_RMI_MBOX_CTL0_GEN2r,(_r._uc_rmi_mbox_ctl0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_UC_RMI_MBOX_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_RMI_MBOX_CTL0_GEN2r,(_r._uc_rmi_mbox_ctl0_gen2))
#define BCMI_TSCF_XGXS_READLN_UC_RMI_MBOX_CTL0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_RMI_MBOX_CTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_mbox_ctl0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_UC_RMI_MBOX_CTL0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_RMI_MBOX_CTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_mbox_ctl0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_UC_RMI_MBOX_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_RMI_MBOX_CTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_rmi_mbox_ctl0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_RMI_MBOX_CTL0_GEN2r BCMI_TSCF_XGXS_UC_RMI_MBOX_CTL0_GEN2r
#define UC_RMI_MBOX_CTL0_GEN2r_SIZE BCMI_TSCF_XGXS_UC_RMI_MBOX_CTL0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_UC_RMI_MBOX_CTL0_GEN2r_t UC_RMI_MBOX_CTL0_GEN2r_t;
#define UC_RMI_MBOX_CTL0_GEN2r_CLR BCMI_TSCF_XGXS_UC_RMI_MBOX_CTL0_GEN2r_CLR
#define UC_RMI_MBOX_CTL0_GEN2r_SET BCMI_TSCF_XGXS_UC_RMI_MBOX_CTL0_GEN2r_SET
#define UC_RMI_MBOX_CTL0_GEN2r_GET BCMI_TSCF_XGXS_UC_RMI_MBOX_CTL0_GEN2r_GET
#define UC_RMI_MBOX_CTL0_GEN2r_MICRO_GEN_INTR_RMI_MBOX1WRf_GET BCMI_TSCF_XGXS_UC_RMI_MBOX_CTL0_GEN2r_MICRO_GEN_INTR_RMI_MBOX1WRf_GET
#define UC_RMI_MBOX_CTL0_GEN2r_MICRO_GEN_INTR_RMI_MBOX1WRf_SET BCMI_TSCF_XGXS_UC_RMI_MBOX_CTL0_GEN2r_MICRO_GEN_INTR_RMI_MBOX1WRf_SET
#define UC_RMI_MBOX_CTL0_GEN2r_MICRO_GEN_INTR_RMI_MBOX0WRf_GET BCMI_TSCF_XGXS_UC_RMI_MBOX_CTL0_GEN2r_MICRO_GEN_INTR_RMI_MBOX0WRf_GET
#define UC_RMI_MBOX_CTL0_GEN2r_MICRO_GEN_INTR_RMI_MBOX0WRf_SET BCMI_TSCF_XGXS_UC_RMI_MBOX_CTL0_GEN2r_MICRO_GEN_INTR_RMI_MBOX0WRf_SET
#define UC_RMI_MBOX_CTL0_GEN2r_MICRO_RMI_MBOX_SEND_MSGINf_GET BCMI_TSCF_XGXS_UC_RMI_MBOX_CTL0_GEN2r_MICRO_RMI_MBOX_SEND_MSGINf_GET
#define UC_RMI_MBOX_CTL0_GEN2r_MICRO_RMI_MBOX_SEND_MSGINf_SET BCMI_TSCF_XGXS_UC_RMI_MBOX_CTL0_GEN2r_MICRO_RMI_MBOX_SEND_MSGINf_SET
#define READ_UC_RMI_MBOX_CTL0_GEN2r BCMI_TSCF_XGXS_READ_UC_RMI_MBOX_CTL0_GEN2r
#define WRITE_UC_RMI_MBOX_CTL0_GEN2r BCMI_TSCF_XGXS_WRITE_UC_RMI_MBOX_CTL0_GEN2r
#define MODIFY_UC_RMI_MBOX_CTL0_GEN2r BCMI_TSCF_XGXS_MODIFY_UC_RMI_MBOX_CTL0_GEN2r
#define READLN_UC_RMI_MBOX_CTL0_GEN2r BCMI_TSCF_XGXS_READLN_UC_RMI_MBOX_CTL0_GEN2r
#define WRITELN_UC_RMI_MBOX_CTL0_GEN2r BCMI_TSCF_XGXS_WRITELN_UC_RMI_MBOX_CTL0_GEN2r
#define WRITEALL_UC_RMI_MBOX_CTL0_GEN2r BCMI_TSCF_XGXS_WRITEALL_UC_RMI_MBOX_CTL0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_UC_RMI_MBOX_CTL0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  UC_RMI_AHB_CTL1_GEN2
 * BLOCKS:   MICRO_B_COM
 * REGADDR:  0xd216
 * DEVAD:    1
 * DESC:     ahb control register 1
 * RESETVAL: 0x7 (7)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_M0_HRESP_EN m0 response error signaling enable0 - disabled1 - enabled
 *     MICRO_SW_PMI_HP_RSTB Software reset pmi_hp interface logicThis bit is to initialize the pmi_hp block0 - reset asserted1 - reset de-asserted
 *     MICRO_SW_PMI_HP_EXT_RSTB Software reset pmi_hp_ext interface logicThis bit is to initialize the pmi_hp_ext block0 - reset asserted1 - reset de-asserted
 */
#define BCMI_TSCF_XGXS_UC_RMI_AHB_CTL1_GEN2r (0x0001d216 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_UC_RMI_AHB_CTL1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program UC_RMI_AHB_CTL1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_UC_RMI_AHB_CTL1_GEN2r_s {
	uint32_t v[1];
	uint32_t uc_rmi_ahb_ctl1_gen2[1];
	uint32_t _uc_rmi_ahb_ctl1_gen2;
} BCMI_TSCF_XGXS_UC_RMI_AHB_CTL1_GEN2r_t;

#define BCMI_TSCF_XGXS_UC_RMI_AHB_CTL1_GEN2r_CLR(r) (r).uc_rmi_ahb_ctl1_gen2[0] = 0
#define BCMI_TSCF_XGXS_UC_RMI_AHB_CTL1_GEN2r_SET(r,d) (r).uc_rmi_ahb_ctl1_gen2[0] = d
#define BCMI_TSCF_XGXS_UC_RMI_AHB_CTL1_GEN2r_GET(r) (r).uc_rmi_ahb_ctl1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_UC_RMI_AHB_CTL1_GEN2r_MICRO_SW_PMI_HP_EXT_RSTBf_GET(r) ((((r).uc_rmi_ahb_ctl1_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_UC_RMI_AHB_CTL1_GEN2r_MICRO_SW_PMI_HP_EXT_RSTBf_SET(r,f) (r).uc_rmi_ahb_ctl1_gen2[0]=(((r).uc_rmi_ahb_ctl1_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_UC_RMI_AHB_CTL1_GEN2r_MICRO_SW_PMI_HP_RSTBf_GET(r) ((((r).uc_rmi_ahb_ctl1_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_UC_RMI_AHB_CTL1_GEN2r_MICRO_SW_PMI_HP_RSTBf_SET(r,f) (r).uc_rmi_ahb_ctl1_gen2[0]=(((r).uc_rmi_ahb_ctl1_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_UC_RMI_AHB_CTL1_GEN2r_MICRO_M0_HRESP_ENf_GET(r) (((r).uc_rmi_ahb_ctl1_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_UC_RMI_AHB_CTL1_GEN2r_MICRO_M0_HRESP_ENf_SET(r,f) (r).uc_rmi_ahb_ctl1_gen2[0]=(((r).uc_rmi_ahb_ctl1_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access UC_RMI_AHB_CTL1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_UC_RMI_AHB_CTL1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_RMI_AHB_CTL1_GEN2r,(_r._uc_rmi_ahb_ctl1_gen2))
#define BCMI_TSCF_XGXS_WRITE_UC_RMI_AHB_CTL1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_RMI_AHB_CTL1_GEN2r,(_r._uc_rmi_ahb_ctl1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_UC_RMI_AHB_CTL1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_RMI_AHB_CTL1_GEN2r,(_r._uc_rmi_ahb_ctl1_gen2))
#define BCMI_TSCF_XGXS_READLN_UC_RMI_AHB_CTL1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_RMI_AHB_CTL1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_ahb_ctl1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_UC_RMI_AHB_CTL1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_RMI_AHB_CTL1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_ahb_ctl1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_UC_RMI_AHB_CTL1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_RMI_AHB_CTL1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_rmi_ahb_ctl1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_RMI_AHB_CTL1_GEN2r BCMI_TSCF_XGXS_UC_RMI_AHB_CTL1_GEN2r
#define UC_RMI_AHB_CTL1_GEN2r_SIZE BCMI_TSCF_XGXS_UC_RMI_AHB_CTL1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_UC_RMI_AHB_CTL1_GEN2r_t UC_RMI_AHB_CTL1_GEN2r_t;
#define UC_RMI_AHB_CTL1_GEN2r_CLR BCMI_TSCF_XGXS_UC_RMI_AHB_CTL1_GEN2r_CLR
#define UC_RMI_AHB_CTL1_GEN2r_SET BCMI_TSCF_XGXS_UC_RMI_AHB_CTL1_GEN2r_SET
#define UC_RMI_AHB_CTL1_GEN2r_GET BCMI_TSCF_XGXS_UC_RMI_AHB_CTL1_GEN2r_GET
#define UC_RMI_AHB_CTL1_GEN2r_MICRO_SW_PMI_HP_EXT_RSTBf_GET BCMI_TSCF_XGXS_UC_RMI_AHB_CTL1_GEN2r_MICRO_SW_PMI_HP_EXT_RSTBf_GET
#define UC_RMI_AHB_CTL1_GEN2r_MICRO_SW_PMI_HP_EXT_RSTBf_SET BCMI_TSCF_XGXS_UC_RMI_AHB_CTL1_GEN2r_MICRO_SW_PMI_HP_EXT_RSTBf_SET
#define UC_RMI_AHB_CTL1_GEN2r_MICRO_SW_PMI_HP_RSTBf_GET BCMI_TSCF_XGXS_UC_RMI_AHB_CTL1_GEN2r_MICRO_SW_PMI_HP_RSTBf_GET
#define UC_RMI_AHB_CTL1_GEN2r_MICRO_SW_PMI_HP_RSTBf_SET BCMI_TSCF_XGXS_UC_RMI_AHB_CTL1_GEN2r_MICRO_SW_PMI_HP_RSTBf_SET
#define UC_RMI_AHB_CTL1_GEN2r_MICRO_M0_HRESP_ENf_GET BCMI_TSCF_XGXS_UC_RMI_AHB_CTL1_GEN2r_MICRO_M0_HRESP_ENf_GET
#define UC_RMI_AHB_CTL1_GEN2r_MICRO_M0_HRESP_ENf_SET BCMI_TSCF_XGXS_UC_RMI_AHB_CTL1_GEN2r_MICRO_M0_HRESP_ENf_SET
#define READ_UC_RMI_AHB_CTL1_GEN2r BCMI_TSCF_XGXS_READ_UC_RMI_AHB_CTL1_GEN2r
#define WRITE_UC_RMI_AHB_CTL1_GEN2r BCMI_TSCF_XGXS_WRITE_UC_RMI_AHB_CTL1_GEN2r
#define MODIFY_UC_RMI_AHB_CTL1_GEN2r BCMI_TSCF_XGXS_MODIFY_UC_RMI_AHB_CTL1_GEN2r
#define READLN_UC_RMI_AHB_CTL1_GEN2r BCMI_TSCF_XGXS_READLN_UC_RMI_AHB_CTL1_GEN2r
#define WRITELN_UC_RMI_AHB_CTL1_GEN2r BCMI_TSCF_XGXS_WRITELN_UC_RMI_AHB_CTL1_GEN2r
#define WRITEALL_UC_RMI_AHB_CTL1_GEN2r BCMI_TSCF_XGXS_WRITEALL_UC_RMI_AHB_CTL1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_UC_RMI_AHB_CTL1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  UC_RMI_AHB_STS1_GEN2
 * BLOCKS:   MICRO_B_COM
 * REGADDR:  0xd217
 * DEVAD:    1
 * DESC:     ahb status register 1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MICRO_M0_DEFAULT_SLAVE_ERROR m0 default slave error detected. M0 attempted to access un-used address1 - error detected - latched high clear on read0 - no error
 *     MICRO_RMI_DEFAULT_SLAVE_ERROR register interface default slave error detected. Register interface attempted to access un-used address1 - error detected - latched high clear on read0 - no error
 *     MICRO_PR_DEFAULT_SLAVE_ERROR PRAM interface default slave error detected. PRAM interface attempted to access un-used address1 - error detected - latched high clear on read0 - no error
 */
#define BCMI_TSCF_XGXS_UC_RMI_AHB_STS1_GEN2r (0x0001d217 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_UC_RMI_AHB_STS1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program UC_RMI_AHB_STS1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_UC_RMI_AHB_STS1_GEN2r_s {
	uint32_t v[1];
	uint32_t uc_rmi_ahb_sts1_gen2[1];
	uint32_t _uc_rmi_ahb_sts1_gen2;
} BCMI_TSCF_XGXS_UC_RMI_AHB_STS1_GEN2r_t;

#define BCMI_TSCF_XGXS_UC_RMI_AHB_STS1_GEN2r_CLR(r) (r).uc_rmi_ahb_sts1_gen2[0] = 0
#define BCMI_TSCF_XGXS_UC_RMI_AHB_STS1_GEN2r_SET(r,d) (r).uc_rmi_ahb_sts1_gen2[0] = d
#define BCMI_TSCF_XGXS_UC_RMI_AHB_STS1_GEN2r_GET(r) (r).uc_rmi_ahb_sts1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_UC_RMI_AHB_STS1_GEN2r_MICRO_PR_DEFAULT_SLAVE_ERRORf_GET(r) ((((r).uc_rmi_ahb_sts1_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_UC_RMI_AHB_STS1_GEN2r_MICRO_PR_DEFAULT_SLAVE_ERRORf_SET(r,f) (r).uc_rmi_ahb_sts1_gen2[0]=(((r).uc_rmi_ahb_sts1_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_UC_RMI_AHB_STS1_GEN2r_MICRO_RMI_DEFAULT_SLAVE_ERRORf_GET(r) ((((r).uc_rmi_ahb_sts1_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_UC_RMI_AHB_STS1_GEN2r_MICRO_RMI_DEFAULT_SLAVE_ERRORf_SET(r,f) (r).uc_rmi_ahb_sts1_gen2[0]=(((r).uc_rmi_ahb_sts1_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_UC_RMI_AHB_STS1_GEN2r_MICRO_M0_DEFAULT_SLAVE_ERRORf_GET(r) (((r).uc_rmi_ahb_sts1_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_UC_RMI_AHB_STS1_GEN2r_MICRO_M0_DEFAULT_SLAVE_ERRORf_SET(r,f) (r).uc_rmi_ahb_sts1_gen2[0]=(((r).uc_rmi_ahb_sts1_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access UC_RMI_AHB_STS1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_UC_RMI_AHB_STS1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_RMI_AHB_STS1_GEN2r,(_r._uc_rmi_ahb_sts1_gen2))
#define BCMI_TSCF_XGXS_WRITE_UC_RMI_AHB_STS1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_RMI_AHB_STS1_GEN2r,(_r._uc_rmi_ahb_sts1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_UC_RMI_AHB_STS1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_RMI_AHB_STS1_GEN2r,(_r._uc_rmi_ahb_sts1_gen2))
#define BCMI_TSCF_XGXS_READLN_UC_RMI_AHB_STS1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_RMI_AHB_STS1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_ahb_sts1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_UC_RMI_AHB_STS1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_RMI_AHB_STS1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_ahb_sts1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_UC_RMI_AHB_STS1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_RMI_AHB_STS1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_rmi_ahb_sts1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_RMI_AHB_STS1_GEN2r BCMI_TSCF_XGXS_UC_RMI_AHB_STS1_GEN2r
#define UC_RMI_AHB_STS1_GEN2r_SIZE BCMI_TSCF_XGXS_UC_RMI_AHB_STS1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_UC_RMI_AHB_STS1_GEN2r_t UC_RMI_AHB_STS1_GEN2r_t;
#define UC_RMI_AHB_STS1_GEN2r_CLR BCMI_TSCF_XGXS_UC_RMI_AHB_STS1_GEN2r_CLR
#define UC_RMI_AHB_STS1_GEN2r_SET BCMI_TSCF_XGXS_UC_RMI_AHB_STS1_GEN2r_SET
#define UC_RMI_AHB_STS1_GEN2r_GET BCMI_TSCF_XGXS_UC_RMI_AHB_STS1_GEN2r_GET
#define UC_RMI_AHB_STS1_GEN2r_MICRO_PR_DEFAULT_SLAVE_ERRORf_GET BCMI_TSCF_XGXS_UC_RMI_AHB_STS1_GEN2r_MICRO_PR_DEFAULT_SLAVE_ERRORf_GET
#define UC_RMI_AHB_STS1_GEN2r_MICRO_PR_DEFAULT_SLAVE_ERRORf_SET BCMI_TSCF_XGXS_UC_RMI_AHB_STS1_GEN2r_MICRO_PR_DEFAULT_SLAVE_ERRORf_SET
#define UC_RMI_AHB_STS1_GEN2r_MICRO_RMI_DEFAULT_SLAVE_ERRORf_GET BCMI_TSCF_XGXS_UC_RMI_AHB_STS1_GEN2r_MICRO_RMI_DEFAULT_SLAVE_ERRORf_GET
#define UC_RMI_AHB_STS1_GEN2r_MICRO_RMI_DEFAULT_SLAVE_ERRORf_SET BCMI_TSCF_XGXS_UC_RMI_AHB_STS1_GEN2r_MICRO_RMI_DEFAULT_SLAVE_ERRORf_SET
#define UC_RMI_AHB_STS1_GEN2r_MICRO_M0_DEFAULT_SLAVE_ERRORf_GET BCMI_TSCF_XGXS_UC_RMI_AHB_STS1_GEN2r_MICRO_M0_DEFAULT_SLAVE_ERRORf_GET
#define UC_RMI_AHB_STS1_GEN2r_MICRO_M0_DEFAULT_SLAVE_ERRORf_SET BCMI_TSCF_XGXS_UC_RMI_AHB_STS1_GEN2r_MICRO_M0_DEFAULT_SLAVE_ERRORf_SET
#define READ_UC_RMI_AHB_STS1_GEN2r BCMI_TSCF_XGXS_READ_UC_RMI_AHB_STS1_GEN2r
#define WRITE_UC_RMI_AHB_STS1_GEN2r BCMI_TSCF_XGXS_WRITE_UC_RMI_AHB_STS1_GEN2r
#define MODIFY_UC_RMI_AHB_STS1_GEN2r BCMI_TSCF_XGXS_MODIFY_UC_RMI_AHB_STS1_GEN2r
#define READLN_UC_RMI_AHB_STS1_GEN2r BCMI_TSCF_XGXS_READLN_UC_RMI_AHB_STS1_GEN2r
#define WRITELN_UC_RMI_AHB_STS1_GEN2r BCMI_TSCF_XGXS_WRITELN_UC_RMI_AHB_STS1_GEN2r
#define WRITEALL_UC_RMI_AHB_STS1_GEN2r BCMI_TSCF_XGXS_WRITEALL_UC_RMI_AHB_STS1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_UC_RMI_AHB_STS1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  UC_RMI_RA_AINC_NXT_WRADDR_LSW_GEN2
 * BLOCKS:   MICRO_B_COM
 * REGADDR:  0xd218
 * DEVAD:    1
 * DESC:     rmi to ahb auto-incremented write address LSW (bits 15:0) register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MICRO_RA_AUTOINC_NXT_WRADDR_LSW When the micro_autoinc_wraddr_en is set, then these bitsindicate the lower 16-bits of the address that will be usedduring the next write transaction.These bits allow address tracking when rmi interface auto addressincrement mode is used
 */
#define BCMI_TSCF_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSW_GEN2r (0x0001d218 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSW_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program UC_RMI_RA_AINC_NXT_WRADDR_LSW_GEN2.
 */
typedef union BCMI_TSCF_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSW_GEN2r_s {
	uint32_t v[1];
	uint32_t uc_rmi_ra_ainc_nxt_wraddr_lsw_gen2[1];
	uint32_t _uc_rmi_ra_ainc_nxt_wraddr_lsw_gen2;
} BCMI_TSCF_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSW_GEN2r_t;

#define BCMI_TSCF_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSW_GEN2r_CLR(r) (r).uc_rmi_ra_ainc_nxt_wraddr_lsw_gen2[0] = 0
#define BCMI_TSCF_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSW_GEN2r_SET(r,d) (r).uc_rmi_ra_ainc_nxt_wraddr_lsw_gen2[0] = d
#define BCMI_TSCF_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSW_GEN2r_GET(r) (r).uc_rmi_ra_ainc_nxt_wraddr_lsw_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSW_GEN2r_MICRO_RA_AUTOINC_NXT_WRADDR_LSWf_GET(r) (((r).uc_rmi_ra_ainc_nxt_wraddr_lsw_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSW_GEN2r_MICRO_RA_AUTOINC_NXT_WRADDR_LSWf_SET(r,f) (r).uc_rmi_ra_ainc_nxt_wraddr_lsw_gen2[0]=(((r).uc_rmi_ra_ainc_nxt_wraddr_lsw_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_RMI_RA_AINC_NXT_WRADDR_LSW_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_UC_RMI_RA_AINC_NXT_WRADDR_LSW_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSW_GEN2r,(_r._uc_rmi_ra_ainc_nxt_wraddr_lsw_gen2))
#define BCMI_TSCF_XGXS_WRITE_UC_RMI_RA_AINC_NXT_WRADDR_LSW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSW_GEN2r,(_r._uc_rmi_ra_ainc_nxt_wraddr_lsw_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_UC_RMI_RA_AINC_NXT_WRADDR_LSW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSW_GEN2r,(_r._uc_rmi_ra_ainc_nxt_wraddr_lsw_gen2))
#define BCMI_TSCF_XGXS_READLN_UC_RMI_RA_AINC_NXT_WRADDR_LSW_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_ra_ainc_nxt_wraddr_lsw_gen2))
#define BCMI_TSCF_XGXS_WRITELN_UC_RMI_RA_AINC_NXT_WRADDR_LSW_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_ra_ainc_nxt_wraddr_lsw_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_UC_RMI_RA_AINC_NXT_WRADDR_LSW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_rmi_ra_ainc_nxt_wraddr_lsw_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_RMI_RA_AINC_NXT_WRADDR_LSW_GEN2r BCMI_TSCF_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSW_GEN2r
#define UC_RMI_RA_AINC_NXT_WRADDR_LSW_GEN2r_SIZE BCMI_TSCF_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSW_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSW_GEN2r_t UC_RMI_RA_AINC_NXT_WRADDR_LSW_GEN2r_t;
#define UC_RMI_RA_AINC_NXT_WRADDR_LSW_GEN2r_CLR BCMI_TSCF_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSW_GEN2r_CLR
#define UC_RMI_RA_AINC_NXT_WRADDR_LSW_GEN2r_SET BCMI_TSCF_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSW_GEN2r_SET
#define UC_RMI_RA_AINC_NXT_WRADDR_LSW_GEN2r_GET BCMI_TSCF_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSW_GEN2r_GET
#define UC_RMI_RA_AINC_NXT_WRADDR_LSW_GEN2r_MICRO_RA_AUTOINC_NXT_WRADDR_LSWf_GET BCMI_TSCF_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSW_GEN2r_MICRO_RA_AUTOINC_NXT_WRADDR_LSWf_GET
#define UC_RMI_RA_AINC_NXT_WRADDR_LSW_GEN2r_MICRO_RA_AUTOINC_NXT_WRADDR_LSWf_SET BCMI_TSCF_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSW_GEN2r_MICRO_RA_AUTOINC_NXT_WRADDR_LSWf_SET
#define READ_UC_RMI_RA_AINC_NXT_WRADDR_LSW_GEN2r BCMI_TSCF_XGXS_READ_UC_RMI_RA_AINC_NXT_WRADDR_LSW_GEN2r
#define WRITE_UC_RMI_RA_AINC_NXT_WRADDR_LSW_GEN2r BCMI_TSCF_XGXS_WRITE_UC_RMI_RA_AINC_NXT_WRADDR_LSW_GEN2r
#define MODIFY_UC_RMI_RA_AINC_NXT_WRADDR_LSW_GEN2r BCMI_TSCF_XGXS_MODIFY_UC_RMI_RA_AINC_NXT_WRADDR_LSW_GEN2r
#define READLN_UC_RMI_RA_AINC_NXT_WRADDR_LSW_GEN2r BCMI_TSCF_XGXS_READLN_UC_RMI_RA_AINC_NXT_WRADDR_LSW_GEN2r
#define WRITELN_UC_RMI_RA_AINC_NXT_WRADDR_LSW_GEN2r BCMI_TSCF_XGXS_WRITELN_UC_RMI_RA_AINC_NXT_WRADDR_LSW_GEN2r
#define WRITEALL_UC_RMI_RA_AINC_NXT_WRADDR_LSW_GEN2r BCMI_TSCF_XGXS_WRITEALL_UC_RMI_RA_AINC_NXT_WRADDR_LSW_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSW_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  UC_RMI_RA_AINC_NXT_RDADDR_LSW_GEN2
 * BLOCKS:   MICRO_B_COM
 * REGADDR:  0xd219
 * DEVAD:    1
 * DESC:     rmi to ahb auto-incremented read address LSW (bits 15:0) register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MICRO_RA_AUTOINC_NXT_RDADDR_LSW When the micro_autoinc_rdaddr_en is set, then these bitsindicate the lower 16-bits of the address that will be usedduring the next read transaction.These bits allow address tracking when rmi interface auto addressincrement mode is used
 */
#define BCMI_TSCF_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSW_GEN2r (0x0001d219 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSW_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program UC_RMI_RA_AINC_NXT_RDADDR_LSW_GEN2.
 */
typedef union BCMI_TSCF_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSW_GEN2r_s {
	uint32_t v[1];
	uint32_t uc_rmi_ra_ainc_nxt_rdaddr_lsw_gen2[1];
	uint32_t _uc_rmi_ra_ainc_nxt_rdaddr_lsw_gen2;
} BCMI_TSCF_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSW_GEN2r_t;

#define BCMI_TSCF_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSW_GEN2r_CLR(r) (r).uc_rmi_ra_ainc_nxt_rdaddr_lsw_gen2[0] = 0
#define BCMI_TSCF_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSW_GEN2r_SET(r,d) (r).uc_rmi_ra_ainc_nxt_rdaddr_lsw_gen2[0] = d
#define BCMI_TSCF_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSW_GEN2r_GET(r) (r).uc_rmi_ra_ainc_nxt_rdaddr_lsw_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSW_GEN2r_MICRO_RA_AUTOINC_NXT_RDADDR_LSWf_GET(r) (((r).uc_rmi_ra_ainc_nxt_rdaddr_lsw_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSW_GEN2r_MICRO_RA_AUTOINC_NXT_RDADDR_LSWf_SET(r,f) (r).uc_rmi_ra_ainc_nxt_rdaddr_lsw_gen2[0]=(((r).uc_rmi_ra_ainc_nxt_rdaddr_lsw_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_RMI_RA_AINC_NXT_RDADDR_LSW_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_UC_RMI_RA_AINC_NXT_RDADDR_LSW_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSW_GEN2r,(_r._uc_rmi_ra_ainc_nxt_rdaddr_lsw_gen2))
#define BCMI_TSCF_XGXS_WRITE_UC_RMI_RA_AINC_NXT_RDADDR_LSW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSW_GEN2r,(_r._uc_rmi_ra_ainc_nxt_rdaddr_lsw_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_UC_RMI_RA_AINC_NXT_RDADDR_LSW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSW_GEN2r,(_r._uc_rmi_ra_ainc_nxt_rdaddr_lsw_gen2))
#define BCMI_TSCF_XGXS_READLN_UC_RMI_RA_AINC_NXT_RDADDR_LSW_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_ra_ainc_nxt_rdaddr_lsw_gen2))
#define BCMI_TSCF_XGXS_WRITELN_UC_RMI_RA_AINC_NXT_RDADDR_LSW_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_ra_ainc_nxt_rdaddr_lsw_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_UC_RMI_RA_AINC_NXT_RDADDR_LSW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_rmi_ra_ainc_nxt_rdaddr_lsw_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_RMI_RA_AINC_NXT_RDADDR_LSW_GEN2r BCMI_TSCF_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSW_GEN2r
#define UC_RMI_RA_AINC_NXT_RDADDR_LSW_GEN2r_SIZE BCMI_TSCF_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSW_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSW_GEN2r_t UC_RMI_RA_AINC_NXT_RDADDR_LSW_GEN2r_t;
#define UC_RMI_RA_AINC_NXT_RDADDR_LSW_GEN2r_CLR BCMI_TSCF_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSW_GEN2r_CLR
#define UC_RMI_RA_AINC_NXT_RDADDR_LSW_GEN2r_SET BCMI_TSCF_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSW_GEN2r_SET
#define UC_RMI_RA_AINC_NXT_RDADDR_LSW_GEN2r_GET BCMI_TSCF_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSW_GEN2r_GET
#define UC_RMI_RA_AINC_NXT_RDADDR_LSW_GEN2r_MICRO_RA_AUTOINC_NXT_RDADDR_LSWf_GET BCMI_TSCF_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSW_GEN2r_MICRO_RA_AUTOINC_NXT_RDADDR_LSWf_GET
#define UC_RMI_RA_AINC_NXT_RDADDR_LSW_GEN2r_MICRO_RA_AUTOINC_NXT_RDADDR_LSWf_SET BCMI_TSCF_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSW_GEN2r_MICRO_RA_AUTOINC_NXT_RDADDR_LSWf_SET
#define READ_UC_RMI_RA_AINC_NXT_RDADDR_LSW_GEN2r BCMI_TSCF_XGXS_READ_UC_RMI_RA_AINC_NXT_RDADDR_LSW_GEN2r
#define WRITE_UC_RMI_RA_AINC_NXT_RDADDR_LSW_GEN2r BCMI_TSCF_XGXS_WRITE_UC_RMI_RA_AINC_NXT_RDADDR_LSW_GEN2r
#define MODIFY_UC_RMI_RA_AINC_NXT_RDADDR_LSW_GEN2r BCMI_TSCF_XGXS_MODIFY_UC_RMI_RA_AINC_NXT_RDADDR_LSW_GEN2r
#define READLN_UC_RMI_RA_AINC_NXT_RDADDR_LSW_GEN2r BCMI_TSCF_XGXS_READLN_UC_RMI_RA_AINC_NXT_RDADDR_LSW_GEN2r
#define WRITELN_UC_RMI_RA_AINC_NXT_RDADDR_LSW_GEN2r BCMI_TSCF_XGXS_WRITELN_UC_RMI_RA_AINC_NXT_RDADDR_LSW_GEN2r
#define WRITEALL_UC_RMI_RA_AINC_NXT_RDADDR_LSW_GEN2r BCMI_TSCF_XGXS_WRITEALL_UC_RMI_RA_AINC_NXT_RDADDR_LSW_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSW_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  UC_RMI_PR_AINC_NXT_WRADDR_LSW_GEN2
 * BLOCKS:   MICRO_B_COM
 * REGADDR:  0xd21a
 * DEVAD:    1
 * DESC:     pram i/f to ahb auto-incremented write address LSW (bits 15:0) register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MICRO_PR_AUTOINC_NXT_WRADDR_LSW When pram interface is used to write to the code/data RAMthen these bits indicate the lower 16-bits of the address that will be usedduring the next write transaction.These bits allow address tracking
 */
#define BCMI_TSCF_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSW_GEN2r (0x0001d21a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSW_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program UC_RMI_PR_AINC_NXT_WRADDR_LSW_GEN2.
 */
typedef union BCMI_TSCF_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSW_GEN2r_s {
	uint32_t v[1];
	uint32_t uc_rmi_pr_ainc_nxt_wraddr_lsw_gen2[1];
	uint32_t _uc_rmi_pr_ainc_nxt_wraddr_lsw_gen2;
} BCMI_TSCF_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSW_GEN2r_t;

#define BCMI_TSCF_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSW_GEN2r_CLR(r) (r).uc_rmi_pr_ainc_nxt_wraddr_lsw_gen2[0] = 0
#define BCMI_TSCF_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSW_GEN2r_SET(r,d) (r).uc_rmi_pr_ainc_nxt_wraddr_lsw_gen2[0] = d
#define BCMI_TSCF_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSW_GEN2r_GET(r) (r).uc_rmi_pr_ainc_nxt_wraddr_lsw_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSW_GEN2r_MICRO_PR_AUTOINC_NXT_WRADDR_LSWf_GET(r) (((r).uc_rmi_pr_ainc_nxt_wraddr_lsw_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSW_GEN2r_MICRO_PR_AUTOINC_NXT_WRADDR_LSWf_SET(r,f) (r).uc_rmi_pr_ainc_nxt_wraddr_lsw_gen2[0]=(((r).uc_rmi_pr_ainc_nxt_wraddr_lsw_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_RMI_PR_AINC_NXT_WRADDR_LSW_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_UC_RMI_PR_AINC_NXT_WRADDR_LSW_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSW_GEN2r,(_r._uc_rmi_pr_ainc_nxt_wraddr_lsw_gen2))
#define BCMI_TSCF_XGXS_WRITE_UC_RMI_PR_AINC_NXT_WRADDR_LSW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSW_GEN2r,(_r._uc_rmi_pr_ainc_nxt_wraddr_lsw_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_UC_RMI_PR_AINC_NXT_WRADDR_LSW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSW_GEN2r,(_r._uc_rmi_pr_ainc_nxt_wraddr_lsw_gen2))
#define BCMI_TSCF_XGXS_READLN_UC_RMI_PR_AINC_NXT_WRADDR_LSW_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_pr_ainc_nxt_wraddr_lsw_gen2))
#define BCMI_TSCF_XGXS_WRITELN_UC_RMI_PR_AINC_NXT_WRADDR_LSW_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_pr_ainc_nxt_wraddr_lsw_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_UC_RMI_PR_AINC_NXT_WRADDR_LSW_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSW_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_rmi_pr_ainc_nxt_wraddr_lsw_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_RMI_PR_AINC_NXT_WRADDR_LSW_GEN2r BCMI_TSCF_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSW_GEN2r
#define UC_RMI_PR_AINC_NXT_WRADDR_LSW_GEN2r_SIZE BCMI_TSCF_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSW_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSW_GEN2r_t UC_RMI_PR_AINC_NXT_WRADDR_LSW_GEN2r_t;
#define UC_RMI_PR_AINC_NXT_WRADDR_LSW_GEN2r_CLR BCMI_TSCF_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSW_GEN2r_CLR
#define UC_RMI_PR_AINC_NXT_WRADDR_LSW_GEN2r_SET BCMI_TSCF_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSW_GEN2r_SET
#define UC_RMI_PR_AINC_NXT_WRADDR_LSW_GEN2r_GET BCMI_TSCF_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSW_GEN2r_GET
#define UC_RMI_PR_AINC_NXT_WRADDR_LSW_GEN2r_MICRO_PR_AUTOINC_NXT_WRADDR_LSWf_GET BCMI_TSCF_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSW_GEN2r_MICRO_PR_AUTOINC_NXT_WRADDR_LSWf_GET
#define UC_RMI_PR_AINC_NXT_WRADDR_LSW_GEN2r_MICRO_PR_AUTOINC_NXT_WRADDR_LSWf_SET BCMI_TSCF_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSW_GEN2r_MICRO_PR_AUTOINC_NXT_WRADDR_LSWf_SET
#define READ_UC_RMI_PR_AINC_NXT_WRADDR_LSW_GEN2r BCMI_TSCF_XGXS_READ_UC_RMI_PR_AINC_NXT_WRADDR_LSW_GEN2r
#define WRITE_UC_RMI_PR_AINC_NXT_WRADDR_LSW_GEN2r BCMI_TSCF_XGXS_WRITE_UC_RMI_PR_AINC_NXT_WRADDR_LSW_GEN2r
#define MODIFY_UC_RMI_PR_AINC_NXT_WRADDR_LSW_GEN2r BCMI_TSCF_XGXS_MODIFY_UC_RMI_PR_AINC_NXT_WRADDR_LSW_GEN2r
#define READLN_UC_RMI_PR_AINC_NXT_WRADDR_LSW_GEN2r BCMI_TSCF_XGXS_READLN_UC_RMI_PR_AINC_NXT_WRADDR_LSW_GEN2r
#define WRITELN_UC_RMI_PR_AINC_NXT_WRADDR_LSW_GEN2r BCMI_TSCF_XGXS_WRITELN_UC_RMI_PR_AINC_NXT_WRADDR_LSW_GEN2r
#define WRITEALL_UC_RMI_PR_AINC_NXT_WRADDR_LSW_GEN2r BCMI_TSCF_XGXS_WRITEALL_UC_RMI_PR_AINC_NXT_WRADDR_LSW_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSW_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  UC_RMI_PVT_CTL0_GEN2
 * BLOCKS:   MICRO_B_COM
 * REGADDR:  0xd21b
 * DEVAD:    1
 * DESC:     rmi pvt temperature control register 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_PVT_TEMPDATA_FRCVAL temperature data force valueWhen micro_pvt_tempdata_frc field is set to 1'b1 then micro_pvt_tempdata_frcvalfield is used to set the temperature value. The temperature value can be readvia micro_pvt_tempdata_rmi field of the pvt_status0 register orvia ahbcommon_pvt_tempdata filed of the ahbcommon_pvt_tempdata register
 *     MICRO_PVT_TEMPDATA_FRC temperature dat force enableWhen micro_pvt_tempdata_frc field is set to 1'b1 then micro_pvt_tempdata_frcvalfield is used to set the temperature value. The temperature value can be readvia micro_pvt_tempdata_rmi field of the pvt_status0 register orvia ahbcommon_pvt_tempdata filed of the ahbcommon_pvt_tempdata register
 */
#define BCMI_TSCF_XGXS_UC_RMI_PVT_CTL0_GEN2r (0x0001d21b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_UC_RMI_PVT_CTL0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program UC_RMI_PVT_CTL0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_UC_RMI_PVT_CTL0_GEN2r_s {
	uint32_t v[1];
	uint32_t uc_rmi_pvt_ctl0_gen2[1];
	uint32_t _uc_rmi_pvt_ctl0_gen2;
} BCMI_TSCF_XGXS_UC_RMI_PVT_CTL0_GEN2r_t;

#define BCMI_TSCF_XGXS_UC_RMI_PVT_CTL0_GEN2r_CLR(r) (r).uc_rmi_pvt_ctl0_gen2[0] = 0
#define BCMI_TSCF_XGXS_UC_RMI_PVT_CTL0_GEN2r_SET(r,d) (r).uc_rmi_pvt_ctl0_gen2[0] = d
#define BCMI_TSCF_XGXS_UC_RMI_PVT_CTL0_GEN2r_GET(r) (r).uc_rmi_pvt_ctl0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_UC_RMI_PVT_CTL0_GEN2r_MICRO_PVT_TEMPDATA_FRCf_GET(r) ((((r).uc_rmi_pvt_ctl0_gen2[0]) >> 12) & 0x1)
#define BCMI_TSCF_XGXS_UC_RMI_PVT_CTL0_GEN2r_MICRO_PVT_TEMPDATA_FRCf_SET(r,f) (r).uc_rmi_pvt_ctl0_gen2[0]=(((r).uc_rmi_pvt_ctl0_gen2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_TSCF_XGXS_UC_RMI_PVT_CTL0_GEN2r_MICRO_PVT_TEMPDATA_FRCVALf_GET(r) (((r).uc_rmi_pvt_ctl0_gen2[0]) & 0x3ff)
#define BCMI_TSCF_XGXS_UC_RMI_PVT_CTL0_GEN2r_MICRO_PVT_TEMPDATA_FRCVALf_SET(r,f) (r).uc_rmi_pvt_ctl0_gen2[0]=(((r).uc_rmi_pvt_ctl0_gen2[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff)) | (0x3ff << 16)

/*
 * These macros can be used to access UC_RMI_PVT_CTL0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_UC_RMI_PVT_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_RMI_PVT_CTL0_GEN2r,(_r._uc_rmi_pvt_ctl0_gen2))
#define BCMI_TSCF_XGXS_WRITE_UC_RMI_PVT_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_RMI_PVT_CTL0_GEN2r,(_r._uc_rmi_pvt_ctl0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_UC_RMI_PVT_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_RMI_PVT_CTL0_GEN2r,(_r._uc_rmi_pvt_ctl0_gen2))
#define BCMI_TSCF_XGXS_READLN_UC_RMI_PVT_CTL0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_RMI_PVT_CTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_pvt_ctl0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_UC_RMI_PVT_CTL0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_RMI_PVT_CTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_pvt_ctl0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_UC_RMI_PVT_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_RMI_PVT_CTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_rmi_pvt_ctl0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_RMI_PVT_CTL0_GEN2r BCMI_TSCF_XGXS_UC_RMI_PVT_CTL0_GEN2r
#define UC_RMI_PVT_CTL0_GEN2r_SIZE BCMI_TSCF_XGXS_UC_RMI_PVT_CTL0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_UC_RMI_PVT_CTL0_GEN2r_t UC_RMI_PVT_CTL0_GEN2r_t;
#define UC_RMI_PVT_CTL0_GEN2r_CLR BCMI_TSCF_XGXS_UC_RMI_PVT_CTL0_GEN2r_CLR
#define UC_RMI_PVT_CTL0_GEN2r_SET BCMI_TSCF_XGXS_UC_RMI_PVT_CTL0_GEN2r_SET
#define UC_RMI_PVT_CTL0_GEN2r_GET BCMI_TSCF_XGXS_UC_RMI_PVT_CTL0_GEN2r_GET
#define UC_RMI_PVT_CTL0_GEN2r_MICRO_PVT_TEMPDATA_FRCf_GET BCMI_TSCF_XGXS_UC_RMI_PVT_CTL0_GEN2r_MICRO_PVT_TEMPDATA_FRCf_GET
#define UC_RMI_PVT_CTL0_GEN2r_MICRO_PVT_TEMPDATA_FRCf_SET BCMI_TSCF_XGXS_UC_RMI_PVT_CTL0_GEN2r_MICRO_PVT_TEMPDATA_FRCf_SET
#define UC_RMI_PVT_CTL0_GEN2r_MICRO_PVT_TEMPDATA_FRCVALf_GET BCMI_TSCF_XGXS_UC_RMI_PVT_CTL0_GEN2r_MICRO_PVT_TEMPDATA_FRCVALf_GET
#define UC_RMI_PVT_CTL0_GEN2r_MICRO_PVT_TEMPDATA_FRCVALf_SET BCMI_TSCF_XGXS_UC_RMI_PVT_CTL0_GEN2r_MICRO_PVT_TEMPDATA_FRCVALf_SET
#define READ_UC_RMI_PVT_CTL0_GEN2r BCMI_TSCF_XGXS_READ_UC_RMI_PVT_CTL0_GEN2r
#define WRITE_UC_RMI_PVT_CTL0_GEN2r BCMI_TSCF_XGXS_WRITE_UC_RMI_PVT_CTL0_GEN2r
#define MODIFY_UC_RMI_PVT_CTL0_GEN2r BCMI_TSCF_XGXS_MODIFY_UC_RMI_PVT_CTL0_GEN2r
#define READLN_UC_RMI_PVT_CTL0_GEN2r BCMI_TSCF_XGXS_READLN_UC_RMI_PVT_CTL0_GEN2r
#define WRITELN_UC_RMI_PVT_CTL0_GEN2r BCMI_TSCF_XGXS_WRITELN_UC_RMI_PVT_CTL0_GEN2r
#define WRITEALL_UC_RMI_PVT_CTL0_GEN2r BCMI_TSCF_XGXS_WRITEALL_UC_RMI_PVT_CTL0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_UC_RMI_PVT_CTL0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  UC_CODE_RAM_ECCCTL0_GEN2
 * BLOCKS:   MICRO_C_COM
 * REGADDR:  0xd220
 * DEVAD:    1
 * DESC:     code ram ecc control 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_ECCG_MODE  ecc code generation mode0: Hardware mode - ECC code generated by hardware, ECC error checking enabled1: Software mode - ECC code from the rg_ra_ecc_wrdata field are written into code/data RAMECC error checking disabled. This mode is only supportedwhen register interface is used
 *     MICRO_ECC_FRC_DISABLE ecc force disable0: ECC Enabled  - ECC error code generation determine by the micro_eccg_mode fieldECC error checking enabled in hardware mode only1: ECC Disabled - ECC error codes values written into the RAM set to zeroECC error checking disabled
 *     MICRO_ECC_CORRUPT This field allows the ecc codes to be corrupted for testing.2'b00 - normal mode2'b01 - corrupt the ECC code written into the code/data RAM2'b10 - corrupt data - add 1 bit data error on the RX side2'b11 - corrupt data - add 2 bit data error on the RA side
 */
#define BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCTL0_GEN2r (0x0001d220 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCTL0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program UC_CODE_RAM_ECCCTL0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCTL0_GEN2r_s {
	uint32_t v[1];
	uint32_t uc_code_ram_eccctl0_gen2[1];
	uint32_t _uc_code_ram_eccctl0_gen2;
} BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCTL0_GEN2r_t;

#define BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCTL0_GEN2r_CLR(r) (r).uc_code_ram_eccctl0_gen2[0] = 0
#define BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCTL0_GEN2r_SET(r,d) (r).uc_code_ram_eccctl0_gen2[0] = d
#define BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCTL0_GEN2r_GET(r) (r).uc_code_ram_eccctl0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCTL0_GEN2r_MICRO_ECC_CORRUPTf_GET(r) ((((r).uc_code_ram_eccctl0_gen2[0]) >> 4) & 0x3)
#define BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCTL0_GEN2r_MICRO_ECC_CORRUPTf_SET(r,f) (r).uc_code_ram_eccctl0_gen2[0]=(((r).uc_code_ram_eccctl0_gen2[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCTL0_GEN2r_MICRO_ECC_FRC_DISABLEf_GET(r) ((((r).uc_code_ram_eccctl0_gen2[0]) >> 1) & 0x1)
#define BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCTL0_GEN2r_MICRO_ECC_FRC_DISABLEf_SET(r,f) (r).uc_code_ram_eccctl0_gen2[0]=(((r).uc_code_ram_eccctl0_gen2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCTL0_GEN2r_MICRO_ECCG_MODEf_GET(r) (((r).uc_code_ram_eccctl0_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCTL0_GEN2r_MICRO_ECCG_MODEf_SET(r,f) (r).uc_code_ram_eccctl0_gen2[0]=(((r).uc_code_ram_eccctl0_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access UC_CODE_RAM_ECCCTL0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_UC_CODE_RAM_ECCCTL0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCTL0_GEN2r,(_r._uc_code_ram_eccctl0_gen2))
#define BCMI_TSCF_XGXS_WRITE_UC_CODE_RAM_ECCCTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCTL0_GEN2r,(_r._uc_code_ram_eccctl0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_UC_CODE_RAM_ECCCTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCTL0_GEN2r,(_r._uc_code_ram_eccctl0_gen2))
#define BCMI_TSCF_XGXS_READLN_UC_CODE_RAM_ECCCTL0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_code_ram_eccctl0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_UC_CODE_RAM_ECCCTL0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_code_ram_eccctl0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_UC_CODE_RAM_ECCCTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_code_ram_eccctl0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_CODE_RAM_ECCCTL0_GEN2r BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCTL0_GEN2r
#define UC_CODE_RAM_ECCCTL0_GEN2r_SIZE BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCTL0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCTL0_GEN2r_t UC_CODE_RAM_ECCCTL0_GEN2r_t;
#define UC_CODE_RAM_ECCCTL0_GEN2r_CLR BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCTL0_GEN2r_CLR
#define UC_CODE_RAM_ECCCTL0_GEN2r_SET BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCTL0_GEN2r_SET
#define UC_CODE_RAM_ECCCTL0_GEN2r_GET BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCTL0_GEN2r_GET
#define UC_CODE_RAM_ECCCTL0_GEN2r_MICRO_ECC_CORRUPTf_GET BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCTL0_GEN2r_MICRO_ECC_CORRUPTf_GET
#define UC_CODE_RAM_ECCCTL0_GEN2r_MICRO_ECC_CORRUPTf_SET BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCTL0_GEN2r_MICRO_ECC_CORRUPTf_SET
#define UC_CODE_RAM_ECCCTL0_GEN2r_MICRO_ECC_FRC_DISABLEf_GET BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCTL0_GEN2r_MICRO_ECC_FRC_DISABLEf_GET
#define UC_CODE_RAM_ECCCTL0_GEN2r_MICRO_ECC_FRC_DISABLEf_SET BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCTL0_GEN2r_MICRO_ECC_FRC_DISABLEf_SET
#define UC_CODE_RAM_ECCCTL0_GEN2r_MICRO_ECCG_MODEf_GET BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCTL0_GEN2r_MICRO_ECCG_MODEf_GET
#define UC_CODE_RAM_ECCCTL0_GEN2r_MICRO_ECCG_MODEf_SET BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCTL0_GEN2r_MICRO_ECCG_MODEf_SET
#define READ_UC_CODE_RAM_ECCCTL0_GEN2r BCMI_TSCF_XGXS_READ_UC_CODE_RAM_ECCCTL0_GEN2r
#define WRITE_UC_CODE_RAM_ECCCTL0_GEN2r BCMI_TSCF_XGXS_WRITE_UC_CODE_RAM_ECCCTL0_GEN2r
#define MODIFY_UC_CODE_RAM_ECCCTL0_GEN2r BCMI_TSCF_XGXS_MODIFY_UC_CODE_RAM_ECCCTL0_GEN2r
#define READLN_UC_CODE_RAM_ECCCTL0_GEN2r BCMI_TSCF_XGXS_READLN_UC_CODE_RAM_ECCCTL0_GEN2r
#define WRITELN_UC_CODE_RAM_ECCCTL0_GEN2r BCMI_TSCF_XGXS_WRITELN_UC_CODE_RAM_ECCCTL0_GEN2r
#define WRITEALL_UC_CODE_RAM_ECCCTL0_GEN2r BCMI_TSCF_XGXS_WRITEALL_UC_CODE_RAM_ECCCTL0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCTL0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  UC_CODE_RAM_ECCCONTRO1_GEN2
 * BLOCKS:   MICRO_C_COM
 * REGADDR:  0xd221
 * DEVAD:    1
 * DESC:     code ram ecc control 1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_RA_ECC_WRDATA This foield is used to write the ECC codes into the code/data when ECC software modes is enabled
 */
#define BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCONTRO1_GEN2r (0x0001d221 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCONTRO1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program UC_CODE_RAM_ECCCONTRO1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCONTRO1_GEN2r_s {
	uint32_t v[1];
	uint32_t uc_code_ram_ecccontro1_gen2[1];
	uint32_t _uc_code_ram_ecccontro1_gen2;
} BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCONTRO1_GEN2r_t;

#define BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCONTRO1_GEN2r_CLR(r) (r).uc_code_ram_ecccontro1_gen2[0] = 0
#define BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCONTRO1_GEN2r_SET(r,d) (r).uc_code_ram_ecccontro1_gen2[0] = d
#define BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCONTRO1_GEN2r_GET(r) (r).uc_code_ram_ecccontro1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCONTRO1_GEN2r_MICRO_RA_ECC_WRDATAf_GET(r) (((r).uc_code_ram_ecccontro1_gen2[0]) & 0x7f)
#define BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCONTRO1_GEN2r_MICRO_RA_ECC_WRDATAf_SET(r,f) (r).uc_code_ram_ecccontro1_gen2[0]=(((r).uc_code_ram_ecccontro1_gen2[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f)) | (0x7f << 16)

/*
 * These macros can be used to access UC_CODE_RAM_ECCCONTRO1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_UC_CODE_RAM_ECCCONTRO1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCONTRO1_GEN2r,(_r._uc_code_ram_ecccontro1_gen2))
#define BCMI_TSCF_XGXS_WRITE_UC_CODE_RAM_ECCCONTRO1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCONTRO1_GEN2r,(_r._uc_code_ram_ecccontro1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_UC_CODE_RAM_ECCCONTRO1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCONTRO1_GEN2r,(_r._uc_code_ram_ecccontro1_gen2))
#define BCMI_TSCF_XGXS_READLN_UC_CODE_RAM_ECCCONTRO1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCONTRO1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_code_ram_ecccontro1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_UC_CODE_RAM_ECCCONTRO1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCONTRO1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_code_ram_ecccontro1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_UC_CODE_RAM_ECCCONTRO1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCONTRO1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_code_ram_ecccontro1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_CODE_RAM_ECCCONTRO1_GEN2r BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCONTRO1_GEN2r
#define UC_CODE_RAM_ECCCONTRO1_GEN2r_SIZE BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCONTRO1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCONTRO1_GEN2r_t UC_CODE_RAM_ECCCONTRO1_GEN2r_t;
#define UC_CODE_RAM_ECCCONTRO1_GEN2r_CLR BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCONTRO1_GEN2r_CLR
#define UC_CODE_RAM_ECCCONTRO1_GEN2r_SET BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCONTRO1_GEN2r_SET
#define UC_CODE_RAM_ECCCONTRO1_GEN2r_GET BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCONTRO1_GEN2r_GET
#define UC_CODE_RAM_ECCCONTRO1_GEN2r_MICRO_RA_ECC_WRDATAf_GET BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCONTRO1_GEN2r_MICRO_RA_ECC_WRDATAf_GET
#define UC_CODE_RAM_ECCCONTRO1_GEN2r_MICRO_RA_ECC_WRDATAf_SET BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCONTRO1_GEN2r_MICRO_RA_ECC_WRDATAf_SET
#define READ_UC_CODE_RAM_ECCCONTRO1_GEN2r BCMI_TSCF_XGXS_READ_UC_CODE_RAM_ECCCONTRO1_GEN2r
#define WRITE_UC_CODE_RAM_ECCCONTRO1_GEN2r BCMI_TSCF_XGXS_WRITE_UC_CODE_RAM_ECCCONTRO1_GEN2r
#define MODIFY_UC_CODE_RAM_ECCCONTRO1_GEN2r BCMI_TSCF_XGXS_MODIFY_UC_CODE_RAM_ECCCONTRO1_GEN2r
#define READLN_UC_CODE_RAM_ECCCONTRO1_GEN2r BCMI_TSCF_XGXS_READLN_UC_CODE_RAM_ECCCONTRO1_GEN2r
#define WRITELN_UC_CODE_RAM_ECCCONTRO1_GEN2r BCMI_TSCF_XGXS_WRITELN_UC_CODE_RAM_ECCCONTRO1_GEN2r
#define WRITEALL_UC_CODE_RAM_ECCCONTRO1_GEN2r BCMI_TSCF_XGXS_WRITEALL_UC_CODE_RAM_ECCCONTRO1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_UC_CODE_RAM_ECCCONTRO1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  UC_CODE_RAM_ECCSTS0_GEN2
 * BLOCKS:   MICRO_C_COM
 * REGADDR:  0xd222
 * DEVAD:    1
 * DESC:     code ram ecc status 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MICRO_CODE_RAM_ECC_ADDRESS First ecc error address
 */
#define BCMI_TSCF_XGXS_UC_CODE_RAM_ECCSTS0_GEN2r (0x0001d222 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_UC_CODE_RAM_ECCSTS0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program UC_CODE_RAM_ECCSTS0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_UC_CODE_RAM_ECCSTS0_GEN2r_s {
	uint32_t v[1];
	uint32_t uc_code_ram_eccsts0_gen2[1];
	uint32_t _uc_code_ram_eccsts0_gen2;
} BCMI_TSCF_XGXS_UC_CODE_RAM_ECCSTS0_GEN2r_t;

#define BCMI_TSCF_XGXS_UC_CODE_RAM_ECCSTS0_GEN2r_CLR(r) (r).uc_code_ram_eccsts0_gen2[0] = 0
#define BCMI_TSCF_XGXS_UC_CODE_RAM_ECCSTS0_GEN2r_SET(r,d) (r).uc_code_ram_eccsts0_gen2[0] = d
#define BCMI_TSCF_XGXS_UC_CODE_RAM_ECCSTS0_GEN2r_GET(r) (r).uc_code_ram_eccsts0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_UC_CODE_RAM_ECCSTS0_GEN2r_MICRO_CODE_RAM_ECC_ADDRESSf_GET(r) (((r).uc_code_ram_eccsts0_gen2[0]) & 0x7fff)
#define BCMI_TSCF_XGXS_UC_CODE_RAM_ECCSTS0_GEN2r_MICRO_CODE_RAM_ECC_ADDRESSf_SET(r,f) (r).uc_code_ram_eccsts0_gen2[0]=(((r).uc_code_ram_eccsts0_gen2[0] & ~((uint32_t)0x7fff)) | (((uint32_t)f) & 0x7fff)) | (0x7fff << 16)

/*
 * These macros can be used to access UC_CODE_RAM_ECCSTS0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_UC_CODE_RAM_ECCSTS0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_CODE_RAM_ECCSTS0_GEN2r,(_r._uc_code_ram_eccsts0_gen2))
#define BCMI_TSCF_XGXS_WRITE_UC_CODE_RAM_ECCSTS0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_CODE_RAM_ECCSTS0_GEN2r,(_r._uc_code_ram_eccsts0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_UC_CODE_RAM_ECCSTS0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_CODE_RAM_ECCSTS0_GEN2r,(_r._uc_code_ram_eccsts0_gen2))
#define BCMI_TSCF_XGXS_READLN_UC_CODE_RAM_ECCSTS0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_CODE_RAM_ECCSTS0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_code_ram_eccsts0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_UC_CODE_RAM_ECCSTS0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_CODE_RAM_ECCSTS0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_code_ram_eccsts0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_UC_CODE_RAM_ECCSTS0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_CODE_RAM_ECCSTS0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_code_ram_eccsts0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_CODE_RAM_ECCSTS0_GEN2r BCMI_TSCF_XGXS_UC_CODE_RAM_ECCSTS0_GEN2r
#define UC_CODE_RAM_ECCSTS0_GEN2r_SIZE BCMI_TSCF_XGXS_UC_CODE_RAM_ECCSTS0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_UC_CODE_RAM_ECCSTS0_GEN2r_t UC_CODE_RAM_ECCSTS0_GEN2r_t;
#define UC_CODE_RAM_ECCSTS0_GEN2r_CLR BCMI_TSCF_XGXS_UC_CODE_RAM_ECCSTS0_GEN2r_CLR
#define UC_CODE_RAM_ECCSTS0_GEN2r_SET BCMI_TSCF_XGXS_UC_CODE_RAM_ECCSTS0_GEN2r_SET
#define UC_CODE_RAM_ECCSTS0_GEN2r_GET BCMI_TSCF_XGXS_UC_CODE_RAM_ECCSTS0_GEN2r_GET
#define UC_CODE_RAM_ECCSTS0_GEN2r_MICRO_CODE_RAM_ECC_ADDRESSf_GET BCMI_TSCF_XGXS_UC_CODE_RAM_ECCSTS0_GEN2r_MICRO_CODE_RAM_ECC_ADDRESSf_GET
#define UC_CODE_RAM_ECCSTS0_GEN2r_MICRO_CODE_RAM_ECC_ADDRESSf_SET BCMI_TSCF_XGXS_UC_CODE_RAM_ECCSTS0_GEN2r_MICRO_CODE_RAM_ECC_ADDRESSf_SET
#define READ_UC_CODE_RAM_ECCSTS0_GEN2r BCMI_TSCF_XGXS_READ_UC_CODE_RAM_ECCSTS0_GEN2r
#define WRITE_UC_CODE_RAM_ECCSTS0_GEN2r BCMI_TSCF_XGXS_WRITE_UC_CODE_RAM_ECCSTS0_GEN2r
#define MODIFY_UC_CODE_RAM_ECCSTS0_GEN2r BCMI_TSCF_XGXS_MODIFY_UC_CODE_RAM_ECCSTS0_GEN2r
#define READLN_UC_CODE_RAM_ECCSTS0_GEN2r BCMI_TSCF_XGXS_READLN_UC_CODE_RAM_ECCSTS0_GEN2r
#define WRITELN_UC_CODE_RAM_ECCSTS0_GEN2r BCMI_TSCF_XGXS_WRITELN_UC_CODE_RAM_ECCSTS0_GEN2r
#define WRITEALL_UC_CODE_RAM_ECCSTS0_GEN2r BCMI_TSCF_XGXS_WRITEALL_UC_CODE_RAM_ECCSTS0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_UC_CODE_RAM_ECCSTS0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  UC_CODE_RAM_ECCSTS1_GEN2
 * BLOCKS:   MICRO_C_COM
 * REGADDR:  0xd223
 * DEVAD:    1
 * DESC:     code ram ecc status 1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MICRO_RA_ECC_RDDATA When the register interface is used to read code/data RAM, then this field can be usedread the ECC codes currently stored in the code/data RAM
 */
#define BCMI_TSCF_XGXS_UC_CODE_RAM_ECCSTS1_GEN2r (0x0001d223 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_UC_CODE_RAM_ECCSTS1_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program UC_CODE_RAM_ECCSTS1_GEN2.
 */
typedef union BCMI_TSCF_XGXS_UC_CODE_RAM_ECCSTS1_GEN2r_s {
	uint32_t v[1];
	uint32_t uc_code_ram_eccsts1_gen2[1];
	uint32_t _uc_code_ram_eccsts1_gen2;
} BCMI_TSCF_XGXS_UC_CODE_RAM_ECCSTS1_GEN2r_t;

#define BCMI_TSCF_XGXS_UC_CODE_RAM_ECCSTS1_GEN2r_CLR(r) (r).uc_code_ram_eccsts1_gen2[0] = 0
#define BCMI_TSCF_XGXS_UC_CODE_RAM_ECCSTS1_GEN2r_SET(r,d) (r).uc_code_ram_eccsts1_gen2[0] = d
#define BCMI_TSCF_XGXS_UC_CODE_RAM_ECCSTS1_GEN2r_GET(r) (r).uc_code_ram_eccsts1_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_UC_CODE_RAM_ECCSTS1_GEN2r_MICRO_RA_ECC_RDDATAf_GET(r) (((r).uc_code_ram_eccsts1_gen2[0]) & 0x7f)
#define BCMI_TSCF_XGXS_UC_CODE_RAM_ECCSTS1_GEN2r_MICRO_RA_ECC_RDDATAf_SET(r,f) (r).uc_code_ram_eccsts1_gen2[0]=(((r).uc_code_ram_eccsts1_gen2[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f)) | (0x7f << 16)

/*
 * These macros can be used to access UC_CODE_RAM_ECCSTS1_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_UC_CODE_RAM_ECCSTS1_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_CODE_RAM_ECCSTS1_GEN2r,(_r._uc_code_ram_eccsts1_gen2))
#define BCMI_TSCF_XGXS_WRITE_UC_CODE_RAM_ECCSTS1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_CODE_RAM_ECCSTS1_GEN2r,(_r._uc_code_ram_eccsts1_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_UC_CODE_RAM_ECCSTS1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_CODE_RAM_ECCSTS1_GEN2r,(_r._uc_code_ram_eccsts1_gen2))
#define BCMI_TSCF_XGXS_READLN_UC_CODE_RAM_ECCSTS1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_CODE_RAM_ECCSTS1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_code_ram_eccsts1_gen2))
#define BCMI_TSCF_XGXS_WRITELN_UC_CODE_RAM_ECCSTS1_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_CODE_RAM_ECCSTS1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_code_ram_eccsts1_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_UC_CODE_RAM_ECCSTS1_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_CODE_RAM_ECCSTS1_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_code_ram_eccsts1_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_CODE_RAM_ECCSTS1_GEN2r BCMI_TSCF_XGXS_UC_CODE_RAM_ECCSTS1_GEN2r
#define UC_CODE_RAM_ECCSTS1_GEN2r_SIZE BCMI_TSCF_XGXS_UC_CODE_RAM_ECCSTS1_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_UC_CODE_RAM_ECCSTS1_GEN2r_t UC_CODE_RAM_ECCSTS1_GEN2r_t;
#define UC_CODE_RAM_ECCSTS1_GEN2r_CLR BCMI_TSCF_XGXS_UC_CODE_RAM_ECCSTS1_GEN2r_CLR
#define UC_CODE_RAM_ECCSTS1_GEN2r_SET BCMI_TSCF_XGXS_UC_CODE_RAM_ECCSTS1_GEN2r_SET
#define UC_CODE_RAM_ECCSTS1_GEN2r_GET BCMI_TSCF_XGXS_UC_CODE_RAM_ECCSTS1_GEN2r_GET
#define UC_CODE_RAM_ECCSTS1_GEN2r_MICRO_RA_ECC_RDDATAf_GET BCMI_TSCF_XGXS_UC_CODE_RAM_ECCSTS1_GEN2r_MICRO_RA_ECC_RDDATAf_GET
#define UC_CODE_RAM_ECCSTS1_GEN2r_MICRO_RA_ECC_RDDATAf_SET BCMI_TSCF_XGXS_UC_CODE_RAM_ECCSTS1_GEN2r_MICRO_RA_ECC_RDDATAf_SET
#define READ_UC_CODE_RAM_ECCSTS1_GEN2r BCMI_TSCF_XGXS_READ_UC_CODE_RAM_ECCSTS1_GEN2r
#define WRITE_UC_CODE_RAM_ECCSTS1_GEN2r BCMI_TSCF_XGXS_WRITE_UC_CODE_RAM_ECCSTS1_GEN2r
#define MODIFY_UC_CODE_RAM_ECCSTS1_GEN2r BCMI_TSCF_XGXS_MODIFY_UC_CODE_RAM_ECCSTS1_GEN2r
#define READLN_UC_CODE_RAM_ECCSTS1_GEN2r BCMI_TSCF_XGXS_READLN_UC_CODE_RAM_ECCSTS1_GEN2r
#define WRITELN_UC_CODE_RAM_ECCSTS1_GEN2r BCMI_TSCF_XGXS_WRITELN_UC_CODE_RAM_ECCSTS1_GEN2r
#define WRITEALL_UC_CODE_RAM_ECCSTS1_GEN2r BCMI_TSCF_XGXS_WRITEALL_UC_CODE_RAM_ECCSTS1_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_UC_CODE_RAM_ECCSTS1_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  UC_CODE_RAM_TESTIFCTL0_GEN2
 * BLOCKS:   MICRO_C_COM
 * REGADDR:  0xd224
 * DEVAD:    1
 * DESC:     code ram test interface control 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_CODE_RAM_TM Test Mode.These pins are used to put the instance into various testmodes that can be used for a number of different purposesincluding extended screening, yield improvement and debug.The default mode of the instance is tm<13:0>=14'b0. It ishighly recommended that the user has control over all thetm<13:0> inputs. All tm<13:0> inputs are asynchronous. Seethe Test Modes section of the on line M28SP WebSpecification for further details.
 */
#define BCMI_TSCF_XGXS_UC_CODE_RAM_TESTIFCTL0_GEN2r (0x0001d224 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_UC_CODE_RAM_TESTIFCTL0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program UC_CODE_RAM_TESTIFCTL0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_UC_CODE_RAM_TESTIFCTL0_GEN2r_s {
	uint32_t v[1];
	uint32_t uc_code_ram_testifctl0_gen2[1];
	uint32_t _uc_code_ram_testifctl0_gen2;
} BCMI_TSCF_XGXS_UC_CODE_RAM_TESTIFCTL0_GEN2r_t;

#define BCMI_TSCF_XGXS_UC_CODE_RAM_TESTIFCTL0_GEN2r_CLR(r) (r).uc_code_ram_testifctl0_gen2[0] = 0
#define BCMI_TSCF_XGXS_UC_CODE_RAM_TESTIFCTL0_GEN2r_SET(r,d) (r).uc_code_ram_testifctl0_gen2[0] = d
#define BCMI_TSCF_XGXS_UC_CODE_RAM_TESTIFCTL0_GEN2r_GET(r) (r).uc_code_ram_testifctl0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_UC_CODE_RAM_TESTIFCTL0_GEN2r_MICRO_CODE_RAM_TMf_GET(r) (((r).uc_code_ram_testifctl0_gen2[0]) & 0x3fff)
#define BCMI_TSCF_XGXS_UC_CODE_RAM_TESTIFCTL0_GEN2r_MICRO_CODE_RAM_TMf_SET(r,f) (r).uc_code_ram_testifctl0_gen2[0]=(((r).uc_code_ram_testifctl0_gen2[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff)) | (0x3fff << 16)

/*
 * These macros can be used to access UC_CODE_RAM_TESTIFCTL0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_UC_CODE_RAM_TESTIFCTL0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_CODE_RAM_TESTIFCTL0_GEN2r,(_r._uc_code_ram_testifctl0_gen2))
#define BCMI_TSCF_XGXS_WRITE_UC_CODE_RAM_TESTIFCTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_CODE_RAM_TESTIFCTL0_GEN2r,(_r._uc_code_ram_testifctl0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_UC_CODE_RAM_TESTIFCTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_CODE_RAM_TESTIFCTL0_GEN2r,(_r._uc_code_ram_testifctl0_gen2))
#define BCMI_TSCF_XGXS_READLN_UC_CODE_RAM_TESTIFCTL0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_CODE_RAM_TESTIFCTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_code_ram_testifctl0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_UC_CODE_RAM_TESTIFCTL0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_CODE_RAM_TESTIFCTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_code_ram_testifctl0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_UC_CODE_RAM_TESTIFCTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_CODE_RAM_TESTIFCTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_code_ram_testifctl0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_CODE_RAM_TESTIFCTL0_GEN2r BCMI_TSCF_XGXS_UC_CODE_RAM_TESTIFCTL0_GEN2r
#define UC_CODE_RAM_TESTIFCTL0_GEN2r_SIZE BCMI_TSCF_XGXS_UC_CODE_RAM_TESTIFCTL0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_UC_CODE_RAM_TESTIFCTL0_GEN2r_t UC_CODE_RAM_TESTIFCTL0_GEN2r_t;
#define UC_CODE_RAM_TESTIFCTL0_GEN2r_CLR BCMI_TSCF_XGXS_UC_CODE_RAM_TESTIFCTL0_GEN2r_CLR
#define UC_CODE_RAM_TESTIFCTL0_GEN2r_SET BCMI_TSCF_XGXS_UC_CODE_RAM_TESTIFCTL0_GEN2r_SET
#define UC_CODE_RAM_TESTIFCTL0_GEN2r_GET BCMI_TSCF_XGXS_UC_CODE_RAM_TESTIFCTL0_GEN2r_GET
#define UC_CODE_RAM_TESTIFCTL0_GEN2r_MICRO_CODE_RAM_TMf_GET BCMI_TSCF_XGXS_UC_CODE_RAM_TESTIFCTL0_GEN2r_MICRO_CODE_RAM_TMf_GET
#define UC_CODE_RAM_TESTIFCTL0_GEN2r_MICRO_CODE_RAM_TMf_SET BCMI_TSCF_XGXS_UC_CODE_RAM_TESTIFCTL0_GEN2r_MICRO_CODE_RAM_TMf_SET
#define READ_UC_CODE_RAM_TESTIFCTL0_GEN2r BCMI_TSCF_XGXS_READ_UC_CODE_RAM_TESTIFCTL0_GEN2r
#define WRITE_UC_CODE_RAM_TESTIFCTL0_GEN2r BCMI_TSCF_XGXS_WRITE_UC_CODE_RAM_TESTIFCTL0_GEN2r
#define MODIFY_UC_CODE_RAM_TESTIFCTL0_GEN2r BCMI_TSCF_XGXS_MODIFY_UC_CODE_RAM_TESTIFCTL0_GEN2r
#define READLN_UC_CODE_RAM_TESTIFCTL0_GEN2r BCMI_TSCF_XGXS_READLN_UC_CODE_RAM_TESTIFCTL0_GEN2r
#define WRITELN_UC_CODE_RAM_TESTIFCTL0_GEN2r BCMI_TSCF_XGXS_WRITELN_UC_CODE_RAM_TESTIFCTL0_GEN2r
#define WRITEALL_UC_CODE_RAM_TESTIFCTL0_GEN2r BCMI_TSCF_XGXS_WRITEALL_UC_CODE_RAM_TESTIFCTL0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_UC_CODE_RAM_TESTIFCTL0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  UC_RAM_CTL0_GEN2
 * BLOCKS:   MICRO_C_COM
 * REGADDR:  0xd225
 * DEVAD:    1
 * DESC:     ram configuration register 0
 * RESETVAL: 0x401 (1025)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_DR_LOOKTAB_EN Data RAM lookup table enable1 - Data RAM mapped in the data region by hardwarestarting at address 0x2000_0000 (for software compatibilty)0 - Data RAM not mapped by hardwareFirmware defines code/data regiions
 *     MICRO_DR_SIZE    Data/Code RAM allocation when the micro_dr_looktab_en field is set to 1'b1The RAM is 36KB and this field can be used to allocate data/code RAM on a 1KB granualarity6'd0  : Data RAM = 0KB,  Code RAM = 36KB6'd1  : Data RAM = 1KB,  Code RAM = 35KB6'd2  : Data RAM = 2KB,  Code RAM = 34KB...   : Data RAM = .. ,  Code RAM = .....   : Data RAM = .. ,  Code RAM = ..6'd35 : Data RAM = 35KB, Code RAM = 1KB6'd36 : Data RAM = 36KB, Code RAM = 0KBPLEASE NOTE: the micro in the PMD core does not have any additional RAM to store Code/Datatherfore a value of 0 and 36 should not be used
 */
#define BCMI_TSCF_XGXS_UC_RAM_CTL0_GEN2r (0x0001d225 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_UC_RAM_CTL0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program UC_RAM_CTL0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_UC_RAM_CTL0_GEN2r_s {
	uint32_t v[1];
	uint32_t uc_ram_ctl0_gen2[1];
	uint32_t _uc_ram_ctl0_gen2;
} BCMI_TSCF_XGXS_UC_RAM_CTL0_GEN2r_t;

#define BCMI_TSCF_XGXS_UC_RAM_CTL0_GEN2r_CLR(r) (r).uc_ram_ctl0_gen2[0] = 0
#define BCMI_TSCF_XGXS_UC_RAM_CTL0_GEN2r_SET(r,d) (r).uc_ram_ctl0_gen2[0] = d
#define BCMI_TSCF_XGXS_UC_RAM_CTL0_GEN2r_GET(r) (r).uc_ram_ctl0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_UC_RAM_CTL0_GEN2r_MICRO_DR_SIZEf_GET(r) ((((r).uc_ram_ctl0_gen2[0]) >> 8) & 0x3f)
#define BCMI_TSCF_XGXS_UC_RAM_CTL0_GEN2r_MICRO_DR_SIZEf_SET(r,f) (r).uc_ram_ctl0_gen2[0]=(((r).uc_ram_ctl0_gen2[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8)) | (63 << (16 + 8))
#define BCMI_TSCF_XGXS_UC_RAM_CTL0_GEN2r_MICRO_DR_LOOKTAB_ENf_GET(r) (((r).uc_ram_ctl0_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_UC_RAM_CTL0_GEN2r_MICRO_DR_LOOKTAB_ENf_SET(r,f) (r).uc_ram_ctl0_gen2[0]=(((r).uc_ram_ctl0_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access UC_RAM_CTL0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_UC_RAM_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_RAM_CTL0_GEN2r,(_r._uc_ram_ctl0_gen2))
#define BCMI_TSCF_XGXS_WRITE_UC_RAM_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_RAM_CTL0_GEN2r,(_r._uc_ram_ctl0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_UC_RAM_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_RAM_CTL0_GEN2r,(_r._uc_ram_ctl0_gen2))
#define BCMI_TSCF_XGXS_READLN_UC_RAM_CTL0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_RAM_CTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ram_ctl0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_UC_RAM_CTL0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_RAM_CTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ram_ctl0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_UC_RAM_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_RAM_CTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_ram_ctl0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_RAM_CTL0_GEN2r BCMI_TSCF_XGXS_UC_RAM_CTL0_GEN2r
#define UC_RAM_CTL0_GEN2r_SIZE BCMI_TSCF_XGXS_UC_RAM_CTL0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_UC_RAM_CTL0_GEN2r_t UC_RAM_CTL0_GEN2r_t;
#define UC_RAM_CTL0_GEN2r_CLR BCMI_TSCF_XGXS_UC_RAM_CTL0_GEN2r_CLR
#define UC_RAM_CTL0_GEN2r_SET BCMI_TSCF_XGXS_UC_RAM_CTL0_GEN2r_SET
#define UC_RAM_CTL0_GEN2r_GET BCMI_TSCF_XGXS_UC_RAM_CTL0_GEN2r_GET
#define UC_RAM_CTL0_GEN2r_MICRO_DR_SIZEf_GET BCMI_TSCF_XGXS_UC_RAM_CTL0_GEN2r_MICRO_DR_SIZEf_GET
#define UC_RAM_CTL0_GEN2r_MICRO_DR_SIZEf_SET BCMI_TSCF_XGXS_UC_RAM_CTL0_GEN2r_MICRO_DR_SIZEf_SET
#define UC_RAM_CTL0_GEN2r_MICRO_DR_LOOKTAB_ENf_GET BCMI_TSCF_XGXS_UC_RAM_CTL0_GEN2r_MICRO_DR_LOOKTAB_ENf_GET
#define UC_RAM_CTL0_GEN2r_MICRO_DR_LOOKTAB_ENf_SET BCMI_TSCF_XGXS_UC_RAM_CTL0_GEN2r_MICRO_DR_LOOKTAB_ENf_SET
#define READ_UC_RAM_CTL0_GEN2r BCMI_TSCF_XGXS_READ_UC_RAM_CTL0_GEN2r
#define WRITE_UC_RAM_CTL0_GEN2r BCMI_TSCF_XGXS_WRITE_UC_RAM_CTL0_GEN2r
#define MODIFY_UC_RAM_CTL0_GEN2r BCMI_TSCF_XGXS_MODIFY_UC_RAM_CTL0_GEN2r
#define READLN_UC_RAM_CTL0_GEN2r BCMI_TSCF_XGXS_READLN_UC_RAM_CTL0_GEN2r
#define WRITELN_UC_RAM_CTL0_GEN2r BCMI_TSCF_XGXS_WRITELN_UC_RAM_CTL0_GEN2r
#define WRITEALL_UC_RAM_CTL0_GEN2r BCMI_TSCF_XGXS_WRITEALL_UC_RAM_CTL0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_UC_RAM_CTL0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  UC_RMI_EXT_INTR_CTL0_GEN2
 * BLOCKS:   MICRO_C_COM
 * REGADDR:  0xd226
 * DEVAD:    1
 * DESC:     rmi external interrupt control register 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_RMI_MBOX_MSGOUT_INTR_EN Message out (from Micro) interrupt enableWhen this field is set to 1'b1 then the micro_rmi_mbox_msgout_status field of the rmi_ext_intr_status0registers generate an interrupt on the micro_ext_intr pin
 *     MICRO_RMI_ECC_CORR_ERR_INTR_EN ECC 1 bit correctable error detect interrupt enableWhen this field is set to 1'b1 then the micro_rmi_ecc_corr_err_status field of the rmi_ext_intr_status0registers generate an interrupt on the micro_ext_intr pin
 *     MICRO_RMI_ECC_UNCORR_ERR_INTR_EN ECC 2 bit un-correctable error detect interrupt enableWhen this field is set to 1'b1 then the micro_rmi_ecc_uncorr_err_status field of the rmi_ext_intr_status0registers generate an interrupt on the micro_ext_intr pin
 *     MICRO_RMI_ECC_MULTIROW_ERR_INTR_EN ECC error on multiple row detect interrupt enableWhen this field is set to 1'b1 then the micro_rmi_ecc_multirow_err_status field of the rmi_ext_intr_status0registers generate an interrupt on the micro_ext_intr pin
 *     MICRO_RMI_M0_LOCKUP_INTR_EN M0 lockup interrupt enableWhen this field is set to 1'b1 then the micro_rmi_m0_lockup_status field of the rmi_ext_intr_status0registers generate an interrupt on the micro_ext_intr pin
 *     MICRO_RMI_M0_SYSTEMRESETREQ_INTR_EN M0 systemresetreq interrupt enableWhen this field is set to 1'b1 then the micro_rmi_m0_systemresetreq_status field of the rmi_ext_intr_status0registers generate an interrupt on the micro_ext_intr pin
 */
#define BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_CTL0_GEN2r (0x0001d226 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_CTL0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program UC_RMI_EXT_INTR_CTL0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_CTL0_GEN2r_s {
	uint32_t v[1];
	uint32_t uc_rmi_ext_intr_ctl0_gen2[1];
	uint32_t _uc_rmi_ext_intr_ctl0_gen2;
} BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_CTL0_GEN2r_t;

#define BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_CTL0_GEN2r_CLR(r) (r).uc_rmi_ext_intr_ctl0_gen2[0] = 0
#define BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_CTL0_GEN2r_SET(r,d) (r).uc_rmi_ext_intr_ctl0_gen2[0] = d
#define BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_CTL0_GEN2r_GET(r) (r).uc_rmi_ext_intr_ctl0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_CTL0_GEN2r_MICRO_RMI_M0_SYSTEMRESETREQ_INTR_ENf_GET(r) ((((r).uc_rmi_ext_intr_ctl0_gen2[0]) >> 9) & 0x1)
#define BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_CTL0_GEN2r_MICRO_RMI_M0_SYSTEMRESETREQ_INTR_ENf_SET(r,f) (r).uc_rmi_ext_intr_ctl0_gen2[0]=(((r).uc_rmi_ext_intr_ctl0_gen2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_CTL0_GEN2r_MICRO_RMI_M0_LOCKUP_INTR_ENf_GET(r) ((((r).uc_rmi_ext_intr_ctl0_gen2[0]) >> 8) & 0x1)
#define BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_CTL0_GEN2r_MICRO_RMI_M0_LOCKUP_INTR_ENf_SET(r,f) (r).uc_rmi_ext_intr_ctl0_gen2[0]=(((r).uc_rmi_ext_intr_ctl0_gen2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_CTL0_GEN2r_MICRO_RMI_ECC_MULTIROW_ERR_INTR_ENf_GET(r) ((((r).uc_rmi_ext_intr_ctl0_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_CTL0_GEN2r_MICRO_RMI_ECC_MULTIROW_ERR_INTR_ENf_SET(r,f) (r).uc_rmi_ext_intr_ctl0_gen2[0]=(((r).uc_rmi_ext_intr_ctl0_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_CTL0_GEN2r_MICRO_RMI_ECC_UNCORR_ERR_INTR_ENf_GET(r) ((((r).uc_rmi_ext_intr_ctl0_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_CTL0_GEN2r_MICRO_RMI_ECC_UNCORR_ERR_INTR_ENf_SET(r,f) (r).uc_rmi_ext_intr_ctl0_gen2[0]=(((r).uc_rmi_ext_intr_ctl0_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_CTL0_GEN2r_MICRO_RMI_ECC_CORR_ERR_INTR_ENf_GET(r) ((((r).uc_rmi_ext_intr_ctl0_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_CTL0_GEN2r_MICRO_RMI_ECC_CORR_ERR_INTR_ENf_SET(r,f) (r).uc_rmi_ext_intr_ctl0_gen2[0]=(((r).uc_rmi_ext_intr_ctl0_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_CTL0_GEN2r_MICRO_RMI_MBOX_MSGOUT_INTR_ENf_GET(r) (((r).uc_rmi_ext_intr_ctl0_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_CTL0_GEN2r_MICRO_RMI_MBOX_MSGOUT_INTR_ENf_SET(r,f) (r).uc_rmi_ext_intr_ctl0_gen2[0]=(((r).uc_rmi_ext_intr_ctl0_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access UC_RMI_EXT_INTR_CTL0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_UC_RMI_EXT_INTR_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_CTL0_GEN2r,(_r._uc_rmi_ext_intr_ctl0_gen2))
#define BCMI_TSCF_XGXS_WRITE_UC_RMI_EXT_INTR_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_CTL0_GEN2r,(_r._uc_rmi_ext_intr_ctl0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_UC_RMI_EXT_INTR_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_CTL0_GEN2r,(_r._uc_rmi_ext_intr_ctl0_gen2))
#define BCMI_TSCF_XGXS_READLN_UC_RMI_EXT_INTR_CTL0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_CTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_ext_intr_ctl0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_UC_RMI_EXT_INTR_CTL0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_CTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_ext_intr_ctl0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_UC_RMI_EXT_INTR_CTL0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_CTL0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_rmi_ext_intr_ctl0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_RMI_EXT_INTR_CTL0_GEN2r BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_CTL0_GEN2r
#define UC_RMI_EXT_INTR_CTL0_GEN2r_SIZE BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_CTL0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_CTL0_GEN2r_t UC_RMI_EXT_INTR_CTL0_GEN2r_t;
#define UC_RMI_EXT_INTR_CTL0_GEN2r_CLR BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_CTL0_GEN2r_CLR
#define UC_RMI_EXT_INTR_CTL0_GEN2r_SET BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_CTL0_GEN2r_SET
#define UC_RMI_EXT_INTR_CTL0_GEN2r_GET BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_CTL0_GEN2r_GET
#define UC_RMI_EXT_INTR_CTL0_GEN2r_MICRO_RMI_M0_SYSTEMRESETREQ_INTR_ENf_GET BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_CTL0_GEN2r_MICRO_RMI_M0_SYSTEMRESETREQ_INTR_ENf_GET
#define UC_RMI_EXT_INTR_CTL0_GEN2r_MICRO_RMI_M0_SYSTEMRESETREQ_INTR_ENf_SET BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_CTL0_GEN2r_MICRO_RMI_M0_SYSTEMRESETREQ_INTR_ENf_SET
#define UC_RMI_EXT_INTR_CTL0_GEN2r_MICRO_RMI_M0_LOCKUP_INTR_ENf_GET BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_CTL0_GEN2r_MICRO_RMI_M0_LOCKUP_INTR_ENf_GET
#define UC_RMI_EXT_INTR_CTL0_GEN2r_MICRO_RMI_M0_LOCKUP_INTR_ENf_SET BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_CTL0_GEN2r_MICRO_RMI_M0_LOCKUP_INTR_ENf_SET
#define UC_RMI_EXT_INTR_CTL0_GEN2r_MICRO_RMI_ECC_MULTIROW_ERR_INTR_ENf_GET BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_CTL0_GEN2r_MICRO_RMI_ECC_MULTIROW_ERR_INTR_ENf_GET
#define UC_RMI_EXT_INTR_CTL0_GEN2r_MICRO_RMI_ECC_MULTIROW_ERR_INTR_ENf_SET BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_CTL0_GEN2r_MICRO_RMI_ECC_MULTIROW_ERR_INTR_ENf_SET
#define UC_RMI_EXT_INTR_CTL0_GEN2r_MICRO_RMI_ECC_UNCORR_ERR_INTR_ENf_GET BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_CTL0_GEN2r_MICRO_RMI_ECC_UNCORR_ERR_INTR_ENf_GET
#define UC_RMI_EXT_INTR_CTL0_GEN2r_MICRO_RMI_ECC_UNCORR_ERR_INTR_ENf_SET BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_CTL0_GEN2r_MICRO_RMI_ECC_UNCORR_ERR_INTR_ENf_SET
#define UC_RMI_EXT_INTR_CTL0_GEN2r_MICRO_RMI_ECC_CORR_ERR_INTR_ENf_GET BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_CTL0_GEN2r_MICRO_RMI_ECC_CORR_ERR_INTR_ENf_GET
#define UC_RMI_EXT_INTR_CTL0_GEN2r_MICRO_RMI_ECC_CORR_ERR_INTR_ENf_SET BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_CTL0_GEN2r_MICRO_RMI_ECC_CORR_ERR_INTR_ENf_SET
#define UC_RMI_EXT_INTR_CTL0_GEN2r_MICRO_RMI_MBOX_MSGOUT_INTR_ENf_GET BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_CTL0_GEN2r_MICRO_RMI_MBOX_MSGOUT_INTR_ENf_GET
#define UC_RMI_EXT_INTR_CTL0_GEN2r_MICRO_RMI_MBOX_MSGOUT_INTR_ENf_SET BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_CTL0_GEN2r_MICRO_RMI_MBOX_MSGOUT_INTR_ENf_SET
#define READ_UC_RMI_EXT_INTR_CTL0_GEN2r BCMI_TSCF_XGXS_READ_UC_RMI_EXT_INTR_CTL0_GEN2r
#define WRITE_UC_RMI_EXT_INTR_CTL0_GEN2r BCMI_TSCF_XGXS_WRITE_UC_RMI_EXT_INTR_CTL0_GEN2r
#define MODIFY_UC_RMI_EXT_INTR_CTL0_GEN2r BCMI_TSCF_XGXS_MODIFY_UC_RMI_EXT_INTR_CTL0_GEN2r
#define READLN_UC_RMI_EXT_INTR_CTL0_GEN2r BCMI_TSCF_XGXS_READLN_UC_RMI_EXT_INTR_CTL0_GEN2r
#define WRITELN_UC_RMI_EXT_INTR_CTL0_GEN2r BCMI_TSCF_XGXS_WRITELN_UC_RMI_EXT_INTR_CTL0_GEN2r
#define WRITEALL_UC_RMI_EXT_INTR_CTL0_GEN2r BCMI_TSCF_XGXS_WRITEALL_UC_RMI_EXT_INTR_CTL0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_CTL0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  UC_RMI_EXT_INTR_STS0_GEN2
 * BLOCKS:   MICRO_C_COM
 * REGADDR:  0xd227
 * DEVAD:    1
 * DESC:     rmi external interrupt status register 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MICRO_RMI_MBOX_MSGOUT_STATUS Message out (from Micro) statusThis field is set to 1'b1 when the RMIC receives a message from the Micro.It indicates to the RMIC that the message on the micro_to_rmi_mbox3,micro_to_rmi_mbox2, micro_to_rmi_mbox1 and micro_to_rmi_mbox0 registers is validThis bits remain remains set until this register is read
 *     MICRO_RMI_ECC_CORR_ERR_STATUS ECC 1 bit correctable error detected statusThis field is set to 1'b1 when the ECC logic detects one bit correctable error.This bits remain remains set until this register is read
 *     MICRO_RMI_ECC_UNCORR_ERR_STATUS ECC 2 bit un-correctable error detected statusThis field is set to 1'b1 when the ECC logic detects one bit un-correctable error.This bits remain remains set until this register is read
 *     MICRO_RMI_ECC_MULTIROW_ERR_STATUS ECC error on multiple row detected  statusThis field is set to 1'b1 when the ECC logic detects correctable or uncorrecatble errors on multiple rows.This bits remain remains set until this register is read
 *     MICRO_RMI_M0_LOCKUP_STATUS M0 lockup statusThis field indicates the status of the M0 "lockup" signal
 *     MICRO_RMI_M0_SYSTEMRESETREQ_STATUS M0 systemresetreq statusThis field indicates the status of the M0 "systemresetreq" signal
 */
#define BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_STS0_GEN2r (0x0001d227 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_STS0_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program UC_RMI_EXT_INTR_STS0_GEN2.
 */
typedef union BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_STS0_GEN2r_s {
	uint32_t v[1];
	uint32_t uc_rmi_ext_intr_sts0_gen2[1];
	uint32_t _uc_rmi_ext_intr_sts0_gen2;
} BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_STS0_GEN2r_t;

#define BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_STS0_GEN2r_CLR(r) (r).uc_rmi_ext_intr_sts0_gen2[0] = 0
#define BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_STS0_GEN2r_SET(r,d) (r).uc_rmi_ext_intr_sts0_gen2[0] = d
#define BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_STS0_GEN2r_GET(r) (r).uc_rmi_ext_intr_sts0_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_STS0_GEN2r_MICRO_RMI_M0_SYSTEMRESETREQ_STATUSf_GET(r) ((((r).uc_rmi_ext_intr_sts0_gen2[0]) >> 9) & 0x1)
#define BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_STS0_GEN2r_MICRO_RMI_M0_SYSTEMRESETREQ_STATUSf_SET(r,f) (r).uc_rmi_ext_intr_sts0_gen2[0]=(((r).uc_rmi_ext_intr_sts0_gen2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_STS0_GEN2r_MICRO_RMI_M0_LOCKUP_STATUSf_GET(r) ((((r).uc_rmi_ext_intr_sts0_gen2[0]) >> 8) & 0x1)
#define BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_STS0_GEN2r_MICRO_RMI_M0_LOCKUP_STATUSf_SET(r,f) (r).uc_rmi_ext_intr_sts0_gen2[0]=(((r).uc_rmi_ext_intr_sts0_gen2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_STS0_GEN2r_MICRO_RMI_ECC_MULTIROW_ERR_STATUSf_GET(r) ((((r).uc_rmi_ext_intr_sts0_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_STS0_GEN2r_MICRO_RMI_ECC_MULTIROW_ERR_STATUSf_SET(r,f) (r).uc_rmi_ext_intr_sts0_gen2[0]=(((r).uc_rmi_ext_intr_sts0_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_STS0_GEN2r_MICRO_RMI_ECC_UNCORR_ERR_STATUSf_GET(r) ((((r).uc_rmi_ext_intr_sts0_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_STS0_GEN2r_MICRO_RMI_ECC_UNCORR_ERR_STATUSf_SET(r,f) (r).uc_rmi_ext_intr_sts0_gen2[0]=(((r).uc_rmi_ext_intr_sts0_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_STS0_GEN2r_MICRO_RMI_ECC_CORR_ERR_STATUSf_GET(r) ((((r).uc_rmi_ext_intr_sts0_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_STS0_GEN2r_MICRO_RMI_ECC_CORR_ERR_STATUSf_SET(r,f) (r).uc_rmi_ext_intr_sts0_gen2[0]=(((r).uc_rmi_ext_intr_sts0_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_STS0_GEN2r_MICRO_RMI_MBOX_MSGOUT_STATUSf_GET(r) (((r).uc_rmi_ext_intr_sts0_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_STS0_GEN2r_MICRO_RMI_MBOX_MSGOUT_STATUSf_SET(r,f) (r).uc_rmi_ext_intr_sts0_gen2[0]=(((r).uc_rmi_ext_intr_sts0_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access UC_RMI_EXT_INTR_STS0_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_UC_RMI_EXT_INTR_STS0_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_STS0_GEN2r,(_r._uc_rmi_ext_intr_sts0_gen2))
#define BCMI_TSCF_XGXS_WRITE_UC_RMI_EXT_INTR_STS0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_STS0_GEN2r,(_r._uc_rmi_ext_intr_sts0_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_UC_RMI_EXT_INTR_STS0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_STS0_GEN2r,(_r._uc_rmi_ext_intr_sts0_gen2))
#define BCMI_TSCF_XGXS_READLN_UC_RMI_EXT_INTR_STS0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_STS0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_ext_intr_sts0_gen2))
#define BCMI_TSCF_XGXS_WRITELN_UC_RMI_EXT_INTR_STS0_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_STS0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_ext_intr_sts0_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_UC_RMI_EXT_INTR_STS0_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_STS0_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_rmi_ext_intr_sts0_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_RMI_EXT_INTR_STS0_GEN2r BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_STS0_GEN2r
#define UC_RMI_EXT_INTR_STS0_GEN2r_SIZE BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_STS0_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_STS0_GEN2r_t UC_RMI_EXT_INTR_STS0_GEN2r_t;
#define UC_RMI_EXT_INTR_STS0_GEN2r_CLR BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_STS0_GEN2r_CLR
#define UC_RMI_EXT_INTR_STS0_GEN2r_SET BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_STS0_GEN2r_SET
#define UC_RMI_EXT_INTR_STS0_GEN2r_GET BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_STS0_GEN2r_GET
#define UC_RMI_EXT_INTR_STS0_GEN2r_MICRO_RMI_M0_SYSTEMRESETREQ_STATUSf_GET BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_STS0_GEN2r_MICRO_RMI_M0_SYSTEMRESETREQ_STATUSf_GET
#define UC_RMI_EXT_INTR_STS0_GEN2r_MICRO_RMI_M0_SYSTEMRESETREQ_STATUSf_SET BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_STS0_GEN2r_MICRO_RMI_M0_SYSTEMRESETREQ_STATUSf_SET
#define UC_RMI_EXT_INTR_STS0_GEN2r_MICRO_RMI_M0_LOCKUP_STATUSf_GET BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_STS0_GEN2r_MICRO_RMI_M0_LOCKUP_STATUSf_GET
#define UC_RMI_EXT_INTR_STS0_GEN2r_MICRO_RMI_M0_LOCKUP_STATUSf_SET BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_STS0_GEN2r_MICRO_RMI_M0_LOCKUP_STATUSf_SET
#define UC_RMI_EXT_INTR_STS0_GEN2r_MICRO_RMI_ECC_MULTIROW_ERR_STATUSf_GET BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_STS0_GEN2r_MICRO_RMI_ECC_MULTIROW_ERR_STATUSf_GET
#define UC_RMI_EXT_INTR_STS0_GEN2r_MICRO_RMI_ECC_MULTIROW_ERR_STATUSf_SET BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_STS0_GEN2r_MICRO_RMI_ECC_MULTIROW_ERR_STATUSf_SET
#define UC_RMI_EXT_INTR_STS0_GEN2r_MICRO_RMI_ECC_UNCORR_ERR_STATUSf_GET BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_STS0_GEN2r_MICRO_RMI_ECC_UNCORR_ERR_STATUSf_GET
#define UC_RMI_EXT_INTR_STS0_GEN2r_MICRO_RMI_ECC_UNCORR_ERR_STATUSf_SET BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_STS0_GEN2r_MICRO_RMI_ECC_UNCORR_ERR_STATUSf_SET
#define UC_RMI_EXT_INTR_STS0_GEN2r_MICRO_RMI_ECC_CORR_ERR_STATUSf_GET BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_STS0_GEN2r_MICRO_RMI_ECC_CORR_ERR_STATUSf_GET
#define UC_RMI_EXT_INTR_STS0_GEN2r_MICRO_RMI_ECC_CORR_ERR_STATUSf_SET BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_STS0_GEN2r_MICRO_RMI_ECC_CORR_ERR_STATUSf_SET
#define UC_RMI_EXT_INTR_STS0_GEN2r_MICRO_RMI_MBOX_MSGOUT_STATUSf_GET BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_STS0_GEN2r_MICRO_RMI_MBOX_MSGOUT_STATUSf_GET
#define UC_RMI_EXT_INTR_STS0_GEN2r_MICRO_RMI_MBOX_MSGOUT_STATUSf_SET BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_STS0_GEN2r_MICRO_RMI_MBOX_MSGOUT_STATUSf_SET
#define READ_UC_RMI_EXT_INTR_STS0_GEN2r BCMI_TSCF_XGXS_READ_UC_RMI_EXT_INTR_STS0_GEN2r
#define WRITE_UC_RMI_EXT_INTR_STS0_GEN2r BCMI_TSCF_XGXS_WRITE_UC_RMI_EXT_INTR_STS0_GEN2r
#define MODIFY_UC_RMI_EXT_INTR_STS0_GEN2r BCMI_TSCF_XGXS_MODIFY_UC_RMI_EXT_INTR_STS0_GEN2r
#define READLN_UC_RMI_EXT_INTR_STS0_GEN2r BCMI_TSCF_XGXS_READLN_UC_RMI_EXT_INTR_STS0_GEN2r
#define WRITELN_UC_RMI_EXT_INTR_STS0_GEN2r BCMI_TSCF_XGXS_WRITELN_UC_RMI_EXT_INTR_STS0_GEN2r
#define WRITEALL_UC_RMI_EXT_INTR_STS0_GEN2r BCMI_TSCF_XGXS_WRITEALL_UC_RMI_EXT_INTR_STS0_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_UC_RMI_EXT_INTR_STS0_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  MDIO_MASKDATA_GEN2
 * BLOCKS:   MDIO_MMDSEL_AER_COM
 * REGADDR:  0xffdb
 * DEVAD:    1
 * DESC:     MDIO write mask register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MDIO_MASKDATA    mask register for masked writes from mdio port.
 */
#define BCMI_TSCF_XGXS_MDIO_MASKDATA_GEN2r (0x0001ffdb | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_MDIO_MASKDATA_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program MDIO_MASKDATA_GEN2.
 */
typedef union BCMI_TSCF_XGXS_MDIO_MASKDATA_GEN2r_s {
	uint32_t v[1];
	uint32_t mdio_maskdata_gen2[1];
	uint32_t _mdio_maskdata_gen2;
} BCMI_TSCF_XGXS_MDIO_MASKDATA_GEN2r_t;

#define BCMI_TSCF_XGXS_MDIO_MASKDATA_GEN2r_CLR(r) (r).mdio_maskdata_gen2[0] = 0
#define BCMI_TSCF_XGXS_MDIO_MASKDATA_GEN2r_SET(r,d) (r).mdio_maskdata_gen2[0] = d
#define BCMI_TSCF_XGXS_MDIO_MASKDATA_GEN2r_GET(r) (r).mdio_maskdata_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_MDIO_MASKDATA_GEN2r_MDIO_MASKDATAf_GET(r) (((r).mdio_maskdata_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_MDIO_MASKDATA_GEN2r_MDIO_MASKDATAf_SET(r,f) (r).mdio_maskdata_gen2[0]=(((r).mdio_maskdata_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access MDIO_MASKDATA_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_MDIO_MASKDATA_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_MDIO_MASKDATA_GEN2r,(_r._mdio_maskdata_gen2))
#define BCMI_TSCF_XGXS_WRITE_MDIO_MASKDATA_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_MDIO_MASKDATA_GEN2r,(_r._mdio_maskdata_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_MDIO_MASKDATA_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_MDIO_MASKDATA_GEN2r,(_r._mdio_maskdata_gen2))
#define BCMI_TSCF_XGXS_READLN_MDIO_MASKDATA_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_MDIO_MASKDATA_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._mdio_maskdata_gen2))
#define BCMI_TSCF_XGXS_WRITELN_MDIO_MASKDATA_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_MDIO_MASKDATA_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._mdio_maskdata_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_MDIO_MASKDATA_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_MDIO_MASKDATA_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._mdio_maskdata_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define MDIO_MASKDATA_GEN2r BCMI_TSCF_XGXS_MDIO_MASKDATA_GEN2r
#define MDIO_MASKDATA_GEN2r_SIZE BCMI_TSCF_XGXS_MDIO_MASKDATA_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_MDIO_MASKDATA_GEN2r_t MDIO_MASKDATA_GEN2r_t;
#define MDIO_MASKDATA_GEN2r_CLR BCMI_TSCF_XGXS_MDIO_MASKDATA_GEN2r_CLR
#define MDIO_MASKDATA_GEN2r_SET BCMI_TSCF_XGXS_MDIO_MASKDATA_GEN2r_SET
#define MDIO_MASKDATA_GEN2r_GET BCMI_TSCF_XGXS_MDIO_MASKDATA_GEN2r_GET
#define MDIO_MASKDATA_GEN2r_MDIO_MASKDATAf_GET BCMI_TSCF_XGXS_MDIO_MASKDATA_GEN2r_MDIO_MASKDATAf_GET
#define MDIO_MASKDATA_GEN2r_MDIO_MASKDATAf_SET BCMI_TSCF_XGXS_MDIO_MASKDATA_GEN2r_MDIO_MASKDATAf_SET
#define READ_MDIO_MASKDATA_GEN2r BCMI_TSCF_XGXS_READ_MDIO_MASKDATA_GEN2r
#define WRITE_MDIO_MASKDATA_GEN2r BCMI_TSCF_XGXS_WRITE_MDIO_MASKDATA_GEN2r
#define MODIFY_MDIO_MASKDATA_GEN2r BCMI_TSCF_XGXS_MODIFY_MDIO_MASKDATA_GEN2r
#define READLN_MDIO_MASKDATA_GEN2r BCMI_TSCF_XGXS_READLN_MDIO_MASKDATA_GEN2r
#define WRITELN_MDIO_MASKDATA_GEN2r BCMI_TSCF_XGXS_WRITELN_MDIO_MASKDATA_GEN2r
#define WRITEALL_MDIO_MASKDATA_GEN2r BCMI_TSCF_XGXS_WRITEALL_MDIO_MASKDATA_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_MDIO_MASKDATA_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  MDIO_BCST_PORT_ADDR_GEN2
 * BLOCKS:   MDIO_MMDSEL_AER_COM
 * REGADDR:  0xffdc
 * DEVAD:    1
 * DESC:     Broadcast Port Address
 * RESETVAL: 0x1f (31)
 * ACCESS:   R/W
 * FIELDS:
 *     MDIO_BRCST_PORT_ADDR Braodcast port address that can be used to broadcast mdio commandsto multiple controllers connected to the same mdio station manager
 */
#define BCMI_TSCF_XGXS_MDIO_BCST_PORT_ADDR_GEN2r (0x0001ffdc | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_MDIO_BCST_PORT_ADDR_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program MDIO_BCST_PORT_ADDR_GEN2.
 */
typedef union BCMI_TSCF_XGXS_MDIO_BCST_PORT_ADDR_GEN2r_s {
	uint32_t v[1];
	uint32_t mdio_bcst_port_addr_gen2[1];
	uint32_t _mdio_bcst_port_addr_gen2;
} BCMI_TSCF_XGXS_MDIO_BCST_PORT_ADDR_GEN2r_t;

#define BCMI_TSCF_XGXS_MDIO_BCST_PORT_ADDR_GEN2r_CLR(r) (r).mdio_bcst_port_addr_gen2[0] = 0
#define BCMI_TSCF_XGXS_MDIO_BCST_PORT_ADDR_GEN2r_SET(r,d) (r).mdio_bcst_port_addr_gen2[0] = d
#define BCMI_TSCF_XGXS_MDIO_BCST_PORT_ADDR_GEN2r_GET(r) (r).mdio_bcst_port_addr_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_MDIO_BCST_PORT_ADDR_GEN2r_MDIO_BRCST_PORT_ADDRf_GET(r) (((r).mdio_bcst_port_addr_gen2[0]) & 0x1f)
#define BCMI_TSCF_XGXS_MDIO_BCST_PORT_ADDR_GEN2r_MDIO_BRCST_PORT_ADDRf_SET(r,f) (r).mdio_bcst_port_addr_gen2[0]=(((r).mdio_bcst_port_addr_gen2[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access MDIO_BCST_PORT_ADDR_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_MDIO_BCST_PORT_ADDR_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_MDIO_BCST_PORT_ADDR_GEN2r,(_r._mdio_bcst_port_addr_gen2))
#define BCMI_TSCF_XGXS_WRITE_MDIO_BCST_PORT_ADDR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_MDIO_BCST_PORT_ADDR_GEN2r,(_r._mdio_bcst_port_addr_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_MDIO_BCST_PORT_ADDR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_MDIO_BCST_PORT_ADDR_GEN2r,(_r._mdio_bcst_port_addr_gen2))
#define BCMI_TSCF_XGXS_READLN_MDIO_BCST_PORT_ADDR_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_MDIO_BCST_PORT_ADDR_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._mdio_bcst_port_addr_gen2))
#define BCMI_TSCF_XGXS_WRITELN_MDIO_BCST_PORT_ADDR_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_MDIO_BCST_PORT_ADDR_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._mdio_bcst_port_addr_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_MDIO_BCST_PORT_ADDR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_MDIO_BCST_PORT_ADDR_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._mdio_bcst_port_addr_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define MDIO_BCST_PORT_ADDR_GEN2r BCMI_TSCF_XGXS_MDIO_BCST_PORT_ADDR_GEN2r
#define MDIO_BCST_PORT_ADDR_GEN2r_SIZE BCMI_TSCF_XGXS_MDIO_BCST_PORT_ADDR_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_MDIO_BCST_PORT_ADDR_GEN2r_t MDIO_BCST_PORT_ADDR_GEN2r_t;
#define MDIO_BCST_PORT_ADDR_GEN2r_CLR BCMI_TSCF_XGXS_MDIO_BCST_PORT_ADDR_GEN2r_CLR
#define MDIO_BCST_PORT_ADDR_GEN2r_SET BCMI_TSCF_XGXS_MDIO_BCST_PORT_ADDR_GEN2r_SET
#define MDIO_BCST_PORT_ADDR_GEN2r_GET BCMI_TSCF_XGXS_MDIO_BCST_PORT_ADDR_GEN2r_GET
#define MDIO_BCST_PORT_ADDR_GEN2r_MDIO_BRCST_PORT_ADDRf_GET BCMI_TSCF_XGXS_MDIO_BCST_PORT_ADDR_GEN2r_MDIO_BRCST_PORT_ADDRf_GET
#define MDIO_BCST_PORT_ADDR_GEN2r_MDIO_BRCST_PORT_ADDRf_SET BCMI_TSCF_XGXS_MDIO_BCST_PORT_ADDR_GEN2r_MDIO_BRCST_PORT_ADDRf_SET
#define READ_MDIO_BCST_PORT_ADDR_GEN2r BCMI_TSCF_XGXS_READ_MDIO_BCST_PORT_ADDR_GEN2r
#define WRITE_MDIO_BCST_PORT_ADDR_GEN2r BCMI_TSCF_XGXS_WRITE_MDIO_BCST_PORT_ADDR_GEN2r
#define MODIFY_MDIO_BCST_PORT_ADDR_GEN2r BCMI_TSCF_XGXS_MODIFY_MDIO_BCST_PORT_ADDR_GEN2r
#define READLN_MDIO_BCST_PORT_ADDR_GEN2r BCMI_TSCF_XGXS_READLN_MDIO_BCST_PORT_ADDR_GEN2r
#define WRITELN_MDIO_BCST_PORT_ADDR_GEN2r BCMI_TSCF_XGXS_WRITELN_MDIO_BCST_PORT_ADDR_GEN2r
#define WRITEALL_MDIO_BCST_PORT_ADDR_GEN2r BCMI_TSCF_XGXS_WRITEALL_MDIO_BCST_PORT_ADDR_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_MDIO_BCST_PORT_ADDR_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  MDIO_MMD_SEL_GEN2
 * BLOCKS:   MDIO_MMDSEL_AER_COM
 * REGADDR:  0xffdd
 * DEVAD:    1
 * DESC:     MMD Select
 * RESETVAL: 0x404d (16461)
 * ACCESS:   R/W
 * FIELDS:
 *     MDIO_DEV_CL22_EN When set and mdio_multi_mmds_en=1 then CL22 registers can be directlyaccessed through the MDIO serial data stream.
 *     MDIO_DEV_PMD_EN  When set and mdio_multi_mmds_en=1 then the PMD device=1 registers can be directlyaccessed through the MDIO serial data stream.
 *     MDIO_DEV_AN_EN   When set and mdio_multi_mmds_en=1 then the AN device=7 registers can be directlyaccessed through the MDIO serial data stream.
 *     MDIO_DEV_PHY_EN  When set and mdio_multi_mmds_en=1 then the PHY device=4 registers can be directlyaccessed through the MDIO serial data stream.
 *     MDIO_DEV_DTE_EN  When set and mdio_multi_mmds_en=1 then the DTE device=5 registers can be directlyaccessed through the MDIO serial data stream.
 *     MDIO_DEV_PCS_EN  When set and mdio_multi_mmds_en=1 then the PCS device=3 registers can be directlyaccessed through the MDIO serial data stream.
 *     MDIO_MULTI_MMDS_EN When set enables the multiple MMD functionality.  MD_ST is ignored andeach device can be accessed directly with the appropriate CL22 or CL45protocol.
 *     MDIO_MULTI_PRTS_EN When set enables multiple prtad functionality.  Each of the lanes'mmds can be accessed with consecutive PRTADs.  Lane 0 is accessedwith PRTAD_STRAP, lane 1 with PRTAD_STRAP+1, lane 2 with PRTAD_STRAP+2and lane 3 with PRTAD_STRAP+3.
 */
#define BCMI_TSCF_XGXS_MDIO_MMD_SEL_GEN2r (0x0001ffdd | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_MDIO_MMD_SEL_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program MDIO_MMD_SEL_GEN2.
 */
typedef union BCMI_TSCF_XGXS_MDIO_MMD_SEL_GEN2r_s {
	uint32_t v[1];
	uint32_t mdio_mmd_sel_gen2[1];
	uint32_t _mdio_mmd_sel_gen2;
} BCMI_TSCF_XGXS_MDIO_MMD_SEL_GEN2r_t;

#define BCMI_TSCF_XGXS_MDIO_MMD_SEL_GEN2r_CLR(r) (r).mdio_mmd_sel_gen2[0] = 0
#define BCMI_TSCF_XGXS_MDIO_MMD_SEL_GEN2r_SET(r,d) (r).mdio_mmd_sel_gen2[0] = d
#define BCMI_TSCF_XGXS_MDIO_MMD_SEL_GEN2r_GET(r) (r).mdio_mmd_sel_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_MDIO_MMD_SEL_GEN2r_MDIO_MULTI_PRTS_ENf_GET(r) ((((r).mdio_mmd_sel_gen2[0]) >> 15) & 0x1)
#define BCMI_TSCF_XGXS_MDIO_MMD_SEL_GEN2r_MDIO_MULTI_PRTS_ENf_SET(r,f) (r).mdio_mmd_sel_gen2[0]=(((r).mdio_mmd_sel_gen2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_TSCF_XGXS_MDIO_MMD_SEL_GEN2r_MDIO_MULTI_MMDS_ENf_GET(r) ((((r).mdio_mmd_sel_gen2[0]) >> 14) & 0x1)
#define BCMI_TSCF_XGXS_MDIO_MMD_SEL_GEN2r_MDIO_MULTI_MMDS_ENf_SET(r,f) (r).mdio_mmd_sel_gen2[0]=(((r).mdio_mmd_sel_gen2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_TSCF_XGXS_MDIO_MMD_SEL_GEN2r_MDIO_DEV_PCS_ENf_GET(r) ((((r).mdio_mmd_sel_gen2[0]) >> 6) & 0x1)
#define BCMI_TSCF_XGXS_MDIO_MMD_SEL_GEN2r_MDIO_DEV_PCS_ENf_SET(r,f) (r).mdio_mmd_sel_gen2[0]=(((r).mdio_mmd_sel_gen2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_TSCF_XGXS_MDIO_MMD_SEL_GEN2r_MDIO_DEV_DTE_ENf_GET(r) ((((r).mdio_mmd_sel_gen2[0]) >> 5) & 0x1)
#define BCMI_TSCF_XGXS_MDIO_MMD_SEL_GEN2r_MDIO_DEV_DTE_ENf_SET(r,f) (r).mdio_mmd_sel_gen2[0]=(((r).mdio_mmd_sel_gen2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_TSCF_XGXS_MDIO_MMD_SEL_GEN2r_MDIO_DEV_PHY_ENf_GET(r) ((((r).mdio_mmd_sel_gen2[0]) >> 4) & 0x1)
#define BCMI_TSCF_XGXS_MDIO_MMD_SEL_GEN2r_MDIO_DEV_PHY_ENf_SET(r,f) (r).mdio_mmd_sel_gen2[0]=(((r).mdio_mmd_sel_gen2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_TSCF_XGXS_MDIO_MMD_SEL_GEN2r_MDIO_DEV_AN_ENf_GET(r) ((((r).mdio_mmd_sel_gen2[0]) >> 3) & 0x1)
#define BCMI_TSCF_XGXS_MDIO_MMD_SEL_GEN2r_MDIO_DEV_AN_ENf_SET(r,f) (r).mdio_mmd_sel_gen2[0]=(((r).mdio_mmd_sel_gen2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_TSCF_XGXS_MDIO_MMD_SEL_GEN2r_MDIO_DEV_PMD_ENf_GET(r) ((((r).mdio_mmd_sel_gen2[0]) >> 2) & 0x1)
#define BCMI_TSCF_XGXS_MDIO_MMD_SEL_GEN2r_MDIO_DEV_PMD_ENf_SET(r,f) (r).mdio_mmd_sel_gen2[0]=(((r).mdio_mmd_sel_gen2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_TSCF_XGXS_MDIO_MMD_SEL_GEN2r_MDIO_DEV_CL22_ENf_GET(r) (((r).mdio_mmd_sel_gen2[0]) & 0x1)
#define BCMI_TSCF_XGXS_MDIO_MMD_SEL_GEN2r_MDIO_DEV_CL22_ENf_SET(r,f) (r).mdio_mmd_sel_gen2[0]=(((r).mdio_mmd_sel_gen2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access MDIO_MMD_SEL_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_MDIO_MMD_SEL_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_MDIO_MMD_SEL_GEN2r,(_r._mdio_mmd_sel_gen2))
#define BCMI_TSCF_XGXS_WRITE_MDIO_MMD_SEL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_MDIO_MMD_SEL_GEN2r,(_r._mdio_mmd_sel_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_MDIO_MMD_SEL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_MDIO_MMD_SEL_GEN2r,(_r._mdio_mmd_sel_gen2))
#define BCMI_TSCF_XGXS_READLN_MDIO_MMD_SEL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_MDIO_MMD_SEL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._mdio_mmd_sel_gen2))
#define BCMI_TSCF_XGXS_WRITELN_MDIO_MMD_SEL_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_MDIO_MMD_SEL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._mdio_mmd_sel_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_MDIO_MMD_SEL_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_MDIO_MMD_SEL_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._mdio_mmd_sel_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define MDIO_MMD_SEL_GEN2r BCMI_TSCF_XGXS_MDIO_MMD_SEL_GEN2r
#define MDIO_MMD_SEL_GEN2r_SIZE BCMI_TSCF_XGXS_MDIO_MMD_SEL_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_MDIO_MMD_SEL_GEN2r_t MDIO_MMD_SEL_GEN2r_t;
#define MDIO_MMD_SEL_GEN2r_CLR BCMI_TSCF_XGXS_MDIO_MMD_SEL_GEN2r_CLR
#define MDIO_MMD_SEL_GEN2r_SET BCMI_TSCF_XGXS_MDIO_MMD_SEL_GEN2r_SET
#define MDIO_MMD_SEL_GEN2r_GET BCMI_TSCF_XGXS_MDIO_MMD_SEL_GEN2r_GET
#define MDIO_MMD_SEL_GEN2r_MDIO_MULTI_PRTS_ENf_GET BCMI_TSCF_XGXS_MDIO_MMD_SEL_GEN2r_MDIO_MULTI_PRTS_ENf_GET
#define MDIO_MMD_SEL_GEN2r_MDIO_MULTI_PRTS_ENf_SET BCMI_TSCF_XGXS_MDIO_MMD_SEL_GEN2r_MDIO_MULTI_PRTS_ENf_SET
#define MDIO_MMD_SEL_GEN2r_MDIO_MULTI_MMDS_ENf_GET BCMI_TSCF_XGXS_MDIO_MMD_SEL_GEN2r_MDIO_MULTI_MMDS_ENf_GET
#define MDIO_MMD_SEL_GEN2r_MDIO_MULTI_MMDS_ENf_SET BCMI_TSCF_XGXS_MDIO_MMD_SEL_GEN2r_MDIO_MULTI_MMDS_ENf_SET
#define MDIO_MMD_SEL_GEN2r_MDIO_DEV_PCS_ENf_GET BCMI_TSCF_XGXS_MDIO_MMD_SEL_GEN2r_MDIO_DEV_PCS_ENf_GET
#define MDIO_MMD_SEL_GEN2r_MDIO_DEV_PCS_ENf_SET BCMI_TSCF_XGXS_MDIO_MMD_SEL_GEN2r_MDIO_DEV_PCS_ENf_SET
#define MDIO_MMD_SEL_GEN2r_MDIO_DEV_DTE_ENf_GET BCMI_TSCF_XGXS_MDIO_MMD_SEL_GEN2r_MDIO_DEV_DTE_ENf_GET
#define MDIO_MMD_SEL_GEN2r_MDIO_DEV_DTE_ENf_SET BCMI_TSCF_XGXS_MDIO_MMD_SEL_GEN2r_MDIO_DEV_DTE_ENf_SET
#define MDIO_MMD_SEL_GEN2r_MDIO_DEV_PHY_ENf_GET BCMI_TSCF_XGXS_MDIO_MMD_SEL_GEN2r_MDIO_DEV_PHY_ENf_GET
#define MDIO_MMD_SEL_GEN2r_MDIO_DEV_PHY_ENf_SET BCMI_TSCF_XGXS_MDIO_MMD_SEL_GEN2r_MDIO_DEV_PHY_ENf_SET
#define MDIO_MMD_SEL_GEN2r_MDIO_DEV_AN_ENf_GET BCMI_TSCF_XGXS_MDIO_MMD_SEL_GEN2r_MDIO_DEV_AN_ENf_GET
#define MDIO_MMD_SEL_GEN2r_MDIO_DEV_AN_ENf_SET BCMI_TSCF_XGXS_MDIO_MMD_SEL_GEN2r_MDIO_DEV_AN_ENf_SET
#define MDIO_MMD_SEL_GEN2r_MDIO_DEV_PMD_ENf_GET BCMI_TSCF_XGXS_MDIO_MMD_SEL_GEN2r_MDIO_DEV_PMD_ENf_GET
#define MDIO_MMD_SEL_GEN2r_MDIO_DEV_PMD_ENf_SET BCMI_TSCF_XGXS_MDIO_MMD_SEL_GEN2r_MDIO_DEV_PMD_ENf_SET
#define MDIO_MMD_SEL_GEN2r_MDIO_DEV_CL22_ENf_GET BCMI_TSCF_XGXS_MDIO_MMD_SEL_GEN2r_MDIO_DEV_CL22_ENf_GET
#define MDIO_MMD_SEL_GEN2r_MDIO_DEV_CL22_ENf_SET BCMI_TSCF_XGXS_MDIO_MMD_SEL_GEN2r_MDIO_DEV_CL22_ENf_SET
#define READ_MDIO_MMD_SEL_GEN2r BCMI_TSCF_XGXS_READ_MDIO_MMD_SEL_GEN2r
#define WRITE_MDIO_MMD_SEL_GEN2r BCMI_TSCF_XGXS_WRITE_MDIO_MMD_SEL_GEN2r
#define MODIFY_MDIO_MMD_SEL_GEN2r BCMI_TSCF_XGXS_MODIFY_MDIO_MMD_SEL_GEN2r
#define READLN_MDIO_MMD_SEL_GEN2r BCMI_TSCF_XGXS_READLN_MDIO_MMD_SEL_GEN2r
#define WRITELN_MDIO_MMD_SEL_GEN2r BCMI_TSCF_XGXS_WRITELN_MDIO_MMD_SEL_GEN2r
#define WRITEALL_MDIO_MMD_SEL_GEN2r BCMI_TSCF_XGXS_WRITEALL_MDIO_MMD_SEL_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_MDIO_MMD_SEL_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  MDIO_AER_GEN2
 * BLOCKS:   MDIO_MMDSEL_AER_COM
 * REGADDR:  0xffde
 * DEVAD:    1
 * DESC:     AER
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MDIO_AER         Provides upper 16-bits of 32-bit address for mdio transactions
 */
#define BCMI_TSCF_XGXS_MDIO_AER_GEN2r (0x0001ffde | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_MDIO_AER_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program MDIO_AER_GEN2.
 */
typedef union BCMI_TSCF_XGXS_MDIO_AER_GEN2r_s {
	uint32_t v[1];
	uint32_t mdio_aer_gen2[1];
	uint32_t _mdio_aer_gen2;
} BCMI_TSCF_XGXS_MDIO_AER_GEN2r_t;

#define BCMI_TSCF_XGXS_MDIO_AER_GEN2r_CLR(r) (r).mdio_aer_gen2[0] = 0
#define BCMI_TSCF_XGXS_MDIO_AER_GEN2r_SET(r,d) (r).mdio_aer_gen2[0] = d
#define BCMI_TSCF_XGXS_MDIO_AER_GEN2r_GET(r) (r).mdio_aer_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_MDIO_AER_GEN2r_MDIO_AERf_GET(r) (((r).mdio_aer_gen2[0]) & 0xffff)
#define BCMI_TSCF_XGXS_MDIO_AER_GEN2r_MDIO_AERf_SET(r,f) (r).mdio_aer_gen2[0]=(((r).mdio_aer_gen2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access MDIO_AER_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_MDIO_AER_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_MDIO_AER_GEN2r,(_r._mdio_aer_gen2))
#define BCMI_TSCF_XGXS_WRITE_MDIO_AER_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_MDIO_AER_GEN2r,(_r._mdio_aer_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_MDIO_AER_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_MDIO_AER_GEN2r,(_r._mdio_aer_gen2))
#define BCMI_TSCF_XGXS_READLN_MDIO_AER_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_MDIO_AER_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._mdio_aer_gen2))
#define BCMI_TSCF_XGXS_WRITELN_MDIO_AER_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_MDIO_AER_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._mdio_aer_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_MDIO_AER_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_MDIO_AER_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._mdio_aer_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define MDIO_AER_GEN2r BCMI_TSCF_XGXS_MDIO_AER_GEN2r
#define MDIO_AER_GEN2r_SIZE BCMI_TSCF_XGXS_MDIO_AER_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_MDIO_AER_GEN2r_t MDIO_AER_GEN2r_t;
#define MDIO_AER_GEN2r_CLR BCMI_TSCF_XGXS_MDIO_AER_GEN2r_CLR
#define MDIO_AER_GEN2r_SET BCMI_TSCF_XGXS_MDIO_AER_GEN2r_SET
#define MDIO_AER_GEN2r_GET BCMI_TSCF_XGXS_MDIO_AER_GEN2r_GET
#define MDIO_AER_GEN2r_MDIO_AERf_GET BCMI_TSCF_XGXS_MDIO_AER_GEN2r_MDIO_AERf_GET
#define MDIO_AER_GEN2r_MDIO_AERf_SET BCMI_TSCF_XGXS_MDIO_AER_GEN2r_MDIO_AERf_SET
#define READ_MDIO_AER_GEN2r BCMI_TSCF_XGXS_READ_MDIO_AER_GEN2r
#define WRITE_MDIO_AER_GEN2r BCMI_TSCF_XGXS_WRITE_MDIO_AER_GEN2r
#define MODIFY_MDIO_AER_GEN2r BCMI_TSCF_XGXS_MODIFY_MDIO_AER_GEN2r
#define READLN_MDIO_AER_GEN2r BCMI_TSCF_XGXS_READLN_MDIO_AER_GEN2r
#define WRITELN_MDIO_AER_GEN2r BCMI_TSCF_XGXS_WRITELN_MDIO_AER_GEN2r
#define WRITEALL_MDIO_AER_GEN2r BCMI_TSCF_XGXS_WRITEALL_MDIO_AER_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_MDIO_AER_GEN2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_TSCF_XGXS
 * REGISTER:  MDIO_BLK_ADDR_GEN2
 * BLOCKS:   MDIO_BLK_ADDR_COM
 * REGADDR:  0xffdf
 * DEVAD:    1
 * DESC:     BLK_ADDR
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MDIO_BLK_ADDR    Block address (used for clause 22 transactions to get the address bits 14:4)
 */
#define BCMI_TSCF_XGXS_MDIO_BLK_ADDR_GEN2r (0x0001ffdf | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_TSCF_XGXS_MDIO_BLK_ADDR_GEN2r_SIZE 4

/*
 * This structure should be used to declare and program MDIO_BLK_ADDR_GEN2.
 */
typedef union BCMI_TSCF_XGXS_MDIO_BLK_ADDR_GEN2r_s {
	uint32_t v[1];
	uint32_t mdio_blk_addr_gen2[1];
	uint32_t _mdio_blk_addr_gen2;
} BCMI_TSCF_XGXS_MDIO_BLK_ADDR_GEN2r_t;

#define BCMI_TSCF_XGXS_MDIO_BLK_ADDR_GEN2r_CLR(r) (r).mdio_blk_addr_gen2[0] = 0
#define BCMI_TSCF_XGXS_MDIO_BLK_ADDR_GEN2r_SET(r,d) (r).mdio_blk_addr_gen2[0] = d
#define BCMI_TSCF_XGXS_MDIO_BLK_ADDR_GEN2r_GET(r) (r).mdio_blk_addr_gen2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_TSCF_XGXS_MDIO_BLK_ADDR_GEN2r_MDIO_BLK_ADDRf_GET(r) ((((r).mdio_blk_addr_gen2[0]) >> 4) & 0x7ff)
#define BCMI_TSCF_XGXS_MDIO_BLK_ADDR_GEN2r_MDIO_BLK_ADDRf_SET(r,f) (r).mdio_blk_addr_gen2[0]=(((r).mdio_blk_addr_gen2[0] & ~((uint32_t)0x7ff << 4)) | ((((uint32_t)f) & 0x7ff) << 4)) | (2047 << (16 + 4))

/*
 * These macros can be used to access MDIO_BLK_ADDR_GEN2.
 */
#define BCMI_TSCF_XGXS_READ_MDIO_BLK_ADDR_GEN2r(_pc,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_MDIO_BLK_ADDR_GEN2r,(_r._mdio_blk_addr_gen2))
#define BCMI_TSCF_XGXS_WRITE_MDIO_BLK_ADDR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_MDIO_BLK_ADDR_GEN2r,(_r._mdio_blk_addr_gen2)&0xffff)
#define BCMI_TSCF_XGXS_MODIFY_MDIO_BLK_ADDR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_MDIO_BLK_ADDR_GEN2r,(_r._mdio_blk_addr_gen2))
#define BCMI_TSCF_XGXS_READLN_MDIO_BLK_ADDR_GEN2r(_pc,_l,_r) phymod_tsc_iblk_read(_pc,BCMI_TSCF_XGXS_MDIO_BLK_ADDR_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._mdio_blk_addr_gen2))
#define BCMI_TSCF_XGXS_WRITELN_MDIO_BLK_ADDR_GEN2r(_pc,_l,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_MDIO_BLK_ADDR_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._mdio_blk_addr_gen2))
#define BCMI_TSCF_XGXS_WRITEALL_MDIO_BLK_ADDR_GEN2r(_pc,_r) phymod_tsc_iblk_write(_pc,BCMI_TSCF_XGXS_MDIO_BLK_ADDR_GEN2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._mdio_blk_addr_gen2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define MDIO_BLK_ADDR_GEN2r BCMI_TSCF_XGXS_MDIO_BLK_ADDR_GEN2r
#define MDIO_BLK_ADDR_GEN2r_SIZE BCMI_TSCF_XGXS_MDIO_BLK_ADDR_GEN2r_SIZE
typedef BCMI_TSCF_XGXS_MDIO_BLK_ADDR_GEN2r_t MDIO_BLK_ADDR_GEN2r_t;
#define MDIO_BLK_ADDR_GEN2r_CLR BCMI_TSCF_XGXS_MDIO_BLK_ADDR_GEN2r_CLR
#define MDIO_BLK_ADDR_GEN2r_SET BCMI_TSCF_XGXS_MDIO_BLK_ADDR_GEN2r_SET
#define MDIO_BLK_ADDR_GEN2r_GET BCMI_TSCF_XGXS_MDIO_BLK_ADDR_GEN2r_GET
#define MDIO_BLK_ADDR_GEN2r_MDIO_BLK_ADDRf_GET BCMI_TSCF_XGXS_MDIO_BLK_ADDR_GEN2r_MDIO_BLK_ADDRf_GET
#define MDIO_BLK_ADDR_GEN2r_MDIO_BLK_ADDRf_SET BCMI_TSCF_XGXS_MDIO_BLK_ADDR_GEN2r_MDIO_BLK_ADDRf_SET
#define READ_MDIO_BLK_ADDR_GEN2r BCMI_TSCF_XGXS_READ_MDIO_BLK_ADDR_GEN2r
#define WRITE_MDIO_BLK_ADDR_GEN2r BCMI_TSCF_XGXS_WRITE_MDIO_BLK_ADDR_GEN2r
#define MODIFY_MDIO_BLK_ADDR_GEN2r BCMI_TSCF_XGXS_MODIFY_MDIO_BLK_ADDR_GEN2r
#define READLN_MDIO_BLK_ADDR_GEN2r BCMI_TSCF_XGXS_READLN_MDIO_BLK_ADDR_GEN2r
#define WRITELN_MDIO_BLK_ADDR_GEN2r BCMI_TSCF_XGXS_WRITELN_MDIO_BLK_ADDR_GEN2r
#define WRITEALL_MDIO_BLK_ADDR_GEN2r BCMI_TSCF_XGXS_WRITEALL_MDIO_BLK_ADDR_GEN2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_TSCF_XGXS_MDIO_BLK_ADDR_GEN2r'
 */




#endif /* __BCMI_TSCF_XGXS_GEN2_DEFS_H__ */
